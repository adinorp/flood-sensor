
erase_external_flash_slot1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004430  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004768  08004768  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004770  08004770  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000080  08004778  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200000f0  080047e8  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  080047e8  00020254  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acef  00000000  00000000  0002011a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003614  00000000  00000000  0003ae09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000eb0e  00000000  00000000  0003e41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  0004cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001480  00000000  00000000  0004dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c4c7  00000000  00000000  0004f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d2a4  00000000  00000000  0006b727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9567  00000000  00000000  000889cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131f32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c84  00000000  00000000  00131f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200000f0 	.word	0x200000f0
 8000154:	00000000 	.word	0x00000000
 8000158:	08004550 	.word	0x08004550

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200000f4 	.word	0x200000f4
 8000174:	08004550 	.word	0x08004550

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 800047c:	b510      	push	{r4, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	4604      	mov	r4, r0
	uint8_t c;

	c = (uint8_t) ch;
 8000482:	f88d 0007 	strb.w	r0, [sp, #7]

	if (HAL_UART_Transmit(&huart2, &c, 1, 100) == HAL_OK)
 8000486:	2364      	movs	r3, #100	; 0x64
 8000488:	2201      	movs	r2, #1
 800048a:	f10d 0107 	add.w	r1, sp, #7
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <__io_putchar+0x28>)
 8000490:	f003 f91e 	bl	80036d0 <HAL_UART_Transmit>
		return ch;
	else
		return -1;
 8000494:	2800      	cmp	r0, #0
	return -1;
}
 8000496:	bf0c      	ite	eq
 8000498:	4620      	moveq	r0, r4
 800049a:	f04f 30ff 	movne.w	r0, #4294967295
 800049e:	b002      	add	sp, #8
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	bf00      	nop
 80004a4:	200001a8 	.word	0x200001a8

080004a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004a8:	b510      	push	{r4, lr}
 80004aa:	b09a      	sub	sp, #104	; 0x68
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004ac:	2248      	movs	r2, #72	; 0x48
 80004ae:	2100      	movs	r1, #0
 80004b0:	a808      	add	r0, sp, #32
 80004b2:	f003 fbc6 	bl	8003c42 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004b6:	2400      	movs	r4, #0
 80004b8:	9402      	str	r4, [sp, #8]
 80004ba:	9403      	str	r4, [sp, #12]
 80004bc:	9404      	str	r4, [sp, #16]
 80004be:	9405      	str	r4, [sp, #20]
 80004c0:	9406      	str	r4, [sp, #24]
 80004c2:	9407      	str	r4, [sp, #28]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80004c4:	f000 fd34 	bl	8000f30 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80004c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80004d0:	f023 0318 	bic.w	r3, r3, #24
 80004d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80004dc:	6813      	ldr	r3, [r2, #0]
 80004de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
 80004e8:	6813      	ldr	r3, [r2, #0]
 80004ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	9b01      	ldr	r3, [sp, #4]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80004f2:	232e      	movs	r3, #46	; 0x2e
 80004f4:	9308      	str	r3, [sp, #32]
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80004f6:	2381      	movs	r3, #129	; 0x81
 80004f8:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004fe:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000500:	2301      	movs	r3, #1
 8000502:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000504:	2240      	movs	r2, #64	; 0x40
 8000506:	920d      	str	r2, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000508:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800050a:	22b0      	movs	r2, #176	; 0xb0
 800050c:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800050e:	940f      	str	r4, [sp, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000510:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000512:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000514:	a808      	add	r0, sp, #32
 8000516:	f000 fe31 	bl	800117c <HAL_RCC_OscConfig>
 800051a:	b970      	cbnz	r0, 800053a <SystemClock_Config+0x92>
		Error_Handler();
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 800051c:	234f      	movs	r3, #79	; 0x4f
 800051e:	9302      	str	r3, [sp, #8]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000520:	2300      	movs	r3, #0
 8000522:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000524:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000526:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000528:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800052a:	9307      	str	r3, [sp, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800052c:	2102      	movs	r1, #2
 800052e:	a802      	add	r0, sp, #8
 8000530:	f001 f950 	bl	80017d4 <HAL_RCC_ClockConfig>
 8000534:	b918      	cbnz	r0, 800053e <SystemClock_Config+0x96>
		Error_Handler();
	}
}
 8000536:	b01a      	add	sp, #104	; 0x68
 8000538:	bd10      	pop	{r4, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053a:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800053c:	e7fe      	b.n	800053c <SystemClock_Config+0x94>
 800053e:	b672      	cpsid	i
 8000540:	e7fe      	b.n	8000540 <SystemClock_Config+0x98>
	...

08000544 <main>:
int main(void) {
 8000544:	b500      	push	{lr}
 8000546:	b095      	sub	sp, #84	; 0x54
	HAL_Init();
 8000548:	f000 fb08 	bl	8000b5c <HAL_Init>
	SystemClock_Config();
 800054c:	f7ff ffac 	bl	80004a8 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000550:	2400      	movs	r4, #0
 8000552:	9409      	str	r4, [sp, #36]	; 0x24
 8000554:	940a      	str	r4, [sp, #40]	; 0x28
 8000556:	940b      	str	r4, [sp, #44]	; 0x2c
 8000558:	940c      	str	r4, [sp, #48]	; 0x30
 800055a:	940d      	str	r4, [sp, #52]	; 0x34
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000562:	f042 0201 	orr.w	r2, r2, #1
 8000566:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056a:	f002 0201 	and.w	r2, r2, #1
 800056e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000570:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000574:	f042 0204 	orr.w	r2, r2, #4
 8000578:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800057a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800057c:	f002 0204 	and.w	r2, r2, #4
 8000580:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000582:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000586:	f042 0202 	orr.w	r2, r2, #2
 800058a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000594:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOB, FLASH_CS_Pin | LED_Pin, GPIO_PIN_RESET);
 8000596:	4e95      	ldr	r6, [pc, #596]	; (80007ec <main+0x2a8>)
 8000598:	4622      	mov	r2, r4
 800059a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800059e:	4630      	mov	r0, r6
 80005a0:	f000 fcc0 	bl	8000f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EXT_PWR_GPIO_Port, EXT_PWR_Pin, GPIO_PIN_RESET);
 80005a4:	4622      	mov	r2, r4
 80005a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f000 fcb9 	bl	8000f24 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = FLASH_CS_Pin | LED_Pin;
 80005b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80005b6:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2501      	movs	r5, #1
 80005ba:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	940c      	str	r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	a909      	add	r1, sp, #36	; 0x24
 80005c2:	4630      	mov	r0, r6
 80005c4:	f000 fbe4 	bl	8000d90 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EXT_PWR_Pin;
 80005c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005cc:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	940c      	str	r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(EXT_PWR_GPIO_Port, &GPIO_InitStruct);
 80005d4:	a909      	add	r1, sp, #36	; 0x24
 80005d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005da:	f000 fbd9 	bl	8000d90 <HAL_GPIO_Init>
	huart2.Instance = USART2;
 80005de:	4884      	ldr	r0, [pc, #528]	; (80007f0 <main+0x2ac>)
 80005e0:	4b84      	ldr	r3, [pc, #528]	; (80007f4 <main+0x2b0>)
 80005e2:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 80005e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005e8:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	6084      	str	r4, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005ec:	60c4      	str	r4, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005ee:	6104      	str	r4, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005f0:	230c      	movs	r3, #12
 80005f2:	6143      	str	r3, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f4:	6184      	str	r4, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f6:	61c4      	str	r4, [r0, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f8:	6204      	str	r4, [r0, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005fa:	6244      	str	r4, [r0, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fc:	6284      	str	r4, [r0, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80005fe:	f003 f90b 	bl	8003818 <HAL_UART_Init>
 8000602:	2800      	cmp	r0, #0
 8000604:	f040 80e0 	bne.w	80007c8 <main+0x284>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000608:	2100      	movs	r1, #0
 800060a:	4879      	ldr	r0, [pc, #484]	; (80007f0 <main+0x2ac>)
 800060c:	f003 f980 	bl	8003910 <HAL_UARTEx_SetTxFifoThreshold>
 8000610:	2800      	cmp	r0, #0
 8000612:	f040 80db 	bne.w	80007cc <main+0x288>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000616:	2100      	movs	r1, #0
 8000618:	4875      	ldr	r0, [pc, #468]	; (80007f0 <main+0x2ac>)
 800061a:	f003 f99e 	bl	800395a <HAL_UARTEx_SetRxFifoThreshold>
 800061e:	2800      	cmp	r0, #0
 8000620:	f040 80d6 	bne.w	80007d0 <main+0x28c>
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000624:	4872      	ldr	r0, [pc, #456]	; (80007f0 <main+0x2ac>)
 8000626:	f003 f954 	bl	80038d2 <HAL_UARTEx_DisableFifoMode>
 800062a:	2800      	cmp	r0, #0
 800062c:	f040 80d2 	bne.w	80007d4 <main+0x290>
	RTC_TimeTypeDef sTime = { 0 };
 8000630:	2400      	movs	r4, #0
 8000632:	9404      	str	r4, [sp, #16]
 8000634:	9405      	str	r4, [sp, #20]
 8000636:	9406      	str	r4, [sp, #24]
 8000638:	9407      	str	r4, [sp, #28]
 800063a:	9408      	str	r4, [sp, #32]
	RTC_DateTypeDef sDate = { 0 };
 800063c:	9400      	str	r4, [sp, #0]
	RTC_AlarmTypeDef sAlarm = { 0 };
 800063e:	222c      	movs	r2, #44	; 0x2c
 8000640:	4621      	mov	r1, r4
 8000642:	a809      	add	r0, sp, #36	; 0x24
 8000644:	f003 fafd 	bl	8003c42 <memset>
	hrtc.Instance = RTC;
 8000648:	486b      	ldr	r0, [pc, #428]	; (80007f8 <main+0x2b4>)
 800064a:	4b6c      	ldr	r3, [pc, #432]	; (80007fc <main+0x2b8>)
 800064c:	6003      	str	r3, [r0, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800064e:	6044      	str	r4, [r0, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000650:	237f      	movs	r3, #127	; 0x7f
 8000652:	6083      	str	r3, [r0, #8]
	hrtc.Init.SynchPrediv = 255;
 8000654:	23ff      	movs	r3, #255	; 0xff
 8000656:	60c3      	str	r3, [r0, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000658:	6104      	str	r4, [r0, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800065a:	6144      	str	r4, [r0, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800065c:	6184      	str	r4, [r0, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800065e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000662:	61c3      	str	r3, [r0, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000664:	6204      	str	r4, [r0, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000666:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000668:	f001 fb92 	bl	8001d90 <HAL_RTC_Init>
 800066c:	2800      	cmp	r0, #0
 800066e:	f040 80b3 	bne.w	80007d8 <main+0x294>
	sTime.Hours = 0x0;
 8000672:	2300      	movs	r3, #0
 8000674:	f88d 3010 	strb.w	r3, [sp, #16]
	sTime.Minutes = 0x0;
 8000678:	f88d 3011 	strb.w	r3, [sp, #17]
	sTime.Seconds = 0x0;
 800067c:	f88d 3012 	strb.w	r3, [sp, #18]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000680:	9307      	str	r3, [sp, #28]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000682:	9308      	str	r3, [sp, #32]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000684:	2201      	movs	r2, #1
 8000686:	a904      	add	r1, sp, #16
 8000688:	485b      	ldr	r0, [pc, #364]	; (80007f8 <main+0x2b4>)
 800068a:	f001 fbe9 	bl	8001e60 <HAL_RTC_SetTime>
 800068e:	2800      	cmp	r0, #0
 8000690:	f040 80a4 	bne.w	80007dc <main+0x298>
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000694:	2201      	movs	r2, #1
 8000696:	f88d 2000 	strb.w	r2, [sp]
	sDate.Month = RTC_MONTH_JANUARY;
 800069a:	f88d 2001 	strb.w	r2, [sp, #1]
	sDate.Date = 0x1;
 800069e:	f88d 2002 	strb.w	r2, [sp, #2]
	sDate.Year = 0x0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f88d 3003 	strb.w	r3, [sp, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80006a8:	4669      	mov	r1, sp
 80006aa:	4853      	ldr	r0, [pc, #332]	; (80007f8 <main+0x2b4>)
 80006ac:	f001 fc46 	bl	8001f3c <HAL_RTC_SetDate>
 80006b0:	2800      	cmp	r0, #0
 80006b2:	f040 8095 	bne.w	80007e0 <main+0x29c>
	sAlarm.AlarmTime.Hours = 0x0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	sAlarm.AlarmTime.Minutes = 0x0;
 80006bc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	sAlarm.AlarmTime.Seconds = 0x0;
 80006c0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80006c4:	930a      	str	r3, [sp, #40]	; 0x28
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006c6:	930c      	str	r3, [sp, #48]	; 0x30
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006c8:	930d      	str	r3, [sp, #52]	; 0x34
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80006ca:	930e      	str	r3, [sp, #56]	; 0x38
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80006cc:	930f      	str	r3, [sp, #60]	; 0x3c
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006ce:	9311      	str	r3, [sp, #68]	; 0x44
	sAlarm.AlarmDateWeekDay = 0x1;
 80006d0:	2201      	movs	r2, #1
 80006d2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	sAlarm.Alarm = RTC_ALARM_A;
 80006d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006da:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80006dc:	a909      	add	r1, sp, #36	; 0x24
 80006de:	4846      	ldr	r0, [pc, #280]	; (80007f8 <main+0x2b4>)
 80006e0:	f001 fc84 	bl	8001fec <HAL_RTC_SetAlarm>
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d17d      	bne.n	80007e4 <main+0x2a0>
	hspi2.Instance = SPI2;
 80006e8:	4845      	ldr	r0, [pc, #276]	; (8000800 <main+0x2bc>)
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <main+0x2c0>)
 80006ec:	6003      	str	r3, [r0, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ee:	f44f 7382 	mov.w	r3, #260	; 0x104
 80006f2:	6043      	str	r3, [r0, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006f4:	2300      	movs	r3, #0
 80006f6:	6083      	str	r3, [r0, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006fc:	60c2      	str	r2, [r0, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fe:	6103      	str	r3, [r0, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	6143      	str	r3, [r0, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000706:	6182      	str	r2, [r0, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000708:	61c3      	str	r3, [r0, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070a:	6203      	str	r3, [r0, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800070c:	6243      	str	r3, [r0, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800070e:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000710:	2207      	movs	r2, #7
 8000712:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000714:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000716:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000718:	f001 fe88 	bl	800242c <HAL_SPI_Init>
 800071c:	2800      	cmp	r0, #0
 800071e:	d163      	bne.n	80007e8 <main+0x2a4>
	fprintf(stderr, "\r\n");
 8000720:	4c39      	ldr	r4, [pc, #228]	; (8000808 <main+0x2c4>)
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	4d39      	ldr	r5, [pc, #228]	; (800080c <main+0x2c8>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	2202      	movs	r2, #2
 800072a:	2101      	movs	r1, #1
 800072c:	4628      	mov	r0, r5
 800072e:	f003 fa53 	bl	8003bd8 <fwrite>
	fprintf(stderr, "******************************\r\n");
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	4e36      	ldr	r6, [pc, #216]	; (8000810 <main+0x2cc>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	2220      	movs	r2, #32
 800073a:	2101      	movs	r1, #1
 800073c:	4630      	mov	r0, r6
 800073e:	f003 fa4b 	bl	8003bd8 <fwrite>
	fprintf(stderr, "**** External Flash eraser ***\r\n");
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	2220      	movs	r2, #32
 8000748:	2101      	movs	r1, #1
 800074a:	4832      	ldr	r0, [pc, #200]	; (8000814 <main+0x2d0>)
 800074c:	f003 fa44 	bl	8003bd8 <fwrite>
	fprintf(stderr, "******************************\r\n");
 8000750:	6823      	ldr	r3, [r4, #0]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	2220      	movs	r2, #32
 8000756:	2101      	movs	r1, #1
 8000758:	4630      	mov	r0, r6
 800075a:	f003 fa3d 	bl	8003bd8 <fwrite>
	fprintf(stderr, "- MODE : Erase Slot1\r\n");
 800075e:	6823      	ldr	r3, [r4, #0]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	2216      	movs	r2, #22
 8000764:	2101      	movs	r1, #1
 8000766:	482c      	ldr	r0, [pc, #176]	; (8000818 <main+0x2d4>)
 8000768:	f003 fa36 	bl	8003bd8 <fwrite>
	fprintf(stderr, "\r\n");
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	2202      	movs	r2, #2
 8000772:	2101      	movs	r1, #1
 8000774:	4628      	mov	r0, r5
 8000776:	f003 fa2f 	bl	8003bd8 <fwrite>
	fprintf(stderr, "Initializing external flash low level driver...\r\n");
 800077a:	6823      	ldr	r3, [r4, #0]
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	2231      	movs	r2, #49	; 0x31
 8000780:	2101      	movs	r1, #1
 8000782:	4826      	ldr	r0, [pc, #152]	; (800081c <main+0x2d8>)
 8000784:	f003 fa28 	bl	8003bd8 <fwrite>
	Flash__Init();
 8000788:	f003 f948 	bl	8003a1c <Flash__Init>
	fprintf(stderr, "Erasing external flash memory slot 1...\r\n");
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	2229      	movs	r2, #41	; 0x29
 8000792:	2101      	movs	r1, #1
 8000794:	4822      	ldr	r0, [pc, #136]	; (8000820 <main+0x2dc>)
 8000796:	f003 fa1f 	bl	8003bd8 <fwrite>
	Flash__BlockErase64k(0x00000000);
 800079a:	2000      	movs	r0, #0
 800079c:	f003 f964 	bl	8003a68 <Flash__BlockErase64k>
	Flash__BlockErase64k(0x00010000);
 80007a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80007a4:	f003 f960 	bl	8003a68 <Flash__BlockErase64k>
	Flash__BlockErase64k(0x00020000);
 80007a8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007ac:	f003 f95c 	bl	8003a68 <Flash__BlockErase64k>
	Flash__BlockErase64k(0x00030000);
 80007b0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80007b4:	f003 f958 	bl	8003a68 <Flash__BlockErase64k>
	fprintf(stderr, "Done.\r\n");
 80007b8:	6823      	ldr	r3, [r4, #0]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	2207      	movs	r2, #7
 80007be:	2101      	movs	r1, #1
 80007c0:	4818      	ldr	r0, [pc, #96]	; (8000824 <main+0x2e0>)
 80007c2:	f003 fa09 	bl	8003bd8 <fwrite>
	while (1) {
 80007c6:	e7fe      	b.n	80007c6 <main+0x282>
 80007c8:	b672      	cpsid	i
	while (1) {
 80007ca:	e7fe      	b.n	80007ca <main+0x286>
 80007cc:	b672      	cpsid	i
 80007ce:	e7fe      	b.n	80007ce <main+0x28a>
 80007d0:	b672      	cpsid	i
 80007d2:	e7fe      	b.n	80007d2 <main+0x28e>
 80007d4:	b672      	cpsid	i
 80007d6:	e7fe      	b.n	80007d6 <main+0x292>
 80007d8:	b672      	cpsid	i
 80007da:	e7fe      	b.n	80007da <main+0x296>
 80007dc:	b672      	cpsid	i
 80007de:	e7fe      	b.n	80007de <main+0x29a>
 80007e0:	b672      	cpsid	i
 80007e2:	e7fe      	b.n	80007e2 <main+0x29e>
 80007e4:	b672      	cpsid	i
 80007e6:	e7fe      	b.n	80007e6 <main+0x2a2>
 80007e8:	b672      	cpsid	i
 80007ea:	e7fe      	b.n	80007ea <main+0x2a6>
 80007ec:	48000400 	.word	0x48000400
 80007f0:	200001a8 	.word	0x200001a8
 80007f4:	40004400 	.word	0x40004400
 80007f8:	2000010c 	.word	0x2000010c
 80007fc:	40002800 	.word	0x40002800
 8000800:	20000144 	.word	0x20000144
 8000804:	40003800 	.word	0x40003800
 8000808:	2000008c 	.word	0x2000008c
 800080c:	080045d0 	.word	0x080045d0
 8000810:	08004574 	.word	0x08004574
 8000814:	08004598 	.word	0x08004598
 8000818:	080045bc 	.word	0x080045bc
 800081c:	080045d4 	.word	0x080045d4
 8000820:	08004608 	.word	0x08004608
 8000824:	08004634 	.word	0x08004634

08000828 <Get_SpiHandle>:
}
 8000828:	4800      	ldr	r0, [pc, #0]	; (800082c <Get_SpiHandle+0x4>)
 800082a:	4770      	bx	lr
 800082c:	20000144 	.word	0x20000144

08000830 <Error_Handler>:
 8000830:	b672      	cpsid	i
	while (1) {
 8000832:	e7fe      	b.n	8000832 <Error_Handler+0x2>

08000834 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000834:	4770      	bx	lr
	...

08000838 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000838:	b510      	push	{r4, lr}
 800083a:	b090      	sub	sp, #64	; 0x40
 800083c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083e:	2238      	movs	r2, #56	; 0x38
 8000840:	2100      	movs	r1, #0
 8000842:	a802      	add	r0, sp, #8
 8000844:	f003 f9fd 	bl	8003c42 <memset>
  if(hrtc->Instance==RTC)
 8000848:	6822      	ldr	r2, [r4, #0]
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_RTC_MspInit+0x5c>)
 800084c:	429a      	cmp	r2, r3
 800084e:	d001      	beq.n	8000854 <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000850:	b010      	add	sp, #64	; 0x40
 8000852:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000858:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800085a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800085e:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000860:	a802      	add	r0, sp, #8
 8000862:	f001 f8eb 	bl	8001a3c <HAL_RCCEx_PeriphCLKConfig>
 8000866:	b988      	cbnz	r0, 800088c <HAL_RTC_MspInit+0x54>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800087a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800087e:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000886:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000888:	9b01      	ldr	r3, [sp, #4]
}
 800088a:	e7e1      	b.n	8000850 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 800088c:	f7ff ffd0 	bl	8000830 <Error_Handler>
 8000890:	e7ea      	b.n	8000868 <HAL_RTC_MspInit+0x30>
 8000892:	bf00      	nop
 8000894:	40002800 	.word	0x40002800

08000898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089a:	b097      	sub	sp, #92	; 0x5c
 800089c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	2100      	movs	r1, #0
 80008a0:	9111      	str	r1, [sp, #68]	; 0x44
 80008a2:	9112      	str	r1, [sp, #72]	; 0x48
 80008a4:	9113      	str	r1, [sp, #76]	; 0x4c
 80008a6:	9114      	str	r1, [sp, #80]	; 0x50
 80008a8:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008aa:	2238      	movs	r2, #56	; 0x38
 80008ac:	a803      	add	r0, sp, #12
 80008ae:	f003 f9c8 	bl	8003c42 <memset>
  if(hspi->Instance==SPI2)
 80008b2:	6822      	ldr	r2, [r4, #0]
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <HAL_SPI_MspInit+0xb4>)
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d001      	beq.n	80008be <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008ba:	b017      	add	sp, #92	; 0x5c
 80008bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80008be:	2310      	movs	r3, #16
 80008c0:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80008c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c6:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c8:	a803      	add	r0, sp, #12
 80008ca:	f001 f8b7 	bl	8001a3c <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	2800      	cmp	r0, #0
 80008d0:	d138      	bne.n	8000944 <HAL_SPI_MspInit+0xac>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008dc:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008e0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008e4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80008e6:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008ea:	f042 0202 	orr.w	r2, r2, #2
 80008ee:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008f2:	f002 0202 	and.w	r2, r2, #2
 80008f6:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80008f8:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008fc:	f042 0201 	orr.w	r2, r2, #1
 8000900:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800090a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800090c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000910:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2702      	movs	r7, #2
 8000914:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000916:	2601      	movs	r6, #1
 8000918:	9613      	str	r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2500      	movs	r5, #0
 800091c:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091e:	2405      	movs	r4, #5
 8000920:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	a911      	add	r1, sp, #68	; 0x44
 8000924:	480a      	ldr	r0, [pc, #40]	; (8000950 <HAL_SPI_MspInit+0xb8>)
 8000926:	f000 fa33 	bl	8000d90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800092a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092e:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000932:	9613      	str	r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000936:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	a911      	add	r1, sp, #68	; 0x44
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f000 fa27 	bl	8000d90 <HAL_GPIO_Init>
}
 8000942:	e7ba      	b.n	80008ba <HAL_SPI_MspInit+0x22>
      Error_Handler();
 8000944:	f7ff ff74 	bl	8000830 <Error_Handler>
 8000948:	e7c3      	b.n	80008d2 <HAL_SPI_MspInit+0x3a>
 800094a:	bf00      	nop
 800094c:	40003800 	.word	0x40003800
 8000950:	48000400 	.word	0x48000400

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b510      	push	{r4, lr}
 8000956:	b096      	sub	sp, #88	; 0x58
 8000958:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	2100      	movs	r1, #0
 800095c:	9111      	str	r1, [sp, #68]	; 0x44
 800095e:	9112      	str	r1, [sp, #72]	; 0x48
 8000960:	9113      	str	r1, [sp, #76]	; 0x4c
 8000962:	9114      	str	r1, [sp, #80]	; 0x50
 8000964:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000966:	2238      	movs	r2, #56	; 0x38
 8000968:	a803      	add	r0, sp, #12
 800096a:	f003 f96a 	bl	8003c42 <memset>
  if(huart->Instance==USART2)
 800096e:	6822      	ldr	r2, [r4, #0]
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <HAL_UART_MspInit+0x94>)
 8000972:	429a      	cmp	r2, r3
 8000974:	d001      	beq.n	800097a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000976:	b016      	add	sp, #88	; 0x58
 8000978:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800097a:	2302      	movs	r3, #2
 800097c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800097e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000982:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000984:	a803      	add	r0, sp, #12
 8000986:	f001 f859 	bl	8001a3c <HAL_RCCEx_PeriphCLKConfig>
 800098a:	bb50      	cbnz	r0, 80009e2 <HAL_UART_MspInit+0x8e>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800098c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000990:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000992:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000996:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000998:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800099a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800099e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80009a0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009a4:	f042 0201 	orr.w	r2, r2, #1
 80009a8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80009b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80009b4:	230c      	movs	r3, #12
 80009b6:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2400      	movs	r4, #0
 80009be:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	9414      	str	r4, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c2:	2307      	movs	r3, #7
 80009c4:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	a911      	add	r1, sp, #68	; 0x44
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f000 f9e0 	bl	8000d90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009d0:	4622      	mov	r2, r4
 80009d2:	4621      	mov	r1, r4
 80009d4:	2025      	movs	r0, #37	; 0x25
 80009d6:	f000 f90f 	bl	8000bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009da:	2025      	movs	r0, #37	; 0x25
 80009dc:	f000 f942 	bl	8000c64 <HAL_NVIC_EnableIRQ>
}
 80009e0:	e7c9      	b.n	8000976 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80009e2:	f7ff ff25 	bl	8000830 <Error_Handler>
 80009e6:	e7d1      	b.n	800098c <HAL_UART_MspInit+0x38>
 80009e8:	40004400 	.word	0x40004400

080009ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler>

080009ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler>

080009f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler>

080009f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler>

080009f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler>

080009f6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fe:	f000 f8c3 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bd08      	pop	{r3, pc}

08000a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a06:	4802      	ldr	r0, [pc, #8]	; (8000a10 <USART2_IRQHandler+0xc>)
 8000a08:	f002 fa5a 	bl	8002ec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0c:	bd08      	pop	{r3, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001a8 	.word	0x200001a8

08000a14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a14:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	1e16      	subs	r6, r2, #0
 8000a18:	dd07      	ble.n	8000a2a <_read+0x16>
 8000a1a:	460c      	mov	r4, r1
 8000a1c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	42a5      	cmp	r5, r4
 8000a28:	d1f9      	bne.n	8000a1e <_read+0xa>
  }

  return len;
}
 8000a2a:	4630      	mov	r0, r6
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}

08000a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2e:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a30:	1e16      	subs	r6, r2, #0
 8000a32:	dd07      	ble.n	8000a44 <_write+0x16>
 8000a34:	460c      	mov	r4, r1
 8000a36:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8000a38:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000a3c:	f7ff fd1e 	bl	800047c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	42a5      	cmp	r5, r4
 8000a42:	d1f9      	bne.n	8000a38 <_write+0xa>
  }
  return len;
}
 8000a44:	4630      	mov	r0, r6
 8000a46:	bd70      	pop	{r4, r5, r6, pc}

08000a48 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	4770      	bx	lr

08000a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000a4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a52:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000a54:	2000      	movs	r0, #0
 8000a56:	4770      	bx	lr

08000a58 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000a58:	2001      	movs	r0, #1
 8000a5a:	4770      	bx	lr

08000a5c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	4770      	bx	lr

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b508      	push	{r3, lr}
 8000a62:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <_sbrk+0x38>)
 8000a66:	6812      	ldr	r2, [r2, #0]
 8000a68:	b152      	cbz	r2, 8000a80 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <_sbrk+0x38>)
 8000a6c:	6810      	ldr	r0, [r2, #0]
 8000a6e:	4403      	add	r3, r0
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <_sbrk+0x3c>)
 8000a72:	490b      	ldr	r1, [pc, #44]	; (8000aa0 <_sbrk+0x40>)
 8000a74:	1a52      	subs	r2, r2, r1
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d806      	bhi.n	8000a88 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <_sbrk+0x38>)
 8000a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000a7e:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8000a80:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <_sbrk+0x38>)
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <_sbrk+0x44>)
 8000a84:	6011      	str	r1, [r2, #0]
 8000a86:	e7f0      	b.n	8000a6a <_sbrk+0xa>
    errno = ENOMEM;
 8000a88:	f003 f840 	bl	8003b0c <__errno>
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	e7f3      	b.n	8000a7e <_sbrk+0x1e>
 8000a96:	bf00      	nop
 8000a98:	2000023c 	.word	0x2000023c
 8000a9c:	20010000 	.word	0x20010000
 8000aa0:	00000400 	.word	0x00000400
 8000aa4:	20000258 	.word	0x20000258

08000aa8 <SystemInit>:
  */
void SystemInit(void)
{
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <SystemInit+0xc>)
 8000aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aae:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000abc:	f7ff fff4 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae6:	f003 f885 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aea:	f7ff fd2b 	bl	8000544 <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   r0, =_estack
 8000af0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000af4:	20000080 	.word	0x20000080
  ldr r1, =_edata
 8000af8:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8000afc:	08004778 	.word	0x08004778
  ldr r2, =_sbss
 8000b00:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8000b04:	20000254 	.word	0x20000254

08000b08 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_InitTick+0x48>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b90b      	cbnz	r3, 8000b16 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b12:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000b14:	4770      	bx	lr
{
 8000b16:	b510      	push	{r4, lr}
 8000b18:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b1a:	f000 fb1f 	bl	800115c <HAL_RCC_GetHCLKFreq>
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_InitTick+0x48>)
 8000b20:	781a      	ldrb	r2, [r3, #0]
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b2a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b2e:	f000 f8a7 	bl	8000c80 <HAL_SYSTICK_Config>
 8000b32:	b968      	cbnz	r0, 8000b50 <HAL_InitTick+0x44>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b34:	2c0f      	cmp	r4, #15
 8000b36:	d901      	bls.n	8000b3c <HAL_InitTick+0x30>
        status = HAL_ERROR;
 8000b38:	2001      	movs	r0, #1
 8000b3a:	e00a      	b.n	8000b52 <HAL_InitTick+0x46>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4621      	mov	r1, r4
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 f858 	bl	8000bf8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_InitTick+0x4c>)
 8000b4a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e000      	b.n	8000b52 <HAL_InitTick+0x46>
      status = HAL_ERROR;
 8000b50:	2001      	movs	r0, #1
}
 8000b52:	bd10      	pop	{r4, pc}
 8000b54:	20000084 	.word	0x20000084
 8000b58:	20000088 	.word	0x20000088

08000b5c <HAL_Init>:
{
 8000b5c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f838 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000b64:	f000 fafa 	bl	800115c <HAL_RCC_GetHCLKFreq>
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_Init+0x28>)
 8000b6a:	6018      	str	r0, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6c:	200f      	movs	r0, #15
 8000b6e:	f7ff ffcd 	bl	8000b0c <HAL_InitTick>
 8000b72:	b110      	cbz	r0, 8000b7a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8000b74:	2401      	movs	r4, #1
}
 8000b76:	4620      	mov	r0, r4
 8000b78:	bd10      	pop	{r4, pc}
 8000b7a:	4604      	mov	r4, r0
    HAL_MspInit();
 8000b7c:	f7ff fe5a 	bl	8000834 <HAL_MspInit>
 8000b80:	e7f9      	b.n	8000b76 <HAL_Init+0x1a>
 8000b82:	bf00      	nop
 8000b84:	20000080 	.word	0x20000080

08000b88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <HAL_IncTick+0x10>)
 8000b8a:	6811      	ldr	r1, [r2, #0]
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_IncTick+0x14>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	440b      	add	r3, r1
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000240 	.word	0x20000240
 8000b9c:	20000084 	.word	0x20000084

08000ba0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ba0:	4b01      	ldr	r3, [pc, #4]	; (8000ba8 <HAL_GetTick+0x8>)
 8000ba2:	6818      	ldr	r0, [r3, #0]
}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000240 	.word	0x20000240

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b538      	push	{r3, r4, r5, lr}
 8000bae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff fff6 	bl	8000ba0 <HAL_GetTick>
 8000bb4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000bba:	d002      	beq.n	8000bc2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bbc:	4b04      	ldr	r3, [pc, #16]	; (8000bd0 <HAL_Delay+0x24>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bc2:	f7ff ffed 	bl	8000ba0 <HAL_GetTick>
 8000bc6:	1b40      	subs	r0, r0, r5
 8000bc8:	42a0      	cmp	r0, r4
 8000bca:	d3fa      	bcc.n	8000bc2 <HAL_Delay+0x16>
  {
  }
}
 8000bcc:	bd38      	pop	{r3, r4, r5, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000084 	.word	0x20000084

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bd6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	0203      	lsls	r3, r0, #8
 8000bda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000be2:	0412      	lsls	r2, r2, #16
 8000be4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bf0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_NVIC_SetPriority+0x64>)
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c02:	f1c3 0c07 	rsb	ip, r3, #7
 8000c06:	f1bc 0f04 	cmp.w	ip, #4
 8000c0a:	bf28      	it	cs
 8000c0c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c10:	f103 0e04 	add.w	lr, r3, #4
 8000c14:	f1be 0f06 	cmp.w	lr, #6
 8000c18:	bf8c      	ite	hi
 8000c1a:	3b03      	subhi	r3, #3
 8000c1c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1e:	f04f 3eff 	mov.w	lr, #4294967295
 8000c22:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000c26:	ea21 010c 	bic.w	r1, r1, ip
 8000c2a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	fa0e f303 	lsl.w	r3, lr, r3
 8000c30:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000c36:	2800      	cmp	r0, #0
 8000c38:	db09      	blt.n	8000c4e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	0109      	lsls	r1, r1, #4
 8000c3c:	b2c9      	uxtb	r1, r1
 8000c3e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c42:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c46:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c4a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	f000 000f 	and.w	r0, r0, #15
 8000c52:	0109      	lsls	r1, r1, #4
 8000c54:	b2c9      	uxtb	r1, r1
 8000c56:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <HAL_NVIC_SetPriority+0x68>)
 8000c58:	5419      	strb	r1, [r3, r0]
 8000c5a:	e7f6      	b.n	8000c4a <HAL_NVIC_SetPriority+0x52>
 8000c5c:	e000ed00 	.word	0xe000ed00
 8000c60:	e000ed14 	.word	0xe000ed14

08000c64 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c64:	2800      	cmp	r0, #0
 8000c66:	db08      	blt.n	8000c7a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c68:	0942      	lsrs	r2, r0, #5
 8000c6a:	f000 001f 	and.w	r0, r0, #31
 8000c6e:	2301      	movs	r3, #1
 8000c70:	fa03 f000 	lsl.w	r0, r3, r0
 8000c74:	4b01      	ldr	r3, [pc, #4]	; (8000c7c <HAL_NVIC_EnableIRQ+0x18>)
 8000c76:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	3801      	subs	r0, #1
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d20b      	bcs.n	8000ca0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000c8c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <HAL_SYSTICK_Config+0x24>)
 8000c90:	21f0      	movs	r1, #240	; 0xf0
 8000c92:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c96:	2000      	movs	r0, #0
 8000c98:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ca0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <HAL_DMA_Abort>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2800      	cmp	r0, #0
 8000cac:	d034      	beq.n	8000d18 <HAL_DMA_Abort+0x70>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000cae:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	2a02      	cmp	r2, #2
 8000cb6:	d006      	beq.n	8000cc6 <HAL_DMA_Abort+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb8:	2204      	movs	r2, #4
 8000cba:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cc6:	6801      	ldr	r1, [r0, #0]
 8000cc8:	680a      	ldr	r2, [r1, #0]
 8000cca:	f022 020e 	bic.w	r2, r2, #14
 8000cce:	600a      	str	r2, [r1, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cd0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000cd2:	680a      	ldr	r2, [r1, #0]
 8000cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cd8:	600a      	str	r2, [r1, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cda:	6801      	ldr	r1, [r0, #0]
 8000cdc:	680a      	ldr	r2, [r1, #0]
 8000cde:	f022 0201 	bic.w	r2, r2, #1
 8000ce2:	600a      	str	r2, [r1, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ce4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8000ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ce8:	f002 011c 	and.w	r1, r2, #28
 8000cec:	2201      	movs	r2, #1
 8000cee:	408a      	lsls	r2, r1
 8000cf0:	6042      	str	r2, [r0, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cf4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000cf6:	6051      	str	r1, [r2, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000cf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000cfa:	b132      	cbz	r2, 8000d0a <HAL_DMA_Abort+0x62>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cfc:	6811      	ldr	r1, [r2, #0]
 8000cfe:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000d02:	6011      	str	r1, [r2, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d06:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000d08:	6051      	str	r1, [r2, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000d16:	4770      	bx	lr
    return HAL_ERROR;
 8000d18:	2001      	movs	r0, #1
}
 8000d1a:	4770      	bx	lr

08000d1c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d1c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d1e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d003      	beq.n	8000d30 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000d2c:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000d2e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d30:	6802      	ldr	r2, [r0, #0]
 8000d32:	6813      	ldr	r3, [r2, #0]
 8000d34:	f023 030e 	bic.w	r3, r3, #14
 8000d38:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000d3a:	6802      	ldr	r2, [r0, #0]
 8000d3c:	6813      	ldr	r3, [r2, #0]
 8000d3e:	f023 0301 	bic.w	r3, r3, #1
 8000d42:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d44:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000d46:	6813      	ldr	r3, [r2, #0]
 8000d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d4c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d4e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000d50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d52:	f003 021c 	and.w	r2, r3, #28
 8000d56:	2301      	movs	r3, #1
 8000d58:	4093      	lsls	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d5c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000d5e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000d60:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8000d62:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000d64:	b133      	cbz	r3, 8000d74 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d6c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d6e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000d70:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000d72:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000d74:	2301      	movs	r3, #1
 8000d76:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8000d80:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000d82:	b113      	cbz	r3, 8000d8a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8000d84:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d86:	2000      	movs	r0, #0
 8000d88:	e7d1      	b.n	8000d2e <HAL_DMA_Abort_IT+0x12>
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	e7cf      	b.n	8000d2e <HAL_DMA_Abort_IT+0x12>
	...

08000d90 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d90:	680b      	ldr	r3, [r1, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80c0 	beq.w	8000f18 <HAL_GPIO_Init+0x188>
{
 8000d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9c:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 8000da0:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da2:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000da4:	f04f 0e03 	mov.w	lr, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000da8:	2607      	movs	r6, #7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000daa:	4c5c      	ldr	r4, [pc, #368]	; (8000f1c <HAL_GPIO_Init+0x18c>)
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dac:	f04f 080f 	mov.w	r8, #15
 8000db0:	e050      	b.n	8000e54 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->OSPEEDR;
 8000db2:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000db4:	fa0e fa0c 	lsl.w	sl, lr, ip
 8000db8:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dbc:	68cb      	ldr	r3, [r1, #12]
 8000dbe:	fa03 f30c 	lsl.w	r3, r3, ip
 8000dc2:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8000dc6:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dc8:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dca:	ea23 0a07 	bic.w	sl, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dce:	684b      	ldr	r3, [r1, #4]
 8000dd0:	f3c3 1700 	ubfx	r7, r3, #4, #1
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8000dda:	6047      	str	r7, [r0, #4]
 8000ddc:	e045      	b.n	8000e6a <HAL_GPIO_Init+0xda>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dde:	2700      	movs	r7, #0
 8000de0:	fa07 f70b 	lsl.w	r7, r7, fp
 8000de4:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de8:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 8000dea:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
 8000dec:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000df4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000df8:	bf0c      	ite	eq
 8000dfa:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8000dfc:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8000e00:	6023      	str	r3, [r4, #0]

        temp = EXTI->FTSR1;
 8000e02:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e04:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000e08:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8000e0c:	bf0c      	ite	eq
 8000e0e:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8000e10:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 8000e14:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000e16:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e1a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000e1e:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000e22:	bf0c      	ite	eq
 8000e24:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8000e26:	ea49 0303 	orrne.w	r3, r9, r3
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000e2a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000e2e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e32:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000e36:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000e3a:	bf0c      	ite	eq
 8000e3c:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 8000e3e:	ea49 0703 	orrne.w	r7, r9, r3
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000e42:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000e46:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e48:	680b      	ldr	r3, [r1, #0]
 8000e4a:	f10c 0c02 	add.w	ip, ip, #2
 8000e4e:	fa33 f702 	lsrs.w	r7, r3, r2
 8000e52:	d05f      	beq.n	8000f14 <HAL_GPIO_Init+0x184>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e54:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 8000e58:	ea17 0903 	ands.w	r9, r7, r3
 8000e5c:	d0f3      	beq.n	8000e46 <HAL_GPIO_Init+0xb6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e5e:	684b      	ldr	r3, [r1, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	3b01      	subs	r3, #1
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d9a3      	bls.n	8000db2 <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6a:	684b      	ldr	r3, [r1, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d020      	beq.n	8000eb6 <HAL_GPIO_Init+0x126>
        temp = GPIOx->PUPDR;
 8000e74:	68c3      	ldr	r3, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e76:	fa0e f70c 	lsl.w	r7, lr, ip
 8000e7a:	ea23 0707 	bic.w	r7, r3, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7e:	688b      	ldr	r3, [r1, #8]
 8000e80:	fa03 f30c 	lsl.w	r3, r3, ip
 8000e84:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 8000e86:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e88:	684b      	ldr	r3, [r1, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d111      	bne.n	8000eb6 <HAL_GPIO_Init+0x126>
        temp = GPIOx->AFR[position >> 3U];
 8000e92:	08d7      	lsrs	r7, r2, #3
 8000e94:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8000e98:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e9a:	f002 0b07 	and.w	fp, r2, #7
 8000e9e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ea2:	fa08 fa0b 	lsl.w	sl, r8, fp
 8000ea6:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eaa:	690b      	ldr	r3, [r1, #16]
 8000eac:	fa03 f30b 	lsl.w	r3, r3, fp
 8000eb0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 8000eb4:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 8000eb6:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eb8:	fa0e f70c 	lsl.w	r7, lr, ip
 8000ebc:	ea23 0707 	bic.w	r7, r3, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec0:	684b      	ldr	r3, [r1, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	fa03 f30c 	lsl.w	r3, r3, ip
 8000eca:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8000ecc:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ece:	684b      	ldr	r3, [r1, #4]
 8000ed0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8000ed4:	d0b7      	beq.n	8000e46 <HAL_GPIO_Init+0xb6>
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed6:	f022 0303 	bic.w	r3, r2, #3
 8000eda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ede:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000ee2:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000ee4:	f002 0b03 	and.w	fp, r2, #3
 8000ee8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000eec:	fa06 fa0b 	lsl.w	sl, r6, fp
 8000ef0:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ef4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000ef8:	f43f af71 	beq.w	8000dde <HAL_GPIO_Init+0x4e>
 8000efc:	4f08      	ldr	r7, [pc, #32]	; (8000f20 <HAL_GPIO_Init+0x190>)
 8000efe:	42b8      	cmp	r0, r7
 8000f00:	d006      	beq.n	8000f10 <HAL_GPIO_Init+0x180>
 8000f02:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000f06:	42b8      	cmp	r0, r7
 8000f08:	bf0c      	ite	eq
 8000f0a:	2702      	moveq	r7, #2
 8000f0c:	2707      	movne	r7, #7
 8000f0e:	e767      	b.n	8000de0 <HAL_GPIO_Init+0x50>
 8000f10:	462f      	mov	r7, r5
 8000f12:	e765      	b.n	8000de0 <HAL_GPIO_Init+0x50>
  }
}
 8000f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	58000800 	.word	0x58000800
 8000f20:	48000400 	.word	0x48000400

08000f24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f24:	b10a      	cbz	r2, 8000f2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f26:	6181      	str	r1, [r0, #24]
 8000f28:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f2a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000f2c:	4770      	bx	lr
	...

08000f30 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f30:	4a02      	ldr	r2, [pc, #8]	; (8000f3c <HAL_PWR_EnableBkUpAccess+0xc>)
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	4770      	bx	lr
 8000f3c:	58000400 	.word	0x58000400

08000f40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <HAL_PWREx_GetVoltageRange+0xc>)
 8000f42:	6818      	ldr	r0, [r3, #0]
}
 8000f44:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	58000400 	.word	0x58000400

08000f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8000f50:	b570      	push	{r4, r5, r6, lr}
 8000f52:	b084      	sub	sp, #16
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8000f5c:	f3c0 1003 	ubfx	r0, r0, #4, #4
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8000f60:	f003 030f 	and.w	r3, r3, #15
 8000f64:	4a30      	ldr	r2, [pc, #192]	; (8001028 <RCC_SetFlashLatencyFromMSIRange+0xd8>)
 8000f66:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8000f6a:	4a30      	ldr	r2, [pc, #192]	; (800102c <RCC_SetFlashLatencyFromMSIRange+0xdc>)
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	fbb4 f4f3 	udiv	r4, r4, r3

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8000f74:	f7ff ffe4 	bl	8000f40 <HAL_PWREx_GetVoltageRange>
 8000f78:	4605      	mov	r5, r0

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8000f7a:	4b2d      	ldr	r3, [pc, #180]	; (8001030 <RCC_SetFlashLatencyFromMSIRange+0xe0>)
 8000f7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f80:	ab04      	add	r3, sp, #16
 8000f82:	e903 0007 	stmdb	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f86:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000f8a:	d027      	beq.n	8000fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <RCC_SetFlashLatencyFromMSIRange+0xe4>)
 8000f8e:	429c      	cmp	r4, r3
 8000f90:	d33d      	bcc.n	800100e <RCC_SetFlashLatencyFromMSIRange+0xbe>
 8000f92:	f503 03b7 	add.w	r3, r3, #5996544	; 0x5b8000
 8000f96:	f603 537f 	addw	r3, r3, #3455	; 0xd7f
 8000f9a:	429c      	cmp	r4, r3
 8000f9c:	d93e      	bls.n	800101c <RCC_SetFlashLatencyFromMSIRange+0xcc>
 8000f9e:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 8000fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000fa6:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8000fa8:	bf98      	it	ls
 8000faa:	2302      	movls	r3, #2
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8000fac:	d930      	bls.n	8001010 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8000fae:	2500      	movs	r5, #0
        break;
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	f023 0307 	bic.w	r3, r3, #7
 8000fb8:	432b      	orrs	r3, r5
 8000fba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000fbc:	f7ff fdf0 	bl	8000ba0 <HAL_GetTick>
 8000fc0:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8000fc2:	4e1d      	ldr	r6, [pc, #116]	; (8001038 <RCC_SetFlashLatencyFromMSIRange+0xe8>)
 8000fc4:	6833      	ldr	r3, [r6, #0]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	429d      	cmp	r5, r3
 8000fcc:	d028      	beq.n	8001020 <RCC_SetFlashLatencyFromMSIRange+0xd0>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8000fce:	f7ff fde7 	bl	8000ba0 <HAL_GetTick>
 8000fd2:	1b00      	subs	r0, r0, r4
 8000fd4:	2802      	cmp	r0, #2
 8000fd6:	d9f5      	bls.n	8000fc4 <RCC_SetFlashLatencyFromMSIRange+0x74>
    {
      return HAL_TIMEOUT;
 8000fd8:	2003      	movs	r0, #3
 8000fda:	e022      	b.n	8001022 <RCC_SetFlashLatencyFromMSIRange+0xd2>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <RCC_SetFlashLatencyFromMSIRange+0xec>)
 8000fde:	429c      	cmp	r4, r3
 8000fe0:	d90c      	bls.n	8000ffc <RCC_SetFlashLatencyFromMSIRange+0xac>
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <RCC_SetFlashLatencyFromMSIRange+0xf0>)
 8000fe4:	429c      	cmp	r4, r3
 8000fe6:	d910      	bls.n	800100a <RCC_SetFlashLatencyFromMSIRange+0xba>
 8000fe8:	f503 0337 	add.w	r3, r3, #11993088	; 0xb70000
 8000fec:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 8000ff0:	429c      	cmp	r4, r3
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8000ff2:	bf98      	it	ls
 8000ff4:	2302      	movls	r3, #2
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8000ff6:	d902      	bls.n	8000ffe <RCC_SetFlashLatencyFromMSIRange+0xae>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8000ff8:	2500      	movs	r5, #0
 8000ffa:	e7d9      	b.n	8000fb0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8000ffc:	2300      	movs	r3, #0
        latency = FLASH_LATENCY_RANGE[index];
 8000ffe:	aa04      	add	r2, sp, #16
 8001000:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001004:	f853 5c0c 	ldr.w	r5, [r3, #-12]
        break;
 8001008:	e7d2      	b.n	8000fb0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800100a:	2301      	movs	r3, #1
 800100c:	e7f7      	b.n	8000ffe <RCC_SetFlashLatencyFromMSIRange+0xae>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800100e:	2300      	movs	r3, #0
        latency = FLASH_LATENCY_RANGE[index];
 8001010:	aa04      	add	r2, sp, #16
 8001012:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001016:	f853 5c0c 	ldr.w	r5, [r3, #-12]
        break;
 800101a:	e7c9      	b.n	8000fb0 <RCC_SetFlashLatencyFromMSIRange+0x60>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800101c:	2301      	movs	r3, #1
 800101e:	e7f7      	b.n	8001010 <RCC_SetFlashLatencyFromMSIRange+0xc0>
    }
  }
  return HAL_OK;
 8001020:	2000      	movs	r0, #0
}
 8001022:	b004      	add	sp, #16
 8001024:	bd70      	pop	{r4, r5, r6, pc}
 8001026:	bf00      	nop
 8001028:	0800469c 	.word	0x0800469c
 800102c:	0800463c 	.word	0x0800463c
 8001030:	08004568 	.word	0x08004568
 8001034:	006acfc0 	.word	0x006acfc0
 8001038:	58004000 	.word	0x58004000
 800103c:	0121eabf 	.word	0x0121eabf
 8001040:	0234933f 	.word	0x0234933f

08001044 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001048:	6893      	ldr	r3, [r2, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800104a:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800104c:	f013 030c 	ands.w	r3, r3, #12
 8001050:	d015      	beq.n	800107e <HAL_RCC_GetSysClockFreq+0x3a>
 8001052:	2b0c      	cmp	r3, #12
 8001054:	d00c      	beq.n	8001070 <HAL_RCC_GetSysClockFreq+0x2c>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001056:	2b04      	cmp	r3, #4
 8001058:	d04a      	beq.n	80010f0 <HAL_RCC_GetSysClockFreq+0xac>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800105a:	2b08      	cmp	r3, #8
 800105c:	d14b      	bne.n	80010f6 <HAL_RCC_GetSysClockFreq+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800105e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8001068:	d048      	beq.n	80010fc <HAL_RCC_GetSysClockFreq+0xb8>
  uint32_t msifreq = 0U;
 800106a:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800106c:	4838      	ldr	r0, [pc, #224]	; (8001150 <HAL_RCC_GetSysClockFreq+0x10c>)
 800106e:	e02d      	b.n	80010cc <HAL_RCC_GetSysClockFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001070:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001074:	2a01      	cmp	r2, #1
 8001076:	d002      	beq.n	800107e <HAL_RCC_GetSysClockFreq+0x3a>
  uint32_t msifreq = 0U;
 8001078:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 800107a:	4610      	mov	r0, r2
 800107c:	e026      	b.n	80010cc <HAL_RCC_GetSysClockFreq+0x88>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800107e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	f012 0208 	ands.w	r2, r2, #8
 8001088:	d00d      	beq.n	80010a6 <HAL_RCC_GetSysClockFreq+0x62>
 800108a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800108e:	6812      	ldr	r2, [r2, #0]
 8001090:	f012 0208 	ands.w	r2, r2, #8
 8001094:	d126      	bne.n	80010e4 <HAL_RCC_GetSysClockFreq+0xa0>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800109a:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800109e:	492d      	ldr	r1, [pc, #180]	; (8001154 <HAL_RCC_GetSysClockFreq+0x110>)
 80010a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010a4:	e00e      	b.n	80010c4 <HAL_RCC_GetSysClockFreq+0x80>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80010a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010aa:	6809      	ldr	r1, [r1, #0]
 80010ac:	f011 0f08 	tst.w	r1, #8
 80010b0:	d114      	bne.n	80010dc <HAL_RCC_GetSysClockFreq+0x98>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80010b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010b6:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80010ba:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80010be:	4925      	ldr	r1, [pc, #148]	; (8001154 <HAL_RCC_GetSysClockFreq+0x110>)
 80010c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      sysclockfreq = msifreq;
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bf0c      	ite	eq
 80010c8:	4610      	moveq	r0, r2
 80010ca:	2000      	movne	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d6:	2b0c      	cmp	r3, #12
 80010d8:	d012      	beq.n	8001100 <HAL_RCC_GetSysClockFreq+0xbc>
}
 80010da:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80010dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010e0:	6809      	ldr	r1, [r1, #0]
 80010e2:	e7ec      	b.n	80010be <HAL_RCC_GetSysClockFreq+0x7a>
 80010e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e8:	6812      	ldr	r2, [r2, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80010ea:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80010ee:	e7d6      	b.n	800109e <HAL_RCC_GetSysClockFreq+0x5a>
  uint32_t msifreq = 0U;
 80010f0:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80010f2:	4817      	ldr	r0, [pc, #92]	; (8001150 <HAL_RCC_GetSysClockFreq+0x10c>)
 80010f4:	e7ea      	b.n	80010cc <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t msifreq = 0U;
 80010f6:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80010f8:	4610      	mov	r0, r2
 80010fa:	e7e7      	b.n	80010cc <HAL_RCC_GetSysClockFreq+0x88>
      sysclockfreq = HSE_VALUE;
 80010fc:	4816      	ldr	r0, [pc, #88]	; (8001158 <HAL_RCC_GetSysClockFreq+0x114>)
 80010fe:	e7e5      	b.n	80010cc <HAL_RCC_GetSysClockFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800110a:	2b02      	cmp	r3, #2
 800110c:	d01d      	beq.n	800114a <HAL_RCC_GetSysClockFreq+0x106>
 800110e:	2b03      	cmp	r3, #3
 8001110:	d108      	bne.n	8001124 <HAL_RCC_GetSysClockFreq+0xe0>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001116:	681b      	ldr	r3, [r3, #0]
          pllinputfreq = HSE_VALUE / 2U;
 8001118:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800111c:	480e      	ldr	r0, [pc, #56]	; (8001158 <HAL_RCC_GetSysClockFreq+0x114>)
 800111e:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001120:	bf08      	it	eq
 8001122:	4602      	moveq	r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001128:	68d8      	ldr	r0, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800112a:	68d9      	ldr	r1, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800112c:	68db      	ldr	r3, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800112e:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001132:	fb02 f000 	mul.w	r0, r2, r0
 8001136:	f3c1 1202 	ubfx	r2, r1, #4, #3
 800113a:	3201      	adds	r2, #1
 800113c:	fbb0 f0f2 	udiv	r0, r0, r2
 8001140:	0f5b      	lsrs	r3, r3, #29
 8001142:	3301      	adds	r3, #1
 8001144:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8001148:	e7c7      	b.n	80010da <HAL_RCC_GetSysClockFreq+0x96>
        pllinputfreq = HSI_VALUE;
 800114a:	4a01      	ldr	r2, [pc, #4]	; (8001150 <HAL_RCC_GetSysClockFreq+0x10c>)
 800114c:	e7ea      	b.n	8001124 <HAL_RCC_GetSysClockFreq+0xe0>
 800114e:	bf00      	nop
 8001150:	00f42400 	.word	0x00f42400
 8001154:	0800469c 	.word	0x0800469c
 8001158:	01e84800 	.word	0x01e84800

0800115c <HAL_RCC_GetHCLKFreq>:
{
 800115c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800115e:	f7ff ff71 	bl	8001044 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800116c:	4a02      	ldr	r2, [pc, #8]	; (8001178 <HAL_RCC_GetHCLKFreq+0x1c>)
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001172:	fbb0 f0f3 	udiv	r0, r0, r3
 8001176:	bd08      	pop	{r3, pc}
 8001178:	0800463c 	.word	0x0800463c

0800117c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800117c:	2800      	cmp	r0, #0
 800117e:	f000 830b 	beq.w	8001798 <HAL_RCC_OscConfig+0x61c>
{
 8001182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001186:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118c:	689d      	ldr	r5, [r3, #8]
 800118e:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001192:	68de      	ldr	r6, [r3, #12]
 8001194:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001198:	6803      	ldr	r3, [r0, #0]
 800119a:	f013 0f20 	tst.w	r3, #32
 800119e:	d02b      	beq.n	80011f8 <HAL_RCC_OscConfig+0x7c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80011a0:	2d00      	cmp	r5, #0
 80011a2:	d067      	beq.n	8001274 <HAL_RCC_OscConfig+0xf8>
 80011a4:	2d0c      	cmp	r5, #12
 80011a6:	d063      	beq.n	8001270 <HAL_RCC_OscConfig+0xf4>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011a8:	6a23      	ldr	r3, [r4, #32]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80bc 	beq.w	8001328 <HAL_RCC_OscConfig+0x1ac>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80011b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011b4:	6813      	ldr	r3, [r2, #0]
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011bc:	f7ff fcf0 	bl	8000ba0 <HAL_GetTick>
 80011c0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80011c2:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 80011c6:	f8d8 3000 	ldr.w	r3, [r8]
 80011ca:	f013 0f02 	tst.w	r3, #2
 80011ce:	f000 80a3 	beq.w	8001318 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	f042 0208 	orr.w	r2, r2, #8
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011ee:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80011f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80011f6:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	f013 0f01 	tst.w	r3, #1
 80011fe:	f000 80b2 	beq.w	8001366 <HAL_RCC_OscConfig+0x1ea>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001202:	2d08      	cmp	r5, #8
 8001204:	f000 80ab 	beq.w	800135e <HAL_RCC_OscConfig+0x1e2>
 8001208:	2d0c      	cmp	r5, #12
 800120a:	f000 80a5 	beq.w	8001358 <HAL_RCC_OscConfig+0x1dc>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800120e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001218:	68a1      	ldr	r1, [r4, #8]
 800121a:	430b      	orrs	r3, r1
 800121c:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121e:	6863      	ldr	r3, [r4, #4]
 8001220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001224:	f000 80c1 	beq.w	80013aa <HAL_RCC_OscConfig+0x22e>
 8001228:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800122c:	f000 80c2 	beq.w	80013b4 <HAL_RCC_OscConfig+0x238>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800123a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001242:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	6863      	ldr	r3, [r4, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80bf 	beq.w	80013ca <HAL_RCC_OscConfig+0x24e>
        tickstart = HAL_GetTick();
 800124c:	f7ff fca8 	bl	8000ba0 <HAL_GetTick>
 8001250:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001252:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 8001256:	f8d8 3000 	ldr.w	r3, [r8]
 800125a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800125e:	f040 8082 	bne.w	8001366 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001262:	f7ff fc9d 	bl	8000ba0 <HAL_GetTick>
 8001266:	1bc0      	subs	r0, r0, r7
 8001268:	2864      	cmp	r0, #100	; 0x64
 800126a:	d9f4      	bls.n	8001256 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 800126c:	2003      	movs	r0, #3
 800126e:	e2a0      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001270:	2e01      	cmp	r6, #1
 8001272:	d199      	bne.n	80011a8 <HAL_RCC_OscConfig+0x2c>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001274:	6a23      	ldr	r3, [r4, #32]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8290 	beq.w	800179c <HAL_RCC_OscConfig+0x620>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800127c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800127e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f013 0f08 	tst.w	r3, #8
 8001288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128c:	bf12      	itee	ne
 800128e:	681b      	ldrne	r3, [r3, #0]
 8001290:	f8d3 3094 	ldreq.w	r3, [r3, #148]	; 0x94
 8001294:	091b      	lsreq	r3, r3, #4
 8001296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800129a:	4298      	cmp	r0, r3
 800129c:	d922      	bls.n	80012e4 <HAL_RCC_OscConfig+0x168>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129e:	f7ff fe57 	bl	8000f50 <RCC_SetFlashLatencyFromMSIRange>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	f040 827c 	bne.w	80017a0 <HAL_RCC_OscConfig+0x624>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f042 0208 	orr.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80012bc:	430a      	orrs	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012c4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80012c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80012cc:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80012ce:	f7ff ff45 	bl	800115c <HAL_RCC_GetHCLKFreq>
 80012d2:	4bb6      	ldr	r3, [pc, #728]	; (80015ac <HAL_RCC_OscConfig+0x430>)
 80012d4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80012d6:	4bb6      	ldr	r3, [pc, #728]	; (80015b0 <HAL_RCC_OscConfig+0x434>)
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	f7ff fc17 	bl	8000b0c <HAL_InitTick>
        if (status != HAL_OK)
 80012de:	2800      	cmp	r0, #0
 80012e0:	d08a      	beq.n	80011f8 <HAL_RCC_OscConfig+0x7c>
 80012e2:	e266      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	f042 0208 	orr.w	r2, r2, #8
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001300:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001304:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001308:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800130c:	f7ff fe20 	bl	8000f50 <RCC_SetFlashLatencyFromMSIRange>
 8001310:	2800      	cmp	r0, #0
 8001312:	d0dc      	beq.n	80012ce <HAL_RCC_OscConfig+0x152>
            return HAL_ERROR;
 8001314:	2001      	movs	r0, #1
 8001316:	e24c      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001318:	f7ff fc42 	bl	8000ba0 <HAL_GetTick>
 800131c:	1bc0      	subs	r0, r0, r7
 800131e:	2802      	cmp	r0, #2
 8001320:	f67f af51 	bls.w	80011c6 <HAL_RCC_OscConfig+0x4a>
            return HAL_TIMEOUT;
 8001324:	2003      	movs	r0, #3
 8001326:	e244      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800132c:	6813      	ldr	r3, [r2, #0]
 800132e:	f023 0301 	bic.w	r3, r3, #1
 8001332:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001334:	f7ff fc34 	bl	8000ba0 <HAL_GetTick>
 8001338:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800133a:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 800133e:	f8d8 3000 	ldr.w	r3, [r8]
 8001342:	f013 0f02 	tst.w	r3, #2
 8001346:	f43f af57 	beq.w	80011f8 <HAL_RCC_OscConfig+0x7c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134a:	f7ff fc29 	bl	8000ba0 <HAL_GetTick>
 800134e:	1bc0      	subs	r0, r0, r7
 8001350:	2802      	cmp	r0, #2
 8001352:	d9f4      	bls.n	800133e <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8001354:	2003      	movs	r0, #3
 8001356:	e22c      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001358:	2e03      	cmp	r6, #3
 800135a:	f47f af58 	bne.w	800120e <HAL_RCC_OscConfig+0x92>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800135e:	6863      	ldr	r3, [r4, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 821f 	beq.w	80017a4 <HAL_RCC_OscConfig+0x628>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	f013 0f02 	tst.w	r3, #2
 800136c:	d057      	beq.n	800141e <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800136e:	2d04      	cmp	r5, #4
 8001370:	d03e      	beq.n	80013f0 <HAL_RCC_OscConfig+0x274>
 8001372:	2d0c      	cmp	r5, #12
 8001374:	d03a      	beq.n	80013ec <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001376:	6923      	ldr	r3, [r4, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 808b 	beq.w	8001494 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800137e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001382:	6813      	ldr	r3, [r2, #0]
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800138a:	f7ff fc09 	bl	8000ba0 <HAL_GetTick>
 800138e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001390:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800139a:	d137      	bne.n	800140c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139c:	f7ff fc00 	bl	8000ba0 <HAL_GetTick>
 80013a0:	1b80      	subs	r0, r0, r6
 80013a2:	2802      	cmp	r0, #2
 80013a4:	d9f6      	bls.n	8001394 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 80013a6:	2003      	movs	r0, #3
 80013a8:	e203      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
}
 80013b2:	e747      	b.n	8001244 <HAL_RCC_OscConfig+0xc8>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80013be:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80013c6:	601a      	str	r2, [r3, #0]
}
 80013c8:	e73c      	b.n	8001244 <HAL_RCC_OscConfig+0xc8>
        tickstart = HAL_GetTick();
 80013ca:	f7ff fbe9 	bl	8000ba0 <HAL_GetTick>
 80013ce:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80013d0:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
 80013d4:	f8d8 3000 	ldr.w	r3, [r8]
 80013d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80013dc:	d0c3      	beq.n	8001366 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff fbdf 	bl	8000ba0 <HAL_GetTick>
 80013e2:	1bc0      	subs	r0, r0, r7
 80013e4:	2864      	cmp	r0, #100	; 0x64
 80013e6:	d9f5      	bls.n	80013d4 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 80013e8:	2003      	movs	r0, #3
 80013ea:	e1e2      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013ec:	2e02      	cmp	r6, #2
 80013ee:	d1c2      	bne.n	8001376 <HAL_RCC_OscConfig+0x1fa>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80013f0:	6923      	ldr	r3, [r4, #16]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 81d8 	beq.w	80017a8 <HAL_RCC_OscConfig+0x62c>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80013f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013fc:	6853      	ldr	r3, [r2, #4]
 80013fe:	6961      	ldr	r1, [r4, #20]
 8001400:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001404:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001408:	6053      	str	r3, [r2, #4]
}
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x2a2>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800140c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001410:	6853      	ldr	r3, [r2, #4]
 8001412:	6961      	ldr	r1, [r4, #20]
 8001414:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001418:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800141c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	f013 0f08 	tst.w	r3, #8
 8001424:	d07e      	beq.n	8001524 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001426:	69a3      	ldr	r3, [r4, #24]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d062      	beq.n	80014f2 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 800142c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001434:	f003 0210 	and.w	r2, r3, #16
 8001438:	69e1      	ldr	r1, [r4, #28]
 800143a:	4291      	cmp	r1, r2
 800143c:	d011      	beq.n	8001462 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800143e:	f003 0203 	and.w	r2, r3, #3
 8001442:	2a02      	cmp	r2, #2
 8001444:	f000 81b2 	beq.w	80017ac <HAL_RCC_OscConfig+0x630>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001448:	f013 0f01 	tst.w	r3, #1
 800144c:	d138      	bne.n	80014c0 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800144e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001452:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001456:	f023 0310 	bic.w	r3, r3, #16
 800145a:	69e1      	ldr	r1, [r4, #28]
 800145c:	430b      	orrs	r3, r1
 800145e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001466:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001472:	f7ff fb95 	bl	8000ba0 <HAL_GetTick>
 8001476:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001478:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800147c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001480:	f013 0f02 	tst.w	r3, #2
 8001484:	d14e      	bne.n	8001524 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001486:	f7ff fb8b 	bl	8000ba0 <HAL_GetTick>
 800148a:	1b80      	subs	r0, r0, r6
 800148c:	2811      	cmp	r0, #17
 800148e:	d9f5      	bls.n	800147c <HAL_RCC_OscConfig+0x300>
          return HAL_TIMEOUT;
 8001490:	2003      	movs	r0, #3
 8001492:	e18e      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800149e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb7e 	bl	8000ba0 <HAL_GetTick>
 80014a4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80014a6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80014b0:	d0b5      	beq.n	800141e <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b2:	f7ff fb75 	bl	8000ba0 <HAL_GetTick>
 80014b6:	1b80      	subs	r0, r0, r6
 80014b8:	2802      	cmp	r0, #2
 80014ba:	d9f6      	bls.n	80014aa <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 80014bc:	2003      	movs	r0, #3
 80014be:	e178      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80014c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 80014d0:	f7ff fb66 	bl	8000ba0 <HAL_GetTick>
 80014d4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80014d6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80014da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80014de:	f013 0f02 	tst.w	r3, #2
 80014e2:	d0b4      	beq.n	800144e <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff fb5c 	bl	8000ba0 <HAL_GetTick>
 80014e8:	1b80      	subs	r0, r0, r6
 80014ea:	2811      	cmp	r0, #17
 80014ec:	d9f5      	bls.n	80014da <HAL_RCC_OscConfig+0x35e>
              return HAL_TIMEOUT;
 80014ee:	2003      	movs	r0, #3
 80014f0:	e15f      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80014f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001502:	f7ff fb4d 	bl	8000ba0 <HAL_GetTick>
 8001506:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001508:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800150c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001510:	f013 0f02 	tst.w	r3, #2
 8001514:	d006      	beq.n	8001524 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff fb43 	bl	8000ba0 <HAL_GetTick>
 800151a:	1b80      	subs	r0, r0, r6
 800151c:	2811      	cmp	r0, #17
 800151e:	d9f5      	bls.n	800150c <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 8001520:	2003      	movs	r0, #3
 8001522:	e146      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	f013 0f04 	tst.w	r3, #4
 800152a:	f000 80b2 	beq.w	8001692 <HAL_RCC_OscConfig+0x516>
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <HAL_RCC_OscConfig+0x438>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001536:	d110      	bne.n	800155a <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8001538:	f7ff fcfa 	bl	8000f30 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800153c:	f7ff fb30 	bl	8000ba0 <HAL_GetTick>
 8001540:	4606      	mov	r6, r0
 8001542:	4f1c      	ldr	r7, [pc, #112]	; (80015b4 <HAL_RCC_OscConfig+0x438>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f413 7f80 	tst.w	r3, #256	; 0x100
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154c:	f7ff fb28 	bl	8000ba0 <HAL_GetTick>
 8001550:	1b80      	subs	r0, r0, r6
 8001552:	2802      	cmp	r0, #2
 8001554:	d9f6      	bls.n	8001544 <HAL_RCC_OscConfig+0x3c8>
          return HAL_TIMEOUT;
 8001556:	2003      	movs	r0, #3
 8001558:	e12b      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155a:	68e3      	ldr	r3, [r4, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d064      	beq.n	800162a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001564:	2b05      	cmp	r3, #5
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001578:	f7ff fb12 	bl	8000ba0 <HAL_GetTick>
 800157c:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800157e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001582:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800158e:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001590:	f241 3888 	movw	r8, #5000	; 0x1388
 8001594:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001598:	f013 0f02 	tst.w	r3, #2
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x43c>
 800159e:	f7ff faff 	bl	8000ba0 <HAL_GetTick>
 80015a2:	1b80      	subs	r0, r0, r6
 80015a4:	4540      	cmp	r0, r8
 80015a6:	d9f5      	bls.n	8001594 <HAL_RCC_OscConfig+0x418>
          return HAL_TIMEOUT;
 80015a8:	2003      	movs	r0, #3
 80015aa:	e102      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
 80015ac:	20000080 	.word	0x20000080
 80015b0:	20000088 	.word	0x20000088
 80015b4:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80015b8:	68e3      	ldr	r3, [r4, #12]
 80015ba:	f023 0304 	bic.w	r3, r3, #4
 80015be:	2b81      	cmp	r3, #129	; 0x81
 80015c0:	d019      	beq.n	80015f6 <HAL_RCC_OscConfig+0x47a>
        tickstart = HAL_GetTick();
 80015c2:	f7ff faed 	bl	8000ba0 <HAL_GetTick>
 80015c6:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80015c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80015d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015d8:	4617      	mov	r7, r2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015e2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80015e6:	d054      	beq.n	8001692 <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fada 	bl	8000ba0 <HAL_GetTick>
 80015ec:	1b80      	subs	r0, r0, r6
 80015ee:	4540      	cmp	r0, r8
 80015f0:	d9f5      	bls.n	80015de <HAL_RCC_OscConfig+0x462>
            return HAL_TIMEOUT;
 80015f2:	2003      	movs	r0, #3
 80015f4:	e0dd      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
        tickstart = HAL_GetTick();
 80015f6:	f7ff fad3 	bl	8000ba0 <HAL_GetTick>
 80015fa:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80015fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001600:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800160c:	4617      	mov	r7, r2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f241 3888 	movw	r8, #5000	; 0x1388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001612:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001616:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800161a:	d13a      	bne.n	8001692 <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fac0 	bl	8000ba0 <HAL_GetTick>
 8001620:	1b80      	subs	r0, r0, r6
 8001622:	4540      	cmp	r0, r8
 8001624:	d9f5      	bls.n	8001612 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8001626:	2003      	movs	r0, #3
 8001628:	e0c3      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
      tickstart = HAL_GetTick();
 800162a:	f7ff fab9 	bl	8000ba0 <HAL_GetTick>
 800162e:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001634:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800163c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001640:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001646:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800164a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800164e:	d006      	beq.n	800165e <HAL_RCC_OscConfig+0x4e2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff faa6 	bl	8000ba0 <HAL_GetTick>
 8001654:	1b80      	subs	r0, r0, r6
 8001656:	4540      	cmp	r0, r8
 8001658:	d9f5      	bls.n	8001646 <HAL_RCC_OscConfig+0x4ca>
          return HAL_TIMEOUT;
 800165a:	2003      	movs	r0, #3
 800165c:	e0a9      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
      tickstart = HAL_GetTick();
 800165e:	f7ff fa9f 	bl	8000ba0 <HAL_GetTick>
 8001662:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001668:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001674:	4617      	mov	r7, r2
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f241 3888 	movw	r8, #5000	; 0x1388
 800167a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800167e:	f013 0f02 	tst.w	r3, #2
 8001682:	d006      	beq.n	8001692 <HAL_RCC_OscConfig+0x516>
 8001684:	f7ff fa8c 	bl	8000ba0 <HAL_GetTick>
 8001688:	1b80      	subs	r0, r0, r6
 800168a:	4540      	cmp	r0, r8
 800168c:	d9f5      	bls.n	800167a <HAL_RCC_OscConfig+0x4fe>
          return HAL_TIMEOUT;
 800168e:	2003      	movs	r0, #3
 8001690:	e08f      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 808b 	beq.w	80017b0 <HAL_RCC_OscConfig+0x634>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169a:	2d0c      	cmp	r5, #12
 800169c:	d060      	beq.n	8001760 <HAL_RCC_OscConfig+0x5e4>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d016      	beq.n	80016d0 <HAL_RCC_OscConfig+0x554>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80016a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80016ae:	f7ff fa77 	bl	8000ba0 <HAL_GetTick>
 80016b2:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80016b4:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 80016b8:	682b      	ldr	r3, [r5, #0]
 80016ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016be:	d148      	bne.n	8001752 <HAL_RCC_OscConfig+0x5d6>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80016c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016c4:	68d1      	ldr	r1, [r2, #12]
 80016c6:	4b41      	ldr	r3, [pc, #260]	; (80017cc <HAL_RCC_OscConfig+0x650>)
 80016c8:	400b      	ands	r3, r1
 80016ca:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80016cc:	2000      	movs	r0, #0
 80016ce:	e070      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80016d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016d4:	6813      	ldr	r3, [r2, #0]
 80016d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80016dc:	f7ff fa60 	bl	8000ba0 <HAL_GetTick>
 80016e0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80016e2:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 80016e6:	6833      	ldr	r3, [r6, #0]
 80016e8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016ec:	d12a      	bne.n	8001744 <HAL_RCC_OscConfig+0x5c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f2:	68d0      	ldr	r0, [r2, #12]
 80016f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016f8:	430b      	orrs	r3, r1
 80016fa:	4935      	ldr	r1, [pc, #212]	; (80017d0 <HAL_RCC_OscConfig+0x654>)
 80016fc:	4001      	ands	r1, r0
 80016fe:	430b      	orrs	r3, r1
 8001700:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001702:	430b      	orrs	r3, r1
 8001704:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001706:	430b      	orrs	r3, r1
 8001708:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800170a:	430b      	orrs	r3, r1
 800170c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800170e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001712:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001714:	6813      	ldr	r3, [r2, #0]
 8001716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800171c:	68d3      	ldr	r3, [r2, #12]
 800171e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001722:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001724:	f7ff fa3c 	bl	8000ba0 <HAL_GetTick>
 8001728:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800172a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001734:	d13f      	bne.n	80017b6 <HAL_RCC_OscConfig+0x63a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff fa33 	bl	8000ba0 <HAL_GetTick>
 800173a:	1b00      	subs	r0, r0, r4
 800173c:	280a      	cmp	r0, #10
 800173e:	d9f6      	bls.n	800172e <HAL_RCC_OscConfig+0x5b2>
            return HAL_TIMEOUT;
 8001740:	2003      	movs	r0, #3
 8001742:	e036      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff fa2c 	bl	8000ba0 <HAL_GetTick>
 8001748:	1b40      	subs	r0, r0, r5
 800174a:	280a      	cmp	r0, #10
 800174c:	d9cb      	bls.n	80016e6 <HAL_RCC_OscConfig+0x56a>
            return HAL_TIMEOUT;
 800174e:	2003      	movs	r0, #3
 8001750:	e02f      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff fa25 	bl	8000ba0 <HAL_GetTick>
 8001756:	1b00      	subs	r0, r0, r4
 8001758:	280a      	cmp	r0, #10
 800175a:	d9ad      	bls.n	80016b8 <HAL_RCC_OscConfig+0x53c>
            return HAL_TIMEOUT;
 800175c:	2003      	movs	r0, #3
 800175e:	e028      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001760:	2b01      	cmp	r3, #1
 8001762:	d02a      	beq.n	80017ba <HAL_RCC_OscConfig+0x63e>
        pll_config = RCC->PLLCFGR;
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800176a:	f003 0103 	and.w	r1, r3, #3
 800176e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001770:	4291      	cmp	r1, r2
 8001772:	d124      	bne.n	80017be <HAL_RCC_OscConfig+0x642>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001774:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800177a:	428a      	cmp	r2, r1
 800177c:	d121      	bne.n	80017c2 <HAL_RCC_OscConfig+0x646>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800177e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001782:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001784:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001788:	d11d      	bne.n	80017c6 <HAL_RCC_OscConfig+0x64a>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800178a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800178e:	6c60      	ldr	r0, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001790:	1a18      	subs	r0, r3, r0
 8001792:	bf18      	it	ne
 8001794:	2001      	movne	r0, #1
 8001796:	e00c      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
    return HAL_ERROR;
 8001798:	2001      	movs	r0, #1
}
 800179a:	4770      	bx	lr
        return HAL_ERROR;
 800179c:	2001      	movs	r0, #1
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
            return HAL_ERROR;
 80017a0:	2001      	movs	r0, #1
 80017a2:	e006      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 80017a4:	2001      	movs	r0, #1
 80017a6:	e004      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 80017a8:	2001      	movs	r0, #1
 80017aa:	e002      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
          return HAL_ERROR;
 80017ac:	2001      	movs	r0, #1
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
  return HAL_OK;
 80017b0:	2000      	movs	r0, #0
}
 80017b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
 80017b8:	e7fb      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
        return HAL_ERROR;
 80017ba:	2001      	movs	r0, #1
 80017bc:	e7f9      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
          return HAL_ERROR;
 80017be:	2001      	movs	r0, #1
 80017c0:	e7f7      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
 80017c2:	2001      	movs	r0, #1
 80017c4:	e7f5      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
 80017c6:	2001      	movs	r0, #1
 80017c8:	e7f3      	b.n	80017b2 <HAL_RCC_OscConfig+0x636>
 80017ca:	bf00      	nop
 80017cc:	eefefffc 	.word	0xeefefffc
 80017d0:	11c1808c 	.word	0x11c1808c

080017d4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80017d4:	2800      	cmp	r0, #0
 80017d6:	f000 8106 	beq.w	80019e6 <HAL_RCC_ClockConfig+0x212>
{
 80017da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017de:	460c      	mov	r4, r1
 80017e0:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e2:	4b83      	ldr	r3, [pc, #524]	; (80019f0 <HAL_RCC_ClockConfig+0x21c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	428b      	cmp	r3, r1
 80017ec:	d327      	bcc.n	800183e <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ee:	682b      	ldr	r3, [r5, #0]
 80017f0:	f013 0f02 	tst.w	r3, #2
 80017f4:	d139      	bne.n	800186a <HAL_RCC_ClockConfig+0x96>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017fc:	d14d      	bne.n	800189a <HAL_RCC_ClockConfig+0xc6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fe:	682b      	ldr	r3, [r5, #0]
 8001800:	f013 0f04 	tst.w	r3, #4
 8001804:	d165      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xfe>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001806:	682b      	ldr	r3, [r5, #0]
 8001808:	f013 0f08 	tst.w	r3, #8
 800180c:	d179      	bne.n	8001902 <HAL_RCC_ClockConfig+0x12e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180e:	682b      	ldr	r3, [r5, #0]
 8001810:	f013 0f01 	tst.w	r3, #1
 8001814:	f000 80c1 	beq.w	800199a <HAL_RCC_ClockConfig+0x1c6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001818:	686b      	ldr	r3, [r5, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	f000 808b 	beq.w	8001936 <HAL_RCC_ClockConfig+0x162>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001820:	2b03      	cmp	r3, #3
 8001822:	f000 8090 	beq.w	8001946 <HAL_RCC_ClockConfig+0x172>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 8095 	bne.w	8001956 <HAL_RCC_ClockConfig+0x182>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800182c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	f012 0f02 	tst.w	r2, #2
 8001836:	f040 8094 	bne.w	8001962 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 800183a:	2001      	movs	r0, #1
 800183c:	e0d1      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4a6c      	ldr	r2, [pc, #432]	; (80019f0 <HAL_RCC_ClockConfig+0x21c>)
 8001840:	6813      	ldr	r3, [r2, #0]
 8001842:	f023 0307 	bic.w	r3, r3, #7
 8001846:	430b      	orrs	r3, r1
 8001848:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800184a:	f7ff f9a9 	bl	8000ba0 <HAL_GetTick>
 800184e:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001850:	4f67      	ldr	r7, [pc, #412]	; (80019f0 <HAL_RCC_ClockConfig+0x21c>)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	42a3      	cmp	r3, r4
 800185a:	d0c8      	beq.n	80017ee <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800185c:	f7ff f9a0 	bl	8000ba0 <HAL_GetTick>
 8001860:	1b80      	subs	r0, r0, r6
 8001862:	2802      	cmp	r0, #2
 8001864:	d9f5      	bls.n	8001852 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8001866:	2003      	movs	r0, #3
 8001868:	e0bb      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800186a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186e:	6893      	ldr	r3, [r2, #8]
 8001870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001874:	68a9      	ldr	r1, [r5, #8]
 8001876:	430b      	orrs	r3, r1
 8001878:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800187a:	f7ff f991 	bl	8000ba0 <HAL_GetTick>
 800187e:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001880:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800188a:	d1b4      	bne.n	80017f6 <HAL_RCC_ClockConfig+0x22>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800188c:	f7ff f988 	bl	8000ba0 <HAL_GetTick>
 8001890:	1b80      	subs	r0, r0, r6
 8001892:	2802      	cmp	r0, #2
 8001894:	d9f6      	bls.n	8001884 <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 8001896:	2003      	movs	r0, #3
 8001898:	e0a3      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800189a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800189e:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80018a2:	6969      	ldr	r1, [r5, #20]
 80018a4:	f023 030f 	bic.w	r3, r3, #15
 80018a8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80018ac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80018b0:	f7ff f976 	bl	8000ba0 <HAL_GetTick>
 80018b4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80018b6:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80018ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80018c2:	d19c      	bne.n	80017fe <HAL_RCC_ClockConfig+0x2a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80018c4:	f7ff f96c 	bl	8000ba0 <HAL_GetTick>
 80018c8:	1b80      	subs	r0, r0, r6
 80018ca:	2802      	cmp	r0, #2
 80018cc:	d9f5      	bls.n	80018ba <HAL_RCC_ClockConfig+0xe6>
        return HAL_TIMEOUT;
 80018ce:	2003      	movs	r0, #3
 80018d0:	e087      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80018d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d6:	6893      	ldr	r3, [r2, #8]
 80018d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018dc:	68e9      	ldr	r1, [r5, #12]
 80018de:	430b      	orrs	r3, r1
 80018e0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80018e2:	f7ff f95d 	bl	8000ba0 <HAL_GetTick>
 80018e6:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80018e8:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018f2:	d188      	bne.n	8001806 <HAL_RCC_ClockConfig+0x32>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80018f4:	f7ff f954 	bl	8000ba0 <HAL_GetTick>
 80018f8:	1b80      	subs	r0, r0, r6
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9f6      	bls.n	80018ec <HAL_RCC_ClockConfig+0x118>
        return HAL_TIMEOUT;
 80018fe:	2003      	movs	r0, #3
 8001900:	e06f      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001906:	6893      	ldr	r3, [r2, #8]
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001908:	6929      	ldr	r1, [r5, #16]
 800190a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800190e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001912:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001914:	f7ff f944 	bl	8000ba0 <HAL_GetTick>
 8001918:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800191a:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001924:	f47f af73 	bne.w	800180e <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001928:	f7ff f93a 	bl	8000ba0 <HAL_GetTick>
 800192c:	1b80      	subs	r0, r0, r6
 800192e:	2802      	cmp	r0, #2
 8001930:	d9f5      	bls.n	800191e <HAL_RCC_ClockConfig+0x14a>
        return HAL_TIMEOUT;
 8001932:	2003      	movs	r0, #3
 8001934:	e055      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001940:	d10f      	bne.n	8001962 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 8001942:	2001      	movs	r0, #1
 8001944:	e04d      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0x18e>
        return HAL_ERROR;
 8001952:	2001      	movs	r0, #1
 8001954:	e045      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001960:	d043      	beq.n	80019ea <HAL_RCC_ClockConfig+0x216>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001966:	688a      	ldr	r2, [r1, #8]
 8001968:	f022 0203 	bic.w	r2, r2, #3
 800196c:	4313      	orrs	r3, r2
 800196e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001970:	f7ff f916 	bl	8000ba0 <HAL_GetTick>
 8001974:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001976:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197a:	f241 3888 	movw	r8, #5000	; 0x1388
 800197e:	68bb      	ldr	r3, [r7, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001980:	686a      	ldr	r2, [r5, #4]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800198a:	d006      	beq.n	800199a <HAL_RCC_ClockConfig+0x1c6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198c:	f7ff f908 	bl	8000ba0 <HAL_GetTick>
 8001990:	1b80      	subs	r0, r0, r6
 8001992:	4540      	cmp	r0, r8
 8001994:	d9f3      	bls.n	800197e <HAL_RCC_ClockConfig+0x1aa>
        return HAL_TIMEOUT;
 8001996:	2003      	movs	r0, #3
 8001998:	e023      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_RCC_ClockConfig+0x21c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	42a3      	cmp	r3, r4
 80019a4:	d915      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x1fe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <HAL_RCC_ClockConfig+0x21c>)
 80019a8:	6813      	ldr	r3, [r2, #0]
 80019aa:	f023 0307 	bic.w	r3, r3, #7
 80019ae:	4323      	orrs	r3, r4
 80019b0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80019b2:	f7ff f8f5 	bl	8000ba0 <HAL_GetTick>
 80019b6:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b8:	4e0d      	ldr	r6, [pc, #52]	; (80019f0 <HAL_RCC_ClockConfig+0x21c>)
 80019ba:	6833      	ldr	r3, [r6, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	42a3      	cmp	r3, r4
 80019c2:	d006      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x1fe>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80019c4:	f7ff f8ec 	bl	8000ba0 <HAL_GetTick>
 80019c8:	1b40      	subs	r0, r0, r5
 80019ca:	2802      	cmp	r0, #2
 80019cc:	d9f5      	bls.n	80019ba <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80019ce:	2003      	movs	r0, #3
 80019d0:	e007      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80019d2:	f7ff fbc3 	bl	800115c <HAL_RCC_GetHCLKFreq>
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_RCC_ClockConfig+0x220>)
 80019d8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_RCC_ClockConfig+0x224>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	f7ff f895 	bl	8000b0c <HAL_InitTick>
}
 80019e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80019e6:	2001      	movs	r0, #1
}
 80019e8:	4770      	bx	lr
        return HAL_ERROR;
 80019ea:	2001      	movs	r0, #1
 80019ec:	e7f9      	b.n	80019e2 <HAL_RCC_ClockConfig+0x20e>
 80019ee:	bf00      	nop
 80019f0:	58004000 	.word	0x58004000
 80019f4:	20000080 	.word	0x20000080
 80019f8:	20000088 	.word	0x20000088

080019fc <HAL_RCC_GetPCLK1Freq>:
{
 80019fc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80019fe:	f7ff fbad 	bl	800115c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001a0c:	4a02      	ldr	r2, [pc, #8]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001a12:	40d8      	lsrs	r0, r3
 8001a14:	bd08      	pop	{r3, pc}
 8001a16:	bf00      	nop
 8001a18:	0800467c 	.word	0x0800467c

08001a1c <HAL_RCC_GetPCLK2Freq>:
{
 8001a1c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001a1e:	f7ff fb9d 	bl	800115c <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001a2c:	4a02      	ldr	r2, [pc, #8]	; (8001a38 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001a32:	40d8      	lsrs	r0, r3
 8001a34:	bd08      	pop	{r3, pc}
 8001a36:	bf00      	nop
 8001a38:	0800467c 	.word	0x0800467c

08001a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a40:	6803      	ldr	r3, [r0, #0]
 8001a42:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a46:	f040 80a5 	bne.w	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x158>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8001a4a:	2000      	movs	r0, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	f013 0f01 	tst.w	r3, #1
 8001a52:	d00a      	beq.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a54:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8001a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a5e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8001a62:	b292      	uxth	r2, r2
 8001a64:	4313      	orrs	r3, r2
 8001a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	f013 0f02 	tst.w	r3, #2
 8001a70:	d00a      	beq.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a72:	68a2      	ldr	r2, [r4, #8]
 8001a74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a78:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a7c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8001a80:	b292      	uxth	r2, r2
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f013 0f20 	tst.w	r3, #32
 8001a8e:	d009      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a94:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001a98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001a9c:	6921      	ldr	r1, [r4, #16]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001aac:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ab2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ab6:	0c2a      	lsrs	r2, r5, #16
 8001ab8:	0412      	lsls	r2, r2, #16
 8001aba:	ea23 0302 	bic.w	r3, r3, r2
 8001abe:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001acc:	d00c      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ace:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001ad8:	0c2a      	lsrs	r2, r5, #16
 8001ada:	0412      	lsls	r2, r2, #16
 8001adc:	ea23 0302 	bic.w	r3, r3, r2
 8001ae0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001aee:	d00c      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8001af0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001afa:	0c2a      	lsrs	r2, r5, #16
 8001afc:	0412      	lsls	r2, r2, #16
 8001afe:	ea23 0302 	bic.w	r3, r3, r2
 8001b02:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001b10:	d151      	bne.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b12:	6823      	ldr	r3, [r4, #0]
 8001b14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b18:	d15e      	bne.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b20:	d16b      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	f013 0f10 	tst.w	r3, #16
 8001b28:	d00d      	beq.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8001b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b36:	68e1      	ldr	r1, [r4, #12]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001b3e:	68e3      	ldr	r3, [r4, #12]
 8001b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b44:	d06a      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001b4c:	d00f      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x132>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b56:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b64:	b91b      	cbnz	r3, 8001b6e <HAL_RCCEx_PeriphCLKConfig+0x132>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8001b66:	68d3      	ldr	r3, [r2, #12]
 8001b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001b74:	d00d      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x156>
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b7e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001b82:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b84:	430b      	orrs	r3, r1
 8001b86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8001b8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b90:	d049      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8001b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_PWR_EnableBkUpAccess();
 8001b94:	f7ff f9cc 	bl	8000f30 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8001b98:	f7ff f802 	bl	8000ba0 <HAL_GetTick>
 8001b9c:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8001b9e:	4e44      	ldr	r6, [pc, #272]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001ba0:	6833      	ldr	r3, [r6, #0]
 8001ba2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ba6:	d14f      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba8:	f7fe fffa 	bl	8000ba0 <HAL_GetTick>
 8001bac:	1b40      	subs	r0, r0, r5
 8001bae:	2802      	cmp	r0, #2
 8001bb0:	d9f6      	bls.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>
        ret = HAL_TIMEOUT;
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	e74a      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x10>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bb6:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001bb8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001bbc:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8001bc0:	0919      	lsrs	r1, r3, #4
 8001bc2:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8001bc6:	ea22 0201 	bic.w	r2, r2, r1
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8001bd6:	e79c      	b.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bd8:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001bda:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001bde:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8001be2:	0919      	lsrs	r1, r3, #4
 8001be4:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8001be8:	ea22 0201 	bic.w	r2, r2, r1
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8001bf8:	e78f      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bfa:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001bfc:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001c00:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8001c04:	0919      	lsrs	r1, r3, #4
 8001c06:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8001c0a:	ea22 0201 	bic.w	r2, r2, r1
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001c14:	4313      	orrs	r3, r2
 8001c16:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
}
 8001c1a:	e782      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8001c1c:	68d3      	ldr	r3, [r2, #12]
 8001c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c22:	60d3      	str	r3, [r2, #12]
 8001c24:	e78f      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001c26:	68d3      	ldr	r3, [r2, #12]
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	60d3      	str	r3, [r2, #12]
  return status;
 8001c2e:	e7b0      	b.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x156>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8001c44:	2000      	movs	r0, #0
}
 8001c46:	e701      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8001c54:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d0ea      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8001c62:	f421 7040 	bic.w	r0, r1, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001c66:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001c72:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001c7e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8001c82:	f011 0f02 	tst.w	r1, #2
 8001c86:	d0d3      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        tickstart = HAL_GetTick();
 8001c88:	f7fe ff8a 	bl	8000ba0 <HAL_GetTick>
 8001c8c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c8e:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f241 3788 	movw	r7, #5000	; 0x1388
 8001c96:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001c9a:	f013 0f02 	tst.w	r3, #2
 8001c9e:	d1c7      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001ca0:	f7fe ff7e 	bl	8000ba0 <HAL_GetTick>
 8001ca4:	1b40      	subs	r0, r0, r5
 8001ca6:	42b8      	cmp	r0, r7
 8001ca8:	d9f5      	bls.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            ret = HAL_TIMEOUT;
 8001caa:	2003      	movs	r0, #3
 8001cac:	e6ce      	b.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x10>
 8001cae:	bf00      	nop
 8001cb0:	58000400 	.word	0x58000400

08001cb4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001cb4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_RTC_WaitForSynchro+0x30>)
 8001cb8:	68d3      	ldr	r3, [r2, #12]
 8001cba:	f023 0320 	bic.w	r3, r3, #32
 8001cbe:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8001cc0:	f7fe ff6e 	bl	8000ba0 <HAL_GetTick>
 8001cc4:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8001cc6:	4d07      	ldr	r5, [pc, #28]	; (8001ce4 <HAL_RTC_WaitForSynchro+0x30>)
 8001cc8:	68eb      	ldr	r3, [r5, #12]
 8001cca:	f013 0f20 	tst.w	r3, #32
 8001cce:	d107      	bne.n	8001ce0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001cd0:	f7fe ff66 	bl	8000ba0 <HAL_GetTick>
 8001cd4:	1b00      	subs	r0, r0, r4
 8001cd6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001cda:	d9f5      	bls.n	8001cc8 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8001cdc:	2003      	movs	r0, #3
 8001cde:	e000      	b.n	8001ce2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001ce0:	2000      	movs	r0, #0
}
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
 8001ce4:	40002800 	.word	0x40002800

08001ce8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <RTC_EnterInitMode+0x54>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cf4:	d003      	beq.n	8001cfe <RTC_EnterInitMode+0x16>
  HAL_StatusTypeDef status = HAL_OK;
 8001cf6:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cfe:	4607      	mov	r7, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <RTC_EnterInitMode+0x54>)
 8001d02:	68d3      	ldr	r3, [r2, #12]
 8001d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d08:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8001d0a:	f7fe ff49 	bl	8000ba0 <HAL_GetTick>
 8001d0e:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001d12:	4e0a      	ldr	r6, [pc, #40]	; (8001d3c <RTC_EnterInitMode+0x54>)
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d14:	f04f 0803 	mov.w	r8, #3
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001d18:	e008      	b.n	8001d2c <RTC_EnterInitMode+0x44>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001d1a:	f7fe ff41 	bl	8000ba0 <HAL_GetTick>
 8001d1e:	1b43      	subs	r3, r0, r5
 8001d20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d24:	bf84      	itt	hi
 8001d26:	f887 802d 	strbhi.w	r8, [r7, #45]	; 0x2d
        status = HAL_TIMEOUT;
 8001d2a:	4644      	movhi	r4, r8
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001d2c:	68f3      	ldr	r3, [r6, #12]
 8001d2e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001d32:	d1e1      	bne.n	8001cf8 <RTC_EnterInitMode+0x10>
 8001d34:	2c03      	cmp	r4, #3
 8001d36:	d1f0      	bne.n	8001d1a <RTC_EnterInitMode+0x32>
 8001d38:	e7de      	b.n	8001cf8 <RTC_EnterInitMode+0x10>
 8001d3a:	bf00      	nop
 8001d3c:	40002800 	.word	0x40002800

08001d40 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d40:	b510      	push	{r4, lr}
 8001d42:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <RTC_ExitInitMode+0x4c>)
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d4c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f013 0f20 	tst.w	r3, #32
 8001d54:	d107      	bne.n	8001d66 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d56:	f7ff ffad 	bl	8001cb4 <HAL_RTC_WaitForSynchro>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	b1a0      	cbz	r0, 8001d88 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8001d64:	e010      	b.n	8001d88 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <RTC_ExitInitMode+0x4c>)
 8001d68:	6993      	ldr	r3, [r2, #24]
 8001d6a:	f023 0320 	bic.w	r3, r3, #32
 8001d6e:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001d70:	f7ff ffa0 	bl	8001cb4 <HAL_RTC_WaitForSynchro>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b110      	cbz	r0, 8001d7e <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001d7e:	4903      	ldr	r1, [pc, #12]	; (8001d8c <RTC_ExitInitMode+0x4c>)
 8001d80:	698a      	ldr	r2, [r1, #24]
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd10      	pop	{r4, pc}
 8001d8c:	40002800 	.word	0x40002800

08001d90 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d052      	beq.n	8001e3a <HAL_RTC_Init+0xaa>
{
 8001d94:	b510      	push	{r4, lr}
 8001d96:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8001d98:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8001d9c:	b163      	cbz	r3, 8001db8 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_RTC_Init+0xb0>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f013 0f10 	tst.w	r3, #16
 8001dac:	d009      	beq.n	8001dc2 <HAL_RTC_Init+0x32>
      hrtc->State = HAL_RTC_STATE_READY;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8001db4:	2000      	movs	r0, #0
}
 8001db6:	bd10      	pop	{r4, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8001db8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8001dbc:	f7fe fd3c 	bl	8000838 <HAL_RTC_MspInit>
 8001dc0:	e7ed      	b.n	8001d9e <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <HAL_RTC_Init+0xb0>)
 8001dc4:	22ca      	movs	r2, #202	; 0xca
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
 8001dc8:	2253      	movs	r2, #83	; 0x53
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff ff8b 	bl	8001ce8 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8001dd2:	b118      	cbz	r0, 8001ddc <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_RTC_Init+0xb0>)
 8001dd6:	22ff      	movs	r2, #255	; 0xff
 8001dd8:	625a      	str	r2, [r3, #36]	; 0x24
  return status;
 8001dda:	e7ec      	b.n	8001db6 <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_RTC_Init+0xb0>)
 8001dde:	699a      	ldr	r2, [r3, #24]
 8001de0:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8001de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001de8:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8001dea:	6999      	ldr	r1, [r3, #24]
 8001dec:	6862      	ldr	r2, [r4, #4]
 8001dee:	6920      	ldr	r0, [r4, #16]
 8001df0:	4302      	orrs	r2, r0
 8001df2:	430a      	orrs	r2, r1
 8001df4:	69a1      	ldr	r1, [r4, #24]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8001dfa:	68a1      	ldr	r1, [r4, #8]
 8001dfc:	68e2      	ldr	r2, [r4, #12]
 8001dfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8001e04:	68d9      	ldr	r1, [r3, #12]
 8001e06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e0a:	4302      	orrs	r2, r0
 8001e0c:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 8001e10:	430a      	orrs	r2, r1
 8001e12:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7ff ff93 	bl	8001d40 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d1da      	bne.n	8001dd4 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <HAL_RTC_Init+0xb0>)
 8001e20:	6991      	ldr	r1, [r2, #24]
 8001e22:	6a23      	ldr	r3, [r4, #32]
 8001e24:	69e0      	ldr	r0, [r4, #28]
 8001e26:	4303      	orrs	r3, r0
 8001e28:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6961      	ldr	r1, [r4, #20]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6193      	str	r3, [r2, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e34:	23ff      	movs	r3, #255	; 0xff
 8001e36:	6253      	str	r3, [r2, #36]	; 0x24
    if (status == HAL_OK)
 8001e38:	e7b9      	b.n	8001dae <HAL_RTC_Init+0x1e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e3a:	2001      	movs	r0, #1
}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40002800 	.word	0x40002800

08001e44 <RTC_ByteToBcd2>:
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8001e44:	2809      	cmp	r0, #9
 8001e46:	d909      	bls.n	8001e5c <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0U;
 8001e48:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8001e4a:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8001e4c:	380a      	subs	r0, #10
 8001e4e:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8001e50:	2809      	cmp	r0, #9
 8001e52:	d8fa      	bhi.n	8001e4a <RTC_ByteToBcd2+0x6>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8001e54:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001e58:	b2c0      	uxtb	r0, r0
 8001e5a:	4770      	bx	lr
  uint32_t bcdhigh = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e7f9      	b.n	8001e54 <RTC_ByteToBcd2+0x10>

08001e60 <HAL_RTC_SetTime>:
{
 8001e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001e62:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d063      	beq.n	8001f32 <HAL_RTC_SetTime+0xd2>
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	460d      	mov	r5, r1
 8001e6e:	4616      	mov	r6, r2
 8001e70:	2301      	movs	r3, #1
 8001e72:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e76:	2302      	movs	r3, #2
 8001e78:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_RTC_SetTime+0xd8>)
 8001e7e:	22ca      	movs	r2, #202	; 0xca
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24
 8001e82:	2253      	movs	r2, #83	; 0x53
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8001e86:	f7ff ff2f 	bl	8001ce8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d131      	bne.n	8001ef2 <HAL_RTC_SetTime+0x92>
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_RTC_SetTime+0xd8>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9a:	d02a      	beq.n	8001ef2 <HAL_RTC_SetTime+0x92>
      if (Format == RTC_FORMAT_BIN)
 8001e9c:	2e00      	cmp	r6, #0
 8001e9e:	d136      	bne.n	8001f0e <HAL_RTC_SetTime+0xae>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_RTC_SetTime+0xd8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f013 0f40 	tst.w	r3, #64	; 0x40
          sTime->TimeFormat = 0x00U;
 8001ea8:	bf04      	itt	eq
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	70eb      	strbeq	r3, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001eae:	7828      	ldrb	r0, [r5, #0]
 8001eb0:	f7ff ffc8 	bl	8001e44 <RTC_ByteToBcd2>
 8001eb4:	4607      	mov	r7, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001eb6:	7868      	ldrb	r0, [r5, #1]
 8001eb8:	f7ff ffc4 	bl	8001e44 <RTC_ByteToBcd2>
 8001ebc:	4606      	mov	r6, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001ebe:	78a8      	ldrb	r0, [r5, #2]
 8001ec0:	f7ff ffc0 	bl	8001e44 <RTC_ByteToBcd2>
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001ec4:	78eb      	ldrb	r3, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001ec6:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8001eca:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8001ece:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8001ed2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001ed6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_RTC_SetTime+0xd8>)
 8001edc:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8001ede:	6993      	ldr	r3, [r2, #24]
 8001ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee4:	6193      	str	r3, [r2, #24]
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8001ee6:	6991      	ldr	r1, [r2, #24]
 8001ee8:	68eb      	ldr	r3, [r5, #12]
 8001eea:	6928      	ldr	r0, [r5, #16]
 8001eec:	4303      	orrs	r3, r0
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	6193      	str	r3, [r2, #24]
  status = RTC_ExitInitMode(hrtc);
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f7ff ff24 	bl	8001d40 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001ef8:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <HAL_RTC_SetTime+0xd8>)
 8001efa:	21ff      	movs	r1, #255	; 0xff
 8001efc:	6251      	str	r1, [r2, #36]	; 0x24
  if (status == HAL_OK)
 8001efe:	b910      	cbnz	r0, 8001f06 <HAL_RTC_SetTime+0xa6>
    hrtc->State = HAL_RTC_STATE_READY;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8001f06:	2300      	movs	r3, #0
 8001f08:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_RTC_SetTime+0xd8>)
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f013 0f40 	tst.w	r3, #64	; 0x40
          sTime->TimeFormat = 0x00U;
 8001f16:	bf04      	itt	eq
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	70eb      	strbeq	r3, [r5, #3]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001f1c:	782a      	ldrb	r2, [r5, #0]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f1e:	786b      	ldrb	r3, [r5, #1]
 8001f20:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001f26:	78aa      	ldrb	r2, [r5, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f28:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001f2a:	78e8      	ldrb	r0, [r5, #3]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001f2c:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
 8001f30:	e7cf      	b.n	8001ed2 <HAL_RTC_SetTime+0x72>
  __HAL_LOCK(hrtc);
 8001f32:	2002      	movs	r0, #2
 8001f34:	e7ea      	b.n	8001f0c <HAL_RTC_SetTime+0xac>
 8001f36:	bf00      	nop
 8001f38:	40002800 	.word	0x40002800

08001f3c <HAL_RTC_SetDate>:
{
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001f3e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d033      	beq.n	8001fae <HAL_RTC_SetDate+0x72>
 8001f46:	4605      	mov	r5, r0
 8001f48:	460e      	mov	r6, r1
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f50:	2302      	movs	r3, #2
 8001f52:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001f56:	bb62      	cbnz	r2, 8001fb2 <HAL_RTC_SetDate+0x76>
 8001f58:	784b      	ldrb	r3, [r1, #1]
 8001f5a:	f013 0f10 	tst.w	r3, #16
 8001f5e:	d003      	beq.n	8001f68 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001f60:	f023 0310 	bic.w	r3, r3, #16
 8001f64:	330a      	adds	r3, #10
 8001f66:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8001f68:	78f0      	ldrb	r0, [r6, #3]
 8001f6a:	f7ff ff6b 	bl	8001e44 <RTC_ByteToBcd2>
 8001f6e:	4607      	mov	r7, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001f70:	7870      	ldrb	r0, [r6, #1]
 8001f72:	f7ff ff67 	bl	8001e44 <RTC_ByteToBcd2>
 8001f76:	4604      	mov	r4, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8001f78:	78b0      	ldrb	r0, [r6, #2]
 8001f7a:	f7ff ff63 	bl	8001e44 <RTC_ByteToBcd2>
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8001f7e:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8001f80:	ea40 3343 	orr.w	r3, r0, r3, lsl #13
 8001f84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8001f88:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 8001f8c:	e01b      	b.n	8001fc6 <HAL_RTC_SetDate+0x8a>
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8001f8e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 8001f92:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001f96:	4c14      	ldr	r4, [pc, #80]	; (8001fe8 <HAL_RTC_SetDate+0xac>)
 8001f98:	6063      	str	r3, [r4, #4]
    status = RTC_ExitInitMode(hrtc);
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	f7ff fed0 	bl	8001d40 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fa0:	22ff      	movs	r2, #255	; 0xff
 8001fa2:	6262      	str	r2, [r4, #36]	; 0x24
  if (status == HAL_OK)
 8001fa4:	b9e0      	cbnz	r0, 8001fe0 <HAL_RTC_SetDate+0xa4>
    hrtc->State = HAL_RTC_STATE_READY ;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 8001fac:	e018      	b.n	8001fe0 <HAL_RTC_SetDate+0xa4>
  __HAL_LOCK(hrtc);
 8001fae:	2002      	movs	r0, #2
 8001fb0:	e019      	b.n	8001fe6 <HAL_RTC_SetDate+0xaa>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001fb2:	78cc      	ldrb	r4, [r1, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001fb4:	784b      	ldrb	r3, [r1, #1]
 8001fb6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001fb8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8001fbc:	788c      	ldrb	r4, [r1, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001fbe:	4323      	orrs	r3, r4
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001fc0:	780c      	ldrb	r4, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001fc2:	ea43 3444 	orr.w	r4, r3, r4, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_RTC_SetDate+0xac>)
 8001fc8:	22ca      	movs	r2, #202	; 0xca
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24
 8001fcc:	2253      	movs	r2, #83	; 0x53
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	f7ff fe89 	bl	8001ce8 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	d0d9      	beq.n	8001f8e <HAL_RTC_SetDate+0x52>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fda:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_RTC_SetDate+0xac>)
 8001fdc:	22ff      	movs	r2, #255	; 0xff
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
}
 8001fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fe8:	40002800 	.word	0x40002800

08001fec <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 8001fec:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	f000 808e 	beq.w	8002112 <HAL_RTC_SetAlarm+0x126>
{
 8001ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8001ffe:	2301      	movs	r3, #1
 8002000:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002004:	2302      	movs	r3, #2
 8002006:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800200a:	4b58      	ldr	r3, [pc, #352]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8002012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002016:	f000 8094 	beq.w	8002142 <HAL_RTC_SetAlarm+0x156>
    if (Format == RTC_FORMAT_BIN)
 800201a:	2a00      	cmp	r2, #0
 800201c:	d14d      	bne.n	80020ba <HAL_RTC_SetAlarm+0xce>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800201e:	4b53      	ldr	r3, [pc, #332]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f013 0f40 	tst.w	r3, #64	; 0x40
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002026:	bf04      	itt	eq
 8002028:	2300      	moveq	r3, #0
 800202a:	70cb      	strbeq	r3, [r1, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800202c:	7808      	ldrb	r0, [r1, #0]
 800202e:	f7ff ff09 	bl	8001e44 <RTC_ByteToBcd2>
 8002032:	4607      	mov	r7, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002034:	7860      	ldrb	r0, [r4, #1]
 8002036:	f7ff ff05 	bl	8001e44 <RTC_ByteToBcd2>
 800203a:	4606      	mov	r6, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800203c:	78a0      	ldrb	r0, [r4, #2]
 800203e:	f7ff ff01 	bl	8001e44 <RTC_ByteToBcd2>
 8002042:	4680      	mov	r8, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002044:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8002048:	f7ff fefc 	bl	8001e44 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800204c:	6963      	ldr	r3, [r4, #20]
 800204e:	6a22      	ldr	r2, [r4, #32]
 8002050:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002052:	78e2      	ldrb	r2, [r4, #3]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002054:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8002058:	ea43 0308 	orr.w	r3, r3, r8
 800205c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8002060:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8002064:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002068:	4b40      	ldr	r3, [pc, #256]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 800206a:	22ca      	movs	r2, #202	; 0xca
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
 800206e:	2253      	movs	r2, #83	; 0x53
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002072:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002078:	d04d      	beq.n	8002116 <HAL_RTC_SetAlarm+0x12a>
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 800207a:	4b3c      	ldr	r3, [pc, #240]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8002082:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8002084:	2202      	movs	r2, #2
 8002086:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8002088:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800208a:	69a2      	ldr	r2, [r4, #24]
 800208c:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800208e:	6862      	ldr	r2, [r4, #4]
 8002090:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 8002092:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8002094:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002096:	f042 0202 	orr.w	r2, r2, #2
 800209a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020a4:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 80020a6:	22ff      	movs	r2, #255	; 0xff
 80020a8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 80020b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80020ba:	694b      	ldr	r3, [r1, #20]
 80020bc:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80020c0:	d009      	beq.n	80020d6 <HAL_RTC_SetAlarm+0xea>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80020c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020c6:	d006      	beq.n	80020d6 <HAL_RTC_SetAlarm+0xea>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 80020ca:	6992      	ldr	r2, [r2, #24]
 80020cc:	f012 0f40 	tst.w	r2, #64	; 0x40
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80020d0:	bf04      	itt	eq
 80020d2:	2200      	moveq	r2, #0
 80020d4:	70ca      	strbeq	r2, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80020d6:	6a20      	ldr	r0, [r4, #32]
 80020d8:	4318      	orrs	r0, r3
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80020da:	78a3      	ldrb	r3, [r4, #2]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80020dc:	4318      	orrs	r0, r3
 80020de:	7823      	ldrb	r3, [r4, #0]
 80020e0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80020e4:	7863      	ldrb	r3, [r4, #1]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80020e6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80020ea:	78e3      	ldrb	r3, [r4, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80020ec:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80020f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80020f4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020f8:	e7b6      	b.n	8002068 <HAL_RTC_SetAlarm+0x7c>
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002102:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8002104:	2201      	movs	r2, #1
 8002106:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8002108:	69a2      	ldr	r2, [r4, #24]
 800210a:	69e1      	ldr	r1, [r4, #28]
 800210c:	430a      	orrs	r2, r1
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
 8002110:	e00b      	b.n	800212a <HAL_RTC_SetAlarm+0x13e>
  __HAL_LOCK(hrtc);
 8002112:	2002      	movs	r0, #2
}
 8002114:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800211e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8002120:	2201      	movs	r2, #1
 8002122:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8002124:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8002126:	69a2      	ldr	r2, [r4, #24]
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800212a:	6862      	ldr	r2, [r4, #4]
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 800212e:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8002130:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800213e:	619a      	str	r2, [r3, #24]
 8002140:	e7b0      	b.n	80020a4 <HAL_RTC_SetAlarm+0xb8>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 8002144:	22ca      	movs	r2, #202	; 0xca
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
 8002148:	2253      	movs	r2, #83	; 0x53
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800214c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800214e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002152:	d0d2      	beq.n	80020fa <HAL_RTC_SetAlarm+0x10e>
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RTC_SetAlarm+0x180>)
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800215c:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800215e:	2202      	movs	r2, #2
 8002160:	65da      	str	r2, [r3, #92]	; 0x5c
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8002162:	69a2      	ldr	r2, [r4, #24]
 8002164:	69e1      	ldr	r1, [r4, #28]
 8002166:	430a      	orrs	r2, r1
 8002168:	64da      	str	r2, [r3, #76]	; 0x4c
 800216a:	e790      	b.n	800208e <HAL_RTC_SetAlarm+0xa2>
 800216c:	40002800 	.word	0x40002800

08002170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	4681      	mov	r9, r0
 8002178:	460f      	mov	r7, r1
 800217a:	4616      	mov	r6, r2
 800217c:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800217e:	f7fe fd0f 	bl	8000ba0 <HAL_GetTick>
 8002182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002184:	442b      	add	r3, r5
 8002186:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 800218a:	f7fe fd09 	bl	8000ba0 <HAL_GetTick>
 800218e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002198:	fb08 f303 	mul.w	r3, r8, r3
 800219c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800219e:	f8d9 3000 	ldr.w	r3, [r9]
 80021a2:	689c      	ldr	r4, [r3, #8]
 80021a4:	ea37 0204 	bics.w	r2, r7, r4
 80021a8:	bf0c      	ite	eq
 80021aa:	f04f 0c01 	moveq.w	ip, #1
 80021ae:	f04f 0c00 	movne.w	ip, #0
 80021b2:	45b4      	cmp	ip, r6
 80021b4:	d044      	beq.n	8002240 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80021ba:	d0f2      	beq.n	80021a2 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021bc:	f7fe fcf0 	bl	8000ba0 <HAL_GetTick>
 80021c0:	eba0 000a 	sub.w	r0, r0, sl
 80021c4:	4540      	cmp	r0, r8
 80021c6:	d207      	bcs.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021c8:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf08      	it	eq
 80021ce:	4698      	moveq	r8, r3
      }
      count--;
 80021d0:	9b01      	ldr	r3, [sp, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	e7e2      	b.n	800219e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021d8:	f8d9 2000 	ldr.w	r2, [r9]
 80021dc:	6853      	ldr	r3, [r2, #4]
 80021de:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80021e2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ec:	d00c      	beq.n	8002208 <SPI_WaitFlagStateUntilTimeout+0x98>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021ee:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80021f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f6:	d016      	beq.n	8002226 <SPI_WaitFlagStateUntilTimeout+0xb6>
        hspi->State = HAL_SPI_STATE_READY;
 80021f8:	2301      	movs	r3, #1
 80021fa:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80021fe:	2300      	movs	r3, #0
 8002200:	f889 305c 	strb.w	r3, [r9, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002204:	2003      	movs	r0, #3
 8002206:	e01c      	b.n	8002242 <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002208:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800220c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002210:	d002      	beq.n	8002218 <SPI_WaitFlagStateUntilTimeout+0xa8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002216:	d1ea      	bne.n	80021ee <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8002218:	f8d9 2000 	ldr.w	r2, [r9]
 800221c:	6813      	ldr	r3, [r2, #0]
 800221e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e7e3      	b.n	80021ee <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8002226:	f8d9 2000 	ldr.w	r2, [r9]
 800222a:	6813      	ldr	r3, [r2, #0]
 800222c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	f8d9 2000 	ldr.w	r2, [r9]
 8002236:	6813      	ldr	r3, [r2, #0]
 8002238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e7db      	b.n	80021f8 <SPI_WaitFlagStateUntilTimeout+0x88>
    }
  }

  return HAL_OK;
 8002240:	2000      	movs	r0, #0
}
 8002242:	b002      	add	sp, #8
 8002244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002248:	20000080 	.word	0x20000080

0800224c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	4680      	mov	r8, r0
 8002254:	460c      	mov	r4, r1
 8002256:	4615      	mov	r5, r2
 8002258:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002260:	f7fe fc9e 	bl	8000ba0 <HAL_GetTick>
 8002264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002266:	4433      	add	r3, r6
 8002268:	1a1f      	subs	r7, r3, r0
  tmp_tickstart = HAL_GetTick();
 800226a:	f7fe fc99 	bl	8000ba0 <HAL_GetTick>
 800226e:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002270:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002274:	4b33      	ldr	r3, [pc, #204]	; (8002344 <SPI_WaitFifoStateUntilTimeout+0xf8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800227c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002280:	0d1b      	lsrs	r3, r3, #20
 8002282:	fb07 f303 	mul.w	r3, r7, r3
 8002286:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002288:	f8d8 2000 	ldr.w	r2, [r8]
 800228c:	e002      	b.n	8002294 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 800228e:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002292:	d111      	bne.n	80022b8 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8002294:	6893      	ldr	r3, [r2, #8]
 8002296:	ea03 0c04 	and.w	ip, r3, r4
 800229a:	45ac      	cmp	ip, r5
 800229c:	d04e      	beq.n	800233c <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800229e:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80022a2:	d1f4      	bne.n	800228e <SPI_WaitFifoStateUntilTimeout+0x42>
 80022a4:	2d00      	cmp	r5, #0
 80022a6:	d1f2      	bne.n	800228e <SPI_WaitFifoStateUntilTimeout+0x42>
      tmpreg8 = *ptmpreg8;
 80022a8:	f89a 300c 	ldrb.w	r3, [sl, #12]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80022b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80022b6:	e7ea      	b.n	800228e <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022b8:	f7fe fc72 	bl	8000ba0 <HAL_GetTick>
 80022bc:	eba0 0009 	sub.w	r0, r0, r9
 80022c0:	42b8      	cmp	r0, r7
 80022c2:	d207      	bcs.n	80022d4 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022c4:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf08      	it	eq
 80022ca:	461f      	moveq	r7, r3
      }
      count--;
 80022cc:	9b01      	ldr	r3, [sp, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	e7d9      	b.n	8002288 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022d4:	f8d8 2000 	ldr.w	r2, [r8]
 80022d8:	6853      	ldr	r3, [r2, #4]
 80022da:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80022de:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80022e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022e8:	d00c      	beq.n	8002304 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022ea:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80022ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f2:	d016      	beq.n	8002322 <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80022fa:	2300      	movs	r3, #0
 80022fc:	f888 305c 	strb.w	r3, [r8, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002300:	2003      	movs	r0, #3
 8002302:	e01c      	b.n	800233e <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002304:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800230c:	d002      	beq.n	8002314 <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800230e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002312:	d1ea      	bne.n	80022ea <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8002314:	f8d8 2000 	ldr.w	r2, [r8]
 8002318:	6813      	ldr	r3, [r2, #0]
 800231a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e7e3      	b.n	80022ea <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 8002322:	f8d8 2000 	ldr.w	r2, [r8]
 8002326:	6813      	ldr	r3, [r2, #0]
 8002328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	f8d8 2000 	ldr.w	r2, [r8]
 8002332:	6813      	ldr	r3, [r2, #0]
 8002334:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e7db      	b.n	80022f4 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 800233c:	2000      	movs	r0, #0
}
 800233e:	b002      	add	sp, #8
 8002340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002344:	20000080 	.word	0x20000080

08002348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	4604      	mov	r4, r0
 800234e:	460d      	mov	r5, r1
 8002350:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002352:	9200      	str	r2, [sp, #0]
 8002354:	460b      	mov	r3, r1
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800235c:	f7ff ff76 	bl	800224c <SPI_WaitFifoStateUntilTimeout>
 8002360:	b9b0      	cbnz	r0, 8002390 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002362:	9600      	str	r6, [sp, #0]
 8002364:	462b      	mov	r3, r5
 8002366:	2200      	movs	r2, #0
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff ff00 	bl	8002170 <SPI_WaitFlagStateUntilTimeout>
 8002370:	b9a8      	cbnz	r0, 800239e <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002372:	9600      	str	r6, [sp, #0]
 8002374:	462b      	mov	r3, r5
 8002376:	2200      	movs	r2, #0
 8002378:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff ff65 	bl	800224c <SPI_WaitFifoStateUntilTimeout>
 8002382:	b150      	cbz	r0, 800239a <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002384:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002386:	f043 0320 	orr.w	r3, r3, #32
 800238a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800238c:	2003      	movs	r0, #3
 800238e:	e004      	b.n	800239a <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002390:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002398:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800239a:	b002      	add	sp, #8
 800239c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800239e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80023a0:	f043 0320 	orr.w	r3, r3, #32
 80023a4:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80023a6:	2003      	movs	r0, #3
 80023a8:	e7f7      	b.n	800239a <SPI_EndRxTxTransaction+0x52>

080023aa <SPI_EndRxTransaction>:
{
 80023aa:	b570      	push	{r4, r5, r6, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	4604      	mov	r4, r0
 80023b0:	460d      	mov	r5, r1
 80023b2:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023b4:	6843      	ldr	r3, [r0, #4]
 80023b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ba:	d00d      	beq.n	80023d8 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023bc:	9600      	str	r6, [sp, #0]
 80023be:	462b      	mov	r3, r5
 80023c0:	2200      	movs	r2, #0
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7ff fed3 	bl	8002170 <SPI_WaitFlagStateUntilTimeout>
 80023ca:	b990      	cbnz	r0, 80023f2 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023cc:	6863      	ldr	r3, [r4, #4]
 80023ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023d2:	d014      	beq.n	80023fe <SPI_EndRxTransaction+0x54>
}
 80023d4:	b002      	add	sp, #8
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d8:	6883      	ldr	r3, [r0, #8]
 80023da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023de:	d002      	beq.n	80023e6 <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e4:	d1ea      	bne.n	80023bc <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 80023e6:	6822      	ldr	r2, [r4, #0]
 80023e8:	6813      	ldr	r3, [r2, #0]
 80023ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e7e4      	b.n	80023bc <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80023f4:	f043 0320 	orr.w	r3, r3, #32
 80023f8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80023fa:	2003      	movs	r0, #3
 80023fc:	e7ea      	b.n	80023d4 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023fe:	68a3      	ldr	r3, [r4, #8]
 8002400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002404:	d002      	beq.n	800240c <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240a:	d1e3      	bne.n	80023d4 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800240c:	9600      	str	r6, [sp, #0]
 800240e:	462b      	mov	r3, r5
 8002410:	2200      	movs	r2, #0
 8002412:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002416:	4620      	mov	r0, r4
 8002418:	f7ff ff18 	bl	800224c <SPI_WaitFifoStateUntilTimeout>
 800241c:	2800      	cmp	r0, #0
 800241e:	d0d9      	beq.n	80023d4 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002420:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002422:	f043 0320 	orr.w	r3, r3, #32
 8002426:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002428:	2003      	movs	r0, #3
 800242a:	e7d3      	b.n	80023d4 <SPI_EndRxTransaction+0x2a>

0800242c <HAL_SPI_Init>:
  if (hspi == NULL)
 800242c:	2800      	cmp	r0, #0
 800242e:	f000 808b 	beq.w	8002548 <HAL_SPI_Init+0x11c>
{
 8002432:	b510      	push	{r4, lr}
 8002434:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002436:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002438:	b933      	cbnz	r3, 8002448 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800243a:	6843      	ldr	r3, [r0, #4]
 800243c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002440:	d005      	beq.n	800244e <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002442:	2300      	movs	r3, #0
 8002444:	61c3      	str	r3, [r0, #28]
 8002446:	e002      	b.n	800244e <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800244c:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800244e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002452:	2b00      	cmp	r3, #0
 8002454:	d058      	beq.n	8002508 <HAL_SPI_Init+0xdc>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002456:	2302      	movs	r3, #2
 8002458:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800245c:	6822      	ldr	r2, [r4, #0]
 800245e:	6813      	ldr	r3, [r2, #0]
 8002460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002464:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002466:	68e3      	ldr	r3, [r4, #12]
 8002468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800246c:	d871      	bhi.n	8002552 <HAL_SPI_Init+0x126>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800246e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002472:	d06b      	beq.n	800254c <HAL_SPI_Init+0x120>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800247c:	6822      	ldr	r2, [r4, #0]
 800247e:	6863      	ldr	r3, [r4, #4]
 8002480:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002484:	68a0      	ldr	r0, [r4, #8]
 8002486:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800248a:	4303      	orrs	r3, r0
 800248c:	6920      	ldr	r0, [r4, #16]
 800248e:	f000 0002 	and.w	r0, r0, #2
 8002492:	4303      	orrs	r3, r0
 8002494:	6960      	ldr	r0, [r4, #20]
 8002496:	f000 0001 	and.w	r0, r0, #1
 800249a:	4303      	orrs	r3, r0
 800249c:	69a0      	ldr	r0, [r4, #24]
 800249e:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80024a2:	4303      	orrs	r3, r0
 80024a4:	69e0      	ldr	r0, [r4, #28]
 80024a6:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80024aa:	4303      	orrs	r3, r0
 80024ac:	6a20      	ldr	r0, [r4, #32]
 80024ae:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80024b2:	4303      	orrs	r3, r0
 80024b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80024b6:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80024ba:	4303      	orrs	r3, r0
 80024bc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c4:	d028      	beq.n	8002518 <HAL_SPI_Init+0xec>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024c6:	6822      	ldr	r2, [r4, #0]
 80024c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80024d0:	f000 0008 	and.w	r0, r0, #8
 80024d4:	4303      	orrs	r3, r0
 80024d6:	68e0      	ldr	r0, [r4, #12]
 80024d8:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 80024dc:	4303      	orrs	r3, r0
 80024de:	8b60      	ldrh	r0, [r4, #26]
 80024e0:	f000 0004 	and.w	r0, r0, #4
 80024e4:	4303      	orrs	r3, r0
 80024e6:	430b      	orrs	r3, r1
 80024e8:	6053      	str	r3, [r2, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f0:	d026      	beq.n	8002540 <HAL_SPI_Init+0x114>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024f2:	6822      	ldr	r2, [r4, #0]
 80024f4:	69d3      	ldr	r3, [r2, #28]
 80024f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024fa:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024fc:	2000      	movs	r0, #0
 80024fe:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002500:	2301      	movs	r3, #1
 8002502:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8002506:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002508:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800250c:	4620      	mov	r0, r4
 800250e:	f7fe f9c3 	bl	8000898 <HAL_SPI_MspInit>
 8002512:	e7a0      	b.n	8002456 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002514:	2100      	movs	r1, #0
 8002516:	e7af      	b.n	8002478 <HAL_SPI_Init+0x4c>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002518:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800251a:	b973      	cbnz	r3, 800253a <HAL_SPI_Init+0x10e>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800251c:	68e3      	ldr	r3, [r4, #12]
 800251e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002522:	d907      	bls.n	8002534 <HAL_SPI_Init+0x108>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002524:	2302      	movs	r3, #2
 8002526:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8002528:	6822      	ldr	r2, [r4, #0]
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e7c8      	b.n	80024c6 <HAL_SPI_Init+0x9a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002534:	2301      	movs	r3, #1
 8002536:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002538:	e7c5      	b.n	80024c6 <HAL_SPI_Init+0x9a>
 800253a:	2b02      	cmp	r3, #2
 800253c:	d1c3      	bne.n	80024c6 <HAL_SPI_Init+0x9a>
 800253e:	e7f3      	b.n	8002528 <HAL_SPI_Init+0xfc>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8002544:	611a      	str	r2, [r3, #16]
 8002546:	e7d4      	b.n	80024f2 <HAL_SPI_Init+0xc6>
    return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
}
 800254a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800254c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002550:	e794      	b.n	800247c <HAL_SPI_Init+0x50>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002552:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002556:	d1dd      	bne.n	8002514 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002558:	2100      	movs	r1, #0
 800255a:	e78f      	b.n	800247c <HAL_SPI_Init+0x50>

0800255c <HAL_SPI_Transmit>:
{
 800255c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8002564:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8002568:	2b01      	cmp	r3, #1
 800256a:	f000 8109 	beq.w	8002780 <HAL_SPI_Transmit+0x224>
 800256e:	4604      	mov	r4, r0
 8002570:	4688      	mov	r8, r1
 8002572:	4617      	mov	r7, r2
 8002574:	2301      	movs	r3, #1
 8002576:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800257a:	f7fe fb11 	bl	8000ba0 <HAL_GetTick>
 800257e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002580:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8002584:	b2c0      	uxtb	r0, r0
 8002586:	2801      	cmp	r0, #1
 8002588:	f040 80ee 	bne.w	8002768 <HAL_SPI_Transmit+0x20c>
  if ((pData == NULL) || (Size == 0U))
 800258c:	f1b8 0f00 	cmp.w	r8, #0
 8002590:	f000 80eb 	beq.w	800276a <HAL_SPI_Transmit+0x20e>
 8002594:	2f00      	cmp	r7, #0
 8002596:	f000 80e8 	beq.w	800276a <HAL_SPI_Transmit+0x20e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800259a:	2303      	movs	r3, #3
 800259c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025a4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80025a8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80025aa:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025ac:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80025ae:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80025b2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80025b6:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80025b8:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ba:	68a3      	ldr	r3, [r4, #8]
 80025bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c0:	d03e      	beq.n	8002640 <HAL_SPI_Transmit+0xe4>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c8:	d045      	beq.n	8002656 <HAL_SPI_Transmit+0xfa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80025d2:	d103      	bne.n	80025dc <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025da:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025dc:	68e3      	ldr	r3, [r4, #12]
 80025de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025e2:	d967      	bls.n	80026b4 <HAL_SPI_Transmit+0x158>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e4:	6863      	ldr	r3, [r4, #4]
 80025e6:	b10b      	cbz	r3, 80025ec <HAL_SPI_Transmit+0x90>
 80025e8:	2f01      	cmp	r7, #1
 80025ea:	d10a      	bne.n	8002602 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025f0:	8812      	ldrh	r2, [r2, #0]
 80025f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025f6:	3302      	adds	r3, #2
 80025f8:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80025fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29b      	uxth	r3, r3
 8002600:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8002602:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d13c      	bne.n	8002684 <HAL_SPI_Transmit+0x128>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800260a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800260c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002610:	f000 80a4 	beq.w	800275c <HAL_SPI_Transmit+0x200>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002614:	4632      	mov	r2, r6
 8002616:	4629      	mov	r1, r5
 8002618:	4620      	mov	r0, r4
 800261a:	f7ff fe95 	bl	8002348 <SPI_EndRxTxTransaction>
 800261e:	b108      	cbz	r0, 8002624 <HAL_SPI_Transmit+0xc8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002620:	2320      	movs	r3, #32
 8002622:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002624:	68a3      	ldr	r3, [r4, #8]
 8002626:	b933      	cbnz	r3, 8002636 <HAL_SPI_Transmit+0xda>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	9201      	str	r2, [sp, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002636:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8002638:	3800      	subs	r0, #0
 800263a:	bf18      	it	ne
 800263c:	2001      	movne	r0, #1
error:
 800263e:	e094      	b.n	800276a <HAL_SPI_Transmit+0x20e>
    __HAL_SPI_DISABLE(hspi);
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002648:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800264a:	6822      	ldr	r2, [r4, #0]
 800264c:	6813      	ldr	r3, [r2, #0]
 800264e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e7b5      	b.n	80025c2 <HAL_SPI_Transmit+0x66>
    SPI_RESET_CRC(hspi);
 8002656:	6822      	ldr	r2, [r4, #0]
 8002658:	6813      	ldr	r3, [r2, #0]
 800265a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	6822      	ldr	r2, [r4, #0]
 8002662:	6813      	ldr	r3, [r2, #0]
 8002664:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e7ae      	b.n	80025ca <HAL_SPI_Transmit+0x6e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800266c:	f7fe fa98 	bl	8000ba0 <HAL_GetTick>
 8002670:	1b80      	subs	r0, r0, r6
 8002672:	42a8      	cmp	r0, r5
 8002674:	d31a      	bcc.n	80026ac <HAL_SPI_Transmit+0x150>
 8002676:	f1b5 3fff 	cmp.w	r5, #4294967295
 800267a:	d17f      	bne.n	800277c <HAL_SPI_Transmit+0x220>
    while (hspi->TxXferCount > 0U)
 800267c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0c2      	beq.n	800260a <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	f012 0f02 	tst.w	r2, #2
 800268c:	d0ee      	beq.n	800266c <HAL_SPI_Transmit+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800268e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002690:	8812      	ldrh	r2, [r2, #0]
 8002692:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002696:	3302      	adds	r3, #2
 8002698:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800269a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800269e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80026a2:	fa1f fc8c 	uxth.w	ip, ip
 80026a6:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 80026aa:	e7e7      	b.n	800267c <HAL_SPI_Transmit+0x120>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ac:	2d00      	cmp	r5, #0
 80026ae:	d1e5      	bne.n	800267c <HAL_SPI_Transmit+0x120>
          errorcode = HAL_TIMEOUT;
 80026b0:	2003      	movs	r0, #3
 80026b2:	e05a      	b.n	800276a <HAL_SPI_Transmit+0x20e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b4:	6863      	ldr	r3, [r4, #4]
 80026b6:	b10b      	cbz	r3, 80026bc <HAL_SPI_Transmit+0x160>
 80026b8:	2f01      	cmp	r7, #1
 80026ba:	d10e      	bne.n	80026da <HAL_SPI_Transmit+0x17e>
      if (hspi->TxXferCount > 1U)
 80026bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d90e      	bls.n	80026e2 <HAL_SPI_Transmit+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80026c8:	8812      	ldrh	r2, [r2, #0]
 80026ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026ce:	3302      	adds	r3, #2
 80026d0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80026d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026d4:	3b02      	subs	r3, #2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80026da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026dc:	b29b      	uxth	r3, r3
 80026de:	b9db      	cbnz	r3, 8002718 <HAL_SPI_Transmit+0x1bc>
 80026e0:	e793      	b.n	800260a <HAL_SPI_Transmit+0xae>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80026ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026ec:	3301      	adds	r3, #1
 80026ee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80026f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80026f8:	e7ef      	b.n	80026da <HAL_SPI_Transmit+0x17e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002702:	3301      	adds	r3, #1
 8002704:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002706:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002708:	3b01      	subs	r3, #1
 800270a:	b29b      	uxth	r3, r3
 800270c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800270e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002710:	b289      	uxth	r1, r1
 8002712:	2900      	cmp	r1, #0
 8002714:	f43f af79 	beq.w	800260a <HAL_SPI_Transmit+0xae>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002718:	6822      	ldr	r2, [r4, #0]
 800271a:	6893      	ldr	r3, [r2, #8]
 800271c:	f013 0f02 	tst.w	r3, #2
 8002720:	d00e      	beq.n	8002740 <HAL_SPI_Transmit+0x1e4>
        if (hspi->TxXferCount > 1U)
 8002722:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d9e7      	bls.n	80026fa <HAL_SPI_Transmit+0x19e>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800272a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002732:	3302      	adds	r3, #2
 8002734:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002736:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002738:	3b02      	subs	r3, #2
 800273a:	b29b      	uxth	r3, r3
 800273c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800273e:	e7e6      	b.n	800270e <HAL_SPI_Transmit+0x1b2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002740:	f7fe fa2e 	bl	8000ba0 <HAL_GetTick>
 8002744:	1b80      	subs	r0, r0, r6
 8002746:	42a8      	cmp	r0, r5
 8002748:	d304      	bcc.n	8002754 <HAL_SPI_Transmit+0x1f8>
 800274a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800274e:	d0de      	beq.n	800270e <HAL_SPI_Transmit+0x1b2>
          errorcode = HAL_TIMEOUT;
 8002750:	2003      	movs	r0, #3
 8002752:	e00a      	b.n	800276a <HAL_SPI_Transmit+0x20e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002754:	2d00      	cmp	r5, #0
 8002756:	d1da      	bne.n	800270e <HAL_SPI_Transmit+0x1b2>
          errorcode = HAL_TIMEOUT;
 8002758:	2003      	movs	r0, #3
 800275a:	e006      	b.n	800276a <HAL_SPI_Transmit+0x20e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	6813      	ldr	r3, [r2, #0]
 8002760:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e755      	b.n	8002614 <HAL_SPI_Transmit+0xb8>
    errorcode = HAL_BUSY;
 8002768:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800276a:	2301      	movs	r3, #1
 800276c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002770:	2300      	movs	r3, #0
 8002772:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002776:	b002      	add	sp, #8
 8002778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 800277c:	2003      	movs	r0, #3
 800277e:	e7f4      	b.n	800276a <HAL_SPI_Transmit+0x20e>
  __HAL_LOCK(hspi);
 8002780:	2002      	movs	r0, #2
 8002782:	e7f8      	b.n	8002776 <HAL_SPI_Transmit+0x21a>

08002784 <HAL_SPI_TransmitReceive>:
{
 8002784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	461f      	mov	r7, r3
 800278c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __IO uint32_t tmpreg = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8002792:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 8002796:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800279a:	2b01      	cmp	r3, #1
 800279c:	f000 81fc 	beq.w	8002b98 <HAL_SPI_TransmitReceive+0x414>
 80027a0:	4604      	mov	r4, r0
 80027a2:	4689      	mov	r9, r1
 80027a4:	4692      	mov	sl, r2
 80027a6:	2301      	movs	r3, #1
 80027a8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80027ac:	f7fe f9f8 	bl	8000ba0 <HAL_GetTick>
 80027b0:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80027b2:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80027b6:	b2c0      	uxtb	r0, r0
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	f8d3 c000 	ldr.w	ip, [r3]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80027be:	6859      	ldr	r1, [r3, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027c0:	2801      	cmp	r0, #1
 80027c2:	d00b      	beq.n	80027dc <HAL_SPI_TransmitReceive+0x58>
 80027c4:	6862      	ldr	r2, [r4, #4]
 80027c6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80027ca:	f040 81cc 	bne.w	8002b66 <HAL_SPI_TransmitReceive+0x3e2>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027ce:	68a2      	ldr	r2, [r4, #8]
 80027d0:	2a00      	cmp	r2, #0
 80027d2:	f040 81d3 	bne.w	8002b7c <HAL_SPI_TransmitReceive+0x3f8>
 80027d6:	2804      	cmp	r0, #4
 80027d8:	f040 81d2 	bne.w	8002b80 <HAL_SPI_TransmitReceive+0x3fc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027dc:	f1b9 0f00 	cmp.w	r9, #0
 80027e0:	f000 81d0 	beq.w	8002b84 <HAL_SPI_TransmitReceive+0x400>
 80027e4:	f1ba 0f00 	cmp.w	sl, #0
 80027e8:	f000 81ce 	beq.w	8002b88 <HAL_SPI_TransmitReceive+0x404>
 80027ec:	2f00      	cmp	r7, #0
 80027ee:	f000 81cd 	beq.w	8002b8c <HAL_SPI_TransmitReceive+0x408>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027f2:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027fa:	bf1c      	itt	ne
 80027fc:	2205      	movne	r2, #5
 80027fe:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002802:	2200      	movs	r2, #0
 8002804:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002806:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800280a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800280e:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002812:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002816:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002818:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800281a:	64e2      	str	r2, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800281c:	6522      	str	r2, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800281e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002820:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002824:	d030      	beq.n	8002888 <HAL_SPI_TransmitReceive+0x104>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002826:	68e3      	ldr	r3, [r4, #12]
 8002828:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800282c:	d801      	bhi.n	8002832 <HAL_SPI_TransmitReceive+0xae>
 800282e:	2f01      	cmp	r7, #1
 8002830:	d934      	bls.n	800289c <HAL_SPI_TransmitReceive+0x118>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	6853      	ldr	r3, [r2, #4]
 8002836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800283a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002844:	d103      	bne.n	800284e <HAL_SPI_TransmitReceive+0xca>
    __HAL_SPI_ENABLE(hspi);
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800284c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800284e:	68e3      	ldr	r3, [r4, #12]
 8002850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002854:	f240 8081 	bls.w	800295a <HAL_SPI_TransmitReceive+0x1d6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002858:	6863      	ldr	r3, [r4, #4]
 800285a:	b10b      	cbz	r3, 8002860 <HAL_SPI_TransmitReceive+0xdc>
 800285c:	2f01      	cmp	r7, #1
 800285e:	d10a      	bne.n	8002876 <HAL_SPI_TransmitReceive+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002864:	8812      	ldrh	r2, [r2, #0]
 8002866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800286a:	3302      	adds	r3, #2
 800286c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800286e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002870:	3b01      	subs	r3, #1
 8002872:	b29b      	uxth	r3, r3
 8002874:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002876:	f04f 0901 	mov.w	r9, #1
        txallowed = 0U;
 800287a:	f04f 0a00 	mov.w	sl, #0
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800287e:	f00c 0704 	and.w	r7, ip, #4
 8002882:	f001 0808 	and.w	r8, r1, #8
 8002886:	e03f      	b.n	8002908 <HAL_SPI_TransmitReceive+0x184>
    SPI_RESET_CRC(hspi);
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	6822      	ldr	r2, [r4, #0]
 8002892:	6813      	ldr	r3, [r2, #0]
 8002894:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e7c4      	b.n	8002826 <HAL_SPI_TransmitReceive+0xa2>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800289c:	6822      	ldr	r2, [r4, #0]
 800289e:	6853      	ldr	r3, [r2, #4]
 80028a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a4:	6053      	str	r3, [r2, #4]
 80028a6:	e7c9      	b.n	800283c <HAL_SPI_TransmitReceive+0xb8>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80028a8:	b93f      	cbnz	r7, 80028ba <HAL_SPI_TransmitReceive+0x136>
 80028aa:	f1b8 0f00 	cmp.w	r8, #0
 80028ae:	d004      	beq.n	80028ba <HAL_SPI_TransmitReceive+0x136>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80028b0:	6822      	ldr	r2, [r4, #0]
 80028b2:	6813      	ldr	r3, [r2, #0]
 80028b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b8:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80028ba:	6822      	ldr	r2, [r4, #0]
 80028bc:	6813      	ldr	r3, [r2, #0]
 80028be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028c2:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80028c4:	46d1      	mov	r9, sl
 80028c6:	e000      	b.n	80028ca <HAL_SPI_TransmitReceive+0x146>
 80028c8:	46d1      	mov	r9, sl
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028ca:	6822      	ldr	r2, [r4, #0]
 80028cc:	6893      	ldr	r3, [r2, #8]
 80028ce:	f013 0301 	ands.w	r3, r3, #1
 80028d2:	d010      	beq.n	80028f6 <HAL_SPI_TransmitReceive+0x172>
 80028d4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80028d8:	b289      	uxth	r1, r1
 80028da:	b161      	cbz	r1, 80028f6 <HAL_SPI_TransmitReceive+0x172>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028dc:	68d1      	ldr	r1, [r2, #12]
 80028de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028e0:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028e4:	3202      	adds	r2, #2
 80028e6:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80028e8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80028ec:	3a01      	subs	r2, #1
 80028ee:	b292      	uxth	r2, r2
 80028f0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 80028f4:	4699      	mov	r9, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028f6:	f7fe f953 	bl	8000ba0 <HAL_GetTick>
 80028fa:	1b80      	subs	r0, r0, r6
 80028fc:	42a8      	cmp	r0, r5
 80028fe:	d303      	bcc.n	8002908 <HAL_SPI_TransmitReceive+0x184>
 8002900:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002904:	f040 8144 	bne.w	8002b90 <HAL_SPI_TransmitReceive+0x40c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002908:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	b92b      	cbnz	r3, 800291a <HAL_SPI_TransmitReceive+0x196>
 800290e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80d2 	beq.w	8002abe <HAL_SPI_TransmitReceive+0x33a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	f012 0f02 	tst.w	r2, #2
 8002922:	d0d2      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x146>
 8002924:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002926:	b292      	uxth	r2, r2
 8002928:	2a00      	cmp	r2, #0
 800292a:	d0ce      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x146>
 800292c:	f1b9 0f00 	cmp.w	r9, #0
 8002930:	d0cb      	beq.n	80028ca <HAL_SPI_TransmitReceive+0x146>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002932:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002934:	8812      	ldrh	r2, [r2, #0]
 8002936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002938:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800293a:	3302      	adds	r3, #2
 800293c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800293e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002940:	3b01      	subs	r3, #1
 8002942:	b29b      	uxth	r3, r3
 8002944:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002946:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1bc      	bne.n	80028c8 <HAL_SPI_TransmitReceive+0x144>
 800294e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002954:	d0a8      	beq.n	80028a8 <HAL_SPI_TransmitReceive+0x124>
        txallowed = 0U;
 8002956:	46d1      	mov	r9, sl
 8002958:	e7b7      	b.n	80028ca <HAL_SPI_TransmitReceive+0x146>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800295a:	6863      	ldr	r3, [r4, #4]
 800295c:	b10b      	cbz	r3, 8002962 <HAL_SPI_TransmitReceive+0x1de>
 800295e:	2f01      	cmp	r7, #1
 8002960:	d10e      	bne.n	8002980 <HAL_SPI_TransmitReceive+0x1fc>
      if (hspi->TxXferCount > 1U)
 8002962:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d913      	bls.n	8002992 <HAL_SPI_TransmitReceive+0x20e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800296e:	8812      	ldrh	r2, [r2, #0]
 8002970:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002972:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002974:	3302      	adds	r3, #2
 8002976:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002978:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800297a:	3b02      	subs	r3, #2
 800297c:	b29b      	uxth	r3, r3
 800297e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002980:	f04f 0901 	mov.w	r9, #1
        txallowed = 0U;
 8002984:	f04f 0a00 	mov.w	sl, #0
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8002988:	f00c 0704 	and.w	r7, ip, #4
 800298c:	f001 0808 	and.w	r8, r1, #8
 8002990:	e05c      	b.n	8002a4c <HAL_SPI_TransmitReceive+0x2c8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002996:	7812      	ldrb	r2, [r2, #0]
 8002998:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800299a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800299c:	3301      	adds	r3, #1
 800299e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80029a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80029a8:	e7ea      	b.n	8002980 <HAL_SPI_TransmitReceive+0x1fc>
        if (hspi->TxXferCount > 1U)
 80029aa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80029ac:	b292      	uxth	r2, r2
 80029ae:	2a01      	cmp	r2, #1
 80029b0:	d912      	bls.n	80029d8 <HAL_SPI_TransmitReceive+0x254>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029b4:	8812      	ldrh	r2, [r2, #0]
 80029b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029ba:	3302      	adds	r3, #2
 80029bc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80029be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029c0:	3b02      	subs	r3, #2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80029c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	bb03      	cbnz	r3, 8002a0e <HAL_SPI_TransmitReceive+0x28a>
 80029cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d2:	d00c      	beq.n	80029ee <HAL_SPI_TransmitReceive+0x26a>
        txallowed = 0U;
 80029d4:	46d1      	mov	r9, sl
 80029d6:	e04c      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x2ee>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80029de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029e0:	3301      	adds	r3, #1
 80029e2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80029e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80029ec:	e7eb      	b.n	80029c6 <HAL_SPI_TransmitReceive+0x242>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80029ee:	b93f      	cbnz	r7, 8002a00 <HAL_SPI_TransmitReceive+0x27c>
 80029f0:	f1b8 0f00 	cmp.w	r8, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x27c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	6813      	ldr	r3, [r2, #0]
 80029fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fe:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002a00:	6822      	ldr	r2, [r4, #0]
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a08:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8002a0a:	46d1      	mov	r9, sl
 8002a0c:	e031      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x2ee>
 8002a0e:	46d1      	mov	r9, sl
 8002a10:	e02f      	b.n	8002a72 <HAL_SPI_TransmitReceive+0x2ee>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a12:	6821      	ldr	r1, [r4, #0]
 8002a14:	684a      	ldr	r2, [r1, #4]
 8002a16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a1a:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8002a1c:	4699      	mov	r9, r3
 8002a1e:	e00c      	b.n	8002a3a <HAL_SPI_TransmitReceive+0x2b6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a20:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002a22:	7b12      	ldrb	r2, [r2, #12]
 8002a24:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8002a26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a28:	3201      	adds	r2, #1
 8002a2a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002a2c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002a30:	3a01      	subs	r2, #1
 8002a32:	b292      	uxth	r2, r2
 8002a34:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
        txallowed = 1U;
 8002a38:	4699      	mov	r9, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a3a:	f7fe f8b1 	bl	8000ba0 <HAL_GetTick>
 8002a3e:	1b80      	subs	r0, r0, r6
 8002a40:	42a8      	cmp	r0, r5
 8002a42:	d338      	bcc.n	8002ab6 <HAL_SPI_TransmitReceive+0x332>
 8002a44:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002a48:	f040 80a4 	bne.w	8002b94 <HAL_SPI_TransmitReceive+0x410>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b923      	cbnz	r3, 8002a5c <HAL_SPI_TransmitReceive+0x2d8>
 8002a52:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d030      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x33a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	f012 0f02 	tst.w	r2, #2
 8002a64:	d005      	beq.n	8002a72 <HAL_SPI_TransmitReceive+0x2ee>
 8002a66:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002a68:	b292      	uxth	r2, r2
 8002a6a:	b112      	cbz	r2, 8002a72 <HAL_SPI_TransmitReceive+0x2ee>
 8002a6c:	f1b9 0f01 	cmp.w	r9, #1
 8002a70:	d09b      	beq.n	80029aa <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a72:	6822      	ldr	r2, [r4, #0]
 8002a74:	6893      	ldr	r3, [r2, #8]
 8002a76:	f013 0301 	ands.w	r3, r3, #1
 8002a7a:	d0de      	beq.n	8002a3a <HAL_SPI_TransmitReceive+0x2b6>
 8002a7c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002a80:	b289      	uxth	r1, r1
 8002a82:	2900      	cmp	r1, #0
 8002a84:	d0d9      	beq.n	8002a3a <HAL_SPI_TransmitReceive+0x2b6>
        if (hspi->RxXferCount > 1U)
 8002a86:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8002a8a:	b289      	uxth	r1, r1
 8002a8c:	2901      	cmp	r1, #1
 8002a8e:	d9c7      	bls.n	8002a20 <HAL_SPI_TransmitReceive+0x29c>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a90:	68d1      	ldr	r1, [r2, #12]
 8002a92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a94:	8011      	strh	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a98:	3202      	adds	r2, #2
 8002a9a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002a9c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002aa0:	3a02      	subs	r2, #2
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002aa8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002aac:	b292      	uxth	r2, r2
 8002aae:	2a01      	cmp	r2, #1
 8002ab0:	d9af      	bls.n	8002a12 <HAL_SPI_TransmitReceive+0x28e>
        txallowed = 1U;
 8002ab2:	4699      	mov	r9, r3
 8002ab4:	e7c1      	b.n	8002a3a <HAL_SPI_TransmitReceive+0x2b6>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ab6:	2d00      	cmp	r5, #0
 8002ab8:	d1c8      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x2c8>
        errorcode = HAL_TIMEOUT;
 8002aba:	2703      	movs	r7, #3
 8002abc:	e054      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002abe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac4:	d017      	beq.n	8002af6 <HAL_SPI_TransmitReceive+0x372>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	f012 0f10 	tst.w	r2, #16
 8002ace:	d048      	beq.n	8002b62 <HAL_SPI_TransmitReceive+0x3de>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002ad0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002ad2:	f042 0202 	orr.w	r2, r2, #2
 8002ad6:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002ad8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002adc:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 8002ade:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ae0:	4632      	mov	r2, r6
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff fc2f 	bl	8002348 <SPI_EndRxTxTransaction>
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d03c      	beq.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aee:	2320      	movs	r3, #32
 8002af0:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002af2:	2701      	movs	r7, #1
 8002af4:	e038      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002af6:	9600      	str	r6, [sp, #0]
 8002af8:	462b      	mov	r3, r5
 8002afa:	2201      	movs	r2, #1
 8002afc:	4611      	mov	r1, r2
 8002afe:	4620      	mov	r0, r4
 8002b00:	f7ff fb36 	bl	8002170 <SPI_WaitFlagStateUntilTimeout>
 8002b04:	b9e0      	cbnz	r0, 8002b40 <HAL_SPI_TransmitReceive+0x3bc>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b06:	68e3      	ldr	r3, [r4, #12]
 8002b08:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b0c:	d01e      	beq.n	8002b4c <HAL_SPI_TransmitReceive+0x3c8>
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b0e:	6827      	ldr	r7, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8002b10:	7b3b      	ldrb	r3, [r7, #12]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8002b18:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002b1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d1d1      	bne.n	8002ac6 <HAL_SPI_TransmitReceive+0x342>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002b22:	9600      	str	r6, [sp, #0]
 8002b24:	462b      	mov	r3, r5
 8002b26:	2201      	movs	r2, #1
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f7ff fb20 	bl	8002170 <SPI_WaitFlagStateUntilTimeout>
 8002b30:	b988      	cbnz	r0, 8002b56 <HAL_SPI_TransmitReceive+0x3d2>
        tmpreg8 = *ptmpreg8;
 8002b32:	7b3b      	ldrb	r3, [r7, #12]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8002b3a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002b3e:	e7c2      	b.n	8002ac6 <HAL_SPI_TransmitReceive+0x342>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002b40:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b42:	f043 0302 	orr.w	r3, r3, #2
 8002b46:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8002b48:	2703      	movs	r7, #3
      goto error;
 8002b4a:	e00d      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
      tmpreg = READ_REG(hspi->Instance->DR);
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8002b52:	9b03      	ldr	r3, [sp, #12]
 8002b54:	e7b7      	b.n	8002ac6 <HAL_SPI_TransmitReceive+0x342>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002b56:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b58:	f043 0302 	orr.w	r3, r3, #2
 8002b5c:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8002b5e:	2703      	movs	r7, #3
          goto error;
 8002b60:	e002      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b62:	2700      	movs	r7, #0
 8002b64:	e7bc      	b.n	8002ae0 <HAL_SPI_TransmitReceive+0x35c>
    errorcode = HAL_BUSY;
 8002b66:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002b74:	4638      	mov	r0, r7
 8002b76:	b004      	add	sp, #16
 8002b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_BUSY;
 8002b7c:	2702      	movs	r7, #2
 8002b7e:	e7f3      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
 8002b80:	2702      	movs	r7, #2
 8002b82:	e7f1      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
    errorcode = HAL_ERROR;
 8002b84:	2701      	movs	r7, #1
 8002b86:	e7ef      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
 8002b88:	2701      	movs	r7, #1
 8002b8a:	e7ed      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
 8002b8c:	2701      	movs	r7, #1
 8002b8e:	e7eb      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
        errorcode = HAL_TIMEOUT;
 8002b90:	2703      	movs	r7, #3
 8002b92:	e7e9      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
        errorcode = HAL_TIMEOUT;
 8002b94:	2703      	movs	r7, #3
 8002b96:	e7e7      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3e4>
  __HAL_LOCK(hspi);
 8002b98:	2702      	movs	r7, #2
 8002b9a:	e7eb      	b.n	8002b74 <HAL_SPI_TransmitReceive+0x3f0>

08002b9c <HAL_SPI_Receive>:
{
 8002b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	4688      	mov	r8, r1
 8002ba6:	4617      	mov	r7, r2
 8002ba8:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8002bae:	f88d 300b 	strb.w	r3, [sp, #11]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bb2:	6843      	ldr	r3, [r0, #4]
 8002bb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb8:	d06a      	beq.n	8002c90 <HAL_SPI_Receive+0xf4>
  __HAL_LOCK(hspi);
 8002bba:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	f000 8144 	beq.w	8002e4c <HAL_SPI_Receive+0x2b0>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002bca:	f7fd ffe9 	bl	8000ba0 <HAL_GetTick>
 8002bce:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002bd0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8002bd4:	b2c0      	uxtb	r0, r0
 8002bd6:	2801      	cmp	r0, #1
 8002bd8:	f040 8128 	bne.w	8002e2c <HAL_SPI_Receive+0x290>
  if ((pData == NULL) || (Size == 0U))
 8002bdc:	f1b8 0f00 	cmp.w	r8, #0
 8002be0:	f000 8125 	beq.w	8002e2e <HAL_SPI_Receive+0x292>
 8002be4:	2f00      	cmp	r7, #0
 8002be6:	f000 8122 	beq.w	8002e2e <HAL_SPI_Receive+0x292>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bea:	2304      	movs	r3, #4
 8002bec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bf4:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002bf8:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002bfc:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c00:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002c02:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002c04:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002c06:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c08:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c10:	d04a      	beq.n	8002ca8 <HAL_SPI_Receive+0x10c>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c12:	68e3      	ldr	r3, [r4, #12]
 8002c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c18:	6822      	ldr	r2, [r4, #0]
 8002c1a:	6853      	ldr	r3, [r2, #4]
 8002c1c:	bf8c      	ite	hi
 8002c1e:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c22:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8002c26:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c28:	68a3      	ldr	r3, [r4, #8]
 8002c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c2e:	d04c      	beq.n	8002cca <HAL_SPI_Receive+0x12e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c38:	d103      	bne.n	8002c42 <HAL_SPI_Receive+0xa6>
    __HAL_SPI_ENABLE(hspi);
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c40:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c42:	68e3      	ldr	r3, [r4, #12]
 8002c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c48:	d94a      	bls.n	8002ce0 <HAL_SPI_Receive+0x144>
    while (hspi->RxXferCount > 0U)
 8002c4a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d17d      	bne.n	8002d50 <HAL_SPI_Receive+0x1b4>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5a:	f000 8091 	beq.w	8002d80 <HAL_SPI_Receive+0x1e4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c5e:	4632      	mov	r2, r6
 8002c60:	4629      	mov	r1, r5
 8002c62:	4620      	mov	r0, r4
 8002c64:	f7ff fba1 	bl	80023aa <SPI_EndRxTransaction>
 8002c68:	b108      	cbz	r0, 8002c6e <HAL_SPI_Receive+0xd2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	f012 0f10 	tst.w	r2, #16
 8002c76:	d006      	beq.n	8002c86 <HAL_SPI_Receive+0xea>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002c78:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002c7a:	f042 0202 	orr.w	r2, r2, #2
 8002c7e:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002c80:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002c84:	609a      	str	r2, [r3, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c86:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8002c88:	3800      	subs	r0, #0
 8002c8a:	bf18      	it	ne
 8002c8c:	2001      	movne	r0, #1
error :
 8002c8e:	e0ce      	b.n	8002e2e <HAL_SPI_Receive+0x292>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c90:	6883      	ldr	r3, [r0, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d191      	bne.n	8002bba <HAL_SPI_Receive+0x1e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c96:	2304      	movs	r3, #4
 8002c98:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c9c:	9500      	str	r5, [sp, #0]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	460a      	mov	r2, r1
 8002ca2:	f7ff fd6f 	bl	8002784 <HAL_SPI_TransmitReceive>
 8002ca6:	e0c8      	b.n	8002e3a <HAL_SPI_Receive+0x29e>
    SPI_RESET_CRC(hspi);
 8002ca8:	6822      	ldr	r2, [r4, #0]
 8002caa:	6813      	ldr	r3, [r2, #0]
 8002cac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	6813      	ldr	r3, [r2, #0]
 8002cb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cba:	6013      	str	r3, [r2, #0]
    hspi->RxXferCount--;
 8002cbc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8002cc8:	e7a3      	b.n	8002c12 <HAL_SPI_Receive+0x76>
    __HAL_SPI_DISABLE(hspi);
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	6813      	ldr	r3, [r2, #0]
 8002cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cd2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	6813      	ldr	r3, [r2, #0]
 8002cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e7a7      	b.n	8002c30 <HAL_SPI_Receive+0x94>
    while (hspi->RxXferCount > 0U)
 8002ce0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b973      	cbnz	r3, 8002d06 <HAL_SPI_Receive+0x16a>
 8002ce8:	e7b4      	b.n	8002c54 <HAL_SPI_Receive+0xb8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cea:	f7fd ff59 	bl	8000ba0 <HAL_GetTick>
 8002cee:	1b80      	subs	r0, r0, r6
 8002cf0:	42a8      	cmp	r0, r5
 8002cf2:	d31c      	bcc.n	8002d2e <HAL_SPI_Receive+0x192>
 8002cf4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002cf8:	f040 80a2 	bne.w	8002e40 <HAL_SPI_Receive+0x2a4>
    while (hspi->RxXferCount > 0U)
 8002cfc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0a6      	beq.n	8002c54 <HAL_SPI_Receive+0xb8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	f012 0f01 	tst.w	r2, #1
 8002d0e:	d0ec      	beq.n	8002cea <HAL_SPI_Receive+0x14e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d12:	7b1b      	ldrb	r3, [r3, #12]
 8002d14:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d18:	3301      	adds	r3, #1
 8002d1a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002d1c:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 8002d20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002d24:	fa1f fc8c 	uxth.w	ip, ip
 8002d28:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 8002d2c:	e7e6      	b.n	8002cfc <HAL_SPI_Receive+0x160>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2e:	2d00      	cmp	r5, #0
 8002d30:	d1e4      	bne.n	8002cfc <HAL_SPI_Receive+0x160>
          errorcode = HAL_TIMEOUT;
 8002d32:	2003      	movs	r0, #3
 8002d34:	e07b      	b.n	8002e2e <HAL_SPI_Receive+0x292>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d36:	f7fd ff33 	bl	8000ba0 <HAL_GetTick>
 8002d3a:	1b80      	subs	r0, r0, r6
 8002d3c:	42a8      	cmp	r0, r5
 8002d3e:	d31b      	bcc.n	8002d78 <HAL_SPI_Receive+0x1dc>
 8002d40:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002d44:	d17e      	bne.n	8002e44 <HAL_SPI_Receive+0x2a8>
    while (hspi->RxXferCount > 0U)
 8002d46:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d081      	beq.n	8002c54 <HAL_SPI_Receive+0xb8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	f012 0f01 	tst.w	r2, #1
 8002d58:	d0ed      	beq.n	8002d36 <HAL_SPI_Receive+0x19a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d62:	3302      	adds	r3, #2
 8002d64:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002d66:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 8002d6a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002d6e:	fa1f fc8c 	uxth.w	ip, ip
 8002d72:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 8002d76:	e7e6      	b.n	8002d46 <HAL_SPI_Receive+0x1aa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d78:	2d00      	cmp	r5, #0
 8002d7a:	d1e4      	bne.n	8002d46 <HAL_SPI_Receive+0x1aa>
          errorcode = HAL_TIMEOUT;
 8002d7c:	2003      	movs	r0, #3
 8002d7e:	e056      	b.n	8002e2e <HAL_SPI_Receive+0x292>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002d80:	6822      	ldr	r2, [r4, #0]
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d88:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002d8a:	9600      	str	r6, [sp, #0]
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	2201      	movs	r2, #1
 8002d90:	4611      	mov	r1, r2
 8002d92:	4620      	mov	r0, r4
 8002d94:	f7ff f9ec 	bl	8002170 <SPI_WaitFlagStateUntilTimeout>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d155      	bne.n	8002e48 <HAL_SPI_Receive+0x2ac>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d9c:	68e3      	ldr	r3, [r4, #12]
 8002d9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002da2:	d92d      	bls.n	8002e00 <HAL_SPI_Receive+0x264>
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002daa:	801a      	strh	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002dac:	9600      	str	r6, [sp, #0]
 8002dae:	462b      	mov	r3, r5
 8002db0:	2201      	movs	r2, #1
 8002db2:	4611      	mov	r1, r2
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7ff f9db 	bl	8002170 <SPI_WaitFlagStateUntilTimeout>
 8002dba:	bb30      	cbnz	r0, 8002e0a <HAL_SPI_Receive+0x26e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dbc:	68e2      	ldr	r2, [r4, #12]
 8002dbe:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8002dc2:	d028      	beq.n	8002e16 <HAL_SPI_Receive+0x27a>
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002dc4:	6827      	ldr	r7, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8002dc6:	7b3b      	ldrb	r3, [r7, #12]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8002dce:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002dd2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8002dd6:	f47f af42 	bne.w	8002c5e <HAL_SPI_Receive+0xc2>
 8002dda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	f47f af3e 	bne.w	8002c5e <HAL_SPI_Receive+0xc2>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002de2:	9600      	str	r6, [sp, #0]
 8002de4:	462b      	mov	r3, r5
 8002de6:	2201      	movs	r2, #1
 8002de8:	4611      	mov	r1, r2
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7ff f9c0 	bl	8002170 <SPI_WaitFlagStateUntilTimeout>
 8002df0:	b9b0      	cbnz	r0, 8002e20 <HAL_SPI_Receive+0x284>
        tmpreg8 = *ptmpreg8;
 8002df2:	7b3b      	ldrb	r3, [r7, #12]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8002dfa:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002dfe:	e72e      	b.n	8002c5e <HAL_SPI_Receive+0xc2>
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e00:	6822      	ldr	r2, [r4, #0]
 8002e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e04:	7b12      	ldrb	r2, [r2, #12]
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e7d0      	b.n	8002dac <HAL_SPI_Receive+0x210>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002e0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8002e12:	2003      	movs	r0, #3
      goto error;
 8002e14:	e00b      	b.n	8002e2e <HAL_SPI_Receive+0x292>
      tmpreg = READ_REG(hspi->Instance->DR);
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8002e1c:	9b03      	ldr	r3, [sp, #12]
 8002e1e:	e71e      	b.n	8002c5e <HAL_SPI_Receive+0xc2>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002e20:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e22:	f043 0302 	orr.w	r3, r3, #2
 8002e26:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8002e28:	2003      	movs	r0, #3
          goto error;
 8002e2a:	e000      	b.n	8002e2e <HAL_SPI_Receive+0x292>
    errorcode = HAL_BUSY;
 8002e2c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002e34:	2300      	movs	r3, #0
 8002e36:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002e3a:	b004      	add	sp, #16
 8002e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          errorcode = HAL_TIMEOUT;
 8002e40:	2003      	movs	r0, #3
 8002e42:	e7f4      	b.n	8002e2e <HAL_SPI_Receive+0x292>
          errorcode = HAL_TIMEOUT;
 8002e44:	2003      	movs	r0, #3
 8002e46:	e7f2      	b.n	8002e2e <HAL_SPI_Receive+0x292>
      errorcode = HAL_TIMEOUT;
 8002e48:	2003      	movs	r0, #3
 8002e4a:	e7f0      	b.n	8002e2e <HAL_SPI_Receive+0x292>
  __HAL_LOCK(hspi);
 8002e4c:	2002      	movs	r0, #2
 8002e4e:	e7f4      	b.n	8002e3a <HAL_SPI_Receive+0x29e>

08002e50 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e50:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	e852 3f00 	ldrex	r3, [r2]
 8002e56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	e842 3100 	strex	r1, r3, [r2]
 8002e5e:	2900      	cmp	r1, #0
 8002e60:	d1f6      	bne.n	8002e50 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e62:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	f102 0308 	add.w	r3, r2, #8
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e70:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	3208      	adds	r2, #8
 8002e76:	e842 3100 	strex	r1, r3, [r2]
 8002e7a:	2900      	cmp	r1, #0
 8002e7c:	d1f1      	bne.n	8002e62 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e7e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d006      	beq.n	8002e92 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e84:	2320      	movs	r3, #32
 8002e86:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e8e:	6743      	str	r3, [r0, #116]	; 0x74
}
 8002e90:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e92:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	e852 3f00 	ldrex	r3, [r2]
 8002e98:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9c:	e842 3100 	strex	r1, r3, [r2]
 8002ea0:	2900      	cmp	r1, #0
 8002ea2:	d1f6      	bne.n	8002e92 <UART_EndRxTransfer+0x42>
 8002ea4:	e7ee      	b.n	8002e84 <UART_EndRxTransfer+0x34>

08002ea6 <HAL_UART_TxCpltCallback>:
}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_UART_ErrorCallback>:
}
 8002ea8:	4770      	bx	lr

08002eaa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002eaa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002eac:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8002eb4:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eb8:	f7ff fff6 	bl	8002ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ebc:	bd08      	pop	{r3, pc}

08002ebe <HAL_UARTEx_RxEventCallback>:
}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UART_IRQHandler>:
{
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ec4:	6802      	ldr	r2, [r0, #0]
 8002ec6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ec8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002eca:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8002ecc:	f640 0c0f 	movw	ip, #2063	; 0x80f
 8002ed0:	ea13 0f0c 	tst.w	r3, ip
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ed6:	f013 0f20 	tst.w	r3, #32
 8002eda:	d014      	beq.n	8002f06 <HAL_UART_IRQHandler+0x46>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002edc:	f000 0520 	and.w	r5, r0, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ee0:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 8002ee4:	ea55 050c 	orrs.w	r5, r5, ip
 8002ee8:	d00d      	beq.n	8002f06 <HAL_UART_IRQHandler+0x46>
      if (huart->RxISR != NULL)
 8002eea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002eec:	b3a3      	cbz	r3, 8002f58 <HAL_UART_IRQHandler+0x98>
        huart->RxISR(huart);
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4798      	blx	r3
 8002ef2:	e031      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ef4:	4db7      	ldr	r5, [pc, #732]	; (80031d4 <HAL_UART_IRQHandler+0x314>)
 8002ef6:	400d      	ands	r5, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ef8:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 80031d8 <HAL_UART_IRQHandler+0x318>
 8002efc:	ea00 0c0c 	and.w	ip, r0, ip
 8002f00:	ea5c 0605 	orrs.w	r6, ip, r5
 8002f04:	d129      	bne.n	8002f5a <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f06:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8002f08:	2d01      	cmp	r5, #1
 8002f0a:	f000 80c4 	beq.w	8003096 <HAL_UART_IRQHandler+0x1d6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f0e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002f12:	d003      	beq.n	8002f1c <HAL_UART_IRQHandler+0x5c>
 8002f14:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8002f18:	f040 8162 	bne.w	80031e0 <HAL_UART_IRQHandler+0x320>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002f1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f20:	d006      	beq.n	8002f30 <HAL_UART_IRQHandler+0x70>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002f22:	f000 0280 	and.w	r2, r0, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f26:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	f040 815f 	bne.w	80031ee <HAL_UART_IRQHandler+0x32e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f34:	d003      	beq.n	8002f3e <HAL_UART_IRQHandler+0x7e>
 8002f36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f3a:	f040 815f 	bne.w	80031fc <HAL_UART_IRQHandler+0x33c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f3e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8002f42:	d003      	beq.n	8002f4c <HAL_UART_IRQHandler+0x8c>
 8002f44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002f48:	f040 816a 	bne.w	8003220 <HAL_UART_IRQHandler+0x360>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002f50:	d002      	beq.n	8002f58 <HAL_UART_IRQHandler+0x98>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	f2c0 8168 	blt.w	8003228 <HAL_UART_IRQHandler+0x368>
}
 8002f58:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f5a:	f013 0f01 	tst.w	r3, #1
 8002f5e:	d009      	beq.n	8002f74 <HAL_UART_IRQHandler+0xb4>
 8002f60:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002f64:	d006      	beq.n	8002f74 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f66:	2601      	movs	r6, #1
 8002f68:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f6a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002f6e:	4332      	orrs	r2, r6
 8002f70:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f74:	f013 0f02 	tst.w	r3, #2
 8002f78:	d00f      	beq.n	8002f9a <HAL_UART_IRQHandler+0xda>
 8002f7a:	f011 0f01 	tst.w	r1, #1
 8002f7e:	d01b      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	2602      	movs	r6, #2
 8002f84:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f86:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002f8a:	f042 0204 	orr.w	r2, r2, #4
 8002f8e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f92:	f013 0f04 	tst.w	r3, #4
 8002f96:	d106      	bne.n	8002fa6 <HAL_UART_IRQHandler+0xe6>
 8002f98:	e00e      	b.n	8002fb8 <HAL_UART_IRQHandler+0xf8>
 8002f9a:	f013 0f04 	tst.w	r3, #4
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xf8>
 8002fa0:	f011 0f01 	tst.w	r1, #1
 8002fa4:	d008      	beq.n	8002fb8 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fa6:	6822      	ldr	r2, [r4, #0]
 8002fa8:	2604      	movs	r6, #4
 8002faa:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002fb0:	f042 0202 	orr.w	r2, r2, #2
 8002fb4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fb8:	f013 0f08 	tst.w	r3, #8
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x116>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fbe:	f000 0220 	and.w	r2, r0, #32
 8002fc2:	432a      	orrs	r2, r5
 8002fc4:	d007      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x116>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fc6:	6822      	ldr	r2, [r4, #0]
 8002fc8:	2508      	movs	r5, #8
 8002fca:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fcc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002fd0:	432a      	orrs	r2, r5
 8002fd2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fd6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002fda:	d00c      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x136>
 8002fdc:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x136>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8002fe8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fea:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002fee:	f042 0220 	orr.w	r2, r2, #32
 8002ff2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ff6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002ffa:	2a00      	cmp	r2, #0
 8002ffc:	d0ac      	beq.n	8002f58 <HAL_UART_IRQHandler+0x98>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ffe:	f013 0f20 	tst.w	r3, #32
 8003002:	d00a      	beq.n	800301a <HAL_UART_IRQHandler+0x15a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003004:	f000 0020 	and.w	r0, r0, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003008:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800300c:	ea50 0301 	orrs.w	r3, r0, r1
 8003010:	d003      	beq.n	800301a <HAL_UART_IRQHandler+0x15a>
        if (huart->RxISR != NULL)
 8003012:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003014:	b10b      	cbz	r3, 800301a <HAL_UART_IRQHandler+0x15a>
          huart->RxISR(huart);
 8003016:	4620      	mov	r0, r4
 8003018:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800301a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	6892      	ldr	r2, [r2, #8]
 8003022:	f002 0240 	and.w	r2, r2, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003026:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800302a:	4313      	orrs	r3, r2
 800302c:	d02c      	beq.n	8003088 <HAL_UART_IRQHandler+0x1c8>
        UART_EndRxTransfer(huart);
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff ff0e 	bl	8002e50 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f013 0f40 	tst.w	r3, #64	; 0x40
 800303c:	d020      	beq.n	8003080 <HAL_UART_IRQHandler+0x1c0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800303e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	f102 0308 	add.w	r3, r2, #8
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	3208      	adds	r2, #8
 800304e:	e842 3100 	strex	r1, r3, [r2]
 8003052:	2900      	cmp	r1, #0
 8003054:	d1f3      	bne.n	800303e <HAL_UART_IRQHandler+0x17e>
          if (huart->hdmarx != NULL)
 8003056:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800305a:	b16b      	cbz	r3, 8003078 <HAL_UART_IRQHandler+0x1b8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800305c:	4a5f      	ldr	r2, [pc, #380]	; (80031dc <HAL_UART_IRQHandler+0x31c>)
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003060:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003064:	f7fd fe5a 	bl	8000d1c <HAL_DMA_Abort_IT>
 8003068:	2800      	cmp	r0, #0
 800306a:	f43f af75 	beq.w	8002f58 <HAL_UART_IRQHandler+0x98>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800306e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003072:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003074:	4798      	blx	r3
 8003076:	e76f      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff ff15 	bl	8002ea8 <HAL_UART_ErrorCallback>
 800307e:	e76b      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
          HAL_UART_ErrorCallback(huart);
 8003080:	4620      	mov	r0, r4
 8003082:	f7ff ff11 	bl	8002ea8 <HAL_UART_ErrorCallback>
 8003086:	e767      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
        HAL_UART_ErrorCallback(huart);
 8003088:	4620      	mov	r0, r4
 800308a:	f7ff ff0d 	bl	8002ea8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	2300      	movs	r3, #0
 8003090:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8003094:	e760      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003096:	f013 0f10 	tst.w	r3, #16
 800309a:	f43f af38 	beq.w	8002f0e <HAL_UART_IRQHandler+0x4e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800309e:	f010 0f10 	tst.w	r0, #16
 80030a2:	f43f af34 	beq.w	8002f0e <HAL_UART_IRQHandler+0x4e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030a6:	2310      	movs	r3, #16
 80030a8:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030b2:	d052      	beq.n	800315a <HAL_UART_IRQHandler+0x29a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030b4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80030b8:	6813      	ldr	r3, [r2, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f43f af4a 	beq.w	8002f58 <HAL_UART_IRQHandler+0x98>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030c4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80030c8:	4299      	cmp	r1, r3
 80030ca:	f67f af45 	bls.w	8002f58 <HAL_UART_IRQHandler+0x98>
        huart->RxXferCount = nb_remaining_rx_data;
 80030ce:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030d2:	6813      	ldr	r3, [r2, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f013 0f20 	tst.w	r3, #32
 80030da:	d132      	bne.n	8003142 <HAL_UART_IRQHandler+0x282>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	e852 3f00 	ldrex	r3, [r2]
 80030e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	e842 3100 	strex	r1, r3, [r2]
 80030ea:	2900      	cmp	r1, #0
 80030ec:	d1f6      	bne.n	80030dc <HAL_UART_IRQHandler+0x21c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	f102 0308 	add.w	r3, r2, #8
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	3208      	adds	r2, #8
 80030fe:	e842 3100 	strex	r1, r3, [r2]
 8003102:	2900      	cmp	r1, #0
 8003104:	d1f3      	bne.n	80030ee <HAL_UART_IRQHandler+0x22e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003106:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	f102 0308 	add.w	r3, r2, #8
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003114:	3208      	adds	r2, #8
 8003116:	e842 3100 	strex	r1, r3, [r2]
 800311a:	2900      	cmp	r1, #0
 800311c:	d1f3      	bne.n	8003106 <HAL_UART_IRQHandler+0x246>
          huart->RxState = HAL_UART_STATE_READY;
 800311e:	2320      	movs	r3, #32
 8003120:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003124:	2300      	movs	r3, #0
 8003126:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003128:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	e852 3f00 	ldrex	r3, [r2]
 800312e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	e842 3100 	strex	r1, r3, [r2]
 8003136:	2900      	cmp	r1, #0
 8003138:	d1f6      	bne.n	8003128 <HAL_UART_IRQHandler+0x268>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800313a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800313e:	f7fd fdb3 	bl	8000ca8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003142:	2302      	movs	r3, #2
 8003144:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003146:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800314a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800314e:	1ac9      	subs	r1, r1, r3
 8003150:	b289      	uxth	r1, r1
 8003152:	4620      	mov	r0, r4
 8003154:	f7ff feb3 	bl	8002ebe <HAL_UARTEx_RxEventCallback>
 8003158:	e6fe      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800315a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800315e:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8003160:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	f43f aef6 	beq.w	8002f58 <HAL_UART_IRQHandler+0x98>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800316c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8003174:	2900      	cmp	r1, #0
 8003176:	f43f aeef 	beq.w	8002f58 <HAL_UART_IRQHandler+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800317a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	e852 3f00 	ldrex	r3, [r2]
 8003180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	e842 3000 	strex	r0, r3, [r2]
 8003188:	2800      	cmp	r0, #0
 800318a:	d1f6      	bne.n	800317a <HAL_UART_IRQHandler+0x2ba>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800318c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	f102 0308 	add.w	r3, r2, #8
 8003192:	e853 3f00 	ldrex	r3, [r3]
 8003196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	3208      	adds	r2, #8
 80031a0:	e842 3000 	strex	r0, r3, [r2]
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d1f1      	bne.n	800318c <HAL_UART_IRQHandler+0x2cc>
        huart->RxState = HAL_UART_STATE_READY;
 80031a8:	2320      	movs	r3, #32
 80031aa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	2300      	movs	r3, #0
 80031b0:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80031b2:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	e852 3f00 	ldrex	r3, [r2]
 80031ba:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	e842 3000 	strex	r0, r3, [r2]
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d1f6      	bne.n	80031b4 <HAL_UART_IRQHandler+0x2f4>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031c6:	2302      	movs	r3, #2
 80031c8:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031ca:	4620      	mov	r0, r4
 80031cc:	f7ff fe77 	bl	8002ebe <HAL_UARTEx_RxEventCallback>
 80031d0:	e6c2      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
 80031d2:	bf00      	nop
 80031d4:	10000001 	.word	0x10000001
 80031d8:	04000120 	.word	0x04000120
 80031dc:	08002eab 	.word	0x08002eab
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031e4:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80031e6:	4620      	mov	r0, r4
 80031e8:	f000 fb70 	bl	80038cc <HAL_UARTEx_WakeupCallback>
    return;
 80031ec:	e6b4      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
    if (huart->TxISR != NULL)
 80031ee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f43f aeb1 	beq.w	8002f58 <HAL_UART_IRQHandler+0x98>
      huart->TxISR(huart);
 80031f6:	4620      	mov	r0, r4
 80031f8:	4798      	blx	r3
 80031fa:	e6ad      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	e852 3f00 	ldrex	r3, [r2]
 8003202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	e842 3100 	strex	r1, r3, [r2]
 800320a:	2900      	cmp	r1, #0
 800320c:	d1f6      	bne.n	80031fc <HAL_UART_IRQHandler+0x33c>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800320e:	2320      	movs	r3, #32
 8003210:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	67a3      	str	r3, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003218:	4620      	mov	r0, r4
 800321a:	f7ff fe44 	bl	8002ea6 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800321e:	e69b      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003220:	4620      	mov	r0, r4
 8003222:	f000 fb55 	bl	80038d0 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8003226:	e697      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003228:	4620      	mov	r0, r4
 800322a:	f000 fb50 	bl	80038ce <HAL_UARTEx_RxFifoFullCallback>
    return;
 800322e:	e693      	b.n	8002f58 <HAL_UART_IRQHandler+0x98>

08003230 <UART_SetConfig>:
{
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003234:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003236:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003238:	68a3      	ldr	r3, [r4, #8]
 800323a:	6922      	ldr	r2, [r4, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	6962      	ldr	r2, [r4, #20]
 8003240:	4313      	orrs	r3, r2
 8003242:	69e2      	ldr	r2, [r4, #28]
 8003244:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003246:	4aaa      	ldr	r2, [pc, #680]	; (80034f0 <UART_SetConfig+0x2c0>)
 8003248:	4002      	ands	r2, r0
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800324e:	6822      	ldr	r2, [r4, #0]
 8003250:	6853      	ldr	r3, [r2, #4]
 8003252:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003256:	68e1      	ldr	r1, [r4, #12]
 8003258:	430b      	orrs	r3, r1
 800325a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800325c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800325e:	6822      	ldr	r2, [r4, #0]
 8003260:	4ba4      	ldr	r3, [pc, #656]	; (80034f4 <UART_SetConfig+0x2c4>)
 8003262:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8003264:	bf1c      	itt	ne
 8003266:	6a23      	ldrne	r3, [r4, #32]
 8003268:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800326a:	6893      	ldr	r3, [r2, #8]
 800326c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003270:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003274:	430b      	orrs	r3, r1
 8003276:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003278:	6822      	ldr	r2, [r4, #0]
 800327a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800327c:	f023 030f 	bic.w	r3, r3, #15
 8003280:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003282:	430b      	orrs	r3, r1
 8003284:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	4a9b      	ldr	r2, [pc, #620]	; (80034f8 <UART_SetConfig+0x2c8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d019      	beq.n	80032c2 <UART_SetConfig+0x92>
 800328e:	4a9b      	ldr	r2, [pc, #620]	; (80034fc <UART_SetConfig+0x2cc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d02c      	beq.n	80032ee <UART_SetConfig+0xbe>
 8003294:	4a97      	ldr	r2, [pc, #604]	; (80034f4 <UART_SetConfig+0x2c4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d04a      	beq.n	8003330 <UART_SetConfig+0x100>
 800329a:	2210      	movs	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329c:	69e0      	ldr	r0, [r4, #28]
 800329e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80032a2:	f000 80b8 	beq.w	8003416 <UART_SetConfig+0x1e6>
    switch (clocksource)
 80032a6:	2a08      	cmp	r2, #8
 80032a8:	f200 8130 	bhi.w	800350c <UART_SetConfig+0x2dc>
 80032ac:	e8df f012 	tbh	[pc, r2, lsl #1]
 80032b0:	010900e7 	.word	0x010900e7
 80032b4:	012e010f 	.word	0x012e010f
 80032b8:	012e010c 	.word	0x012e010c
 80032bc:	012e012e 	.word	0x012e012e
 80032c0:	00e4      	.short	0x00e4
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80032c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80032ca:	f002 0203 	and.w	r2, r2, #3
 80032ce:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032d2:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 80032d6:	2a03      	cmp	r2, #3
 80032d8:	d807      	bhi.n	80032ea <UART_SetConfig+0xba>
 80032da:	e8df f012 	tbh	[pc, r2, lsl #1]
 80032de:	0070      	.short	0x0070
 80032e0:	011d0004 	.word	0x011d0004
 80032e4:	011f      	.short	0x011f
 80032e6:	2204      	movs	r2, #4
 80032e8:	e7d8      	b.n	800329c <UART_SetConfig+0x6c>
 80032ea:	2210      	movs	r2, #16
 80032ec:	e7d6      	b.n	800329c <UART_SetConfig+0x6c>
 80032ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80032f6:	f002 020c 	and.w	r2, r2, #12
 80032fa:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80032fe:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8003302:	2a0c      	cmp	r2, #12
 8003304:	d812      	bhi.n	800332c <UART_SetConfig+0xfc>
 8003306:	e8df f012 	tbh	[pc, r2, lsl #1]
 800330a:	0077      	.short	0x0077
 800330c:	00110011 	.word	0x00110011
 8003310:	000d0011 	.word	0x000d0011
 8003314:	00110011 	.word	0x00110011
 8003318:	010b0011 	.word	0x010b0011
 800331c:	00110011 	.word	0x00110011
 8003320:	000f0011 	.word	0x000f0011
 8003324:	2204      	movs	r2, #4
 8003326:	e7b9      	b.n	800329c <UART_SetConfig+0x6c>
 8003328:	2208      	movs	r2, #8
 800332a:	e7b7      	b.n	800329c <UART_SetConfig+0x6c>
 800332c:	2210      	movs	r2, #16
 800332e:	e7b5      	b.n	800329c <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800333c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003340:	d064      	beq.n	800340c <UART_SetConfig+0x1dc>
 8003342:	d80a      	bhi.n	800335a <UART_SetConfig+0x12a>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d05b      	beq.n	8003400 <UART_SetConfig+0x1d0>
 8003348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334c:	bf18      	it	ne
 800334e:	2001      	movne	r0, #1
 8003350:	f040 80ae 	bne.w	80034b0 <UART_SetConfig+0x280>
        pclk = HAL_RCC_GetSysClockFreq();
 8003354:	f7fd fe76 	bl	8001044 <HAL_RCC_GetSysClockFreq>
        break;
 8003358:	e054      	b.n	8003404 <UART_SetConfig+0x1d4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800335a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800335e:	d12c      	bne.n	80033ba <UART_SetConfig+0x18a>
 8003360:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003364:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <UART_SetConfig+0x2d0>)
 8003368:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800336c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003370:	6865      	ldr	r5, [r4, #4]
 8003372:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8003376:	4299      	cmp	r1, r3
 8003378:	f200 80ad 	bhi.w	80034d6 <UART_SetConfig+0x2a6>
 800337c:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8003380:	f200 80ab 	bhi.w	80034da <UART_SetConfig+0x2aa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003384:	2600      	movs	r6, #0
 8003386:	4633      	mov	r3, r6
 8003388:	4631      	mov	r1, r6
 800338a:	f7fc fef5 	bl	8000178 <__aeabi_uldivmod>
 800338e:	0209      	lsls	r1, r1, #8
 8003390:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8003394:	0200      	lsls	r0, r0, #8
 8003396:	086b      	lsrs	r3, r5, #1
 8003398:	18c0      	adds	r0, r0, r3
 800339a:	462a      	mov	r2, r5
 800339c:	4633      	mov	r3, r6
 800339e:	f141 0100 	adc.w	r1, r1, #0
 80033a2:	f7fc fee9 	bl	8000178 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033a6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80033aa:	4b56      	ldr	r3, [pc, #344]	; (8003504 <UART_SetConfig+0x2d4>)
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f200 8096 	bhi.w	80034de <UART_SetConfig+0x2ae>
          huart->Instance->BRR = usartdiv;
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	60d8      	str	r0, [r3, #12]
 80033b6:	4630      	mov	r0, r6
 80033b8:	e07a      	b.n	80034b0 <UART_SetConfig+0x280>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ba:	2001      	movs	r0, #1
 80033bc:	e078      	b.n	80034b0 <UART_SetConfig+0x280>
 80033be:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 80033c0:	494c      	ldr	r1, [pc, #304]	; (80034f4 <UART_SetConfig+0x2c4>)
 80033c2:	428b      	cmp	r3, r1
 80033c4:	f47f af6a 	bne.w	800329c <UART_SetConfig+0x6c>
    switch (clocksource)
 80033c8:	2a08      	cmp	r2, #8
 80033ca:	f200 8082 	bhi.w	80034d2 <UART_SetConfig+0x2a2>
 80033ce:	a301      	add	r3, pc, #4	; (adr r3, 80033d4 <UART_SetConfig+0x1a4>)
 80033d0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80033d4:	08003401 	.word	0x08003401
 80033d8:	080034d3 	.word	0x080034d3
 80033dc:	080033fd 	.word	0x080033fd
 80033e0:	080034d3 	.word	0x080034d3
 80033e4:	08003355 	.word	0x08003355
 80033e8:	080034d3 	.word	0x080034d3
 80033ec:	080034d3 	.word	0x080034d3
 80033f0:	080034d3 	.word	0x080034d3
 80033f4:	08003411 	.word	0x08003411
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f8:	2200      	movs	r2, #0
 80033fa:	e7e1      	b.n	80033c0 <UART_SetConfig+0x190>
    switch (clocksource)
 80033fc:	4842      	ldr	r0, [pc, #264]	; (8003508 <UART_SetConfig+0x2d8>)
 80033fe:	e7b1      	b.n	8003364 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003400:	f7fe fafc 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003404:	2800      	cmp	r0, #0
 8003406:	d1ad      	bne.n	8003364 <UART_SetConfig+0x134>
 8003408:	2000      	movs	r0, #0
 800340a:	e051      	b.n	80034b0 <UART_SetConfig+0x280>
        pclk = (uint32_t) HSI_VALUE;
 800340c:	483e      	ldr	r0, [pc, #248]	; (8003508 <UART_SetConfig+0x2d8>)
 800340e:	e7a9      	b.n	8003364 <UART_SetConfig+0x134>
        pclk = (uint32_t) LSE_VALUE;
 8003410:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003414:	e7a6      	b.n	8003364 <UART_SetConfig+0x134>
    switch (clocksource)
 8003416:	2a08      	cmp	r2, #8
 8003418:	d863      	bhi.n	80034e2 <UART_SetConfig+0x2b2>
 800341a:	e8df f002 	tbb	[pc, r2]
 800341e:	2505      	.short	0x2505
 8003420:	6228622b 	.word	0x6228622b
 8003424:	6262      	.short	0x6262
 8003426:	09          	.byte	0x09
 8003427:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8003428:	f7fe fae8 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800342c:	2800      	cmp	r0, #0
 800342e:	d05a      	beq.n	80034e6 <UART_SetConfig+0x2b6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003430:	6862      	ldr	r2, [r4, #4]
 8003432:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <UART_SetConfig+0x2d0>)
 8003436:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800343a:	fbb0 f0f3 	udiv	r0, r0, r3
 800343e:	0853      	lsrs	r3, r2, #1
 8003440:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003444:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003448:	f1a0 0210 	sub.w	r2, r0, #16
 800344c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003450:	429a      	cmp	r2, r3
 8003452:	d84a      	bhi.n	80034ea <UART_SetConfig+0x2ba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003454:	f020 030f 	bic.w	r3, r0, #15
 8003458:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800345a:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800345c:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003460:	4318      	orrs	r0, r3
 8003462:	60d0      	str	r0, [r2, #12]
 8003464:	2000      	movs	r0, #0
 8003466:	e023      	b.n	80034b0 <UART_SetConfig+0x280>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7fe fad8 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
        break;
 800346c:	e7de      	b.n	800342c <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 800346e:	f7fd fde9 	bl	8001044 <HAL_RCC_GetSysClockFreq>
        break;
 8003472:	e7db      	b.n	800342c <UART_SetConfig+0x1fc>
        pclk = (uint32_t) HSI_VALUE;
 8003474:	4824      	ldr	r0, [pc, #144]	; (8003508 <UART_SetConfig+0x2d8>)
 8003476:	e7db      	b.n	8003430 <UART_SetConfig+0x200>
    switch (clocksource)
 8003478:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800347c:	e003      	b.n	8003486 <UART_SetConfig+0x256>
        pclk = HAL_RCC_GetPCLK1Freq();
 800347e:	f7fe fabd 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003482:	2800      	cmp	r0, #0
 8003484:	d044      	beq.n	8003510 <UART_SetConfig+0x2e0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003486:	6863      	ldr	r3, [r4, #4]
 8003488:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800348a:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <UART_SetConfig+0x2d0>)
 800348c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003490:	fbb0 f0f2 	udiv	r0, r0, r2
 8003494:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003498:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800349c:	f1a0 0210 	sub.w	r2, r0, #16
 80034a0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d835      	bhi.n	8003514 <UART_SetConfig+0x2e4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	b280      	uxth	r0, r0
 80034ac:	60d8      	str	r0, [r3, #12]
 80034ae:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80034b6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80034be:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80034c0:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c2:	f7fe faab 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
        break;
 80034c6:	e7dc      	b.n	8003482 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetSysClockFreq();
 80034c8:	f7fd fdbc 	bl	8001044 <HAL_RCC_GetSysClockFreq>
        break;
 80034cc:	e7d9      	b.n	8003482 <UART_SetConfig+0x252>
        pclk = (uint32_t) HSI_VALUE;
 80034ce:	480e      	ldr	r0, [pc, #56]	; (8003508 <UART_SetConfig+0x2d8>)
 80034d0:	e7d9      	b.n	8003486 <UART_SetConfig+0x256>
    switch (clocksource)
 80034d2:	2001      	movs	r0, #1
 80034d4:	e7ec      	b.n	80034b0 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 80034d6:	2001      	movs	r0, #1
 80034d8:	e7ea      	b.n	80034b0 <UART_SetConfig+0x280>
 80034da:	2001      	movs	r0, #1
 80034dc:	e7e8      	b.n	80034b0 <UART_SetConfig+0x280>
          ret = HAL_ERROR;
 80034de:	2001      	movs	r0, #1
 80034e0:	e7e6      	b.n	80034b0 <UART_SetConfig+0x280>
    switch (clocksource)
 80034e2:	2001      	movs	r0, #1
 80034e4:	e7e4      	b.n	80034b0 <UART_SetConfig+0x280>
 80034e6:	2000      	movs	r0, #0
 80034e8:	e7e2      	b.n	80034b0 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 80034ea:	2001      	movs	r0, #1
 80034ec:	e7e0      	b.n	80034b0 <UART_SetConfig+0x280>
 80034ee:	bf00      	nop
 80034f0:	cfff69f3 	.word	0xcfff69f3
 80034f4:	40008000 	.word	0x40008000
 80034f8:	40013800 	.word	0x40013800
 80034fc:	40004400 	.word	0x40004400
 8003500:	080046dc 	.word	0x080046dc
 8003504:	000ffcff 	.word	0x000ffcff
 8003508:	00f42400 	.word	0x00f42400
    switch (clocksource)
 800350c:	2001      	movs	r0, #1
 800350e:	e7cf      	b.n	80034b0 <UART_SetConfig+0x280>
 8003510:	2000      	movs	r0, #0
 8003512:	e7cd      	b.n	80034b0 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 8003514:	2001      	movs	r0, #1
 8003516:	e7cb      	b.n	80034b0 <UART_SetConfig+0x280>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003518:	2202      	movs	r2, #2
 800351a:	e6bf      	b.n	800329c <UART_SetConfig+0x6c>
 800351c:	2208      	movs	r2, #8
 800351e:	e6bd      	b.n	800329c <UART_SetConfig+0x6c>
 8003520:	2202      	movs	r2, #2
 8003522:	e6bb      	b.n	800329c <UART_SetConfig+0x6c>

08003524 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003524:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003526:	f013 0f01 	tst.w	r3, #1
 800352a:	d006      	beq.n	800353a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800352c:	6802      	ldr	r2, [r0, #0]
 800352e:	6853      	ldr	r3, [r2, #4]
 8003530:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003534:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003536:	430b      	orrs	r3, r1
 8003538:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800353a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800353c:	f013 0f02 	tst.w	r3, #2
 8003540:	d006      	beq.n	8003550 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003542:	6802      	ldr	r2, [r0, #0]
 8003544:	6853      	ldr	r3, [r2, #4]
 8003546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800354c:	430b      	orrs	r3, r1
 800354e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003550:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003552:	f013 0f04 	tst.w	r3, #4
 8003556:	d006      	beq.n	8003566 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003558:	6802      	ldr	r2, [r0, #0]
 800355a:	6853      	ldr	r3, [r2, #4]
 800355c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003560:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003562:	430b      	orrs	r3, r1
 8003564:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003566:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003568:	f013 0f08 	tst.w	r3, #8
 800356c:	d006      	beq.n	800357c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800356e:	6802      	ldr	r2, [r0, #0]
 8003570:	6853      	ldr	r3, [r2, #4]
 8003572:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003576:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003578:	430b      	orrs	r3, r1
 800357a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800357c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800357e:	f013 0f10 	tst.w	r3, #16
 8003582:	d006      	beq.n	8003592 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003584:	6802      	ldr	r2, [r0, #0]
 8003586:	6893      	ldr	r3, [r2, #8]
 8003588:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800358c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800358e:	430b      	orrs	r3, r1
 8003590:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003592:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003594:	f013 0f20 	tst.w	r3, #32
 8003598:	d006      	beq.n	80035a8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800359a:	6802      	ldr	r2, [r0, #0]
 800359c:	6893      	ldr	r3, [r2, #8]
 800359e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80035aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80035ae:	d00a      	beq.n	80035c6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035b0:	6802      	ldr	r2, [r0, #0]
 80035b2:	6853      	ldr	r3, [r2, #4]
 80035b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80035b8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80035ba:	430b      	orrs	r3, r1
 80035bc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80035c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c4:	d00b      	beq.n	80035de <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80035c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035cc:	d006      	beq.n	80035dc <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ce:	6802      	ldr	r2, [r0, #0]
 80035d0:	6853      	ldr	r3, [r2, #4]
 80035d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80035d6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80035d8:	430b      	orrs	r3, r1
 80035da:	6053      	str	r3, [r2, #4]
}
 80035dc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035de:	6802      	ldr	r2, [r0, #0]
 80035e0:	6853      	ldr	r3, [r2, #4]
 80035e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035e6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6053      	str	r3, [r2, #4]
 80035ec:	e7eb      	b.n	80035c6 <UART_AdvFeatureConfig+0xa2>

080035ee <UART_WaitOnFlagUntilTimeout>:
{
 80035ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035f2:	4680      	mov	r8, r0
 80035f4:	460e      	mov	r6, r1
 80035f6:	4615      	mov	r5, r2
 80035f8:	4699      	mov	r9, r3
 80035fa:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fc:	f8d8 2000 	ldr.w	r2, [r8]
 8003600:	69d4      	ldr	r4, [r2, #28]
 8003602:	ea36 0304 	bics.w	r3, r6, r4
 8003606:	bf0c      	ite	eq
 8003608:	f04f 0c01 	moveq.w	ip, #1
 800360c:	f04f 0c00 	movne.w	ip, #0
 8003610:	45ac      	cmp	ip, r5
 8003612:	d15a      	bne.n	80036ca <UART_WaitOnFlagUntilTimeout+0xdc>
    if (Timeout != HAL_MAX_DELAY)
 8003614:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003618:	d0f2      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361a:	f7fd fac1 	bl	8000ba0 <HAL_GetTick>
 800361e:	eba0 0009 	sub.w	r0, r0, r9
 8003622:	42b8      	cmp	r0, r7
 8003624:	d830      	bhi.n	8003688 <UART_WaitOnFlagUntilTimeout+0x9a>
 8003626:	b37f      	cbz	r7, 8003688 <UART_WaitOnFlagUntilTimeout+0x9a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003628:	f8d8 3000 	ldr.w	r3, [r8]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	f012 0f04 	tst.w	r2, #4
 8003632:	d0e3      	beq.n	80035fc <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003634:	69da      	ldr	r2, [r3, #28]
 8003636:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800363a:	d0df      	beq.n	80035fc <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800363c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003640:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003642:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	e852 3f00 	ldrex	r3, [r2]
 800364a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	e842 3100 	strex	r1, r3, [r2]
 8003652:	2900      	cmp	r1, #0
 8003654:	d1f5      	bne.n	8003642 <UART_WaitOnFlagUntilTimeout+0x54>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	f102 0308 	add.w	r3, r2, #8
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	3208      	adds	r2, #8
 8003668:	e842 3100 	strex	r1, r3, [r2]
 800366c:	2900      	cmp	r1, #0
 800366e:	d1f2      	bne.n	8003656 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8003670:	2320      	movs	r3, #32
 8003672:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003676:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800367a:	f8c8 3090 	str.w	r3, [r8, #144]	; 0x90
          __HAL_UNLOCK(huart);
 800367e:	2300      	movs	r3, #0
 8003680:	f888 3084 	strb.w	r3, [r8, #132]	; 0x84
          return HAL_TIMEOUT;
 8003684:	2003      	movs	r0, #3
 8003686:	e021      	b.n	80036cc <UART_WaitOnFlagUntilTimeout+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003688:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	e852 3f00 	ldrex	r3, [r2]
 8003690:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	e842 3100 	strex	r1, r3, [r2]
 8003698:	2900      	cmp	r1, #0
 800369a:	d1f5      	bne.n	8003688 <UART_WaitOnFlagUntilTimeout+0x9a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369c:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	f102 0308 	add.w	r3, r2, #8
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	3208      	adds	r2, #8
 80036ae:	e842 3100 	strex	r1, r3, [r2]
 80036b2:	2900      	cmp	r1, #0
 80036b4:	d1f2      	bne.n	800369c <UART_WaitOnFlagUntilTimeout+0xae>
        huart->gState = HAL_UART_STATE_READY;
 80036b6:	2320      	movs	r3, #32
 80036b8:	f8c8 3088 	str.w	r3, [r8, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80036bc:	f8c8 308c 	str.w	r3, [r8, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80036c0:	2300      	movs	r3, #0
 80036c2:	f888 3084 	strb.w	r3, [r8, #132]	; 0x84
        return HAL_TIMEOUT;
 80036c6:	2003      	movs	r0, #3
 80036c8:	e000      	b.n	80036cc <UART_WaitOnFlagUntilTimeout+0xde>
  return HAL_OK;
 80036ca:	2000      	movs	r0, #0
}
 80036cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080036d0 <HAL_UART_Transmit>:
{
 80036d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80036d8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d156      	bne.n	800378e <HAL_UART_Transmit+0xbe>
 80036e0:	4604      	mov	r4, r0
 80036e2:	460d      	mov	r5, r1
 80036e4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80036e6:	2900      	cmp	r1, #0
 80036e8:	d055      	beq.n	8003796 <HAL_UART_Transmit+0xc6>
 80036ea:	b90a      	cbnz	r2, 80036f0 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 80036ec:	2001      	movs	r0, #1
 80036ee:	e04f      	b.n	8003790 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f6:	2321      	movs	r3, #33	; 0x21
 80036f8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 80036fc:	f7fd fa50 	bl	8000ba0 <HAL_GetTick>
 8003700:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8003702:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8003706:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800370a:	68a3      	ldr	r3, [r4, #8]
 800370c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003710:	d00a      	beq.n	8003728 <HAL_UART_Transmit+0x58>
      pdata16bits = NULL;
 8003712:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8003716:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800371a:	b29b      	uxth	r3, r3
 800371c:	b35b      	cbz	r3, 8003776 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800371e:	f04f 0900 	mov.w	r9, #0
 8003722:	f04f 0880 	mov.w	r8, #128	; 0x80
 8003726:	e017      	b.n	8003758 <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	b913      	cbnz	r3, 8003732 <HAL_UART_Transmit+0x62>
      pdata16bits = (const uint16_t *) pData;
 800372c:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 800372e:	2500      	movs	r5, #0
 8003730:	e7f1      	b.n	8003716 <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8003732:	f04f 0a00 	mov.w	sl, #0
 8003736:	e7ee      	b.n	8003716 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003738:	6822      	ldr	r2, [r4, #0]
 800373a:	f83a 3b02 	ldrh.w	r3, [sl], #2
 800373e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003742:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003744:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8003748:	3a01      	subs	r2, #1
 800374a:	b292      	uxth	r2, r2
 800374c:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003750:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8003754:	b29b      	uxth	r3, r3
 8003756:	b173      	cbz	r3, 8003776 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003758:	9600      	str	r6, [sp, #0]
 800375a:	463b      	mov	r3, r7
 800375c:	464a      	mov	r2, r9
 800375e:	4641      	mov	r1, r8
 8003760:	4620      	mov	r0, r4
 8003762:	f7ff ff44 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 8003766:	b9c0      	cbnz	r0, 800379a <HAL_UART_Transmit+0xca>
      if (pdata8bits == NULL)
 8003768:	2d00      	cmp	r5, #0
 800376a:	d0e5      	beq.n	8003738 <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003774:	e7e6      	b.n	8003744 <HAL_UART_Transmit+0x74>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003776:	9600      	str	r6, [sp, #0]
 8003778:	463b      	mov	r3, r7
 800377a:	2200      	movs	r2, #0
 800377c:	2140      	movs	r1, #64	; 0x40
 800377e:	4620      	mov	r0, r4
 8003780:	f7ff ff35 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 8003784:	b958      	cbnz	r0, 800379e <HAL_UART_Transmit+0xce>
    huart->gState = HAL_UART_STATE_READY;
 8003786:	2320      	movs	r3, #32
 8003788:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 800378c:	e000      	b.n	8003790 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 800378e:	2002      	movs	r0, #2
}
 8003790:	b002      	add	sp, #8
 8003792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8003796:	2001      	movs	r0, #1
 8003798:	e7fa      	b.n	8003790 <HAL_UART_Transmit+0xc0>
        return HAL_TIMEOUT;
 800379a:	2003      	movs	r0, #3
 800379c:	e7f8      	b.n	8003790 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 800379e:	2003      	movs	r0, #3
 80037a0:	e7f6      	b.n	8003790 <HAL_UART_Transmit+0xc0>

080037a2 <UART_CheckIdleState>:
{
 80037a2:	b530      	push	{r4, r5, lr}
 80037a4:	b083      	sub	sp, #12
 80037a6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80037ae:	f7fd f9f7 	bl	8000ba0 <HAL_GetTick>
 80037b2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	f012 0f08 	tst.w	r2, #8
 80037bc:	d110      	bne.n	80037e0 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f013 0f04 	tst.w	r3, #4
 80037c6:	d119      	bne.n	80037fc <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80037c8:	2320      	movs	r3, #32
 80037ca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037ce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d2:	2000      	movs	r0, #0
 80037d4:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d6:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 80037d8:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 80037dc:	b003      	add	sp, #12
 80037de:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4603      	mov	r3, r0
 80037e8:	2200      	movs	r2, #0
 80037ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7ff fefd 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d0e2      	beq.n	80037be <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80037f8:	2003      	movs	r0, #3
 80037fa:	e7ef      	b.n	80037dc <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	462b      	mov	r3, r5
 8003804:	2200      	movs	r2, #0
 8003806:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800380a:	4620      	mov	r0, r4
 800380c:	f7ff feef 	bl	80035ee <UART_WaitOnFlagUntilTimeout>
 8003810:	2800      	cmp	r0, #0
 8003812:	d0d9      	beq.n	80037c8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8003814:	2003      	movs	r0, #3
 8003816:	e7e1      	b.n	80037dc <UART_CheckIdleState+0x3a>

08003818 <HAL_UART_Init>:
  if (huart == NULL)
 8003818:	b378      	cbz	r0, 800387a <HAL_UART_Init+0x62>
{
 800381a:	b510      	push	{r4, lr}
 800381c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800381e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003822:	b30b      	cbz	r3, 8003868 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003824:	2324      	movs	r3, #36	; 0x24
 8003826:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	6813      	ldr	r3, [r2, #0]
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003834:	4620      	mov	r0, r4
 8003836:	f7ff fcfb 	bl	8003230 <UART_SetConfig>
 800383a:	2801      	cmp	r0, #1
 800383c:	d013      	beq.n	8003866 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800383e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003840:	b9bb      	cbnz	r3, 8003872 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	6853      	ldr	r3, [r2, #4]
 8003846:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800384a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384c:	6822      	ldr	r2, [r4, #0]
 800384e:	6893      	ldr	r3, [r2, #8]
 8003850:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003854:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003856:	6822      	ldr	r2, [r4, #0]
 8003858:	6813      	ldr	r3, [r2, #0]
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003860:	4620      	mov	r0, r4
 8003862:	f7ff ff9e 	bl	80037a2 <UART_CheckIdleState>
}
 8003866:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003868:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800386c:	f7fd f872 	bl	8000954 <HAL_UART_MspInit>
 8003870:	e7d8      	b.n	8003824 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8003872:	4620      	mov	r0, r4
 8003874:	f7ff fe56 	bl	8003524 <UART_AdvFeatureConfig>
 8003878:	e7e3      	b.n	8003842 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800387a:	2001      	movs	r0, #1
}
 800387c:	4770      	bx	lr
	...

08003880 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003880:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003882:	b92b      	cbnz	r3, 8003890 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8003884:	2301      	movs	r3, #1
 8003886:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800388a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800388e:	4770      	bx	lr
{
 8003890:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003892:	6803      	ldr	r3, [r0, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003896:	6899      	ldr	r1, [r3, #8]
 8003898:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800389a:	4d0a      	ldr	r5, [pc, #40]	; (80038c4 <UARTEx_SetNbDataToProcess+0x44>)
 800389c:	5c6b      	ldrb	r3, [r5, r1]
 800389e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038a0:	4c09      	ldr	r4, [pc, #36]	; (80038c8 <UARTEx_SetNbDataToProcess+0x48>)
 80038a2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038a4:	fb93 f3f1 	sdiv	r3, r3, r1
 80038a8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038ac:	f3c2 6242 	ubfx	r2, r2, #25, #3
 80038b0:	5cab      	ldrb	r3, [r5, r2]
 80038b2:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038b4:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ba:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80038be:	bc30      	pop	{r4, r5}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	080046fc 	.word	0x080046fc
 80038c8:	080046f4 	.word	0x080046f4

080038cc <HAL_UARTEx_WakeupCallback>:
}
 80038cc:	4770      	bx	lr

080038ce <HAL_UARTEx_RxFifoFullCallback>:
}
 80038ce:	4770      	bx	lr

080038d0 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80038d0:	4770      	bx	lr

080038d2 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80038d2:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d018      	beq.n	800390c <HAL_UARTEx_DisableFifoMode+0x3a>
 80038da:	2301      	movs	r3, #1
 80038dc:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	2324      	movs	r3, #36	; 0x24
 80038e2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038e6:	6803      	ldr	r3, [r0, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80038ea:	6819      	ldr	r1, [r3, #0]
 80038ec:	f021 0101 	bic.w	r1, r1, #1
 80038f0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038f2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038fa:	6801      	ldr	r1, [r0, #0]
 80038fc:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80038fe:	2220      	movs	r2, #32
 8003900:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8003904:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8003908:	4618      	mov	r0, r3
 800390a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800390c:	2002      	movs	r0, #2
}
 800390e:	4770      	bx	lr

08003910 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003910:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8003912:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8003916:	2b01      	cmp	r3, #1
 8003918:	d01d      	beq.n	8003956 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800391a:	4604      	mov	r4, r0
 800391c:	2301      	movs	r3, #1
 800391e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8003922:	2324      	movs	r3, #36	; 0x24
 8003924:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003928:	6803      	ldr	r3, [r0, #0]
 800392a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003934:	6802      	ldr	r2, [r0, #0]
 8003936:	6893      	ldr	r3, [r2, #8]
 8003938:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800393c:	4319      	orrs	r1, r3
 800393e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003940:	f7ff ff9e 	bl	8003880 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003948:	2320      	movs	r3, #32
 800394a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800394e:	2000      	movs	r0, #0
 8003950:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8003954:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8003956:	2002      	movs	r0, #2
 8003958:	e7fc      	b.n	8003954 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800395a <HAL_UARTEx_SetRxFifoThreshold>:
{
 800395a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800395c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8003960:	2b01      	cmp	r3, #1
 8003962:	d01d      	beq.n	80039a0 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8003964:	4604      	mov	r4, r0
 8003966:	2301      	movs	r3, #1
 8003968:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800396c:	2324      	movs	r3, #36	; 0x24
 800396e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003972:	6803      	ldr	r3, [r0, #0]
 8003974:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800397e:	6802      	ldr	r2, [r0, #0]
 8003980:	6893      	ldr	r3, [r2, #8]
 8003982:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8003986:	4319      	orrs	r1, r3
 8003988:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800398a:	f7ff ff79 	bl	8003880 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003992:	2320      	movs	r3, #32
 8003994:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8003998:	2000      	movs	r0, #0
 800399a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800399e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 80039a0:	2002      	movs	r0, #2
 80039a2:	e7fc      	b.n	800399e <HAL_UARTEx_SetRxFifoThreshold+0x44>

080039a4 <Flash__SpiWrite>:
/**
 * @brief Flash Spi write routine
 **/

void Flash__SpiWrite(unsigned char data)
{
 80039a4:	b500      	push	{lr}
 80039a6:	b083      	sub	sp, #12
 80039a8:	f88d 0007 	strb.w	r0, [sp, #7]
	Spi1_Transmit(&data, sizeof(data));
 80039ac:	2101      	movs	r1, #1
 80039ae:	f10d 0007 	add.w	r0, sp, #7
 80039b2:	f000 f88f 	bl	8003ad4 <Spi1_Transmit>
}
 80039b6:	b003      	add	sp, #12
 80039b8:	f85d fb04 	ldr.w	pc, [sp], #4

080039bc <Flash__SpiRead>:
/**
 * @brief Flash Spi read routine
 **/

unsigned char Flash__SpiRead(void)
{
 80039bc:	b500      	push	{lr}
 80039be:	b083      	sub	sp, #12
	unsigned char ret = 0x00;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f88d 3007 	strb.w	r3, [sp, #7]
	Spi1_Receive(&ret, sizeof(ret));
 80039c6:	2101      	movs	r1, #1
 80039c8:	f10d 0007 	add.w	r0, sp, #7
 80039cc:	f000 f890 	bl	8003af0 <Spi1_Receive>
	return ret;
}
 80039d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80039d4:	b003      	add	sp, #12
 80039d6:	f85d fb04 	ldr.w	pc, [sp], #4

080039da <Flash__WriteEnable>:
/**
 * @brief Flash Write Enable routine
 **/

void Flash__WriteEnable(void)
{
 80039da:	b508      	push	{r3, lr}
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80039dc:	f000 f870 	bl	8003ac0 <Spi1_DeassertCs>
	//Send Write Enable Command
	Flash__SpiWrite(CMD_WREN);
 80039e0:	2006      	movs	r0, #6
 80039e2:	f7ff ffdf 	bl	80039a4 <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 80039e6:	f000 f861 	bl	8003aac <Spi1_AssertCs>
}
 80039ea:	bd08      	pop	{r3, pc}

080039ec <Flash__GetJEDEC_ID>:
 *
 * @param[out] jdecId Flash JEDEC id to be read
 **/

void Flash__GetJEDEC_ID(uint32_t *jdecId)
{
 80039ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ee:	4605      	mov	r5, r0
	uint8_t read_buff[3];

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80039f0:	f000 f866 	bl	8003ac0 <Spi1_DeassertCs>
	//Send Read JEDEC ID Command
	Flash__SpiWrite(CMD_JEDEC_ID);
 80039f4:	209f      	movs	r0, #159	; 0x9f
 80039f6:	f7ff ffd5 	bl	80039a4 <Flash__SpiWrite>
	read_buff[0] = Flash__SpiRead();
 80039fa:	f7ff ffdf 	bl	80039bc <Flash__SpiRead>
 80039fe:	4607      	mov	r7, r0
	read_buff[1] = Flash__SpiRead();
 8003a00:	f7ff ffdc 	bl	80039bc <Flash__SpiRead>
 8003a04:	4604      	mov	r4, r0
	read_buff[2] = Flash__SpiRead();
 8003a06:	f7ff ffd9 	bl	80039bc <Flash__SpiRead>
 8003a0a:	4606      	mov	r6, r0
	//Assert Spi CS pin
	Spi1_AssertCs();
 8003a0c:	f000 f84e 	bl	8003aac <Spi1_AssertCs>

	//Format JEDEC ID
	*jdecId = (read_buff[0] << 16) | (read_buff[1] << 8) | read_buff[2];
 8003a10:	0224      	lsls	r4, r4, #8
 8003a12:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8003a16:	4334      	orrs	r4, r6
 8003a18:	602c      	str	r4, [r5, #0]
}
 8003a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a1c <Flash__Init>:
{
 8003a1c:	b500      	push	{lr}
 8003a1e:	b083      	sub	sp, #12
	HAL_Delay(100);
 8003a20:	2064      	movs	r0, #100	; 0x64
 8003a22:	f7fd f8c3 	bl	8000bac <HAL_Delay>
	Spi1_AssertCs();
 8003a26:	f000 f841 	bl	8003aac <Spi1_AssertCs>
	HAL_Delay(100);
 8003a2a:	2064      	movs	r0, #100	; 0x64
 8003a2c:	f7fd f8be 	bl	8000bac <HAL_Delay>
	Flash__GetJEDEC_ID(&jedecId);
 8003a30:	a801      	add	r0, sp, #4
 8003a32:	f7ff ffdb 	bl	80039ec <Flash__GetJEDEC_ID>
}
 8003a36:	9801      	ldr	r0, [sp, #4]
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <Flash__Init+0x2c>)
 8003a3a:	4298      	cmp	r0, r3
 8003a3c:	bf14      	ite	ne
 8003a3e:	2000      	movne	r0, #0
 8003a40:	2001      	moveq	r0, #1
 8003a42:	b003      	add	sp, #12
 8003a44:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a48:	00ef4014 	.word	0x00ef4014

08003a4c <flashWaitWhileBusy>:
 * Polls the status of the write in progress (WIP) bit of the status register
 * until the write operation is completed
 **/

void flashWaitWhileBusy(void)
{
 8003a4c:	b508      	push	{r3, lr}
	uint8_t flash_status = 0;

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8003a4e:	f000 f837 	bl	8003ac0 <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);   //Send RDSR command
 8003a52:	2005      	movs	r0, #5
 8003a54:	f7ff ffa6 	bl	80039a4 <Flash__SpiWrite>
	/*Loop whiles memory is busy with a write cycle */
	do { /* Send dummy bytes to clock out data from flash */
		flash_status = Flash__SpiRead();
 8003a58:	f7ff ffb0 	bl	80039bc <Flash__SpiRead>
	} while (flash_status & 0x01); /* Write in progress */
 8003a5c:	f010 0f01 	tst.w	r0, #1
 8003a60:	d1fa      	bne.n	8003a58 <flashWaitWhileBusy+0xc>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8003a62:	f000 f823 	bl	8003aac <Spi1_AssertCs>
}
 8003a66:	bd08      	pop	{r3, pc}

08003a68 <Flash__BlockErase64k>:
 * @brief Flash 64kB Block Erase routine
 * @param[in] addr Address of the block to be erased
 **/

void Flash__BlockErase64k(uint32_t addr)
{
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	4604      	mov	r4, r0
	// Wait for last operation to end
	flashWaitWhileBusy();
 8003a6c:	f7ff ffee 	bl	8003a4c <flashWaitWhileBusy>
	// Enable write operation
	Flash__WriteEnable();
 8003a70:	f7ff ffb3 	bl	80039da <Flash__WriteEnable>

	//Make sure it is a 64k block address
	if(addr & 0x00FFFF)
 8003a74:	b2a3      	uxth	r3, r4
 8003a76:	b11b      	cbz	r3, 8003a80 <Flash__BlockErase64k+0x18>
	{
		addr = addr - (addr % 0x8000);
 8003a78:	f424 44ff 	bic.w	r4, r4, #32640	; 0x7f80
 8003a7c:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
	}

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8003a80:	f000 f81e 	bl	8003ac0 <Spi1_DeassertCs>
	//Send Block Erase (64kB) Command
	Flash__SpiWrite(CMD_ERASE_BLOCK64);
 8003a84:	20d8      	movs	r0, #216	; 0xd8
 8003a86:	f7ff ff8d 	bl	80039a4 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 8003a8a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8003a8e:	f7ff ff89 	bl	80039a4 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 8003a92:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8003a96:	f7ff ff85 	bl	80039a4 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 8003a9a:	b2e0      	uxtb	r0, r4
 8003a9c:	f7ff ff82 	bl	80039a4 <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8003aa0:	f000 f804 	bl	8003aac <Spi1_AssertCs>

	// Wait for block erase 64k operation to end
	flashWaitWhileBusy();
 8003aa4:	f7ff ffd2 	bl	8003a4c <flashWaitWhileBusy>
}
 8003aa8:	bd10      	pop	{r4, pc}
	...

08003aac <Spi1_AssertCs>:
 */

#include "Spi.h"

void Spi1_AssertCs(void)
{
 8003aac:	b508      	push	{r3, lr}
	//Assert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ab4:	4801      	ldr	r0, [pc, #4]	; (8003abc <Spi1_AssertCs+0x10>)
 8003ab6:	f7fd fa35 	bl	8000f24 <HAL_GPIO_WritePin>
}
 8003aba:	bd08      	pop	{r3, pc}
 8003abc:	48000400 	.word	0x48000400

08003ac0 <Spi1_DeassertCs>:

void Spi1_DeassertCs(void)
{
 8003ac0:	b508      	push	{r3, lr}
	//Deassert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ac8:	4801      	ldr	r0, [pc, #4]	; (8003ad0 <Spi1_DeassertCs+0x10>)
 8003aca:	f7fd fa2b 	bl	8000f24 <HAL_GPIO_WritePin>
}
 8003ace:	bd08      	pop	{r3, pc}
 8003ad0:	48000400 	.word	0x48000400

08003ad4 <Spi1_Transmit>:

bool Spi1_Transmit(uint8_t *buff, uint16_t size)
{
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	460d      	mov	r5, r1
  bool status = false;
  if(HAL_SPI_Transmit(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8003ada:	f7fc fea5 	bl	8000828 <Get_SpiHandle>
 8003ade:	2364      	movs	r3, #100	; 0x64
 8003ae0:	462a      	mov	r2, r5
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	f7fe fd3a 	bl	800255c <HAL_SPI_Transmit>
  {
    status  = true;
  }
  return status;
}
 8003ae8:	fab0 f080 	clz	r0, r0
 8003aec:	0940      	lsrs	r0, r0, #5
 8003aee:	bd38      	pop	{r3, r4, r5, pc}

08003af0 <Spi1_Receive>:


bool Spi1_Receive(uint8_t *buff, uint16_t size)
{
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	4604      	mov	r4, r0
 8003af4:	460d      	mov	r5, r1
  bool status = false;
  if(HAL_SPI_Receive(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8003af6:	f7fc fe97 	bl	8000828 <Get_SpiHandle>
 8003afa:	2364      	movs	r3, #100	; 0x64
 8003afc:	462a      	mov	r2, r5
 8003afe:	4621      	mov	r1, r4
 8003b00:	f7ff f84c 	bl	8002b9c <HAL_SPI_Receive>
  {
    status = true;
  }

  return status;
}
 8003b04:	fab0 f080 	clz	r0, r0
 8003b08:	0940      	lsrs	r0, r0, #5
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}

08003b0c <__errno>:
 8003b0c:	4b01      	ldr	r3, [pc, #4]	; (8003b14 <__errno+0x8>)
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000008c 	.word	0x2000008c

08003b18 <_fwrite_r>:
 8003b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b1c:	9c08      	ldr	r4, [sp, #32]
 8003b1e:	468a      	mov	sl, r1
 8003b20:	4690      	mov	r8, r2
 8003b22:	fb02 f903 	mul.w	r9, r2, r3
 8003b26:	4605      	mov	r5, r0
 8003b28:	b118      	cbz	r0, 8003b32 <_fwrite_r+0x1a>
 8003b2a:	6983      	ldr	r3, [r0, #24]
 8003b2c:	b90b      	cbnz	r3, 8003b32 <_fwrite_r+0x1a>
 8003b2e:	f000 fa67 	bl	8004000 <__sinit>
 8003b32:	4b26      	ldr	r3, [pc, #152]	; (8003bcc <_fwrite_r+0xb4>)
 8003b34:	429c      	cmp	r4, r3
 8003b36:	d123      	bne.n	8003b80 <_fwrite_r+0x68>
 8003b38:	686c      	ldr	r4, [r5, #4]
 8003b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b3c:	07de      	lsls	r6, r3, #31
 8003b3e:	d405      	bmi.n	8003b4c <_fwrite_r+0x34>
 8003b40:	89a3      	ldrh	r3, [r4, #12]
 8003b42:	0598      	lsls	r0, r3, #22
 8003b44:	d402      	bmi.n	8003b4c <_fwrite_r+0x34>
 8003b46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b48:	f000 f879 	bl	8003c3e <__retarget_lock_acquire_recursive>
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	0719      	lsls	r1, r3, #28
 8003b50:	d520      	bpl.n	8003b94 <_fwrite_r+0x7c>
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	b1f3      	cbz	r3, 8003b94 <_fwrite_r+0x7c>
 8003b56:	2600      	movs	r6, #0
 8003b58:	454e      	cmp	r6, r9
 8003b5a:	d029      	beq.n	8003bb0 <_fwrite_r+0x98>
 8003b5c:	68a7      	ldr	r7, [r4, #8]
 8003b5e:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8003b62:	3f01      	subs	r7, #1
 8003b64:	2f00      	cmp	r7, #0
 8003b66:	60a7      	str	r7, [r4, #8]
 8003b68:	da04      	bge.n	8003b74 <_fwrite_r+0x5c>
 8003b6a:	69a3      	ldr	r3, [r4, #24]
 8003b6c:	429f      	cmp	r7, r3
 8003b6e:	db19      	blt.n	8003ba4 <_fwrite_r+0x8c>
 8003b70:	290a      	cmp	r1, #10
 8003b72:	d017      	beq.n	8003ba4 <_fwrite_r+0x8c>
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	6022      	str	r2, [r4, #0]
 8003b7a:	7019      	strb	r1, [r3, #0]
 8003b7c:	3601      	adds	r6, #1
 8003b7e:	e7eb      	b.n	8003b58 <_fwrite_r+0x40>
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <_fwrite_r+0xb8>)
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d101      	bne.n	8003b8a <_fwrite_r+0x72>
 8003b86:	68ac      	ldr	r4, [r5, #8]
 8003b88:	e7d7      	b.n	8003b3a <_fwrite_r+0x22>
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <_fwrite_r+0xbc>)
 8003b8c:	429c      	cmp	r4, r3
 8003b8e:	bf08      	it	eq
 8003b90:	68ec      	ldreq	r4, [r5, #12]
 8003b92:	e7d2      	b.n	8003b3a <_fwrite_r+0x22>
 8003b94:	4621      	mov	r1, r4
 8003b96:	4628      	mov	r0, r5
 8003b98:	f000 f8ae 	bl	8003cf8 <__swsetup_r>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d0da      	beq.n	8003b56 <_fwrite_r+0x3e>
 8003ba0:	2600      	movs	r6, #0
 8003ba2:	e005      	b.n	8003bb0 <_fwrite_r+0x98>
 8003ba4:	4622      	mov	r2, r4
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f000 f854 	bl	8003c54 <__swbuf_r>
 8003bac:	3001      	adds	r0, #1
 8003bae:	d1e5      	bne.n	8003b7c <_fwrite_r+0x64>
 8003bb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bb2:	07da      	lsls	r2, r3, #31
 8003bb4:	d405      	bmi.n	8003bc2 <_fwrite_r+0xaa>
 8003bb6:	89a3      	ldrh	r3, [r4, #12]
 8003bb8:	059b      	lsls	r3, r3, #22
 8003bba:	d402      	bmi.n	8003bc2 <_fwrite_r+0xaa>
 8003bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bbe:	f000 f83f 	bl	8003c40 <__retarget_lock_release_recursive>
 8003bc2:	fbb6 f0f8 	udiv	r0, r6, r8
 8003bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bca:	bf00      	nop
 8003bcc:	08004728 	.word	0x08004728
 8003bd0:	08004748 	.word	0x08004748
 8003bd4:	08004708 	.word	0x08004708

08003bd8 <fwrite>:
 8003bd8:	b507      	push	{r0, r1, r2, lr}
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	460a      	mov	r2, r1
 8003be0:	4601      	mov	r1, r0
 8003be2:	4803      	ldr	r0, [pc, #12]	; (8003bf0 <fwrite+0x18>)
 8003be4:	6800      	ldr	r0, [r0, #0]
 8003be6:	f7ff ff97 	bl	8003b18 <_fwrite_r>
 8003bea:	b003      	add	sp, #12
 8003bec:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bf0:	2000008c 	.word	0x2000008c

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4d0d      	ldr	r5, [pc, #52]	; (8003c2c <__libc_init_array+0x38>)
 8003bf8:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfa:	1b64      	subs	r4, r4, r5
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	2600      	movs	r6, #0
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	4d0b      	ldr	r5, [pc, #44]	; (8003c34 <__libc_init_array+0x40>)
 8003c06:	4c0c      	ldr	r4, [pc, #48]	; (8003c38 <__libc_init_array+0x44>)
 8003c08:	f000 fca2 	bl	8004550 <_init>
 8003c0c:	1b64      	subs	r4, r4, r5
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	2600      	movs	r6, #0
 8003c12:	42a6      	cmp	r6, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1c:	4798      	blx	r3
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c26:	4798      	blx	r3
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	08004770 	.word	0x08004770
 8003c30:	08004770 	.word	0x08004770
 8003c34:	08004770 	.word	0x08004770
 8003c38:	08004774 	.word	0x08004774

08003c3c <__retarget_lock_init_recursive>:
 8003c3c:	4770      	bx	lr

08003c3e <__retarget_lock_acquire_recursive>:
 8003c3e:	4770      	bx	lr

08003c40 <__retarget_lock_release_recursive>:
 8003c40:	4770      	bx	lr

08003c42 <memset>:
 8003c42:	4402      	add	r2, r0
 8003c44:	4603      	mov	r3, r0
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d100      	bne.n	8003c4c <memset+0xa>
 8003c4a:	4770      	bx	lr
 8003c4c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c50:	e7f9      	b.n	8003c46 <memset+0x4>
	...

08003c54 <__swbuf_r>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	460e      	mov	r6, r1
 8003c58:	4614      	mov	r4, r2
 8003c5a:	4605      	mov	r5, r0
 8003c5c:	b118      	cbz	r0, 8003c66 <__swbuf_r+0x12>
 8003c5e:	6983      	ldr	r3, [r0, #24]
 8003c60:	b90b      	cbnz	r3, 8003c66 <__swbuf_r+0x12>
 8003c62:	f000 f9cd 	bl	8004000 <__sinit>
 8003c66:	4b21      	ldr	r3, [pc, #132]	; (8003cec <__swbuf_r+0x98>)
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d12b      	bne.n	8003cc4 <__swbuf_r+0x70>
 8003c6c:	686c      	ldr	r4, [r5, #4]
 8003c6e:	69a3      	ldr	r3, [r4, #24]
 8003c70:	60a3      	str	r3, [r4, #8]
 8003c72:	89a3      	ldrh	r3, [r4, #12]
 8003c74:	071a      	lsls	r2, r3, #28
 8003c76:	d52f      	bpl.n	8003cd8 <__swbuf_r+0x84>
 8003c78:	6923      	ldr	r3, [r4, #16]
 8003c7a:	b36b      	cbz	r3, 8003cd8 <__swbuf_r+0x84>
 8003c7c:	6923      	ldr	r3, [r4, #16]
 8003c7e:	6820      	ldr	r0, [r4, #0]
 8003c80:	1ac0      	subs	r0, r0, r3
 8003c82:	6963      	ldr	r3, [r4, #20]
 8003c84:	b2f6      	uxtb	r6, r6
 8003c86:	4283      	cmp	r3, r0
 8003c88:	4637      	mov	r7, r6
 8003c8a:	dc04      	bgt.n	8003c96 <__swbuf_r+0x42>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f000 f922 	bl	8003ed8 <_fflush_r>
 8003c94:	bb30      	cbnz	r0, 8003ce4 <__swbuf_r+0x90>
 8003c96:	68a3      	ldr	r3, [r4, #8]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	60a3      	str	r3, [r4, #8]
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	6022      	str	r2, [r4, #0]
 8003ca2:	701e      	strb	r6, [r3, #0]
 8003ca4:	6963      	ldr	r3, [r4, #20]
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	4283      	cmp	r3, r0
 8003caa:	d004      	beq.n	8003cb6 <__swbuf_r+0x62>
 8003cac:	89a3      	ldrh	r3, [r4, #12]
 8003cae:	07db      	lsls	r3, r3, #31
 8003cb0:	d506      	bpl.n	8003cc0 <__swbuf_r+0x6c>
 8003cb2:	2e0a      	cmp	r6, #10
 8003cb4:	d104      	bne.n	8003cc0 <__swbuf_r+0x6c>
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	4628      	mov	r0, r5
 8003cba:	f000 f90d 	bl	8003ed8 <_fflush_r>
 8003cbe:	b988      	cbnz	r0, 8003ce4 <__swbuf_r+0x90>
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <__swbuf_r+0x9c>)
 8003cc6:	429c      	cmp	r4, r3
 8003cc8:	d101      	bne.n	8003cce <__swbuf_r+0x7a>
 8003cca:	68ac      	ldr	r4, [r5, #8]
 8003ccc:	e7cf      	b.n	8003c6e <__swbuf_r+0x1a>
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <__swbuf_r+0xa0>)
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	bf08      	it	eq
 8003cd4:	68ec      	ldreq	r4, [r5, #12]
 8003cd6:	e7ca      	b.n	8003c6e <__swbuf_r+0x1a>
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f000 f80c 	bl	8003cf8 <__swsetup_r>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d0cb      	beq.n	8003c7c <__swbuf_r+0x28>
 8003ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ce8:	e7ea      	b.n	8003cc0 <__swbuf_r+0x6c>
 8003cea:	bf00      	nop
 8003cec:	08004728 	.word	0x08004728
 8003cf0:	08004748 	.word	0x08004748
 8003cf4:	08004708 	.word	0x08004708

08003cf8 <__swsetup_r>:
 8003cf8:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <__swsetup_r+0xcc>)
 8003cfa:	b570      	push	{r4, r5, r6, lr}
 8003cfc:	681d      	ldr	r5, [r3, #0]
 8003cfe:	4606      	mov	r6, r0
 8003d00:	460c      	mov	r4, r1
 8003d02:	b125      	cbz	r5, 8003d0e <__swsetup_r+0x16>
 8003d04:	69ab      	ldr	r3, [r5, #24]
 8003d06:	b913      	cbnz	r3, 8003d0e <__swsetup_r+0x16>
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f000 f979 	bl	8004000 <__sinit>
 8003d0e:	4b2e      	ldr	r3, [pc, #184]	; (8003dc8 <__swsetup_r+0xd0>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	d10f      	bne.n	8003d34 <__swsetup_r+0x3c>
 8003d14:	686c      	ldr	r4, [r5, #4]
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d1c:	0719      	lsls	r1, r3, #28
 8003d1e:	d42c      	bmi.n	8003d7a <__swsetup_r+0x82>
 8003d20:	06dd      	lsls	r5, r3, #27
 8003d22:	d411      	bmi.n	8003d48 <__swsetup_r+0x50>
 8003d24:	2309      	movs	r3, #9
 8003d26:	6033      	str	r3, [r6, #0]
 8003d28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d2c:	81a3      	strh	r3, [r4, #12]
 8003d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d32:	e03e      	b.n	8003db2 <__swsetup_r+0xba>
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <__swsetup_r+0xd4>)
 8003d36:	429c      	cmp	r4, r3
 8003d38:	d101      	bne.n	8003d3e <__swsetup_r+0x46>
 8003d3a:	68ac      	ldr	r4, [r5, #8]
 8003d3c:	e7eb      	b.n	8003d16 <__swsetup_r+0x1e>
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <__swsetup_r+0xd8>)
 8003d40:	429c      	cmp	r4, r3
 8003d42:	bf08      	it	eq
 8003d44:	68ec      	ldreq	r4, [r5, #12]
 8003d46:	e7e6      	b.n	8003d16 <__swsetup_r+0x1e>
 8003d48:	0758      	lsls	r0, r3, #29
 8003d4a:	d512      	bpl.n	8003d72 <__swsetup_r+0x7a>
 8003d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d4e:	b141      	cbz	r1, 8003d62 <__swsetup_r+0x6a>
 8003d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d54:	4299      	cmp	r1, r3
 8003d56:	d002      	beq.n	8003d5e <__swsetup_r+0x66>
 8003d58:	4630      	mov	r0, r6
 8003d5a:	f000 fa53 	bl	8004204 <_free_r>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	6363      	str	r3, [r4, #52]	; 0x34
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d68:	81a3      	strh	r3, [r4, #12]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6063      	str	r3, [r4, #4]
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	f043 0308 	orr.w	r3, r3, #8
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	b94b      	cbnz	r3, 8003d92 <__swsetup_r+0x9a>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d88:	d003      	beq.n	8003d92 <__swsetup_r+0x9a>
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 f9f9 	bl	8004184 <__smakebuf_r>
 8003d92:	89a0      	ldrh	r0, [r4, #12]
 8003d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d98:	f010 0301 	ands.w	r3, r0, #1
 8003d9c:	d00a      	beq.n	8003db4 <__swsetup_r+0xbc>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60a3      	str	r3, [r4, #8]
 8003da2:	6963      	ldr	r3, [r4, #20]
 8003da4:	425b      	negs	r3, r3
 8003da6:	61a3      	str	r3, [r4, #24]
 8003da8:	6923      	ldr	r3, [r4, #16]
 8003daa:	b943      	cbnz	r3, 8003dbe <__swsetup_r+0xc6>
 8003dac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003db0:	d1ba      	bne.n	8003d28 <__swsetup_r+0x30>
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
 8003db4:	0781      	lsls	r1, r0, #30
 8003db6:	bf58      	it	pl
 8003db8:	6963      	ldrpl	r3, [r4, #20]
 8003dba:	60a3      	str	r3, [r4, #8]
 8003dbc:	e7f4      	b.n	8003da8 <__swsetup_r+0xb0>
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	e7f7      	b.n	8003db2 <__swsetup_r+0xba>
 8003dc2:	bf00      	nop
 8003dc4:	2000008c 	.word	0x2000008c
 8003dc8:	08004728 	.word	0x08004728
 8003dcc:	08004748 	.word	0x08004748
 8003dd0:	08004708 	.word	0x08004708

08003dd4 <__sflush_r>:
 8003dd4:	898a      	ldrh	r2, [r1, #12]
 8003dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd8:	4605      	mov	r5, r0
 8003dda:	0710      	lsls	r0, r2, #28
 8003ddc:	460c      	mov	r4, r1
 8003dde:	d457      	bmi.n	8003e90 <__sflush_r+0xbc>
 8003de0:	684b      	ldr	r3, [r1, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	dc04      	bgt.n	8003df0 <__sflush_r+0x1c>
 8003de6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	dc01      	bgt.n	8003df0 <__sflush_r+0x1c>
 8003dec:	2000      	movs	r0, #0
 8003dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003df2:	2e00      	cmp	r6, #0
 8003df4:	d0fa      	beq.n	8003dec <__sflush_r+0x18>
 8003df6:	2300      	movs	r3, #0
 8003df8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003dfc:	682f      	ldr	r7, [r5, #0]
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	d032      	beq.n	8003e68 <__sflush_r+0x94>
 8003e02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	075a      	lsls	r2, r3, #29
 8003e08:	d505      	bpl.n	8003e16 <__sflush_r+0x42>
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	1ac0      	subs	r0, r0, r3
 8003e0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e10:	b10b      	cbz	r3, 8003e16 <__sflush_r+0x42>
 8003e12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e14:	1ac0      	subs	r0, r0, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e1c:	6a21      	ldr	r1, [r4, #32]
 8003e1e:	4628      	mov	r0, r5
 8003e20:	47b0      	blx	r6
 8003e22:	1c43      	adds	r3, r0, #1
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	d106      	bne.n	8003e36 <__sflush_r+0x62>
 8003e28:	6829      	ldr	r1, [r5, #0]
 8003e2a:	291d      	cmp	r1, #29
 8003e2c:	d82c      	bhi.n	8003e88 <__sflush_r+0xb4>
 8003e2e:	4a29      	ldr	r2, [pc, #164]	; (8003ed4 <__sflush_r+0x100>)
 8003e30:	40ca      	lsrs	r2, r1
 8003e32:	07d6      	lsls	r6, r2, #31
 8003e34:	d528      	bpl.n	8003e88 <__sflush_r+0xb4>
 8003e36:	2200      	movs	r2, #0
 8003e38:	6062      	str	r2, [r4, #4]
 8003e3a:	04d9      	lsls	r1, r3, #19
 8003e3c:	6922      	ldr	r2, [r4, #16]
 8003e3e:	6022      	str	r2, [r4, #0]
 8003e40:	d504      	bpl.n	8003e4c <__sflush_r+0x78>
 8003e42:	1c42      	adds	r2, r0, #1
 8003e44:	d101      	bne.n	8003e4a <__sflush_r+0x76>
 8003e46:	682b      	ldr	r3, [r5, #0]
 8003e48:	b903      	cbnz	r3, 8003e4c <__sflush_r+0x78>
 8003e4a:	6560      	str	r0, [r4, #84]	; 0x54
 8003e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e4e:	602f      	str	r7, [r5, #0]
 8003e50:	2900      	cmp	r1, #0
 8003e52:	d0cb      	beq.n	8003dec <__sflush_r+0x18>
 8003e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e58:	4299      	cmp	r1, r3
 8003e5a:	d002      	beq.n	8003e62 <__sflush_r+0x8e>
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 f9d1 	bl	8004204 <_free_r>
 8003e62:	2000      	movs	r0, #0
 8003e64:	6360      	str	r0, [r4, #52]	; 0x34
 8003e66:	e7c2      	b.n	8003dee <__sflush_r+0x1a>
 8003e68:	6a21      	ldr	r1, [r4, #32]
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b0      	blx	r6
 8003e70:	1c41      	adds	r1, r0, #1
 8003e72:	d1c7      	bne.n	8003e04 <__sflush_r+0x30>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0c4      	beq.n	8003e04 <__sflush_r+0x30>
 8003e7a:	2b1d      	cmp	r3, #29
 8003e7c:	d001      	beq.n	8003e82 <__sflush_r+0xae>
 8003e7e:	2b16      	cmp	r3, #22
 8003e80:	d101      	bne.n	8003e86 <__sflush_r+0xb2>
 8003e82:	602f      	str	r7, [r5, #0]
 8003e84:	e7b2      	b.n	8003dec <__sflush_r+0x18>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8c:	81a3      	strh	r3, [r4, #12]
 8003e8e:	e7ae      	b.n	8003dee <__sflush_r+0x1a>
 8003e90:	690f      	ldr	r7, [r1, #16]
 8003e92:	2f00      	cmp	r7, #0
 8003e94:	d0aa      	beq.n	8003dec <__sflush_r+0x18>
 8003e96:	0793      	lsls	r3, r2, #30
 8003e98:	680e      	ldr	r6, [r1, #0]
 8003e9a:	bf08      	it	eq
 8003e9c:	694b      	ldreq	r3, [r1, #20]
 8003e9e:	600f      	str	r7, [r1, #0]
 8003ea0:	bf18      	it	ne
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	1bf6      	subs	r6, r6, r7
 8003ea6:	608b      	str	r3, [r1, #8]
 8003ea8:	2e00      	cmp	r6, #0
 8003eaa:	dd9f      	ble.n	8003dec <__sflush_r+0x18>
 8003eac:	6a21      	ldr	r1, [r4, #32]
 8003eae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003eb2:	4633      	mov	r3, r6
 8003eb4:	463a      	mov	r2, r7
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	47e0      	blx	ip
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	dc06      	bgt.n	8003ecc <__sflush_r+0xf8>
 8003ebe:	89a3      	ldrh	r3, [r4, #12]
 8003ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec4:	81a3      	strh	r3, [r4, #12]
 8003ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eca:	e790      	b.n	8003dee <__sflush_r+0x1a>
 8003ecc:	4407      	add	r7, r0
 8003ece:	1a36      	subs	r6, r6, r0
 8003ed0:	e7ea      	b.n	8003ea8 <__sflush_r+0xd4>
 8003ed2:	bf00      	nop
 8003ed4:	20400001 	.word	0x20400001

08003ed8 <_fflush_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	690b      	ldr	r3, [r1, #16]
 8003edc:	4605      	mov	r5, r0
 8003ede:	460c      	mov	r4, r1
 8003ee0:	b913      	cbnz	r3, 8003ee8 <_fflush_r+0x10>
 8003ee2:	2500      	movs	r5, #0
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	b118      	cbz	r0, 8003ef2 <_fflush_r+0x1a>
 8003eea:	6983      	ldr	r3, [r0, #24]
 8003eec:	b90b      	cbnz	r3, 8003ef2 <_fflush_r+0x1a>
 8003eee:	f000 f887 	bl	8004000 <__sinit>
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <_fflush_r+0x6c>)
 8003ef4:	429c      	cmp	r4, r3
 8003ef6:	d11b      	bne.n	8003f30 <_fflush_r+0x58>
 8003ef8:	686c      	ldr	r4, [r5, #4]
 8003efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0ef      	beq.n	8003ee2 <_fflush_r+0xa>
 8003f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f04:	07d0      	lsls	r0, r2, #31
 8003f06:	d404      	bmi.n	8003f12 <_fflush_r+0x3a>
 8003f08:	0599      	lsls	r1, r3, #22
 8003f0a:	d402      	bmi.n	8003f12 <_fflush_r+0x3a>
 8003f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f0e:	f7ff fe96 	bl	8003c3e <__retarget_lock_acquire_recursive>
 8003f12:	4628      	mov	r0, r5
 8003f14:	4621      	mov	r1, r4
 8003f16:	f7ff ff5d 	bl	8003dd4 <__sflush_r>
 8003f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f1c:	07da      	lsls	r2, r3, #31
 8003f1e:	4605      	mov	r5, r0
 8003f20:	d4e0      	bmi.n	8003ee4 <_fflush_r+0xc>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	059b      	lsls	r3, r3, #22
 8003f26:	d4dd      	bmi.n	8003ee4 <_fflush_r+0xc>
 8003f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f2a:	f7ff fe89 	bl	8003c40 <__retarget_lock_release_recursive>
 8003f2e:	e7d9      	b.n	8003ee4 <_fflush_r+0xc>
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <_fflush_r+0x70>)
 8003f32:	429c      	cmp	r4, r3
 8003f34:	d101      	bne.n	8003f3a <_fflush_r+0x62>
 8003f36:	68ac      	ldr	r4, [r5, #8]
 8003f38:	e7df      	b.n	8003efa <_fflush_r+0x22>
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <_fflush_r+0x74>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	bf08      	it	eq
 8003f40:	68ec      	ldreq	r4, [r5, #12]
 8003f42:	e7da      	b.n	8003efa <_fflush_r+0x22>
 8003f44:	08004728 	.word	0x08004728
 8003f48:	08004748 	.word	0x08004748
 8003f4c:	08004708 	.word	0x08004708

08003f50 <std>:
 8003f50:	2300      	movs	r3, #0
 8003f52:	b510      	push	{r4, lr}
 8003f54:	4604      	mov	r4, r0
 8003f56:	e9c0 3300 	strd	r3, r3, [r0]
 8003f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f5e:	6083      	str	r3, [r0, #8]
 8003f60:	8181      	strh	r1, [r0, #12]
 8003f62:	6643      	str	r3, [r0, #100]	; 0x64
 8003f64:	81c2      	strh	r2, [r0, #14]
 8003f66:	6183      	str	r3, [r0, #24]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	305c      	adds	r0, #92	; 0x5c
 8003f6e:	f7ff fe68 	bl	8003c42 <memset>
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <std+0x38>)
 8003f74:	6263      	str	r3, [r4, #36]	; 0x24
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <std+0x3c>)
 8003f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <std+0x40>)
 8003f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <std+0x44>)
 8003f80:	6224      	str	r4, [r4, #32]
 8003f82:	6323      	str	r3, [r4, #48]	; 0x30
 8003f84:	bd10      	pop	{r4, pc}
 8003f86:	bf00      	nop
 8003f88:	080043e1 	.word	0x080043e1
 8003f8c:	08004403 	.word	0x08004403
 8003f90:	0800443b 	.word	0x0800443b
 8003f94:	0800445f 	.word	0x0800445f

08003f98 <_cleanup_r>:
 8003f98:	4901      	ldr	r1, [pc, #4]	; (8003fa0 <_cleanup_r+0x8>)
 8003f9a:	f000 b8af 	b.w	80040fc <_fwalk_reent>
 8003f9e:	bf00      	nop
 8003fa0:	08003ed9 	.word	0x08003ed9

08003fa4 <__sfmoreglue>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	2268      	movs	r2, #104	; 0x68
 8003fa8:	1e4d      	subs	r5, r1, #1
 8003faa:	4355      	muls	r5, r2
 8003fac:	460e      	mov	r6, r1
 8003fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fb2:	f000 f991 	bl	80042d8 <_malloc_r>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	b140      	cbz	r0, 8003fcc <__sfmoreglue+0x28>
 8003fba:	2100      	movs	r1, #0
 8003fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8003fc0:	300c      	adds	r0, #12
 8003fc2:	60a0      	str	r0, [r4, #8]
 8003fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003fc8:	f7ff fe3b 	bl	8003c42 <memset>
 8003fcc:	4620      	mov	r0, r4
 8003fce:	bd70      	pop	{r4, r5, r6, pc}

08003fd0 <__sfp_lock_acquire>:
 8003fd0:	4801      	ldr	r0, [pc, #4]	; (8003fd8 <__sfp_lock_acquire+0x8>)
 8003fd2:	f7ff be34 	b.w	8003c3e <__retarget_lock_acquire_recursive>
 8003fd6:	bf00      	nop
 8003fd8:	20000245 	.word	0x20000245

08003fdc <__sfp_lock_release>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	; (8003fe4 <__sfp_lock_release+0x8>)
 8003fde:	f7ff be2f 	b.w	8003c40 <__retarget_lock_release_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	20000245 	.word	0x20000245

08003fe8 <__sinit_lock_acquire>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <__sinit_lock_acquire+0x8>)
 8003fea:	f7ff be28 	b.w	8003c3e <__retarget_lock_acquire_recursive>
 8003fee:	bf00      	nop
 8003ff0:	20000246 	.word	0x20000246

08003ff4 <__sinit_lock_release>:
 8003ff4:	4801      	ldr	r0, [pc, #4]	; (8003ffc <__sinit_lock_release+0x8>)
 8003ff6:	f7ff be23 	b.w	8003c40 <__retarget_lock_release_recursive>
 8003ffa:	bf00      	nop
 8003ffc:	20000246 	.word	0x20000246

08004000 <__sinit>:
 8004000:	b510      	push	{r4, lr}
 8004002:	4604      	mov	r4, r0
 8004004:	f7ff fff0 	bl	8003fe8 <__sinit_lock_acquire>
 8004008:	69a3      	ldr	r3, [r4, #24]
 800400a:	b11b      	cbz	r3, 8004014 <__sinit+0x14>
 800400c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004010:	f7ff bff0 	b.w	8003ff4 <__sinit_lock_release>
 8004014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004018:	6523      	str	r3, [r4, #80]	; 0x50
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <__sinit+0x68>)
 800401c:	4a13      	ldr	r2, [pc, #76]	; (800406c <__sinit+0x6c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	62a2      	str	r2, [r4, #40]	; 0x28
 8004022:	42a3      	cmp	r3, r4
 8004024:	bf04      	itt	eq
 8004026:	2301      	moveq	r3, #1
 8004028:	61a3      	streq	r3, [r4, #24]
 800402a:	4620      	mov	r0, r4
 800402c:	f000 f820 	bl	8004070 <__sfp>
 8004030:	6060      	str	r0, [r4, #4]
 8004032:	4620      	mov	r0, r4
 8004034:	f000 f81c 	bl	8004070 <__sfp>
 8004038:	60a0      	str	r0, [r4, #8]
 800403a:	4620      	mov	r0, r4
 800403c:	f000 f818 	bl	8004070 <__sfp>
 8004040:	2200      	movs	r2, #0
 8004042:	60e0      	str	r0, [r4, #12]
 8004044:	2104      	movs	r1, #4
 8004046:	6860      	ldr	r0, [r4, #4]
 8004048:	f7ff ff82 	bl	8003f50 <std>
 800404c:	68a0      	ldr	r0, [r4, #8]
 800404e:	2201      	movs	r2, #1
 8004050:	2109      	movs	r1, #9
 8004052:	f7ff ff7d 	bl	8003f50 <std>
 8004056:	68e0      	ldr	r0, [r4, #12]
 8004058:	2202      	movs	r2, #2
 800405a:	2112      	movs	r1, #18
 800405c:	f7ff ff78 	bl	8003f50 <std>
 8004060:	2301      	movs	r3, #1
 8004062:	61a3      	str	r3, [r4, #24]
 8004064:	e7d2      	b.n	800400c <__sinit+0xc>
 8004066:	bf00      	nop
 8004068:	08004704 	.word	0x08004704
 800406c:	08003f99 	.word	0x08003f99

08004070 <__sfp>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	4607      	mov	r7, r0
 8004074:	f7ff ffac 	bl	8003fd0 <__sfp_lock_acquire>
 8004078:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <__sfp+0x84>)
 800407a:	681e      	ldr	r6, [r3, #0]
 800407c:	69b3      	ldr	r3, [r6, #24]
 800407e:	b913      	cbnz	r3, 8004086 <__sfp+0x16>
 8004080:	4630      	mov	r0, r6
 8004082:	f7ff ffbd 	bl	8004000 <__sinit>
 8004086:	3648      	adds	r6, #72	; 0x48
 8004088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800408c:	3b01      	subs	r3, #1
 800408e:	d503      	bpl.n	8004098 <__sfp+0x28>
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	b30b      	cbz	r3, 80040d8 <__sfp+0x68>
 8004094:	6836      	ldr	r6, [r6, #0]
 8004096:	e7f7      	b.n	8004088 <__sfp+0x18>
 8004098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800409c:	b9d5      	cbnz	r5, 80040d4 <__sfp+0x64>
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <__sfp+0x88>)
 80040a0:	60e3      	str	r3, [r4, #12]
 80040a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040a6:	6665      	str	r5, [r4, #100]	; 0x64
 80040a8:	f7ff fdc8 	bl	8003c3c <__retarget_lock_init_recursive>
 80040ac:	f7ff ff96 	bl	8003fdc <__sfp_lock_release>
 80040b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040b8:	6025      	str	r5, [r4, #0]
 80040ba:	61a5      	str	r5, [r4, #24]
 80040bc:	2208      	movs	r2, #8
 80040be:	4629      	mov	r1, r5
 80040c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040c4:	f7ff fdbd 	bl	8003c42 <memset>
 80040c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040d0:	4620      	mov	r0, r4
 80040d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040d4:	3468      	adds	r4, #104	; 0x68
 80040d6:	e7d9      	b.n	800408c <__sfp+0x1c>
 80040d8:	2104      	movs	r1, #4
 80040da:	4638      	mov	r0, r7
 80040dc:	f7ff ff62 	bl	8003fa4 <__sfmoreglue>
 80040e0:	4604      	mov	r4, r0
 80040e2:	6030      	str	r0, [r6, #0]
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d1d5      	bne.n	8004094 <__sfp+0x24>
 80040e8:	f7ff ff78 	bl	8003fdc <__sfp_lock_release>
 80040ec:	230c      	movs	r3, #12
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	e7ee      	b.n	80040d0 <__sfp+0x60>
 80040f2:	bf00      	nop
 80040f4:	08004704 	.word	0x08004704
 80040f8:	ffff0001 	.word	0xffff0001

080040fc <_fwalk_reent>:
 80040fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004100:	4606      	mov	r6, r0
 8004102:	4688      	mov	r8, r1
 8004104:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004108:	2700      	movs	r7, #0
 800410a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800410e:	f1b9 0901 	subs.w	r9, r9, #1
 8004112:	d505      	bpl.n	8004120 <_fwalk_reent+0x24>
 8004114:	6824      	ldr	r4, [r4, #0]
 8004116:	2c00      	cmp	r4, #0
 8004118:	d1f7      	bne.n	800410a <_fwalk_reent+0xe>
 800411a:	4638      	mov	r0, r7
 800411c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004120:	89ab      	ldrh	r3, [r5, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d907      	bls.n	8004136 <_fwalk_reent+0x3a>
 8004126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800412a:	3301      	adds	r3, #1
 800412c:	d003      	beq.n	8004136 <_fwalk_reent+0x3a>
 800412e:	4629      	mov	r1, r5
 8004130:	4630      	mov	r0, r6
 8004132:	47c0      	blx	r8
 8004134:	4307      	orrs	r7, r0
 8004136:	3568      	adds	r5, #104	; 0x68
 8004138:	e7e9      	b.n	800410e <_fwalk_reent+0x12>

0800413a <__swhatbuf_r>:
 800413a:	b570      	push	{r4, r5, r6, lr}
 800413c:	460e      	mov	r6, r1
 800413e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004142:	2900      	cmp	r1, #0
 8004144:	b096      	sub	sp, #88	; 0x58
 8004146:	4614      	mov	r4, r2
 8004148:	461d      	mov	r5, r3
 800414a:	da08      	bge.n	800415e <__swhatbuf_r+0x24>
 800414c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	602a      	str	r2, [r5, #0]
 8004154:	061a      	lsls	r2, r3, #24
 8004156:	d410      	bmi.n	800417a <__swhatbuf_r+0x40>
 8004158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800415c:	e00e      	b.n	800417c <__swhatbuf_r+0x42>
 800415e:	466a      	mov	r2, sp
 8004160:	f000 f9a4 	bl	80044ac <_fstat_r>
 8004164:	2800      	cmp	r0, #0
 8004166:	dbf1      	blt.n	800414c <__swhatbuf_r+0x12>
 8004168:	9a01      	ldr	r2, [sp, #4]
 800416a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800416e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004172:	425a      	negs	r2, r3
 8004174:	415a      	adcs	r2, r3
 8004176:	602a      	str	r2, [r5, #0]
 8004178:	e7ee      	b.n	8004158 <__swhatbuf_r+0x1e>
 800417a:	2340      	movs	r3, #64	; 0x40
 800417c:	2000      	movs	r0, #0
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	b016      	add	sp, #88	; 0x58
 8004182:	bd70      	pop	{r4, r5, r6, pc}

08004184 <__smakebuf_r>:
 8004184:	898b      	ldrh	r3, [r1, #12]
 8004186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004188:	079d      	lsls	r5, r3, #30
 800418a:	4606      	mov	r6, r0
 800418c:	460c      	mov	r4, r1
 800418e:	d507      	bpl.n	80041a0 <__smakebuf_r+0x1c>
 8004190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	6123      	str	r3, [r4, #16]
 8004198:	2301      	movs	r3, #1
 800419a:	6163      	str	r3, [r4, #20]
 800419c:	b002      	add	sp, #8
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	ab01      	add	r3, sp, #4
 80041a2:	466a      	mov	r2, sp
 80041a4:	f7ff ffc9 	bl	800413a <__swhatbuf_r>
 80041a8:	9900      	ldr	r1, [sp, #0]
 80041aa:	4605      	mov	r5, r0
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 f893 	bl	80042d8 <_malloc_r>
 80041b2:	b948      	cbnz	r0, 80041c8 <__smakebuf_r+0x44>
 80041b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041b8:	059a      	lsls	r2, r3, #22
 80041ba:	d4ef      	bmi.n	800419c <__smakebuf_r+0x18>
 80041bc:	f023 0303 	bic.w	r3, r3, #3
 80041c0:	f043 0302 	orr.w	r3, r3, #2
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	e7e3      	b.n	8004190 <__smakebuf_r+0xc>
 80041c8:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <__smakebuf_r+0x7c>)
 80041ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	6020      	str	r0, [r4, #0]
 80041d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d4:	81a3      	strh	r3, [r4, #12]
 80041d6:	9b00      	ldr	r3, [sp, #0]
 80041d8:	6163      	str	r3, [r4, #20]
 80041da:	9b01      	ldr	r3, [sp, #4]
 80041dc:	6120      	str	r0, [r4, #16]
 80041de:	b15b      	cbz	r3, 80041f8 <__smakebuf_r+0x74>
 80041e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041e4:	4630      	mov	r0, r6
 80041e6:	f000 f973 	bl	80044d0 <_isatty_r>
 80041ea:	b128      	cbz	r0, 80041f8 <__smakebuf_r+0x74>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	89a0      	ldrh	r0, [r4, #12]
 80041fa:	4305      	orrs	r5, r0
 80041fc:	81a5      	strh	r5, [r4, #12]
 80041fe:	e7cd      	b.n	800419c <__smakebuf_r+0x18>
 8004200:	08003f99 	.word	0x08003f99

08004204 <_free_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4605      	mov	r5, r0
 8004208:	2900      	cmp	r1, #0
 800420a:	d041      	beq.n	8004290 <_free_r+0x8c>
 800420c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004210:	1f0c      	subs	r4, r1, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	bfb8      	it	lt
 8004216:	18e4      	addlt	r4, r4, r3
 8004218:	f000 f97c 	bl	8004514 <__malloc_lock>
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <_free_r+0x90>)
 800421e:	6813      	ldr	r3, [r2, #0]
 8004220:	b933      	cbnz	r3, 8004230 <_free_r+0x2c>
 8004222:	6063      	str	r3, [r4, #4]
 8004224:	6014      	str	r4, [r2, #0]
 8004226:	4628      	mov	r0, r5
 8004228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800422c:	f000 b978 	b.w	8004520 <__malloc_unlock>
 8004230:	42a3      	cmp	r3, r4
 8004232:	d908      	bls.n	8004246 <_free_r+0x42>
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	1821      	adds	r1, r4, r0
 8004238:	428b      	cmp	r3, r1
 800423a:	bf01      	itttt	eq
 800423c:	6819      	ldreq	r1, [r3, #0]
 800423e:	685b      	ldreq	r3, [r3, #4]
 8004240:	1809      	addeq	r1, r1, r0
 8004242:	6021      	streq	r1, [r4, #0]
 8004244:	e7ed      	b.n	8004222 <_free_r+0x1e>
 8004246:	461a      	mov	r2, r3
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	b10b      	cbz	r3, 8004250 <_free_r+0x4c>
 800424c:	42a3      	cmp	r3, r4
 800424e:	d9fa      	bls.n	8004246 <_free_r+0x42>
 8004250:	6811      	ldr	r1, [r2, #0]
 8004252:	1850      	adds	r0, r2, r1
 8004254:	42a0      	cmp	r0, r4
 8004256:	d10b      	bne.n	8004270 <_free_r+0x6c>
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	4401      	add	r1, r0
 800425c:	1850      	adds	r0, r2, r1
 800425e:	4283      	cmp	r3, r0
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	d1e0      	bne.n	8004226 <_free_r+0x22>
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	6053      	str	r3, [r2, #4]
 800426a:	4401      	add	r1, r0
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	e7da      	b.n	8004226 <_free_r+0x22>
 8004270:	d902      	bls.n	8004278 <_free_r+0x74>
 8004272:	230c      	movs	r3, #12
 8004274:	602b      	str	r3, [r5, #0]
 8004276:	e7d6      	b.n	8004226 <_free_r+0x22>
 8004278:	6820      	ldr	r0, [r4, #0]
 800427a:	1821      	adds	r1, r4, r0
 800427c:	428b      	cmp	r3, r1
 800427e:	bf04      	itt	eq
 8004280:	6819      	ldreq	r1, [r3, #0]
 8004282:	685b      	ldreq	r3, [r3, #4]
 8004284:	6063      	str	r3, [r4, #4]
 8004286:	bf04      	itt	eq
 8004288:	1809      	addeq	r1, r1, r0
 800428a:	6021      	streq	r1, [r4, #0]
 800428c:	6054      	str	r4, [r2, #4]
 800428e:	e7ca      	b.n	8004226 <_free_r+0x22>
 8004290:	bd38      	pop	{r3, r4, r5, pc}
 8004292:	bf00      	nop
 8004294:	20000248 	.word	0x20000248

08004298 <sbrk_aligned>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	4e0e      	ldr	r6, [pc, #56]	; (80042d4 <sbrk_aligned+0x3c>)
 800429c:	460c      	mov	r4, r1
 800429e:	6831      	ldr	r1, [r6, #0]
 80042a0:	4605      	mov	r5, r0
 80042a2:	b911      	cbnz	r1, 80042aa <sbrk_aligned+0x12>
 80042a4:	f000 f88c 	bl	80043c0 <_sbrk_r>
 80042a8:	6030      	str	r0, [r6, #0]
 80042aa:	4621      	mov	r1, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	f000 f887 	bl	80043c0 <_sbrk_r>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	d00a      	beq.n	80042cc <sbrk_aligned+0x34>
 80042b6:	1cc4      	adds	r4, r0, #3
 80042b8:	f024 0403 	bic.w	r4, r4, #3
 80042bc:	42a0      	cmp	r0, r4
 80042be:	d007      	beq.n	80042d0 <sbrk_aligned+0x38>
 80042c0:	1a21      	subs	r1, r4, r0
 80042c2:	4628      	mov	r0, r5
 80042c4:	f000 f87c 	bl	80043c0 <_sbrk_r>
 80042c8:	3001      	adds	r0, #1
 80042ca:	d101      	bne.n	80042d0 <sbrk_aligned+0x38>
 80042cc:	f04f 34ff 	mov.w	r4, #4294967295
 80042d0:	4620      	mov	r0, r4
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	2000024c 	.word	0x2000024c

080042d8 <_malloc_r>:
 80042d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042dc:	1ccd      	adds	r5, r1, #3
 80042de:	f025 0503 	bic.w	r5, r5, #3
 80042e2:	3508      	adds	r5, #8
 80042e4:	2d0c      	cmp	r5, #12
 80042e6:	bf38      	it	cc
 80042e8:	250c      	movcc	r5, #12
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	4607      	mov	r7, r0
 80042ee:	db01      	blt.n	80042f4 <_malloc_r+0x1c>
 80042f0:	42a9      	cmp	r1, r5
 80042f2:	d905      	bls.n	8004300 <_malloc_r+0x28>
 80042f4:	230c      	movs	r3, #12
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	2600      	movs	r6, #0
 80042fa:	4630      	mov	r0, r6
 80042fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004300:	4e2e      	ldr	r6, [pc, #184]	; (80043bc <_malloc_r+0xe4>)
 8004302:	f000 f907 	bl	8004514 <__malloc_lock>
 8004306:	6833      	ldr	r3, [r6, #0]
 8004308:	461c      	mov	r4, r3
 800430a:	bb34      	cbnz	r4, 800435a <_malloc_r+0x82>
 800430c:	4629      	mov	r1, r5
 800430e:	4638      	mov	r0, r7
 8004310:	f7ff ffc2 	bl	8004298 <sbrk_aligned>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	4604      	mov	r4, r0
 8004318:	d14d      	bne.n	80043b6 <_malloc_r+0xde>
 800431a:	6834      	ldr	r4, [r6, #0]
 800431c:	4626      	mov	r6, r4
 800431e:	2e00      	cmp	r6, #0
 8004320:	d140      	bne.n	80043a4 <_malloc_r+0xcc>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	4631      	mov	r1, r6
 8004326:	4638      	mov	r0, r7
 8004328:	eb04 0803 	add.w	r8, r4, r3
 800432c:	f000 f848 	bl	80043c0 <_sbrk_r>
 8004330:	4580      	cmp	r8, r0
 8004332:	d13a      	bne.n	80043aa <_malloc_r+0xd2>
 8004334:	6821      	ldr	r1, [r4, #0]
 8004336:	3503      	adds	r5, #3
 8004338:	1a6d      	subs	r5, r5, r1
 800433a:	f025 0503 	bic.w	r5, r5, #3
 800433e:	3508      	adds	r5, #8
 8004340:	2d0c      	cmp	r5, #12
 8004342:	bf38      	it	cc
 8004344:	250c      	movcc	r5, #12
 8004346:	4629      	mov	r1, r5
 8004348:	4638      	mov	r0, r7
 800434a:	f7ff ffa5 	bl	8004298 <sbrk_aligned>
 800434e:	3001      	adds	r0, #1
 8004350:	d02b      	beq.n	80043aa <_malloc_r+0xd2>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	442b      	add	r3, r5
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	e00e      	b.n	8004378 <_malloc_r+0xa0>
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	1b52      	subs	r2, r2, r5
 800435e:	d41e      	bmi.n	800439e <_malloc_r+0xc6>
 8004360:	2a0b      	cmp	r2, #11
 8004362:	d916      	bls.n	8004392 <_malloc_r+0xba>
 8004364:	1961      	adds	r1, r4, r5
 8004366:	42a3      	cmp	r3, r4
 8004368:	6025      	str	r5, [r4, #0]
 800436a:	bf18      	it	ne
 800436c:	6059      	strne	r1, [r3, #4]
 800436e:	6863      	ldr	r3, [r4, #4]
 8004370:	bf08      	it	eq
 8004372:	6031      	streq	r1, [r6, #0]
 8004374:	5162      	str	r2, [r4, r5]
 8004376:	604b      	str	r3, [r1, #4]
 8004378:	4638      	mov	r0, r7
 800437a:	f104 060b 	add.w	r6, r4, #11
 800437e:	f000 f8cf 	bl	8004520 <__malloc_unlock>
 8004382:	f026 0607 	bic.w	r6, r6, #7
 8004386:	1d23      	adds	r3, r4, #4
 8004388:	1af2      	subs	r2, r6, r3
 800438a:	d0b6      	beq.n	80042fa <_malloc_r+0x22>
 800438c:	1b9b      	subs	r3, r3, r6
 800438e:	50a3      	str	r3, [r4, r2]
 8004390:	e7b3      	b.n	80042fa <_malloc_r+0x22>
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	42a3      	cmp	r3, r4
 8004396:	bf0c      	ite	eq
 8004398:	6032      	streq	r2, [r6, #0]
 800439a:	605a      	strne	r2, [r3, #4]
 800439c:	e7ec      	b.n	8004378 <_malloc_r+0xa0>
 800439e:	4623      	mov	r3, r4
 80043a0:	6864      	ldr	r4, [r4, #4]
 80043a2:	e7b2      	b.n	800430a <_malloc_r+0x32>
 80043a4:	4634      	mov	r4, r6
 80043a6:	6876      	ldr	r6, [r6, #4]
 80043a8:	e7b9      	b.n	800431e <_malloc_r+0x46>
 80043aa:	230c      	movs	r3, #12
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	4638      	mov	r0, r7
 80043b0:	f000 f8b6 	bl	8004520 <__malloc_unlock>
 80043b4:	e7a1      	b.n	80042fa <_malloc_r+0x22>
 80043b6:	6025      	str	r5, [r4, #0]
 80043b8:	e7de      	b.n	8004378 <_malloc_r+0xa0>
 80043ba:	bf00      	nop
 80043bc:	20000248 	.word	0x20000248

080043c0 <_sbrk_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4d06      	ldr	r5, [pc, #24]	; (80043dc <_sbrk_r+0x1c>)
 80043c4:	2300      	movs	r3, #0
 80043c6:	4604      	mov	r4, r0
 80043c8:	4608      	mov	r0, r1
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	f7fc fb48 	bl	8000a60 <_sbrk>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d102      	bne.n	80043da <_sbrk_r+0x1a>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	b103      	cbz	r3, 80043da <_sbrk_r+0x1a>
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	bd38      	pop	{r3, r4, r5, pc}
 80043dc:	20000250 	.word	0x20000250

080043e0 <__sread>:
 80043e0:	b510      	push	{r4, lr}
 80043e2:	460c      	mov	r4, r1
 80043e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e8:	f000 f8a0 	bl	800452c <_read_r>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	bfab      	itete	ge
 80043f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043f2:	89a3      	ldrhlt	r3, [r4, #12]
 80043f4:	181b      	addge	r3, r3, r0
 80043f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043fa:	bfac      	ite	ge
 80043fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80043fe:	81a3      	strhlt	r3, [r4, #12]
 8004400:	bd10      	pop	{r4, pc}

08004402 <__swrite>:
 8004402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004406:	461f      	mov	r7, r3
 8004408:	898b      	ldrh	r3, [r1, #12]
 800440a:	05db      	lsls	r3, r3, #23
 800440c:	4605      	mov	r5, r0
 800440e:	460c      	mov	r4, r1
 8004410:	4616      	mov	r6, r2
 8004412:	d505      	bpl.n	8004420 <__swrite+0x1e>
 8004414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004418:	2302      	movs	r3, #2
 800441a:	2200      	movs	r2, #0
 800441c:	f000 f868 	bl	80044f0 <_lseek_r>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	4632      	mov	r2, r6
 800442e:	463b      	mov	r3, r7
 8004430:	4628      	mov	r0, r5
 8004432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004436:	f000 b817 	b.w	8004468 <_write_r>

0800443a <__sseek>:
 800443a:	b510      	push	{r4, lr}
 800443c:	460c      	mov	r4, r1
 800443e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004442:	f000 f855 	bl	80044f0 <_lseek_r>
 8004446:	1c43      	adds	r3, r0, #1
 8004448:	89a3      	ldrh	r3, [r4, #12]
 800444a:	bf15      	itete	ne
 800444c:	6560      	strne	r0, [r4, #84]	; 0x54
 800444e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004456:	81a3      	strheq	r3, [r4, #12]
 8004458:	bf18      	it	ne
 800445a:	81a3      	strhne	r3, [r4, #12]
 800445c:	bd10      	pop	{r4, pc}

0800445e <__sclose>:
 800445e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004462:	f000 b813 	b.w	800448c <_close_r>
	...

08004468 <_write_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4d07      	ldr	r5, [pc, #28]	; (8004488 <_write_r+0x20>)
 800446c:	4604      	mov	r4, r0
 800446e:	4608      	mov	r0, r1
 8004470:	4611      	mov	r1, r2
 8004472:	2200      	movs	r2, #0
 8004474:	602a      	str	r2, [r5, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	f7fc fad9 	bl	8000a2e <_write>
 800447c:	1c43      	adds	r3, r0, #1
 800447e:	d102      	bne.n	8004486 <_write_r+0x1e>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	b103      	cbz	r3, 8004486 <_write_r+0x1e>
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	20000250 	.word	0x20000250

0800448c <_close_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d06      	ldr	r5, [pc, #24]	; (80044a8 <_close_r+0x1c>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f7fc fad6 	bl	8000a48 <_close>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_close_r+0x1a>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_close_r+0x1a>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	20000250 	.word	0x20000250

080044ac <_fstat_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d07      	ldr	r5, [pc, #28]	; (80044cc <_fstat_r+0x20>)
 80044b0:	2300      	movs	r3, #0
 80044b2:	4604      	mov	r4, r0
 80044b4:	4608      	mov	r0, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	602b      	str	r3, [r5, #0]
 80044ba:	f7fc fac8 	bl	8000a4e <_fstat>
 80044be:	1c43      	adds	r3, r0, #1
 80044c0:	d102      	bne.n	80044c8 <_fstat_r+0x1c>
 80044c2:	682b      	ldr	r3, [r5, #0]
 80044c4:	b103      	cbz	r3, 80044c8 <_fstat_r+0x1c>
 80044c6:	6023      	str	r3, [r4, #0]
 80044c8:	bd38      	pop	{r3, r4, r5, pc}
 80044ca:	bf00      	nop
 80044cc:	20000250 	.word	0x20000250

080044d0 <_isatty_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4d06      	ldr	r5, [pc, #24]	; (80044ec <_isatty_r+0x1c>)
 80044d4:	2300      	movs	r3, #0
 80044d6:	4604      	mov	r4, r0
 80044d8:	4608      	mov	r0, r1
 80044da:	602b      	str	r3, [r5, #0]
 80044dc:	f7fc fabc 	bl	8000a58 <_isatty>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d102      	bne.n	80044ea <_isatty_r+0x1a>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b103      	cbz	r3, 80044ea <_isatty_r+0x1a>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	20000250 	.word	0x20000250

080044f0 <_lseek_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4d07      	ldr	r5, [pc, #28]	; (8004510 <_lseek_r+0x20>)
 80044f4:	4604      	mov	r4, r0
 80044f6:	4608      	mov	r0, r1
 80044f8:	4611      	mov	r1, r2
 80044fa:	2200      	movs	r2, #0
 80044fc:	602a      	str	r2, [r5, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	f7fc faac 	bl	8000a5c <_lseek>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_lseek_r+0x1e>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b103      	cbz	r3, 800450e <_lseek_r+0x1e>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	20000250 	.word	0x20000250

08004514 <__malloc_lock>:
 8004514:	4801      	ldr	r0, [pc, #4]	; (800451c <__malloc_lock+0x8>)
 8004516:	f7ff bb92 	b.w	8003c3e <__retarget_lock_acquire_recursive>
 800451a:	bf00      	nop
 800451c:	20000244 	.word	0x20000244

08004520 <__malloc_unlock>:
 8004520:	4801      	ldr	r0, [pc, #4]	; (8004528 <__malloc_unlock+0x8>)
 8004522:	f7ff bb8d 	b.w	8003c40 <__retarget_lock_release_recursive>
 8004526:	bf00      	nop
 8004528:	20000244 	.word	0x20000244

0800452c <_read_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4d07      	ldr	r5, [pc, #28]	; (800454c <_read_r+0x20>)
 8004530:	4604      	mov	r4, r0
 8004532:	4608      	mov	r0, r1
 8004534:	4611      	mov	r1, r2
 8004536:	2200      	movs	r2, #0
 8004538:	602a      	str	r2, [r5, #0]
 800453a:	461a      	mov	r2, r3
 800453c:	f7fc fa6a 	bl	8000a14 <_read>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_read_r+0x1e>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_read_r+0x1e>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	20000250 	.word	0x20000250

08004550 <_init>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr

0800455c <_fini>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	bf00      	nop
 8004560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004562:	bc08      	pop	{r3}
 8004564:	469e      	mov	lr, r3
 8004566:	4770      	bx	lr

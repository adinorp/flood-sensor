
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08008400  08008400  00008400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001286c  08008540  08008540  00008540  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  0801adb0  0801adb0  0001adb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba30  0801ba30  00020758  2**0
                  CONTENTS
  4 .ARM          00000008  0801ba30  0801ba30  0001ba30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba38  0801ba38  00020758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ba38  0801ba38  0001ba38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ba40  0801ba40  0001ba40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000080  0801ba44  00020080  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043ec  20000758  0801c11c  00020758  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004b44  0801c11c  00024b44  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020758  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020782  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d29b  00000000  00000000  000207c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061a6  00000000  00000000  0004da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002878  00000000  00000000  00053c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f3b  00000000  00000000  00056480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021553  00000000  00000000  000583bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000342b1  00000000  00000000  0007990e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d49cc  00000000  00000000  000adbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c418  00000000  00000000  0018258c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c5  00000000  00000000  0018e9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008540 <__do_global_dtors_aux>:
 8008540:	b510      	push	{r4, lr}
 8008542:	4c05      	ldr	r4, [pc, #20]	; (8008558 <__do_global_dtors_aux+0x18>)
 8008544:	7823      	ldrb	r3, [r4, #0]
 8008546:	b933      	cbnz	r3, 8008556 <__do_global_dtors_aux+0x16>
 8008548:	4b04      	ldr	r3, [pc, #16]	; (800855c <__do_global_dtors_aux+0x1c>)
 800854a:	b113      	cbz	r3, 8008552 <__do_global_dtors_aux+0x12>
 800854c:	4804      	ldr	r0, [pc, #16]	; (8008560 <__do_global_dtors_aux+0x20>)
 800854e:	f3af 8000 	nop.w
 8008552:	2301      	movs	r3, #1
 8008554:	7023      	strb	r3, [r4, #0]
 8008556:	bd10      	pop	{r4, pc}
 8008558:	20000758 	.word	0x20000758
 800855c:	00000000 	.word	0x00000000
 8008560:	0801ad94 	.word	0x0801ad94

08008564 <frame_dummy>:
 8008564:	b508      	push	{r3, lr}
 8008566:	4b03      	ldr	r3, [pc, #12]	; (8008574 <frame_dummy+0x10>)
 8008568:	b11b      	cbz	r3, 8008572 <frame_dummy+0xe>
 800856a:	4903      	ldr	r1, [pc, #12]	; (8008578 <frame_dummy+0x14>)
 800856c:	4803      	ldr	r0, [pc, #12]	; (800857c <frame_dummy+0x18>)
 800856e:	f3af 8000 	nop.w
 8008572:	bd08      	pop	{r3, pc}
 8008574:	00000000 	.word	0x00000000
 8008578:	2000075c 	.word	0x2000075c
 800857c:	0801ad94 	.word	0x0801ad94

08008580 <memchr>:
 8008580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008584:	2a10      	cmp	r2, #16
 8008586:	db2b      	blt.n	80085e0 <memchr+0x60>
 8008588:	f010 0f07 	tst.w	r0, #7
 800858c:	d008      	beq.n	80085a0 <memchr+0x20>
 800858e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008592:	3a01      	subs	r2, #1
 8008594:	428b      	cmp	r3, r1
 8008596:	d02d      	beq.n	80085f4 <memchr+0x74>
 8008598:	f010 0f07 	tst.w	r0, #7
 800859c:	b342      	cbz	r2, 80085f0 <memchr+0x70>
 800859e:	d1f6      	bne.n	800858e <memchr+0xe>
 80085a0:	b4f0      	push	{r4, r5, r6, r7}
 80085a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80085a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80085aa:	f022 0407 	bic.w	r4, r2, #7
 80085ae:	f07f 0700 	mvns.w	r7, #0
 80085b2:	2300      	movs	r3, #0
 80085b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80085b8:	3c08      	subs	r4, #8
 80085ba:	ea85 0501 	eor.w	r5, r5, r1
 80085be:	ea86 0601 	eor.w	r6, r6, r1
 80085c2:	fa85 f547 	uadd8	r5, r5, r7
 80085c6:	faa3 f587 	sel	r5, r3, r7
 80085ca:	fa86 f647 	uadd8	r6, r6, r7
 80085ce:	faa5 f687 	sel	r6, r5, r7
 80085d2:	b98e      	cbnz	r6, 80085f8 <memchr+0x78>
 80085d4:	d1ee      	bne.n	80085b4 <memchr+0x34>
 80085d6:	bcf0      	pop	{r4, r5, r6, r7}
 80085d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80085dc:	f002 0207 	and.w	r2, r2, #7
 80085e0:	b132      	cbz	r2, 80085f0 <memchr+0x70>
 80085e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80085e6:	3a01      	subs	r2, #1
 80085e8:	ea83 0301 	eor.w	r3, r3, r1
 80085ec:	b113      	cbz	r3, 80085f4 <memchr+0x74>
 80085ee:	d1f8      	bne.n	80085e2 <memchr+0x62>
 80085f0:	2000      	movs	r0, #0
 80085f2:	4770      	bx	lr
 80085f4:	3801      	subs	r0, #1
 80085f6:	4770      	bx	lr
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	bf06      	itte	eq
 80085fc:	4635      	moveq	r5, r6
 80085fe:	3803      	subeq	r0, #3
 8008600:	3807      	subne	r0, #7
 8008602:	f015 0f01 	tst.w	r5, #1
 8008606:	d107      	bne.n	8008618 <memchr+0x98>
 8008608:	3001      	adds	r0, #1
 800860a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800860e:	bf02      	ittt	eq
 8008610:	3001      	addeq	r0, #1
 8008612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008616:	3001      	addeq	r0, #1
 8008618:	bcf0      	pop	{r4, r5, r6, r7}
 800861a:	3801      	subs	r0, #1
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop

08008620 <strlen>:
 8008620:	4603      	mov	r3, r0
 8008622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008626:	2a00      	cmp	r2, #0
 8008628:	d1fb      	bne.n	8008622 <strlen+0x2>
 800862a:	1a18      	subs	r0, r3, r0
 800862c:	3801      	subs	r0, #1
 800862e:	4770      	bx	lr

08008630 <__aeabi_drsub>:
 8008630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008634:	e002      	b.n	800863c <__adddf3>
 8008636:	bf00      	nop

08008638 <__aeabi_dsub>:
 8008638:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800863c <__adddf3>:
 800863c:	b530      	push	{r4, r5, lr}
 800863e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008642:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008646:	ea94 0f05 	teq	r4, r5
 800864a:	bf08      	it	eq
 800864c:	ea90 0f02 	teqeq	r0, r2
 8008650:	bf1f      	itttt	ne
 8008652:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008656:	ea55 0c02 	orrsne.w	ip, r5, r2
 800865a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800865e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008662:	f000 80e2 	beq.w	800882a <__adddf3+0x1ee>
 8008666:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800866a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800866e:	bfb8      	it	lt
 8008670:	426d      	neglt	r5, r5
 8008672:	dd0c      	ble.n	800868e <__adddf3+0x52>
 8008674:	442c      	add	r4, r5
 8008676:	ea80 0202 	eor.w	r2, r0, r2
 800867a:	ea81 0303 	eor.w	r3, r1, r3
 800867e:	ea82 0000 	eor.w	r0, r2, r0
 8008682:	ea83 0101 	eor.w	r1, r3, r1
 8008686:	ea80 0202 	eor.w	r2, r0, r2
 800868a:	ea81 0303 	eor.w	r3, r1, r3
 800868e:	2d36      	cmp	r5, #54	; 0x36
 8008690:	bf88      	it	hi
 8008692:	bd30      	pophi	{r4, r5, pc}
 8008694:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008698:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800869c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80086a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80086a4:	d002      	beq.n	80086ac <__adddf3+0x70>
 80086a6:	4240      	negs	r0, r0
 80086a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80086ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80086b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80086b8:	d002      	beq.n	80086c0 <__adddf3+0x84>
 80086ba:	4252      	negs	r2, r2
 80086bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80086c0:	ea94 0f05 	teq	r4, r5
 80086c4:	f000 80a7 	beq.w	8008816 <__adddf3+0x1da>
 80086c8:	f1a4 0401 	sub.w	r4, r4, #1
 80086cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80086d0:	db0d      	blt.n	80086ee <__adddf3+0xb2>
 80086d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80086d6:	fa22 f205 	lsr.w	r2, r2, r5
 80086da:	1880      	adds	r0, r0, r2
 80086dc:	f141 0100 	adc.w	r1, r1, #0
 80086e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80086e4:	1880      	adds	r0, r0, r2
 80086e6:	fa43 f305 	asr.w	r3, r3, r5
 80086ea:	4159      	adcs	r1, r3
 80086ec:	e00e      	b.n	800870c <__adddf3+0xd0>
 80086ee:	f1a5 0520 	sub.w	r5, r5, #32
 80086f2:	f10e 0e20 	add.w	lr, lr, #32
 80086f6:	2a01      	cmp	r2, #1
 80086f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80086fc:	bf28      	it	cs
 80086fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008702:	fa43 f305 	asr.w	r3, r3, r5
 8008706:	18c0      	adds	r0, r0, r3
 8008708:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800870c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008710:	d507      	bpl.n	8008722 <__adddf3+0xe6>
 8008712:	f04f 0e00 	mov.w	lr, #0
 8008716:	f1dc 0c00 	rsbs	ip, ip, #0
 800871a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800871e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008722:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008726:	d31b      	bcc.n	8008760 <__adddf3+0x124>
 8008728:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800872c:	d30c      	bcc.n	8008748 <__adddf3+0x10c>
 800872e:	0849      	lsrs	r1, r1, #1
 8008730:	ea5f 0030 	movs.w	r0, r0, rrx
 8008734:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008738:	f104 0401 	add.w	r4, r4, #1
 800873c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008740:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008744:	f080 809a 	bcs.w	800887c <__adddf3+0x240>
 8008748:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800874c:	bf08      	it	eq
 800874e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008752:	f150 0000 	adcs.w	r0, r0, #0
 8008756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800875a:	ea41 0105 	orr.w	r1, r1, r5
 800875e:	bd30      	pop	{r4, r5, pc}
 8008760:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008764:	4140      	adcs	r0, r0
 8008766:	eb41 0101 	adc.w	r1, r1, r1
 800876a:	3c01      	subs	r4, #1
 800876c:	bf28      	it	cs
 800876e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008772:	d2e9      	bcs.n	8008748 <__adddf3+0x10c>
 8008774:	f091 0f00 	teq	r1, #0
 8008778:	bf04      	itt	eq
 800877a:	4601      	moveq	r1, r0
 800877c:	2000      	moveq	r0, #0
 800877e:	fab1 f381 	clz	r3, r1
 8008782:	bf08      	it	eq
 8008784:	3320      	addeq	r3, #32
 8008786:	f1a3 030b 	sub.w	r3, r3, #11
 800878a:	f1b3 0220 	subs.w	r2, r3, #32
 800878e:	da0c      	bge.n	80087aa <__adddf3+0x16e>
 8008790:	320c      	adds	r2, #12
 8008792:	dd08      	ble.n	80087a6 <__adddf3+0x16a>
 8008794:	f102 0c14 	add.w	ip, r2, #20
 8008798:	f1c2 020c 	rsb	r2, r2, #12
 800879c:	fa01 f00c 	lsl.w	r0, r1, ip
 80087a0:	fa21 f102 	lsr.w	r1, r1, r2
 80087a4:	e00c      	b.n	80087c0 <__adddf3+0x184>
 80087a6:	f102 0214 	add.w	r2, r2, #20
 80087aa:	bfd8      	it	le
 80087ac:	f1c2 0c20 	rsble	ip, r2, #32
 80087b0:	fa01 f102 	lsl.w	r1, r1, r2
 80087b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80087b8:	bfdc      	itt	le
 80087ba:	ea41 010c 	orrle.w	r1, r1, ip
 80087be:	4090      	lslle	r0, r2
 80087c0:	1ae4      	subs	r4, r4, r3
 80087c2:	bfa2      	ittt	ge
 80087c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80087c8:	4329      	orrge	r1, r5
 80087ca:	bd30      	popge	{r4, r5, pc}
 80087cc:	ea6f 0404 	mvn.w	r4, r4
 80087d0:	3c1f      	subs	r4, #31
 80087d2:	da1c      	bge.n	800880e <__adddf3+0x1d2>
 80087d4:	340c      	adds	r4, #12
 80087d6:	dc0e      	bgt.n	80087f6 <__adddf3+0x1ba>
 80087d8:	f104 0414 	add.w	r4, r4, #20
 80087dc:	f1c4 0220 	rsb	r2, r4, #32
 80087e0:	fa20 f004 	lsr.w	r0, r0, r4
 80087e4:	fa01 f302 	lsl.w	r3, r1, r2
 80087e8:	ea40 0003 	orr.w	r0, r0, r3
 80087ec:	fa21 f304 	lsr.w	r3, r1, r4
 80087f0:	ea45 0103 	orr.w	r1, r5, r3
 80087f4:	bd30      	pop	{r4, r5, pc}
 80087f6:	f1c4 040c 	rsb	r4, r4, #12
 80087fa:	f1c4 0220 	rsb	r2, r4, #32
 80087fe:	fa20 f002 	lsr.w	r0, r0, r2
 8008802:	fa01 f304 	lsl.w	r3, r1, r4
 8008806:	ea40 0003 	orr.w	r0, r0, r3
 800880a:	4629      	mov	r1, r5
 800880c:	bd30      	pop	{r4, r5, pc}
 800880e:	fa21 f004 	lsr.w	r0, r1, r4
 8008812:	4629      	mov	r1, r5
 8008814:	bd30      	pop	{r4, r5, pc}
 8008816:	f094 0f00 	teq	r4, #0
 800881a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800881e:	bf06      	itte	eq
 8008820:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008824:	3401      	addeq	r4, #1
 8008826:	3d01      	subne	r5, #1
 8008828:	e74e      	b.n	80086c8 <__adddf3+0x8c>
 800882a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800882e:	bf18      	it	ne
 8008830:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008834:	d029      	beq.n	800888a <__adddf3+0x24e>
 8008836:	ea94 0f05 	teq	r4, r5
 800883a:	bf08      	it	eq
 800883c:	ea90 0f02 	teqeq	r0, r2
 8008840:	d005      	beq.n	800884e <__adddf3+0x212>
 8008842:	ea54 0c00 	orrs.w	ip, r4, r0
 8008846:	bf04      	itt	eq
 8008848:	4619      	moveq	r1, r3
 800884a:	4610      	moveq	r0, r2
 800884c:	bd30      	pop	{r4, r5, pc}
 800884e:	ea91 0f03 	teq	r1, r3
 8008852:	bf1e      	ittt	ne
 8008854:	2100      	movne	r1, #0
 8008856:	2000      	movne	r0, #0
 8008858:	bd30      	popne	{r4, r5, pc}
 800885a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800885e:	d105      	bne.n	800886c <__adddf3+0x230>
 8008860:	0040      	lsls	r0, r0, #1
 8008862:	4149      	adcs	r1, r1
 8008864:	bf28      	it	cs
 8008866:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800886a:	bd30      	pop	{r4, r5, pc}
 800886c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008870:	bf3c      	itt	cc
 8008872:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008876:	bd30      	popcc	{r4, r5, pc}
 8008878:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800887c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008884:	f04f 0000 	mov.w	r0, #0
 8008888:	bd30      	pop	{r4, r5, pc}
 800888a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800888e:	bf1a      	itte	ne
 8008890:	4619      	movne	r1, r3
 8008892:	4610      	movne	r0, r2
 8008894:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008898:	bf1c      	itt	ne
 800889a:	460b      	movne	r3, r1
 800889c:	4602      	movne	r2, r0
 800889e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80088a2:	bf06      	itte	eq
 80088a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80088a8:	ea91 0f03 	teqeq	r1, r3
 80088ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80088b0:	bd30      	pop	{r4, r5, pc}
 80088b2:	bf00      	nop

080088b4 <__aeabi_ui2d>:
 80088b4:	f090 0f00 	teq	r0, #0
 80088b8:	bf04      	itt	eq
 80088ba:	2100      	moveq	r1, #0
 80088bc:	4770      	bxeq	lr
 80088be:	b530      	push	{r4, r5, lr}
 80088c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80088c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80088c8:	f04f 0500 	mov.w	r5, #0
 80088cc:	f04f 0100 	mov.w	r1, #0
 80088d0:	e750      	b.n	8008774 <__adddf3+0x138>
 80088d2:	bf00      	nop

080088d4 <__aeabi_i2d>:
 80088d4:	f090 0f00 	teq	r0, #0
 80088d8:	bf04      	itt	eq
 80088da:	2100      	moveq	r1, #0
 80088dc:	4770      	bxeq	lr
 80088de:	b530      	push	{r4, r5, lr}
 80088e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80088e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80088e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80088ec:	bf48      	it	mi
 80088ee:	4240      	negmi	r0, r0
 80088f0:	f04f 0100 	mov.w	r1, #0
 80088f4:	e73e      	b.n	8008774 <__adddf3+0x138>
 80088f6:	bf00      	nop

080088f8 <__aeabi_f2d>:
 80088f8:	0042      	lsls	r2, r0, #1
 80088fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80088fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8008902:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008906:	bf1f      	itttt	ne
 8008908:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800890c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008910:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008914:	4770      	bxne	lr
 8008916:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800891a:	bf08      	it	eq
 800891c:	4770      	bxeq	lr
 800891e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008922:	bf04      	itt	eq
 8008924:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008928:	4770      	bxeq	lr
 800892a:	b530      	push	{r4, r5, lr}
 800892c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008930:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008934:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008938:	e71c      	b.n	8008774 <__adddf3+0x138>
 800893a:	bf00      	nop

0800893c <__aeabi_ul2d>:
 800893c:	ea50 0201 	orrs.w	r2, r0, r1
 8008940:	bf08      	it	eq
 8008942:	4770      	bxeq	lr
 8008944:	b530      	push	{r4, r5, lr}
 8008946:	f04f 0500 	mov.w	r5, #0
 800894a:	e00a      	b.n	8008962 <__aeabi_l2d+0x16>

0800894c <__aeabi_l2d>:
 800894c:	ea50 0201 	orrs.w	r2, r0, r1
 8008950:	bf08      	it	eq
 8008952:	4770      	bxeq	lr
 8008954:	b530      	push	{r4, r5, lr}
 8008956:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800895a:	d502      	bpl.n	8008962 <__aeabi_l2d+0x16>
 800895c:	4240      	negs	r0, r0
 800895e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008962:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008966:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800896a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800896e:	f43f aed8 	beq.w	8008722 <__adddf3+0xe6>
 8008972:	f04f 0203 	mov.w	r2, #3
 8008976:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800897a:	bf18      	it	ne
 800897c:	3203      	addne	r2, #3
 800897e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008982:	bf18      	it	ne
 8008984:	3203      	addne	r2, #3
 8008986:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800898a:	f1c2 0320 	rsb	r3, r2, #32
 800898e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008992:	fa20 f002 	lsr.w	r0, r0, r2
 8008996:	fa01 fe03 	lsl.w	lr, r1, r3
 800899a:	ea40 000e 	orr.w	r0, r0, lr
 800899e:	fa21 f102 	lsr.w	r1, r1, r2
 80089a2:	4414      	add	r4, r2
 80089a4:	e6bd      	b.n	8008722 <__adddf3+0xe6>
 80089a6:	bf00      	nop

080089a8 <__aeabi_dmul>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80089ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80089b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80089b6:	bf1d      	ittte	ne
 80089b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80089bc:	ea94 0f0c 	teqne	r4, ip
 80089c0:	ea95 0f0c 	teqne	r5, ip
 80089c4:	f000 f8de 	bleq	8008b84 <__aeabi_dmul+0x1dc>
 80089c8:	442c      	add	r4, r5
 80089ca:	ea81 0603 	eor.w	r6, r1, r3
 80089ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80089d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80089d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80089da:	bf18      	it	ne
 80089dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80089e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089e8:	d038      	beq.n	8008a5c <__aeabi_dmul+0xb4>
 80089ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80089ee:	f04f 0500 	mov.w	r5, #0
 80089f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80089f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80089fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80089fe:	f04f 0600 	mov.w	r6, #0
 8008a02:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008a06:	f09c 0f00 	teq	ip, #0
 8008a0a:	bf18      	it	ne
 8008a0c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008a10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008a14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008a18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008a1c:	d204      	bcs.n	8008a28 <__aeabi_dmul+0x80>
 8008a1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008a22:	416d      	adcs	r5, r5
 8008a24:	eb46 0606 	adc.w	r6, r6, r6
 8008a28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008a2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008a30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008a34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008a38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008a3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008a40:	bf88      	it	hi
 8008a42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008a46:	d81e      	bhi.n	8008a86 <__aeabi_dmul+0xde>
 8008a48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008a4c:	bf08      	it	eq
 8008a4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008a52:	f150 0000 	adcs.w	r0, r0, #0
 8008a56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008a60:	ea46 0101 	orr.w	r1, r6, r1
 8008a64:	ea40 0002 	orr.w	r0, r0, r2
 8008a68:	ea81 0103 	eor.w	r1, r1, r3
 8008a6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008a70:	bfc2      	ittt	gt
 8008a72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a7a:	bd70      	popgt	{r4, r5, r6, pc}
 8008a7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a80:	f04f 0e00 	mov.w	lr, #0
 8008a84:	3c01      	subs	r4, #1
 8008a86:	f300 80ab 	bgt.w	8008be0 <__aeabi_dmul+0x238>
 8008a8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008a8e:	bfde      	ittt	le
 8008a90:	2000      	movle	r0, #0
 8008a92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008a96:	bd70      	pople	{r4, r5, r6, pc}
 8008a98:	f1c4 0400 	rsb	r4, r4, #0
 8008a9c:	3c20      	subs	r4, #32
 8008a9e:	da35      	bge.n	8008b0c <__aeabi_dmul+0x164>
 8008aa0:	340c      	adds	r4, #12
 8008aa2:	dc1b      	bgt.n	8008adc <__aeabi_dmul+0x134>
 8008aa4:	f104 0414 	add.w	r4, r4, #20
 8008aa8:	f1c4 0520 	rsb	r5, r4, #32
 8008aac:	fa00 f305 	lsl.w	r3, r0, r5
 8008ab0:	fa20 f004 	lsr.w	r0, r0, r4
 8008ab4:	fa01 f205 	lsl.w	r2, r1, r5
 8008ab8:	ea40 0002 	orr.w	r0, r0, r2
 8008abc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008ac0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ac4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008ac8:	fa21 f604 	lsr.w	r6, r1, r4
 8008acc:	eb42 0106 	adc.w	r1, r2, r6
 8008ad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008ad4:	bf08      	it	eq
 8008ad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	f1c4 040c 	rsb	r4, r4, #12
 8008ae0:	f1c4 0520 	rsb	r5, r4, #32
 8008ae4:	fa00 f304 	lsl.w	r3, r0, r4
 8008ae8:	fa20 f005 	lsr.w	r0, r0, r5
 8008aec:	fa01 f204 	lsl.w	r2, r1, r4
 8008af0:	ea40 0002 	orr.w	r0, r0, r2
 8008af4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008af8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008afc:	f141 0100 	adc.w	r1, r1, #0
 8008b00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008b04:	bf08      	it	eq
 8008b06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	f1c4 0520 	rsb	r5, r4, #32
 8008b10:	fa00 f205 	lsl.w	r2, r0, r5
 8008b14:	ea4e 0e02 	orr.w	lr, lr, r2
 8008b18:	fa20 f304 	lsr.w	r3, r0, r4
 8008b1c:	fa01 f205 	lsl.w	r2, r1, r5
 8008b20:	ea43 0302 	orr.w	r3, r3, r2
 8008b24:	fa21 f004 	lsr.w	r0, r1, r4
 8008b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008b2c:	fa21 f204 	lsr.w	r2, r1, r4
 8008b30:	ea20 0002 	bic.w	r0, r0, r2
 8008b34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008b3c:	bf08      	it	eq
 8008b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	f094 0f00 	teq	r4, #0
 8008b48:	d10f      	bne.n	8008b6a <__aeabi_dmul+0x1c2>
 8008b4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008b4e:	0040      	lsls	r0, r0, #1
 8008b50:	eb41 0101 	adc.w	r1, r1, r1
 8008b54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008b58:	bf08      	it	eq
 8008b5a:	3c01      	subeq	r4, #1
 8008b5c:	d0f7      	beq.n	8008b4e <__aeabi_dmul+0x1a6>
 8008b5e:	ea41 0106 	orr.w	r1, r1, r6
 8008b62:	f095 0f00 	teq	r5, #0
 8008b66:	bf18      	it	ne
 8008b68:	4770      	bxne	lr
 8008b6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008b6e:	0052      	lsls	r2, r2, #1
 8008b70:	eb43 0303 	adc.w	r3, r3, r3
 8008b74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008b78:	bf08      	it	eq
 8008b7a:	3d01      	subeq	r5, #1
 8008b7c:	d0f7      	beq.n	8008b6e <__aeabi_dmul+0x1c6>
 8008b7e:	ea43 0306 	orr.w	r3, r3, r6
 8008b82:	4770      	bx	lr
 8008b84:	ea94 0f0c 	teq	r4, ip
 8008b88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008b8c:	bf18      	it	ne
 8008b8e:	ea95 0f0c 	teqne	r5, ip
 8008b92:	d00c      	beq.n	8008bae <__aeabi_dmul+0x206>
 8008b94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008b98:	bf18      	it	ne
 8008b9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008b9e:	d1d1      	bne.n	8008b44 <__aeabi_dmul+0x19c>
 8008ba0:	ea81 0103 	eor.w	r1, r1, r3
 8008ba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008ba8:	f04f 0000 	mov.w	r0, #0
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008bb2:	bf06      	itte	eq
 8008bb4:	4610      	moveq	r0, r2
 8008bb6:	4619      	moveq	r1, r3
 8008bb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008bbc:	d019      	beq.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bbe:	ea94 0f0c 	teq	r4, ip
 8008bc2:	d102      	bne.n	8008bca <__aeabi_dmul+0x222>
 8008bc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008bc8:	d113      	bne.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bca:	ea95 0f0c 	teq	r5, ip
 8008bce:	d105      	bne.n	8008bdc <__aeabi_dmul+0x234>
 8008bd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008bd4:	bf1c      	itt	ne
 8008bd6:	4610      	movne	r0, r2
 8008bd8:	4619      	movne	r1, r3
 8008bda:	d10a      	bne.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bdc:	ea81 0103 	eor.w	r1, r1, r3
 8008be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008be4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008be8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bec:	f04f 0000 	mov.w	r0, #0
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
 8008bf2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008bf6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}

08008bfc <__aeabi_ddiv>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008c02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008c06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008c0a:	bf1d      	ittte	ne
 8008c0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008c10:	ea94 0f0c 	teqne	r4, ip
 8008c14:	ea95 0f0c 	teqne	r5, ip
 8008c18:	f000 f8a7 	bleq	8008d6a <__aeabi_ddiv+0x16e>
 8008c1c:	eba4 0405 	sub.w	r4, r4, r5
 8008c20:	ea81 0e03 	eor.w	lr, r1, r3
 8008c24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008c28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008c2c:	f000 8088 	beq.w	8008d40 <__aeabi_ddiv+0x144>
 8008c30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008c34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008c38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008c3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008c40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008c44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008c48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008c4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008c50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008c54:	429d      	cmp	r5, r3
 8008c56:	bf08      	it	eq
 8008c58:	4296      	cmpeq	r6, r2
 8008c5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008c5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008c62:	d202      	bcs.n	8008c6a <__aeabi_ddiv+0x6e>
 8008c64:	085b      	lsrs	r3, r3, #1
 8008c66:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c6a:	1ab6      	subs	r6, r6, r2
 8008c6c:	eb65 0503 	sbc.w	r5, r5, r3
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008c7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008c7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c86:	bf22      	ittt	cs
 8008c88:	1ab6      	subcs	r6, r6, r2
 8008c8a:	4675      	movcs	r5, lr
 8008c8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c96:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c9e:	bf22      	ittt	cs
 8008ca0:	1ab6      	subcs	r6, r6, r2
 8008ca2:	4675      	movcs	r5, lr
 8008ca4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	ea4f 0232 	mov.w	r2, r2, rrx
 8008cae:	ebb6 0e02 	subs.w	lr, r6, r2
 8008cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008cb6:	bf22      	ittt	cs
 8008cb8:	1ab6      	subcs	r6, r6, r2
 8008cba:	4675      	movcs	r5, lr
 8008cbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8008cc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8008cca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008cce:	bf22      	ittt	cs
 8008cd0:	1ab6      	subcs	r6, r6, r2
 8008cd2:	4675      	movcs	r5, lr
 8008cd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008cd8:	ea55 0e06 	orrs.w	lr, r5, r6
 8008cdc:	d018      	beq.n	8008d10 <__aeabi_ddiv+0x114>
 8008cde:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008ce2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008ce6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008cea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008cee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008cf2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008cf6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008cfa:	d1c0      	bne.n	8008c7e <__aeabi_ddiv+0x82>
 8008cfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d00:	d10b      	bne.n	8008d1a <__aeabi_ddiv+0x11e>
 8008d02:	ea41 0100 	orr.w	r1, r1, r0
 8008d06:	f04f 0000 	mov.w	r0, #0
 8008d0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008d0e:	e7b6      	b.n	8008c7e <__aeabi_ddiv+0x82>
 8008d10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d14:	bf04      	itt	eq
 8008d16:	4301      	orreq	r1, r0
 8008d18:	2000      	moveq	r0, #0
 8008d1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008d1e:	bf88      	it	hi
 8008d20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008d24:	f63f aeaf 	bhi.w	8008a86 <__aeabi_dmul+0xde>
 8008d28:	ebb5 0c03 	subs.w	ip, r5, r3
 8008d2c:	bf04      	itt	eq
 8008d2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008d32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008d36:	f150 0000 	adcs.w	r0, r0, #0
 8008d3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008d44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008d48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008d4c:	bfc2      	ittt	gt
 8008d4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008d52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008d56:	bd70      	popgt	{r4, r5, r6, pc}
 8008d58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008d5c:	f04f 0e00 	mov.w	lr, #0
 8008d60:	3c01      	subs	r4, #1
 8008d62:	e690      	b.n	8008a86 <__aeabi_dmul+0xde>
 8008d64:	ea45 0e06 	orr.w	lr, r5, r6
 8008d68:	e68d      	b.n	8008a86 <__aeabi_dmul+0xde>
 8008d6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008d6e:	ea94 0f0c 	teq	r4, ip
 8008d72:	bf08      	it	eq
 8008d74:	ea95 0f0c 	teqeq	r5, ip
 8008d78:	f43f af3b 	beq.w	8008bf2 <__aeabi_dmul+0x24a>
 8008d7c:	ea94 0f0c 	teq	r4, ip
 8008d80:	d10a      	bne.n	8008d98 <__aeabi_ddiv+0x19c>
 8008d82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008d86:	f47f af34 	bne.w	8008bf2 <__aeabi_dmul+0x24a>
 8008d8a:	ea95 0f0c 	teq	r5, ip
 8008d8e:	f47f af25 	bne.w	8008bdc <__aeabi_dmul+0x234>
 8008d92:	4610      	mov	r0, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	e72c      	b.n	8008bf2 <__aeabi_dmul+0x24a>
 8008d98:	ea95 0f0c 	teq	r5, ip
 8008d9c:	d106      	bne.n	8008dac <__aeabi_ddiv+0x1b0>
 8008d9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008da2:	f43f aefd 	beq.w	8008ba0 <__aeabi_dmul+0x1f8>
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	e722      	b.n	8008bf2 <__aeabi_dmul+0x24a>
 8008dac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008db0:	bf18      	it	ne
 8008db2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008db6:	f47f aec5 	bne.w	8008b44 <__aeabi_dmul+0x19c>
 8008dba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008dbe:	f47f af0d 	bne.w	8008bdc <__aeabi_dmul+0x234>
 8008dc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008dc6:	f47f aeeb 	bne.w	8008ba0 <__aeabi_dmul+0x1f8>
 8008dca:	e712      	b.n	8008bf2 <__aeabi_dmul+0x24a>

08008dcc <__gedf2>:
 8008dcc:	f04f 3cff 	mov.w	ip, #4294967295
 8008dd0:	e006      	b.n	8008de0 <__cmpdf2+0x4>
 8008dd2:	bf00      	nop

08008dd4 <__ledf2>:
 8008dd4:	f04f 0c01 	mov.w	ip, #1
 8008dd8:	e002      	b.n	8008de0 <__cmpdf2+0x4>
 8008dda:	bf00      	nop

08008ddc <__cmpdf2>:
 8008ddc:	f04f 0c01 	mov.w	ip, #1
 8008de0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008de4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008de8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008dec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008df0:	bf18      	it	ne
 8008df2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008df6:	d01b      	beq.n	8008e30 <__cmpdf2+0x54>
 8008df8:	b001      	add	sp, #4
 8008dfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008dfe:	bf0c      	ite	eq
 8008e00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008e04:	ea91 0f03 	teqne	r1, r3
 8008e08:	bf02      	ittt	eq
 8008e0a:	ea90 0f02 	teqeq	r0, r2
 8008e0e:	2000      	moveq	r0, #0
 8008e10:	4770      	bxeq	lr
 8008e12:	f110 0f00 	cmn.w	r0, #0
 8008e16:	ea91 0f03 	teq	r1, r3
 8008e1a:	bf58      	it	pl
 8008e1c:	4299      	cmppl	r1, r3
 8008e1e:	bf08      	it	eq
 8008e20:	4290      	cmpeq	r0, r2
 8008e22:	bf2c      	ite	cs
 8008e24:	17d8      	asrcs	r0, r3, #31
 8008e26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008e2a:	f040 0001 	orr.w	r0, r0, #1
 8008e2e:	4770      	bx	lr
 8008e30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008e34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008e38:	d102      	bne.n	8008e40 <__cmpdf2+0x64>
 8008e3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008e3e:	d107      	bne.n	8008e50 <__cmpdf2+0x74>
 8008e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008e48:	d1d6      	bne.n	8008df8 <__cmpdf2+0x1c>
 8008e4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008e4e:	d0d3      	beq.n	8008df8 <__cmpdf2+0x1c>
 8008e50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop

08008e58 <__aeabi_cdrcmple>:
 8008e58:	4684      	mov	ip, r0
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4662      	mov	r2, ip
 8008e5e:	468c      	mov	ip, r1
 8008e60:	4619      	mov	r1, r3
 8008e62:	4663      	mov	r3, ip
 8008e64:	e000      	b.n	8008e68 <__aeabi_cdcmpeq>
 8008e66:	bf00      	nop

08008e68 <__aeabi_cdcmpeq>:
 8008e68:	b501      	push	{r0, lr}
 8008e6a:	f7ff ffb7 	bl	8008ddc <__cmpdf2>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	bf48      	it	mi
 8008e72:	f110 0f00 	cmnmi.w	r0, #0
 8008e76:	bd01      	pop	{r0, pc}

08008e78 <__aeabi_dcmpeq>:
 8008e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e7c:	f7ff fff4 	bl	8008e68 <__aeabi_cdcmpeq>
 8008e80:	bf0c      	ite	eq
 8008e82:	2001      	moveq	r0, #1
 8008e84:	2000      	movne	r0, #0
 8008e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e8a:	bf00      	nop

08008e8c <__aeabi_dcmplt>:
 8008e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e90:	f7ff ffea 	bl	8008e68 <__aeabi_cdcmpeq>
 8008e94:	bf34      	ite	cc
 8008e96:	2001      	movcc	r0, #1
 8008e98:	2000      	movcs	r0, #0
 8008e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e9e:	bf00      	nop

08008ea0 <__aeabi_dcmple>:
 8008ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ea4:	f7ff ffe0 	bl	8008e68 <__aeabi_cdcmpeq>
 8008ea8:	bf94      	ite	ls
 8008eaa:	2001      	movls	r0, #1
 8008eac:	2000      	movhi	r0, #0
 8008eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8008eb2:	bf00      	nop

08008eb4 <__aeabi_dcmpge>:
 8008eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008eb8:	f7ff ffce 	bl	8008e58 <__aeabi_cdrcmple>
 8008ebc:	bf94      	ite	ls
 8008ebe:	2001      	movls	r0, #1
 8008ec0:	2000      	movhi	r0, #0
 8008ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008ec6:	bf00      	nop

08008ec8 <__aeabi_dcmpgt>:
 8008ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ecc:	f7ff ffc4 	bl	8008e58 <__aeabi_cdrcmple>
 8008ed0:	bf34      	ite	cc
 8008ed2:	2001      	movcc	r0, #1
 8008ed4:	2000      	movcs	r0, #0
 8008ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008eda:	bf00      	nop

08008edc <__aeabi_dcmpun>:
 8008edc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ee0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ee4:	d102      	bne.n	8008eec <__aeabi_dcmpun+0x10>
 8008ee6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008eea:	d10a      	bne.n	8008f02 <__aeabi_dcmpun+0x26>
 8008eec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ef0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ef4:	d102      	bne.n	8008efc <__aeabi_dcmpun+0x20>
 8008ef6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008efa:	d102      	bne.n	8008f02 <__aeabi_dcmpun+0x26>
 8008efc:	f04f 0000 	mov.w	r0, #0
 8008f00:	4770      	bx	lr
 8008f02:	f04f 0001 	mov.w	r0, #1
 8008f06:	4770      	bx	lr

08008f08 <__aeabi_d2iz>:
 8008f08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008f0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008f10:	d215      	bcs.n	8008f3e <__aeabi_d2iz+0x36>
 8008f12:	d511      	bpl.n	8008f38 <__aeabi_d2iz+0x30>
 8008f14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008f18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008f1c:	d912      	bls.n	8008f44 <__aeabi_d2iz+0x3c>
 8008f1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008f2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008f2e:	fa23 f002 	lsr.w	r0, r3, r2
 8008f32:	bf18      	it	ne
 8008f34:	4240      	negne	r0, r0
 8008f36:	4770      	bx	lr
 8008f38:	f04f 0000 	mov.w	r0, #0
 8008f3c:	4770      	bx	lr
 8008f3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008f42:	d105      	bne.n	8008f50 <__aeabi_d2iz+0x48>
 8008f44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008f48:	bf08      	it	eq
 8008f4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008f4e:	4770      	bx	lr
 8008f50:	f04f 0000 	mov.w	r0, #0
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop

08008f58 <__aeabi_d2uiz>:
 8008f58:	004a      	lsls	r2, r1, #1
 8008f5a:	d211      	bcs.n	8008f80 <__aeabi_d2uiz+0x28>
 8008f5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008f60:	d211      	bcs.n	8008f86 <__aeabi_d2uiz+0x2e>
 8008f62:	d50d      	bpl.n	8008f80 <__aeabi_d2uiz+0x28>
 8008f64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008f68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008f6c:	d40e      	bmi.n	8008f8c <__aeabi_d2uiz+0x34>
 8008f6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008f7a:	fa23 f002 	lsr.w	r0, r3, r2
 8008f7e:	4770      	bx	lr
 8008f80:	f04f 0000 	mov.w	r0, #0
 8008f84:	4770      	bx	lr
 8008f86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008f8a:	d102      	bne.n	8008f92 <__aeabi_d2uiz+0x3a>
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	4770      	bx	lr
 8008f92:	f04f 0000 	mov.w	r0, #0
 8008f96:	4770      	bx	lr

08008f98 <__aeabi_frsub>:
 8008f98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8008f9c:	e002      	b.n	8008fa4 <__addsf3>
 8008f9e:	bf00      	nop

08008fa0 <__aeabi_fsub>:
 8008fa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08008fa4 <__addsf3>:
 8008fa4:	0042      	lsls	r2, r0, #1
 8008fa6:	bf1f      	itttt	ne
 8008fa8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8008fac:	ea92 0f03 	teqne	r2, r3
 8008fb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8008fb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008fb8:	d06a      	beq.n	8009090 <__addsf3+0xec>
 8008fba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008fbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8008fc2:	bfc1      	itttt	gt
 8008fc4:	18d2      	addgt	r2, r2, r3
 8008fc6:	4041      	eorgt	r1, r0
 8008fc8:	4048      	eorgt	r0, r1
 8008fca:	4041      	eorgt	r1, r0
 8008fcc:	bfb8      	it	lt
 8008fce:	425b      	neglt	r3, r3
 8008fd0:	2b19      	cmp	r3, #25
 8008fd2:	bf88      	it	hi
 8008fd4:	4770      	bxhi	lr
 8008fd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8008fda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008fde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008fe2:	bf18      	it	ne
 8008fe4:	4240      	negne	r0, r0
 8008fe6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008fea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008fee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8008ff2:	bf18      	it	ne
 8008ff4:	4249      	negne	r1, r1
 8008ff6:	ea92 0f03 	teq	r2, r3
 8008ffa:	d03f      	beq.n	800907c <__addsf3+0xd8>
 8008ffc:	f1a2 0201 	sub.w	r2, r2, #1
 8009000:	fa41 fc03 	asr.w	ip, r1, r3
 8009004:	eb10 000c 	adds.w	r0, r0, ip
 8009008:	f1c3 0320 	rsb	r3, r3, #32
 800900c:	fa01 f103 	lsl.w	r1, r1, r3
 8009010:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8009014:	d502      	bpl.n	800901c <__addsf3+0x78>
 8009016:	4249      	negs	r1, r1
 8009018:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800901c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8009020:	d313      	bcc.n	800904a <__addsf3+0xa6>
 8009022:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009026:	d306      	bcc.n	8009036 <__addsf3+0x92>
 8009028:	0840      	lsrs	r0, r0, #1
 800902a:	ea4f 0131 	mov.w	r1, r1, rrx
 800902e:	f102 0201 	add.w	r2, r2, #1
 8009032:	2afe      	cmp	r2, #254	; 0xfe
 8009034:	d251      	bcs.n	80090da <__addsf3+0x136>
 8009036:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800903a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800903e:	bf08      	it	eq
 8009040:	f020 0001 	biceq.w	r0, r0, #1
 8009044:	ea40 0003 	orr.w	r0, r0, r3
 8009048:	4770      	bx	lr
 800904a:	0049      	lsls	r1, r1, #1
 800904c:	eb40 0000 	adc.w	r0, r0, r0
 8009050:	3a01      	subs	r2, #1
 8009052:	bf28      	it	cs
 8009054:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8009058:	d2ed      	bcs.n	8009036 <__addsf3+0x92>
 800905a:	fab0 fc80 	clz	ip, r0
 800905e:	f1ac 0c08 	sub.w	ip, ip, #8
 8009062:	ebb2 020c 	subs.w	r2, r2, ip
 8009066:	fa00 f00c 	lsl.w	r0, r0, ip
 800906a:	bfaa      	itet	ge
 800906c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8009070:	4252      	neglt	r2, r2
 8009072:	4318      	orrge	r0, r3
 8009074:	bfbc      	itt	lt
 8009076:	40d0      	lsrlt	r0, r2
 8009078:	4318      	orrlt	r0, r3
 800907a:	4770      	bx	lr
 800907c:	f092 0f00 	teq	r2, #0
 8009080:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8009084:	bf06      	itte	eq
 8009086:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800908a:	3201      	addeq	r2, #1
 800908c:	3b01      	subne	r3, #1
 800908e:	e7b5      	b.n	8008ffc <__addsf3+0x58>
 8009090:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8009094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8009098:	bf18      	it	ne
 800909a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800909e:	d021      	beq.n	80090e4 <__addsf3+0x140>
 80090a0:	ea92 0f03 	teq	r2, r3
 80090a4:	d004      	beq.n	80090b0 <__addsf3+0x10c>
 80090a6:	f092 0f00 	teq	r2, #0
 80090aa:	bf08      	it	eq
 80090ac:	4608      	moveq	r0, r1
 80090ae:	4770      	bx	lr
 80090b0:	ea90 0f01 	teq	r0, r1
 80090b4:	bf1c      	itt	ne
 80090b6:	2000      	movne	r0, #0
 80090b8:	4770      	bxne	lr
 80090ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80090be:	d104      	bne.n	80090ca <__addsf3+0x126>
 80090c0:	0040      	lsls	r0, r0, #1
 80090c2:	bf28      	it	cs
 80090c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80090c8:	4770      	bx	lr
 80090ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80090ce:	bf3c      	itt	cc
 80090d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80090d4:	4770      	bxcc	lr
 80090d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80090da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80090de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80090e2:	4770      	bx	lr
 80090e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80090e8:	bf16      	itet	ne
 80090ea:	4608      	movne	r0, r1
 80090ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80090f0:	4601      	movne	r1, r0
 80090f2:	0242      	lsls	r2, r0, #9
 80090f4:	bf06      	itte	eq
 80090f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80090fa:	ea90 0f01 	teqeq	r0, r1
 80090fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8009102:	4770      	bx	lr

08009104 <__aeabi_ui2f>:
 8009104:	f04f 0300 	mov.w	r3, #0
 8009108:	e004      	b.n	8009114 <__aeabi_i2f+0x8>
 800910a:	bf00      	nop

0800910c <__aeabi_i2f>:
 800910c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8009110:	bf48      	it	mi
 8009112:	4240      	negmi	r0, r0
 8009114:	ea5f 0c00 	movs.w	ip, r0
 8009118:	bf08      	it	eq
 800911a:	4770      	bxeq	lr
 800911c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8009120:	4601      	mov	r1, r0
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	e01c      	b.n	8009162 <__aeabi_l2f+0x2a>

08009128 <__aeabi_ul2f>:
 8009128:	ea50 0201 	orrs.w	r2, r0, r1
 800912c:	bf08      	it	eq
 800912e:	4770      	bxeq	lr
 8009130:	f04f 0300 	mov.w	r3, #0
 8009134:	e00a      	b.n	800914c <__aeabi_l2f+0x14>
 8009136:	bf00      	nop

08009138 <__aeabi_l2f>:
 8009138:	ea50 0201 	orrs.w	r2, r0, r1
 800913c:	bf08      	it	eq
 800913e:	4770      	bxeq	lr
 8009140:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8009144:	d502      	bpl.n	800914c <__aeabi_l2f+0x14>
 8009146:	4240      	negs	r0, r0
 8009148:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800914c:	ea5f 0c01 	movs.w	ip, r1
 8009150:	bf02      	ittt	eq
 8009152:	4684      	moveq	ip, r0
 8009154:	4601      	moveq	r1, r0
 8009156:	2000      	moveq	r0, #0
 8009158:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800915c:	bf08      	it	eq
 800915e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8009162:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009166:	fabc f28c 	clz	r2, ip
 800916a:	3a08      	subs	r2, #8
 800916c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8009170:	db10      	blt.n	8009194 <__aeabi_l2f+0x5c>
 8009172:	fa01 fc02 	lsl.w	ip, r1, r2
 8009176:	4463      	add	r3, ip
 8009178:	fa00 fc02 	lsl.w	ip, r0, r2
 800917c:	f1c2 0220 	rsb	r2, r2, #32
 8009180:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8009184:	fa20 f202 	lsr.w	r2, r0, r2
 8009188:	eb43 0002 	adc.w	r0, r3, r2
 800918c:	bf08      	it	eq
 800918e:	f020 0001 	biceq.w	r0, r0, #1
 8009192:	4770      	bx	lr
 8009194:	f102 0220 	add.w	r2, r2, #32
 8009198:	fa01 fc02 	lsl.w	ip, r1, r2
 800919c:	f1c2 0220 	rsb	r2, r2, #32
 80091a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80091a4:	fa21 f202 	lsr.w	r2, r1, r2
 80091a8:	eb43 0002 	adc.w	r0, r3, r2
 80091ac:	bf08      	it	eq
 80091ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80091b2:	4770      	bx	lr

080091b4 <__aeabi_f2uiz>:
 80091b4:	0042      	lsls	r2, r0, #1
 80091b6:	d20e      	bcs.n	80091d6 <__aeabi_f2uiz+0x22>
 80091b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80091bc:	d30b      	bcc.n	80091d6 <__aeabi_f2uiz+0x22>
 80091be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80091c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80091c6:	d409      	bmi.n	80091dc <__aeabi_f2uiz+0x28>
 80091c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80091cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091d0:	fa23 f002 	lsr.w	r0, r3, r2
 80091d4:	4770      	bx	lr
 80091d6:	f04f 0000 	mov.w	r0, #0
 80091da:	4770      	bx	lr
 80091dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80091e0:	d101      	bne.n	80091e6 <__aeabi_f2uiz+0x32>
 80091e2:	0242      	lsls	r2, r0, #9
 80091e4:	d102      	bne.n	80091ec <__aeabi_f2uiz+0x38>
 80091e6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ea:	4770      	bx	lr
 80091ec:	f04f 0000 	mov.w	r0, #0
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop

080091f4 <__aeabi_uldivmod>:
 80091f4:	b953      	cbnz	r3, 800920c <__aeabi_uldivmod+0x18>
 80091f6:	b94a      	cbnz	r2, 800920c <__aeabi_uldivmod+0x18>
 80091f8:	2900      	cmp	r1, #0
 80091fa:	bf08      	it	eq
 80091fc:	2800      	cmpeq	r0, #0
 80091fe:	bf1c      	itt	ne
 8009200:	f04f 31ff 	movne.w	r1, #4294967295
 8009204:	f04f 30ff 	movne.w	r0, #4294967295
 8009208:	f000 b970 	b.w	80094ec <__aeabi_idiv0>
 800920c:	f1ad 0c08 	sub.w	ip, sp, #8
 8009210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8009214:	f000 f806 	bl	8009224 <__udivmoddi4>
 8009218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800921c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009220:	b004      	add	sp, #16
 8009222:	4770      	bx	lr

08009224 <__udivmoddi4>:
 8009224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009228:	9e08      	ldr	r6, [sp, #32]
 800922a:	460d      	mov	r5, r1
 800922c:	4604      	mov	r4, r0
 800922e:	460f      	mov	r7, r1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d14a      	bne.n	80092ca <__udivmoddi4+0xa6>
 8009234:	428a      	cmp	r2, r1
 8009236:	4694      	mov	ip, r2
 8009238:	d965      	bls.n	8009306 <__udivmoddi4+0xe2>
 800923a:	fab2 f382 	clz	r3, r2
 800923e:	b143      	cbz	r3, 8009252 <__udivmoddi4+0x2e>
 8009240:	fa02 fc03 	lsl.w	ip, r2, r3
 8009244:	f1c3 0220 	rsb	r2, r3, #32
 8009248:	409f      	lsls	r7, r3
 800924a:	fa20 f202 	lsr.w	r2, r0, r2
 800924e:	4317      	orrs	r7, r2
 8009250:	409c      	lsls	r4, r3
 8009252:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8009256:	fa1f f58c 	uxth.w	r5, ip
 800925a:	fbb7 f1fe 	udiv	r1, r7, lr
 800925e:	0c22      	lsrs	r2, r4, #16
 8009260:	fb0e 7711 	mls	r7, lr, r1, r7
 8009264:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8009268:	fb01 f005 	mul.w	r0, r1, r5
 800926c:	4290      	cmp	r0, r2
 800926e:	d90a      	bls.n	8009286 <__udivmoddi4+0x62>
 8009270:	eb1c 0202 	adds.w	r2, ip, r2
 8009274:	f101 37ff 	add.w	r7, r1, #4294967295
 8009278:	f080 811b 	bcs.w	80094b2 <__udivmoddi4+0x28e>
 800927c:	4290      	cmp	r0, r2
 800927e:	f240 8118 	bls.w	80094b2 <__udivmoddi4+0x28e>
 8009282:	3902      	subs	r1, #2
 8009284:	4462      	add	r2, ip
 8009286:	1a12      	subs	r2, r2, r0
 8009288:	b2a4      	uxth	r4, r4
 800928a:	fbb2 f0fe 	udiv	r0, r2, lr
 800928e:	fb0e 2210 	mls	r2, lr, r0, r2
 8009292:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009296:	fb00 f505 	mul.w	r5, r0, r5
 800929a:	42a5      	cmp	r5, r4
 800929c:	d90a      	bls.n	80092b4 <__udivmoddi4+0x90>
 800929e:	eb1c 0404 	adds.w	r4, ip, r4
 80092a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80092a6:	f080 8106 	bcs.w	80094b6 <__udivmoddi4+0x292>
 80092aa:	42a5      	cmp	r5, r4
 80092ac:	f240 8103 	bls.w	80094b6 <__udivmoddi4+0x292>
 80092b0:	4464      	add	r4, ip
 80092b2:	3802      	subs	r0, #2
 80092b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80092b8:	1b64      	subs	r4, r4, r5
 80092ba:	2100      	movs	r1, #0
 80092bc:	b11e      	cbz	r6, 80092c6 <__udivmoddi4+0xa2>
 80092be:	40dc      	lsrs	r4, r3
 80092c0:	2300      	movs	r3, #0
 80092c2:	e9c6 4300 	strd	r4, r3, [r6]
 80092c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ca:	428b      	cmp	r3, r1
 80092cc:	d908      	bls.n	80092e0 <__udivmoddi4+0xbc>
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	f000 80ec 	beq.w	80094ac <__udivmoddi4+0x288>
 80092d4:	2100      	movs	r1, #0
 80092d6:	e9c6 0500 	strd	r0, r5, [r6]
 80092da:	4608      	mov	r0, r1
 80092dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e0:	fab3 f183 	clz	r1, r3
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d149      	bne.n	800937c <__udivmoddi4+0x158>
 80092e8:	42ab      	cmp	r3, r5
 80092ea:	d302      	bcc.n	80092f2 <__udivmoddi4+0xce>
 80092ec:	4282      	cmp	r2, r0
 80092ee:	f200 80f7 	bhi.w	80094e0 <__udivmoddi4+0x2bc>
 80092f2:	1a84      	subs	r4, r0, r2
 80092f4:	eb65 0203 	sbc.w	r2, r5, r3
 80092f8:	2001      	movs	r0, #1
 80092fa:	4617      	mov	r7, r2
 80092fc:	2e00      	cmp	r6, #0
 80092fe:	d0e2      	beq.n	80092c6 <__udivmoddi4+0xa2>
 8009300:	e9c6 4700 	strd	r4, r7, [r6]
 8009304:	e7df      	b.n	80092c6 <__udivmoddi4+0xa2>
 8009306:	b902      	cbnz	r2, 800930a <__udivmoddi4+0xe6>
 8009308:	deff      	udf	#255	; 0xff
 800930a:	fab2 f382 	clz	r3, r2
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 808f 	bne.w	8009432 <__udivmoddi4+0x20e>
 8009314:	1a8a      	subs	r2, r1, r2
 8009316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800931a:	fa1f fe8c 	uxth.w	lr, ip
 800931e:	2101      	movs	r1, #1
 8009320:	fbb2 f5f7 	udiv	r5, r2, r7
 8009324:	fb07 2015 	mls	r0, r7, r5, r2
 8009328:	0c22      	lsrs	r2, r4, #16
 800932a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800932e:	fb0e f005 	mul.w	r0, lr, r5
 8009332:	4290      	cmp	r0, r2
 8009334:	d908      	bls.n	8009348 <__udivmoddi4+0x124>
 8009336:	eb1c 0202 	adds.w	r2, ip, r2
 800933a:	f105 38ff 	add.w	r8, r5, #4294967295
 800933e:	d202      	bcs.n	8009346 <__udivmoddi4+0x122>
 8009340:	4290      	cmp	r0, r2
 8009342:	f200 80ca 	bhi.w	80094da <__udivmoddi4+0x2b6>
 8009346:	4645      	mov	r5, r8
 8009348:	1a12      	subs	r2, r2, r0
 800934a:	b2a4      	uxth	r4, r4
 800934c:	fbb2 f0f7 	udiv	r0, r2, r7
 8009350:	fb07 2210 	mls	r2, r7, r0, r2
 8009354:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009358:	fb0e fe00 	mul.w	lr, lr, r0
 800935c:	45a6      	cmp	lr, r4
 800935e:	d908      	bls.n	8009372 <__udivmoddi4+0x14e>
 8009360:	eb1c 0404 	adds.w	r4, ip, r4
 8009364:	f100 32ff 	add.w	r2, r0, #4294967295
 8009368:	d202      	bcs.n	8009370 <__udivmoddi4+0x14c>
 800936a:	45a6      	cmp	lr, r4
 800936c:	f200 80ba 	bhi.w	80094e4 <__udivmoddi4+0x2c0>
 8009370:	4610      	mov	r0, r2
 8009372:	eba4 040e 	sub.w	r4, r4, lr
 8009376:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800937a:	e79f      	b.n	80092bc <__udivmoddi4+0x98>
 800937c:	f1c1 0720 	rsb	r7, r1, #32
 8009380:	408b      	lsls	r3, r1
 8009382:	fa22 fc07 	lsr.w	ip, r2, r7
 8009386:	ea4c 0c03 	orr.w	ip, ip, r3
 800938a:	fa05 f401 	lsl.w	r4, r5, r1
 800938e:	fa20 f307 	lsr.w	r3, r0, r7
 8009392:	40fd      	lsrs	r5, r7
 8009394:	4323      	orrs	r3, r4
 8009396:	fa00 f901 	lsl.w	r9, r0, r1
 800939a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800939e:	fa1f fe8c 	uxth.w	lr, ip
 80093a2:	fbb5 f8f0 	udiv	r8, r5, r0
 80093a6:	0c1c      	lsrs	r4, r3, #16
 80093a8:	fb00 5518 	mls	r5, r0, r8, r5
 80093ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80093b0:	fb08 f50e 	mul.w	r5, r8, lr
 80093b4:	42a5      	cmp	r5, r4
 80093b6:	fa02 f201 	lsl.w	r2, r2, r1
 80093ba:	d90b      	bls.n	80093d4 <__udivmoddi4+0x1b0>
 80093bc:	eb1c 0404 	adds.w	r4, ip, r4
 80093c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80093c4:	f080 8087 	bcs.w	80094d6 <__udivmoddi4+0x2b2>
 80093c8:	42a5      	cmp	r5, r4
 80093ca:	f240 8084 	bls.w	80094d6 <__udivmoddi4+0x2b2>
 80093ce:	f1a8 0802 	sub.w	r8, r8, #2
 80093d2:	4464      	add	r4, ip
 80093d4:	1b64      	subs	r4, r4, r5
 80093d6:	b29d      	uxth	r5, r3
 80093d8:	fbb4 f3f0 	udiv	r3, r4, r0
 80093dc:	fb00 4413 	mls	r4, r0, r3, r4
 80093e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80093e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80093e8:	45a6      	cmp	lr, r4
 80093ea:	d908      	bls.n	80093fe <__udivmoddi4+0x1da>
 80093ec:	eb1c 0404 	adds.w	r4, ip, r4
 80093f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80093f4:	d26b      	bcs.n	80094ce <__udivmoddi4+0x2aa>
 80093f6:	45a6      	cmp	lr, r4
 80093f8:	d969      	bls.n	80094ce <__udivmoddi4+0x2aa>
 80093fa:	3b02      	subs	r3, #2
 80093fc:	4464      	add	r4, ip
 80093fe:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8009402:	fba0 8302 	umull	r8, r3, r0, r2
 8009406:	eba4 040e 	sub.w	r4, r4, lr
 800940a:	429c      	cmp	r4, r3
 800940c:	46c6      	mov	lr, r8
 800940e:	461d      	mov	r5, r3
 8009410:	d355      	bcc.n	80094be <__udivmoddi4+0x29a>
 8009412:	d052      	beq.n	80094ba <__udivmoddi4+0x296>
 8009414:	b156      	cbz	r6, 800942c <__udivmoddi4+0x208>
 8009416:	ebb9 030e 	subs.w	r3, r9, lr
 800941a:	eb64 0405 	sbc.w	r4, r4, r5
 800941e:	fa04 f707 	lsl.w	r7, r4, r7
 8009422:	40cb      	lsrs	r3, r1
 8009424:	40cc      	lsrs	r4, r1
 8009426:	431f      	orrs	r7, r3
 8009428:	e9c6 7400 	strd	r7, r4, [r6]
 800942c:	2100      	movs	r1, #0
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009432:	f1c3 0120 	rsb	r1, r3, #32
 8009436:	fa02 fc03 	lsl.w	ip, r2, r3
 800943a:	fa20 f201 	lsr.w	r2, r0, r1
 800943e:	fa25 f101 	lsr.w	r1, r5, r1
 8009442:	409d      	lsls	r5, r3
 8009444:	432a      	orrs	r2, r5
 8009446:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800944a:	fa1f fe8c 	uxth.w	lr, ip
 800944e:	fbb1 f0f7 	udiv	r0, r1, r7
 8009452:	fb07 1510 	mls	r5, r7, r0, r1
 8009456:	0c11      	lsrs	r1, r2, #16
 8009458:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800945c:	fb00 f50e 	mul.w	r5, r0, lr
 8009460:	428d      	cmp	r5, r1
 8009462:	fa04 f403 	lsl.w	r4, r4, r3
 8009466:	d908      	bls.n	800947a <__udivmoddi4+0x256>
 8009468:	eb1c 0101 	adds.w	r1, ip, r1
 800946c:	f100 38ff 	add.w	r8, r0, #4294967295
 8009470:	d22f      	bcs.n	80094d2 <__udivmoddi4+0x2ae>
 8009472:	428d      	cmp	r5, r1
 8009474:	d92d      	bls.n	80094d2 <__udivmoddi4+0x2ae>
 8009476:	3802      	subs	r0, #2
 8009478:	4461      	add	r1, ip
 800947a:	1b49      	subs	r1, r1, r5
 800947c:	b292      	uxth	r2, r2
 800947e:	fbb1 f5f7 	udiv	r5, r1, r7
 8009482:	fb07 1115 	mls	r1, r7, r5, r1
 8009486:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800948a:	fb05 f10e 	mul.w	r1, r5, lr
 800948e:	4291      	cmp	r1, r2
 8009490:	d908      	bls.n	80094a4 <__udivmoddi4+0x280>
 8009492:	eb1c 0202 	adds.w	r2, ip, r2
 8009496:	f105 38ff 	add.w	r8, r5, #4294967295
 800949a:	d216      	bcs.n	80094ca <__udivmoddi4+0x2a6>
 800949c:	4291      	cmp	r1, r2
 800949e:	d914      	bls.n	80094ca <__udivmoddi4+0x2a6>
 80094a0:	3d02      	subs	r5, #2
 80094a2:	4462      	add	r2, ip
 80094a4:	1a52      	subs	r2, r2, r1
 80094a6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80094aa:	e739      	b.n	8009320 <__udivmoddi4+0xfc>
 80094ac:	4631      	mov	r1, r6
 80094ae:	4630      	mov	r0, r6
 80094b0:	e709      	b.n	80092c6 <__udivmoddi4+0xa2>
 80094b2:	4639      	mov	r1, r7
 80094b4:	e6e7      	b.n	8009286 <__udivmoddi4+0x62>
 80094b6:	4610      	mov	r0, r2
 80094b8:	e6fc      	b.n	80092b4 <__udivmoddi4+0x90>
 80094ba:	45c1      	cmp	r9, r8
 80094bc:	d2aa      	bcs.n	8009414 <__udivmoddi4+0x1f0>
 80094be:	ebb8 0e02 	subs.w	lr, r8, r2
 80094c2:	eb63 050c 	sbc.w	r5, r3, ip
 80094c6:	3801      	subs	r0, #1
 80094c8:	e7a4      	b.n	8009414 <__udivmoddi4+0x1f0>
 80094ca:	4645      	mov	r5, r8
 80094cc:	e7ea      	b.n	80094a4 <__udivmoddi4+0x280>
 80094ce:	4603      	mov	r3, r0
 80094d0:	e795      	b.n	80093fe <__udivmoddi4+0x1da>
 80094d2:	4640      	mov	r0, r8
 80094d4:	e7d1      	b.n	800947a <__udivmoddi4+0x256>
 80094d6:	46d0      	mov	r8, sl
 80094d8:	e77c      	b.n	80093d4 <__udivmoddi4+0x1b0>
 80094da:	3d02      	subs	r5, #2
 80094dc:	4462      	add	r2, ip
 80094de:	e733      	b.n	8009348 <__udivmoddi4+0x124>
 80094e0:	4608      	mov	r0, r1
 80094e2:	e70b      	b.n	80092fc <__udivmoddi4+0xd8>
 80094e4:	4464      	add	r4, ip
 80094e6:	3802      	subs	r0, #2
 80094e8:	e743      	b.n	8009372 <__udivmoddi4+0x14e>
 80094ea:	bf00      	nop

080094ec <__aeabi_idiv0>:
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop

080094f0 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80094f4:	bf00      	nop
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bc80      	pop	{r7}
 80094fa:	4770      	bx	lr

080094fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4a06      	ldr	r2, [pc, #24]	; (8009524 <vApplicationGetIdleTaskMemory+0x28>)
 800950c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	4a05      	ldr	r2, [pc, #20]	; (8009528 <vApplicationGetIdleTaskMemory+0x2c>)
 8009512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2280      	movs	r2, #128	; 0x80
 8009518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800951a:	bf00      	nop
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	bc80      	pop	{r7}
 8009522:	4770      	bx	lr
 8009524:	20000778 	.word	0x20000778
 8009528:	200008f0 	.word	0x200008f0

0800952c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4a07      	ldr	r2, [pc, #28]	; (8009558 <vApplicationGetTimerTaskMemory+0x2c>)
 800953c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	4a06      	ldr	r2, [pc, #24]	; (800955c <vApplicationGetTimerTaskMemory+0x30>)
 8009542:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800954a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800954c:	bf00      	nop
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	bc80      	pop	{r7}
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20000af0 	.word	0x20000af0
 800955c:	20000c68 	.word	0x20000c68

08009560 <vApplicationStackOverflowHook>:
 * @brief FreeRTOS stackoverflow detection callback
 **/

void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    signed char *pcTaskName )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
	fprintf(stderr, "Stack overflow in task '%s'!\r\n", pcTaskName);
 800956a:	4b09      	ldr	r3, [pc, #36]	; (8009590 <vApplicationStackOverflowHook+0x30>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	4908      	ldr	r1, [pc, #32]	; (8009594 <vApplicationStackOverflowHook+0x34>)
 8009574:	4618      	mov	r0, r3
 8009576:	f00a fd11 	bl	8013f9c <fprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800958c:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	while(1);
 800958e:	e7fe      	b.n	800958e <vApplicationStackOverflowHook+0x2e>
 8009590:	200001c0 	.word	0x200001c0
 8009594:	0801adb0 	.word	0x0801adb0

08009598 <vApplicationMallocFailedHook>:
/**
 * @brief FreeRTOS memory allocation failed detection callback
 **/

void vApplicationMallocFailedHook( void )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
	fprintf(stderr, "OS memory allocation failed!\r\n");
 800959e:	4b09      	ldr	r3, [pc, #36]	; (80095c4 <vApplicationMallocFailedHook+0x2c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	221e      	movs	r2, #30
 80095a6:	2101      	movs	r1, #1
 80095a8:	4807      	ldr	r0, [pc, #28]	; (80095c8 <vApplicationMallocFailedHook+0x30>)
 80095aa:	f00a febb 	bl	8014324 <fwrite>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	607b      	str	r3, [r7, #4]
}
 80095c0:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	while(1);
 80095c2:	e7fe      	b.n	80095c2 <vApplicationMallocFailedHook+0x2a>
 80095c4:	200001c0 	.word	0x200001c0
 80095c8:	0801add0 	.word	0x0801add0

080095cc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80095d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80095e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4013      	ands	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80095f0:	68fb      	ldr	r3, [r7, #12]
}
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bc80      	pop	{r7}
 80095fa:	4770      	bx	lr

080095fc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8009604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009608:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800960a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4313      	orrs	r3, r2
 8009612:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009618:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4013      	ands	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009620:	68fb      	ldr	r3, [r7, #12]
}
 8009622:	bf00      	nop
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	bc80      	pop	{r7}
 800962a:	4770      	bx	lr

0800962c <__io_putchar>:

	return status;
}

int __io_putchar(int ch)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	uint8_t c;

	c = (uint8_t)ch;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	73fb      	strb	r3, [r7, #15]

	if(HAL_UART_Transmit(&huart2, &c, 1, 100) == HAL_OK)
 800963a:	f107 010f 	add.w	r1, r7, #15
 800963e:	2364      	movs	r3, #100	; 0x64
 8009640:	2201      	movs	r2, #1
 8009642:	4807      	ldr	r0, [pc, #28]	; (8009660 <__io_putchar+0x34>)
 8009644:	f005 f8da 	bl	800e7fc <HAL_UART_Transmit>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <__io_putchar+0x26>
		return ch;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	e001      	b.n	8009656 <__io_putchar+0x2a>
	else
		return -1;
 8009652:	f04f 33ff 	mov.w	r3, #4294967295
	return -1;
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	200011b4 	.word	0x200011b4

08009664 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8009664:	b5b0      	push	{r4, r5, r7, lr}
 8009666:	b096      	sub	sp, #88	; 0x58
 8009668:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800966a:	f000 ffa5 	bl	800a5b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800966e:	f000 f87f 	bl	8009770 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8009672:	f000 faf3 	bl	8009c5c <MX_GPIO_Init>
	MX_ADC_Init();
 8009676:	f000 f8d7 	bl	8009828 <MX_ADC_Init>
	MX_LPUART1_UART_Init();
 800967a:	f000 f981 	bl	8009980 <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 800967e:	f000 f9cd 	bl	8009a1c <MX_USART2_UART_Init>
	MX_RTC_Init();
 8009682:	f000 fa17 	bl	8009ab4 <MX_RTC_Init>
	MX_SPI2_Init();
 8009686:	f000 faab 	bl	8009be0 <MX_SPI2_Init>
	MX_I2C2_Init();
 800968a:	f000 f939 	bl	8009900 <MX_I2C2_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UartMutex */
	osMutexDef(UartMutex);
 800968e:	2300      	movs	r3, #0
 8009690:	653b      	str	r3, [r7, #80]	; 0x50
 8009692:	2300      	movs	r3, #0
 8009694:	657b      	str	r3, [r7, #84]	; 0x54
	UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8009696:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800969a:	4618      	mov	r0, r3
 800969c:	f007 fef6 	bl	801148c <osMutexCreate>
 80096a0:	4603      	mov	r3, r0
 80096a2:	4a2a      	ldr	r2, [pc, #168]	; (800974c <main+0xe8>)
 80096a4:	6013      	str	r3, [r2, #0]

	/* definition and creation of SpiMutex */
	osMutexDef(SpiMutex);
 80096a6:	2300      	movs	r3, #0
 80096a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80096aa:	2300      	movs	r3, #0
 80096ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 80096ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80096b2:	4618      	mov	r0, r3
 80096b4:	f007 feea 	bl	801148c <osMutexCreate>
 80096b8:	4603      	mov	r3, r0
 80096ba:	4a25      	ldr	r2, [pc, #148]	; (8009750 <main+0xec>)
 80096bc:	6013      	str	r3, [r2, #0]

	/* definition and creation of I2cMutex */
	osMutexDef(I2cMutex);
 80096be:	2300      	movs	r3, #0
 80096c0:	643b      	str	r3, [r7, #64]	; 0x40
 80096c2:	2300      	movs	r3, #0
 80096c4:	647b      	str	r3, [r7, #68]	; 0x44
	I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 80096c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80096ca:	4618      	mov	r0, r3
 80096cc:	f007 fede 	bl	801148c <osMutexCreate>
 80096d0:	4603      	mov	r3, r0
 80096d2:	4a20      	ldr	r2, [pc, #128]	; (8009754 <main+0xf0>)
 80096d4:	6013      	str	r3, [r2, #0]

	/* definition and creation of RtcMutex */
	osMutexDef(RtcMutex);
 80096d6:	2300      	movs	r3, #0
 80096d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80096da:	2300      	movs	r3, #0
 80096dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 80096de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80096e2:	4618      	mov	r0, r3
 80096e4:	f007 fed2 	bl	801148c <osMutexCreate>
 80096e8:	4603      	mov	r3, r0
 80096ea:	4a1b      	ldr	r2, [pc, #108]	; (8009758 <main+0xf4>)
 80096ec:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */

	// definition and creation of iapMutex */
	osMutexDef(iapMutex);
 80096ee:	2300      	movs	r3, #0
 80096f0:	633b      	str	r3, [r7, #48]	; 0x30
 80096f2:	2300      	movs	r3, #0
 80096f4:	637b      	str	r3, [r7, #52]	; 0x34
	iapMutexHandle = osMutexCreate(osMutex(iapMutex));
 80096f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096fa:	4618      	mov	r0, r3
 80096fc:	f007 fec6 	bl	801148c <osMutexCreate>
 8009700:	4603      	mov	r3, r0
 8009702:	4a16      	ldr	r2, [pc, #88]	; (800975c <main+0xf8>)
 8009704:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of xQueue1 */
	osMessageQDef(xQueue1, 100, uint16_t);
 8009706:	4b16      	ldr	r3, [pc, #88]	; (8009760 <main+0xfc>)
 8009708:	f107 0420 	add.w	r4, r7, #32
 800970c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800970e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 8009712:	f107 0320 	add.w	r3, r7, #32
 8009716:	2100      	movs	r1, #0
 8009718:	4618      	mov	r0, r3
 800971a:	f007 fecf 	bl	80114bc <osMessageCreate>
 800971e:	4603      	mov	r3, r0
 8009720:	4a10      	ldr	r2, [pc, #64]	; (8009764 <main+0x100>)
 8009722:	6013      	str	r3, [r2, #0]
//	{
//		osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 500);
//		terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
//	}

	osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 500);
 8009724:	4b10      	ldr	r3, [pc, #64]	; (8009768 <main+0x104>)
 8009726:	1d3c      	adds	r4, r7, #4
 8009728:	461d      	mov	r5, r3
 800972a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800972c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800972e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 8009736:	1d3b      	adds	r3, r7, #4
 8009738:	2100      	movs	r1, #0
 800973a:	4618      	mov	r0, r3
 800973c:	f007 fe46 	bl	80113cc <osThreadCreate>
 8009740:	4603      	mov	r3, r0
 8009742:	4a0a      	ldr	r2, [pc, #40]	; (800976c <main+0x108>)
 8009744:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8009746:	f007 fe3a 	bl	80113be <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800974a:	e7fe      	b.n	800974a <main+0xe6>
 800974c:	200012ec 	.word	0x200012ec
 8009750:	200012f0 	.word	0x200012f0
 8009754:	200012f4 	.word	0x200012f4
 8009758:	200012f8 	.word	0x200012f8
 800975c:	200012fc 	.word	0x200012fc
 8009760:	0801ae20 	.word	0x0801ae20
 8009764:	200012e8 	.word	0x200012e8
 8009768:	0801ae40 	.word	0x0801ae40
 800976c:	200012e4 	.word	0x200012e4

08009770 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b09a      	sub	sp, #104	; 0x68
 8009774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009776:	f107 0320 	add.w	r3, r7, #32
 800977a:	2248      	movs	r2, #72	; 0x48
 800977c:	2100      	movs	r1, #0
 800977e:	4618      	mov	r0, r3
 8009780:	f00a fee8 	bl	8014554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009784:	f107 0308 	add.w	r3, r7, #8
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	605a      	str	r2, [r3, #4]
 800978e:	609a      	str	r2, [r3, #8]
 8009790:	60da      	str	r2, [r3, #12]
 8009792:	611a      	str	r2, [r3, #16]
 8009794:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009796:	4b23      	ldr	r3, [pc, #140]	; (8009824 <SystemClock_Config+0xb4>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800979e:	4a21      	ldr	r2, [pc, #132]	; (8009824 <SystemClock_Config+0xb4>)
 80097a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097a4:	6013      	str	r3, [r2, #0]
 80097a6:	4b1f      	ldr	r3, [pc, #124]	; (8009824 <SystemClock_Config+0xb4>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097ae:	607b      	str	r3, [r7, #4]
 80097b0:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80097b2:	232a      	movs	r3, #42	; 0x2a
 80097b4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80097b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80097bc:	2301      	movs	r3, #1
 80097be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80097c0:	2340      	movs	r3, #64	; 0x40
 80097c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80097c4:	2300      	movs	r3, #0
 80097c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80097c8:	23b0      	movs	r3, #176	; 0xb0
 80097ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80097cc:	2300      	movs	r3, #0
 80097ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80097d0:	2301      	movs	r3, #1
 80097d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80097d4:	2300      	movs	r3, #0
 80097d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80097d8:	f107 0320 	add.w	r3, r7, #32
 80097dc:	4618      	mov	r0, r3
 80097de:	f002 ff4f 	bl	800c680 <HAL_RCC_OscConfig>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80097e8:	f000 faca 	bl	8009d80 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80097ec:	234f      	movs	r3, #79	; 0x4f
 80097ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80097f4:	2300      	movs	r3, #0
 80097f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80097fc:	2300      	movs	r3, #0
 80097fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8009800:	2300      	movs	r3, #0
 8009802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009804:	f107 0308 	add.w	r3, r7, #8
 8009808:	2102      	movs	r1, #2
 800980a:	4618      	mov	r0, r3
 800980c:	f003 faba 	bl	800cd84 <HAL_RCC_ClockConfig>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8009816:	f000 fab3 	bl	8009d80 <Error_Handler>
  }
}
 800981a:	bf00      	nop
 800981c:	3768      	adds	r7, #104	; 0x68
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	58000400 	.word	0x58000400

08009828 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC;
 800982e:	4b31      	ldr	r3, [pc, #196]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009830:	4a31      	ldr	r2, [pc, #196]	; (80098f8 <MX_ADC_Init+0xd0>)
 8009832:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009834:	4b2f      	ldr	r3, [pc, #188]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009836:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800983a:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800983c:	4b2d      	ldr	r3, [pc, #180]	; (80098f4 <MX_ADC_Init+0xcc>)
 800983e:	2200      	movs	r2, #0
 8009840:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009842:	4b2c      	ldr	r3, [pc, #176]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009844:	2200      	movs	r2, #0
 8009846:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009848:	4b2a      	ldr	r3, [pc, #168]	; (80098f4 <MX_ADC_Init+0xcc>)
 800984a:	2200      	movs	r2, #0
 800984c:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800984e:	4b29      	ldr	r3, [pc, #164]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009850:	2204      	movs	r2, #4
 8009852:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8009854:	4b27      	ldr	r3, [pc, #156]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009856:	2200      	movs	r2, #0
 8009858:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800985a:	4b26      	ldr	r3, [pc, #152]	; (80098f4 <MX_ADC_Init+0xcc>)
 800985c:	2200      	movs	r2, #0
 800985e:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8009860:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009862:	2200      	movs	r2, #0
 8009864:	769a      	strb	r2, [r3, #26]
	hadc.Init.NbrOfConversion = 1;
 8009866:	4b23      	ldr	r3, [pc, #140]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009868:	2201      	movs	r2, #1
 800986a:	61da      	str	r2, [r3, #28]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800986c:	4b21      	ldr	r3, [pc, #132]	; (80098f4 <MX_ADC_Init+0xcc>)
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009874:	4b1f      	ldr	r3, [pc, #124]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009876:	2200      	movs	r2, #0
 8009878:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800987a:	4b1e      	ldr	r3, [pc, #120]	; (80098f4 <MX_ADC_Init+0xcc>)
 800987c:	2200      	movs	r2, #0
 800987e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 8009880:	4b1c      	ldr	r3, [pc, #112]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009882:	2200      	movs	r2, #0
 8009884:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8009888:	4b1a      	ldr	r3, [pc, #104]	; (80098f4 <MX_ADC_Init+0xcc>)
 800988a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800988e:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8009890:	4b18      	ldr	r3, [pc, #96]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009892:	2205      	movs	r2, #5
 8009894:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8009896:	4b17      	ldr	r3, [pc, #92]	; (80098f4 <MX_ADC_Init+0xcc>)
 8009898:	2205      	movs	r2, #5
 800989a:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.OversamplingMode = DISABLE;
 800989c:	4b15      	ldr	r3, [pc, #84]	; (80098f4 <MX_ADC_Init+0xcc>)
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80098a4:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <MX_ADC_Init+0xcc>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 80098aa:	4812      	ldr	r0, [pc, #72]	; (80098f4 <MX_ADC_Init+0xcc>)
 80098ac:	f001 f874 	bl	800a998 <HAL_ADC_Init>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <MX_ADC_Init+0x92>
	{
		Error_Handler();
 80098b6:	f000 fa63 	bl	8009d80 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098ba:	1d3b      	adds	r3, r7, #4
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	605a      	str	r2, [r3, #4]
 80098c2:	609a      	str	r2, [r3, #8]
 80098c4:	60da      	str	r2, [r3, #12]
 80098c6:	611a      	str	r2, [r3, #16]
	__HAL_RCC_ADC_CLK_ENABLE();
 80098c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80098cc:	f7ff fe96 	bl	80095fc <LL_APB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80098d0:	2002      	movs	r0, #2
 80098d2:	f7ff fe7b 	bl	80095cc <LL_AHB2_GRP1_EnableClock>
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80098d6:	2310      	movs	r3, #16
 80098d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80098da:	2303      	movs	r3, #3
 80098dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098e2:	1d3b      	adds	r3, r7, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	4805      	ldr	r0, [pc, #20]	; (80098fc <MX_ADC_Init+0xd4>)
 80098e8:	f002 f88c 	bl	800ba04 <HAL_GPIO_Init>
	/* USER CODE END ADC_Init 2 */

}
 80098ec:	bf00      	nop
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20001068 	.word	0x20001068
 80098f8:	40012400 	.word	0x40012400
 80098fc:	48000400 	.word	0x48000400

08009900 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8009904:	4b1b      	ldr	r3, [pc, #108]	; (8009974 <MX_I2C2_Init+0x74>)
 8009906:	4a1c      	ldr	r2, [pc, #112]	; (8009978 <MX_I2C2_Init+0x78>)
 8009908:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 800990a:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <MX_I2C2_Init+0x74>)
 800990c:	4a1b      	ldr	r2, [pc, #108]	; (800997c <MX_I2C2_Init+0x7c>)
 800990e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8009910:	4b18      	ldr	r3, [pc, #96]	; (8009974 <MX_I2C2_Init+0x74>)
 8009912:	2200      	movs	r2, #0
 8009914:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009916:	4b17      	ldr	r3, [pc, #92]	; (8009974 <MX_I2C2_Init+0x74>)
 8009918:	2201      	movs	r2, #1
 800991a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800991c:	4b15      	ldr	r3, [pc, #84]	; (8009974 <MX_I2C2_Init+0x74>)
 800991e:	2200      	movs	r2, #0
 8009920:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8009922:	4b14      	ldr	r3, [pc, #80]	; (8009974 <MX_I2C2_Init+0x74>)
 8009924:	2200      	movs	r2, #0
 8009926:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009928:	4b12      	ldr	r3, [pc, #72]	; (8009974 <MX_I2C2_Init+0x74>)
 800992a:	2200      	movs	r2, #0
 800992c:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800992e:	4b11      	ldr	r3, [pc, #68]	; (8009974 <MX_I2C2_Init+0x74>)
 8009930:	2200      	movs	r2, #0
 8009932:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <MX_I2C2_Init+0x74>)
 8009936:	2200      	movs	r2, #0
 8009938:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800993a:	480e      	ldr	r0, [pc, #56]	; (8009974 <MX_I2C2_Init+0x74>)
 800993c:	f002 faa7 	bl	800be8e <HAL_I2C_Init>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8009946:	f000 fa1b 	bl	8009d80 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800994a:	2100      	movs	r1, #0
 800994c:	4809      	ldr	r0, [pc, #36]	; (8009974 <MX_I2C2_Init+0x74>)
 800994e:	f002 fb2d 	bl	800bfac <HAL_I2CEx_ConfigAnalogFilter>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8009958:	f000 fa12 	bl	8009d80 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800995c:	2100      	movs	r1, #0
 800995e:	4805      	ldr	r0, [pc, #20]	; (8009974 <MX_I2C2_Init+0x74>)
 8009960:	f002 fb6e 	bl	800c040 <HAL_I2CEx_ConfigDigitalFilter>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 800996a:	f000 fa09 	bl	8009d80 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800996e:	bf00      	nop
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	200010cc 	.word	0x200010cc
 8009978:	40005800 	.word	0x40005800
 800997c:	20303e5d 	.word	0x20303e5d

08009980 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009984:	4b23      	ldr	r3, [pc, #140]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 8009986:	4a24      	ldr	r2, [pc, #144]	; (8009a18 <MX_LPUART1_UART_Init+0x98>)
 8009988:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800998a:	4b22      	ldr	r3, [pc, #136]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 800998c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009990:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009992:	4b20      	ldr	r3, [pc, #128]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 8009994:	2200      	movs	r2, #0
 8009996:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009998:	4b1e      	ldr	r3, [pc, #120]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 800999a:	2200      	movs	r2, #0
 800999c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800999e:	4b1d      	ldr	r3, [pc, #116]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 80099a4:	4b1b      	ldr	r3, [pc, #108]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 80099a6:	2204      	movs	r2, #4
 80099a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099aa:	4b1a      	ldr	r3, [pc, #104]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80099b0:	4b18      	ldr	r3, [pc, #96]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80099b6:	4b17      	ldr	r3, [pc, #92]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80099bc:	4b15      	ldr	r3, [pc, #84]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 80099be:	2208      	movs	r2, #8
 80099c0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80099c2:	4b14      	ldr	r3, [pc, #80]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 80099c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80099c8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 80099ca:	4812      	ldr	r0, [pc, #72]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 80099cc:	f004 febe 	bl	800e74c <HAL_HalfDuplex_Init>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 80099d6:	f000 f9d3 	bl	8009d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80099da:	2100      	movs	r1, #0
 80099dc:	480d      	ldr	r0, [pc, #52]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 80099de:	f006 ff81 	bl	80108e4 <HAL_UARTEx_SetTxFifoThreshold>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 80099e8:	f000 f9ca 	bl	8009d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80099ec:	2100      	movs	r1, #0
 80099ee:	4809      	ldr	r0, [pc, #36]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 80099f0:	f006 ffb6 	bl	8010960 <HAL_UARTEx_SetRxFifoThreshold>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 80099fa:	f000 f9c1 	bl	8009d80 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 80099fe:	4805      	ldr	r0, [pc, #20]	; (8009a14 <MX_LPUART1_UART_Init+0x94>)
 8009a00:	f006 fefd 	bl	80107fe <HAL_UARTEx_EnableFifoMode>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8009a0a:	f000 f9b9 	bl	8009d80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009a0e:	bf00      	nop
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20001120 	.word	0x20001120
 8009a18:	40008000 	.word	0x40008000

08009a1c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8009a20:	4b22      	ldr	r3, [pc, #136]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a22:	4a23      	ldr	r2, [pc, #140]	; (8009ab0 <MX_USART2_UART_Init+0x94>)
 8009a24:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8009a26:	4b21      	ldr	r3, [pc, #132]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009a2c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009a2e:	4b1f      	ldr	r3, [pc, #124]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8009a34:	4b1d      	ldr	r3, [pc, #116]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8009a3a:	4b1c      	ldr	r3, [pc, #112]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8009a40:	4b1a      	ldr	r3, [pc, #104]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a42:	220c      	movs	r2, #12
 8009a44:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a46:	4b19      	ldr	r3, [pc, #100]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a4c:	4b17      	ldr	r3, [pc, #92]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009a52:	4b16      	ldr	r3, [pc, #88]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009a58:	4b14      	ldr	r3, [pc, #80]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8009a64:	4811      	ldr	r0, [pc, #68]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a66:	f004 fe21 	bl	800e6ac <HAL_UART_Init>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8009a70:	f000 f986 	bl	8009d80 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009a74:	2100      	movs	r1, #0
 8009a76:	480d      	ldr	r0, [pc, #52]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a78:	f006 ff34 	bl	80108e4 <HAL_UARTEx_SetTxFifoThreshold>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8009a82:	f000 f97d 	bl	8009d80 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009a86:	2100      	movs	r1, #0
 8009a88:	4808      	ldr	r0, [pc, #32]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a8a:	f006 ff69 	bl	8010960 <HAL_UARTEx_SetRxFifoThreshold>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8009a94:	f000 f974 	bl	8009d80 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009a98:	4804      	ldr	r0, [pc, #16]	; (8009aac <MX_USART2_UART_Init+0x90>)
 8009a9a:	f006 feeb 	bl	8010874 <HAL_UARTEx_DisableFifoMode>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8009aa4:	f000 f96c 	bl	8009d80 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8009aa8:	bf00      	nop
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	200011b4 	.word	0x200011b4
 8009ab0:	40004400 	.word	0x40004400

08009ab4 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b092      	sub	sp, #72	; 0x48
 8009ab8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8009aba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	605a      	str	r2, [r3, #4]
 8009ac4:	609a      	str	r2, [r3, #8]
 8009ac6:	60da      	str	r2, [r3, #12]
 8009ac8:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8009aca:	2300      	movs	r3, #0
 8009acc:	633b      	str	r3, [r7, #48]	; 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 8009ace:	1d3b      	adds	r3, r7, #4
 8009ad0:	222c      	movs	r2, #44	; 0x2c
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f00a fd3d 	bl	8014554 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8009ada:	4b3f      	ldr	r3, [pc, #252]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009adc:	4a3f      	ldr	r2, [pc, #252]	; (8009bdc <MX_RTC_Init+0x128>)
 8009ade:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009ae0:	4b3d      	ldr	r3, [pc, #244]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8009ae6:	4b3c      	ldr	r3, [pc, #240]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009ae8:	227f      	movs	r2, #127	; 0x7f
 8009aea:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8009aec:	4b3a      	ldr	r3, [pc, #232]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009aee:	22ff      	movs	r2, #255	; 0xff
 8009af0:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009af2:	4b39      	ldr	r3, [pc, #228]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009af8:	4b37      	ldr	r3, [pc, #220]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009afe:	4b36      	ldr	r3, [pc, #216]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009b04:	4b34      	ldr	r3, [pc, #208]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009b0a:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8009b0c:	4b32      	ldr	r3, [pc, #200]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8009b12:	4b31      	ldr	r3, [pc, #196]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009b18:	482f      	ldr	r0, [pc, #188]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009b1a:	f003 fe2d 	bl	800d778 <HAL_RTC_Init>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <MX_RTC_Init+0x74>
	{
		Error_Handler();
 8009b24:	f000 f92c 	bl	8009d80 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	sTime.Minutes = 0x0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	sTime.Seconds = 0x0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009b42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009b46:	2201      	movs	r2, #1
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4823      	ldr	r0, [pc, #140]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009b4c:	f003 fe96 	bl	800d87c <HAL_RTC_SetTime>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <MX_RTC_Init+0xa6>
	{
		Error_Handler();
 8009b56:	f000 f913 	bl	8009d80 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sDate.Date = 0x1;
 8009b66:	2301      	movs	r3, #1
 8009b68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sDate.Year = 0x0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b76:	2201      	movs	r2, #1
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4817      	ldr	r0, [pc, #92]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009b7c:	f003 ff1a 	bl	800d9b4 <HAL_RTC_SetDate>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <MX_RTC_Init+0xd6>
	{
		Error_Handler();
 8009b86:	f000 f8fb 	bl	8009d80 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x0;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8009bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009bba:	1d3b      	adds	r3, r7, #4
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4805      	ldr	r0, [pc, #20]	; (8009bd8 <MX_RTC_Init+0x124>)
 8009bc2:	f003 ff7d 	bl	800dac0 <HAL_RTC_SetAlarm>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <MX_RTC_Init+0x11c>
	{
		Error_Handler();
 8009bcc:	f000 f8d8 	bl	8009d80 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8009bd0:	bf00      	nop
 8009bd2:	3748      	adds	r7, #72	; 0x48
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20001248 	.word	0x20001248
 8009bdc:	40002800 	.word	0x40002800

08009be0 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8009be4:	4b1b      	ldr	r3, [pc, #108]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009be6:	4a1c      	ldr	r2, [pc, #112]	; (8009c58 <MX_SPI2_Init+0x78>)
 8009be8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8009bea:	4b1a      	ldr	r3, [pc, #104]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009bf0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009bf2:	4b18      	ldr	r3, [pc, #96]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009bf8:	4b16      	ldr	r3, [pc, #88]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009bfa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009bfe:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c00:	4b14      	ldr	r3, [pc, #80]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009c06:	4b13      	ldr	r3, [pc, #76]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8009c0c:	4b11      	ldr	r3, [pc, #68]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c12:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c14:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009c1a:	4b0e      	ldr	r3, [pc, #56]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009c20:	4b0c      	ldr	r3, [pc, #48]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c26:	4b0b      	ldr	r3, [pc, #44]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8009c2c:	4b09      	ldr	r3, [pc, #36]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c2e:	2207      	movs	r2, #7
 8009c30:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009c32:	4b08      	ldr	r3, [pc, #32]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009c38:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009c3e:	4805      	ldr	r0, [pc, #20]	; (8009c54 <MX_SPI2_Init+0x74>)
 8009c40:	f004 f9d2 	bl	800dfe8 <HAL_SPI_Init>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 8009c4a:	f000 f899 	bl	8009d80 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8009c4e:	bf00      	nop
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20001280 	.word	0x20001280
 8009c58:	40003800 	.word	0x40003800

08009c5c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c62:	1d3b      	adds	r3, r7, #4
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	605a      	str	r2, [r3, #4]
 8009c6a:	609a      	str	r2, [r3, #8]
 8009c6c:	60da      	str	r2, [r3, #12]
 8009c6e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009c70:	2001      	movs	r0, #1
 8009c72:	f7ff fcab 	bl	80095cc <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009c76:	2002      	movs	r0, #2
 8009c78:	f7ff fca8 	bl	80095cc <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8009c7c:	2004      	movs	r0, #4
 8009c7e:	f7ff fca5 	bl	80095cc <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 8009c82:	2200      	movs	r2, #0
 8009c84:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 8009c88:	481e      	ldr	r0, [pc, #120]	; (8009d04 <MX_GPIO_Init+0xa8>)
 8009c8a:	f002 f8e9 	bl	800be60 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_SET);
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f240 2101 	movw	r1, #513	; 0x201
 8009c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c98:	f002 f8e2 	bl	800be60 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2102      	movs	r1, #2
 8009ca0:	4819      	ldr	r0, [pc, #100]	; (8009d08 <MX_GPIO_Init+0xac>)
 8009ca2:	f002 f8dd 	bl	800be60 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ADC_SW_Pin FLASH_CS_Pin MB_OC_Pin LED_Pin */
	GPIO_InitStruct.Pin = ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin|LED_Pin;
 8009ca6:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8009caa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009cac:	2301      	movs	r3, #1
 8009cae:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cb8:	1d3b      	adds	r3, r7, #4
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4811      	ldr	r0, [pc, #68]	; (8009d04 <MX_GPIO_Init+0xa8>)
 8009cbe:	f001 fea1 	bl	800ba04 <HAL_GPIO_Init>

	/*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
	GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 8009cc2:	f240 2301 	movw	r3, #513	; 0x201
 8009cc6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cd4:	1d3b      	adds	r3, r7, #4
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009cdc:	f001 fe92 	bl	800ba04 <HAL_GPIO_Init>

	/*Configure GPIO pin : MB_CTL_Pin */
	GPIO_InitStruct.Pin = MB_CTL_Pin;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cec:	2300      	movs	r3, #0
 8009cee:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 8009cf0:	1d3b      	adds	r3, r7, #4
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4804      	ldr	r0, [pc, #16]	; (8009d08 <MX_GPIO_Init+0xac>)
 8009cf6:	f001 fe85 	bl	800ba04 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8009cfa:	bf00      	nop
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	48000400 	.word	0x48000400
 8009d08:	48000800 	.word	0x48000800

08009d0c <Get_AdcHandle>:
	osDelay(Delay);
}


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	af00      	add	r7, sp, #0
	return &hadc;
 8009d10:	4b02      	ldr	r3, [pc, #8]	; (8009d1c <Get_AdcHandle+0x10>)
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	20001068 	.word	0x20001068

08009d20 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
	return &huart2;
 8009d24:	4b02      	ldr	r3, [pc, #8]	; (8009d30 <Get_DebugHandle+0x10>)
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bc80      	pop	{r7}
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	200011b4 	.word	0x200011b4

08009d34 <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 8009d34:	b480      	push	{r7}
 8009d36:	af00      	add	r7, sp, #0
	return &hlpuart1;;
 8009d38:	4b02      	ldr	r3, [pc, #8]	; (8009d44 <Get_SonarHandle+0x10>)
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bc80      	pop	{r7}
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	20001120 	.word	0x20001120

08009d48 <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	af00      	add	r7, sp, #0
	return xQueue1Handle;;
 8009d4c:	4b02      	ldr	r3, [pc, #8]	; (8009d58 <Get_TerminalQueueHandle+0x10>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bc80      	pop	{r7}
 8009d56:	4770      	bx	lr
 8009d58:	200012e8 	.word	0x200012e8

08009d5c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a04      	ldr	r2, [pc, #16]	; (8009d7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d101      	bne.n	8009d72 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8009d6e:	f000 fc43 	bl	800a5f8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8009d72:	bf00      	nop
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	40012c00 	.word	0x40012c00

08009d80 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8009d80:	b480      	push	{r7}
 8009d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009d84:	b672      	cpsid	i
}
 8009d86:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8009d88:	e7fe      	b.n	8009d88 <Error_Handler+0x8>

08009d8a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8009d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009da2:	bf00      	nop
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr

08009daa <LL_AHB2_GRP1_EnableClock>:
{
 8009daa:	b480      	push	{r7}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009db8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4013      	ands	r3, r2
 8009dcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009dce:	68fb      	ldr	r3, [r7, #12]
}
 8009dd0:	bf00      	nop
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bc80      	pop	{r7}
 8009dd8:	4770      	bx	lr

08009dda <LL_APB1_GRP1_EnableClock>:
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b085      	sub	sp, #20
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8009de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009de6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8009df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009df6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
}
 8009e00:	bf00      	nop
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bc80      	pop	{r7}
 8009e08:	4770      	bx	lr

08009e0a <LL_APB1_GRP2_EnableClock>:
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b085      	sub	sp, #20
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8009e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8009e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
}
 8009e30:	bf00      	nop
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr

08009e3a <LL_APB1_GRP1_DisableClock>:
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b083      	sub	sp, #12
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8009e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	43db      	mvns	r3, r3
 8009e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e50:	4013      	ands	r3, r2
 8009e52:	658b      	str	r3, [r1, #88]	; 0x58
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bc80      	pop	{r7}
 8009e5c:	4770      	bx	lr

08009e5e <LL_APB1_GRP2_DisableClock>:
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8009e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	43db      	mvns	r3, r3
 8009e70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e74:	4013      	ands	r3, r2
 8009e76:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bc80      	pop	{r7}
 8009e80:	4770      	bx	lr

08009e82 <LL_APB2_GRP1_EnableClock>:
{
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8009e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8009e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
}
 8009ea8:	bf00      	nop
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bc80      	pop	{r7}
 8009eb0:	4770      	bx	lr

08009eb2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	210f      	movs	r1, #15
 8009eba:	f06f 0001 	mvn.w	r0, #1
 8009ebe:	f001 fcae 	bl	800b81e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009ec2:	bf00      	nop
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ed0:	f107 030c 	add.w	r3, r7, #12
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	605a      	str	r2, [r3, #4]
 8009eda:	609a      	str	r2, [r3, #8]
 8009edc:	60da      	str	r2, [r3, #12]
 8009ede:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a0c      	ldr	r2, [pc, #48]	; (8009f18 <HAL_ADC_MspInit+0x50>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d112      	bne.n	8009f10 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8009eea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009eee:	f7ff ffc8 	bl	8009e82 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ef2:	2002      	movs	r0, #2
 8009ef4:	f7ff ff59 	bl	8009daa <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009ef8:	2308      	movs	r3, #8
 8009efa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009efc:	2303      	movs	r3, #3
 8009efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f04:	f107 030c 	add.w	r3, r7, #12
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4804      	ldr	r0, [pc, #16]	; (8009f1c <HAL_ADC_MspInit+0x54>)
 8009f0c:	f001 fd7a 	bl	800ba04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8009f10:	bf00      	nop
 8009f12:	3720      	adds	r7, #32
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	40012400 	.word	0x40012400
 8009f1c:	48000400 	.word	0x48000400

08009f20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b096      	sub	sp, #88	; 0x58
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	605a      	str	r2, [r3, #4]
 8009f32:	609a      	str	r2, [r3, #8]
 8009f34:	60da      	str	r2, [r3, #12]
 8009f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f38:	f107 030c 	add.w	r3, r7, #12
 8009f3c:	2238      	movs	r2, #56	; 0x38
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4618      	mov	r0, r3
 8009f42:	f00a fb07 	bl	8014554 <memset>
  if(hi2c->Instance==I2C2)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a21      	ldr	r2, [pc, #132]	; (8009fd0 <HAL_I2C_MspInit+0xb0>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d13b      	bne.n	8009fc8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009f50:	2380      	movs	r3, #128	; 0x80
 8009f52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009f54:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8009f58:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009f5a:	f107 030c 	add.w	r3, r7, #12
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f003 faf0 	bl	800d544 <HAL_RCCEx_PeriphCLKConfig>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8009f6a:	f7ff ff09 	bl	8009d80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f6e:	2001      	movs	r0, #1
 8009f70:	f7ff ff1b 	bl	8009daa <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f74:	2002      	movs	r0, #2
 8009f76:	f7ff ff18 	bl	8009daa <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f7e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009f80:	2312      	movs	r3, #18
 8009f82:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009f94:	4619      	mov	r1, r3
 8009f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f9a:	f001 fd33 	bl	800ba04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fa2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009fa4:	2312      	movs	r3, #18
 8009fa6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fac:	2300      	movs	r3, #0
 8009fae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009fb0:	2304      	movs	r3, #4
 8009fb2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4806      	ldr	r0, [pc, #24]	; (8009fd4 <HAL_I2C_MspInit+0xb4>)
 8009fbc:	f001 fd22 	bl	800ba04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009fc0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8009fc4:	f7ff ff09 	bl	8009dda <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8009fc8:	bf00      	nop
 8009fca:	3758      	adds	r7, #88	; 0x58
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	40005800 	.word	0x40005800
 8009fd4:	48000400 	.word	0x48000400

08009fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b096      	sub	sp, #88	; 0x58
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fe0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	605a      	str	r2, [r3, #4]
 8009fea:	609a      	str	r2, [r3, #8]
 8009fec:	60da      	str	r2, [r3, #12]
 8009fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009ff0:	f107 030c 	add.w	r3, r7, #12
 8009ff4:	2238      	movs	r2, #56	; 0x38
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f00a faab 	bl	8014554 <memset>
  if(huart->Instance==LPUART1)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a30      	ldr	r2, [pc, #192]	; (800a0c4 <HAL_UART_MspInit+0xec>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d125      	bne.n	800a054 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a008:	2320      	movs	r3, #32
 800a00a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800a00c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a010:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a012:	f107 030c 	add.w	r3, r7, #12
 800a016:	4618      	mov	r0, r3
 800a018:	f003 fa94 	bl	800d544 <HAL_RCCEx_PeriphCLKConfig>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a022:	f7ff fead 	bl	8009d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a026:	2001      	movs	r0, #1
 800a028:	f7ff feef 	bl	8009e0a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a02c:	2004      	movs	r0, #4
 800a02e:	f7ff febc 	bl	8009daa <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 800a032:	2301      	movs	r3, #1
 800a034:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a036:	2312      	movs	r3, #18
 800a038:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a03a:	2301      	movs	r3, #1
 800a03c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a03e:	2300      	movs	r3, #0
 800a040:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a042:	2308      	movs	r3, #8
 800a044:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a046:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a04a:	4619      	mov	r1, r3
 800a04c:	481e      	ldr	r0, [pc, #120]	; (800a0c8 <HAL_UART_MspInit+0xf0>)
 800a04e:	f001 fcd9 	bl	800ba04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a052:	e033      	b.n	800a0bc <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a1c      	ldr	r2, [pc, #112]	; (800a0cc <HAL_UART_MspInit+0xf4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d12e      	bne.n	800a0bc <HAL_UART_MspInit+0xe4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a05e:	2302      	movs	r3, #2
 800a060:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a062:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800a066:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a068:	f107 030c 	add.w	r3, r7, #12
 800a06c:	4618      	mov	r0, r3
 800a06e:	f003 fa69 	bl	800d544 <HAL_RCCEx_PeriphCLKConfig>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <HAL_UART_MspInit+0xa4>
      Error_Handler();
 800a078:	f7ff fe82 	bl	8009d80 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a07c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a080:	f7ff feab 	bl	8009dda <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a084:	2001      	movs	r0, #1
 800a086:	f7ff fe90 	bl	8009daa <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800a08a:	230c      	movs	r3, #12
 800a08c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a08e:	2302      	movs	r3, #2
 800a090:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a092:	2300      	movs	r3, #0
 800a094:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a096:	2300      	movs	r3, #0
 800a098:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a09a:	2307      	movs	r3, #7
 800a09c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a09e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0a8:	f001 fcac 	bl	800ba04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2105      	movs	r1, #5
 800a0b0:	2025      	movs	r0, #37	; 0x25
 800a0b2:	f001 fbb4 	bl	800b81e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a0b6:	2025      	movs	r0, #37	; 0x25
 800a0b8:	f001 fbcb 	bl	800b852 <HAL_NVIC_EnableIRQ>
}
 800a0bc:	bf00      	nop
 800a0be:	3758      	adds	r7, #88	; 0x58
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	40008000 	.word	0x40008000
 800a0c8:	48000800 	.word	0x48000800
 800a0cc:	40004400 	.word	0x40004400

0800a0d0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a0f      	ldr	r2, [pc, #60]	; (800a11c <HAL_UART_MspDeInit+0x4c>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d107      	bne.n	800a0f2 <HAL_UART_MspDeInit+0x22>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800a0e2:	2001      	movs	r0, #1
 800a0e4:	f7ff febb 	bl	8009e5e <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 800a0e8:	2102      	movs	r1, #2
 800a0ea:	480d      	ldr	r0, [pc, #52]	; (800a120 <HAL_UART_MspDeInit+0x50>)
 800a0ec:	f001 fdea 	bl	800bcc4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800a0f0:	e010      	b.n	800a114 <HAL_UART_MspDeInit+0x44>
  else if(huart->Instance==USART2)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a0b      	ldr	r2, [pc, #44]	; (800a124 <HAL_UART_MspDeInit+0x54>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d10b      	bne.n	800a114 <HAL_UART_MspDeInit+0x44>
    __HAL_RCC_USART2_CLK_DISABLE();
 800a0fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a100:	f7ff fe9b 	bl	8009e3a <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 800a104:	210c      	movs	r1, #12
 800a106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a10a:	f001 fddb 	bl	800bcc4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800a10e:	2025      	movs	r0, #37	; 0x25
 800a110:	f001 fbad 	bl	800b86e <HAL_NVIC_DisableIRQ>
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	40008000 	.word	0x40008000
 800a120:	48000800 	.word	0x48000800
 800a124:	40004400 	.word	0x40004400

0800a128 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b090      	sub	sp, #64	; 0x40
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a130:	f107 0308 	add.w	r3, r7, #8
 800a134:	2238      	movs	r2, #56	; 0x38
 800a136:	2100      	movs	r1, #0
 800a138:	4618      	mov	r0, r3
 800a13a:	f00a fa0b 	bl	8014554 <memset>
  if(hrtc->Instance==RTC)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a0e      	ldr	r2, [pc, #56]	; (800a17c <HAL_RTC_MspInit+0x54>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d115      	bne.n	800a174 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a14c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a14e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a154:	f107 0308 	add.w	r3, r7, #8
 800a158:	4618      	mov	r0, r3
 800a15a:	f003 f9f3 	bl	800d544 <HAL_RCCEx_PeriphCLKConfig>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a164:	f7ff fe0c 	bl	8009d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a168:	f7ff fe0f 	bl	8009d8a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a16c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a170:	f7ff fe33 	bl	8009dda <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a174:	bf00      	nop
 800a176:	3740      	adds	r7, #64	; 0x40
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	40002800 	.word	0x40002800

0800a180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b096      	sub	sp, #88	; 0x58
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a188:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a18c:	2200      	movs	r2, #0
 800a18e:	601a      	str	r2, [r3, #0]
 800a190:	605a      	str	r2, [r3, #4]
 800a192:	609a      	str	r2, [r3, #8]
 800a194:	60da      	str	r2, [r3, #12]
 800a196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a198:	f107 030c 	add.w	r3, r7, #12
 800a19c:	2238      	movs	r2, #56	; 0x38
 800a19e:	2100      	movs	r1, #0
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f00a f9d7 	bl	8014554 <memset>
  if(hspi->Instance==SPI2)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a21      	ldr	r2, [pc, #132]	; (800a230 <HAL_SPI_MspInit+0xb0>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d13b      	bne.n	800a228 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800a1b0:	2310      	movs	r3, #16
 800a1b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 800a1b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1b8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a1ba:	f107 030c 	add.w	r3, r7, #12
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f003 f9c0 	bl	800d544 <HAL_RCCEx_PeriphCLKConfig>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800a1ca:	f7ff fdd9 	bl	8009d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a1ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a1d2:	f7ff fe02 	bl	8009dda <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1d6:	2002      	movs	r0, #2
 800a1d8:	f7ff fde7 	bl	8009daa <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1dc:	2001      	movs	r0, #1
 800a1de:	f7ff fde4 	bl	8009daa <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800a1e2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800a1e6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a1f4:	2305      	movs	r3, #5
 800a1f6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	480d      	ldr	r0, [pc, #52]	; (800a234 <HAL_SPI_MspInit+0xb4>)
 800a200:	f001 fc00 	bl	800ba04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a208:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a20a:	2302      	movs	r3, #2
 800a20c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a20e:	2301      	movs	r3, #1
 800a210:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a212:	2300      	movs	r3, #0
 800a214:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a216:	2305      	movs	r3, #5
 800a218:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a21a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a21e:	4619      	mov	r1, r3
 800a220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a224:	f001 fbee 	bl	800ba04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a228:	bf00      	nop
 800a22a:	3758      	adds	r7, #88	; 0x58
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	40003800 	.word	0x40003800
 800a234:	48000400 	.word	0x48000400

0800a238 <LL_APB2_GRP1_EnableClock>:
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800a240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a254:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4013      	ands	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a25c:	68fb      	ldr	r3, [r7, #12]
}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	bc80      	pop	{r7}
 800a266:	4770      	bx	lr

0800a268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08c      	sub	sp, #48	; 0x30
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a27e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a282:	f7ff ffd9 	bl	800a238 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a286:	f107 0208 	add.w	r2, r7, #8
 800a28a:	f107 030c 	add.w	r3, r7, #12
 800a28e:	4611      	mov	r1, r2
 800a290:	4618      	mov	r0, r3
 800a292:	f002 ff73 	bl	800d17c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800a296:	f002 ff5f 	bl	800d158 <HAL_RCC_GetPCLK2Freq>
 800a29a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29e:	4a21      	ldr	r2, [pc, #132]	; (800a324 <HAL_InitTick+0xbc>)
 800a2a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a4:	0c9b      	lsrs	r3, r3, #18
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a2aa:	4b1f      	ldr	r3, [pc, #124]	; (800a328 <HAL_InitTick+0xc0>)
 800a2ac:	4a1f      	ldr	r2, [pc, #124]	; (800a32c <HAL_InitTick+0xc4>)
 800a2ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800a2b0:	4b1d      	ldr	r3, [pc, #116]	; (800a328 <HAL_InitTick+0xc0>)
 800a2b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a2b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a2b8:	4a1b      	ldr	r2, [pc, #108]	; (800a328 <HAL_InitTick+0xc0>)
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a2be:	4b1a      	ldr	r3, [pc, #104]	; (800a328 <HAL_InitTick+0xc0>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2c4:	4b18      	ldr	r3, [pc, #96]	; (800a328 <HAL_InitTick+0xc0>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800a2ca:	4817      	ldr	r0, [pc, #92]	; (800a328 <HAL_InitTick+0xc0>)
 800a2cc:	f003 ff60 	bl	800e190 <HAL_TIM_Base_Init>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800a2d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d11b      	bne.n	800a316 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800a2de:	4812      	ldr	r0, [pc, #72]	; (800a328 <HAL_InitTick+0xc0>)
 800a2e0:	f003 ffb6 	bl	800e250 <HAL_TIM_Base_Start_IT>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800a2ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d111      	bne.n	800a316 <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a2f2:	2018      	movs	r0, #24
 800a2f4:	f001 faad 	bl	800b852 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b0f      	cmp	r3, #15
 800a2fc:	d808      	bhi.n	800a310 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800a2fe:	2200      	movs	r2, #0
 800a300:	6879      	ldr	r1, [r7, #4]
 800a302:	2018      	movs	r0, #24
 800a304:	f001 fa8b 	bl	800b81e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a308:	4a09      	ldr	r2, [pc, #36]	; (800a330 <HAL_InitTick+0xc8>)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	e002      	b.n	800a316 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800a316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3730      	adds	r7, #48	; 0x30
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	431bde83 	.word	0x431bde83
 800a328:	20001300 	.word	0x20001300
 800a32c:	40012c00 	.word	0x40012c00
 800a330:	20000084 	.word	0x20000084

0800a334 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 800a334:	b480      	push	{r7}
 800a336:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 800a338:	4b05      	ldr	r3, [pc, #20]	; (800a350 <HAL_SuspendTick+0x1c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68da      	ldr	r2, [r3, #12]
 800a33e:	4b04      	ldr	r3, [pc, #16]	; (800a350 <HAL_SuspendTick+0x1c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f022 0201 	bic.w	r2, r2, #1
 800a346:	60da      	str	r2, [r3, #12]
}
 800a348:	bf00      	nop
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bc80      	pop	{r7}
 800a34e:	4770      	bx	lr
 800a350:	20001300 	.word	0x20001300

0800a354 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 800a354:	b480      	push	{r7}
 800a356:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800a358:	4b05      	ldr	r3, [pc, #20]	; (800a370 <HAL_ResumeTick+0x1c>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68da      	ldr	r2, [r3, #12]
 800a35e:	4b04      	ldr	r3, [pc, #16]	; (800a370 <HAL_ResumeTick+0x1c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0201 	orr.w	r2, r2, #1
 800a366:	60da      	str	r2, [r3, #12]
}
 800a368:	bf00      	nop
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bc80      	pop	{r7}
 800a36e:	4770      	bx	lr
 800a370:	20001300 	.word	0x20001300

0800a374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a374:	b480      	push	{r7}
 800a376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a378:	e7fe      	b.n	800a378 <NMI_Handler+0x4>

0800a37a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a37a:	b480      	push	{r7}
 800a37c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a37e:	e7fe      	b.n	800a37e <HardFault_Handler+0x4>

0800a380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a384:	e7fe      	b.n	800a384 <MemManage_Handler+0x4>

0800a386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a386:	b480      	push	{r7}
 800a388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a38a:	e7fe      	b.n	800a38a <BusFault_Handler+0x4>

0800a38c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a390:	e7fe      	b.n	800a390 <UsageFault_Handler+0x4>

0800a392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a392:	b480      	push	{r7}
 800a394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a396:	bf00      	nop
 800a398:	46bd      	mov	sp, r7
 800a39a:	bc80      	pop	{r7}
 800a39c:	4770      	bx	lr
	...

0800a3a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a3a4:	4802      	ldr	r0, [pc, #8]	; (800a3b0 <TIM1_UP_IRQHandler+0x10>)
 800a3a6:	f003 ff9f 	bl	800e2e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a3aa:	bf00      	nop
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20001300 	.word	0x20001300

0800a3b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a3b8:	4802      	ldr	r0, [pc, #8]	; (800a3c4 <USART2_IRQHandler+0x10>)
 800a3ba:	f004 fbb5 	bl	800eb28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a3be:	bf00      	nop
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	200011b4 	.word	0x200011b4

0800a3c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	af00      	add	r7, sp, #0
  return 1;
 800a3cc:	2301      	movs	r3, #1
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bc80      	pop	{r7}
 800a3d4:	4770      	bx	lr

0800a3d6 <_kill>:

int _kill(int pid, int sig)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a3e0:	f00a f976 	bl	80146d0 <__errno>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2216      	movs	r2, #22
 800a3e8:	601a      	str	r2, [r3, #0]
  return -1;
 800a3ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <_exit>:

void _exit (int status)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a3fe:	f04f 31ff 	mov.w	r1, #4294967295
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7ff ffe7 	bl	800a3d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a408:	e7fe      	b.n	800a408 <_exit+0x12>

0800a40a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b086      	sub	sp, #24
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60f8      	str	r0, [r7, #12]
 800a412:	60b9      	str	r1, [r7, #8]
 800a414:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a416:	2300      	movs	r3, #0
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	e00a      	b.n	800a432 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a41c:	f3af 8000 	nop.w
 800a420:	4601      	mov	r1, r0
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	60ba      	str	r2, [r7, #8]
 800a428:	b2ca      	uxtb	r2, r1
 800a42a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	3301      	adds	r3, #1
 800a430:	617b      	str	r3, [r7, #20]
 800a432:	697a      	ldr	r2, [r7, #20]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	429a      	cmp	r2, r3
 800a438:	dbf0      	blt.n	800a41c <_read+0x12>
  }

  return len;
 800a43a:	687b      	ldr	r3, [r7, #4]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]
 800a454:	e009      	b.n	800a46a <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	1c5a      	adds	r2, r3, #1
 800a45a:	60ba      	str	r2, [r7, #8]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff f8e4 	bl	800962c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	3301      	adds	r3, #1
 800a468:	617b      	str	r3, [r7, #20]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	429a      	cmp	r2, r3
 800a470:	dbf1      	blt.n	800a456 <_write+0x12>
  }
  return len;
 800a472:	687b      	ldr	r3, [r7, #4]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <_close>:

int _close(int file)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a484:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bc80      	pop	{r7}
 800a490:	4770      	bx	lr

0800a492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a4a2:	605a      	str	r2, [r3, #4]
  return 0;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bc80      	pop	{r7}
 800a4ae:	4770      	bx	lr

0800a4b0 <_isatty>:

int _isatty(int file)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a4b8:	2301      	movs	r3, #1
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bc80      	pop	{r7}
 800a4c2:	4770      	bx	lr

0800a4c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bc80      	pop	{r7}
 800a4da:	4770      	bx	lr

0800a4dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a4e4:	4a14      	ldr	r2, [pc, #80]	; (800a538 <_sbrk+0x5c>)
 800a4e6:	4b15      	ldr	r3, [pc, #84]	; (800a53c <_sbrk+0x60>)
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a4f0:	4b13      	ldr	r3, [pc, #76]	; (800a540 <_sbrk+0x64>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d102      	bne.n	800a4fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a4f8:	4b11      	ldr	r3, [pc, #68]	; (800a540 <_sbrk+0x64>)
 800a4fa:	4a12      	ldr	r2, [pc, #72]	; (800a544 <_sbrk+0x68>)
 800a4fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a4fe:	4b10      	ldr	r3, [pc, #64]	; (800a540 <_sbrk+0x64>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4413      	add	r3, r2
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d207      	bcs.n	800a51c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a50c:	f00a f8e0 	bl	80146d0 <__errno>
 800a510:	4603      	mov	r3, r0
 800a512:	220c      	movs	r2, #12
 800a514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a516:	f04f 33ff 	mov.w	r3, #4294967295
 800a51a:	e009      	b.n	800a530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a51c:	4b08      	ldr	r3, [pc, #32]	; (800a540 <_sbrk+0x64>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a522:	4b07      	ldr	r3, [pc, #28]	; (800a540 <_sbrk+0x64>)
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4413      	add	r3, r2
 800a52a:	4a05      	ldr	r2, [pc, #20]	; (800a540 <_sbrk+0x64>)
 800a52c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a52e:	68fb      	ldr	r3, [r7, #12]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20010000 	.word	0x20010000
 800a53c:	00000400 	.word	0x00000400
 800a540:	2000134c 	.word	0x2000134c
 800a544:	20004b48 	.word	0x20004b48

0800a548 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a548:	b480      	push	{r7}
 800a54a:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800a54c:	4b03      	ldr	r3, [pc, #12]	; (800a55c <SystemInit+0x14>)
 800a54e:	4a04      	ldr	r2, [pc, #16]	; (800a560 <SystemInit+0x18>)
 800a550:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800a552:	bf00      	nop
 800a554:	46bd      	mov	sp, r7
 800a556:	bc80      	pop	{r7}
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	e000ed00 	.word	0xe000ed00
 800a560:	08008400 	.word	0x08008400

0800a564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800a564:	480d      	ldr	r0, [pc, #52]	; (800a59c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a566:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800a568:	f7ff ffee 	bl	800a548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a56c:	480c      	ldr	r0, [pc, #48]	; (800a5a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800a56e:	490d      	ldr	r1, [pc, #52]	; (800a5a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a570:	4a0d      	ldr	r2, [pc, #52]	; (800a5a8 <LoopForever+0xe>)
  movs r3, #0
 800a572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a574:	e002      	b.n	800a57c <LoopCopyDataInit>

0800a576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a57a:	3304      	adds	r3, #4

0800a57c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a57c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a57e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a580:	d3f9      	bcc.n	800a576 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a582:	4a0a      	ldr	r2, [pc, #40]	; (800a5ac <LoopForever+0x12>)
  ldr r4, =_ebss
 800a584:	4c0a      	ldr	r4, [pc, #40]	; (800a5b0 <LoopForever+0x16>)
  movs r3, #0
 800a586:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a588:	e001      	b.n	800a58e <LoopFillZerobss>

0800a58a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a58a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a58c:	3204      	adds	r2, #4

0800a58e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a58e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a590:	d3fb      	bcc.n	800a58a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800a592:	f00a f8a3 	bl	80146dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a596:	f7ff f865 	bl	8009664 <main>

0800a59a <LoopForever>:

LoopForever:
    b LoopForever
 800a59a:	e7fe      	b.n	800a59a <LoopForever>
  ldr   r0, =_estack
 800a59c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800a5a0:	20000080 	.word	0x20000080
  ldr r1, =_edata
 800a5a4:	20000758 	.word	0x20000758
  ldr r2, =_sidata
 800a5a8:	0801ba44 	.word	0x0801ba44
  ldr r2, =_sbss
 800a5ac:	20000758 	.word	0x20000758
  ldr r4, =_ebss
 800a5b0:	20004b44 	.word	0x20004b44

0800a5b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a5b4:	e7fe      	b.n	800a5b4 <ADC_IRQHandler>
	...

0800a5b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a5c2:	2003      	movs	r0, #3
 800a5c4:	f001 f920 	bl	800b808 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a5c8:	f002 fda0 	bl	800d10c <HAL_RCC_GetHCLKFreq>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	4a09      	ldr	r2, [pc, #36]	; (800a5f4 <HAL_Init+0x3c>)
 800a5d0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a5d2:	200f      	movs	r0, #15
 800a5d4:	f7ff fe48 	bl	800a268 <HAL_InitTick>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d002      	beq.n	800a5e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	71fb      	strb	r3, [r7, #7]
 800a5e2:	e001      	b.n	800a5e8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a5e4:	f7ff fc65 	bl	8009eb2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a5e8:	79fb      	ldrb	r3, [r7, #7]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	20000080 	.word	0x20000080

0800a5f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a5fc:	4b05      	ldr	r3, [pc, #20]	; (800a614 <HAL_IncTick+0x1c>)
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	4b05      	ldr	r3, [pc, #20]	; (800a618 <HAL_IncTick+0x20>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4413      	add	r3, r2
 800a608:	4a03      	ldr	r2, [pc, #12]	; (800a618 <HAL_IncTick+0x20>)
 800a60a:	6013      	str	r3, [r2, #0]
}
 800a60c:	bf00      	nop
 800a60e:	46bd      	mov	sp, r7
 800a610:	bc80      	pop	{r7}
 800a612:	4770      	bx	lr
 800a614:	20000088 	.word	0x20000088
 800a618:	20001350 	.word	0x20001350

0800a61c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a61c:	b480      	push	{r7}
 800a61e:	af00      	add	r7, sp, #0
  return uwTick;
 800a620:	4b02      	ldr	r3, [pc, #8]	; (800a62c <HAL_GetTick+0x10>)
 800a622:	681b      	ldr	r3, [r3, #0]
}
 800a624:	4618      	mov	r0, r3
 800a626:	46bd      	mov	sp, r7
 800a628:	bc80      	pop	{r7}
 800a62a:	4770      	bx	lr
 800a62c:	20001350 	.word	0x20001350

0800a630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a638:	f7ff fff0 	bl	800a61c <HAL_GetTick>
 800a63c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a648:	d005      	beq.n	800a656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a64a:	4b0a      	ldr	r3, [pc, #40]	; (800a674 <HAL_Delay+0x44>)
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4413      	add	r3, r2
 800a654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a656:	bf00      	nop
 800a658:	f7ff ffe0 	bl	800a61c <HAL_GetTick>
 800a65c:	4602      	mov	r2, r0
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	429a      	cmp	r2, r3
 800a666:	d8f7      	bhi.n	800a658 <HAL_Delay+0x28>
  {
  }
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	20000088 	.word	0x20000088

0800a678 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800a67c:	4b02      	ldr	r3, [pc, #8]	; (800a688 <HAL_GetUIDw0+0x10>)
 800a67e:	681b      	ldr	r3, [r3, #0]
}
 800a680:	4618      	mov	r0, r3
 800a682:	46bd      	mov	sp, r7
 800a684:	bc80      	pop	{r7}
 800a686:	4770      	bx	lr
 800a688:	1fff7590 	.word	0x1fff7590

0800a68c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800a690:	4b02      	ldr	r3, [pc, #8]	; (800a69c <HAL_GetUIDw1+0x10>)
 800a692:	681b      	ldr	r3, [r3, #0]
}
 800a694:	4618      	mov	r0, r3
 800a696:	46bd      	mov	sp, r7
 800a698:	bc80      	pop	{r7}
 800a69a:	4770      	bx	lr
 800a69c:	1fff7594 	.word	0x1fff7594

0800a6a0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800a6a4:	4b02      	ldr	r3, [pc, #8]	; (800a6b0 <HAL_GetUIDw2+0x10>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bc80      	pop	{r7}
 800a6ae:	4770      	bx	lr
 800a6b0:	1fff7598 	.word	0x1fff7598

0800a6b4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	431a      	orrs	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	601a      	str	r2, [r3, #0]
}
 800a6ce:	bf00      	nop
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bc80      	pop	{r7}
 800a6d6:	4770      	bx	lr

0800a6d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bc80      	pop	{r7}
 800a6f0:	4770      	bx	lr

0800a6f2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b085      	sub	sp, #20
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	60b9      	str	r1, [r7, #8]
 800a6fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	695a      	ldr	r2, [r3, #20]
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	f003 0304 	and.w	r3, r3, #4
 800a708:	2107      	movs	r1, #7
 800a70a:	fa01 f303 	lsl.w	r3, r1, r3
 800a70e:	43db      	mvns	r3, r3
 800a710:	401a      	ands	r2, r3
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	6879      	ldr	r1, [r7, #4]
 800a71a:	fa01 f303 	lsl.w	r3, r1, r3
 800a71e:	431a      	orrs	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800a724:	bf00      	nop
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	bc80      	pop	{r7}
 800a72c:	4770      	bx	lr

0800a72e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800a72e:	b480      	push	{r7}
 800a730:	b083      	sub	sp, #12
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	695a      	ldr	r2, [r3, #20]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	f003 0304 	and.w	r3, r3, #4
 800a742:	2107      	movs	r1, #7
 800a744:	fa01 f303 	lsl.w	r3, r1, r3
 800a748:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800a750:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a754:	4618      	mov	r0, r3
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	bc80      	pop	{r7}
 800a75c:	4770      	bx	lr

0800a75e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800a75e:	b480      	push	{r7}
 800a760:	b083      	sub	sp, #12
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a772:	2301      	movs	r3, #1
 800a774:	e000      	b.n	800a778 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bc80      	pop	{r7}
 800a780:	4770      	bx	lr

0800a782 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a782:	b480      	push	{r7}
 800a784:	b085      	sub	sp, #20
 800a786:	af00      	add	r7, sp, #0
 800a788:	60f8      	str	r0, [r7, #12]
 800a78a:	60b9      	str	r1, [r7, #8]
 800a78c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	f003 031f 	and.w	r3, r3, #31
 800a798:	210f      	movs	r1, #15
 800a79a:	fa01 f303 	lsl.w	r3, r1, r3
 800a79e:	43db      	mvns	r3, r3
 800a7a0:	401a      	ands	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	0e9b      	lsrs	r3, r3, #26
 800a7a6:	f003 010f 	and.w	r1, r3, #15
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f003 031f 	and.w	r3, r3, #31
 800a7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a7ba:	bf00      	nop
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bc80      	pop	{r7}
 800a7c2:	4770      	bx	lr

0800a7c4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a7d8:	431a      	orrs	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a7de:	bf00      	nop
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bc80      	pop	{r7}
 800a7e6:	4770      	bx	lr

0800a7e8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a7fc:	43db      	mvns	r3, r3
 800a7fe:	401a      	ands	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	bc80      	pop	{r7}
 800a80c:	4770      	bx	lr

0800a80e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800a80e:	b480      	push	{r7}
 800a810:	b085      	sub	sp, #20
 800a812:	af00      	add	r7, sp, #0
 800a814:	60f8      	str	r0, [r7, #12]
 800a816:	60b9      	str	r1, [r7, #8]
 800a818:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	695a      	ldr	r2, [r3, #20]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	021b      	lsls	r3, r3, #8
 800a822:	43db      	mvns	r3, r3
 800a824:	401a      	ands	r2, r3
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	0219      	lsls	r1, r3, #8
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	400b      	ands	r3, r1
 800a82e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800a832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a836:	431a      	orrs	r2, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800a83c:	bf00      	nop
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	bc80      	pop	{r7}
 800a844:	4770      	bx	lr

0800a846 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a856:	f023 0317 	bic.w	r3, r3, #23
 800a85a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	bc80      	pop	{r7}
 800a86a:	4770      	bx	lr

0800a86c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a87c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a880:	d101      	bne.n	800a886 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a882:	2301      	movs	r3, #1
 800a884:	e000      	b.n	800a888 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bc80      	pop	{r7}
 800a890:	4770      	bx	lr

0800a892 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a892:	b480      	push	{r7}
 800a894:	b083      	sub	sp, #12
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8a2:	f023 0317 	bic.w	r3, r3, #23
 800a8a6:	f043 0201 	orr.w	r2, r3, #1
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a8ae:	bf00      	nop
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bc80      	pop	{r7}
 800a8b6:	4770      	bx	lr

0800a8b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8c8:	f023 0317 	bic.w	r3, r3, #23
 800a8cc:	f043 0202 	orr.w	r2, r3, #2
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bc80      	pop	{r7}
 800a8dc:	4770      	bx	lr

0800a8de <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b083      	sub	sp, #12
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d101      	bne.n	800a8f6 <LL_ADC_IsEnabled+0x18>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e000      	b.n	800a8f8 <LL_ADC_IsEnabled+0x1a>
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bc80      	pop	{r7}
 800a900:	4770      	bx	lr

0800a902 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800a902:	b480      	push	{r7}
 800a904:	b083      	sub	sp, #12
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	f003 0302 	and.w	r3, r3, #2
 800a912:	2b02      	cmp	r3, #2
 800a914:	d101      	bne.n	800a91a <LL_ADC_IsDisableOngoing+0x18>
 800a916:	2301      	movs	r3, #1
 800a918:	e000      	b.n	800a91c <LL_ADC_IsDisableOngoing+0x1a>
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	bc80      	pop	{r7}
 800a924:	4770      	bx	lr

0800a926 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a936:	f023 0317 	bic.w	r3, r3, #23
 800a93a:	f043 0204 	orr.w	r2, r3, #4
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a942:	bf00      	nop
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	bc80      	pop	{r7}
 800a94a:	4770      	bx	lr

0800a94c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a95c:	f023 0317 	bic.w	r3, r3, #23
 800a960:	f043 0210 	orr.w	r2, r3, #16
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bc80      	pop	{r7}
 800a970:	4770      	bx	lr

0800a972 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a972:	b480      	push	{r7}
 800a974:	b083      	sub	sp, #12
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f003 0304 	and.w	r3, r3, #4
 800a982:	2b04      	cmp	r3, #4
 800a984:	d101      	bne.n	800a98a <LL_ADC_REG_IsConversionOngoing+0x18>
 800a986:	2301      	movs	r3, #1
 800a988:	e000      	b.n	800a98c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	bc80      	pop	{r7}
 800a994:	4770      	bx	lr
	...

0800a998 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b088      	sub	sp, #32
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d101      	bne.n	800a9ba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e17e      	b.n	800acb8 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d109      	bne.n	800a9dc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f7ff fa7d 	bl	8009ec8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7ff ff43 	bl	800a86c <LL_ADC_IsInternalRegulatorEnabled>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d115      	bne.n	800aa18 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff ff28 	bl	800a846 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a9f6:	4b9e      	ldr	r3, [pc, #632]	; (800ac70 <HAL_ADC_Init+0x2d8>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	099b      	lsrs	r3, r3, #6
 800a9fc:	4a9d      	ldr	r2, [pc, #628]	; (800ac74 <HAL_ADC_Init+0x2dc>)
 800a9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800aa02:	099b      	lsrs	r3, r3, #6
 800aa04:	3301      	adds	r3, #1
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800aa0a:	e002      	b.n	800aa12 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1f9      	bne.n	800aa0c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff ff25 	bl	800a86c <LL_ADC_IsInternalRegulatorEnabled>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10d      	bne.n	800aa44 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2c:	f043 0210 	orr.w	r2, r3, #16
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa38:	f043 0201 	orr.w	r2, r3, #1
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff ff92 	bl	800a972 <LL_ADC_REG_IsConversionOngoing>
 800aa4e:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa54:	f003 0310 	and.w	r3, r3, #16
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f040 8124 	bne.w	800aca6 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f040 8120 	bne.w	800aca6 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa6a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800aa6e:	f043 0202 	orr.w	r2, r3, #2
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7ff ff2f 	bl	800a8de <LL_ADC_IsEnabled>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f040 80a7 	bne.w	800abd6 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	7e1b      	ldrb	r3, [r3, #24]
 800aa90:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800aa92:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7e5b      	ldrb	r3, [r3, #25]
 800aa98:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800aa9a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	7e9b      	ldrb	r3, [r3, #26]
 800aaa0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800aaa2:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aaa8:	2a00      	cmp	r2, #0
 800aaaa:	d002      	beq.n	800aab2 <HAL_ADC_Init+0x11a>
 800aaac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aab0:	e000      	b.n	800aab4 <HAL_ADC_Init+0x11c>
 800aab2:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800aab4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800aaba:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	da04      	bge.n	800aace <HAL_ADC_Init+0x136>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aacc:	e001      	b.n	800aad2 <HAL_ADC_Init+0x13a>
 800aace:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800aad2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800aada:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800aadc:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d114      	bne.n	800ab18 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	7e9b      	ldrb	r3, [r3, #26]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d104      	bne.n	800ab00 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aafc:	61bb      	str	r3, [r7, #24]
 800aafe:	e00b      	b.n	800ab18 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab04:	f043 0220 	orr.w	r2, r3, #32
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab10:	f043 0201 	orr.w	r2, r3, #1
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d009      	beq.n	800ab34 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800ab2c:	4313      	orrs	r3, r2
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800ab3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	6812      	ldr	r2, [r2, #0]
 800ab46:	69b9      	ldr	r1, [r7, #24]
 800ab48:	430b      	orrs	r3, r1
 800ab4a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d111      	bne.n	800ab8e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800ab76:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800ab7c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800ab82:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	f043 0301 	orr.w	r3, r3, #1
 800ab8c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	691a      	ldr	r2, [r3, #16]
 800ab94:	4b38      	ldr	r3, [pc, #224]	; (800ac78 <HAL_ADC_Init+0x2e0>)
 800ab96:	4013      	ands	r3, r2
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	6812      	ldr	r2, [r2, #0]
 800ab9c:	6979      	ldr	r1, [r7, #20]
 800ab9e:	430b      	orrs	r3, r1
 800aba0:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800abaa:	d014      	beq.n	800abd6 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800abb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb4:	d00f      	beq.n	800abd6 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800abba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abbe:	d00a      	beq.n	800abd6 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800abc0:	4b2e      	ldr	r3, [pc, #184]	; (800ac7c <HAL_ADC_Init+0x2e4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800abd0:	492a      	ldr	r1, [pc, #168]	; (800ac7c <HAL_ADC_Init+0x2e4>)
 800abd2:	4313      	orrs	r3, r2
 800abd4:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6818      	ldr	r0, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abde:	461a      	mov	r2, r3
 800abe0:	2100      	movs	r1, #0
 800abe2:	f7ff fd86 	bl	800a6f2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6818      	ldr	r0, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abee:	461a      	mov	r2, r3
 800abf0:	4923      	ldr	r1, [pc, #140]	; (800ac80 <HAL_ADC_Init+0x2e8>)
 800abf2:	f7ff fd7e 	bl	800a6f2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	691b      	ldr	r3, [r3, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d108      	bne.n	800ac10 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f062 020f 	orn	r2, r2, #15
 800ac0c:	629a      	str	r2, [r3, #40]	; 0x28
 800ac0e:	e017      	b.n	800ac40 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac18:	d112      	bne.n	800ac40 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	69db      	ldr	r3, [r3, #28]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	f003 031c 	and.w	r3, r3, #28
 800ac2c:	f06f 020f 	mvn.w	r2, #15
 800ac30:	fa02 f103 	lsl.w	r1, r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2100      	movs	r1, #0
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7ff fd71 	bl	800a72e <LL_ADC_GetSamplingTimeCommonChannels>
 800ac4c:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d116      	bne.n	800ac84 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac60:	f023 0303 	bic.w	r3, r3, #3
 800ac64:	f043 0201 	orr.w	r2, r3, #1
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ac6c:	e023      	b.n	800acb6 <HAL_ADC_Init+0x31e>
 800ac6e:	bf00      	nop
 800ac70:	20000080 	.word	0x20000080
 800ac74:	053e2d63 	.word	0x053e2d63
 800ac78:	1ffffc02 	.word	0x1ffffc02
 800ac7c:	40012708 	.word	0x40012708
 800ac80:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac88:	f023 0312 	bic.w	r3, r3, #18
 800ac8c:	f043 0210 	orr.w	r2, r3, #16
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac98:	f043 0201 	orr.w	r2, r3, #1
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800aca4:	e007      	b.n	800acb6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acaa:	f043 0210 	orr.w	r2, r3, #16
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800acb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3720      	adds	r7, #32
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4618      	mov	r0, r3
 800acce:	f7ff fe50 	bl	800a972 <LL_ADC_REG_IsConversionOngoing>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d132      	bne.n	800ad3e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d101      	bne.n	800ace6 <HAL_ADC_Start+0x26>
 800ace2:	2302      	movs	r3, #2
 800ace4:	e02e      	b.n	800ad44 <HAL_ADC_Start+0x84>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fa8a 	bl	800b208 <ADC_Enable>
 800acf4:	4603      	mov	r3, r0
 800acf6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d11a      	bne.n	800ad34 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ad06:	f023 0301 	bic.w	r3, r3, #1
 800ad0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	221c      	movs	r2, #28
 800ad1e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7ff fdfa 	bl	800a926 <LL_ADC_REG_StartConversion>
 800ad32:	e006      	b.n	800ad42 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800ad3c:	e001      	b.n	800ad42 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800ad3e:	2302      	movs	r3, #2
 800ad40:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d101      	bne.n	800ad62 <HAL_ADC_Stop+0x16>
 800ad5e:	2302      	movs	r3, #2
 800ad60:	e022      	b.n	800ada8 <HAL_ADC_Stop+0x5c>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fa07 	bl	800b17e <ADC_ConversionStop>
 800ad70:	4603      	mov	r3, r0
 800ad72:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d111      	bne.n	800ad9e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 faca 	bl	800b314 <ADC_Disable>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d109      	bne.n	800ad9e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad92:	f023 0301 	bic.w	r3, r3, #1
 800ad96:	f043 0201 	orr.w	r2, r3, #1
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	695b      	ldr	r3, [r3, #20]
 800adbe:	2b08      	cmp	r3, #8
 800adc0:	d102      	bne.n	800adc8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800adc2:	2308      	movs	r3, #8
 800adc4:	60fb      	str	r3, [r7, #12]
 800adc6:	e010      	b.n	800adea <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d007      	beq.n	800ade6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adda:	f043 0220 	orr.w	r2, r3, #32
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	e077      	b.n	800aed6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800ade6:	2304      	movs	r3, #4
 800ade8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800adea:	f7ff fc17 	bl	800a61c <HAL_GetTick>
 800adee:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800adf0:	e021      	b.n	800ae36 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf8:	d01d      	beq.n	800ae36 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800adfa:	f7ff fc0f 	bl	800a61c <HAL_GetTick>
 800adfe:	4602      	mov	r2, r0
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d302      	bcc.n	800ae10 <HAL_ADC_PollForConversion+0x60>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d112      	bne.n	800ae36 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	4013      	ands	r3, r2
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae22:	f043 0204 	orr.w	r2, r3, #4
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e04f      	b.n	800aed6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d0d6      	beq.n	800adf2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff fc82 	bl	800a75e <LL_ADC_REG_IsTriggerSourceSWStart>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d031      	beq.n	800aec4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	7e9b      	ldrb	r3, [r3, #26]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d12d      	bne.n	800aec4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0308 	and.w	r3, r3, #8
 800ae72:	2b08      	cmp	r3, #8
 800ae74:	d126      	bne.n	800aec4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7ff fd79 	bl	800a972 <LL_ADC_REG_IsConversionOngoing>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d112      	bne.n	800aeac <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f022 020c 	bic.w	r2, r2, #12
 800ae94:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae9e:	f023 0301 	bic.w	r3, r3, #1
 800aea2:	f043 0201 	orr.w	r2, r3, #1
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	659a      	str	r2, [r3, #88]	; 0x58
 800aeaa:	e00b      	b.n	800aec4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeb0:	f043 0220 	orr.w	r2, r3, #32
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aebc:	f043 0201 	orr.w	r2, r3, #1
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7e1b      	ldrb	r3, [r3, #24]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d103      	bne.n	800aed4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	220c      	movs	r2, #12
 800aed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800aede:	b480      	push	{r7}
 800aee0:	b083      	sub	sp, #12
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bc80      	pop	{r7}
 800aef4:	4770      	bx	lr
	...

0800aef8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b088      	sub	sp, #32
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800af06:	2300      	movs	r3, #0
 800af08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d101      	bne.n	800af20 <HAL_ADC_ConfigChannel+0x28>
 800af1c:	2302      	movs	r3, #2
 800af1e:	e110      	b.n	800b142 <HAL_ADC_ConfigChannel+0x24a>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7ff fd20 	bl	800a972 <LL_ADC_REG_IsConversionOngoing>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	f040 80f7 	bne.w	800b128 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	2b02      	cmp	r3, #2
 800af40:	f000 80b1 	beq.w	800b0a6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af4c:	d004      	beq.n	800af58 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800af52:	4a7e      	ldr	r2, [pc, #504]	; (800b14c <HAL_ADC_ConfigChannel+0x254>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d108      	bne.n	800af6a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4619      	mov	r1, r3
 800af62:	4610      	mov	r0, r2
 800af64:	f7ff fc2e 	bl	800a7c4 <LL_ADC_REG_SetSequencerChAdd>
 800af68:	e041      	b.n	800afee <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f003 031f 	and.w	r3, r3, #31
 800af76:	210f      	movs	r1, #15
 800af78:	fa01 f303 	lsl.w	r3, r1, r3
 800af7c:	43db      	mvns	r3, r3
 800af7e:	401a      	ands	r2, r3
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d105      	bne.n	800af98 <HAL_ADC_ConfigChannel+0xa0>
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	0e9b      	lsrs	r3, r3, #26
 800af92:	f003 031f 	and.w	r3, r3, #31
 800af96:	e011      	b.n	800afbc <HAL_ADC_ConfigChannel+0xc4>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	fa93 f3a3 	rbit	r3, r3
 800afa4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800afb0:	2320      	movs	r3, #32
 800afb2:	e003      	b.n	800afbc <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	fab3 f383 	clz	r3, r3
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6849      	ldr	r1, [r1, #4]
 800afc0:	f001 011f 	and.w	r1, r1, #31
 800afc4:	408b      	lsls	r3, r1
 800afc6:	431a      	orrs	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	089b      	lsrs	r3, r3, #2
 800afd2:	1c5a      	adds	r2, r3, #1
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	69db      	ldr	r3, [r3, #28]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d808      	bhi.n	800afee <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6818      	ldr	r0, [r3, #0]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	6859      	ldr	r1, [r3, #4]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	461a      	mov	r2, r3
 800afea:	f7ff fbca 	bl	800a782 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6818      	ldr	r0, [r3, #0]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	6819      	ldr	r1, [r3, #0]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	461a      	mov	r2, r3
 800affc:	f7ff fc07 	bl	800a80e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f280 8097 	bge.w	800b138 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b00a:	4851      	ldr	r0, [pc, #324]	; (800b150 <HAL_ADC_ConfigChannel+0x258>)
 800b00c:	f7ff fb64 	bl	800a6d8 <LL_ADC_GetCommonPathInternalCh>
 800b010:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a4f      	ldr	r2, [pc, #316]	; (800b154 <HAL_ADC_ConfigChannel+0x25c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d120      	bne.n	800b05e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800b022:	2b00      	cmp	r3, #0
 800b024:	d11b      	bne.n	800b05e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b02c:	4619      	mov	r1, r3
 800b02e:	4848      	ldr	r0, [pc, #288]	; (800b150 <HAL_ADC_ConfigChannel+0x258>)
 800b030:	f7ff fb40 	bl	800a6b4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b034:	4b48      	ldr	r3, [pc, #288]	; (800b158 <HAL_ADC_ConfigChannel+0x260>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	099b      	lsrs	r3, r3, #6
 800b03a:	4a48      	ldr	r2, [pc, #288]	; (800b15c <HAL_ADC_ConfigChannel+0x264>)
 800b03c:	fba2 2303 	umull	r2, r3, r2, r3
 800b040:	099b      	lsrs	r3, r3, #6
 800b042:	1c5a      	adds	r2, r3, #1
 800b044:	4613      	mov	r3, r2
 800b046:	005b      	lsls	r3, r3, #1
 800b048:	4413      	add	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800b04e:	e002      	b.n	800b056 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	3b01      	subs	r3, #1
 800b054:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1f9      	bne.n	800b050 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800b05c:	e06c      	b.n	800b138 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a3f      	ldr	r2, [pc, #252]	; (800b160 <HAL_ADC_ConfigChannel+0x268>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d10c      	bne.n	800b082 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d107      	bne.n	800b082 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b078:	4619      	mov	r1, r3
 800b07a:	4835      	ldr	r0, [pc, #212]	; (800b150 <HAL_ADC_ConfigChannel+0x258>)
 800b07c:	f7ff fb1a 	bl	800a6b4 <LL_ADC_SetCommonPathInternalCh>
 800b080:	e05a      	b.n	800b138 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a37      	ldr	r2, [pc, #220]	; (800b164 <HAL_ADC_ConfigChannel+0x26c>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d155      	bne.n	800b138 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800b092:	2b00      	cmp	r3, #0
 800b094:	d150      	bne.n	800b138 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b09c:	4619      	mov	r1, r3
 800b09e:	482c      	ldr	r0, [pc, #176]	; (800b150 <HAL_ADC_ConfigChannel+0x258>)
 800b0a0:	f7ff fb08 	bl	800a6b4 <LL_ADC_SetCommonPathInternalCh>
 800b0a4:	e048      	b.n	800b138 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0ae:	d004      	beq.n	800b0ba <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800b0b4:	4a25      	ldr	r2, [pc, #148]	; (800b14c <HAL_ADC_ConfigChannel+0x254>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d107      	bne.n	800b0ca <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	f7ff fb8f 	bl	800a7e8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	da32      	bge.n	800b138 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b0d2:	481f      	ldr	r0, [pc, #124]	; (800b150 <HAL_ADC_ConfigChannel+0x258>)
 800b0d4:	f7ff fb00 	bl	800a6d8 <LL_ADC_GetCommonPathInternalCh>
 800b0d8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a1d      	ldr	r2, [pc, #116]	; (800b154 <HAL_ADC_ConfigChannel+0x25c>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d107      	bne.n	800b0f4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	4818      	ldr	r0, [pc, #96]	; (800b150 <HAL_ADC_ConfigChannel+0x258>)
 800b0ee:	f7ff fae1 	bl	800a6b4 <LL_ADC_SetCommonPathInternalCh>
 800b0f2:	e021      	b.n	800b138 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a19      	ldr	r2, [pc, #100]	; (800b160 <HAL_ADC_ConfigChannel+0x268>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d107      	bne.n	800b10e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b104:	4619      	mov	r1, r3
 800b106:	4812      	ldr	r0, [pc, #72]	; (800b150 <HAL_ADC_ConfigChannel+0x258>)
 800b108:	f7ff fad4 	bl	800a6b4 <LL_ADC_SetCommonPathInternalCh>
 800b10c:	e014      	b.n	800b138 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a14      	ldr	r2, [pc, #80]	; (800b164 <HAL_ADC_ConfigChannel+0x26c>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d10f      	bne.n	800b138 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b11e:	4619      	mov	r1, r3
 800b120:	480b      	ldr	r0, [pc, #44]	; (800b150 <HAL_ADC_ConfigChannel+0x258>)
 800b122:	f7ff fac7 	bl	800a6b4 <LL_ADC_SetCommonPathInternalCh>
 800b126:	e007      	b.n	800b138 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b12c:	f043 0220 	orr.w	r2, r3, #32
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800b140:	7ffb      	ldrb	r3, [r7, #31]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3720      	adds	r7, #32
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	80000004 	.word	0x80000004
 800b150:	40012708 	.word	0x40012708
 800b154:	b0001000 	.word	0xb0001000
 800b158:	20000080 	.word	0x20000080
 800b15c:	053e2d63 	.word	0x053e2d63
 800b160:	b8004000 	.word	0xb8004000
 800b164:	b4002000 	.word	0xb4002000

0800b168 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b174:	4618      	mov	r0, r3
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	bc80      	pop	{r7}
 800b17c:	4770      	bx	lr

0800b17e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff fbf1 	bl	800a972 <LL_ADC_REG_IsConversionOngoing>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d033      	beq.n	800b1fe <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7ff fbb1 	bl	800a902 <LL_ADC_IsDisableOngoing>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d104      	bne.n	800b1b0 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7ff fbce 	bl	800a94c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b1b0:	f7ff fa34 	bl	800a61c <HAL_GetTick>
 800b1b4:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800b1b6:	e01b      	b.n	800b1f0 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800b1b8:	f7ff fa30 	bl	800a61c <HAL_GetTick>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d914      	bls.n	800b1f0 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	f003 0304 	and.w	r3, r3, #4
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00d      	beq.n	800b1f0 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1d8:	f043 0210 	orr.w	r2, r3, #16
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e4:	f043 0201 	orr.w	r2, r3, #1
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e007      	b.n	800b200 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	f003 0304 	and.w	r3, r3, #4
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1dc      	bne.n	800b1b8 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b210:	2300      	movs	r3, #0
 800b212:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff fb60 	bl	800a8de <LL_ADC_IsEnabled>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d169      	bne.n	800b2f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	689a      	ldr	r2, [r3, #8]
 800b22a:	4b36      	ldr	r3, [pc, #216]	; (800b304 <ADC_Enable+0xfc>)
 800b22c:	4013      	ands	r3, r2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00d      	beq.n	800b24e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b236:	f043 0210 	orr.w	r2, r3, #16
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b242:	f043 0201 	orr.w	r2, r3, #1
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e055      	b.n	800b2fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff fb1d 	bl	800a892 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800b258:	482b      	ldr	r0, [pc, #172]	; (800b308 <ADC_Enable+0x100>)
 800b25a:	f7ff fa3d 	bl	800a6d8 <LL_ADC_GetCommonPathInternalCh>
 800b25e:	4603      	mov	r3, r0
 800b260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00f      	beq.n	800b288 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b268:	4b28      	ldr	r3, [pc, #160]	; (800b30c <ADC_Enable+0x104>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	099b      	lsrs	r3, r3, #6
 800b26e:	4a28      	ldr	r2, [pc, #160]	; (800b310 <ADC_Enable+0x108>)
 800b270:	fba2 2303 	umull	r2, r3, r2, r3
 800b274:	099b      	lsrs	r3, r3, #6
 800b276:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800b278:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b27a:	e002      	b.n	800b282 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	3b01      	subs	r3, #1
 800b280:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1f9      	bne.n	800b27c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	7e5b      	ldrb	r3, [r3, #25]
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d033      	beq.n	800b2f8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800b290:	f7ff f9c4 	bl	800a61c <HAL_GetTick>
 800b294:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b296:	e028      	b.n	800b2ea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff fb1e 	bl	800a8de <LL_ADC_IsEnabled>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d104      	bne.n	800b2b2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff faf0 	bl	800a892 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b2b2:	f7ff f9b3 	bl	800a61c <HAL_GetTick>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d914      	bls.n	800b2ea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 0301 	and.w	r3, r3, #1
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d00d      	beq.n	800b2ea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2d2:	f043 0210 	orr.w	r2, r3, #16
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2de:	f043 0201 	orr.w	r2, r3, #1
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e007      	b.n	800b2fa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f003 0301 	and.w	r3, r3, #1
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d1cf      	bne.n	800b298 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	80000017 	.word	0x80000017
 800b308:	40012708 	.word	0x40012708
 800b30c:	20000080 	.word	0x20000080
 800b310:	053e2d63 	.word	0x053e2d63

0800b314 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4618      	mov	r0, r3
 800b322:	f7ff faee 	bl	800a902 <LL_ADC_IsDisableOngoing>
 800b326:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7ff fad6 	bl	800a8de <LL_ADC_IsEnabled>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d047      	beq.n	800b3c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d144      	bne.n	800b3c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f003 0305 	and.w	r3, r3, #5
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d10c      	bne.n	800b366 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4618      	mov	r0, r3
 800b352:	f7ff fab1 	bl	800a8b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2203      	movs	r2, #3
 800b35c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b35e:	f7ff f95d 	bl	800a61c <HAL_GetTick>
 800b362:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b364:	e029      	b.n	800b3ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36a:	f043 0210 	orr.w	r2, r3, #16
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b376:	f043 0201 	orr.w	r2, r3, #1
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e023      	b.n	800b3ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b382:	f7ff f94b 	bl	800a61c <HAL_GetTick>
 800b386:	4602      	mov	r2, r0
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d914      	bls.n	800b3ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f003 0301 	and.w	r3, r3, #1
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00d      	beq.n	800b3ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3a2:	f043 0210 	orr.w	r2, r3, #16
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ae:	f043 0201 	orr.w	r2, r3, #1
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e007      	b.n	800b3ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f003 0301 	and.w	r3, r3, #1
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1dc      	bne.n	800b382 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <LL_ADC_SetCalibrationFactor>:
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b083      	sub	sp, #12
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b3e2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	431a      	orrs	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bc80      	pop	{r7}
 800b3f8:	4770      	bx	lr

0800b3fa <LL_ADC_GetCalibrationFactor>:
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	bc80      	pop	{r7}
 800b414:	4770      	bx	lr

0800b416 <LL_ADC_Enable>:
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b426:	f023 0317 	bic.w	r3, r3, #23
 800b42a:	f043 0201 	orr.w	r2, r3, #1
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	609a      	str	r2, [r3, #8]
}
 800b432:	bf00      	nop
 800b434:	370c      	adds	r7, #12
 800b436:	46bd      	mov	sp, r7
 800b438:	bc80      	pop	{r7}
 800b43a:	4770      	bx	lr

0800b43c <LL_ADC_Disable>:
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b44c:	f023 0317 	bic.w	r3, r3, #23
 800b450:	f043 0202 	orr.w	r2, r3, #2
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	609a      	str	r2, [r3, #8]
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bc80      	pop	{r7}
 800b460:	4770      	bx	lr

0800b462 <LL_ADC_IsEnabled>:
{
 800b462:	b480      	push	{r7}
 800b464:	b083      	sub	sp, #12
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b01      	cmp	r3, #1
 800b474:	d101      	bne.n	800b47a <LL_ADC_IsEnabled+0x18>
 800b476:	2301      	movs	r3, #1
 800b478:	e000      	b.n	800b47c <LL_ADC_IsEnabled+0x1a>
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	bc80      	pop	{r7}
 800b484:	4770      	bx	lr

0800b486 <LL_ADC_StartCalibration>:
{
 800b486:	b480      	push	{r7}
 800b488:	b083      	sub	sp, #12
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b496:	f023 0317 	bic.w	r3, r3, #23
 800b49a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	609a      	str	r2, [r3, #8]
}
 800b4a2:	bf00      	nop
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bc80      	pop	{r7}
 800b4aa:	4770      	bx	lr

0800b4ac <LL_ADC_IsCalibrationOnGoing>:
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4c0:	d101      	bne.n	800b4c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e000      	b.n	800b4c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bc80      	pop	{r7}
 800b4d0:	4770      	bx	lr

0800b4d2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b088      	sub	sp, #32
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d101      	bne.n	800b4f0 <HAL_ADCEx_Calibration_Start+0x1e>
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	e0b9      	b.n	800b664 <HAL_ADCEx_Calibration_Start+0x192>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7ff ff0b 	bl	800b314 <ADC_Disable>
 800b4fe:	4603      	mov	r3, r0
 800b500:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff ffab 	bl	800b462 <LL_ADC_IsEnabled>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f040 809d 	bne.w	800b64e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b518:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b51c:	f043 0202 	orr.w	r2, r3, #2
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	f248 0303 	movw	r3, #32771	; 0x8003
 800b52e:	4013      	ands	r3, r2
 800b530:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	6812      	ldr	r2, [r2, #0]
 800b53c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b540:	f023 0303 	bic.w	r3, r3, #3
 800b544:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800b546:	2300      	movs	r3, #0
 800b548:	61fb      	str	r3, [r7, #28]
 800b54a:	e02e      	b.n	800b5aa <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4618      	mov	r0, r3
 800b552:	f7ff ff98 	bl	800b486 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b556:	e014      	b.n	800b582 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	3301      	adds	r3, #1
 800b55c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800b564:	d30d      	bcc.n	800b582 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56a:	f023 0312 	bic.w	r3, r3, #18
 800b56e:	f043 0210 	orr.w	r2, r3, #16
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e070      	b.n	800b664 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4618      	mov	r0, r3
 800b588:	f7ff ff90 	bl	800b4ac <LL_ADC_IsCalibrationOnGoing>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e2      	bne.n	800b558 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff ff2f 	bl	800b3fa <LL_ADC_GetCalibrationFactor>
 800b59c:	4602      	mov	r2, r0
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	61fb      	str	r3, [r7, #28]
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	2b07      	cmp	r3, #7
 800b5ae:	d9cd      	bls.n	800b54c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800b5b0:	69ba      	ldr	r2, [r7, #24]
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b8:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7ff ff29 	bl	800b416 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	69b9      	ldr	r1, [r7, #24]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff ff01 	bl	800b3d2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff ff31 	bl	800b43c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b5da:	f7ff f81f 	bl	800a61c <HAL_GetTick>
 800b5de:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b5e0:	e01c      	b.n	800b61c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b5e2:	f7ff f81b 	bl	800a61c <HAL_GetTick>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d915      	bls.n	800b61c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7ff ff34 	bl	800b462 <LL_ADC_IsEnabled>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00d      	beq.n	800b61c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b604:	f043 0210 	orr.w	r2, r3, #16
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b610:	f043 0201 	orr.w	r2, r3, #1
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e023      	b.n	800b664 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4618      	mov	r0, r3
 800b622:	f7ff ff1e 	bl	800b462 <LL_ADC_IsEnabled>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1da      	bne.n	800b5e2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68d9      	ldr	r1, [r3, #12]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	430a      	orrs	r2, r1
 800b63a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b640:	f023 0303 	bic.w	r3, r3, #3
 800b644:	f043 0201 	orr.w	r2, r3, #1
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	659a      	str	r2, [r3, #88]	; 0x58
 800b64c:	e005      	b.n	800b65a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b652:	f043 0210 	orr.w	r2, r3, #16
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800b662:	7dfb      	ldrb	r3, [r7, #23]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3720      	adds	r7, #32
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f003 0307 	and.w	r3, r3, #7
 800b67a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b67c:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <__NVIC_SetPriorityGrouping+0x44>)
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b688:	4013      	ands	r3, r2
 800b68a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b69c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b69e:	4a04      	ldr	r2, [pc, #16]	; (800b6b0 <__NVIC_SetPriorityGrouping+0x44>)
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	60d3      	str	r3, [r2, #12]
}
 800b6a4:	bf00      	nop
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bc80      	pop	{r7}
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	e000ed00 	.word	0xe000ed00

0800b6b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b6b8:	4b04      	ldr	r3, [pc, #16]	; (800b6cc <__NVIC_GetPriorityGrouping+0x18>)
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	0a1b      	lsrs	r3, r3, #8
 800b6be:	f003 0307 	and.w	r3, r3, #7
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bc80      	pop	{r7}
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	e000ed00 	.word	0xe000ed00

0800b6d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	db0b      	blt.n	800b6fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	f003 021f 	and.w	r2, r3, #31
 800b6e8:	4906      	ldr	r1, [pc, #24]	; (800b704 <__NVIC_EnableIRQ+0x34>)
 800b6ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ee:	095b      	lsrs	r3, r3, #5
 800b6f0:	2001      	movs	r0, #1
 800b6f2:	fa00 f202 	lsl.w	r2, r0, r2
 800b6f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bc80      	pop	{r7}
 800b702:	4770      	bx	lr
 800b704:	e000e100 	.word	0xe000e100

0800b708 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b716:	2b00      	cmp	r3, #0
 800b718:	db12      	blt.n	800b740 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	f003 021f 	and.w	r2, r3, #31
 800b720:	490a      	ldr	r1, [pc, #40]	; (800b74c <__NVIC_DisableIRQ+0x44>)
 800b722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b726:	095b      	lsrs	r3, r3, #5
 800b728:	2001      	movs	r0, #1
 800b72a:	fa00 f202 	lsl.w	r2, r0, r2
 800b72e:	3320      	adds	r3, #32
 800b730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b734:	f3bf 8f4f 	dsb	sy
}
 800b738:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b73a:	f3bf 8f6f 	isb	sy
}
 800b73e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	bc80      	pop	{r7}
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	e000e100 	.word	0xe000e100

0800b750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	6039      	str	r1, [r7, #0]
 800b75a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b75c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b760:	2b00      	cmp	r3, #0
 800b762:	db0a      	blt.n	800b77a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	b2da      	uxtb	r2, r3
 800b768:	490c      	ldr	r1, [pc, #48]	; (800b79c <__NVIC_SetPriority+0x4c>)
 800b76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b76e:	0112      	lsls	r2, r2, #4
 800b770:	b2d2      	uxtb	r2, r2
 800b772:	440b      	add	r3, r1
 800b774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b778:	e00a      	b.n	800b790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	4908      	ldr	r1, [pc, #32]	; (800b7a0 <__NVIC_SetPriority+0x50>)
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	f003 030f 	and.w	r3, r3, #15
 800b786:	3b04      	subs	r3, #4
 800b788:	0112      	lsls	r2, r2, #4
 800b78a:	b2d2      	uxtb	r2, r2
 800b78c:	440b      	add	r3, r1
 800b78e:	761a      	strb	r2, [r3, #24]
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	bc80      	pop	{r7}
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	e000e100 	.word	0xe000e100
 800b7a0:	e000ed00 	.word	0xe000ed00

0800b7a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b089      	sub	sp, #36	; 0x24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f003 0307 	and.w	r3, r3, #7
 800b7b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	f1c3 0307 	rsb	r3, r3, #7
 800b7be:	2b04      	cmp	r3, #4
 800b7c0:	bf28      	it	cs
 800b7c2:	2304      	movcs	r3, #4
 800b7c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	2b06      	cmp	r3, #6
 800b7cc:	d902      	bls.n	800b7d4 <NVIC_EncodePriority+0x30>
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	3b03      	subs	r3, #3
 800b7d2:	e000      	b.n	800b7d6 <NVIC_EncodePriority+0x32>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e2:	43da      	mvns	r2, r3
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	401a      	ands	r2, r3
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b7ec:	f04f 31ff 	mov.w	r1, #4294967295
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b7f6:	43d9      	mvns	r1, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b7fc:	4313      	orrs	r3, r2
         );
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3724      	adds	r7, #36	; 0x24
 800b802:	46bd      	mov	sp, r7
 800b804:	bc80      	pop	{r7}
 800b806:	4770      	bx	lr

0800b808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff ff2b 	bl	800b66c <__NVIC_SetPriorityGrouping>
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b086      	sub	sp, #24
 800b822:	af00      	add	r7, sp, #0
 800b824:	4603      	mov	r3, r0
 800b826:	60b9      	str	r1, [r7, #8]
 800b828:	607a      	str	r2, [r7, #4]
 800b82a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b82c:	f7ff ff42 	bl	800b6b4 <__NVIC_GetPriorityGrouping>
 800b830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	68b9      	ldr	r1, [r7, #8]
 800b836:	6978      	ldr	r0, [r7, #20]
 800b838:	f7ff ffb4 	bl	800b7a4 <NVIC_EncodePriority>
 800b83c:	4602      	mov	r2, r0
 800b83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b842:	4611      	mov	r1, r2
 800b844:	4618      	mov	r0, r3
 800b846:	f7ff ff83 	bl	800b750 <__NVIC_SetPriority>
}
 800b84a:	bf00      	nop
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b082      	sub	sp, #8
 800b856:	af00      	add	r7, sp, #0
 800b858:	4603      	mov	r3, r0
 800b85a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b85c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b860:	4618      	mov	r0, r3
 800b862:	f7ff ff35 	bl	800b6d0 <__NVIC_EnableIRQ>
}
 800b866:	bf00      	nop
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	4603      	mov	r3, r0
 800b876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7ff ff43 	bl	800b708 <__NVIC_DisableIRQ>
}
 800b882:	bf00      	nop
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b083      	sub	sp, #12
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e04f      	b.n	800b93c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d008      	beq.n	800b8ba <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2204      	movs	r2, #4
 800b8ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e040      	b.n	800b93c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f022 020e 	bic.w	r2, r2, #14
 800b8c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f022 0201 	bic.w	r2, r2, #1
 800b8e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ee:	f003 021c 	and.w	r2, r3, #28
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f6:	2101      	movs	r1, #1
 800b8f8:	fa01 f202 	lsl.w	r2, r1, r2
 800b8fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b906:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00c      	beq.n	800b92a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b91a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b91e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b928:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	bc80      	pop	{r7}
 800b944:	4770      	bx	lr

0800b946 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d005      	beq.n	800b96a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2204      	movs	r2, #4
 800b962:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	73fb      	strb	r3, [r7, #15]
 800b968:	e047      	b.n	800b9fa <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 020e 	bic.w	r2, r2, #14
 800b978:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f022 0201 	bic.w	r2, r2, #1
 800b988:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b998:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b99e:	f003 021c 	and.w	r2, r3, #28
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	fa01 f202 	lsl.w	r2, r1, r2
 800b9ac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b9b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00c      	beq.n	800b9da <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b9d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	4798      	blx	r3
    }
  }
  return status;
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b087      	sub	sp, #28
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ba12:	e140      	b.n	800bc96 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	2101      	movs	r1, #1
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ba20:	4013      	ands	r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 8132 	beq.w	800bc90 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	f003 0303 	and.w	r3, r3, #3
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d005      	beq.n	800ba44 <HAL_GPIO_Init+0x40>
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	f003 0303 	and.w	r3, r3, #3
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d130      	bne.n	800baa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	005b      	lsls	r3, r3, #1
 800ba4e:	2203      	movs	r2, #3
 800ba50:	fa02 f303 	lsl.w	r3, r2, r3
 800ba54:	43db      	mvns	r3, r3
 800ba56:	693a      	ldr	r2, [r7, #16]
 800ba58:	4013      	ands	r3, r2
 800ba5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	68da      	ldr	r2, [r3, #12]
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	005b      	lsls	r3, r3, #1
 800ba64:	fa02 f303 	lsl.w	r3, r2, r3
 800ba68:	693a      	ldr	r2, [r7, #16]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba82:	43db      	mvns	r3, r3
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	4013      	ands	r3, r2
 800ba88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	091b      	lsrs	r3, r3, #4
 800ba90:	f003 0201 	and.w	r2, r3, #1
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	fa02 f303 	lsl.w	r3, r2, r3
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	693a      	ldr	r2, [r7, #16]
 800baa4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	685b      	ldr	r3, [r3, #4]
 800baaa:	f003 0303 	and.w	r3, r3, #3
 800baae:	2b03      	cmp	r3, #3
 800bab0:	d017      	beq.n	800bae2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	2203      	movs	r2, #3
 800babe:	fa02 f303 	lsl.w	r3, r2, r3
 800bac2:	43db      	mvns	r3, r3
 800bac4:	693a      	ldr	r2, [r7, #16]
 800bac6:	4013      	ands	r3, r2
 800bac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	689a      	ldr	r2, [r3, #8]
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	fa02 f303 	lsl.w	r3, r2, r3
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	4313      	orrs	r3, r2
 800bada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	f003 0303 	and.w	r3, r3, #3
 800baea:	2b02      	cmp	r3, #2
 800baec:	d123      	bne.n	800bb36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	08da      	lsrs	r2, r3, #3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	3208      	adds	r2, #8
 800baf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	f003 0307 	and.w	r3, r3, #7
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	220f      	movs	r2, #15
 800bb06:	fa02 f303 	lsl.w	r3, r2, r3
 800bb0a:	43db      	mvns	r3, r3
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	691a      	ldr	r2, [r3, #16]
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f003 0307 	and.w	r3, r3, #7
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	08da      	lsrs	r2, r3, #3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	3208      	adds	r2, #8
 800bb30:	6939      	ldr	r1, [r7, #16]
 800bb32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	2203      	movs	r2, #3
 800bb42:	fa02 f303 	lsl.w	r3, r2, r3
 800bb46:	43db      	mvns	r3, r3
 800bb48:	693a      	ldr	r2, [r7, #16]
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f003 0203 	and.w	r2, r3, #3
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	005b      	lsls	r3, r3, #1
 800bb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f000 808c 	beq.w	800bc90 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800bb78:	4a4e      	ldr	r2, [pc, #312]	; (800bcb4 <HAL_GPIO_Init+0x2b0>)
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	089b      	lsrs	r3, r3, #2
 800bb7e:	3302      	adds	r3, #2
 800bb80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f003 0303 	and.w	r3, r3, #3
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	2207      	movs	r2, #7
 800bb90:	fa02 f303 	lsl.w	r3, r2, r3
 800bb94:	43db      	mvns	r3, r3
 800bb96:	693a      	ldr	r2, [r7, #16]
 800bb98:	4013      	ands	r3, r2
 800bb9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bba2:	d00d      	beq.n	800bbc0 <HAL_GPIO_Init+0x1bc>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a44      	ldr	r2, [pc, #272]	; (800bcb8 <HAL_GPIO_Init+0x2b4>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d007      	beq.n	800bbbc <HAL_GPIO_Init+0x1b8>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a43      	ldr	r2, [pc, #268]	; (800bcbc <HAL_GPIO_Init+0x2b8>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d101      	bne.n	800bbb8 <HAL_GPIO_Init+0x1b4>
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	e004      	b.n	800bbc2 <HAL_GPIO_Init+0x1be>
 800bbb8:	2307      	movs	r3, #7
 800bbba:	e002      	b.n	800bbc2 <HAL_GPIO_Init+0x1be>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e000      	b.n	800bbc2 <HAL_GPIO_Init+0x1be>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	697a      	ldr	r2, [r7, #20]
 800bbc4:	f002 0203 	and.w	r2, r2, #3
 800bbc8:	0092      	lsls	r2, r2, #2
 800bbca:	4093      	lsls	r3, r2
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800bbd2:	4938      	ldr	r1, [pc, #224]	; (800bcb4 <HAL_GPIO_Init+0x2b0>)
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	089b      	lsrs	r3, r3, #2
 800bbd8:	3302      	adds	r3, #2
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bbe0:	4b37      	ldr	r3, [pc, #220]	; (800bcc0 <HAL_GPIO_Init+0x2bc>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	43db      	mvns	r3, r3
 800bbea:	693a      	ldr	r2, [r7, #16]
 800bbec:	4013      	ands	r3, r2
 800bbee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d003      	beq.n	800bc04 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bc04:	4a2e      	ldr	r2, [pc, #184]	; (800bcc0 <HAL_GPIO_Init+0x2bc>)
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bc0a:	4b2d      	ldr	r3, [pc, #180]	; (800bcc0 <HAL_GPIO_Init+0x2bc>)
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	43db      	mvns	r3, r3
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	4013      	ands	r3, r2
 800bc18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800bc26:	693a      	ldr	r2, [r7, #16]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bc2e:	4a24      	ldr	r2, [pc, #144]	; (800bcc0 <HAL_GPIO_Init+0x2bc>)
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800bc34:	4b22      	ldr	r3, [pc, #136]	; (800bcc0 <HAL_GPIO_Init+0x2bc>)
 800bc36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc3a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	43db      	mvns	r3, r3
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	4013      	ands	r3, r2
 800bc44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800bc52:	693a      	ldr	r2, [r7, #16]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800bc5a:	4a19      	ldr	r2, [pc, #100]	; (800bcc0 <HAL_GPIO_Init+0x2bc>)
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800bc62:	4b17      	ldr	r3, [pc, #92]	; (800bcc0 <HAL_GPIO_Init+0x2bc>)
 800bc64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc68:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	43db      	mvns	r3, r3
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	4013      	ands	r3, r2
 800bc72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d003      	beq.n	800bc88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800bc80:	693a      	ldr	r2, [r7, #16]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	4313      	orrs	r3, r2
 800bc86:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800bc88:	4a0d      	ldr	r2, [pc, #52]	; (800bcc0 <HAL_GPIO_Init+0x2bc>)
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	3301      	adds	r3, #1
 800bc94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	fa22 f303 	lsr.w	r3, r2, r3
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f47f aeb7 	bne.w	800ba14 <HAL_GPIO_Init+0x10>
  }
}
 800bca6:	bf00      	nop
 800bca8:	bf00      	nop
 800bcaa:	371c      	adds	r7, #28
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bc80      	pop	{r7}
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	40010000 	.word	0x40010000
 800bcb8:	48000400 	.word	0x48000400
 800bcbc:	48000800 	.word	0x48000800
 800bcc0:	58000800 	.word	0x58000800

0800bcc4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b087      	sub	sp, #28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800bcd2:	e0af      	b.n	800be34 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	4013      	ands	r3, r2
 800bce0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 80a2 	beq.w	800be2e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800bcea:	4a59      	ldr	r2, [pc, #356]	; (800be50 <HAL_GPIO_DeInit+0x18c>)
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	089b      	lsrs	r3, r3, #2
 800bcf0:	3302      	adds	r3, #2
 800bcf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcf6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f003 0303 	and.w	r3, r3, #3
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	2207      	movs	r2, #7
 800bd02:	fa02 f303 	lsl.w	r3, r2, r3
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	4013      	ands	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bd12:	d00d      	beq.n	800bd30 <HAL_GPIO_DeInit+0x6c>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a4f      	ldr	r2, [pc, #316]	; (800be54 <HAL_GPIO_DeInit+0x190>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d007      	beq.n	800bd2c <HAL_GPIO_DeInit+0x68>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a4e      	ldr	r2, [pc, #312]	; (800be58 <HAL_GPIO_DeInit+0x194>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d101      	bne.n	800bd28 <HAL_GPIO_DeInit+0x64>
 800bd24:	2302      	movs	r3, #2
 800bd26:	e004      	b.n	800bd32 <HAL_GPIO_DeInit+0x6e>
 800bd28:	2307      	movs	r3, #7
 800bd2a:	e002      	b.n	800bd32 <HAL_GPIO_DeInit+0x6e>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e000      	b.n	800bd32 <HAL_GPIO_DeInit+0x6e>
 800bd30:	2300      	movs	r3, #0
 800bd32:	697a      	ldr	r2, [r7, #20]
 800bd34:	f002 0203 	and.w	r2, r2, #3
 800bd38:	0092      	lsls	r2, r2, #2
 800bd3a:	4093      	lsls	r3, r2
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d136      	bne.n	800bdb0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800bd42:	4b46      	ldr	r3, [pc, #280]	; (800be5c <HAL_GPIO_DeInit+0x198>)
 800bd44:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	43db      	mvns	r3, r3
 800bd4c:	4943      	ldr	r1, [pc, #268]	; (800be5c <HAL_GPIO_DeInit+0x198>)
 800bd4e:	4013      	ands	r3, r2
 800bd50:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800bd54:	4b41      	ldr	r3, [pc, #260]	; (800be5c <HAL_GPIO_DeInit+0x198>)
 800bd56:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	43db      	mvns	r3, r3
 800bd5e:	493f      	ldr	r1, [pc, #252]	; (800be5c <HAL_GPIO_DeInit+0x198>)
 800bd60:	4013      	ands	r3, r2
 800bd62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800bd66:	4b3d      	ldr	r3, [pc, #244]	; (800be5c <HAL_GPIO_DeInit+0x198>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	43db      	mvns	r3, r3
 800bd6e:	493b      	ldr	r1, [pc, #236]	; (800be5c <HAL_GPIO_DeInit+0x198>)
 800bd70:	4013      	ands	r3, r2
 800bd72:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800bd74:	4b39      	ldr	r3, [pc, #228]	; (800be5c <HAL_GPIO_DeInit+0x198>)
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	43db      	mvns	r3, r3
 800bd7c:	4937      	ldr	r1, [pc, #220]	; (800be5c <HAL_GPIO_DeInit+0x198>)
 800bd7e:	4013      	ands	r3, r2
 800bd80:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f003 0303 	and.w	r3, r3, #3
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	2207      	movs	r2, #7
 800bd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd90:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800bd92:	4a2f      	ldr	r2, [pc, #188]	; (800be50 <HAL_GPIO_DeInit+0x18c>)
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	089b      	lsrs	r3, r3, #2
 800bd98:	3302      	adds	r3, #2
 800bd9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	43da      	mvns	r2, r3
 800bda2:	482b      	ldr	r0, [pc, #172]	; (800be50 <HAL_GPIO_DeInit+0x18c>)
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	089b      	lsrs	r3, r3, #2
 800bda8:	400a      	ands	r2, r1
 800bdaa:	3302      	adds	r3, #2
 800bdac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	005b      	lsls	r3, r3, #1
 800bdb8:	2103      	movs	r1, #3
 800bdba:	fa01 f303 	lsl.w	r3, r1, r3
 800bdbe:	431a      	orrs	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	08da      	lsrs	r2, r3, #3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	3208      	adds	r2, #8
 800bdcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	f003 0307 	and.w	r3, r3, #7
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	220f      	movs	r2, #15
 800bdda:	fa02 f303 	lsl.w	r3, r2, r3
 800bdde:	43db      	mvns	r3, r3
 800bde0:	697a      	ldr	r2, [r7, #20]
 800bde2:	08d2      	lsrs	r2, r2, #3
 800bde4:	4019      	ands	r1, r3
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	3208      	adds	r2, #8
 800bdea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	689a      	ldr	r2, [r3, #8]
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	2103      	movs	r1, #3
 800bdf8:	fa01 f303 	lsl.w	r3, r1, r3
 800bdfc:	43db      	mvns	r3, r3
 800bdfe:	401a      	ands	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	2101      	movs	r1, #1
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	fa01 f303 	lsl.w	r3, r1, r3
 800be10:	43db      	mvns	r3, r3
 800be12:	401a      	ands	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	68da      	ldr	r2, [r3, #12]
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	2103      	movs	r1, #3
 800be22:	fa01 f303 	lsl.w	r3, r1, r3
 800be26:	43db      	mvns	r3, r3
 800be28:	401a      	ands	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	3301      	adds	r3, #1
 800be32:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	fa22 f303 	lsr.w	r3, r2, r3
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f47f af49 	bne.w	800bcd4 <HAL_GPIO_DeInit+0x10>
  }
}
 800be42:	bf00      	nop
 800be44:	bf00      	nop
 800be46:	371c      	adds	r7, #28
 800be48:	46bd      	mov	sp, r7
 800be4a:	bc80      	pop	{r7}
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	40010000 	.word	0x40010000
 800be54:	48000400 	.word	0x48000400
 800be58:	48000800 	.word	0x48000800
 800be5c:	58000800 	.word	0x58000800

0800be60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	807b      	strh	r3, [r7, #2]
 800be6c:	4613      	mov	r3, r2
 800be6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800be70:	787b      	ldrb	r3, [r7, #1]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800be76:	887a      	ldrh	r2, [r7, #2]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800be7c:	e002      	b.n	800be84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800be7e:	887a      	ldrh	r2, [r7, #2]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	629a      	str	r2, [r3, #40]	; 0x28
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	bc80      	pop	{r7}
 800be8c:	4770      	bx	lr

0800be8e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e081      	b.n	800bfa4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d106      	bne.n	800beba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7fe f833 	bl	8009f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2224      	movs	r2, #36	; 0x24
 800bebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f022 0201 	bic.w	r2, r2, #1
 800bed0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bede:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800beee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d107      	bne.n	800bf08 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	689a      	ldr	r2, [r3, #8]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf04:	609a      	str	r2, [r3, #8]
 800bf06:	e006      	b.n	800bf16 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	689a      	ldr	r2, [r3, #8]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bf14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	d104      	bne.n	800bf28 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	6812      	ldr	r2, [r2, #0]
 800bf32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bf36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf3a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68da      	ldr	r2, [r3, #12]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	691a      	ldr	r2, [r3, #16]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	430a      	orrs	r2, r1
 800bf64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	69d9      	ldr	r1, [r3, #28]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a1a      	ldr	r2, [r3, #32]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	430a      	orrs	r2, r1
 800bf74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f042 0201 	orr.w	r2, r2, #1
 800bf84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b20      	cmp	r3, #32
 800bfc0:	d138      	bne.n	800c034 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d101      	bne.n	800bfd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bfcc:	2302      	movs	r3, #2
 800bfce:	e032      	b.n	800c036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2224      	movs	r2, #36	; 0x24
 800bfdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f022 0201 	bic.w	r2, r2, #1
 800bfee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bffe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6819      	ldr	r1, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	430a      	orrs	r2, r1
 800c00e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f042 0201 	orr.w	r2, r2, #1
 800c01e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2220      	movs	r2, #32
 800c024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	e000      	b.n	800c036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c034:	2302      	movs	r3, #2
  }
}
 800c036:	4618      	mov	r0, r3
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bc80      	pop	{r7}
 800c03e:	4770      	bx	lr

0800c040 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b20      	cmp	r3, #32
 800c054:	d139      	bne.n	800c0ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d101      	bne.n	800c064 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c060:	2302      	movs	r3, #2
 800c062:	e033      	b.n	800c0cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2224      	movs	r2, #36	; 0x24
 800c070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f022 0201 	bic.w	r2, r2, #1
 800c082:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c092:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	021b      	lsls	r3, r3, #8
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f042 0201 	orr.w	r2, r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	e000      	b.n	800c0cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c0ca:	2302      	movs	r3, #2
  }
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bc80      	pop	{r7}
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c0dc:	4b04      	ldr	r3, [pc, #16]	; (800c0f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a03      	ldr	r2, [pc, #12]	; (800c0f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800c0e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0e6:	6013      	str	r3, [r2, #0]
}
 800c0e8:	bf00      	nop
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bc80      	pop	{r7}
 800c0ee:	4770      	bx	lr
 800c0f0:	58000400 	.word	0x58000400

0800c0f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800c0f8:	4b03      	ldr	r3, [pc, #12]	; (800c108 <HAL_PWREx_GetVoltageRange+0x14>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800c100:	4618      	mov	r0, r3
 800c102:	46bd      	mov	sp, r7
 800c104:	bc80      	pop	{r7}
 800c106:	4770      	bx	lr
 800c108:	58000400 	.word	0x58000400

0800c10c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	4603      	mov	r3, r0
 800c114:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
#else
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800c116:	4b10      	ldr	r3, [pc, #64]	; (800c158 <HAL_PWREx_EnterSTOP1Mode+0x4c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f023 0307 	bic.w	r3, r3, #7
 800c11e:	4a0e      	ldr	r2, [pc, #56]	; (800c158 <HAL_PWREx_EnterSTOP1Mode+0x4c>)
 800c120:	f043 0301 	orr.w	r3, r3, #1
 800c124:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800c126:	4b0d      	ldr	r3, [pc, #52]	; (800c15c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	4a0c      	ldr	r2, [pc, #48]	; (800c15c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800c12c:	f043 0304 	orr.w	r3, r3, #4
 800c130:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800c132:	79fb      	ldrb	r3, [r7, #7]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d101      	bne.n	800c13c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800c138:	bf30      	wfi
 800c13a:	e002      	b.n	800c142 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800c13c:	bf40      	sev
    __WFE();
 800c13e:	bf20      	wfe
    __WFE();
 800c140:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800c142:	4b06      	ldr	r3, [pc, #24]	; (800c15c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800c144:	691b      	ldr	r3, [r3, #16]
 800c146:	4a05      	ldr	r2, [pc, #20]	; (800c15c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800c148:	f023 0304 	bic.w	r3, r3, #4
 800c14c:	6113      	str	r3, [r2, #16]
}
 800c14e:	bf00      	nop
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	bc80      	pop	{r7}
 800c156:	4770      	bx	lr
 800c158:	58000400 	.word	0x58000400
 800c15c:	e000ed00 	.word	0xe000ed00

0800c160 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800c160:	b480      	push	{r7}
 800c162:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800c164:	4b06      	ldr	r3, [pc, #24]	; (800c180 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c16c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c170:	d101      	bne.n	800c176 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800c172:	2301      	movs	r3, #1
 800c174:	e000      	b.n	800c178 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bc80      	pop	{r7}
 800c17e:	4770      	bx	lr
 800c180:	58000400 	.word	0x58000400

0800c184 <LL_RCC_HSE_EnableTcxo>:
{
 800c184:	b480      	push	{r7}
 800c186:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800c188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c196:	6013      	str	r3, [r2, #0]
}
 800c198:	bf00      	nop
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bc80      	pop	{r7}
 800c19e:	4770      	bx	lr

0800c1a0 <LL_RCC_HSE_DisableTcxo>:
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800c1a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c1b2:	6013      	str	r3, [r2, #0]
}
 800c1b4:	bf00      	nop
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bc80      	pop	{r7}
 800c1ba:	4770      	bx	lr

0800c1bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 800c1bc:	b480      	push	{r7}
 800c1be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800c1c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1ce:	d101      	bne.n	800c1d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e000      	b.n	800c1d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bc80      	pop	{r7}
 800c1dc:	4770      	bx	lr

0800c1de <LL_RCC_HSE_Enable>:
{
 800c1de:	b480      	push	{r7}
 800c1e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800c1e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1f0:	6013      	str	r3, [r2, #0]
}
 800c1f2:	bf00      	nop
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bc80      	pop	{r7}
 800c1f8:	4770      	bx	lr

0800c1fa <LL_RCC_HSE_Disable>:
{
 800c1fa:	b480      	push	{r7}
 800c1fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800c1fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c20c:	6013      	str	r3, [r2, #0]
}
 800c20e:	bf00      	nop
 800c210:	46bd      	mov	sp, r7
 800c212:	bc80      	pop	{r7}
 800c214:	4770      	bx	lr

0800c216 <LL_RCC_HSE_IsReady>:
{
 800c216:	b480      	push	{r7}
 800c218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800c21a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c228:	d101      	bne.n	800c22e <LL_RCC_HSE_IsReady+0x18>
 800c22a:	2301      	movs	r3, #1
 800c22c:	e000      	b.n	800c230 <LL_RCC_HSE_IsReady+0x1a>
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	46bd      	mov	sp, r7
 800c234:	bc80      	pop	{r7}
 800c236:	4770      	bx	lr

0800c238 <LL_RCC_HSI_Enable>:
{
 800c238:	b480      	push	{r7}
 800c23a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800c23c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c24a:	6013      	str	r3, [r2, #0]
}
 800c24c:	bf00      	nop
 800c24e:	46bd      	mov	sp, r7
 800c250:	bc80      	pop	{r7}
 800c252:	4770      	bx	lr

0800c254 <LL_RCC_HSI_Disable>:
{
 800c254:	b480      	push	{r7}
 800c256:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800c258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c266:	6013      	str	r3, [r2, #0]
}
 800c268:	bf00      	nop
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bc80      	pop	{r7}
 800c26e:	4770      	bx	lr

0800c270 <LL_RCC_HSI_IsReady>:
{
 800c270:	b480      	push	{r7}
 800c272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c27e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c282:	d101      	bne.n	800c288 <LL_RCC_HSI_IsReady+0x18>
 800c284:	2301      	movs	r3, #1
 800c286:	e000      	b.n	800c28a <LL_RCC_HSI_IsReady+0x1a>
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bc80      	pop	{r7}
 800c290:	4770      	bx	lr

0800c292 <LL_RCC_HSI_SetCalibTrimming>:
{
 800c292:	b480      	push	{r7}
 800c294:	b083      	sub	sp, #12
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800c29a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	061b      	lsls	r3, r3, #24
 800c2a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	604b      	str	r3, [r1, #4]
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bc80      	pop	{r7}
 800c2b8:	4770      	bx	lr

0800c2ba <LL_RCC_LSE_IsReady>:
{
 800c2ba:	b480      	push	{r7}
 800c2bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c2be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2c6:	f003 0302 	and.w	r3, r3, #2
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d101      	bne.n	800c2d2 <LL_RCC_LSE_IsReady+0x18>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <LL_RCC_LSE_IsReady+0x1a>
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bc80      	pop	{r7}
 800c2da:	4770      	bx	lr

0800c2dc <LL_RCC_LSI_Enable>:
{
 800c2dc:	b480      	push	{r7}
 800c2de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800c2e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c2ec:	f043 0301 	orr.w	r3, r3, #1
 800c2f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c2f4:	bf00      	nop
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bc80      	pop	{r7}
 800c2fa:	4770      	bx	lr

0800c2fc <LL_RCC_LSI_Disable>:
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800c300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c308:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c30c:	f023 0301 	bic.w	r3, r3, #1
 800c310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800c314:	bf00      	nop
 800c316:	46bd      	mov	sp, r7
 800c318:	bc80      	pop	{r7}
 800c31a:	4770      	bx	lr

0800c31c <LL_RCC_LSI_IsReady>:
{
 800c31c:	b480      	push	{r7}
 800c31e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800c320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c328:	f003 0302 	and.w	r3, r3, #2
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d101      	bne.n	800c334 <LL_RCC_LSI_IsReady+0x18>
 800c330:	2301      	movs	r3, #1
 800c332:	e000      	b.n	800c336 <LL_RCC_LSI_IsReady+0x1a>
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	46bd      	mov	sp, r7
 800c33a:	bc80      	pop	{r7}
 800c33c:	4770      	bx	lr

0800c33e <LL_RCC_MSI_Enable>:
{
 800c33e:	b480      	push	{r7}
 800c340:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800c342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c34c:	f043 0301 	orr.w	r3, r3, #1
 800c350:	6013      	str	r3, [r2, #0]
}
 800c352:	bf00      	nop
 800c354:	46bd      	mov	sp, r7
 800c356:	bc80      	pop	{r7}
 800c358:	4770      	bx	lr

0800c35a <LL_RCC_MSI_Disable>:
{
 800c35a:	b480      	push	{r7}
 800c35c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800c35e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c368:	f023 0301 	bic.w	r3, r3, #1
 800c36c:	6013      	str	r3, [r2, #0]
}
 800c36e:	bf00      	nop
 800c370:	46bd      	mov	sp, r7
 800c372:	bc80      	pop	{r7}
 800c374:	4770      	bx	lr

0800c376 <LL_RCC_MSI_IsReady>:
{
 800c376:	b480      	push	{r7}
 800c378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800c37a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 0302 	and.w	r3, r3, #2
 800c384:	2b02      	cmp	r3, #2
 800c386:	d101      	bne.n	800c38c <LL_RCC_MSI_IsReady+0x16>
 800c388:	2301      	movs	r3, #1
 800c38a:	e000      	b.n	800c38e <LL_RCC_MSI_IsReady+0x18>
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	46bd      	mov	sp, r7
 800c392:	bc80      	pop	{r7}
 800c394:	4770      	bx	lr

0800c396 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800c396:	b480      	push	{r7}
 800c398:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800c39a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f003 0308 	and.w	r3, r3, #8
 800c3a4:	2b08      	cmp	r3, #8
 800c3a6:	d101      	bne.n	800c3ac <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e000      	b.n	800c3ae <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bc80      	pop	{r7}
 800c3b4:	4770      	bx	lr

0800c3b6 <LL_RCC_MSI_GetRange>:
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800c3ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bc80      	pop	{r7}
 800c3ca:	4770      	bx	lr

0800c3cc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800c3d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bc80      	pop	{r7}
 800c3e2:	4770      	bx	lr

0800c3e4 <LL_RCC_MSI_SetCalibTrimming>:
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800c3ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	021b      	lsls	r3, r3, #8
 800c3fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c3fe:	4313      	orrs	r3, r2
 800c400:	604b      	str	r3, [r1, #4]
}
 800c402:	bf00      	nop
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	bc80      	pop	{r7}
 800c40a:	4770      	bx	lr

0800c40c <LL_RCC_SetSysClkSource>:
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	f023 0203 	bic.w	r2, r3, #3
 800c41e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4313      	orrs	r3, r2
 800c426:	608b      	str	r3, [r1, #8]
}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bc80      	pop	{r7}
 800c430:	4770      	bx	lr

0800c432 <LL_RCC_GetSysClkSource>:
{
 800c432:	b480      	push	{r7}
 800c434:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	f003 030c 	and.w	r3, r3, #12
}
 800c440:	4618      	mov	r0, r3
 800c442:	46bd      	mov	sp, r7
 800c444:	bc80      	pop	{r7}
 800c446:	4770      	bx	lr

0800c448 <LL_RCC_SetAHBPrescaler>:
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c45a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4313      	orrs	r3, r2
 800c462:	608b      	str	r3, [r1, #8]
}
 800c464:	bf00      	nop
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	bc80      	pop	{r7}
 800c46c:	4770      	bx	lr

0800c46e <LL_RCC_SetAHB3Prescaler>:
{
 800c46e:	b480      	push	{r7}
 800c470:	b083      	sub	sp, #12
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800c476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c47a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c47e:	f023 020f 	bic.w	r2, r3, #15
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	091b      	lsrs	r3, r3, #4
 800c486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c48a:	4313      	orrs	r3, r2
 800c48c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	bc80      	pop	{r7}
 800c498:	4770      	bx	lr

0800c49a <LL_RCC_SetAPB1Prescaler>:
{
 800c49a:	b480      	push	{r7}
 800c49c:	b083      	sub	sp, #12
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c4a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c4ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	608b      	str	r3, [r1, #8]
}
 800c4b6:	bf00      	nop
 800c4b8:	370c      	adds	r7, #12
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bc80      	pop	{r7}
 800c4be:	4770      	bx	lr

0800c4c0 <LL_RCC_SetAPB2Prescaler>:
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c4c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c4d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	608b      	str	r3, [r1, #8]
}
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bc80      	pop	{r7}
 800c4e4:	4770      	bx	lr

0800c4e6 <LL_RCC_GetAHBPrescaler>:
{
 800c4e6:	b480      	push	{r7}
 800c4e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c4ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c4ee:	689b      	ldr	r3, [r3, #8]
 800c4f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bc80      	pop	{r7}
 800c4fa:	4770      	bx	lr

0800c4fc <LL_RCC_GetAHB3Prescaler>:
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c504:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c508:	011b      	lsls	r3, r3, #4
 800c50a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	46bd      	mov	sp, r7
 800c512:	bc80      	pop	{r7}
 800c514:	4770      	bx	lr

0800c516 <LL_RCC_GetAPB1Prescaler>:
{
 800c516:	b480      	push	{r7}
 800c518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c51a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800c524:	4618      	mov	r0, r3
 800c526:	46bd      	mov	sp, r7
 800c528:	bc80      	pop	{r7}
 800c52a:	4770      	bx	lr

0800c52c <LL_RCC_GetAPB2Prescaler>:
{
 800c52c:	b480      	push	{r7}
 800c52e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bc80      	pop	{r7}
 800c540:	4770      	bx	lr

0800c542 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c542:	b480      	push	{r7}
 800c544:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c554:	6013      	str	r3, [r2, #0]
}
 800c556:	bf00      	nop
 800c558:	46bd      	mov	sp, r7
 800c55a:	bc80      	pop	{r7}
 800c55c:	4770      	bx	lr

0800c55e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c55e:	b480      	push	{r7}
 800c560:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c56c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c570:	6013      	str	r3, [r2, #0]
}
 800c572:	bf00      	nop
 800c574:	46bd      	mov	sp, r7
 800c576:	bc80      	pop	{r7}
 800c578:	4770      	bx	lr

0800c57a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c57a:	b480      	push	{r7}
 800c57c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c57e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c58c:	d101      	bne.n	800c592 <LL_RCC_PLL_IsReady+0x18>
 800c58e:	2301      	movs	r3, #1
 800c590:	e000      	b.n	800c594 <LL_RCC_PLL_IsReady+0x1a>
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	46bd      	mov	sp, r7
 800c598:	bc80      	pop	{r7}
 800c59a:	4770      	bx	lr

0800c59c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c59c:	b480      	push	{r7}
 800c59e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c5a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	0a1b      	lsrs	r3, r3, #8
 800c5a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bc80      	pop	{r7}
 800c5b2:	4770      	bx	lr

0800c5b4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c5b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bc80      	pop	{r7}
 800c5c8:	4770      	bx	lr

0800c5ca <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c5ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bc80      	pop	{r7}
 800c5de:	4770      	bx	lr

0800c5e0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c5e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	f003 0303 	and.w	r3, r3, #3
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bc80      	pop	{r7}
 800c5f4:	4770      	bx	lr

0800c5f6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c5fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c608:	d101      	bne.n	800c60e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c60a:	2301      	movs	r3, #1
 800c60c:	e000      	b.n	800c610 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	46bd      	mov	sp, r7
 800c614:	bc80      	pop	{r7}
 800c616:	4770      	bx	lr

0800c618 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c618:	b480      	push	{r7}
 800c61a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c61c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c620:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800c624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c62c:	d101      	bne.n	800c632 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c62e:	2301      	movs	r3, #1
 800c630:	e000      	b.n	800c634 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	46bd      	mov	sp, r7
 800c638:	bc80      	pop	{r7}
 800c63a:	4770      	bx	lr

0800c63c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c63c:	b480      	push	{r7}
 800c63e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c64a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c64e:	d101      	bne.n	800c654 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c650:	2301      	movs	r3, #1
 800c652:	e000      	b.n	800c656 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	46bd      	mov	sp, r7
 800c65a:	bc80      	pop	{r7}
 800c65c:	4770      	bx	lr

0800c65e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c65e:	b480      	push	{r7}
 800c660:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c66c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c670:	d101      	bne.n	800c676 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c672:	2301      	movs	r3, #1
 800c674:	e000      	b.n	800c678 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bc80      	pop	{r7}
 800c67e:	4770      	bx	lr

0800c680 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b088      	sub	sp, #32
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e36f      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c692:	f7ff fece 	bl	800c432 <LL_RCC_GetSysClkSource>
 800c696:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c698:	f7ff ffa2 	bl	800c5e0 <LL_RCC_PLL_GetMainSource>
 800c69c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 0320 	and.w	r3, r3, #32
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 80c4 	beq.w	800c834 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d005      	beq.n	800c6be <HAL_RCC_OscConfig+0x3e>
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	2b0c      	cmp	r3, #12
 800c6b6:	d176      	bne.n	800c7a6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d173      	bne.n	800c7a6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d101      	bne.n	800c6ca <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e353      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 0308 	and.w	r3, r3, #8
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d005      	beq.n	800c6e8 <HAL_RCC_OscConfig+0x68>
 800c6dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6e6:	e006      	b.n	800c6f6 <HAL_RCC_OscConfig+0x76>
 800c6e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c6f0:	091b      	lsrs	r3, r3, #4
 800c6f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d222      	bcs.n	800c740 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 fd7a 	bl	800d1f8 <RCC_SetFlashLatencyFromMSIRange>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d001      	beq.n	800c70e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e331      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c70e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c718:	f043 0308 	orr.w	r3, r3, #8
 800c71c:	6013      	str	r3, [r2, #0]
 800c71e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c730:	4313      	orrs	r3, r2
 800c732:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c738:	4618      	mov	r0, r3
 800c73a:	f7ff fe53 	bl	800c3e4 <LL_RCC_MSI_SetCalibTrimming>
 800c73e:	e021      	b.n	800c784 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c74a:	f043 0308 	orr.w	r3, r3, #8
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c75e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c762:	4313      	orrs	r3, r2
 800c764:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7ff fe3a 	bl	800c3e4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c774:	4618      	mov	r0, r3
 800c776:	f000 fd3f 	bl	800d1f8 <RCC_SetFlashLatencyFromMSIRange>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d001      	beq.n	800c784 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	e2f6      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c784:	f000 fcc2 	bl	800d10c <HAL_RCC_GetHCLKFreq>
 800c788:	4603      	mov	r3, r0
 800c78a:	4aa7      	ldr	r2, [pc, #668]	; (800ca28 <HAL_RCC_OscConfig+0x3a8>)
 800c78c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800c78e:	4ba7      	ldr	r3, [pc, #668]	; (800ca2c <HAL_RCC_OscConfig+0x3ac>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f7fd fd68 	bl	800a268 <HAL_InitTick>
 800c798:	4603      	mov	r3, r0
 800c79a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800c79c:	7cfb      	ldrb	r3, [r7, #19]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d047      	beq.n	800c832 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800c7a2:	7cfb      	ldrb	r3, [r7, #19]
 800c7a4:	e2e5      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d02c      	beq.n	800c808 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c7ae:	f7ff fdc6 	bl	800c33e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c7b2:	f7fd ff33 	bl	800a61c <HAL_GetTick>
 800c7b6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c7b8:	e008      	b.n	800c7cc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c7ba:	f7fd ff2f 	bl	800a61c <HAL_GetTick>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d901      	bls.n	800c7cc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e2d2      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c7cc:	f7ff fdd3 	bl	800c376 <LL_RCC_MSI_IsReady>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d0f1      	beq.n	800c7ba <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c7d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c7e0:	f043 0308 	orr.w	r3, r3, #8
 800c7e4:	6013      	str	r3, [r2, #0]
 800c7e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c800:	4618      	mov	r0, r3
 800c802:	f7ff fdef 	bl	800c3e4 <LL_RCC_MSI_SetCalibTrimming>
 800c806:	e015      	b.n	800c834 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c808:	f7ff fda7 	bl	800c35a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c80c:	f7fd ff06 	bl	800a61c <HAL_GetTick>
 800c810:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c812:	e008      	b.n	800c826 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c814:	f7fd ff02 	bl	800a61c <HAL_GetTick>
 800c818:	4602      	mov	r2, r0
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	1ad3      	subs	r3, r2, r3
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d901      	bls.n	800c826 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c822:	2303      	movs	r3, #3
 800c824:	e2a5      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c826:	f7ff fda6 	bl	800c376 <LL_RCC_MSI_IsReady>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d1f1      	bne.n	800c814 <HAL_RCC_OscConfig+0x194>
 800c830:	e000      	b.n	800c834 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c832:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0301 	and.w	r3, r3, #1
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d058      	beq.n	800c8f2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	2b08      	cmp	r3, #8
 800c844:	d005      	beq.n	800c852 <HAL_RCC_OscConfig+0x1d2>
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	2b0c      	cmp	r3, #12
 800c84a:	d108      	bne.n	800c85e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d105      	bne.n	800c85e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d14b      	bne.n	800c8f2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e289      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800c85e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c870:	4313      	orrs	r3, r2
 800c872:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c87c:	d102      	bne.n	800c884 <HAL_RCC_OscConfig+0x204>
 800c87e:	f7ff fcae 	bl	800c1de <LL_RCC_HSE_Enable>
 800c882:	e00d      	b.n	800c8a0 <HAL_RCC_OscConfig+0x220>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800c88c:	d104      	bne.n	800c898 <HAL_RCC_OscConfig+0x218>
 800c88e:	f7ff fc79 	bl	800c184 <LL_RCC_HSE_EnableTcxo>
 800c892:	f7ff fca4 	bl	800c1de <LL_RCC_HSE_Enable>
 800c896:	e003      	b.n	800c8a0 <HAL_RCC_OscConfig+0x220>
 800c898:	f7ff fcaf 	bl	800c1fa <LL_RCC_HSE_Disable>
 800c89c:	f7ff fc80 	bl	800c1a0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d012      	beq.n	800c8ce <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c8a8:	f7fd feb8 	bl	800a61c <HAL_GetTick>
 800c8ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c8ae:	e008      	b.n	800c8c2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c8b0:	f7fd feb4 	bl	800a61c <HAL_GetTick>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	2b64      	cmp	r3, #100	; 0x64
 800c8bc:	d901      	bls.n	800c8c2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800c8be:	2303      	movs	r3, #3
 800c8c0:	e257      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c8c2:	f7ff fca8 	bl	800c216 <LL_RCC_HSE_IsReady>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d0f1      	beq.n	800c8b0 <HAL_RCC_OscConfig+0x230>
 800c8cc:	e011      	b.n	800c8f2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c8ce:	f7fd fea5 	bl	800a61c <HAL_GetTick>
 800c8d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c8d4:	e008      	b.n	800c8e8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c8d6:	f7fd fea1 	bl	800a61c <HAL_GetTick>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	2b64      	cmp	r3, #100	; 0x64
 800c8e2:	d901      	bls.n	800c8e8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	e244      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c8e8:	f7ff fc95 	bl	800c216 <LL_RCC_HSE_IsReady>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1f1      	bne.n	800c8d6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f003 0302 	and.w	r3, r3, #2
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d046      	beq.n	800c98c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	2b04      	cmp	r3, #4
 800c902:	d005      	beq.n	800c910 <HAL_RCC_OscConfig+0x290>
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	2b0c      	cmp	r3, #12
 800c908:	d10e      	bne.n	800c928 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d10b      	bne.n	800c928 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	691b      	ldr	r3, [r3, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d101      	bne.n	800c91c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	e22a      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	695b      	ldr	r3, [r3, #20]
 800c920:	4618      	mov	r0, r3
 800c922:	f7ff fcb6 	bl	800c292 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c926:	e031      	b.n	800c98c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d019      	beq.n	800c964 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c930:	f7ff fc82 	bl	800c238 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c934:	f7fd fe72 	bl	800a61c <HAL_GetTick>
 800c938:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c93a:	e008      	b.n	800c94e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c93c:	f7fd fe6e 	bl	800a61c <HAL_GetTick>
 800c940:	4602      	mov	r2, r0
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	2b02      	cmp	r3, #2
 800c948:	d901      	bls.n	800c94e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800c94a:	2303      	movs	r3, #3
 800c94c:	e211      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c94e:	f7ff fc8f 	bl	800c270 <LL_RCC_HSI_IsReady>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d0f1      	beq.n	800c93c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	695b      	ldr	r3, [r3, #20]
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7ff fc98 	bl	800c292 <LL_RCC_HSI_SetCalibTrimming>
 800c962:	e013      	b.n	800c98c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c964:	f7ff fc76 	bl	800c254 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c968:	f7fd fe58 	bl	800a61c <HAL_GetTick>
 800c96c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c96e:	e008      	b.n	800c982 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c970:	f7fd fe54 	bl	800a61c <HAL_GetTick>
 800c974:	4602      	mov	r2, r0
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d901      	bls.n	800c982 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800c97e:	2303      	movs	r3, #3
 800c980:	e1f7      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c982:	f7ff fc75 	bl	800c270 <LL_RCC_HSI_IsReady>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1f1      	bne.n	800c970 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 0308 	and.w	r3, r3, #8
 800c994:	2b00      	cmp	r3, #0
 800c996:	d06e      	beq.n	800ca76 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d056      	beq.n	800ca4e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800c9a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c9a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9a8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	69da      	ldr	r2, [r3, #28]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f003 0310 	and.w	r3, r3, #16
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d031      	beq.n	800ca1c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f003 0302 	and.w	r3, r3, #2
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d006      	beq.n	800c9d0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d101      	bne.n	800c9d0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e1d0      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f003 0301 	and.w	r3, r3, #1
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d013      	beq.n	800ca02 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800c9da:	f7ff fc8f 	bl	800c2fc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c9de:	f7fd fe1d 	bl	800a61c <HAL_GetTick>
 800c9e2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800c9e4:	e008      	b.n	800c9f8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c9e6:	f7fd fe19 	bl	800a61c <HAL_GetTick>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	2b11      	cmp	r3, #17
 800c9f2:	d901      	bls.n	800c9f8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	e1bc      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800c9f8:	f7ff fc90 	bl	800c31c <LL_RCC_LSI_IsReady>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d1f1      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800ca02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ca06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca0a:	f023 0210 	bic.w	r2, r3, #16
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	69db      	ldr	r3, [r3, #28]
 800ca12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ca16:	4313      	orrs	r3, r2
 800ca18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ca1c:	f7ff fc5e 	bl	800c2dc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ca20:	f7fd fdfc 	bl	800a61c <HAL_GetTick>
 800ca24:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800ca26:	e00c      	b.n	800ca42 <HAL_RCC_OscConfig+0x3c2>
 800ca28:	20000080 	.word	0x20000080
 800ca2c:	20000084 	.word	0x20000084
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ca30:	f7fd fdf4 	bl	800a61c <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	2b11      	cmp	r3, #17
 800ca3c:	d901      	bls.n	800ca42 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e197      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800ca42:	f7ff fc6b 	bl	800c31c <LL_RCC_LSI_IsReady>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d0f1      	beq.n	800ca30 <HAL_RCC_OscConfig+0x3b0>
 800ca4c:	e013      	b.n	800ca76 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ca4e:	f7ff fc55 	bl	800c2fc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ca52:	f7fd fde3 	bl	800a61c <HAL_GetTick>
 800ca56:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800ca58:	e008      	b.n	800ca6c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ca5a:	f7fd fddf 	bl	800a61c <HAL_GetTick>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	2b11      	cmp	r3, #17
 800ca66:	d901      	bls.n	800ca6c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800ca68:	2303      	movs	r3, #3
 800ca6a:	e182      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800ca6c:	f7ff fc56 	bl	800c31c <LL_RCC_LSI_IsReady>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1f1      	bne.n	800ca5a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 0304 	and.w	r3, r3, #4
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f000 80d8 	beq.w	800cc34 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800ca84:	f7ff fb6c 	bl	800c160 <LL_PWR_IsEnabledBkUpAccess>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d113      	bne.n	800cab6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ca8e:	f7ff fb23 	bl	800c0d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca92:	f7fd fdc3 	bl	800a61c <HAL_GetTick>
 800ca96:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800ca98:	e008      	b.n	800caac <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca9a:	f7fd fdbf 	bl	800a61c <HAL_GetTick>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d901      	bls.n	800caac <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800caa8:	2303      	movs	r3, #3
 800caaa:	e162      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800caac:	f7ff fb58 	bl	800c160 <LL_PWR_IsEnabledBkUpAccess>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d0f1      	beq.n	800ca9a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d07b      	beq.n	800cbb6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	2b85      	cmp	r3, #133	; 0x85
 800cac4:	d003      	beq.n	800cace <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	2b05      	cmp	r3, #5
 800cacc:	d109      	bne.n	800cae2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800cace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cada:	f043 0304 	orr.w	r3, r3, #4
 800cade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cae2:	f7fd fd9b 	bl	800a61c <HAL_GetTick>
 800cae6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800caec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800caf4:	f043 0301 	orr.w	r3, r3, #1
 800caf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800cafc:	e00a      	b.n	800cb14 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cafe:	f7fd fd8d 	bl	800a61c <HAL_GetTick>
 800cb02:	4602      	mov	r2, r0
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	1ad3      	subs	r3, r2, r3
 800cb08:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d901      	bls.n	800cb14 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800cb10:	2303      	movs	r3, #3
 800cb12:	e12e      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800cb14:	f7ff fbd1 	bl	800c2ba <LL_RCC_LSE_IsReady>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d0ef      	beq.n	800cafe <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	2b81      	cmp	r3, #129	; 0x81
 800cb24:	d003      	beq.n	800cb2e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	2b85      	cmp	r3, #133	; 0x85
 800cb2c:	d121      	bne.n	800cb72 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb2e:	f7fd fd75 	bl	800a61c <HAL_GetTick>
 800cb32:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800cb34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cb40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800cb48:	e00a      	b.n	800cb60 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb4a:	f7fd fd67 	bl	800a61c <HAL_GetTick>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d901      	bls.n	800cb60 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	e108      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800cb60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d0ec      	beq.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800cb70:	e060      	b.n	800cc34 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb72:	f7fd fd53 	bl	800a61c <HAL_GetTick>
 800cb76:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800cb78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cb7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cb84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cb8c:	e00a      	b.n	800cba4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb8e:	f7fd fd45 	bl	800a61c <HAL_GetTick>
 800cb92:	4602      	mov	r2, r0
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d901      	bls.n	800cba4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e0e6      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1ec      	bne.n	800cb8e <HAL_RCC_OscConfig+0x50e>
 800cbb4:	e03e      	b.n	800cc34 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cbb6:	f7fd fd31 	bl	800a61c <HAL_GetTick>
 800cbba:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800cbbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cbc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cbc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cbd0:	e00a      	b.n	800cbe8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cbd2:	f7fd fd23 	bl	800a61c <HAL_GetTick>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d901      	bls.n	800cbe8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e0c4      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800cbe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cbec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1ec      	bne.n	800cbd2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cbf8:	f7fd fd10 	bl	800a61c <HAL_GetTick>
 800cbfc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800cbfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cc0a:	f023 0301 	bic.w	r3, r3, #1
 800cc0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800cc12:	e00a      	b.n	800cc2a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc14:	f7fd fd02 	bl	800a61c <HAL_GetTick>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d901      	bls.n	800cc2a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800cc26:	2303      	movs	r3, #3
 800cc28:	e0a3      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800cc2a:	f7ff fb46 	bl	800c2ba <LL_RCC_LSE_IsReady>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1ef      	bne.n	800cc14 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f000 8099 	beq.w	800cd70 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	2b0c      	cmp	r3, #12
 800cc42:	d06c      	beq.n	800cd1e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d14b      	bne.n	800cce4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc4c:	f7ff fc87 	bl	800c55e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc50:	f7fd fce4 	bl	800a61c <HAL_GetTick>
 800cc54:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800cc56:	e008      	b.n	800cc6a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc58:	f7fd fce0 	bl	800a61c <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	2b0a      	cmp	r3, #10
 800cc64:	d901      	bls.n	800cc6a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800cc66:	2303      	movs	r3, #3
 800cc68:	e083      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800cc6a:	f7ff fc86 	bl	800c57a <LL_RCC_PLL_IsReady>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1f1      	bne.n	800cc58 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cc74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc78:	68da      	ldr	r2, [r3, #12]
 800cc7a:	4b40      	ldr	r3, [pc, #256]	; (800cd7c <HAL_RCC_OscConfig+0x6fc>)
 800cc7c:	4013      	ands	r3, r2
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cc86:	4311      	orrs	r1, r2
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cc8c:	0212      	lsls	r2, r2, #8
 800cc8e:	4311      	orrs	r1, r2
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cc94:	4311      	orrs	r1, r2
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cc9a:	4311      	orrs	r1, r2
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800cca0:	430a      	orrs	r2, r1
 800cca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cca6:	4313      	orrs	r3, r2
 800cca8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ccaa:	f7ff fc4a 	bl	800c542 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ccae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ccb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccbc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ccbe:	f7fd fcad 	bl	800a61c <HAL_GetTick>
 800ccc2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800ccc4:	e008      	b.n	800ccd8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccc6:	f7fd fca9 	bl	800a61c <HAL_GetTick>
 800ccca:	4602      	mov	r2, r0
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	2b0a      	cmp	r3, #10
 800ccd2:	d901      	bls.n	800ccd8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	e04c      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800ccd8:	f7ff fc4f 	bl	800c57a <LL_RCC_PLL_IsReady>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d0f1      	beq.n	800ccc6 <HAL_RCC_OscConfig+0x646>
 800cce2:	e045      	b.n	800cd70 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cce4:	f7ff fc3b 	bl	800c55e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cce8:	f7fd fc98 	bl	800a61c <HAL_GetTick>
 800ccec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800ccee:	e008      	b.n	800cd02 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccf0:	f7fd fc94 	bl	800a61c <HAL_GetTick>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	2b0a      	cmp	r3, #10
 800ccfc:	d901      	bls.n	800cd02 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	e037      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800cd02:	f7ff fc3a 	bl	800c57a <LL_RCC_PLL_IsReady>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1f1      	bne.n	800ccf0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800cd0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd10:	68da      	ldr	r2, [r3, #12]
 800cd12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cd16:	4b1a      	ldr	r3, [pc, #104]	; (800cd80 <HAL_RCC_OscConfig+0x700>)
 800cd18:	4013      	ands	r3, r2
 800cd1a:	60cb      	str	r3, [r1, #12]
 800cd1c:	e028      	b.n	800cd70 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d101      	bne.n	800cd2a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e023      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cd2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	f003 0203 	and.w	r2, r3, #3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d115      	bne.n	800cd6c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d10e      	bne.n	800cd6c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd58:	021b      	lsls	r3, r3, #8
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d106      	bne.n	800cd6c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d001      	beq.n	800cd70 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e000      	b.n	800cd72 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3720      	adds	r7, #32
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	11c1808c 	.word	0x11c1808c
 800cd80:	eefefffc 	.word	0xeefefffc

0800cd84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e10f      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cd98:	4b89      	ldr	r3, [pc, #548]	; (800cfc0 <HAL_RCC_ClockConfig+0x23c>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f003 0307 	and.w	r3, r3, #7
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d91b      	bls.n	800cdde <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cda6:	4b86      	ldr	r3, [pc, #536]	; (800cfc0 <HAL_RCC_ClockConfig+0x23c>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f023 0207 	bic.w	r2, r3, #7
 800cdae:	4984      	ldr	r1, [pc, #528]	; (800cfc0 <HAL_RCC_ClockConfig+0x23c>)
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cdb6:	f7fd fc31 	bl	800a61c <HAL_GetTick>
 800cdba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cdbc:	e008      	b.n	800cdd0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cdbe:	f7fd fc2d 	bl	800a61c <HAL_GetTick>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	1ad3      	subs	r3, r2, r3
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d901      	bls.n	800cdd0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	e0f3      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cdd0:	4b7b      	ldr	r3, [pc, #492]	; (800cfc0 <HAL_RCC_ClockConfig+0x23c>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f003 0307 	and.w	r3, r3, #7
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d1ef      	bne.n	800cdbe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f003 0302 	and.w	r3, r3, #2
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d016      	beq.n	800ce18 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff fb2a 	bl	800c448 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cdf4:	f7fd fc12 	bl	800a61c <HAL_GetTick>
 800cdf8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800cdfa:	e008      	b.n	800ce0e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800cdfc:	f7fd fc0e 	bl	800a61c <HAL_GetTick>
 800ce00:	4602      	mov	r2, r0
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	d901      	bls.n	800ce0e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	e0d4      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800ce0e:	f7ff fbf2 	bl	800c5f6 <LL_RCC_IsActiveFlag_HPRE>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d0f1      	beq.n	800cdfc <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d016      	beq.n	800ce52 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	695b      	ldr	r3, [r3, #20]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff fb20 	bl	800c46e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ce2e:	f7fd fbf5 	bl	800a61c <HAL_GetTick>
 800ce32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ce34:	e008      	b.n	800ce48 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ce36:	f7fd fbf1 	bl	800a61c <HAL_GetTick>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	1ad3      	subs	r3, r2, r3
 800ce40:	2b02      	cmp	r3, #2
 800ce42:	d901      	bls.n	800ce48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800ce44:	2303      	movs	r3, #3
 800ce46:	e0b7      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800ce48:	f7ff fbe6 	bl	800c618 <LL_RCC_IsActiveFlag_SHDHPRE>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d0f1      	beq.n	800ce36 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f003 0304 	and.w	r3, r3, #4
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d016      	beq.n	800ce8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff fb19 	bl	800c49a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ce68:	f7fd fbd8 	bl	800a61c <HAL_GetTick>
 800ce6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ce6e:	e008      	b.n	800ce82 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ce70:	f7fd fbd4 	bl	800a61c <HAL_GetTick>
 800ce74:	4602      	mov	r2, r0
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	d901      	bls.n	800ce82 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e09a      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ce82:	f7ff fbdb 	bl	800c63c <LL_RCC_IsActiveFlag_PPRE1>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d0f1      	beq.n	800ce70 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 0308 	and.w	r3, r3, #8
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d017      	beq.n	800cec8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	691b      	ldr	r3, [r3, #16]
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7ff fb0e 	bl	800c4c0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800cea4:	f7fd fbba 	bl	800a61c <HAL_GetTick>
 800cea8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ceaa:	e008      	b.n	800cebe <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ceac:	f7fd fbb6 	bl	800a61c <HAL_GetTick>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	d901      	bls.n	800cebe <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800ceba:	2303      	movs	r3, #3
 800cebc:	e07c      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800cebe:	f7ff fbce 	bl	800c65e <LL_RCC_IsActiveFlag_PPRE2>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d0f1      	beq.n	800ceac <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d043      	beq.n	800cf5c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d106      	bne.n	800ceea <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800cedc:	f7ff f99b 	bl	800c216 <LL_RCC_HSE_IsReady>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d11e      	bne.n	800cf24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e066      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	2b03      	cmp	r3, #3
 800cef0:	d106      	bne.n	800cf00 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800cef2:	f7ff fb42 	bl	800c57a <LL_RCC_PLL_IsReady>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d113      	bne.n	800cf24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	e05b      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d106      	bne.n	800cf16 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cf08:	f7ff fa35 	bl	800c376 <LL_RCC_MSI_IsReady>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d108      	bne.n	800cf24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e050      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cf16:	f7ff f9ab 	bl	800c270 <LL_RCC_HSI_IsReady>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	e049      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7ff fa6f 	bl	800c40c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cf2e:	f7fd fb75 	bl	800a61c <HAL_GetTick>
 800cf32:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf34:	e00a      	b.n	800cf4c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf36:	f7fd fb71 	bl	800a61c <HAL_GetTick>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d901      	bls.n	800cf4c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e035      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf4c:	f7ff fa71 	bl	800c432 <LL_RCC_GetSysClkSource>
 800cf50:	4602      	mov	r2, r0
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d1ec      	bne.n	800cf36 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cf5c:	4b18      	ldr	r3, [pc, #96]	; (800cfc0 <HAL_RCC_ClockConfig+0x23c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0307 	and.w	r3, r3, #7
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d21b      	bcs.n	800cfa2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf6a:	4b15      	ldr	r3, [pc, #84]	; (800cfc0 <HAL_RCC_ClockConfig+0x23c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f023 0207 	bic.w	r2, r3, #7
 800cf72:	4913      	ldr	r1, [pc, #76]	; (800cfc0 <HAL_RCC_ClockConfig+0x23c>)
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	4313      	orrs	r3, r2
 800cf78:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cf7a:	f7fd fb4f 	bl	800a61c <HAL_GetTick>
 800cf7e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf80:	e008      	b.n	800cf94 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cf82:	f7fd fb4b 	bl	800a61c <HAL_GetTick>
 800cf86:	4602      	mov	r2, r0
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	d901      	bls.n	800cf94 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800cf90:	2303      	movs	r3, #3
 800cf92:	e011      	b.n	800cfb8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf94:	4b0a      	ldr	r3, [pc, #40]	; (800cfc0 <HAL_RCC_ClockConfig+0x23c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f003 0307 	and.w	r3, r3, #7
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d1ef      	bne.n	800cf82 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cfa2:	f000 f8b3 	bl	800d10c <HAL_RCC_GetHCLKFreq>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	4a06      	ldr	r2, [pc, #24]	; (800cfc4 <HAL_RCC_ClockConfig+0x240>)
 800cfaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800cfac:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <HAL_RCC_ClockConfig+0x244>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fd f959 	bl	800a268 <HAL_InitTick>
 800cfb6:	4603      	mov	r3, r0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	58004000 	.word	0x58004000
 800cfc4:	20000080 	.word	0x20000080
 800cfc8:	20000084 	.word	0x20000084

0800cfcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cfcc:	b590      	push	{r4, r7, lr}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cfda:	f7ff fa2a 	bl	800c432 <LL_RCC_GetSysClkSource>
 800cfde:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cfe0:	f7ff fafe 	bl	800c5e0 <LL_RCC_PLL_GetMainSource>
 800cfe4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d005      	beq.n	800cff8 <HAL_RCC_GetSysClockFreq+0x2c>
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2b0c      	cmp	r3, #12
 800cff0:	d139      	bne.n	800d066 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d136      	bne.n	800d066 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800cff8:	f7ff f9cd 	bl	800c396 <LL_RCC_MSI_IsEnabledRangeSelect>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d115      	bne.n	800d02e <HAL_RCC_GetSysClockFreq+0x62>
 800d002:	f7ff f9c8 	bl	800c396 <LL_RCC_MSI_IsEnabledRangeSelect>
 800d006:	4603      	mov	r3, r0
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d106      	bne.n	800d01a <HAL_RCC_GetSysClockFreq+0x4e>
 800d00c:	f7ff f9d3 	bl	800c3b6 <LL_RCC_MSI_GetRange>
 800d010:	4603      	mov	r3, r0
 800d012:	0a1b      	lsrs	r3, r3, #8
 800d014:	f003 030f 	and.w	r3, r3, #15
 800d018:	e005      	b.n	800d026 <HAL_RCC_GetSysClockFreq+0x5a>
 800d01a:	f7ff f9d7 	bl	800c3cc <LL_RCC_MSI_GetRangeAfterStandby>
 800d01e:	4603      	mov	r3, r0
 800d020:	0a1b      	lsrs	r3, r3, #8
 800d022:	f003 030f 	and.w	r3, r3, #15
 800d026:	4a36      	ldr	r2, [pc, #216]	; (800d100 <HAL_RCC_GetSysClockFreq+0x134>)
 800d028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d02c:	e014      	b.n	800d058 <HAL_RCC_GetSysClockFreq+0x8c>
 800d02e:	f7ff f9b2 	bl	800c396 <LL_RCC_MSI_IsEnabledRangeSelect>
 800d032:	4603      	mov	r3, r0
 800d034:	2b01      	cmp	r3, #1
 800d036:	d106      	bne.n	800d046 <HAL_RCC_GetSysClockFreq+0x7a>
 800d038:	f7ff f9bd 	bl	800c3b6 <LL_RCC_MSI_GetRange>
 800d03c:	4603      	mov	r3, r0
 800d03e:	091b      	lsrs	r3, r3, #4
 800d040:	f003 030f 	and.w	r3, r3, #15
 800d044:	e005      	b.n	800d052 <HAL_RCC_GetSysClockFreq+0x86>
 800d046:	f7ff f9c1 	bl	800c3cc <LL_RCC_MSI_GetRangeAfterStandby>
 800d04a:	4603      	mov	r3, r0
 800d04c:	091b      	lsrs	r3, r3, #4
 800d04e:	f003 030f 	and.w	r3, r3, #15
 800d052:	4a2b      	ldr	r2, [pc, #172]	; (800d100 <HAL_RCC_GetSysClockFreq+0x134>)
 800d054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d058:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d115      	bne.n	800d08c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800d064:	e012      	b.n	800d08c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	2b04      	cmp	r3, #4
 800d06a:	d102      	bne.n	800d072 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d06c:	4b25      	ldr	r3, [pc, #148]	; (800d104 <HAL_RCC_GetSysClockFreq+0x138>)
 800d06e:	617b      	str	r3, [r7, #20]
 800d070:	e00c      	b.n	800d08c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	2b08      	cmp	r3, #8
 800d076:	d109      	bne.n	800d08c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d078:	f7ff f8a0 	bl	800c1bc <LL_RCC_HSE_IsEnabledDiv2>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d102      	bne.n	800d088 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800d082:	4b20      	ldr	r3, [pc, #128]	; (800d104 <HAL_RCC_GetSysClockFreq+0x138>)
 800d084:	617b      	str	r3, [r7, #20]
 800d086:	e001      	b.n	800d08c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800d088:	4b1f      	ldr	r3, [pc, #124]	; (800d108 <HAL_RCC_GetSysClockFreq+0x13c>)
 800d08a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d08c:	f7ff f9d1 	bl	800c432 <LL_RCC_GetSysClkSource>
 800d090:	4603      	mov	r3, r0
 800d092:	2b0c      	cmp	r3, #12
 800d094:	d12f      	bne.n	800d0f6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800d096:	f7ff faa3 	bl	800c5e0 <LL_RCC_PLL_GetMainSource>
 800d09a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d003      	beq.n	800d0aa <HAL_RCC_GetSysClockFreq+0xde>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2b03      	cmp	r3, #3
 800d0a6:	d003      	beq.n	800d0b0 <HAL_RCC_GetSysClockFreq+0xe4>
 800d0a8:	e00d      	b.n	800d0c6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800d0aa:	4b16      	ldr	r3, [pc, #88]	; (800d104 <HAL_RCC_GetSysClockFreq+0x138>)
 800d0ac:	60fb      	str	r3, [r7, #12]
        break;
 800d0ae:	e00d      	b.n	800d0cc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800d0b0:	f7ff f884 	bl	800c1bc <LL_RCC_HSE_IsEnabledDiv2>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d102      	bne.n	800d0c0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800d0ba:	4b12      	ldr	r3, [pc, #72]	; (800d104 <HAL_RCC_GetSysClockFreq+0x138>)
 800d0bc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800d0be:	e005      	b.n	800d0cc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800d0c0:	4b11      	ldr	r3, [pc, #68]	; (800d108 <HAL_RCC_GetSysClockFreq+0x13c>)
 800d0c2:	60fb      	str	r3, [r7, #12]
        break;
 800d0c4:	e002      	b.n	800d0cc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	60fb      	str	r3, [r7, #12]
        break;
 800d0ca:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800d0cc:	f7ff fa66 	bl	800c59c <LL_RCC_PLL_GetN>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	fb03 f402 	mul.w	r4, r3, r2
 800d0d8:	f7ff fa77 	bl	800c5ca <LL_RCC_PLL_GetDivider>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	091b      	lsrs	r3, r3, #4
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	fbb4 f4f3 	udiv	r4, r4, r3
 800d0e6:	f7ff fa65 	bl	800c5b4 <LL_RCC_PLL_GetR>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	0f5b      	lsrs	r3, r3, #29
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	fbb4 f3f3 	udiv	r3, r4, r3
 800d0f4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800d0f6:	697b      	ldr	r3, [r7, #20]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	371c      	adds	r7, #28
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd90      	pop	{r4, r7, pc}
 800d100:	0801afac 	.word	0x0801afac
 800d104:	00f42400 	.word	0x00f42400
 800d108:	01e84800 	.word	0x01e84800

0800d10c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d10c:	b598      	push	{r3, r4, r7, lr}
 800d10e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800d110:	f7ff ff5c 	bl	800cfcc <HAL_RCC_GetSysClockFreq>
 800d114:	4604      	mov	r4, r0
 800d116:	f7ff f9e6 	bl	800c4e6 <LL_RCC_GetAHBPrescaler>
 800d11a:	4603      	mov	r3, r0
 800d11c:	091b      	lsrs	r3, r3, #4
 800d11e:	f003 030f 	and.w	r3, r3, #15
 800d122:	4a03      	ldr	r2, [pc, #12]	; (800d130 <HAL_RCC_GetHCLKFreq+0x24>)
 800d124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d128:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	bd98      	pop	{r3, r4, r7, pc}
 800d130:	0801af4c 	.word	0x0801af4c

0800d134 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d134:	b598      	push	{r3, r4, r7, lr}
 800d136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800d138:	f7ff ffe8 	bl	800d10c <HAL_RCC_GetHCLKFreq>
 800d13c:	4604      	mov	r4, r0
 800d13e:	f7ff f9ea 	bl	800c516 <LL_RCC_GetAPB1Prescaler>
 800d142:	4603      	mov	r3, r0
 800d144:	0a1b      	lsrs	r3, r3, #8
 800d146:	4a03      	ldr	r2, [pc, #12]	; (800d154 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d14c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800d150:	4618      	mov	r0, r3
 800d152:	bd98      	pop	{r3, r4, r7, pc}
 800d154:	0801af8c 	.word	0x0801af8c

0800d158 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d158:	b598      	push	{r3, r4, r7, lr}
 800d15a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800d15c:	f7ff ffd6 	bl	800d10c <HAL_RCC_GetHCLKFreq>
 800d160:	4604      	mov	r4, r0
 800d162:	f7ff f9e3 	bl	800c52c <LL_RCC_GetAPB2Prescaler>
 800d166:	4603      	mov	r3, r0
 800d168:	0adb      	lsrs	r3, r3, #11
 800d16a:	4a03      	ldr	r2, [pc, #12]	; (800d178 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d170:	fa24 f303 	lsr.w	r3, r4, r3
}
 800d174:	4618      	mov	r0, r3
 800d176:	bd98      	pop	{r3, r4, r7, pc}
 800d178:	0801af8c 	.word	0x0801af8c

0800d17c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d02d      	beq.n	800d1e8 <HAL_RCC_GetClockConfig+0x6c>
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d02a      	beq.n	800d1e8 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	224f      	movs	r2, #79	; 0x4f
 800d196:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 800d198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f003 020c 	and.w	r2, r3, #12
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 800d1c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d1d0:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	011b      	lsls	r3, r3, #4
 800d1d6:	b2da      	uxtb	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d1dc:	4b05      	ldr	r3, [pc, #20]	; (800d1f4 <HAL_RCC_GetClockConfig+0x78>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 0207 	and.w	r2, r3, #7
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	601a      	str	r2, [r3, #0]
  }
}
 800d1e8:	bf00      	nop
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bc80      	pop	{r7}
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	58004000 	.word	0x58004000

0800d1f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800d1f8:	b590      	push	{r4, r7, lr}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	091b      	lsrs	r3, r3, #4
 800d204:	f003 030f 	and.w	r3, r3, #15
 800d208:	4a10      	ldr	r2, [pc, #64]	; (800d24c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800d20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d20e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800d210:	f7ff f974 	bl	800c4fc <LL_RCC_GetAHB3Prescaler>
 800d214:	4603      	mov	r3, r0
 800d216:	091b      	lsrs	r3, r3, #4
 800d218:	f003 030f 	and.w	r3, r3, #15
 800d21c:	4a0c      	ldr	r2, [pc, #48]	; (800d250 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800d21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	fbb2 f3f3 	udiv	r3, r2, r3
 800d228:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	4a09      	ldr	r2, [pc, #36]	; (800d254 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800d22e:	fba2 2303 	umull	r2, r3, r2, r3
 800d232:	0c9c      	lsrs	r4, r3, #18
 800d234:	f7fe ff5e 	bl	800c0f4 <HAL_PWREx_GetVoltageRange>
 800d238:	4603      	mov	r3, r0
 800d23a:	4619      	mov	r1, r3
 800d23c:	4620      	mov	r0, r4
 800d23e:	f000 f80b 	bl	800d258 <RCC_SetFlashLatency>
 800d242:	4603      	mov	r3, r0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3714      	adds	r7, #20
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd90      	pop	{r4, r7, pc}
 800d24c:	0801afac 	.word	0x0801afac
 800d250:	0801af4c 	.word	0x0801af4c
 800d254:	431bde83 	.word	0x431bde83

0800d258 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b08e      	sub	sp, #56	; 0x38
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800d262:	4a3a      	ldr	r2, [pc, #232]	; (800d34c <RCC_SetFlashLatency+0xf4>)
 800d264:	f107 0320 	add.w	r3, r7, #32
 800d268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d26c:	6018      	str	r0, [r3, #0]
 800d26e:	3304      	adds	r3, #4
 800d270:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800d272:	4a37      	ldr	r2, [pc, #220]	; (800d350 <RCC_SetFlashLatency+0xf8>)
 800d274:	f107 0318 	add.w	r3, r7, #24
 800d278:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d27c:	6018      	str	r0, [r3, #0]
 800d27e:	3304      	adds	r3, #4
 800d280:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800d282:	4a34      	ldr	r2, [pc, #208]	; (800d354 <RCC_SetFlashLatency+0xfc>)
 800d284:	f107 030c 	add.w	r3, r7, #12
 800d288:	ca07      	ldmia	r2, {r0, r1, r2}
 800d28a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800d28e:	2300      	movs	r3, #0
 800d290:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d298:	d11b      	bne.n	800d2d2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d29a:	2300      	movs	r3, #0
 800d29c:	633b      	str	r3, [r7, #48]	; 0x30
 800d29e:	e014      	b.n	800d2ca <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	005b      	lsls	r3, r3, #1
 800d2a4:	3338      	adds	r3, #56	; 0x38
 800d2a6:	443b      	add	r3, r7
 800d2a8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d807      	bhi.n	800d2c4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	3338      	adds	r3, #56	; 0x38
 800d2ba:	443b      	add	r3, r7
 800d2bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d2c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d2c2:	e021      	b.n	800d308 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800d2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	633b      	str	r3, [r7, #48]	; 0x30
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	d9e7      	bls.n	800d2a0 <RCC_SetFlashLatency+0x48>
 800d2d0:	e01a      	b.n	800d308 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2d6:	e014      	b.n	800d302 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2da:	005b      	lsls	r3, r3, #1
 800d2dc:	3338      	adds	r3, #56	; 0x38
 800d2de:	443b      	add	r3, r7
 800d2e0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d807      	bhi.n	800d2fc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800d2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	3338      	adds	r3, #56	; 0x38
 800d2f2:	443b      	add	r3, r7
 800d2f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d2f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800d2fa:	e005      	b.n	800d308 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800d2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fe:	3301      	adds	r3, #1
 800d300:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d304:	2b02      	cmp	r3, #2
 800d306:	d9e7      	bls.n	800d2d8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d308:	4b13      	ldr	r3, [pc, #76]	; (800d358 <RCC_SetFlashLatency+0x100>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f023 0207 	bic.w	r2, r3, #7
 800d310:	4911      	ldr	r1, [pc, #68]	; (800d358 <RCC_SetFlashLatency+0x100>)
 800d312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d314:	4313      	orrs	r3, r2
 800d316:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d318:	f7fd f980 	bl	800a61c <HAL_GetTick>
 800d31c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d31e:	e008      	b.n	800d332 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800d320:	f7fd f97c 	bl	800a61c <HAL_GetTick>
 800d324:	4602      	mov	r2, r0
 800d326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	2b02      	cmp	r3, #2
 800d32c:	d901      	bls.n	800d332 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800d32e:	2303      	movs	r3, #3
 800d330:	e007      	b.n	800d342 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800d332:	4b09      	ldr	r3, [pc, #36]	; (800d358 <RCC_SetFlashLatency+0x100>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f003 0307 	and.w	r3, r3, #7
 800d33a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d1ef      	bne.n	800d320 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800d340:	2300      	movs	r3, #0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3738      	adds	r7, #56	; 0x38
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	0801ae5c 	.word	0x0801ae5c
 800d350:	0801ae64 	.word	0x0801ae64
 800d354:	0801ae6c 	.word	0x0801ae6c
 800d358:	58004000 	.word	0x58004000

0800d35c <LL_RCC_LSE_IsReady>:
{
 800d35c:	b480      	push	{r7}
 800d35e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d368:	f003 0302 	and.w	r3, r3, #2
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d101      	bne.n	800d374 <LL_RCC_LSE_IsReady+0x18>
 800d370:	2301      	movs	r3, #1
 800d372:	e000      	b.n	800d376 <LL_RCC_LSE_IsReady+0x1a>
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	46bd      	mov	sp, r7
 800d37a:	bc80      	pop	{r7}
 800d37c:	4770      	bx	lr

0800d37e <LL_RCC_SetUSARTClockSource>:
{
 800d37e:	b480      	push	{r7}
 800d380:	b083      	sub	sp, #12
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800d386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d38a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	0c1b      	lsrs	r3, r3, #16
 800d392:	43db      	mvns	r3, r3
 800d394:	401a      	ands	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	b29b      	uxth	r3, r3
 800d39a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d3a4:	bf00      	nop
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bc80      	pop	{r7}
 800d3ac:	4770      	bx	lr

0800d3ae <LL_RCC_SetI2SClockSource>:
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	b083      	sub	sp, #12
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800d3b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d3c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d3ce:	bf00      	nop
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bc80      	pop	{r7}
 800d3d6:	4770      	bx	lr

0800d3d8 <LL_RCC_SetLPUARTClockSource>:
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800d3e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d3ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bc80      	pop	{r7}
 800d400:	4770      	bx	lr

0800d402 <LL_RCC_SetI2CClockSource>:
{
 800d402:	b480      	push	{r7}
 800d404:	b083      	sub	sp, #12
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800d40a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d40e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	091b      	lsrs	r3, r3, #4
 800d416:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d41a:	43db      	mvns	r3, r3
 800d41c:	401a      	ands	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	011b      	lsls	r3, r3, #4
 800d422:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800d426:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d42a:	4313      	orrs	r3, r2
 800d42c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	bc80      	pop	{r7}
 800d438:	4770      	bx	lr

0800d43a <LL_RCC_SetLPTIMClockSource>:
{
 800d43a:	b480      	push	{r7}
 800d43c:	b083      	sub	sp, #12
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800d442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d446:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	0c1b      	lsrs	r3, r3, #16
 800d44e:	041b      	lsls	r3, r3, #16
 800d450:	43db      	mvns	r3, r3
 800d452:	401a      	ands	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	041b      	lsls	r3, r3, #16
 800d458:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d45c:	4313      	orrs	r3, r2
 800d45e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d462:	bf00      	nop
 800d464:	370c      	adds	r7, #12
 800d466:	46bd      	mov	sp, r7
 800d468:	bc80      	pop	{r7}
 800d46a:	4770      	bx	lr

0800d46c <LL_RCC_SetRNGClockSource>:
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800d474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d47c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4313      	orrs	r3, r2
 800d488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	bc80      	pop	{r7}
 800d494:	4770      	bx	lr

0800d496 <LL_RCC_SetADCClockSource>:
{
 800d496:	b480      	push	{r7}
 800d498:	b083      	sub	sp, #12
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d49e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d4aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800d4b6:	bf00      	nop
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bc80      	pop	{r7}
 800d4be:	4770      	bx	lr

0800d4c0 <LL_RCC_SetRTCClockSource>:
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d4c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d4d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bc80      	pop	{r7}
 800d4e8:	4770      	bx	lr

0800d4ea <LL_RCC_GetRTCClockSource>:
{
 800d4ea:	b480      	push	{r7}
 800d4ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d4ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bc80      	pop	{r7}
 800d500:	4770      	bx	lr

0800d502 <LL_RCC_ForceBackupDomainReset>:
{
 800d502:	b480      	push	{r7}
 800d504:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d50e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d51a:	bf00      	nop
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bc80      	pop	{r7}
 800d520:	4770      	bx	lr

0800d522 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d522:	b480      	push	{r7}
 800d524:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d52e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d53a:	bf00      	nop
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bc80      	pop	{r7}
 800d540:	4770      	bx	lr
	...

0800d544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800d54c:	2300      	movs	r3, #0
 800d54e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800d550:	2300      	movs	r3, #0
 800d552:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d554:	2300      	movs	r3, #0
 800d556:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d560:	2b00      	cmp	r3, #0
 800d562:	d058      	beq.n	800d616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800d564:	f7fe fdb8 	bl	800c0d8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d568:	f7fd f858 	bl	800a61c <HAL_GetTick>
 800d56c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800d56e:	e009      	b.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d570:	f7fd f854 	bl	800a61c <HAL_GetTick>
 800d574:	4602      	mov	r2, r0
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	2b02      	cmp	r3, #2
 800d57c:	d902      	bls.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800d57e:	2303      	movs	r3, #3
 800d580:	74fb      	strb	r3, [r7, #19]
        break;
 800d582:	e006      	b.n	800d592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800d584:	4b7b      	ldr	r3, [pc, #492]	; (800d774 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d58c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d590:	d1ee      	bne.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800d592:	7cfb      	ldrb	r3, [r7, #19]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d13c      	bne.n	800d612 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800d598:	f7ff ffa7 	bl	800d4ea <LL_RCC_GetRTCClockSource>
 800d59c:	4602      	mov	r2, r0
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d00f      	beq.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d5a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5b2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d5b4:	f7ff ffa5 	bl	800d502 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d5b8:	f7ff ffb3 	bl	800d522 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d5bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f003 0302 	and.w	r3, r3, #2
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d014      	beq.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5d0:	f7fd f824 	bl	800a61c <HAL_GetTick>
 800d5d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800d5d6:	e00b      	b.n	800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d5d8:	f7fd f820 	bl	800a61c <HAL_GetTick>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d902      	bls.n	800d5f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	74fb      	strb	r3, [r7, #19]
            break;
 800d5ee:	e004      	b.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800d5f0:	f7ff feb4 	bl	800d35c <LL_RCC_LSE_IsReady>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d1ee      	bne.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800d5fa:	7cfb      	ldrb	r3, [r7, #19]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d105      	bne.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d604:	4618      	mov	r0, r3
 800d606:	f7ff ff5b 	bl	800d4c0 <LL_RCC_SetRTCClockSource>
 800d60a:	e004      	b.n	800d616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d60c:	7cfb      	ldrb	r3, [r7, #19]
 800d60e:	74bb      	strb	r3, [r7, #18]
 800d610:	e001      	b.n	800d616 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d612:	7cfb      	ldrb	r3, [r7, #19]
 800d614:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d004      	beq.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	4618      	mov	r0, r3
 800d628:	f7ff fea9 	bl	800d37e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f003 0302 	and.w	r3, r3, #2
 800d634:	2b00      	cmp	r3, #0
 800d636:	d004      	beq.n	800d642 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff fe9e 	bl	800d37e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f003 0320 	and.w	r3, r3, #32
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d004      	beq.n	800d658 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	4618      	mov	r0, r3
 800d654:	f7ff fec0 	bl	800d3d8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d660:	2b00      	cmp	r3, #0
 800d662:	d004      	beq.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff fee6 	bl	800d43a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d676:	2b00      	cmp	r3, #0
 800d678:	d004      	beq.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67e:	4618      	mov	r0, r3
 800d680:	f7ff fedb 	bl	800d43a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d004      	beq.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff fed0 	bl	800d43a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d004      	beq.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7ff fea9 	bl	800d402 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d004      	beq.n	800d6c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	699b      	ldr	r3, [r3, #24]
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff fe9e 	bl	800d402 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d004      	beq.n	800d6dc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	69db      	ldr	r3, [r3, #28]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff fe93 	bl	800d402 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f003 0310 	and.w	r3, r3, #16
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d011      	beq.n	800d70c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff fe5e 	bl	800d3ae <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6fa:	d107      	bne.n	800d70c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800d6fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d70a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d714:	2b00      	cmp	r3, #0
 800d716:	d010      	beq.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7ff fea5 	bl	800d46c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d726:	2b00      	cmp	r3, #0
 800d728:	d107      	bne.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d72a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d738:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d742:	2b00      	cmp	r3, #0
 800d744:	d011      	beq.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7ff fea3 	bl	800d496 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d758:	d107      	bne.n	800d76a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d75a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d768:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800d76a:	7cbb      	ldrb	r3, [r7, #18]
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3718      	adds	r7, #24
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	58000400 	.word	0x58000400

0800d778 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d071      	beq.n	800d86e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d790:	b2db      	uxtb	r3, r3
 800d792:	2b00      	cmp	r3, #0
 800d794:	d106      	bne.n	800d7a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7fc fcc2 	bl	800a128 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2202      	movs	r2, #2
 800d7a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d7ac:	4b32      	ldr	r3, [pc, #200]	; (800d878 <HAL_RTC_Init+0x100>)
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	f003 0310 	and.w	r3, r3, #16
 800d7b4:	2b10      	cmp	r3, #16
 800d7b6:	d051      	beq.n	800d85c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7b8:	4b2f      	ldr	r3, [pc, #188]	; (800d878 <HAL_RTC_Init+0x100>)
 800d7ba:	22ca      	movs	r2, #202	; 0xca
 800d7bc:	625a      	str	r2, [r3, #36]	; 0x24
 800d7be:	4b2e      	ldr	r3, [pc, #184]	; (800d878 <HAL_RTC_Init+0x100>)
 800d7c0:	2253      	movs	r2, #83	; 0x53
 800d7c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 faa3 	bl	800dd10 <RTC_EnterInitMode>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d7ce:	7bfb      	ldrb	r3, [r7, #15]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d13f      	bne.n	800d854 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800d7d4:	4b28      	ldr	r3, [pc, #160]	; (800d878 <HAL_RTC_Init+0x100>)
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	4a27      	ldr	r2, [pc, #156]	; (800d878 <HAL_RTC_Init+0x100>)
 800d7da:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800d7de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7e2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800d7e4:	4b24      	ldr	r3, [pc, #144]	; (800d878 <HAL_RTC_Init+0x100>)
 800d7e6:	699a      	ldr	r2, [r3, #24]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6859      	ldr	r1, [r3, #4]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	4319      	orrs	r1, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	430b      	orrs	r3, r1
 800d7f8:	491f      	ldr	r1, [pc, #124]	; (800d878 <HAL_RTC_Init+0x100>)
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68da      	ldr	r2, [r3, #12]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	041b      	lsls	r3, r3, #16
 800d808:	491b      	ldr	r1, [pc, #108]	; (800d878 <HAL_RTC_Init+0x100>)
 800d80a:	4313      	orrs	r3, r2
 800d80c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800d80e:	4b1a      	ldr	r3, [pc, #104]	; (800d878 <HAL_RTC_Init+0x100>)
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d81e:	430b      	orrs	r3, r1
 800d820:	4915      	ldr	r1, [pc, #84]	; (800d878 <HAL_RTC_Init+0x100>)
 800d822:	4313      	orrs	r3, r2
 800d824:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 faa6 	bl	800dd78 <RTC_ExitInitMode>
 800d82c:	4603      	mov	r3, r0
 800d82e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800d830:	7bfb      	ldrb	r3, [r7, #15]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d10e      	bne.n	800d854 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800d836:	4b10      	ldr	r3, [pc, #64]	; (800d878 <HAL_RTC_Init+0x100>)
 800d838:	699b      	ldr	r3, [r3, #24]
 800d83a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6a19      	ldr	r1, [r3, #32]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	69db      	ldr	r3, [r3, #28]
 800d846:	4319      	orrs	r1, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	695b      	ldr	r3, [r3, #20]
 800d84c:	430b      	orrs	r3, r1
 800d84e:	490a      	ldr	r1, [pc, #40]	; (800d878 <HAL_RTC_Init+0x100>)
 800d850:	4313      	orrs	r3, r2
 800d852:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d854:	4b08      	ldr	r3, [pc, #32]	; (800d878 <HAL_RTC_Init+0x100>)
 800d856:	22ff      	movs	r2, #255	; 0xff
 800d858:	625a      	str	r2, [r3, #36]	; 0x24
 800d85a:	e001      	b.n	800d860 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800d85c:	2300      	movs	r3, #0
 800d85e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d860:	7bfb      	ldrb	r3, [r7, #15]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d103      	bne.n	800d86e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d870:	4618      	mov	r0, r3
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	40002800 	.word	0x40002800

0800d87c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d87c:	b590      	push	{r4, r7, lr}
 800d87e:	b087      	sub	sp, #28
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d101      	bne.n	800d896 <HAL_RTC_SetTime+0x1a>
 800d892:	2302      	movs	r3, #2
 800d894:	e088      	b.n	800d9a8 <HAL_RTC_SetTime+0x12c>
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2201      	movs	r2, #1
 800d89a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2202      	movs	r2, #2
 800d8a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d8a6:	4b42      	ldr	r3, [pc, #264]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d8a8:	22ca      	movs	r2, #202	; 0xca
 800d8aa:	625a      	str	r2, [r3, #36]	; 0x24
 800d8ac:	4b40      	ldr	r3, [pc, #256]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d8ae:	2253      	movs	r2, #83	; 0x53
 800d8b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	f000 fa2c 	bl	800dd10 <RTC_EnterInitMode>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d8bc:	7cfb      	ldrb	r3, [r7, #19]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d15e      	bne.n	800d980 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800d8c2:	4b3b      	ldr	r3, [pc, #236]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8ce:	d057      	beq.n	800d980 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d125      	bne.n	800d922 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800d8d6:	4b36      	ldr	r3, [pc, #216]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d102      	bne.n	800d8e8 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 fa81 	bl	800ddf4 <RTC_ByteToBcd2>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	785b      	ldrb	r3, [r3, #1]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f000 fa7a 	bl	800ddf4 <RTC_ByteToBcd2>
 800d900:	4603      	mov	r3, r0
 800d902:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d904:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	789b      	ldrb	r3, [r3, #2]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f000 fa72 	bl	800ddf4 <RTC_ByteToBcd2>
 800d910:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d912:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	78db      	ldrb	r3, [r3, #3]
 800d91a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d91c:	4313      	orrs	r3, r2
 800d91e:	617b      	str	r3, [r7, #20]
 800d920:	e017      	b.n	800d952 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800d922:	4b23      	ldr	r3, [pc, #140]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d924:	699b      	ldr	r3, [r3, #24]
 800d926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d102      	bne.n	800d934 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	2200      	movs	r2, #0
 800d932:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	785b      	ldrb	r3, [r3, #1]
 800d93e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d940:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d946:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	78db      	ldrb	r3, [r3, #3]
 800d94c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800d94e:	4313      	orrs	r3, r2
 800d950:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800d952:	4a17      	ldr	r2, [pc, #92]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d95a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d95e:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800d960:	4b13      	ldr	r3, [pc, #76]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d962:	699b      	ldr	r3, [r3, #24]
 800d964:	4a12      	ldr	r2, [pc, #72]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d96a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800d96c:	4b10      	ldr	r3, [pc, #64]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d96e:	699a      	ldr	r2, [r3, #24]
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	68d9      	ldr	r1, [r3, #12]
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	691b      	ldr	r3, [r3, #16]
 800d978:	430b      	orrs	r3, r1
 800d97a:	490d      	ldr	r1, [pc, #52]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d97c:	4313      	orrs	r3, r2
 800d97e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 f9f9 	bl	800dd78 <RTC_ExitInitMode>
 800d986:	4603      	mov	r3, r0
 800d988:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d98a:	4b09      	ldr	r3, [pc, #36]	; (800d9b0 <HAL_RTC_SetTime+0x134>)
 800d98c:	22ff      	movs	r2, #255	; 0xff
 800d98e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d990:	7cfb      	ldrb	r3, [r7, #19]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d103      	bne.n	800d99e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2201      	movs	r2, #1
 800d99a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800d9a6:	7cfb      	ldrb	r3, [r7, #19]
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	371c      	adds	r7, #28
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd90      	pop	{r4, r7, pc}
 800d9b0:	40002800 	.word	0x40002800

0800d9b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d9b4:	b590      	push	{r4, r7, lr}
 800d9b6:	b087      	sub	sp, #28
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d101      	bne.n	800d9ce <HAL_RTC_SetDate+0x1a>
 800d9ca:	2302      	movs	r3, #2
 800d9cc:	e071      	b.n	800dab2 <HAL_RTC_SetDate+0xfe>
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2202      	movs	r2, #2
 800d9da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d10e      	bne.n	800da02 <HAL_RTC_SetDate+0x4e>
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	785b      	ldrb	r3, [r3, #1]
 800d9e8:	f003 0310 	and.w	r3, r3, #16
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d008      	beq.n	800da02 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	785b      	ldrb	r3, [r3, #1]
 800d9f4:	f023 0310 	bic.w	r3, r3, #16
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	330a      	adds	r3, #10
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d11c      	bne.n	800da42 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	78db      	ldrb	r3, [r3, #3]
 800da0c:	4618      	mov	r0, r3
 800da0e:	f000 f9f1 	bl	800ddf4 <RTC_ByteToBcd2>
 800da12:	4603      	mov	r3, r0
 800da14:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	785b      	ldrb	r3, [r3, #1]
 800da1a:	4618      	mov	r0, r3
 800da1c:	f000 f9ea 	bl	800ddf4 <RTC_ByteToBcd2>
 800da20:	4603      	mov	r3, r0
 800da22:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800da24:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	789b      	ldrb	r3, [r3, #2]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 f9e2 	bl	800ddf4 <RTC_ByteToBcd2>
 800da30:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da32:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800da3c:	4313      	orrs	r3, r2
 800da3e:	617b      	str	r3, [r7, #20]
 800da40:	e00e      	b.n	800da60 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	78db      	ldrb	r3, [r3, #3]
 800da46:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	785b      	ldrb	r3, [r3, #1]
 800da4c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800da4e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800da50:	68ba      	ldr	r2, [r7, #8]
 800da52:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800da54:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800da5c:	4313      	orrs	r3, r2
 800da5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da60:	4b16      	ldr	r3, [pc, #88]	; (800dabc <HAL_RTC_SetDate+0x108>)
 800da62:	22ca      	movs	r2, #202	; 0xca
 800da64:	625a      	str	r2, [r3, #36]	; 0x24
 800da66:	4b15      	ldr	r3, [pc, #84]	; (800dabc <HAL_RTC_SetDate+0x108>)
 800da68:	2253      	movs	r2, #83	; 0x53
 800da6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800da6c:	68f8      	ldr	r0, [r7, #12]
 800da6e:	f000 f94f 	bl	800dd10 <RTC_EnterInitMode>
 800da72:	4603      	mov	r3, r0
 800da74:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800da76:	7cfb      	ldrb	r3, [r7, #19]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10b      	bne.n	800da94 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800da7c:	4a0f      	ldr	r2, [pc, #60]	; (800dabc <HAL_RTC_SetDate+0x108>)
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800da84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da88:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f000 f974 	bl	800dd78 <RTC_ExitInitMode>
 800da90:	4603      	mov	r3, r0
 800da92:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da94:	4b09      	ldr	r3, [pc, #36]	; (800dabc <HAL_RTC_SetDate+0x108>)
 800da96:	22ff      	movs	r2, #255	; 0xff
 800da98:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800da9a:	7cfb      	ldrb	r3, [r7, #19]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d103      	bne.n	800daa8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2201      	movs	r2, #1
 800daa4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2200      	movs	r2, #0
 800daac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800dab0:	7cfb      	ldrb	r3, [r7, #19]
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	371c      	adds	r7, #28
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd90      	pop	{r4, r7, pc}
 800daba:	bf00      	nop
 800dabc:	40002800 	.word	0x40002800

0800dac0 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800dac0:	b590      	push	{r4, r7, lr}
 800dac2:	b087      	sub	sp, #28
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800dacc:	2300      	movs	r3, #0
 800dace:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d101      	bne.n	800dade <HAL_RTC_SetAlarm+0x1e>
 800dada:	2302      	movs	r3, #2
 800dadc:	e0eb      	b.n	800dcb6 <HAL_RTC_SetAlarm+0x1f6>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2201      	movs	r2, #1
 800dae2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2202      	movs	r2, #2
 800daea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800daee:	4b74      	ldr	r3, [pc, #464]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800daf6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dafe:	d06a      	beq.n	800dbd6 <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d13a      	bne.n	800db7c <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800db06:	4b6e      	ldr	r3, [pc, #440]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800db08:	699b      	ldr	r3, [r3, #24]
 800db0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d102      	bne.n	800db18 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	2200      	movs	r2, #0
 800db16:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	695b      	ldr	r3, [r3, #20]
 800db1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	4618      	mov	r0, r3
 800db26:	f000 f965 	bl	800ddf4 <RTC_ByteToBcd2>
 800db2a:	4603      	mov	r3, r0
 800db2c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	785b      	ldrb	r3, [r3, #1]
 800db32:	4618      	mov	r0, r3
 800db34:	f000 f95e 	bl	800ddf4 <RTC_ByteToBcd2>
 800db38:	4603      	mov	r3, r0
 800db3a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800db3c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	789b      	ldrb	r3, [r3, #2]
 800db42:	4618      	mov	r0, r3
 800db44:	f000 f956 	bl	800ddf4 <RTC_ByteToBcd2>
 800db48:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800db4a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	78db      	ldrb	r3, [r3, #3]
 800db52:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800db54:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db5e:	4618      	mov	r0, r3
 800db60:	f000 f948 	bl	800ddf4 <RTC_ByteToBcd2>
 800db64:	4603      	mov	r3, r0
 800db66:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800db68:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800db70:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800db76:	4313      	orrs	r3, r2
 800db78:	617b      	str	r3, [r7, #20]
 800db7a:	e02c      	b.n	800dbd6 <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	695b      	ldr	r3, [r3, #20]
 800db80:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800db84:	d00d      	beq.n	800dba2 <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	695b      	ldr	r3, [r3, #20]
 800db8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800db8e:	d008      	beq.n	800dba2 <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800db90:	4b4b      	ldr	r3, [pc, #300]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d102      	bne.n	800dba2 <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	2200      	movs	r2, #0
 800dba0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	785b      	ldrb	r3, [r3, #1]
 800dbac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800dbae:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800dbb4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	78db      	ldrb	r3, [r3, #3]
 800dbba:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800dbbc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbc4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800dbc6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800dbcc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbd6:	4b3a      	ldr	r3, [pc, #232]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dbd8:	22ca      	movs	r2, #202	; 0xca
 800dbda:	625a      	str	r2, [r3, #36]	; 0x24
 800dbdc:	4b38      	ldr	r3, [pc, #224]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dbde:	2253      	movs	r2, #83	; 0x53
 800dbe0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbea:	d12c      	bne.n	800dc46 <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 800dbec:	4b34      	ldr	r3, [pc, #208]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dbee:	699b      	ldr	r3, [r3, #24]
 800dbf0:	4a33      	ldr	r2, [pc, #204]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dbf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800dbf6:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800dbf8:	4b31      	ldr	r3, [pc, #196]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc04:	d107      	bne.n	800dc16 <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	699a      	ldr	r2, [r3, #24]
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	69db      	ldr	r3, [r3, #28]
 800dc0e:	492c      	ldr	r1, [pc, #176]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc10:	4313      	orrs	r3, r2
 800dc12:	644b      	str	r3, [r1, #68]	; 0x44
 800dc14:	e006      	b.n	800dc24 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800dc16:	4a2a      	ldr	r2, [pc, #168]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800dc1c:	4a28      	ldr	r2, [pc, #160]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	699b      	ldr	r3, [r3, #24]
 800dc22:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800dc24:	4a26      	ldr	r2, [pc, #152]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc30:	f043 0201 	orr.w	r2, r3, #1
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 800dc38:	4b21      	ldr	r3, [pc, #132]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc3a:	699b      	ldr	r3, [r3, #24]
 800dc3c:	4a20      	ldr	r2, [pc, #128]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc42:	6193      	str	r3, [r2, #24]
 800dc44:	e02b      	b.n	800dc9e <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 800dc46:	4b1e      	ldr	r3, [pc, #120]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc48:	699b      	ldr	r3, [r3, #24]
 800dc4a:	4a1d      	ldr	r2, [pc, #116]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc4c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800dc50:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800dc52:	4b1b      	ldr	r3, [pc, #108]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc54:	2202      	movs	r2, #2
 800dc56:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc5e:	d107      	bne.n	800dc70 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	699a      	ldr	r2, [r3, #24]
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	69db      	ldr	r3, [r3, #28]
 800dc68:	4915      	ldr	r1, [pc, #84]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc6a:	4313      	orrs	r3, r2
 800dc6c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800dc6e:	e006      	b.n	800dc7e <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800dc70:	4a13      	ldr	r2, [pc, #76]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800dc76:	4a12      	ldr	r2, [pc, #72]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	699b      	ldr	r3, [r3, #24]
 800dc7c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800dc7e:	4a10      	ldr	r2, [pc, #64]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc8a:	f043 0202 	orr.w	r2, r3, #2
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 800dc92:	4b0b      	ldr	r3, [pc, #44]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc94:	699b      	ldr	r3, [r3, #24]
 800dc96:	4a0a      	ldr	r2, [pc, #40]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dc98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc9c:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc9e:	4b08      	ldr	r3, [pc, #32]	; (800dcc0 <HAL_RTC_SetAlarm+0x200>)
 800dca0:	22ff      	movs	r2, #255	; 0xff
 800dca2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2201      	movs	r2, #1
 800dca8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	371c      	adds	r7, #28
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd90      	pop	{r4, r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	40002800 	.word	0x40002800

0800dcc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800dccc:	4b0f      	ldr	r3, [pc, #60]	; (800dd0c <HAL_RTC_WaitForSynchro+0x48>)
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	4a0e      	ldr	r2, [pc, #56]	; (800dd0c <HAL_RTC_WaitForSynchro+0x48>)
 800dcd2:	f023 0320 	bic.w	r3, r3, #32
 800dcd6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800dcd8:	f7fc fca0 	bl	800a61c <HAL_GetTick>
 800dcdc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dcde:	e009      	b.n	800dcf4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dce0:	f7fc fc9c 	bl	800a61c <HAL_GetTick>
 800dce4:	4602      	mov	r2, r0
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	1ad3      	subs	r3, r2, r3
 800dcea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dcee:	d901      	bls.n	800dcf4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800dcf0:	2303      	movs	r3, #3
 800dcf2:	e006      	b.n	800dd02 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800dcf4:	4b05      	ldr	r3, [pc, #20]	; (800dd0c <HAL_RTC_WaitForSynchro+0x48>)
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	f003 0320 	and.w	r3, r3, #32
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d0ef      	beq.n	800dce0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	40002800 	.word	0x40002800

0800dd10 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800dd1c:	4b15      	ldr	r3, [pc, #84]	; (800dd74 <RTC_EnterInitMode+0x64>)
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d120      	bne.n	800dd6a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dd28:	4b12      	ldr	r3, [pc, #72]	; (800dd74 <RTC_EnterInitMode+0x64>)
 800dd2a:	68db      	ldr	r3, [r3, #12]
 800dd2c:	4a11      	ldr	r2, [pc, #68]	; (800dd74 <RTC_EnterInitMode+0x64>)
 800dd2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd32:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800dd34:	f7fc fc72 	bl	800a61c <HAL_GetTick>
 800dd38:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd3a:	e00d      	b.n	800dd58 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dd3c:	f7fc fc6e 	bl	800a61c <HAL_GetTick>
 800dd40:	4602      	mov	r2, r0
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dd4a:	d905      	bls.n	800dd58 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dd4c:	2303      	movs	r3, #3
 800dd4e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2203      	movs	r2, #3
 800dd54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dd58:	4b06      	ldr	r3, [pc, #24]	; (800dd74 <RTC_EnterInitMode+0x64>)
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d102      	bne.n	800dd6a <RTC_EnterInitMode+0x5a>
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
 800dd66:	2b03      	cmp	r3, #3
 800dd68:	d1e8      	bne.n	800dd3c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	40002800 	.word	0x40002800

0800dd78 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd80:	2300      	movs	r3, #0
 800dd82:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800dd84:	4b1a      	ldr	r3, [pc, #104]	; (800ddf0 <RTC_ExitInitMode+0x78>)
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	4a19      	ldr	r2, [pc, #100]	; (800ddf0 <RTC_ExitInitMode+0x78>)
 800dd8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd8e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dd90:	4b17      	ldr	r3, [pc, #92]	; (800ddf0 <RTC_ExitInitMode+0x78>)
 800dd92:	699b      	ldr	r3, [r3, #24]
 800dd94:	f003 0320 	and.w	r3, r3, #32
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10c      	bne.n	800ddb6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7ff ff91 	bl	800dcc4 <HAL_RTC_WaitForSynchro>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d01e      	beq.n	800dde6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2203      	movs	r2, #3
 800ddac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	73fb      	strb	r3, [r7, #15]
 800ddb4:	e017      	b.n	800dde6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ddb6:	4b0e      	ldr	r3, [pc, #56]	; (800ddf0 <RTC_ExitInitMode+0x78>)
 800ddb8:	699b      	ldr	r3, [r3, #24]
 800ddba:	4a0d      	ldr	r2, [pc, #52]	; (800ddf0 <RTC_ExitInitMode+0x78>)
 800ddbc:	f023 0320 	bic.w	r3, r3, #32
 800ddc0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f7ff ff7e 	bl	800dcc4 <HAL_RTC_WaitForSynchro>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d005      	beq.n	800ddda <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2203      	movs	r2, #3
 800ddd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800ddd6:	2303      	movs	r3, #3
 800ddd8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ddda:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <RTC_ExitInitMode+0x78>)
 800dddc:	699b      	ldr	r3, [r3, #24]
 800ddde:	4a04      	ldr	r2, [pc, #16]	; (800ddf0 <RTC_ExitInitMode+0x78>)
 800dde0:	f043 0320 	orr.w	r3, r3, #32
 800dde4:	6193      	str	r3, [r2, #24]
  }

  return status;
 800dde6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	40002800 	.word	0x40002800

0800ddf4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ddfe:	2300      	movs	r3, #0
 800de00:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800de02:	79fb      	ldrb	r3, [r7, #7]
 800de04:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800de06:	e005      	b.n	800de14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	3301      	adds	r3, #1
 800de0c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800de0e:	7afb      	ldrb	r3, [r7, #11]
 800de10:	3b0a      	subs	r3, #10
 800de12:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800de14:	7afb      	ldrb	r3, [r7, #11]
 800de16:	2b09      	cmp	r3, #9
 800de18:	d8f6      	bhi.n	800de08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	011b      	lsls	r3, r3, #4
 800de20:	b2da      	uxtb	r2, r3
 800de22:	7afb      	ldrb	r3, [r7, #11]
 800de24:	4313      	orrs	r3, r2
 800de26:	b2db      	uxtb	r3, r3
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3714      	adds	r7, #20
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bc80      	pop	{r7}
 800de30:	4770      	bx	lr
	...

0800de34 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	607a      	str	r2, [r7, #4]
 800de40:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d101      	bne.n	800de50 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 800de4c:	2302      	movs	r3, #2
 800de4e:	e06f      	b.n	800df30 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2202      	movs	r2, #2
 800de5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de60:	4b35      	ldr	r3, [pc, #212]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800de62:	22ca      	movs	r2, #202	; 0xca
 800de64:	625a      	str	r2, [r3, #36]	; 0x24
 800de66:	4b34      	ldr	r3, [pc, #208]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800de68:	2253      	movs	r2, #83	; 0x53
 800de6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 800de6c:	4b32      	ldr	r3, [pc, #200]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800de6e:	699b      	ldr	r3, [r3, #24]
 800de70:	4a31      	ldr	r2, [pc, #196]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800de72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800de76:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800de78:	4b2f      	ldr	r3, [pc, #188]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800de7a:	2204      	movs	r2, #4
 800de7c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800de7e:	4b2e      	ldr	r3, [pc, #184]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de86:	2b00      	cmp	r3, #0
 800de88:	d11e      	bne.n	800dec8 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 800de8a:	f7fc fbc7 	bl	800a61c <HAL_GetTick>
 800de8e:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800de90:	e014      	b.n	800debc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800de92:	f7fc fbc3 	bl	800a61c <HAL_GetTick>
 800de96:	4602      	mov	r2, r0
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dea0:	d90c      	bls.n	800debc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dea2:	4b25      	ldr	r3, [pc, #148]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800dea4:	22ff      	movs	r2, #255	; 0xff
 800dea6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2203      	movs	r2, #3
 800deac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 800deb8:	2303      	movs	r3, #3
 800deba:	e039      	b.n	800df30 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800debc:	4b1e      	ldr	r3, [pc, #120]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	f003 0304 	and.w	r3, r3, #4
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d0e4      	beq.n	800de92 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	041a      	lsls	r2, r3, #16
 800decc:	491a      	ldr	r1, [pc, #104]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	4313      	orrs	r3, r2
 800ded2:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800ded4:	4b18      	ldr	r3, [pc, #96]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800ded6:	699b      	ldr	r3, [r3, #24]
 800ded8:	f023 0207 	bic.w	r2, r3, #7
 800dedc:	4916      	ldr	r1, [pc, #88]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d008      	beq.n	800defc <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 800deea:	4b14      	ldr	r3, [pc, #80]	; (800df3c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800deec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800def0:	4a12      	ldr	r2, [pc, #72]	; (800df3c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800def2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800def6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800defa:	e007      	b.n	800df0c <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800defc:	4b0f      	ldr	r3, [pc, #60]	; (800df3c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800defe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df02:	4a0e      	ldr	r2, [pc, #56]	; (800df3c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800df04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800df0c:	4b0a      	ldr	r3, [pc, #40]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800df0e:	699b      	ldr	r3, [r3, #24]
 800df10:	4a09      	ldr	r2, [pc, #36]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800df12:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 800df16:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df18:	4b07      	ldr	r3, [pc, #28]	; (800df38 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800df1a:	22ff      	movs	r2, #255	; 0xff
 800df1c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2201      	movs	r2, #1
 800df22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2200      	movs	r2, #0
 800df2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	3718      	adds	r7, #24
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	40002800 	.word	0x40002800
 800df3c:	58000800 	.word	0x58000800

0800df40 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d101      	bne.n	800df56 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800df52:	2302      	movs	r3, #2
 800df54:	e041      	b.n	800dfda <HAL_RTCEx_DeactivateWakeUpTimer+0x9a>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2201      	movs	r2, #1
 800df5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2202      	movs	r2, #2
 800df62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df66:	4b1f      	ldr	r3, [pc, #124]	; (800dfe4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800df68:	22ca      	movs	r2, #202	; 0xca
 800df6a:	625a      	str	r2, [r3, #36]	; 0x24
 800df6c:	4b1d      	ldr	r3, [pc, #116]	; (800dfe4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800df6e:	2253      	movs	r2, #83	; 0x53
 800df70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800df72:	4b1c      	ldr	r3, [pc, #112]	; (800dfe4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800df74:	699b      	ldr	r3, [r3, #24]
 800df76:	4a1b      	ldr	r2, [pc, #108]	; (800dfe4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800df78:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 800df7c:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 800df7e:	f7fc fb4d 	bl	800a61c <HAL_GetTick>
 800df82:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800df84:	e014      	b.n	800dfb0 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800df86:	f7fc fb49 	bl	800a61c <HAL_GetTick>
 800df8a:	4602      	mov	r2, r0
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df94:	d90c      	bls.n	800dfb0 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df96:	4b13      	ldr	r3, [pc, #76]	; (800dfe4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800df98:	22ff      	movs	r2, #255	; 0xff
 800df9a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2203      	movs	r2, #3
 800dfa0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      return HAL_TIMEOUT;
 800dfac:	2303      	movs	r3, #3
 800dfae:	e014      	b.n	800dfda <HAL_RTCEx_DeactivateWakeUpTimer+0x9a>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800dfb0:	4b0c      	ldr	r3, [pc, #48]	; (800dfe4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	f003 0304 	and.w	r3, r3, #4
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d0e4      	beq.n	800df86 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
    }
  }

  /* Clear wakeup timer flag */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800dfbc:	4b09      	ldr	r3, [pc, #36]	; (800dfe4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800dfbe:	2204      	movs	r2, #4
 800dfc0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfc2:	4b08      	ldr	r3, [pc, #32]	; (800dfe4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800dfc4:	22ff      	movs	r2, #255	; 0xff
 800dfc6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	40002800 	.word	0x40002800

0800dfe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d101      	bne.n	800dffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dff6:	2301      	movs	r3, #1
 800dff8:	e0c6      	b.n	800e188 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d108      	bne.n	800e014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e00a:	d009      	beq.n	800e020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	61da      	str	r2, [r3, #28]
 800e012:	e005      	b.n	800e020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2200      	movs	r2, #0
 800e01e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e026:	b2db      	uxtb	r3, r3
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d106      	bne.n	800e03a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2200      	movs	r2, #0
 800e030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7fc f8a3 	bl	800a180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2202      	movs	r2, #2
 800e03e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e050:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	68db      	ldr	r3, [r3, #12]
 800e056:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e05a:	d902      	bls.n	800e062 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e05c:	2300      	movs	r3, #0
 800e05e:	60fb      	str	r3, [r7, #12]
 800e060:	e002      	b.n	800e068 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e066:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e070:	d007      	beq.n	800e082 <HAL_SPI_Init+0x9a>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e07a:	d002      	beq.n	800e082 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	685b      	ldr	r3, [r3, #4]
 800e086:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e092:	431a      	orrs	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	691b      	ldr	r3, [r3, #16]
 800e098:	f003 0302 	and.w	r3, r3, #2
 800e09c:	431a      	orrs	r2, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	695b      	ldr	r3, [r3, #20]
 800e0a2:	f003 0301 	and.w	r3, r3, #1
 800e0a6:	431a      	orrs	r2, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e0b0:	431a      	orrs	r2, r3
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	69db      	ldr	r3, [r3, #28]
 800e0b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0ba:	431a      	orrs	r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6a1b      	ldr	r3, [r3, #32]
 800e0c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0c4:	ea42 0103 	orr.w	r1, r2, r3
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	430a      	orrs	r2, r1
 800e0d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0e0:	d11b      	bne.n	800e11a <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10b      	bne.n	800e102 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e0f2:	d903      	bls.n	800e0fc <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2202      	movs	r2, #2
 800e0f8:	631a      	str	r2, [r3, #48]	; 0x30
 800e0fa:	e002      	b.n	800e102 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2201      	movs	r2, #1
 800e100:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e106:	2b02      	cmp	r3, #2
 800e108:	d107      	bne.n	800e11a <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e118:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	0c1b      	lsrs	r3, r3, #16
 800e120:	f003 0204 	and.w	r2, r3, #4
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e128:	f003 0310 	and.w	r3, r3, #16
 800e12c:	431a      	orrs	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e132:	f003 0308 	and.w	r3, r3, #8
 800e136:	431a      	orrs	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e140:	ea42 0103 	orr.w	r1, r2, r3
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	430a      	orrs	r2, r1
 800e150:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e15a:	d105      	bne.n	800e168 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	b292      	uxth	r2, r2
 800e166:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	69da      	ldr	r2, [r3, #28]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e176:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2201      	movs	r2, #1
 800e182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}

0800e190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d101      	bne.n	800e1a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	e049      	b.n	800e236 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d106      	bne.n	800e1bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 f841 	bl	800e23e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2202      	movs	r2, #2
 800e1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	4610      	mov	r0, r2
 800e1d0:	f000 f9ce 	bl	800e570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2201      	movs	r2, #1
 800e1e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2201      	movs	r2, #1
 800e200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2201      	movs	r2, #1
 800e208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2201      	movs	r2, #1
 800e210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2201      	movs	r2, #1
 800e218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2201      	movs	r2, #1
 800e228:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e23e:	b480      	push	{r7}
 800e240:	b083      	sub	sp, #12
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e246:	bf00      	nop
 800e248:	370c      	adds	r7, #12
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bc80      	pop	{r7}
 800e24e:	4770      	bx	lr

0800e250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e250:	b480      	push	{r7}
 800e252:	b085      	sub	sp, #20
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	2b01      	cmp	r3, #1
 800e262:	d001      	beq.n	800e268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e264:	2301      	movs	r3, #1
 800e266:	e036      	b.n	800e2d6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2202      	movs	r2, #2
 800e26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	68da      	ldr	r2, [r3, #12]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f042 0201 	orr.w	r2, r2, #1
 800e27e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a16      	ldr	r2, [pc, #88]	; (800e2e0 <HAL_TIM_Base_Start_IT+0x90>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d004      	beq.n	800e294 <HAL_TIM_Base_Start_IT+0x44>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e292:	d115      	bne.n	800e2c0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	689a      	ldr	r2, [r3, #8]
 800e29a:	4b12      	ldr	r3, [pc, #72]	; (800e2e4 <HAL_TIM_Base_Start_IT+0x94>)
 800e29c:	4013      	ands	r3, r2
 800e29e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2b06      	cmp	r3, #6
 800e2a4:	d015      	beq.n	800e2d2 <HAL_TIM_Base_Start_IT+0x82>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2ac:	d011      	beq.n	800e2d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f042 0201 	orr.w	r2, r2, #1
 800e2bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2be:	e008      	b.n	800e2d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f042 0201 	orr.w	r2, r2, #1
 800e2ce:	601a      	str	r2, [r3, #0]
 800e2d0:	e000      	b.n	800e2d4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e2d4:	2300      	movs	r3, #0
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3714      	adds	r7, #20
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bc80      	pop	{r7}
 800e2de:	4770      	bx	lr
 800e2e0:	40012c00 	.word	0x40012c00
 800e2e4:	00010007 	.word	0x00010007

0800e2e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	f003 0302 	and.w	r3, r3, #2
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	d122      	bne.n	800e344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	f003 0302 	and.w	r3, r3, #2
 800e308:	2b02      	cmp	r3, #2
 800e30a:	d11b      	bne.n	800e344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f06f 0202 	mvn.w	r2, #2
 800e314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2201      	movs	r2, #1
 800e31a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	699b      	ldr	r3, [r3, #24]
 800e322:	f003 0303 	and.w	r3, r3, #3
 800e326:	2b00      	cmp	r3, #0
 800e328:	d003      	beq.n	800e332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f904 	bl	800e538 <HAL_TIM_IC_CaptureCallback>
 800e330:	e005      	b.n	800e33e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 f8f7 	bl	800e526 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f000 f906 	bl	800e54a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2200      	movs	r2, #0
 800e342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	f003 0304 	and.w	r3, r3, #4
 800e34e:	2b04      	cmp	r3, #4
 800e350:	d122      	bne.n	800e398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	f003 0304 	and.w	r3, r3, #4
 800e35c:	2b04      	cmp	r3, #4
 800e35e:	d11b      	bne.n	800e398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f06f 0204 	mvn.w	r2, #4
 800e368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2202      	movs	r2, #2
 800e36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	699b      	ldr	r3, [r3, #24]
 800e376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d003      	beq.n	800e386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 f8da 	bl	800e538 <HAL_TIM_IC_CaptureCallback>
 800e384:	e005      	b.n	800e392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 f8cd 	bl	800e526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 f8dc 	bl	800e54a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	691b      	ldr	r3, [r3, #16]
 800e39e:	f003 0308 	and.w	r3, r3, #8
 800e3a2:	2b08      	cmp	r3, #8
 800e3a4:	d122      	bne.n	800e3ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	f003 0308 	and.w	r3, r3, #8
 800e3b0:	2b08      	cmp	r3, #8
 800e3b2:	d11b      	bne.n	800e3ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f06f 0208 	mvn.w	r2, #8
 800e3bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2204      	movs	r2, #4
 800e3c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	69db      	ldr	r3, [r3, #28]
 800e3ca:	f003 0303 	and.w	r3, r3, #3
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d003      	beq.n	800e3da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f8b0 	bl	800e538 <HAL_TIM_IC_CaptureCallback>
 800e3d8:	e005      	b.n	800e3e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 f8a3 	bl	800e526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 f8b2 	bl	800e54a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	691b      	ldr	r3, [r3, #16]
 800e3f2:	f003 0310 	and.w	r3, r3, #16
 800e3f6:	2b10      	cmp	r3, #16
 800e3f8:	d122      	bne.n	800e440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	68db      	ldr	r3, [r3, #12]
 800e400:	f003 0310 	and.w	r3, r3, #16
 800e404:	2b10      	cmp	r3, #16
 800e406:	d11b      	bne.n	800e440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f06f 0210 	mvn.w	r2, #16
 800e410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2208      	movs	r2, #8
 800e416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	69db      	ldr	r3, [r3, #28]
 800e41e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e422:	2b00      	cmp	r3, #0
 800e424:	d003      	beq.n	800e42e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 f886 	bl	800e538 <HAL_TIM_IC_CaptureCallback>
 800e42c:	e005      	b.n	800e43a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 f879 	bl	800e526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 f888 	bl	800e54a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2200      	movs	r2, #0
 800e43e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	691b      	ldr	r3, [r3, #16]
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d10e      	bne.n	800e46c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	f003 0301 	and.w	r3, r3, #1
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d107      	bne.n	800e46c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f06f 0201 	mvn.w	r2, #1
 800e464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7fb fc78 	bl	8009d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e476:	2b80      	cmp	r3, #128	; 0x80
 800e478:	d10e      	bne.n	800e498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e484:	2b80      	cmp	r3, #128	; 0x80
 800e486:	d107      	bne.n	800e498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 f8d7 	bl	800e646 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	691b      	ldr	r3, [r3, #16]
 800e49e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4a6:	d10e      	bne.n	800e4c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4b2:	2b80      	cmp	r3, #128	; 0x80
 800e4b4:	d107      	bne.n	800e4c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e4be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 f8c9 	bl	800e658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	691b      	ldr	r3, [r3, #16]
 800e4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4d0:	2b40      	cmp	r3, #64	; 0x40
 800e4d2:	d10e      	bne.n	800e4f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68db      	ldr	r3, [r3, #12]
 800e4da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4de:	2b40      	cmp	r3, #64	; 0x40
 800e4e0:	d107      	bne.n	800e4f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e4ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 f835 	bl	800e55c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	f003 0320 	and.w	r3, r3, #32
 800e4fc:	2b20      	cmp	r3, #32
 800e4fe:	d10e      	bne.n	800e51e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	f003 0320 	and.w	r3, r3, #32
 800e50a:	2b20      	cmp	r3, #32
 800e50c:	d107      	bne.n	800e51e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f06f 0220 	mvn.w	r2, #32
 800e516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f88b 	bl	800e634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e51e:	bf00      	nop
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e526:	b480      	push	{r7}
 800e528:	b083      	sub	sp, #12
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e52e:	bf00      	nop
 800e530:	370c      	adds	r7, #12
 800e532:	46bd      	mov	sp, r7
 800e534:	bc80      	pop	{r7}
 800e536:	4770      	bx	lr

0800e538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	bc80      	pop	{r7}
 800e548:	4770      	bx	lr

0800e54a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e54a:	b480      	push	{r7}
 800e54c:	b083      	sub	sp, #12
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e552:	bf00      	nop
 800e554:	370c      	adds	r7, #12
 800e556:	46bd      	mov	sp, r7
 800e558:	bc80      	pop	{r7}
 800e55a:	4770      	bx	lr

0800e55c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e564:	bf00      	nop
 800e566:	370c      	adds	r7, #12
 800e568:	46bd      	mov	sp, r7
 800e56a:	bc80      	pop	{r7}
 800e56c:	4770      	bx	lr
	...

0800e570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	4a29      	ldr	r2, [pc, #164]	; (800e628 <TIM_Base_SetConfig+0xb8>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d003      	beq.n	800e590 <TIM_Base_SetConfig+0x20>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e58e:	d108      	bne.n	800e5a2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	4a20      	ldr	r2, [pc, #128]	; (800e628 <TIM_Base_SetConfig+0xb8>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d00b      	beq.n	800e5c2 <TIM_Base_SetConfig+0x52>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5b0:	d007      	beq.n	800e5c2 <TIM_Base_SetConfig+0x52>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4a1d      	ldr	r2, [pc, #116]	; (800e62c <TIM_Base_SetConfig+0xbc>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d003      	beq.n	800e5c2 <TIM_Base_SetConfig+0x52>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a1c      	ldr	r2, [pc, #112]	; (800e630 <TIM_Base_SetConfig+0xc0>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d108      	bne.n	800e5d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	68fa      	ldr	r2, [r7, #12]
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	695b      	ldr	r3, [r3, #20]
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	689a      	ldr	r2, [r3, #8]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4a0b      	ldr	r2, [pc, #44]	; (800e628 <TIM_Base_SetConfig+0xb8>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d007      	beq.n	800e610 <TIM_Base_SetConfig+0xa0>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	4a0a      	ldr	r2, [pc, #40]	; (800e62c <TIM_Base_SetConfig+0xbc>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d003      	beq.n	800e610 <TIM_Base_SetConfig+0xa0>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	4a09      	ldr	r2, [pc, #36]	; (800e630 <TIM_Base_SetConfig+0xc0>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d103      	bne.n	800e618 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	691a      	ldr	r2, [r3, #16]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2201      	movs	r2, #1
 800e61c:	615a      	str	r2, [r3, #20]
}
 800e61e:	bf00      	nop
 800e620:	3714      	adds	r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	bc80      	pop	{r7}
 800e626:	4770      	bx	lr
 800e628:	40012c00 	.word	0x40012c00
 800e62c:	40014400 	.word	0x40014400
 800e630:	40014800 	.word	0x40014800

0800e634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e63c:	bf00      	nop
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	bc80      	pop	{r7}
 800e644:	4770      	bx	lr

0800e646 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e646:	b480      	push	{r7}
 800e648:	b083      	sub	sp, #12
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e64e:	bf00      	nop
 800e650:	370c      	adds	r7, #12
 800e652:	46bd      	mov	sp, r7
 800e654:	bc80      	pop	{r7}
 800e656:	4770      	bx	lr

0800e658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	bc80      	pop	{r7}
 800e668:	4770      	bx	lr

0800e66a <LL_RCC_GetUSARTClockSource>:
{
 800e66a:	b480      	push	{r7}
 800e66c:	b083      	sub	sp, #12
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800e672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e676:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	401a      	ands	r2, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	041b      	lsls	r3, r3, #16
 800e682:	4313      	orrs	r3, r2
}
 800e684:	4618      	mov	r0, r3
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	bc80      	pop	{r7}
 800e68c:	4770      	bx	lr

0800e68e <LL_RCC_GetLPUARTClockSource>:
{
 800e68e:	b480      	push	{r7}
 800e690:	b083      	sub	sp, #12
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800e696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e69a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4013      	ands	r3, r2
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	370c      	adds	r7, #12
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bc80      	pop	{r7}
 800e6aa:	4770      	bx	lr

0800e6ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d101      	bne.n	800e6be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	e042      	b.n	800e744 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d106      	bne.n	800e6d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7fb fc81 	bl	8009fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2224      	movs	r2, #36	; 0x24
 800e6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f022 0201 	bic.w	r2, r2, #1
 800e6ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 fd5c 	bl	800f1ac <UART_SetConfig>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d101      	bne.n	800e6fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e022      	b.n	800e744 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e702:	2b00      	cmp	r3, #0
 800e704:	d002      	beq.n	800e70c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 ffc4 	bl	800f694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	685a      	ldr	r2, [r3, #4]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e71a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	689a      	ldr	r2, [r3, #8]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e72a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f042 0201 	orr.w	r2, r2, #1
 800e73a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f001 f84a 	bl	800f7d6 <UART_CheckIdleState>
 800e742:	4603      	mov	r3, r0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d101      	bne.n	800e75e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800e75a:	2301      	movs	r3, #1
 800e75c:	e04a      	b.n	800e7f4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e764:	2b00      	cmp	r3, #0
 800e766:	d106      	bne.n	800e776 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7fb fc31 	bl	8009fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2224      	movs	r2, #36	; 0x24
 800e77a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f022 0201 	bic.w	r2, r2, #1
 800e78c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fd0c 	bl	800f1ac <UART_SetConfig>
 800e794:	4603      	mov	r3, r0
 800e796:	2b01      	cmp	r3, #1
 800e798:	d101      	bne.n	800e79e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800e79a:	2301      	movs	r3, #1
 800e79c:	e02a      	b.n	800e7f4 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d002      	beq.n	800e7ac <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 ff74 	bl	800f694 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e7ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	689a      	ldr	r2, [r3, #8]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800e7ca:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	689a      	ldr	r2, [r3, #8]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f042 0208 	orr.w	r2, r2, #8
 800e7da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f042 0201 	orr.w	r2, r2, #1
 800e7ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 fff2 	bl	800f7d6 <UART_CheckIdleState>
 800e7f2:	4603      	mov	r3, r0
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b08a      	sub	sp, #40	; 0x28
 800e800:	af02      	add	r7, sp, #8
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	603b      	str	r3, [r7, #0]
 800e808:	4613      	mov	r3, r2
 800e80a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e812:	2b20      	cmp	r3, #32
 800e814:	d173      	bne.n	800e8fe <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d002      	beq.n	800e822 <HAL_UART_Transmit+0x26>
 800e81c:	88fb      	ldrh	r3, [r7, #6]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d101      	bne.n	800e826 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e822:	2301      	movs	r3, #1
 800e824:	e06c      	b.n	800e900 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2200      	movs	r2, #0
 800e82a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2221      	movs	r2, #33	; 0x21
 800e832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e836:	f7fb fef1 	bl	800a61c <HAL_GetTick>
 800e83a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	88fa      	ldrh	r2, [r7, #6]
 800e840:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	88fa      	ldrh	r2, [r7, #6]
 800e848:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e854:	d108      	bne.n	800e868 <HAL_UART_Transmit+0x6c>
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	691b      	ldr	r3, [r3, #16]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d104      	bne.n	800e868 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e85e:	2300      	movs	r3, #0
 800e860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	61bb      	str	r3, [r7, #24]
 800e866:	e003      	b.n	800e870 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e86c:	2300      	movs	r3, #0
 800e86e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e870:	e02c      	b.n	800e8cc <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	2200      	movs	r2, #0
 800e87a:	2180      	movs	r1, #128	; 0x80
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	f000 fff8 	bl	800f872 <UART_WaitOnFlagUntilTimeout>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d001      	beq.n	800e88c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800e888:	2303      	movs	r3, #3
 800e88a:	e039      	b.n	800e900 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10b      	bne.n	800e8aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	881b      	ldrh	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e8a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	3302      	adds	r3, #2
 800e8a6:	61bb      	str	r3, [r7, #24]
 800e8a8:	e007      	b.n	800e8ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	781a      	ldrb	r2, [r3, #0]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	b29a      	uxth	r2, r3
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d1cc      	bne.n	800e872 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	9300      	str	r3, [sp, #0]
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	2140      	movs	r1, #64	; 0x40
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	f000 ffc5 	bl	800f872 <UART_WaitOnFlagUntilTimeout>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d001      	beq.n	800e8f2 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	e006      	b.n	800e900 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2220      	movs	r2, #32
 800e8f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	e000      	b.n	800e900 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800e8fe:	2302      	movs	r3, #2
  }
}
 800e900:	4618      	mov	r0, r3
 800e902:	3720      	adds	r7, #32
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b08a      	sub	sp, #40	; 0x28
 800e90c:	af02      	add	r7, sp, #8
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	603b      	str	r3, [r7, #0]
 800e914:	4613      	mov	r3, r2
 800e916:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e91e:	2b20      	cmp	r3, #32
 800e920:	f040 80b1 	bne.w	800ea86 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d002      	beq.n	800e930 <HAL_UART_Receive+0x28>
 800e92a:	88fb      	ldrh	r3, [r7, #6]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d101      	bne.n	800e934 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e930:	2301      	movs	r3, #1
 800e932:	e0a9      	b.n	800ea88 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2200      	movs	r2, #0
 800e938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2222      	movs	r2, #34	; 0x22
 800e940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2200      	movs	r2, #0
 800e948:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e94a:	f7fb fe67 	bl	800a61c <HAL_GetTick>
 800e94e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	88fa      	ldrh	r2, [r7, #6]
 800e954:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	88fa      	ldrh	r2, [r7, #6]
 800e95c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	689b      	ldr	r3, [r3, #8]
 800e964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e968:	d10e      	bne.n	800e988 <HAL_UART_Receive+0x80>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d105      	bne.n	800e97e <HAL_UART_Receive+0x76>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e978:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e97c:	e02d      	b.n	800e9da <HAL_UART_Receive+0xd2>
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	22ff      	movs	r2, #255	; 0xff
 800e982:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e986:	e028      	b.n	800e9da <HAL_UART_Receive+0xd2>
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d10d      	bne.n	800e9ac <HAL_UART_Receive+0xa4>
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d104      	bne.n	800e9a2 <HAL_UART_Receive+0x9a>
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	22ff      	movs	r2, #255	; 0xff
 800e99c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9a0:	e01b      	b.n	800e9da <HAL_UART_Receive+0xd2>
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	227f      	movs	r2, #127	; 0x7f
 800e9a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9aa:	e016      	b.n	800e9da <HAL_UART_Receive+0xd2>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9b4:	d10d      	bne.n	800e9d2 <HAL_UART_Receive+0xca>
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d104      	bne.n	800e9c8 <HAL_UART_Receive+0xc0>
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	227f      	movs	r2, #127	; 0x7f
 800e9c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9c6:	e008      	b.n	800e9da <HAL_UART_Receive+0xd2>
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	223f      	movs	r2, #63	; 0x3f
 800e9cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e9d0:	e003      	b.n	800e9da <HAL_UART_Receive+0xd2>
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e9e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9ea:	d108      	bne.n	800e9fe <HAL_UART_Receive+0xf6>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d104      	bne.n	800e9fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	61bb      	str	r3, [r7, #24]
 800e9fc:	e003      	b.n	800ea06 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea02:	2300      	movs	r3, #0
 800ea04:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ea06:	e032      	b.n	800ea6e <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	9300      	str	r3, [sp, #0]
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	2120      	movs	r1, #32
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	f000 ff2d 	bl	800f872 <UART_WaitOnFlagUntilTimeout>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d001      	beq.n	800ea22 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800ea1e:	2303      	movs	r3, #3
 800ea20:	e032      	b.n	800ea88 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d10c      	bne.n	800ea42 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea2e:	b29a      	uxth	r2, r3
 800ea30:	8a7b      	ldrh	r3, [r7, #18]
 800ea32:	4013      	ands	r3, r2
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	3302      	adds	r3, #2
 800ea3e:	61bb      	str	r3, [r7, #24]
 800ea40:	e00c      	b.n	800ea5c <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	8a7b      	ldrh	r3, [r7, #18]
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	4013      	ands	r3, r2
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	3b01      	subs	r3, #1
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1c6      	bne.n	800ea08 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2220      	movs	r2, #32
 800ea7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800ea82:	2300      	movs	r3, #0
 800ea84:	e000      	b.n	800ea88 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800ea86:	2302      	movs	r3, #2
  }
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3720      	adds	r7, #32
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b08a      	sub	sp, #40	; 0x28
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	60f8      	str	r0, [r7, #12]
 800ea98:	60b9      	str	r1, [r7, #8]
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaa4:	2b20      	cmp	r3, #32
 800eaa6:	d137      	bne.n	800eb18 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d002      	beq.n	800eab4 <HAL_UART_Receive_IT+0x24>
 800eaae:	88fb      	ldrh	r3, [r7, #6]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d101      	bne.n	800eab8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800eab4:	2301      	movs	r3, #1
 800eab6:	e030      	b.n	800eb1a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2200      	movs	r2, #0
 800eabc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a18      	ldr	r2, [pc, #96]	; (800eb24 <HAL_UART_Receive_IT+0x94>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d01f      	beq.n	800eb08 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d018      	beq.n	800eb08 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	e853 3f00 	ldrex	r3, [r3]
 800eae2:	613b      	str	r3, [r7, #16]
   return(result);
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eaea:	627b      	str	r3, [r7, #36]	; 0x24
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf4:	623b      	str	r3, [r7, #32]
 800eaf6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf8:	69f9      	ldr	r1, [r7, #28]
 800eafa:	6a3a      	ldr	r2, [r7, #32]
 800eafc:	e841 2300 	strex	r3, r2, [r1]
 800eb00:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d1e6      	bne.n	800ead6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800eb08:	88fb      	ldrh	r3, [r7, #6]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	68b9      	ldr	r1, [r7, #8]
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f000 ff78 	bl	800fa04 <UART_Start_Receive_IT>
 800eb14:	4603      	mov	r3, r0
 800eb16:	e000      	b.n	800eb1a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eb18:	2302      	movs	r3, #2
  }
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3728      	adds	r7, #40	; 0x28
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	40008000 	.word	0x40008000

0800eb28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b0ba      	sub	sp, #232	; 0xe8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	69db      	ldr	r3, [r3, #28]
 800eb36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	689b      	ldr	r3, [r3, #8]
 800eb4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eb4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800eb52:	f640 030f 	movw	r3, #2063	; 0x80f
 800eb56:	4013      	ands	r3, r2
 800eb58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800eb5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d11b      	bne.n	800eb9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eb64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb68:	f003 0320 	and.w	r3, r3, #32
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d015      	beq.n	800eb9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eb70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb74:	f003 0320 	and.w	r3, r3, #32
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d105      	bne.n	800eb88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eb7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d009      	beq.n	800eb9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f000 82e3 	beq.w	800f158 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	4798      	blx	r3
      }
      return;
 800eb9a:	e2dd      	b.n	800f158 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eb9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	f000 8123 	beq.w	800edec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eba6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ebaa:	4b8d      	ldr	r3, [pc, #564]	; (800ede0 <HAL_UART_IRQHandler+0x2b8>)
 800ebac:	4013      	ands	r3, r2
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d106      	bne.n	800ebc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ebb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ebb6:	4b8b      	ldr	r3, [pc, #556]	; (800ede4 <HAL_UART_IRQHandler+0x2bc>)
 800ebb8:	4013      	ands	r3, r2
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f000 8116 	beq.w	800edec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ebc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebc4:	f003 0301 	and.w	r3, r3, #1
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d011      	beq.n	800ebf0 <HAL_UART_IRQHandler+0xc8>
 800ebcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00b      	beq.n	800ebf0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebe6:	f043 0201 	orr.w	r2, r3, #1
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ebf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ebf4:	f003 0302 	and.w	r3, r3, #2
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d011      	beq.n	800ec20 <HAL_UART_IRQHandler+0xf8>
 800ebfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec00:	f003 0301 	and.w	r3, r3, #1
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00b      	beq.n	800ec20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2202      	movs	r2, #2
 800ec0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec16:	f043 0204 	orr.w	r2, r3, #4
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec24:	f003 0304 	and.w	r3, r3, #4
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d011      	beq.n	800ec50 <HAL_UART_IRQHandler+0x128>
 800ec2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ec30:	f003 0301 	and.w	r3, r3, #1
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d00b      	beq.n	800ec50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	2204      	movs	r2, #4
 800ec3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec46:	f043 0202 	orr.w	r2, r3, #2
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ec50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec54:	f003 0308 	and.w	r3, r3, #8
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d017      	beq.n	800ec8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec60:	f003 0320 	and.w	r3, r3, #32
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d105      	bne.n	800ec74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ec68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ec6c:	4b5c      	ldr	r3, [pc, #368]	; (800ede0 <HAL_UART_IRQHandler+0x2b8>)
 800ec6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d00b      	beq.n	800ec8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2208      	movs	r2, #8
 800ec7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec82:	f043 0208 	orr.w	r2, r3, #8
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ec8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ec90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d012      	beq.n	800ecbe <HAL_UART_IRQHandler+0x196>
 800ec98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ec9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d00c      	beq.n	800ecbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecb4:	f043 0220 	orr.w	r2, r3, #32
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f000 8249 	beq.w	800f15c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ecca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecce:	f003 0320 	and.w	r3, r3, #32
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d013      	beq.n	800ecfe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ecd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecda:	f003 0320 	and.w	r3, r3, #32
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d105      	bne.n	800ecee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ece2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ece6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d007      	beq.n	800ecfe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d003      	beq.n	800ecfe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed12:	2b40      	cmp	r3, #64	; 0x40
 800ed14:	d005      	beq.n	800ed22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ed16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ed1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d054      	beq.n	800edcc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 ff8e 	bl	800fc44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	689b      	ldr	r3, [r3, #8]
 800ed2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed32:	2b40      	cmp	r3, #64	; 0x40
 800ed34:	d146      	bne.n	800edc4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	3308      	adds	r3, #8
 800ed3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ed44:	e853 3f00 	ldrex	r3, [r3]
 800ed48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ed4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ed50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	3308      	adds	r3, #8
 800ed5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ed62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ed66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ed6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ed72:	e841 2300 	strex	r3, r2, [r1]
 800ed76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ed7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d1d9      	bne.n	800ed36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d017      	beq.n	800edbc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed92:	4a15      	ldr	r2, [pc, #84]	; (800ede8 <HAL_UART_IRQHandler+0x2c0>)
 800ed94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fc fdd2 	bl	800b946 <HAL_DMA_Abort_IT>
 800eda2:	4603      	mov	r3, r0
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d019      	beq.n	800eddc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800edae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800edb6:	4610      	mov	r0, r2
 800edb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edba:	e00f      	b.n	800eddc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f9e0 	bl	800f182 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edc2:	e00b      	b.n	800eddc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f000 f9dc 	bl	800f182 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800edca:	e007      	b.n	800eddc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f9d8 	bl	800f182 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800edda:	e1bf      	b.n	800f15c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eddc:	bf00      	nop
    return;
 800edde:	e1bd      	b.n	800f15c <HAL_UART_IRQHandler+0x634>
 800ede0:	10000001 	.word	0x10000001
 800ede4:	04000120 	.word	0x04000120
 800ede8:	0800fd0f 	.word	0x0800fd0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	f040 8153 	bne.w	800f09c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800edf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edfa:	f003 0310 	and.w	r3, r3, #16
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	f000 814c 	beq.w	800f09c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ee04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee08:	f003 0310 	and.w	r3, r3, #16
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	f000 8145 	beq.w	800f09c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2210      	movs	r2, #16
 800ee18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee24:	2b40      	cmp	r3, #64	; 0x40
 800ee26:	f040 80bb 	bne.w	800efa0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ee38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	f000 818f 	beq.w	800f160 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	f080 8187 	bcs.w	800f160 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ee58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f003 0320 	and.w	r3, r3, #32
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f040 8087 	bne.w	800ef7e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee7c:	e853 3f00 	ldrex	r3, [r3]
 800ee80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ee84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	461a      	mov	r2, r3
 800ee96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ee9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800eeaa:	e841 2300 	strex	r3, r2, [r1]
 800eeae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800eeb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d1da      	bne.n	800ee70 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	3308      	adds	r3, #8
 800eec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eec4:	e853 3f00 	ldrex	r3, [r3]
 800eec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800eeca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eecc:	f023 0301 	bic.w	r3, r3, #1
 800eed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	3308      	adds	r3, #8
 800eeda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eede:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800eee2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eeea:	e841 2300 	strex	r3, r2, [r1]
 800eeee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800eef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d1e1      	bne.n	800eeba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	3308      	adds	r3, #8
 800eefc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef00:	e853 3f00 	ldrex	r3, [r3]
 800ef04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ef06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	3308      	adds	r3, #8
 800ef16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ef1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ef1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ef20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ef22:	e841 2300 	strex	r3, r2, [r1]
 800ef26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ef28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d1e3      	bne.n	800eef6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2220      	movs	r2, #32
 800ef32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef44:	e853 3f00 	ldrex	r3, [r3]
 800ef48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ef4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef4c:	f023 0310 	bic.w	r3, r3, #16
 800ef50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	461a      	mov	r2, r3
 800ef5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef5e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ef60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef66:	e841 2300 	strex	r3, r2, [r1]
 800ef6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ef6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d1e4      	bne.n	800ef3c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7fc fc86 	bl	800b88a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2202      	movs	r2, #2
 800ef82:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	4619      	mov	r1, r3
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 f8fb 	bl	800f194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ef9e:	e0df      	b.n	800f160 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efac:	b29b      	uxth	r3, r3
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800efba:	b29b      	uxth	r3, r3
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f000 80d1 	beq.w	800f164 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800efc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f000 80cc 	beq.w	800f164 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd4:	e853 3f00 	ldrex	r3, [r3]
 800efd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800efda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efe0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	461a      	mov	r2, r3
 800efea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800efee:	647b      	str	r3, [r7, #68]	; 0x44
 800eff0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eff6:	e841 2300 	strex	r3, r2, [r1]
 800effa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800effc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1e4      	bne.n	800efcc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	3308      	adds	r3, #8
 800f008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00c:	e853 3f00 	ldrex	r3, [r3]
 800f010:	623b      	str	r3, [r7, #32]
   return(result);
 800f012:	6a3b      	ldr	r3, [r7, #32]
 800f014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f018:	f023 0301 	bic.w	r3, r3, #1
 800f01c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	3308      	adds	r3, #8
 800f026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f02a:	633a      	str	r2, [r7, #48]	; 0x30
 800f02c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f02e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f032:	e841 2300 	strex	r3, r2, [r1]
 800f036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1e1      	bne.n	800f002 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2220      	movs	r2, #32
 800f042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2200      	movs	r2, #0
 800f04a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	e853 3f00 	ldrex	r3, [r3]
 800f05e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f023 0310 	bic.w	r3, r3, #16
 800f066:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	461a      	mov	r2, r3
 800f070:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f074:	61fb      	str	r3, [r7, #28]
 800f076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f078:	69b9      	ldr	r1, [r7, #24]
 800f07a:	69fa      	ldr	r2, [r7, #28]
 800f07c:	e841 2300 	strex	r3, r2, [r1]
 800f080:	617b      	str	r3, [r7, #20]
   return(result);
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d1e4      	bne.n	800f052 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2202      	movs	r2, #2
 800f08c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f08e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f092:	4619      	mov	r1, r3
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 f87d 	bl	800f194 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f09a:	e063      	b.n	800f164 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d00e      	beq.n	800f0c6 <HAL_UART_IRQHandler+0x59e>
 800f0a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d008      	beq.n	800f0c6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f0bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f001 fb82 	bl	80107c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f0c4:	e051      	b.n	800f16a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d014      	beq.n	800f0fc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d105      	bne.n	800f0ea <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f0de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d008      	beq.n	800f0fc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d03a      	beq.n	800f168 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	4798      	blx	r3
    }
    return;
 800f0fa:	e035      	b.n	800f168 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f104:	2b00      	cmp	r3, #0
 800f106:	d009      	beq.n	800f11c <HAL_UART_IRQHandler+0x5f4>
 800f108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f110:	2b00      	cmp	r3, #0
 800f112:	d003      	beq.n	800f11c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 fe10 	bl	800fd3a <UART_EndTransmit_IT>
    return;
 800f11a:	e026      	b.n	800f16a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f124:	2b00      	cmp	r3, #0
 800f126:	d009      	beq.n	800f13c <HAL_UART_IRQHandler+0x614>
 800f128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f12c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f130:	2b00      	cmp	r3, #0
 800f132:	d003      	beq.n	800f13c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f001 fb59 	bl	80107ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f13a:	e016      	b.n	800f16a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f144:	2b00      	cmp	r3, #0
 800f146:	d010      	beq.n	800f16a <HAL_UART_IRQHandler+0x642>
 800f148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	da0c      	bge.n	800f16a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f001 fb42 	bl	80107da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f156:	e008      	b.n	800f16a <HAL_UART_IRQHandler+0x642>
      return;
 800f158:	bf00      	nop
 800f15a:	e006      	b.n	800f16a <HAL_UART_IRQHandler+0x642>
    return;
 800f15c:	bf00      	nop
 800f15e:	e004      	b.n	800f16a <HAL_UART_IRQHandler+0x642>
      return;
 800f160:	bf00      	nop
 800f162:	e002      	b.n	800f16a <HAL_UART_IRQHandler+0x642>
      return;
 800f164:	bf00      	nop
 800f166:	e000      	b.n	800f16a <HAL_UART_IRQHandler+0x642>
    return;
 800f168:	bf00      	nop
  }
}
 800f16a:	37e8      	adds	r7, #232	; 0xe8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bc80      	pop	{r7}
 800f180:	4770      	bx	lr

0800f182 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f182:	b480      	push	{r7}
 800f184:	b083      	sub	sp, #12
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f18a:	bf00      	nop
 800f18c:	370c      	adds	r7, #12
 800f18e:	46bd      	mov	sp, r7
 800f190:	bc80      	pop	{r7}
 800f192:	4770      	bx	lr

0800f194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	460b      	mov	r3, r1
 800f19e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f1a0:	bf00      	nop
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bc80      	pop	{r7}
 800f1a8:	4770      	bx	lr
	...

0800f1ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f1ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f1b0:	b08c      	sub	sp, #48	; 0x30
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	689a      	ldr	r2, [r3, #8]
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	691b      	ldr	r3, [r3, #16]
 800f1c4:	431a      	orrs	r2, r3
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	695b      	ldr	r3, [r3, #20]
 800f1ca:	431a      	orrs	r2, r3
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	69db      	ldr	r3, [r3, #28]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	4b94      	ldr	r3, [pc, #592]	; (800f42c <UART_SetConfig+0x280>)
 800f1dc:	4013      	ands	r3, r2
 800f1de:	697a      	ldr	r2, [r7, #20]
 800f1e0:	6812      	ldr	r2, [r2, #0]
 800f1e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1e4:	430b      	orrs	r3, r1
 800f1e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	68da      	ldr	r2, [r3, #12]
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	430a      	orrs	r2, r1
 800f1fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	699b      	ldr	r3, [r3, #24]
 800f202:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a89      	ldr	r2, [pc, #548]	; (800f430 <UART_SetConfig+0x284>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d004      	beq.n	800f218 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	6a1b      	ldr	r3, [r3, #32]
 800f212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f214:	4313      	orrs	r3, r2
 800f216:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f222:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f226:	697a      	ldr	r2, [r7, #20]
 800f228:	6812      	ldr	r2, [r2, #0]
 800f22a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f22c:	430b      	orrs	r3, r1
 800f22e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f236:	f023 010f 	bic.w	r1, r3, #15
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	430a      	orrs	r2, r1
 800f244:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4a7a      	ldr	r2, [pc, #488]	; (800f434 <UART_SetConfig+0x288>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d127      	bne.n	800f2a0 <UART_SetConfig+0xf4>
 800f250:	2003      	movs	r0, #3
 800f252:	f7ff fa0a 	bl	800e66a <LL_RCC_GetUSARTClockSource>
 800f256:	4603      	mov	r3, r0
 800f258:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800f25c:	2b03      	cmp	r3, #3
 800f25e:	d81b      	bhi.n	800f298 <UART_SetConfig+0xec>
 800f260:	a201      	add	r2, pc, #4	; (adr r2, 800f268 <UART_SetConfig+0xbc>)
 800f262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f266:	bf00      	nop
 800f268:	0800f279 	.word	0x0800f279
 800f26c:	0800f289 	.word	0x0800f289
 800f270:	0800f281 	.word	0x0800f281
 800f274:	0800f291 	.word	0x0800f291
 800f278:	2301      	movs	r3, #1
 800f27a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f27e:	e080      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f280:	2302      	movs	r3, #2
 800f282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f286:	e07c      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f288:	2304      	movs	r3, #4
 800f28a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f28e:	e078      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f290:	2308      	movs	r3, #8
 800f292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f296:	e074      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f298:	2310      	movs	r3, #16
 800f29a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f29e:	e070      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a64      	ldr	r2, [pc, #400]	; (800f438 <UART_SetConfig+0x28c>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d138      	bne.n	800f31c <UART_SetConfig+0x170>
 800f2aa:	200c      	movs	r0, #12
 800f2ac:	f7ff f9dd 	bl	800e66a <LL_RCC_GetUSARTClockSource>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800f2b6:	2b0c      	cmp	r3, #12
 800f2b8:	d82c      	bhi.n	800f314 <UART_SetConfig+0x168>
 800f2ba:	a201      	add	r2, pc, #4	; (adr r2, 800f2c0 <UART_SetConfig+0x114>)
 800f2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2c0:	0800f2f5 	.word	0x0800f2f5
 800f2c4:	0800f315 	.word	0x0800f315
 800f2c8:	0800f315 	.word	0x0800f315
 800f2cc:	0800f315 	.word	0x0800f315
 800f2d0:	0800f305 	.word	0x0800f305
 800f2d4:	0800f315 	.word	0x0800f315
 800f2d8:	0800f315 	.word	0x0800f315
 800f2dc:	0800f315 	.word	0x0800f315
 800f2e0:	0800f2fd 	.word	0x0800f2fd
 800f2e4:	0800f315 	.word	0x0800f315
 800f2e8:	0800f315 	.word	0x0800f315
 800f2ec:	0800f315 	.word	0x0800f315
 800f2f0:	0800f30d 	.word	0x0800f30d
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f2fa:	e042      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f2fc:	2302      	movs	r3, #2
 800f2fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f302:	e03e      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f304:	2304      	movs	r3, #4
 800f306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f30a:	e03a      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f30c:	2308      	movs	r3, #8
 800f30e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f312:	e036      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f314:	2310      	movs	r3, #16
 800f316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f31a:	e032      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4a43      	ldr	r2, [pc, #268]	; (800f430 <UART_SetConfig+0x284>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d12a      	bne.n	800f37c <UART_SetConfig+0x1d0>
 800f326:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800f32a:	f7ff f9b0 	bl	800e68e <LL_RCC_GetLPUARTClockSource>
 800f32e:	4603      	mov	r3, r0
 800f330:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f334:	d01a      	beq.n	800f36c <UART_SetConfig+0x1c0>
 800f336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f33a:	d81b      	bhi.n	800f374 <UART_SetConfig+0x1c8>
 800f33c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f340:	d00c      	beq.n	800f35c <UART_SetConfig+0x1b0>
 800f342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f346:	d815      	bhi.n	800f374 <UART_SetConfig+0x1c8>
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d003      	beq.n	800f354 <UART_SetConfig+0x1a8>
 800f34c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f350:	d008      	beq.n	800f364 <UART_SetConfig+0x1b8>
 800f352:	e00f      	b.n	800f374 <UART_SetConfig+0x1c8>
 800f354:	2300      	movs	r3, #0
 800f356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f35a:	e012      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f35c:	2302      	movs	r3, #2
 800f35e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f362:	e00e      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f364:	2304      	movs	r3, #4
 800f366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f36a:	e00a      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f36c:	2308      	movs	r3, #8
 800f36e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f372:	e006      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f374:	2310      	movs	r3, #16
 800f376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f37a:	e002      	b.n	800f382 <UART_SetConfig+0x1d6>
 800f37c:	2310      	movs	r3, #16
 800f37e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4a2a      	ldr	r2, [pc, #168]	; (800f430 <UART_SetConfig+0x284>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	f040 80a4 	bne.w	800f4d6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f38e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f392:	2b08      	cmp	r3, #8
 800f394:	d823      	bhi.n	800f3de <UART_SetConfig+0x232>
 800f396:	a201      	add	r2, pc, #4	; (adr r2, 800f39c <UART_SetConfig+0x1f0>)
 800f398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f39c:	0800f3c1 	.word	0x0800f3c1
 800f3a0:	0800f3df 	.word	0x0800f3df
 800f3a4:	0800f3c9 	.word	0x0800f3c9
 800f3a8:	0800f3df 	.word	0x0800f3df
 800f3ac:	0800f3cf 	.word	0x0800f3cf
 800f3b0:	0800f3df 	.word	0x0800f3df
 800f3b4:	0800f3df 	.word	0x0800f3df
 800f3b8:	0800f3df 	.word	0x0800f3df
 800f3bc:	0800f3d7 	.word	0x0800f3d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3c0:	f7fd feb8 	bl	800d134 <HAL_RCC_GetPCLK1Freq>
 800f3c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f3c6:	e010      	b.n	800f3ea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f3c8:	4b1c      	ldr	r3, [pc, #112]	; (800f43c <UART_SetConfig+0x290>)
 800f3ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f3cc:	e00d      	b.n	800f3ea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f3ce:	f7fd fdfd 	bl	800cfcc <HAL_RCC_GetSysClockFreq>
 800f3d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f3d4:	e009      	b.n	800f3ea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f3d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f3dc:	e005      	b.n	800f3ea <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f3e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	f000 8137 	beq.w	800f660 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f6:	4a12      	ldr	r2, [pc, #72]	; (800f440 <UART_SetConfig+0x294>)
 800f3f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f400:	fbb3 f3f2 	udiv	r3, r3, r2
 800f404:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	685a      	ldr	r2, [r3, #4]
 800f40a:	4613      	mov	r3, r2
 800f40c:	005b      	lsls	r3, r3, #1
 800f40e:	4413      	add	r3, r2
 800f410:	69ba      	ldr	r2, [r7, #24]
 800f412:	429a      	cmp	r2, r3
 800f414:	d305      	bcc.n	800f422 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f41c:	69ba      	ldr	r2, [r7, #24]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d910      	bls.n	800f444 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800f422:	2301      	movs	r3, #1
 800f424:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f428:	e11a      	b.n	800f660 <UART_SetConfig+0x4b4>
 800f42a:	bf00      	nop
 800f42c:	cfff69f3 	.word	0xcfff69f3
 800f430:	40008000 	.word	0x40008000
 800f434:	40013800 	.word	0x40013800
 800f438:	40004400 	.word	0x40004400
 800f43c:	00f42400 	.word	0x00f42400
 800f440:	0801afec 	.word	0x0801afec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f446:	2200      	movs	r2, #0
 800f448:	60bb      	str	r3, [r7, #8]
 800f44a:	60fa      	str	r2, [r7, #12]
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f450:	4a8e      	ldr	r2, [pc, #568]	; (800f68c <UART_SetConfig+0x4e0>)
 800f452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f456:	b29b      	uxth	r3, r3
 800f458:	2200      	movs	r2, #0
 800f45a:	603b      	str	r3, [r7, #0]
 800f45c:	607a      	str	r2, [r7, #4]
 800f45e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f462:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f466:	f7f9 fec5 	bl	80091f4 <__aeabi_uldivmod>
 800f46a:	4602      	mov	r2, r0
 800f46c:	460b      	mov	r3, r1
 800f46e:	4610      	mov	r0, r2
 800f470:	4619      	mov	r1, r3
 800f472:	f04f 0200 	mov.w	r2, #0
 800f476:	f04f 0300 	mov.w	r3, #0
 800f47a:	020b      	lsls	r3, r1, #8
 800f47c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f480:	0202      	lsls	r2, r0, #8
 800f482:	6979      	ldr	r1, [r7, #20]
 800f484:	6849      	ldr	r1, [r1, #4]
 800f486:	0849      	lsrs	r1, r1, #1
 800f488:	2000      	movs	r0, #0
 800f48a:	460c      	mov	r4, r1
 800f48c:	4605      	mov	r5, r0
 800f48e:	eb12 0804 	adds.w	r8, r2, r4
 800f492:	eb43 0905 	adc.w	r9, r3, r5
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	469a      	mov	sl, r3
 800f49e:	4693      	mov	fp, r2
 800f4a0:	4652      	mov	r2, sl
 800f4a2:	465b      	mov	r3, fp
 800f4a4:	4640      	mov	r0, r8
 800f4a6:	4649      	mov	r1, r9
 800f4a8:	f7f9 fea4 	bl	80091f4 <__aeabi_uldivmod>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f4b4:	6a3b      	ldr	r3, [r7, #32]
 800f4b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f4ba:	d308      	bcc.n	800f4ce <UART_SetConfig+0x322>
 800f4bc:	6a3b      	ldr	r3, [r7, #32]
 800f4be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4c2:	d204      	bcs.n	800f4ce <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	6a3a      	ldr	r2, [r7, #32]
 800f4ca:	60da      	str	r2, [r3, #12]
 800f4cc:	e0c8      	b.n	800f660 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f4d4:	e0c4      	b.n	800f660 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	69db      	ldr	r3, [r3, #28]
 800f4da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4de:	d167      	bne.n	800f5b0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800f4e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f4e4:	2b08      	cmp	r3, #8
 800f4e6:	d828      	bhi.n	800f53a <UART_SetConfig+0x38e>
 800f4e8:	a201      	add	r2, pc, #4	; (adr r2, 800f4f0 <UART_SetConfig+0x344>)
 800f4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ee:	bf00      	nop
 800f4f0:	0800f515 	.word	0x0800f515
 800f4f4:	0800f51d 	.word	0x0800f51d
 800f4f8:	0800f525 	.word	0x0800f525
 800f4fc:	0800f53b 	.word	0x0800f53b
 800f500:	0800f52b 	.word	0x0800f52b
 800f504:	0800f53b 	.word	0x0800f53b
 800f508:	0800f53b 	.word	0x0800f53b
 800f50c:	0800f53b 	.word	0x0800f53b
 800f510:	0800f533 	.word	0x0800f533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f514:	f7fd fe0e 	bl	800d134 <HAL_RCC_GetPCLK1Freq>
 800f518:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f51a:	e014      	b.n	800f546 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f51c:	f7fd fe1c 	bl	800d158 <HAL_RCC_GetPCLK2Freq>
 800f520:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f522:	e010      	b.n	800f546 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f524:	4b5a      	ldr	r3, [pc, #360]	; (800f690 <UART_SetConfig+0x4e4>)
 800f526:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f528:	e00d      	b.n	800f546 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f52a:	f7fd fd4f 	bl	800cfcc <HAL_RCC_GetSysClockFreq>
 800f52e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f530:	e009      	b.n	800f546 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f536:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f538:	e005      	b.n	800f546 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800f53a:	2300      	movs	r3, #0
 800f53c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f53e:	2301      	movs	r3, #1
 800f540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f548:	2b00      	cmp	r3, #0
 800f54a:	f000 8089 	beq.w	800f660 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f552:	4a4e      	ldr	r2, [pc, #312]	; (800f68c <UART_SetConfig+0x4e0>)
 800f554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f558:	461a      	mov	r2, r3
 800f55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f560:	005a      	lsls	r2, r3, #1
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	085b      	lsrs	r3, r3, #1
 800f568:	441a      	add	r2, r3
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f572:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f574:	6a3b      	ldr	r3, [r7, #32]
 800f576:	2b0f      	cmp	r3, #15
 800f578:	d916      	bls.n	800f5a8 <UART_SetConfig+0x3fc>
 800f57a:	6a3b      	ldr	r3, [r7, #32]
 800f57c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f580:	d212      	bcs.n	800f5a8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f582:	6a3b      	ldr	r3, [r7, #32]
 800f584:	b29b      	uxth	r3, r3
 800f586:	f023 030f 	bic.w	r3, r3, #15
 800f58a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	085b      	lsrs	r3, r3, #1
 800f590:	b29b      	uxth	r3, r3
 800f592:	f003 0307 	and.w	r3, r3, #7
 800f596:	b29a      	uxth	r2, r3
 800f598:	8bfb      	ldrh	r3, [r7, #30]
 800f59a:	4313      	orrs	r3, r2
 800f59c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	8bfa      	ldrh	r2, [r7, #30]
 800f5a4:	60da      	str	r2, [r3, #12]
 800f5a6:	e05b      	b.n	800f660 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f5ae:	e057      	b.n	800f660 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f5b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f5b4:	2b08      	cmp	r3, #8
 800f5b6:	d828      	bhi.n	800f60a <UART_SetConfig+0x45e>
 800f5b8:	a201      	add	r2, pc, #4	; (adr r2, 800f5c0 <UART_SetConfig+0x414>)
 800f5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5be:	bf00      	nop
 800f5c0:	0800f5e5 	.word	0x0800f5e5
 800f5c4:	0800f5ed 	.word	0x0800f5ed
 800f5c8:	0800f5f5 	.word	0x0800f5f5
 800f5cc:	0800f60b 	.word	0x0800f60b
 800f5d0:	0800f5fb 	.word	0x0800f5fb
 800f5d4:	0800f60b 	.word	0x0800f60b
 800f5d8:	0800f60b 	.word	0x0800f60b
 800f5dc:	0800f60b 	.word	0x0800f60b
 800f5e0:	0800f603 	.word	0x0800f603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5e4:	f7fd fda6 	bl	800d134 <HAL_RCC_GetPCLK1Freq>
 800f5e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f5ea:	e014      	b.n	800f616 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5ec:	f7fd fdb4 	bl	800d158 <HAL_RCC_GetPCLK2Freq>
 800f5f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f5f2:	e010      	b.n	800f616 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f5f4:	4b26      	ldr	r3, [pc, #152]	; (800f690 <UART_SetConfig+0x4e4>)
 800f5f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f5f8:	e00d      	b.n	800f616 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f5fa:	f7fd fce7 	bl	800cfcc <HAL_RCC_GetSysClockFreq>
 800f5fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f600:	e009      	b.n	800f616 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f608:	e005      	b.n	800f616 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800f60a:	2300      	movs	r3, #0
 800f60c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f60e:	2301      	movs	r3, #1
 800f610:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f614:	bf00      	nop
    }

    if (pclk != 0U)
 800f616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d021      	beq.n	800f660 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f620:	4a1a      	ldr	r2, [pc, #104]	; (800f68c <UART_SetConfig+0x4e0>)
 800f622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f626:	461a      	mov	r2, r3
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	085b      	lsrs	r3, r3, #1
 800f634:	441a      	add	r2, r3
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f63e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f640:	6a3b      	ldr	r3, [r7, #32]
 800f642:	2b0f      	cmp	r3, #15
 800f644:	d909      	bls.n	800f65a <UART_SetConfig+0x4ae>
 800f646:	6a3b      	ldr	r3, [r7, #32]
 800f648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f64c:	d205      	bcs.n	800f65a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f64e:	6a3b      	ldr	r3, [r7, #32]
 800f650:	b29a      	uxth	r2, r3
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	60da      	str	r2, [r3, #12]
 800f658:	e002      	b.n	800f660 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800f65a:	2301      	movs	r3, #1
 800f65c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	2201      	movs	r2, #1
 800f664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	2201      	movs	r2, #1
 800f66c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	2200      	movs	r2, #0
 800f674:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2200      	movs	r2, #0
 800f67a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f67c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f680:	4618      	mov	r0, r3
 800f682:	3730      	adds	r7, #48	; 0x30
 800f684:	46bd      	mov	sp, r7
 800f686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f68a:	bf00      	nop
 800f68c:	0801afec 	.word	0x0801afec
 800f690:	00f42400 	.word	0x00f42400

0800f694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6a0:	f003 0301 	and.w	r3, r3, #1
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d00a      	beq.n	800f6be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	430a      	orrs	r2, r1
 800f6bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6c2:	f003 0302 	and.w	r3, r3, #2
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00a      	beq.n	800f6e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	430a      	orrs	r2, r1
 800f6de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e4:	f003 0304 	and.w	r3, r3, #4
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00a      	beq.n	800f702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	430a      	orrs	r2, r1
 800f700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f706:	f003 0308 	and.w	r3, r3, #8
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00a      	beq.n	800f724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	430a      	orrs	r2, r1
 800f722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f728:	f003 0310 	and.w	r3, r3, #16
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00a      	beq.n	800f746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	430a      	orrs	r2, r1
 800f744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f74a:	f003 0320 	and.w	r3, r3, #32
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00a      	beq.n	800f768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	430a      	orrs	r2, r1
 800f766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f770:	2b00      	cmp	r3, #0
 800f772:	d01a      	beq.n	800f7aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	430a      	orrs	r2, r1
 800f788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f78e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f792:	d10a      	bne.n	800f7aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	430a      	orrs	r2, r1
 800f7a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00a      	beq.n	800f7cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	430a      	orrs	r2, r1
 800f7ca:	605a      	str	r2, [r3, #4]
  }
}
 800f7cc:	bf00      	nop
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bc80      	pop	{r7}
 800f7d4:	4770      	bx	lr

0800f7d6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	b086      	sub	sp, #24
 800f7da:	af02      	add	r7, sp, #8
 800f7dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f7e6:	f7fa ff19 	bl	800a61c <HAL_GetTick>
 800f7ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f003 0308 	and.w	r3, r3, #8
 800f7f6:	2b08      	cmp	r3, #8
 800f7f8:	d10e      	bne.n	800f818 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	2200      	movs	r2, #0
 800f804:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 f832 	bl	800f872 <UART_WaitOnFlagUntilTimeout>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f814:	2303      	movs	r3, #3
 800f816:	e028      	b.n	800f86a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	f003 0304 	and.w	r3, r3, #4
 800f822:	2b04      	cmp	r3, #4
 800f824:	d10e      	bne.n	800f844 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f826:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f82a:	9300      	str	r3, [sp, #0]
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2200      	movs	r2, #0
 800f830:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f000 f81c 	bl	800f872 <UART_WaitOnFlagUntilTimeout>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d001      	beq.n	800f844 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f840:	2303      	movs	r3, #3
 800f842:	e012      	b.n	800f86a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2220      	movs	r2, #32
 800f848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2220      	movs	r2, #32
 800f850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2200      	movs	r2, #0
 800f85e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2200      	movs	r2, #0
 800f864:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f868:	2300      	movs	r3, #0
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3710      	adds	r7, #16
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f872:	b580      	push	{r7, lr}
 800f874:	b09c      	sub	sp, #112	; 0x70
 800f876:	af00      	add	r7, sp, #0
 800f878:	60f8      	str	r0, [r7, #12]
 800f87a:	60b9      	str	r1, [r7, #8]
 800f87c:	603b      	str	r3, [r7, #0]
 800f87e:	4613      	mov	r3, r2
 800f880:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f882:	e0a9      	b.n	800f9d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f88a:	f000 80a5 	beq.w	800f9d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f88e:	f7fa fec5 	bl	800a61c <HAL_GetTick>
 800f892:	4602      	mov	r2, r0
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	1ad3      	subs	r3, r2, r3
 800f898:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d302      	bcc.n	800f8a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800f89e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d140      	bne.n	800f926 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ac:	e853 3f00 	ldrex	r3, [r3]
 800f8b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f8b8:	667b      	str	r3, [r7, #100]	; 0x64
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	461a      	mov	r2, r3
 800f8c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f8c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f8ca:	e841 2300 	strex	r3, r2, [r1]
 800f8ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f8d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1e6      	bne.n	800f8a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	3308      	adds	r3, #8
 800f8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8e0:	e853 3f00 	ldrex	r3, [r3]
 800f8e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e8:	f023 0301 	bic.w	r3, r3, #1
 800f8ec:	663b      	str	r3, [r7, #96]	; 0x60
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	3308      	adds	r3, #8
 800f8f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8f6:	64ba      	str	r2, [r7, #72]	; 0x48
 800f8f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8fe:	e841 2300 	strex	r3, r2, [r1]
 800f902:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1e5      	bne.n	800f8d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2220      	movs	r2, #32
 800f90e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2220      	movs	r2, #32
 800f916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	2200      	movs	r2, #0
 800f91e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800f922:	2303      	movs	r3, #3
 800f924:	e069      	b.n	800f9fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f003 0304 	and.w	r3, r3, #4
 800f930:	2b00      	cmp	r3, #0
 800f932:	d051      	beq.n	800f9d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	69db      	ldr	r3, [r3, #28]
 800f93a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f93e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f942:	d149      	bne.n	800f9d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f94c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f956:	e853 3f00 	ldrex	r3, [r3]
 800f95a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f962:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	461a      	mov	r2, r3
 800f96a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f96c:	637b      	str	r3, [r7, #52]	; 0x34
 800f96e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f970:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f974:	e841 2300 	strex	r3, r2, [r1]
 800f978:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d1e6      	bne.n	800f94e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	3308      	adds	r3, #8
 800f986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	e853 3f00 	ldrex	r3, [r3]
 800f98e:	613b      	str	r3, [r7, #16]
   return(result);
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	f023 0301 	bic.w	r3, r3, #1
 800f996:	66bb      	str	r3, [r7, #104]	; 0x68
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	3308      	adds	r3, #8
 800f99e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f9a0:	623a      	str	r2, [r7, #32]
 800f9a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a4:	69f9      	ldr	r1, [r7, #28]
 800f9a6:	6a3a      	ldr	r2, [r7, #32]
 800f9a8:	e841 2300 	strex	r3, r2, [r1]
 800f9ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d1e5      	bne.n	800f980 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2220      	movs	r2, #32
 800f9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2220      	movs	r2, #32
 800f9c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2220      	movs	r2, #32
 800f9c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f9d4:	2303      	movs	r3, #3
 800f9d6:	e010      	b.n	800f9fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	69da      	ldr	r2, [r3, #28]
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	4013      	ands	r3, r2
 800f9e2:	68ba      	ldr	r2, [r7, #8]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	bf0c      	ite	eq
 800f9e8:	2301      	moveq	r3, #1
 800f9ea:	2300      	movne	r3, #0
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	79fb      	ldrb	r3, [r7, #7]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	f43f af46 	beq.w	800f884 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3770      	adds	r7, #112	; 0x70
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
	...

0800fa04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b0a3      	sub	sp, #140	; 0x8c
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	4613      	mov	r3, r2
 800fa10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	68ba      	ldr	r2, [r7, #8]
 800fa16:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	88fa      	ldrh	r2, [r7, #6]
 800fa1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	88fa      	ldrh	r2, [r7, #6]
 800fa24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	689b      	ldr	r3, [r3, #8]
 800fa32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa36:	d10e      	bne.n	800fa56 <UART_Start_Receive_IT+0x52>
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	691b      	ldr	r3, [r3, #16]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d105      	bne.n	800fa4c <UART_Start_Receive_IT+0x48>
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fa46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa4a:	e02d      	b.n	800faa8 <UART_Start_Receive_IT+0xa4>
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	22ff      	movs	r2, #255	; 0xff
 800fa50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa54:	e028      	b.n	800faa8 <UART_Start_Receive_IT+0xa4>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d10d      	bne.n	800fa7a <UART_Start_Receive_IT+0x76>
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	691b      	ldr	r3, [r3, #16]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d104      	bne.n	800fa70 <UART_Start_Receive_IT+0x6c>
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	22ff      	movs	r2, #255	; 0xff
 800fa6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa6e:	e01b      	b.n	800faa8 <UART_Start_Receive_IT+0xa4>
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	227f      	movs	r2, #127	; 0x7f
 800fa74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa78:	e016      	b.n	800faa8 <UART_Start_Receive_IT+0xa4>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa82:	d10d      	bne.n	800faa0 <UART_Start_Receive_IT+0x9c>
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d104      	bne.n	800fa96 <UART_Start_Receive_IT+0x92>
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	227f      	movs	r2, #127	; 0x7f
 800fa90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa94:	e008      	b.n	800faa8 <UART_Start_Receive_IT+0xa4>
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	223f      	movs	r2, #63	; 0x3f
 800fa9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa9e:	e003      	b.n	800faa8 <UART_Start_Receive_IT+0xa4>
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2200      	movs	r2, #0
 800faac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2222      	movs	r2, #34	; 0x22
 800fab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	3308      	adds	r3, #8
 800fabe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fac2:	e853 3f00 	ldrex	r3, [r3]
 800fac6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fac8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800faca:	f043 0301 	orr.w	r3, r3, #1
 800face:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3308      	adds	r3, #8
 800fad8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fadc:	673a      	str	r2, [r7, #112]	; 0x70
 800fade:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fae2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fae4:	e841 2300 	strex	r3, r2, [r1]
 800fae8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800faea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800faec:	2b00      	cmp	r3, #0
 800faee:	d1e3      	bne.n	800fab8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800faf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800faf8:	d14f      	bne.n	800fb9a <UART_Start_Receive_IT+0x196>
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb00:	88fa      	ldrh	r2, [r7, #6]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d349      	bcc.n	800fb9a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	689b      	ldr	r3, [r3, #8]
 800fb0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb0e:	d107      	bne.n	800fb20 <UART_Start_Receive_IT+0x11c>
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	691b      	ldr	r3, [r3, #16]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d103      	bne.n	800fb20 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	4a46      	ldr	r2, [pc, #280]	; (800fc34 <UART_Start_Receive_IT+0x230>)
 800fb1c:	675a      	str	r2, [r3, #116]	; 0x74
 800fb1e:	e002      	b.n	800fb26 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	4a45      	ldr	r2, [pc, #276]	; (800fc38 <UART_Start_Receive_IT+0x234>)
 800fb24:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d01a      	beq.n	800fb64 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb36:	e853 3f00 	ldrex	r3, [r3]
 800fb3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb50:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb52:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb58:	e841 2300 	strex	r3, r2, [r1]
 800fb5c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fb5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d1e4      	bne.n	800fb2e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3308      	adds	r3, #8
 800fb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb6e:	e853 3f00 	ldrex	r3, [r3]
 800fb72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	3308      	adds	r3, #8
 800fb82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb84:	64ba      	str	r2, [r7, #72]	; 0x48
 800fb86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb8c:	e841 2300 	strex	r3, r2, [r1]
 800fb90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1e5      	bne.n	800fb64 <UART_Start_Receive_IT+0x160>
 800fb98:	e046      	b.n	800fc28 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fba2:	d107      	bne.n	800fbb4 <UART_Start_Receive_IT+0x1b0>
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	691b      	ldr	r3, [r3, #16]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d103      	bne.n	800fbb4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	4a23      	ldr	r2, [pc, #140]	; (800fc3c <UART_Start_Receive_IT+0x238>)
 800fbb0:	675a      	str	r2, [r3, #116]	; 0x74
 800fbb2:	e002      	b.n	800fbba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	4a22      	ldr	r2, [pc, #136]	; (800fc40 <UART_Start_Receive_IT+0x23c>)
 800fbb8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	691b      	ldr	r3, [r3, #16]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d019      	beq.n	800fbf6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbca:	e853 3f00 	ldrex	r3, [r3]
 800fbce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fbd6:	677b      	str	r3, [r7, #116]	; 0x74
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbe0:	637b      	str	r3, [r7, #52]	; 0x34
 800fbe2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbe8:	e841 2300 	strex	r3, r2, [r1]
 800fbec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d1e6      	bne.n	800fbc2 <UART_Start_Receive_IT+0x1be>
 800fbf4:	e018      	b.n	800fc28 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	e853 3f00 	ldrex	r3, [r3]
 800fc02:	613b      	str	r3, [r7, #16]
   return(result);
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	f043 0320 	orr.w	r3, r3, #32
 800fc0a:	67bb      	str	r3, [r7, #120]	; 0x78
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	461a      	mov	r2, r3
 800fc12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc14:	623b      	str	r3, [r7, #32]
 800fc16:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc18:	69f9      	ldr	r1, [r7, #28]
 800fc1a:	6a3a      	ldr	r2, [r7, #32]
 800fc1c:	e841 2300 	strex	r3, r2, [r1]
 800fc20:	61bb      	str	r3, [r7, #24]
   return(result);
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1e6      	bne.n	800fbf6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	378c      	adds	r7, #140	; 0x8c
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bc80      	pop	{r7}
 800fc32:	4770      	bx	lr
 800fc34:	08010461 	.word	0x08010461
 800fc38:	08010101 	.word	0x08010101
 800fc3c:	0800ff49 	.word	0x0800ff49
 800fc40:	0800fd91 	.word	0x0800fd91

0800fc44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b095      	sub	sp, #84	; 0x54
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc54:	e853 3f00 	ldrex	r3, [r3]
 800fc58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fc60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	461a      	mov	r2, r3
 800fc68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc6a:	643b      	str	r3, [r7, #64]	; 0x40
 800fc6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc72:	e841 2300 	strex	r3, r2, [r1]
 800fc76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d1e6      	bne.n	800fc4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	3308      	adds	r3, #8
 800fc84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc86:	6a3b      	ldr	r3, [r7, #32]
 800fc88:	e853 3f00 	ldrex	r3, [r3]
 800fc8c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc8e:	69fb      	ldr	r3, [r7, #28]
 800fc90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc94:	f023 0301 	bic.w	r3, r3, #1
 800fc98:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	3308      	adds	r3, #8
 800fca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcaa:	e841 2300 	strex	r3, r2, [r1]
 800fcae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d1e3      	bne.n	800fc7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d118      	bne.n	800fcf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	e853 3f00 	ldrex	r3, [r3]
 800fcca:	60bb      	str	r3, [r7, #8]
   return(result);
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	f023 0310 	bic.w	r3, r3, #16
 800fcd2:	647b      	str	r3, [r7, #68]	; 0x44
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	461a      	mov	r2, r3
 800fcda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcdc:	61bb      	str	r3, [r7, #24]
 800fcde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce0:	6979      	ldr	r1, [r7, #20]
 800fce2:	69ba      	ldr	r2, [r7, #24]
 800fce4:	e841 2300 	strex	r3, r2, [r1]
 800fce8:	613b      	str	r3, [r7, #16]
   return(result);
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d1e6      	bne.n	800fcbe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2220      	movs	r2, #32
 800fcf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fd04:	bf00      	nop
 800fd06:	3754      	adds	r7, #84	; 0x54
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bc80      	pop	{r7}
 800fd0c:	4770      	bx	lr

0800fd0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b084      	sub	sp, #16
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f7ff fa28 	bl	800f182 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd32:	bf00      	nop
 800fd34:	3710      	adds	r7, #16
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}

0800fd3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fd3a:	b580      	push	{r7, lr}
 800fd3c:	b088      	sub	sp, #32
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	e853 3f00 	ldrex	r3, [r3]
 800fd4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd56:	61fb      	str	r3, [r7, #28]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	61bb      	str	r3, [r7, #24]
 800fd62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd64:	6979      	ldr	r1, [r7, #20]
 800fd66:	69ba      	ldr	r2, [r7, #24]
 800fd68:	e841 2300 	strex	r3, r2, [r1]
 800fd6c:	613b      	str	r3, [r7, #16]
   return(result);
 800fd6e:	693b      	ldr	r3, [r7, #16]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d1e6      	bne.n	800fd42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2220      	movs	r2, #32
 800fd78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2200      	movs	r2, #0
 800fd80:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f7ff f9f4 	bl	800f170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd88:	bf00      	nop
 800fd8a:	3720      	adds	r7, #32
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b09c      	sub	sp, #112	; 0x70
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd9e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fda8:	2b22      	cmp	r3, #34	; 0x22
 800fdaa:	f040 80be 	bne.w	800ff2a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fdb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fdbc:	b2d9      	uxtb	r1, r3
 800fdbe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fdc2:	b2da      	uxtb	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdc8:	400a      	ands	r2, r1
 800fdca:	b2d2      	uxtb	r2, r2
 800fdcc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdd2:	1c5a      	adds	r2, r3, #1
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	3b01      	subs	r3, #1
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdf0:	b29b      	uxth	r3, r3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f040 80a1 	bne.w	800ff3a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe00:	e853 3f00 	ldrex	r3, [r3]
 800fe04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fe06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	461a      	mov	r2, r3
 800fe14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe16:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe1e:	e841 2300 	strex	r3, r2, [r1]
 800fe22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fe24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1e6      	bne.n	800fdf8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	3308      	adds	r3, #8
 800fe30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe34:	e853 3f00 	ldrex	r3, [r3]
 800fe38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fe3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe3c:	f023 0301 	bic.w	r3, r3, #1
 800fe40:	667b      	str	r3, [r7, #100]	; 0x64
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	3308      	adds	r3, #8
 800fe48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fe4a:	647a      	str	r2, [r7, #68]	; 0x44
 800fe4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fe50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe52:	e841 2300 	strex	r3, r2, [r1]
 800fe56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fe58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d1e5      	bne.n	800fe2a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2220      	movs	r2, #32
 800fe62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4a33      	ldr	r2, [pc, #204]	; (800ff44 <UART_RxISR_8BIT+0x1b4>)
 800fe78:	4293      	cmp	r3, r2
 800fe7a:	d01f      	beq.n	800febc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d018      	beq.n	800febc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe92:	e853 3f00 	ldrex	r3, [r3]
 800fe96:	623b      	str	r3, [r7, #32]
   return(result);
 800fe98:	6a3b      	ldr	r3, [r7, #32]
 800fe9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe9e:	663b      	str	r3, [r7, #96]	; 0x60
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	461a      	mov	r2, r3
 800fea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fea8:	633b      	str	r3, [r7, #48]	; 0x30
 800feaa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800feae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800feb0:	e841 2300 	strex	r3, r2, [r1]
 800feb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800feb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d1e6      	bne.n	800fe8a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d12e      	bne.n	800ff22 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	e853 3f00 	ldrex	r3, [r3]
 800fed6:	60fb      	str	r3, [r7, #12]
   return(result);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f023 0310 	bic.w	r3, r3, #16
 800fede:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	461a      	mov	r2, r3
 800fee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fee8:	61fb      	str	r3, [r7, #28]
 800feea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feec:	69b9      	ldr	r1, [r7, #24]
 800feee:	69fa      	ldr	r2, [r7, #28]
 800fef0:	e841 2300 	strex	r3, r2, [r1]
 800fef4:	617b      	str	r3, [r7, #20]
   return(result);
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1e6      	bne.n	800feca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	69db      	ldr	r3, [r3, #28]
 800ff02:	f003 0310 	and.w	r3, r3, #16
 800ff06:	2b10      	cmp	r3, #16
 800ff08:	d103      	bne.n	800ff12 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	2210      	movs	r2, #16
 800ff10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff18:	4619      	mov	r1, r3
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7ff f93a 	bl	800f194 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff20:	e00b      	b.n	800ff3a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f001 fa0c 	bl	8011340 <HAL_UART_RxCpltCallback>
}
 800ff28:	e007      	b.n	800ff3a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	699a      	ldr	r2, [r3, #24]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	f042 0208 	orr.w	r2, r2, #8
 800ff38:	619a      	str	r2, [r3, #24]
}
 800ff3a:	bf00      	nop
 800ff3c:	3770      	adds	r7, #112	; 0x70
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	40008000 	.word	0x40008000

0800ff48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b09c      	sub	sp, #112	; 0x70
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff56:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff60:	2b22      	cmp	r3, #34	; 0x22
 800ff62:	f040 80be 	bne.w	80100e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff74:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ff76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ff7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ff7e:	4013      	ands	r3, r2
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff8a:	1c9a      	adds	r2, r3, #2
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	3b01      	subs	r3, #1
 800ff9a:	b29a      	uxth	r2, r3
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f040 80a1 	bne.w	80100f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffb8:	e853 3f00 	ldrex	r3, [r3]
 800ffbc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ffbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ffc4:	667b      	str	r3, [r7, #100]	; 0x64
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ffce:	657b      	str	r3, [r7, #84]	; 0x54
 800ffd0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ffd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ffd6:	e841 2300 	strex	r3, r2, [r1]
 800ffda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ffdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d1e6      	bne.n	800ffb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	3308      	adds	r3, #8
 800ffe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffec:	e853 3f00 	ldrex	r3, [r3]
 800fff0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff4:	f023 0301 	bic.w	r3, r3, #1
 800fff8:	663b      	str	r3, [r7, #96]	; 0x60
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	3308      	adds	r3, #8
 8010000:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010002:	643a      	str	r2, [r7, #64]	; 0x40
 8010004:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801000a:	e841 2300 	strex	r3, r2, [r1]
 801000e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010012:	2b00      	cmp	r3, #0
 8010014:	d1e5      	bne.n	800ffe2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2220      	movs	r2, #32
 801001a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	4a33      	ldr	r2, [pc, #204]	; (80100fc <UART_RxISR_16BIT+0x1b4>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d01f      	beq.n	8010074 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801003e:	2b00      	cmp	r3, #0
 8010040:	d018      	beq.n	8010074 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010048:	6a3b      	ldr	r3, [r7, #32]
 801004a:	e853 3f00 	ldrex	r3, [r3]
 801004e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	461a      	mov	r2, r3
 801005e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010062:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010068:	e841 2300 	strex	r3, r2, [r1]
 801006c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801006e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010070:	2b00      	cmp	r3, #0
 8010072:	d1e6      	bne.n	8010042 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010078:	2b01      	cmp	r3, #1
 801007a:	d12e      	bne.n	80100da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	e853 3f00 	ldrex	r3, [r3]
 801008e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	f023 0310 	bic.w	r3, r3, #16
 8010096:	65bb      	str	r3, [r7, #88]	; 0x58
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	461a      	mov	r2, r3
 801009e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100a0:	61bb      	str	r3, [r7, #24]
 80100a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100a4:	6979      	ldr	r1, [r7, #20]
 80100a6:	69ba      	ldr	r2, [r7, #24]
 80100a8:	e841 2300 	strex	r3, r2, [r1]
 80100ac:	613b      	str	r3, [r7, #16]
   return(result);
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d1e6      	bne.n	8010082 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	69db      	ldr	r3, [r3, #28]
 80100ba:	f003 0310 	and.w	r3, r3, #16
 80100be:	2b10      	cmp	r3, #16
 80100c0:	d103      	bne.n	80100ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	2210      	movs	r2, #16
 80100c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80100d0:	4619      	mov	r1, r3
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f7ff f85e 	bl	800f194 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80100d8:	e00b      	b.n	80100f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f001 f930 	bl	8011340 <HAL_UART_RxCpltCallback>
}
 80100e0:	e007      	b.n	80100f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	699a      	ldr	r2, [r3, #24]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f042 0208 	orr.w	r2, r2, #8
 80100f0:	619a      	str	r2, [r3, #24]
}
 80100f2:	bf00      	nop
 80100f4:	3770      	adds	r7, #112	; 0x70
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	40008000 	.word	0x40008000

08010100 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b0ac      	sub	sp, #176	; 0xb0
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801010e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	69db      	ldr	r3, [r3, #28]
 8010118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	689b      	ldr	r3, [r3, #8]
 801012c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010136:	2b22      	cmp	r3, #34	; 0x22
 8010138:	f040 8182 	bne.w	8010440 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010142:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010146:	e125      	b.n	8010394 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010152:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010156:	b2d9      	uxtb	r1, r3
 8010158:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801015c:	b2da      	uxtb	r2, r3
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010162:	400a      	ands	r2, r1
 8010164:	b2d2      	uxtb	r2, r2
 8010166:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801016c:	1c5a      	adds	r2, r3, #1
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010178:	b29b      	uxth	r3, r3
 801017a:	3b01      	subs	r3, #1
 801017c:	b29a      	uxth	r2, r3
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	69db      	ldr	r3, [r3, #28]
 801018a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801018e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010192:	f003 0307 	and.w	r3, r3, #7
 8010196:	2b00      	cmp	r3, #0
 8010198:	d053      	beq.n	8010242 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801019a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801019e:	f003 0301 	and.w	r3, r3, #1
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d011      	beq.n	80101ca <UART_RxISR_8BIT_FIFOEN+0xca>
 80101a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00b      	beq.n	80101ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2201      	movs	r2, #1
 80101b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101c0:	f043 0201 	orr.w	r2, r3, #1
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101ce:	f003 0302 	and.w	r3, r3, #2
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d011      	beq.n	80101fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 80101d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80101da:	f003 0301 	and.w	r3, r3, #1
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00b      	beq.n	80101fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	2202      	movs	r2, #2
 80101e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101f0:	f043 0204 	orr.w	r2, r3, #4
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80101fe:	f003 0304 	and.w	r3, r3, #4
 8010202:	2b00      	cmp	r3, #0
 8010204:	d011      	beq.n	801022a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801020a:	f003 0301 	and.w	r3, r3, #1
 801020e:	2b00      	cmp	r3, #0
 8010210:	d00b      	beq.n	801022a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2204      	movs	r2, #4
 8010218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010220:	f043 0202 	orr.w	r2, r3, #2
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010230:	2b00      	cmp	r3, #0
 8010232:	d006      	beq.n	8010242 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f7fe ffa4 	bl	800f182 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2200      	movs	r2, #0
 801023e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010248:	b29b      	uxth	r3, r3
 801024a:	2b00      	cmp	r3, #0
 801024c:	f040 80a2 	bne.w	8010394 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010258:	e853 3f00 	ldrex	r3, [r3]
 801025c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801025e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	461a      	mov	r2, r3
 801026e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010272:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010274:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010276:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010278:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801027a:	e841 2300 	strex	r3, r2, [r1]
 801027e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010282:	2b00      	cmp	r3, #0
 8010284:	d1e4      	bne.n	8010250 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	3308      	adds	r3, #8
 801028c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801028e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010290:	e853 3f00 	ldrex	r3, [r3]
 8010294:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801029c:	f023 0301 	bic.w	r3, r3, #1
 80102a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	3308      	adds	r3, #8
 80102aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80102ae:	66ba      	str	r2, [r7, #104]	; 0x68
 80102b0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80102b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80102b6:	e841 2300 	strex	r3, r2, [r1]
 80102ba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80102bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1e1      	bne.n	8010286 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2220      	movs	r2, #32
 80102c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2200      	movs	r2, #0
 80102ce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2200      	movs	r2, #0
 80102d4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4a5f      	ldr	r2, [pc, #380]	; (8010458 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d021      	beq.n	8010324 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d01a      	beq.n	8010324 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102f6:	e853 3f00 	ldrex	r3, [r3]
 80102fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80102fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	461a      	mov	r2, r3
 801030c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010310:	657b      	str	r3, [r7, #84]	; 0x54
 8010312:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010314:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010316:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010318:	e841 2300 	strex	r3, r2, [r1]
 801031c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801031e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1e4      	bne.n	80102ee <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010328:	2b01      	cmp	r3, #1
 801032a:	d130      	bne.n	801038e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801033a:	e853 3f00 	ldrex	r3, [r3]
 801033e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010342:	f023 0310 	bic.w	r3, r3, #16
 8010346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	461a      	mov	r2, r3
 8010350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010354:	643b      	str	r3, [r7, #64]	; 0x40
 8010356:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010358:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801035a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801035c:	e841 2300 	strex	r3, r2, [r1]
 8010360:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010364:	2b00      	cmp	r3, #0
 8010366:	d1e4      	bne.n	8010332 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	69db      	ldr	r3, [r3, #28]
 801036e:	f003 0310 	and.w	r3, r3, #16
 8010372:	2b10      	cmp	r3, #16
 8010374:	d103      	bne.n	801037e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2210      	movs	r2, #16
 801037c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010384:	4619      	mov	r1, r3
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7fe ff04 	bl	800f194 <HAL_UARTEx_RxEventCallback>
 801038c:	e002      	b.n	8010394 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f000 ffd6 	bl	8011340 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010394:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010398:	2b00      	cmp	r3, #0
 801039a:	d006      	beq.n	80103aa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 801039c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80103a0:	f003 0320 	and.w	r3, r3, #32
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f47f aecf 	bne.w	8010148 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80103b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d049      	beq.n	8010450 <UART_RxISR_8BIT_FIFOEN+0x350>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80103c2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d242      	bcs.n	8010450 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	3308      	adds	r3, #8
 80103d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d2:	6a3b      	ldr	r3, [r7, #32]
 80103d4:	e853 3f00 	ldrex	r3, [r3]
 80103d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80103da:	69fb      	ldr	r3, [r7, #28]
 80103dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80103e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	3308      	adds	r3, #8
 80103ea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80103ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80103f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103f6:	e841 2300 	strex	r3, r2, [r1]
 80103fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d1e3      	bne.n	80103ca <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	4a15      	ldr	r2, [pc, #84]	; (801045c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010406:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	e853 3f00 	ldrex	r3, [r3]
 8010414:	60bb      	str	r3, [r7, #8]
   return(result);
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	f043 0320 	orr.w	r3, r3, #32
 801041c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	461a      	mov	r2, r3
 8010426:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801042a:	61bb      	str	r3, [r7, #24]
 801042c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801042e:	6979      	ldr	r1, [r7, #20]
 8010430:	69ba      	ldr	r2, [r7, #24]
 8010432:	e841 2300 	strex	r3, r2, [r1]
 8010436:	613b      	str	r3, [r7, #16]
   return(result);
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1e4      	bne.n	8010408 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801043e:	e007      	b.n	8010450 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	699a      	ldr	r2, [r3, #24]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f042 0208 	orr.w	r2, r2, #8
 801044e:	619a      	str	r2, [r3, #24]
}
 8010450:	bf00      	nop
 8010452:	37b0      	adds	r7, #176	; 0xb0
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	40008000 	.word	0x40008000
 801045c:	0800fd91 	.word	0x0800fd91

08010460 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b0ae      	sub	sp, #184	; 0xb8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801046e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	69db      	ldr	r3, [r3, #28]
 8010478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010496:	2b22      	cmp	r3, #34	; 0x22
 8010498:	f040 8186 	bne.w	80107a8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80104a2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80104a6:	e129      	b.n	80106fc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ae:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80104ba:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80104be:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80104c2:	4013      	ands	r3, r2
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104d0:	1c9a      	adds	r2, r3, #2
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104dc:	b29b      	uxth	r3, r3
 80104de:	3b01      	subs	r3, #1
 80104e0:	b29a      	uxth	r2, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	69db      	ldr	r3, [r3, #28]
 80104ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80104f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80104f6:	f003 0307 	and.w	r3, r3, #7
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d053      	beq.n	80105a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80104fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010502:	f003 0301 	and.w	r3, r3, #1
 8010506:	2b00      	cmp	r3, #0
 8010508:	d011      	beq.n	801052e <UART_RxISR_16BIT_FIFOEN+0xce>
 801050a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801050e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00b      	beq.n	801052e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2201      	movs	r2, #1
 801051c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010524:	f043 0201 	orr.w	r2, r3, #1
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801052e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010532:	f003 0302 	and.w	r3, r3, #2
 8010536:	2b00      	cmp	r3, #0
 8010538:	d011      	beq.n	801055e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801053a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801053e:	f003 0301 	and.w	r3, r3, #1
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00b      	beq.n	801055e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2202      	movs	r2, #2
 801054c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010554:	f043 0204 	orr.w	r2, r3, #4
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801055e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010562:	f003 0304 	and.w	r3, r3, #4
 8010566:	2b00      	cmp	r3, #0
 8010568:	d011      	beq.n	801058e <UART_RxISR_16BIT_FIFOEN+0x12e>
 801056a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801056e:	f003 0301 	and.w	r3, r3, #1
 8010572:	2b00      	cmp	r3, #0
 8010574:	d00b      	beq.n	801058e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2204      	movs	r2, #4
 801057c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010584:	f043 0202 	orr.w	r2, r3, #2
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010594:	2b00      	cmp	r3, #0
 8010596:	d006      	beq.n	80105a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f7fe fdf2 	bl	800f182 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2200      	movs	r2, #0
 80105a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	f040 80a4 	bne.w	80106fc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105bc:	e853 3f00 	ldrex	r3, [r3]
 80105c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80105c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	461a      	mov	r2, r3
 80105d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80105d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80105da:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80105de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80105e2:	e841 2300 	strex	r3, r2, [r1]
 80105e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80105e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d1e2      	bne.n	80105b4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	3308      	adds	r3, #8
 80105f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105f8:	e853 3f00 	ldrex	r3, [r3]
 80105fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80105fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010604:	f023 0301 	bic.w	r3, r3, #1
 8010608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3308      	adds	r3, #8
 8010612:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010616:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010618:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801061c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801061e:	e841 2300 	strex	r3, r2, [r1]
 8010622:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1e1      	bne.n	80105ee <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2220      	movs	r2, #32
 801062e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4a5f      	ldr	r2, [pc, #380]	; (80107c0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d021      	beq.n	801068c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010652:	2b00      	cmp	r3, #0
 8010654:	d01a      	beq.n	801068c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801065c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801065e:	e853 3f00 	ldrex	r3, [r3]
 8010662:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010666:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801066a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	461a      	mov	r2, r3
 8010674:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010678:	65bb      	str	r3, [r7, #88]	; 0x58
 801067a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801067c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801067e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010680:	e841 2300 	strex	r3, r2, [r1]
 8010684:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1e4      	bne.n	8010656 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010690:	2b01      	cmp	r3, #1
 8010692:	d130      	bne.n	80106f6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a2:	e853 3f00 	ldrex	r3, [r3]
 80106a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106aa:	f023 0310 	bic.w	r3, r3, #16
 80106ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	461a      	mov	r2, r3
 80106b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80106bc:	647b      	str	r3, [r7, #68]	; 0x44
 80106be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80106c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106c4:	e841 2300 	strex	r3, r2, [r1]
 80106c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80106ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d1e4      	bne.n	801069a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	69db      	ldr	r3, [r3, #28]
 80106d6:	f003 0310 	and.w	r3, r3, #16
 80106da:	2b10      	cmp	r3, #16
 80106dc:	d103      	bne.n	80106e6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2210      	movs	r2, #16
 80106e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106ec:	4619      	mov	r1, r3
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f7fe fd50 	bl	800f194 <HAL_UARTEx_RxEventCallback>
 80106f4:	e002      	b.n	80106fc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f000 fe22 	bl	8011340 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80106fc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010700:	2b00      	cmp	r3, #0
 8010702:	d006      	beq.n	8010712 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8010704:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010708:	f003 0320 	and.w	r3, r3, #32
 801070c:	2b00      	cmp	r3, #0
 801070e:	f47f aecb 	bne.w	80104a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010718:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801071c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010720:	2b00      	cmp	r3, #0
 8010722:	d049      	beq.n	80107b8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801072a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801072e:	429a      	cmp	r2, r3
 8010730:	d242      	bcs.n	80107b8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	3308      	adds	r3, #8
 8010738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073c:	e853 3f00 	ldrex	r3, [r3]
 8010740:	623b      	str	r3, [r7, #32]
   return(result);
 8010742:	6a3b      	ldr	r3, [r7, #32]
 8010744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	3308      	adds	r3, #8
 8010752:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010756:	633a      	str	r2, [r7, #48]	; 0x30
 8010758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801075a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801075c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801075e:	e841 2300 	strex	r3, r2, [r1]
 8010762:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010766:	2b00      	cmp	r3, #0
 8010768:	d1e3      	bne.n	8010732 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4a15      	ldr	r2, [pc, #84]	; (80107c4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801076e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	e853 3f00 	ldrex	r3, [r3]
 801077c:	60fb      	str	r3, [r7, #12]
   return(result);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	f043 0320 	orr.w	r3, r3, #32
 8010784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	461a      	mov	r2, r3
 801078e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010792:	61fb      	str	r3, [r7, #28]
 8010794:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010796:	69b9      	ldr	r1, [r7, #24]
 8010798:	69fa      	ldr	r2, [r7, #28]
 801079a:	e841 2300 	strex	r3, r2, [r1]
 801079e:	617b      	str	r3, [r7, #20]
   return(result);
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d1e4      	bne.n	8010770 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80107a6:	e007      	b.n	80107b8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	699a      	ldr	r2, [r3, #24]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f042 0208 	orr.w	r2, r2, #8
 80107b6:	619a      	str	r2, [r3, #24]
}
 80107b8:	bf00      	nop
 80107ba:	37b8      	adds	r7, #184	; 0xb8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	40008000 	.word	0x40008000
 80107c4:	0800ff49 	.word	0x0800ff49

080107c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80107d0:	bf00      	nop
 80107d2:	370c      	adds	r7, #12
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bc80      	pop	{r7}
 80107d8:	4770      	bx	lr

080107da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80107da:	b480      	push	{r7}
 80107dc:	b083      	sub	sp, #12
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80107e2:	bf00      	nop
 80107e4:	370c      	adds	r7, #12
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bc80      	pop	{r7}
 80107ea:	4770      	bx	lr

080107ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80107f4:	bf00      	nop
 80107f6:	370c      	adds	r7, #12
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bc80      	pop	{r7}
 80107fc:	4770      	bx	lr

080107fe <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80107fe:	b580      	push	{r7, lr}
 8010800:	b084      	sub	sp, #16
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801080c:	2b01      	cmp	r3, #1
 801080e:	d101      	bne.n	8010814 <HAL_UARTEx_EnableFifoMode+0x16>
 8010810:	2302      	movs	r3, #2
 8010812:	e02b      	b.n	801086c <HAL_UARTEx_EnableFifoMode+0x6e>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2201      	movs	r2, #1
 8010818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2224      	movs	r2, #36	; 0x24
 8010820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f022 0201 	bic.w	r2, r2, #1
 801083a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010842:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 801084a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	68fa      	ldr	r2, [r7, #12]
 8010852:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f000 f8c1 	bl	80109dc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2220      	movs	r2, #32
 801085e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2200      	movs	r2, #0
 8010866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	3710      	adds	r7, #16
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010882:	2b01      	cmp	r3, #1
 8010884:	d101      	bne.n	801088a <HAL_UARTEx_DisableFifoMode+0x16>
 8010886:	2302      	movs	r3, #2
 8010888:	e027      	b.n	80108da <HAL_UARTEx_DisableFifoMode+0x66>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2201      	movs	r2, #1
 801088e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2224      	movs	r2, #36	; 0x24
 8010896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	681a      	ldr	r2, [r3, #0]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f022 0201 	bic.w	r2, r2, #1
 80108b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80108b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2200      	movs	r2, #0
 80108be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	68fa      	ldr	r2, [r7, #12]
 80108c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2220      	movs	r2, #32
 80108cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2200      	movs	r2, #0
 80108d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80108d8:	2300      	movs	r3, #0
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3714      	adds	r7, #20
 80108de:	46bd      	mov	sp, r7
 80108e0:	bc80      	pop	{r7}
 80108e2:	4770      	bx	lr

080108e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d101      	bne.n	80108fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80108f8:	2302      	movs	r3, #2
 80108fa:	e02d      	b.n	8010958 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2201      	movs	r2, #1
 8010900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2224      	movs	r2, #36	; 0x24
 8010908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f022 0201 	bic.w	r2, r2, #1
 8010922:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	683a      	ldr	r2, [r7, #0]
 8010934:	430a      	orrs	r2, r1
 8010936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 f84f 	bl	80109dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	68fa      	ldr	r2, [r7, #12]
 8010944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2220      	movs	r2, #32
 801094a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010956:	2300      	movs	r3, #0
}
 8010958:	4618      	mov	r0, r3
 801095a:	3710      	adds	r7, #16
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010970:	2b01      	cmp	r3, #1
 8010972:	d101      	bne.n	8010978 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010974:	2302      	movs	r3, #2
 8010976:	e02d      	b.n	80109d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2201      	movs	r2, #1
 801097c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2224      	movs	r2, #36	; 0x24
 8010984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f022 0201 	bic.w	r2, r2, #1
 801099e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	689b      	ldr	r3, [r3, #8]
 80109a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	683a      	ldr	r2, [r7, #0]
 80109b0:	430a      	orrs	r2, r1
 80109b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f000 f811 	bl	80109dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	68fa      	ldr	r2, [r7, #12]
 80109c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2220      	movs	r2, #32
 80109c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80109d2:	2300      	movs	r3, #0
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3710      	adds	r7, #16
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80109dc:	b480      	push	{r7}
 80109de:	b085      	sub	sp, #20
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d108      	bne.n	80109fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2201      	movs	r2, #1
 80109f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2201      	movs	r2, #1
 80109f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80109fc:	e031      	b.n	8010a62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80109fe:	2308      	movs	r3, #8
 8010a00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010a02:	2308      	movs	r3, #8
 8010a04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	689b      	ldr	r3, [r3, #8]
 8010a0c:	0e5b      	lsrs	r3, r3, #25
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	f003 0307 	and.w	r3, r3, #7
 8010a14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	0f5b      	lsrs	r3, r3, #29
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	f003 0307 	and.w	r3, r3, #7
 8010a24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a26:	7bbb      	ldrb	r3, [r7, #14]
 8010a28:	7b3a      	ldrb	r2, [r7, #12]
 8010a2a:	4910      	ldr	r1, [pc, #64]	; (8010a6c <UARTEx_SetNbDataToProcess+0x90>)
 8010a2c:	5c8a      	ldrb	r2, [r1, r2]
 8010a2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a32:	7b3a      	ldrb	r2, [r7, #12]
 8010a34:	490e      	ldr	r1, [pc, #56]	; (8010a70 <UARTEx_SetNbDataToProcess+0x94>)
 8010a36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a38:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a44:	7bfb      	ldrb	r3, [r7, #15]
 8010a46:	7b7a      	ldrb	r2, [r7, #13]
 8010a48:	4908      	ldr	r1, [pc, #32]	; (8010a6c <UARTEx_SetNbDataToProcess+0x90>)
 8010a4a:	5c8a      	ldrb	r2, [r1, r2]
 8010a4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a50:	7b7a      	ldrb	r2, [r7, #13]
 8010a52:	4907      	ldr	r1, [pc, #28]	; (8010a70 <UARTEx_SetNbDataToProcess+0x94>)
 8010a54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a56:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a5a:	b29a      	uxth	r2, r3
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010a62:	bf00      	nop
 8010a64:	3714      	adds	r7, #20
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bc80      	pop	{r7}
 8010a6a:	4770      	bx	lr
 8010a6c:	0801b004 	.word	0x0801b004
 8010a70:	0801b00c 	.word	0x0801b00c

08010a74 <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b086      	sub	sp, #24
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 8010a7c:	f7f9 f946 	bl	8009d0c <Get_AdcHandle>
 8010a80:	4603      	mov	r3, r0
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7fa fd25 	bl	800b4d2 <HAL_ADCEx_Calibration_Start>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d001      	beq.n	8010a92 <ReadADCChannel+0x1e>
	    Error_Handler();
 8010a8e:	f7f9 f977 	bl	8009d80 <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 8010a92:	f107 0308 	add.w	r3, r7, #8
 8010a96:	2200      	movs	r2, #0
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	605a      	str	r2, [r3, #4]
 8010a9c:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 8010aaa:	f7f9 f92f 	bl	8009d0c <Get_AdcHandle>
 8010aae:	4602      	mov	r2, r0
 8010ab0:	f107 0308 	add.w	r3, r7, #8
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	4610      	mov	r0, r2
 8010ab8:	f7fa fa1e 	bl	800aef8 <HAL_ADC_ConfigChannel>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d001      	beq.n	8010ac6 <ReadADCChannel+0x52>
		Error_Handler();
 8010ac2:	f7f9 f95d 	bl	8009d80 <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 8010ac6:	f7f9 f921 	bl	8009d0c <Get_AdcHandle>
 8010aca:	4603      	mov	r3, r0
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fa f8f7 	bl	800acc0 <HAL_ADC_Start>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <ReadADCChannel+0x68>
		Error_Handler();
 8010ad8:	f7f9 f952 	bl	8009d80 <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 8010adc:	f7f9 f916 	bl	8009d0c <Get_AdcHandle>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fa f962 	bl	800adb0 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 8010aec:	f7f9 f90e 	bl	8009d0c <Get_AdcHandle>
 8010af0:	4603      	mov	r3, r0
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fa f92a 	bl	800ad4c <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 8010af8:	f7f9 f908 	bl	8009d0c <Get_AdcHandle>
 8010afc:	4603      	mov	r3, r0
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7fa fb32 	bl	800b168 <HAL_ADC_GetState>
 8010b04:	4603      	mov	r3, r0
 8010b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b0e:	d107      	bne.n	8010b20 <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 8010b10:	f7f9 f8fc 	bl	8009d0c <Get_AdcHandle>
 8010b14:	4603      	mov	r3, r0
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fa f9e1 	bl	800aede <HAL_ADC_GetValue>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 8010b20:	8afb      	ldrh	r3, [r7, #22]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3718      	adds	r7, #24
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
	...

08010b2c <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 8010b30:	2200      	movs	r2, #0
 8010b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010b36:	480b      	ldr	r0, [pc, #44]	; (8010b64 <AdcRead_VBatt+0x38>)
 8010b38:	f7fb f992 	bl	800be60 <HAL_GPIO_WritePin>
	adcResult = ReadADCChannel(ADC_CHANNEL_3); // * 3.3 * 23) / (4096 * 13);
 8010b3c:	480a      	ldr	r0, [pc, #40]	; (8010b68 <AdcRead_VBatt+0x3c>)
 8010b3e:	f7ff ff99 	bl	8010a74 <ReadADCChannel>
 8010b42:	4603      	mov	r3, r0
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7f8 fadd 	bl	8009104 <__aeabi_ui2f>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	4a07      	ldr	r2, [pc, #28]	; (8010b6c <AdcRead_VBatt+0x40>)
 8010b4e:	6013      	str	r3, [r2, #0]
	return adcResult;
 8010b50:	4b06      	ldr	r3, [pc, #24]	; (8010b6c <AdcRead_VBatt+0x40>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7f8 fb2d 	bl	80091b4 <__aeabi_f2uiz>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	b29b      	uxth	r3, r3
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	48000400 	.word	0x48000400
 8010b68:	0c000008 	.word	0x0c000008
 8010b6c:	20001354 	.word	0x20001354

08010b70 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8010b70:	b480      	push	{r7}
 8010b72:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8010b74:	f3bf 8f4f 	dsb	sy
}
 8010b78:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010b7a:	4b06      	ldr	r3, [pc, #24]	; (8010b94 <__NVIC_SystemReset+0x24>)
 8010b7c:	68db      	ldr	r3, [r3, #12]
 8010b7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010b82:	4904      	ldr	r1, [pc, #16]	; (8010b94 <__NVIC_SystemReset+0x24>)
 8010b84:	4b04      	ldr	r3, [pc, #16]	; (8010b98 <__NVIC_SystemReset+0x28>)
 8010b86:	4313      	orrs	r3, r2
 8010b88:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8010b8a:	f3bf 8f4f 	dsb	sy
}
 8010b8e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8010b90:	bf00      	nop
 8010b92:	e7fd      	b.n	8010b90 <__NVIC_SystemReset+0x20>
 8010b94:	e000ed00 	.word	0xe000ed00
 8010b98:	05fa0004 	.word	0x05fa0004

08010b9c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8010ba0:	4b03      	ldr	r3, [pc, #12]	; (8010bb0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8010ba8:	bf00      	nop
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bc80      	pop	{r7}
 8010bae:	4770      	bx	lr
 8010bb0:	58000400 	.word	0x58000400

08010bb4 <LL_AHB2_GRP1_DisableClock>:
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8010bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010bc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	43db      	mvns	r3, r3
 8010bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010bca:	4013      	ands	r3, r2
 8010bcc:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8010bce:	bf00      	nop
 8010bd0:	370c      	adds	r7, #12
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bc80      	pop	{r7}
 8010bd6:	4770      	bx	lr

08010bd8 <commandOK>:
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef hlpuart1;

char DataBuffer[200];

void commandOK(char *data){
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
	serialPutStr("OK\n");
 8010be0:	4803      	ldr	r0, [pc, #12]	; (8010bf0 <commandOK+0x18>)
 8010be2:	f000 fad5 	bl	8011190 <serialPutStr>
}
 8010be6:	bf00      	nop
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
 8010bee:	bf00      	nop
 8010bf0:	0801ae78 	.word	0x0801ae78

08010bf4 <commandReadDeviceId>:

void commandReadDeviceId(char *data)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b096      	sub	sp, #88	; 0x58
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	61bb      	str	r3, [r7, #24]
 8010c00:	f107 031c 	add.w	r3, r7, #28
 8010c04:	2200      	movs	r2, #0
 8010c06:	601a      	str	r2, [r3, #0]
 8010c08:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 8010c0a:	f7f9 fd35 	bl	800a678 <HAL_GetUIDw0>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 8010c12:	f7f9 fd3b 	bl	800a68c <HAL_GetUIDw1>
 8010c16:	4603      	mov	r3, r0
 8010c18:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 8010c1a:	f7f9 fd41 	bl	800a6a0 <HAL_GetUIDw2>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 8010c22:	f107 0318 	add.w	r3, r7, #24
 8010c26:	220c      	movs	r2, #12
 8010c28:	2100      	movs	r1, #0
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f003 fc92 	bl	8014554 <memset>
 8010c30:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 8010c32:	61bb      	str	r3, [r7, #24]
 8010c34:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 8010c36:	61fb      	str	r3, [r7, #28]
 8010c38:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 8010c3a:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 8010c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c40:	4a1e      	ldr	r2, [pc, #120]	; (8010cbc <commandReadDeviceId+0xc8>)
 8010c42:	2132      	movs	r1, #50	; 0x32
 8010c44:	4618      	mov	r0, r3
 8010c46:	f003 fb7b 	bl	8014340 <snprintf>
  serialPutStr(DeviceId);
 8010c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f000 fa9e 	bl	8011190 <serialPutStr>
  for(i=0; i<12; i++)
 8010c54:	2300      	movs	r3, #0
 8010c56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010c5a:	e026      	b.n	8010caa <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 8010c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c60:	2b0a      	cmp	r3, #10
 8010c62:	d80c      	bhi.n	8010c7e <commandReadDeviceId+0x8a>
 8010c64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c68:	3358      	adds	r3, #88	; 0x58
 8010c6a:	443b      	add	r3, r7
 8010c6c:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8010c70:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010c74:	4a12      	ldr	r2, [pc, #72]	; (8010cc0 <commandReadDeviceId+0xcc>)
 8010c76:	2132      	movs	r1, #50	; 0x32
 8010c78:	f003 fb62 	bl	8014340 <snprintf>
 8010c7c:	e00b      	b.n	8010c96 <commandReadDeviceId+0xa2>
 8010c7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c82:	3358      	adds	r3, #88	; 0x58
 8010c84:	443b      	add	r3, r7
 8010c86:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8010c8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010c8e:	4a0d      	ldr	r2, [pc, #52]	; (8010cc4 <commandReadDeviceId+0xd0>)
 8010c90:	2132      	movs	r1, #50	; 0x32
 8010c92:	f003 fb55 	bl	8014340 <snprintf>
    serialPutStr(DeviceId);
 8010c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f000 fa78 	bl	8011190 <serialPutStr>
  for(i=0; i<12; i++)
 8010ca0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cae:	2b0b      	cmp	r3, #11
 8010cb0:	d9d4      	bls.n	8010c5c <commandReadDeviceId+0x68>
  }
}
 8010cb2:	bf00      	nop
 8010cb4:	bf00      	nop
 8010cb6:	3758      	adds	r7, #88	; 0x58
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	0801ae7c 	.word	0x0801ae7c
 8010cc0:	0801ae8c 	.word	0x0801ae8c
 8010cc4:	0801ae90 	.word	0x0801ae90

08010cc8 <commandReadDeviceBattery>:

void commandReadDeviceBattery(char *data)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
	 sprintf(DataBuffer,"%d\n",AdcRead_VBatt());
 8010cd0:	f7ff ff2c 	bl	8010b2c <AdcRead_VBatt>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	4906      	ldr	r1, [pc, #24]	; (8010cf4 <commandReadDeviceBattery+0x2c>)
 8010cda:	4807      	ldr	r0, [pc, #28]	; (8010cf8 <commandReadDeviceBattery+0x30>)
 8010cdc:	f003 fb64 	bl	80143a8 <sprintf>
	 HAL_Delay(250);
 8010ce0:	20fa      	movs	r0, #250	; 0xfa
 8010ce2:	f7f9 fca5 	bl	800a630 <HAL_Delay>
	 serialPutStr(DataBuffer);
 8010ce6:	4804      	ldr	r0, [pc, #16]	; (8010cf8 <commandReadDeviceBattery+0x30>)
 8010ce8:	f000 fa52 	bl	8011190 <serialPutStr>
}
 8010cec:	bf00      	nop
 8010cee:	3708      	adds	r7, #8
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	0801ae90 	.word	0x0801ae90
 8010cf8:	20001358 	.word	0x20001358

08010cfc <commandGetDistance>:


char sonarBuffer[100];
void commandGetDistance(char *data)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_RESET); 		/* turn on */
 8010d04:	2200      	movs	r2, #0
 8010d06:	2101      	movs	r1, #1
 8010d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010d0c:	f7fb f8a8 	bl	800be60 <HAL_GPIO_WritePin>
	sprintf(sonarBuffer,"%d\n",getSonarDistance());
 8010d10:	f000 f95a 	bl	8010fc8 <getSonarDistance>
 8010d14:	4603      	mov	r3, r0
 8010d16:	461a      	mov	r2, r3
 8010d18:	4905      	ldr	r1, [pc, #20]	; (8010d30 <commandGetDistance+0x34>)
 8010d1a:	4806      	ldr	r0, [pc, #24]	; (8010d34 <commandGetDistance+0x38>)
 8010d1c:	f003 fb44 	bl	80143a8 <sprintf>
	serialPutStr(sonarBuffer);
 8010d20:	4804      	ldr	r0, [pc, #16]	; (8010d34 <commandGetDistance+0x38>)
 8010d22:	f000 fa35 	bl	8011190 <serialPutStr>
//	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);	/* turn off to save power */
}
 8010d26:	bf00      	nop
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	0801ae90 	.word	0x0801ae90
 8010d34:	20001420 	.word	0x20001420

08010d38 <commandGetVersion>:

void commandGetVersion(char *data)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]

	sprintf(DataBuffer,"OK,VERSION %s\n","v0");
 8010d40:	4a05      	ldr	r2, [pc, #20]	; (8010d58 <commandGetVersion+0x20>)
 8010d42:	4906      	ldr	r1, [pc, #24]	; (8010d5c <commandGetVersion+0x24>)
 8010d44:	4806      	ldr	r0, [pc, #24]	; (8010d60 <commandGetVersion+0x28>)
 8010d46:	f003 fb2f 	bl	80143a8 <sprintf>
	serialPutStr(DataBuffer);
 8010d4a:	4805      	ldr	r0, [pc, #20]	; (8010d60 <commandGetVersion+0x28>)
 8010d4c:	f000 fa20 	bl	8011190 <serialPutStr>
}
 8010d50:	bf00      	nop
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}
 8010d58:	0801ae94 	.word	0x0801ae94
 8010d5c:	0801ae98 	.word	0x0801ae98
 8010d60:	20001358 	.word	0x20001358

08010d64 <commandReboot>:

void commandReboot(char *data){
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
	NVIC_SystemReset();
 8010d6c:	f7ff ff00 	bl	8010b70 <__NVIC_SystemReset>

08010d70 <commandSleep>:
}


void commandSleep(char *data){
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b088      	sub	sp, #32
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
	serialPutStr("SOK\n");
 8010d78:	483f      	ldr	r0, [pc, #252]	; (8010e78 <commandSleep+0x108>)
 8010d7a:	f000 fa09 	bl	8011190 <serialPutStr>
	serialPutStr("SOK\n");
 8010d7e:	483e      	ldr	r0, [pc, #248]	; (8010e78 <commandSleep+0x108>)
 8010d80:	f000 fa06 	bl	8011190 <serialPutStr>
	serialPutStr("SOK\n");
 8010d84:	483c      	ldr	r0, [pc, #240]	; (8010e78 <commandSleep+0x108>)
 8010d86:	f000 fa03 	bl	8011190 <serialPutStr>
	serialPutStr("SOK\n");
 8010d8a:	483b      	ldr	r0, [pc, #236]	; (8010e78 <commandSleep+0x108>)
 8010d8c:	f000 fa00 	bl	8011190 <serialPutStr>
	HAL_SuspendTick();
 8010d90:	f7f9 fad0 	bl	800a334 <HAL_SuspendTick>
	GPIO_InitTypeDef GPIO_InitStructure = {0};
 8010d94:	f107 0308 	add.w	r3, r7, #8
 8010d98:	2200      	movs	r2, #0
 8010d9a:	601a      	str	r2, [r3, #0]
 8010d9c:	605a      	str	r2, [r3, #4]
 8010d9e:	609a      	str	r2, [r3, #8]
 8010da0:	60da      	str	r2, [r3, #12]
 8010da2:	611a      	str	r2, [r3, #16]
	GPIO_InitStructure.Pin = GPIO_PIN_All&(~GPIO_PIN_0);
 8010da4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8010da8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8010daa:	2303      	movs	r3, #3
 8010dac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8010dae:	2300      	movs	r3, #0
 8010db0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8010db2:	f107 0308 	add.w	r3, r7, #8
 8010db6:	4619      	mov	r1, r3
 8010db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010dbc:	f7fa fe22 	bl	800ba04 <HAL_GPIO_Init>
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8010dc0:	2001      	movs	r0, #1
 8010dc2:	f7ff fef7 	bl	8010bb4 <LL_AHB2_GRP1_DisableClock>
	GPIO_InitStructure.Pin = GPIO_PIN_All;
 8010dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010dca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8010dcc:	2303      	movs	r3, #3
 8010dce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8010dd4:	f107 0308 	add.w	r3, r7, #8
 8010dd8:	4619      	mov	r1, r3
 8010dda:	4828      	ldr	r0, [pc, #160]	; (8010e7c <commandSleep+0x10c>)
 8010ddc:	f7fa fe12 	bl	800ba04 <HAL_GPIO_Init>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8010de0:	2002      	movs	r0, #2
 8010de2:	f7ff fee7 	bl	8010bb4 <LL_AHB2_GRP1_DisableClock>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8010de6:	f107 0308 	add.w	r3, r7, #8
 8010dea:	4619      	mov	r1, r3
 8010dec:	4824      	ldr	r0, [pc, #144]	; (8010e80 <commandSleep+0x110>)
 8010dee:	f7fa fe09 	bl	800ba04 <HAL_GPIO_Init>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8010df2:	2004      	movs	r0, #4
 8010df4:	f7ff fede 	bl	8010bb4 <LL_AHB2_GRP1_DisableClock>
	HAL_UART_MspDeInit(&huart2);
 8010df8:	4822      	ldr	r0, [pc, #136]	; (8010e84 <commandSleep+0x114>)
 8010dfa:	f7f9 f969 	bl	800a0d0 <HAL_UART_MspDeInit>
	LL_PWR_ClearFlag_C1STOP_C1STB();
 8010dfe:	f7ff fecd 	bl	8010b9c <LL_PWR_ClearFlag_C1STOP_C1STB>
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16,0);
 8010e02:	2300      	movs	r3, #0
 8010e04:	2200      	movs	r2, #0
 8010e06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e0a:	481f      	ldr	r0, [pc, #124]	; (8010e88 <commandSleep+0x118>)
 8010e0c:	f7fd f812 	bl	800de34 <HAL_RTCEx_SetWakeUpTimer_IT>
	HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8010e10:	2001      	movs	r0, #1
 8010e12:	f7fb f97b 	bl	800c10c <HAL_PWREx_EnterSTOP1Mode>
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8010e16:	481c      	ldr	r0, [pc, #112]	; (8010e88 <commandSleep+0x118>)
 8010e18:	f7fd f892 	bl	800df40 <HAL_RTCEx_DeactivateWakeUpTimer>
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16,0);
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e24:	4818      	ldr	r0, [pc, #96]	; (8010e88 <commandSleep+0x118>)
 8010e26:	f7fd f805 	bl	800de34 <HAL_RTCEx_SetWakeUpTimer_IT>
	HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
 8010e2a:	2001      	movs	r0, #1
 8010e2c:	f7fb f96e 	bl	800c10c <HAL_PWREx_EnterSTOP1Mode>
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8010e30:	4815      	ldr	r0, [pc, #84]	; (8010e88 <commandSleep+0x118>)
 8010e32:	f7fd f885 	bl	800df40 <HAL_RTCEx_DeactivateWakeUpTimer>
	SystemClock_Config();
 8010e36:	f7f8 fc9b 	bl	8009770 <SystemClock_Config>
	HAL_ResumeTick();
 8010e3a:	f7f9 fa8b 	bl	800a354 <HAL_ResumeTick>
	HAL_UART_MspInit(&huart2);
 8010e3e:	4811      	ldr	r0, [pc, #68]	; (8010e84 <commandSleep+0x114>)
 8010e40:	f7f9 f8ca 	bl	8009fd8 <HAL_UART_MspInit>
	HAL_UART_MspInit(&hlpuart1);
 8010e44:	4811      	ldr	r0, [pc, #68]	; (8010e8c <commandSleep+0x11c>)
 8010e46:	f7f9 f8c7 	bl	8009fd8 <HAL_UART_MspInit>
	MX_GPIO_Init();
 8010e4a:	f7f8 ff07 	bl	8009c5c <MX_GPIO_Init>
	for(int i=0;i<3;i++){
 8010e4e:	2300      	movs	r3, #0
 8010e50:	61fb      	str	r3, [r7, #28]
 8010e52:	e008      	b.n	8010e66 <commandSleep+0xf6>
		serialPutStr("..\n");
 8010e54:	480e      	ldr	r0, [pc, #56]	; (8010e90 <commandSleep+0x120>)
 8010e56:	f000 f99b 	bl	8011190 <serialPutStr>
		HAL_Delay(50);
 8010e5a:	2032      	movs	r0, #50	; 0x32
 8010e5c:	f7f9 fbe8 	bl	800a630 <HAL_Delay>
	for(int i=0;i<3;i++){
 8010e60:	69fb      	ldr	r3, [r7, #28]
 8010e62:	3301      	adds	r3, #1
 8010e64:	61fb      	str	r3, [r7, #28]
 8010e66:	69fb      	ldr	r3, [r7, #28]
 8010e68:	2b02      	cmp	r3, #2
 8010e6a:	ddf3      	ble.n	8010e54 <commandSleep+0xe4>
	}
}
 8010e6c:	bf00      	nop
 8010e6e:	bf00      	nop
 8010e70:	3720      	adds	r7, #32
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	0801aea8 	.word	0x0801aea8
 8010e7c:	48000400 	.word	0x48000400
 8010e80:	48000800 	.word	0x48000800
 8010e84:	200011b4 	.word	0x200011b4
 8010e88:	20001248 	.word	0x20001248
 8010e8c:	20001120 	.word	0x20001120
 8010e90:	0801aeb0 	.word	0x0801aeb0

08010e94 <singleRead>:
static uint16_t mode_(unsigned int number_of_samples);
static void swap(volatile uint16_t *p, volatile uint16_t *q);
static int partition(int lowIndex, int highIndex);
static void quickSort(int lowIndex, int highIndex);

static uint16_t singleRead(void) {
 8010e94:	b5b0      	push	{r4, r5, r7, lr}
 8010e96:	b086      	sub	sp, #24
 8010e98:	af00      	add	r7, sp, #0
	unsigned char RxBuffer[4];
	bool newData = false;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	75fb      	strb	r3, [r7, #23]
	uint16_t dist_mm = 0;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	82bb      	strh	r3, [r7, #20]
	unsigned char rx;
	uint8_t tries = 0;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	74fb      	strb	r3, [r7, #19]

	do {
		HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_SET);
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	2102      	movs	r1, #2
 8010eaa:	4844      	ldr	r0, [pc, #272]	; (8010fbc <singleRead+0x128>)
 8010eac:	f7fa ffd8 	bl	800be60 <HAL_GPIO_WritePin>
		HAL_Delay(1); // todo: implement HAL_Delay_Microseconds()
 8010eb0:	2001      	movs	r0, #1
 8010eb2:	f7f9 fbbd 	bl	800a630 <HAL_Delay>
		HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	2102      	movs	r1, #2
 8010eba:	4840      	ldr	r0, [pc, #256]	; (8010fbc <singleRead+0x128>)
 8010ebc:	f7fa ffd0 	bl	800be60 <HAL_GPIO_WritePin>
		if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t*) &rx, 1, 20)
 8010ec0:	f7f8 ff38 	bl	8009d34 <Get_SonarHandle>
 8010ec4:	1df9      	adds	r1, r7, #7
 8010ec6:	2314      	movs	r3, #20
 8010ec8:	2201      	movs	r2, #1
 8010eca:	f7fd fd1d 	bl	800e908 <HAL_UART_Receive>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d160      	bne.n	8010f96 <singleRead+0x102>
				== HAL_OK) {
			if ((char) rx == 'R') {
 8010ed4:	79fb      	ldrb	r3, [r7, #7]
 8010ed6:	2b52      	cmp	r3, #82	; 0x52
 8010ed8:	d15a      	bne.n	8010f90 <singleRead+0xfc>
				if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t*) &RxBuffer, 4,
 8010eda:	f7f8 ff2b 	bl	8009d34 <Get_SonarHandle>
 8010ede:	f107 0108 	add.w	r1, r7, #8
 8010ee2:	2314      	movs	r3, #20
 8010ee4:	2204      	movs	r2, #4
 8010ee6:	f7fd fd0f 	bl	800e908 <HAL_UART_Receive>
 8010eea:	4603      	mov	r3, r0
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d155      	bne.n	8010f9c <singleRead+0x108>
						20) == HAL_OK) {
					if (isdigit(RxBuffer[3])) {
 8010ef0:	7afb      	ldrb	r3, [r7, #11]
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	4a32      	ldr	r2, [pc, #200]	; (8010fc0 <singleRead+0x12c>)
 8010ef6:	4413      	add	r3, r2
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	f003 0304 	and.w	r3, r3, #4
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d001      	beq.n	8010f06 <singleRead+0x72>
						newData = true;
 8010f02:	2301      	movs	r3, #1
 8010f04:	75fb      	strb	r3, [r7, #23]
					}
					if (newData) {
 8010f06:	7dfb      	ldrb	r3, [r7, #23]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d047      	beq.n	8010f9c <singleRead+0x108>
						for (int i = 0; i < 4; i++)
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	60fb      	str	r3, [r7, #12]
 8010f10:	e035      	b.n	8010f7e <singleRead+0xea>
							dist_mm += (RxBuffer[3 - i] - '0') * pow(10, i);
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f1c3 0303 	rsb	r3, r3, #3
 8010f18:	3318      	adds	r3, #24
 8010f1a:	443b      	add	r3, r7
 8010f1c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8010f20:	3b30      	subs	r3, #48	; 0x30
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7f7 fcd6 	bl	80088d4 <__aeabi_i2d>
 8010f28:	4604      	mov	r4, r0
 8010f2a:	460d      	mov	r5, r1
 8010f2c:	68f8      	ldr	r0, [r7, #12]
 8010f2e:	f7f7 fcd1 	bl	80088d4 <__aeabi_i2d>
 8010f32:	4602      	mov	r2, r0
 8010f34:	460b      	mov	r3, r1
 8010f36:	f04f 0000 	mov.w	r0, #0
 8010f3a:	4922      	ldr	r1, [pc, #136]	; (8010fc4 <singleRead+0x130>)
 8010f3c:	f009 f824 	bl	8019f88 <pow>
 8010f40:	4602      	mov	r2, r0
 8010f42:	460b      	mov	r3, r1
 8010f44:	4620      	mov	r0, r4
 8010f46:	4629      	mov	r1, r5
 8010f48:	f7f7 fd2e 	bl	80089a8 <__aeabi_dmul>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	460b      	mov	r3, r1
 8010f50:	4614      	mov	r4, r2
 8010f52:	461d      	mov	r5, r3
 8010f54:	8abb      	ldrh	r3, [r7, #20]
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7f7 fcbc 	bl	80088d4 <__aeabi_i2d>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	460b      	mov	r3, r1
 8010f60:	4620      	mov	r0, r4
 8010f62:	4629      	mov	r1, r5
 8010f64:	f7f7 fb6a 	bl	800863c <__adddf3>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	4610      	mov	r0, r2
 8010f6e:	4619      	mov	r1, r3
 8010f70:	f7f7 fff2 	bl	8008f58 <__aeabi_d2uiz>
 8010f74:	4603      	mov	r3, r0
 8010f76:	82bb      	strh	r3, [r7, #20]
						for (int i = 0; i < 4; i++)
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	60fb      	str	r3, [r7, #12]
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2b03      	cmp	r3, #3
 8010f82:	ddc6      	ble.n	8010f12 <singleRead+0x7e>
						if (dist_mm == 0)
 8010f84:	8abb      	ldrh	r3, [r7, #20]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d108      	bne.n	8010f9c <singleRead+0x108>
							newData = false;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	75fb      	strb	r3, [r7, #23]
 8010f8e:	e005      	b.n	8010f9c <singleRead+0x108>
					}
				}
			} else {
				newData = false;
 8010f90:	2300      	movs	r3, #0
 8010f92:	75fb      	strb	r3, [r7, #23]
 8010f94:	e002      	b.n	8010f9c <singleRead+0x108>
			}
		} else {
			tries++;
 8010f96:	7cfb      	ldrb	r3, [r7, #19]
 8010f98:	3301      	adds	r3, #1
 8010f9a:	74fb      	strb	r3, [r7, #19]
		}
	} while (newData == false && tries < MAX_SONAR_TRIES - 1);
 8010f9c:	7dfb      	ldrb	r3, [r7, #23]
 8010f9e:	f083 0301 	eor.w	r3, r3, #1
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d003      	beq.n	8010fb0 <singleRead+0x11c>
 8010fa8:	7cfb      	ldrb	r3, [r7, #19]
 8010faa:	2b03      	cmp	r3, #3
 8010fac:	f67f af7b 	bls.w	8010ea6 <singleRead+0x12>
	return dist_mm;
 8010fb0:	8abb      	ldrh	r3, [r7, #20]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3718      	adds	r7, #24
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	48000800 	.word	0x48000800
 8010fc0:	0801b654 	.word	0x0801b654
 8010fc4:	40240000 	.word	0x40240000

08010fc8 <getSonarDistance>:

uint16_t getSonarDistance(void) {
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
	uint16_t dist_mm = 0;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	807b      	strh	r3, [r7, #2]
	/* RESET IS ON, SET IS OFF! is this in reverse? wdik */
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_RESET);
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	2101      	movs	r1, #1
 8010fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010fda:	f7fa ff41 	bl	800be60 <HAL_GPIO_WritePin>
	/* First two are from the BOOT UP message of Maxbotix */
	singleRead();
 8010fde:	f7ff ff59 	bl	8010e94 <singleRead>
	singleRead();
 8010fe2:	f7ff ff57 	bl	8010e94 <singleRead>
	for (int i = 0; i < MAX_SONAR_SAMPLES; i++) {
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	607b      	str	r3, [r7, #4]
 8010fea:	e00d      	b.n	8011008 <getSonarDistance+0x40>
		readings_arr[i] = singleRead();
 8010fec:	f7ff ff52 	bl	8010e94 <singleRead>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	4a0e      	ldr	r2, [pc, #56]	; (8011030 <getSonarDistance+0x68>)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		HAL_Delay(150);
 8010ffc:	2096      	movs	r0, #150	; 0x96
 8010ffe:	f7f9 fb17 	bl	800a630 <HAL_Delay>
	for (int i = 0; i < MAX_SONAR_SAMPLES; i++) {
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	3301      	adds	r3, #1
 8011006:	607b      	str	r3, [r7, #4]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2b06      	cmp	r3, #6
 801100c:	ddee      	ble.n	8010fec <getSonarDistance+0x24>
	}
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 801100e:	2201      	movs	r2, #1
 8011010:	2101      	movs	r1, #1
 8011012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011016:	f7fa ff23 	bl	800be60 <HAL_GPIO_WritePin>
	switch (AVERAGING_METHOD) {
	case 1: /* Mean */
		dist_mm = mean(MAX_SONAR_SAMPLES);
		break;
	case 2: /* Median */
		dist_mm = median(MAX_SONAR_SAMPLES);
 801101a:	2007      	movs	r0, #7
 801101c:	f000 f886 	bl	801112c <median>
 8011020:	4603      	mov	r3, r0
 8011022:	807b      	strh	r3, [r7, #2]
		break;
 8011024:	bf00      	nop
		break;
	default: /* should never reach here */
		dist_mm = singleRead();
		break;
	}
	return dist_mm;
 8011026:	887b      	ldrh	r3, [r7, #2]
}
 8011028:	4618      	mov	r0, r3
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}
 8011030:	20001484 	.word	0x20001484

08011034 <swap>:

static void swap(volatile uint16_t *p, volatile uint16_t *q) {
 8011034:	b480      	push	{r7}
 8011036:	b085      	sub	sp, #20
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6039      	str	r1, [r7, #0]
	int t = *p;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	b29b      	uxth	r3, r3
 8011044:	60fb      	str	r3, [r7, #12]
	*p = *q;
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	881b      	ldrh	r3, [r3, #0]
 801104a:	b29a      	uxth	r2, r3
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	801a      	strh	r2, [r3, #0]
	*q = t;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	b29a      	uxth	r2, r3
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	801a      	strh	r2, [r3, #0]
}
 8011058:	bf00      	nop
 801105a:	3714      	adds	r7, #20
 801105c:	46bd      	mov	sp, r7
 801105e:	bc80      	pop	{r7}
 8011060:	4770      	bx	lr
	...

08011064 <partition>:

static int partition(int lowIndex, int highIndex) {
 8011064:	b580      	push	{r7, lr}
 8011066:	b086      	sub	sp, #24
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
	int pivotElement = readings_arr[highIndex];
 801106e:	4a1f      	ldr	r2, [pc, #124]	; (80110ec <partition+0x88>)
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011076:	b29b      	uxth	r3, r3
 8011078:	60fb      	str	r3, [r7, #12]
	int i = (lowIndex - 1);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	3b01      	subs	r3, #1
 801107e:	617b      	str	r3, [r7, #20]
	for (int j = lowIndex; j <= highIndex - 1; j++) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	613b      	str	r3, [r7, #16]
 8011084:	e01a      	b.n	80110bc <partition+0x58>
		if (readings_arr[j] <= pivotElement) {
 8011086:	4a19      	ldr	r2, [pc, #100]	; (80110ec <partition+0x88>)
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801108e:	b29b      	uxth	r3, r3
 8011090:	461a      	mov	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	4293      	cmp	r3, r2
 8011096:	db0e      	blt.n	80110b6 <partition+0x52>
			i++;
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	3301      	adds	r3, #1
 801109c:	617b      	str	r3, [r7, #20]
			swap(&readings_arr[i], &readings_arr[j]);
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	005b      	lsls	r3, r3, #1
 80110a2:	4a12      	ldr	r2, [pc, #72]	; (80110ec <partition+0x88>)
 80110a4:	441a      	add	r2, r3
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	005b      	lsls	r3, r3, #1
 80110aa:	4910      	ldr	r1, [pc, #64]	; (80110ec <partition+0x88>)
 80110ac:	440b      	add	r3, r1
 80110ae:	4619      	mov	r1, r3
 80110b0:	4610      	mov	r0, r2
 80110b2:	f7ff ffbf 	bl	8011034 <swap>
	for (int j = lowIndex; j <= highIndex - 1; j++) {
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	3301      	adds	r3, #1
 80110ba:	613b      	str	r3, [r7, #16]
 80110bc:	683a      	ldr	r2, [r7, #0]
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	429a      	cmp	r2, r3
 80110c2:	dce0      	bgt.n	8011086 <partition+0x22>
		}
	}
	swap(&readings_arr[i + 1], &readings_arr[highIndex]);
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	3301      	adds	r3, #1
 80110c8:	005b      	lsls	r3, r3, #1
 80110ca:	4a08      	ldr	r2, [pc, #32]	; (80110ec <partition+0x88>)
 80110cc:	441a      	add	r2, r3
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	005b      	lsls	r3, r3, #1
 80110d2:	4906      	ldr	r1, [pc, #24]	; (80110ec <partition+0x88>)
 80110d4:	440b      	add	r3, r1
 80110d6:	4619      	mov	r1, r3
 80110d8:	4610      	mov	r0, r2
 80110da:	f7ff ffab 	bl	8011034 <swap>
	return (i + 1);
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	3301      	adds	r3, #1
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3718      	adds	r7, #24
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	20001484 	.word	0x20001484

080110f0 <quickSort>:

static void quickSort(int lowIndex, int highIndex) {
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
	if (lowIndex < highIndex) {
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	429a      	cmp	r2, r3
 8011100:	da10      	bge.n	8011124 <quickSort+0x34>
		int pivot = partition(lowIndex, highIndex);
 8011102:	6839      	ldr	r1, [r7, #0]
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7ff ffad 	bl	8011064 <partition>
 801110a:	60f8      	str	r0, [r7, #12]
		quickSort(lowIndex, pivot - 1);
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	3b01      	subs	r3, #1
 8011110:	4619      	mov	r1, r3
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f7ff ffec 	bl	80110f0 <quickSort>
		quickSort(pivot + 1, highIndex);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	3301      	adds	r3, #1
 801111c:	6839      	ldr	r1, [r7, #0]
 801111e:	4618      	mov	r0, r3
 8011120:	f7ff ffe6 	bl	80110f0 <quickSort>
	}
}
 8011124:	bf00      	nop
 8011126:	3710      	adds	r7, #16
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <median>:
		readings_sum = readings_sum + readings_arr[i];
	}
	return readings_sum / number_of_samples;
}

static uint16_t median(unsigned int number_of_samples) {
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
	quickSort(0, number_of_samples - 1);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	3b01      	subs	r3, #1
 8011138:	4619      	mov	r1, r3
 801113a:	2000      	movs	r0, #0
 801113c:	f7ff ffd8 	bl	80110f0 <quickSort>
	if (number_of_samples % 2 != 0) {
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f003 0301 	and.w	r3, r3, #1
 8011146:	2b00      	cmp	r3, #0
 8011148:	d008      	beq.n	801115c <median+0x30>
		return readings_arr[(number_of_samples + 1) / 2 - 1];
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	3301      	adds	r3, #1
 801114e:	085b      	lsrs	r3, r3, #1
 8011150:	3b01      	subs	r3, #1
 8011152:	4a0e      	ldr	r2, [pc, #56]	; (801118c <median+0x60>)
 8011154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011158:	b29b      	uxth	r3, r3
 801115a:	e012      	b.n	8011182 <median+0x56>
	} else {
		return (readings_arr[number_of_samples / 2 - 1]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	085b      	lsrs	r3, r3, #1
 8011160:	3b01      	subs	r3, #1
 8011162:	4a0a      	ldr	r2, [pc, #40]	; (801118c <median+0x60>)
 8011164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011168:	b29b      	uxth	r3, r3
 801116a:	4619      	mov	r1, r3
				+ readings_arr[number_of_samples / 2]) / 2;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	085b      	lsrs	r3, r3, #1
 8011170:	4a06      	ldr	r2, [pc, #24]	; (801118c <median+0x60>)
 8011172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011176:	b29b      	uxth	r3, r3
 8011178:	440b      	add	r3, r1
 801117a:	0fda      	lsrs	r2, r3, #31
 801117c:	4413      	add	r3, r2
 801117e:	105b      	asrs	r3, r3, #1
 8011180:	b29b      	uxth	r3, r3
	}
}
 8011182:	4618      	mov	r0, r3
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	20001484 	.word	0x20001484

08011190 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8011190:	b590      	push	{r4, r7, lr}
 8011192:	b083      	sub	sp, #12
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8011198:	f7f8 fdc2 	bl	8009d20 <Get_DebugHandle>
 801119c:	4604      	mov	r4, r0
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7f7 fa3e 	bl	8008620 <strlen>
 80111a4:	4603      	mov	r3, r0
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	230a      	movs	r3, #10
 80111aa:	6879      	ldr	r1, [r7, #4]
 80111ac:	4620      	mov	r0, r4
 80111ae:	f7fd fb25 	bl	800e7fc <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 80111b2:	bf00      	nop
 80111b4:	370c      	adds	r7, #12
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd90      	pop	{r4, r7, pc}
	...

080111bc <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b084      	sub	sp, #16
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 80111c4:	2300      	movs	r3, #0
 80111c6:	60fb      	str	r3, [r7, #12]
	char tRxedChar;

	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 80111c8:	f7f8 fdaa 	bl	8009d20 <Get_DebugHandle>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2201      	movs	r2, #1
 80111d0:	490f      	ldr	r1, [pc, #60]	; (8011210 <terminalTaskHandler+0x54>)
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7fd fc5c 	bl	800ea90 <HAL_UART_Receive_IT>
	/* Infinite loop */

	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80111d8:	f7f8 fdb6 	bl	8009d48 <Get_TerminalQueueHandle>
 80111dc:	f107 030b 	add.w	r3, r7, #11
 80111e0:	220a      	movs	r2, #10
 80111e2:	4619      	mov	r1, r3
 80111e4:	f000 fd64 	bl	8011cb0 <xQueueReceive>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00c      	beq.n	8011208 <terminalTaskHandler+0x4c>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 80111ee:	7afb      	ldrb	r3, [r7, #11]
 80111f0:	4618      	mov	r0, r3
 80111f2:	f000 f811 	bl	8011218 <CommandLineBuildCommand>
 80111f6:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d004      	beq.n	8011208 <terminalTaskHandler+0x4c>
			{
				CommandLineProcessCommand(gCommandBuffer);
 80111fe:	4805      	ldr	r0, [pc, #20]	; (8011214 <terminalTaskHandler+0x58>)
 8011200:	f000 f852 	bl	80112a8 <CommandLineProcessCommand>
				tCommandReady = 0;
 8011204:	2300      	movs	r3, #0
 8011206:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 8011208:	2001      	movs	r0, #1
 801120a:	f000 f92b 	bl	8011464 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 801120e:	e7e3      	b.n	80111d8 <terminalTaskHandler+0x1c>
 8011210:	200014c4 	.word	0x200014c4
 8011214:	200014c8 	.word	0x200014c8

08011218 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	4603      	mov	r3, r0
 8011220:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 8011222:	79fb      	ldrb	r3, [r7, #7]
 8011224:	2b0a      	cmp	r3, #10
 8011226:	d005      	beq.n	8011234 <CommandLineBuildCommand+0x1c>
 8011228:	79fb      	ldrb	r3, [r7, #7]
 801122a:	2b20      	cmp	r3, #32
 801122c:	d002      	beq.n	8011234 <CommandLineBuildCommand+0x1c>
 801122e:	79fb      	ldrb	r3, [r7, #7]
 8011230:	2b09      	cmp	r3, #9
 8011232:	d101      	bne.n	8011238 <CommandLineBuildCommand+0x20>
	{
		return false;
 8011234:	2300      	movs	r3, #0
 8011236:	e02d      	b.n	8011294 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8011238:	79fb      	ldrb	r3, [r7, #7]
 801123a:	2b0d      	cmp	r3, #13
 801123c:	d10a      	bne.n	8011254 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 801123e:	4b18      	ldr	r3, [pc, #96]	; (80112a0 <CommandLineBuildCommand+0x88>)
 8011240:	881b      	ldrh	r3, [r3, #0]
 8011242:	461a      	mov	r2, r3
 8011244:	4b17      	ldr	r3, [pc, #92]	; (80112a4 <CommandLineBuildCommand+0x8c>)
 8011246:	2100      	movs	r1, #0
 8011248:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 801124a:	4b15      	ldr	r3, [pc, #84]	; (80112a0 <CommandLineBuildCommand+0x88>)
 801124c:	2200      	movs	r2, #0
 801124e:	801a      	strh	r2, [r3, #0]
		return true;
 8011250:	2301      	movs	r3, #1
 8011252:	e01f      	b.n	8011294 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8011254:	79fb      	ldrb	r3, [r7, #7]
 8011256:	2b60      	cmp	r3, #96	; 0x60
 8011258:	d906      	bls.n	8011268 <CommandLineBuildCommand+0x50>
 801125a:	79fb      	ldrb	r3, [r7, #7]
 801125c:	2b7a      	cmp	r3, #122	; 0x7a
 801125e:	d803      	bhi.n	8011268 <CommandLineBuildCommand+0x50>
 8011260:	79fb      	ldrb	r3, [r7, #7]
 8011262:	3b20      	subs	r3, #32
 8011264:	b2db      	uxtb	r3, r3
 8011266:	e000      	b.n	801126a <CommandLineBuildCommand+0x52>
 8011268:	79fb      	ldrb	r3, [r7, #7]
 801126a:	4a0d      	ldr	r2, [pc, #52]	; (80112a0 <CommandLineBuildCommand+0x88>)
 801126c:	8812      	ldrh	r2, [r2, #0]
 801126e:	4611      	mov	r1, r2
 8011270:	4a0c      	ldr	r2, [pc, #48]	; (80112a4 <CommandLineBuildCommand+0x8c>)
 8011272:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8011274:	4b0a      	ldr	r3, [pc, #40]	; (80112a0 <CommandLineBuildCommand+0x88>)
 8011276:	881b      	ldrh	r3, [r3, #0]
 8011278:	3301      	adds	r3, #1
 801127a:	b29a      	uxth	r2, r3
 801127c:	4b08      	ldr	r3, [pc, #32]	; (80112a0 <CommandLineBuildCommand+0x88>)
 801127e:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 8011280:	4b07      	ldr	r3, [pc, #28]	; (80112a0 <CommandLineBuildCommand+0x88>)
 8011282:	881b      	ldrh	r3, [r3, #0]
 8011284:	2b77      	cmp	r3, #119	; 0x77
 8011286:	d904      	bls.n	8011292 <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 8011288:	4b05      	ldr	r3, [pc, #20]	; (80112a0 <CommandLineBuildCommand+0x88>)
 801128a:	2200      	movs	r2, #0
 801128c:	801a      	strh	r2, [r3, #0]
		return true;
 801128e:	2301      	movs	r3, #1
 8011290:	e000      	b.n	8011294 <CommandLineBuildCommand+0x7c>
	}

	return false;
 8011292:	2300      	movs	r3, #0

}
 8011294:	4618      	mov	r0, r3
 8011296:	370c      	adds	r7, #12
 8011298:	46bd      	mov	sp, r7
 801129a:	bc80      	pop	{r7}
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop
 80112a0:	200015ac 	.word	0x200015ac
 80112a4:	200014c8 	.word	0x200014c8

080112a8 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 80112a8:	b590      	push	{r4, r7, lr}
 80112aa:	b087      	sub	sp, #28
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 80112b0:	2300      	movs	r3, #0
 80112b2:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 80112b4:	491e      	ldr	r1, [pc, #120]	; (8011330 <CommandLineProcessCommand+0x88>)
 80112b6:	2000      	movs	r0, #0
 80112b8:	f003 f966 	bl	8014588 <strtok>
 80112bc:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80112be:	2300      	movs	r3, #0
 80112c0:	617b      	str	r3, [r7, #20]
 80112c2:	e020      	b.n	8011306 <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 80112c4:	4a1b      	ldr	r2, [pc, #108]	; (8011334 <CommandLineProcessCommand+0x8c>)
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80112cc:	4a19      	ldr	r2, [pc, #100]	; (8011334 <CommandLineProcessCommand+0x8c>)
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7f7 f9a3 	bl	8008620 <strlen>
 80112da:	4603      	mov	r3, r0
 80112dc:	461a      	mov	r2, r3
 80112de:	6879      	ldr	r1, [r7, #4]
 80112e0:	4620      	mov	r0, r4
 80112e2:	f003 f93f 	bl	8014564 <strncmp>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d109      	bne.n	8011300 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 80112ec:	2301      	movs	r3, #1
 80112ee:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 80112f0:	4a10      	ldr	r2, [pc, #64]	; (8011334 <CommandLineProcessCommand+0x8c>)
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	00db      	lsls	r3, r3, #3
 80112f6:	4413      	add	r3, r2
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	4798      	blx	r3
			break;
 80112fe:	e008      	b.n	8011312 <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	3301      	adds	r3, #1
 8011304:	617b      	str	r3, [r7, #20]
 8011306:	4a0b      	ldr	r2, [pc, #44]	; (8011334 <CommandLineProcessCommand+0x8c>)
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d1d8      	bne.n	80112c4 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message. */
	if (CommandFound==false)
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d107      	bne.n	8011328 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 8011318:	4a07      	ldr	r2, [pc, #28]	; (8011338 <CommandLineProcessCommand+0x90>)
 801131a:	2164      	movs	r1, #100	; 0x64
 801131c:	4807      	ldr	r0, [pc, #28]	; (801133c <CommandLineProcessCommand+0x94>)
 801131e:	f003 f80f 	bl	8014340 <snprintf>
		serialPutStr(TerminalMsgBuffer);
 8011322:	4806      	ldr	r0, [pc, #24]	; (801133c <CommandLineProcessCommand+0x94>)
 8011324:	f7ff ff34 	bl	8011190 <serialPutStr>
	}
}
 8011328:	bf00      	nop
 801132a:	371c      	adds	r7, #28
 801132c:	46bd      	mov	sp, r7
 801132e:	bd90      	pop	{r4, r7, pc}
 8011330:	0801af14 	.word	0x0801af14
 8011334:	0801b014 	.word	0x0801b014
 8011338:	0801af18 	.word	0x0801af18
 801133c:	20001544 	.word	0x20001544

08011340 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	4a0c      	ldr	r2, [pc, #48]	; (8011380 <HAL_UART_RxCpltCallback+0x40>)
 801134e:	4293      	cmp	r3, r2
 8011350:	d112      	bne.n	8011378 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8011352:	f7f8 fce5 	bl	8009d20 <Get_DebugHandle>
 8011356:	4603      	mov	r3, r0
 8011358:	2201      	movs	r2, #1
 801135a:	490a      	ldr	r1, [pc, #40]	; (8011384 <HAL_UART_RxCpltCallback+0x44>)
 801135c:	4618      	mov	r0, r3
 801135e:	f7fd fb97 	bl	800ea90 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 8011362:	4b08      	ldr	r3, [pc, #32]	; (8011384 <HAL_UART_RxCpltCallback+0x44>)
 8011364:	781a      	ldrb	r2, [r3, #0]
 8011366:	4b08      	ldr	r3, [pc, #32]	; (8011388 <HAL_UART_RxCpltCallback+0x48>)
 8011368:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 801136a:	f7f8 fced 	bl	8009d48 <Get_TerminalQueueHandle>
 801136e:	2300      	movs	r3, #0
 8011370:	4a06      	ldr	r2, [pc, #24]	; (801138c <HAL_UART_RxCpltCallback+0x4c>)
 8011372:	4905      	ldr	r1, [pc, #20]	; (8011388 <HAL_UART_RxCpltCallback+0x48>)
 8011374:	f000 fc04 	bl	8011b80 <xQueueGenericSendFromISR>
	}
}
 8011378:	bf00      	nop
 801137a:	3708      	adds	r7, #8
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}
 8011380:	40004400 	.word	0x40004400
 8011384:	200014c4 	.word	0x200014c4
 8011388:	200014c0 	.word	0x200014c0
 801138c:	200015a8 	.word	0x200015a8

08011390 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011390:	b480      	push	{r7}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	4603      	mov	r3, r0
 8011398:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801139a:	2300      	movs	r3, #0
 801139c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113a2:	2b84      	cmp	r3, #132	; 0x84
 80113a4:	d005      	beq.n	80113b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80113a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	4413      	add	r3, r2
 80113ae:	3303      	adds	r3, #3
 80113b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80113b2:	68fb      	ldr	r3, [r7, #12]
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bc80      	pop	{r7}
 80113bc:	4770      	bx	lr

080113be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80113be:	b580      	push	{r7, lr}
 80113c0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80113c2:	f001 f8d5 	bl	8012570 <vTaskStartScheduler>
  
  return osOK;
 80113c6:	2300      	movs	r3, #0
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	bd80      	pop	{r7, pc}

080113cc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80113cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ce:	b089      	sub	sp, #36	; 0x24
 80113d0:	af04      	add	r7, sp, #16
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	695b      	ldr	r3, [r3, #20]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d020      	beq.n	8011420 <osThreadCreate+0x54>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	699b      	ldr	r3, [r3, #24]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d01c      	beq.n	8011420 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	685c      	ldr	r4, [r3, #4]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	691e      	ldr	r6, [r3, #16]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff ffc9 	bl	8011390 <makeFreeRtosPriority>
 80113fe:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	695b      	ldr	r3, [r3, #20]
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011408:	9202      	str	r2, [sp, #8]
 801140a:	9301      	str	r3, [sp, #4]
 801140c:	9100      	str	r1, [sp, #0]
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	4632      	mov	r2, r6
 8011412:	4629      	mov	r1, r5
 8011414:	4620      	mov	r0, r4
 8011416:	f000 fe97 	bl	8012148 <xTaskCreateStatic>
 801141a:	4603      	mov	r3, r0
 801141c:	60fb      	str	r3, [r7, #12]
 801141e:	e01c      	b.n	801145a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	685c      	ldr	r4, [r3, #4]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801142c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011434:	4618      	mov	r0, r3
 8011436:	f7ff ffab 	bl	8011390 <makeFreeRtosPriority>
 801143a:	4602      	mov	r2, r0
 801143c:	f107 030c 	add.w	r3, r7, #12
 8011440:	9301      	str	r3, [sp, #4]
 8011442:	9200      	str	r2, [sp, #0]
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	4632      	mov	r2, r6
 8011448:	4629      	mov	r1, r5
 801144a:	4620      	mov	r0, r4
 801144c:	f000 fedb 	bl	8012206 <xTaskCreate>
 8011450:	4603      	mov	r3, r0
 8011452:	2b01      	cmp	r3, #1
 8011454:	d001      	beq.n	801145a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011456:	2300      	movs	r3, #0
 8011458:	e000      	b.n	801145c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801145a:	68fb      	ldr	r3, [r7, #12]
}
 801145c:	4618      	mov	r0, r3
 801145e:	3714      	adds	r7, #20
 8011460:	46bd      	mov	sp, r7
 8011462:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011464 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b084      	sub	sp, #16
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d001      	beq.n	801147a <osDelay+0x16>
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	e000      	b.n	801147c <osDelay+0x18>
 801147a:	2301      	movs	r3, #1
 801147c:	4618      	mov	r0, r3
 801147e:	f001 f843 	bl	8012508 <vTaskDelay>
  
  return osOK;
 8011482:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011484:	4618      	mov	r0, r3
 8011486:	3710      	adds	r7, #16
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d007      	beq.n	80114ac <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	4619      	mov	r1, r3
 80114a2:	2001      	movs	r0, #1
 80114a4:	f000 fa53 	bl	801194e <xQueueCreateMutexStatic>
 80114a8:	4603      	mov	r3, r0
 80114aa:	e003      	b.n	80114b4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80114ac:	2001      	movs	r0, #1
 80114ae:	f000 fa36 	bl	801191e <xQueueCreateMutex>
 80114b2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3708      	adds	r7, #8
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80114bc:	b590      	push	{r4, r7, lr}
 80114be:	b085      	sub	sp, #20
 80114c0:	af02      	add	r7, sp, #8
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	689b      	ldr	r3, [r3, #8]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d011      	beq.n	80114f2 <osMessageCreate+0x36>
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d00d      	beq.n	80114f2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6818      	ldr	r0, [r3, #0]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6859      	ldr	r1, [r3, #4]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	689a      	ldr	r2, [r3, #8]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	2400      	movs	r4, #0
 80114e8:	9400      	str	r4, [sp, #0]
 80114ea:	f000 f927 	bl	801173c <xQueueGenericCreateStatic>
 80114ee:	4603      	mov	r3, r0
 80114f0:	e008      	b.n	8011504 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6818      	ldr	r0, [r3, #0]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	2200      	movs	r2, #0
 80114fc:	4619      	mov	r1, r3
 80114fe:	f000 f995 	bl	801182c <xQueueGenericCreate>
 8011502:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011504:	4618      	mov	r0, r3
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	bd90      	pop	{r4, r7, pc}

0801150c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801150c:	b480      	push	{r7}
 801150e:	b083      	sub	sp, #12
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f103 0208 	add.w	r2, r3, #8
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f04f 32ff 	mov.w	r2, #4294967295
 8011524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f103 0208 	add.w	r2, r3, #8
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f103 0208 	add.w	r2, r3, #8
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2200      	movs	r2, #0
 801153e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011540:	bf00      	nop
 8011542:	370c      	adds	r7, #12
 8011544:	46bd      	mov	sp, r7
 8011546:	bc80      	pop	{r7}
 8011548:	4770      	bx	lr

0801154a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801154a:	b480      	push	{r7}
 801154c:	b083      	sub	sp, #12
 801154e:	af00      	add	r7, sp, #0
 8011550:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2200      	movs	r2, #0
 8011556:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011558:	bf00      	nop
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	bc80      	pop	{r7}
 8011560:	4770      	bx	lr

08011562 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011562:	b480      	push	{r7}
 8011564:	b085      	sub	sp, #20
 8011566:	af00      	add	r7, sp, #0
 8011568:	6078      	str	r0, [r7, #4]
 801156a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	68fa      	ldr	r2, [r7, #12]
 8011576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	689a      	ldr	r2, [r3, #8]
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	689b      	ldr	r3, [r3, #8]
 8011584:	683a      	ldr	r2, [r7, #0]
 8011586:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	683a      	ldr	r2, [r7, #0]
 801158c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	1c5a      	adds	r2, r3, #1
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	601a      	str	r2, [r3, #0]
}
 801159e:	bf00      	nop
 80115a0:	3714      	adds	r7, #20
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bc80      	pop	{r7}
 80115a6:	4770      	bx	lr

080115a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80115a8:	b480      	push	{r7}
 80115aa:	b085      	sub	sp, #20
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115be:	d103      	bne.n	80115c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	691b      	ldr	r3, [r3, #16]
 80115c4:	60fb      	str	r3, [r7, #12]
 80115c6:	e00c      	b.n	80115e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	3308      	adds	r3, #8
 80115cc:	60fb      	str	r3, [r7, #12]
 80115ce:	e002      	b.n	80115d6 <vListInsert+0x2e>
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	685b      	ldr	r3, [r3, #4]
 80115d4:	60fb      	str	r3, [r7, #12]
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	68ba      	ldr	r2, [r7, #8]
 80115de:	429a      	cmp	r2, r3
 80115e0:	d2f6      	bcs.n	80115d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	685a      	ldr	r2, [r3, #4]
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	683a      	ldr	r2, [r7, #0]
 80115f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	68fa      	ldr	r2, [r7, #12]
 80115f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	683a      	ldr	r2, [r7, #0]
 80115fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	687a      	ldr	r2, [r7, #4]
 8011602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	1c5a      	adds	r2, r3, #1
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	601a      	str	r2, [r3, #0]
}
 801160e:	bf00      	nop
 8011610:	3714      	adds	r7, #20
 8011612:	46bd      	mov	sp, r7
 8011614:	bc80      	pop	{r7}
 8011616:	4770      	bx	lr

08011618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011618:	b480      	push	{r7}
 801161a:	b085      	sub	sp, #20
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	691b      	ldr	r3, [r3, #16]
 8011624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	6892      	ldr	r2, [r2, #8]
 801162e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	689b      	ldr	r3, [r3, #8]
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	6852      	ldr	r2, [r2, #4]
 8011638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	687a      	ldr	r2, [r7, #4]
 8011640:	429a      	cmp	r2, r3
 8011642:	d103      	bne.n	801164c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	689a      	ldr	r2, [r3, #8]
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2200      	movs	r2, #0
 8011650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	1e5a      	subs	r2, r3, #1
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	681b      	ldr	r3, [r3, #0]
}
 8011660:	4618      	mov	r0, r3
 8011662:	3714      	adds	r7, #20
 8011664:	46bd      	mov	sp, r7
 8011666:	bc80      	pop	{r7}
 8011668:	4770      	bx	lr
	...

0801166c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d10a      	bne.n	8011696 <xQueueGenericReset+0x2a>
	__asm volatile
 8011680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011684:	f383 8811 	msr	BASEPRI, r3
 8011688:	f3bf 8f6f 	isb	sy
 801168c:	f3bf 8f4f 	dsb	sy
 8011690:	60bb      	str	r3, [r7, #8]
}
 8011692:	bf00      	nop
 8011694:	e7fe      	b.n	8011694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011696:	f002 f911 	bl	80138bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116a2:	68f9      	ldr	r1, [r7, #12]
 80116a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80116a6:	fb01 f303 	mul.w	r3, r1, r3
 80116aa:	441a      	add	r2, r3
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2200      	movs	r2, #0
 80116b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116c6:	3b01      	subs	r3, #1
 80116c8:	68f9      	ldr	r1, [r7, #12]
 80116ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80116cc:	fb01 f303 	mul.w	r3, r1, r3
 80116d0:	441a      	add	r2, r3
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	22ff      	movs	r2, #255	; 0xff
 80116da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	22ff      	movs	r2, #255	; 0xff
 80116e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d114      	bne.n	8011716 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	691b      	ldr	r3, [r3, #16]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d01a      	beq.n	801172a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	3310      	adds	r3, #16
 80116f8:	4618      	mov	r0, r3
 80116fa:	f001 f9f1 	bl	8012ae0 <xTaskRemoveFromEventList>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d012      	beq.n	801172a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011704:	4b0c      	ldr	r3, [pc, #48]	; (8011738 <xQueueGenericReset+0xcc>)
 8011706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801170a:	601a      	str	r2, [r3, #0]
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	f3bf 8f6f 	isb	sy
 8011714:	e009      	b.n	801172a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	3310      	adds	r3, #16
 801171a:	4618      	mov	r0, r3
 801171c:	f7ff fef6 	bl	801150c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	3324      	adds	r3, #36	; 0x24
 8011724:	4618      	mov	r0, r3
 8011726:	f7ff fef1 	bl	801150c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801172a:	f002 f8f7 	bl	801391c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801172e:	2301      	movs	r3, #1
}
 8011730:	4618      	mov	r0, r3
 8011732:	3710      	adds	r7, #16
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	e000ed04 	.word	0xe000ed04

0801173c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801173c:	b580      	push	{r7, lr}
 801173e:	b08e      	sub	sp, #56	; 0x38
 8011740:	af02      	add	r7, sp, #8
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	607a      	str	r2, [r7, #4]
 8011748:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d10a      	bne.n	8011766 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011754:	f383 8811 	msr	BASEPRI, r3
 8011758:	f3bf 8f6f 	isb	sy
 801175c:	f3bf 8f4f 	dsb	sy
 8011760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011762:	bf00      	nop
 8011764:	e7fe      	b.n	8011764 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d10a      	bne.n	8011782 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801176c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011770:	f383 8811 	msr	BASEPRI, r3
 8011774:	f3bf 8f6f 	isb	sy
 8011778:	f3bf 8f4f 	dsb	sy
 801177c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801177e:	bf00      	nop
 8011780:	e7fe      	b.n	8011780 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d002      	beq.n	801178e <xQueueGenericCreateStatic+0x52>
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d001      	beq.n	8011792 <xQueueGenericCreateStatic+0x56>
 801178e:	2301      	movs	r3, #1
 8011790:	e000      	b.n	8011794 <xQueueGenericCreateStatic+0x58>
 8011792:	2300      	movs	r3, #0
 8011794:	2b00      	cmp	r3, #0
 8011796:	d10a      	bne.n	80117ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179c:	f383 8811 	msr	BASEPRI, r3
 80117a0:	f3bf 8f6f 	isb	sy
 80117a4:	f3bf 8f4f 	dsb	sy
 80117a8:	623b      	str	r3, [r7, #32]
}
 80117aa:	bf00      	nop
 80117ac:	e7fe      	b.n	80117ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d102      	bne.n	80117ba <xQueueGenericCreateStatic+0x7e>
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d101      	bne.n	80117be <xQueueGenericCreateStatic+0x82>
 80117ba:	2301      	movs	r3, #1
 80117bc:	e000      	b.n	80117c0 <xQueueGenericCreateStatic+0x84>
 80117be:	2300      	movs	r3, #0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d10a      	bne.n	80117da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80117c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c8:	f383 8811 	msr	BASEPRI, r3
 80117cc:	f3bf 8f6f 	isb	sy
 80117d0:	f3bf 8f4f 	dsb	sy
 80117d4:	61fb      	str	r3, [r7, #28]
}
 80117d6:	bf00      	nop
 80117d8:	e7fe      	b.n	80117d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80117da:	2348      	movs	r3, #72	; 0x48
 80117dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2b48      	cmp	r3, #72	; 0x48
 80117e2:	d00a      	beq.n	80117fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80117e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e8:	f383 8811 	msr	BASEPRI, r3
 80117ec:	f3bf 8f6f 	isb	sy
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	61bb      	str	r3, [r7, #24]
}
 80117f6:	bf00      	nop
 80117f8:	e7fe      	b.n	80117f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80117fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011802:	2b00      	cmp	r3, #0
 8011804:	d00d      	beq.n	8011822 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011808:	2201      	movs	r2, #1
 801180a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801180e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	4613      	mov	r3, r2
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	68b9      	ldr	r1, [r7, #8]
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f000 f845 	bl	80118ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011824:	4618      	mov	r0, r3
 8011826:	3730      	adds	r7, #48	; 0x30
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801182c:	b580      	push	{r7, lr}
 801182e:	b08a      	sub	sp, #40	; 0x28
 8011830:	af02      	add	r7, sp, #8
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	60b9      	str	r1, [r7, #8]
 8011836:	4613      	mov	r3, r2
 8011838:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d10a      	bne.n	8011856 <xQueueGenericCreate+0x2a>
	__asm volatile
 8011840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011844:	f383 8811 	msr	BASEPRI, r3
 8011848:	f3bf 8f6f 	isb	sy
 801184c:	f3bf 8f4f 	dsb	sy
 8011850:	613b      	str	r3, [r7, #16]
}
 8011852:	bf00      	nop
 8011854:	e7fe      	b.n	8011854 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d102      	bne.n	8011862 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801185c:	2300      	movs	r3, #0
 801185e:	61fb      	str	r3, [r7, #28]
 8011860:	e004      	b.n	801186c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	68ba      	ldr	r2, [r7, #8]
 8011866:	fb02 f303 	mul.w	r3, r2, r3
 801186a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	3348      	adds	r3, #72	; 0x48
 8011870:	4618      	mov	r0, r3
 8011872:	f002 f923 	bl	8013abc <pvPortMalloc>
 8011876:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011878:	69bb      	ldr	r3, [r7, #24]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d011      	beq.n	80118a2 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801187e:	69bb      	ldr	r3, [r7, #24]
 8011880:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	3348      	adds	r3, #72	; 0x48
 8011886:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	2200      	movs	r2, #0
 801188c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011890:	79fa      	ldrb	r2, [r7, #7]
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	9300      	str	r3, [sp, #0]
 8011896:	4613      	mov	r3, r2
 8011898:	697a      	ldr	r2, [r7, #20]
 801189a:	68b9      	ldr	r1, [r7, #8]
 801189c:	68f8      	ldr	r0, [r7, #12]
 801189e:	f000 f805 	bl	80118ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80118a2:	69bb      	ldr	r3, [r7, #24]
	}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3720      	adds	r7, #32
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
 80118b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d103      	bne.n	80118c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80118c0:	69bb      	ldr	r3, [r7, #24]
 80118c2:	69ba      	ldr	r2, [r7, #24]
 80118c4:	601a      	str	r2, [r3, #0]
 80118c6:	e002      	b.n	80118ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80118ce:	69bb      	ldr	r3, [r7, #24]
 80118d0:	68fa      	ldr	r2, [r7, #12]
 80118d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80118d4:	69bb      	ldr	r3, [r7, #24]
 80118d6:	68ba      	ldr	r2, [r7, #8]
 80118d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80118da:	2101      	movs	r1, #1
 80118dc:	69b8      	ldr	r0, [r7, #24]
 80118de:	f7ff fec5 	bl	801166c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80118e2:	bf00      	nop
 80118e4:	3710      	adds	r7, #16
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}

080118ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80118ea:	b580      	push	{r7, lr}
 80118ec:	b082      	sub	sp, #8
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d00e      	beq.n	8011916 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2200      	movs	r2, #0
 80118fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2200      	movs	r2, #0
 8011902:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2200      	movs	r2, #0
 8011908:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801190a:	2300      	movs	r3, #0
 801190c:	2200      	movs	r2, #0
 801190e:	2100      	movs	r1, #0
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f000 f837 	bl	8011984 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011916:	bf00      	nop
 8011918:	3708      	adds	r7, #8
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}

0801191e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801191e:	b580      	push	{r7, lr}
 8011920:	b086      	sub	sp, #24
 8011922:	af00      	add	r7, sp, #0
 8011924:	4603      	mov	r3, r0
 8011926:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011928:	2301      	movs	r3, #1
 801192a:	617b      	str	r3, [r7, #20]
 801192c:	2300      	movs	r3, #0
 801192e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011930:	79fb      	ldrb	r3, [r7, #7]
 8011932:	461a      	mov	r2, r3
 8011934:	6939      	ldr	r1, [r7, #16]
 8011936:	6978      	ldr	r0, [r7, #20]
 8011938:	f7ff ff78 	bl	801182c <xQueueGenericCreate>
 801193c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f7ff ffd3 	bl	80118ea <prvInitialiseMutex>

		return xNewQueue;
 8011944:	68fb      	ldr	r3, [r7, #12]
	}
 8011946:	4618      	mov	r0, r3
 8011948:	3718      	adds	r7, #24
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}

0801194e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801194e:	b580      	push	{r7, lr}
 8011950:	b088      	sub	sp, #32
 8011952:	af02      	add	r7, sp, #8
 8011954:	4603      	mov	r3, r0
 8011956:	6039      	str	r1, [r7, #0]
 8011958:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801195a:	2301      	movs	r3, #1
 801195c:	617b      	str	r3, [r7, #20]
 801195e:	2300      	movs	r3, #0
 8011960:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011962:	79fb      	ldrb	r3, [r7, #7]
 8011964:	9300      	str	r3, [sp, #0]
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	2200      	movs	r2, #0
 801196a:	6939      	ldr	r1, [r7, #16]
 801196c:	6978      	ldr	r0, [r7, #20]
 801196e:	f7ff fee5 	bl	801173c <xQueueGenericCreateStatic>
 8011972:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011974:	68f8      	ldr	r0, [r7, #12]
 8011976:	f7ff ffb8 	bl	80118ea <prvInitialiseMutex>

		return xNewQueue;
 801197a:	68fb      	ldr	r3, [r7, #12]
	}
 801197c:	4618      	mov	r0, r3
 801197e:	3718      	adds	r7, #24
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b08e      	sub	sp, #56	; 0x38
 8011988:	af00      	add	r7, sp, #0
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	60b9      	str	r1, [r7, #8]
 801198e:	607a      	str	r2, [r7, #4]
 8011990:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011992:	2300      	movs	r3, #0
 8011994:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199c:	2b00      	cmp	r3, #0
 801199e:	d10a      	bne.n	80119b6 <xQueueGenericSend+0x32>
	__asm volatile
 80119a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a4:	f383 8811 	msr	BASEPRI, r3
 80119a8:	f3bf 8f6f 	isb	sy
 80119ac:	f3bf 8f4f 	dsb	sy
 80119b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80119b2:	bf00      	nop
 80119b4:	e7fe      	b.n	80119b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d103      	bne.n	80119c4 <xQueueGenericSend+0x40>
 80119bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d101      	bne.n	80119c8 <xQueueGenericSend+0x44>
 80119c4:	2301      	movs	r3, #1
 80119c6:	e000      	b.n	80119ca <xQueueGenericSend+0x46>
 80119c8:	2300      	movs	r3, #0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d10a      	bne.n	80119e4 <xQueueGenericSend+0x60>
	__asm volatile
 80119ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d2:	f383 8811 	msr	BASEPRI, r3
 80119d6:	f3bf 8f6f 	isb	sy
 80119da:	f3bf 8f4f 	dsb	sy
 80119de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80119e0:	bf00      	nop
 80119e2:	e7fe      	b.n	80119e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	2b02      	cmp	r3, #2
 80119e8:	d103      	bne.n	80119f2 <xQueueGenericSend+0x6e>
 80119ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119ee:	2b01      	cmp	r3, #1
 80119f0:	d101      	bne.n	80119f6 <xQueueGenericSend+0x72>
 80119f2:	2301      	movs	r3, #1
 80119f4:	e000      	b.n	80119f8 <xQueueGenericSend+0x74>
 80119f6:	2300      	movs	r3, #0
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d10a      	bne.n	8011a12 <xQueueGenericSend+0x8e>
	__asm volatile
 80119fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a00:	f383 8811 	msr	BASEPRI, r3
 8011a04:	f3bf 8f6f 	isb	sy
 8011a08:	f3bf 8f4f 	dsb	sy
 8011a0c:	623b      	str	r3, [r7, #32]
}
 8011a0e:	bf00      	nop
 8011a10:	e7fe      	b.n	8011a10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a12:	f001 fa27 	bl	8012e64 <xTaskGetSchedulerState>
 8011a16:	4603      	mov	r3, r0
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d102      	bne.n	8011a22 <xQueueGenericSend+0x9e>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d101      	bne.n	8011a26 <xQueueGenericSend+0xa2>
 8011a22:	2301      	movs	r3, #1
 8011a24:	e000      	b.n	8011a28 <xQueueGenericSend+0xa4>
 8011a26:	2300      	movs	r3, #0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d10a      	bne.n	8011a42 <xQueueGenericSend+0xbe>
	__asm volatile
 8011a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a30:	f383 8811 	msr	BASEPRI, r3
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	f3bf 8f4f 	dsb	sy
 8011a3c:	61fb      	str	r3, [r7, #28]
}
 8011a3e:	bf00      	nop
 8011a40:	e7fe      	b.n	8011a40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011a42:	f001 ff3b 	bl	80138bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a4e:	429a      	cmp	r2, r3
 8011a50:	d302      	bcc.n	8011a58 <xQueueGenericSend+0xd4>
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	2b02      	cmp	r3, #2
 8011a56:	d129      	bne.n	8011aac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011a58:	683a      	ldr	r2, [r7, #0]
 8011a5a:	68b9      	ldr	r1, [r7, #8]
 8011a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a5e:	f000 fa07 	bl	8011e70 <prvCopyDataToQueue>
 8011a62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d010      	beq.n	8011a8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6e:	3324      	adds	r3, #36	; 0x24
 8011a70:	4618      	mov	r0, r3
 8011a72:	f001 f835 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011a76:	4603      	mov	r3, r0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d013      	beq.n	8011aa4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011a7c:	4b3f      	ldr	r3, [pc, #252]	; (8011b7c <xQueueGenericSend+0x1f8>)
 8011a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a82:	601a      	str	r2, [r3, #0]
 8011a84:	f3bf 8f4f 	dsb	sy
 8011a88:	f3bf 8f6f 	isb	sy
 8011a8c:	e00a      	b.n	8011aa4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d007      	beq.n	8011aa4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011a94:	4b39      	ldr	r3, [pc, #228]	; (8011b7c <xQueueGenericSend+0x1f8>)
 8011a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a9a:	601a      	str	r2, [r3, #0]
 8011a9c:	f3bf 8f4f 	dsb	sy
 8011aa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011aa4:	f001 ff3a 	bl	801391c <vPortExitCritical>
				return pdPASS;
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	e063      	b.n	8011b74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d103      	bne.n	8011aba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011ab2:	f001 ff33 	bl	801391c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	e05c      	b.n	8011b74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d106      	bne.n	8011ace <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ac0:	f107 0314 	add.w	r3, r7, #20
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f001 f86d 	bl	8012ba4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011aca:	2301      	movs	r3, #1
 8011acc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011ace:	f001 ff25 	bl	801391c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ad2:	f000 fdbd 	bl	8012650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011ad6:	f001 fef1 	bl	80138bc <vPortEnterCritical>
 8011ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ae0:	b25b      	sxtb	r3, r3
 8011ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ae6:	d103      	bne.n	8011af0 <xQueueGenericSend+0x16c>
 8011ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aea:	2200      	movs	r2, #0
 8011aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011af6:	b25b      	sxtb	r3, r3
 8011af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011afc:	d103      	bne.n	8011b06 <xQueueGenericSend+0x182>
 8011afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b00:	2200      	movs	r2, #0
 8011b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b06:	f001 ff09 	bl	801391c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b0a:	1d3a      	adds	r2, r7, #4
 8011b0c:	f107 0314 	add.w	r3, r7, #20
 8011b10:	4611      	mov	r1, r2
 8011b12:	4618      	mov	r0, r3
 8011b14:	f001 f85c 	bl	8012bd0 <xTaskCheckForTimeOut>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d124      	bne.n	8011b68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011b1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b20:	f000 fa9e 	bl	8012060 <prvIsQueueFull>
 8011b24:	4603      	mov	r3, r0
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d018      	beq.n	8011b5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b2c:	3310      	adds	r3, #16
 8011b2e:	687a      	ldr	r2, [r7, #4]
 8011b30:	4611      	mov	r1, r2
 8011b32:	4618      	mov	r0, r3
 8011b34:	f000 ff84 	bl	8012a40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011b38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b3a:	f000 fa29 	bl	8011f90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011b3e:	f000 fd95 	bl	801266c <xTaskResumeAll>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	f47f af7c 	bne.w	8011a42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011b4a:	4b0c      	ldr	r3, [pc, #48]	; (8011b7c <xQueueGenericSend+0x1f8>)
 8011b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b50:	601a      	str	r2, [r3, #0]
 8011b52:	f3bf 8f4f 	dsb	sy
 8011b56:	f3bf 8f6f 	isb	sy
 8011b5a:	e772      	b.n	8011a42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b5e:	f000 fa17 	bl	8011f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011b62:	f000 fd83 	bl	801266c <xTaskResumeAll>
 8011b66:	e76c      	b.n	8011a42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b6a:	f000 fa11 	bl	8011f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b6e:	f000 fd7d 	bl	801266c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011b72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	3738      	adds	r7, #56	; 0x38
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	e000ed04 	.word	0xe000ed04

08011b80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b08e      	sub	sp, #56	; 0x38
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	60f8      	str	r0, [r7, #12]
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	607a      	str	r2, [r7, #4]
 8011b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d10a      	bne.n	8011bae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9c:	f383 8811 	msr	BASEPRI, r3
 8011ba0:	f3bf 8f6f 	isb	sy
 8011ba4:	f3bf 8f4f 	dsb	sy
 8011ba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011baa:	bf00      	nop
 8011bac:	e7fe      	b.n	8011bac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d103      	bne.n	8011bbc <xQueueGenericSendFromISR+0x3c>
 8011bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <xQueueGenericSendFromISR+0x40>
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	e000      	b.n	8011bc2 <xQueueGenericSendFromISR+0x42>
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d10a      	bne.n	8011bdc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bca:	f383 8811 	msr	BASEPRI, r3
 8011bce:	f3bf 8f6f 	isb	sy
 8011bd2:	f3bf 8f4f 	dsb	sy
 8011bd6:	623b      	str	r3, [r7, #32]
}
 8011bd8:	bf00      	nop
 8011bda:	e7fe      	b.n	8011bda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	2b02      	cmp	r3, #2
 8011be0:	d103      	bne.n	8011bea <xQueueGenericSendFromISR+0x6a>
 8011be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d101      	bne.n	8011bee <xQueueGenericSendFromISR+0x6e>
 8011bea:	2301      	movs	r3, #1
 8011bec:	e000      	b.n	8011bf0 <xQueueGenericSendFromISR+0x70>
 8011bee:	2300      	movs	r3, #0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d10a      	bne.n	8011c0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf8:	f383 8811 	msr	BASEPRI, r3
 8011bfc:	f3bf 8f6f 	isb	sy
 8011c00:	f3bf 8f4f 	dsb	sy
 8011c04:	61fb      	str	r3, [r7, #28]
}
 8011c06:	bf00      	nop
 8011c08:	e7fe      	b.n	8011c08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c0a:	f001 ff19 	bl	8013a40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011c0e:	f3ef 8211 	mrs	r2, BASEPRI
 8011c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c16:	f383 8811 	msr	BASEPRI, r3
 8011c1a:	f3bf 8f6f 	isb	sy
 8011c1e:	f3bf 8f4f 	dsb	sy
 8011c22:	61ba      	str	r2, [r7, #24]
 8011c24:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011c26:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011c28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d302      	bcc.n	8011c3c <xQueueGenericSendFromISR+0xbc>
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	2b02      	cmp	r3, #2
 8011c3a:	d12c      	bne.n	8011c96 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011c46:	683a      	ldr	r2, [r7, #0]
 8011c48:	68b9      	ldr	r1, [r7, #8]
 8011c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c4c:	f000 f910 	bl	8011e70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011c50:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c58:	d112      	bne.n	8011c80 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d016      	beq.n	8011c90 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c64:	3324      	adds	r3, #36	; 0x24
 8011c66:	4618      	mov	r0, r3
 8011c68:	f000 ff3a 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00e      	beq.n	8011c90 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d00b      	beq.n	8011c90 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	601a      	str	r2, [r3, #0]
 8011c7e:	e007      	b.n	8011c90 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011c80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011c84:	3301      	adds	r3, #1
 8011c86:	b2db      	uxtb	r3, r3
 8011c88:	b25a      	sxtb	r2, r3
 8011c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011c90:	2301      	movs	r3, #1
 8011c92:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011c94:	e001      	b.n	8011c9a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011c96:	2300      	movs	r3, #0
 8011c98:	637b      	str	r3, [r7, #52]	; 0x34
 8011c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011ca4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3738      	adds	r7, #56	; 0x38
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b08c      	sub	sp, #48	; 0x30
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	60f8      	str	r0, [r7, #12]
 8011cb8:	60b9      	str	r1, [r7, #8]
 8011cba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d10a      	bne.n	8011ce0 <xQueueReceive+0x30>
	__asm volatile
 8011cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cce:	f383 8811 	msr	BASEPRI, r3
 8011cd2:	f3bf 8f6f 	isb	sy
 8011cd6:	f3bf 8f4f 	dsb	sy
 8011cda:	623b      	str	r3, [r7, #32]
}
 8011cdc:	bf00      	nop
 8011cde:	e7fe      	b.n	8011cde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d103      	bne.n	8011cee <xQueueReceive+0x3e>
 8011ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d101      	bne.n	8011cf2 <xQueueReceive+0x42>
 8011cee:	2301      	movs	r3, #1
 8011cf0:	e000      	b.n	8011cf4 <xQueueReceive+0x44>
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d10a      	bne.n	8011d0e <xQueueReceive+0x5e>
	__asm volatile
 8011cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cfc:	f383 8811 	msr	BASEPRI, r3
 8011d00:	f3bf 8f6f 	isb	sy
 8011d04:	f3bf 8f4f 	dsb	sy
 8011d08:	61fb      	str	r3, [r7, #28]
}
 8011d0a:	bf00      	nop
 8011d0c:	e7fe      	b.n	8011d0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d0e:	f001 f8a9 	bl	8012e64 <xTaskGetSchedulerState>
 8011d12:	4603      	mov	r3, r0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d102      	bne.n	8011d1e <xQueueReceive+0x6e>
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d101      	bne.n	8011d22 <xQueueReceive+0x72>
 8011d1e:	2301      	movs	r3, #1
 8011d20:	e000      	b.n	8011d24 <xQueueReceive+0x74>
 8011d22:	2300      	movs	r3, #0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d10a      	bne.n	8011d3e <xQueueReceive+0x8e>
	__asm volatile
 8011d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2c:	f383 8811 	msr	BASEPRI, r3
 8011d30:	f3bf 8f6f 	isb	sy
 8011d34:	f3bf 8f4f 	dsb	sy
 8011d38:	61bb      	str	r3, [r7, #24]
}
 8011d3a:	bf00      	nop
 8011d3c:	e7fe      	b.n	8011d3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011d3e:	f001 fdbd 	bl	80138bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d01f      	beq.n	8011d8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011d4e:	68b9      	ldr	r1, [r7, #8]
 8011d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d52:	f000 f8f7 	bl	8011f44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d58:	1e5a      	subs	r2, r3, #1
 8011d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d60:	691b      	ldr	r3, [r3, #16]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d00f      	beq.n	8011d86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d68:	3310      	adds	r3, #16
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f000 feb8 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011d70:	4603      	mov	r3, r0
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d007      	beq.n	8011d86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011d76:	4b3d      	ldr	r3, [pc, #244]	; (8011e6c <xQueueReceive+0x1bc>)
 8011d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d7c:	601a      	str	r2, [r3, #0]
 8011d7e:	f3bf 8f4f 	dsb	sy
 8011d82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011d86:	f001 fdc9 	bl	801391c <vPortExitCritical>
				return pdPASS;
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	e069      	b.n	8011e62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d103      	bne.n	8011d9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011d94:	f001 fdc2 	bl	801391c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	e062      	b.n	8011e62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d106      	bne.n	8011db0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011da2:	f107 0310 	add.w	r3, r7, #16
 8011da6:	4618      	mov	r0, r3
 8011da8:	f000 fefc 	bl	8012ba4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011dac:	2301      	movs	r3, #1
 8011dae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011db0:	f001 fdb4 	bl	801391c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011db4:	f000 fc4c 	bl	8012650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011db8:	f001 fd80 	bl	80138bc <vPortEnterCritical>
 8011dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011dc2:	b25b      	sxtb	r3, r3
 8011dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dc8:	d103      	bne.n	8011dd2 <xQueueReceive+0x122>
 8011dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dcc:	2200      	movs	r2, #0
 8011dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011dd8:	b25b      	sxtb	r3, r3
 8011dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dde:	d103      	bne.n	8011de8 <xQueueReceive+0x138>
 8011de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de2:	2200      	movs	r2, #0
 8011de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011de8:	f001 fd98 	bl	801391c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011dec:	1d3a      	adds	r2, r7, #4
 8011dee:	f107 0310 	add.w	r3, r7, #16
 8011df2:	4611      	mov	r1, r2
 8011df4:	4618      	mov	r0, r3
 8011df6:	f000 feeb 	bl	8012bd0 <xTaskCheckForTimeOut>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d123      	bne.n	8011e48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e02:	f000 f917 	bl	8012034 <prvIsQueueEmpty>
 8011e06:	4603      	mov	r3, r0
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d017      	beq.n	8011e3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0e:	3324      	adds	r3, #36	; 0x24
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	4611      	mov	r1, r2
 8011e14:	4618      	mov	r0, r3
 8011e16:	f000 fe13 	bl	8012a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e1c:	f000 f8b8 	bl	8011f90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011e20:	f000 fc24 	bl	801266c <xTaskResumeAll>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d189      	bne.n	8011d3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011e2a:	4b10      	ldr	r3, [pc, #64]	; (8011e6c <xQueueReceive+0x1bc>)
 8011e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e30:	601a      	str	r2, [r3, #0]
 8011e32:	f3bf 8f4f 	dsb	sy
 8011e36:	f3bf 8f6f 	isb	sy
 8011e3a:	e780      	b.n	8011d3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e3e:	f000 f8a7 	bl	8011f90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011e42:	f000 fc13 	bl	801266c <xTaskResumeAll>
 8011e46:	e77a      	b.n	8011d3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e4a:	f000 f8a1 	bl	8011f90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e4e:	f000 fc0d 	bl	801266c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e54:	f000 f8ee 	bl	8012034 <prvIsQueueEmpty>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	f43f af6f 	beq.w	8011d3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3730      	adds	r7, #48	; 0x30
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	e000ed04 	.word	0xe000ed04

08011e70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b086      	sub	sp, #24
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d10d      	bne.n	8011eaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d14d      	bne.n	8011f32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	689b      	ldr	r3, [r3, #8]
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f001 f800 	bl	8012ea0 <xTaskPriorityDisinherit>
 8011ea0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	609a      	str	r2, [r3, #8]
 8011ea8:	e043      	b.n	8011f32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d119      	bne.n	8011ee4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	6858      	ldr	r0, [r3, #4]
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eb8:	461a      	mov	r2, r3
 8011eba:	68b9      	ldr	r1, [r7, #8]
 8011ebc:	f002 fc36 	bl	801472c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	685a      	ldr	r2, [r3, #4]
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ec8:	441a      	add	r2, r3
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	685a      	ldr	r2, [r3, #4]
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d32b      	bcc.n	8011f32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	605a      	str	r2, [r3, #4]
 8011ee2:	e026      	b.n	8011f32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	68d8      	ldr	r0, [r3, #12]
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eec:	461a      	mov	r2, r3
 8011eee:	68b9      	ldr	r1, [r7, #8]
 8011ef0:	f002 fc1c 	bl	801472c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	68da      	ldr	r2, [r3, #12]
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011efc:	425b      	negs	r3, r3
 8011efe:	441a      	add	r2, r3
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	68da      	ldr	r2, [r3, #12]
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d207      	bcs.n	8011f20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	689a      	ldr	r2, [r3, #8]
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f18:	425b      	negs	r3, r3
 8011f1a:	441a      	add	r2, r3
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2b02      	cmp	r3, #2
 8011f24:	d105      	bne.n	8011f32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d002      	beq.n	8011f32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	3b01      	subs	r3, #1
 8011f30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	1c5a      	adds	r2, r3, #1
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011f3a:	697b      	ldr	r3, [r7, #20]
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3718      	adds	r7, #24
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}

08011f44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
 8011f4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d018      	beq.n	8011f88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	68da      	ldr	r2, [r3, #12]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f5e:	441a      	add	r2, r3
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	68da      	ldr	r2, [r3, #12]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d303      	bcc.n	8011f78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	68d9      	ldr	r1, [r3, #12]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f80:	461a      	mov	r2, r3
 8011f82:	6838      	ldr	r0, [r7, #0]
 8011f84:	f002 fbd2 	bl	801472c <memcpy>
	}
}
 8011f88:	bf00      	nop
 8011f8a:	3708      	adds	r7, #8
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011f98:	f001 fc90 	bl	80138bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011fa4:	e011      	b.n	8011fca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d012      	beq.n	8011fd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	3324      	adds	r3, #36	; 0x24
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f000 fd94 	bl	8012ae0 <xTaskRemoveFromEventList>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d001      	beq.n	8011fc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011fbe:	f000 fe69 	bl	8012c94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011fc2:	7bfb      	ldrb	r3, [r7, #15]
 8011fc4:	3b01      	subs	r3, #1
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	dce9      	bgt.n	8011fa6 <prvUnlockQueue+0x16>
 8011fd2:	e000      	b.n	8011fd6 <prvUnlockQueue+0x46>
					break;
 8011fd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	22ff      	movs	r2, #255	; 0xff
 8011fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011fde:	f001 fc9d 	bl	801391c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011fe2:	f001 fc6b 	bl	80138bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011fee:	e011      	b.n	8012014 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	691b      	ldr	r3, [r3, #16]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d012      	beq.n	801201e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	3310      	adds	r3, #16
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f000 fd6f 	bl	8012ae0 <xTaskRemoveFromEventList>
 8012002:	4603      	mov	r3, r0
 8012004:	2b00      	cmp	r3, #0
 8012006:	d001      	beq.n	801200c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012008:	f000 fe44 	bl	8012c94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801200c:	7bbb      	ldrb	r3, [r7, #14]
 801200e:	3b01      	subs	r3, #1
 8012010:	b2db      	uxtb	r3, r3
 8012012:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012018:	2b00      	cmp	r3, #0
 801201a:	dce9      	bgt.n	8011ff0 <prvUnlockQueue+0x60>
 801201c:	e000      	b.n	8012020 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801201e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	22ff      	movs	r2, #255	; 0xff
 8012024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012028:	f001 fc78 	bl	801391c <vPortExitCritical>
}
 801202c:	bf00      	nop
 801202e:	3710      	adds	r7, #16
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}

08012034 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b084      	sub	sp, #16
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801203c:	f001 fc3e 	bl	80138bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012044:	2b00      	cmp	r3, #0
 8012046:	d102      	bne.n	801204e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012048:	2301      	movs	r3, #1
 801204a:	60fb      	str	r3, [r7, #12]
 801204c:	e001      	b.n	8012052 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801204e:	2300      	movs	r3, #0
 8012050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012052:	f001 fc63 	bl	801391c <vPortExitCritical>

	return xReturn;
 8012056:	68fb      	ldr	r3, [r7, #12]
}
 8012058:	4618      	mov	r0, r3
 801205a:	3710      	adds	r7, #16
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b084      	sub	sp, #16
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012068:	f001 fc28 	bl	80138bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012074:	429a      	cmp	r2, r3
 8012076:	d102      	bne.n	801207e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012078:	2301      	movs	r3, #1
 801207a:	60fb      	str	r3, [r7, #12]
 801207c:	e001      	b.n	8012082 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801207e:	2300      	movs	r3, #0
 8012080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012082:	f001 fc4b 	bl	801391c <vPortExitCritical>

	return xReturn;
 8012086:	68fb      	ldr	r3, [r7, #12]
}
 8012088:	4618      	mov	r0, r3
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012090:	b480      	push	{r7}
 8012092:	b085      	sub	sp, #20
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801209a:	2300      	movs	r3, #0
 801209c:	60fb      	str	r3, [r7, #12]
 801209e:	e014      	b.n	80120ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80120a0:	4a0e      	ldr	r2, [pc, #56]	; (80120dc <vQueueAddToRegistry+0x4c>)
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10b      	bne.n	80120c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80120ac:	490b      	ldr	r1, [pc, #44]	; (80120dc <vQueueAddToRegistry+0x4c>)
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	683a      	ldr	r2, [r7, #0]
 80120b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80120b6:	4a09      	ldr	r2, [pc, #36]	; (80120dc <vQueueAddToRegistry+0x4c>)
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	00db      	lsls	r3, r3, #3
 80120bc:	4413      	add	r3, r2
 80120be:	687a      	ldr	r2, [r7, #4]
 80120c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80120c2:	e006      	b.n	80120d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	3301      	adds	r3, #1
 80120c8:	60fb      	str	r3, [r7, #12]
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	2b07      	cmp	r3, #7
 80120ce:	d9e7      	bls.n	80120a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80120d0:	bf00      	nop
 80120d2:	bf00      	nop
 80120d4:	3714      	adds	r7, #20
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bc80      	pop	{r7}
 80120da:	4770      	bx	lr
 80120dc:	200015b0 	.word	0x200015b0

080120e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b086      	sub	sp, #24
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	60b9      	str	r1, [r7, #8]
 80120ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80120f0:	f001 fbe4 	bl	80138bc <vPortEnterCritical>
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80120fa:	b25b      	sxtb	r3, r3
 80120fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012100:	d103      	bne.n	801210a <vQueueWaitForMessageRestricted+0x2a>
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	2200      	movs	r2, #0
 8012106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012110:	b25b      	sxtb	r3, r3
 8012112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012116:	d103      	bne.n	8012120 <vQueueWaitForMessageRestricted+0x40>
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	2200      	movs	r2, #0
 801211c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012120:	f001 fbfc 	bl	801391c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012128:	2b00      	cmp	r3, #0
 801212a:	d106      	bne.n	801213a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	3324      	adds	r3, #36	; 0x24
 8012130:	687a      	ldr	r2, [r7, #4]
 8012132:	68b9      	ldr	r1, [r7, #8]
 8012134:	4618      	mov	r0, r3
 8012136:	f000 fca7 	bl	8012a88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801213a:	6978      	ldr	r0, [r7, #20]
 801213c:	f7ff ff28 	bl	8011f90 <prvUnlockQueue>
	}
 8012140:	bf00      	nop
 8012142:	3718      	adds	r7, #24
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012148:	b580      	push	{r7, lr}
 801214a:	b08e      	sub	sp, #56	; 0x38
 801214c:	af04      	add	r7, sp, #16
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
 8012154:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012158:	2b00      	cmp	r3, #0
 801215a:	d10a      	bne.n	8012172 <xTaskCreateStatic+0x2a>
	__asm volatile
 801215c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012160:	f383 8811 	msr	BASEPRI, r3
 8012164:	f3bf 8f6f 	isb	sy
 8012168:	f3bf 8f4f 	dsb	sy
 801216c:	623b      	str	r3, [r7, #32]
}
 801216e:	bf00      	nop
 8012170:	e7fe      	b.n	8012170 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012174:	2b00      	cmp	r3, #0
 8012176:	d10a      	bne.n	801218e <xTaskCreateStatic+0x46>
	__asm volatile
 8012178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801217c:	f383 8811 	msr	BASEPRI, r3
 8012180:	f3bf 8f6f 	isb	sy
 8012184:	f3bf 8f4f 	dsb	sy
 8012188:	61fb      	str	r3, [r7, #28]
}
 801218a:	bf00      	nop
 801218c:	e7fe      	b.n	801218c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801218e:	f44f 73bc 	mov.w	r3, #376	; 0x178
 8012192:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 801219a:	d00a      	beq.n	80121b2 <xTaskCreateStatic+0x6a>
	__asm volatile
 801219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a0:	f383 8811 	msr	BASEPRI, r3
 80121a4:	f3bf 8f6f 	isb	sy
 80121a8:	f3bf 8f4f 	dsb	sy
 80121ac:	61bb      	str	r3, [r7, #24]
}
 80121ae:	bf00      	nop
 80121b0:	e7fe      	b.n	80121b0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80121b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80121b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d01e      	beq.n	80121f8 <xTaskCreateStatic+0xb0>
 80121ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d01b      	beq.n	80121f8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80121c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80121c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80121ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121cc:	2202      	movs	r2, #2
 80121ce:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80121d2:	2300      	movs	r3, #0
 80121d4:	9303      	str	r3, [sp, #12]
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d8:	9302      	str	r3, [sp, #8]
 80121da:	f107 0314 	add.w	r3, r7, #20
 80121de:	9301      	str	r3, [sp, #4]
 80121e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	68b9      	ldr	r1, [r7, #8]
 80121ea:	68f8      	ldr	r0, [r7, #12]
 80121ec:	f000 f852 	bl	8012294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80121f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121f2:	f000 f91f 	bl	8012434 <prvAddNewTaskToReadyList>
 80121f6:	e001      	b.n	80121fc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80121f8:	2300      	movs	r3, #0
 80121fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80121fc:	697b      	ldr	r3, [r7, #20]
	}
 80121fe:	4618      	mov	r0, r3
 8012200:	3728      	adds	r7, #40	; 0x28
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}

08012206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012206:	b580      	push	{r7, lr}
 8012208:	b08c      	sub	sp, #48	; 0x30
 801220a:	af04      	add	r7, sp, #16
 801220c:	60f8      	str	r0, [r7, #12]
 801220e:	60b9      	str	r1, [r7, #8]
 8012210:	603b      	str	r3, [r7, #0]
 8012212:	4613      	mov	r3, r2
 8012214:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012216:	88fb      	ldrh	r3, [r7, #6]
 8012218:	009b      	lsls	r3, r3, #2
 801221a:	4618      	mov	r0, r3
 801221c:	f001 fc4e 	bl	8013abc <pvPortMalloc>
 8012220:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d00f      	beq.n	8012248 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012228:	f44f 70bc 	mov.w	r0, #376	; 0x178
 801222c:	f001 fc46 	bl	8013abc <pvPortMalloc>
 8012230:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012232:	69fb      	ldr	r3, [r7, #28]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d003      	beq.n	8012240 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	697a      	ldr	r2, [r7, #20]
 801223c:	631a      	str	r2, [r3, #48]	; 0x30
 801223e:	e005      	b.n	801224c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012240:	6978      	ldr	r0, [r7, #20]
 8012242:	f001 fd05 	bl	8013c50 <vPortFree>
 8012246:	e001      	b.n	801224c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012248:	2300      	movs	r3, #0
 801224a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801224c:	69fb      	ldr	r3, [r7, #28]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d017      	beq.n	8012282 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012252:	69fb      	ldr	r3, [r7, #28]
 8012254:	2200      	movs	r2, #0
 8012256:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801225a:	88fa      	ldrh	r2, [r7, #6]
 801225c:	2300      	movs	r3, #0
 801225e:	9303      	str	r3, [sp, #12]
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	9302      	str	r3, [sp, #8]
 8012264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012266:	9301      	str	r3, [sp, #4]
 8012268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801226a:	9300      	str	r3, [sp, #0]
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	68b9      	ldr	r1, [r7, #8]
 8012270:	68f8      	ldr	r0, [r7, #12]
 8012272:	f000 f80f 	bl	8012294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012276:	69f8      	ldr	r0, [r7, #28]
 8012278:	f000 f8dc 	bl	8012434 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801227c:	2301      	movs	r3, #1
 801227e:	61bb      	str	r3, [r7, #24]
 8012280:	e002      	b.n	8012288 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012282:	f04f 33ff 	mov.w	r3, #4294967295
 8012286:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012288:	69bb      	ldr	r3, [r7, #24]
	}
 801228a:	4618      	mov	r0, r3
 801228c:	3720      	adds	r7, #32
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
	...

08012294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b088      	sub	sp, #32
 8012298:	af00      	add	r7, sp, #0
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	607a      	str	r2, [r7, #4]
 80122a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80122a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	009b      	lsls	r3, r3, #2
 80122aa:	461a      	mov	r2, r3
 80122ac:	21a5      	movs	r1, #165	; 0xa5
 80122ae:	f002 f951 	bl	8014554 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80122b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80122bc:	3b01      	subs	r3, #1
 80122be:	009b      	lsls	r3, r3, #2
 80122c0:	4413      	add	r3, r2
 80122c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80122c4:	69bb      	ldr	r3, [r7, #24]
 80122c6:	f023 0307 	bic.w	r3, r3, #7
 80122ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80122cc:	69bb      	ldr	r3, [r7, #24]
 80122ce:	f003 0307 	and.w	r3, r3, #7
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d00a      	beq.n	80122ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80122d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122da:	f383 8811 	msr	BASEPRI, r3
 80122de:	f3bf 8f6f 	isb	sy
 80122e2:	f3bf 8f4f 	dsb	sy
 80122e6:	617b      	str	r3, [r7, #20]
}
 80122e8:	bf00      	nop
 80122ea:	e7fe      	b.n	80122ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d01f      	beq.n	8012332 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80122f2:	2300      	movs	r3, #0
 80122f4:	61fb      	str	r3, [r7, #28]
 80122f6:	e012      	b.n	801231e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80122f8:	68ba      	ldr	r2, [r7, #8]
 80122fa:	69fb      	ldr	r3, [r7, #28]
 80122fc:	4413      	add	r3, r2
 80122fe:	7819      	ldrb	r1, [r3, #0]
 8012300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	4413      	add	r3, r2
 8012306:	3334      	adds	r3, #52	; 0x34
 8012308:	460a      	mov	r2, r1
 801230a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801230c:	68ba      	ldr	r2, [r7, #8]
 801230e:	69fb      	ldr	r3, [r7, #28]
 8012310:	4413      	add	r3, r2
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d006      	beq.n	8012326 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012318:	69fb      	ldr	r3, [r7, #28]
 801231a:	3301      	adds	r3, #1
 801231c:	61fb      	str	r3, [r7, #28]
 801231e:	69fb      	ldr	r3, [r7, #28]
 8012320:	2b0f      	cmp	r3, #15
 8012322:	d9e9      	bls.n	80122f8 <prvInitialiseNewTask+0x64>
 8012324:	e000      	b.n	8012328 <prvInitialiseNewTask+0x94>
			{
				break;
 8012326:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801232a:	2200      	movs	r2, #0
 801232c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012330:	e003      	b.n	801233a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012334:	2200      	movs	r2, #0
 8012336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233c:	2b06      	cmp	r3, #6
 801233e:	d901      	bls.n	8012344 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012340:	2306      	movs	r3, #6
 8012342:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012348:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801234c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801234e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012352:	2200      	movs	r2, #0
 8012354:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012358:	3304      	adds	r3, #4
 801235a:	4618      	mov	r0, r3
 801235c:	f7ff f8f5 	bl	801154a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012362:	3318      	adds	r3, #24
 8012364:	4618      	mov	r0, r3
 8012366:	f7ff f8f0 	bl	801154a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801236c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801236e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012372:	f1c3 0207 	rsb	r2, r3, #7
 8012376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012378:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801237e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012382:	2200      	movs	r2, #0
 8012384:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238a:	2200      	movs	r2, #0
 801238c:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012392:	3350      	adds	r3, #80	; 0x50
 8012394:	f44f 7290 	mov.w	r2, #288	; 0x120
 8012398:	2100      	movs	r1, #0
 801239a:	4618      	mov	r0, r3
 801239c:	f002 f8da 	bl	8014554 <memset>
 80123a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a2:	4a21      	ldr	r2, [pc, #132]	; (8012428 <prvInitialiseNewTask+0x194>)
 80123a4:	655a      	str	r2, [r3, #84]	; 0x54
 80123a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a8:	4a20      	ldr	r2, [pc, #128]	; (801242c <prvInitialiseNewTask+0x198>)
 80123aa:	659a      	str	r2, [r3, #88]	; 0x58
 80123ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ae:	4a20      	ldr	r2, [pc, #128]	; (8012430 <prvInitialiseNewTask+0x19c>)
 80123b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80123b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80123b4:	f04f 0201 	mov.w	r2, #1
 80123b8:	f04f 0300 	mov.w	r3, #0
 80123bc:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 80123c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c2:	f243 320e 	movw	r2, #13070	; 0x330e
 80123c6:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
 80123ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123cc:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80123d0:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
 80123d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d6:	f241 2234 	movw	r2, #4660	; 0x1234
 80123da:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 80123de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e0:	f24e 626d 	movw	r2, #58989	; 0xe66d
 80123e4:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 80123e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ea:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 80123ee:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80123f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f4:	2205      	movs	r2, #5
 80123f6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 80123fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fc:	220b      	movs	r2, #11
 80123fe:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012402:	683a      	ldr	r2, [r7, #0]
 8012404:	68f9      	ldr	r1, [r7, #12]
 8012406:	69b8      	ldr	r0, [r7, #24]
 8012408:	f001 f966 	bl	80136d8 <pxPortInitialiseStack>
 801240c:	4602      	mov	r2, r0
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012414:	2b00      	cmp	r3, #0
 8012416:	d002      	beq.n	801241e <prvInitialiseNewTask+0x18a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801241c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801241e:	bf00      	nop
 8012420:	3720      	adds	r7, #32
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	20004838 	.word	0x20004838
 801242c:	200048a0 	.word	0x200048a0
 8012430:	20004908 	.word	0x20004908

08012434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801243c:	f001 fa3e 	bl	80138bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012440:	4b2a      	ldr	r3, [pc, #168]	; (80124ec <prvAddNewTaskToReadyList+0xb8>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	3301      	adds	r3, #1
 8012446:	4a29      	ldr	r2, [pc, #164]	; (80124ec <prvAddNewTaskToReadyList+0xb8>)
 8012448:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801244a:	4b29      	ldr	r3, [pc, #164]	; (80124f0 <prvAddNewTaskToReadyList+0xbc>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d109      	bne.n	8012466 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012452:	4a27      	ldr	r2, [pc, #156]	; (80124f0 <prvAddNewTaskToReadyList+0xbc>)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012458:	4b24      	ldr	r3, [pc, #144]	; (80124ec <prvAddNewTaskToReadyList+0xb8>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	2b01      	cmp	r3, #1
 801245e:	d110      	bne.n	8012482 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012460:	f000 fc3e 	bl	8012ce0 <prvInitialiseTaskLists>
 8012464:	e00d      	b.n	8012482 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012466:	4b23      	ldr	r3, [pc, #140]	; (80124f4 <prvAddNewTaskToReadyList+0xc0>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d109      	bne.n	8012482 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801246e:	4b20      	ldr	r3, [pc, #128]	; (80124f0 <prvAddNewTaskToReadyList+0xbc>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012478:	429a      	cmp	r2, r3
 801247a:	d802      	bhi.n	8012482 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801247c:	4a1c      	ldr	r2, [pc, #112]	; (80124f0 <prvAddNewTaskToReadyList+0xbc>)
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012482:	4b1d      	ldr	r3, [pc, #116]	; (80124f8 <prvAddNewTaskToReadyList+0xc4>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	3301      	adds	r3, #1
 8012488:	4a1b      	ldr	r2, [pc, #108]	; (80124f8 <prvAddNewTaskToReadyList+0xc4>)
 801248a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012490:	2201      	movs	r2, #1
 8012492:	409a      	lsls	r2, r3
 8012494:	4b19      	ldr	r3, [pc, #100]	; (80124fc <prvAddNewTaskToReadyList+0xc8>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	4313      	orrs	r3, r2
 801249a:	4a18      	ldr	r2, [pc, #96]	; (80124fc <prvAddNewTaskToReadyList+0xc8>)
 801249c:	6013      	str	r3, [r2, #0]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124a2:	4613      	mov	r3, r2
 80124a4:	009b      	lsls	r3, r3, #2
 80124a6:	4413      	add	r3, r2
 80124a8:	009b      	lsls	r3, r3, #2
 80124aa:	4a15      	ldr	r2, [pc, #84]	; (8012500 <prvAddNewTaskToReadyList+0xcc>)
 80124ac:	441a      	add	r2, r3
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	3304      	adds	r3, #4
 80124b2:	4619      	mov	r1, r3
 80124b4:	4610      	mov	r0, r2
 80124b6:	f7ff f854 	bl	8011562 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80124ba:	f001 fa2f 	bl	801391c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80124be:	4b0d      	ldr	r3, [pc, #52]	; (80124f4 <prvAddNewTaskToReadyList+0xc0>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d00e      	beq.n	80124e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80124c6:	4b0a      	ldr	r3, [pc, #40]	; (80124f0 <prvAddNewTaskToReadyList+0xbc>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d207      	bcs.n	80124e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80124d4:	4b0b      	ldr	r3, [pc, #44]	; (8012504 <prvAddNewTaskToReadyList+0xd0>)
 80124d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124da:	601a      	str	r2, [r3, #0]
 80124dc:	f3bf 8f4f 	dsb	sy
 80124e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124e4:	bf00      	nop
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	200016f0 	.word	0x200016f0
 80124f0:	200015f0 	.word	0x200015f0
 80124f4:	200016fc 	.word	0x200016fc
 80124f8:	2000170c 	.word	0x2000170c
 80124fc:	200016f8 	.word	0x200016f8
 8012500:	200015f4 	.word	0x200015f4
 8012504:	e000ed04 	.word	0xe000ed04

08012508 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012508:	b580      	push	{r7, lr}
 801250a:	b084      	sub	sp, #16
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012510:	2300      	movs	r3, #0
 8012512:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d017      	beq.n	801254a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801251a:	4b13      	ldr	r3, [pc, #76]	; (8012568 <vTaskDelay+0x60>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d00a      	beq.n	8012538 <vTaskDelay+0x30>
	__asm volatile
 8012522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012526:	f383 8811 	msr	BASEPRI, r3
 801252a:	f3bf 8f6f 	isb	sy
 801252e:	f3bf 8f4f 	dsb	sy
 8012532:	60bb      	str	r3, [r7, #8]
}
 8012534:	bf00      	nop
 8012536:	e7fe      	b.n	8012536 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012538:	f000 f88a 	bl	8012650 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801253c:	2100      	movs	r1, #0
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f000 fd34 	bl	8012fac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012544:	f000 f892 	bl	801266c <xTaskResumeAll>
 8012548:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d107      	bne.n	8012560 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012550:	4b06      	ldr	r3, [pc, #24]	; (801256c <vTaskDelay+0x64>)
 8012552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012556:	601a      	str	r2, [r3, #0]
 8012558:	f3bf 8f4f 	dsb	sy
 801255c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012560:	bf00      	nop
 8012562:	3710      	adds	r7, #16
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}
 8012568:	20001718 	.word	0x20001718
 801256c:	e000ed04 	.word	0xe000ed04

08012570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b08a      	sub	sp, #40	; 0x28
 8012574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012576:	2300      	movs	r3, #0
 8012578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801257a:	2300      	movs	r3, #0
 801257c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801257e:	463a      	mov	r2, r7
 8012580:	1d39      	adds	r1, r7, #4
 8012582:	f107 0308 	add.w	r3, r7, #8
 8012586:	4618      	mov	r0, r3
 8012588:	f7f6 ffb8 	bl	80094fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801258c:	6839      	ldr	r1, [r7, #0]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	68ba      	ldr	r2, [r7, #8]
 8012592:	9202      	str	r2, [sp, #8]
 8012594:	9301      	str	r3, [sp, #4]
 8012596:	2300      	movs	r3, #0
 8012598:	9300      	str	r3, [sp, #0]
 801259a:	2300      	movs	r3, #0
 801259c:	460a      	mov	r2, r1
 801259e:	4924      	ldr	r1, [pc, #144]	; (8012630 <vTaskStartScheduler+0xc0>)
 80125a0:	4824      	ldr	r0, [pc, #144]	; (8012634 <vTaskStartScheduler+0xc4>)
 80125a2:	f7ff fdd1 	bl	8012148 <xTaskCreateStatic>
 80125a6:	4603      	mov	r3, r0
 80125a8:	4a23      	ldr	r2, [pc, #140]	; (8012638 <vTaskStartScheduler+0xc8>)
 80125aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80125ac:	4b22      	ldr	r3, [pc, #136]	; (8012638 <vTaskStartScheduler+0xc8>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d002      	beq.n	80125ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80125b4:	2301      	movs	r3, #1
 80125b6:	617b      	str	r3, [r7, #20]
 80125b8:	e001      	b.n	80125be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80125ba:	2300      	movs	r3, #0
 80125bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d102      	bne.n	80125ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80125c4:	f000 fd58 	bl	8013078 <xTimerCreateTimerTask>
 80125c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d11b      	bne.n	8012608 <vTaskStartScheduler+0x98>
	__asm volatile
 80125d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d4:	f383 8811 	msr	BASEPRI, r3
 80125d8:	f3bf 8f6f 	isb	sy
 80125dc:	f3bf 8f4f 	dsb	sy
 80125e0:	613b      	str	r3, [r7, #16]
}
 80125e2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80125e4:	4b15      	ldr	r3, [pc, #84]	; (801263c <vTaskStartScheduler+0xcc>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	3350      	adds	r3, #80	; 0x50
 80125ea:	4a15      	ldr	r2, [pc, #84]	; (8012640 <vTaskStartScheduler+0xd0>)
 80125ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80125ee:	4b15      	ldr	r3, [pc, #84]	; (8012644 <vTaskStartScheduler+0xd4>)
 80125f0:	f04f 32ff 	mov.w	r2, #4294967295
 80125f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80125f6:	4b14      	ldr	r3, [pc, #80]	; (8012648 <vTaskStartScheduler+0xd8>)
 80125f8:	2201      	movs	r2, #1
 80125fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80125fc:	4b13      	ldr	r3, [pc, #76]	; (801264c <vTaskStartScheduler+0xdc>)
 80125fe:	2200      	movs	r2, #0
 8012600:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012602:	f001 f8e9 	bl	80137d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012606:	e00e      	b.n	8012626 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801260e:	d10a      	bne.n	8012626 <vTaskStartScheduler+0xb6>
	__asm volatile
 8012610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012614:	f383 8811 	msr	BASEPRI, r3
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	60fb      	str	r3, [r7, #12]
}
 8012622:	bf00      	nop
 8012624:	e7fe      	b.n	8012624 <vTaskStartScheduler+0xb4>
}
 8012626:	bf00      	nop
 8012628:	3718      	adds	r7, #24
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	0801af34 	.word	0x0801af34
 8012634:	08012cad 	.word	0x08012cad
 8012638:	20001714 	.word	0x20001714
 801263c:	200015f0 	.word	0x200015f0
 8012640:	200001c0 	.word	0x200001c0
 8012644:	20001710 	.word	0x20001710
 8012648:	200016fc 	.word	0x200016fc
 801264c:	200016f4 	.word	0x200016f4

08012650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012650:	b480      	push	{r7}
 8012652:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012654:	4b04      	ldr	r3, [pc, #16]	; (8012668 <vTaskSuspendAll+0x18>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	3301      	adds	r3, #1
 801265a:	4a03      	ldr	r2, [pc, #12]	; (8012668 <vTaskSuspendAll+0x18>)
 801265c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801265e:	bf00      	nop
 8012660:	46bd      	mov	sp, r7
 8012662:	bc80      	pop	{r7}
 8012664:	4770      	bx	lr
 8012666:	bf00      	nop
 8012668:	20001718 	.word	0x20001718

0801266c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b084      	sub	sp, #16
 8012670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012672:	2300      	movs	r3, #0
 8012674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012676:	2300      	movs	r3, #0
 8012678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801267a:	4b41      	ldr	r3, [pc, #260]	; (8012780 <xTaskResumeAll+0x114>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d10a      	bne.n	8012698 <xTaskResumeAll+0x2c>
	__asm volatile
 8012682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012686:	f383 8811 	msr	BASEPRI, r3
 801268a:	f3bf 8f6f 	isb	sy
 801268e:	f3bf 8f4f 	dsb	sy
 8012692:	603b      	str	r3, [r7, #0]
}
 8012694:	bf00      	nop
 8012696:	e7fe      	b.n	8012696 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012698:	f001 f910 	bl	80138bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801269c:	4b38      	ldr	r3, [pc, #224]	; (8012780 <xTaskResumeAll+0x114>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	3b01      	subs	r3, #1
 80126a2:	4a37      	ldr	r2, [pc, #220]	; (8012780 <xTaskResumeAll+0x114>)
 80126a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126a6:	4b36      	ldr	r3, [pc, #216]	; (8012780 <xTaskResumeAll+0x114>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d161      	bne.n	8012772 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80126ae:	4b35      	ldr	r3, [pc, #212]	; (8012784 <xTaskResumeAll+0x118>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d05d      	beq.n	8012772 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80126b6:	e02e      	b.n	8012716 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126b8:	4b33      	ldr	r3, [pc, #204]	; (8012788 <xTaskResumeAll+0x11c>)
 80126ba:	68db      	ldr	r3, [r3, #12]
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	3318      	adds	r3, #24
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7fe ffa7 	bl	8011618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	3304      	adds	r3, #4
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7fe ffa2 	bl	8011618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126d8:	2201      	movs	r2, #1
 80126da:	409a      	lsls	r2, r3
 80126dc:	4b2b      	ldr	r3, [pc, #172]	; (801278c <xTaskResumeAll+0x120>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4313      	orrs	r3, r2
 80126e2:	4a2a      	ldr	r2, [pc, #168]	; (801278c <xTaskResumeAll+0x120>)
 80126e4:	6013      	str	r3, [r2, #0]
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126ea:	4613      	mov	r3, r2
 80126ec:	009b      	lsls	r3, r3, #2
 80126ee:	4413      	add	r3, r2
 80126f0:	009b      	lsls	r3, r3, #2
 80126f2:	4a27      	ldr	r2, [pc, #156]	; (8012790 <xTaskResumeAll+0x124>)
 80126f4:	441a      	add	r2, r3
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	3304      	adds	r3, #4
 80126fa:	4619      	mov	r1, r3
 80126fc:	4610      	mov	r0, r2
 80126fe:	f7fe ff30 	bl	8011562 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012706:	4b23      	ldr	r3, [pc, #140]	; (8012794 <xTaskResumeAll+0x128>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801270c:	429a      	cmp	r2, r3
 801270e:	d302      	bcc.n	8012716 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012710:	4b21      	ldr	r3, [pc, #132]	; (8012798 <xTaskResumeAll+0x12c>)
 8012712:	2201      	movs	r2, #1
 8012714:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012716:	4b1c      	ldr	r3, [pc, #112]	; (8012788 <xTaskResumeAll+0x11c>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d1cc      	bne.n	80126b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d001      	beq.n	8012728 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012724:	f000 fb7e 	bl	8012e24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012728:	4b1c      	ldr	r3, [pc, #112]	; (801279c <xTaskResumeAll+0x130>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d010      	beq.n	8012756 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012734:	f000 f844 	bl	80127c0 <xTaskIncrementTick>
 8012738:	4603      	mov	r3, r0
 801273a:	2b00      	cmp	r3, #0
 801273c:	d002      	beq.n	8012744 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801273e:	4b16      	ldr	r3, [pc, #88]	; (8012798 <xTaskResumeAll+0x12c>)
 8012740:	2201      	movs	r2, #1
 8012742:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	3b01      	subs	r3, #1
 8012748:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d1f1      	bne.n	8012734 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012750:	4b12      	ldr	r3, [pc, #72]	; (801279c <xTaskResumeAll+0x130>)
 8012752:	2200      	movs	r2, #0
 8012754:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012756:	4b10      	ldr	r3, [pc, #64]	; (8012798 <xTaskResumeAll+0x12c>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d009      	beq.n	8012772 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801275e:	2301      	movs	r3, #1
 8012760:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012762:	4b0f      	ldr	r3, [pc, #60]	; (80127a0 <xTaskResumeAll+0x134>)
 8012764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012768:	601a      	str	r2, [r3, #0]
 801276a:	f3bf 8f4f 	dsb	sy
 801276e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012772:	f001 f8d3 	bl	801391c <vPortExitCritical>

	return xAlreadyYielded;
 8012776:	68bb      	ldr	r3, [r7, #8]
}
 8012778:	4618      	mov	r0, r3
 801277a:	3710      	adds	r7, #16
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	20001718 	.word	0x20001718
 8012784:	200016f0 	.word	0x200016f0
 8012788:	200016b0 	.word	0x200016b0
 801278c:	200016f8 	.word	0x200016f8
 8012790:	200015f4 	.word	0x200015f4
 8012794:	200015f0 	.word	0x200015f0
 8012798:	20001704 	.word	0x20001704
 801279c:	20001700 	.word	0x20001700
 80127a0:	e000ed04 	.word	0xe000ed04

080127a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80127aa:	4b04      	ldr	r3, [pc, #16]	; (80127bc <xTaskGetTickCount+0x18>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80127b0:	687b      	ldr	r3, [r7, #4]
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	370c      	adds	r7, #12
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bc80      	pop	{r7}
 80127ba:	4770      	bx	lr
 80127bc:	200016f4 	.word	0x200016f4

080127c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b086      	sub	sp, #24
 80127c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80127c6:	2300      	movs	r3, #0
 80127c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127ca:	4b4e      	ldr	r3, [pc, #312]	; (8012904 <xTaskIncrementTick+0x144>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f040 8088 	bne.w	80128e4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80127d4:	4b4c      	ldr	r3, [pc, #304]	; (8012908 <xTaskIncrementTick+0x148>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	3301      	adds	r3, #1
 80127da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80127dc:	4a4a      	ldr	r2, [pc, #296]	; (8012908 <xTaskIncrementTick+0x148>)
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d120      	bne.n	801282a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80127e8:	4b48      	ldr	r3, [pc, #288]	; (801290c <xTaskIncrementTick+0x14c>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d00a      	beq.n	8012808 <xTaskIncrementTick+0x48>
	__asm volatile
 80127f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f6:	f383 8811 	msr	BASEPRI, r3
 80127fa:	f3bf 8f6f 	isb	sy
 80127fe:	f3bf 8f4f 	dsb	sy
 8012802:	603b      	str	r3, [r7, #0]
}
 8012804:	bf00      	nop
 8012806:	e7fe      	b.n	8012806 <xTaskIncrementTick+0x46>
 8012808:	4b40      	ldr	r3, [pc, #256]	; (801290c <xTaskIncrementTick+0x14c>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	60fb      	str	r3, [r7, #12]
 801280e:	4b40      	ldr	r3, [pc, #256]	; (8012910 <xTaskIncrementTick+0x150>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	4a3e      	ldr	r2, [pc, #248]	; (801290c <xTaskIncrementTick+0x14c>)
 8012814:	6013      	str	r3, [r2, #0]
 8012816:	4a3e      	ldr	r2, [pc, #248]	; (8012910 <xTaskIncrementTick+0x150>)
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	6013      	str	r3, [r2, #0]
 801281c:	4b3d      	ldr	r3, [pc, #244]	; (8012914 <xTaskIncrementTick+0x154>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	3301      	adds	r3, #1
 8012822:	4a3c      	ldr	r2, [pc, #240]	; (8012914 <xTaskIncrementTick+0x154>)
 8012824:	6013      	str	r3, [r2, #0]
 8012826:	f000 fafd 	bl	8012e24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801282a:	4b3b      	ldr	r3, [pc, #236]	; (8012918 <xTaskIncrementTick+0x158>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	693a      	ldr	r2, [r7, #16]
 8012830:	429a      	cmp	r2, r3
 8012832:	d348      	bcc.n	80128c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012834:	4b35      	ldr	r3, [pc, #212]	; (801290c <xTaskIncrementTick+0x14c>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d104      	bne.n	8012848 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801283e:	4b36      	ldr	r3, [pc, #216]	; (8012918 <xTaskIncrementTick+0x158>)
 8012840:	f04f 32ff 	mov.w	r2, #4294967295
 8012844:	601a      	str	r2, [r3, #0]
					break;
 8012846:	e03e      	b.n	80128c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012848:	4b30      	ldr	r3, [pc, #192]	; (801290c <xTaskIncrementTick+0x14c>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	68db      	ldr	r3, [r3, #12]
 801284e:	68db      	ldr	r3, [r3, #12]
 8012850:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	685b      	ldr	r3, [r3, #4]
 8012856:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012858:	693a      	ldr	r2, [r7, #16]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	429a      	cmp	r2, r3
 801285e:	d203      	bcs.n	8012868 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012860:	4a2d      	ldr	r2, [pc, #180]	; (8012918 <xTaskIncrementTick+0x158>)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012866:	e02e      	b.n	80128c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	3304      	adds	r3, #4
 801286c:	4618      	mov	r0, r3
 801286e:	f7fe fed3 	bl	8011618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012872:	68bb      	ldr	r3, [r7, #8]
 8012874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012876:	2b00      	cmp	r3, #0
 8012878:	d004      	beq.n	8012884 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	3318      	adds	r3, #24
 801287e:	4618      	mov	r0, r3
 8012880:	f7fe feca 	bl	8011618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012888:	2201      	movs	r2, #1
 801288a:	409a      	lsls	r2, r3
 801288c:	4b23      	ldr	r3, [pc, #140]	; (801291c <xTaskIncrementTick+0x15c>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4313      	orrs	r3, r2
 8012892:	4a22      	ldr	r2, [pc, #136]	; (801291c <xTaskIncrementTick+0x15c>)
 8012894:	6013      	str	r3, [r2, #0]
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801289a:	4613      	mov	r3, r2
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	4413      	add	r3, r2
 80128a0:	009b      	lsls	r3, r3, #2
 80128a2:	4a1f      	ldr	r2, [pc, #124]	; (8012920 <xTaskIncrementTick+0x160>)
 80128a4:	441a      	add	r2, r3
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	3304      	adds	r3, #4
 80128aa:	4619      	mov	r1, r3
 80128ac:	4610      	mov	r0, r2
 80128ae:	f7fe fe58 	bl	8011562 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128b6:	4b1b      	ldr	r3, [pc, #108]	; (8012924 <xTaskIncrementTick+0x164>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128bc:	429a      	cmp	r2, r3
 80128be:	d3b9      	bcc.n	8012834 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80128c0:	2301      	movs	r3, #1
 80128c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128c4:	e7b6      	b.n	8012834 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80128c6:	4b17      	ldr	r3, [pc, #92]	; (8012924 <xTaskIncrementTick+0x164>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128cc:	4914      	ldr	r1, [pc, #80]	; (8012920 <xTaskIncrementTick+0x160>)
 80128ce:	4613      	mov	r3, r2
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	4413      	add	r3, r2
 80128d4:	009b      	lsls	r3, r3, #2
 80128d6:	440b      	add	r3, r1
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d907      	bls.n	80128ee <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80128de:	2301      	movs	r3, #1
 80128e0:	617b      	str	r3, [r7, #20]
 80128e2:	e004      	b.n	80128ee <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80128e4:	4b10      	ldr	r3, [pc, #64]	; (8012928 <xTaskIncrementTick+0x168>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	3301      	adds	r3, #1
 80128ea:	4a0f      	ldr	r2, [pc, #60]	; (8012928 <xTaskIncrementTick+0x168>)
 80128ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80128ee:	4b0f      	ldr	r3, [pc, #60]	; (801292c <xTaskIncrementTick+0x16c>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d001      	beq.n	80128fa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80128f6:	2301      	movs	r3, #1
 80128f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80128fa:	697b      	ldr	r3, [r7, #20]
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3718      	adds	r7, #24
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	20001718 	.word	0x20001718
 8012908:	200016f4 	.word	0x200016f4
 801290c:	200016a8 	.word	0x200016a8
 8012910:	200016ac 	.word	0x200016ac
 8012914:	20001708 	.word	0x20001708
 8012918:	20001710 	.word	0x20001710
 801291c:	200016f8 	.word	0x200016f8
 8012920:	200015f4 	.word	0x200015f4
 8012924:	200015f0 	.word	0x200015f0
 8012928:	20001700 	.word	0x20001700
 801292c:	20001704 	.word	0x20001704

08012930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b088      	sub	sp, #32
 8012934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012936:	4b3c      	ldr	r3, [pc, #240]	; (8012a28 <vTaskSwitchContext+0xf8>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d003      	beq.n	8012946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801293e:	4b3b      	ldr	r3, [pc, #236]	; (8012a2c <vTaskSwitchContext+0xfc>)
 8012940:	2201      	movs	r2, #1
 8012942:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012944:	e06b      	b.n	8012a1e <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8012946:	4b39      	ldr	r3, [pc, #228]	; (8012a2c <vTaskSwitchContext+0xfc>)
 8012948:	2200      	movs	r2, #0
 801294a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801294c:	4b38      	ldr	r3, [pc, #224]	; (8012a30 <vTaskSwitchContext+0x100>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012952:	61fb      	str	r3, [r7, #28]
 8012954:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012958:	61bb      	str	r3, [r7, #24]
 801295a:	69fb      	ldr	r3, [r7, #28]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	69ba      	ldr	r2, [r7, #24]
 8012960:	429a      	cmp	r2, r3
 8012962:	d111      	bne.n	8012988 <vTaskSwitchContext+0x58>
 8012964:	69fb      	ldr	r3, [r7, #28]
 8012966:	3304      	adds	r3, #4
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	69ba      	ldr	r2, [r7, #24]
 801296c:	429a      	cmp	r2, r3
 801296e:	d10b      	bne.n	8012988 <vTaskSwitchContext+0x58>
 8012970:	69fb      	ldr	r3, [r7, #28]
 8012972:	3308      	adds	r3, #8
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	69ba      	ldr	r2, [r7, #24]
 8012978:	429a      	cmp	r2, r3
 801297a:	d105      	bne.n	8012988 <vTaskSwitchContext+0x58>
 801297c:	69fb      	ldr	r3, [r7, #28]
 801297e:	330c      	adds	r3, #12
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	69ba      	ldr	r2, [r7, #24]
 8012984:	429a      	cmp	r2, r3
 8012986:	d008      	beq.n	801299a <vTaskSwitchContext+0x6a>
 8012988:	4b29      	ldr	r3, [pc, #164]	; (8012a30 <vTaskSwitchContext+0x100>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	4b28      	ldr	r3, [pc, #160]	; (8012a30 <vTaskSwitchContext+0x100>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	3334      	adds	r3, #52	; 0x34
 8012992:	4619      	mov	r1, r3
 8012994:	4610      	mov	r0, r2
 8012996:	f7f6 fde3 	bl	8009560 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801299a:	4b26      	ldr	r3, [pc, #152]	; (8012a34 <vTaskSwitchContext+0x104>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	fab3 f383 	clz	r3, r3
 80129a6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80129a8:	7afb      	ldrb	r3, [r7, #11]
 80129aa:	f1c3 031f 	rsb	r3, r3, #31
 80129ae:	617b      	str	r3, [r7, #20]
 80129b0:	4921      	ldr	r1, [pc, #132]	; (8012a38 <vTaskSwitchContext+0x108>)
 80129b2:	697a      	ldr	r2, [r7, #20]
 80129b4:	4613      	mov	r3, r2
 80129b6:	009b      	lsls	r3, r3, #2
 80129b8:	4413      	add	r3, r2
 80129ba:	009b      	lsls	r3, r3, #2
 80129bc:	440b      	add	r3, r1
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d10a      	bne.n	80129da <vTaskSwitchContext+0xaa>
	__asm volatile
 80129c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c8:	f383 8811 	msr	BASEPRI, r3
 80129cc:	f3bf 8f6f 	isb	sy
 80129d0:	f3bf 8f4f 	dsb	sy
 80129d4:	607b      	str	r3, [r7, #4]
}
 80129d6:	bf00      	nop
 80129d8:	e7fe      	b.n	80129d8 <vTaskSwitchContext+0xa8>
 80129da:	697a      	ldr	r2, [r7, #20]
 80129dc:	4613      	mov	r3, r2
 80129de:	009b      	lsls	r3, r3, #2
 80129e0:	4413      	add	r3, r2
 80129e2:	009b      	lsls	r3, r3, #2
 80129e4:	4a14      	ldr	r2, [pc, #80]	; (8012a38 <vTaskSwitchContext+0x108>)
 80129e6:	4413      	add	r3, r2
 80129e8:	613b      	str	r3, [r7, #16]
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	685a      	ldr	r2, [r3, #4]
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	605a      	str	r2, [r3, #4]
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	685a      	ldr	r2, [r3, #4]
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	3308      	adds	r3, #8
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d104      	bne.n	8012a0a <vTaskSwitchContext+0xda>
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	685a      	ldr	r2, [r3, #4]
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	605a      	str	r2, [r3, #4]
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	4a07      	ldr	r2, [pc, #28]	; (8012a30 <vTaskSwitchContext+0x100>)
 8012a12:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012a14:	4b06      	ldr	r3, [pc, #24]	; (8012a30 <vTaskSwitchContext+0x100>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	3350      	adds	r3, #80	; 0x50
 8012a1a:	4a08      	ldr	r2, [pc, #32]	; (8012a3c <vTaskSwitchContext+0x10c>)
 8012a1c:	6013      	str	r3, [r2, #0]
}
 8012a1e:	bf00      	nop
 8012a20:	3720      	adds	r7, #32
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}
 8012a26:	bf00      	nop
 8012a28:	20001718 	.word	0x20001718
 8012a2c:	20001704 	.word	0x20001704
 8012a30:	200015f0 	.word	0x200015f0
 8012a34:	200016f8 	.word	0x200016f8
 8012a38:	200015f4 	.word	0x200015f4
 8012a3c:	200001c0 	.word	0x200001c0

08012a40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d10a      	bne.n	8012a66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a54:	f383 8811 	msr	BASEPRI, r3
 8012a58:	f3bf 8f6f 	isb	sy
 8012a5c:	f3bf 8f4f 	dsb	sy
 8012a60:	60fb      	str	r3, [r7, #12]
}
 8012a62:	bf00      	nop
 8012a64:	e7fe      	b.n	8012a64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012a66:	4b07      	ldr	r3, [pc, #28]	; (8012a84 <vTaskPlaceOnEventList+0x44>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	3318      	adds	r3, #24
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7fe fd9a 	bl	80115a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012a74:	2101      	movs	r1, #1
 8012a76:	6838      	ldr	r0, [r7, #0]
 8012a78:	f000 fa98 	bl	8012fac <prvAddCurrentTaskToDelayedList>
}
 8012a7c:	bf00      	nop
 8012a7e:	3710      	adds	r7, #16
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	200015f0 	.word	0x200015f0

08012a88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b086      	sub	sp, #24
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d10a      	bne.n	8012ab0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a9e:	f383 8811 	msr	BASEPRI, r3
 8012aa2:	f3bf 8f6f 	isb	sy
 8012aa6:	f3bf 8f4f 	dsb	sy
 8012aaa:	617b      	str	r3, [r7, #20]
}
 8012aac:	bf00      	nop
 8012aae:	e7fe      	b.n	8012aae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012ab0:	4b0a      	ldr	r3, [pc, #40]	; (8012adc <vTaskPlaceOnEventListRestricted+0x54>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	3318      	adds	r3, #24
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	68f8      	ldr	r0, [r7, #12]
 8012aba:	f7fe fd52 	bl	8011562 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d002      	beq.n	8012aca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012aca:	6879      	ldr	r1, [r7, #4]
 8012acc:	68b8      	ldr	r0, [r7, #8]
 8012ace:	f000 fa6d 	bl	8012fac <prvAddCurrentTaskToDelayedList>
	}
 8012ad2:	bf00      	nop
 8012ad4:	3718      	adds	r7, #24
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	bf00      	nop
 8012adc:	200015f0 	.word	0x200015f0

08012ae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b086      	sub	sp, #24
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	68db      	ldr	r3, [r3, #12]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d10a      	bne.n	8012b0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012afa:	f383 8811 	msr	BASEPRI, r3
 8012afe:	f3bf 8f6f 	isb	sy
 8012b02:	f3bf 8f4f 	dsb	sy
 8012b06:	60fb      	str	r3, [r7, #12]
}
 8012b08:	bf00      	nop
 8012b0a:	e7fe      	b.n	8012b0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	3318      	adds	r3, #24
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7fe fd81 	bl	8011618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b16:	4b1d      	ldr	r3, [pc, #116]	; (8012b8c <xTaskRemoveFromEventList+0xac>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d11c      	bne.n	8012b58 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	3304      	adds	r3, #4
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7fe fd78 	bl	8011618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b2c:	2201      	movs	r2, #1
 8012b2e:	409a      	lsls	r2, r3
 8012b30:	4b17      	ldr	r3, [pc, #92]	; (8012b90 <xTaskRemoveFromEventList+0xb0>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	4313      	orrs	r3, r2
 8012b36:	4a16      	ldr	r2, [pc, #88]	; (8012b90 <xTaskRemoveFromEventList+0xb0>)
 8012b38:	6013      	str	r3, [r2, #0]
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b3e:	4613      	mov	r3, r2
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	4413      	add	r3, r2
 8012b44:	009b      	lsls	r3, r3, #2
 8012b46:	4a13      	ldr	r2, [pc, #76]	; (8012b94 <xTaskRemoveFromEventList+0xb4>)
 8012b48:	441a      	add	r2, r3
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	3304      	adds	r3, #4
 8012b4e:	4619      	mov	r1, r3
 8012b50:	4610      	mov	r0, r2
 8012b52:	f7fe fd06 	bl	8011562 <vListInsertEnd>
 8012b56:	e005      	b.n	8012b64 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	3318      	adds	r3, #24
 8012b5c:	4619      	mov	r1, r3
 8012b5e:	480e      	ldr	r0, [pc, #56]	; (8012b98 <xTaskRemoveFromEventList+0xb8>)
 8012b60:	f7fe fcff 	bl	8011562 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b68:	4b0c      	ldr	r3, [pc, #48]	; (8012b9c <xTaskRemoveFromEventList+0xbc>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d905      	bls.n	8012b7e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012b72:	2301      	movs	r3, #1
 8012b74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012b76:	4b0a      	ldr	r3, [pc, #40]	; (8012ba0 <xTaskRemoveFromEventList+0xc0>)
 8012b78:	2201      	movs	r2, #1
 8012b7a:	601a      	str	r2, [r3, #0]
 8012b7c:	e001      	b.n	8012b82 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012b82:	697b      	ldr	r3, [r7, #20]
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3718      	adds	r7, #24
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	20001718 	.word	0x20001718
 8012b90:	200016f8 	.word	0x200016f8
 8012b94:	200015f4 	.word	0x200015f4
 8012b98:	200016b0 	.word	0x200016b0
 8012b9c:	200015f0 	.word	0x200015f0
 8012ba0:	20001704 	.word	0x20001704

08012ba4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012bac:	4b06      	ldr	r3, [pc, #24]	; (8012bc8 <vTaskInternalSetTimeOutState+0x24>)
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012bb4:	4b05      	ldr	r3, [pc, #20]	; (8012bcc <vTaskInternalSetTimeOutState+0x28>)
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	605a      	str	r2, [r3, #4]
}
 8012bbc:	bf00      	nop
 8012bbe:	370c      	adds	r7, #12
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	bc80      	pop	{r7}
 8012bc4:	4770      	bx	lr
 8012bc6:	bf00      	nop
 8012bc8:	20001708 	.word	0x20001708
 8012bcc:	200016f4 	.word	0x200016f4

08012bd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b088      	sub	sp, #32
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d10a      	bne.n	8012bf6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be4:	f383 8811 	msr	BASEPRI, r3
 8012be8:	f3bf 8f6f 	isb	sy
 8012bec:	f3bf 8f4f 	dsb	sy
 8012bf0:	613b      	str	r3, [r7, #16]
}
 8012bf2:	bf00      	nop
 8012bf4:	e7fe      	b.n	8012bf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d10a      	bne.n	8012c12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c00:	f383 8811 	msr	BASEPRI, r3
 8012c04:	f3bf 8f6f 	isb	sy
 8012c08:	f3bf 8f4f 	dsb	sy
 8012c0c:	60fb      	str	r3, [r7, #12]
}
 8012c0e:	bf00      	nop
 8012c10:	e7fe      	b.n	8012c10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012c12:	f000 fe53 	bl	80138bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012c16:	4b1d      	ldr	r3, [pc, #116]	; (8012c8c <xTaskCheckForTimeOut+0xbc>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	69ba      	ldr	r2, [r7, #24]
 8012c22:	1ad3      	subs	r3, r2, r3
 8012c24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c2e:	d102      	bne.n	8012c36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012c30:	2300      	movs	r3, #0
 8012c32:	61fb      	str	r3, [r7, #28]
 8012c34:	e023      	b.n	8012c7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681a      	ldr	r2, [r3, #0]
 8012c3a:	4b15      	ldr	r3, [pc, #84]	; (8012c90 <xTaskCheckForTimeOut+0xc0>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d007      	beq.n	8012c52 <xTaskCheckForTimeOut+0x82>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	69ba      	ldr	r2, [r7, #24]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d302      	bcc.n	8012c52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	61fb      	str	r3, [r7, #28]
 8012c50:	e015      	b.n	8012c7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	697a      	ldr	r2, [r7, #20]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d20b      	bcs.n	8012c74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	681a      	ldr	r2, [r3, #0]
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	1ad2      	subs	r2, r2, r3
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f7ff ff9b 	bl	8012ba4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	61fb      	str	r3, [r7, #28]
 8012c72:	e004      	b.n	8012c7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	2200      	movs	r2, #0
 8012c78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012c7e:	f000 fe4d 	bl	801391c <vPortExitCritical>

	return xReturn;
 8012c82:	69fb      	ldr	r3, [r7, #28]
}
 8012c84:	4618      	mov	r0, r3
 8012c86:	3720      	adds	r7, #32
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}
 8012c8c:	200016f4 	.word	0x200016f4
 8012c90:	20001708 	.word	0x20001708

08012c94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012c94:	b480      	push	{r7}
 8012c96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012c98:	4b03      	ldr	r3, [pc, #12]	; (8012ca8 <vTaskMissedYield+0x14>)
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	601a      	str	r2, [r3, #0]
}
 8012c9e:	bf00      	nop
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bc80      	pop	{r7}
 8012ca4:	4770      	bx	lr
 8012ca6:	bf00      	nop
 8012ca8:	20001704 	.word	0x20001704

08012cac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b082      	sub	sp, #8
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012cb4:	f000 f854 	bl	8012d60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012cb8:	4b07      	ldr	r3, [pc, #28]	; (8012cd8 <prvIdleTask+0x2c>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d907      	bls.n	8012cd0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012cc0:	4b06      	ldr	r3, [pc, #24]	; (8012cdc <prvIdleTask+0x30>)
 8012cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cc6:	601a      	str	r2, [r3, #0]
 8012cc8:	f3bf 8f4f 	dsb	sy
 8012ccc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012cd0:	f7f6 fc0e 	bl	80094f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012cd4:	e7ee      	b.n	8012cb4 <prvIdleTask+0x8>
 8012cd6:	bf00      	nop
 8012cd8:	200015f4 	.word	0x200015f4
 8012cdc:	e000ed04 	.word	0xe000ed04

08012ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b082      	sub	sp, #8
 8012ce4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	607b      	str	r3, [r7, #4]
 8012cea:	e00c      	b.n	8012d06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	4613      	mov	r3, r2
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	4413      	add	r3, r2
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	4a12      	ldr	r2, [pc, #72]	; (8012d40 <prvInitialiseTaskLists+0x60>)
 8012cf8:	4413      	add	r3, r2
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fe fc06 	bl	801150c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	3301      	adds	r3, #1
 8012d04:	607b      	str	r3, [r7, #4]
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	2b06      	cmp	r3, #6
 8012d0a:	d9ef      	bls.n	8012cec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012d0c:	480d      	ldr	r0, [pc, #52]	; (8012d44 <prvInitialiseTaskLists+0x64>)
 8012d0e:	f7fe fbfd 	bl	801150c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012d12:	480d      	ldr	r0, [pc, #52]	; (8012d48 <prvInitialiseTaskLists+0x68>)
 8012d14:	f7fe fbfa 	bl	801150c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012d18:	480c      	ldr	r0, [pc, #48]	; (8012d4c <prvInitialiseTaskLists+0x6c>)
 8012d1a:	f7fe fbf7 	bl	801150c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012d1e:	480c      	ldr	r0, [pc, #48]	; (8012d50 <prvInitialiseTaskLists+0x70>)
 8012d20:	f7fe fbf4 	bl	801150c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012d24:	480b      	ldr	r0, [pc, #44]	; (8012d54 <prvInitialiseTaskLists+0x74>)
 8012d26:	f7fe fbf1 	bl	801150c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012d2a:	4b0b      	ldr	r3, [pc, #44]	; (8012d58 <prvInitialiseTaskLists+0x78>)
 8012d2c:	4a05      	ldr	r2, [pc, #20]	; (8012d44 <prvInitialiseTaskLists+0x64>)
 8012d2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012d30:	4b0a      	ldr	r3, [pc, #40]	; (8012d5c <prvInitialiseTaskLists+0x7c>)
 8012d32:	4a05      	ldr	r2, [pc, #20]	; (8012d48 <prvInitialiseTaskLists+0x68>)
 8012d34:	601a      	str	r2, [r3, #0]
}
 8012d36:	bf00      	nop
 8012d38:	3708      	adds	r7, #8
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	200015f4 	.word	0x200015f4
 8012d44:	20001680 	.word	0x20001680
 8012d48:	20001694 	.word	0x20001694
 8012d4c:	200016b0 	.word	0x200016b0
 8012d50:	200016c4 	.word	0x200016c4
 8012d54:	200016dc 	.word	0x200016dc
 8012d58:	200016a8 	.word	0x200016a8
 8012d5c:	200016ac 	.word	0x200016ac

08012d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012d66:	e019      	b.n	8012d9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012d68:	f000 fda8 	bl	80138bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d6c:	4b10      	ldr	r3, [pc, #64]	; (8012db0 <prvCheckTasksWaitingTermination+0x50>)
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	68db      	ldr	r3, [r3, #12]
 8012d72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	3304      	adds	r3, #4
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7fe fc4d 	bl	8011618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012d7e:	4b0d      	ldr	r3, [pc, #52]	; (8012db4 <prvCheckTasksWaitingTermination+0x54>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	3b01      	subs	r3, #1
 8012d84:	4a0b      	ldr	r2, [pc, #44]	; (8012db4 <prvCheckTasksWaitingTermination+0x54>)
 8012d86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012d88:	4b0b      	ldr	r3, [pc, #44]	; (8012db8 <prvCheckTasksWaitingTermination+0x58>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	3b01      	subs	r3, #1
 8012d8e:	4a0a      	ldr	r2, [pc, #40]	; (8012db8 <prvCheckTasksWaitingTermination+0x58>)
 8012d90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012d92:	f000 fdc3 	bl	801391c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	f000 f810 	bl	8012dbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012d9c:	4b06      	ldr	r3, [pc, #24]	; (8012db8 <prvCheckTasksWaitingTermination+0x58>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1e1      	bne.n	8012d68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012da4:	bf00      	nop
 8012da6:	bf00      	nop
 8012da8:	3708      	adds	r7, #8
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	200016c4 	.word	0x200016c4
 8012db4:	200016f0 	.word	0x200016f0
 8012db8:	200016d8 	.word	0x200016d8

08012dbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	3350      	adds	r3, #80	; 0x50
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f001 fc1d 	bl	8014608 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	f893 3175 	ldrb.w	r3, [r3, #373]	; 0x175
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d108      	bne.n	8012dea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f000 ff37 	bl	8013c50 <vPortFree>
				vPortFree( pxTCB );
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f000 ff34 	bl	8013c50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012de8:	e018      	b.n	8012e1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f893 3175 	ldrb.w	r3, [r3, #373]	; 0x175
 8012df0:	2b01      	cmp	r3, #1
 8012df2:	d103      	bne.n	8012dfc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f000 ff2b 	bl	8013c50 <vPortFree>
	}
 8012dfa:	e00f      	b.n	8012e1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f893 3175 	ldrb.w	r3, [r3, #373]	; 0x175
 8012e02:	2b02      	cmp	r3, #2
 8012e04:	d00a      	beq.n	8012e1c <prvDeleteTCB+0x60>
	__asm volatile
 8012e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e0a:	f383 8811 	msr	BASEPRI, r3
 8012e0e:	f3bf 8f6f 	isb	sy
 8012e12:	f3bf 8f4f 	dsb	sy
 8012e16:	60fb      	str	r3, [r7, #12]
}
 8012e18:	bf00      	nop
 8012e1a:	e7fe      	b.n	8012e1a <prvDeleteTCB+0x5e>
	}
 8012e1c:	bf00      	nop
 8012e1e:	3710      	adds	r7, #16
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e2a:	4b0c      	ldr	r3, [pc, #48]	; (8012e5c <prvResetNextTaskUnblockTime+0x38>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d104      	bne.n	8012e3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012e34:	4b0a      	ldr	r3, [pc, #40]	; (8012e60 <prvResetNextTaskUnblockTime+0x3c>)
 8012e36:	f04f 32ff 	mov.w	r2, #4294967295
 8012e3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012e3c:	e008      	b.n	8012e50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e3e:	4b07      	ldr	r3, [pc, #28]	; (8012e5c <prvResetNextTaskUnblockTime+0x38>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	68db      	ldr	r3, [r3, #12]
 8012e44:	68db      	ldr	r3, [r3, #12]
 8012e46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	685b      	ldr	r3, [r3, #4]
 8012e4c:	4a04      	ldr	r2, [pc, #16]	; (8012e60 <prvResetNextTaskUnblockTime+0x3c>)
 8012e4e:	6013      	str	r3, [r2, #0]
}
 8012e50:	bf00      	nop
 8012e52:	370c      	adds	r7, #12
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bc80      	pop	{r7}
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop
 8012e5c:	200016a8 	.word	0x200016a8
 8012e60:	20001710 	.word	0x20001710

08012e64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012e64:	b480      	push	{r7}
 8012e66:	b083      	sub	sp, #12
 8012e68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012e6a:	4b0b      	ldr	r3, [pc, #44]	; (8012e98 <xTaskGetSchedulerState+0x34>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d102      	bne.n	8012e78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012e72:	2301      	movs	r3, #1
 8012e74:	607b      	str	r3, [r7, #4]
 8012e76:	e008      	b.n	8012e8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e78:	4b08      	ldr	r3, [pc, #32]	; (8012e9c <xTaskGetSchedulerState+0x38>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d102      	bne.n	8012e86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012e80:	2302      	movs	r3, #2
 8012e82:	607b      	str	r3, [r7, #4]
 8012e84:	e001      	b.n	8012e8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012e86:	2300      	movs	r3, #0
 8012e88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012e8a:	687b      	ldr	r3, [r7, #4]
	}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	370c      	adds	r7, #12
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bc80      	pop	{r7}
 8012e94:	4770      	bx	lr
 8012e96:	bf00      	nop
 8012e98:	200016fc 	.word	0x200016fc
 8012e9c:	20001718 	.word	0x20001718

08012ea0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b086      	sub	sp, #24
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012eac:	2300      	movs	r3, #0
 8012eae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d06e      	beq.n	8012f94 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012eb6:	4b3a      	ldr	r3, [pc, #232]	; (8012fa0 <xTaskPriorityDisinherit+0x100>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	693a      	ldr	r2, [r7, #16]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d00a      	beq.n	8012ed6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec4:	f383 8811 	msr	BASEPRI, r3
 8012ec8:	f3bf 8f6f 	isb	sy
 8012ecc:	f3bf 8f4f 	dsb	sy
 8012ed0:	60fb      	str	r3, [r7, #12]
}
 8012ed2:	bf00      	nop
 8012ed4:	e7fe      	b.n	8012ed4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10a      	bne.n	8012ef4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee2:	f383 8811 	msr	BASEPRI, r3
 8012ee6:	f3bf 8f6f 	isb	sy
 8012eea:	f3bf 8f4f 	dsb	sy
 8012eee:	60bb      	str	r3, [r7, #8]
}
 8012ef0:	bf00      	nop
 8012ef2:	e7fe      	b.n	8012ef2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ef8:	1e5a      	subs	r2, r3, #1
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d044      	beq.n	8012f94 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d140      	bne.n	8012f94 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	3304      	adds	r3, #4
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7fe fb7e 	bl	8011618 <uxListRemove>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d115      	bne.n	8012f4e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f26:	491f      	ldr	r1, [pc, #124]	; (8012fa4 <xTaskPriorityDisinherit+0x104>)
 8012f28:	4613      	mov	r3, r2
 8012f2a:	009b      	lsls	r3, r3, #2
 8012f2c:	4413      	add	r3, r2
 8012f2e:	009b      	lsls	r3, r3, #2
 8012f30:	440b      	add	r3, r1
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d10a      	bne.n	8012f4e <xTaskPriorityDisinherit+0xae>
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f3c:	2201      	movs	r2, #1
 8012f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8012f42:	43da      	mvns	r2, r3
 8012f44:	4b18      	ldr	r3, [pc, #96]	; (8012fa8 <xTaskPriorityDisinherit+0x108>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	4013      	ands	r3, r2
 8012f4a:	4a17      	ldr	r2, [pc, #92]	; (8012fa8 <xTaskPriorityDisinherit+0x108>)
 8012f4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f5a:	f1c3 0207 	rsb	r2, r3, #7
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f66:	2201      	movs	r2, #1
 8012f68:	409a      	lsls	r2, r3
 8012f6a:	4b0f      	ldr	r3, [pc, #60]	; (8012fa8 <xTaskPriorityDisinherit+0x108>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4313      	orrs	r3, r2
 8012f70:	4a0d      	ldr	r2, [pc, #52]	; (8012fa8 <xTaskPriorityDisinherit+0x108>)
 8012f72:	6013      	str	r3, [r2, #0]
 8012f74:	693b      	ldr	r3, [r7, #16]
 8012f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f78:	4613      	mov	r3, r2
 8012f7a:	009b      	lsls	r3, r3, #2
 8012f7c:	4413      	add	r3, r2
 8012f7e:	009b      	lsls	r3, r3, #2
 8012f80:	4a08      	ldr	r2, [pc, #32]	; (8012fa4 <xTaskPriorityDisinherit+0x104>)
 8012f82:	441a      	add	r2, r3
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	3304      	adds	r3, #4
 8012f88:	4619      	mov	r1, r3
 8012f8a:	4610      	mov	r0, r2
 8012f8c:	f7fe fae9 	bl	8011562 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012f90:	2301      	movs	r3, #1
 8012f92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012f94:	697b      	ldr	r3, [r7, #20]
	}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3718      	adds	r7, #24
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}
 8012f9e:	bf00      	nop
 8012fa0:	200015f0 	.word	0x200015f0
 8012fa4:	200015f4 	.word	0x200015f4
 8012fa8:	200016f8 	.word	0x200016f8

08012fac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b084      	sub	sp, #16
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012fb6:	4b29      	ldr	r3, [pc, #164]	; (801305c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012fbc:	4b28      	ldr	r3, [pc, #160]	; (8013060 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	3304      	adds	r3, #4
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7fe fb28 	bl	8011618 <uxListRemove>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d10b      	bne.n	8012fe6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012fce:	4b24      	ldr	r3, [pc, #144]	; (8013060 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8012fda:	43da      	mvns	r2, r3
 8012fdc:	4b21      	ldr	r3, [pc, #132]	; (8013064 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	4013      	ands	r3, r2
 8012fe2:	4a20      	ldr	r2, [pc, #128]	; (8013064 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012fe4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fec:	d10a      	bne.n	8013004 <prvAddCurrentTaskToDelayedList+0x58>
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d007      	beq.n	8013004 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ff4:	4b1a      	ldr	r3, [pc, #104]	; (8013060 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	3304      	adds	r3, #4
 8012ffa:	4619      	mov	r1, r3
 8012ffc:	481a      	ldr	r0, [pc, #104]	; (8013068 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012ffe:	f7fe fab0 	bl	8011562 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013002:	e026      	b.n	8013052 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013004:	68fa      	ldr	r2, [r7, #12]
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	4413      	add	r3, r2
 801300a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801300c:	4b14      	ldr	r3, [pc, #80]	; (8013060 <prvAddCurrentTaskToDelayedList+0xb4>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	68ba      	ldr	r2, [r7, #8]
 8013012:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013014:	68ba      	ldr	r2, [r7, #8]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	429a      	cmp	r2, r3
 801301a:	d209      	bcs.n	8013030 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801301c:	4b13      	ldr	r3, [pc, #76]	; (801306c <prvAddCurrentTaskToDelayedList+0xc0>)
 801301e:	681a      	ldr	r2, [r3, #0]
 8013020:	4b0f      	ldr	r3, [pc, #60]	; (8013060 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	3304      	adds	r3, #4
 8013026:	4619      	mov	r1, r3
 8013028:	4610      	mov	r0, r2
 801302a:	f7fe fabd 	bl	80115a8 <vListInsert>
}
 801302e:	e010      	b.n	8013052 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013030:	4b0f      	ldr	r3, [pc, #60]	; (8013070 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	4b0a      	ldr	r3, [pc, #40]	; (8013060 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	3304      	adds	r3, #4
 801303a:	4619      	mov	r1, r3
 801303c:	4610      	mov	r0, r2
 801303e:	f7fe fab3 	bl	80115a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013042:	4b0c      	ldr	r3, [pc, #48]	; (8013074 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	68ba      	ldr	r2, [r7, #8]
 8013048:	429a      	cmp	r2, r3
 801304a:	d202      	bcs.n	8013052 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801304c:	4a09      	ldr	r2, [pc, #36]	; (8013074 <prvAddCurrentTaskToDelayedList+0xc8>)
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	6013      	str	r3, [r2, #0]
}
 8013052:	bf00      	nop
 8013054:	3710      	adds	r7, #16
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}
 801305a:	bf00      	nop
 801305c:	200016f4 	.word	0x200016f4
 8013060:	200015f0 	.word	0x200015f0
 8013064:	200016f8 	.word	0x200016f8
 8013068:	200016dc 	.word	0x200016dc
 801306c:	200016ac 	.word	0x200016ac
 8013070:	200016a8 	.word	0x200016a8
 8013074:	20001710 	.word	0x20001710

08013078 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b08a      	sub	sp, #40	; 0x28
 801307c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801307e:	2300      	movs	r3, #0
 8013080:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013082:	f000 fae9 	bl	8013658 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013086:	4b1c      	ldr	r3, [pc, #112]	; (80130f8 <xTimerCreateTimerTask+0x80>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d021      	beq.n	80130d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801308e:	2300      	movs	r3, #0
 8013090:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013092:	2300      	movs	r3, #0
 8013094:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013096:	1d3a      	adds	r2, r7, #4
 8013098:	f107 0108 	add.w	r1, r7, #8
 801309c:	f107 030c 	add.w	r3, r7, #12
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7f6 fa43 	bl	800952c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80130a6:	6879      	ldr	r1, [r7, #4]
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	68fa      	ldr	r2, [r7, #12]
 80130ac:	9202      	str	r2, [sp, #8]
 80130ae:	9301      	str	r3, [sp, #4]
 80130b0:	2302      	movs	r3, #2
 80130b2:	9300      	str	r3, [sp, #0]
 80130b4:	2300      	movs	r3, #0
 80130b6:	460a      	mov	r2, r1
 80130b8:	4910      	ldr	r1, [pc, #64]	; (80130fc <xTimerCreateTimerTask+0x84>)
 80130ba:	4811      	ldr	r0, [pc, #68]	; (8013100 <xTimerCreateTimerTask+0x88>)
 80130bc:	f7ff f844 	bl	8012148 <xTaskCreateStatic>
 80130c0:	4603      	mov	r3, r0
 80130c2:	4a10      	ldr	r2, [pc, #64]	; (8013104 <xTimerCreateTimerTask+0x8c>)
 80130c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80130c6:	4b0f      	ldr	r3, [pc, #60]	; (8013104 <xTimerCreateTimerTask+0x8c>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d001      	beq.n	80130d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80130ce:	2301      	movs	r3, #1
 80130d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d10a      	bne.n	80130ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80130d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130dc:	f383 8811 	msr	BASEPRI, r3
 80130e0:	f3bf 8f6f 	isb	sy
 80130e4:	f3bf 8f4f 	dsb	sy
 80130e8:	613b      	str	r3, [r7, #16]
}
 80130ea:	bf00      	nop
 80130ec:	e7fe      	b.n	80130ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80130ee:	697b      	ldr	r3, [r7, #20]
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3718      	adds	r7, #24
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}
 80130f8:	2000174c 	.word	0x2000174c
 80130fc:	0801af3c 	.word	0x0801af3c
 8013100:	0801323d 	.word	0x0801323d
 8013104:	20001750 	.word	0x20001750

08013108 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b08a      	sub	sp, #40	; 0x28
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
 8013114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013116:	2300      	movs	r3, #0
 8013118:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d10a      	bne.n	8013136 <xTimerGenericCommand+0x2e>
	__asm volatile
 8013120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013124:	f383 8811 	msr	BASEPRI, r3
 8013128:	f3bf 8f6f 	isb	sy
 801312c:	f3bf 8f4f 	dsb	sy
 8013130:	623b      	str	r3, [r7, #32]
}
 8013132:	bf00      	nop
 8013134:	e7fe      	b.n	8013134 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013136:	4b1a      	ldr	r3, [pc, #104]	; (80131a0 <xTimerGenericCommand+0x98>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d02a      	beq.n	8013194 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	2b05      	cmp	r3, #5
 801314e:	dc18      	bgt.n	8013182 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013150:	f7ff fe88 	bl	8012e64 <xTaskGetSchedulerState>
 8013154:	4603      	mov	r3, r0
 8013156:	2b02      	cmp	r3, #2
 8013158:	d109      	bne.n	801316e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801315a:	4b11      	ldr	r3, [pc, #68]	; (80131a0 <xTimerGenericCommand+0x98>)
 801315c:	6818      	ldr	r0, [r3, #0]
 801315e:	f107 0114 	add.w	r1, r7, #20
 8013162:	2300      	movs	r3, #0
 8013164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013166:	f7fe fc0d 	bl	8011984 <xQueueGenericSend>
 801316a:	6278      	str	r0, [r7, #36]	; 0x24
 801316c:	e012      	b.n	8013194 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801316e:	4b0c      	ldr	r3, [pc, #48]	; (80131a0 <xTimerGenericCommand+0x98>)
 8013170:	6818      	ldr	r0, [r3, #0]
 8013172:	f107 0114 	add.w	r1, r7, #20
 8013176:	2300      	movs	r3, #0
 8013178:	2200      	movs	r2, #0
 801317a:	f7fe fc03 	bl	8011984 <xQueueGenericSend>
 801317e:	6278      	str	r0, [r7, #36]	; 0x24
 8013180:	e008      	b.n	8013194 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013182:	4b07      	ldr	r3, [pc, #28]	; (80131a0 <xTimerGenericCommand+0x98>)
 8013184:	6818      	ldr	r0, [r3, #0]
 8013186:	f107 0114 	add.w	r1, r7, #20
 801318a:	2300      	movs	r3, #0
 801318c:	683a      	ldr	r2, [r7, #0]
 801318e:	f7fe fcf7 	bl	8011b80 <xQueueGenericSendFromISR>
 8013192:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013196:	4618      	mov	r0, r3
 8013198:	3728      	adds	r7, #40	; 0x28
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	2000174c 	.word	0x2000174c

080131a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b088      	sub	sp, #32
 80131a8:	af02      	add	r7, sp, #8
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131ae:	4b22      	ldr	r3, [pc, #136]	; (8013238 <prvProcessExpiredTimer+0x94>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	68db      	ldr	r3, [r3, #12]
 80131b4:	68db      	ldr	r3, [r3, #12]
 80131b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	3304      	adds	r3, #4
 80131bc:	4618      	mov	r0, r3
 80131be:	f7fe fa2b 	bl	8011618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80131c8:	f003 0304 	and.w	r3, r3, #4
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d022      	beq.n	8013216 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	699a      	ldr	r2, [r3, #24]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	18d1      	adds	r1, r2, r3
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	683a      	ldr	r2, [r7, #0]
 80131dc:	6978      	ldr	r0, [r7, #20]
 80131de:	f000 f8cf 	bl	8013380 <prvInsertTimerInActiveList>
 80131e2:	4603      	mov	r3, r0
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d01f      	beq.n	8013228 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80131e8:	2300      	movs	r3, #0
 80131ea:	9300      	str	r3, [sp, #0]
 80131ec:	2300      	movs	r3, #0
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	2100      	movs	r1, #0
 80131f2:	6978      	ldr	r0, [r7, #20]
 80131f4:	f7ff ff88 	bl	8013108 <xTimerGenericCommand>
 80131f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80131fa:	693b      	ldr	r3, [r7, #16]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d113      	bne.n	8013228 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013204:	f383 8811 	msr	BASEPRI, r3
 8013208:	f3bf 8f6f 	isb	sy
 801320c:	f3bf 8f4f 	dsb	sy
 8013210:	60fb      	str	r3, [r7, #12]
}
 8013212:	bf00      	nop
 8013214:	e7fe      	b.n	8013214 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801321c:	f023 0301 	bic.w	r3, r3, #1
 8013220:	b2da      	uxtb	r2, r3
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	6a1b      	ldr	r3, [r3, #32]
 801322c:	6978      	ldr	r0, [r7, #20]
 801322e:	4798      	blx	r3
}
 8013230:	bf00      	nop
 8013232:	3718      	adds	r7, #24
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}
 8013238:	20001744 	.word	0x20001744

0801323c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b084      	sub	sp, #16
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013244:	f107 0308 	add.w	r3, r7, #8
 8013248:	4618      	mov	r0, r3
 801324a:	f000 f857 	bl	80132fc <prvGetNextExpireTime>
 801324e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	4619      	mov	r1, r3
 8013254:	68f8      	ldr	r0, [r7, #12]
 8013256:	f000 f803 	bl	8013260 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801325a:	f000 f8d3 	bl	8013404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801325e:	e7f1      	b.n	8013244 <prvTimerTask+0x8>

08013260 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b084      	sub	sp, #16
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
 8013268:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801326a:	f7ff f9f1 	bl	8012650 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801326e:	f107 0308 	add.w	r3, r7, #8
 8013272:	4618      	mov	r0, r3
 8013274:	f000 f864 	bl	8013340 <prvSampleTimeNow>
 8013278:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d130      	bne.n	80132e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d10a      	bne.n	801329c <prvProcessTimerOrBlockTask+0x3c>
 8013286:	687a      	ldr	r2, [r7, #4]
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	429a      	cmp	r2, r3
 801328c:	d806      	bhi.n	801329c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801328e:	f7ff f9ed 	bl	801266c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013292:	68f9      	ldr	r1, [r7, #12]
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f7ff ff85 	bl	80131a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801329a:	e024      	b.n	80132e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d008      	beq.n	80132b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80132a2:	4b13      	ldr	r3, [pc, #76]	; (80132f0 <prvProcessTimerOrBlockTask+0x90>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d101      	bne.n	80132b0 <prvProcessTimerOrBlockTask+0x50>
 80132ac:	2301      	movs	r3, #1
 80132ae:	e000      	b.n	80132b2 <prvProcessTimerOrBlockTask+0x52>
 80132b0:	2300      	movs	r3, #0
 80132b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80132b4:	4b0f      	ldr	r3, [pc, #60]	; (80132f4 <prvProcessTimerOrBlockTask+0x94>)
 80132b6:	6818      	ldr	r0, [r3, #0]
 80132b8:	687a      	ldr	r2, [r7, #4]
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	1ad3      	subs	r3, r2, r3
 80132be:	683a      	ldr	r2, [r7, #0]
 80132c0:	4619      	mov	r1, r3
 80132c2:	f7fe ff0d 	bl	80120e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80132c6:	f7ff f9d1 	bl	801266c <xTaskResumeAll>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d10a      	bne.n	80132e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80132d0:	4b09      	ldr	r3, [pc, #36]	; (80132f8 <prvProcessTimerOrBlockTask+0x98>)
 80132d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132d6:	601a      	str	r2, [r3, #0]
 80132d8:	f3bf 8f4f 	dsb	sy
 80132dc:	f3bf 8f6f 	isb	sy
}
 80132e0:	e001      	b.n	80132e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80132e2:	f7ff f9c3 	bl	801266c <xTaskResumeAll>
}
 80132e6:	bf00      	nop
 80132e8:	3710      	adds	r7, #16
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	20001748 	.word	0x20001748
 80132f4:	2000174c 	.word	0x2000174c
 80132f8:	e000ed04 	.word	0xe000ed04

080132fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80132fc:	b480      	push	{r7}
 80132fe:	b085      	sub	sp, #20
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013304:	4b0d      	ldr	r3, [pc, #52]	; (801333c <prvGetNextExpireTime+0x40>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d101      	bne.n	8013312 <prvGetNextExpireTime+0x16>
 801330e:	2201      	movs	r2, #1
 8013310:	e000      	b.n	8013314 <prvGetNextExpireTime+0x18>
 8013312:	2200      	movs	r2, #0
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d105      	bne.n	801332c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013320:	4b06      	ldr	r3, [pc, #24]	; (801333c <prvGetNextExpireTime+0x40>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	68db      	ldr	r3, [r3, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	60fb      	str	r3, [r7, #12]
 801332a:	e001      	b.n	8013330 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801332c:	2300      	movs	r3, #0
 801332e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013330:	68fb      	ldr	r3, [r7, #12]
}
 8013332:	4618      	mov	r0, r3
 8013334:	3714      	adds	r7, #20
 8013336:	46bd      	mov	sp, r7
 8013338:	bc80      	pop	{r7}
 801333a:	4770      	bx	lr
 801333c:	20001744 	.word	0x20001744

08013340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b084      	sub	sp, #16
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013348:	f7ff fa2c 	bl	80127a4 <xTaskGetTickCount>
 801334c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801334e:	4b0b      	ldr	r3, [pc, #44]	; (801337c <prvSampleTimeNow+0x3c>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	68fa      	ldr	r2, [r7, #12]
 8013354:	429a      	cmp	r2, r3
 8013356:	d205      	bcs.n	8013364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013358:	f000 f91a 	bl	8013590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2201      	movs	r2, #1
 8013360:	601a      	str	r2, [r3, #0]
 8013362:	e002      	b.n	801336a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2200      	movs	r2, #0
 8013368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801336a:	4a04      	ldr	r2, [pc, #16]	; (801337c <prvSampleTimeNow+0x3c>)
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013370:	68fb      	ldr	r3, [r7, #12]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	20001754 	.word	0x20001754

08013380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b086      	sub	sp, #24
 8013384:	af00      	add	r7, sp, #0
 8013386:	60f8      	str	r0, [r7, #12]
 8013388:	60b9      	str	r1, [r7, #8]
 801338a:	607a      	str	r2, [r7, #4]
 801338c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801338e:	2300      	movs	r3, #0
 8013390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	68ba      	ldr	r2, [r7, #8]
 8013396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	68fa      	ldr	r2, [r7, #12]
 801339c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801339e:	68ba      	ldr	r2, [r7, #8]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d812      	bhi.n	80133cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	1ad2      	subs	r2, r2, r3
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	699b      	ldr	r3, [r3, #24]
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d302      	bcc.n	80133ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80133b4:	2301      	movs	r3, #1
 80133b6:	617b      	str	r3, [r7, #20]
 80133b8:	e01b      	b.n	80133f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80133ba:	4b10      	ldr	r3, [pc, #64]	; (80133fc <prvInsertTimerInActiveList+0x7c>)
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	3304      	adds	r3, #4
 80133c2:	4619      	mov	r1, r3
 80133c4:	4610      	mov	r0, r2
 80133c6:	f7fe f8ef 	bl	80115a8 <vListInsert>
 80133ca:	e012      	b.n	80133f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d206      	bcs.n	80133e2 <prvInsertTimerInActiveList+0x62>
 80133d4:	68ba      	ldr	r2, [r7, #8]
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d302      	bcc.n	80133e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80133dc:	2301      	movs	r3, #1
 80133de:	617b      	str	r3, [r7, #20]
 80133e0:	e007      	b.n	80133f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80133e2:	4b07      	ldr	r3, [pc, #28]	; (8013400 <prvInsertTimerInActiveList+0x80>)
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	3304      	adds	r3, #4
 80133ea:	4619      	mov	r1, r3
 80133ec:	4610      	mov	r0, r2
 80133ee:	f7fe f8db 	bl	80115a8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80133f2:	697b      	ldr	r3, [r7, #20]
}
 80133f4:	4618      	mov	r0, r3
 80133f6:	3718      	adds	r7, #24
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd80      	pop	{r7, pc}
 80133fc:	20001748 	.word	0x20001748
 8013400:	20001744 	.word	0x20001744

08013404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b08c      	sub	sp, #48	; 0x30
 8013408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801340a:	e0ae      	b.n	801356a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801340c:	68bb      	ldr	r3, [r7, #8]
 801340e:	2b00      	cmp	r3, #0
 8013410:	f2c0 80ab 	blt.w	801356a <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341a:	695b      	ldr	r3, [r3, #20]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d004      	beq.n	801342a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013422:	3304      	adds	r3, #4
 8013424:	4618      	mov	r0, r3
 8013426:	f7fe f8f7 	bl	8011618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801342a:	1d3b      	adds	r3, r7, #4
 801342c:	4618      	mov	r0, r3
 801342e:	f7ff ff87 	bl	8013340 <prvSampleTimeNow>
 8013432:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8013434:	68bb      	ldr	r3, [r7, #8]
 8013436:	2b09      	cmp	r3, #9
 8013438:	f200 8096 	bhi.w	8013568 <prvProcessReceivedCommands+0x164>
 801343c:	a201      	add	r2, pc, #4	; (adr r2, 8013444 <prvProcessReceivedCommands+0x40>)
 801343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013442:	bf00      	nop
 8013444:	0801346d 	.word	0x0801346d
 8013448:	0801346d 	.word	0x0801346d
 801344c:	0801346d 	.word	0x0801346d
 8013450:	080134e1 	.word	0x080134e1
 8013454:	080134f5 	.word	0x080134f5
 8013458:	0801353f 	.word	0x0801353f
 801345c:	0801346d 	.word	0x0801346d
 8013460:	0801346d 	.word	0x0801346d
 8013464:	080134e1 	.word	0x080134e1
 8013468:	080134f5 	.word	0x080134f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013472:	f043 0301 	orr.w	r3, r3, #1
 8013476:	b2da      	uxtb	r2, r3
 8013478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801347e:	68fa      	ldr	r2, [r7, #12]
 8013480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013482:	699b      	ldr	r3, [r3, #24]
 8013484:	18d1      	adds	r1, r2, r3
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	6a3a      	ldr	r2, [r7, #32]
 801348a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801348c:	f7ff ff78 	bl	8013380 <prvInsertTimerInActiveList>
 8013490:	4603      	mov	r3, r0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d069      	beq.n	801356a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013498:	6a1b      	ldr	r3, [r3, #32]
 801349a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801349c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80134a4:	f003 0304 	and.w	r3, r3, #4
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d05e      	beq.n	801356a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80134ac:	68fa      	ldr	r2, [r7, #12]
 80134ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b0:	699b      	ldr	r3, [r3, #24]
 80134b2:	441a      	add	r2, r3
 80134b4:	2300      	movs	r3, #0
 80134b6:	9300      	str	r3, [sp, #0]
 80134b8:	2300      	movs	r3, #0
 80134ba:	2100      	movs	r1, #0
 80134bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134be:	f7ff fe23 	bl	8013108 <xTimerGenericCommand>
 80134c2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d14f      	bne.n	801356a <prvProcessReceivedCommands+0x166>
	__asm volatile
 80134ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ce:	f383 8811 	msr	BASEPRI, r3
 80134d2:	f3bf 8f6f 	isb	sy
 80134d6:	f3bf 8f4f 	dsb	sy
 80134da:	61bb      	str	r3, [r7, #24]
}
 80134dc:	bf00      	nop
 80134de:	e7fe      	b.n	80134de <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80134e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80134e6:	f023 0301 	bic.w	r3, r3, #1
 80134ea:	b2da      	uxtb	r2, r3
 80134ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80134f2:	e03a      	b.n	801356a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80134f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80134fa:	f043 0301 	orr.w	r3, r3, #1
 80134fe:	b2da      	uxtb	r2, r3
 8013500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013506:	68fa      	ldr	r2, [r7, #12]
 8013508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801350a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801350e:	699b      	ldr	r3, [r3, #24]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d10a      	bne.n	801352a <prvProcessReceivedCommands+0x126>
	__asm volatile
 8013514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013518:	f383 8811 	msr	BASEPRI, r3
 801351c:	f3bf 8f6f 	isb	sy
 8013520:	f3bf 8f4f 	dsb	sy
 8013524:	617b      	str	r3, [r7, #20]
}
 8013526:	bf00      	nop
 8013528:	e7fe      	b.n	8013528 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801352c:	699a      	ldr	r2, [r3, #24]
 801352e:	6a3b      	ldr	r3, [r7, #32]
 8013530:	18d1      	adds	r1, r2, r3
 8013532:	6a3b      	ldr	r3, [r7, #32]
 8013534:	6a3a      	ldr	r2, [r7, #32]
 8013536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013538:	f7ff ff22 	bl	8013380 <prvInsertTimerInActiveList>
					break;
 801353c:	e015      	b.n	801356a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013544:	f003 0302 	and.w	r3, r3, #2
 8013548:	2b00      	cmp	r3, #0
 801354a:	d103      	bne.n	8013554 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 801354c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801354e:	f000 fb7f 	bl	8013c50 <vPortFree>
 8013552:	e00a      	b.n	801356a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801355a:	f023 0301 	bic.w	r3, r3, #1
 801355e:	b2da      	uxtb	r2, r3
 8013560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013566:	e000      	b.n	801356a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8013568:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801356a:	4b08      	ldr	r3, [pc, #32]	; (801358c <prvProcessReceivedCommands+0x188>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	f107 0108 	add.w	r1, r7, #8
 8013572:	2200      	movs	r2, #0
 8013574:	4618      	mov	r0, r3
 8013576:	f7fe fb9b 	bl	8011cb0 <xQueueReceive>
 801357a:	4603      	mov	r3, r0
 801357c:	2b00      	cmp	r3, #0
 801357e:	f47f af45 	bne.w	801340c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013582:	bf00      	nop
 8013584:	bf00      	nop
 8013586:	3728      	adds	r7, #40	; 0x28
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	2000174c 	.word	0x2000174c

08013590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b088      	sub	sp, #32
 8013594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013596:	e048      	b.n	801362a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013598:	4b2d      	ldr	r3, [pc, #180]	; (8013650 <prvSwitchTimerLists+0xc0>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	68db      	ldr	r3, [r3, #12]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135a2:	4b2b      	ldr	r3, [pc, #172]	; (8013650 <prvSwitchTimerLists+0xc0>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	68db      	ldr	r3, [r3, #12]
 80135a8:	68db      	ldr	r3, [r3, #12]
 80135aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	3304      	adds	r3, #4
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7fe f831 	bl	8011618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	6a1b      	ldr	r3, [r3, #32]
 80135ba:	68f8      	ldr	r0, [r7, #12]
 80135bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80135c4:	f003 0304 	and.w	r3, r3, #4
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d02e      	beq.n	801362a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	699b      	ldr	r3, [r3, #24]
 80135d0:	693a      	ldr	r2, [r7, #16]
 80135d2:	4413      	add	r3, r2
 80135d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80135d6:	68ba      	ldr	r2, [r7, #8]
 80135d8:	693b      	ldr	r3, [r7, #16]
 80135da:	429a      	cmp	r2, r3
 80135dc:	d90e      	bls.n	80135fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	68ba      	ldr	r2, [r7, #8]
 80135e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	68fa      	ldr	r2, [r7, #12]
 80135e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80135ea:	4b19      	ldr	r3, [pc, #100]	; (8013650 <prvSwitchTimerLists+0xc0>)
 80135ec:	681a      	ldr	r2, [r3, #0]
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	3304      	adds	r3, #4
 80135f2:	4619      	mov	r1, r3
 80135f4:	4610      	mov	r0, r2
 80135f6:	f7fd ffd7 	bl	80115a8 <vListInsert>
 80135fa:	e016      	b.n	801362a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80135fc:	2300      	movs	r3, #0
 80135fe:	9300      	str	r3, [sp, #0]
 8013600:	2300      	movs	r3, #0
 8013602:	693a      	ldr	r2, [r7, #16]
 8013604:	2100      	movs	r1, #0
 8013606:	68f8      	ldr	r0, [r7, #12]
 8013608:	f7ff fd7e 	bl	8013108 <xTimerGenericCommand>
 801360c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d10a      	bne.n	801362a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013618:	f383 8811 	msr	BASEPRI, r3
 801361c:	f3bf 8f6f 	isb	sy
 8013620:	f3bf 8f4f 	dsb	sy
 8013624:	603b      	str	r3, [r7, #0]
}
 8013626:	bf00      	nop
 8013628:	e7fe      	b.n	8013628 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801362a:	4b09      	ldr	r3, [pc, #36]	; (8013650 <prvSwitchTimerLists+0xc0>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d1b1      	bne.n	8013598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013634:	4b06      	ldr	r3, [pc, #24]	; (8013650 <prvSwitchTimerLists+0xc0>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801363a:	4b06      	ldr	r3, [pc, #24]	; (8013654 <prvSwitchTimerLists+0xc4>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	4a04      	ldr	r2, [pc, #16]	; (8013650 <prvSwitchTimerLists+0xc0>)
 8013640:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013642:	4a04      	ldr	r2, [pc, #16]	; (8013654 <prvSwitchTimerLists+0xc4>)
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	6013      	str	r3, [r2, #0]
}
 8013648:	bf00      	nop
 801364a:	3718      	adds	r7, #24
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}
 8013650:	20001744 	.word	0x20001744
 8013654:	20001748 	.word	0x20001748

08013658 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801365e:	f000 f92d 	bl	80138bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013662:	4b15      	ldr	r3, [pc, #84]	; (80136b8 <prvCheckForValidListAndQueue+0x60>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d120      	bne.n	80136ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801366a:	4814      	ldr	r0, [pc, #80]	; (80136bc <prvCheckForValidListAndQueue+0x64>)
 801366c:	f7fd ff4e 	bl	801150c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013670:	4813      	ldr	r0, [pc, #76]	; (80136c0 <prvCheckForValidListAndQueue+0x68>)
 8013672:	f7fd ff4b 	bl	801150c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013676:	4b13      	ldr	r3, [pc, #76]	; (80136c4 <prvCheckForValidListAndQueue+0x6c>)
 8013678:	4a10      	ldr	r2, [pc, #64]	; (80136bc <prvCheckForValidListAndQueue+0x64>)
 801367a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801367c:	4b12      	ldr	r3, [pc, #72]	; (80136c8 <prvCheckForValidListAndQueue+0x70>)
 801367e:	4a10      	ldr	r2, [pc, #64]	; (80136c0 <prvCheckForValidListAndQueue+0x68>)
 8013680:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013682:	2300      	movs	r3, #0
 8013684:	9300      	str	r3, [sp, #0]
 8013686:	4b11      	ldr	r3, [pc, #68]	; (80136cc <prvCheckForValidListAndQueue+0x74>)
 8013688:	4a11      	ldr	r2, [pc, #68]	; (80136d0 <prvCheckForValidListAndQueue+0x78>)
 801368a:	210c      	movs	r1, #12
 801368c:	200a      	movs	r0, #10
 801368e:	f7fe f855 	bl	801173c <xQueueGenericCreateStatic>
 8013692:	4603      	mov	r3, r0
 8013694:	4a08      	ldr	r2, [pc, #32]	; (80136b8 <prvCheckForValidListAndQueue+0x60>)
 8013696:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013698:	4b07      	ldr	r3, [pc, #28]	; (80136b8 <prvCheckForValidListAndQueue+0x60>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d005      	beq.n	80136ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80136a0:	4b05      	ldr	r3, [pc, #20]	; (80136b8 <prvCheckForValidListAndQueue+0x60>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	490b      	ldr	r1, [pc, #44]	; (80136d4 <prvCheckForValidListAndQueue+0x7c>)
 80136a6:	4618      	mov	r0, r3
 80136a8:	f7fe fcf2 	bl	8012090 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80136ac:	f000 f936 	bl	801391c <vPortExitCritical>
}
 80136b0:	bf00      	nop
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	2000174c 	.word	0x2000174c
 80136bc:	2000171c 	.word	0x2000171c
 80136c0:	20001730 	.word	0x20001730
 80136c4:	20001744 	.word	0x20001744
 80136c8:	20001748 	.word	0x20001748
 80136cc:	200017d0 	.word	0x200017d0
 80136d0:	20001758 	.word	0x20001758
 80136d4:	0801af44 	.word	0x0801af44

080136d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80136d8:	b480      	push	{r7}
 80136da:	b085      	sub	sp, #20
 80136dc:	af00      	add	r7, sp, #0
 80136de:	60f8      	str	r0, [r7, #12]
 80136e0:	60b9      	str	r1, [r7, #8]
 80136e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	3b04      	subs	r3, #4
 80136e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80136f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	3b04      	subs	r3, #4
 80136f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	f023 0201 	bic.w	r2, r3, #1
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	3b04      	subs	r3, #4
 8013706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013708:	4a08      	ldr	r2, [pc, #32]	; (801372c <pxPortInitialiseStack+0x54>)
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	3b14      	subs	r3, #20
 8013712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013714:	687a      	ldr	r2, [r7, #4]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	3b20      	subs	r3, #32
 801371e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013720:	68fb      	ldr	r3, [r7, #12]
}
 8013722:	4618      	mov	r0, r3
 8013724:	3714      	adds	r7, #20
 8013726:	46bd      	mov	sp, r7
 8013728:	bc80      	pop	{r7}
 801372a:	4770      	bx	lr
 801372c:	08013731 	.word	0x08013731

08013730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013730:	b480      	push	{r7}
 8013732:	b085      	sub	sp, #20
 8013734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8013736:	2300      	movs	r3, #0
 8013738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801373a:	4b12      	ldr	r3, [pc, #72]	; (8013784 <prvTaskExitError+0x54>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013742:	d00a      	beq.n	801375a <prvTaskExitError+0x2a>
	__asm volatile
 8013744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013748:	f383 8811 	msr	BASEPRI, r3
 801374c:	f3bf 8f6f 	isb	sy
 8013750:	f3bf 8f4f 	dsb	sy
 8013754:	60fb      	str	r3, [r7, #12]
}
 8013756:	bf00      	nop
 8013758:	e7fe      	b.n	8013758 <prvTaskExitError+0x28>
	__asm volatile
 801375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801375e:	f383 8811 	msr	BASEPRI, r3
 8013762:	f3bf 8f6f 	isb	sy
 8013766:	f3bf 8f4f 	dsb	sy
 801376a:	60bb      	str	r3, [r7, #8]
}
 801376c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801376e:	bf00      	nop
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d0fc      	beq.n	8013770 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013776:	bf00      	nop
 8013778:	bf00      	nop
 801377a:	3714      	adds	r7, #20
 801377c:	46bd      	mov	sp, r7
 801377e:	bc80      	pop	{r7}
 8013780:	4770      	bx	lr
 8013782:	bf00      	nop
 8013784:	2000008c 	.word	0x2000008c
	...

08013790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013790:	4b07      	ldr	r3, [pc, #28]	; (80137b0 <pxCurrentTCBConst2>)
 8013792:	6819      	ldr	r1, [r3, #0]
 8013794:	6808      	ldr	r0, [r1, #0]
 8013796:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801379a:	f380 8809 	msr	PSP, r0
 801379e:	f3bf 8f6f 	isb	sy
 80137a2:	f04f 0000 	mov.w	r0, #0
 80137a6:	f380 8811 	msr	BASEPRI, r0
 80137aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80137ae:	4770      	bx	lr

080137b0 <pxCurrentTCBConst2>:
 80137b0:	200015f0 	.word	0x200015f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80137b4:	bf00      	nop
 80137b6:	bf00      	nop

080137b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80137b8:	4806      	ldr	r0, [pc, #24]	; (80137d4 <prvPortStartFirstTask+0x1c>)
 80137ba:	6800      	ldr	r0, [r0, #0]
 80137bc:	6800      	ldr	r0, [r0, #0]
 80137be:	f380 8808 	msr	MSP, r0
 80137c2:	b662      	cpsie	i
 80137c4:	b661      	cpsie	f
 80137c6:	f3bf 8f4f 	dsb	sy
 80137ca:	f3bf 8f6f 	isb	sy
 80137ce:	df00      	svc	0
 80137d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80137d2:	bf00      	nop
 80137d4:	e000ed08 	.word	0xe000ed08

080137d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80137de:	4b32      	ldr	r3, [pc, #200]	; (80138a8 <xPortStartScheduler+0xd0>)
 80137e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	b2db      	uxtb	r3, r3
 80137e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	22ff      	movs	r2, #255	; 0xff
 80137ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	b2db      	uxtb	r3, r3
 80137f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80137f8:	78fb      	ldrb	r3, [r7, #3]
 80137fa:	b2db      	uxtb	r3, r3
 80137fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013800:	b2da      	uxtb	r2, r3
 8013802:	4b2a      	ldr	r3, [pc, #168]	; (80138ac <xPortStartScheduler+0xd4>)
 8013804:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013806:	4b2a      	ldr	r3, [pc, #168]	; (80138b0 <xPortStartScheduler+0xd8>)
 8013808:	2207      	movs	r2, #7
 801380a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801380c:	e009      	b.n	8013822 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801380e:	4b28      	ldr	r3, [pc, #160]	; (80138b0 <xPortStartScheduler+0xd8>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	3b01      	subs	r3, #1
 8013814:	4a26      	ldr	r2, [pc, #152]	; (80138b0 <xPortStartScheduler+0xd8>)
 8013816:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013818:	78fb      	ldrb	r3, [r7, #3]
 801381a:	b2db      	uxtb	r3, r3
 801381c:	005b      	lsls	r3, r3, #1
 801381e:	b2db      	uxtb	r3, r3
 8013820:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013822:	78fb      	ldrb	r3, [r7, #3]
 8013824:	b2db      	uxtb	r3, r3
 8013826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801382a:	2b80      	cmp	r3, #128	; 0x80
 801382c:	d0ef      	beq.n	801380e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801382e:	4b20      	ldr	r3, [pc, #128]	; (80138b0 <xPortStartScheduler+0xd8>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	f1c3 0307 	rsb	r3, r3, #7
 8013836:	2b04      	cmp	r3, #4
 8013838:	d00a      	beq.n	8013850 <xPortStartScheduler+0x78>
	__asm volatile
 801383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801383e:	f383 8811 	msr	BASEPRI, r3
 8013842:	f3bf 8f6f 	isb	sy
 8013846:	f3bf 8f4f 	dsb	sy
 801384a:	60bb      	str	r3, [r7, #8]
}
 801384c:	bf00      	nop
 801384e:	e7fe      	b.n	801384e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013850:	4b17      	ldr	r3, [pc, #92]	; (80138b0 <xPortStartScheduler+0xd8>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	021b      	lsls	r3, r3, #8
 8013856:	4a16      	ldr	r2, [pc, #88]	; (80138b0 <xPortStartScheduler+0xd8>)
 8013858:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801385a:	4b15      	ldr	r3, [pc, #84]	; (80138b0 <xPortStartScheduler+0xd8>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013862:	4a13      	ldr	r2, [pc, #76]	; (80138b0 <xPortStartScheduler+0xd8>)
 8013864:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	b2da      	uxtb	r2, r3
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801386e:	4b11      	ldr	r3, [pc, #68]	; (80138b4 <xPortStartScheduler+0xdc>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	4a10      	ldr	r2, [pc, #64]	; (80138b4 <xPortStartScheduler+0xdc>)
 8013874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013878:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801387a:	4b0e      	ldr	r3, [pc, #56]	; (80138b4 <xPortStartScheduler+0xdc>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	4a0d      	ldr	r2, [pc, #52]	; (80138b4 <xPortStartScheduler+0xdc>)
 8013880:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013884:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013886:	f000 f8b9 	bl	80139fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801388a:	4b0b      	ldr	r3, [pc, #44]	; (80138b8 <xPortStartScheduler+0xe0>)
 801388c:	2200      	movs	r2, #0
 801388e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013890:	f7ff ff92 	bl	80137b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013894:	f7ff f84c 	bl	8012930 <vTaskSwitchContext>
	prvTaskExitError();
 8013898:	f7ff ff4a 	bl	8013730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801389c:	2300      	movs	r3, #0
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3710      	adds	r7, #16
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	e000e400 	.word	0xe000e400
 80138ac:	20001818 	.word	0x20001818
 80138b0:	2000181c 	.word	0x2000181c
 80138b4:	e000ed20 	.word	0xe000ed20
 80138b8:	2000008c 	.word	0x2000008c

080138bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80138bc:	b480      	push	{r7}
 80138be:	b083      	sub	sp, #12
 80138c0:	af00      	add	r7, sp, #0
	__asm volatile
 80138c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c6:	f383 8811 	msr	BASEPRI, r3
 80138ca:	f3bf 8f6f 	isb	sy
 80138ce:	f3bf 8f4f 	dsb	sy
 80138d2:	607b      	str	r3, [r7, #4]
}
 80138d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80138d6:	4b0f      	ldr	r3, [pc, #60]	; (8013914 <vPortEnterCritical+0x58>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	3301      	adds	r3, #1
 80138dc:	4a0d      	ldr	r2, [pc, #52]	; (8013914 <vPortEnterCritical+0x58>)
 80138de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80138e0:	4b0c      	ldr	r3, [pc, #48]	; (8013914 <vPortEnterCritical+0x58>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d10f      	bne.n	8013908 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80138e8:	4b0b      	ldr	r3, [pc, #44]	; (8013918 <vPortEnterCritical+0x5c>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	b2db      	uxtb	r3, r3
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d00a      	beq.n	8013908 <vPortEnterCritical+0x4c>
	__asm volatile
 80138f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f6:	f383 8811 	msr	BASEPRI, r3
 80138fa:	f3bf 8f6f 	isb	sy
 80138fe:	f3bf 8f4f 	dsb	sy
 8013902:	603b      	str	r3, [r7, #0]
}
 8013904:	bf00      	nop
 8013906:	e7fe      	b.n	8013906 <vPortEnterCritical+0x4a>
	}
}
 8013908:	bf00      	nop
 801390a:	370c      	adds	r7, #12
 801390c:	46bd      	mov	sp, r7
 801390e:	bc80      	pop	{r7}
 8013910:	4770      	bx	lr
 8013912:	bf00      	nop
 8013914:	2000008c 	.word	0x2000008c
 8013918:	e000ed04 	.word	0xe000ed04

0801391c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801391c:	b480      	push	{r7}
 801391e:	b083      	sub	sp, #12
 8013920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013922:	4b11      	ldr	r3, [pc, #68]	; (8013968 <vPortExitCritical+0x4c>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d10a      	bne.n	8013940 <vPortExitCritical+0x24>
	__asm volatile
 801392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801392e:	f383 8811 	msr	BASEPRI, r3
 8013932:	f3bf 8f6f 	isb	sy
 8013936:	f3bf 8f4f 	dsb	sy
 801393a:	607b      	str	r3, [r7, #4]
}
 801393c:	bf00      	nop
 801393e:	e7fe      	b.n	801393e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013940:	4b09      	ldr	r3, [pc, #36]	; (8013968 <vPortExitCritical+0x4c>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	3b01      	subs	r3, #1
 8013946:	4a08      	ldr	r2, [pc, #32]	; (8013968 <vPortExitCritical+0x4c>)
 8013948:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801394a:	4b07      	ldr	r3, [pc, #28]	; (8013968 <vPortExitCritical+0x4c>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d105      	bne.n	801395e <vPortExitCritical+0x42>
 8013952:	2300      	movs	r3, #0
 8013954:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013956:	683b      	ldr	r3, [r7, #0]
 8013958:	f383 8811 	msr	BASEPRI, r3
}
 801395c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801395e:	bf00      	nop
 8013960:	370c      	adds	r7, #12
 8013962:	46bd      	mov	sp, r7
 8013964:	bc80      	pop	{r7}
 8013966:	4770      	bx	lr
 8013968:	2000008c 	.word	0x2000008c
 801396c:	00000000 	.word	0x00000000

08013970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013970:	f3ef 8009 	mrs	r0, PSP
 8013974:	f3bf 8f6f 	isb	sy
 8013978:	4b0d      	ldr	r3, [pc, #52]	; (80139b0 <pxCurrentTCBConst>)
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013980:	6010      	str	r0, [r2, #0]
 8013982:	e92d 4008 	stmdb	sp!, {r3, lr}
 8013986:	f04f 0050 	mov.w	r0, #80	; 0x50
 801398a:	f380 8811 	msr	BASEPRI, r0
 801398e:	f7fe ffcf 	bl	8012930 <vTaskSwitchContext>
 8013992:	f04f 0000 	mov.w	r0, #0
 8013996:	f380 8811 	msr	BASEPRI, r0
 801399a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801399e:	6819      	ldr	r1, [r3, #0]
 80139a0:	6808      	ldr	r0, [r1, #0]
 80139a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80139a6:	f380 8809 	msr	PSP, r0
 80139aa:	f3bf 8f6f 	isb	sy
 80139ae:	4770      	bx	lr

080139b0 <pxCurrentTCBConst>:
 80139b0:	200015f0 	.word	0x200015f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80139b4:	bf00      	nop
 80139b6:	bf00      	nop

080139b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
	__asm volatile
 80139be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c2:	f383 8811 	msr	BASEPRI, r3
 80139c6:	f3bf 8f6f 	isb	sy
 80139ca:	f3bf 8f4f 	dsb	sy
 80139ce:	607b      	str	r3, [r7, #4]
}
 80139d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80139d2:	f7fe fef5 	bl	80127c0 <xTaskIncrementTick>
 80139d6:	4603      	mov	r3, r0
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d003      	beq.n	80139e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80139dc:	4b06      	ldr	r3, [pc, #24]	; (80139f8 <SysTick_Handler+0x40>)
 80139de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139e2:	601a      	str	r2, [r3, #0]
 80139e4:	2300      	movs	r3, #0
 80139e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	f383 8811 	msr	BASEPRI, r3
}
 80139ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80139f0:	bf00      	nop
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}
 80139f8:	e000ed04 	.word	0xe000ed04

080139fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80139fc:	b480      	push	{r7}
 80139fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013a00:	4b0a      	ldr	r3, [pc, #40]	; (8013a2c <vPortSetupTimerInterrupt+0x30>)
 8013a02:	2200      	movs	r2, #0
 8013a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013a06:	4b0a      	ldr	r3, [pc, #40]	; (8013a30 <vPortSetupTimerInterrupt+0x34>)
 8013a08:	2200      	movs	r2, #0
 8013a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013a0c:	4b09      	ldr	r3, [pc, #36]	; (8013a34 <vPortSetupTimerInterrupt+0x38>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	4a09      	ldr	r2, [pc, #36]	; (8013a38 <vPortSetupTimerInterrupt+0x3c>)
 8013a12:	fba2 2303 	umull	r2, r3, r2, r3
 8013a16:	099b      	lsrs	r3, r3, #6
 8013a18:	4a08      	ldr	r2, [pc, #32]	; (8013a3c <vPortSetupTimerInterrupt+0x40>)
 8013a1a:	3b01      	subs	r3, #1
 8013a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013a1e:	4b03      	ldr	r3, [pc, #12]	; (8013a2c <vPortSetupTimerInterrupt+0x30>)
 8013a20:	2207      	movs	r2, #7
 8013a22:	601a      	str	r2, [r3, #0]
}
 8013a24:	bf00      	nop
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bc80      	pop	{r7}
 8013a2a:	4770      	bx	lr
 8013a2c:	e000e010 	.word	0xe000e010
 8013a30:	e000e018 	.word	0xe000e018
 8013a34:	20000080 	.word	0x20000080
 8013a38:	10624dd3 	.word	0x10624dd3
 8013a3c:	e000e014 	.word	0xe000e014

08013a40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013a40:	b480      	push	{r7}
 8013a42:	b085      	sub	sp, #20
 8013a44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013a46:	f3ef 8305 	mrs	r3, IPSR
 8013a4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	2b0f      	cmp	r3, #15
 8013a50:	d914      	bls.n	8013a7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013a52:	4a16      	ldr	r2, [pc, #88]	; (8013aac <vPortValidateInterruptPriority+0x6c>)
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	4413      	add	r3, r2
 8013a58:	781b      	ldrb	r3, [r3, #0]
 8013a5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013a5c:	4b14      	ldr	r3, [pc, #80]	; (8013ab0 <vPortValidateInterruptPriority+0x70>)
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	7afa      	ldrb	r2, [r7, #11]
 8013a62:	429a      	cmp	r2, r3
 8013a64:	d20a      	bcs.n	8013a7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a6a:	f383 8811 	msr	BASEPRI, r3
 8013a6e:	f3bf 8f6f 	isb	sy
 8013a72:	f3bf 8f4f 	dsb	sy
 8013a76:	607b      	str	r3, [r7, #4]
}
 8013a78:	bf00      	nop
 8013a7a:	e7fe      	b.n	8013a7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013a7c:	4b0d      	ldr	r3, [pc, #52]	; (8013ab4 <vPortValidateInterruptPriority+0x74>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013a84:	4b0c      	ldr	r3, [pc, #48]	; (8013ab8 <vPortValidateInterruptPriority+0x78>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	d90a      	bls.n	8013aa2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a90:	f383 8811 	msr	BASEPRI, r3
 8013a94:	f3bf 8f6f 	isb	sy
 8013a98:	f3bf 8f4f 	dsb	sy
 8013a9c:	603b      	str	r3, [r7, #0]
}
 8013a9e:	bf00      	nop
 8013aa0:	e7fe      	b.n	8013aa0 <vPortValidateInterruptPriority+0x60>
	}
 8013aa2:	bf00      	nop
 8013aa4:	3714      	adds	r7, #20
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bc80      	pop	{r7}
 8013aaa:	4770      	bx	lr
 8013aac:	e000e3f0 	.word	0xe000e3f0
 8013ab0:	20001818 	.word	0x20001818
 8013ab4:	e000ed0c 	.word	0xe000ed0c
 8013ab8:	2000181c 	.word	0x2000181c

08013abc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b08a      	sub	sp, #40	; 0x28
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013ac8:	f7fe fdc2 	bl	8012650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013acc:	4b5b      	ldr	r3, [pc, #364]	; (8013c3c <pvPortMalloc+0x180>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d101      	bne.n	8013ad8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013ad4:	f000 f916 	bl	8013d04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013ad8:	4b59      	ldr	r3, [pc, #356]	; (8013c40 <pvPortMalloc+0x184>)
 8013ada:	681a      	ldr	r2, [r3, #0]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	4013      	ands	r3, r2
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	f040 808e 	bne.w	8013c02 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d01d      	beq.n	8013b28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013aec:	2208      	movs	r2, #8
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	4413      	add	r3, r2
 8013af2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f003 0307 	and.w	r3, r3, #7
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d014      	beq.n	8013b28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	f023 0307 	bic.w	r3, r3, #7
 8013b04:	3308      	adds	r3, #8
 8013b06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f003 0307 	and.w	r3, r3, #7
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00a      	beq.n	8013b28 <pvPortMalloc+0x6c>
	__asm volatile
 8013b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b16:	f383 8811 	msr	BASEPRI, r3
 8013b1a:	f3bf 8f6f 	isb	sy
 8013b1e:	f3bf 8f4f 	dsb	sy
 8013b22:	617b      	str	r3, [r7, #20]
}
 8013b24:	bf00      	nop
 8013b26:	e7fe      	b.n	8013b26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d069      	beq.n	8013c02 <pvPortMalloc+0x146>
 8013b2e:	4b45      	ldr	r3, [pc, #276]	; (8013c44 <pvPortMalloc+0x188>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	687a      	ldr	r2, [r7, #4]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d864      	bhi.n	8013c02 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013b38:	4b43      	ldr	r3, [pc, #268]	; (8013c48 <pvPortMalloc+0x18c>)
 8013b3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013b3c:	4b42      	ldr	r3, [pc, #264]	; (8013c48 <pvPortMalloc+0x18c>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013b42:	e004      	b.n	8013b4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b50:	685b      	ldr	r3, [r3, #4]
 8013b52:	687a      	ldr	r2, [r7, #4]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d903      	bls.n	8013b60 <pvPortMalloc+0xa4>
 8013b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d1f1      	bne.n	8013b44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013b60:	4b36      	ldr	r3, [pc, #216]	; (8013c3c <pvPortMalloc+0x180>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d04b      	beq.n	8013c02 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013b6a:	6a3b      	ldr	r3, [r7, #32]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	2208      	movs	r2, #8
 8013b70:	4413      	add	r3, r2
 8013b72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	6a3b      	ldr	r3, [r7, #32]
 8013b7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7e:	685a      	ldr	r2, [r3, #4]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	1ad2      	subs	r2, r2, r3
 8013b84:	2308      	movs	r3, #8
 8013b86:	005b      	lsls	r3, r3, #1
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d91f      	bls.n	8013bcc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	4413      	add	r3, r2
 8013b92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b94:	69bb      	ldr	r3, [r7, #24]
 8013b96:	f003 0307 	and.w	r3, r3, #7
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d00a      	beq.n	8013bb4 <pvPortMalloc+0xf8>
	__asm volatile
 8013b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba2:	f383 8811 	msr	BASEPRI, r3
 8013ba6:	f3bf 8f6f 	isb	sy
 8013baa:	f3bf 8f4f 	dsb	sy
 8013bae:	613b      	str	r3, [r7, #16]
}
 8013bb0:	bf00      	nop
 8013bb2:	e7fe      	b.n	8013bb2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb6:	685a      	ldr	r2, [r3, #4]
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	1ad2      	subs	r2, r2, r3
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc2:	687a      	ldr	r2, [r7, #4]
 8013bc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013bc6:	69b8      	ldr	r0, [r7, #24]
 8013bc8:	f000 f8fe 	bl	8013dc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013bcc:	4b1d      	ldr	r3, [pc, #116]	; (8013c44 <pvPortMalloc+0x188>)
 8013bce:	681a      	ldr	r2, [r3, #0]
 8013bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	1ad3      	subs	r3, r2, r3
 8013bd6:	4a1b      	ldr	r2, [pc, #108]	; (8013c44 <pvPortMalloc+0x188>)
 8013bd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013bda:	4b1a      	ldr	r3, [pc, #104]	; (8013c44 <pvPortMalloc+0x188>)
 8013bdc:	681a      	ldr	r2, [r3, #0]
 8013bde:	4b1b      	ldr	r3, [pc, #108]	; (8013c4c <pvPortMalloc+0x190>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	429a      	cmp	r2, r3
 8013be4:	d203      	bcs.n	8013bee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013be6:	4b17      	ldr	r3, [pc, #92]	; (8013c44 <pvPortMalloc+0x188>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	4a18      	ldr	r2, [pc, #96]	; (8013c4c <pvPortMalloc+0x190>)
 8013bec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf0:	685a      	ldr	r2, [r3, #4]
 8013bf2:	4b13      	ldr	r3, [pc, #76]	; (8013c40 <pvPortMalloc+0x184>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	431a      	orrs	r2, r3
 8013bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfe:	2200      	movs	r2, #0
 8013c00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013c02:	f7fe fd33 	bl	801266c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013c06:	69fb      	ldr	r3, [r7, #28]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d101      	bne.n	8013c10 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013c0c:	f7f5 fcc4 	bl	8009598 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c10:	69fb      	ldr	r3, [r7, #28]
 8013c12:	f003 0307 	and.w	r3, r3, #7
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d00a      	beq.n	8013c30 <pvPortMalloc+0x174>
	__asm volatile
 8013c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1e:	f383 8811 	msr	BASEPRI, r3
 8013c22:	f3bf 8f6f 	isb	sy
 8013c26:	f3bf 8f4f 	dsb	sy
 8013c2a:	60fb      	str	r3, [r7, #12]
}
 8013c2c:	bf00      	nop
 8013c2e:	e7fe      	b.n	8013c2e <pvPortMalloc+0x172>
	return pvReturn;
 8013c30:	69fb      	ldr	r3, [r7, #28]
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3728      	adds	r7, #40	; 0x28
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	20004828 	.word	0x20004828
 8013c40:	20004834 	.word	0x20004834
 8013c44:	2000482c 	.word	0x2000482c
 8013c48:	20004820 	.word	0x20004820
 8013c4c:	20004830 	.word	0x20004830

08013c50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b086      	sub	sp, #24
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d048      	beq.n	8013cf4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013c62:	2308      	movs	r3, #8
 8013c64:	425b      	negs	r3, r3
 8013c66:	697a      	ldr	r2, [r7, #20]
 8013c68:	4413      	add	r3, r2
 8013c6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013c70:	693b      	ldr	r3, [r7, #16]
 8013c72:	685a      	ldr	r2, [r3, #4]
 8013c74:	4b21      	ldr	r3, [pc, #132]	; (8013cfc <vPortFree+0xac>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	4013      	ands	r3, r2
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d10a      	bne.n	8013c94 <vPortFree+0x44>
	__asm volatile
 8013c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c82:	f383 8811 	msr	BASEPRI, r3
 8013c86:	f3bf 8f6f 	isb	sy
 8013c8a:	f3bf 8f4f 	dsb	sy
 8013c8e:	60fb      	str	r3, [r7, #12]
}
 8013c90:	bf00      	nop
 8013c92:	e7fe      	b.n	8013c92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013c94:	693b      	ldr	r3, [r7, #16]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d00a      	beq.n	8013cb2 <vPortFree+0x62>
	__asm volatile
 8013c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca0:	f383 8811 	msr	BASEPRI, r3
 8013ca4:	f3bf 8f6f 	isb	sy
 8013ca8:	f3bf 8f4f 	dsb	sy
 8013cac:	60bb      	str	r3, [r7, #8]
}
 8013cae:	bf00      	nop
 8013cb0:	e7fe      	b.n	8013cb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	685a      	ldr	r2, [r3, #4]
 8013cb6:	4b11      	ldr	r3, [pc, #68]	; (8013cfc <vPortFree+0xac>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	4013      	ands	r3, r2
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d019      	beq.n	8013cf4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013cc0:	693b      	ldr	r3, [r7, #16]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d115      	bne.n	8013cf4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	685a      	ldr	r2, [r3, #4]
 8013ccc:	4b0b      	ldr	r3, [pc, #44]	; (8013cfc <vPortFree+0xac>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	43db      	mvns	r3, r3
 8013cd2:	401a      	ands	r2, r3
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013cd8:	f7fe fcba 	bl	8012650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013cdc:	693b      	ldr	r3, [r7, #16]
 8013cde:	685a      	ldr	r2, [r3, #4]
 8013ce0:	4b07      	ldr	r3, [pc, #28]	; (8013d00 <vPortFree+0xb0>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	4a06      	ldr	r2, [pc, #24]	; (8013d00 <vPortFree+0xb0>)
 8013ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013cea:	6938      	ldr	r0, [r7, #16]
 8013cec:	f000 f86c 	bl	8013dc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013cf0:	f7fe fcbc 	bl	801266c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013cf4:	bf00      	nop
 8013cf6:	3718      	adds	r7, #24
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}
 8013cfc:	20004834 	.word	0x20004834
 8013d00:	2000482c 	.word	0x2000482c

08013d04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013d04:	b480      	push	{r7}
 8013d06:	b085      	sub	sp, #20
 8013d08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013d0a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8013d0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013d10:	4b27      	ldr	r3, [pc, #156]	; (8013db0 <prvHeapInit+0xac>)
 8013d12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	f003 0307 	and.w	r3, r3, #7
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d00c      	beq.n	8013d38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	3307      	adds	r3, #7
 8013d22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f023 0307 	bic.w	r3, r3, #7
 8013d2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013d2c:	68ba      	ldr	r2, [r7, #8]
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	1ad3      	subs	r3, r2, r3
 8013d32:	4a1f      	ldr	r2, [pc, #124]	; (8013db0 <prvHeapInit+0xac>)
 8013d34:	4413      	add	r3, r2
 8013d36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013d3c:	4a1d      	ldr	r2, [pc, #116]	; (8013db4 <prvHeapInit+0xb0>)
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013d42:	4b1c      	ldr	r3, [pc, #112]	; (8013db4 <prvHeapInit+0xb0>)
 8013d44:	2200      	movs	r2, #0
 8013d46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	68ba      	ldr	r2, [r7, #8]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013d50:	2208      	movs	r2, #8
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	1a9b      	subs	r3, r3, r2
 8013d56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	f023 0307 	bic.w	r3, r3, #7
 8013d5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	4a15      	ldr	r2, [pc, #84]	; (8013db8 <prvHeapInit+0xb4>)
 8013d64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013d66:	4b14      	ldr	r3, [pc, #80]	; (8013db8 <prvHeapInit+0xb4>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013d6e:	4b12      	ldr	r3, [pc, #72]	; (8013db8 <prvHeapInit+0xb4>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	2200      	movs	r2, #0
 8013d74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	68fa      	ldr	r2, [r7, #12]
 8013d7e:	1ad2      	subs	r2, r2, r3
 8013d80:	683b      	ldr	r3, [r7, #0]
 8013d82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013d84:	4b0c      	ldr	r3, [pc, #48]	; (8013db8 <prvHeapInit+0xb4>)
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	685b      	ldr	r3, [r3, #4]
 8013d90:	4a0a      	ldr	r2, [pc, #40]	; (8013dbc <prvHeapInit+0xb8>)
 8013d92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	685b      	ldr	r3, [r3, #4]
 8013d98:	4a09      	ldr	r2, [pc, #36]	; (8013dc0 <prvHeapInit+0xbc>)
 8013d9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013d9c:	4b09      	ldr	r3, [pc, #36]	; (8013dc4 <prvHeapInit+0xc0>)
 8013d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013da2:	601a      	str	r2, [r3, #0]
}
 8013da4:	bf00      	nop
 8013da6:	3714      	adds	r7, #20
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bc80      	pop	{r7}
 8013dac:	4770      	bx	lr
 8013dae:	bf00      	nop
 8013db0:	20001820 	.word	0x20001820
 8013db4:	20004820 	.word	0x20004820
 8013db8:	20004828 	.word	0x20004828
 8013dbc:	20004830 	.word	0x20004830
 8013dc0:	2000482c 	.word	0x2000482c
 8013dc4:	20004834 	.word	0x20004834

08013dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b085      	sub	sp, #20
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013dd0:	4b27      	ldr	r3, [pc, #156]	; (8013e70 <prvInsertBlockIntoFreeList+0xa8>)
 8013dd2:	60fb      	str	r3, [r7, #12]
 8013dd4:	e002      	b.n	8013ddc <prvInsertBlockIntoFreeList+0x14>
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	60fb      	str	r3, [r7, #12]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	687a      	ldr	r2, [r7, #4]
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d8f7      	bhi.n	8013dd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	68ba      	ldr	r2, [r7, #8]
 8013df0:	4413      	add	r3, r2
 8013df2:	687a      	ldr	r2, [r7, #4]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d108      	bne.n	8013e0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	685a      	ldr	r2, [r3, #4]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	685b      	ldr	r3, [r3, #4]
 8013e00:	441a      	add	r2, r3
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	68ba      	ldr	r2, [r7, #8]
 8013e14:	441a      	add	r2, r3
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	429a      	cmp	r2, r3
 8013e1c:	d118      	bne.n	8013e50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	4b14      	ldr	r3, [pc, #80]	; (8013e74 <prvInsertBlockIntoFreeList+0xac>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d00d      	beq.n	8013e46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	685a      	ldr	r2, [r3, #4]
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	441a      	add	r2, r3
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	681a      	ldr	r2, [r3, #0]
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	601a      	str	r2, [r3, #0]
 8013e44:	e008      	b.n	8013e58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013e46:	4b0b      	ldr	r3, [pc, #44]	; (8013e74 <prvInsertBlockIntoFreeList+0xac>)
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	601a      	str	r2, [r3, #0]
 8013e4e:	e003      	b.n	8013e58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	681a      	ldr	r2, [r3, #0]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013e58:	68fa      	ldr	r2, [r7, #12]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d002      	beq.n	8013e66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	687a      	ldr	r2, [r7, #4]
 8013e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013e66:	bf00      	nop
 8013e68:	3714      	adds	r7, #20
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bc80      	pop	{r7}
 8013e6e:	4770      	bx	lr
 8013e70:	20004820 	.word	0x20004820
 8013e74:	20004828 	.word	0x20004828

08013e78 <std>:
 8013e78:	2300      	movs	r3, #0
 8013e7a:	b510      	push	{r4, lr}
 8013e7c:	4604      	mov	r4, r0
 8013e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8013e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013e86:	6083      	str	r3, [r0, #8]
 8013e88:	8181      	strh	r1, [r0, #12]
 8013e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8013e8c:	81c2      	strh	r2, [r0, #14]
 8013e8e:	6183      	str	r3, [r0, #24]
 8013e90:	4619      	mov	r1, r3
 8013e92:	2208      	movs	r2, #8
 8013e94:	305c      	adds	r0, #92	; 0x5c
 8013e96:	f000 fb5d 	bl	8014554 <memset>
 8013e9a:	4b05      	ldr	r3, [pc, #20]	; (8013eb0 <std+0x38>)
 8013e9c:	6223      	str	r3, [r4, #32]
 8013e9e:	4b05      	ldr	r3, [pc, #20]	; (8013eb4 <std+0x3c>)
 8013ea0:	6263      	str	r3, [r4, #36]	; 0x24
 8013ea2:	4b05      	ldr	r3, [pc, #20]	; (8013eb8 <std+0x40>)
 8013ea4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013ea6:	4b05      	ldr	r3, [pc, #20]	; (8013ebc <std+0x44>)
 8013ea8:	61e4      	str	r4, [r4, #28]
 8013eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013eac:	bd10      	pop	{r4, pc}
 8013eae:	bf00      	nop
 8013eb0:	080143e9 	.word	0x080143e9
 8013eb4:	0801440b 	.word	0x0801440b
 8013eb8:	08014443 	.word	0x08014443
 8013ebc:	08014467 	.word	0x08014467

08013ec0 <stdio_exit_handler>:
 8013ec0:	4a02      	ldr	r2, [pc, #8]	; (8013ecc <stdio_exit_handler+0xc>)
 8013ec2:	4903      	ldr	r1, [pc, #12]	; (8013ed0 <stdio_exit_handler+0x10>)
 8013ec4:	4803      	ldr	r0, [pc, #12]	; (8013ed4 <stdio_exit_handler+0x14>)
 8013ec6:	f000 b9c5 	b.w	8014254 <_fwalk_sglue>
 8013eca:	bf00      	nop
 8013ecc:	20000090 	.word	0x20000090
 8013ed0:	080183c9 	.word	0x080183c9
 8013ed4:	200000a0 	.word	0x200000a0

08013ed8 <cleanup_stdio>:
 8013ed8:	6841      	ldr	r1, [r0, #4]
 8013eda:	4b0c      	ldr	r3, [pc, #48]	; (8013f0c <cleanup_stdio+0x34>)
 8013edc:	4299      	cmp	r1, r3
 8013ede:	b510      	push	{r4, lr}
 8013ee0:	4604      	mov	r4, r0
 8013ee2:	d001      	beq.n	8013ee8 <cleanup_stdio+0x10>
 8013ee4:	f004 fa70 	bl	80183c8 <_fclose_r>
 8013ee8:	68a1      	ldr	r1, [r4, #8]
 8013eea:	4b09      	ldr	r3, [pc, #36]	; (8013f10 <cleanup_stdio+0x38>)
 8013eec:	4299      	cmp	r1, r3
 8013eee:	d002      	beq.n	8013ef6 <cleanup_stdio+0x1e>
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	f004 fa69 	bl	80183c8 <_fclose_r>
 8013ef6:	68e1      	ldr	r1, [r4, #12]
 8013ef8:	4b06      	ldr	r3, [pc, #24]	; (8013f14 <cleanup_stdio+0x3c>)
 8013efa:	4299      	cmp	r1, r3
 8013efc:	d004      	beq.n	8013f08 <cleanup_stdio+0x30>
 8013efe:	4620      	mov	r0, r4
 8013f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f04:	f004 ba60 	b.w	80183c8 <_fclose_r>
 8013f08:	bd10      	pop	{r4, pc}
 8013f0a:	bf00      	nop
 8013f0c:	20004838 	.word	0x20004838
 8013f10:	200048a0 	.word	0x200048a0
 8013f14:	20004908 	.word	0x20004908

08013f18 <global_stdio_init.part.0>:
 8013f18:	b510      	push	{r4, lr}
 8013f1a:	4b0b      	ldr	r3, [pc, #44]	; (8013f48 <global_stdio_init.part.0+0x30>)
 8013f1c:	4c0b      	ldr	r4, [pc, #44]	; (8013f4c <global_stdio_init.part.0+0x34>)
 8013f1e:	4a0c      	ldr	r2, [pc, #48]	; (8013f50 <global_stdio_init.part.0+0x38>)
 8013f20:	601a      	str	r2, [r3, #0]
 8013f22:	4620      	mov	r0, r4
 8013f24:	2200      	movs	r2, #0
 8013f26:	2104      	movs	r1, #4
 8013f28:	f7ff ffa6 	bl	8013e78 <std>
 8013f2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013f30:	2201      	movs	r2, #1
 8013f32:	2109      	movs	r1, #9
 8013f34:	f7ff ffa0 	bl	8013e78 <std>
 8013f38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013f3c:	2202      	movs	r2, #2
 8013f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f42:	2112      	movs	r1, #18
 8013f44:	f7ff bf98 	b.w	8013e78 <std>
 8013f48:	20004970 	.word	0x20004970
 8013f4c:	20004838 	.word	0x20004838
 8013f50:	08013ec1 	.word	0x08013ec1

08013f54 <__sfp_lock_acquire>:
 8013f54:	4801      	ldr	r0, [pc, #4]	; (8013f5c <__sfp_lock_acquire+0x8>)
 8013f56:	f000 bbe7 	b.w	8014728 <__retarget_lock_acquire_recursive>
 8013f5a:	bf00      	nop
 8013f5c:	2000497a 	.word	0x2000497a

08013f60 <__sfp_lock_release>:
 8013f60:	4801      	ldr	r0, [pc, #4]	; (8013f68 <__sfp_lock_release+0x8>)
 8013f62:	f000 bbe2 	b.w	801472a <__retarget_lock_release_recursive>
 8013f66:	bf00      	nop
 8013f68:	2000497a 	.word	0x2000497a

08013f6c <__sinit>:
 8013f6c:	b510      	push	{r4, lr}
 8013f6e:	4604      	mov	r4, r0
 8013f70:	f7ff fff0 	bl	8013f54 <__sfp_lock_acquire>
 8013f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f76:	b11b      	cbz	r3, 8013f80 <__sinit+0x14>
 8013f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f7c:	f7ff bff0 	b.w	8013f60 <__sfp_lock_release>
 8013f80:	4b04      	ldr	r3, [pc, #16]	; (8013f94 <__sinit+0x28>)
 8013f82:	6363      	str	r3, [r4, #52]	; 0x34
 8013f84:	4b04      	ldr	r3, [pc, #16]	; (8013f98 <__sinit+0x2c>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d1f5      	bne.n	8013f78 <__sinit+0xc>
 8013f8c:	f7ff ffc4 	bl	8013f18 <global_stdio_init.part.0>
 8013f90:	e7f2      	b.n	8013f78 <__sinit+0xc>
 8013f92:	bf00      	nop
 8013f94:	08013ed9 	.word	0x08013ed9
 8013f98:	20004970 	.word	0x20004970

08013f9c <fprintf>:
 8013f9c:	b40e      	push	{r1, r2, r3}
 8013f9e:	b503      	push	{r0, r1, lr}
 8013fa0:	4601      	mov	r1, r0
 8013fa2:	ab03      	add	r3, sp, #12
 8013fa4:	4805      	ldr	r0, [pc, #20]	; (8013fbc <fprintf+0x20>)
 8013fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013faa:	6800      	ldr	r0, [r0, #0]
 8013fac:	9301      	str	r3, [sp, #4]
 8013fae:	f002 faab 	bl	8016508 <_vfprintf_r>
 8013fb2:	b002      	add	sp, #8
 8013fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fb8:	b003      	add	sp, #12
 8013fba:	4770      	bx	lr
 8013fbc:	200001c0 	.word	0x200001c0

08013fc0 <__sfvwrite_r>:
 8013fc0:	6893      	ldr	r3, [r2, #8]
 8013fc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc6:	4606      	mov	r6, r0
 8013fc8:	460c      	mov	r4, r1
 8013fca:	4691      	mov	r9, r2
 8013fcc:	b91b      	cbnz	r3, 8013fd6 <__sfvwrite_r+0x16>
 8013fce:	2000      	movs	r0, #0
 8013fd0:	b003      	add	sp, #12
 8013fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd6:	898b      	ldrh	r3, [r1, #12]
 8013fd8:	0718      	lsls	r0, r3, #28
 8013fda:	d54f      	bpl.n	801407c <__sfvwrite_r+0xbc>
 8013fdc:	690b      	ldr	r3, [r1, #16]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d04c      	beq.n	801407c <__sfvwrite_r+0xbc>
 8013fe2:	89a3      	ldrh	r3, [r4, #12]
 8013fe4:	f8d9 8000 	ldr.w	r8, [r9]
 8013fe8:	f013 0702 	ands.w	r7, r3, #2
 8013fec:	d16b      	bne.n	80140c6 <__sfvwrite_r+0x106>
 8013fee:	f013 0301 	ands.w	r3, r3, #1
 8013ff2:	f000 809b 	beq.w	801412c <__sfvwrite_r+0x16c>
 8013ff6:	4638      	mov	r0, r7
 8013ff8:	46ba      	mov	sl, r7
 8013ffa:	46bb      	mov	fp, r7
 8013ffc:	f1bb 0f00 	cmp.w	fp, #0
 8014000:	f000 8102 	beq.w	8014208 <__sfvwrite_r+0x248>
 8014004:	b950      	cbnz	r0, 801401c <__sfvwrite_r+0x5c>
 8014006:	465a      	mov	r2, fp
 8014008:	210a      	movs	r1, #10
 801400a:	4650      	mov	r0, sl
 801400c:	f7f4 fab8 	bl	8008580 <memchr>
 8014010:	2800      	cmp	r0, #0
 8014012:	f000 80ff 	beq.w	8014214 <__sfvwrite_r+0x254>
 8014016:	3001      	adds	r0, #1
 8014018:	eba0 070a 	sub.w	r7, r0, sl
 801401c:	6820      	ldr	r0, [r4, #0]
 801401e:	6921      	ldr	r1, [r4, #16]
 8014020:	68a5      	ldr	r5, [r4, #8]
 8014022:	6963      	ldr	r3, [r4, #20]
 8014024:	455f      	cmp	r7, fp
 8014026:	463a      	mov	r2, r7
 8014028:	bf28      	it	cs
 801402a:	465a      	movcs	r2, fp
 801402c:	4288      	cmp	r0, r1
 801402e:	f240 80f4 	bls.w	801421a <__sfvwrite_r+0x25a>
 8014032:	441d      	add	r5, r3
 8014034:	42aa      	cmp	r2, r5
 8014036:	f340 80f0 	ble.w	801421a <__sfvwrite_r+0x25a>
 801403a:	4651      	mov	r1, sl
 801403c:	462a      	mov	r2, r5
 801403e:	f000 fa6f 	bl	8014520 <memmove>
 8014042:	6823      	ldr	r3, [r4, #0]
 8014044:	442b      	add	r3, r5
 8014046:	6023      	str	r3, [r4, #0]
 8014048:	4621      	mov	r1, r4
 801404a:	4630      	mov	r0, r6
 801404c:	f004 fa9e 	bl	801858c <_fflush_r>
 8014050:	2800      	cmp	r0, #0
 8014052:	d166      	bne.n	8014122 <__sfvwrite_r+0x162>
 8014054:	1b7f      	subs	r7, r7, r5
 8014056:	f040 80f8 	bne.w	801424a <__sfvwrite_r+0x28a>
 801405a:	4621      	mov	r1, r4
 801405c:	4630      	mov	r0, r6
 801405e:	f004 fa95 	bl	801858c <_fflush_r>
 8014062:	2800      	cmp	r0, #0
 8014064:	d15d      	bne.n	8014122 <__sfvwrite_r+0x162>
 8014066:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801406a:	1b5b      	subs	r3, r3, r5
 801406c:	44aa      	add	sl, r5
 801406e:	ebab 0b05 	sub.w	fp, fp, r5
 8014072:	f8c9 3008 	str.w	r3, [r9, #8]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d1c0      	bne.n	8013ffc <__sfvwrite_r+0x3c>
 801407a:	e7a8      	b.n	8013fce <__sfvwrite_r+0xe>
 801407c:	4621      	mov	r1, r4
 801407e:	4630      	mov	r0, r6
 8014080:	f000 f9f6 	bl	8014470 <__swsetup_r>
 8014084:	2800      	cmp	r0, #0
 8014086:	d0ac      	beq.n	8013fe2 <__sfvwrite_r+0x22>
 8014088:	f04f 30ff 	mov.w	r0, #4294967295
 801408c:	e7a0      	b.n	8013fd0 <__sfvwrite_r+0x10>
 801408e:	e9d8 a500 	ldrd	sl, r5, [r8]
 8014092:	f108 0808 	add.w	r8, r8, #8
 8014096:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 801409a:	69e1      	ldr	r1, [r4, #28]
 801409c:	2d00      	cmp	r5, #0
 801409e:	d0f6      	beq.n	801408e <__sfvwrite_r+0xce>
 80140a0:	42bd      	cmp	r5, r7
 80140a2:	462b      	mov	r3, r5
 80140a4:	4652      	mov	r2, sl
 80140a6:	bf28      	it	cs
 80140a8:	463b      	movcs	r3, r7
 80140aa:	4630      	mov	r0, r6
 80140ac:	47d8      	blx	fp
 80140ae:	2800      	cmp	r0, #0
 80140b0:	dd37      	ble.n	8014122 <__sfvwrite_r+0x162>
 80140b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80140b6:	1a1b      	subs	r3, r3, r0
 80140b8:	4482      	add	sl, r0
 80140ba:	1a2d      	subs	r5, r5, r0
 80140bc:	f8c9 3008 	str.w	r3, [r9, #8]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d1e8      	bne.n	8014096 <__sfvwrite_r+0xd6>
 80140c4:	e783      	b.n	8013fce <__sfvwrite_r+0xe>
 80140c6:	f04f 0a00 	mov.w	sl, #0
 80140ca:	4f61      	ldr	r7, [pc, #388]	; (8014250 <__sfvwrite_r+0x290>)
 80140cc:	4655      	mov	r5, sl
 80140ce:	e7e2      	b.n	8014096 <__sfvwrite_r+0xd6>
 80140d0:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80140d4:	f108 0808 	add.w	r8, r8, #8
 80140d8:	6820      	ldr	r0, [r4, #0]
 80140da:	68a2      	ldr	r2, [r4, #8]
 80140dc:	f1ba 0f00 	cmp.w	sl, #0
 80140e0:	d0f6      	beq.n	80140d0 <__sfvwrite_r+0x110>
 80140e2:	89a3      	ldrh	r3, [r4, #12]
 80140e4:	0599      	lsls	r1, r3, #22
 80140e6:	d563      	bpl.n	80141b0 <__sfvwrite_r+0x1f0>
 80140e8:	4552      	cmp	r2, sl
 80140ea:	d836      	bhi.n	801415a <__sfvwrite_r+0x19a>
 80140ec:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80140f0:	d033      	beq.n	801415a <__sfvwrite_r+0x19a>
 80140f2:	6921      	ldr	r1, [r4, #16]
 80140f4:	6965      	ldr	r5, [r4, #20]
 80140f6:	eba0 0b01 	sub.w	fp, r0, r1
 80140fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80140fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014102:	f10b 0201 	add.w	r2, fp, #1
 8014106:	106d      	asrs	r5, r5, #1
 8014108:	4452      	add	r2, sl
 801410a:	4295      	cmp	r5, r2
 801410c:	bf38      	it	cc
 801410e:	4615      	movcc	r5, r2
 8014110:	055b      	lsls	r3, r3, #21
 8014112:	d53d      	bpl.n	8014190 <__sfvwrite_r+0x1d0>
 8014114:	4629      	mov	r1, r5
 8014116:	4630      	mov	r0, r6
 8014118:	f000 fc3a 	bl	8014990 <_malloc_r>
 801411c:	b948      	cbnz	r0, 8014132 <__sfvwrite_r+0x172>
 801411e:	230c      	movs	r3, #12
 8014120:	6033      	str	r3, [r6, #0]
 8014122:	89a3      	ldrh	r3, [r4, #12]
 8014124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014128:	81a3      	strh	r3, [r4, #12]
 801412a:	e7ad      	b.n	8014088 <__sfvwrite_r+0xc8>
 801412c:	461f      	mov	r7, r3
 801412e:	469a      	mov	sl, r3
 8014130:	e7d2      	b.n	80140d8 <__sfvwrite_r+0x118>
 8014132:	465a      	mov	r2, fp
 8014134:	6921      	ldr	r1, [r4, #16]
 8014136:	9001      	str	r0, [sp, #4]
 8014138:	f000 faf8 	bl	801472c <memcpy>
 801413c:	89a2      	ldrh	r2, [r4, #12]
 801413e:	9b01      	ldr	r3, [sp, #4]
 8014140:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8014144:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014148:	81a2      	strh	r2, [r4, #12]
 801414a:	6123      	str	r3, [r4, #16]
 801414c:	6165      	str	r5, [r4, #20]
 801414e:	445b      	add	r3, fp
 8014150:	eba5 050b 	sub.w	r5, r5, fp
 8014154:	6023      	str	r3, [r4, #0]
 8014156:	4652      	mov	r2, sl
 8014158:	60a5      	str	r5, [r4, #8]
 801415a:	4552      	cmp	r2, sl
 801415c:	bf28      	it	cs
 801415e:	4652      	movcs	r2, sl
 8014160:	6820      	ldr	r0, [r4, #0]
 8014162:	9201      	str	r2, [sp, #4]
 8014164:	4639      	mov	r1, r7
 8014166:	f000 f9db 	bl	8014520 <memmove>
 801416a:	68a3      	ldr	r3, [r4, #8]
 801416c:	9a01      	ldr	r2, [sp, #4]
 801416e:	1a9b      	subs	r3, r3, r2
 8014170:	60a3      	str	r3, [r4, #8]
 8014172:	6823      	ldr	r3, [r4, #0]
 8014174:	4413      	add	r3, r2
 8014176:	4655      	mov	r5, sl
 8014178:	6023      	str	r3, [r4, #0]
 801417a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801417e:	1b5b      	subs	r3, r3, r5
 8014180:	442f      	add	r7, r5
 8014182:	ebaa 0a05 	sub.w	sl, sl, r5
 8014186:	f8c9 3008 	str.w	r3, [r9, #8]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d1a4      	bne.n	80140d8 <__sfvwrite_r+0x118>
 801418e:	e71e      	b.n	8013fce <__sfvwrite_r+0xe>
 8014190:	462a      	mov	r2, r5
 8014192:	4630      	mov	r0, r6
 8014194:	f000 fe42 	bl	8014e1c <_realloc_r>
 8014198:	4603      	mov	r3, r0
 801419a:	2800      	cmp	r0, #0
 801419c:	d1d5      	bne.n	801414a <__sfvwrite_r+0x18a>
 801419e:	6921      	ldr	r1, [r4, #16]
 80141a0:	4630      	mov	r0, r6
 80141a2:	f000 fb35 	bl	8014810 <_free_r>
 80141a6:	89a3      	ldrh	r3, [r4, #12]
 80141a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80141ac:	81a3      	strh	r3, [r4, #12]
 80141ae:	e7b6      	b.n	801411e <__sfvwrite_r+0x15e>
 80141b0:	6923      	ldr	r3, [r4, #16]
 80141b2:	4283      	cmp	r3, r0
 80141b4:	d302      	bcc.n	80141bc <__sfvwrite_r+0x1fc>
 80141b6:	6961      	ldr	r1, [r4, #20]
 80141b8:	4551      	cmp	r1, sl
 80141ba:	d915      	bls.n	80141e8 <__sfvwrite_r+0x228>
 80141bc:	4552      	cmp	r2, sl
 80141be:	bf28      	it	cs
 80141c0:	4652      	movcs	r2, sl
 80141c2:	4639      	mov	r1, r7
 80141c4:	4615      	mov	r5, r2
 80141c6:	f000 f9ab 	bl	8014520 <memmove>
 80141ca:	68a3      	ldr	r3, [r4, #8]
 80141cc:	6822      	ldr	r2, [r4, #0]
 80141ce:	1b5b      	subs	r3, r3, r5
 80141d0:	442a      	add	r2, r5
 80141d2:	60a3      	str	r3, [r4, #8]
 80141d4:	6022      	str	r2, [r4, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d1cf      	bne.n	801417a <__sfvwrite_r+0x1ba>
 80141da:	4621      	mov	r1, r4
 80141dc:	4630      	mov	r0, r6
 80141de:	f004 f9d5 	bl	801858c <_fflush_r>
 80141e2:	2800      	cmp	r0, #0
 80141e4:	d0c9      	beq.n	801417a <__sfvwrite_r+0x1ba>
 80141e6:	e79c      	b.n	8014122 <__sfvwrite_r+0x162>
 80141e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80141ec:	459a      	cmp	sl, r3
 80141ee:	bf38      	it	cc
 80141f0:	4653      	movcc	r3, sl
 80141f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80141f4:	fb93 f3f1 	sdiv	r3, r3, r1
 80141f8:	463a      	mov	r2, r7
 80141fa:	434b      	muls	r3, r1
 80141fc:	4630      	mov	r0, r6
 80141fe:	69e1      	ldr	r1, [r4, #28]
 8014200:	47a8      	blx	r5
 8014202:	1e05      	subs	r5, r0, #0
 8014204:	dcb9      	bgt.n	801417a <__sfvwrite_r+0x1ba>
 8014206:	e78c      	b.n	8014122 <__sfvwrite_r+0x162>
 8014208:	e9d8 ab00 	ldrd	sl, fp, [r8]
 801420c:	2000      	movs	r0, #0
 801420e:	f108 0808 	add.w	r8, r8, #8
 8014212:	e6f3      	b.n	8013ffc <__sfvwrite_r+0x3c>
 8014214:	f10b 0701 	add.w	r7, fp, #1
 8014218:	e700      	b.n	801401c <__sfvwrite_r+0x5c>
 801421a:	4293      	cmp	r3, r2
 801421c:	dc08      	bgt.n	8014230 <__sfvwrite_r+0x270>
 801421e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014220:	69e1      	ldr	r1, [r4, #28]
 8014222:	4652      	mov	r2, sl
 8014224:	4630      	mov	r0, r6
 8014226:	47a8      	blx	r5
 8014228:	1e05      	subs	r5, r0, #0
 801422a:	f73f af13 	bgt.w	8014054 <__sfvwrite_r+0x94>
 801422e:	e778      	b.n	8014122 <__sfvwrite_r+0x162>
 8014230:	4651      	mov	r1, sl
 8014232:	9201      	str	r2, [sp, #4]
 8014234:	f000 f974 	bl	8014520 <memmove>
 8014238:	9a01      	ldr	r2, [sp, #4]
 801423a:	68a3      	ldr	r3, [r4, #8]
 801423c:	1a9b      	subs	r3, r3, r2
 801423e:	60a3      	str	r3, [r4, #8]
 8014240:	6823      	ldr	r3, [r4, #0]
 8014242:	4413      	add	r3, r2
 8014244:	6023      	str	r3, [r4, #0]
 8014246:	4615      	mov	r5, r2
 8014248:	e704      	b.n	8014054 <__sfvwrite_r+0x94>
 801424a:	2001      	movs	r0, #1
 801424c:	e70b      	b.n	8014066 <__sfvwrite_r+0xa6>
 801424e:	bf00      	nop
 8014250:	7ffffc00 	.word	0x7ffffc00

08014254 <_fwalk_sglue>:
 8014254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014258:	4607      	mov	r7, r0
 801425a:	4688      	mov	r8, r1
 801425c:	4614      	mov	r4, r2
 801425e:	2600      	movs	r6, #0
 8014260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014264:	f1b9 0901 	subs.w	r9, r9, #1
 8014268:	d505      	bpl.n	8014276 <_fwalk_sglue+0x22>
 801426a:	6824      	ldr	r4, [r4, #0]
 801426c:	2c00      	cmp	r4, #0
 801426e:	d1f7      	bne.n	8014260 <_fwalk_sglue+0xc>
 8014270:	4630      	mov	r0, r6
 8014272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014276:	89ab      	ldrh	r3, [r5, #12]
 8014278:	2b01      	cmp	r3, #1
 801427a:	d907      	bls.n	801428c <_fwalk_sglue+0x38>
 801427c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014280:	3301      	adds	r3, #1
 8014282:	d003      	beq.n	801428c <_fwalk_sglue+0x38>
 8014284:	4629      	mov	r1, r5
 8014286:	4638      	mov	r0, r7
 8014288:	47c0      	blx	r8
 801428a:	4306      	orrs	r6, r0
 801428c:	3568      	adds	r5, #104	; 0x68
 801428e:	e7e9      	b.n	8014264 <_fwalk_sglue+0x10>

08014290 <_fwrite_r>:
 8014290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014294:	b086      	sub	sp, #24
 8014296:	fb02 f603 	mul.w	r6, r2, r3
 801429a:	461d      	mov	r5, r3
 801429c:	ab01      	add	r3, sp, #4
 801429e:	9303      	str	r3, [sp, #12]
 80142a0:	2301      	movs	r3, #1
 80142a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80142a4:	9101      	str	r1, [sp, #4]
 80142a6:	4690      	mov	r8, r2
 80142a8:	9602      	str	r6, [sp, #8]
 80142aa:	9605      	str	r6, [sp, #20]
 80142ac:	9304      	str	r3, [sp, #16]
 80142ae:	4607      	mov	r7, r0
 80142b0:	b118      	cbz	r0, 80142ba <_fwrite_r+0x2a>
 80142b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80142b4:	b90b      	cbnz	r3, 80142ba <_fwrite_r+0x2a>
 80142b6:	f7ff fe59 	bl	8013f6c <__sinit>
 80142ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142bc:	07d8      	lsls	r0, r3, #31
 80142be:	d405      	bmi.n	80142cc <_fwrite_r+0x3c>
 80142c0:	89a3      	ldrh	r3, [r4, #12]
 80142c2:	0599      	lsls	r1, r3, #22
 80142c4:	d402      	bmi.n	80142cc <_fwrite_r+0x3c>
 80142c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142c8:	f000 fa2e 	bl	8014728 <__retarget_lock_acquire_recursive>
 80142cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142d0:	049a      	lsls	r2, r3, #18
 80142d2:	d406      	bmi.n	80142e2 <_fwrite_r+0x52>
 80142d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80142d8:	81a3      	strh	r3, [r4, #12]
 80142da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80142e0:	6663      	str	r3, [r4, #100]	; 0x64
 80142e2:	aa03      	add	r2, sp, #12
 80142e4:	4621      	mov	r1, r4
 80142e6:	4638      	mov	r0, r7
 80142e8:	f7ff fe6a 	bl	8013fc0 <__sfvwrite_r>
 80142ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142ee:	b958      	cbnz	r0, 8014308 <_fwrite_r+0x78>
 80142f0:	07d8      	lsls	r0, r3, #31
 80142f2:	d405      	bmi.n	8014300 <_fwrite_r+0x70>
 80142f4:	89a3      	ldrh	r3, [r4, #12]
 80142f6:	0599      	lsls	r1, r3, #22
 80142f8:	d402      	bmi.n	8014300 <_fwrite_r+0x70>
 80142fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142fc:	f000 fa15 	bl	801472a <__retarget_lock_release_recursive>
 8014300:	4628      	mov	r0, r5
 8014302:	b006      	add	sp, #24
 8014304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014308:	07da      	lsls	r2, r3, #31
 801430a:	d405      	bmi.n	8014318 <_fwrite_r+0x88>
 801430c:	89a3      	ldrh	r3, [r4, #12]
 801430e:	059b      	lsls	r3, r3, #22
 8014310:	d402      	bmi.n	8014318 <_fwrite_r+0x88>
 8014312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014314:	f000 fa09 	bl	801472a <__retarget_lock_release_recursive>
 8014318:	9b05      	ldr	r3, [sp, #20]
 801431a:	1af6      	subs	r6, r6, r3
 801431c:	fbb6 f5f8 	udiv	r5, r6, r8
 8014320:	e7ee      	b.n	8014300 <_fwrite_r+0x70>
	...

08014324 <fwrite>:
 8014324:	b507      	push	{r0, r1, r2, lr}
 8014326:	9300      	str	r3, [sp, #0]
 8014328:	4613      	mov	r3, r2
 801432a:	460a      	mov	r2, r1
 801432c:	4601      	mov	r1, r0
 801432e:	4803      	ldr	r0, [pc, #12]	; (801433c <fwrite+0x18>)
 8014330:	6800      	ldr	r0, [r0, #0]
 8014332:	f7ff ffad 	bl	8014290 <_fwrite_r>
 8014336:	b003      	add	sp, #12
 8014338:	f85d fb04 	ldr.w	pc, [sp], #4
 801433c:	200001c0 	.word	0x200001c0

08014340 <snprintf>:
 8014340:	b40c      	push	{r2, r3}
 8014342:	b530      	push	{r4, r5, lr}
 8014344:	4b17      	ldr	r3, [pc, #92]	; (80143a4 <snprintf+0x64>)
 8014346:	1e0c      	subs	r4, r1, #0
 8014348:	681d      	ldr	r5, [r3, #0]
 801434a:	b09d      	sub	sp, #116	; 0x74
 801434c:	da08      	bge.n	8014360 <snprintf+0x20>
 801434e:	238b      	movs	r3, #139	; 0x8b
 8014350:	602b      	str	r3, [r5, #0]
 8014352:	f04f 30ff 	mov.w	r0, #4294967295
 8014356:	b01d      	add	sp, #116	; 0x74
 8014358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801435c:	b002      	add	sp, #8
 801435e:	4770      	bx	lr
 8014360:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014364:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014368:	bf14      	ite	ne
 801436a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801436e:	4623      	moveq	r3, r4
 8014370:	9304      	str	r3, [sp, #16]
 8014372:	9307      	str	r3, [sp, #28]
 8014374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014378:	9002      	str	r0, [sp, #8]
 801437a:	9006      	str	r0, [sp, #24]
 801437c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014380:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014382:	ab21      	add	r3, sp, #132	; 0x84
 8014384:	a902      	add	r1, sp, #8
 8014386:	4628      	mov	r0, r5
 8014388:	9301      	str	r3, [sp, #4]
 801438a:	f000 feed 	bl	8015168 <_svfprintf_r>
 801438e:	1c43      	adds	r3, r0, #1
 8014390:	bfbc      	itt	lt
 8014392:	238b      	movlt	r3, #139	; 0x8b
 8014394:	602b      	strlt	r3, [r5, #0]
 8014396:	2c00      	cmp	r4, #0
 8014398:	d0dd      	beq.n	8014356 <snprintf+0x16>
 801439a:	9b02      	ldr	r3, [sp, #8]
 801439c:	2200      	movs	r2, #0
 801439e:	701a      	strb	r2, [r3, #0]
 80143a0:	e7d9      	b.n	8014356 <snprintf+0x16>
 80143a2:	bf00      	nop
 80143a4:	200001c0 	.word	0x200001c0

080143a8 <sprintf>:
 80143a8:	b40e      	push	{r1, r2, r3}
 80143aa:	b500      	push	{lr}
 80143ac:	b09c      	sub	sp, #112	; 0x70
 80143ae:	ab1d      	add	r3, sp, #116	; 0x74
 80143b0:	9002      	str	r0, [sp, #8]
 80143b2:	9006      	str	r0, [sp, #24]
 80143b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80143b8:	4809      	ldr	r0, [pc, #36]	; (80143e0 <sprintf+0x38>)
 80143ba:	9107      	str	r1, [sp, #28]
 80143bc:	9104      	str	r1, [sp, #16]
 80143be:	4909      	ldr	r1, [pc, #36]	; (80143e4 <sprintf+0x3c>)
 80143c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80143c4:	9105      	str	r1, [sp, #20]
 80143c6:	6800      	ldr	r0, [r0, #0]
 80143c8:	9301      	str	r3, [sp, #4]
 80143ca:	a902      	add	r1, sp, #8
 80143cc:	f000 fecc 	bl	8015168 <_svfprintf_r>
 80143d0:	9b02      	ldr	r3, [sp, #8]
 80143d2:	2200      	movs	r2, #0
 80143d4:	701a      	strb	r2, [r3, #0]
 80143d6:	b01c      	add	sp, #112	; 0x70
 80143d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80143dc:	b003      	add	sp, #12
 80143de:	4770      	bx	lr
 80143e0:	200001c0 	.word	0x200001c0
 80143e4:	ffff0208 	.word	0xffff0208

080143e8 <__sread>:
 80143e8:	b510      	push	{r4, lr}
 80143ea:	460c      	mov	r4, r1
 80143ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143f0:	f000 f94a 	bl	8014688 <_read_r>
 80143f4:	2800      	cmp	r0, #0
 80143f6:	bfab      	itete	ge
 80143f8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80143fa:	89a3      	ldrhlt	r3, [r4, #12]
 80143fc:	181b      	addge	r3, r3, r0
 80143fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014402:	bfac      	ite	ge
 8014404:	6523      	strge	r3, [r4, #80]	; 0x50
 8014406:	81a3      	strhlt	r3, [r4, #12]
 8014408:	bd10      	pop	{r4, pc}

0801440a <__swrite>:
 801440a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801440e:	461f      	mov	r7, r3
 8014410:	898b      	ldrh	r3, [r1, #12]
 8014412:	05db      	lsls	r3, r3, #23
 8014414:	4605      	mov	r5, r0
 8014416:	460c      	mov	r4, r1
 8014418:	4616      	mov	r6, r2
 801441a:	d505      	bpl.n	8014428 <__swrite+0x1e>
 801441c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014420:	2302      	movs	r3, #2
 8014422:	2200      	movs	r2, #0
 8014424:	f000 f91e 	bl	8014664 <_lseek_r>
 8014428:	89a3      	ldrh	r3, [r4, #12]
 801442a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801442e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014432:	81a3      	strh	r3, [r4, #12]
 8014434:	4632      	mov	r2, r6
 8014436:	463b      	mov	r3, r7
 8014438:	4628      	mov	r0, r5
 801443a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801443e:	f000 b935 	b.w	80146ac <_write_r>

08014442 <__sseek>:
 8014442:	b510      	push	{r4, lr}
 8014444:	460c      	mov	r4, r1
 8014446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801444a:	f000 f90b 	bl	8014664 <_lseek_r>
 801444e:	1c43      	adds	r3, r0, #1
 8014450:	89a3      	ldrh	r3, [r4, #12]
 8014452:	bf15      	itete	ne
 8014454:	6520      	strne	r0, [r4, #80]	; 0x50
 8014456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801445a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801445e:	81a3      	strheq	r3, [r4, #12]
 8014460:	bf18      	it	ne
 8014462:	81a3      	strhne	r3, [r4, #12]
 8014464:	bd10      	pop	{r4, pc}

08014466 <__sclose>:
 8014466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801446a:	f000 b8bd 	b.w	80145e8 <_close_r>
	...

08014470 <__swsetup_r>:
 8014470:	b538      	push	{r3, r4, r5, lr}
 8014472:	4b2a      	ldr	r3, [pc, #168]	; (801451c <__swsetup_r+0xac>)
 8014474:	4605      	mov	r5, r0
 8014476:	6818      	ldr	r0, [r3, #0]
 8014478:	460c      	mov	r4, r1
 801447a:	b118      	cbz	r0, 8014484 <__swsetup_r+0x14>
 801447c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801447e:	b90b      	cbnz	r3, 8014484 <__swsetup_r+0x14>
 8014480:	f7ff fd74 	bl	8013f6c <__sinit>
 8014484:	89a3      	ldrh	r3, [r4, #12]
 8014486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801448a:	0718      	lsls	r0, r3, #28
 801448c:	d422      	bmi.n	80144d4 <__swsetup_r+0x64>
 801448e:	06d9      	lsls	r1, r3, #27
 8014490:	d407      	bmi.n	80144a2 <__swsetup_r+0x32>
 8014492:	2309      	movs	r3, #9
 8014494:	602b      	str	r3, [r5, #0]
 8014496:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801449a:	81a3      	strh	r3, [r4, #12]
 801449c:	f04f 30ff 	mov.w	r0, #4294967295
 80144a0:	e034      	b.n	801450c <__swsetup_r+0x9c>
 80144a2:	0758      	lsls	r0, r3, #29
 80144a4:	d512      	bpl.n	80144cc <__swsetup_r+0x5c>
 80144a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80144a8:	b141      	cbz	r1, 80144bc <__swsetup_r+0x4c>
 80144aa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80144ae:	4299      	cmp	r1, r3
 80144b0:	d002      	beq.n	80144b8 <__swsetup_r+0x48>
 80144b2:	4628      	mov	r0, r5
 80144b4:	f000 f9ac 	bl	8014810 <_free_r>
 80144b8:	2300      	movs	r3, #0
 80144ba:	6323      	str	r3, [r4, #48]	; 0x30
 80144bc:	89a3      	ldrh	r3, [r4, #12]
 80144be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144c2:	81a3      	strh	r3, [r4, #12]
 80144c4:	2300      	movs	r3, #0
 80144c6:	6063      	str	r3, [r4, #4]
 80144c8:	6923      	ldr	r3, [r4, #16]
 80144ca:	6023      	str	r3, [r4, #0]
 80144cc:	89a3      	ldrh	r3, [r4, #12]
 80144ce:	f043 0308 	orr.w	r3, r3, #8
 80144d2:	81a3      	strh	r3, [r4, #12]
 80144d4:	6923      	ldr	r3, [r4, #16]
 80144d6:	b94b      	cbnz	r3, 80144ec <__swsetup_r+0x7c>
 80144d8:	89a3      	ldrh	r3, [r4, #12]
 80144da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80144de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144e2:	d003      	beq.n	80144ec <__swsetup_r+0x7c>
 80144e4:	4621      	mov	r1, r4
 80144e6:	4628      	mov	r0, r5
 80144e8:	f004 f89d 	bl	8018626 <__smakebuf_r>
 80144ec:	89a0      	ldrh	r0, [r4, #12]
 80144ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80144f2:	f010 0301 	ands.w	r3, r0, #1
 80144f6:	d00a      	beq.n	801450e <__swsetup_r+0x9e>
 80144f8:	2300      	movs	r3, #0
 80144fa:	60a3      	str	r3, [r4, #8]
 80144fc:	6963      	ldr	r3, [r4, #20]
 80144fe:	425b      	negs	r3, r3
 8014500:	61a3      	str	r3, [r4, #24]
 8014502:	6923      	ldr	r3, [r4, #16]
 8014504:	b943      	cbnz	r3, 8014518 <__swsetup_r+0xa8>
 8014506:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801450a:	d1c4      	bne.n	8014496 <__swsetup_r+0x26>
 801450c:	bd38      	pop	{r3, r4, r5, pc}
 801450e:	0781      	lsls	r1, r0, #30
 8014510:	bf58      	it	pl
 8014512:	6963      	ldrpl	r3, [r4, #20]
 8014514:	60a3      	str	r3, [r4, #8]
 8014516:	e7f4      	b.n	8014502 <__swsetup_r+0x92>
 8014518:	2000      	movs	r0, #0
 801451a:	e7f7      	b.n	801450c <__swsetup_r+0x9c>
 801451c:	200001c0 	.word	0x200001c0

08014520 <memmove>:
 8014520:	4288      	cmp	r0, r1
 8014522:	b510      	push	{r4, lr}
 8014524:	eb01 0402 	add.w	r4, r1, r2
 8014528:	d902      	bls.n	8014530 <memmove+0x10>
 801452a:	4284      	cmp	r4, r0
 801452c:	4623      	mov	r3, r4
 801452e:	d807      	bhi.n	8014540 <memmove+0x20>
 8014530:	1e43      	subs	r3, r0, #1
 8014532:	42a1      	cmp	r1, r4
 8014534:	d008      	beq.n	8014548 <memmove+0x28>
 8014536:	f811 2b01 	ldrb.w	r2, [r1], #1
 801453a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801453e:	e7f8      	b.n	8014532 <memmove+0x12>
 8014540:	4402      	add	r2, r0
 8014542:	4601      	mov	r1, r0
 8014544:	428a      	cmp	r2, r1
 8014546:	d100      	bne.n	801454a <memmove+0x2a>
 8014548:	bd10      	pop	{r4, pc}
 801454a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801454e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014552:	e7f7      	b.n	8014544 <memmove+0x24>

08014554 <memset>:
 8014554:	4402      	add	r2, r0
 8014556:	4603      	mov	r3, r0
 8014558:	4293      	cmp	r3, r2
 801455a:	d100      	bne.n	801455e <memset+0xa>
 801455c:	4770      	bx	lr
 801455e:	f803 1b01 	strb.w	r1, [r3], #1
 8014562:	e7f9      	b.n	8014558 <memset+0x4>

08014564 <strncmp>:
 8014564:	b510      	push	{r4, lr}
 8014566:	b16a      	cbz	r2, 8014584 <strncmp+0x20>
 8014568:	3901      	subs	r1, #1
 801456a:	1884      	adds	r4, r0, r2
 801456c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014570:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014574:	429a      	cmp	r2, r3
 8014576:	d103      	bne.n	8014580 <strncmp+0x1c>
 8014578:	42a0      	cmp	r0, r4
 801457a:	d001      	beq.n	8014580 <strncmp+0x1c>
 801457c:	2a00      	cmp	r2, #0
 801457e:	d1f5      	bne.n	801456c <strncmp+0x8>
 8014580:	1ad0      	subs	r0, r2, r3
 8014582:	bd10      	pop	{r4, pc}
 8014584:	4610      	mov	r0, r2
 8014586:	e7fc      	b.n	8014582 <strncmp+0x1e>

08014588 <strtok>:
 8014588:	4b02      	ldr	r3, [pc, #8]	; (8014594 <strtok+0xc>)
 801458a:	681a      	ldr	r2, [r3, #0]
 801458c:	2301      	movs	r3, #1
 801458e:	3250      	adds	r2, #80	; 0x50
 8014590:	f000 b802 	b.w	8014598 <__strtok_r>
 8014594:	200001c0 	.word	0x200001c0

08014598 <__strtok_r>:
 8014598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801459a:	b908      	cbnz	r0, 80145a0 <__strtok_r+0x8>
 801459c:	6810      	ldr	r0, [r2, #0]
 801459e:	b188      	cbz	r0, 80145c4 <__strtok_r+0x2c>
 80145a0:	4604      	mov	r4, r0
 80145a2:	4620      	mov	r0, r4
 80145a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80145a8:	460f      	mov	r7, r1
 80145aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80145ae:	b91e      	cbnz	r6, 80145b8 <__strtok_r+0x20>
 80145b0:	b965      	cbnz	r5, 80145cc <__strtok_r+0x34>
 80145b2:	6015      	str	r5, [r2, #0]
 80145b4:	4628      	mov	r0, r5
 80145b6:	e005      	b.n	80145c4 <__strtok_r+0x2c>
 80145b8:	42b5      	cmp	r5, r6
 80145ba:	d1f6      	bne.n	80145aa <__strtok_r+0x12>
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d1f0      	bne.n	80145a2 <__strtok_r+0xa>
 80145c0:	6014      	str	r4, [r2, #0]
 80145c2:	7003      	strb	r3, [r0, #0]
 80145c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145c6:	461c      	mov	r4, r3
 80145c8:	e00c      	b.n	80145e4 <__strtok_r+0x4c>
 80145ca:	b915      	cbnz	r5, 80145d2 <__strtok_r+0x3a>
 80145cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80145d0:	460e      	mov	r6, r1
 80145d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80145d6:	42ab      	cmp	r3, r5
 80145d8:	d1f7      	bne.n	80145ca <__strtok_r+0x32>
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d0f3      	beq.n	80145c6 <__strtok_r+0x2e>
 80145de:	2300      	movs	r3, #0
 80145e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80145e4:	6014      	str	r4, [r2, #0]
 80145e6:	e7ed      	b.n	80145c4 <__strtok_r+0x2c>

080145e8 <_close_r>:
 80145e8:	b538      	push	{r3, r4, r5, lr}
 80145ea:	4d06      	ldr	r5, [pc, #24]	; (8014604 <_close_r+0x1c>)
 80145ec:	2300      	movs	r3, #0
 80145ee:	4604      	mov	r4, r0
 80145f0:	4608      	mov	r0, r1
 80145f2:	602b      	str	r3, [r5, #0]
 80145f4:	f7f5 ff42 	bl	800a47c <_close>
 80145f8:	1c43      	adds	r3, r0, #1
 80145fa:	d102      	bne.n	8014602 <_close_r+0x1a>
 80145fc:	682b      	ldr	r3, [r5, #0]
 80145fe:	b103      	cbz	r3, 8014602 <_close_r+0x1a>
 8014600:	6023      	str	r3, [r4, #0]
 8014602:	bd38      	pop	{r3, r4, r5, pc}
 8014604:	20004974 	.word	0x20004974

08014608 <_reclaim_reent>:
 8014608:	4b15      	ldr	r3, [pc, #84]	; (8014660 <_reclaim_reent+0x58>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	4283      	cmp	r3, r0
 801460e:	b570      	push	{r4, r5, r6, lr}
 8014610:	4604      	mov	r4, r0
 8014612:	d023      	beq.n	801465c <_reclaim_reent+0x54>
 8014614:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8014616:	b9fb      	cbnz	r3, 8014658 <_reclaim_reent+0x50>
 8014618:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801461a:	b111      	cbz	r1, 8014622 <_reclaim_reent+0x1a>
 801461c:	4620      	mov	r0, r4
 801461e:	f000 f8f7 	bl	8014810 <_free_r>
 8014622:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8014624:	b111      	cbz	r1, 801462c <_reclaim_reent+0x24>
 8014626:	4620      	mov	r0, r4
 8014628:	f000 f8f2 	bl	8014810 <_free_r>
 801462c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801462e:	b1ab      	cbz	r3, 801465c <_reclaim_reent+0x54>
 8014630:	4620      	mov	r0, r4
 8014632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014636:	4718      	bx	r3
 8014638:	5949      	ldr	r1, [r1, r5]
 801463a:	b939      	cbnz	r1, 801464c <_reclaim_reent+0x44>
 801463c:	3504      	adds	r5, #4
 801463e:	2d80      	cmp	r5, #128	; 0x80
 8014640:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014642:	d1f9      	bne.n	8014638 <_reclaim_reent+0x30>
 8014644:	4620      	mov	r0, r4
 8014646:	f000 f8e3 	bl	8014810 <_free_r>
 801464a:	e7e5      	b.n	8014618 <_reclaim_reent+0x10>
 801464c:	680e      	ldr	r6, [r1, #0]
 801464e:	4620      	mov	r0, r4
 8014650:	f000 f8de 	bl	8014810 <_free_r>
 8014654:	4631      	mov	r1, r6
 8014656:	e7f0      	b.n	801463a <_reclaim_reent+0x32>
 8014658:	2500      	movs	r5, #0
 801465a:	e7f0      	b.n	801463e <_reclaim_reent+0x36>
 801465c:	bd70      	pop	{r4, r5, r6, pc}
 801465e:	bf00      	nop
 8014660:	200001c0 	.word	0x200001c0

08014664 <_lseek_r>:
 8014664:	b538      	push	{r3, r4, r5, lr}
 8014666:	4d07      	ldr	r5, [pc, #28]	; (8014684 <_lseek_r+0x20>)
 8014668:	4604      	mov	r4, r0
 801466a:	4608      	mov	r0, r1
 801466c:	4611      	mov	r1, r2
 801466e:	2200      	movs	r2, #0
 8014670:	602a      	str	r2, [r5, #0]
 8014672:	461a      	mov	r2, r3
 8014674:	f7f5 ff26 	bl	800a4c4 <_lseek>
 8014678:	1c43      	adds	r3, r0, #1
 801467a:	d102      	bne.n	8014682 <_lseek_r+0x1e>
 801467c:	682b      	ldr	r3, [r5, #0]
 801467e:	b103      	cbz	r3, 8014682 <_lseek_r+0x1e>
 8014680:	6023      	str	r3, [r4, #0]
 8014682:	bd38      	pop	{r3, r4, r5, pc}
 8014684:	20004974 	.word	0x20004974

08014688 <_read_r>:
 8014688:	b538      	push	{r3, r4, r5, lr}
 801468a:	4d07      	ldr	r5, [pc, #28]	; (80146a8 <_read_r+0x20>)
 801468c:	4604      	mov	r4, r0
 801468e:	4608      	mov	r0, r1
 8014690:	4611      	mov	r1, r2
 8014692:	2200      	movs	r2, #0
 8014694:	602a      	str	r2, [r5, #0]
 8014696:	461a      	mov	r2, r3
 8014698:	f7f5 feb7 	bl	800a40a <_read>
 801469c:	1c43      	adds	r3, r0, #1
 801469e:	d102      	bne.n	80146a6 <_read_r+0x1e>
 80146a0:	682b      	ldr	r3, [r5, #0]
 80146a2:	b103      	cbz	r3, 80146a6 <_read_r+0x1e>
 80146a4:	6023      	str	r3, [r4, #0]
 80146a6:	bd38      	pop	{r3, r4, r5, pc}
 80146a8:	20004974 	.word	0x20004974

080146ac <_write_r>:
 80146ac:	b538      	push	{r3, r4, r5, lr}
 80146ae:	4d07      	ldr	r5, [pc, #28]	; (80146cc <_write_r+0x20>)
 80146b0:	4604      	mov	r4, r0
 80146b2:	4608      	mov	r0, r1
 80146b4:	4611      	mov	r1, r2
 80146b6:	2200      	movs	r2, #0
 80146b8:	602a      	str	r2, [r5, #0]
 80146ba:	461a      	mov	r2, r3
 80146bc:	f7f5 fec2 	bl	800a444 <_write>
 80146c0:	1c43      	adds	r3, r0, #1
 80146c2:	d102      	bne.n	80146ca <_write_r+0x1e>
 80146c4:	682b      	ldr	r3, [r5, #0]
 80146c6:	b103      	cbz	r3, 80146ca <_write_r+0x1e>
 80146c8:	6023      	str	r3, [r4, #0]
 80146ca:	bd38      	pop	{r3, r4, r5, pc}
 80146cc:	20004974 	.word	0x20004974

080146d0 <__errno>:
 80146d0:	4b01      	ldr	r3, [pc, #4]	; (80146d8 <__errno+0x8>)
 80146d2:	6818      	ldr	r0, [r3, #0]
 80146d4:	4770      	bx	lr
 80146d6:	bf00      	nop
 80146d8:	200001c0 	.word	0x200001c0

080146dc <__libc_init_array>:
 80146dc:	b570      	push	{r4, r5, r6, lr}
 80146de:	4d0d      	ldr	r5, [pc, #52]	; (8014714 <__libc_init_array+0x38>)
 80146e0:	4c0d      	ldr	r4, [pc, #52]	; (8014718 <__libc_init_array+0x3c>)
 80146e2:	1b64      	subs	r4, r4, r5
 80146e4:	10a4      	asrs	r4, r4, #2
 80146e6:	2600      	movs	r6, #0
 80146e8:	42a6      	cmp	r6, r4
 80146ea:	d109      	bne.n	8014700 <__libc_init_array+0x24>
 80146ec:	4d0b      	ldr	r5, [pc, #44]	; (801471c <__libc_init_array+0x40>)
 80146ee:	4c0c      	ldr	r4, [pc, #48]	; (8014720 <__libc_init_array+0x44>)
 80146f0:	f006 fb50 	bl	801ad94 <_init>
 80146f4:	1b64      	subs	r4, r4, r5
 80146f6:	10a4      	asrs	r4, r4, #2
 80146f8:	2600      	movs	r6, #0
 80146fa:	42a6      	cmp	r6, r4
 80146fc:	d105      	bne.n	801470a <__libc_init_array+0x2e>
 80146fe:	bd70      	pop	{r4, r5, r6, pc}
 8014700:	f855 3b04 	ldr.w	r3, [r5], #4
 8014704:	4798      	blx	r3
 8014706:	3601      	adds	r6, #1
 8014708:	e7ee      	b.n	80146e8 <__libc_init_array+0xc>
 801470a:	f855 3b04 	ldr.w	r3, [r5], #4
 801470e:	4798      	blx	r3
 8014710:	3601      	adds	r6, #1
 8014712:	e7f2      	b.n	80146fa <__libc_init_array+0x1e>
 8014714:	0801ba38 	.word	0x0801ba38
 8014718:	0801ba38 	.word	0x0801ba38
 801471c:	0801ba38 	.word	0x0801ba38
 8014720:	0801ba40 	.word	0x0801ba40

08014724 <__retarget_lock_init_recursive>:
 8014724:	4770      	bx	lr

08014726 <__retarget_lock_close_recursive>:
 8014726:	4770      	bx	lr

08014728 <__retarget_lock_acquire_recursive>:
 8014728:	4770      	bx	lr

0801472a <__retarget_lock_release_recursive>:
 801472a:	4770      	bx	lr

0801472c <memcpy>:
 801472c:	440a      	add	r2, r1
 801472e:	4291      	cmp	r1, r2
 8014730:	f100 33ff 	add.w	r3, r0, #4294967295
 8014734:	d100      	bne.n	8014738 <memcpy+0xc>
 8014736:	4770      	bx	lr
 8014738:	b510      	push	{r4, lr}
 801473a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801473e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014742:	4291      	cmp	r1, r2
 8014744:	d1f9      	bne.n	801473a <memcpy+0xe>
 8014746:	bd10      	pop	{r4, pc}

08014748 <register_fini>:
 8014748:	4b02      	ldr	r3, [pc, #8]	; (8014754 <register_fini+0xc>)
 801474a:	b113      	cbz	r3, 8014752 <register_fini+0xa>
 801474c:	4802      	ldr	r0, [pc, #8]	; (8014758 <register_fini+0x10>)
 801474e:	f000 b805 	b.w	801475c <atexit>
 8014752:	4770      	bx	lr
 8014754:	00000000 	.word	0x00000000
 8014758:	08018811 	.word	0x08018811

0801475c <atexit>:
 801475c:	2300      	movs	r3, #0
 801475e:	4601      	mov	r1, r0
 8014760:	461a      	mov	r2, r3
 8014762:	4618      	mov	r0, r3
 8014764:	f004 b8a8 	b.w	80188b8 <__register_exitproc>

08014768 <_malloc_trim_r>:
 8014768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801476c:	4606      	mov	r6, r0
 801476e:	2008      	movs	r0, #8
 8014770:	460c      	mov	r4, r1
 8014772:	f004 f861 	bl	8018838 <sysconf>
 8014776:	4f23      	ldr	r7, [pc, #140]	; (8014804 <_malloc_trim_r+0x9c>)
 8014778:	4680      	mov	r8, r0
 801477a:	4630      	mov	r0, r6
 801477c:	f000 fb42 	bl	8014e04 <__malloc_lock>
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	685d      	ldr	r5, [r3, #4]
 8014784:	f025 0503 	bic.w	r5, r5, #3
 8014788:	1b2c      	subs	r4, r5, r4
 801478a:	3c11      	subs	r4, #17
 801478c:	4444      	add	r4, r8
 801478e:	fbb4 f4f8 	udiv	r4, r4, r8
 8014792:	3c01      	subs	r4, #1
 8014794:	fb08 f404 	mul.w	r4, r8, r4
 8014798:	45a0      	cmp	r8, r4
 801479a:	dd05      	ble.n	80147a8 <_malloc_trim_r+0x40>
 801479c:	4630      	mov	r0, r6
 801479e:	f000 fb37 	bl	8014e10 <__malloc_unlock>
 80147a2:	2000      	movs	r0, #0
 80147a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147a8:	2100      	movs	r1, #0
 80147aa:	4630      	mov	r0, r6
 80147ac:	f004 f820 	bl	80187f0 <_sbrk_r>
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	442b      	add	r3, r5
 80147b4:	4298      	cmp	r0, r3
 80147b6:	d1f1      	bne.n	801479c <_malloc_trim_r+0x34>
 80147b8:	4261      	negs	r1, r4
 80147ba:	4630      	mov	r0, r6
 80147bc:	f004 f818 	bl	80187f0 <_sbrk_r>
 80147c0:	3001      	adds	r0, #1
 80147c2:	d110      	bne.n	80147e6 <_malloc_trim_r+0x7e>
 80147c4:	2100      	movs	r1, #0
 80147c6:	4630      	mov	r0, r6
 80147c8:	f004 f812 	bl	80187f0 <_sbrk_r>
 80147cc:	68ba      	ldr	r2, [r7, #8]
 80147ce:	1a83      	subs	r3, r0, r2
 80147d0:	2b0f      	cmp	r3, #15
 80147d2:	dde3      	ble.n	801479c <_malloc_trim_r+0x34>
 80147d4:	490c      	ldr	r1, [pc, #48]	; (8014808 <_malloc_trim_r+0xa0>)
 80147d6:	6809      	ldr	r1, [r1, #0]
 80147d8:	1a40      	subs	r0, r0, r1
 80147da:	490c      	ldr	r1, [pc, #48]	; (801480c <_malloc_trim_r+0xa4>)
 80147dc:	f043 0301 	orr.w	r3, r3, #1
 80147e0:	6008      	str	r0, [r1, #0]
 80147e2:	6053      	str	r3, [r2, #4]
 80147e4:	e7da      	b.n	801479c <_malloc_trim_r+0x34>
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	4a08      	ldr	r2, [pc, #32]	; (801480c <_malloc_trim_r+0xa4>)
 80147ea:	1b2d      	subs	r5, r5, r4
 80147ec:	f045 0501 	orr.w	r5, r5, #1
 80147f0:	605d      	str	r5, [r3, #4]
 80147f2:	6813      	ldr	r3, [r2, #0]
 80147f4:	4630      	mov	r0, r6
 80147f6:	1b1b      	subs	r3, r3, r4
 80147f8:	6013      	str	r3, [r2, #0]
 80147fa:	f000 fb09 	bl	8014e10 <__malloc_unlock>
 80147fe:	2001      	movs	r0, #1
 8014800:	e7d0      	b.n	80147a4 <_malloc_trim_r+0x3c>
 8014802:	bf00      	nop
 8014804:	200001c8 	.word	0x200001c8
 8014808:	200005d0 	.word	0x200005d0
 801480c:	20004980 	.word	0x20004980

08014810 <_free_r>:
 8014810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014812:	4605      	mov	r5, r0
 8014814:	460f      	mov	r7, r1
 8014816:	2900      	cmp	r1, #0
 8014818:	f000 80b1 	beq.w	801497e <_free_r+0x16e>
 801481c:	f000 faf2 	bl	8014e04 <__malloc_lock>
 8014820:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014824:	4856      	ldr	r0, [pc, #344]	; (8014980 <_free_r+0x170>)
 8014826:	f022 0401 	bic.w	r4, r2, #1
 801482a:	f1a7 0308 	sub.w	r3, r7, #8
 801482e:	eb03 0c04 	add.w	ip, r3, r4
 8014832:	6881      	ldr	r1, [r0, #8]
 8014834:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8014838:	4561      	cmp	r1, ip
 801483a:	f026 0603 	bic.w	r6, r6, #3
 801483e:	f002 0201 	and.w	r2, r2, #1
 8014842:	d11b      	bne.n	801487c <_free_r+0x6c>
 8014844:	4426      	add	r6, r4
 8014846:	b93a      	cbnz	r2, 8014858 <_free_r+0x48>
 8014848:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801484c:	1a9b      	subs	r3, r3, r2
 801484e:	4416      	add	r6, r2
 8014850:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8014854:	60ca      	str	r2, [r1, #12]
 8014856:	6091      	str	r1, [r2, #8]
 8014858:	f046 0201 	orr.w	r2, r6, #1
 801485c:	605a      	str	r2, [r3, #4]
 801485e:	6083      	str	r3, [r0, #8]
 8014860:	4b48      	ldr	r3, [pc, #288]	; (8014984 <_free_r+0x174>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	42b3      	cmp	r3, r6
 8014866:	d804      	bhi.n	8014872 <_free_r+0x62>
 8014868:	4b47      	ldr	r3, [pc, #284]	; (8014988 <_free_r+0x178>)
 801486a:	4628      	mov	r0, r5
 801486c:	6819      	ldr	r1, [r3, #0]
 801486e:	f7ff ff7b 	bl	8014768 <_malloc_trim_r>
 8014872:	4628      	mov	r0, r5
 8014874:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014878:	f000 baca 	b.w	8014e10 <__malloc_unlock>
 801487c:	f8cc 6004 	str.w	r6, [ip, #4]
 8014880:	2a00      	cmp	r2, #0
 8014882:	d138      	bne.n	80148f6 <_free_r+0xe6>
 8014884:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8014888:	1a5b      	subs	r3, r3, r1
 801488a:	440c      	add	r4, r1
 801488c:	6899      	ldr	r1, [r3, #8]
 801488e:	f100 0708 	add.w	r7, r0, #8
 8014892:	42b9      	cmp	r1, r7
 8014894:	d031      	beq.n	80148fa <_free_r+0xea>
 8014896:	68df      	ldr	r7, [r3, #12]
 8014898:	60cf      	str	r7, [r1, #12]
 801489a:	60b9      	str	r1, [r7, #8]
 801489c:	eb0c 0106 	add.w	r1, ip, r6
 80148a0:	6849      	ldr	r1, [r1, #4]
 80148a2:	07c9      	lsls	r1, r1, #31
 80148a4:	d40b      	bmi.n	80148be <_free_r+0xae>
 80148a6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80148aa:	4434      	add	r4, r6
 80148ac:	bb3a      	cbnz	r2, 80148fe <_free_r+0xee>
 80148ae:	4e37      	ldr	r6, [pc, #220]	; (801498c <_free_r+0x17c>)
 80148b0:	42b1      	cmp	r1, r6
 80148b2:	d124      	bne.n	80148fe <_free_r+0xee>
 80148b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148b8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80148bc:	2201      	movs	r2, #1
 80148be:	f044 0101 	orr.w	r1, r4, #1
 80148c2:	6059      	str	r1, [r3, #4]
 80148c4:	511c      	str	r4, [r3, r4]
 80148c6:	2a00      	cmp	r2, #0
 80148c8:	d1d3      	bne.n	8014872 <_free_r+0x62>
 80148ca:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80148ce:	d21b      	bcs.n	8014908 <_free_r+0xf8>
 80148d0:	08e2      	lsrs	r2, r4, #3
 80148d2:	2101      	movs	r1, #1
 80148d4:	0964      	lsrs	r4, r4, #5
 80148d6:	40a1      	lsls	r1, r4
 80148d8:	6844      	ldr	r4, [r0, #4]
 80148da:	3201      	adds	r2, #1
 80148dc:	4321      	orrs	r1, r4
 80148de:	6041      	str	r1, [r0, #4]
 80148e0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 80148e4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80148e8:	3908      	subs	r1, #8
 80148ea:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80148ee:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80148f2:	60e3      	str	r3, [r4, #12]
 80148f4:	e7bd      	b.n	8014872 <_free_r+0x62>
 80148f6:	2200      	movs	r2, #0
 80148f8:	e7d0      	b.n	801489c <_free_r+0x8c>
 80148fa:	2201      	movs	r2, #1
 80148fc:	e7ce      	b.n	801489c <_free_r+0x8c>
 80148fe:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8014902:	60ce      	str	r6, [r1, #12]
 8014904:	60b1      	str	r1, [r6, #8]
 8014906:	e7da      	b.n	80148be <_free_r+0xae>
 8014908:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801490c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8014910:	d214      	bcs.n	801493c <_free_r+0x12c>
 8014912:	09a2      	lsrs	r2, r4, #6
 8014914:	3238      	adds	r2, #56	; 0x38
 8014916:	1c51      	adds	r1, r2, #1
 8014918:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801491c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8014920:	428e      	cmp	r6, r1
 8014922:	d125      	bne.n	8014970 <_free_r+0x160>
 8014924:	2401      	movs	r4, #1
 8014926:	1092      	asrs	r2, r2, #2
 8014928:	fa04 f202 	lsl.w	r2, r4, r2
 801492c:	6844      	ldr	r4, [r0, #4]
 801492e:	4322      	orrs	r2, r4
 8014930:	6042      	str	r2, [r0, #4]
 8014932:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8014936:	60b3      	str	r3, [r6, #8]
 8014938:	60cb      	str	r3, [r1, #12]
 801493a:	e79a      	b.n	8014872 <_free_r+0x62>
 801493c:	2a14      	cmp	r2, #20
 801493e:	d801      	bhi.n	8014944 <_free_r+0x134>
 8014940:	325b      	adds	r2, #91	; 0x5b
 8014942:	e7e8      	b.n	8014916 <_free_r+0x106>
 8014944:	2a54      	cmp	r2, #84	; 0x54
 8014946:	d802      	bhi.n	801494e <_free_r+0x13e>
 8014948:	0b22      	lsrs	r2, r4, #12
 801494a:	326e      	adds	r2, #110	; 0x6e
 801494c:	e7e3      	b.n	8014916 <_free_r+0x106>
 801494e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8014952:	d802      	bhi.n	801495a <_free_r+0x14a>
 8014954:	0be2      	lsrs	r2, r4, #15
 8014956:	3277      	adds	r2, #119	; 0x77
 8014958:	e7dd      	b.n	8014916 <_free_r+0x106>
 801495a:	f240 5154 	movw	r1, #1364	; 0x554
 801495e:	428a      	cmp	r2, r1
 8014960:	bf9a      	itte	ls
 8014962:	0ca2      	lsrls	r2, r4, #18
 8014964:	327c      	addls	r2, #124	; 0x7c
 8014966:	227e      	movhi	r2, #126	; 0x7e
 8014968:	e7d5      	b.n	8014916 <_free_r+0x106>
 801496a:	6889      	ldr	r1, [r1, #8]
 801496c:	428e      	cmp	r6, r1
 801496e:	d004      	beq.n	801497a <_free_r+0x16a>
 8014970:	684a      	ldr	r2, [r1, #4]
 8014972:	f022 0203 	bic.w	r2, r2, #3
 8014976:	42a2      	cmp	r2, r4
 8014978:	d8f7      	bhi.n	801496a <_free_r+0x15a>
 801497a:	68ce      	ldr	r6, [r1, #12]
 801497c:	e7d9      	b.n	8014932 <_free_r+0x122>
 801497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014980:	200001c8 	.word	0x200001c8
 8014984:	200005d4 	.word	0x200005d4
 8014988:	200049b0 	.word	0x200049b0
 801498c:	200001d0 	.word	0x200001d0

08014990 <_malloc_r>:
 8014990:	f101 030b 	add.w	r3, r1, #11
 8014994:	2b16      	cmp	r3, #22
 8014996:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801499a:	4605      	mov	r5, r0
 801499c:	d906      	bls.n	80149ac <_malloc_r+0x1c>
 801499e:	f033 0707 	bics.w	r7, r3, #7
 80149a2:	d504      	bpl.n	80149ae <_malloc_r+0x1e>
 80149a4:	230c      	movs	r3, #12
 80149a6:	602b      	str	r3, [r5, #0]
 80149a8:	2400      	movs	r4, #0
 80149aa:	e1a1      	b.n	8014cf0 <_malloc_r+0x360>
 80149ac:	2710      	movs	r7, #16
 80149ae:	42b9      	cmp	r1, r7
 80149b0:	d8f8      	bhi.n	80149a4 <_malloc_r+0x14>
 80149b2:	4628      	mov	r0, r5
 80149b4:	f000 fa26 	bl	8014e04 <__malloc_lock>
 80149b8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80149bc:	4eae      	ldr	r6, [pc, #696]	; (8014c78 <_malloc_r+0x2e8>)
 80149be:	d237      	bcs.n	8014a30 <_malloc_r+0xa0>
 80149c0:	f107 0208 	add.w	r2, r7, #8
 80149c4:	4432      	add	r2, r6
 80149c6:	f1a2 0108 	sub.w	r1, r2, #8
 80149ca:	6854      	ldr	r4, [r2, #4]
 80149cc:	428c      	cmp	r4, r1
 80149ce:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80149d2:	d102      	bne.n	80149da <_malloc_r+0x4a>
 80149d4:	68d4      	ldr	r4, [r2, #12]
 80149d6:	42a2      	cmp	r2, r4
 80149d8:	d010      	beq.n	80149fc <_malloc_r+0x6c>
 80149da:	6863      	ldr	r3, [r4, #4]
 80149dc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80149e0:	f023 0303 	bic.w	r3, r3, #3
 80149e4:	60ca      	str	r2, [r1, #12]
 80149e6:	4423      	add	r3, r4
 80149e8:	6091      	str	r1, [r2, #8]
 80149ea:	685a      	ldr	r2, [r3, #4]
 80149ec:	f042 0201 	orr.w	r2, r2, #1
 80149f0:	605a      	str	r2, [r3, #4]
 80149f2:	4628      	mov	r0, r5
 80149f4:	f000 fa0c 	bl	8014e10 <__malloc_unlock>
 80149f8:	3408      	adds	r4, #8
 80149fa:	e179      	b.n	8014cf0 <_malloc_r+0x360>
 80149fc:	3302      	adds	r3, #2
 80149fe:	6934      	ldr	r4, [r6, #16]
 8014a00:	499e      	ldr	r1, [pc, #632]	; (8014c7c <_malloc_r+0x2ec>)
 8014a02:	428c      	cmp	r4, r1
 8014a04:	d077      	beq.n	8014af6 <_malloc_r+0x166>
 8014a06:	6862      	ldr	r2, [r4, #4]
 8014a08:	f022 0c03 	bic.w	ip, r2, #3
 8014a0c:	ebac 0007 	sub.w	r0, ip, r7
 8014a10:	280f      	cmp	r0, #15
 8014a12:	dd48      	ble.n	8014aa6 <_malloc_r+0x116>
 8014a14:	19e2      	adds	r2, r4, r7
 8014a16:	f040 0301 	orr.w	r3, r0, #1
 8014a1a:	f047 0701 	orr.w	r7, r7, #1
 8014a1e:	6067      	str	r7, [r4, #4]
 8014a20:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8014a24:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8014a28:	6053      	str	r3, [r2, #4]
 8014a2a:	f844 000c 	str.w	r0, [r4, ip]
 8014a2e:	e7e0      	b.n	80149f2 <_malloc_r+0x62>
 8014a30:	0a7b      	lsrs	r3, r7, #9
 8014a32:	d02a      	beq.n	8014a8a <_malloc_r+0xfa>
 8014a34:	2b04      	cmp	r3, #4
 8014a36:	d812      	bhi.n	8014a5e <_malloc_r+0xce>
 8014a38:	09bb      	lsrs	r3, r7, #6
 8014a3a:	3338      	adds	r3, #56	; 0x38
 8014a3c:	1c5a      	adds	r2, r3, #1
 8014a3e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8014a42:	f1a2 0c08 	sub.w	ip, r2, #8
 8014a46:	6854      	ldr	r4, [r2, #4]
 8014a48:	4564      	cmp	r4, ip
 8014a4a:	d006      	beq.n	8014a5a <_malloc_r+0xca>
 8014a4c:	6862      	ldr	r2, [r4, #4]
 8014a4e:	f022 0203 	bic.w	r2, r2, #3
 8014a52:	1bd0      	subs	r0, r2, r7
 8014a54:	280f      	cmp	r0, #15
 8014a56:	dd1c      	ble.n	8014a92 <_malloc_r+0x102>
 8014a58:	3b01      	subs	r3, #1
 8014a5a:	3301      	adds	r3, #1
 8014a5c:	e7cf      	b.n	80149fe <_malloc_r+0x6e>
 8014a5e:	2b14      	cmp	r3, #20
 8014a60:	d801      	bhi.n	8014a66 <_malloc_r+0xd6>
 8014a62:	335b      	adds	r3, #91	; 0x5b
 8014a64:	e7ea      	b.n	8014a3c <_malloc_r+0xac>
 8014a66:	2b54      	cmp	r3, #84	; 0x54
 8014a68:	d802      	bhi.n	8014a70 <_malloc_r+0xe0>
 8014a6a:	0b3b      	lsrs	r3, r7, #12
 8014a6c:	336e      	adds	r3, #110	; 0x6e
 8014a6e:	e7e5      	b.n	8014a3c <_malloc_r+0xac>
 8014a70:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8014a74:	d802      	bhi.n	8014a7c <_malloc_r+0xec>
 8014a76:	0bfb      	lsrs	r3, r7, #15
 8014a78:	3377      	adds	r3, #119	; 0x77
 8014a7a:	e7df      	b.n	8014a3c <_malloc_r+0xac>
 8014a7c:	f240 5254 	movw	r2, #1364	; 0x554
 8014a80:	4293      	cmp	r3, r2
 8014a82:	d804      	bhi.n	8014a8e <_malloc_r+0xfe>
 8014a84:	0cbb      	lsrs	r3, r7, #18
 8014a86:	337c      	adds	r3, #124	; 0x7c
 8014a88:	e7d8      	b.n	8014a3c <_malloc_r+0xac>
 8014a8a:	233f      	movs	r3, #63	; 0x3f
 8014a8c:	e7d6      	b.n	8014a3c <_malloc_r+0xac>
 8014a8e:	237e      	movs	r3, #126	; 0x7e
 8014a90:	e7d4      	b.n	8014a3c <_malloc_r+0xac>
 8014a92:	2800      	cmp	r0, #0
 8014a94:	68e1      	ldr	r1, [r4, #12]
 8014a96:	db04      	blt.n	8014aa2 <_malloc_r+0x112>
 8014a98:	68a3      	ldr	r3, [r4, #8]
 8014a9a:	60d9      	str	r1, [r3, #12]
 8014a9c:	608b      	str	r3, [r1, #8]
 8014a9e:	18a3      	adds	r3, r4, r2
 8014aa0:	e7a3      	b.n	80149ea <_malloc_r+0x5a>
 8014aa2:	460c      	mov	r4, r1
 8014aa4:	e7d0      	b.n	8014a48 <_malloc_r+0xb8>
 8014aa6:	2800      	cmp	r0, #0
 8014aa8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8014aac:	db07      	blt.n	8014abe <_malloc_r+0x12e>
 8014aae:	44a4      	add	ip, r4
 8014ab0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8014ab4:	f043 0301 	orr.w	r3, r3, #1
 8014ab8:	f8cc 3004 	str.w	r3, [ip, #4]
 8014abc:	e799      	b.n	80149f2 <_malloc_r+0x62>
 8014abe:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8014ac2:	6870      	ldr	r0, [r6, #4]
 8014ac4:	f080 8093 	bcs.w	8014bee <_malloc_r+0x25e>
 8014ac8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8014acc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8014ad0:	f04f 0c01 	mov.w	ip, #1
 8014ad4:	3201      	adds	r2, #1
 8014ad6:	fa0c fc0e 	lsl.w	ip, ip, lr
 8014ada:	ea4c 0000 	orr.w	r0, ip, r0
 8014ade:	6070      	str	r0, [r6, #4]
 8014ae0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8014ae4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8014ae8:	3808      	subs	r0, #8
 8014aea:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8014aee:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8014af2:	f8cc 400c 	str.w	r4, [ip, #12]
 8014af6:	1098      	asrs	r0, r3, #2
 8014af8:	2201      	movs	r2, #1
 8014afa:	4082      	lsls	r2, r0
 8014afc:	6870      	ldr	r0, [r6, #4]
 8014afe:	4290      	cmp	r0, r2
 8014b00:	d326      	bcc.n	8014b50 <_malloc_r+0x1c0>
 8014b02:	4210      	tst	r0, r2
 8014b04:	d106      	bne.n	8014b14 <_malloc_r+0x184>
 8014b06:	f023 0303 	bic.w	r3, r3, #3
 8014b0a:	0052      	lsls	r2, r2, #1
 8014b0c:	4210      	tst	r0, r2
 8014b0e:	f103 0304 	add.w	r3, r3, #4
 8014b12:	d0fa      	beq.n	8014b0a <_malloc_r+0x17a>
 8014b14:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8014b18:	46c1      	mov	r9, r8
 8014b1a:	469e      	mov	lr, r3
 8014b1c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8014b20:	454c      	cmp	r4, r9
 8014b22:	f040 80b7 	bne.w	8014c94 <_malloc_r+0x304>
 8014b26:	f10e 0e01 	add.w	lr, lr, #1
 8014b2a:	f01e 0f03 	tst.w	lr, #3
 8014b2e:	f109 0908 	add.w	r9, r9, #8
 8014b32:	d1f3      	bne.n	8014b1c <_malloc_r+0x18c>
 8014b34:	0798      	lsls	r0, r3, #30
 8014b36:	f040 80e1 	bne.w	8014cfc <_malloc_r+0x36c>
 8014b3a:	6873      	ldr	r3, [r6, #4]
 8014b3c:	ea23 0302 	bic.w	r3, r3, r2
 8014b40:	6073      	str	r3, [r6, #4]
 8014b42:	6870      	ldr	r0, [r6, #4]
 8014b44:	0052      	lsls	r2, r2, #1
 8014b46:	4290      	cmp	r0, r2
 8014b48:	d302      	bcc.n	8014b50 <_malloc_r+0x1c0>
 8014b4a:	2a00      	cmp	r2, #0
 8014b4c:	f040 80e3 	bne.w	8014d16 <_malloc_r+0x386>
 8014b50:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8014b54:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014b58:	f023 0903 	bic.w	r9, r3, #3
 8014b5c:	45b9      	cmp	r9, r7
 8014b5e:	d304      	bcc.n	8014b6a <_malloc_r+0x1da>
 8014b60:	eba9 0207 	sub.w	r2, r9, r7
 8014b64:	2a0f      	cmp	r2, #15
 8014b66:	f300 8141 	bgt.w	8014dec <_malloc_r+0x45c>
 8014b6a:	4b45      	ldr	r3, [pc, #276]	; (8014c80 <_malloc_r+0x2f0>)
 8014b6c:	6819      	ldr	r1, [r3, #0]
 8014b6e:	3110      	adds	r1, #16
 8014b70:	4439      	add	r1, r7
 8014b72:	2008      	movs	r0, #8
 8014b74:	9101      	str	r1, [sp, #4]
 8014b76:	f003 fe5f 	bl	8018838 <sysconf>
 8014b7a:	4a42      	ldr	r2, [pc, #264]	; (8014c84 <_malloc_r+0x2f4>)
 8014b7c:	9901      	ldr	r1, [sp, #4]
 8014b7e:	6813      	ldr	r3, [r2, #0]
 8014b80:	3301      	adds	r3, #1
 8014b82:	bf1f      	itttt	ne
 8014b84:	f101 31ff 	addne.w	r1, r1, #4294967295
 8014b88:	1809      	addne	r1, r1, r0
 8014b8a:	4243      	negne	r3, r0
 8014b8c:	4019      	andne	r1, r3
 8014b8e:	4680      	mov	r8, r0
 8014b90:	4628      	mov	r0, r5
 8014b92:	9101      	str	r1, [sp, #4]
 8014b94:	f003 fe2c 	bl	80187f0 <_sbrk_r>
 8014b98:	1c42      	adds	r2, r0, #1
 8014b9a:	eb0a 0b09 	add.w	fp, sl, r9
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	f000 80f7 	beq.w	8014d92 <_malloc_r+0x402>
 8014ba4:	4583      	cmp	fp, r0
 8014ba6:	9901      	ldr	r1, [sp, #4]
 8014ba8:	4a36      	ldr	r2, [pc, #216]	; (8014c84 <_malloc_r+0x2f4>)
 8014baa:	d902      	bls.n	8014bb2 <_malloc_r+0x222>
 8014bac:	45b2      	cmp	sl, r6
 8014bae:	f040 80f0 	bne.w	8014d92 <_malloc_r+0x402>
 8014bb2:	4b35      	ldr	r3, [pc, #212]	; (8014c88 <_malloc_r+0x2f8>)
 8014bb4:	6818      	ldr	r0, [r3, #0]
 8014bb6:	45a3      	cmp	fp, r4
 8014bb8:	4408      	add	r0, r1
 8014bba:	6018      	str	r0, [r3, #0]
 8014bbc:	f108 3cff 	add.w	ip, r8, #4294967295
 8014bc0:	f040 80ab 	bne.w	8014d1a <_malloc_r+0x38a>
 8014bc4:	ea1b 0f0c 	tst.w	fp, ip
 8014bc8:	f040 80a7 	bne.w	8014d1a <_malloc_r+0x38a>
 8014bcc:	68b2      	ldr	r2, [r6, #8]
 8014bce:	4449      	add	r1, r9
 8014bd0:	f041 0101 	orr.w	r1, r1, #1
 8014bd4:	6051      	str	r1, [r2, #4]
 8014bd6:	4a2d      	ldr	r2, [pc, #180]	; (8014c8c <_malloc_r+0x2fc>)
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	6811      	ldr	r1, [r2, #0]
 8014bdc:	428b      	cmp	r3, r1
 8014bde:	bf88      	it	hi
 8014be0:	6013      	strhi	r3, [r2, #0]
 8014be2:	4a2b      	ldr	r2, [pc, #172]	; (8014c90 <_malloc_r+0x300>)
 8014be4:	6811      	ldr	r1, [r2, #0]
 8014be6:	428b      	cmp	r3, r1
 8014be8:	bf88      	it	hi
 8014bea:	6013      	strhi	r3, [r2, #0]
 8014bec:	e0d1      	b.n	8014d92 <_malloc_r+0x402>
 8014bee:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8014bf2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8014bf6:	d218      	bcs.n	8014c2a <_malloc_r+0x29a>
 8014bf8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8014bfc:	3238      	adds	r2, #56	; 0x38
 8014bfe:	f102 0e01 	add.w	lr, r2, #1
 8014c02:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8014c06:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8014c0a:	45f0      	cmp	r8, lr
 8014c0c:	d12b      	bne.n	8014c66 <_malloc_r+0x2d6>
 8014c0e:	1092      	asrs	r2, r2, #2
 8014c10:	f04f 0c01 	mov.w	ip, #1
 8014c14:	fa0c f202 	lsl.w	r2, ip, r2
 8014c18:	4302      	orrs	r2, r0
 8014c1a:	6072      	str	r2, [r6, #4]
 8014c1c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8014c20:	f8c8 4008 	str.w	r4, [r8, #8]
 8014c24:	f8ce 400c 	str.w	r4, [lr, #12]
 8014c28:	e765      	b.n	8014af6 <_malloc_r+0x166>
 8014c2a:	2a14      	cmp	r2, #20
 8014c2c:	d801      	bhi.n	8014c32 <_malloc_r+0x2a2>
 8014c2e:	325b      	adds	r2, #91	; 0x5b
 8014c30:	e7e5      	b.n	8014bfe <_malloc_r+0x26e>
 8014c32:	2a54      	cmp	r2, #84	; 0x54
 8014c34:	d803      	bhi.n	8014c3e <_malloc_r+0x2ae>
 8014c36:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8014c3a:	326e      	adds	r2, #110	; 0x6e
 8014c3c:	e7df      	b.n	8014bfe <_malloc_r+0x26e>
 8014c3e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8014c42:	d803      	bhi.n	8014c4c <_malloc_r+0x2bc>
 8014c44:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8014c48:	3277      	adds	r2, #119	; 0x77
 8014c4a:	e7d8      	b.n	8014bfe <_malloc_r+0x26e>
 8014c4c:	f240 5e54 	movw	lr, #1364	; 0x554
 8014c50:	4572      	cmp	r2, lr
 8014c52:	bf9a      	itte	ls
 8014c54:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8014c58:	327c      	addls	r2, #124	; 0x7c
 8014c5a:	227e      	movhi	r2, #126	; 0x7e
 8014c5c:	e7cf      	b.n	8014bfe <_malloc_r+0x26e>
 8014c5e:	f8de e008 	ldr.w	lr, [lr, #8]
 8014c62:	45f0      	cmp	r8, lr
 8014c64:	d005      	beq.n	8014c72 <_malloc_r+0x2e2>
 8014c66:	f8de 2004 	ldr.w	r2, [lr, #4]
 8014c6a:	f022 0203 	bic.w	r2, r2, #3
 8014c6e:	4562      	cmp	r2, ip
 8014c70:	d8f5      	bhi.n	8014c5e <_malloc_r+0x2ce>
 8014c72:	f8de 800c 	ldr.w	r8, [lr, #12]
 8014c76:	e7d1      	b.n	8014c1c <_malloc_r+0x28c>
 8014c78:	200001c8 	.word	0x200001c8
 8014c7c:	200001d0 	.word	0x200001d0
 8014c80:	200049b0 	.word	0x200049b0
 8014c84:	200005d0 	.word	0x200005d0
 8014c88:	20004980 	.word	0x20004980
 8014c8c:	200049a8 	.word	0x200049a8
 8014c90:	200049ac 	.word	0x200049ac
 8014c94:	6860      	ldr	r0, [r4, #4]
 8014c96:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8014c9a:	f020 0003 	bic.w	r0, r0, #3
 8014c9e:	eba0 0a07 	sub.w	sl, r0, r7
 8014ca2:	f1ba 0f0f 	cmp.w	sl, #15
 8014ca6:	dd12      	ble.n	8014cce <_malloc_r+0x33e>
 8014ca8:	68a3      	ldr	r3, [r4, #8]
 8014caa:	19e2      	adds	r2, r4, r7
 8014cac:	f047 0701 	orr.w	r7, r7, #1
 8014cb0:	6067      	str	r7, [r4, #4]
 8014cb2:	f8c3 c00c 	str.w	ip, [r3, #12]
 8014cb6:	f8cc 3008 	str.w	r3, [ip, #8]
 8014cba:	f04a 0301 	orr.w	r3, sl, #1
 8014cbe:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8014cc2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8014cc6:	6053      	str	r3, [r2, #4]
 8014cc8:	f844 a000 	str.w	sl, [r4, r0]
 8014ccc:	e691      	b.n	80149f2 <_malloc_r+0x62>
 8014cce:	f1ba 0f00 	cmp.w	sl, #0
 8014cd2:	db11      	blt.n	8014cf8 <_malloc_r+0x368>
 8014cd4:	4420      	add	r0, r4
 8014cd6:	6843      	ldr	r3, [r0, #4]
 8014cd8:	f043 0301 	orr.w	r3, r3, #1
 8014cdc:	6043      	str	r3, [r0, #4]
 8014cde:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8014ce2:	4628      	mov	r0, r5
 8014ce4:	f8c3 c00c 	str.w	ip, [r3, #12]
 8014ce8:	f8cc 3008 	str.w	r3, [ip, #8]
 8014cec:	f000 f890 	bl	8014e10 <__malloc_unlock>
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	b003      	add	sp, #12
 8014cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf8:	4664      	mov	r4, ip
 8014cfa:	e711      	b.n	8014b20 <_malloc_r+0x190>
 8014cfc:	f858 0908 	ldr.w	r0, [r8], #-8
 8014d00:	4540      	cmp	r0, r8
 8014d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8014d06:	f43f af15 	beq.w	8014b34 <_malloc_r+0x1a4>
 8014d0a:	e71a      	b.n	8014b42 <_malloc_r+0x1b2>
 8014d0c:	3304      	adds	r3, #4
 8014d0e:	0052      	lsls	r2, r2, #1
 8014d10:	4210      	tst	r0, r2
 8014d12:	d0fb      	beq.n	8014d0c <_malloc_r+0x37c>
 8014d14:	e6fe      	b.n	8014b14 <_malloc_r+0x184>
 8014d16:	4673      	mov	r3, lr
 8014d18:	e7fa      	b.n	8014d10 <_malloc_r+0x380>
 8014d1a:	f8d2 e000 	ldr.w	lr, [r2]
 8014d1e:	f1be 3fff 	cmp.w	lr, #4294967295
 8014d22:	bf1b      	ittet	ne
 8014d24:	eba4 0b0b 	subne.w	fp, r4, fp
 8014d28:	eb0b 0200 	addne.w	r2, fp, r0
 8014d2c:	6014      	streq	r4, [r2, #0]
 8014d2e:	601a      	strne	r2, [r3, #0]
 8014d30:	f014 0b07 	ands.w	fp, r4, #7
 8014d34:	bf1a      	itte	ne
 8014d36:	f1cb 0008 	rsbne	r0, fp, #8
 8014d3a:	1824      	addne	r4, r4, r0
 8014d3c:	4658      	moveq	r0, fp
 8014d3e:	1862      	adds	r2, r4, r1
 8014d40:	ea02 010c 	and.w	r1, r2, ip
 8014d44:	4480      	add	r8, r0
 8014d46:	eba8 0801 	sub.w	r8, r8, r1
 8014d4a:	ea08 080c 	and.w	r8, r8, ip
 8014d4e:	4641      	mov	r1, r8
 8014d50:	4628      	mov	r0, r5
 8014d52:	9201      	str	r2, [sp, #4]
 8014d54:	f003 fd4c 	bl	80187f0 <_sbrk_r>
 8014d58:	1c43      	adds	r3, r0, #1
 8014d5a:	9a01      	ldr	r2, [sp, #4]
 8014d5c:	4b28      	ldr	r3, [pc, #160]	; (8014e00 <_malloc_r+0x470>)
 8014d5e:	d107      	bne.n	8014d70 <_malloc_r+0x3e0>
 8014d60:	f1bb 0f00 	cmp.w	fp, #0
 8014d64:	d023      	beq.n	8014dae <_malloc_r+0x41e>
 8014d66:	f1ab 0008 	sub.w	r0, fp, #8
 8014d6a:	4410      	add	r0, r2
 8014d6c:	f04f 0800 	mov.w	r8, #0
 8014d70:	681a      	ldr	r2, [r3, #0]
 8014d72:	60b4      	str	r4, [r6, #8]
 8014d74:	1b00      	subs	r0, r0, r4
 8014d76:	4440      	add	r0, r8
 8014d78:	4442      	add	r2, r8
 8014d7a:	f040 0001 	orr.w	r0, r0, #1
 8014d7e:	45b2      	cmp	sl, r6
 8014d80:	601a      	str	r2, [r3, #0]
 8014d82:	6060      	str	r0, [r4, #4]
 8014d84:	f43f af27 	beq.w	8014bd6 <_malloc_r+0x246>
 8014d88:	f1b9 0f0f 	cmp.w	r9, #15
 8014d8c:	d812      	bhi.n	8014db4 <_malloc_r+0x424>
 8014d8e:	2301      	movs	r3, #1
 8014d90:	6063      	str	r3, [r4, #4]
 8014d92:	68b3      	ldr	r3, [r6, #8]
 8014d94:	685b      	ldr	r3, [r3, #4]
 8014d96:	f023 0303 	bic.w	r3, r3, #3
 8014d9a:	42bb      	cmp	r3, r7
 8014d9c:	eba3 0207 	sub.w	r2, r3, r7
 8014da0:	d301      	bcc.n	8014da6 <_malloc_r+0x416>
 8014da2:	2a0f      	cmp	r2, #15
 8014da4:	dc22      	bgt.n	8014dec <_malloc_r+0x45c>
 8014da6:	4628      	mov	r0, r5
 8014da8:	f000 f832 	bl	8014e10 <__malloc_unlock>
 8014dac:	e5fc      	b.n	80149a8 <_malloc_r+0x18>
 8014dae:	4610      	mov	r0, r2
 8014db0:	46d8      	mov	r8, fp
 8014db2:	e7dd      	b.n	8014d70 <_malloc_r+0x3e0>
 8014db4:	f8da 2004 	ldr.w	r2, [sl, #4]
 8014db8:	f1a9 090c 	sub.w	r9, r9, #12
 8014dbc:	f029 0907 	bic.w	r9, r9, #7
 8014dc0:	f002 0201 	and.w	r2, r2, #1
 8014dc4:	ea42 0209 	orr.w	r2, r2, r9
 8014dc8:	f8ca 2004 	str.w	r2, [sl, #4]
 8014dcc:	2105      	movs	r1, #5
 8014dce:	eb0a 0209 	add.w	r2, sl, r9
 8014dd2:	f1b9 0f0f 	cmp.w	r9, #15
 8014dd6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8014dda:	f67f aefc 	bls.w	8014bd6 <_malloc_r+0x246>
 8014dde:	f10a 0108 	add.w	r1, sl, #8
 8014de2:	4628      	mov	r0, r5
 8014de4:	f7ff fd14 	bl	8014810 <_free_r>
 8014de8:	4b05      	ldr	r3, [pc, #20]	; (8014e00 <_malloc_r+0x470>)
 8014dea:	e6f4      	b.n	8014bd6 <_malloc_r+0x246>
 8014dec:	68b4      	ldr	r4, [r6, #8]
 8014dee:	f047 0301 	orr.w	r3, r7, #1
 8014df2:	4427      	add	r7, r4
 8014df4:	f042 0201 	orr.w	r2, r2, #1
 8014df8:	6063      	str	r3, [r4, #4]
 8014dfa:	60b7      	str	r7, [r6, #8]
 8014dfc:	607a      	str	r2, [r7, #4]
 8014dfe:	e5f8      	b.n	80149f2 <_malloc_r+0x62>
 8014e00:	20004980 	.word	0x20004980

08014e04 <__malloc_lock>:
 8014e04:	4801      	ldr	r0, [pc, #4]	; (8014e0c <__malloc_lock+0x8>)
 8014e06:	f7ff bc8f 	b.w	8014728 <__retarget_lock_acquire_recursive>
 8014e0a:	bf00      	nop
 8014e0c:	20004979 	.word	0x20004979

08014e10 <__malloc_unlock>:
 8014e10:	4801      	ldr	r0, [pc, #4]	; (8014e18 <__malloc_unlock+0x8>)
 8014e12:	f7ff bc8a 	b.w	801472a <__retarget_lock_release_recursive>
 8014e16:	bf00      	nop
 8014e18:	20004979 	.word	0x20004979

08014e1c <_realloc_r>:
 8014e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e20:	460c      	mov	r4, r1
 8014e22:	4682      	mov	sl, r0
 8014e24:	4611      	mov	r1, r2
 8014e26:	b924      	cbnz	r4, 8014e32 <_realloc_r+0x16>
 8014e28:	b003      	add	sp, #12
 8014e2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e2e:	f7ff bdaf 	b.w	8014990 <_malloc_r>
 8014e32:	9201      	str	r2, [sp, #4]
 8014e34:	f7ff ffe6 	bl	8014e04 <__malloc_lock>
 8014e38:	9901      	ldr	r1, [sp, #4]
 8014e3a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8014e3e:	f101 080b 	add.w	r8, r1, #11
 8014e42:	f1b8 0f16 	cmp.w	r8, #22
 8014e46:	d90b      	bls.n	8014e60 <_realloc_r+0x44>
 8014e48:	f038 0807 	bics.w	r8, r8, #7
 8014e4c:	d50a      	bpl.n	8014e64 <_realloc_r+0x48>
 8014e4e:	230c      	movs	r3, #12
 8014e50:	f8ca 3000 	str.w	r3, [sl]
 8014e54:	f04f 0b00 	mov.w	fp, #0
 8014e58:	4658      	mov	r0, fp
 8014e5a:	b003      	add	sp, #12
 8014e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e60:	f04f 0810 	mov.w	r8, #16
 8014e64:	4588      	cmp	r8, r1
 8014e66:	d3f2      	bcc.n	8014e4e <_realloc_r+0x32>
 8014e68:	f025 0603 	bic.w	r6, r5, #3
 8014e6c:	45b0      	cmp	r8, r6
 8014e6e:	f1a4 0908 	sub.w	r9, r4, #8
 8014e72:	f340 816e 	ble.w	8015152 <_realloc_r+0x336>
 8014e76:	4a9b      	ldr	r2, [pc, #620]	; (80150e4 <_realloc_r+0x2c8>)
 8014e78:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8014e7c:	eb09 0306 	add.w	r3, r9, r6
 8014e80:	459c      	cmp	ip, r3
 8014e82:	685a      	ldr	r2, [r3, #4]
 8014e84:	d005      	beq.n	8014e92 <_realloc_r+0x76>
 8014e86:	f022 0001 	bic.w	r0, r2, #1
 8014e8a:	4418      	add	r0, r3
 8014e8c:	6840      	ldr	r0, [r0, #4]
 8014e8e:	07c7      	lsls	r7, r0, #31
 8014e90:	d447      	bmi.n	8014f22 <_realloc_r+0x106>
 8014e92:	f022 0203 	bic.w	r2, r2, #3
 8014e96:	459c      	cmp	ip, r3
 8014e98:	eb06 0702 	add.w	r7, r6, r2
 8014e9c:	d119      	bne.n	8014ed2 <_realloc_r+0xb6>
 8014e9e:	f108 0010 	add.w	r0, r8, #16
 8014ea2:	42b8      	cmp	r0, r7
 8014ea4:	dc3f      	bgt.n	8014f26 <_realloc_r+0x10a>
 8014ea6:	eb09 0308 	add.w	r3, r9, r8
 8014eaa:	4a8e      	ldr	r2, [pc, #568]	; (80150e4 <_realloc_r+0x2c8>)
 8014eac:	eba7 0708 	sub.w	r7, r7, r8
 8014eb0:	f047 0701 	orr.w	r7, r7, #1
 8014eb4:	6093      	str	r3, [r2, #8]
 8014eb6:	605f      	str	r7, [r3, #4]
 8014eb8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014ebc:	f003 0301 	and.w	r3, r3, #1
 8014ec0:	ea43 0308 	orr.w	r3, r3, r8
 8014ec4:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ec8:	4650      	mov	r0, sl
 8014eca:	f7ff ffa1 	bl	8014e10 <__malloc_unlock>
 8014ece:	46a3      	mov	fp, r4
 8014ed0:	e7c2      	b.n	8014e58 <_realloc_r+0x3c>
 8014ed2:	45b8      	cmp	r8, r7
 8014ed4:	dc27      	bgt.n	8014f26 <_realloc_r+0x10a>
 8014ed6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8014eda:	60da      	str	r2, [r3, #12]
 8014edc:	6093      	str	r3, [r2, #8]
 8014ede:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014ee2:	eba7 0008 	sub.w	r0, r7, r8
 8014ee6:	280f      	cmp	r0, #15
 8014ee8:	f003 0301 	and.w	r3, r3, #1
 8014eec:	eb09 0207 	add.w	r2, r9, r7
 8014ef0:	f240 8131 	bls.w	8015156 <_realloc_r+0x33a>
 8014ef4:	eb09 0108 	add.w	r1, r9, r8
 8014ef8:	ea48 0303 	orr.w	r3, r8, r3
 8014efc:	f040 0001 	orr.w	r0, r0, #1
 8014f00:	f8c9 3004 	str.w	r3, [r9, #4]
 8014f04:	6048      	str	r0, [r1, #4]
 8014f06:	6853      	ldr	r3, [r2, #4]
 8014f08:	f043 0301 	orr.w	r3, r3, #1
 8014f0c:	6053      	str	r3, [r2, #4]
 8014f0e:	3108      	adds	r1, #8
 8014f10:	4650      	mov	r0, sl
 8014f12:	f7ff fc7d 	bl	8014810 <_free_r>
 8014f16:	4650      	mov	r0, sl
 8014f18:	f7ff ff7a 	bl	8014e10 <__malloc_unlock>
 8014f1c:	f109 0b08 	add.w	fp, r9, #8
 8014f20:	e79a      	b.n	8014e58 <_realloc_r+0x3c>
 8014f22:	2200      	movs	r2, #0
 8014f24:	4613      	mov	r3, r2
 8014f26:	07e8      	lsls	r0, r5, #31
 8014f28:	f100 80c6 	bmi.w	80150b8 <_realloc_r+0x29c>
 8014f2c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8014f30:	eba9 0505 	sub.w	r5, r9, r5
 8014f34:	6868      	ldr	r0, [r5, #4]
 8014f36:	f020 0003 	bic.w	r0, r0, #3
 8014f3a:	eb00 0b06 	add.w	fp, r0, r6
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	f000 8086 	beq.w	8015050 <_realloc_r+0x234>
 8014f44:	459c      	cmp	ip, r3
 8014f46:	eb02 070b 	add.w	r7, r2, fp
 8014f4a:	d149      	bne.n	8014fe0 <_realloc_r+0x1c4>
 8014f4c:	f108 0310 	add.w	r3, r8, #16
 8014f50:	42bb      	cmp	r3, r7
 8014f52:	dc7d      	bgt.n	8015050 <_realloc_r+0x234>
 8014f54:	46ab      	mov	fp, r5
 8014f56:	68eb      	ldr	r3, [r5, #12]
 8014f58:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8014f5c:	60d3      	str	r3, [r2, #12]
 8014f5e:	609a      	str	r2, [r3, #8]
 8014f60:	1f32      	subs	r2, r6, #4
 8014f62:	2a24      	cmp	r2, #36	; 0x24
 8014f64:	d837      	bhi.n	8014fd6 <_realloc_r+0x1ba>
 8014f66:	2a13      	cmp	r2, #19
 8014f68:	d933      	bls.n	8014fd2 <_realloc_r+0x1b6>
 8014f6a:	6823      	ldr	r3, [r4, #0]
 8014f6c:	60ab      	str	r3, [r5, #8]
 8014f6e:	6863      	ldr	r3, [r4, #4]
 8014f70:	60eb      	str	r3, [r5, #12]
 8014f72:	2a1b      	cmp	r2, #27
 8014f74:	d81b      	bhi.n	8014fae <_realloc_r+0x192>
 8014f76:	3408      	adds	r4, #8
 8014f78:	f105 0310 	add.w	r3, r5, #16
 8014f7c:	6822      	ldr	r2, [r4, #0]
 8014f7e:	601a      	str	r2, [r3, #0]
 8014f80:	6862      	ldr	r2, [r4, #4]
 8014f82:	605a      	str	r2, [r3, #4]
 8014f84:	68a2      	ldr	r2, [r4, #8]
 8014f86:	609a      	str	r2, [r3, #8]
 8014f88:	eb05 0308 	add.w	r3, r5, r8
 8014f8c:	4a55      	ldr	r2, [pc, #340]	; (80150e4 <_realloc_r+0x2c8>)
 8014f8e:	eba7 0708 	sub.w	r7, r7, r8
 8014f92:	f047 0701 	orr.w	r7, r7, #1
 8014f96:	6093      	str	r3, [r2, #8]
 8014f98:	605f      	str	r7, [r3, #4]
 8014f9a:	686b      	ldr	r3, [r5, #4]
 8014f9c:	f003 0301 	and.w	r3, r3, #1
 8014fa0:	ea43 0308 	orr.w	r3, r3, r8
 8014fa4:	606b      	str	r3, [r5, #4]
 8014fa6:	4650      	mov	r0, sl
 8014fa8:	f7ff ff32 	bl	8014e10 <__malloc_unlock>
 8014fac:	e754      	b.n	8014e58 <_realloc_r+0x3c>
 8014fae:	68a3      	ldr	r3, [r4, #8]
 8014fb0:	612b      	str	r3, [r5, #16]
 8014fb2:	68e3      	ldr	r3, [r4, #12]
 8014fb4:	616b      	str	r3, [r5, #20]
 8014fb6:	2a24      	cmp	r2, #36	; 0x24
 8014fb8:	bf01      	itttt	eq
 8014fba:	6923      	ldreq	r3, [r4, #16]
 8014fbc:	61ab      	streq	r3, [r5, #24]
 8014fbe:	6962      	ldreq	r2, [r4, #20]
 8014fc0:	61ea      	streq	r2, [r5, #28]
 8014fc2:	bf19      	ittee	ne
 8014fc4:	3410      	addne	r4, #16
 8014fc6:	f105 0318 	addne.w	r3, r5, #24
 8014fca:	f105 0320 	addeq.w	r3, r5, #32
 8014fce:	3418      	addeq	r4, #24
 8014fd0:	e7d4      	b.n	8014f7c <_realloc_r+0x160>
 8014fd2:	465b      	mov	r3, fp
 8014fd4:	e7d2      	b.n	8014f7c <_realloc_r+0x160>
 8014fd6:	4621      	mov	r1, r4
 8014fd8:	4658      	mov	r0, fp
 8014fda:	f7ff faa1 	bl	8014520 <memmove>
 8014fde:	e7d3      	b.n	8014f88 <_realloc_r+0x16c>
 8014fe0:	45b8      	cmp	r8, r7
 8014fe2:	dc35      	bgt.n	8015050 <_realloc_r+0x234>
 8014fe4:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8014fe8:	4628      	mov	r0, r5
 8014fea:	60da      	str	r2, [r3, #12]
 8014fec:	6093      	str	r3, [r2, #8]
 8014fee:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8014ff2:	68eb      	ldr	r3, [r5, #12]
 8014ff4:	60d3      	str	r3, [r2, #12]
 8014ff6:	609a      	str	r2, [r3, #8]
 8014ff8:	1f32      	subs	r2, r6, #4
 8014ffa:	2a24      	cmp	r2, #36	; 0x24
 8014ffc:	d824      	bhi.n	8015048 <_realloc_r+0x22c>
 8014ffe:	2a13      	cmp	r2, #19
 8015000:	d908      	bls.n	8015014 <_realloc_r+0x1f8>
 8015002:	6823      	ldr	r3, [r4, #0]
 8015004:	60ab      	str	r3, [r5, #8]
 8015006:	6863      	ldr	r3, [r4, #4]
 8015008:	60eb      	str	r3, [r5, #12]
 801500a:	2a1b      	cmp	r2, #27
 801500c:	d80a      	bhi.n	8015024 <_realloc_r+0x208>
 801500e:	3408      	adds	r4, #8
 8015010:	f105 0010 	add.w	r0, r5, #16
 8015014:	6823      	ldr	r3, [r4, #0]
 8015016:	6003      	str	r3, [r0, #0]
 8015018:	6863      	ldr	r3, [r4, #4]
 801501a:	6043      	str	r3, [r0, #4]
 801501c:	68a3      	ldr	r3, [r4, #8]
 801501e:	6083      	str	r3, [r0, #8]
 8015020:	46a9      	mov	r9, r5
 8015022:	e75c      	b.n	8014ede <_realloc_r+0xc2>
 8015024:	68a3      	ldr	r3, [r4, #8]
 8015026:	612b      	str	r3, [r5, #16]
 8015028:	68e3      	ldr	r3, [r4, #12]
 801502a:	616b      	str	r3, [r5, #20]
 801502c:	2a24      	cmp	r2, #36	; 0x24
 801502e:	bf01      	itttt	eq
 8015030:	6923      	ldreq	r3, [r4, #16]
 8015032:	61ab      	streq	r3, [r5, #24]
 8015034:	6963      	ldreq	r3, [r4, #20]
 8015036:	61eb      	streq	r3, [r5, #28]
 8015038:	bf19      	ittee	ne
 801503a:	3410      	addne	r4, #16
 801503c:	f105 0018 	addne.w	r0, r5, #24
 8015040:	f105 0020 	addeq.w	r0, r5, #32
 8015044:	3418      	addeq	r4, #24
 8015046:	e7e5      	b.n	8015014 <_realloc_r+0x1f8>
 8015048:	4621      	mov	r1, r4
 801504a:	f7ff fa69 	bl	8014520 <memmove>
 801504e:	e7e7      	b.n	8015020 <_realloc_r+0x204>
 8015050:	45d8      	cmp	r8, fp
 8015052:	dc31      	bgt.n	80150b8 <_realloc_r+0x29c>
 8015054:	4628      	mov	r0, r5
 8015056:	68eb      	ldr	r3, [r5, #12]
 8015058:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801505c:	60d3      	str	r3, [r2, #12]
 801505e:	609a      	str	r2, [r3, #8]
 8015060:	1f32      	subs	r2, r6, #4
 8015062:	2a24      	cmp	r2, #36	; 0x24
 8015064:	d824      	bhi.n	80150b0 <_realloc_r+0x294>
 8015066:	2a13      	cmp	r2, #19
 8015068:	d908      	bls.n	801507c <_realloc_r+0x260>
 801506a:	6823      	ldr	r3, [r4, #0]
 801506c:	60ab      	str	r3, [r5, #8]
 801506e:	6863      	ldr	r3, [r4, #4]
 8015070:	60eb      	str	r3, [r5, #12]
 8015072:	2a1b      	cmp	r2, #27
 8015074:	d80a      	bhi.n	801508c <_realloc_r+0x270>
 8015076:	3408      	adds	r4, #8
 8015078:	f105 0010 	add.w	r0, r5, #16
 801507c:	6823      	ldr	r3, [r4, #0]
 801507e:	6003      	str	r3, [r0, #0]
 8015080:	6863      	ldr	r3, [r4, #4]
 8015082:	6043      	str	r3, [r0, #4]
 8015084:	68a3      	ldr	r3, [r4, #8]
 8015086:	6083      	str	r3, [r0, #8]
 8015088:	465f      	mov	r7, fp
 801508a:	e7c9      	b.n	8015020 <_realloc_r+0x204>
 801508c:	68a3      	ldr	r3, [r4, #8]
 801508e:	612b      	str	r3, [r5, #16]
 8015090:	68e3      	ldr	r3, [r4, #12]
 8015092:	616b      	str	r3, [r5, #20]
 8015094:	2a24      	cmp	r2, #36	; 0x24
 8015096:	bf01      	itttt	eq
 8015098:	6923      	ldreq	r3, [r4, #16]
 801509a:	61ab      	streq	r3, [r5, #24]
 801509c:	6963      	ldreq	r3, [r4, #20]
 801509e:	61eb      	streq	r3, [r5, #28]
 80150a0:	bf19      	ittee	ne
 80150a2:	3410      	addne	r4, #16
 80150a4:	f105 0018 	addne.w	r0, r5, #24
 80150a8:	f105 0020 	addeq.w	r0, r5, #32
 80150ac:	3418      	addeq	r4, #24
 80150ae:	e7e5      	b.n	801507c <_realloc_r+0x260>
 80150b0:	4621      	mov	r1, r4
 80150b2:	f7ff fa35 	bl	8014520 <memmove>
 80150b6:	e7e7      	b.n	8015088 <_realloc_r+0x26c>
 80150b8:	4650      	mov	r0, sl
 80150ba:	f7ff fc69 	bl	8014990 <_malloc_r>
 80150be:	4683      	mov	fp, r0
 80150c0:	2800      	cmp	r0, #0
 80150c2:	f43f af70 	beq.w	8014fa6 <_realloc_r+0x18a>
 80150c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80150ca:	f023 0301 	bic.w	r3, r3, #1
 80150ce:	444b      	add	r3, r9
 80150d0:	f1a0 0208 	sub.w	r2, r0, #8
 80150d4:	4293      	cmp	r3, r2
 80150d6:	d107      	bne.n	80150e8 <_realloc_r+0x2cc>
 80150d8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80150dc:	f027 0703 	bic.w	r7, r7, #3
 80150e0:	4437      	add	r7, r6
 80150e2:	e6fc      	b.n	8014ede <_realloc_r+0xc2>
 80150e4:	200001c8 	.word	0x200001c8
 80150e8:	1f32      	subs	r2, r6, #4
 80150ea:	2a24      	cmp	r2, #36	; 0x24
 80150ec:	d82d      	bhi.n	801514a <_realloc_r+0x32e>
 80150ee:	2a13      	cmp	r2, #19
 80150f0:	d928      	bls.n	8015144 <_realloc_r+0x328>
 80150f2:	6823      	ldr	r3, [r4, #0]
 80150f4:	6003      	str	r3, [r0, #0]
 80150f6:	6863      	ldr	r3, [r4, #4]
 80150f8:	6043      	str	r3, [r0, #4]
 80150fa:	2a1b      	cmp	r2, #27
 80150fc:	d80e      	bhi.n	801511c <_realloc_r+0x300>
 80150fe:	f104 0208 	add.w	r2, r4, #8
 8015102:	f100 0308 	add.w	r3, r0, #8
 8015106:	6811      	ldr	r1, [r2, #0]
 8015108:	6019      	str	r1, [r3, #0]
 801510a:	6851      	ldr	r1, [r2, #4]
 801510c:	6059      	str	r1, [r3, #4]
 801510e:	6892      	ldr	r2, [r2, #8]
 8015110:	609a      	str	r2, [r3, #8]
 8015112:	4621      	mov	r1, r4
 8015114:	4650      	mov	r0, sl
 8015116:	f7ff fb7b 	bl	8014810 <_free_r>
 801511a:	e744      	b.n	8014fa6 <_realloc_r+0x18a>
 801511c:	68a3      	ldr	r3, [r4, #8]
 801511e:	6083      	str	r3, [r0, #8]
 8015120:	68e3      	ldr	r3, [r4, #12]
 8015122:	60c3      	str	r3, [r0, #12]
 8015124:	2a24      	cmp	r2, #36	; 0x24
 8015126:	bf01      	itttt	eq
 8015128:	6923      	ldreq	r3, [r4, #16]
 801512a:	6103      	streq	r3, [r0, #16]
 801512c:	6961      	ldreq	r1, [r4, #20]
 801512e:	6141      	streq	r1, [r0, #20]
 8015130:	bf19      	ittee	ne
 8015132:	f104 0210 	addne.w	r2, r4, #16
 8015136:	f100 0310 	addne.w	r3, r0, #16
 801513a:	f104 0218 	addeq.w	r2, r4, #24
 801513e:	f100 0318 	addeq.w	r3, r0, #24
 8015142:	e7e0      	b.n	8015106 <_realloc_r+0x2ea>
 8015144:	4603      	mov	r3, r0
 8015146:	4622      	mov	r2, r4
 8015148:	e7dd      	b.n	8015106 <_realloc_r+0x2ea>
 801514a:	4621      	mov	r1, r4
 801514c:	f7ff f9e8 	bl	8014520 <memmove>
 8015150:	e7df      	b.n	8015112 <_realloc_r+0x2f6>
 8015152:	4637      	mov	r7, r6
 8015154:	e6c3      	b.n	8014ede <_realloc_r+0xc2>
 8015156:	431f      	orrs	r7, r3
 8015158:	f8c9 7004 	str.w	r7, [r9, #4]
 801515c:	6853      	ldr	r3, [r2, #4]
 801515e:	f043 0301 	orr.w	r3, r3, #1
 8015162:	6053      	str	r3, [r2, #4]
 8015164:	e6d7      	b.n	8014f16 <_realloc_r+0xfa>
 8015166:	bf00      	nop

08015168 <_svfprintf_r>:
 8015168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801516c:	b0d3      	sub	sp, #332	; 0x14c
 801516e:	468a      	mov	sl, r1
 8015170:	4693      	mov	fp, r2
 8015172:	461d      	mov	r5, r3
 8015174:	4681      	mov	r9, r0
 8015176:	f003 fb15 	bl	80187a4 <_localeconv_r>
 801517a:	6803      	ldr	r3, [r0, #0]
 801517c:	9317      	str	r3, [sp, #92]	; 0x5c
 801517e:	4618      	mov	r0, r3
 8015180:	f7f3 fa4e 	bl	8008620 <strlen>
 8015184:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8015188:	9012      	str	r0, [sp, #72]	; 0x48
 801518a:	0618      	lsls	r0, r3, #24
 801518c:	d518      	bpl.n	80151c0 <_svfprintf_r+0x58>
 801518e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8015192:	b9ab      	cbnz	r3, 80151c0 <_svfprintf_r+0x58>
 8015194:	2140      	movs	r1, #64	; 0x40
 8015196:	4648      	mov	r0, r9
 8015198:	f7ff fbfa 	bl	8014990 <_malloc_r>
 801519c:	f8ca 0000 	str.w	r0, [sl]
 80151a0:	f8ca 0010 	str.w	r0, [sl, #16]
 80151a4:	b948      	cbnz	r0, 80151ba <_svfprintf_r+0x52>
 80151a6:	230c      	movs	r3, #12
 80151a8:	f8c9 3000 	str.w	r3, [r9]
 80151ac:	f04f 33ff 	mov.w	r3, #4294967295
 80151b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80151b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80151b4:	b053      	add	sp, #332	; 0x14c
 80151b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ba:	2340      	movs	r3, #64	; 0x40
 80151bc:	f8ca 3014 	str.w	r3, [sl, #20]
 80151c0:	2300      	movs	r3, #0
 80151c2:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 80151c6:	9309      	str	r3, [sp, #36]	; 0x24
 80151c8:	2200      	movs	r2, #0
 80151ca:	2300      	movs	r3, #0
 80151cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80151d0:	2300      	movs	r3, #0
 80151d2:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 80151d6:	ac29      	add	r4, sp, #164	; 0xa4
 80151d8:	9426      	str	r4, [sp, #152]	; 0x98
 80151da:	930d      	str	r3, [sp, #52]	; 0x34
 80151dc:	9315      	str	r3, [sp, #84]	; 0x54
 80151de:	9318      	str	r3, [sp, #96]	; 0x60
 80151e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80151e2:	465b      	mov	r3, fp
 80151e4:	461e      	mov	r6, r3
 80151e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151ea:	b10a      	cbz	r2, 80151f0 <_svfprintf_r+0x88>
 80151ec:	2a25      	cmp	r2, #37	; 0x25
 80151ee:	d1f9      	bne.n	80151e4 <_svfprintf_r+0x7c>
 80151f0:	ebb6 070b 	subs.w	r7, r6, fp
 80151f4:	d00d      	beq.n	8015212 <_svfprintf_r+0xaa>
 80151f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80151f8:	443b      	add	r3, r7
 80151fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80151fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80151fe:	3301      	adds	r3, #1
 8015200:	2b07      	cmp	r3, #7
 8015202:	e9c4 b700 	strd	fp, r7, [r4]
 8015206:	9327      	str	r3, [sp, #156]	; 0x9c
 8015208:	dc79      	bgt.n	80152fe <_svfprintf_r+0x196>
 801520a:	3408      	adds	r4, #8
 801520c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801520e:	443b      	add	r3, r7
 8015210:	930f      	str	r3, [sp, #60]	; 0x3c
 8015212:	7833      	ldrb	r3, [r6, #0]
 8015214:	2b00      	cmp	r3, #0
 8015216:	f001 8135 	beq.w	8016484 <_svfprintf_r+0x131c>
 801521a:	2300      	movs	r3, #0
 801521c:	f04f 32ff 	mov.w	r2, #4294967295
 8015220:	3601      	adds	r6, #1
 8015222:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8015226:	9207      	str	r2, [sp, #28]
 8015228:	9313      	str	r3, [sp, #76]	; 0x4c
 801522a:	4698      	mov	r8, r3
 801522c:	270a      	movs	r7, #10
 801522e:	212b      	movs	r1, #43	; 0x2b
 8015230:	4633      	mov	r3, r6
 8015232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015236:	920b      	str	r2, [sp, #44]	; 0x2c
 8015238:	930e      	str	r3, [sp, #56]	; 0x38
 801523a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801523c:	3b20      	subs	r3, #32
 801523e:	2b5a      	cmp	r3, #90	; 0x5a
 8015240:	f200 85a8 	bhi.w	8015d94 <_svfprintf_r+0xc2c>
 8015244:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015248:	05a6007e 	.word	0x05a6007e
 801524c:	008605a6 	.word	0x008605a6
 8015250:	05a605a6 	.word	0x05a605a6
 8015254:	006505a6 	.word	0x006505a6
 8015258:	05a605a6 	.word	0x05a605a6
 801525c:	00930089 	.word	0x00930089
 8015260:	009005a6 	.word	0x009005a6
 8015264:	05a60096 	.word	0x05a60096
 8015268:	00b500b2 	.word	0x00b500b2
 801526c:	00b500b5 	.word	0x00b500b5
 8015270:	00b500b5 	.word	0x00b500b5
 8015274:	00b500b5 	.word	0x00b500b5
 8015278:	00b500b5 	.word	0x00b500b5
 801527c:	05a605a6 	.word	0x05a605a6
 8015280:	05a605a6 	.word	0x05a605a6
 8015284:	05a605a6 	.word	0x05a605a6
 8015288:	012505a6 	.word	0x012505a6
 801528c:	00e205a6 	.word	0x00e205a6
 8015290:	012500f5 	.word	0x012500f5
 8015294:	01250125 	.word	0x01250125
 8015298:	05a605a6 	.word	0x05a605a6
 801529c:	05a605a6 	.word	0x05a605a6
 80152a0:	05a600c5 	.word	0x05a600c5
 80152a4:	048505a6 	.word	0x048505a6
 80152a8:	05a605a6 	.word	0x05a605a6
 80152ac:	04cf05a6 	.word	0x04cf05a6
 80152b0:	04f005a6 	.word	0x04f005a6
 80152b4:	05a605a6 	.word	0x05a605a6
 80152b8:	05a60512 	.word	0x05a60512
 80152bc:	05a605a6 	.word	0x05a605a6
 80152c0:	05a605a6 	.word	0x05a605a6
 80152c4:	05a605a6 	.word	0x05a605a6
 80152c8:	012505a6 	.word	0x012505a6
 80152cc:	00e205a6 	.word	0x00e205a6
 80152d0:	012500f7 	.word	0x012500f7
 80152d4:	01250125 	.word	0x01250125
 80152d8:	00f700c8 	.word	0x00f700c8
 80152dc:	05a600dc 	.word	0x05a600dc
 80152e0:	05a600d5 	.word	0x05a600d5
 80152e4:	04870460 	.word	0x04870460
 80152e8:	00dc04be 	.word	0x00dc04be
 80152ec:	04cf05a6 	.word	0x04cf05a6
 80152f0:	04f2007c 	.word	0x04f2007c
 80152f4:	05a605a6 	.word	0x05a605a6
 80152f8:	05a60531 	.word	0x05a60531
 80152fc:	007c      	.short	0x007c
 80152fe:	aa26      	add	r2, sp, #152	; 0x98
 8015300:	4651      	mov	r1, sl
 8015302:	4648      	mov	r0, r9
 8015304:	f004 fcc8 	bl	8019c98 <__ssprint_r>
 8015308:	2800      	cmp	r0, #0
 801530a:	f040 812e 	bne.w	801556a <_svfprintf_r+0x402>
 801530e:	ac29      	add	r4, sp, #164	; 0xa4
 8015310:	e77c      	b.n	801520c <_svfprintf_r+0xa4>
 8015312:	4648      	mov	r0, r9
 8015314:	f003 fa46 	bl	80187a4 <_localeconv_r>
 8015318:	6843      	ldr	r3, [r0, #4]
 801531a:	9318      	str	r3, [sp, #96]	; 0x60
 801531c:	4618      	mov	r0, r3
 801531e:	f7f3 f97f 	bl	8008620 <strlen>
 8015322:	9015      	str	r0, [sp, #84]	; 0x54
 8015324:	4648      	mov	r0, r9
 8015326:	f003 fa3d 	bl	80187a4 <_localeconv_r>
 801532a:	6883      	ldr	r3, [r0, #8]
 801532c:	930d      	str	r3, [sp, #52]	; 0x34
 801532e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015330:	212b      	movs	r1, #43	; 0x2b
 8015332:	b12b      	cbz	r3, 8015340 <_svfprintf_r+0x1d8>
 8015334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015336:	b11b      	cbz	r3, 8015340 <_svfprintf_r+0x1d8>
 8015338:	781b      	ldrb	r3, [r3, #0]
 801533a:	b10b      	cbz	r3, 8015340 <_svfprintf_r+0x1d8>
 801533c:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8015340:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015342:	e775      	b.n	8015230 <_svfprintf_r+0xc8>
 8015344:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8015348:	2b00      	cmp	r3, #0
 801534a:	d1f9      	bne.n	8015340 <_svfprintf_r+0x1d8>
 801534c:	2320      	movs	r3, #32
 801534e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8015352:	e7f5      	b.n	8015340 <_svfprintf_r+0x1d8>
 8015354:	f048 0801 	orr.w	r8, r8, #1
 8015358:	e7f2      	b.n	8015340 <_svfprintf_r+0x1d8>
 801535a:	f855 3b04 	ldr.w	r3, [r5], #4
 801535e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015360:	2b00      	cmp	r3, #0
 8015362:	daed      	bge.n	8015340 <_svfprintf_r+0x1d8>
 8015364:	425b      	negs	r3, r3
 8015366:	9313      	str	r3, [sp, #76]	; 0x4c
 8015368:	f048 0804 	orr.w	r8, r8, #4
 801536c:	e7e8      	b.n	8015340 <_svfprintf_r+0x1d8>
 801536e:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 8015372:	e7e5      	b.n	8015340 <_svfprintf_r+0x1d8>
 8015374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015376:	f813 2b01 	ldrb.w	r2, [r3], #1
 801537a:	920b      	str	r2, [sp, #44]	; 0x2c
 801537c:	2a2a      	cmp	r2, #42	; 0x2a
 801537e:	d112      	bne.n	80153a6 <_svfprintf_r+0x23e>
 8015380:	f855 2b04 	ldr.w	r2, [r5], #4
 8015384:	930e      	str	r3, [sp, #56]	; 0x38
 8015386:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801538a:	9207      	str	r2, [sp, #28]
 801538c:	e7d8      	b.n	8015340 <_svfprintf_r+0x1d8>
 801538e:	9807      	ldr	r0, [sp, #28]
 8015390:	fb07 2200 	mla	r2, r7, r0, r2
 8015394:	9207      	str	r2, [sp, #28]
 8015396:	f813 2b01 	ldrb.w	r2, [r3], #1
 801539a:	920b      	str	r2, [sp, #44]	; 0x2c
 801539c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801539e:	3a30      	subs	r2, #48	; 0x30
 80153a0:	2a09      	cmp	r2, #9
 80153a2:	d9f4      	bls.n	801538e <_svfprintf_r+0x226>
 80153a4:	e748      	b.n	8015238 <_svfprintf_r+0xd0>
 80153a6:	2200      	movs	r2, #0
 80153a8:	9207      	str	r2, [sp, #28]
 80153aa:	e7f7      	b.n	801539c <_svfprintf_r+0x234>
 80153ac:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80153b0:	e7c6      	b.n	8015340 <_svfprintf_r+0x1d8>
 80153b2:	2200      	movs	r2, #0
 80153b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153b6:	9213      	str	r2, [sp, #76]	; 0x4c
 80153b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80153ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80153bc:	3a30      	subs	r2, #48	; 0x30
 80153be:	fb07 2200 	mla	r2, r7, r0, r2
 80153c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80153c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80153ca:	3a30      	subs	r2, #48	; 0x30
 80153cc:	2a09      	cmp	r2, #9
 80153ce:	d9f3      	bls.n	80153b8 <_svfprintf_r+0x250>
 80153d0:	e732      	b.n	8015238 <_svfprintf_r+0xd0>
 80153d2:	f048 0808 	orr.w	r8, r8, #8
 80153d6:	e7b3      	b.n	8015340 <_svfprintf_r+0x1d8>
 80153d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153da:	781b      	ldrb	r3, [r3, #0]
 80153dc:	2b68      	cmp	r3, #104	; 0x68
 80153de:	bf01      	itttt	eq
 80153e0:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 80153e2:	3301      	addeq	r3, #1
 80153e4:	930e      	streq	r3, [sp, #56]	; 0x38
 80153e6:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 80153ea:	bf18      	it	ne
 80153ec:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 80153f0:	e7a6      	b.n	8015340 <_svfprintf_r+0x1d8>
 80153f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153f4:	781b      	ldrb	r3, [r3, #0]
 80153f6:	2b6c      	cmp	r3, #108	; 0x6c
 80153f8:	d105      	bne.n	8015406 <_svfprintf_r+0x29e>
 80153fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153fc:	3301      	adds	r3, #1
 80153fe:	930e      	str	r3, [sp, #56]	; 0x38
 8015400:	f048 0820 	orr.w	r8, r8, #32
 8015404:	e79c      	b.n	8015340 <_svfprintf_r+0x1d8>
 8015406:	f048 0810 	orr.w	r8, r8, #16
 801540a:	e799      	b.n	8015340 <_svfprintf_r+0x1d8>
 801540c:	462a      	mov	r2, r5
 801540e:	f852 3b04 	ldr.w	r3, [r2], #4
 8015412:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8015416:	2300      	movs	r3, #0
 8015418:	920a      	str	r2, [sp, #40]	; 0x28
 801541a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801541e:	2700      	movs	r7, #0
 8015420:	9308      	str	r3, [sp, #32]
 8015422:	2301      	movs	r3, #1
 8015424:	9307      	str	r3, [sp, #28]
 8015426:	463e      	mov	r6, r7
 8015428:	970c      	str	r7, [sp, #48]	; 0x30
 801542a:	463d      	mov	r5, r7
 801542c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8015430:	e1b0      	b.n	8015794 <_svfprintf_r+0x62c>
 8015432:	f048 0810 	orr.w	r8, r8, #16
 8015436:	f018 0f20 	tst.w	r8, #32
 801543a:	d012      	beq.n	8015462 <_svfprintf_r+0x2fa>
 801543c:	3507      	adds	r5, #7
 801543e:	f025 0307 	bic.w	r3, r5, #7
 8015442:	461a      	mov	r2, r3
 8015444:	685e      	ldr	r6, [r3, #4]
 8015446:	f852 5b08 	ldr.w	r5, [r2], #8
 801544a:	920a      	str	r2, [sp, #40]	; 0x28
 801544c:	2e00      	cmp	r6, #0
 801544e:	da06      	bge.n	801545e <_svfprintf_r+0x2f6>
 8015450:	426d      	negs	r5, r5
 8015452:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8015456:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 801545a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801545e:	2301      	movs	r3, #1
 8015460:	e38a      	b.n	8015b78 <_svfprintf_r+0xa10>
 8015462:	462b      	mov	r3, r5
 8015464:	f018 0f10 	tst.w	r8, #16
 8015468:	f853 6b04 	ldr.w	r6, [r3], #4
 801546c:	930a      	str	r3, [sp, #40]	; 0x28
 801546e:	d002      	beq.n	8015476 <_svfprintf_r+0x30e>
 8015470:	4635      	mov	r5, r6
 8015472:	17f6      	asrs	r6, r6, #31
 8015474:	e7ea      	b.n	801544c <_svfprintf_r+0x2e4>
 8015476:	f018 0f40 	tst.w	r8, #64	; 0x40
 801547a:	d003      	beq.n	8015484 <_svfprintf_r+0x31c>
 801547c:	b235      	sxth	r5, r6
 801547e:	f346 36c0 	sbfx	r6, r6, #15, #1
 8015482:	e7e3      	b.n	801544c <_svfprintf_r+0x2e4>
 8015484:	f418 7f00 	tst.w	r8, #512	; 0x200
 8015488:	d0f2      	beq.n	8015470 <_svfprintf_r+0x308>
 801548a:	b275      	sxtb	r5, r6
 801548c:	f346 16c0 	sbfx	r6, r6, #7, #1
 8015490:	e7dc      	b.n	801544c <_svfprintf_r+0x2e4>
 8015492:	3507      	adds	r5, #7
 8015494:	f025 0307 	bic.w	r3, r5, #7
 8015498:	4619      	mov	r1, r3
 801549a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801549e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80154a2:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 80154a6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80154aa:	910a      	str	r1, [sp, #40]	; 0x28
 80154ac:	4b3b      	ldr	r3, [pc, #236]	; (801559c <_svfprintf_r+0x434>)
 80154ae:	f04f 32ff 	mov.w	r2, #4294967295
 80154b2:	4630      	mov	r0, r6
 80154b4:	4629      	mov	r1, r5
 80154b6:	f7f3 fd11 	bl	8008edc <__aeabi_dcmpun>
 80154ba:	bb18      	cbnz	r0, 8015504 <_svfprintf_r+0x39c>
 80154bc:	4b37      	ldr	r3, [pc, #220]	; (801559c <_svfprintf_r+0x434>)
 80154be:	f04f 32ff 	mov.w	r2, #4294967295
 80154c2:	4630      	mov	r0, r6
 80154c4:	4629      	mov	r1, r5
 80154c6:	f7f3 fceb 	bl	8008ea0 <__aeabi_dcmple>
 80154ca:	b9d8      	cbnz	r0, 8015504 <_svfprintf_r+0x39c>
 80154cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80154d0:	2200      	movs	r2, #0
 80154d2:	2300      	movs	r3, #0
 80154d4:	f7f3 fcda 	bl	8008e8c <__aeabi_dcmplt>
 80154d8:	b110      	cbz	r0, 80154e0 <_svfprintf_r+0x378>
 80154da:	232d      	movs	r3, #45	; 0x2d
 80154dc:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80154e0:	4a2f      	ldr	r2, [pc, #188]	; (80155a0 <_svfprintf_r+0x438>)
 80154e2:	4b30      	ldr	r3, [pc, #192]	; (80155a4 <_svfprintf_r+0x43c>)
 80154e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154e6:	2947      	cmp	r1, #71	; 0x47
 80154e8:	bfd4      	ite	le
 80154ea:	4693      	movle	fp, r2
 80154ec:	469b      	movgt	fp, r3
 80154ee:	2303      	movs	r3, #3
 80154f0:	2100      	movs	r1, #0
 80154f2:	e9cd 3107 	strd	r3, r1, [sp, #28]
 80154f6:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 80154fa:	2700      	movs	r7, #0
 80154fc:	463e      	mov	r6, r7
 80154fe:	463b      	mov	r3, r7
 8015500:	f000 bffa 	b.w	80164f8 <_svfprintf_r+0x1390>
 8015504:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015508:	4610      	mov	r0, r2
 801550a:	4619      	mov	r1, r3
 801550c:	f7f3 fce6 	bl	8008edc <__aeabi_dcmpun>
 8015510:	b140      	cbz	r0, 8015524 <_svfprintf_r+0x3bc>
 8015512:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015514:	4a24      	ldr	r2, [pc, #144]	; (80155a8 <_svfprintf_r+0x440>)
 8015516:	2b00      	cmp	r3, #0
 8015518:	bfbc      	itt	lt
 801551a:	232d      	movlt	r3, #45	; 0x2d
 801551c:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8015520:	4b22      	ldr	r3, [pc, #136]	; (80155ac <_svfprintf_r+0x444>)
 8015522:	e7df      	b.n	80154e4 <_svfprintf_r+0x37c>
 8015524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015526:	f023 0320 	bic.w	r3, r3, #32
 801552a:	2b41      	cmp	r3, #65	; 0x41
 801552c:	930c      	str	r3, [sp, #48]	; 0x30
 801552e:	d125      	bne.n	801557c <_svfprintf_r+0x414>
 8015530:	2330      	movs	r3, #48	; 0x30
 8015532:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8015536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015538:	2b61      	cmp	r3, #97	; 0x61
 801553a:	bf0c      	ite	eq
 801553c:	2378      	moveq	r3, #120	; 0x78
 801553e:	2358      	movne	r3, #88	; 0x58
 8015540:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8015544:	9b07      	ldr	r3, [sp, #28]
 8015546:	2b63      	cmp	r3, #99	; 0x63
 8015548:	f048 0802 	orr.w	r8, r8, #2
 801554c:	dd30      	ble.n	80155b0 <_svfprintf_r+0x448>
 801554e:	1c59      	adds	r1, r3, #1
 8015550:	4648      	mov	r0, r9
 8015552:	f7ff fa1d 	bl	8014990 <_malloc_r>
 8015556:	4683      	mov	fp, r0
 8015558:	2800      	cmp	r0, #0
 801555a:	f040 81f9 	bne.w	8015950 <_svfprintf_r+0x7e8>
 801555e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8015562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015566:	f8aa 300c 	strh.w	r3, [sl, #12]
 801556a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801556e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015574:	bf18      	it	ne
 8015576:	f04f 33ff 	movne.w	r3, #4294967295
 801557a:	e619      	b.n	80151b0 <_svfprintf_r+0x48>
 801557c:	9b07      	ldr	r3, [sp, #28]
 801557e:	3301      	adds	r3, #1
 8015580:	f000 81e8 	beq.w	8015954 <_svfprintf_r+0x7ec>
 8015584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015586:	2b47      	cmp	r3, #71	; 0x47
 8015588:	f040 81e7 	bne.w	801595a <_svfprintf_r+0x7f2>
 801558c:	9b07      	ldr	r3, [sp, #28]
 801558e:	2b00      	cmp	r3, #0
 8015590:	f040 81e3 	bne.w	801595a <_svfprintf_r+0x7f2>
 8015594:	9308      	str	r3, [sp, #32]
 8015596:	2301      	movs	r3, #1
 8015598:	9307      	str	r3, [sp, #28]
 801559a:	e00c      	b.n	80155b6 <_svfprintf_r+0x44e>
 801559c:	7fefffff 	.word	0x7fefffff
 80155a0:	0801b755 	.word	0x0801b755
 80155a4:	0801b759 	.word	0x0801b759
 80155a8:	0801b75d 	.word	0x0801b75d
 80155ac:	0801b761 	.word	0x0801b761
 80155b0:	9008      	str	r0, [sp, #32]
 80155b2:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80155b6:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 80155ba:	9314      	str	r3, [sp, #80]	; 0x50
 80155bc:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 80155c0:	1e1d      	subs	r5, r3, #0
 80155c2:	bfb6      	itet	lt
 80155c4:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 80155c8:	2300      	movge	r3, #0
 80155ca:	232d      	movlt	r3, #45	; 0x2d
 80155cc:	931c      	str	r3, [sp, #112]	; 0x70
 80155ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155d0:	2b41      	cmp	r3, #65	; 0x41
 80155d2:	f040 81da 	bne.w	801598a <_svfprintf_r+0x822>
 80155d6:	aa20      	add	r2, sp, #128	; 0x80
 80155d8:	4638      	mov	r0, r7
 80155da:	4629      	mov	r1, r5
 80155dc:	f003 f938 	bl	8018850 <frexp>
 80155e0:	2200      	movs	r2, #0
 80155e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80155e6:	f7f3 f9df 	bl	80089a8 <__aeabi_dmul>
 80155ea:	2200      	movs	r2, #0
 80155ec:	2300      	movs	r3, #0
 80155ee:	4606      	mov	r6, r0
 80155f0:	460f      	mov	r7, r1
 80155f2:	f7f3 fc41 	bl	8008e78 <__aeabi_dcmpeq>
 80155f6:	b108      	cbz	r0, 80155fc <_svfprintf_r+0x494>
 80155f8:	2301      	movs	r3, #1
 80155fa:	9320      	str	r3, [sp, #128]	; 0x80
 80155fc:	4bad      	ldr	r3, [pc, #692]	; (80158b4 <_svfprintf_r+0x74c>)
 80155fe:	4aae      	ldr	r2, [pc, #696]	; (80158b8 <_svfprintf_r+0x750>)
 8015600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015602:	2961      	cmp	r1, #97	; 0x61
 8015604:	bf18      	it	ne
 8015606:	461a      	movne	r2, r3
 8015608:	9b07      	ldr	r3, [sp, #28]
 801560a:	921b      	str	r2, [sp, #108]	; 0x6c
 801560c:	3b01      	subs	r3, #1
 801560e:	9309      	str	r3, [sp, #36]	; 0x24
 8015610:	465d      	mov	r5, fp
 8015612:	4baa      	ldr	r3, [pc, #680]	; (80158bc <_svfprintf_r+0x754>)
 8015614:	2200      	movs	r2, #0
 8015616:	4630      	mov	r0, r6
 8015618:	4639      	mov	r1, r7
 801561a:	f7f3 f9c5 	bl	80089a8 <__aeabi_dmul>
 801561e:	460f      	mov	r7, r1
 8015620:	4606      	mov	r6, r0
 8015622:	f7f3 fc71 	bl	8008f08 <__aeabi_d2iz>
 8015626:	901d      	str	r0, [sp, #116]	; 0x74
 8015628:	f7f3 f954 	bl	80088d4 <__aeabi_i2d>
 801562c:	4602      	mov	r2, r0
 801562e:	460b      	mov	r3, r1
 8015630:	4630      	mov	r0, r6
 8015632:	4639      	mov	r1, r7
 8015634:	f7f3 f800 	bl	8008638 <__aeabi_dsub>
 8015638:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801563a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801563c:	5c9b      	ldrb	r3, [r3, r2]
 801563e:	f805 3b01 	strb.w	r3, [r5], #1
 8015642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015644:	9316      	str	r3, [sp, #88]	; 0x58
 8015646:	1c5a      	adds	r2, r3, #1
 8015648:	4606      	mov	r6, r0
 801564a:	460f      	mov	r7, r1
 801564c:	d007      	beq.n	801565e <_svfprintf_r+0x4f6>
 801564e:	3b01      	subs	r3, #1
 8015650:	9309      	str	r3, [sp, #36]	; 0x24
 8015652:	2200      	movs	r2, #0
 8015654:	2300      	movs	r3, #0
 8015656:	f7f3 fc0f 	bl	8008e78 <__aeabi_dcmpeq>
 801565a:	2800      	cmp	r0, #0
 801565c:	d0d9      	beq.n	8015612 <_svfprintf_r+0x4aa>
 801565e:	4b98      	ldr	r3, [pc, #608]	; (80158c0 <_svfprintf_r+0x758>)
 8015660:	2200      	movs	r2, #0
 8015662:	4630      	mov	r0, r6
 8015664:	4639      	mov	r1, r7
 8015666:	f7f3 fc2f 	bl	8008ec8 <__aeabi_dcmpgt>
 801566a:	b960      	cbnz	r0, 8015686 <_svfprintf_r+0x51e>
 801566c:	4b94      	ldr	r3, [pc, #592]	; (80158c0 <_svfprintf_r+0x758>)
 801566e:	2200      	movs	r2, #0
 8015670:	4630      	mov	r0, r6
 8015672:	4639      	mov	r1, r7
 8015674:	f7f3 fc00 	bl	8008e78 <__aeabi_dcmpeq>
 8015678:	2800      	cmp	r0, #0
 801567a:	f000 8181 	beq.w	8015980 <_svfprintf_r+0x818>
 801567e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015680:	07db      	lsls	r3, r3, #31
 8015682:	f140 817d 	bpl.w	8015980 <_svfprintf_r+0x818>
 8015686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015688:	9524      	str	r5, [sp, #144]	; 0x90
 801568a:	7bd9      	ldrb	r1, [r3, #15]
 801568c:	2030      	movs	r0, #48	; 0x30
 801568e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015690:	1e53      	subs	r3, r2, #1
 8015692:	9324      	str	r3, [sp, #144]	; 0x90
 8015694:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8015698:	428b      	cmp	r3, r1
 801569a:	f000 8160 	beq.w	801595e <_svfprintf_r+0x7f6>
 801569e:	2b39      	cmp	r3, #57	; 0x39
 80156a0:	bf0b      	itete	eq
 80156a2:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 80156a4:	3301      	addne	r3, #1
 80156a6:	7a9b      	ldrbeq	r3, [r3, #10]
 80156a8:	b2db      	uxtbne	r3, r3
 80156aa:	f802 3c01 	strb.w	r3, [r2, #-1]
 80156ae:	eba5 030b 	sub.w	r3, r5, fp
 80156b2:	9309      	str	r3, [sp, #36]	; 0x24
 80156b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156b6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80156b8:	2b47      	cmp	r3, #71	; 0x47
 80156ba:	f040 81b5 	bne.w	8015a28 <_svfprintf_r+0x8c0>
 80156be:	1cef      	adds	r7, r5, #3
 80156c0:	db03      	blt.n	80156ca <_svfprintf_r+0x562>
 80156c2:	9b07      	ldr	r3, [sp, #28]
 80156c4:	42ab      	cmp	r3, r5
 80156c6:	f280 81d5 	bge.w	8015a74 <_svfprintf_r+0x90c>
 80156ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156cc:	3b02      	subs	r3, #2
 80156ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80156d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156d2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80156d6:	f021 0120 	bic.w	r1, r1, #32
 80156da:	2941      	cmp	r1, #65	; 0x41
 80156dc:	bf08      	it	eq
 80156de:	320f      	addeq	r2, #15
 80156e0:	f105 33ff 	add.w	r3, r5, #4294967295
 80156e4:	bf06      	itte	eq
 80156e6:	b2d2      	uxtbeq	r2, r2
 80156e8:	2101      	moveq	r1, #1
 80156ea:	2100      	movne	r1, #0
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	9320      	str	r3, [sp, #128]	; 0x80
 80156f0:	bfb8      	it	lt
 80156f2:	f1c5 0301 	rsblt	r3, r5, #1
 80156f6:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80156fa:	bfb4      	ite	lt
 80156fc:	222d      	movlt	r2, #45	; 0x2d
 80156fe:	222b      	movge	r2, #43	; 0x2b
 8015700:	2b09      	cmp	r3, #9
 8015702:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8015706:	f340 81a8 	ble.w	8015a5a <_svfprintf_r+0x8f2>
 801570a:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 801570e:	260a      	movs	r6, #10
 8015710:	4602      	mov	r2, r0
 8015712:	fb93 f5f6 	sdiv	r5, r3, r6
 8015716:	fb06 3115 	mls	r1, r6, r5, r3
 801571a:	3130      	adds	r1, #48	; 0x30
 801571c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015720:	4619      	mov	r1, r3
 8015722:	2963      	cmp	r1, #99	; 0x63
 8015724:	f100 30ff 	add.w	r0, r0, #4294967295
 8015728:	462b      	mov	r3, r5
 801572a:	dcf1      	bgt.n	8015710 <_svfprintf_r+0x5a8>
 801572c:	3330      	adds	r3, #48	; 0x30
 801572e:	1e91      	subs	r1, r2, #2
 8015730:	f800 3c01 	strb.w	r3, [r0, #-1]
 8015734:	f10d 0589 	add.w	r5, sp, #137	; 0x89
 8015738:	460b      	mov	r3, r1
 801573a:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 801573e:	4283      	cmp	r3, r0
 8015740:	f0c0 8186 	bcc.w	8015a50 <_svfprintf_r+0x8e8>
 8015744:	f10d 0399 	add.w	r3, sp, #153	; 0x99
 8015748:	1a9b      	subs	r3, r3, r2
 801574a:	4281      	cmp	r1, r0
 801574c:	bf88      	it	hi
 801574e:	2300      	movhi	r3, #0
 8015750:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8015754:	441a      	add	r2, r3
 8015756:	ab22      	add	r3, sp, #136	; 0x88
 8015758:	1ad3      	subs	r3, r2, r3
 801575a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801575c:	9319      	str	r3, [sp, #100]	; 0x64
 801575e:	2a01      	cmp	r2, #1
 8015760:	4413      	add	r3, r2
 8015762:	9307      	str	r3, [sp, #28]
 8015764:	dc02      	bgt.n	801576c <_svfprintf_r+0x604>
 8015766:	f018 0f01 	tst.w	r8, #1
 801576a:	d003      	beq.n	8015774 <_svfprintf_r+0x60c>
 801576c:	9b07      	ldr	r3, [sp, #28]
 801576e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015770:	4413      	add	r3, r2
 8015772:	9307      	str	r3, [sp, #28]
 8015774:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8015778:	2600      	movs	r6, #0
 801577a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801577e:	9314      	str	r3, [sp, #80]	; 0x50
 8015780:	960c      	str	r6, [sp, #48]	; 0x30
 8015782:	4635      	mov	r5, r6
 8015784:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015786:	b113      	cbz	r3, 801578e <_svfprintf_r+0x626>
 8015788:	232d      	movs	r3, #45	; 0x2d
 801578a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801578e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8015792:	2700      	movs	r7, #0
 8015794:	9b07      	ldr	r3, [sp, #28]
 8015796:	42bb      	cmp	r3, r7
 8015798:	bfb8      	it	lt
 801579a:	463b      	movlt	r3, r7
 801579c:	9314      	str	r3, [sp, #80]	; 0x50
 801579e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80157a2:	b113      	cbz	r3, 80157aa <_svfprintf_r+0x642>
 80157a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80157a6:	3301      	adds	r3, #1
 80157a8:	9314      	str	r3, [sp, #80]	; 0x50
 80157aa:	f018 0302 	ands.w	r3, r8, #2
 80157ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80157b0:	bf1e      	ittt	ne
 80157b2:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 80157b4:	3302      	addne	r3, #2
 80157b6:	9314      	strne	r3, [sp, #80]	; 0x50
 80157b8:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80157bc:	931c      	str	r3, [sp, #112]	; 0x70
 80157be:	d122      	bne.n	8015806 <_svfprintf_r+0x69e>
 80157c0:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 80157c4:	1a9b      	subs	r3, r3, r2
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	9316      	str	r3, [sp, #88]	; 0x58
 80157ca:	dd1c      	ble.n	8015806 <_svfprintf_r+0x69e>
 80157cc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80157ce:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80157d2:	2810      	cmp	r0, #16
 80157d4:	483b      	ldr	r0, [pc, #236]	; (80158c4 <_svfprintf_r+0x75c>)
 80157d6:	6020      	str	r0, [r4, #0]
 80157d8:	f102 0201 	add.w	r2, r2, #1
 80157dc:	f104 0108 	add.w	r1, r4, #8
 80157e0:	f300 82e7 	bgt.w	8015db2 <_svfprintf_r+0xc4a>
 80157e4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80157e6:	6060      	str	r0, [r4, #4]
 80157e8:	4403      	add	r3, r0
 80157ea:	2a07      	cmp	r2, #7
 80157ec:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80157f0:	f340 82f4 	ble.w	8015ddc <_svfprintf_r+0xc74>
 80157f4:	aa26      	add	r2, sp, #152	; 0x98
 80157f6:	4651      	mov	r1, sl
 80157f8:	4648      	mov	r0, r9
 80157fa:	f004 fa4d 	bl	8019c98 <__ssprint_r>
 80157fe:	2800      	cmp	r0, #0
 8015800:	f040 861e 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015804:	ac29      	add	r4, sp, #164	; 0xa4
 8015806:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 801580a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801580c:	b16a      	cbz	r2, 801582a <_svfprintf_r+0x6c2>
 801580e:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8015812:	6022      	str	r2, [r4, #0]
 8015814:	2201      	movs	r2, #1
 8015816:	4413      	add	r3, r2
 8015818:	9328      	str	r3, [sp, #160]	; 0xa0
 801581a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801581c:	6062      	str	r2, [r4, #4]
 801581e:	4413      	add	r3, r2
 8015820:	2b07      	cmp	r3, #7
 8015822:	9327      	str	r3, [sp, #156]	; 0x9c
 8015824:	f300 82dc 	bgt.w	8015de0 <_svfprintf_r+0xc78>
 8015828:	3408      	adds	r4, #8
 801582a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801582c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801582e:	b162      	cbz	r2, 801584a <_svfprintf_r+0x6e2>
 8015830:	aa1f      	add	r2, sp, #124	; 0x7c
 8015832:	6022      	str	r2, [r4, #0]
 8015834:	2202      	movs	r2, #2
 8015836:	4413      	add	r3, r2
 8015838:	9328      	str	r3, [sp, #160]	; 0xa0
 801583a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801583c:	6062      	str	r2, [r4, #4]
 801583e:	3301      	adds	r3, #1
 8015840:	2b07      	cmp	r3, #7
 8015842:	9327      	str	r3, [sp, #156]	; 0x9c
 8015844:	f300 82d6 	bgt.w	8015df4 <_svfprintf_r+0xc8c>
 8015848:	3408      	adds	r4, #8
 801584a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801584c:	2b80      	cmp	r3, #128	; 0x80
 801584e:	d122      	bne.n	8015896 <_svfprintf_r+0x72e>
 8015850:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8015854:	1a9b      	subs	r3, r3, r2
 8015856:	2b00      	cmp	r3, #0
 8015858:	9316      	str	r3, [sp, #88]	; 0x58
 801585a:	dd1c      	ble.n	8015896 <_svfprintf_r+0x72e>
 801585c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801585e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8015862:	2810      	cmp	r0, #16
 8015864:	4818      	ldr	r0, [pc, #96]	; (80158c8 <_svfprintf_r+0x760>)
 8015866:	6020      	str	r0, [r4, #0]
 8015868:	f102 0201 	add.w	r2, r2, #1
 801586c:	f104 0108 	add.w	r1, r4, #8
 8015870:	f300 82ca 	bgt.w	8015e08 <_svfprintf_r+0xca0>
 8015874:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015876:	6060      	str	r0, [r4, #4]
 8015878:	4403      	add	r3, r0
 801587a:	2a07      	cmp	r2, #7
 801587c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015880:	f340 82d7 	ble.w	8015e32 <_svfprintf_r+0xcca>
 8015884:	aa26      	add	r2, sp, #152	; 0x98
 8015886:	4651      	mov	r1, sl
 8015888:	4648      	mov	r0, r9
 801588a:	f004 fa05 	bl	8019c98 <__ssprint_r>
 801588e:	2800      	cmp	r0, #0
 8015890:	f040 85d6 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015894:	ac29      	add	r4, sp, #164	; 0xa4
 8015896:	9b07      	ldr	r3, [sp, #28]
 8015898:	1aff      	subs	r7, r7, r3
 801589a:	2f00      	cmp	r7, #0
 801589c:	dd28      	ble.n	80158f0 <_svfprintf_r+0x788>
 801589e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80158a2:	4809      	ldr	r0, [pc, #36]	; (80158c8 <_svfprintf_r+0x760>)
 80158a4:	6020      	str	r0, [r4, #0]
 80158a6:	2f10      	cmp	r7, #16
 80158a8:	f103 0301 	add.w	r3, r3, #1
 80158ac:	f104 0108 	add.w	r1, r4, #8
 80158b0:	e00c      	b.n	80158cc <_svfprintf_r+0x764>
 80158b2:	bf00      	nop
 80158b4:	0801b776 	.word	0x0801b776
 80158b8:	0801b765 	.word	0x0801b765
 80158bc:	40300000 	.word	0x40300000
 80158c0:	3fe00000 	.word	0x3fe00000
 80158c4:	0801b789 	.word	0x0801b789
 80158c8:	0801b799 	.word	0x0801b799
 80158cc:	f300 82b3 	bgt.w	8015e36 <_svfprintf_r+0xcce>
 80158d0:	6067      	str	r7, [r4, #4]
 80158d2:	2b07      	cmp	r3, #7
 80158d4:	4417      	add	r7, r2
 80158d6:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 80158da:	f340 82bf 	ble.w	8015e5c <_svfprintf_r+0xcf4>
 80158de:	aa26      	add	r2, sp, #152	; 0x98
 80158e0:	4651      	mov	r1, sl
 80158e2:	4648      	mov	r0, r9
 80158e4:	f004 f9d8 	bl	8019c98 <__ssprint_r>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	f040 85a9 	bne.w	8016440 <_svfprintf_r+0x12d8>
 80158ee:	ac29      	add	r4, sp, #164	; 0xa4
 80158f0:	f418 7f80 	tst.w	r8, #256	; 0x100
 80158f4:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 80158f6:	f040 82b7 	bne.w	8015e68 <_svfprintf_r+0xd00>
 80158fa:	9b07      	ldr	r3, [sp, #28]
 80158fc:	f8c4 b000 	str.w	fp, [r4]
 8015900:	441f      	add	r7, r3
 8015902:	6063      	str	r3, [r4, #4]
 8015904:	9728      	str	r7, [sp, #160]	; 0xa0
 8015906:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015908:	3301      	adds	r3, #1
 801590a:	2b07      	cmp	r3, #7
 801590c:	9327      	str	r3, [sp, #156]	; 0x9c
 801590e:	f300 82f0 	bgt.w	8015ef2 <_svfprintf_r+0xd8a>
 8015912:	3408      	adds	r4, #8
 8015914:	f018 0f04 	tst.w	r8, #4
 8015918:	f040 8574 	bne.w	8016404 <_svfprintf_r+0x129c>
 801591c:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 8015920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015922:	428a      	cmp	r2, r1
 8015924:	bfac      	ite	ge
 8015926:	189b      	addge	r3, r3, r2
 8015928:	185b      	addlt	r3, r3, r1
 801592a:	930f      	str	r3, [sp, #60]	; 0x3c
 801592c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801592e:	b13b      	cbz	r3, 8015940 <_svfprintf_r+0x7d8>
 8015930:	aa26      	add	r2, sp, #152	; 0x98
 8015932:	4651      	mov	r1, sl
 8015934:	4648      	mov	r0, r9
 8015936:	f004 f9af 	bl	8019c98 <__ssprint_r>
 801593a:	2800      	cmp	r0, #0
 801593c:	f040 8580 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015940:	2300      	movs	r3, #0
 8015942:	9327      	str	r3, [sp, #156]	; 0x9c
 8015944:	9b08      	ldr	r3, [sp, #32]
 8015946:	2b00      	cmp	r3, #0
 8015948:	f040 8596 	bne.w	8016478 <_svfprintf_r+0x1310>
 801594c:	ac29      	add	r4, sp, #164	; 0xa4
 801594e:	e0e6      	b.n	8015b1e <_svfprintf_r+0x9b6>
 8015950:	9008      	str	r0, [sp, #32]
 8015952:	e630      	b.n	80155b6 <_svfprintf_r+0x44e>
 8015954:	9008      	str	r0, [sp, #32]
 8015956:	2306      	movs	r3, #6
 8015958:	e61e      	b.n	8015598 <_svfprintf_r+0x430>
 801595a:	9008      	str	r0, [sp, #32]
 801595c:	e62b      	b.n	80155b6 <_svfprintf_r+0x44e>
 801595e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8015962:	e694      	b.n	801568e <_svfprintf_r+0x526>
 8015964:	f803 0b01 	strb.w	r0, [r3], #1
 8015968:	1aca      	subs	r2, r1, r3
 801596a:	2a00      	cmp	r2, #0
 801596c:	dafa      	bge.n	8015964 <_svfprintf_r+0x7fc>
 801596e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015970:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015972:	3201      	adds	r2, #1
 8015974:	f103 0301 	add.w	r3, r3, #1
 8015978:	bfb8      	it	lt
 801597a:	2300      	movlt	r3, #0
 801597c:	441d      	add	r5, r3
 801597e:	e696      	b.n	80156ae <_svfprintf_r+0x546>
 8015980:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015982:	462b      	mov	r3, r5
 8015984:	18a9      	adds	r1, r5, r2
 8015986:	2030      	movs	r0, #48	; 0x30
 8015988:	e7ee      	b.n	8015968 <_svfprintf_r+0x800>
 801598a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801598c:	2b46      	cmp	r3, #70	; 0x46
 801598e:	d005      	beq.n	801599c <_svfprintf_r+0x834>
 8015990:	2b45      	cmp	r3, #69	; 0x45
 8015992:	d11d      	bne.n	80159d0 <_svfprintf_r+0x868>
 8015994:	9b07      	ldr	r3, [sp, #28]
 8015996:	1c5e      	adds	r6, r3, #1
 8015998:	2302      	movs	r3, #2
 801599a:	e001      	b.n	80159a0 <_svfprintf_r+0x838>
 801599c:	9e07      	ldr	r6, [sp, #28]
 801599e:	2303      	movs	r3, #3
 80159a0:	aa24      	add	r2, sp, #144	; 0x90
 80159a2:	9204      	str	r2, [sp, #16]
 80159a4:	aa21      	add	r2, sp, #132	; 0x84
 80159a6:	9203      	str	r2, [sp, #12]
 80159a8:	aa20      	add	r2, sp, #128	; 0x80
 80159aa:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80159ae:	9300      	str	r3, [sp, #0]
 80159b0:	463a      	mov	r2, r7
 80159b2:	462b      	mov	r3, r5
 80159b4:	4648      	mov	r0, r9
 80159b6:	f003 f847 	bl	8018a48 <_dtoa_r>
 80159ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159bc:	2b47      	cmp	r3, #71	; 0x47
 80159be:	4683      	mov	fp, r0
 80159c0:	d108      	bne.n	80159d4 <_svfprintf_r+0x86c>
 80159c2:	f018 0f01 	tst.w	r8, #1
 80159c6:	d105      	bne.n	80159d4 <_svfprintf_r+0x86c>
 80159c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80159ca:	eba3 030b 	sub.w	r3, r3, fp
 80159ce:	e670      	b.n	80156b2 <_svfprintf_r+0x54a>
 80159d0:	9e07      	ldr	r6, [sp, #28]
 80159d2:	e7e1      	b.n	8015998 <_svfprintf_r+0x830>
 80159d4:	eb0b 0306 	add.w	r3, fp, r6
 80159d8:	9309      	str	r3, [sp, #36]	; 0x24
 80159da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159dc:	2b46      	cmp	r3, #70	; 0x46
 80159de:	d111      	bne.n	8015a04 <_svfprintf_r+0x89c>
 80159e0:	f89b 3000 	ldrb.w	r3, [fp]
 80159e4:	2b30      	cmp	r3, #48	; 0x30
 80159e6:	d109      	bne.n	80159fc <_svfprintf_r+0x894>
 80159e8:	2200      	movs	r2, #0
 80159ea:	2300      	movs	r3, #0
 80159ec:	4638      	mov	r0, r7
 80159ee:	4629      	mov	r1, r5
 80159f0:	f7f3 fa42 	bl	8008e78 <__aeabi_dcmpeq>
 80159f4:	b910      	cbnz	r0, 80159fc <_svfprintf_r+0x894>
 80159f6:	f1c6 0601 	rsb	r6, r6, #1
 80159fa:	9620      	str	r6, [sp, #128]	; 0x80
 80159fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015a00:	441a      	add	r2, r3
 8015a02:	9209      	str	r2, [sp, #36]	; 0x24
 8015a04:	2200      	movs	r2, #0
 8015a06:	2300      	movs	r3, #0
 8015a08:	4638      	mov	r0, r7
 8015a0a:	4629      	mov	r1, r5
 8015a0c:	f7f3 fa34 	bl	8008e78 <__aeabi_dcmpeq>
 8015a10:	b108      	cbz	r0, 8015a16 <_svfprintf_r+0x8ae>
 8015a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a14:	9324      	str	r3, [sp, #144]	; 0x90
 8015a16:	2230      	movs	r2, #48	; 0x30
 8015a18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015a1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a1c:	4299      	cmp	r1, r3
 8015a1e:	d9d3      	bls.n	80159c8 <_svfprintf_r+0x860>
 8015a20:	1c59      	adds	r1, r3, #1
 8015a22:	9124      	str	r1, [sp, #144]	; 0x90
 8015a24:	701a      	strb	r2, [r3, #0]
 8015a26:	e7f7      	b.n	8015a18 <_svfprintf_r+0x8b0>
 8015a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a2a:	2b46      	cmp	r3, #70	; 0x46
 8015a2c:	f47f ae50 	bne.w	80156d0 <_svfprintf_r+0x568>
 8015a30:	9a07      	ldr	r2, [sp, #28]
 8015a32:	f008 0301 	and.w	r3, r8, #1
 8015a36:	2d00      	cmp	r5, #0
 8015a38:	ea43 0302 	orr.w	r3, r3, r2
 8015a3c:	dd29      	ble.n	8015a92 <_svfprintf_r+0x92a>
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d034      	beq.n	8015aac <_svfprintf_r+0x944>
 8015a42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a44:	18eb      	adds	r3, r5, r3
 8015a46:	441a      	add	r2, r3
 8015a48:	9207      	str	r2, [sp, #28]
 8015a4a:	2366      	movs	r3, #102	; 0x66
 8015a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a4e:	e033      	b.n	8015ab8 <_svfprintf_r+0x950>
 8015a50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015a54:	f805 6f01 	strb.w	r6, [r5, #1]!
 8015a58:	e671      	b.n	801573e <_svfprintf_r+0x5d6>
 8015a5a:	b941      	cbnz	r1, 8015a6e <_svfprintf_r+0x906>
 8015a5c:	2230      	movs	r2, #48	; 0x30
 8015a5e:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8015a62:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8015a66:	3330      	adds	r3, #48	; 0x30
 8015a68:	f802 3b01 	strb.w	r3, [r2], #1
 8015a6c:	e673      	b.n	8015756 <_svfprintf_r+0x5ee>
 8015a6e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8015a72:	e7f8      	b.n	8015a66 <_svfprintf_r+0x8fe>
 8015a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a76:	42ab      	cmp	r3, r5
 8015a78:	dd10      	ble.n	8015a9c <_svfprintf_r+0x934>
 8015a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015a7e:	2d00      	cmp	r5, #0
 8015a80:	4413      	add	r3, r2
 8015a82:	9307      	str	r3, [sp, #28]
 8015a84:	dc10      	bgt.n	8015aa8 <_svfprintf_r+0x940>
 8015a86:	9a07      	ldr	r2, [sp, #28]
 8015a88:	f1c5 0301 	rsb	r3, r5, #1
 8015a8c:	441a      	add	r2, r3
 8015a8e:	9207      	str	r2, [sp, #28]
 8015a90:	e00a      	b.n	8015aa8 <_svfprintf_r+0x940>
 8015a92:	b16b      	cbz	r3, 8015ab0 <_svfprintf_r+0x948>
 8015a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a96:	9a07      	ldr	r2, [sp, #28]
 8015a98:	3301      	adds	r3, #1
 8015a9a:	e7d4      	b.n	8015a46 <_svfprintf_r+0x8de>
 8015a9c:	f018 0f01 	tst.w	r8, #1
 8015aa0:	d01f      	beq.n	8015ae2 <_svfprintf_r+0x97a>
 8015aa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015aa4:	18eb      	adds	r3, r5, r3
 8015aa6:	9307      	str	r3, [sp, #28]
 8015aa8:	2367      	movs	r3, #103	; 0x67
 8015aaa:	e7cf      	b.n	8015a4c <_svfprintf_r+0x8e4>
 8015aac:	9507      	str	r5, [sp, #28]
 8015aae:	e7cc      	b.n	8015a4a <_svfprintf_r+0x8e2>
 8015ab0:	2366      	movs	r3, #102	; 0x66
 8015ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	9307      	str	r3, [sp, #28]
 8015ab8:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8015abc:	930c      	str	r3, [sp, #48]	; 0x30
 8015abe:	d021      	beq.n	8015b04 <_svfprintf_r+0x99c>
 8015ac0:	2600      	movs	r6, #0
 8015ac2:	2d00      	cmp	r5, #0
 8015ac4:	960c      	str	r6, [sp, #48]	; 0x30
 8015ac6:	f77f ae5d 	ble.w	8015784 <_svfprintf_r+0x61c>
 8015aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	2bff      	cmp	r3, #255	; 0xff
 8015ad0:	d109      	bne.n	8015ae6 <_svfprintf_r+0x97e>
 8015ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ad4:	9a07      	ldr	r2, [sp, #28]
 8015ad6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015ad8:	4433      	add	r3, r6
 8015ada:	fb01 2303 	mla	r3, r1, r3, r2
 8015ade:	9307      	str	r3, [sp, #28]
 8015ae0:	e650      	b.n	8015784 <_svfprintf_r+0x61c>
 8015ae2:	9507      	str	r5, [sp, #28]
 8015ae4:	e7e0      	b.n	8015aa8 <_svfprintf_r+0x940>
 8015ae6:	42ab      	cmp	r3, r5
 8015ae8:	daf3      	bge.n	8015ad2 <_svfprintf_r+0x96a>
 8015aea:	1aed      	subs	r5, r5, r3
 8015aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015aee:	785b      	ldrb	r3, [r3, #1]
 8015af0:	b133      	cbz	r3, 8015b00 <_svfprintf_r+0x998>
 8015af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015af4:	3301      	adds	r3, #1
 8015af6:	930c      	str	r3, [sp, #48]	; 0x30
 8015af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015afa:	3301      	adds	r3, #1
 8015afc:	930d      	str	r3, [sp, #52]	; 0x34
 8015afe:	e7e4      	b.n	8015aca <_svfprintf_r+0x962>
 8015b00:	3601      	adds	r6, #1
 8015b02:	e7e2      	b.n	8015aca <_svfprintf_r+0x962>
 8015b04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015b06:	e63d      	b.n	8015784 <_svfprintf_r+0x61c>
 8015b08:	1d2b      	adds	r3, r5, #4
 8015b0a:	f018 0f20 	tst.w	r8, #32
 8015b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8015b10:	d00a      	beq.n	8015b28 <_svfprintf_r+0x9c0>
 8015b12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015b14:	682b      	ldr	r3, [r5, #0]
 8015b16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b18:	17d2      	asrs	r2, r2, #31
 8015b1a:	e9c3 1200 	strd	r1, r2, [r3]
 8015b1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015b20:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8015b24:	f7ff bb5d 	b.w	80151e2 <_svfprintf_r+0x7a>
 8015b28:	f018 0f10 	tst.w	r8, #16
 8015b2c:	d003      	beq.n	8015b36 <_svfprintf_r+0x9ce>
 8015b2e:	682b      	ldr	r3, [r5, #0]
 8015b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015b32:	601a      	str	r2, [r3, #0]
 8015b34:	e7f3      	b.n	8015b1e <_svfprintf_r+0x9b6>
 8015b36:	f018 0f40 	tst.w	r8, #64	; 0x40
 8015b3a:	d003      	beq.n	8015b44 <_svfprintf_r+0x9dc>
 8015b3c:	682b      	ldr	r3, [r5, #0]
 8015b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015b40:	801a      	strh	r2, [r3, #0]
 8015b42:	e7ec      	b.n	8015b1e <_svfprintf_r+0x9b6>
 8015b44:	f418 7f00 	tst.w	r8, #512	; 0x200
 8015b48:	d0f1      	beq.n	8015b2e <_svfprintf_r+0x9c6>
 8015b4a:	682b      	ldr	r3, [r5, #0]
 8015b4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015b4e:	701a      	strb	r2, [r3, #0]
 8015b50:	e7e5      	b.n	8015b1e <_svfprintf_r+0x9b6>
 8015b52:	f048 0810 	orr.w	r8, r8, #16
 8015b56:	f018 0320 	ands.w	r3, r8, #32
 8015b5a:	d020      	beq.n	8015b9e <_svfprintf_r+0xa36>
 8015b5c:	3507      	adds	r5, #7
 8015b5e:	f025 0307 	bic.w	r3, r5, #7
 8015b62:	461a      	mov	r2, r3
 8015b64:	685e      	ldr	r6, [r3, #4]
 8015b66:	f852 5b08 	ldr.w	r5, [r2], #8
 8015b6a:	920a      	str	r2, [sp, #40]	; 0x28
 8015b6c:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8015b70:	2300      	movs	r3, #0
 8015b72:	2200      	movs	r2, #0
 8015b74:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8015b78:	9a07      	ldr	r2, [sp, #28]
 8015b7a:	3201      	adds	r2, #1
 8015b7c:	f000 848d 	beq.w	801649a <_svfprintf_r+0x1332>
 8015b80:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8015b84:	9208      	str	r2, [sp, #32]
 8015b86:	ea55 0206 	orrs.w	r2, r5, r6
 8015b8a:	f040 848c 	bne.w	80164a6 <_svfprintf_r+0x133e>
 8015b8e:	9a07      	ldr	r2, [sp, #28]
 8015b90:	2a00      	cmp	r2, #0
 8015b92:	f000 80f4 	beq.w	8015d7e <_svfprintf_r+0xc16>
 8015b96:	2b01      	cmp	r3, #1
 8015b98:	f040 8488 	bne.w	80164ac <_svfprintf_r+0x1344>
 8015b9c:	e09e      	b.n	8015cdc <_svfprintf_r+0xb74>
 8015b9e:	462a      	mov	r2, r5
 8015ba0:	f018 0610 	ands.w	r6, r8, #16
 8015ba4:	f852 5b04 	ldr.w	r5, [r2], #4
 8015ba8:	920a      	str	r2, [sp, #40]	; 0x28
 8015baa:	d001      	beq.n	8015bb0 <_svfprintf_r+0xa48>
 8015bac:	461e      	mov	r6, r3
 8015bae:	e7dd      	b.n	8015b6c <_svfprintf_r+0xa04>
 8015bb0:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8015bb4:	d001      	beq.n	8015bba <_svfprintf_r+0xa52>
 8015bb6:	b2ad      	uxth	r5, r5
 8015bb8:	e7d8      	b.n	8015b6c <_svfprintf_r+0xa04>
 8015bba:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8015bbe:	d0d5      	beq.n	8015b6c <_svfprintf_r+0xa04>
 8015bc0:	b2ed      	uxtb	r5, r5
 8015bc2:	e7f3      	b.n	8015bac <_svfprintf_r+0xa44>
 8015bc4:	462b      	mov	r3, r5
 8015bc6:	2278      	movs	r2, #120	; 0x78
 8015bc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8015bcc:	930a      	str	r3, [sp, #40]	; 0x28
 8015bce:	f647 0330 	movw	r3, #30768	; 0x7830
 8015bd2:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8015bd6:	4ba2      	ldr	r3, [pc, #648]	; (8015e60 <_svfprintf_r+0xcf8>)
 8015bd8:	931a      	str	r3, [sp, #104]	; 0x68
 8015bda:	2600      	movs	r6, #0
 8015bdc:	f048 0802 	orr.w	r8, r8, #2
 8015be0:	2302      	movs	r3, #2
 8015be2:	920b      	str	r2, [sp, #44]	; 0x2c
 8015be4:	e7c5      	b.n	8015b72 <_svfprintf_r+0xa0a>
 8015be6:	462b      	mov	r3, r5
 8015be8:	2500      	movs	r5, #0
 8015bea:	f853 bb04 	ldr.w	fp, [r3], #4
 8015bee:	930a      	str	r3, [sp, #40]	; 0x28
 8015bf0:	9b07      	ldr	r3, [sp, #28]
 8015bf2:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8015bf6:	1c58      	adds	r0, r3, #1
 8015bf8:	d010      	beq.n	8015c1c <_svfprintf_r+0xab4>
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	4629      	mov	r1, r5
 8015bfe:	4658      	mov	r0, fp
 8015c00:	f7f2 fcbe 	bl	8008580 <memchr>
 8015c04:	9008      	str	r0, [sp, #32]
 8015c06:	2800      	cmp	r0, #0
 8015c08:	f000 80d0 	beq.w	8015dac <_svfprintf_r+0xc44>
 8015c0c:	eba0 030b 	sub.w	r3, r0, fp
 8015c10:	e9cd 3507 	strd	r3, r5, [sp, #28]
 8015c14:	462f      	mov	r7, r5
 8015c16:	462e      	mov	r6, r5
 8015c18:	950c      	str	r5, [sp, #48]	; 0x30
 8015c1a:	e5bb      	b.n	8015794 <_svfprintf_r+0x62c>
 8015c1c:	4658      	mov	r0, fp
 8015c1e:	f7f2 fcff 	bl	8008620 <strlen>
 8015c22:	e9cd 0507 	strd	r0, r5, [sp, #28]
 8015c26:	e468      	b.n	80154fa <_svfprintf_r+0x392>
 8015c28:	f048 0810 	orr.w	r8, r8, #16
 8015c2c:	f018 0320 	ands.w	r3, r8, #32
 8015c30:	d009      	beq.n	8015c46 <_svfprintf_r+0xade>
 8015c32:	3507      	adds	r5, #7
 8015c34:	f025 0307 	bic.w	r3, r5, #7
 8015c38:	461a      	mov	r2, r3
 8015c3a:	685e      	ldr	r6, [r3, #4]
 8015c3c:	f852 5b08 	ldr.w	r5, [r2], #8
 8015c40:	920a      	str	r2, [sp, #40]	; 0x28
 8015c42:	2301      	movs	r3, #1
 8015c44:	e795      	b.n	8015b72 <_svfprintf_r+0xa0a>
 8015c46:	462a      	mov	r2, r5
 8015c48:	f018 0610 	ands.w	r6, r8, #16
 8015c4c:	f852 5b04 	ldr.w	r5, [r2], #4
 8015c50:	920a      	str	r2, [sp, #40]	; 0x28
 8015c52:	d001      	beq.n	8015c58 <_svfprintf_r+0xaf0>
 8015c54:	461e      	mov	r6, r3
 8015c56:	e7f4      	b.n	8015c42 <_svfprintf_r+0xada>
 8015c58:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8015c5c:	d001      	beq.n	8015c62 <_svfprintf_r+0xafa>
 8015c5e:	b2ad      	uxth	r5, r5
 8015c60:	e7ef      	b.n	8015c42 <_svfprintf_r+0xada>
 8015c62:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8015c66:	d0ec      	beq.n	8015c42 <_svfprintf_r+0xada>
 8015c68:	b2ed      	uxtb	r5, r5
 8015c6a:	e7f3      	b.n	8015c54 <_svfprintf_r+0xaec>
 8015c6c:	4b7d      	ldr	r3, [pc, #500]	; (8015e64 <_svfprintf_r+0xcfc>)
 8015c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8015c70:	f018 0320 	ands.w	r3, r8, #32
 8015c74:	d01b      	beq.n	8015cae <_svfprintf_r+0xb46>
 8015c76:	3507      	adds	r5, #7
 8015c78:	f025 0307 	bic.w	r3, r5, #7
 8015c7c:	461a      	mov	r2, r3
 8015c7e:	685e      	ldr	r6, [r3, #4]
 8015c80:	f852 5b08 	ldr.w	r5, [r2], #8
 8015c84:	920a      	str	r2, [sp, #40]	; 0x28
 8015c86:	f018 0f01 	tst.w	r8, #1
 8015c8a:	d00a      	beq.n	8015ca2 <_svfprintf_r+0xb3a>
 8015c8c:	ea55 0306 	orrs.w	r3, r5, r6
 8015c90:	d007      	beq.n	8015ca2 <_svfprintf_r+0xb3a>
 8015c92:	2330      	movs	r3, #48	; 0x30
 8015c94:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8015c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c9a:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8015c9e:	f048 0802 	orr.w	r8, r8, #2
 8015ca2:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8015ca6:	2302      	movs	r3, #2
 8015ca8:	e763      	b.n	8015b72 <_svfprintf_r+0xa0a>
 8015caa:	4b6d      	ldr	r3, [pc, #436]	; (8015e60 <_svfprintf_r+0xcf8>)
 8015cac:	e7df      	b.n	8015c6e <_svfprintf_r+0xb06>
 8015cae:	462a      	mov	r2, r5
 8015cb0:	f018 0610 	ands.w	r6, r8, #16
 8015cb4:	f852 5b04 	ldr.w	r5, [r2], #4
 8015cb8:	920a      	str	r2, [sp, #40]	; 0x28
 8015cba:	d001      	beq.n	8015cc0 <_svfprintf_r+0xb58>
 8015cbc:	461e      	mov	r6, r3
 8015cbe:	e7e2      	b.n	8015c86 <_svfprintf_r+0xb1e>
 8015cc0:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8015cc4:	d001      	beq.n	8015cca <_svfprintf_r+0xb62>
 8015cc6:	b2ad      	uxth	r5, r5
 8015cc8:	e7dd      	b.n	8015c86 <_svfprintf_r+0xb1e>
 8015cca:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8015cce:	d0da      	beq.n	8015c86 <_svfprintf_r+0xb1e>
 8015cd0:	b2ed      	uxtb	r5, r5
 8015cd2:	e7f3      	b.n	8015cbc <_svfprintf_r+0xb54>
 8015cd4:	2d0a      	cmp	r5, #10
 8015cd6:	f176 0300 	sbcs.w	r3, r6, #0
 8015cda:	d205      	bcs.n	8015ce8 <_svfprintf_r+0xb80>
 8015cdc:	3530      	adds	r5, #48	; 0x30
 8015cde:	f88d 5147 	strb.w	r5, [sp, #327]	; 0x147
 8015ce2:	f20d 1b47 	addw	fp, sp, #327	; 0x147
 8015ce6:	e3fd      	b.n	80164e4 <_svfprintf_r+0x137c>
 8015ce8:	2300      	movs	r3, #0
 8015cea:	9309      	str	r3, [sp, #36]	; 0x24
 8015cec:	9b08      	ldr	r3, [sp, #32]
 8015cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015cf2:	af52      	add	r7, sp, #328	; 0x148
 8015cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8015cf6:	220a      	movs	r2, #10
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	4628      	mov	r0, r5
 8015cfc:	4631      	mov	r1, r6
 8015cfe:	f7f3 fa79 	bl	80091f4 <__aeabi_uldivmod>
 8015d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d04:	9014      	str	r0, [sp, #80]	; 0x50
 8015d06:	3301      	adds	r3, #1
 8015d08:	9309      	str	r3, [sp, #36]	; 0x24
 8015d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d0c:	3230      	adds	r2, #48	; 0x30
 8015d0e:	4688      	mov	r8, r1
 8015d10:	f107 3bff 	add.w	fp, r7, #4294967295
 8015d14:	f807 2c01 	strb.w	r2, [r7, #-1]
 8015d18:	b1d3      	cbz	r3, 8015d50 <_svfprintf_r+0xbe8>
 8015d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d1e:	781b      	ldrb	r3, [r3, #0]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d115      	bne.n	8015d50 <_svfprintf_r+0xbe8>
 8015d24:	2aff      	cmp	r2, #255	; 0xff
 8015d26:	d013      	beq.n	8015d50 <_svfprintf_r+0xbe8>
 8015d28:	2d0a      	cmp	r5, #10
 8015d2a:	f176 0300 	sbcs.w	r3, r6, #0
 8015d2e:	d30f      	bcc.n	8015d50 <_svfprintf_r+0xbe8>
 8015d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d32:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015d34:	ebab 0b03 	sub.w	fp, fp, r3
 8015d38:	461a      	mov	r2, r3
 8015d3a:	4658      	mov	r0, fp
 8015d3c:	f002 fd19 	bl	8018772 <strncpy>
 8015d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d42:	785b      	ldrb	r3, [r3, #1]
 8015d44:	b11b      	cbz	r3, 8015d4e <_svfprintf_r+0xbe6>
 8015d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d48:	3301      	adds	r3, #1
 8015d4a:	930d      	str	r3, [sp, #52]	; 0x34
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8015d50:	2d0a      	cmp	r5, #10
 8015d52:	f176 0600 	sbcs.w	r6, r6, #0
 8015d56:	f0c0 83c5 	bcc.w	80164e4 <_svfprintf_r+0x137c>
 8015d5a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015d5c:	4646      	mov	r6, r8
 8015d5e:	465f      	mov	r7, fp
 8015d60:	e7c9      	b.n	8015cf6 <_svfprintf_r+0xb8e>
 8015d62:	f005 030f 	and.w	r3, r5, #15
 8015d66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015d68:	092d      	lsrs	r5, r5, #4
 8015d6a:	5cd3      	ldrb	r3, [r2, r3]
 8015d6c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8015d70:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8015d74:	0936      	lsrs	r6, r6, #4
 8015d76:	ea55 0306 	orrs.w	r3, r5, r6
 8015d7a:	d1f2      	bne.n	8015d62 <_svfprintf_r+0xbfa>
 8015d7c:	e3b2      	b.n	80164e4 <_svfprintf_r+0x137c>
 8015d7e:	b933      	cbnz	r3, 8015d8e <_svfprintf_r+0xc26>
 8015d80:	f018 0f01 	tst.w	r8, #1
 8015d84:	d003      	beq.n	8015d8e <_svfprintf_r+0xc26>
 8015d86:	2330      	movs	r3, #48	; 0x30
 8015d88:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 8015d8c:	e7a9      	b.n	8015ce2 <_svfprintf_r+0xb7a>
 8015d8e:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8015d92:	e3a7      	b.n	80164e4 <_svfprintf_r+0x137c>
 8015d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f000 8374 	beq.w	8016484 <_svfprintf_r+0x131c>
 8015d9c:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8015da0:	2300      	movs	r3, #0
 8015da2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8015da6:	950a      	str	r5, [sp, #40]	; 0x28
 8015da8:	f7ff bb39 	b.w	801541e <_svfprintf_r+0x2b6>
 8015dac:	9f08      	ldr	r7, [sp, #32]
 8015dae:	f7ff bba5 	b.w	80154fc <_svfprintf_r+0x394>
 8015db2:	2010      	movs	r0, #16
 8015db4:	4403      	add	r3, r0
 8015db6:	2a07      	cmp	r2, #7
 8015db8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015dbc:	6060      	str	r0, [r4, #4]
 8015dbe:	dd08      	ble.n	8015dd2 <_svfprintf_r+0xc6a>
 8015dc0:	aa26      	add	r2, sp, #152	; 0x98
 8015dc2:	4651      	mov	r1, sl
 8015dc4:	4648      	mov	r0, r9
 8015dc6:	f003 ff67 	bl	8019c98 <__ssprint_r>
 8015dca:	2800      	cmp	r0, #0
 8015dcc:	f040 8338 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015dd0:	a929      	add	r1, sp, #164	; 0xa4
 8015dd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015dd4:	3b10      	subs	r3, #16
 8015dd6:	9316      	str	r3, [sp, #88]	; 0x58
 8015dd8:	460c      	mov	r4, r1
 8015dda:	e4f7      	b.n	80157cc <_svfprintf_r+0x664>
 8015ddc:	460c      	mov	r4, r1
 8015dde:	e512      	b.n	8015806 <_svfprintf_r+0x69e>
 8015de0:	aa26      	add	r2, sp, #152	; 0x98
 8015de2:	4651      	mov	r1, sl
 8015de4:	4648      	mov	r0, r9
 8015de6:	f003 ff57 	bl	8019c98 <__ssprint_r>
 8015dea:	2800      	cmp	r0, #0
 8015dec:	f040 8328 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015df0:	ac29      	add	r4, sp, #164	; 0xa4
 8015df2:	e51a      	b.n	801582a <_svfprintf_r+0x6c2>
 8015df4:	aa26      	add	r2, sp, #152	; 0x98
 8015df6:	4651      	mov	r1, sl
 8015df8:	4648      	mov	r0, r9
 8015dfa:	f003 ff4d 	bl	8019c98 <__ssprint_r>
 8015dfe:	2800      	cmp	r0, #0
 8015e00:	f040 831e 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015e04:	ac29      	add	r4, sp, #164	; 0xa4
 8015e06:	e520      	b.n	801584a <_svfprintf_r+0x6e2>
 8015e08:	2010      	movs	r0, #16
 8015e0a:	4403      	add	r3, r0
 8015e0c:	2a07      	cmp	r2, #7
 8015e0e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8015e12:	6060      	str	r0, [r4, #4]
 8015e14:	dd08      	ble.n	8015e28 <_svfprintf_r+0xcc0>
 8015e16:	aa26      	add	r2, sp, #152	; 0x98
 8015e18:	4651      	mov	r1, sl
 8015e1a:	4648      	mov	r0, r9
 8015e1c:	f003 ff3c 	bl	8019c98 <__ssprint_r>
 8015e20:	2800      	cmp	r0, #0
 8015e22:	f040 830d 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015e26:	a929      	add	r1, sp, #164	; 0xa4
 8015e28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015e2a:	3b10      	subs	r3, #16
 8015e2c:	9316      	str	r3, [sp, #88]	; 0x58
 8015e2e:	460c      	mov	r4, r1
 8015e30:	e514      	b.n	801585c <_svfprintf_r+0x6f4>
 8015e32:	460c      	mov	r4, r1
 8015e34:	e52f      	b.n	8015896 <_svfprintf_r+0x72e>
 8015e36:	2010      	movs	r0, #16
 8015e38:	4402      	add	r2, r0
 8015e3a:	2b07      	cmp	r3, #7
 8015e3c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015e40:	6060      	str	r0, [r4, #4]
 8015e42:	dd08      	ble.n	8015e56 <_svfprintf_r+0xcee>
 8015e44:	aa26      	add	r2, sp, #152	; 0x98
 8015e46:	4651      	mov	r1, sl
 8015e48:	4648      	mov	r0, r9
 8015e4a:	f003 ff25 	bl	8019c98 <__ssprint_r>
 8015e4e:	2800      	cmp	r0, #0
 8015e50:	f040 82f6 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015e54:	a929      	add	r1, sp, #164	; 0xa4
 8015e56:	3f10      	subs	r7, #16
 8015e58:	460c      	mov	r4, r1
 8015e5a:	e520      	b.n	801589e <_svfprintf_r+0x736>
 8015e5c:	460c      	mov	r4, r1
 8015e5e:	e547      	b.n	80158f0 <_svfprintf_r+0x788>
 8015e60:	0801b765 	.word	0x0801b765
 8015e64:	0801b776 	.word	0x0801b776
 8015e68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e6a:	2b65      	cmp	r3, #101	; 0x65
 8015e6c:	f340 8230 	ble.w	80162d0 <_svfprintf_r+0x1168>
 8015e70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015e74:	2200      	movs	r2, #0
 8015e76:	2300      	movs	r3, #0
 8015e78:	f7f2 fffe 	bl	8008e78 <__aeabi_dcmpeq>
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	d068      	beq.n	8015f52 <_svfprintf_r+0xdea>
 8015e80:	4b6d      	ldr	r3, [pc, #436]	; (8016038 <_svfprintf_r+0xed0>)
 8015e82:	6023      	str	r3, [r4, #0]
 8015e84:	2301      	movs	r3, #1
 8015e86:	441f      	add	r7, r3
 8015e88:	6063      	str	r3, [r4, #4]
 8015e8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015e8c:	9728      	str	r7, [sp, #160]	; 0xa0
 8015e8e:	3301      	adds	r3, #1
 8015e90:	2b07      	cmp	r3, #7
 8015e92:	9327      	str	r3, [sp, #156]	; 0x9c
 8015e94:	dc37      	bgt.n	8015f06 <_svfprintf_r+0xd9e>
 8015e96:	3408      	adds	r4, #8
 8015e98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e9c:	4293      	cmp	r3, r2
 8015e9e:	db03      	blt.n	8015ea8 <_svfprintf_r+0xd40>
 8015ea0:	f018 0f01 	tst.w	r8, #1
 8015ea4:	f43f ad36 	beq.w	8015914 <_svfprintf_r+0x7ac>
 8015ea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015eaa:	6023      	str	r3, [r4, #0]
 8015eac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015eae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015eb0:	6063      	str	r3, [r4, #4]
 8015eb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015eb4:	4413      	add	r3, r2
 8015eb6:	9328      	str	r3, [sp, #160]	; 0xa0
 8015eb8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015eba:	3301      	adds	r3, #1
 8015ebc:	2b07      	cmp	r3, #7
 8015ebe:	9327      	str	r3, [sp, #156]	; 0x9c
 8015ec0:	dc2b      	bgt.n	8015f1a <_svfprintf_r+0xdb2>
 8015ec2:	3408      	adds	r4, #8
 8015ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ec6:	1e5d      	subs	r5, r3, #1
 8015ec8:	2d00      	cmp	r5, #0
 8015eca:	f77f ad23 	ble.w	8015914 <_svfprintf_r+0x7ac>
 8015ece:	4e5b      	ldr	r6, [pc, #364]	; (801603c <_svfprintf_r+0xed4>)
 8015ed0:	2710      	movs	r7, #16
 8015ed2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8015ed6:	2d10      	cmp	r5, #16
 8015ed8:	f103 0301 	add.w	r3, r3, #1
 8015edc:	f104 0108 	add.w	r1, r4, #8
 8015ee0:	6026      	str	r6, [r4, #0]
 8015ee2:	dc24      	bgt.n	8015f2e <_svfprintf_r+0xdc6>
 8015ee4:	6065      	str	r5, [r4, #4]
 8015ee6:	4415      	add	r5, r2
 8015ee8:	9528      	str	r5, [sp, #160]	; 0xa0
 8015eea:	2b07      	cmp	r3, #7
 8015eec:	9327      	str	r3, [sp, #156]	; 0x9c
 8015eee:	f340 8286 	ble.w	80163fe <_svfprintf_r+0x1296>
 8015ef2:	aa26      	add	r2, sp, #152	; 0x98
 8015ef4:	4651      	mov	r1, sl
 8015ef6:	4648      	mov	r0, r9
 8015ef8:	f003 fece 	bl	8019c98 <__ssprint_r>
 8015efc:	2800      	cmp	r0, #0
 8015efe:	f040 829f 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015f02:	ac29      	add	r4, sp, #164	; 0xa4
 8015f04:	e506      	b.n	8015914 <_svfprintf_r+0x7ac>
 8015f06:	aa26      	add	r2, sp, #152	; 0x98
 8015f08:	4651      	mov	r1, sl
 8015f0a:	4648      	mov	r0, r9
 8015f0c:	f003 fec4 	bl	8019c98 <__ssprint_r>
 8015f10:	2800      	cmp	r0, #0
 8015f12:	f040 8295 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015f16:	ac29      	add	r4, sp, #164	; 0xa4
 8015f18:	e7be      	b.n	8015e98 <_svfprintf_r+0xd30>
 8015f1a:	aa26      	add	r2, sp, #152	; 0x98
 8015f1c:	4651      	mov	r1, sl
 8015f1e:	4648      	mov	r0, r9
 8015f20:	f003 feba 	bl	8019c98 <__ssprint_r>
 8015f24:	2800      	cmp	r0, #0
 8015f26:	f040 828b 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015f2a:	ac29      	add	r4, sp, #164	; 0xa4
 8015f2c:	e7ca      	b.n	8015ec4 <_svfprintf_r+0xd5c>
 8015f2e:	3210      	adds	r2, #16
 8015f30:	2b07      	cmp	r3, #7
 8015f32:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8015f36:	6067      	str	r7, [r4, #4]
 8015f38:	dd08      	ble.n	8015f4c <_svfprintf_r+0xde4>
 8015f3a:	aa26      	add	r2, sp, #152	; 0x98
 8015f3c:	4651      	mov	r1, sl
 8015f3e:	4648      	mov	r0, r9
 8015f40:	f003 feaa 	bl	8019c98 <__ssprint_r>
 8015f44:	2800      	cmp	r0, #0
 8015f46:	f040 827b 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015f4a:	a929      	add	r1, sp, #164	; 0xa4
 8015f4c:	3d10      	subs	r5, #16
 8015f4e:	460c      	mov	r4, r1
 8015f50:	e7bf      	b.n	8015ed2 <_svfprintf_r+0xd6a>
 8015f52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	dc73      	bgt.n	8016040 <_svfprintf_r+0xed8>
 8015f58:	4b37      	ldr	r3, [pc, #220]	; (8016038 <_svfprintf_r+0xed0>)
 8015f5a:	6023      	str	r3, [r4, #0]
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	441f      	add	r7, r3
 8015f60:	6063      	str	r3, [r4, #4]
 8015f62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015f64:	9728      	str	r7, [sp, #160]	; 0xa0
 8015f66:	3301      	adds	r3, #1
 8015f68:	2b07      	cmp	r3, #7
 8015f6a:	9327      	str	r3, [sp, #156]	; 0x9c
 8015f6c:	dc3d      	bgt.n	8015fea <_svfprintf_r+0xe82>
 8015f6e:	3408      	adds	r4, #8
 8015f70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015f74:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8015f76:	430b      	orrs	r3, r1
 8015f78:	f008 0101 	and.w	r1, r8, #1
 8015f7c:	430b      	orrs	r3, r1
 8015f7e:	f43f acc9 	beq.w	8015914 <_svfprintf_r+0x7ac>
 8015f82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f84:	6023      	str	r3, [r4, #0]
 8015f86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f88:	6063      	str	r3, [r4, #4]
 8015f8a:	441a      	add	r2, r3
 8015f8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015f8e:	9228      	str	r2, [sp, #160]	; 0xa0
 8015f90:	3301      	adds	r3, #1
 8015f92:	2b07      	cmp	r3, #7
 8015f94:	9327      	str	r3, [sp, #156]	; 0x9c
 8015f96:	dc32      	bgt.n	8015ffe <_svfprintf_r+0xe96>
 8015f98:	3408      	adds	r4, #8
 8015f9a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8015f9c:	2d00      	cmp	r5, #0
 8015f9e:	da1b      	bge.n	8015fd8 <_svfprintf_r+0xe70>
 8015fa0:	4e26      	ldr	r6, [pc, #152]	; (801603c <_svfprintf_r+0xed4>)
 8015fa2:	426d      	negs	r5, r5
 8015fa4:	4623      	mov	r3, r4
 8015fa6:	2710      	movs	r7, #16
 8015fa8:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8015fac:	2d10      	cmp	r5, #16
 8015fae:	f102 0201 	add.w	r2, r2, #1
 8015fb2:	f104 0408 	add.w	r4, r4, #8
 8015fb6:	601e      	str	r6, [r3, #0]
 8015fb8:	dc2b      	bgt.n	8016012 <_svfprintf_r+0xeaa>
 8015fba:	605d      	str	r5, [r3, #4]
 8015fbc:	2a07      	cmp	r2, #7
 8015fbe:	440d      	add	r5, r1
 8015fc0:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8015fc4:	dd08      	ble.n	8015fd8 <_svfprintf_r+0xe70>
 8015fc6:	aa26      	add	r2, sp, #152	; 0x98
 8015fc8:	4651      	mov	r1, sl
 8015fca:	4648      	mov	r0, r9
 8015fcc:	f003 fe64 	bl	8019c98 <__ssprint_r>
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	f040 8235 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015fd6:	ac29      	add	r4, sp, #164	; 0xa4
 8015fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fdc:	6063      	str	r3, [r4, #4]
 8015fde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015fe0:	f8c4 b000 	str.w	fp, [r4]
 8015fe4:	4413      	add	r3, r2
 8015fe6:	9328      	str	r3, [sp, #160]	; 0xa0
 8015fe8:	e48d      	b.n	8015906 <_svfprintf_r+0x79e>
 8015fea:	aa26      	add	r2, sp, #152	; 0x98
 8015fec:	4651      	mov	r1, sl
 8015fee:	4648      	mov	r0, r9
 8015ff0:	f003 fe52 	bl	8019c98 <__ssprint_r>
 8015ff4:	2800      	cmp	r0, #0
 8015ff6:	f040 8223 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8015ffa:	ac29      	add	r4, sp, #164	; 0xa4
 8015ffc:	e7b8      	b.n	8015f70 <_svfprintf_r+0xe08>
 8015ffe:	aa26      	add	r2, sp, #152	; 0x98
 8016000:	4651      	mov	r1, sl
 8016002:	4648      	mov	r0, r9
 8016004:	f003 fe48 	bl	8019c98 <__ssprint_r>
 8016008:	2800      	cmp	r0, #0
 801600a:	f040 8219 	bne.w	8016440 <_svfprintf_r+0x12d8>
 801600e:	ac29      	add	r4, sp, #164	; 0xa4
 8016010:	e7c3      	b.n	8015f9a <_svfprintf_r+0xe32>
 8016012:	3110      	adds	r1, #16
 8016014:	2a07      	cmp	r2, #7
 8016016:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801601a:	605f      	str	r7, [r3, #4]
 801601c:	dd08      	ble.n	8016030 <_svfprintf_r+0xec8>
 801601e:	aa26      	add	r2, sp, #152	; 0x98
 8016020:	4651      	mov	r1, sl
 8016022:	4648      	mov	r0, r9
 8016024:	f003 fe38 	bl	8019c98 <__ssprint_r>
 8016028:	2800      	cmp	r0, #0
 801602a:	f040 8209 	bne.w	8016440 <_svfprintf_r+0x12d8>
 801602e:	ac29      	add	r4, sp, #164	; 0xa4
 8016030:	3d10      	subs	r5, #16
 8016032:	4623      	mov	r3, r4
 8016034:	e7b8      	b.n	8015fa8 <_svfprintf_r+0xe40>
 8016036:	bf00      	nop
 8016038:	0801b787 	.word	0x0801b787
 801603c:	0801b799 	.word	0x0801b799
 8016040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016042:	42ab      	cmp	r3, r5
 8016044:	bfa8      	it	ge
 8016046:	462b      	movge	r3, r5
 8016048:	2b00      	cmp	r3, #0
 801604a:	9307      	str	r3, [sp, #28]
 801604c:	dd09      	ble.n	8016062 <_svfprintf_r+0xefa>
 801604e:	441f      	add	r7, r3
 8016050:	e9c4 b300 	strd	fp, r3, [r4]
 8016054:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016056:	9728      	str	r7, [sp, #160]	; 0xa0
 8016058:	3301      	adds	r3, #1
 801605a:	2b07      	cmp	r3, #7
 801605c:	9327      	str	r3, [sp, #156]	; 0x9c
 801605e:	dc74      	bgt.n	801614a <_svfprintf_r+0xfe2>
 8016060:	3408      	adds	r4, #8
 8016062:	9b07      	ldr	r3, [sp, #28]
 8016064:	2b00      	cmp	r3, #0
 8016066:	bfac      	ite	ge
 8016068:	1aef      	subge	r7, r5, r3
 801606a:	462f      	movlt	r7, r5
 801606c:	2f00      	cmp	r7, #0
 801606e:	dd18      	ble.n	80160a2 <_svfprintf_r+0xf3a>
 8016070:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016074:	4895      	ldr	r0, [pc, #596]	; (80162cc <_svfprintf_r+0x1164>)
 8016076:	6020      	str	r0, [r4, #0]
 8016078:	2f10      	cmp	r7, #16
 801607a:	f103 0301 	add.w	r3, r3, #1
 801607e:	f104 0108 	add.w	r1, r4, #8
 8016082:	dc6c      	bgt.n	801615e <_svfprintf_r+0xff6>
 8016084:	6067      	str	r7, [r4, #4]
 8016086:	2b07      	cmp	r3, #7
 8016088:	4417      	add	r7, r2
 801608a:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801608e:	dd79      	ble.n	8016184 <_svfprintf_r+0x101c>
 8016090:	aa26      	add	r2, sp, #152	; 0x98
 8016092:	4651      	mov	r1, sl
 8016094:	4648      	mov	r0, r9
 8016096:	f003 fdff 	bl	8019c98 <__ssprint_r>
 801609a:	2800      	cmp	r0, #0
 801609c:	f040 81d0 	bne.w	8016440 <_svfprintf_r+0x12d8>
 80160a0:	ac29      	add	r4, sp, #164	; 0xa4
 80160a2:	f418 6f80 	tst.w	r8, #1024	; 0x400
 80160a6:	445d      	add	r5, fp
 80160a8:	d009      	beq.n	80160be <_svfprintf_r+0xf56>
 80160aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d16b      	bne.n	8016188 <_svfprintf_r+0x1020>
 80160b0:	2e00      	cmp	r6, #0
 80160b2:	d16b      	bne.n	801618c <_svfprintf_r+0x1024>
 80160b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160b6:	445b      	add	r3, fp
 80160b8:	429d      	cmp	r5, r3
 80160ba:	bf28      	it	cs
 80160bc:	461d      	movcs	r5, r3
 80160be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80160c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80160c2:	4293      	cmp	r3, r2
 80160c4:	db02      	blt.n	80160cc <_svfprintf_r+0xf64>
 80160c6:	f018 0f01 	tst.w	r8, #1
 80160ca:	d00e      	beq.n	80160ea <_svfprintf_r+0xf82>
 80160cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80160ce:	6023      	str	r3, [r4, #0]
 80160d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80160d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80160d4:	6063      	str	r3, [r4, #4]
 80160d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80160d8:	4413      	add	r3, r2
 80160da:	9328      	str	r3, [sp, #160]	; 0xa0
 80160dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80160de:	3301      	adds	r3, #1
 80160e0:	2b07      	cmp	r3, #7
 80160e2:	9327      	str	r3, [sp, #156]	; 0x9c
 80160e4:	f300 80cc 	bgt.w	8016280 <_svfprintf_r+0x1118>
 80160e8:	3408      	adds	r4, #8
 80160ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160ec:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80160ee:	1b9e      	subs	r6, r3, r6
 80160f0:	445b      	add	r3, fp
 80160f2:	1b5b      	subs	r3, r3, r5
 80160f4:	429e      	cmp	r6, r3
 80160f6:	bfa8      	it	ge
 80160f8:	461e      	movge	r6, r3
 80160fa:	2e00      	cmp	r6, #0
 80160fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80160fe:	dd0a      	ble.n	8016116 <_svfprintf_r+0xfae>
 8016100:	4433      	add	r3, r6
 8016102:	9328      	str	r3, [sp, #160]	; 0xa0
 8016104:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016106:	3301      	adds	r3, #1
 8016108:	2b07      	cmp	r3, #7
 801610a:	e9c4 5600 	strd	r5, r6, [r4]
 801610e:	9327      	str	r3, [sp, #156]	; 0x9c
 8016110:	f300 80c0 	bgt.w	8016294 <_svfprintf_r+0x112c>
 8016114:	3408      	adds	r4, #8
 8016116:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8016118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801611a:	2e00      	cmp	r6, #0
 801611c:	eba3 0505 	sub.w	r5, r3, r5
 8016120:	bfa8      	it	ge
 8016122:	1bad      	subge	r5, r5, r6
 8016124:	2d00      	cmp	r5, #0
 8016126:	f77f abf5 	ble.w	8015914 <_svfprintf_r+0x7ac>
 801612a:	4e68      	ldr	r6, [pc, #416]	; (80162cc <_svfprintf_r+0x1164>)
 801612c:	2710      	movs	r7, #16
 801612e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016132:	2d10      	cmp	r5, #16
 8016134:	f103 0301 	add.w	r3, r3, #1
 8016138:	f104 0108 	add.w	r1, r4, #8
 801613c:	6026      	str	r6, [r4, #0]
 801613e:	f300 80b3 	bgt.w	80162a8 <_svfprintf_r+0x1140>
 8016142:	442a      	add	r2, r5
 8016144:	6065      	str	r5, [r4, #4]
 8016146:	9228      	str	r2, [sp, #160]	; 0xa0
 8016148:	e6cf      	b.n	8015eea <_svfprintf_r+0xd82>
 801614a:	aa26      	add	r2, sp, #152	; 0x98
 801614c:	4651      	mov	r1, sl
 801614e:	4648      	mov	r0, r9
 8016150:	f003 fda2 	bl	8019c98 <__ssprint_r>
 8016154:	2800      	cmp	r0, #0
 8016156:	f040 8173 	bne.w	8016440 <_svfprintf_r+0x12d8>
 801615a:	ac29      	add	r4, sp, #164	; 0xa4
 801615c:	e781      	b.n	8016062 <_svfprintf_r+0xefa>
 801615e:	2010      	movs	r0, #16
 8016160:	4402      	add	r2, r0
 8016162:	2b07      	cmp	r3, #7
 8016164:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016168:	6060      	str	r0, [r4, #4]
 801616a:	dd08      	ble.n	801617e <_svfprintf_r+0x1016>
 801616c:	aa26      	add	r2, sp, #152	; 0x98
 801616e:	4651      	mov	r1, sl
 8016170:	4648      	mov	r0, r9
 8016172:	f003 fd91 	bl	8019c98 <__ssprint_r>
 8016176:	2800      	cmp	r0, #0
 8016178:	f040 8162 	bne.w	8016440 <_svfprintf_r+0x12d8>
 801617c:	a929      	add	r1, sp, #164	; 0xa4
 801617e:	3f10      	subs	r7, #16
 8016180:	460c      	mov	r4, r1
 8016182:	e775      	b.n	8016070 <_svfprintf_r+0xf08>
 8016184:	460c      	mov	r4, r1
 8016186:	e78c      	b.n	80160a2 <_svfprintf_r+0xf3a>
 8016188:	2e00      	cmp	r6, #0
 801618a:	d049      	beq.n	8016220 <_svfprintf_r+0x10b8>
 801618c:	3e01      	subs	r6, #1
 801618e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016190:	6023      	str	r3, [r4, #0]
 8016192:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016194:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016196:	6063      	str	r3, [r4, #4]
 8016198:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801619a:	4413      	add	r3, r2
 801619c:	9328      	str	r3, [sp, #160]	; 0xa0
 801619e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80161a0:	3301      	adds	r3, #1
 80161a2:	2b07      	cmp	r3, #7
 80161a4:	9327      	str	r3, [sp, #156]	; 0x9c
 80161a6:	dc42      	bgt.n	801622e <_svfprintf_r+0x10c6>
 80161a8:	3408      	adds	r4, #8
 80161aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161ac:	445b      	add	r3, fp
 80161ae:	1b5a      	subs	r2, r3, r5
 80161b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	429a      	cmp	r2, r3
 80161b6:	bfa8      	it	ge
 80161b8:	461a      	movge	r2, r3
 80161ba:	2a00      	cmp	r2, #0
 80161bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80161be:	9207      	str	r2, [sp, #28]
 80161c0:	dd09      	ble.n	80161d6 <_svfprintf_r+0x106e>
 80161c2:	4413      	add	r3, r2
 80161c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80161c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80161c8:	3301      	adds	r3, #1
 80161ca:	2b07      	cmp	r3, #7
 80161cc:	e9c4 5200 	strd	r5, r2, [r4]
 80161d0:	9327      	str	r3, [sp, #156]	; 0x9c
 80161d2:	dc36      	bgt.n	8016242 <_svfprintf_r+0x10da>
 80161d4:	3408      	adds	r4, #8
 80161d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161d8:	781f      	ldrb	r7, [r3, #0]
 80161da:	9b07      	ldr	r3, [sp, #28]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	bfa8      	it	ge
 80161e0:	1aff      	subge	r7, r7, r3
 80161e2:	2f00      	cmp	r7, #0
 80161e4:	dd18      	ble.n	8016218 <_svfprintf_r+0x10b0>
 80161e6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80161ea:	4838      	ldr	r0, [pc, #224]	; (80162cc <_svfprintf_r+0x1164>)
 80161ec:	6020      	str	r0, [r4, #0]
 80161ee:	2f10      	cmp	r7, #16
 80161f0:	f103 0301 	add.w	r3, r3, #1
 80161f4:	f104 0108 	add.w	r1, r4, #8
 80161f8:	dc2d      	bgt.n	8016256 <_svfprintf_r+0x10ee>
 80161fa:	443a      	add	r2, r7
 80161fc:	2b07      	cmp	r3, #7
 80161fe:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016202:	6067      	str	r7, [r4, #4]
 8016204:	dd3a      	ble.n	801627c <_svfprintf_r+0x1114>
 8016206:	aa26      	add	r2, sp, #152	; 0x98
 8016208:	4651      	mov	r1, sl
 801620a:	4648      	mov	r0, r9
 801620c:	f003 fd44 	bl	8019c98 <__ssprint_r>
 8016210:	2800      	cmp	r0, #0
 8016212:	f040 8115 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8016216:	ac29      	add	r4, sp, #164	; 0xa4
 8016218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	441d      	add	r5, r3
 801621e:	e744      	b.n	80160aa <_svfprintf_r+0xf42>
 8016220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016222:	3b01      	subs	r3, #1
 8016224:	930d      	str	r3, [sp, #52]	; 0x34
 8016226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016228:	3b01      	subs	r3, #1
 801622a:	930c      	str	r3, [sp, #48]	; 0x30
 801622c:	e7af      	b.n	801618e <_svfprintf_r+0x1026>
 801622e:	aa26      	add	r2, sp, #152	; 0x98
 8016230:	4651      	mov	r1, sl
 8016232:	4648      	mov	r0, r9
 8016234:	f003 fd30 	bl	8019c98 <__ssprint_r>
 8016238:	2800      	cmp	r0, #0
 801623a:	f040 8101 	bne.w	8016440 <_svfprintf_r+0x12d8>
 801623e:	ac29      	add	r4, sp, #164	; 0xa4
 8016240:	e7b3      	b.n	80161aa <_svfprintf_r+0x1042>
 8016242:	aa26      	add	r2, sp, #152	; 0x98
 8016244:	4651      	mov	r1, sl
 8016246:	4648      	mov	r0, r9
 8016248:	f003 fd26 	bl	8019c98 <__ssprint_r>
 801624c:	2800      	cmp	r0, #0
 801624e:	f040 80f7 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8016252:	ac29      	add	r4, sp, #164	; 0xa4
 8016254:	e7bf      	b.n	80161d6 <_svfprintf_r+0x106e>
 8016256:	2010      	movs	r0, #16
 8016258:	4402      	add	r2, r0
 801625a:	2b07      	cmp	r3, #7
 801625c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8016260:	6060      	str	r0, [r4, #4]
 8016262:	dd08      	ble.n	8016276 <_svfprintf_r+0x110e>
 8016264:	aa26      	add	r2, sp, #152	; 0x98
 8016266:	4651      	mov	r1, sl
 8016268:	4648      	mov	r0, r9
 801626a:	f003 fd15 	bl	8019c98 <__ssprint_r>
 801626e:	2800      	cmp	r0, #0
 8016270:	f040 80e6 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8016274:	a929      	add	r1, sp, #164	; 0xa4
 8016276:	3f10      	subs	r7, #16
 8016278:	460c      	mov	r4, r1
 801627a:	e7b4      	b.n	80161e6 <_svfprintf_r+0x107e>
 801627c:	460c      	mov	r4, r1
 801627e:	e7cb      	b.n	8016218 <_svfprintf_r+0x10b0>
 8016280:	aa26      	add	r2, sp, #152	; 0x98
 8016282:	4651      	mov	r1, sl
 8016284:	4648      	mov	r0, r9
 8016286:	f003 fd07 	bl	8019c98 <__ssprint_r>
 801628a:	2800      	cmp	r0, #0
 801628c:	f040 80d8 	bne.w	8016440 <_svfprintf_r+0x12d8>
 8016290:	ac29      	add	r4, sp, #164	; 0xa4
 8016292:	e72a      	b.n	80160ea <_svfprintf_r+0xf82>
 8016294:	aa26      	add	r2, sp, #152	; 0x98
 8016296:	4651      	mov	r1, sl
 8016298:	4648      	mov	r0, r9
 801629a:	f003 fcfd 	bl	8019c98 <__ssprint_r>
 801629e:	2800      	cmp	r0, #0
 80162a0:	f040 80ce 	bne.w	8016440 <_svfprintf_r+0x12d8>
 80162a4:	ac29      	add	r4, sp, #164	; 0xa4
 80162a6:	e736      	b.n	8016116 <_svfprintf_r+0xfae>
 80162a8:	3210      	adds	r2, #16
 80162aa:	2b07      	cmp	r3, #7
 80162ac:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80162b0:	6067      	str	r7, [r4, #4]
 80162b2:	dd08      	ble.n	80162c6 <_svfprintf_r+0x115e>
 80162b4:	aa26      	add	r2, sp, #152	; 0x98
 80162b6:	4651      	mov	r1, sl
 80162b8:	4648      	mov	r0, r9
 80162ba:	f003 fced 	bl	8019c98 <__ssprint_r>
 80162be:	2800      	cmp	r0, #0
 80162c0:	f040 80be 	bne.w	8016440 <_svfprintf_r+0x12d8>
 80162c4:	a929      	add	r1, sp, #164	; 0xa4
 80162c6:	3d10      	subs	r5, #16
 80162c8:	460c      	mov	r4, r1
 80162ca:	e730      	b.n	801612e <_svfprintf_r+0xfc6>
 80162cc:	0801b799 	.word	0x0801b799
 80162d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80162d4:	2a01      	cmp	r2, #1
 80162d6:	f107 0701 	add.w	r7, r7, #1
 80162da:	f103 0301 	add.w	r3, r3, #1
 80162de:	f104 0508 	add.w	r5, r4, #8
 80162e2:	dc02      	bgt.n	80162ea <_svfprintf_r+0x1182>
 80162e4:	f018 0f01 	tst.w	r8, #1
 80162e8:	d07e      	beq.n	80163e8 <_svfprintf_r+0x1280>
 80162ea:	2201      	movs	r2, #1
 80162ec:	2b07      	cmp	r3, #7
 80162ee:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 80162f2:	f8c4 b000 	str.w	fp, [r4]
 80162f6:	6062      	str	r2, [r4, #4]
 80162f8:	dd08      	ble.n	801630c <_svfprintf_r+0x11a4>
 80162fa:	aa26      	add	r2, sp, #152	; 0x98
 80162fc:	4651      	mov	r1, sl
 80162fe:	4648      	mov	r0, r9
 8016300:	f003 fcca 	bl	8019c98 <__ssprint_r>
 8016304:	2800      	cmp	r0, #0
 8016306:	f040 809b 	bne.w	8016440 <_svfprintf_r+0x12d8>
 801630a:	ad29      	add	r5, sp, #164	; 0xa4
 801630c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801630e:	602b      	str	r3, [r5, #0]
 8016310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016312:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016314:	606b      	str	r3, [r5, #4]
 8016316:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016318:	4413      	add	r3, r2
 801631a:	9328      	str	r3, [sp, #160]	; 0xa0
 801631c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801631e:	3301      	adds	r3, #1
 8016320:	2b07      	cmp	r3, #7
 8016322:	9327      	str	r3, [sp, #156]	; 0x9c
 8016324:	dc32      	bgt.n	801638c <_svfprintf_r+0x1224>
 8016326:	3508      	adds	r5, #8
 8016328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801632a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801632e:	1e5c      	subs	r4, r3, #1
 8016330:	2200      	movs	r2, #0
 8016332:	2300      	movs	r3, #0
 8016334:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
 8016338:	f7f2 fd9e 	bl	8008e78 <__aeabi_dcmpeq>
 801633c:	2800      	cmp	r0, #0
 801633e:	d12e      	bne.n	801639e <_svfprintf_r+0x1236>
 8016340:	f10b 0301 	add.w	r3, fp, #1
 8016344:	e9c5 3400 	strd	r3, r4, [r5]
 8016348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801634a:	3701      	adds	r7, #1
 801634c:	3e01      	subs	r6, #1
 801634e:	441e      	add	r6, r3
 8016350:	2f07      	cmp	r7, #7
 8016352:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
 8016356:	dd50      	ble.n	80163fa <_svfprintf_r+0x1292>
 8016358:	aa26      	add	r2, sp, #152	; 0x98
 801635a:	4651      	mov	r1, sl
 801635c:	4648      	mov	r0, r9
 801635e:	f003 fc9b 	bl	8019c98 <__ssprint_r>
 8016362:	2800      	cmp	r0, #0
 8016364:	d16c      	bne.n	8016440 <_svfprintf_r+0x12d8>
 8016366:	ad29      	add	r5, sp, #164	; 0xa4
 8016368:	ab22      	add	r3, sp, #136	; 0x88
 801636a:	602b      	str	r3, [r5, #0]
 801636c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801636e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016370:	606b      	str	r3, [r5, #4]
 8016372:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016374:	4413      	add	r3, r2
 8016376:	9328      	str	r3, [sp, #160]	; 0xa0
 8016378:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801637a:	3301      	adds	r3, #1
 801637c:	2b07      	cmp	r3, #7
 801637e:	9327      	str	r3, [sp, #156]	; 0x9c
 8016380:	f73f adb7 	bgt.w	8015ef2 <_svfprintf_r+0xd8a>
 8016384:	f105 0408 	add.w	r4, r5, #8
 8016388:	f7ff bac4 	b.w	8015914 <_svfprintf_r+0x7ac>
 801638c:	aa26      	add	r2, sp, #152	; 0x98
 801638e:	4651      	mov	r1, sl
 8016390:	4648      	mov	r0, r9
 8016392:	f003 fc81 	bl	8019c98 <__ssprint_r>
 8016396:	2800      	cmp	r0, #0
 8016398:	d152      	bne.n	8016440 <_svfprintf_r+0x12d8>
 801639a:	ad29      	add	r5, sp, #164	; 0xa4
 801639c:	e7c4      	b.n	8016328 <_svfprintf_r+0x11c0>
 801639e:	2c00      	cmp	r4, #0
 80163a0:	dde2      	ble.n	8016368 <_svfprintf_r+0x1200>
 80163a2:	4e57      	ldr	r6, [pc, #348]	; (8016500 <_svfprintf_r+0x1398>)
 80163a4:	2710      	movs	r7, #16
 80163a6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80163aa:	2c10      	cmp	r4, #16
 80163ac:	f103 0301 	add.w	r3, r3, #1
 80163b0:	f105 0108 	add.w	r1, r5, #8
 80163b4:	602e      	str	r6, [r5, #0]
 80163b6:	dc07      	bgt.n	80163c8 <_svfprintf_r+0x1260>
 80163b8:	606c      	str	r4, [r5, #4]
 80163ba:	2b07      	cmp	r3, #7
 80163bc:	4414      	add	r4, r2
 80163be:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 80163c2:	dcc9      	bgt.n	8016358 <_svfprintf_r+0x11f0>
 80163c4:	460d      	mov	r5, r1
 80163c6:	e7cf      	b.n	8016368 <_svfprintf_r+0x1200>
 80163c8:	3210      	adds	r2, #16
 80163ca:	2b07      	cmp	r3, #7
 80163cc:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80163d0:	606f      	str	r7, [r5, #4]
 80163d2:	dd06      	ble.n	80163e2 <_svfprintf_r+0x127a>
 80163d4:	aa26      	add	r2, sp, #152	; 0x98
 80163d6:	4651      	mov	r1, sl
 80163d8:	4648      	mov	r0, r9
 80163da:	f003 fc5d 	bl	8019c98 <__ssprint_r>
 80163de:	bb78      	cbnz	r0, 8016440 <_svfprintf_r+0x12d8>
 80163e0:	a929      	add	r1, sp, #164	; 0xa4
 80163e2:	3c10      	subs	r4, #16
 80163e4:	460d      	mov	r5, r1
 80163e6:	e7de      	b.n	80163a6 <_svfprintf_r+0x123e>
 80163e8:	2201      	movs	r2, #1
 80163ea:	2b07      	cmp	r3, #7
 80163ec:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 80163f0:	f8c4 b000 	str.w	fp, [r4]
 80163f4:	6062      	str	r2, [r4, #4]
 80163f6:	ddb7      	ble.n	8016368 <_svfprintf_r+0x1200>
 80163f8:	e7ae      	b.n	8016358 <_svfprintf_r+0x11f0>
 80163fa:	3508      	adds	r5, #8
 80163fc:	e7b4      	b.n	8016368 <_svfprintf_r+0x1200>
 80163fe:	460c      	mov	r4, r1
 8016400:	f7ff ba88 	b.w	8015914 <_svfprintf_r+0x7ac>
 8016404:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8016408:	1a9d      	subs	r5, r3, r2
 801640a:	2d00      	cmp	r5, #0
 801640c:	f77f aa86 	ble.w	801591c <_svfprintf_r+0x7b4>
 8016410:	4e3c      	ldr	r6, [pc, #240]	; (8016504 <_svfprintf_r+0x139c>)
 8016412:	2710      	movs	r7, #16
 8016414:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016418:	2d10      	cmp	r5, #16
 801641a:	f103 0301 	add.w	r3, r3, #1
 801641e:	6026      	str	r6, [r4, #0]
 8016420:	dc18      	bgt.n	8016454 <_svfprintf_r+0x12ec>
 8016422:	6065      	str	r5, [r4, #4]
 8016424:	2b07      	cmp	r3, #7
 8016426:	4415      	add	r5, r2
 8016428:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801642c:	f77f aa76 	ble.w	801591c <_svfprintf_r+0x7b4>
 8016430:	aa26      	add	r2, sp, #152	; 0x98
 8016432:	4651      	mov	r1, sl
 8016434:	4648      	mov	r0, r9
 8016436:	f003 fc2f 	bl	8019c98 <__ssprint_r>
 801643a:	2800      	cmp	r0, #0
 801643c:	f43f aa6e 	beq.w	801591c <_svfprintf_r+0x7b4>
 8016440:	9b08      	ldr	r3, [sp, #32]
 8016442:	2b00      	cmp	r3, #0
 8016444:	f43f a891 	beq.w	801556a <_svfprintf_r+0x402>
 8016448:	4619      	mov	r1, r3
 801644a:	4648      	mov	r0, r9
 801644c:	f7fe f9e0 	bl	8014810 <_free_r>
 8016450:	f7ff b88b 	b.w	801556a <_svfprintf_r+0x402>
 8016454:	3210      	adds	r2, #16
 8016456:	2b07      	cmp	r3, #7
 8016458:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801645c:	6067      	str	r7, [r4, #4]
 801645e:	dc02      	bgt.n	8016466 <_svfprintf_r+0x12fe>
 8016460:	3408      	adds	r4, #8
 8016462:	3d10      	subs	r5, #16
 8016464:	e7d6      	b.n	8016414 <_svfprintf_r+0x12ac>
 8016466:	aa26      	add	r2, sp, #152	; 0x98
 8016468:	4651      	mov	r1, sl
 801646a:	4648      	mov	r0, r9
 801646c:	f003 fc14 	bl	8019c98 <__ssprint_r>
 8016470:	2800      	cmp	r0, #0
 8016472:	d1e5      	bne.n	8016440 <_svfprintf_r+0x12d8>
 8016474:	ac29      	add	r4, sp, #164	; 0xa4
 8016476:	e7f4      	b.n	8016462 <_svfprintf_r+0x12fa>
 8016478:	9908      	ldr	r1, [sp, #32]
 801647a:	4648      	mov	r0, r9
 801647c:	f7fe f9c8 	bl	8014810 <_free_r>
 8016480:	f7ff ba64 	b.w	801594c <_svfprintf_r+0x7e4>
 8016484:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016486:	2b00      	cmp	r3, #0
 8016488:	f43f a86f 	beq.w	801556a <_svfprintf_r+0x402>
 801648c:	aa26      	add	r2, sp, #152	; 0x98
 801648e:	4651      	mov	r1, sl
 8016490:	4648      	mov	r0, r9
 8016492:	f003 fc01 	bl	8019c98 <__ssprint_r>
 8016496:	f7ff b868 	b.w	801556a <_svfprintf_r+0x402>
 801649a:	ea55 0206 	orrs.w	r2, r5, r6
 801649e:	f8cd 8020 	str.w	r8, [sp, #32]
 80164a2:	f43f ab78 	beq.w	8015b96 <_svfprintf_r+0xa2e>
 80164a6:	2b01      	cmp	r3, #1
 80164a8:	f43f ac14 	beq.w	8015cd4 <_svfprintf_r+0xb6c>
 80164ac:	2b02      	cmp	r3, #2
 80164ae:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 80164b2:	f43f ac56 	beq.w	8015d62 <_svfprintf_r+0xbfa>
 80164b6:	f005 0307 	and.w	r3, r5, #7
 80164ba:	08ed      	lsrs	r5, r5, #3
 80164bc:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 80164c0:	08f6      	lsrs	r6, r6, #3
 80164c2:	3330      	adds	r3, #48	; 0x30
 80164c4:	ea55 0106 	orrs.w	r1, r5, r6
 80164c8:	465a      	mov	r2, fp
 80164ca:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80164ce:	d1f2      	bne.n	80164b6 <_svfprintf_r+0x134e>
 80164d0:	9908      	ldr	r1, [sp, #32]
 80164d2:	07c9      	lsls	r1, r1, #31
 80164d4:	d506      	bpl.n	80164e4 <_svfprintf_r+0x137c>
 80164d6:	2b30      	cmp	r3, #48	; 0x30
 80164d8:	d004      	beq.n	80164e4 <_svfprintf_r+0x137c>
 80164da:	2330      	movs	r3, #48	; 0x30
 80164dc:	f80b 3c01 	strb.w	r3, [fp, #-1]
 80164e0:	f1a2 0b02 	sub.w	fp, r2, #2
 80164e4:	ab52      	add	r3, sp, #328	; 0x148
 80164e6:	eba3 030b 	sub.w	r3, r3, fp
 80164ea:	9f07      	ldr	r7, [sp, #28]
 80164ec:	9307      	str	r3, [sp, #28]
 80164ee:	2300      	movs	r3, #0
 80164f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80164f4:	9308      	str	r3, [sp, #32]
 80164f6:	461e      	mov	r6, r3
 80164f8:	930c      	str	r3, [sp, #48]	; 0x30
 80164fa:	461d      	mov	r5, r3
 80164fc:	f7ff b94a 	b.w	8015794 <_svfprintf_r+0x62c>
 8016500:	0801b799 	.word	0x0801b799
 8016504:	0801b789 	.word	0x0801b789

08016508 <_vfprintf_r>:
 8016508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801650c:	b0d3      	sub	sp, #332	; 0x14c
 801650e:	468a      	mov	sl, r1
 8016510:	4691      	mov	r9, r2
 8016512:	461c      	mov	r4, r3
 8016514:	461d      	mov	r5, r3
 8016516:	4683      	mov	fp, r0
 8016518:	f002 f944 	bl	80187a4 <_localeconv_r>
 801651c:	6803      	ldr	r3, [r0, #0]
 801651e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016520:	4618      	mov	r0, r3
 8016522:	f7f2 f87d 	bl	8008620 <strlen>
 8016526:	900f      	str	r0, [sp, #60]	; 0x3c
 8016528:	f1bb 0f00 	cmp.w	fp, #0
 801652c:	d005      	beq.n	801653a <_vfprintf_r+0x32>
 801652e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8016532:	b913      	cbnz	r3, 801653a <_vfprintf_r+0x32>
 8016534:	4658      	mov	r0, fp
 8016536:	f7fd fd19 	bl	8013f6c <__sinit>
 801653a:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801653e:	07d8      	lsls	r0, r3, #31
 8016540:	d407      	bmi.n	8016552 <_vfprintf_r+0x4a>
 8016542:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8016546:	0599      	lsls	r1, r3, #22
 8016548:	d403      	bmi.n	8016552 <_vfprintf_r+0x4a>
 801654a:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801654e:	f7fe f8eb 	bl	8014728 <__retarget_lock_acquire_recursive>
 8016552:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8016556:	049a      	lsls	r2, r3, #18
 8016558:	d409      	bmi.n	801656e <_vfprintf_r+0x66>
 801655a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801655e:	f8aa 300c 	strh.w	r3, [sl, #12]
 8016562:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8016566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801656a:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 801656e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8016572:	071b      	lsls	r3, r3, #28
 8016574:	d502      	bpl.n	801657c <_vfprintf_r+0x74>
 8016576:	f8da 3010 	ldr.w	r3, [sl, #16]
 801657a:	b9c3      	cbnz	r3, 80165ae <_vfprintf_r+0xa6>
 801657c:	4651      	mov	r1, sl
 801657e:	4658      	mov	r0, fp
 8016580:	f7fd ff76 	bl	8014470 <__swsetup_r>
 8016584:	b198      	cbz	r0, 80165ae <_vfprintf_r+0xa6>
 8016586:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801658a:	07df      	lsls	r7, r3, #31
 801658c:	d506      	bpl.n	801659c <_vfprintf_r+0x94>
 801658e:	f04f 33ff 	mov.w	r3, #4294967295
 8016592:	9312      	str	r3, [sp, #72]	; 0x48
 8016594:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016596:	b053      	add	sp, #332	; 0x14c
 8016598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801659c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80165a0:	059e      	lsls	r6, r3, #22
 80165a2:	d4f4      	bmi.n	801658e <_vfprintf_r+0x86>
 80165a4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80165a8:	f7fe f8bf 	bl	801472a <__retarget_lock_release_recursive>
 80165ac:	e7ef      	b.n	801658e <_vfprintf_r+0x86>
 80165ae:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80165b2:	f003 021a 	and.w	r2, r3, #26
 80165b6:	2a0a      	cmp	r2, #10
 80165b8:	d116      	bne.n	80165e8 <_vfprintf_r+0xe0>
 80165ba:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 80165be:	2a00      	cmp	r2, #0
 80165c0:	db12      	blt.n	80165e8 <_vfprintf_r+0xe0>
 80165c2:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 80165c6:	07d5      	lsls	r5, r2, #31
 80165c8:	d405      	bmi.n	80165d6 <_vfprintf_r+0xce>
 80165ca:	0598      	lsls	r0, r3, #22
 80165cc:	d403      	bmi.n	80165d6 <_vfprintf_r+0xce>
 80165ce:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80165d2:	f7fe f8aa 	bl	801472a <__retarget_lock_release_recursive>
 80165d6:	4623      	mov	r3, r4
 80165d8:	464a      	mov	r2, r9
 80165da:	4651      	mov	r1, sl
 80165dc:	4658      	mov	r0, fp
 80165de:	b053      	add	sp, #332	; 0x14c
 80165e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165e4:	f001 b9b0 	b.w	8017948 <__sbprintf>
 80165e8:	2300      	movs	r3, #0
 80165ea:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 80165ee:	9309      	str	r3, [sp, #36]	; 0x24
 80165f0:	2200      	movs	r2, #0
 80165f2:	2300      	movs	r3, #0
 80165f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80165f8:	2300      	movs	r3, #0
 80165fa:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 80165fe:	ac29      	add	r4, sp, #164	; 0xa4
 8016600:	9426      	str	r4, [sp, #152]	; 0x98
 8016602:	930d      	str	r3, [sp, #52]	; 0x34
 8016604:	9315      	str	r3, [sp, #84]	; 0x54
 8016606:	9318      	str	r3, [sp, #96]	; 0x60
 8016608:	9312      	str	r3, [sp, #72]	; 0x48
 801660a:	464b      	mov	r3, r9
 801660c:	461e      	mov	r6, r3
 801660e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016612:	b10a      	cbz	r2, 8016618 <_vfprintf_r+0x110>
 8016614:	2a25      	cmp	r2, #37	; 0x25
 8016616:	d1f9      	bne.n	801660c <_vfprintf_r+0x104>
 8016618:	ebb6 0709 	subs.w	r7, r6, r9
 801661c:	d00d      	beq.n	801663a <_vfprintf_r+0x132>
 801661e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016620:	443b      	add	r3, r7
 8016622:	9328      	str	r3, [sp, #160]	; 0xa0
 8016624:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016626:	3301      	adds	r3, #1
 8016628:	2b07      	cmp	r3, #7
 801662a:	e9c4 9700 	strd	r9, r7, [r4]
 801662e:	9327      	str	r3, [sp, #156]	; 0x9c
 8016630:	dc79      	bgt.n	8016726 <_vfprintf_r+0x21e>
 8016632:	3408      	adds	r4, #8
 8016634:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016636:	443b      	add	r3, r7
 8016638:	9312      	str	r3, [sp, #72]	; 0x48
 801663a:	7833      	ldrb	r3, [r6, #0]
 801663c:	2b00      	cmp	r3, #0
 801663e:	f001 813d 	beq.w	80178bc <_vfprintf_r+0x13b4>
 8016642:	2300      	movs	r3, #0
 8016644:	f04f 32ff 	mov.w	r2, #4294967295
 8016648:	3601      	adds	r6, #1
 801664a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801664e:	9207      	str	r2, [sp, #28]
 8016650:	9313      	str	r3, [sp, #76]	; 0x4c
 8016652:	4698      	mov	r8, r3
 8016654:	270a      	movs	r7, #10
 8016656:	212b      	movs	r1, #43	; 0x2b
 8016658:	4633      	mov	r3, r6
 801665a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801665e:	920b      	str	r2, [sp, #44]	; 0x2c
 8016660:	930e      	str	r3, [sp, #56]	; 0x38
 8016662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016664:	3b20      	subs	r3, #32
 8016666:	2b5a      	cmp	r3, #90	; 0x5a
 8016668:	f200 85b2 	bhi.w	80171d0 <_vfprintf_r+0xcc8>
 801666c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016670:	05b0007e 	.word	0x05b0007e
 8016674:	008605b0 	.word	0x008605b0
 8016678:	05b005b0 	.word	0x05b005b0
 801667c:	006505b0 	.word	0x006505b0
 8016680:	05b005b0 	.word	0x05b005b0
 8016684:	00930089 	.word	0x00930089
 8016688:	009005b0 	.word	0x009005b0
 801668c:	05b00096 	.word	0x05b00096
 8016690:	00b500b2 	.word	0x00b500b2
 8016694:	00b500b5 	.word	0x00b500b5
 8016698:	00b500b5 	.word	0x00b500b5
 801669c:	00b500b5 	.word	0x00b500b5
 80166a0:	00b500b5 	.word	0x00b500b5
 80166a4:	05b005b0 	.word	0x05b005b0
 80166a8:	05b005b0 	.word	0x05b005b0
 80166ac:	05b005b0 	.word	0x05b005b0
 80166b0:	012505b0 	.word	0x012505b0
 80166b4:	00e205b0 	.word	0x00e205b0
 80166b8:	012500f5 	.word	0x012500f5
 80166bc:	01250125 	.word	0x01250125
 80166c0:	05b005b0 	.word	0x05b005b0
 80166c4:	05b005b0 	.word	0x05b005b0
 80166c8:	05b000c5 	.word	0x05b000c5
 80166cc:	048f05b0 	.word	0x048f05b0
 80166d0:	05b005b0 	.word	0x05b005b0
 80166d4:	04d905b0 	.word	0x04d905b0
 80166d8:	04fa05b0 	.word	0x04fa05b0
 80166dc:	05b005b0 	.word	0x05b005b0
 80166e0:	05b0051c 	.word	0x05b0051c
 80166e4:	05b005b0 	.word	0x05b005b0
 80166e8:	05b005b0 	.word	0x05b005b0
 80166ec:	05b005b0 	.word	0x05b005b0
 80166f0:	012505b0 	.word	0x012505b0
 80166f4:	00e205b0 	.word	0x00e205b0
 80166f8:	012500f7 	.word	0x012500f7
 80166fc:	01250125 	.word	0x01250125
 8016700:	00f700c8 	.word	0x00f700c8
 8016704:	05b000dc 	.word	0x05b000dc
 8016708:	05b000d5 	.word	0x05b000d5
 801670c:	0491046a 	.word	0x0491046a
 8016710:	00dc04c8 	.word	0x00dc04c8
 8016714:	04d905b0 	.word	0x04d905b0
 8016718:	04fc007c 	.word	0x04fc007c
 801671c:	05b005b0 	.word	0x05b005b0
 8016720:	05b0053b 	.word	0x05b0053b
 8016724:	007c      	.short	0x007c
 8016726:	aa26      	add	r2, sp, #152	; 0x98
 8016728:	4651      	mov	r1, sl
 801672a:	4658      	mov	r0, fp
 801672c:	f001 f94c 	bl	80179c8 <__sprint_r>
 8016730:	2800      	cmp	r0, #0
 8016732:	f040 812e 	bne.w	8016992 <_vfprintf_r+0x48a>
 8016736:	ac29      	add	r4, sp, #164	; 0xa4
 8016738:	e77c      	b.n	8016634 <_vfprintf_r+0x12c>
 801673a:	4658      	mov	r0, fp
 801673c:	f002 f832 	bl	80187a4 <_localeconv_r>
 8016740:	6843      	ldr	r3, [r0, #4]
 8016742:	9318      	str	r3, [sp, #96]	; 0x60
 8016744:	4618      	mov	r0, r3
 8016746:	f7f1 ff6b 	bl	8008620 <strlen>
 801674a:	9015      	str	r0, [sp, #84]	; 0x54
 801674c:	4658      	mov	r0, fp
 801674e:	f002 f829 	bl	80187a4 <_localeconv_r>
 8016752:	6883      	ldr	r3, [r0, #8]
 8016754:	930d      	str	r3, [sp, #52]	; 0x34
 8016756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016758:	212b      	movs	r1, #43	; 0x2b
 801675a:	b12b      	cbz	r3, 8016768 <_vfprintf_r+0x260>
 801675c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801675e:	b11b      	cbz	r3, 8016768 <_vfprintf_r+0x260>
 8016760:	781b      	ldrb	r3, [r3, #0]
 8016762:	b10b      	cbz	r3, 8016768 <_vfprintf_r+0x260>
 8016764:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8016768:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801676a:	e775      	b.n	8016658 <_vfprintf_r+0x150>
 801676c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8016770:	2b00      	cmp	r3, #0
 8016772:	d1f9      	bne.n	8016768 <_vfprintf_r+0x260>
 8016774:	2320      	movs	r3, #32
 8016776:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801677a:	e7f5      	b.n	8016768 <_vfprintf_r+0x260>
 801677c:	f048 0801 	orr.w	r8, r8, #1
 8016780:	e7f2      	b.n	8016768 <_vfprintf_r+0x260>
 8016782:	f855 3b04 	ldr.w	r3, [r5], #4
 8016786:	9313      	str	r3, [sp, #76]	; 0x4c
 8016788:	2b00      	cmp	r3, #0
 801678a:	daed      	bge.n	8016768 <_vfprintf_r+0x260>
 801678c:	425b      	negs	r3, r3
 801678e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016790:	f048 0804 	orr.w	r8, r8, #4
 8016794:	e7e8      	b.n	8016768 <_vfprintf_r+0x260>
 8016796:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 801679a:	e7e5      	b.n	8016768 <_vfprintf_r+0x260>
 801679c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801679e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80167a4:	2a2a      	cmp	r2, #42	; 0x2a
 80167a6:	d112      	bne.n	80167ce <_vfprintf_r+0x2c6>
 80167a8:	f855 2b04 	ldr.w	r2, [r5], #4
 80167ac:	930e      	str	r3, [sp, #56]	; 0x38
 80167ae:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80167b2:	9207      	str	r2, [sp, #28]
 80167b4:	e7d8      	b.n	8016768 <_vfprintf_r+0x260>
 80167b6:	9807      	ldr	r0, [sp, #28]
 80167b8:	fb07 2200 	mla	r2, r7, r0, r2
 80167bc:	9207      	str	r2, [sp, #28]
 80167be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80167c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80167c6:	3a30      	subs	r2, #48	; 0x30
 80167c8:	2a09      	cmp	r2, #9
 80167ca:	d9f4      	bls.n	80167b6 <_vfprintf_r+0x2ae>
 80167cc:	e748      	b.n	8016660 <_vfprintf_r+0x158>
 80167ce:	2200      	movs	r2, #0
 80167d0:	9207      	str	r2, [sp, #28]
 80167d2:	e7f7      	b.n	80167c4 <_vfprintf_r+0x2bc>
 80167d4:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80167d8:	e7c6      	b.n	8016768 <_vfprintf_r+0x260>
 80167da:	2200      	movs	r2, #0
 80167dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80167de:	9213      	str	r2, [sp, #76]	; 0x4c
 80167e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80167e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80167e4:	3a30      	subs	r2, #48	; 0x30
 80167e6:	fb07 2200 	mla	r2, r7, r0, r2
 80167ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80167ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80167f2:	3a30      	subs	r2, #48	; 0x30
 80167f4:	2a09      	cmp	r2, #9
 80167f6:	d9f3      	bls.n	80167e0 <_vfprintf_r+0x2d8>
 80167f8:	e732      	b.n	8016660 <_vfprintf_r+0x158>
 80167fa:	f048 0808 	orr.w	r8, r8, #8
 80167fe:	e7b3      	b.n	8016768 <_vfprintf_r+0x260>
 8016800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	2b68      	cmp	r3, #104	; 0x68
 8016806:	bf01      	itttt	eq
 8016808:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 801680a:	3301      	addeq	r3, #1
 801680c:	930e      	streq	r3, [sp, #56]	; 0x38
 801680e:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8016812:	bf18      	it	ne
 8016814:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8016818:	e7a6      	b.n	8016768 <_vfprintf_r+0x260>
 801681a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801681c:	781b      	ldrb	r3, [r3, #0]
 801681e:	2b6c      	cmp	r3, #108	; 0x6c
 8016820:	d105      	bne.n	801682e <_vfprintf_r+0x326>
 8016822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016824:	3301      	adds	r3, #1
 8016826:	930e      	str	r3, [sp, #56]	; 0x38
 8016828:	f048 0820 	orr.w	r8, r8, #32
 801682c:	e79c      	b.n	8016768 <_vfprintf_r+0x260>
 801682e:	f048 0810 	orr.w	r8, r8, #16
 8016832:	e799      	b.n	8016768 <_vfprintf_r+0x260>
 8016834:	462a      	mov	r2, r5
 8016836:	f852 3b04 	ldr.w	r3, [r2], #4
 801683a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801683e:	2300      	movs	r3, #0
 8016840:	920a      	str	r2, [sp, #40]	; 0x28
 8016842:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8016846:	2700      	movs	r7, #0
 8016848:	9308      	str	r3, [sp, #32]
 801684a:	2301      	movs	r3, #1
 801684c:	9307      	str	r3, [sp, #28]
 801684e:	463e      	mov	r6, r7
 8016850:	970c      	str	r7, [sp, #48]	; 0x30
 8016852:	463d      	mov	r5, r7
 8016854:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8016858:	e1ba      	b.n	8016bd0 <_vfprintf_r+0x6c8>
 801685a:	f048 0810 	orr.w	r8, r8, #16
 801685e:	f018 0f20 	tst.w	r8, #32
 8016862:	d012      	beq.n	801688a <_vfprintf_r+0x382>
 8016864:	3507      	adds	r5, #7
 8016866:	f025 0307 	bic.w	r3, r5, #7
 801686a:	461a      	mov	r2, r3
 801686c:	685e      	ldr	r6, [r3, #4]
 801686e:	f852 5b08 	ldr.w	r5, [r2], #8
 8016872:	920a      	str	r2, [sp, #40]	; 0x28
 8016874:	2e00      	cmp	r6, #0
 8016876:	da06      	bge.n	8016886 <_vfprintf_r+0x37e>
 8016878:	426d      	negs	r5, r5
 801687a:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801687e:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8016882:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8016886:	2301      	movs	r3, #1
 8016888:	e394      	b.n	8016fb4 <_vfprintf_r+0xaac>
 801688a:	462b      	mov	r3, r5
 801688c:	f018 0f10 	tst.w	r8, #16
 8016890:	f853 6b04 	ldr.w	r6, [r3], #4
 8016894:	930a      	str	r3, [sp, #40]	; 0x28
 8016896:	d002      	beq.n	801689e <_vfprintf_r+0x396>
 8016898:	4635      	mov	r5, r6
 801689a:	17f6      	asrs	r6, r6, #31
 801689c:	e7ea      	b.n	8016874 <_vfprintf_r+0x36c>
 801689e:	f018 0f40 	tst.w	r8, #64	; 0x40
 80168a2:	d003      	beq.n	80168ac <_vfprintf_r+0x3a4>
 80168a4:	b235      	sxth	r5, r6
 80168a6:	f346 36c0 	sbfx	r6, r6, #15, #1
 80168aa:	e7e3      	b.n	8016874 <_vfprintf_r+0x36c>
 80168ac:	f418 7f00 	tst.w	r8, #512	; 0x200
 80168b0:	d0f2      	beq.n	8016898 <_vfprintf_r+0x390>
 80168b2:	b275      	sxtb	r5, r6
 80168b4:	f346 16c0 	sbfx	r6, r6, #7, #1
 80168b8:	e7dc      	b.n	8016874 <_vfprintf_r+0x36c>
 80168ba:	3507      	adds	r5, #7
 80168bc:	f025 0307 	bic.w	r3, r5, #7
 80168c0:	4619      	mov	r1, r3
 80168c2:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80168c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80168ca:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 80168ce:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80168d2:	910a      	str	r1, [sp, #40]	; 0x28
 80168d4:	4b40      	ldr	r3, [pc, #256]	; (80169d8 <_vfprintf_r+0x4d0>)
 80168d6:	f04f 32ff 	mov.w	r2, #4294967295
 80168da:	4630      	mov	r0, r6
 80168dc:	4629      	mov	r1, r5
 80168de:	f7f2 fafd 	bl	8008edc <__aeabi_dcmpun>
 80168e2:	bb18      	cbnz	r0, 801692c <_vfprintf_r+0x424>
 80168e4:	4b3c      	ldr	r3, [pc, #240]	; (80169d8 <_vfprintf_r+0x4d0>)
 80168e6:	f04f 32ff 	mov.w	r2, #4294967295
 80168ea:	4630      	mov	r0, r6
 80168ec:	4629      	mov	r1, r5
 80168ee:	f7f2 fad7 	bl	8008ea0 <__aeabi_dcmple>
 80168f2:	b9d8      	cbnz	r0, 801692c <_vfprintf_r+0x424>
 80168f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80168f8:	2200      	movs	r2, #0
 80168fa:	2300      	movs	r3, #0
 80168fc:	f7f2 fac6 	bl	8008e8c <__aeabi_dcmplt>
 8016900:	b110      	cbz	r0, 8016908 <_vfprintf_r+0x400>
 8016902:	232d      	movs	r3, #45	; 0x2d
 8016904:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8016908:	4a34      	ldr	r2, [pc, #208]	; (80169dc <_vfprintf_r+0x4d4>)
 801690a:	4b35      	ldr	r3, [pc, #212]	; (80169e0 <_vfprintf_r+0x4d8>)
 801690c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801690e:	2947      	cmp	r1, #71	; 0x47
 8016910:	bfd4      	ite	le
 8016912:	4691      	movle	r9, r2
 8016914:	4699      	movgt	r9, r3
 8016916:	2303      	movs	r3, #3
 8016918:	2100      	movs	r1, #0
 801691a:	e9cd 3107 	strd	r3, r1, [sp, #28]
 801691e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8016922:	2700      	movs	r7, #0
 8016924:	463e      	mov	r6, r7
 8016926:	463b      	mov	r3, r7
 8016928:	f001 b806 	b.w	8017938 <_vfprintf_r+0x1430>
 801692c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016930:	4610      	mov	r0, r2
 8016932:	4619      	mov	r1, r3
 8016934:	f7f2 fad2 	bl	8008edc <__aeabi_dcmpun>
 8016938:	b140      	cbz	r0, 801694c <_vfprintf_r+0x444>
 801693a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801693c:	4a29      	ldr	r2, [pc, #164]	; (80169e4 <_vfprintf_r+0x4dc>)
 801693e:	2b00      	cmp	r3, #0
 8016940:	bfbc      	itt	lt
 8016942:	232d      	movlt	r3, #45	; 0x2d
 8016944:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8016948:	4b27      	ldr	r3, [pc, #156]	; (80169e8 <_vfprintf_r+0x4e0>)
 801694a:	e7df      	b.n	801690c <_vfprintf_r+0x404>
 801694c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801694e:	f023 0320 	bic.w	r3, r3, #32
 8016952:	2b41      	cmp	r3, #65	; 0x41
 8016954:	930c      	str	r3, [sp, #48]	; 0x30
 8016956:	d12e      	bne.n	80169b6 <_vfprintf_r+0x4ae>
 8016958:	2330      	movs	r3, #48	; 0x30
 801695a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801695e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016960:	2b61      	cmp	r3, #97	; 0x61
 8016962:	bf0c      	ite	eq
 8016964:	2378      	moveq	r3, #120	; 0x78
 8016966:	2358      	movne	r3, #88	; 0x58
 8016968:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801696c:	9b07      	ldr	r3, [sp, #28]
 801696e:	2b63      	cmp	r3, #99	; 0x63
 8016970:	f048 0802 	orr.w	r8, r8, #2
 8016974:	dd3a      	ble.n	80169ec <_vfprintf_r+0x4e4>
 8016976:	1c59      	adds	r1, r3, #1
 8016978:	4658      	mov	r0, fp
 801697a:	f7fe f809 	bl	8014990 <_malloc_r>
 801697e:	4681      	mov	r9, r0
 8016980:	2800      	cmp	r0, #0
 8016982:	f040 8203 	bne.w	8016d8c <_vfprintf_r+0x884>
 8016986:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801698a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801698e:	f8aa 300c 	strh.w	r3, [sl, #12]
 8016992:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8016996:	07d9      	lsls	r1, r3, #31
 8016998:	d407      	bmi.n	80169aa <_vfprintf_r+0x4a2>
 801699a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801699e:	059a      	lsls	r2, r3, #22
 80169a0:	d403      	bmi.n	80169aa <_vfprintf_r+0x4a2>
 80169a2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80169a6:	f7fd fec0 	bl	801472a <__retarget_lock_release_recursive>
 80169aa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80169ae:	065b      	lsls	r3, r3, #25
 80169b0:	f57f adf0 	bpl.w	8016594 <_vfprintf_r+0x8c>
 80169b4:	e5eb      	b.n	801658e <_vfprintf_r+0x86>
 80169b6:	9b07      	ldr	r3, [sp, #28]
 80169b8:	3301      	adds	r3, #1
 80169ba:	f000 81e9 	beq.w	8016d90 <_vfprintf_r+0x888>
 80169be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169c0:	2b47      	cmp	r3, #71	; 0x47
 80169c2:	f040 81e8 	bne.w	8016d96 <_vfprintf_r+0x88e>
 80169c6:	9b07      	ldr	r3, [sp, #28]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	f040 81e4 	bne.w	8016d96 <_vfprintf_r+0x88e>
 80169ce:	9308      	str	r3, [sp, #32]
 80169d0:	2301      	movs	r3, #1
 80169d2:	9307      	str	r3, [sp, #28]
 80169d4:	e00d      	b.n	80169f2 <_vfprintf_r+0x4ea>
 80169d6:	bf00      	nop
 80169d8:	7fefffff 	.word	0x7fefffff
 80169dc:	0801b755 	.word	0x0801b755
 80169e0:	0801b759 	.word	0x0801b759
 80169e4:	0801b75d 	.word	0x0801b75d
 80169e8:	0801b761 	.word	0x0801b761
 80169ec:	9008      	str	r0, [sp, #32]
 80169ee:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 80169f2:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 80169f6:	9314      	str	r3, [sp, #80]	; 0x50
 80169f8:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 80169fc:	1e1d      	subs	r5, r3, #0
 80169fe:	bfb6      	itet	lt
 8016a00:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8016a04:	2300      	movge	r3, #0
 8016a06:	232d      	movlt	r3, #45	; 0x2d
 8016a08:	931c      	str	r3, [sp, #112]	; 0x70
 8016a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a0c:	2b41      	cmp	r3, #65	; 0x41
 8016a0e:	f040 81da 	bne.w	8016dc6 <_vfprintf_r+0x8be>
 8016a12:	aa20      	add	r2, sp, #128	; 0x80
 8016a14:	4638      	mov	r0, r7
 8016a16:	4629      	mov	r1, r5
 8016a18:	f001 ff1a 	bl	8018850 <frexp>
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016a22:	f7f1 ffc1 	bl	80089a8 <__aeabi_dmul>
 8016a26:	2200      	movs	r2, #0
 8016a28:	2300      	movs	r3, #0
 8016a2a:	4606      	mov	r6, r0
 8016a2c:	460f      	mov	r7, r1
 8016a2e:	f7f2 fa23 	bl	8008e78 <__aeabi_dcmpeq>
 8016a32:	b108      	cbz	r0, 8016a38 <_vfprintf_r+0x530>
 8016a34:	2301      	movs	r3, #1
 8016a36:	9320      	str	r3, [sp, #128]	; 0x80
 8016a38:	4bad      	ldr	r3, [pc, #692]	; (8016cf0 <_vfprintf_r+0x7e8>)
 8016a3a:	4aae      	ldr	r2, [pc, #696]	; (8016cf4 <_vfprintf_r+0x7ec>)
 8016a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a3e:	2961      	cmp	r1, #97	; 0x61
 8016a40:	bf18      	it	ne
 8016a42:	461a      	movne	r2, r3
 8016a44:	9b07      	ldr	r3, [sp, #28]
 8016a46:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a48:	3b01      	subs	r3, #1
 8016a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8016a4c:	464d      	mov	r5, r9
 8016a4e:	4baa      	ldr	r3, [pc, #680]	; (8016cf8 <_vfprintf_r+0x7f0>)
 8016a50:	2200      	movs	r2, #0
 8016a52:	4630      	mov	r0, r6
 8016a54:	4639      	mov	r1, r7
 8016a56:	f7f1 ffa7 	bl	80089a8 <__aeabi_dmul>
 8016a5a:	460f      	mov	r7, r1
 8016a5c:	4606      	mov	r6, r0
 8016a5e:	f7f2 fa53 	bl	8008f08 <__aeabi_d2iz>
 8016a62:	901d      	str	r0, [sp, #116]	; 0x74
 8016a64:	f7f1 ff36 	bl	80088d4 <__aeabi_i2d>
 8016a68:	4602      	mov	r2, r0
 8016a6a:	460b      	mov	r3, r1
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	4639      	mov	r1, r7
 8016a70:	f7f1 fde2 	bl	8008638 <__aeabi_dsub>
 8016a74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016a76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a78:	5c9b      	ldrb	r3, [r3, r2]
 8016a7a:	f805 3b01 	strb.w	r3, [r5], #1
 8016a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a80:	9316      	str	r3, [sp, #88]	; 0x58
 8016a82:	1c5a      	adds	r2, r3, #1
 8016a84:	4606      	mov	r6, r0
 8016a86:	460f      	mov	r7, r1
 8016a88:	d007      	beq.n	8016a9a <_vfprintf_r+0x592>
 8016a8a:	3b01      	subs	r3, #1
 8016a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8016a8e:	2200      	movs	r2, #0
 8016a90:	2300      	movs	r3, #0
 8016a92:	f7f2 f9f1 	bl	8008e78 <__aeabi_dcmpeq>
 8016a96:	2800      	cmp	r0, #0
 8016a98:	d0d9      	beq.n	8016a4e <_vfprintf_r+0x546>
 8016a9a:	4b98      	ldr	r3, [pc, #608]	; (8016cfc <_vfprintf_r+0x7f4>)
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	4630      	mov	r0, r6
 8016aa0:	4639      	mov	r1, r7
 8016aa2:	f7f2 fa11 	bl	8008ec8 <__aeabi_dcmpgt>
 8016aa6:	b960      	cbnz	r0, 8016ac2 <_vfprintf_r+0x5ba>
 8016aa8:	4b94      	ldr	r3, [pc, #592]	; (8016cfc <_vfprintf_r+0x7f4>)
 8016aaa:	2200      	movs	r2, #0
 8016aac:	4630      	mov	r0, r6
 8016aae:	4639      	mov	r1, r7
 8016ab0:	f7f2 f9e2 	bl	8008e78 <__aeabi_dcmpeq>
 8016ab4:	2800      	cmp	r0, #0
 8016ab6:	f000 8181 	beq.w	8016dbc <_vfprintf_r+0x8b4>
 8016aba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016abc:	07da      	lsls	r2, r3, #31
 8016abe:	f140 817d 	bpl.w	8016dbc <_vfprintf_r+0x8b4>
 8016ac2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016ac4:	9524      	str	r5, [sp, #144]	; 0x90
 8016ac6:	7bd9      	ldrb	r1, [r3, #15]
 8016ac8:	2030      	movs	r0, #48	; 0x30
 8016aca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016acc:	1e53      	subs	r3, r2, #1
 8016ace:	9324      	str	r3, [sp, #144]	; 0x90
 8016ad0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8016ad4:	428b      	cmp	r3, r1
 8016ad6:	f000 8160 	beq.w	8016d9a <_vfprintf_r+0x892>
 8016ada:	2b39      	cmp	r3, #57	; 0x39
 8016adc:	bf0b      	itete	eq
 8016ade:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 8016ae0:	3301      	addne	r3, #1
 8016ae2:	7a9b      	ldrbeq	r3, [r3, #10]
 8016ae4:	b2db      	uxtbne	r3, r3
 8016ae6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016aea:	eba5 0309 	sub.w	r3, r5, r9
 8016aee:	9309      	str	r3, [sp, #36]	; 0x24
 8016af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016af2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8016af4:	2b47      	cmp	r3, #71	; 0x47
 8016af6:	f040 81b5 	bne.w	8016e64 <_vfprintf_r+0x95c>
 8016afa:	1ceb      	adds	r3, r5, #3
 8016afc:	db03      	blt.n	8016b06 <_vfprintf_r+0x5fe>
 8016afe:	9b07      	ldr	r3, [sp, #28]
 8016b00:	42ab      	cmp	r3, r5
 8016b02:	f280 81d5 	bge.w	8016eb0 <_vfprintf_r+0x9a8>
 8016b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b08:	3b02      	subs	r3, #2
 8016b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8016b0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b0e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8016b12:	f021 0120 	bic.w	r1, r1, #32
 8016b16:	2941      	cmp	r1, #65	; 0x41
 8016b18:	bf08      	it	eq
 8016b1a:	320f      	addeq	r2, #15
 8016b1c:	f105 33ff 	add.w	r3, r5, #4294967295
 8016b20:	bf06      	itte	eq
 8016b22:	b2d2      	uxtbeq	r2, r2
 8016b24:	2101      	moveq	r1, #1
 8016b26:	2100      	movne	r1, #0
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	9320      	str	r3, [sp, #128]	; 0x80
 8016b2c:	bfb8      	it	lt
 8016b2e:	f1c5 0301 	rsblt	r3, r5, #1
 8016b32:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8016b36:	bfb4      	ite	lt
 8016b38:	222d      	movlt	r2, #45	; 0x2d
 8016b3a:	222b      	movge	r2, #43	; 0x2b
 8016b3c:	2b09      	cmp	r3, #9
 8016b3e:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8016b42:	f340 81a8 	ble.w	8016e96 <_vfprintf_r+0x98e>
 8016b46:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8016b4a:	260a      	movs	r6, #10
 8016b4c:	4602      	mov	r2, r0
 8016b4e:	fb93 f5f6 	sdiv	r5, r3, r6
 8016b52:	fb06 3115 	mls	r1, r6, r5, r3
 8016b56:	3130      	adds	r1, #48	; 0x30
 8016b58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016b5c:	4619      	mov	r1, r3
 8016b5e:	2963      	cmp	r1, #99	; 0x63
 8016b60:	f100 30ff 	add.w	r0, r0, #4294967295
 8016b64:	462b      	mov	r3, r5
 8016b66:	dcf1      	bgt.n	8016b4c <_vfprintf_r+0x644>
 8016b68:	3330      	adds	r3, #48	; 0x30
 8016b6a:	1e91      	subs	r1, r2, #2
 8016b6c:	f800 3c01 	strb.w	r3, [r0, #-1]
 8016b70:	f10d 0589 	add.w	r5, sp, #137	; 0x89
 8016b74:	460b      	mov	r3, r1
 8016b76:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8016b7a:	4283      	cmp	r3, r0
 8016b7c:	f0c0 8186 	bcc.w	8016e8c <_vfprintf_r+0x984>
 8016b80:	f10d 0399 	add.w	r3, sp, #153	; 0x99
 8016b84:	1a9b      	subs	r3, r3, r2
 8016b86:	4281      	cmp	r1, r0
 8016b88:	bf88      	it	hi
 8016b8a:	2300      	movhi	r3, #0
 8016b8c:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8016b90:	441a      	add	r2, r3
 8016b92:	ab22      	add	r3, sp, #136	; 0x88
 8016b94:	1ad3      	subs	r3, r2, r3
 8016b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b98:	9319      	str	r3, [sp, #100]	; 0x64
 8016b9a:	2a01      	cmp	r2, #1
 8016b9c:	4413      	add	r3, r2
 8016b9e:	9307      	str	r3, [sp, #28]
 8016ba0:	dc02      	bgt.n	8016ba8 <_vfprintf_r+0x6a0>
 8016ba2:	f018 0f01 	tst.w	r8, #1
 8016ba6:	d003      	beq.n	8016bb0 <_vfprintf_r+0x6a8>
 8016ba8:	9b07      	ldr	r3, [sp, #28]
 8016baa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016bac:	4413      	add	r3, r2
 8016bae:	9307      	str	r3, [sp, #28]
 8016bb0:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8016bb4:	2600      	movs	r6, #0
 8016bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016bba:	9314      	str	r3, [sp, #80]	; 0x50
 8016bbc:	960c      	str	r6, [sp, #48]	; 0x30
 8016bbe:	4635      	mov	r5, r6
 8016bc0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016bc2:	b113      	cbz	r3, 8016bca <_vfprintf_r+0x6c2>
 8016bc4:	232d      	movs	r3, #45	; 0x2d
 8016bc6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8016bca:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8016bce:	2700      	movs	r7, #0
 8016bd0:	9b07      	ldr	r3, [sp, #28]
 8016bd2:	42bb      	cmp	r3, r7
 8016bd4:	bfb8      	it	lt
 8016bd6:	463b      	movlt	r3, r7
 8016bd8:	9314      	str	r3, [sp, #80]	; 0x50
 8016bda:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8016bde:	b113      	cbz	r3, 8016be6 <_vfprintf_r+0x6de>
 8016be0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016be2:	3301      	adds	r3, #1
 8016be4:	9314      	str	r3, [sp, #80]	; 0x50
 8016be6:	f018 0302 	ands.w	r3, r8, #2
 8016bea:	931b      	str	r3, [sp, #108]	; 0x6c
 8016bec:	bf1e      	ittt	ne
 8016bee:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 8016bf0:	3302      	addne	r3, #2
 8016bf2:	9314      	strne	r3, [sp, #80]	; 0x50
 8016bf4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8016bf8:	931c      	str	r3, [sp, #112]	; 0x70
 8016bfa:	d122      	bne.n	8016c42 <_vfprintf_r+0x73a>
 8016bfc:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8016c00:	1a9b      	subs	r3, r3, r2
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	9316      	str	r3, [sp, #88]	; 0x58
 8016c06:	dd1c      	ble.n	8016c42 <_vfprintf_r+0x73a>
 8016c08:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016c0a:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8016c0e:	2810      	cmp	r0, #16
 8016c10:	483b      	ldr	r0, [pc, #236]	; (8016d00 <_vfprintf_r+0x7f8>)
 8016c12:	6020      	str	r0, [r4, #0]
 8016c14:	f102 0201 	add.w	r2, r2, #1
 8016c18:	f104 0108 	add.w	r1, r4, #8
 8016c1c:	f300 82e7 	bgt.w	80171ee <_vfprintf_r+0xce6>
 8016c20:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016c22:	6060      	str	r0, [r4, #4]
 8016c24:	4403      	add	r3, r0
 8016c26:	2a07      	cmp	r2, #7
 8016c28:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8016c2c:	f340 82f4 	ble.w	8017218 <_vfprintf_r+0xd10>
 8016c30:	aa26      	add	r2, sp, #152	; 0x98
 8016c32:	4651      	mov	r1, sl
 8016c34:	4658      	mov	r0, fp
 8016c36:	f000 fec7 	bl	80179c8 <__sprint_r>
 8016c3a:	2800      	cmp	r0, #0
 8016c3c:	f040 861c 	bne.w	8017878 <_vfprintf_r+0x1370>
 8016c40:	ac29      	add	r4, sp, #164	; 0xa4
 8016c42:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8016c46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016c48:	b16a      	cbz	r2, 8016c66 <_vfprintf_r+0x75e>
 8016c4a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8016c4e:	6022      	str	r2, [r4, #0]
 8016c50:	2201      	movs	r2, #1
 8016c52:	4413      	add	r3, r2
 8016c54:	9328      	str	r3, [sp, #160]	; 0xa0
 8016c56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016c58:	6062      	str	r2, [r4, #4]
 8016c5a:	4413      	add	r3, r2
 8016c5c:	2b07      	cmp	r3, #7
 8016c5e:	9327      	str	r3, [sp, #156]	; 0x9c
 8016c60:	f300 82dc 	bgt.w	801721c <_vfprintf_r+0xd14>
 8016c64:	3408      	adds	r4, #8
 8016c66:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016c68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016c6a:	b162      	cbz	r2, 8016c86 <_vfprintf_r+0x77e>
 8016c6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8016c6e:	6022      	str	r2, [r4, #0]
 8016c70:	2202      	movs	r2, #2
 8016c72:	4413      	add	r3, r2
 8016c74:	9328      	str	r3, [sp, #160]	; 0xa0
 8016c76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016c78:	6062      	str	r2, [r4, #4]
 8016c7a:	3301      	adds	r3, #1
 8016c7c:	2b07      	cmp	r3, #7
 8016c7e:	9327      	str	r3, [sp, #156]	; 0x9c
 8016c80:	f300 82d6 	bgt.w	8017230 <_vfprintf_r+0xd28>
 8016c84:	3408      	adds	r4, #8
 8016c86:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016c88:	2b80      	cmp	r3, #128	; 0x80
 8016c8a:	d122      	bne.n	8016cd2 <_vfprintf_r+0x7ca>
 8016c8c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8016c90:	1a9b      	subs	r3, r3, r2
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	9316      	str	r3, [sp, #88]	; 0x58
 8016c96:	dd1c      	ble.n	8016cd2 <_vfprintf_r+0x7ca>
 8016c98:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016c9a:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8016c9e:	2810      	cmp	r0, #16
 8016ca0:	4818      	ldr	r0, [pc, #96]	; (8016d04 <_vfprintf_r+0x7fc>)
 8016ca2:	6020      	str	r0, [r4, #0]
 8016ca4:	f102 0201 	add.w	r2, r2, #1
 8016ca8:	f104 0108 	add.w	r1, r4, #8
 8016cac:	f300 82ca 	bgt.w	8017244 <_vfprintf_r+0xd3c>
 8016cb0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016cb2:	6060      	str	r0, [r4, #4]
 8016cb4:	4403      	add	r3, r0
 8016cb6:	2a07      	cmp	r2, #7
 8016cb8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8016cbc:	f340 82d7 	ble.w	801726e <_vfprintf_r+0xd66>
 8016cc0:	aa26      	add	r2, sp, #152	; 0x98
 8016cc2:	4651      	mov	r1, sl
 8016cc4:	4658      	mov	r0, fp
 8016cc6:	f000 fe7f 	bl	80179c8 <__sprint_r>
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	f040 85d4 	bne.w	8017878 <_vfprintf_r+0x1370>
 8016cd0:	ac29      	add	r4, sp, #164	; 0xa4
 8016cd2:	9b07      	ldr	r3, [sp, #28]
 8016cd4:	1aff      	subs	r7, r7, r3
 8016cd6:	2f00      	cmp	r7, #0
 8016cd8:	dd28      	ble.n	8016d2c <_vfprintf_r+0x824>
 8016cda:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8016cde:	4809      	ldr	r0, [pc, #36]	; (8016d04 <_vfprintf_r+0x7fc>)
 8016ce0:	6020      	str	r0, [r4, #0]
 8016ce2:	2f10      	cmp	r7, #16
 8016ce4:	f103 0301 	add.w	r3, r3, #1
 8016ce8:	f104 0108 	add.w	r1, r4, #8
 8016cec:	e00c      	b.n	8016d08 <_vfprintf_r+0x800>
 8016cee:	bf00      	nop
 8016cf0:	0801b776 	.word	0x0801b776
 8016cf4:	0801b765 	.word	0x0801b765
 8016cf8:	40300000 	.word	0x40300000
 8016cfc:	3fe00000 	.word	0x3fe00000
 8016d00:	0801b7a9 	.word	0x0801b7a9
 8016d04:	0801b7b9 	.word	0x0801b7b9
 8016d08:	f300 82b3 	bgt.w	8017272 <_vfprintf_r+0xd6a>
 8016d0c:	6067      	str	r7, [r4, #4]
 8016d0e:	2b07      	cmp	r3, #7
 8016d10:	4417      	add	r7, r2
 8016d12:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8016d16:	f340 82bf 	ble.w	8017298 <_vfprintf_r+0xd90>
 8016d1a:	aa26      	add	r2, sp, #152	; 0x98
 8016d1c:	4651      	mov	r1, sl
 8016d1e:	4658      	mov	r0, fp
 8016d20:	f000 fe52 	bl	80179c8 <__sprint_r>
 8016d24:	2800      	cmp	r0, #0
 8016d26:	f040 85a7 	bne.w	8017878 <_vfprintf_r+0x1370>
 8016d2a:	ac29      	add	r4, sp, #164	; 0xa4
 8016d2c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8016d30:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8016d32:	f040 82b7 	bne.w	80172a4 <_vfprintf_r+0xd9c>
 8016d36:	9b07      	ldr	r3, [sp, #28]
 8016d38:	f8c4 9000 	str.w	r9, [r4]
 8016d3c:	441f      	add	r7, r3
 8016d3e:	6063      	str	r3, [r4, #4]
 8016d40:	9728      	str	r7, [sp, #160]	; 0xa0
 8016d42:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016d44:	3301      	adds	r3, #1
 8016d46:	2b07      	cmp	r3, #7
 8016d48:	9327      	str	r3, [sp, #156]	; 0x9c
 8016d4a:	f300 82f0 	bgt.w	801732e <_vfprintf_r+0xe26>
 8016d4e:	3408      	adds	r4, #8
 8016d50:	f018 0f04 	tst.w	r8, #4
 8016d54:	f040 8572 	bne.w	801783c <_vfprintf_r+0x1334>
 8016d58:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
 8016d5c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016d5e:	428a      	cmp	r2, r1
 8016d60:	bfac      	ite	ge
 8016d62:	189b      	addge	r3, r3, r2
 8016d64:	185b      	addlt	r3, r3, r1
 8016d66:	9312      	str	r3, [sp, #72]	; 0x48
 8016d68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8016d6a:	b13b      	cbz	r3, 8016d7c <_vfprintf_r+0x874>
 8016d6c:	aa26      	add	r2, sp, #152	; 0x98
 8016d6e:	4651      	mov	r1, sl
 8016d70:	4658      	mov	r0, fp
 8016d72:	f000 fe29 	bl	80179c8 <__sprint_r>
 8016d76:	2800      	cmp	r0, #0
 8016d78:	f040 857e 	bne.w	8017878 <_vfprintf_r+0x1370>
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	9327      	str	r3, [sp, #156]	; 0x9c
 8016d80:	9b08      	ldr	r3, [sp, #32]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	f040 8594 	bne.w	80178b0 <_vfprintf_r+0x13a8>
 8016d88:	ac29      	add	r4, sp, #164	; 0xa4
 8016d8a:	e0e6      	b.n	8016f5a <_vfprintf_r+0xa52>
 8016d8c:	9008      	str	r0, [sp, #32]
 8016d8e:	e630      	b.n	80169f2 <_vfprintf_r+0x4ea>
 8016d90:	9008      	str	r0, [sp, #32]
 8016d92:	2306      	movs	r3, #6
 8016d94:	e61d      	b.n	80169d2 <_vfprintf_r+0x4ca>
 8016d96:	9008      	str	r0, [sp, #32]
 8016d98:	e62b      	b.n	80169f2 <_vfprintf_r+0x4ea>
 8016d9a:	f802 0c01 	strb.w	r0, [r2, #-1]
 8016d9e:	e694      	b.n	8016aca <_vfprintf_r+0x5c2>
 8016da0:	f803 0b01 	strb.w	r0, [r3], #1
 8016da4:	1aca      	subs	r2, r1, r3
 8016da6:	2a00      	cmp	r2, #0
 8016da8:	dafa      	bge.n	8016da0 <_vfprintf_r+0x898>
 8016daa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016dac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016dae:	3201      	adds	r2, #1
 8016db0:	f103 0301 	add.w	r3, r3, #1
 8016db4:	bfb8      	it	lt
 8016db6:	2300      	movlt	r3, #0
 8016db8:	441d      	add	r5, r3
 8016dba:	e696      	b.n	8016aea <_vfprintf_r+0x5e2>
 8016dbc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016dbe:	462b      	mov	r3, r5
 8016dc0:	18a9      	adds	r1, r5, r2
 8016dc2:	2030      	movs	r0, #48	; 0x30
 8016dc4:	e7ee      	b.n	8016da4 <_vfprintf_r+0x89c>
 8016dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016dc8:	2b46      	cmp	r3, #70	; 0x46
 8016dca:	d005      	beq.n	8016dd8 <_vfprintf_r+0x8d0>
 8016dcc:	2b45      	cmp	r3, #69	; 0x45
 8016dce:	d11d      	bne.n	8016e0c <_vfprintf_r+0x904>
 8016dd0:	9b07      	ldr	r3, [sp, #28]
 8016dd2:	1c5e      	adds	r6, r3, #1
 8016dd4:	2302      	movs	r3, #2
 8016dd6:	e001      	b.n	8016ddc <_vfprintf_r+0x8d4>
 8016dd8:	9e07      	ldr	r6, [sp, #28]
 8016dda:	2303      	movs	r3, #3
 8016ddc:	aa24      	add	r2, sp, #144	; 0x90
 8016dde:	9204      	str	r2, [sp, #16]
 8016de0:	aa21      	add	r2, sp, #132	; 0x84
 8016de2:	9203      	str	r2, [sp, #12]
 8016de4:	aa20      	add	r2, sp, #128	; 0x80
 8016de6:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8016dea:	9300      	str	r3, [sp, #0]
 8016dec:	463a      	mov	r2, r7
 8016dee:	462b      	mov	r3, r5
 8016df0:	4658      	mov	r0, fp
 8016df2:	f001 fe29 	bl	8018a48 <_dtoa_r>
 8016df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016df8:	2b47      	cmp	r3, #71	; 0x47
 8016dfa:	4681      	mov	r9, r0
 8016dfc:	d108      	bne.n	8016e10 <_vfprintf_r+0x908>
 8016dfe:	f018 0f01 	tst.w	r8, #1
 8016e02:	d105      	bne.n	8016e10 <_vfprintf_r+0x908>
 8016e04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016e06:	eba3 0309 	sub.w	r3, r3, r9
 8016e0a:	e670      	b.n	8016aee <_vfprintf_r+0x5e6>
 8016e0c:	9e07      	ldr	r6, [sp, #28]
 8016e0e:	e7e1      	b.n	8016dd4 <_vfprintf_r+0x8cc>
 8016e10:	eb09 0306 	add.w	r3, r9, r6
 8016e14:	9309      	str	r3, [sp, #36]	; 0x24
 8016e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e18:	2b46      	cmp	r3, #70	; 0x46
 8016e1a:	d111      	bne.n	8016e40 <_vfprintf_r+0x938>
 8016e1c:	f899 3000 	ldrb.w	r3, [r9]
 8016e20:	2b30      	cmp	r3, #48	; 0x30
 8016e22:	d109      	bne.n	8016e38 <_vfprintf_r+0x930>
 8016e24:	2200      	movs	r2, #0
 8016e26:	2300      	movs	r3, #0
 8016e28:	4638      	mov	r0, r7
 8016e2a:	4629      	mov	r1, r5
 8016e2c:	f7f2 f824 	bl	8008e78 <__aeabi_dcmpeq>
 8016e30:	b910      	cbnz	r0, 8016e38 <_vfprintf_r+0x930>
 8016e32:	f1c6 0601 	rsb	r6, r6, #1
 8016e36:	9620      	str	r6, [sp, #128]	; 0x80
 8016e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016e3c:	441a      	add	r2, r3
 8016e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8016e40:	2200      	movs	r2, #0
 8016e42:	2300      	movs	r3, #0
 8016e44:	4638      	mov	r0, r7
 8016e46:	4629      	mov	r1, r5
 8016e48:	f7f2 f816 	bl	8008e78 <__aeabi_dcmpeq>
 8016e4c:	b108      	cbz	r0, 8016e52 <_vfprintf_r+0x94a>
 8016e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e50:	9324      	str	r3, [sp, #144]	; 0x90
 8016e52:	2230      	movs	r2, #48	; 0x30
 8016e54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016e56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016e58:	4299      	cmp	r1, r3
 8016e5a:	d9d3      	bls.n	8016e04 <_vfprintf_r+0x8fc>
 8016e5c:	1c59      	adds	r1, r3, #1
 8016e5e:	9124      	str	r1, [sp, #144]	; 0x90
 8016e60:	701a      	strb	r2, [r3, #0]
 8016e62:	e7f7      	b.n	8016e54 <_vfprintf_r+0x94c>
 8016e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e66:	2b46      	cmp	r3, #70	; 0x46
 8016e68:	f47f ae50 	bne.w	8016b0c <_vfprintf_r+0x604>
 8016e6c:	9a07      	ldr	r2, [sp, #28]
 8016e6e:	f008 0301 	and.w	r3, r8, #1
 8016e72:	2d00      	cmp	r5, #0
 8016e74:	ea43 0302 	orr.w	r3, r3, r2
 8016e78:	dd29      	ble.n	8016ece <_vfprintf_r+0x9c6>
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d034      	beq.n	8016ee8 <_vfprintf_r+0x9e0>
 8016e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e80:	18eb      	adds	r3, r5, r3
 8016e82:	441a      	add	r2, r3
 8016e84:	9207      	str	r2, [sp, #28]
 8016e86:	2366      	movs	r3, #102	; 0x66
 8016e88:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e8a:	e033      	b.n	8016ef4 <_vfprintf_r+0x9ec>
 8016e8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016e90:	f805 6f01 	strb.w	r6, [r5, #1]!
 8016e94:	e671      	b.n	8016b7a <_vfprintf_r+0x672>
 8016e96:	b941      	cbnz	r1, 8016eaa <_vfprintf_r+0x9a2>
 8016e98:	2230      	movs	r2, #48	; 0x30
 8016e9a:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8016e9e:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8016ea2:	3330      	adds	r3, #48	; 0x30
 8016ea4:	f802 3b01 	strb.w	r3, [r2], #1
 8016ea8:	e673      	b.n	8016b92 <_vfprintf_r+0x68a>
 8016eaa:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8016eae:	e7f8      	b.n	8016ea2 <_vfprintf_r+0x99a>
 8016eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eb2:	42ab      	cmp	r3, r5
 8016eb4:	dd10      	ble.n	8016ed8 <_vfprintf_r+0x9d0>
 8016eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016eb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016eba:	2d00      	cmp	r5, #0
 8016ebc:	4413      	add	r3, r2
 8016ebe:	9307      	str	r3, [sp, #28]
 8016ec0:	dc10      	bgt.n	8016ee4 <_vfprintf_r+0x9dc>
 8016ec2:	9a07      	ldr	r2, [sp, #28]
 8016ec4:	f1c5 0301 	rsb	r3, r5, #1
 8016ec8:	441a      	add	r2, r3
 8016eca:	9207      	str	r2, [sp, #28]
 8016ecc:	e00a      	b.n	8016ee4 <_vfprintf_r+0x9dc>
 8016ece:	b16b      	cbz	r3, 8016eec <_vfprintf_r+0x9e4>
 8016ed0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ed2:	9a07      	ldr	r2, [sp, #28]
 8016ed4:	3301      	adds	r3, #1
 8016ed6:	e7d4      	b.n	8016e82 <_vfprintf_r+0x97a>
 8016ed8:	f018 0f01 	tst.w	r8, #1
 8016edc:	d01f      	beq.n	8016f1e <_vfprintf_r+0xa16>
 8016ede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ee0:	18eb      	adds	r3, r5, r3
 8016ee2:	9307      	str	r3, [sp, #28]
 8016ee4:	2367      	movs	r3, #103	; 0x67
 8016ee6:	e7cf      	b.n	8016e88 <_vfprintf_r+0x980>
 8016ee8:	9507      	str	r5, [sp, #28]
 8016eea:	e7cc      	b.n	8016e86 <_vfprintf_r+0x97e>
 8016eec:	2366      	movs	r3, #102	; 0x66
 8016eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	9307      	str	r3, [sp, #28]
 8016ef4:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8016ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8016efa:	d021      	beq.n	8016f40 <_vfprintf_r+0xa38>
 8016efc:	2600      	movs	r6, #0
 8016efe:	2d00      	cmp	r5, #0
 8016f00:	960c      	str	r6, [sp, #48]	; 0x30
 8016f02:	f77f ae5d 	ble.w	8016bc0 <_vfprintf_r+0x6b8>
 8016f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	2bff      	cmp	r3, #255	; 0xff
 8016f0c:	d109      	bne.n	8016f22 <_vfprintf_r+0xa1a>
 8016f0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f10:	9a07      	ldr	r2, [sp, #28]
 8016f12:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016f14:	4433      	add	r3, r6
 8016f16:	fb01 2303 	mla	r3, r1, r3, r2
 8016f1a:	9307      	str	r3, [sp, #28]
 8016f1c:	e650      	b.n	8016bc0 <_vfprintf_r+0x6b8>
 8016f1e:	9507      	str	r5, [sp, #28]
 8016f20:	e7e0      	b.n	8016ee4 <_vfprintf_r+0x9dc>
 8016f22:	42ab      	cmp	r3, r5
 8016f24:	daf3      	bge.n	8016f0e <_vfprintf_r+0xa06>
 8016f26:	1aed      	subs	r5, r5, r3
 8016f28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f2a:	785b      	ldrb	r3, [r3, #1]
 8016f2c:	b133      	cbz	r3, 8016f3c <_vfprintf_r+0xa34>
 8016f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f30:	3301      	adds	r3, #1
 8016f32:	930c      	str	r3, [sp, #48]	; 0x30
 8016f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f36:	3301      	adds	r3, #1
 8016f38:	930d      	str	r3, [sp, #52]	; 0x34
 8016f3a:	e7e4      	b.n	8016f06 <_vfprintf_r+0x9fe>
 8016f3c:	3601      	adds	r6, #1
 8016f3e:	e7e2      	b.n	8016f06 <_vfprintf_r+0x9fe>
 8016f40:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016f42:	e63d      	b.n	8016bc0 <_vfprintf_r+0x6b8>
 8016f44:	1d2b      	adds	r3, r5, #4
 8016f46:	f018 0f20 	tst.w	r8, #32
 8016f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8016f4c:	d00a      	beq.n	8016f64 <_vfprintf_r+0xa5c>
 8016f4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f50:	682b      	ldr	r3, [r5, #0]
 8016f52:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016f54:	17d2      	asrs	r2, r2, #31
 8016f56:	e9c3 1200 	strd	r1, r2, [r3]
 8016f5a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016f5c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8016f60:	f7ff bb53 	b.w	801660a <_vfprintf_r+0x102>
 8016f64:	f018 0f10 	tst.w	r8, #16
 8016f68:	d003      	beq.n	8016f72 <_vfprintf_r+0xa6a>
 8016f6a:	682b      	ldr	r3, [r5, #0]
 8016f6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f6e:	601a      	str	r2, [r3, #0]
 8016f70:	e7f3      	b.n	8016f5a <_vfprintf_r+0xa52>
 8016f72:	f018 0f40 	tst.w	r8, #64	; 0x40
 8016f76:	d003      	beq.n	8016f80 <_vfprintf_r+0xa78>
 8016f78:	682b      	ldr	r3, [r5, #0]
 8016f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f7c:	801a      	strh	r2, [r3, #0]
 8016f7e:	e7ec      	b.n	8016f5a <_vfprintf_r+0xa52>
 8016f80:	f418 7f00 	tst.w	r8, #512	; 0x200
 8016f84:	d0f1      	beq.n	8016f6a <_vfprintf_r+0xa62>
 8016f86:	682b      	ldr	r3, [r5, #0]
 8016f88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f8a:	701a      	strb	r2, [r3, #0]
 8016f8c:	e7e5      	b.n	8016f5a <_vfprintf_r+0xa52>
 8016f8e:	f048 0810 	orr.w	r8, r8, #16
 8016f92:	f018 0320 	ands.w	r3, r8, #32
 8016f96:	d020      	beq.n	8016fda <_vfprintf_r+0xad2>
 8016f98:	3507      	adds	r5, #7
 8016f9a:	f025 0307 	bic.w	r3, r5, #7
 8016f9e:	461a      	mov	r2, r3
 8016fa0:	685e      	ldr	r6, [r3, #4]
 8016fa2:	f852 5b08 	ldr.w	r5, [r2], #8
 8016fa6:	920a      	str	r2, [sp, #40]	; 0x28
 8016fa8:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8016fac:	2300      	movs	r3, #0
 8016fae:	2200      	movs	r2, #0
 8016fb0:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8016fb4:	9a07      	ldr	r2, [sp, #28]
 8016fb6:	3201      	adds	r2, #1
 8016fb8:	f000 848f 	beq.w	80178da <_vfprintf_r+0x13d2>
 8016fbc:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8016fc0:	9208      	str	r2, [sp, #32]
 8016fc2:	ea55 0206 	orrs.w	r2, r5, r6
 8016fc6:	f040 848e 	bne.w	80178e6 <_vfprintf_r+0x13de>
 8016fca:	9a07      	ldr	r2, [sp, #28]
 8016fcc:	2a00      	cmp	r2, #0
 8016fce:	f000 80f4 	beq.w	80171ba <_vfprintf_r+0xcb2>
 8016fd2:	2b01      	cmp	r3, #1
 8016fd4:	f040 848a 	bne.w	80178ec <_vfprintf_r+0x13e4>
 8016fd8:	e09e      	b.n	8017118 <_vfprintf_r+0xc10>
 8016fda:	462a      	mov	r2, r5
 8016fdc:	f018 0610 	ands.w	r6, r8, #16
 8016fe0:	f852 5b04 	ldr.w	r5, [r2], #4
 8016fe4:	920a      	str	r2, [sp, #40]	; 0x28
 8016fe6:	d001      	beq.n	8016fec <_vfprintf_r+0xae4>
 8016fe8:	461e      	mov	r6, r3
 8016fea:	e7dd      	b.n	8016fa8 <_vfprintf_r+0xaa0>
 8016fec:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8016ff0:	d001      	beq.n	8016ff6 <_vfprintf_r+0xaee>
 8016ff2:	b2ad      	uxth	r5, r5
 8016ff4:	e7d8      	b.n	8016fa8 <_vfprintf_r+0xaa0>
 8016ff6:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8016ffa:	d0d5      	beq.n	8016fa8 <_vfprintf_r+0xaa0>
 8016ffc:	b2ed      	uxtb	r5, r5
 8016ffe:	e7f3      	b.n	8016fe8 <_vfprintf_r+0xae0>
 8017000:	462b      	mov	r3, r5
 8017002:	2278      	movs	r2, #120	; 0x78
 8017004:	f853 5b04 	ldr.w	r5, [r3], #4
 8017008:	930a      	str	r3, [sp, #40]	; 0x28
 801700a:	f647 0330 	movw	r3, #30768	; 0x7830
 801700e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8017012:	4ba2      	ldr	r3, [pc, #648]	; (801729c <_vfprintf_r+0xd94>)
 8017014:	931a      	str	r3, [sp, #104]	; 0x68
 8017016:	2600      	movs	r6, #0
 8017018:	f048 0802 	orr.w	r8, r8, #2
 801701c:	2302      	movs	r3, #2
 801701e:	920b      	str	r2, [sp, #44]	; 0x2c
 8017020:	e7c5      	b.n	8016fae <_vfprintf_r+0xaa6>
 8017022:	462b      	mov	r3, r5
 8017024:	2500      	movs	r5, #0
 8017026:	f853 9b04 	ldr.w	r9, [r3], #4
 801702a:	930a      	str	r3, [sp, #40]	; 0x28
 801702c:	9b07      	ldr	r3, [sp, #28]
 801702e:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8017032:	1c5e      	adds	r6, r3, #1
 8017034:	d010      	beq.n	8017058 <_vfprintf_r+0xb50>
 8017036:	461a      	mov	r2, r3
 8017038:	4629      	mov	r1, r5
 801703a:	4648      	mov	r0, r9
 801703c:	f7f1 faa0 	bl	8008580 <memchr>
 8017040:	9008      	str	r0, [sp, #32]
 8017042:	2800      	cmp	r0, #0
 8017044:	f000 80d0 	beq.w	80171e8 <_vfprintf_r+0xce0>
 8017048:	eba0 0309 	sub.w	r3, r0, r9
 801704c:	e9cd 3507 	strd	r3, r5, [sp, #28]
 8017050:	462f      	mov	r7, r5
 8017052:	462e      	mov	r6, r5
 8017054:	950c      	str	r5, [sp, #48]	; 0x30
 8017056:	e5bb      	b.n	8016bd0 <_vfprintf_r+0x6c8>
 8017058:	4648      	mov	r0, r9
 801705a:	f7f1 fae1 	bl	8008620 <strlen>
 801705e:	e9cd 0507 	strd	r0, r5, [sp, #28]
 8017062:	e45e      	b.n	8016922 <_vfprintf_r+0x41a>
 8017064:	f048 0810 	orr.w	r8, r8, #16
 8017068:	f018 0320 	ands.w	r3, r8, #32
 801706c:	d009      	beq.n	8017082 <_vfprintf_r+0xb7a>
 801706e:	3507      	adds	r5, #7
 8017070:	f025 0307 	bic.w	r3, r5, #7
 8017074:	461a      	mov	r2, r3
 8017076:	685e      	ldr	r6, [r3, #4]
 8017078:	f852 5b08 	ldr.w	r5, [r2], #8
 801707c:	920a      	str	r2, [sp, #40]	; 0x28
 801707e:	2301      	movs	r3, #1
 8017080:	e795      	b.n	8016fae <_vfprintf_r+0xaa6>
 8017082:	462a      	mov	r2, r5
 8017084:	f018 0610 	ands.w	r6, r8, #16
 8017088:	f852 5b04 	ldr.w	r5, [r2], #4
 801708c:	920a      	str	r2, [sp, #40]	; 0x28
 801708e:	d001      	beq.n	8017094 <_vfprintf_r+0xb8c>
 8017090:	461e      	mov	r6, r3
 8017092:	e7f4      	b.n	801707e <_vfprintf_r+0xb76>
 8017094:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8017098:	d001      	beq.n	801709e <_vfprintf_r+0xb96>
 801709a:	b2ad      	uxth	r5, r5
 801709c:	e7ef      	b.n	801707e <_vfprintf_r+0xb76>
 801709e:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 80170a2:	d0ec      	beq.n	801707e <_vfprintf_r+0xb76>
 80170a4:	b2ed      	uxtb	r5, r5
 80170a6:	e7f3      	b.n	8017090 <_vfprintf_r+0xb88>
 80170a8:	4b7d      	ldr	r3, [pc, #500]	; (80172a0 <_vfprintf_r+0xd98>)
 80170aa:	931a      	str	r3, [sp, #104]	; 0x68
 80170ac:	f018 0320 	ands.w	r3, r8, #32
 80170b0:	d01b      	beq.n	80170ea <_vfprintf_r+0xbe2>
 80170b2:	3507      	adds	r5, #7
 80170b4:	f025 0307 	bic.w	r3, r5, #7
 80170b8:	461a      	mov	r2, r3
 80170ba:	685e      	ldr	r6, [r3, #4]
 80170bc:	f852 5b08 	ldr.w	r5, [r2], #8
 80170c0:	920a      	str	r2, [sp, #40]	; 0x28
 80170c2:	f018 0f01 	tst.w	r8, #1
 80170c6:	d00a      	beq.n	80170de <_vfprintf_r+0xbd6>
 80170c8:	ea55 0306 	orrs.w	r3, r5, r6
 80170cc:	d007      	beq.n	80170de <_vfprintf_r+0xbd6>
 80170ce:	2330      	movs	r3, #48	; 0x30
 80170d0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80170d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170d6:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80170da:	f048 0802 	orr.w	r8, r8, #2
 80170de:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80170e2:	2302      	movs	r3, #2
 80170e4:	e763      	b.n	8016fae <_vfprintf_r+0xaa6>
 80170e6:	4b6d      	ldr	r3, [pc, #436]	; (801729c <_vfprintf_r+0xd94>)
 80170e8:	e7df      	b.n	80170aa <_vfprintf_r+0xba2>
 80170ea:	462a      	mov	r2, r5
 80170ec:	f018 0610 	ands.w	r6, r8, #16
 80170f0:	f852 5b04 	ldr.w	r5, [r2], #4
 80170f4:	920a      	str	r2, [sp, #40]	; 0x28
 80170f6:	d001      	beq.n	80170fc <_vfprintf_r+0xbf4>
 80170f8:	461e      	mov	r6, r3
 80170fa:	e7e2      	b.n	80170c2 <_vfprintf_r+0xbba>
 80170fc:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8017100:	d001      	beq.n	8017106 <_vfprintf_r+0xbfe>
 8017102:	b2ad      	uxth	r5, r5
 8017104:	e7dd      	b.n	80170c2 <_vfprintf_r+0xbba>
 8017106:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801710a:	d0da      	beq.n	80170c2 <_vfprintf_r+0xbba>
 801710c:	b2ed      	uxtb	r5, r5
 801710e:	e7f3      	b.n	80170f8 <_vfprintf_r+0xbf0>
 8017110:	2d0a      	cmp	r5, #10
 8017112:	f176 0300 	sbcs.w	r3, r6, #0
 8017116:	d205      	bcs.n	8017124 <_vfprintf_r+0xc1c>
 8017118:	3530      	adds	r5, #48	; 0x30
 801711a:	f88d 5147 	strb.w	r5, [sp, #327]	; 0x147
 801711e:	f20d 1947 	addw	r9, sp, #327	; 0x147
 8017122:	e3ff      	b.n	8017924 <_vfprintf_r+0x141c>
 8017124:	2300      	movs	r3, #0
 8017126:	9309      	str	r3, [sp, #36]	; 0x24
 8017128:	9b08      	ldr	r3, [sp, #32]
 801712a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801712e:	af52      	add	r7, sp, #328	; 0x148
 8017130:	930c      	str	r3, [sp, #48]	; 0x30
 8017132:	220a      	movs	r2, #10
 8017134:	2300      	movs	r3, #0
 8017136:	4628      	mov	r0, r5
 8017138:	4631      	mov	r1, r6
 801713a:	f7f2 f85b 	bl	80091f4 <__aeabi_uldivmod>
 801713e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017140:	9014      	str	r0, [sp, #80]	; 0x50
 8017142:	3301      	adds	r3, #1
 8017144:	9309      	str	r3, [sp, #36]	; 0x24
 8017146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017148:	3230      	adds	r2, #48	; 0x30
 801714a:	4688      	mov	r8, r1
 801714c:	f107 39ff 	add.w	r9, r7, #4294967295
 8017150:	f807 2c01 	strb.w	r2, [r7, #-1]
 8017154:	b1d3      	cbz	r3, 801718c <_vfprintf_r+0xc84>
 8017156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801715a:	781b      	ldrb	r3, [r3, #0]
 801715c:	429a      	cmp	r2, r3
 801715e:	d115      	bne.n	801718c <_vfprintf_r+0xc84>
 8017160:	2aff      	cmp	r2, #255	; 0xff
 8017162:	d013      	beq.n	801718c <_vfprintf_r+0xc84>
 8017164:	2d0a      	cmp	r5, #10
 8017166:	f176 0300 	sbcs.w	r3, r6, #0
 801716a:	d30f      	bcc.n	801718c <_vfprintf_r+0xc84>
 801716c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801716e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017170:	eba9 0903 	sub.w	r9, r9, r3
 8017174:	461a      	mov	r2, r3
 8017176:	4648      	mov	r0, r9
 8017178:	f001 fafb 	bl	8018772 <strncpy>
 801717c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801717e:	785b      	ldrb	r3, [r3, #1]
 8017180:	b11b      	cbz	r3, 801718a <_vfprintf_r+0xc82>
 8017182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017184:	3301      	adds	r3, #1
 8017186:	930d      	str	r3, [sp, #52]	; 0x34
 8017188:	2300      	movs	r3, #0
 801718a:	9309      	str	r3, [sp, #36]	; 0x24
 801718c:	2d0a      	cmp	r5, #10
 801718e:	f176 0600 	sbcs.w	r6, r6, #0
 8017192:	f0c0 83c7 	bcc.w	8017924 <_vfprintf_r+0x141c>
 8017196:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017198:	4646      	mov	r6, r8
 801719a:	464f      	mov	r7, r9
 801719c:	e7c9      	b.n	8017132 <_vfprintf_r+0xc2a>
 801719e:	f005 030f 	and.w	r3, r5, #15
 80171a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80171a4:	092d      	lsrs	r5, r5, #4
 80171a6:	5cd3      	ldrb	r3, [r2, r3]
 80171a8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80171ac:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 80171b0:	0936      	lsrs	r6, r6, #4
 80171b2:	ea55 0306 	orrs.w	r3, r5, r6
 80171b6:	d1f2      	bne.n	801719e <_vfprintf_r+0xc96>
 80171b8:	e3b4      	b.n	8017924 <_vfprintf_r+0x141c>
 80171ba:	b933      	cbnz	r3, 80171ca <_vfprintf_r+0xcc2>
 80171bc:	f018 0f01 	tst.w	r8, #1
 80171c0:	d003      	beq.n	80171ca <_vfprintf_r+0xcc2>
 80171c2:	2330      	movs	r3, #48	; 0x30
 80171c4:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 80171c8:	e7a9      	b.n	801711e <_vfprintf_r+0xc16>
 80171ca:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80171ce:	e3a9      	b.n	8017924 <_vfprintf_r+0x141c>
 80171d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	f000 8372 	beq.w	80178bc <_vfprintf_r+0x13b4>
 80171d8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80171dc:	2300      	movs	r3, #0
 80171de:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80171e2:	950a      	str	r5, [sp, #40]	; 0x28
 80171e4:	f7ff bb2f 	b.w	8016846 <_vfprintf_r+0x33e>
 80171e8:	9f08      	ldr	r7, [sp, #32]
 80171ea:	f7ff bb9b 	b.w	8016924 <_vfprintf_r+0x41c>
 80171ee:	2010      	movs	r0, #16
 80171f0:	4403      	add	r3, r0
 80171f2:	2a07      	cmp	r2, #7
 80171f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80171f8:	6060      	str	r0, [r4, #4]
 80171fa:	dd08      	ble.n	801720e <_vfprintf_r+0xd06>
 80171fc:	aa26      	add	r2, sp, #152	; 0x98
 80171fe:	4651      	mov	r1, sl
 8017200:	4658      	mov	r0, fp
 8017202:	f000 fbe1 	bl	80179c8 <__sprint_r>
 8017206:	2800      	cmp	r0, #0
 8017208:	f040 8336 	bne.w	8017878 <_vfprintf_r+0x1370>
 801720c:	a929      	add	r1, sp, #164	; 0xa4
 801720e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017210:	3b10      	subs	r3, #16
 8017212:	9316      	str	r3, [sp, #88]	; 0x58
 8017214:	460c      	mov	r4, r1
 8017216:	e4f7      	b.n	8016c08 <_vfprintf_r+0x700>
 8017218:	460c      	mov	r4, r1
 801721a:	e512      	b.n	8016c42 <_vfprintf_r+0x73a>
 801721c:	aa26      	add	r2, sp, #152	; 0x98
 801721e:	4651      	mov	r1, sl
 8017220:	4658      	mov	r0, fp
 8017222:	f000 fbd1 	bl	80179c8 <__sprint_r>
 8017226:	2800      	cmp	r0, #0
 8017228:	f040 8326 	bne.w	8017878 <_vfprintf_r+0x1370>
 801722c:	ac29      	add	r4, sp, #164	; 0xa4
 801722e:	e51a      	b.n	8016c66 <_vfprintf_r+0x75e>
 8017230:	aa26      	add	r2, sp, #152	; 0x98
 8017232:	4651      	mov	r1, sl
 8017234:	4658      	mov	r0, fp
 8017236:	f000 fbc7 	bl	80179c8 <__sprint_r>
 801723a:	2800      	cmp	r0, #0
 801723c:	f040 831c 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017240:	ac29      	add	r4, sp, #164	; 0xa4
 8017242:	e520      	b.n	8016c86 <_vfprintf_r+0x77e>
 8017244:	2010      	movs	r0, #16
 8017246:	4403      	add	r3, r0
 8017248:	2a07      	cmp	r2, #7
 801724a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801724e:	6060      	str	r0, [r4, #4]
 8017250:	dd08      	ble.n	8017264 <_vfprintf_r+0xd5c>
 8017252:	aa26      	add	r2, sp, #152	; 0x98
 8017254:	4651      	mov	r1, sl
 8017256:	4658      	mov	r0, fp
 8017258:	f000 fbb6 	bl	80179c8 <__sprint_r>
 801725c:	2800      	cmp	r0, #0
 801725e:	f040 830b 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017262:	a929      	add	r1, sp, #164	; 0xa4
 8017264:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017266:	3b10      	subs	r3, #16
 8017268:	9316      	str	r3, [sp, #88]	; 0x58
 801726a:	460c      	mov	r4, r1
 801726c:	e514      	b.n	8016c98 <_vfprintf_r+0x790>
 801726e:	460c      	mov	r4, r1
 8017270:	e52f      	b.n	8016cd2 <_vfprintf_r+0x7ca>
 8017272:	2010      	movs	r0, #16
 8017274:	4402      	add	r2, r0
 8017276:	2b07      	cmp	r3, #7
 8017278:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801727c:	6060      	str	r0, [r4, #4]
 801727e:	dd08      	ble.n	8017292 <_vfprintf_r+0xd8a>
 8017280:	aa26      	add	r2, sp, #152	; 0x98
 8017282:	4651      	mov	r1, sl
 8017284:	4658      	mov	r0, fp
 8017286:	f000 fb9f 	bl	80179c8 <__sprint_r>
 801728a:	2800      	cmp	r0, #0
 801728c:	f040 82f4 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017290:	a929      	add	r1, sp, #164	; 0xa4
 8017292:	3f10      	subs	r7, #16
 8017294:	460c      	mov	r4, r1
 8017296:	e520      	b.n	8016cda <_vfprintf_r+0x7d2>
 8017298:	460c      	mov	r4, r1
 801729a:	e547      	b.n	8016d2c <_vfprintf_r+0x824>
 801729c:	0801b765 	.word	0x0801b765
 80172a0:	0801b776 	.word	0x0801b776
 80172a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172a6:	2b65      	cmp	r3, #101	; 0x65
 80172a8:	f340 822e 	ble.w	8017708 <_vfprintf_r+0x1200>
 80172ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80172b0:	2200      	movs	r2, #0
 80172b2:	2300      	movs	r3, #0
 80172b4:	f7f1 fde0 	bl	8008e78 <__aeabi_dcmpeq>
 80172b8:	2800      	cmp	r0, #0
 80172ba:	d068      	beq.n	801738e <_vfprintf_r+0xe86>
 80172bc:	4b6d      	ldr	r3, [pc, #436]	; (8017474 <_vfprintf_r+0xf6c>)
 80172be:	6023      	str	r3, [r4, #0]
 80172c0:	2301      	movs	r3, #1
 80172c2:	441f      	add	r7, r3
 80172c4:	6063      	str	r3, [r4, #4]
 80172c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80172c8:	9728      	str	r7, [sp, #160]	; 0xa0
 80172ca:	3301      	adds	r3, #1
 80172cc:	2b07      	cmp	r3, #7
 80172ce:	9327      	str	r3, [sp, #156]	; 0x9c
 80172d0:	dc37      	bgt.n	8017342 <_vfprintf_r+0xe3a>
 80172d2:	3408      	adds	r4, #8
 80172d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80172d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172d8:	4293      	cmp	r3, r2
 80172da:	db03      	blt.n	80172e4 <_vfprintf_r+0xddc>
 80172dc:	f018 0f01 	tst.w	r8, #1
 80172e0:	f43f ad36 	beq.w	8016d50 <_vfprintf_r+0x848>
 80172e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80172e6:	6023      	str	r3, [r4, #0]
 80172e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80172ec:	6063      	str	r3, [r4, #4]
 80172ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80172f0:	4413      	add	r3, r2
 80172f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80172f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80172f6:	3301      	adds	r3, #1
 80172f8:	2b07      	cmp	r3, #7
 80172fa:	9327      	str	r3, [sp, #156]	; 0x9c
 80172fc:	dc2b      	bgt.n	8017356 <_vfprintf_r+0xe4e>
 80172fe:	3408      	adds	r4, #8
 8017300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017302:	1e5d      	subs	r5, r3, #1
 8017304:	2d00      	cmp	r5, #0
 8017306:	f77f ad23 	ble.w	8016d50 <_vfprintf_r+0x848>
 801730a:	4e5b      	ldr	r6, [pc, #364]	; (8017478 <_vfprintf_r+0xf70>)
 801730c:	2710      	movs	r7, #16
 801730e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8017312:	2d10      	cmp	r5, #16
 8017314:	f103 0301 	add.w	r3, r3, #1
 8017318:	f104 0108 	add.w	r1, r4, #8
 801731c:	6026      	str	r6, [r4, #0]
 801731e:	dc24      	bgt.n	801736a <_vfprintf_r+0xe62>
 8017320:	6065      	str	r5, [r4, #4]
 8017322:	2b07      	cmp	r3, #7
 8017324:	4415      	add	r5, r2
 8017326:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801732a:	f340 8284 	ble.w	8017836 <_vfprintf_r+0x132e>
 801732e:	aa26      	add	r2, sp, #152	; 0x98
 8017330:	4651      	mov	r1, sl
 8017332:	4658      	mov	r0, fp
 8017334:	f000 fb48 	bl	80179c8 <__sprint_r>
 8017338:	2800      	cmp	r0, #0
 801733a:	f040 829d 	bne.w	8017878 <_vfprintf_r+0x1370>
 801733e:	ac29      	add	r4, sp, #164	; 0xa4
 8017340:	e506      	b.n	8016d50 <_vfprintf_r+0x848>
 8017342:	aa26      	add	r2, sp, #152	; 0x98
 8017344:	4651      	mov	r1, sl
 8017346:	4658      	mov	r0, fp
 8017348:	f000 fb3e 	bl	80179c8 <__sprint_r>
 801734c:	2800      	cmp	r0, #0
 801734e:	f040 8293 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017352:	ac29      	add	r4, sp, #164	; 0xa4
 8017354:	e7be      	b.n	80172d4 <_vfprintf_r+0xdcc>
 8017356:	aa26      	add	r2, sp, #152	; 0x98
 8017358:	4651      	mov	r1, sl
 801735a:	4658      	mov	r0, fp
 801735c:	f000 fb34 	bl	80179c8 <__sprint_r>
 8017360:	2800      	cmp	r0, #0
 8017362:	f040 8289 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017366:	ac29      	add	r4, sp, #164	; 0xa4
 8017368:	e7ca      	b.n	8017300 <_vfprintf_r+0xdf8>
 801736a:	3210      	adds	r2, #16
 801736c:	2b07      	cmp	r3, #7
 801736e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8017372:	6067      	str	r7, [r4, #4]
 8017374:	dd08      	ble.n	8017388 <_vfprintf_r+0xe80>
 8017376:	aa26      	add	r2, sp, #152	; 0x98
 8017378:	4651      	mov	r1, sl
 801737a:	4658      	mov	r0, fp
 801737c:	f000 fb24 	bl	80179c8 <__sprint_r>
 8017380:	2800      	cmp	r0, #0
 8017382:	f040 8279 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017386:	a929      	add	r1, sp, #164	; 0xa4
 8017388:	3d10      	subs	r5, #16
 801738a:	460c      	mov	r4, r1
 801738c:	e7bf      	b.n	801730e <_vfprintf_r+0xe06>
 801738e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017390:	2b00      	cmp	r3, #0
 8017392:	dc73      	bgt.n	801747c <_vfprintf_r+0xf74>
 8017394:	4b37      	ldr	r3, [pc, #220]	; (8017474 <_vfprintf_r+0xf6c>)
 8017396:	6023      	str	r3, [r4, #0]
 8017398:	2301      	movs	r3, #1
 801739a:	441f      	add	r7, r3
 801739c:	6063      	str	r3, [r4, #4]
 801739e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80173a0:	9728      	str	r7, [sp, #160]	; 0xa0
 80173a2:	3301      	adds	r3, #1
 80173a4:	2b07      	cmp	r3, #7
 80173a6:	9327      	str	r3, [sp, #156]	; 0x9c
 80173a8:	dc3d      	bgt.n	8017426 <_vfprintf_r+0xf1e>
 80173aa:	3408      	adds	r4, #8
 80173ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80173ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80173b0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80173b2:	430b      	orrs	r3, r1
 80173b4:	f008 0101 	and.w	r1, r8, #1
 80173b8:	430b      	orrs	r3, r1
 80173ba:	f43f acc9 	beq.w	8016d50 <_vfprintf_r+0x848>
 80173be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80173c0:	6023      	str	r3, [r4, #0]
 80173c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80173c4:	6063      	str	r3, [r4, #4]
 80173c6:	441a      	add	r2, r3
 80173c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80173ca:	9228      	str	r2, [sp, #160]	; 0xa0
 80173cc:	3301      	adds	r3, #1
 80173ce:	2b07      	cmp	r3, #7
 80173d0:	9327      	str	r3, [sp, #156]	; 0x9c
 80173d2:	dc32      	bgt.n	801743a <_vfprintf_r+0xf32>
 80173d4:	3408      	adds	r4, #8
 80173d6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80173d8:	2d00      	cmp	r5, #0
 80173da:	da1b      	bge.n	8017414 <_vfprintf_r+0xf0c>
 80173dc:	4e26      	ldr	r6, [pc, #152]	; (8017478 <_vfprintf_r+0xf70>)
 80173de:	426d      	negs	r5, r5
 80173e0:	4623      	mov	r3, r4
 80173e2:	2710      	movs	r7, #16
 80173e4:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 80173e8:	2d10      	cmp	r5, #16
 80173ea:	f102 0201 	add.w	r2, r2, #1
 80173ee:	f104 0408 	add.w	r4, r4, #8
 80173f2:	601e      	str	r6, [r3, #0]
 80173f4:	dc2b      	bgt.n	801744e <_vfprintf_r+0xf46>
 80173f6:	605d      	str	r5, [r3, #4]
 80173f8:	2a07      	cmp	r2, #7
 80173fa:	440d      	add	r5, r1
 80173fc:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8017400:	dd08      	ble.n	8017414 <_vfprintf_r+0xf0c>
 8017402:	aa26      	add	r2, sp, #152	; 0x98
 8017404:	4651      	mov	r1, sl
 8017406:	4658      	mov	r0, fp
 8017408:	f000 fade 	bl	80179c8 <__sprint_r>
 801740c:	2800      	cmp	r0, #0
 801740e:	f040 8233 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017412:	ac29      	add	r4, sp, #164	; 0xa4
 8017414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017418:	6063      	str	r3, [r4, #4]
 801741a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801741c:	f8c4 9000 	str.w	r9, [r4]
 8017420:	4413      	add	r3, r2
 8017422:	9328      	str	r3, [sp, #160]	; 0xa0
 8017424:	e48d      	b.n	8016d42 <_vfprintf_r+0x83a>
 8017426:	aa26      	add	r2, sp, #152	; 0x98
 8017428:	4651      	mov	r1, sl
 801742a:	4658      	mov	r0, fp
 801742c:	f000 facc 	bl	80179c8 <__sprint_r>
 8017430:	2800      	cmp	r0, #0
 8017432:	f040 8221 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017436:	ac29      	add	r4, sp, #164	; 0xa4
 8017438:	e7b8      	b.n	80173ac <_vfprintf_r+0xea4>
 801743a:	aa26      	add	r2, sp, #152	; 0x98
 801743c:	4651      	mov	r1, sl
 801743e:	4658      	mov	r0, fp
 8017440:	f000 fac2 	bl	80179c8 <__sprint_r>
 8017444:	2800      	cmp	r0, #0
 8017446:	f040 8217 	bne.w	8017878 <_vfprintf_r+0x1370>
 801744a:	ac29      	add	r4, sp, #164	; 0xa4
 801744c:	e7c3      	b.n	80173d6 <_vfprintf_r+0xece>
 801744e:	3110      	adds	r1, #16
 8017450:	2a07      	cmp	r2, #7
 8017452:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8017456:	605f      	str	r7, [r3, #4]
 8017458:	dd08      	ble.n	801746c <_vfprintf_r+0xf64>
 801745a:	aa26      	add	r2, sp, #152	; 0x98
 801745c:	4651      	mov	r1, sl
 801745e:	4658      	mov	r0, fp
 8017460:	f000 fab2 	bl	80179c8 <__sprint_r>
 8017464:	2800      	cmp	r0, #0
 8017466:	f040 8207 	bne.w	8017878 <_vfprintf_r+0x1370>
 801746a:	ac29      	add	r4, sp, #164	; 0xa4
 801746c:	3d10      	subs	r5, #16
 801746e:	4623      	mov	r3, r4
 8017470:	e7b8      	b.n	80173e4 <_vfprintf_r+0xedc>
 8017472:	bf00      	nop
 8017474:	0801b787 	.word	0x0801b787
 8017478:	0801b7b9 	.word	0x0801b7b9
 801747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801747e:	42ab      	cmp	r3, r5
 8017480:	bfa8      	it	ge
 8017482:	462b      	movge	r3, r5
 8017484:	2b00      	cmp	r3, #0
 8017486:	9307      	str	r3, [sp, #28]
 8017488:	dd0a      	ble.n	80174a0 <_vfprintf_r+0xf98>
 801748a:	441f      	add	r7, r3
 801748c:	e9c4 9300 	strd	r9, r3, [r4]
 8017490:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017492:	9728      	str	r7, [sp, #160]	; 0xa0
 8017494:	3301      	adds	r3, #1
 8017496:	2b07      	cmp	r3, #7
 8017498:	9327      	str	r3, [sp, #156]	; 0x9c
 801749a:	f300 8084 	bgt.w	80175a6 <_vfprintf_r+0x109e>
 801749e:	3408      	adds	r4, #8
 80174a0:	9b07      	ldr	r3, [sp, #28]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	bfac      	ite	ge
 80174a6:	1aef      	subge	r7, r5, r3
 80174a8:	462f      	movlt	r7, r5
 80174aa:	2f00      	cmp	r7, #0
 80174ac:	dd19      	ble.n	80174e2 <_vfprintf_r+0xfda>
 80174ae:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80174b2:	4894      	ldr	r0, [pc, #592]	; (8017704 <_vfprintf_r+0x11fc>)
 80174b4:	6020      	str	r0, [r4, #0]
 80174b6:	2f10      	cmp	r7, #16
 80174b8:	f103 0301 	add.w	r3, r3, #1
 80174bc:	f104 0108 	add.w	r1, r4, #8
 80174c0:	dc7b      	bgt.n	80175ba <_vfprintf_r+0x10b2>
 80174c2:	6067      	str	r7, [r4, #4]
 80174c4:	2b07      	cmp	r3, #7
 80174c6:	4417      	add	r7, r2
 80174c8:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 80174cc:	f340 8088 	ble.w	80175e0 <_vfprintf_r+0x10d8>
 80174d0:	aa26      	add	r2, sp, #152	; 0x98
 80174d2:	4651      	mov	r1, sl
 80174d4:	4658      	mov	r0, fp
 80174d6:	f000 fa77 	bl	80179c8 <__sprint_r>
 80174da:	2800      	cmp	r0, #0
 80174dc:	f040 81cc 	bne.w	8017878 <_vfprintf_r+0x1370>
 80174e0:	ac29      	add	r4, sp, #164	; 0xa4
 80174e2:	f418 6f80 	tst.w	r8, #1024	; 0x400
 80174e6:	444d      	add	r5, r9
 80174e8:	d009      	beq.n	80174fe <_vfprintf_r+0xff6>
 80174ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d179      	bne.n	80175e4 <_vfprintf_r+0x10dc>
 80174f0:	2e00      	cmp	r6, #0
 80174f2:	d179      	bne.n	80175e8 <_vfprintf_r+0x10e0>
 80174f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174f6:	444b      	add	r3, r9
 80174f8:	429d      	cmp	r5, r3
 80174fa:	bf28      	it	cs
 80174fc:	461d      	movcs	r5, r3
 80174fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017502:	4293      	cmp	r3, r2
 8017504:	db02      	blt.n	801750c <_vfprintf_r+0x1004>
 8017506:	f018 0f01 	tst.w	r8, #1
 801750a:	d00e      	beq.n	801752a <_vfprintf_r+0x1022>
 801750c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801750e:	6023      	str	r3, [r4, #0]
 8017510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017512:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017514:	6063      	str	r3, [r4, #4]
 8017516:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017518:	4413      	add	r3, r2
 801751a:	9328      	str	r3, [sp, #160]	; 0xa0
 801751c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801751e:	3301      	adds	r3, #1
 8017520:	2b07      	cmp	r3, #7
 8017522:	9327      	str	r3, [sp, #156]	; 0x9c
 8017524:	f300 80da 	bgt.w	80176dc <_vfprintf_r+0x11d4>
 8017528:	3408      	adds	r4, #8
 801752a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801752c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801752e:	1b9e      	subs	r6, r3, r6
 8017530:	444b      	add	r3, r9
 8017532:	1b5b      	subs	r3, r3, r5
 8017534:	429e      	cmp	r6, r3
 8017536:	bfa8      	it	ge
 8017538:	461e      	movge	r6, r3
 801753a:	2e00      	cmp	r6, #0
 801753c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801753e:	dd0a      	ble.n	8017556 <_vfprintf_r+0x104e>
 8017540:	4433      	add	r3, r6
 8017542:	9328      	str	r3, [sp, #160]	; 0xa0
 8017544:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017546:	3301      	adds	r3, #1
 8017548:	2b07      	cmp	r3, #7
 801754a:	e9c4 5600 	strd	r5, r6, [r4]
 801754e:	9327      	str	r3, [sp, #156]	; 0x9c
 8017550:	f300 80ce 	bgt.w	80176f0 <_vfprintf_r+0x11e8>
 8017554:	3408      	adds	r4, #8
 8017556:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8017558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801755a:	2e00      	cmp	r6, #0
 801755c:	eba3 0505 	sub.w	r5, r3, r5
 8017560:	bfa8      	it	ge
 8017562:	1bad      	subge	r5, r5, r6
 8017564:	2d00      	cmp	r5, #0
 8017566:	f77f abf3 	ble.w	8016d50 <_vfprintf_r+0x848>
 801756a:	4e66      	ldr	r6, [pc, #408]	; (8017704 <_vfprintf_r+0x11fc>)
 801756c:	2710      	movs	r7, #16
 801756e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8017572:	2d10      	cmp	r5, #16
 8017574:	f103 0301 	add.w	r3, r3, #1
 8017578:	f104 0108 	add.w	r1, r4, #8
 801757c:	6026      	str	r6, [r4, #0]
 801757e:	f77f aecf 	ble.w	8017320 <_vfprintf_r+0xe18>
 8017582:	3210      	adds	r2, #16
 8017584:	2b07      	cmp	r3, #7
 8017586:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801758a:	6067      	str	r7, [r4, #4]
 801758c:	dd08      	ble.n	80175a0 <_vfprintf_r+0x1098>
 801758e:	aa26      	add	r2, sp, #152	; 0x98
 8017590:	4651      	mov	r1, sl
 8017592:	4658      	mov	r0, fp
 8017594:	f000 fa18 	bl	80179c8 <__sprint_r>
 8017598:	2800      	cmp	r0, #0
 801759a:	f040 816d 	bne.w	8017878 <_vfprintf_r+0x1370>
 801759e:	a929      	add	r1, sp, #164	; 0xa4
 80175a0:	3d10      	subs	r5, #16
 80175a2:	460c      	mov	r4, r1
 80175a4:	e7e3      	b.n	801756e <_vfprintf_r+0x1066>
 80175a6:	aa26      	add	r2, sp, #152	; 0x98
 80175a8:	4651      	mov	r1, sl
 80175aa:	4658      	mov	r0, fp
 80175ac:	f000 fa0c 	bl	80179c8 <__sprint_r>
 80175b0:	2800      	cmp	r0, #0
 80175b2:	f040 8161 	bne.w	8017878 <_vfprintf_r+0x1370>
 80175b6:	ac29      	add	r4, sp, #164	; 0xa4
 80175b8:	e772      	b.n	80174a0 <_vfprintf_r+0xf98>
 80175ba:	2010      	movs	r0, #16
 80175bc:	4402      	add	r2, r0
 80175be:	2b07      	cmp	r3, #7
 80175c0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80175c4:	6060      	str	r0, [r4, #4]
 80175c6:	dd08      	ble.n	80175da <_vfprintf_r+0x10d2>
 80175c8:	aa26      	add	r2, sp, #152	; 0x98
 80175ca:	4651      	mov	r1, sl
 80175cc:	4658      	mov	r0, fp
 80175ce:	f000 f9fb 	bl	80179c8 <__sprint_r>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	f040 8150 	bne.w	8017878 <_vfprintf_r+0x1370>
 80175d8:	a929      	add	r1, sp, #164	; 0xa4
 80175da:	3f10      	subs	r7, #16
 80175dc:	460c      	mov	r4, r1
 80175de:	e766      	b.n	80174ae <_vfprintf_r+0xfa6>
 80175e0:	460c      	mov	r4, r1
 80175e2:	e77e      	b.n	80174e2 <_vfprintf_r+0xfda>
 80175e4:	2e00      	cmp	r6, #0
 80175e6:	d049      	beq.n	801767c <_vfprintf_r+0x1174>
 80175e8:	3e01      	subs	r6, #1
 80175ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80175ec:	6023      	str	r3, [r4, #0]
 80175ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80175f2:	6063      	str	r3, [r4, #4]
 80175f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80175f6:	4413      	add	r3, r2
 80175f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80175fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80175fc:	3301      	adds	r3, #1
 80175fe:	2b07      	cmp	r3, #7
 8017600:	9327      	str	r3, [sp, #156]	; 0x9c
 8017602:	dc42      	bgt.n	801768a <_vfprintf_r+0x1182>
 8017604:	3408      	adds	r4, #8
 8017606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017608:	444b      	add	r3, r9
 801760a:	1b5a      	subs	r2, r3, r5
 801760c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	429a      	cmp	r2, r3
 8017612:	bfa8      	it	ge
 8017614:	461a      	movge	r2, r3
 8017616:	2a00      	cmp	r2, #0
 8017618:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801761a:	9207      	str	r2, [sp, #28]
 801761c:	dd09      	ble.n	8017632 <_vfprintf_r+0x112a>
 801761e:	4413      	add	r3, r2
 8017620:	9328      	str	r3, [sp, #160]	; 0xa0
 8017622:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017624:	3301      	adds	r3, #1
 8017626:	2b07      	cmp	r3, #7
 8017628:	e9c4 5200 	strd	r5, r2, [r4]
 801762c:	9327      	str	r3, [sp, #156]	; 0x9c
 801762e:	dc36      	bgt.n	801769e <_vfprintf_r+0x1196>
 8017630:	3408      	adds	r4, #8
 8017632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017634:	781f      	ldrb	r7, [r3, #0]
 8017636:	9b07      	ldr	r3, [sp, #28]
 8017638:	2b00      	cmp	r3, #0
 801763a:	bfa8      	it	ge
 801763c:	1aff      	subge	r7, r7, r3
 801763e:	2f00      	cmp	r7, #0
 8017640:	dd18      	ble.n	8017674 <_vfprintf_r+0x116c>
 8017642:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8017646:	482f      	ldr	r0, [pc, #188]	; (8017704 <_vfprintf_r+0x11fc>)
 8017648:	6020      	str	r0, [r4, #0]
 801764a:	2f10      	cmp	r7, #16
 801764c:	f103 0301 	add.w	r3, r3, #1
 8017650:	f104 0108 	add.w	r1, r4, #8
 8017654:	dc2d      	bgt.n	80176b2 <_vfprintf_r+0x11aa>
 8017656:	6067      	str	r7, [r4, #4]
 8017658:	2b07      	cmp	r3, #7
 801765a:	4417      	add	r7, r2
 801765c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8017660:	dd3a      	ble.n	80176d8 <_vfprintf_r+0x11d0>
 8017662:	aa26      	add	r2, sp, #152	; 0x98
 8017664:	4651      	mov	r1, sl
 8017666:	4658      	mov	r0, fp
 8017668:	f000 f9ae 	bl	80179c8 <__sprint_r>
 801766c:	2800      	cmp	r0, #0
 801766e:	f040 8103 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017672:	ac29      	add	r4, sp, #164	; 0xa4
 8017674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	441d      	add	r5, r3
 801767a:	e736      	b.n	80174ea <_vfprintf_r+0xfe2>
 801767c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801767e:	3b01      	subs	r3, #1
 8017680:	930d      	str	r3, [sp, #52]	; 0x34
 8017682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017684:	3b01      	subs	r3, #1
 8017686:	930c      	str	r3, [sp, #48]	; 0x30
 8017688:	e7af      	b.n	80175ea <_vfprintf_r+0x10e2>
 801768a:	aa26      	add	r2, sp, #152	; 0x98
 801768c:	4651      	mov	r1, sl
 801768e:	4658      	mov	r0, fp
 8017690:	f000 f99a 	bl	80179c8 <__sprint_r>
 8017694:	2800      	cmp	r0, #0
 8017696:	f040 80ef 	bne.w	8017878 <_vfprintf_r+0x1370>
 801769a:	ac29      	add	r4, sp, #164	; 0xa4
 801769c:	e7b3      	b.n	8017606 <_vfprintf_r+0x10fe>
 801769e:	aa26      	add	r2, sp, #152	; 0x98
 80176a0:	4651      	mov	r1, sl
 80176a2:	4658      	mov	r0, fp
 80176a4:	f000 f990 	bl	80179c8 <__sprint_r>
 80176a8:	2800      	cmp	r0, #0
 80176aa:	f040 80e5 	bne.w	8017878 <_vfprintf_r+0x1370>
 80176ae:	ac29      	add	r4, sp, #164	; 0xa4
 80176b0:	e7bf      	b.n	8017632 <_vfprintf_r+0x112a>
 80176b2:	2010      	movs	r0, #16
 80176b4:	4402      	add	r2, r0
 80176b6:	2b07      	cmp	r3, #7
 80176b8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80176bc:	6060      	str	r0, [r4, #4]
 80176be:	dd08      	ble.n	80176d2 <_vfprintf_r+0x11ca>
 80176c0:	aa26      	add	r2, sp, #152	; 0x98
 80176c2:	4651      	mov	r1, sl
 80176c4:	4658      	mov	r0, fp
 80176c6:	f000 f97f 	bl	80179c8 <__sprint_r>
 80176ca:	2800      	cmp	r0, #0
 80176cc:	f040 80d4 	bne.w	8017878 <_vfprintf_r+0x1370>
 80176d0:	a929      	add	r1, sp, #164	; 0xa4
 80176d2:	3f10      	subs	r7, #16
 80176d4:	460c      	mov	r4, r1
 80176d6:	e7b4      	b.n	8017642 <_vfprintf_r+0x113a>
 80176d8:	460c      	mov	r4, r1
 80176da:	e7cb      	b.n	8017674 <_vfprintf_r+0x116c>
 80176dc:	aa26      	add	r2, sp, #152	; 0x98
 80176de:	4651      	mov	r1, sl
 80176e0:	4658      	mov	r0, fp
 80176e2:	f000 f971 	bl	80179c8 <__sprint_r>
 80176e6:	2800      	cmp	r0, #0
 80176e8:	f040 80c6 	bne.w	8017878 <_vfprintf_r+0x1370>
 80176ec:	ac29      	add	r4, sp, #164	; 0xa4
 80176ee:	e71c      	b.n	801752a <_vfprintf_r+0x1022>
 80176f0:	aa26      	add	r2, sp, #152	; 0x98
 80176f2:	4651      	mov	r1, sl
 80176f4:	4658      	mov	r0, fp
 80176f6:	f000 f967 	bl	80179c8 <__sprint_r>
 80176fa:	2800      	cmp	r0, #0
 80176fc:	f040 80bc 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017700:	ac29      	add	r4, sp, #164	; 0xa4
 8017702:	e728      	b.n	8017556 <_vfprintf_r+0x104e>
 8017704:	0801b7b9 	.word	0x0801b7b9
 8017708:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801770a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801770c:	2a01      	cmp	r2, #1
 801770e:	f107 0701 	add.w	r7, r7, #1
 8017712:	f103 0301 	add.w	r3, r3, #1
 8017716:	f104 0508 	add.w	r5, r4, #8
 801771a:	dc02      	bgt.n	8017722 <_vfprintf_r+0x121a>
 801771c:	f018 0f01 	tst.w	r8, #1
 8017720:	d07e      	beq.n	8017820 <_vfprintf_r+0x1318>
 8017722:	2201      	movs	r2, #1
 8017724:	2b07      	cmp	r3, #7
 8017726:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801772a:	f8c4 9000 	str.w	r9, [r4]
 801772e:	6062      	str	r2, [r4, #4]
 8017730:	dd08      	ble.n	8017744 <_vfprintf_r+0x123c>
 8017732:	aa26      	add	r2, sp, #152	; 0x98
 8017734:	4651      	mov	r1, sl
 8017736:	4658      	mov	r0, fp
 8017738:	f000 f946 	bl	80179c8 <__sprint_r>
 801773c:	2800      	cmp	r0, #0
 801773e:	f040 809b 	bne.w	8017878 <_vfprintf_r+0x1370>
 8017742:	ad29      	add	r5, sp, #164	; 0xa4
 8017744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017746:	602b      	str	r3, [r5, #0]
 8017748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801774a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801774c:	606b      	str	r3, [r5, #4]
 801774e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017750:	4413      	add	r3, r2
 8017752:	9328      	str	r3, [sp, #160]	; 0xa0
 8017754:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8017756:	3301      	adds	r3, #1
 8017758:	2b07      	cmp	r3, #7
 801775a:	9327      	str	r3, [sp, #156]	; 0x9c
 801775c:	dc32      	bgt.n	80177c4 <_vfprintf_r+0x12bc>
 801775e:	3508      	adds	r5, #8
 8017760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017766:	1e5c      	subs	r4, r3, #1
 8017768:	2200      	movs	r2, #0
 801776a:	2300      	movs	r3, #0
 801776c:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
 8017770:	f7f1 fb82 	bl	8008e78 <__aeabi_dcmpeq>
 8017774:	2800      	cmp	r0, #0
 8017776:	d12e      	bne.n	80177d6 <_vfprintf_r+0x12ce>
 8017778:	f109 0301 	add.w	r3, r9, #1
 801777c:	e9c5 3400 	strd	r3, r4, [r5]
 8017780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017782:	3701      	adds	r7, #1
 8017784:	3e01      	subs	r6, #1
 8017786:	441e      	add	r6, r3
 8017788:	2f07      	cmp	r7, #7
 801778a:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
 801778e:	dd50      	ble.n	8017832 <_vfprintf_r+0x132a>
 8017790:	aa26      	add	r2, sp, #152	; 0x98
 8017792:	4651      	mov	r1, sl
 8017794:	4658      	mov	r0, fp
 8017796:	f000 f917 	bl	80179c8 <__sprint_r>
 801779a:	2800      	cmp	r0, #0
 801779c:	d16c      	bne.n	8017878 <_vfprintf_r+0x1370>
 801779e:	ad29      	add	r5, sp, #164	; 0xa4
 80177a0:	ab22      	add	r3, sp, #136	; 0x88
 80177a2:	602b      	str	r3, [r5, #0]
 80177a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80177a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80177a8:	606b      	str	r3, [r5, #4]
 80177aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80177ac:	4413      	add	r3, r2
 80177ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80177b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80177b2:	3301      	adds	r3, #1
 80177b4:	2b07      	cmp	r3, #7
 80177b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80177b8:	f73f adb9 	bgt.w	801732e <_vfprintf_r+0xe26>
 80177bc:	f105 0408 	add.w	r4, r5, #8
 80177c0:	f7ff bac6 	b.w	8016d50 <_vfprintf_r+0x848>
 80177c4:	aa26      	add	r2, sp, #152	; 0x98
 80177c6:	4651      	mov	r1, sl
 80177c8:	4658      	mov	r0, fp
 80177ca:	f000 f8fd 	bl	80179c8 <__sprint_r>
 80177ce:	2800      	cmp	r0, #0
 80177d0:	d152      	bne.n	8017878 <_vfprintf_r+0x1370>
 80177d2:	ad29      	add	r5, sp, #164	; 0xa4
 80177d4:	e7c4      	b.n	8017760 <_vfprintf_r+0x1258>
 80177d6:	2c00      	cmp	r4, #0
 80177d8:	dde2      	ble.n	80177a0 <_vfprintf_r+0x1298>
 80177da:	4e59      	ldr	r6, [pc, #356]	; (8017940 <_vfprintf_r+0x1438>)
 80177dc:	2710      	movs	r7, #16
 80177de:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80177e2:	2c10      	cmp	r4, #16
 80177e4:	f103 0301 	add.w	r3, r3, #1
 80177e8:	f105 0108 	add.w	r1, r5, #8
 80177ec:	602e      	str	r6, [r5, #0]
 80177ee:	dc07      	bgt.n	8017800 <_vfprintf_r+0x12f8>
 80177f0:	606c      	str	r4, [r5, #4]
 80177f2:	2b07      	cmp	r3, #7
 80177f4:	4414      	add	r4, r2
 80177f6:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 80177fa:	dcc9      	bgt.n	8017790 <_vfprintf_r+0x1288>
 80177fc:	460d      	mov	r5, r1
 80177fe:	e7cf      	b.n	80177a0 <_vfprintf_r+0x1298>
 8017800:	3210      	adds	r2, #16
 8017802:	2b07      	cmp	r3, #7
 8017804:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8017808:	606f      	str	r7, [r5, #4]
 801780a:	dd06      	ble.n	801781a <_vfprintf_r+0x1312>
 801780c:	aa26      	add	r2, sp, #152	; 0x98
 801780e:	4651      	mov	r1, sl
 8017810:	4658      	mov	r0, fp
 8017812:	f000 f8d9 	bl	80179c8 <__sprint_r>
 8017816:	bb78      	cbnz	r0, 8017878 <_vfprintf_r+0x1370>
 8017818:	a929      	add	r1, sp, #164	; 0xa4
 801781a:	3c10      	subs	r4, #16
 801781c:	460d      	mov	r5, r1
 801781e:	e7de      	b.n	80177de <_vfprintf_r+0x12d6>
 8017820:	2201      	movs	r2, #1
 8017822:	2b07      	cmp	r3, #7
 8017824:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8017828:	f8c4 9000 	str.w	r9, [r4]
 801782c:	6062      	str	r2, [r4, #4]
 801782e:	ddb7      	ble.n	80177a0 <_vfprintf_r+0x1298>
 8017830:	e7ae      	b.n	8017790 <_vfprintf_r+0x1288>
 8017832:	3508      	adds	r5, #8
 8017834:	e7b4      	b.n	80177a0 <_vfprintf_r+0x1298>
 8017836:	460c      	mov	r4, r1
 8017838:	f7ff ba8a 	b.w	8016d50 <_vfprintf_r+0x848>
 801783c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8017840:	1a9d      	subs	r5, r3, r2
 8017842:	2d00      	cmp	r5, #0
 8017844:	f77f aa88 	ble.w	8016d58 <_vfprintf_r+0x850>
 8017848:	4e3e      	ldr	r6, [pc, #248]	; (8017944 <_vfprintf_r+0x143c>)
 801784a:	2710      	movs	r7, #16
 801784c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8017850:	2d10      	cmp	r5, #16
 8017852:	f103 0301 	add.w	r3, r3, #1
 8017856:	6026      	str	r6, [r4, #0]
 8017858:	dc18      	bgt.n	801788c <_vfprintf_r+0x1384>
 801785a:	6065      	str	r5, [r4, #4]
 801785c:	2b07      	cmp	r3, #7
 801785e:	4415      	add	r5, r2
 8017860:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8017864:	f77f aa78 	ble.w	8016d58 <_vfprintf_r+0x850>
 8017868:	aa26      	add	r2, sp, #152	; 0x98
 801786a:	4651      	mov	r1, sl
 801786c:	4658      	mov	r0, fp
 801786e:	f000 f8ab 	bl	80179c8 <__sprint_r>
 8017872:	2800      	cmp	r0, #0
 8017874:	f43f aa70 	beq.w	8016d58 <_vfprintf_r+0x850>
 8017878:	9b08      	ldr	r3, [sp, #32]
 801787a:	2b00      	cmp	r3, #0
 801787c:	f43f a889 	beq.w	8016992 <_vfprintf_r+0x48a>
 8017880:	4619      	mov	r1, r3
 8017882:	4658      	mov	r0, fp
 8017884:	f7fc ffc4 	bl	8014810 <_free_r>
 8017888:	f7ff b883 	b.w	8016992 <_vfprintf_r+0x48a>
 801788c:	3210      	adds	r2, #16
 801788e:	2b07      	cmp	r3, #7
 8017890:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8017894:	6067      	str	r7, [r4, #4]
 8017896:	dc02      	bgt.n	801789e <_vfprintf_r+0x1396>
 8017898:	3408      	adds	r4, #8
 801789a:	3d10      	subs	r5, #16
 801789c:	e7d6      	b.n	801784c <_vfprintf_r+0x1344>
 801789e:	aa26      	add	r2, sp, #152	; 0x98
 80178a0:	4651      	mov	r1, sl
 80178a2:	4658      	mov	r0, fp
 80178a4:	f000 f890 	bl	80179c8 <__sprint_r>
 80178a8:	2800      	cmp	r0, #0
 80178aa:	d1e5      	bne.n	8017878 <_vfprintf_r+0x1370>
 80178ac:	ac29      	add	r4, sp, #164	; 0xa4
 80178ae:	e7f4      	b.n	801789a <_vfprintf_r+0x1392>
 80178b0:	9908      	ldr	r1, [sp, #32]
 80178b2:	4658      	mov	r0, fp
 80178b4:	f7fc ffac 	bl	8014810 <_free_r>
 80178b8:	f7ff ba66 	b.w	8016d88 <_vfprintf_r+0x880>
 80178bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80178be:	b91b      	cbnz	r3, 80178c8 <_vfprintf_r+0x13c0>
 80178c0:	2300      	movs	r3, #0
 80178c2:	9327      	str	r3, [sp, #156]	; 0x9c
 80178c4:	f7ff b865 	b.w	8016992 <_vfprintf_r+0x48a>
 80178c8:	aa26      	add	r2, sp, #152	; 0x98
 80178ca:	4651      	mov	r1, sl
 80178cc:	4658      	mov	r0, fp
 80178ce:	f000 f87b 	bl	80179c8 <__sprint_r>
 80178d2:	2800      	cmp	r0, #0
 80178d4:	d0f4      	beq.n	80178c0 <_vfprintf_r+0x13b8>
 80178d6:	f7ff b85c 	b.w	8016992 <_vfprintf_r+0x48a>
 80178da:	ea55 0206 	orrs.w	r2, r5, r6
 80178de:	f8cd 8020 	str.w	r8, [sp, #32]
 80178e2:	f43f ab76 	beq.w	8016fd2 <_vfprintf_r+0xaca>
 80178e6:	2b01      	cmp	r3, #1
 80178e8:	f43f ac12 	beq.w	8017110 <_vfprintf_r+0xc08>
 80178ec:	2b02      	cmp	r3, #2
 80178ee:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80178f2:	f43f ac54 	beq.w	801719e <_vfprintf_r+0xc96>
 80178f6:	f005 0307 	and.w	r3, r5, #7
 80178fa:	08ed      	lsrs	r5, r5, #3
 80178fc:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 8017900:	08f6      	lsrs	r6, r6, #3
 8017902:	3330      	adds	r3, #48	; 0x30
 8017904:	ea55 0106 	orrs.w	r1, r5, r6
 8017908:	464a      	mov	r2, r9
 801790a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801790e:	d1f2      	bne.n	80178f6 <_vfprintf_r+0x13ee>
 8017910:	9908      	ldr	r1, [sp, #32]
 8017912:	07c8      	lsls	r0, r1, #31
 8017914:	d506      	bpl.n	8017924 <_vfprintf_r+0x141c>
 8017916:	2b30      	cmp	r3, #48	; 0x30
 8017918:	d004      	beq.n	8017924 <_vfprintf_r+0x141c>
 801791a:	2330      	movs	r3, #48	; 0x30
 801791c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8017920:	f1a2 0902 	sub.w	r9, r2, #2
 8017924:	ab52      	add	r3, sp, #328	; 0x148
 8017926:	eba3 0309 	sub.w	r3, r3, r9
 801792a:	9f07      	ldr	r7, [sp, #28]
 801792c:	9307      	str	r3, [sp, #28]
 801792e:	2300      	movs	r3, #0
 8017930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017934:	9308      	str	r3, [sp, #32]
 8017936:	461e      	mov	r6, r3
 8017938:	930c      	str	r3, [sp, #48]	; 0x30
 801793a:	461d      	mov	r5, r3
 801793c:	f7ff b948 	b.w	8016bd0 <_vfprintf_r+0x6c8>
 8017940:	0801b7b9 	.word	0x0801b7b9
 8017944:	0801b7a9 	.word	0x0801b7a9

08017948 <__sbprintf>:
 8017948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801794a:	461f      	mov	r7, r3
 801794c:	898b      	ldrh	r3, [r1, #12]
 801794e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8017952:	f023 0302 	bic.w	r3, r3, #2
 8017956:	f8ad 300c 	strh.w	r3, [sp, #12]
 801795a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801795c:	9319      	str	r3, [sp, #100]	; 0x64
 801795e:	89cb      	ldrh	r3, [r1, #14]
 8017960:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017964:	69cb      	ldr	r3, [r1, #28]
 8017966:	9307      	str	r3, [sp, #28]
 8017968:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801796a:	9309      	str	r3, [sp, #36]	; 0x24
 801796c:	ab1a      	add	r3, sp, #104	; 0x68
 801796e:	9300      	str	r3, [sp, #0]
 8017970:	9304      	str	r3, [sp, #16]
 8017972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017976:	4615      	mov	r5, r2
 8017978:	4606      	mov	r6, r0
 801797a:	9302      	str	r3, [sp, #8]
 801797c:	9305      	str	r3, [sp, #20]
 801797e:	a816      	add	r0, sp, #88	; 0x58
 8017980:	2300      	movs	r3, #0
 8017982:	460c      	mov	r4, r1
 8017984:	9306      	str	r3, [sp, #24]
 8017986:	f7fc fecd 	bl	8014724 <__retarget_lock_init_recursive>
 801798a:	462a      	mov	r2, r5
 801798c:	463b      	mov	r3, r7
 801798e:	4669      	mov	r1, sp
 8017990:	4630      	mov	r0, r6
 8017992:	f7fe fdb9 	bl	8016508 <_vfprintf_r>
 8017996:	1e05      	subs	r5, r0, #0
 8017998:	db07      	blt.n	80179aa <__sbprintf+0x62>
 801799a:	4669      	mov	r1, sp
 801799c:	4630      	mov	r0, r6
 801799e:	f000 fdf5 	bl	801858c <_fflush_r>
 80179a2:	2800      	cmp	r0, #0
 80179a4:	bf18      	it	ne
 80179a6:	f04f 35ff 	movne.w	r5, #4294967295
 80179aa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80179ae:	9816      	ldr	r0, [sp, #88]	; 0x58
 80179b0:	065b      	lsls	r3, r3, #25
 80179b2:	bf42      	ittt	mi
 80179b4:	89a3      	ldrhmi	r3, [r4, #12]
 80179b6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80179ba:	81a3      	strhmi	r3, [r4, #12]
 80179bc:	f7fc feb3 	bl	8014726 <__retarget_lock_close_recursive>
 80179c0:	4628      	mov	r0, r5
 80179c2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80179c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080179c8 <__sprint_r>:
 80179c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179cc:	6893      	ldr	r3, [r2, #8]
 80179ce:	4680      	mov	r8, r0
 80179d0:	460f      	mov	r7, r1
 80179d2:	4614      	mov	r4, r2
 80179d4:	b343      	cbz	r3, 8017a28 <__sprint_r+0x60>
 80179d6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80179d8:	049d      	lsls	r5, r3, #18
 80179da:	d522      	bpl.n	8017a22 <__sprint_r+0x5a>
 80179dc:	6815      	ldr	r5, [r2, #0]
 80179de:	3508      	adds	r5, #8
 80179e0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 80179e4:	f04f 0900 	mov.w	r9, #0
 80179e8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 80179ec:	45ca      	cmp	sl, r9
 80179ee:	dc0d      	bgt.n	8017a0c <__sprint_r+0x44>
 80179f0:	68a0      	ldr	r0, [r4, #8]
 80179f2:	f026 0603 	bic.w	r6, r6, #3
 80179f6:	1b80      	subs	r0, r0, r6
 80179f8:	60a0      	str	r0, [r4, #8]
 80179fa:	3508      	adds	r5, #8
 80179fc:	2800      	cmp	r0, #0
 80179fe:	d1ef      	bne.n	80179e0 <__sprint_r+0x18>
 8017a00:	2300      	movs	r3, #0
 8017a02:	60a3      	str	r3, [r4, #8]
 8017a04:	2300      	movs	r3, #0
 8017a06:	6063      	str	r3, [r4, #4]
 8017a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a0c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8017a10:	463a      	mov	r2, r7
 8017a12:	4640      	mov	r0, r8
 8017a14:	f000 fe84 	bl	8018720 <_fputwc_r>
 8017a18:	1c43      	adds	r3, r0, #1
 8017a1a:	d0f1      	beq.n	8017a00 <__sprint_r+0x38>
 8017a1c:	f109 0901 	add.w	r9, r9, #1
 8017a20:	e7e4      	b.n	80179ec <__sprint_r+0x24>
 8017a22:	f7fc facd 	bl	8013fc0 <__sfvwrite_r>
 8017a26:	e7eb      	b.n	8017a00 <__sprint_r+0x38>
 8017a28:	4618      	mov	r0, r3
 8017a2a:	e7eb      	b.n	8017a04 <__sprint_r+0x3c>

08017a2c <_vfiprintf_r>:
 8017a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a30:	b0bd      	sub	sp, #244	; 0xf4
 8017a32:	460f      	mov	r7, r1
 8017a34:	9202      	str	r2, [sp, #8]
 8017a36:	461d      	mov	r5, r3
 8017a38:	461c      	mov	r4, r3
 8017a3a:	4681      	mov	r9, r0
 8017a3c:	b118      	cbz	r0, 8017a46 <_vfiprintf_r+0x1a>
 8017a3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017a40:	b90b      	cbnz	r3, 8017a46 <_vfiprintf_r+0x1a>
 8017a42:	f7fc fa93 	bl	8013f6c <__sinit>
 8017a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a48:	07d8      	lsls	r0, r3, #31
 8017a4a:	d405      	bmi.n	8017a58 <_vfiprintf_r+0x2c>
 8017a4c:	89bb      	ldrh	r3, [r7, #12]
 8017a4e:	0599      	lsls	r1, r3, #22
 8017a50:	d402      	bmi.n	8017a58 <_vfiprintf_r+0x2c>
 8017a52:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017a54:	f7fc fe68 	bl	8014728 <__retarget_lock_acquire_recursive>
 8017a58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017a5c:	049a      	lsls	r2, r3, #18
 8017a5e:	d406      	bmi.n	8017a6e <_vfiprintf_r+0x42>
 8017a60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017a64:	81bb      	strh	r3, [r7, #12]
 8017a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017a6c:	667b      	str	r3, [r7, #100]	; 0x64
 8017a6e:	89bb      	ldrh	r3, [r7, #12]
 8017a70:	071e      	lsls	r6, r3, #28
 8017a72:	d501      	bpl.n	8017a78 <_vfiprintf_r+0x4c>
 8017a74:	693b      	ldr	r3, [r7, #16]
 8017a76:	b9ab      	cbnz	r3, 8017aa4 <_vfiprintf_r+0x78>
 8017a78:	4639      	mov	r1, r7
 8017a7a:	4648      	mov	r0, r9
 8017a7c:	f7fc fcf8 	bl	8014470 <__swsetup_r>
 8017a80:	b180      	cbz	r0, 8017aa4 <_vfiprintf_r+0x78>
 8017a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017a84:	07d8      	lsls	r0, r3, #31
 8017a86:	d506      	bpl.n	8017a96 <_vfiprintf_r+0x6a>
 8017a88:	f04f 33ff 	mov.w	r3, #4294967295
 8017a8c:	9303      	str	r3, [sp, #12]
 8017a8e:	9803      	ldr	r0, [sp, #12]
 8017a90:	b03d      	add	sp, #244	; 0xf4
 8017a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a96:	89bb      	ldrh	r3, [r7, #12]
 8017a98:	0599      	lsls	r1, r3, #22
 8017a9a:	d4f5      	bmi.n	8017a88 <_vfiprintf_r+0x5c>
 8017a9c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017a9e:	f7fc fe44 	bl	801472a <__retarget_lock_release_recursive>
 8017aa2:	e7f1      	b.n	8017a88 <_vfiprintf_r+0x5c>
 8017aa4:	89bb      	ldrh	r3, [r7, #12]
 8017aa6:	f003 021a 	and.w	r2, r3, #26
 8017aaa:	2a0a      	cmp	r2, #10
 8017aac:	d114      	bne.n	8017ad8 <_vfiprintf_r+0xac>
 8017aae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017ab2:	2a00      	cmp	r2, #0
 8017ab4:	db10      	blt.n	8017ad8 <_vfiprintf_r+0xac>
 8017ab6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017ab8:	07d2      	lsls	r2, r2, #31
 8017aba:	d404      	bmi.n	8017ac6 <_vfiprintf_r+0x9a>
 8017abc:	059e      	lsls	r6, r3, #22
 8017abe:	d402      	bmi.n	8017ac6 <_vfiprintf_r+0x9a>
 8017ac0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017ac2:	f7fc fe32 	bl	801472a <__retarget_lock_release_recursive>
 8017ac6:	9a02      	ldr	r2, [sp, #8]
 8017ac8:	462b      	mov	r3, r5
 8017aca:	4639      	mov	r1, r7
 8017acc:	4648      	mov	r0, r9
 8017ace:	b03d      	add	sp, #244	; 0xf4
 8017ad0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ad4:	f000 bc38 	b.w	8018348 <__sbprintf>
 8017ad8:	2300      	movs	r3, #0
 8017ada:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8017ade:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8017ae2:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8017ae6:	ae13      	add	r6, sp, #76	; 0x4c
 8017ae8:	9610      	str	r6, [sp, #64]	; 0x40
 8017aea:	9303      	str	r3, [sp, #12]
 8017aec:	9b02      	ldr	r3, [sp, #8]
 8017aee:	461d      	mov	r5, r3
 8017af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017af4:	b10a      	cbz	r2, 8017afa <_vfiprintf_r+0xce>
 8017af6:	2a25      	cmp	r2, #37	; 0x25
 8017af8:	d1f9      	bne.n	8017aee <_vfiprintf_r+0xc2>
 8017afa:	9b02      	ldr	r3, [sp, #8]
 8017afc:	ebb5 0803 	subs.w	r8, r5, r3
 8017b00:	d00d      	beq.n	8017b1e <_vfiprintf_r+0xf2>
 8017b02:	e9c6 3800 	strd	r3, r8, [r6]
 8017b06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b08:	4443      	add	r3, r8
 8017b0a:	9312      	str	r3, [sp, #72]	; 0x48
 8017b0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017b0e:	3301      	adds	r3, #1
 8017b10:	2b07      	cmp	r3, #7
 8017b12:	9311      	str	r3, [sp, #68]	; 0x44
 8017b14:	dc76      	bgt.n	8017c04 <_vfiprintf_r+0x1d8>
 8017b16:	3608      	adds	r6, #8
 8017b18:	9b03      	ldr	r3, [sp, #12]
 8017b1a:	4443      	add	r3, r8
 8017b1c:	9303      	str	r3, [sp, #12]
 8017b1e:	782b      	ldrb	r3, [r5, #0]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f000 83d2 	beq.w	80182ca <_vfiprintf_r+0x89e>
 8017b26:	2300      	movs	r3, #0
 8017b28:	f04f 32ff 	mov.w	r2, #4294967295
 8017b2c:	3501      	adds	r5, #1
 8017b2e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8017b32:	9201      	str	r2, [sp, #4]
 8017b34:	9304      	str	r3, [sp, #16]
 8017b36:	469a      	mov	sl, r3
 8017b38:	462a      	mov	r2, r5
 8017b3a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017b3e:	9202      	str	r2, [sp, #8]
 8017b40:	f1a3 0220 	sub.w	r2, r3, #32
 8017b44:	2a5a      	cmp	r2, #90	; 0x5a
 8017b46:	f200 831a 	bhi.w	801817e <_vfiprintf_r+0x752>
 8017b4a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8017b4e:	007d      	.short	0x007d
 8017b50:	03180318 	.word	0x03180318
 8017b54:	03180085 	.word	0x03180085
 8017b58:	03180318 	.word	0x03180318
 8017b5c:	03180065 	.word	0x03180065
 8017b60:	00880318 	.word	0x00880318
 8017b64:	03180092 	.word	0x03180092
 8017b68:	0094008f 	.word	0x0094008f
 8017b6c:	00af0318 	.word	0x00af0318
 8017b70:	00b200b2 	.word	0x00b200b2
 8017b74:	00b200b2 	.word	0x00b200b2
 8017b78:	00b200b2 	.word	0x00b200b2
 8017b7c:	00b200b2 	.word	0x00b200b2
 8017b80:	031800b2 	.word	0x031800b2
 8017b84:	03180318 	.word	0x03180318
 8017b88:	03180318 	.word	0x03180318
 8017b8c:	03180318 	.word	0x03180318
 8017b90:	03180318 	.word	0x03180318
 8017b94:	00ea00dc 	.word	0x00ea00dc
 8017b98:	03180318 	.word	0x03180318
 8017b9c:	03180318 	.word	0x03180318
 8017ba0:	03180318 	.word	0x03180318
 8017ba4:	03180318 	.word	0x03180318
 8017ba8:	03180318 	.word	0x03180318
 8017bac:	0318013a 	.word	0x0318013a
 8017bb0:	03180318 	.word	0x03180318
 8017bb4:	0318017f 	.word	0x0318017f
 8017bb8:	0318025d 	.word	0x0318025d
 8017bbc:	027d0318 	.word	0x027d0318
 8017bc0:	03180318 	.word	0x03180318
 8017bc4:	03180318 	.word	0x03180318
 8017bc8:	03180318 	.word	0x03180318
 8017bcc:	03180318 	.word	0x03180318
 8017bd0:	03180318 	.word	0x03180318
 8017bd4:	00ec00dc 	.word	0x00ec00dc
 8017bd8:	03180318 	.word	0x03180318
 8017bdc:	00c20318 	.word	0x00c20318
 8017be0:	00d600ec 	.word	0x00d600ec
 8017be4:	00cf0318 	.word	0x00cf0318
 8017be8:	01180318 	.word	0x01180318
 8017bec:	0171013c 	.word	0x0171013c
 8017bf0:	031800d6 	.word	0x031800d6
 8017bf4:	007b017f 	.word	0x007b017f
 8017bf8:	0318025f 	.word	0x0318025f
 8017bfc:	02990318 	.word	0x02990318
 8017c00:	007b0318 	.word	0x007b0318
 8017c04:	aa10      	add	r2, sp, #64	; 0x40
 8017c06:	4639      	mov	r1, r7
 8017c08:	4648      	mov	r0, r9
 8017c0a:	f7ff fedd 	bl	80179c8 <__sprint_r>
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	f040 833a 	bne.w	8018288 <_vfiprintf_r+0x85c>
 8017c14:	ae13      	add	r6, sp, #76	; 0x4c
 8017c16:	e77f      	b.n	8017b18 <_vfiprintf_r+0xec>
 8017c18:	4648      	mov	r0, r9
 8017c1a:	f000 fdc3 	bl	80187a4 <_localeconv_r>
 8017c1e:	6843      	ldr	r3, [r0, #4]
 8017c20:	9309      	str	r3, [sp, #36]	; 0x24
 8017c22:	4618      	mov	r0, r3
 8017c24:	f7f0 fcfc 	bl	8008620 <strlen>
 8017c28:	9008      	str	r0, [sp, #32]
 8017c2a:	4648      	mov	r0, r9
 8017c2c:	f000 fdba 	bl	80187a4 <_localeconv_r>
 8017c30:	6883      	ldr	r3, [r0, #8]
 8017c32:	9307      	str	r3, [sp, #28]
 8017c34:	9b08      	ldr	r3, [sp, #32]
 8017c36:	b12b      	cbz	r3, 8017c44 <_vfiprintf_r+0x218>
 8017c38:	9b07      	ldr	r3, [sp, #28]
 8017c3a:	b11b      	cbz	r3, 8017c44 <_vfiprintf_r+0x218>
 8017c3c:	781b      	ldrb	r3, [r3, #0]
 8017c3e:	b10b      	cbz	r3, 8017c44 <_vfiprintf_r+0x218>
 8017c40:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8017c44:	9d02      	ldr	r5, [sp, #8]
 8017c46:	e777      	b.n	8017b38 <_vfiprintf_r+0x10c>
 8017c48:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d1f9      	bne.n	8017c44 <_vfiprintf_r+0x218>
 8017c50:	2320      	movs	r3, #32
 8017c52:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8017c56:	e7f5      	b.n	8017c44 <_vfiprintf_r+0x218>
 8017c58:	f04a 0a01 	orr.w	sl, sl, #1
 8017c5c:	e7f2      	b.n	8017c44 <_vfiprintf_r+0x218>
 8017c5e:	f854 3b04 	ldr.w	r3, [r4], #4
 8017c62:	9304      	str	r3, [sp, #16]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	daed      	bge.n	8017c44 <_vfiprintf_r+0x218>
 8017c68:	425b      	negs	r3, r3
 8017c6a:	9304      	str	r3, [sp, #16]
 8017c6c:	f04a 0a04 	orr.w	sl, sl, #4
 8017c70:	e7e8      	b.n	8017c44 <_vfiprintf_r+0x218>
 8017c72:	232b      	movs	r3, #43	; 0x2b
 8017c74:	e7ed      	b.n	8017c52 <_vfiprintf_r+0x226>
 8017c76:	9a02      	ldr	r2, [sp, #8]
 8017c78:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8017c7e:	d112      	bne.n	8017ca6 <_vfiprintf_r+0x27a>
 8017c80:	f854 3b04 	ldr.w	r3, [r4], #4
 8017c84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017c88:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8017c8c:	e7da      	b.n	8017c44 <_vfiprintf_r+0x218>
 8017c8e:	9b01      	ldr	r3, [sp, #4]
 8017c90:	200a      	movs	r0, #10
 8017c92:	fb00 1303 	mla	r3, r0, r3, r1
 8017c96:	9301      	str	r3, [sp, #4]
 8017c98:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017c9c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017ca0:	2909      	cmp	r1, #9
 8017ca2:	d9f4      	bls.n	8017c8e <_vfiprintf_r+0x262>
 8017ca4:	e74b      	b.n	8017b3e <_vfiprintf_r+0x112>
 8017ca6:	2100      	movs	r1, #0
 8017ca8:	9101      	str	r1, [sp, #4]
 8017caa:	e7f7      	b.n	8017c9c <_vfiprintf_r+0x270>
 8017cac:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8017cb0:	e7c8      	b.n	8017c44 <_vfiprintf_r+0x218>
 8017cb2:	2100      	movs	r1, #0
 8017cb4:	9a02      	ldr	r2, [sp, #8]
 8017cb6:	9104      	str	r1, [sp, #16]
 8017cb8:	9904      	ldr	r1, [sp, #16]
 8017cba:	3b30      	subs	r3, #48	; 0x30
 8017cbc:	200a      	movs	r0, #10
 8017cbe:	fb00 3301 	mla	r3, r0, r1, r3
 8017cc2:	9304      	str	r3, [sp, #16]
 8017cc4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017cc8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017ccc:	2909      	cmp	r1, #9
 8017cce:	d9f3      	bls.n	8017cb8 <_vfiprintf_r+0x28c>
 8017cd0:	e735      	b.n	8017b3e <_vfiprintf_r+0x112>
 8017cd2:	9b02      	ldr	r3, [sp, #8]
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	2b68      	cmp	r3, #104	; 0x68
 8017cd8:	bf01      	itttt	eq
 8017cda:	9b02      	ldreq	r3, [sp, #8]
 8017cdc:	3301      	addeq	r3, #1
 8017cde:	9302      	streq	r3, [sp, #8]
 8017ce0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8017ce4:	bf18      	it	ne
 8017ce6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8017cea:	e7ab      	b.n	8017c44 <_vfiprintf_r+0x218>
 8017cec:	9b02      	ldr	r3, [sp, #8]
 8017cee:	781b      	ldrb	r3, [r3, #0]
 8017cf0:	2b6c      	cmp	r3, #108	; 0x6c
 8017cf2:	d105      	bne.n	8017d00 <_vfiprintf_r+0x2d4>
 8017cf4:	9b02      	ldr	r3, [sp, #8]
 8017cf6:	3301      	adds	r3, #1
 8017cf8:	9302      	str	r3, [sp, #8]
 8017cfa:	f04a 0a20 	orr.w	sl, sl, #32
 8017cfe:	e7a1      	b.n	8017c44 <_vfiprintf_r+0x218>
 8017d00:	f04a 0a10 	orr.w	sl, sl, #16
 8017d04:	e79e      	b.n	8017c44 <_vfiprintf_r+0x218>
 8017d06:	46a0      	mov	r8, r4
 8017d08:	f858 3b04 	ldr.w	r3, [r8], #4
 8017d0c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8017d10:	2300      	movs	r3, #0
 8017d12:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8017d16:	2201      	movs	r2, #1
 8017d18:	9201      	str	r2, [sp, #4]
 8017d1a:	461d      	mov	r5, r3
 8017d1c:	f10d 0b8c 	add.w	fp, sp, #140	; 0x8c
 8017d20:	e0a9      	b.n	8017e76 <_vfiprintf_r+0x44a>
 8017d22:	f04a 0a10 	orr.w	sl, sl, #16
 8017d26:	f01a 0f20 	tst.w	sl, #32
 8017d2a:	d011      	beq.n	8017d50 <_vfiprintf_r+0x324>
 8017d2c:	3407      	adds	r4, #7
 8017d2e:	f024 0307 	bic.w	r3, r4, #7
 8017d32:	4698      	mov	r8, r3
 8017d34:	685d      	ldr	r5, [r3, #4]
 8017d36:	f858 4b08 	ldr.w	r4, [r8], #8
 8017d3a:	2d00      	cmp	r5, #0
 8017d3c:	da06      	bge.n	8017d4c <_vfiprintf_r+0x320>
 8017d3e:	4264      	negs	r4, r4
 8017d40:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8017d44:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8017d48:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8017d4c:	2301      	movs	r3, #1
 8017d4e:	e04a      	b.n	8017de6 <_vfiprintf_r+0x3ba>
 8017d50:	46a0      	mov	r8, r4
 8017d52:	f01a 0f10 	tst.w	sl, #16
 8017d56:	f858 5b04 	ldr.w	r5, [r8], #4
 8017d5a:	d002      	beq.n	8017d62 <_vfiprintf_r+0x336>
 8017d5c:	462c      	mov	r4, r5
 8017d5e:	17ed      	asrs	r5, r5, #31
 8017d60:	e7eb      	b.n	8017d3a <_vfiprintf_r+0x30e>
 8017d62:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017d66:	d003      	beq.n	8017d70 <_vfiprintf_r+0x344>
 8017d68:	b22c      	sxth	r4, r5
 8017d6a:	f345 35c0 	sbfx	r5, r5, #15, #1
 8017d6e:	e7e4      	b.n	8017d3a <_vfiprintf_r+0x30e>
 8017d70:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017d74:	d0f2      	beq.n	8017d5c <_vfiprintf_r+0x330>
 8017d76:	b26c      	sxtb	r4, r5
 8017d78:	f345 15c0 	sbfx	r5, r5, #7, #1
 8017d7c:	e7dd      	b.n	8017d3a <_vfiprintf_r+0x30e>
 8017d7e:	f01a 0f20 	tst.w	sl, #32
 8017d82:	f104 0804 	add.w	r8, r4, #4
 8017d86:	d007      	beq.n	8017d98 <_vfiprintf_r+0x36c>
 8017d88:	9a03      	ldr	r2, [sp, #12]
 8017d8a:	6823      	ldr	r3, [r4, #0]
 8017d8c:	9903      	ldr	r1, [sp, #12]
 8017d8e:	17d2      	asrs	r2, r2, #31
 8017d90:	e9c3 1200 	strd	r1, r2, [r3]
 8017d94:	4644      	mov	r4, r8
 8017d96:	e6a9      	b.n	8017aec <_vfiprintf_r+0xc0>
 8017d98:	f01a 0f10 	tst.w	sl, #16
 8017d9c:	d003      	beq.n	8017da6 <_vfiprintf_r+0x37a>
 8017d9e:	6823      	ldr	r3, [r4, #0]
 8017da0:	9a03      	ldr	r2, [sp, #12]
 8017da2:	601a      	str	r2, [r3, #0]
 8017da4:	e7f6      	b.n	8017d94 <_vfiprintf_r+0x368>
 8017da6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017daa:	d003      	beq.n	8017db4 <_vfiprintf_r+0x388>
 8017dac:	6823      	ldr	r3, [r4, #0]
 8017dae:	9a03      	ldr	r2, [sp, #12]
 8017db0:	801a      	strh	r2, [r3, #0]
 8017db2:	e7ef      	b.n	8017d94 <_vfiprintf_r+0x368>
 8017db4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017db8:	d0f1      	beq.n	8017d9e <_vfiprintf_r+0x372>
 8017dba:	6823      	ldr	r3, [r4, #0]
 8017dbc:	9a03      	ldr	r2, [sp, #12]
 8017dbe:	701a      	strb	r2, [r3, #0]
 8017dc0:	e7e8      	b.n	8017d94 <_vfiprintf_r+0x368>
 8017dc2:	f04a 0a10 	orr.w	sl, sl, #16
 8017dc6:	f01a 0320 	ands.w	r3, sl, #32
 8017dca:	d01f      	beq.n	8017e0c <_vfiprintf_r+0x3e0>
 8017dcc:	3407      	adds	r4, #7
 8017dce:	f024 0307 	bic.w	r3, r4, #7
 8017dd2:	4698      	mov	r8, r3
 8017dd4:	685d      	ldr	r5, [r3, #4]
 8017dd6:	f858 4b08 	ldr.w	r4, [r8], #8
 8017dda:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8017dde:	2300      	movs	r3, #0
 8017de0:	2200      	movs	r2, #0
 8017de2:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8017de6:	9a01      	ldr	r2, [sp, #4]
 8017de8:	3201      	adds	r2, #1
 8017dea:	f000 827b 	beq.w	80182e4 <_vfiprintf_r+0x8b8>
 8017dee:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8017df2:	9205      	str	r2, [sp, #20]
 8017df4:	ea54 0205 	orrs.w	r2, r4, r5
 8017df8:	f040 827a 	bne.w	80182f0 <_vfiprintf_r+0x8c4>
 8017dfc:	9a01      	ldr	r2, [sp, #4]
 8017dfe:	2a00      	cmp	r2, #0
 8017e00:	f000 81b2 	beq.w	8018168 <_vfiprintf_r+0x73c>
 8017e04:	2b01      	cmp	r3, #1
 8017e06:	f040 8276 	bne.w	80182f6 <_vfiprintf_r+0x8ca>
 8017e0a:	e151      	b.n	80180b0 <_vfiprintf_r+0x684>
 8017e0c:	46a0      	mov	r8, r4
 8017e0e:	f01a 0510 	ands.w	r5, sl, #16
 8017e12:	f858 4b04 	ldr.w	r4, [r8], #4
 8017e16:	d001      	beq.n	8017e1c <_vfiprintf_r+0x3f0>
 8017e18:	461d      	mov	r5, r3
 8017e1a:	e7de      	b.n	8017dda <_vfiprintf_r+0x3ae>
 8017e1c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8017e20:	d001      	beq.n	8017e26 <_vfiprintf_r+0x3fa>
 8017e22:	b2a4      	uxth	r4, r4
 8017e24:	e7d9      	b.n	8017dda <_vfiprintf_r+0x3ae>
 8017e26:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8017e2a:	d0d6      	beq.n	8017dda <_vfiprintf_r+0x3ae>
 8017e2c:	b2e4      	uxtb	r4, r4
 8017e2e:	e7f3      	b.n	8017e18 <_vfiprintf_r+0x3ec>
 8017e30:	46a0      	mov	r8, r4
 8017e32:	f647 0330 	movw	r3, #30768	; 0x7830
 8017e36:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8017e3a:	f858 4b04 	ldr.w	r4, [r8], #4
 8017e3e:	4b9f      	ldr	r3, [pc, #636]	; (80180bc <_vfiprintf_r+0x690>)
 8017e40:	9306      	str	r3, [sp, #24]
 8017e42:	2500      	movs	r5, #0
 8017e44:	f04a 0a02 	orr.w	sl, sl, #2
 8017e48:	2302      	movs	r3, #2
 8017e4a:	e7c9      	b.n	8017de0 <_vfiprintf_r+0x3b4>
 8017e4c:	9b01      	ldr	r3, [sp, #4]
 8017e4e:	46a0      	mov	r8, r4
 8017e50:	2500      	movs	r5, #0
 8017e52:	1c5c      	adds	r4, r3, #1
 8017e54:	f858 bb04 	ldr.w	fp, [r8], #4
 8017e58:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
 8017e5c:	f000 80cf 	beq.w	8017ffe <_vfiprintf_r+0x5d2>
 8017e60:	461a      	mov	r2, r3
 8017e62:	4629      	mov	r1, r5
 8017e64:	4658      	mov	r0, fp
 8017e66:	f7f0 fb8b 	bl	8008580 <memchr>
 8017e6a:	2800      	cmp	r0, #0
 8017e6c:	f000 8191 	beq.w	8018192 <_vfiprintf_r+0x766>
 8017e70:	eba0 030b 	sub.w	r3, r0, fp
 8017e74:	9301      	str	r3, [sp, #4]
 8017e76:	9b01      	ldr	r3, [sp, #4]
 8017e78:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8017e7c:	42ab      	cmp	r3, r5
 8017e7e:	bfb8      	it	lt
 8017e80:	462b      	movlt	r3, r5
 8017e82:	9305      	str	r3, [sp, #20]
 8017e84:	b10a      	cbz	r2, 8017e8a <_vfiprintf_r+0x45e>
 8017e86:	3301      	adds	r3, #1
 8017e88:	9305      	str	r3, [sp, #20]
 8017e8a:	f01a 0302 	ands.w	r3, sl, #2
 8017e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8017e90:	bf1e      	ittt	ne
 8017e92:	9b05      	ldrne	r3, [sp, #20]
 8017e94:	3302      	addne	r3, #2
 8017e96:	9305      	strne	r3, [sp, #20]
 8017e98:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8017e9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e9e:	d11f      	bne.n	8017ee0 <_vfiprintf_r+0x4b4>
 8017ea0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017ea4:	1a9c      	subs	r4, r3, r2
 8017ea6:	2c00      	cmp	r4, #0
 8017ea8:	dd1a      	ble.n	8017ee0 <_vfiprintf_r+0x4b4>
 8017eaa:	4b85      	ldr	r3, [pc, #532]	; (80180c0 <_vfiprintf_r+0x694>)
 8017eac:	6033      	str	r3, [r6, #0]
 8017eae:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8017eb2:	2c10      	cmp	r4, #16
 8017eb4:	f102 0201 	add.w	r2, r2, #1
 8017eb8:	f106 0008 	add.w	r0, r6, #8
 8017ebc:	f300 816b 	bgt.w	8018196 <_vfiprintf_r+0x76a>
 8017ec0:	6074      	str	r4, [r6, #4]
 8017ec2:	2a07      	cmp	r2, #7
 8017ec4:	440c      	add	r4, r1
 8017ec6:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 8017eca:	f340 8179 	ble.w	80181c0 <_vfiprintf_r+0x794>
 8017ece:	aa10      	add	r2, sp, #64	; 0x40
 8017ed0:	4639      	mov	r1, r7
 8017ed2:	4648      	mov	r0, r9
 8017ed4:	f7ff fd78 	bl	80179c8 <__sprint_r>
 8017ed8:	2800      	cmp	r0, #0
 8017eda:	f040 81d5 	bne.w	8018288 <_vfiprintf_r+0x85c>
 8017ede:	ae13      	add	r6, sp, #76	; 0x4c
 8017ee0:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8017ee4:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8017ee8:	b160      	cbz	r0, 8017f04 <_vfiprintf_r+0x4d8>
 8017eea:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
 8017eee:	3201      	adds	r2, #1
 8017ef0:	6030      	str	r0, [r6, #0]
 8017ef2:	2001      	movs	r0, #1
 8017ef4:	4401      	add	r1, r0
 8017ef6:	2a07      	cmp	r2, #7
 8017ef8:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8017efc:	6070      	str	r0, [r6, #4]
 8017efe:	f300 8161 	bgt.w	80181c4 <_vfiprintf_r+0x798>
 8017f02:	3608      	adds	r6, #8
 8017f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f06:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8017f0a:	b15b      	cbz	r3, 8017f24 <_vfiprintf_r+0x4f8>
 8017f0c:	a80f      	add	r0, sp, #60	; 0x3c
 8017f0e:	3201      	adds	r2, #1
 8017f10:	6030      	str	r0, [r6, #0]
 8017f12:	2002      	movs	r0, #2
 8017f14:	4401      	add	r1, r0
 8017f16:	2a07      	cmp	r2, #7
 8017f18:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8017f1c:	6070      	str	r0, [r6, #4]
 8017f1e:	f300 815a 	bgt.w	80181d6 <_vfiprintf_r+0x7aa>
 8017f22:	3608      	adds	r6, #8
 8017f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f26:	2b80      	cmp	r3, #128	; 0x80
 8017f28:	d11f      	bne.n	8017f6a <_vfiprintf_r+0x53e>
 8017f2a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017f2e:	1a9c      	subs	r4, r3, r2
 8017f30:	2c00      	cmp	r4, #0
 8017f32:	dd1a      	ble.n	8017f6a <_vfiprintf_r+0x53e>
 8017f34:	4b63      	ldr	r3, [pc, #396]	; (80180c4 <_vfiprintf_r+0x698>)
 8017f36:	6033      	str	r3, [r6, #0]
 8017f38:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8017f3c:	2c10      	cmp	r4, #16
 8017f3e:	f102 0201 	add.w	r2, r2, #1
 8017f42:	f106 0008 	add.w	r0, r6, #8
 8017f46:	f300 814f 	bgt.w	80181e8 <_vfiprintf_r+0x7bc>
 8017f4a:	6074      	str	r4, [r6, #4]
 8017f4c:	2a07      	cmp	r2, #7
 8017f4e:	440c      	add	r4, r1
 8017f50:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 8017f54:	f340 815d 	ble.w	8018212 <_vfiprintf_r+0x7e6>
 8017f58:	aa10      	add	r2, sp, #64	; 0x40
 8017f5a:	4639      	mov	r1, r7
 8017f5c:	4648      	mov	r0, r9
 8017f5e:	f7ff fd33 	bl	80179c8 <__sprint_r>
 8017f62:	2800      	cmp	r0, #0
 8017f64:	f040 8190 	bne.w	8018288 <_vfiprintf_r+0x85c>
 8017f68:	ae13      	add	r6, sp, #76	; 0x4c
 8017f6a:	9b01      	ldr	r3, [sp, #4]
 8017f6c:	1aec      	subs	r4, r5, r3
 8017f6e:	2c00      	cmp	r4, #0
 8017f70:	dd1b      	ble.n	8017faa <_vfiprintf_r+0x57e>
 8017f72:	4d54      	ldr	r5, [pc, #336]	; (80180c4 <_vfiprintf_r+0x698>)
 8017f74:	2310      	movs	r3, #16
 8017f76:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8017f7a:	2c10      	cmp	r4, #16
 8017f7c:	f102 0201 	add.w	r2, r2, #1
 8017f80:	f106 0008 	add.w	r0, r6, #8
 8017f84:	6035      	str	r5, [r6, #0]
 8017f86:	f300 8146 	bgt.w	8018216 <_vfiprintf_r+0x7ea>
 8017f8a:	6074      	str	r4, [r6, #4]
 8017f8c:	2a07      	cmp	r2, #7
 8017f8e:	440c      	add	r4, r1
 8017f90:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 8017f94:	f340 8150 	ble.w	8018238 <_vfiprintf_r+0x80c>
 8017f98:	aa10      	add	r2, sp, #64	; 0x40
 8017f9a:	4639      	mov	r1, r7
 8017f9c:	4648      	mov	r0, r9
 8017f9e:	f7ff fd13 	bl	80179c8 <__sprint_r>
 8017fa2:	2800      	cmp	r0, #0
 8017fa4:	f040 8170 	bne.w	8018288 <_vfiprintf_r+0x85c>
 8017fa8:	ae13      	add	r6, sp, #76	; 0x4c
 8017faa:	9b01      	ldr	r3, [sp, #4]
 8017fac:	9a01      	ldr	r2, [sp, #4]
 8017fae:	6073      	str	r3, [r6, #4]
 8017fb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017fb2:	f8c6 b000 	str.w	fp, [r6]
 8017fb6:	4413      	add	r3, r2
 8017fb8:	9312      	str	r3, [sp, #72]	; 0x48
 8017fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017fbc:	3301      	adds	r3, #1
 8017fbe:	2b07      	cmp	r3, #7
 8017fc0:	9311      	str	r3, [sp, #68]	; 0x44
 8017fc2:	f300 813b 	bgt.w	801823c <_vfiprintf_r+0x810>
 8017fc6:	f106 0308 	add.w	r3, r6, #8
 8017fca:	f01a 0f04 	tst.w	sl, #4
 8017fce:	f040 813d 	bne.w	801824c <_vfiprintf_r+0x820>
 8017fd2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8017fd6:	9905      	ldr	r1, [sp, #20]
 8017fd8:	428a      	cmp	r2, r1
 8017fda:	bfac      	ite	ge
 8017fdc:	189b      	addge	r3, r3, r2
 8017fde:	185b      	addlt	r3, r3, r1
 8017fe0:	9303      	str	r3, [sp, #12]
 8017fe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017fe4:	b13b      	cbz	r3, 8017ff6 <_vfiprintf_r+0x5ca>
 8017fe6:	aa10      	add	r2, sp, #64	; 0x40
 8017fe8:	4639      	mov	r1, r7
 8017fea:	4648      	mov	r0, r9
 8017fec:	f7ff fcec 	bl	80179c8 <__sprint_r>
 8017ff0:	2800      	cmp	r0, #0
 8017ff2:	f040 8149 	bne.w	8018288 <_vfiprintf_r+0x85c>
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	9311      	str	r3, [sp, #68]	; 0x44
 8017ffa:	ae13      	add	r6, sp, #76	; 0x4c
 8017ffc:	e6ca      	b.n	8017d94 <_vfiprintf_r+0x368>
 8017ffe:	4658      	mov	r0, fp
 8018000:	f7f0 fb0e 	bl	8008620 <strlen>
 8018004:	9001      	str	r0, [sp, #4]
 8018006:	e736      	b.n	8017e76 <_vfiprintf_r+0x44a>
 8018008:	f04a 0a10 	orr.w	sl, sl, #16
 801800c:	f01a 0320 	ands.w	r3, sl, #32
 8018010:	d008      	beq.n	8018024 <_vfiprintf_r+0x5f8>
 8018012:	3407      	adds	r4, #7
 8018014:	f024 0307 	bic.w	r3, r4, #7
 8018018:	4698      	mov	r8, r3
 801801a:	685d      	ldr	r5, [r3, #4]
 801801c:	f858 4b08 	ldr.w	r4, [r8], #8
 8018020:	2301      	movs	r3, #1
 8018022:	e6dd      	b.n	8017de0 <_vfiprintf_r+0x3b4>
 8018024:	46a0      	mov	r8, r4
 8018026:	f01a 0510 	ands.w	r5, sl, #16
 801802a:	f858 4b04 	ldr.w	r4, [r8], #4
 801802e:	d001      	beq.n	8018034 <_vfiprintf_r+0x608>
 8018030:	461d      	mov	r5, r3
 8018032:	e7f5      	b.n	8018020 <_vfiprintf_r+0x5f4>
 8018034:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8018038:	d001      	beq.n	801803e <_vfiprintf_r+0x612>
 801803a:	b2a4      	uxth	r4, r4
 801803c:	e7f0      	b.n	8018020 <_vfiprintf_r+0x5f4>
 801803e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8018042:	d0ed      	beq.n	8018020 <_vfiprintf_r+0x5f4>
 8018044:	b2e4      	uxtb	r4, r4
 8018046:	e7f3      	b.n	8018030 <_vfiprintf_r+0x604>
 8018048:	4a1f      	ldr	r2, [pc, #124]	; (80180c8 <_vfiprintf_r+0x69c>)
 801804a:	9206      	str	r2, [sp, #24]
 801804c:	f01a 0220 	ands.w	r2, sl, #32
 8018050:	d018      	beq.n	8018084 <_vfiprintf_r+0x658>
 8018052:	3407      	adds	r4, #7
 8018054:	f024 0207 	bic.w	r2, r4, #7
 8018058:	4690      	mov	r8, r2
 801805a:	6855      	ldr	r5, [r2, #4]
 801805c:	f858 4b08 	ldr.w	r4, [r8], #8
 8018060:	f01a 0f01 	tst.w	sl, #1
 8018064:	d009      	beq.n	801807a <_vfiprintf_r+0x64e>
 8018066:	ea54 0205 	orrs.w	r2, r4, r5
 801806a:	bf1f      	itttt	ne
 801806c:	2230      	movne	r2, #48	; 0x30
 801806e:	f88d 203c 	strbne.w	r2, [sp, #60]	; 0x3c
 8018072:	f88d 303d 	strbne.w	r3, [sp, #61]	; 0x3d
 8018076:	f04a 0a02 	orrne.w	sl, sl, #2
 801807a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801807e:	e6e3      	b.n	8017e48 <_vfiprintf_r+0x41c>
 8018080:	4a0e      	ldr	r2, [pc, #56]	; (80180bc <_vfiprintf_r+0x690>)
 8018082:	e7e2      	b.n	801804a <_vfiprintf_r+0x61e>
 8018084:	46a0      	mov	r8, r4
 8018086:	f01a 0510 	ands.w	r5, sl, #16
 801808a:	f858 4b04 	ldr.w	r4, [r8], #4
 801808e:	d001      	beq.n	8018094 <_vfiprintf_r+0x668>
 8018090:	4615      	mov	r5, r2
 8018092:	e7e5      	b.n	8018060 <_vfiprintf_r+0x634>
 8018094:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8018098:	d001      	beq.n	801809e <_vfiprintf_r+0x672>
 801809a:	b2a4      	uxth	r4, r4
 801809c:	e7e0      	b.n	8018060 <_vfiprintf_r+0x634>
 801809e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80180a2:	d0dd      	beq.n	8018060 <_vfiprintf_r+0x634>
 80180a4:	b2e4      	uxtb	r4, r4
 80180a6:	e7f3      	b.n	8018090 <_vfiprintf_r+0x664>
 80180a8:	2c0a      	cmp	r4, #10
 80180aa:	f175 0300 	sbcs.w	r3, r5, #0
 80180ae:	d20d      	bcs.n	80180cc <_vfiprintf_r+0x6a0>
 80180b0:	3430      	adds	r4, #48	; 0x30
 80180b2:	f88d 40ef 	strb.w	r4, [sp, #239]	; 0xef
 80180b6:	f10d 0bef 	add.w	fp, sp, #239	; 0xef
 80180ba:	e138      	b.n	801832e <_vfiprintf_r+0x902>
 80180bc:	0801b765 	.word	0x0801b765
 80180c0:	0801b7c9 	.word	0x0801b7c9
 80180c4:	0801b7d9 	.word	0x0801b7d9
 80180c8:	0801b776 	.word	0x0801b776
 80180cc:	ab3c      	add	r3, sp, #240	; 0xf0
 80180ce:	930a      	str	r3, [sp, #40]	; 0x28
 80180d0:	9b05      	ldr	r3, [sp, #20]
 80180d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80180d6:	f04f 0a00 	mov.w	sl, #0
 80180da:	930b      	str	r3, [sp, #44]	; 0x2c
 80180dc:	220a      	movs	r2, #10
 80180de:	2300      	movs	r3, #0
 80180e0:	4620      	mov	r0, r4
 80180e2:	4629      	mov	r1, r5
 80180e4:	f7f1 f886 	bl	80091f4 <__aeabi_uldivmod>
 80180e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180ea:	3230      	adds	r2, #48	; 0x30
 80180ec:	f103 3bff 	add.w	fp, r3, #4294967295
 80180f0:	f803 2c01 	strb.w	r2, [r3, #-1]
 80180f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80180fa:	f10a 0a01 	add.w	sl, sl, #1
 80180fe:	b1cb      	cbz	r3, 8018134 <_vfiprintf_r+0x708>
 8018100:	9b07      	ldr	r3, [sp, #28]
 8018102:	781a      	ldrb	r2, [r3, #0]
 8018104:	4552      	cmp	r2, sl
 8018106:	d115      	bne.n	8018134 <_vfiprintf_r+0x708>
 8018108:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801810c:	d012      	beq.n	8018134 <_vfiprintf_r+0x708>
 801810e:	2c0a      	cmp	r4, #10
 8018110:	f175 0200 	sbcs.w	r2, r5, #0
 8018114:	d30e      	bcc.n	8018134 <_vfiprintf_r+0x708>
 8018116:	9b08      	ldr	r3, [sp, #32]
 8018118:	9909      	ldr	r1, [sp, #36]	; 0x24
 801811a:	ebab 0b03 	sub.w	fp, fp, r3
 801811e:	461a      	mov	r2, r3
 8018120:	4658      	mov	r0, fp
 8018122:	f000 fb26 	bl	8018772 <strncpy>
 8018126:	9b07      	ldr	r3, [sp, #28]
 8018128:	785a      	ldrb	r2, [r3, #1]
 801812a:	b16a      	cbz	r2, 8018148 <_vfiprintf_r+0x71c>
 801812c:	3301      	adds	r3, #1
 801812e:	9307      	str	r3, [sp, #28]
 8018130:	f04f 0a00 	mov.w	sl, #0
 8018134:	2c0a      	cmp	r4, #10
 8018136:	f175 0500 	sbcs.w	r5, r5, #0
 801813a:	f0c0 80f8 	bcc.w	801832e <_vfiprintf_r+0x902>
 801813e:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8018142:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8018146:	e7c9      	b.n	80180dc <_vfiprintf_r+0x6b0>
 8018148:	4692      	mov	sl, r2
 801814a:	e7f3      	b.n	8018134 <_vfiprintf_r+0x708>
 801814c:	f004 020f 	and.w	r2, r4, #15
 8018150:	9b06      	ldr	r3, [sp, #24]
 8018152:	0924      	lsrs	r4, r4, #4
 8018154:	5c9a      	ldrb	r2, [r3, r2]
 8018156:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 801815a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801815e:	092d      	lsrs	r5, r5, #4
 8018160:	ea54 0205 	orrs.w	r2, r4, r5
 8018164:	d1f2      	bne.n	801814c <_vfiprintf_r+0x720>
 8018166:	e0e2      	b.n	801832e <_vfiprintf_r+0x902>
 8018168:	b933      	cbnz	r3, 8018178 <_vfiprintf_r+0x74c>
 801816a:	f01a 0f01 	tst.w	sl, #1
 801816e:	d003      	beq.n	8018178 <_vfiprintf_r+0x74c>
 8018170:	2330      	movs	r3, #48	; 0x30
 8018172:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 8018176:	e79e      	b.n	80180b6 <_vfiprintf_r+0x68a>
 8018178:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 801817c:	e0d7      	b.n	801832e <_vfiprintf_r+0x902>
 801817e:	2b00      	cmp	r3, #0
 8018180:	f000 80a3 	beq.w	80182ca <_vfiprintf_r+0x89e>
 8018184:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8018188:	2300      	movs	r3, #0
 801818a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801818e:	46a0      	mov	r8, r4
 8018190:	e5c1      	b.n	8017d16 <_vfiprintf_r+0x2ea>
 8018192:	4605      	mov	r5, r0
 8018194:	e66f      	b.n	8017e76 <_vfiprintf_r+0x44a>
 8018196:	f04f 0c10 	mov.w	ip, #16
 801819a:	4461      	add	r1, ip
 801819c:	2a07      	cmp	r2, #7
 801819e:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 80181a2:	f8c6 c004 	str.w	ip, [r6, #4]
 80181a6:	dd08      	ble.n	80181ba <_vfiprintf_r+0x78e>
 80181a8:	aa10      	add	r2, sp, #64	; 0x40
 80181aa:	4639      	mov	r1, r7
 80181ac:	4648      	mov	r0, r9
 80181ae:	f7ff fc0b 	bl	80179c8 <__sprint_r>
 80181b2:	2800      	cmp	r0, #0
 80181b4:	d168      	bne.n	8018288 <_vfiprintf_r+0x85c>
 80181b6:	4b62      	ldr	r3, [pc, #392]	; (8018340 <_vfiprintf_r+0x914>)
 80181b8:	a813      	add	r0, sp, #76	; 0x4c
 80181ba:	3c10      	subs	r4, #16
 80181bc:	4606      	mov	r6, r0
 80181be:	e675      	b.n	8017eac <_vfiprintf_r+0x480>
 80181c0:	4606      	mov	r6, r0
 80181c2:	e68d      	b.n	8017ee0 <_vfiprintf_r+0x4b4>
 80181c4:	aa10      	add	r2, sp, #64	; 0x40
 80181c6:	4639      	mov	r1, r7
 80181c8:	4648      	mov	r0, r9
 80181ca:	f7ff fbfd 	bl	80179c8 <__sprint_r>
 80181ce:	2800      	cmp	r0, #0
 80181d0:	d15a      	bne.n	8018288 <_vfiprintf_r+0x85c>
 80181d2:	ae13      	add	r6, sp, #76	; 0x4c
 80181d4:	e696      	b.n	8017f04 <_vfiprintf_r+0x4d8>
 80181d6:	aa10      	add	r2, sp, #64	; 0x40
 80181d8:	4639      	mov	r1, r7
 80181da:	4648      	mov	r0, r9
 80181dc:	f7ff fbf4 	bl	80179c8 <__sprint_r>
 80181e0:	2800      	cmp	r0, #0
 80181e2:	d151      	bne.n	8018288 <_vfiprintf_r+0x85c>
 80181e4:	ae13      	add	r6, sp, #76	; 0x4c
 80181e6:	e69d      	b.n	8017f24 <_vfiprintf_r+0x4f8>
 80181e8:	f04f 0c10 	mov.w	ip, #16
 80181ec:	4461      	add	r1, ip
 80181ee:	2a07      	cmp	r2, #7
 80181f0:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 80181f4:	f8c6 c004 	str.w	ip, [r6, #4]
 80181f8:	dd08      	ble.n	801820c <_vfiprintf_r+0x7e0>
 80181fa:	aa10      	add	r2, sp, #64	; 0x40
 80181fc:	4639      	mov	r1, r7
 80181fe:	4648      	mov	r0, r9
 8018200:	f7ff fbe2 	bl	80179c8 <__sprint_r>
 8018204:	2800      	cmp	r0, #0
 8018206:	d13f      	bne.n	8018288 <_vfiprintf_r+0x85c>
 8018208:	4b4e      	ldr	r3, [pc, #312]	; (8018344 <_vfiprintf_r+0x918>)
 801820a:	a813      	add	r0, sp, #76	; 0x4c
 801820c:	3c10      	subs	r4, #16
 801820e:	4606      	mov	r6, r0
 8018210:	e691      	b.n	8017f36 <_vfiprintf_r+0x50a>
 8018212:	4606      	mov	r6, r0
 8018214:	e6a9      	b.n	8017f6a <_vfiprintf_r+0x53e>
 8018216:	3110      	adds	r1, #16
 8018218:	2a07      	cmp	r2, #7
 801821a:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801821e:	6073      	str	r3, [r6, #4]
 8018220:	dd07      	ble.n	8018232 <_vfiprintf_r+0x806>
 8018222:	aa10      	add	r2, sp, #64	; 0x40
 8018224:	4639      	mov	r1, r7
 8018226:	4648      	mov	r0, r9
 8018228:	f7ff fbce 	bl	80179c8 <__sprint_r>
 801822c:	bb60      	cbnz	r0, 8018288 <_vfiprintf_r+0x85c>
 801822e:	a813      	add	r0, sp, #76	; 0x4c
 8018230:	2310      	movs	r3, #16
 8018232:	3c10      	subs	r4, #16
 8018234:	4606      	mov	r6, r0
 8018236:	e69e      	b.n	8017f76 <_vfiprintf_r+0x54a>
 8018238:	4606      	mov	r6, r0
 801823a:	e6b6      	b.n	8017faa <_vfiprintf_r+0x57e>
 801823c:	aa10      	add	r2, sp, #64	; 0x40
 801823e:	4639      	mov	r1, r7
 8018240:	4648      	mov	r0, r9
 8018242:	f7ff fbc1 	bl	80179c8 <__sprint_r>
 8018246:	b9f8      	cbnz	r0, 8018288 <_vfiprintf_r+0x85c>
 8018248:	ab13      	add	r3, sp, #76	; 0x4c
 801824a:	e6be      	b.n	8017fca <_vfiprintf_r+0x59e>
 801824c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8018250:	1a54      	subs	r4, r2, r1
 8018252:	2c00      	cmp	r4, #0
 8018254:	f77f aebd 	ble.w	8017fd2 <_vfiprintf_r+0x5a6>
 8018258:	4d39      	ldr	r5, [pc, #228]	; (8018340 <_vfiprintf_r+0x914>)
 801825a:	2610      	movs	r6, #16
 801825c:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8018260:	2c10      	cmp	r4, #16
 8018262:	f102 0201 	add.w	r2, r2, #1
 8018266:	601d      	str	r5, [r3, #0]
 8018268:	dc1d      	bgt.n	80182a6 <_vfiprintf_r+0x87a>
 801826a:	605c      	str	r4, [r3, #4]
 801826c:	2a07      	cmp	r2, #7
 801826e:	440c      	add	r4, r1
 8018270:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 8018274:	f77f aead 	ble.w	8017fd2 <_vfiprintf_r+0x5a6>
 8018278:	aa10      	add	r2, sp, #64	; 0x40
 801827a:	4639      	mov	r1, r7
 801827c:	4648      	mov	r0, r9
 801827e:	f7ff fba3 	bl	80179c8 <__sprint_r>
 8018282:	2800      	cmp	r0, #0
 8018284:	f43f aea5 	beq.w	8017fd2 <_vfiprintf_r+0x5a6>
 8018288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801828a:	07d9      	lsls	r1, r3, #31
 801828c:	d405      	bmi.n	801829a <_vfiprintf_r+0x86e>
 801828e:	89bb      	ldrh	r3, [r7, #12]
 8018290:	059a      	lsls	r2, r3, #22
 8018292:	d402      	bmi.n	801829a <_vfiprintf_r+0x86e>
 8018294:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8018296:	f7fc fa48 	bl	801472a <__retarget_lock_release_recursive>
 801829a:	89bb      	ldrh	r3, [r7, #12]
 801829c:	065b      	lsls	r3, r3, #25
 801829e:	f57f abf6 	bpl.w	8017a8e <_vfiprintf_r+0x62>
 80182a2:	f7ff bbf1 	b.w	8017a88 <_vfiprintf_r+0x5c>
 80182a6:	3110      	adds	r1, #16
 80182a8:	2a07      	cmp	r2, #7
 80182aa:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 80182ae:	605e      	str	r6, [r3, #4]
 80182b0:	dc02      	bgt.n	80182b8 <_vfiprintf_r+0x88c>
 80182b2:	3308      	adds	r3, #8
 80182b4:	3c10      	subs	r4, #16
 80182b6:	e7d1      	b.n	801825c <_vfiprintf_r+0x830>
 80182b8:	aa10      	add	r2, sp, #64	; 0x40
 80182ba:	4639      	mov	r1, r7
 80182bc:	4648      	mov	r0, r9
 80182be:	f7ff fb83 	bl	80179c8 <__sprint_r>
 80182c2:	2800      	cmp	r0, #0
 80182c4:	d1e0      	bne.n	8018288 <_vfiprintf_r+0x85c>
 80182c6:	ab13      	add	r3, sp, #76	; 0x4c
 80182c8:	e7f4      	b.n	80182b4 <_vfiprintf_r+0x888>
 80182ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80182cc:	b913      	cbnz	r3, 80182d4 <_vfiprintf_r+0x8a8>
 80182ce:	2300      	movs	r3, #0
 80182d0:	9311      	str	r3, [sp, #68]	; 0x44
 80182d2:	e7d9      	b.n	8018288 <_vfiprintf_r+0x85c>
 80182d4:	aa10      	add	r2, sp, #64	; 0x40
 80182d6:	4639      	mov	r1, r7
 80182d8:	4648      	mov	r0, r9
 80182da:	f7ff fb75 	bl	80179c8 <__sprint_r>
 80182de:	2800      	cmp	r0, #0
 80182e0:	d0f5      	beq.n	80182ce <_vfiprintf_r+0x8a2>
 80182e2:	e7d1      	b.n	8018288 <_vfiprintf_r+0x85c>
 80182e4:	ea54 0205 	orrs.w	r2, r4, r5
 80182e8:	f8cd a014 	str.w	sl, [sp, #20]
 80182ec:	f43f ad8a 	beq.w	8017e04 <_vfiprintf_r+0x3d8>
 80182f0:	2b01      	cmp	r3, #1
 80182f2:	f43f aed9 	beq.w	80180a8 <_vfiprintf_r+0x67c>
 80182f6:	2b02      	cmp	r3, #2
 80182f8:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 80182fc:	f43f af26 	beq.w	801814c <_vfiprintf_r+0x720>
 8018300:	f004 0207 	and.w	r2, r4, #7
 8018304:	08e4      	lsrs	r4, r4, #3
 8018306:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801830a:	08ed      	lsrs	r5, r5, #3
 801830c:	3230      	adds	r2, #48	; 0x30
 801830e:	ea54 0005 	orrs.w	r0, r4, r5
 8018312:	4659      	mov	r1, fp
 8018314:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8018318:	d1f2      	bne.n	8018300 <_vfiprintf_r+0x8d4>
 801831a:	9b05      	ldr	r3, [sp, #20]
 801831c:	07d8      	lsls	r0, r3, #31
 801831e:	d506      	bpl.n	801832e <_vfiprintf_r+0x902>
 8018320:	2a30      	cmp	r2, #48	; 0x30
 8018322:	d004      	beq.n	801832e <_vfiprintf_r+0x902>
 8018324:	2230      	movs	r2, #48	; 0x30
 8018326:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801832a:	f1a1 0b02 	sub.w	fp, r1, #2
 801832e:	ab3c      	add	r3, sp, #240	; 0xf0
 8018330:	eba3 030b 	sub.w	r3, r3, fp
 8018334:	9d01      	ldr	r5, [sp, #4]
 8018336:	f8dd a014 	ldr.w	sl, [sp, #20]
 801833a:	9301      	str	r3, [sp, #4]
 801833c:	e59b      	b.n	8017e76 <_vfiprintf_r+0x44a>
 801833e:	bf00      	nop
 8018340:	0801b7c9 	.word	0x0801b7c9
 8018344:	0801b7d9 	.word	0x0801b7d9

08018348 <__sbprintf>:
 8018348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801834a:	461f      	mov	r7, r3
 801834c:	898b      	ldrh	r3, [r1, #12]
 801834e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8018352:	f023 0302 	bic.w	r3, r3, #2
 8018356:	f8ad 300c 	strh.w	r3, [sp, #12]
 801835a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801835c:	9319      	str	r3, [sp, #100]	; 0x64
 801835e:	89cb      	ldrh	r3, [r1, #14]
 8018360:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018364:	69cb      	ldr	r3, [r1, #28]
 8018366:	9307      	str	r3, [sp, #28]
 8018368:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801836a:	9309      	str	r3, [sp, #36]	; 0x24
 801836c:	ab1a      	add	r3, sp, #104	; 0x68
 801836e:	9300      	str	r3, [sp, #0]
 8018370:	9304      	str	r3, [sp, #16]
 8018372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018376:	4615      	mov	r5, r2
 8018378:	4606      	mov	r6, r0
 801837a:	9302      	str	r3, [sp, #8]
 801837c:	9305      	str	r3, [sp, #20]
 801837e:	a816      	add	r0, sp, #88	; 0x58
 8018380:	2300      	movs	r3, #0
 8018382:	460c      	mov	r4, r1
 8018384:	9306      	str	r3, [sp, #24]
 8018386:	f7fc f9cd 	bl	8014724 <__retarget_lock_init_recursive>
 801838a:	462a      	mov	r2, r5
 801838c:	463b      	mov	r3, r7
 801838e:	4669      	mov	r1, sp
 8018390:	4630      	mov	r0, r6
 8018392:	f7ff fb4b 	bl	8017a2c <_vfiprintf_r>
 8018396:	1e05      	subs	r5, r0, #0
 8018398:	db07      	blt.n	80183aa <__sbprintf+0x62>
 801839a:	4669      	mov	r1, sp
 801839c:	4630      	mov	r0, r6
 801839e:	f000 f8f5 	bl	801858c <_fflush_r>
 80183a2:	2800      	cmp	r0, #0
 80183a4:	bf18      	it	ne
 80183a6:	f04f 35ff 	movne.w	r5, #4294967295
 80183aa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80183ae:	9816      	ldr	r0, [sp, #88]	; 0x58
 80183b0:	065b      	lsls	r3, r3, #25
 80183b2:	bf42      	ittt	mi
 80183b4:	89a3      	ldrhmi	r3, [r4, #12]
 80183b6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80183ba:	81a3      	strhmi	r3, [r4, #12]
 80183bc:	f7fc f9b3 	bl	8014726 <__retarget_lock_close_recursive>
 80183c0:	4628      	mov	r0, r5
 80183c2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80183c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080183c8 <_fclose_r>:
 80183c8:	b570      	push	{r4, r5, r6, lr}
 80183ca:	4606      	mov	r6, r0
 80183cc:	460c      	mov	r4, r1
 80183ce:	b911      	cbnz	r1, 80183d6 <_fclose_r+0xe>
 80183d0:	2500      	movs	r5, #0
 80183d2:	4628      	mov	r0, r5
 80183d4:	bd70      	pop	{r4, r5, r6, pc}
 80183d6:	b118      	cbz	r0, 80183e0 <_fclose_r+0x18>
 80183d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80183da:	b90b      	cbnz	r3, 80183e0 <_fclose_r+0x18>
 80183dc:	f7fb fdc6 	bl	8013f6c <__sinit>
 80183e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80183e2:	07d8      	lsls	r0, r3, #31
 80183e4:	d405      	bmi.n	80183f2 <_fclose_r+0x2a>
 80183e6:	89a3      	ldrh	r3, [r4, #12]
 80183e8:	0599      	lsls	r1, r3, #22
 80183ea:	d402      	bmi.n	80183f2 <_fclose_r+0x2a>
 80183ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80183ee:	f7fc f99b 	bl	8014728 <__retarget_lock_acquire_recursive>
 80183f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183f6:	b93b      	cbnz	r3, 8018408 <_fclose_r+0x40>
 80183f8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80183fa:	f015 0501 	ands.w	r5, r5, #1
 80183fe:	d1e7      	bne.n	80183d0 <_fclose_r+0x8>
 8018400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018402:	f7fc f992 	bl	801472a <__retarget_lock_release_recursive>
 8018406:	e7e4      	b.n	80183d2 <_fclose_r+0xa>
 8018408:	4621      	mov	r1, r4
 801840a:	4630      	mov	r0, r6
 801840c:	f000 f834 	bl	8018478 <__sflush_r>
 8018410:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018412:	4605      	mov	r5, r0
 8018414:	b133      	cbz	r3, 8018424 <_fclose_r+0x5c>
 8018416:	69e1      	ldr	r1, [r4, #28]
 8018418:	4630      	mov	r0, r6
 801841a:	4798      	blx	r3
 801841c:	2800      	cmp	r0, #0
 801841e:	bfb8      	it	lt
 8018420:	f04f 35ff 	movlt.w	r5, #4294967295
 8018424:	89a3      	ldrh	r3, [r4, #12]
 8018426:	061a      	lsls	r2, r3, #24
 8018428:	d503      	bpl.n	8018432 <_fclose_r+0x6a>
 801842a:	6921      	ldr	r1, [r4, #16]
 801842c:	4630      	mov	r0, r6
 801842e:	f7fc f9ef 	bl	8014810 <_free_r>
 8018432:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018434:	b141      	cbz	r1, 8018448 <_fclose_r+0x80>
 8018436:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801843a:	4299      	cmp	r1, r3
 801843c:	d002      	beq.n	8018444 <_fclose_r+0x7c>
 801843e:	4630      	mov	r0, r6
 8018440:	f7fc f9e6 	bl	8014810 <_free_r>
 8018444:	2300      	movs	r3, #0
 8018446:	6323      	str	r3, [r4, #48]	; 0x30
 8018448:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801844a:	b121      	cbz	r1, 8018456 <_fclose_r+0x8e>
 801844c:	4630      	mov	r0, r6
 801844e:	f7fc f9df 	bl	8014810 <_free_r>
 8018452:	2300      	movs	r3, #0
 8018454:	6463      	str	r3, [r4, #68]	; 0x44
 8018456:	f7fb fd7d 	bl	8013f54 <__sfp_lock_acquire>
 801845a:	2300      	movs	r3, #0
 801845c:	81a3      	strh	r3, [r4, #12]
 801845e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018460:	07db      	lsls	r3, r3, #31
 8018462:	d402      	bmi.n	801846a <_fclose_r+0xa2>
 8018464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018466:	f7fc f960 	bl	801472a <__retarget_lock_release_recursive>
 801846a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801846c:	f7fc f95b 	bl	8014726 <__retarget_lock_close_recursive>
 8018470:	f7fb fd76 	bl	8013f60 <__sfp_lock_release>
 8018474:	e7ad      	b.n	80183d2 <_fclose_r+0xa>
	...

08018478 <__sflush_r>:
 8018478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801847a:	898b      	ldrh	r3, [r1, #12]
 801847c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018480:	4605      	mov	r5, r0
 8018482:	0718      	lsls	r0, r3, #28
 8018484:	460c      	mov	r4, r1
 8018486:	d45e      	bmi.n	8018546 <__sflush_r+0xce>
 8018488:	684b      	ldr	r3, [r1, #4]
 801848a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801848e:	2b00      	cmp	r3, #0
 8018490:	818a      	strh	r2, [r1, #12]
 8018492:	dc04      	bgt.n	801849e <__sflush_r+0x26>
 8018494:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8018496:	2b00      	cmp	r3, #0
 8018498:	dc01      	bgt.n	801849e <__sflush_r+0x26>
 801849a:	2000      	movs	r0, #0
 801849c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801849e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80184a0:	2e00      	cmp	r6, #0
 80184a2:	d0fa      	beq.n	801849a <__sflush_r+0x22>
 80184a4:	2300      	movs	r3, #0
 80184a6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80184aa:	682f      	ldr	r7, [r5, #0]
 80184ac:	69e1      	ldr	r1, [r4, #28]
 80184ae:	602b      	str	r3, [r5, #0]
 80184b0:	d036      	beq.n	8018520 <__sflush_r+0xa8>
 80184b2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80184b4:	89a3      	ldrh	r3, [r4, #12]
 80184b6:	075a      	lsls	r2, r3, #29
 80184b8:	d505      	bpl.n	80184c6 <__sflush_r+0x4e>
 80184ba:	6863      	ldr	r3, [r4, #4]
 80184bc:	1ac0      	subs	r0, r0, r3
 80184be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80184c0:	b10b      	cbz	r3, 80184c6 <__sflush_r+0x4e>
 80184c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80184c4:	1ac0      	subs	r0, r0, r3
 80184c6:	2300      	movs	r3, #0
 80184c8:	4602      	mov	r2, r0
 80184ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80184cc:	69e1      	ldr	r1, [r4, #28]
 80184ce:	4628      	mov	r0, r5
 80184d0:	47b0      	blx	r6
 80184d2:	1c43      	adds	r3, r0, #1
 80184d4:	89a3      	ldrh	r3, [r4, #12]
 80184d6:	d106      	bne.n	80184e6 <__sflush_r+0x6e>
 80184d8:	6829      	ldr	r1, [r5, #0]
 80184da:	291d      	cmp	r1, #29
 80184dc:	d82f      	bhi.n	801853e <__sflush_r+0xc6>
 80184de:	4a2a      	ldr	r2, [pc, #168]	; (8018588 <__sflush_r+0x110>)
 80184e0:	410a      	asrs	r2, r1
 80184e2:	07d6      	lsls	r6, r2, #31
 80184e4:	d42b      	bmi.n	801853e <__sflush_r+0xc6>
 80184e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80184ea:	b21b      	sxth	r3, r3
 80184ec:	2200      	movs	r2, #0
 80184ee:	6062      	str	r2, [r4, #4]
 80184f0:	04d9      	lsls	r1, r3, #19
 80184f2:	6922      	ldr	r2, [r4, #16]
 80184f4:	81a3      	strh	r3, [r4, #12]
 80184f6:	6022      	str	r2, [r4, #0]
 80184f8:	d504      	bpl.n	8018504 <__sflush_r+0x8c>
 80184fa:	1c42      	adds	r2, r0, #1
 80184fc:	d101      	bne.n	8018502 <__sflush_r+0x8a>
 80184fe:	682b      	ldr	r3, [r5, #0]
 8018500:	b903      	cbnz	r3, 8018504 <__sflush_r+0x8c>
 8018502:	6520      	str	r0, [r4, #80]	; 0x50
 8018504:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018506:	602f      	str	r7, [r5, #0]
 8018508:	2900      	cmp	r1, #0
 801850a:	d0c6      	beq.n	801849a <__sflush_r+0x22>
 801850c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8018510:	4299      	cmp	r1, r3
 8018512:	d002      	beq.n	801851a <__sflush_r+0xa2>
 8018514:	4628      	mov	r0, r5
 8018516:	f7fc f97b 	bl	8014810 <_free_r>
 801851a:	2000      	movs	r0, #0
 801851c:	6320      	str	r0, [r4, #48]	; 0x30
 801851e:	e7bd      	b.n	801849c <__sflush_r+0x24>
 8018520:	2301      	movs	r3, #1
 8018522:	4628      	mov	r0, r5
 8018524:	47b0      	blx	r6
 8018526:	1c41      	adds	r1, r0, #1
 8018528:	d1c4      	bne.n	80184b4 <__sflush_r+0x3c>
 801852a:	682b      	ldr	r3, [r5, #0]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d0c1      	beq.n	80184b4 <__sflush_r+0x3c>
 8018530:	2b1d      	cmp	r3, #29
 8018532:	d001      	beq.n	8018538 <__sflush_r+0xc0>
 8018534:	2b16      	cmp	r3, #22
 8018536:	d101      	bne.n	801853c <__sflush_r+0xc4>
 8018538:	602f      	str	r7, [r5, #0]
 801853a:	e7ae      	b.n	801849a <__sflush_r+0x22>
 801853c:	89a3      	ldrh	r3, [r4, #12]
 801853e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018542:	81a3      	strh	r3, [r4, #12]
 8018544:	e7aa      	b.n	801849c <__sflush_r+0x24>
 8018546:	690f      	ldr	r7, [r1, #16]
 8018548:	2f00      	cmp	r7, #0
 801854a:	d0a6      	beq.n	801849a <__sflush_r+0x22>
 801854c:	079b      	lsls	r3, r3, #30
 801854e:	680e      	ldr	r6, [r1, #0]
 8018550:	bf08      	it	eq
 8018552:	694b      	ldreq	r3, [r1, #20]
 8018554:	600f      	str	r7, [r1, #0]
 8018556:	bf18      	it	ne
 8018558:	2300      	movne	r3, #0
 801855a:	1bf6      	subs	r6, r6, r7
 801855c:	608b      	str	r3, [r1, #8]
 801855e:	2e00      	cmp	r6, #0
 8018560:	dd9b      	ble.n	801849a <__sflush_r+0x22>
 8018562:	69e1      	ldr	r1, [r4, #28]
 8018564:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8018568:	4633      	mov	r3, r6
 801856a:	463a      	mov	r2, r7
 801856c:	4628      	mov	r0, r5
 801856e:	47e0      	blx	ip
 8018570:	2800      	cmp	r0, #0
 8018572:	dc06      	bgt.n	8018582 <__sflush_r+0x10a>
 8018574:	89a3      	ldrh	r3, [r4, #12]
 8018576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801857a:	81a3      	strh	r3, [r4, #12]
 801857c:	f04f 30ff 	mov.w	r0, #4294967295
 8018580:	e78c      	b.n	801849c <__sflush_r+0x24>
 8018582:	4407      	add	r7, r0
 8018584:	1a36      	subs	r6, r6, r0
 8018586:	e7ea      	b.n	801855e <__sflush_r+0xe6>
 8018588:	dfbffffe 	.word	0xdfbffffe

0801858c <_fflush_r>:
 801858c:	b538      	push	{r3, r4, r5, lr}
 801858e:	460c      	mov	r4, r1
 8018590:	4605      	mov	r5, r0
 8018592:	b118      	cbz	r0, 801859c <_fflush_r+0x10>
 8018594:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8018596:	b90b      	cbnz	r3, 801859c <_fflush_r+0x10>
 8018598:	f7fb fce8 	bl	8013f6c <__sinit>
 801859c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80185a0:	b1b8      	cbz	r0, 80185d2 <_fflush_r+0x46>
 80185a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185a4:	07db      	lsls	r3, r3, #31
 80185a6:	d404      	bmi.n	80185b2 <_fflush_r+0x26>
 80185a8:	0581      	lsls	r1, r0, #22
 80185aa:	d402      	bmi.n	80185b2 <_fflush_r+0x26>
 80185ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185ae:	f7fc f8bb 	bl	8014728 <__retarget_lock_acquire_recursive>
 80185b2:	4628      	mov	r0, r5
 80185b4:	4621      	mov	r1, r4
 80185b6:	f7ff ff5f 	bl	8018478 <__sflush_r>
 80185ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185bc:	07da      	lsls	r2, r3, #31
 80185be:	4605      	mov	r5, r0
 80185c0:	d405      	bmi.n	80185ce <_fflush_r+0x42>
 80185c2:	89a3      	ldrh	r3, [r4, #12]
 80185c4:	059b      	lsls	r3, r3, #22
 80185c6:	d402      	bmi.n	80185ce <_fflush_r+0x42>
 80185c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185ca:	f7fc f8ae 	bl	801472a <__retarget_lock_release_recursive>
 80185ce:	4628      	mov	r0, r5
 80185d0:	bd38      	pop	{r3, r4, r5, pc}
 80185d2:	4605      	mov	r5, r0
 80185d4:	e7fb      	b.n	80185ce <_fflush_r+0x42>

080185d6 <__swhatbuf_r>:
 80185d6:	b570      	push	{r4, r5, r6, lr}
 80185d8:	460c      	mov	r4, r1
 80185da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185de:	2900      	cmp	r1, #0
 80185e0:	b096      	sub	sp, #88	; 0x58
 80185e2:	4615      	mov	r5, r2
 80185e4:	461e      	mov	r6, r3
 80185e6:	da07      	bge.n	80185f8 <__swhatbuf_r+0x22>
 80185e8:	89a1      	ldrh	r1, [r4, #12]
 80185ea:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 80185ee:	d017      	beq.n	8018620 <__swhatbuf_r+0x4a>
 80185f0:	2100      	movs	r1, #0
 80185f2:	2340      	movs	r3, #64	; 0x40
 80185f4:	4608      	mov	r0, r1
 80185f6:	e00f      	b.n	8018618 <__swhatbuf_r+0x42>
 80185f8:	466a      	mov	r2, sp
 80185fa:	f000 f8d7 	bl	80187ac <_fstat_r>
 80185fe:	2800      	cmp	r0, #0
 8018600:	dbf2      	blt.n	80185e8 <__swhatbuf_r+0x12>
 8018602:	9901      	ldr	r1, [sp, #4]
 8018604:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018608:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801860c:	4259      	negs	r1, r3
 801860e:	4159      	adcs	r1, r3
 8018610:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018618:	6031      	str	r1, [r6, #0]
 801861a:	602b      	str	r3, [r5, #0]
 801861c:	b016      	add	sp, #88	; 0x58
 801861e:	bd70      	pop	{r4, r5, r6, pc}
 8018620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018624:	e7e6      	b.n	80185f4 <__swhatbuf_r+0x1e>

08018626 <__smakebuf_r>:
 8018626:	898b      	ldrh	r3, [r1, #12]
 8018628:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801862a:	079d      	lsls	r5, r3, #30
 801862c:	4606      	mov	r6, r0
 801862e:	460c      	mov	r4, r1
 8018630:	d507      	bpl.n	8018642 <__smakebuf_r+0x1c>
 8018632:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8018636:	6023      	str	r3, [r4, #0]
 8018638:	6123      	str	r3, [r4, #16]
 801863a:	2301      	movs	r3, #1
 801863c:	6163      	str	r3, [r4, #20]
 801863e:	b002      	add	sp, #8
 8018640:	bd70      	pop	{r4, r5, r6, pc}
 8018642:	ab01      	add	r3, sp, #4
 8018644:	466a      	mov	r2, sp
 8018646:	f7ff ffc6 	bl	80185d6 <__swhatbuf_r>
 801864a:	9900      	ldr	r1, [sp, #0]
 801864c:	4605      	mov	r5, r0
 801864e:	4630      	mov	r0, r6
 8018650:	f7fc f99e 	bl	8014990 <_malloc_r>
 8018654:	b948      	cbnz	r0, 801866a <__smakebuf_r+0x44>
 8018656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801865a:	059a      	lsls	r2, r3, #22
 801865c:	d4ef      	bmi.n	801863e <__smakebuf_r+0x18>
 801865e:	f023 0303 	bic.w	r3, r3, #3
 8018662:	f043 0302 	orr.w	r3, r3, #2
 8018666:	81a3      	strh	r3, [r4, #12]
 8018668:	e7e3      	b.n	8018632 <__smakebuf_r+0xc>
 801866a:	89a3      	ldrh	r3, [r4, #12]
 801866c:	6020      	str	r0, [r4, #0]
 801866e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018672:	81a3      	strh	r3, [r4, #12]
 8018674:	9b00      	ldr	r3, [sp, #0]
 8018676:	6163      	str	r3, [r4, #20]
 8018678:	9b01      	ldr	r3, [sp, #4]
 801867a:	6120      	str	r0, [r4, #16]
 801867c:	b15b      	cbz	r3, 8018696 <__smakebuf_r+0x70>
 801867e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018682:	4630      	mov	r0, r6
 8018684:	f000 f8a4 	bl	80187d0 <_isatty_r>
 8018688:	b128      	cbz	r0, 8018696 <__smakebuf_r+0x70>
 801868a:	89a3      	ldrh	r3, [r4, #12]
 801868c:	f023 0303 	bic.w	r3, r3, #3
 8018690:	f043 0301 	orr.w	r3, r3, #1
 8018694:	81a3      	strh	r3, [r4, #12]
 8018696:	89a3      	ldrh	r3, [r4, #12]
 8018698:	431d      	orrs	r5, r3
 801869a:	81a5      	strh	r5, [r4, #12]
 801869c:	e7cf      	b.n	801863e <__smakebuf_r+0x18>

0801869e <__fputwc>:
 801869e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80186a2:	4680      	mov	r8, r0
 80186a4:	460e      	mov	r6, r1
 80186a6:	4615      	mov	r5, r2
 80186a8:	f000 f876 	bl	8018798 <__locale_mb_cur_max>
 80186ac:	2801      	cmp	r0, #1
 80186ae:	4604      	mov	r4, r0
 80186b0:	d11b      	bne.n	80186ea <__fputwc+0x4c>
 80186b2:	1e73      	subs	r3, r6, #1
 80186b4:	2bfe      	cmp	r3, #254	; 0xfe
 80186b6:	d818      	bhi.n	80186ea <__fputwc+0x4c>
 80186b8:	f88d 6004 	strb.w	r6, [sp, #4]
 80186bc:	2700      	movs	r7, #0
 80186be:	f10d 0904 	add.w	r9, sp, #4
 80186c2:	42a7      	cmp	r7, r4
 80186c4:	d020      	beq.n	8018708 <__fputwc+0x6a>
 80186c6:	68ab      	ldr	r3, [r5, #8]
 80186c8:	f817 1009 	ldrb.w	r1, [r7, r9]
 80186cc:	3b01      	subs	r3, #1
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	60ab      	str	r3, [r5, #8]
 80186d2:	da04      	bge.n	80186de <__fputwc+0x40>
 80186d4:	69aa      	ldr	r2, [r5, #24]
 80186d6:	4293      	cmp	r3, r2
 80186d8:	db1a      	blt.n	8018710 <__fputwc+0x72>
 80186da:	290a      	cmp	r1, #10
 80186dc:	d018      	beq.n	8018710 <__fputwc+0x72>
 80186de:	682b      	ldr	r3, [r5, #0]
 80186e0:	1c5a      	adds	r2, r3, #1
 80186e2:	602a      	str	r2, [r5, #0]
 80186e4:	7019      	strb	r1, [r3, #0]
 80186e6:	3701      	adds	r7, #1
 80186e8:	e7eb      	b.n	80186c2 <__fputwc+0x24>
 80186ea:	4632      	mov	r2, r6
 80186ec:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80186f0:	a901      	add	r1, sp, #4
 80186f2:	4640      	mov	r0, r8
 80186f4:	f001 faba 	bl	8019c6c <_wcrtomb_r>
 80186f8:	1c42      	adds	r2, r0, #1
 80186fa:	4604      	mov	r4, r0
 80186fc:	d1de      	bne.n	80186bc <__fputwc+0x1e>
 80186fe:	89ab      	ldrh	r3, [r5, #12]
 8018700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018704:	81ab      	strh	r3, [r5, #12]
 8018706:	4606      	mov	r6, r0
 8018708:	4630      	mov	r0, r6
 801870a:	b003      	add	sp, #12
 801870c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018710:	462a      	mov	r2, r5
 8018712:	4640      	mov	r0, r8
 8018714:	f001 fb3d 	bl	8019d92 <__swbuf_r>
 8018718:	1c43      	adds	r3, r0, #1
 801871a:	d1e4      	bne.n	80186e6 <__fputwc+0x48>
 801871c:	4606      	mov	r6, r0
 801871e:	e7f3      	b.n	8018708 <__fputwc+0x6a>

08018720 <_fputwc_r>:
 8018720:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8018722:	07db      	lsls	r3, r3, #31
 8018724:	b570      	push	{r4, r5, r6, lr}
 8018726:	4605      	mov	r5, r0
 8018728:	460e      	mov	r6, r1
 801872a:	4614      	mov	r4, r2
 801872c:	d405      	bmi.n	801873a <_fputwc_r+0x1a>
 801872e:	8993      	ldrh	r3, [r2, #12]
 8018730:	0598      	lsls	r0, r3, #22
 8018732:	d402      	bmi.n	801873a <_fputwc_r+0x1a>
 8018734:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8018736:	f7fb fff7 	bl	8014728 <__retarget_lock_acquire_recursive>
 801873a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801873e:	0499      	lsls	r1, r3, #18
 8018740:	d406      	bmi.n	8018750 <_fputwc_r+0x30>
 8018742:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018746:	81a3      	strh	r3, [r4, #12]
 8018748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801874a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801874e:	6663      	str	r3, [r4, #100]	; 0x64
 8018750:	4622      	mov	r2, r4
 8018752:	4628      	mov	r0, r5
 8018754:	4631      	mov	r1, r6
 8018756:	f7ff ffa2 	bl	801869e <__fputwc>
 801875a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801875c:	07da      	lsls	r2, r3, #31
 801875e:	4605      	mov	r5, r0
 8018760:	d405      	bmi.n	801876e <_fputwc_r+0x4e>
 8018762:	89a3      	ldrh	r3, [r4, #12]
 8018764:	059b      	lsls	r3, r3, #22
 8018766:	d402      	bmi.n	801876e <_fputwc_r+0x4e>
 8018768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801876a:	f7fb ffde 	bl	801472a <__retarget_lock_release_recursive>
 801876e:	4628      	mov	r0, r5
 8018770:	bd70      	pop	{r4, r5, r6, pc}

08018772 <strncpy>:
 8018772:	b510      	push	{r4, lr}
 8018774:	3901      	subs	r1, #1
 8018776:	4603      	mov	r3, r0
 8018778:	b132      	cbz	r2, 8018788 <strncpy+0x16>
 801877a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801877e:	f803 4b01 	strb.w	r4, [r3], #1
 8018782:	3a01      	subs	r2, #1
 8018784:	2c00      	cmp	r4, #0
 8018786:	d1f7      	bne.n	8018778 <strncpy+0x6>
 8018788:	441a      	add	r2, r3
 801878a:	2100      	movs	r1, #0
 801878c:	4293      	cmp	r3, r2
 801878e:	d100      	bne.n	8018792 <strncpy+0x20>
 8018790:	bd10      	pop	{r4, pc}
 8018792:	f803 1b01 	strb.w	r1, [r3], #1
 8018796:	e7f9      	b.n	801878c <strncpy+0x1a>

08018798 <__locale_mb_cur_max>:
 8018798:	4b01      	ldr	r3, [pc, #4]	; (80187a0 <__locale_mb_cur_max+0x8>)
 801879a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801879e:	4770      	bx	lr
 80187a0:	200005d8 	.word	0x200005d8

080187a4 <_localeconv_r>:
 80187a4:	4800      	ldr	r0, [pc, #0]	; (80187a8 <_localeconv_r+0x4>)
 80187a6:	4770      	bx	lr
 80187a8:	200006c8 	.word	0x200006c8

080187ac <_fstat_r>:
 80187ac:	b538      	push	{r3, r4, r5, lr}
 80187ae:	4d07      	ldr	r5, [pc, #28]	; (80187cc <_fstat_r+0x20>)
 80187b0:	2300      	movs	r3, #0
 80187b2:	4604      	mov	r4, r0
 80187b4:	4608      	mov	r0, r1
 80187b6:	4611      	mov	r1, r2
 80187b8:	602b      	str	r3, [r5, #0]
 80187ba:	f7f1 fe6a 	bl	800a492 <_fstat>
 80187be:	1c43      	adds	r3, r0, #1
 80187c0:	d102      	bne.n	80187c8 <_fstat_r+0x1c>
 80187c2:	682b      	ldr	r3, [r5, #0]
 80187c4:	b103      	cbz	r3, 80187c8 <_fstat_r+0x1c>
 80187c6:	6023      	str	r3, [r4, #0]
 80187c8:	bd38      	pop	{r3, r4, r5, pc}
 80187ca:	bf00      	nop
 80187cc:	20004974 	.word	0x20004974

080187d0 <_isatty_r>:
 80187d0:	b538      	push	{r3, r4, r5, lr}
 80187d2:	4d06      	ldr	r5, [pc, #24]	; (80187ec <_isatty_r+0x1c>)
 80187d4:	2300      	movs	r3, #0
 80187d6:	4604      	mov	r4, r0
 80187d8:	4608      	mov	r0, r1
 80187da:	602b      	str	r3, [r5, #0]
 80187dc:	f7f1 fe68 	bl	800a4b0 <_isatty>
 80187e0:	1c43      	adds	r3, r0, #1
 80187e2:	d102      	bne.n	80187ea <_isatty_r+0x1a>
 80187e4:	682b      	ldr	r3, [r5, #0]
 80187e6:	b103      	cbz	r3, 80187ea <_isatty_r+0x1a>
 80187e8:	6023      	str	r3, [r4, #0]
 80187ea:	bd38      	pop	{r3, r4, r5, pc}
 80187ec:	20004974 	.word	0x20004974

080187f0 <_sbrk_r>:
 80187f0:	b538      	push	{r3, r4, r5, lr}
 80187f2:	4d06      	ldr	r5, [pc, #24]	; (801880c <_sbrk_r+0x1c>)
 80187f4:	2300      	movs	r3, #0
 80187f6:	4604      	mov	r4, r0
 80187f8:	4608      	mov	r0, r1
 80187fa:	602b      	str	r3, [r5, #0]
 80187fc:	f7f1 fe6e 	bl	800a4dc <_sbrk>
 8018800:	1c43      	adds	r3, r0, #1
 8018802:	d102      	bne.n	801880a <_sbrk_r+0x1a>
 8018804:	682b      	ldr	r3, [r5, #0]
 8018806:	b103      	cbz	r3, 801880a <_sbrk_r+0x1a>
 8018808:	6023      	str	r3, [r4, #0]
 801880a:	bd38      	pop	{r3, r4, r5, pc}
 801880c:	20004974 	.word	0x20004974

08018810 <__libc_fini_array>:
 8018810:	b538      	push	{r3, r4, r5, lr}
 8018812:	4d07      	ldr	r5, [pc, #28]	; (8018830 <__libc_fini_array+0x20>)
 8018814:	4c07      	ldr	r4, [pc, #28]	; (8018834 <__libc_fini_array+0x24>)
 8018816:	1b64      	subs	r4, r4, r5
 8018818:	10a4      	asrs	r4, r4, #2
 801881a:	b91c      	cbnz	r4, 8018824 <__libc_fini_array+0x14>
 801881c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018820:	f002 babe 	b.w	801ada0 <_fini>
 8018824:	3c01      	subs	r4, #1
 8018826:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801882a:	4798      	blx	r3
 801882c:	e7f5      	b.n	801881a <__libc_fini_array+0xa>
 801882e:	bf00      	nop
 8018830:	0801ba40 	.word	0x0801ba40
 8018834:	0801ba44 	.word	0x0801ba44

08018838 <sysconf>:
 8018838:	2808      	cmp	r0, #8
 801883a:	b508      	push	{r3, lr}
 801883c:	d006      	beq.n	801884c <sysconf+0x14>
 801883e:	f7fb ff47 	bl	80146d0 <__errno>
 8018842:	2316      	movs	r3, #22
 8018844:	6003      	str	r3, [r0, #0]
 8018846:	f04f 30ff 	mov.w	r0, #4294967295
 801884a:	bd08      	pop	{r3, pc}
 801884c:	2080      	movs	r0, #128	; 0x80
 801884e:	e7fc      	b.n	801884a <sysconf+0x12>

08018850 <frexp>:
 8018850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018852:	4617      	mov	r7, r2
 8018854:	2200      	movs	r2, #0
 8018856:	603a      	str	r2, [r7, #0]
 8018858:	4a14      	ldr	r2, [pc, #80]	; (80188ac <frexp+0x5c>)
 801885a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801885e:	4296      	cmp	r6, r2
 8018860:	4604      	mov	r4, r0
 8018862:	460d      	mov	r5, r1
 8018864:	460b      	mov	r3, r1
 8018866:	dc1e      	bgt.n	80188a6 <frexp+0x56>
 8018868:	4602      	mov	r2, r0
 801886a:	4332      	orrs	r2, r6
 801886c:	d01b      	beq.n	80188a6 <frexp+0x56>
 801886e:	4a10      	ldr	r2, [pc, #64]	; (80188b0 <frexp+0x60>)
 8018870:	400a      	ands	r2, r1
 8018872:	b952      	cbnz	r2, 801888a <frexp+0x3a>
 8018874:	4b0f      	ldr	r3, [pc, #60]	; (80188b4 <frexp+0x64>)
 8018876:	2200      	movs	r2, #0
 8018878:	f7f0 f896 	bl	80089a8 <__aeabi_dmul>
 801887c:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8018880:	4604      	mov	r4, r0
 8018882:	460b      	mov	r3, r1
 8018884:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018888:	603a      	str	r2, [r7, #0]
 801888a:	683a      	ldr	r2, [r7, #0]
 801888c:	1536      	asrs	r6, r6, #20
 801888e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018892:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 8018896:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801889a:	4432      	add	r2, r6
 801889c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80188a0:	603a      	str	r2, [r7, #0]
 80188a2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80188a6:	4620      	mov	r0, r4
 80188a8:	4629      	mov	r1, r5
 80188aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188ac:	7fefffff 	.word	0x7fefffff
 80188b0:	7ff00000 	.word	0x7ff00000
 80188b4:	43500000 	.word	0x43500000

080188b8 <__register_exitproc>:
 80188b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188bc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801892c <__register_exitproc+0x74>
 80188c0:	4606      	mov	r6, r0
 80188c2:	f8da 0000 	ldr.w	r0, [sl]
 80188c6:	4698      	mov	r8, r3
 80188c8:	460f      	mov	r7, r1
 80188ca:	4691      	mov	r9, r2
 80188cc:	f7fb ff2c 	bl	8014728 <__retarget_lock_acquire_recursive>
 80188d0:	4b17      	ldr	r3, [pc, #92]	; (8018930 <__register_exitproc+0x78>)
 80188d2:	681c      	ldr	r4, [r3, #0]
 80188d4:	b90c      	cbnz	r4, 80188da <__register_exitproc+0x22>
 80188d6:	4c17      	ldr	r4, [pc, #92]	; (8018934 <__register_exitproc+0x7c>)
 80188d8:	601c      	str	r4, [r3, #0]
 80188da:	6865      	ldr	r5, [r4, #4]
 80188dc:	f8da 0000 	ldr.w	r0, [sl]
 80188e0:	2d1f      	cmp	r5, #31
 80188e2:	dd05      	ble.n	80188f0 <__register_exitproc+0x38>
 80188e4:	f7fb ff21 	bl	801472a <__retarget_lock_release_recursive>
 80188e8:	f04f 30ff 	mov.w	r0, #4294967295
 80188ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188f0:	b19e      	cbz	r6, 801891a <__register_exitproc+0x62>
 80188f2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80188f6:	2201      	movs	r2, #1
 80188f8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80188fc:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8018900:	40aa      	lsls	r2, r5
 8018902:	4313      	orrs	r3, r2
 8018904:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8018908:	2e02      	cmp	r6, #2
 801890a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801890e:	bf02      	ittt	eq
 8018910:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8018914:	4313      	orreq	r3, r2
 8018916:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801891a:	1c6b      	adds	r3, r5, #1
 801891c:	3502      	adds	r5, #2
 801891e:	6063      	str	r3, [r4, #4]
 8018920:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8018924:	f7fb ff01 	bl	801472a <__retarget_lock_release_recursive>
 8018928:	2000      	movs	r0, #0
 801892a:	e7df      	b.n	80188ec <__register_exitproc+0x34>
 801892c:	200001c4 	.word	0x200001c4
 8018930:	2000497c 	.word	0x2000497c
 8018934:	200049b4 	.word	0x200049b4

08018938 <quorem>:
 8018938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801893c:	6903      	ldr	r3, [r0, #16]
 801893e:	690c      	ldr	r4, [r1, #16]
 8018940:	42a3      	cmp	r3, r4
 8018942:	4607      	mov	r7, r0
 8018944:	db7b      	blt.n	8018a3e <quorem+0x106>
 8018946:	3c01      	subs	r4, #1
 8018948:	f101 0814 	add.w	r8, r1, #20
 801894c:	f100 0514 	add.w	r5, r0, #20
 8018950:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018954:	9301      	str	r3, [sp, #4]
 8018956:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801895a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801895e:	3301      	adds	r3, #1
 8018960:	429a      	cmp	r2, r3
 8018962:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018966:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801896a:	fbb2 f6f3 	udiv	r6, r2, r3
 801896e:	d32e      	bcc.n	80189ce <quorem+0x96>
 8018970:	f04f 0e00 	mov.w	lr, #0
 8018974:	4640      	mov	r0, r8
 8018976:	46ac      	mov	ip, r5
 8018978:	46f2      	mov	sl, lr
 801897a:	f850 2b04 	ldr.w	r2, [r0], #4
 801897e:	b293      	uxth	r3, r2
 8018980:	fb06 e303 	mla	r3, r6, r3, lr
 8018984:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018988:	0c1a      	lsrs	r2, r3, #16
 801898a:	b29b      	uxth	r3, r3
 801898c:	fb06 220e 	mla	r2, r6, lr, r2
 8018990:	ebaa 0303 	sub.w	r3, sl, r3
 8018994:	f8dc a000 	ldr.w	sl, [ip]
 8018998:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801899c:	b292      	uxth	r2, r2
 801899e:	fa13 f38a 	uxtah	r3, r3, sl
 80189a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80189a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80189aa:	b29b      	uxth	r3, r3
 80189ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80189b0:	4581      	cmp	r9, r0
 80189b2:	f84c 3b04 	str.w	r3, [ip], #4
 80189b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80189ba:	d2de      	bcs.n	801897a <quorem+0x42>
 80189bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80189c0:	b92b      	cbnz	r3, 80189ce <quorem+0x96>
 80189c2:	9b01      	ldr	r3, [sp, #4]
 80189c4:	3b04      	subs	r3, #4
 80189c6:	429d      	cmp	r5, r3
 80189c8:	461a      	mov	r2, r3
 80189ca:	d32c      	bcc.n	8018a26 <quorem+0xee>
 80189cc:	613c      	str	r4, [r7, #16]
 80189ce:	4638      	mov	r0, r7
 80189d0:	f001 f844 	bl	8019a5c <__mcmp>
 80189d4:	2800      	cmp	r0, #0
 80189d6:	db22      	blt.n	8018a1e <quorem+0xe6>
 80189d8:	3601      	adds	r6, #1
 80189da:	4629      	mov	r1, r5
 80189dc:	2000      	movs	r0, #0
 80189de:	f858 2b04 	ldr.w	r2, [r8], #4
 80189e2:	f8d1 c000 	ldr.w	ip, [r1]
 80189e6:	b293      	uxth	r3, r2
 80189e8:	1ac3      	subs	r3, r0, r3
 80189ea:	0c12      	lsrs	r2, r2, #16
 80189ec:	fa13 f38c 	uxtah	r3, r3, ip
 80189f0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80189f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80189f8:	b29b      	uxth	r3, r3
 80189fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80189fe:	45c1      	cmp	r9, r8
 8018a00:	f841 3b04 	str.w	r3, [r1], #4
 8018a04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018a08:	d2e9      	bcs.n	80189de <quorem+0xa6>
 8018a0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018a0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018a12:	b922      	cbnz	r2, 8018a1e <quorem+0xe6>
 8018a14:	3b04      	subs	r3, #4
 8018a16:	429d      	cmp	r5, r3
 8018a18:	461a      	mov	r2, r3
 8018a1a:	d30a      	bcc.n	8018a32 <quorem+0xfa>
 8018a1c:	613c      	str	r4, [r7, #16]
 8018a1e:	4630      	mov	r0, r6
 8018a20:	b003      	add	sp, #12
 8018a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a26:	6812      	ldr	r2, [r2, #0]
 8018a28:	3b04      	subs	r3, #4
 8018a2a:	2a00      	cmp	r2, #0
 8018a2c:	d1ce      	bne.n	80189cc <quorem+0x94>
 8018a2e:	3c01      	subs	r4, #1
 8018a30:	e7c9      	b.n	80189c6 <quorem+0x8e>
 8018a32:	6812      	ldr	r2, [r2, #0]
 8018a34:	3b04      	subs	r3, #4
 8018a36:	2a00      	cmp	r2, #0
 8018a38:	d1f0      	bne.n	8018a1c <quorem+0xe4>
 8018a3a:	3c01      	subs	r4, #1
 8018a3c:	e7eb      	b.n	8018a16 <quorem+0xde>
 8018a3e:	2000      	movs	r0, #0
 8018a40:	e7ee      	b.n	8018a20 <quorem+0xe8>
 8018a42:	0000      	movs	r0, r0
 8018a44:	0000      	movs	r0, r0
	...

08018a48 <_dtoa_r>:
 8018a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a4c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8018a4e:	b097      	sub	sp, #92	; 0x5c
 8018a50:	4681      	mov	r9, r0
 8018a52:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8018a54:	4614      	mov	r4, r2
 8018a56:	461d      	mov	r5, r3
 8018a58:	4692      	mov	sl, r2
 8018a5a:	469b      	mov	fp, r3
 8018a5c:	b149      	cbz	r1, 8018a72 <_dtoa_r+0x2a>
 8018a5e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018a60:	604a      	str	r2, [r1, #4]
 8018a62:	2301      	movs	r3, #1
 8018a64:	4093      	lsls	r3, r2
 8018a66:	608b      	str	r3, [r1, #8]
 8018a68:	f000 fdef 	bl	801964a <_Bfree>
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8018a72:	1e2b      	subs	r3, r5, #0
 8018a74:	bfaa      	itet	ge
 8018a76:	2300      	movge	r3, #0
 8018a78:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8018a7c:	6033      	strge	r3, [r6, #0]
 8018a7e:	4ba4      	ldr	r3, [pc, #656]	; (8018d10 <_dtoa_r+0x2c8>)
 8018a80:	f8cd b00c 	str.w	fp, [sp, #12]
 8018a84:	bfbc      	itt	lt
 8018a86:	2201      	movlt	r2, #1
 8018a88:	6032      	strlt	r2, [r6, #0]
 8018a8a:	ea33 030b 	bics.w	r3, r3, fp
 8018a8e:	d119      	bne.n	8018ac4 <_dtoa_r+0x7c>
 8018a90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018a92:	f242 730f 	movw	r3, #9999	; 0x270f
 8018a96:	6013      	str	r3, [r2, #0]
 8018a98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018a9c:	4323      	orrs	r3, r4
 8018a9e:	f000 8587 	beq.w	80195b0 <_dtoa_r+0xb68>
 8018aa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018aa4:	b90b      	cbnz	r3, 8018aaa <_dtoa_r+0x62>
 8018aa6:	4b9b      	ldr	r3, [pc, #620]	; (8018d14 <_dtoa_r+0x2cc>)
 8018aa8:	e021      	b.n	8018aee <_dtoa_r+0xa6>
 8018aaa:	4b9a      	ldr	r3, [pc, #616]	; (8018d14 <_dtoa_r+0x2cc>)
 8018aac:	9304      	str	r3, [sp, #16]
 8018aae:	3303      	adds	r3, #3
 8018ab0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018ab2:	6013      	str	r3, [r2, #0]
 8018ab4:	9804      	ldr	r0, [sp, #16]
 8018ab6:	b017      	add	sp, #92	; 0x5c
 8018ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018abc:	4b96      	ldr	r3, [pc, #600]	; (8018d18 <_dtoa_r+0x2d0>)
 8018abe:	9304      	str	r3, [sp, #16]
 8018ac0:	3308      	adds	r3, #8
 8018ac2:	e7f5      	b.n	8018ab0 <_dtoa_r+0x68>
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	4650      	mov	r0, sl
 8018aca:	4659      	mov	r1, fp
 8018acc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8018ad0:	f7f0 f9d2 	bl	8008e78 <__aeabi_dcmpeq>
 8018ad4:	4607      	mov	r7, r0
 8018ad6:	b160      	cbz	r0, 8018af2 <_dtoa_r+0xaa>
 8018ad8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018ada:	2301      	movs	r3, #1
 8018adc:	6013      	str	r3, [r2, #0]
 8018ade:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	f000 8562 	beq.w	80195aa <_dtoa_r+0xb62>
 8018ae6:	4b8d      	ldr	r3, [pc, #564]	; (8018d1c <_dtoa_r+0x2d4>)
 8018ae8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018aea:	6013      	str	r3, [r2, #0]
 8018aec:	3b01      	subs	r3, #1
 8018aee:	9304      	str	r3, [sp, #16]
 8018af0:	e7e0      	b.n	8018ab4 <_dtoa_r+0x6c>
 8018af2:	ab14      	add	r3, sp, #80	; 0x50
 8018af4:	9301      	str	r3, [sp, #4]
 8018af6:	ab15      	add	r3, sp, #84	; 0x54
 8018af8:	9300      	str	r3, [sp, #0]
 8018afa:	4648      	mov	r0, r9
 8018afc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8018b00:	f001 f850 	bl	8019ba4 <__d2b>
 8018b04:	9b03      	ldr	r3, [sp, #12]
 8018b06:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8018b0a:	4680      	mov	r8, r0
 8018b0c:	2e00      	cmp	r6, #0
 8018b0e:	f000 8081 	beq.w	8018c14 <_dtoa_r+0x1cc>
 8018b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b14:	9713      	str	r7, [sp, #76]	; 0x4c
 8018b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018b1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018b1e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8018b22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018b26:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8018b2a:	4619      	mov	r1, r3
 8018b2c:	2200      	movs	r2, #0
 8018b2e:	4b7c      	ldr	r3, [pc, #496]	; (8018d20 <_dtoa_r+0x2d8>)
 8018b30:	f7ef fd82 	bl	8008638 <__aeabi_dsub>
 8018b34:	a370      	add	r3, pc, #448	; (adr r3, 8018cf8 <_dtoa_r+0x2b0>)
 8018b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b3a:	f7ef ff35 	bl	80089a8 <__aeabi_dmul>
 8018b3e:	a370      	add	r3, pc, #448	; (adr r3, 8018d00 <_dtoa_r+0x2b8>)
 8018b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b44:	f7ef fd7a 	bl	800863c <__adddf3>
 8018b48:	4604      	mov	r4, r0
 8018b4a:	4630      	mov	r0, r6
 8018b4c:	460d      	mov	r5, r1
 8018b4e:	f7ef fec1 	bl	80088d4 <__aeabi_i2d>
 8018b52:	a36d      	add	r3, pc, #436	; (adr r3, 8018d08 <_dtoa_r+0x2c0>)
 8018b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b58:	f7ef ff26 	bl	80089a8 <__aeabi_dmul>
 8018b5c:	4602      	mov	r2, r0
 8018b5e:	460b      	mov	r3, r1
 8018b60:	4620      	mov	r0, r4
 8018b62:	4629      	mov	r1, r5
 8018b64:	f7ef fd6a 	bl	800863c <__adddf3>
 8018b68:	4604      	mov	r4, r0
 8018b6a:	460d      	mov	r5, r1
 8018b6c:	f7f0 f9cc 	bl	8008f08 <__aeabi_d2iz>
 8018b70:	2200      	movs	r2, #0
 8018b72:	9003      	str	r0, [sp, #12]
 8018b74:	2300      	movs	r3, #0
 8018b76:	4620      	mov	r0, r4
 8018b78:	4629      	mov	r1, r5
 8018b7a:	f7f0 f987 	bl	8008e8c <__aeabi_dcmplt>
 8018b7e:	b150      	cbz	r0, 8018b96 <_dtoa_r+0x14e>
 8018b80:	9803      	ldr	r0, [sp, #12]
 8018b82:	f7ef fea7 	bl	80088d4 <__aeabi_i2d>
 8018b86:	4622      	mov	r2, r4
 8018b88:	462b      	mov	r3, r5
 8018b8a:	f7f0 f975 	bl	8008e78 <__aeabi_dcmpeq>
 8018b8e:	b910      	cbnz	r0, 8018b96 <_dtoa_r+0x14e>
 8018b90:	9b03      	ldr	r3, [sp, #12]
 8018b92:	3b01      	subs	r3, #1
 8018b94:	9303      	str	r3, [sp, #12]
 8018b96:	9b03      	ldr	r3, [sp, #12]
 8018b98:	2b16      	cmp	r3, #22
 8018b9a:	d859      	bhi.n	8018c50 <_dtoa_r+0x208>
 8018b9c:	9a03      	ldr	r2, [sp, #12]
 8018b9e:	4b61      	ldr	r3, [pc, #388]	; (8018d24 <_dtoa_r+0x2dc>)
 8018ba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018bac:	f7f0 f96e 	bl	8008e8c <__aeabi_dcmplt>
 8018bb0:	2800      	cmp	r0, #0
 8018bb2:	d04f      	beq.n	8018c54 <_dtoa_r+0x20c>
 8018bb4:	9b03      	ldr	r3, [sp, #12]
 8018bb6:	3b01      	subs	r3, #1
 8018bb8:	9303      	str	r3, [sp, #12]
 8018bba:	2300      	movs	r3, #0
 8018bbc:	9311      	str	r3, [sp, #68]	; 0x44
 8018bbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018bc0:	1b9b      	subs	r3, r3, r6
 8018bc2:	1e5a      	subs	r2, r3, #1
 8018bc4:	bf45      	ittet	mi
 8018bc6:	f1c3 0301 	rsbmi	r3, r3, #1
 8018bca:	9306      	strmi	r3, [sp, #24]
 8018bcc:	2300      	movpl	r3, #0
 8018bce:	2300      	movmi	r3, #0
 8018bd0:	bf58      	it	pl
 8018bd2:	9306      	strpl	r3, [sp, #24]
 8018bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8018bd6:	bf48      	it	mi
 8018bd8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8018bda:	9b03      	ldr	r3, [sp, #12]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	db3b      	blt.n	8018c58 <_dtoa_r+0x210>
 8018be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018be2:	9a03      	ldr	r2, [sp, #12]
 8018be4:	9210      	str	r2, [sp, #64]	; 0x40
 8018be6:	4413      	add	r3, r2
 8018be8:	9309      	str	r3, [sp, #36]	; 0x24
 8018bea:	2300      	movs	r3, #0
 8018bec:	930a      	str	r3, [sp, #40]	; 0x28
 8018bee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018bf0:	2b09      	cmp	r3, #9
 8018bf2:	d869      	bhi.n	8018cc8 <_dtoa_r+0x280>
 8018bf4:	2b05      	cmp	r3, #5
 8018bf6:	bfc4      	itt	gt
 8018bf8:	3b04      	subgt	r3, #4
 8018bfa:	9320      	strgt	r3, [sp, #128]	; 0x80
 8018bfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8018bfe:	f1a3 0302 	sub.w	r3, r3, #2
 8018c02:	bfcc      	ite	gt
 8018c04:	2400      	movgt	r4, #0
 8018c06:	2401      	movle	r4, #1
 8018c08:	2b03      	cmp	r3, #3
 8018c0a:	d868      	bhi.n	8018cde <_dtoa_r+0x296>
 8018c0c:	e8df f003 	tbb	[pc, r3]
 8018c10:	5a383a2d 	.word	0x5a383a2d
 8018c14:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 8018c18:	441e      	add	r6, r3
 8018c1a:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8018c1e:	2b20      	cmp	r3, #32
 8018c20:	bfc1      	itttt	gt
 8018c22:	9a03      	ldrgt	r2, [sp, #12]
 8018c24:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018c28:	409a      	lslgt	r2, r3
 8018c2a:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
 8018c2e:	bfcb      	itete	gt
 8018c30:	fa24 f303 	lsrgt.w	r3, r4, r3
 8018c34:	f1c3 0320 	rsble	r3, r3, #32
 8018c38:	ea42 0003 	orrgt.w	r0, r2, r3
 8018c3c:	fa04 f003 	lslle.w	r0, r4, r3
 8018c40:	f7ef fe38 	bl	80088b4 <__aeabi_ui2d>
 8018c44:	2201      	movs	r2, #1
 8018c46:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8018c4a:	3e01      	subs	r6, #1
 8018c4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8018c4e:	e76c      	b.n	8018b2a <_dtoa_r+0xe2>
 8018c50:	2301      	movs	r3, #1
 8018c52:	e7b3      	b.n	8018bbc <_dtoa_r+0x174>
 8018c54:	9011      	str	r0, [sp, #68]	; 0x44
 8018c56:	e7b2      	b.n	8018bbe <_dtoa_r+0x176>
 8018c58:	9b06      	ldr	r3, [sp, #24]
 8018c5a:	9a03      	ldr	r2, [sp, #12]
 8018c5c:	1a9b      	subs	r3, r3, r2
 8018c5e:	9306      	str	r3, [sp, #24]
 8018c60:	4253      	negs	r3, r2
 8018c62:	930a      	str	r3, [sp, #40]	; 0x28
 8018c64:	2300      	movs	r3, #0
 8018c66:	9310      	str	r3, [sp, #64]	; 0x40
 8018c68:	e7c1      	b.n	8018bee <_dtoa_r+0x1a6>
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	dc37      	bgt.n	8018ce4 <_dtoa_r+0x29c>
 8018c74:	2301      	movs	r3, #1
 8018c76:	9308      	str	r3, [sp, #32]
 8018c78:	9305      	str	r3, [sp, #20]
 8018c7a:	461a      	mov	r2, r3
 8018c7c:	9221      	str	r2, [sp, #132]	; 0x84
 8018c7e:	e00c      	b.n	8018c9a <_dtoa_r+0x252>
 8018c80:	2301      	movs	r3, #1
 8018c82:	e7f3      	b.n	8018c6c <_dtoa_r+0x224>
 8018c84:	2300      	movs	r3, #0
 8018c86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018c88:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c8a:	9b03      	ldr	r3, [sp, #12]
 8018c8c:	4413      	add	r3, r2
 8018c8e:	9308      	str	r3, [sp, #32]
 8018c90:	3301      	adds	r3, #1
 8018c92:	2b01      	cmp	r3, #1
 8018c94:	9305      	str	r3, [sp, #20]
 8018c96:	bfb8      	it	lt
 8018c98:	2301      	movlt	r3, #1
 8018c9a:	2100      	movs	r1, #0
 8018c9c:	2204      	movs	r2, #4
 8018c9e:	f102 0014 	add.w	r0, r2, #20
 8018ca2:	4298      	cmp	r0, r3
 8018ca4:	d922      	bls.n	8018cec <_dtoa_r+0x2a4>
 8018ca6:	f8c9 103c 	str.w	r1, [r9, #60]	; 0x3c
 8018caa:	4648      	mov	r0, r9
 8018cac:	f000 fca8 	bl	8019600 <_Balloc>
 8018cb0:	9004      	str	r0, [sp, #16]
 8018cb2:	2800      	cmp	r0, #0
 8018cb4:	d13c      	bne.n	8018d30 <_dtoa_r+0x2e8>
 8018cb6:	4b1c      	ldr	r3, [pc, #112]	; (8018d28 <_dtoa_r+0x2e0>)
 8018cb8:	4602      	mov	r2, r0
 8018cba:	f240 11af 	movw	r1, #431	; 0x1af
 8018cbe:	481b      	ldr	r0, [pc, #108]	; (8018d2c <_dtoa_r+0x2e4>)
 8018cc0:	f001 f8b0 	bl	8019e24 <__assert_func>
 8018cc4:	2301      	movs	r3, #1
 8018cc6:	e7de      	b.n	8018c86 <_dtoa_r+0x23e>
 8018cc8:	2401      	movs	r4, #1
 8018cca:	2300      	movs	r3, #0
 8018ccc:	9320      	str	r3, [sp, #128]	; 0x80
 8018cce:	940b      	str	r4, [sp, #44]	; 0x2c
 8018cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8018cd4:	9308      	str	r3, [sp, #32]
 8018cd6:	9305      	str	r3, [sp, #20]
 8018cd8:	2200      	movs	r2, #0
 8018cda:	2312      	movs	r3, #18
 8018cdc:	e7ce      	b.n	8018c7c <_dtoa_r+0x234>
 8018cde:	2301      	movs	r3, #1
 8018ce0:	930b      	str	r3, [sp, #44]	; 0x2c
 8018ce2:	e7f5      	b.n	8018cd0 <_dtoa_r+0x288>
 8018ce4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018ce6:	9308      	str	r3, [sp, #32]
 8018ce8:	9305      	str	r3, [sp, #20]
 8018cea:	e7d6      	b.n	8018c9a <_dtoa_r+0x252>
 8018cec:	3101      	adds	r1, #1
 8018cee:	0052      	lsls	r2, r2, #1
 8018cf0:	e7d5      	b.n	8018c9e <_dtoa_r+0x256>
 8018cf2:	bf00      	nop
 8018cf4:	f3af 8000 	nop.w
 8018cf8:	636f4361 	.word	0x636f4361
 8018cfc:	3fd287a7 	.word	0x3fd287a7
 8018d00:	8b60c8b3 	.word	0x8b60c8b3
 8018d04:	3fc68a28 	.word	0x3fc68a28
 8018d08:	509f79fb 	.word	0x509f79fb
 8018d0c:	3fd34413 	.word	0x3fd34413
 8018d10:	7ff00000 	.word	0x7ff00000
 8018d14:	0801b7fc 	.word	0x0801b7fc
 8018d18:	0801b7f3 	.word	0x0801b7f3
 8018d1c:	0801b788 	.word	0x0801b788
 8018d20:	3ff80000 	.word	0x3ff80000
 8018d24:	0801b8f0 	.word	0x0801b8f0
 8018d28:	0801b800 	.word	0x0801b800
 8018d2c:	0801b811 	.word	0x0801b811
 8018d30:	9b04      	ldr	r3, [sp, #16]
 8018d32:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 8018d36:	9b05      	ldr	r3, [sp, #20]
 8018d38:	2b0e      	cmp	r3, #14
 8018d3a:	f200 80a2 	bhi.w	8018e82 <_dtoa_r+0x43a>
 8018d3e:	2c00      	cmp	r4, #0
 8018d40:	f000 809f 	beq.w	8018e82 <_dtoa_r+0x43a>
 8018d44:	9b03      	ldr	r3, [sp, #12]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	dd35      	ble.n	8018db6 <_dtoa_r+0x36e>
 8018d4a:	f003 020f 	and.w	r2, r3, #15
 8018d4e:	4b96      	ldr	r3, [pc, #600]	; (8018fa8 <_dtoa_r+0x560>)
 8018d50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018d54:	e9d3 4500 	ldrd	r4, r5, [r3]
 8018d58:	9b03      	ldr	r3, [sp, #12]
 8018d5a:	05d8      	lsls	r0, r3, #23
 8018d5c:	ea4f 1623 	mov.w	r6, r3, asr #4
 8018d60:	d517      	bpl.n	8018d92 <_dtoa_r+0x34a>
 8018d62:	4b92      	ldr	r3, [pc, #584]	; (8018fac <_dtoa_r+0x564>)
 8018d64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018d68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018d6c:	f7ef ff46 	bl	8008bfc <__aeabi_ddiv>
 8018d70:	f006 060f 	and.w	r6, r6, #15
 8018d74:	4682      	mov	sl, r0
 8018d76:	468b      	mov	fp, r1
 8018d78:	2703      	movs	r7, #3
 8018d7a:	4b8c      	ldr	r3, [pc, #560]	; (8018fac <_dtoa_r+0x564>)
 8018d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8018d7e:	b956      	cbnz	r6, 8018d96 <_dtoa_r+0x34e>
 8018d80:	4622      	mov	r2, r4
 8018d82:	462b      	mov	r3, r5
 8018d84:	4650      	mov	r0, sl
 8018d86:	4659      	mov	r1, fp
 8018d88:	f7ef ff38 	bl	8008bfc <__aeabi_ddiv>
 8018d8c:	4682      	mov	sl, r0
 8018d8e:	468b      	mov	fp, r1
 8018d90:	e02a      	b.n	8018de8 <_dtoa_r+0x3a0>
 8018d92:	2702      	movs	r7, #2
 8018d94:	e7f1      	b.n	8018d7a <_dtoa_r+0x332>
 8018d96:	07f1      	lsls	r1, r6, #31
 8018d98:	d509      	bpl.n	8018dae <_dtoa_r+0x366>
 8018d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d9c:	4620      	mov	r0, r4
 8018d9e:	4629      	mov	r1, r5
 8018da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da4:	f7ef fe00 	bl	80089a8 <__aeabi_dmul>
 8018da8:	3701      	adds	r7, #1
 8018daa:	4604      	mov	r4, r0
 8018dac:	460d      	mov	r5, r1
 8018dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018db0:	1076      	asrs	r6, r6, #1
 8018db2:	3308      	adds	r3, #8
 8018db4:	e7e2      	b.n	8018d7c <_dtoa_r+0x334>
 8018db6:	f000 809f 	beq.w	8018ef8 <_dtoa_r+0x4b0>
 8018dba:	9b03      	ldr	r3, [sp, #12]
 8018dbc:	4d7b      	ldr	r5, [pc, #492]	; (8018fac <_dtoa_r+0x564>)
 8018dbe:	425c      	negs	r4, r3
 8018dc0:	4b79      	ldr	r3, [pc, #484]	; (8018fa8 <_dtoa_r+0x560>)
 8018dc2:	f004 020f 	and.w	r2, r4, #15
 8018dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018dd2:	f7ef fde9 	bl	80089a8 <__aeabi_dmul>
 8018dd6:	1124      	asrs	r4, r4, #4
 8018dd8:	4682      	mov	sl, r0
 8018dda:	468b      	mov	fp, r1
 8018ddc:	2300      	movs	r3, #0
 8018dde:	2702      	movs	r7, #2
 8018de0:	2c00      	cmp	r4, #0
 8018de2:	d17e      	bne.n	8018ee2 <_dtoa_r+0x49a>
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d1d1      	bne.n	8018d8c <_dtoa_r+0x344>
 8018de8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018dea:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	f000 8084 	beq.w	8018efc <_dtoa_r+0x4b4>
 8018df4:	4b6e      	ldr	r3, [pc, #440]	; (8018fb0 <_dtoa_r+0x568>)
 8018df6:	2200      	movs	r2, #0
 8018df8:	4650      	mov	r0, sl
 8018dfa:	4659      	mov	r1, fp
 8018dfc:	f7f0 f846 	bl	8008e8c <__aeabi_dcmplt>
 8018e00:	2800      	cmp	r0, #0
 8018e02:	d07b      	beq.n	8018efc <_dtoa_r+0x4b4>
 8018e04:	9b05      	ldr	r3, [sp, #20]
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d078      	beq.n	8018efc <_dtoa_r+0x4b4>
 8018e0a:	9b08      	ldr	r3, [sp, #32]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	dd36      	ble.n	8018e7e <_dtoa_r+0x436>
 8018e10:	9b03      	ldr	r3, [sp, #12]
 8018e12:	4650      	mov	r0, sl
 8018e14:	4659      	mov	r1, fp
 8018e16:	1e5d      	subs	r5, r3, #1
 8018e18:	2200      	movs	r2, #0
 8018e1a:	4b66      	ldr	r3, [pc, #408]	; (8018fb4 <_dtoa_r+0x56c>)
 8018e1c:	f7ef fdc4 	bl	80089a8 <__aeabi_dmul>
 8018e20:	9c08      	ldr	r4, [sp, #32]
 8018e22:	4682      	mov	sl, r0
 8018e24:	468b      	mov	fp, r1
 8018e26:	3701      	adds	r7, #1
 8018e28:	4638      	mov	r0, r7
 8018e2a:	f7ef fd53 	bl	80088d4 <__aeabi_i2d>
 8018e2e:	4652      	mov	r2, sl
 8018e30:	465b      	mov	r3, fp
 8018e32:	f7ef fdb9 	bl	80089a8 <__aeabi_dmul>
 8018e36:	4b60      	ldr	r3, [pc, #384]	; (8018fb8 <_dtoa_r+0x570>)
 8018e38:	2200      	movs	r2, #0
 8018e3a:	f7ef fbff 	bl	800863c <__adddf3>
 8018e3e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8018e42:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8018e46:	960f      	str	r6, [sp, #60]	; 0x3c
 8018e48:	2c00      	cmp	r4, #0
 8018e4a:	d15a      	bne.n	8018f02 <_dtoa_r+0x4ba>
 8018e4c:	4b5b      	ldr	r3, [pc, #364]	; (8018fbc <_dtoa_r+0x574>)
 8018e4e:	2200      	movs	r2, #0
 8018e50:	4650      	mov	r0, sl
 8018e52:	4659      	mov	r1, fp
 8018e54:	f7ef fbf0 	bl	8008638 <__aeabi_dsub>
 8018e58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e5a:	4633      	mov	r3, r6
 8018e5c:	4682      	mov	sl, r0
 8018e5e:	468b      	mov	fp, r1
 8018e60:	f7f0 f832 	bl	8008ec8 <__aeabi_dcmpgt>
 8018e64:	2800      	cmp	r0, #0
 8018e66:	f040 8295 	bne.w	8019394 <_dtoa_r+0x94c>
 8018e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e6c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018e70:	4650      	mov	r0, sl
 8018e72:	4659      	mov	r1, fp
 8018e74:	f7f0 f80a 	bl	8008e8c <__aeabi_dcmplt>
 8018e78:	2800      	cmp	r0, #0
 8018e7a:	f040 8289 	bne.w	8019390 <_dtoa_r+0x948>
 8018e7e:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 8018e82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	f2c0 814e 	blt.w	8019126 <_dtoa_r+0x6de>
 8018e8a:	9a03      	ldr	r2, [sp, #12]
 8018e8c:	2a0e      	cmp	r2, #14
 8018e8e:	f300 814a 	bgt.w	8019126 <_dtoa_r+0x6de>
 8018e92:	4b45      	ldr	r3, [pc, #276]	; (8018fa8 <_dtoa_r+0x560>)
 8018e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018e98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8018e9c:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8018ea0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	f280 80d7 	bge.w	8019056 <_dtoa_r+0x60e>
 8018ea8:	9b05      	ldr	r3, [sp, #20]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	f300 80d3 	bgt.w	8019056 <_dtoa_r+0x60e>
 8018eb0:	f040 826d 	bne.w	801938e <_dtoa_r+0x946>
 8018eb4:	4b41      	ldr	r3, [pc, #260]	; (8018fbc <_dtoa_r+0x574>)
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018ebc:	f7ef fd74 	bl	80089a8 <__aeabi_dmul>
 8018ec0:	4652      	mov	r2, sl
 8018ec2:	465b      	mov	r3, fp
 8018ec4:	f7ef fff6 	bl	8008eb4 <__aeabi_dcmpge>
 8018ec8:	9c05      	ldr	r4, [sp, #20]
 8018eca:	4625      	mov	r5, r4
 8018ecc:	2800      	cmp	r0, #0
 8018ece:	f040 8246 	bne.w	801935e <_dtoa_r+0x916>
 8018ed2:	9e04      	ldr	r6, [sp, #16]
 8018ed4:	2331      	movs	r3, #49	; 0x31
 8018ed6:	f806 3b01 	strb.w	r3, [r6], #1
 8018eda:	9b03      	ldr	r3, [sp, #12]
 8018edc:	3301      	adds	r3, #1
 8018ede:	9303      	str	r3, [sp, #12]
 8018ee0:	e241      	b.n	8019366 <_dtoa_r+0x91e>
 8018ee2:	07e2      	lsls	r2, r4, #31
 8018ee4:	d505      	bpl.n	8018ef2 <_dtoa_r+0x4aa>
 8018ee6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018eea:	f7ef fd5d 	bl	80089a8 <__aeabi_dmul>
 8018eee:	3701      	adds	r7, #1
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	1064      	asrs	r4, r4, #1
 8018ef4:	3508      	adds	r5, #8
 8018ef6:	e773      	b.n	8018de0 <_dtoa_r+0x398>
 8018ef8:	2702      	movs	r7, #2
 8018efa:	e775      	b.n	8018de8 <_dtoa_r+0x3a0>
 8018efc:	9d03      	ldr	r5, [sp, #12]
 8018efe:	9c05      	ldr	r4, [sp, #20]
 8018f00:	e792      	b.n	8018e28 <_dtoa_r+0x3e0>
 8018f02:	9904      	ldr	r1, [sp, #16]
 8018f04:	4b28      	ldr	r3, [pc, #160]	; (8018fa8 <_dtoa_r+0x560>)
 8018f06:	4421      	add	r1, r4
 8018f08:	9112      	str	r1, [sp, #72]	; 0x48
 8018f0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018f0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018f10:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8018f14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018f18:	2900      	cmp	r1, #0
 8018f1a:	d053      	beq.n	8018fc4 <_dtoa_r+0x57c>
 8018f1c:	4928      	ldr	r1, [pc, #160]	; (8018fc0 <_dtoa_r+0x578>)
 8018f1e:	2000      	movs	r0, #0
 8018f20:	f7ef fe6c 	bl	8008bfc <__aeabi_ddiv>
 8018f24:	4632      	mov	r2, r6
 8018f26:	463b      	mov	r3, r7
 8018f28:	f7ef fb86 	bl	8008638 <__aeabi_dsub>
 8018f2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8018f30:	9e04      	ldr	r6, [sp, #16]
 8018f32:	4659      	mov	r1, fp
 8018f34:	4650      	mov	r0, sl
 8018f36:	f7ef ffe7 	bl	8008f08 <__aeabi_d2iz>
 8018f3a:	4604      	mov	r4, r0
 8018f3c:	f7ef fcca 	bl	80088d4 <__aeabi_i2d>
 8018f40:	4602      	mov	r2, r0
 8018f42:	460b      	mov	r3, r1
 8018f44:	4650      	mov	r0, sl
 8018f46:	4659      	mov	r1, fp
 8018f48:	f7ef fb76 	bl	8008638 <__aeabi_dsub>
 8018f4c:	3430      	adds	r4, #48	; 0x30
 8018f4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018f52:	f806 4b01 	strb.w	r4, [r6], #1
 8018f56:	4682      	mov	sl, r0
 8018f58:	468b      	mov	fp, r1
 8018f5a:	f7ef ff97 	bl	8008e8c <__aeabi_dcmplt>
 8018f5e:	2800      	cmp	r0, #0
 8018f60:	d171      	bne.n	8019046 <_dtoa_r+0x5fe>
 8018f62:	4652      	mov	r2, sl
 8018f64:	465b      	mov	r3, fp
 8018f66:	4912      	ldr	r1, [pc, #72]	; (8018fb0 <_dtoa_r+0x568>)
 8018f68:	2000      	movs	r0, #0
 8018f6a:	f7ef fb65 	bl	8008638 <__aeabi_dsub>
 8018f6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018f72:	f7ef ff8b 	bl	8008e8c <__aeabi_dcmplt>
 8018f76:	2800      	cmp	r0, #0
 8018f78:	f040 80b7 	bne.w	80190ea <_dtoa_r+0x6a2>
 8018f7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018f7e:	429e      	cmp	r6, r3
 8018f80:	f43f af7d 	beq.w	8018e7e <_dtoa_r+0x436>
 8018f84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8018f88:	4b0a      	ldr	r3, [pc, #40]	; (8018fb4 <_dtoa_r+0x56c>)
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	f7ef fd0c 	bl	80089a8 <__aeabi_dmul>
 8018f90:	4b08      	ldr	r3, [pc, #32]	; (8018fb4 <_dtoa_r+0x56c>)
 8018f92:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8018f96:	2200      	movs	r2, #0
 8018f98:	4650      	mov	r0, sl
 8018f9a:	4659      	mov	r1, fp
 8018f9c:	f7ef fd04 	bl	80089a8 <__aeabi_dmul>
 8018fa0:	4682      	mov	sl, r0
 8018fa2:	468b      	mov	fp, r1
 8018fa4:	e7c5      	b.n	8018f32 <_dtoa_r+0x4ea>
 8018fa6:	bf00      	nop
 8018fa8:	0801b8f0 	.word	0x0801b8f0
 8018fac:	0801b8c8 	.word	0x0801b8c8
 8018fb0:	3ff00000 	.word	0x3ff00000
 8018fb4:	40240000 	.word	0x40240000
 8018fb8:	401c0000 	.word	0x401c0000
 8018fbc:	40140000 	.word	0x40140000
 8018fc0:	3fe00000 	.word	0x3fe00000
 8018fc4:	4630      	mov	r0, r6
 8018fc6:	4639      	mov	r1, r7
 8018fc8:	f7ef fcee 	bl	80089a8 <__aeabi_dmul>
 8018fcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8018fd0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8018fd2:	9e04      	ldr	r6, [sp, #16]
 8018fd4:	4659      	mov	r1, fp
 8018fd6:	4650      	mov	r0, sl
 8018fd8:	f7ef ff96 	bl	8008f08 <__aeabi_d2iz>
 8018fdc:	4604      	mov	r4, r0
 8018fde:	f7ef fc79 	bl	80088d4 <__aeabi_i2d>
 8018fe2:	3430      	adds	r4, #48	; 0x30
 8018fe4:	4602      	mov	r2, r0
 8018fe6:	460b      	mov	r3, r1
 8018fe8:	4650      	mov	r0, sl
 8018fea:	4659      	mov	r1, fp
 8018fec:	f7ef fb24 	bl	8008638 <__aeabi_dsub>
 8018ff0:	f806 4b01 	strb.w	r4, [r6], #1
 8018ff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018ff6:	429e      	cmp	r6, r3
 8018ff8:	4682      	mov	sl, r0
 8018ffa:	468b      	mov	fp, r1
 8018ffc:	f04f 0200 	mov.w	r2, #0
 8019000:	d123      	bne.n	801904a <_dtoa_r+0x602>
 8019002:	4bb0      	ldr	r3, [pc, #704]	; (80192c4 <_dtoa_r+0x87c>)
 8019004:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019008:	f7ef fb18 	bl	800863c <__adddf3>
 801900c:	4602      	mov	r2, r0
 801900e:	460b      	mov	r3, r1
 8019010:	4650      	mov	r0, sl
 8019012:	4659      	mov	r1, fp
 8019014:	f7ef ff58 	bl	8008ec8 <__aeabi_dcmpgt>
 8019018:	2800      	cmp	r0, #0
 801901a:	d166      	bne.n	80190ea <_dtoa_r+0x6a2>
 801901c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8019020:	49a8      	ldr	r1, [pc, #672]	; (80192c4 <_dtoa_r+0x87c>)
 8019022:	2000      	movs	r0, #0
 8019024:	f7ef fb08 	bl	8008638 <__aeabi_dsub>
 8019028:	4602      	mov	r2, r0
 801902a:	460b      	mov	r3, r1
 801902c:	4650      	mov	r0, sl
 801902e:	4659      	mov	r1, fp
 8019030:	f7ef ff2c 	bl	8008e8c <__aeabi_dcmplt>
 8019034:	2800      	cmp	r0, #0
 8019036:	f43f af22 	beq.w	8018e7e <_dtoa_r+0x436>
 801903a:	463e      	mov	r6, r7
 801903c:	3f01      	subs	r7, #1
 801903e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019042:	2b30      	cmp	r3, #48	; 0x30
 8019044:	d0f9      	beq.n	801903a <_dtoa_r+0x5f2>
 8019046:	9503      	str	r5, [sp, #12]
 8019048:	e03e      	b.n	80190c8 <_dtoa_r+0x680>
 801904a:	4b9f      	ldr	r3, [pc, #636]	; (80192c8 <_dtoa_r+0x880>)
 801904c:	f7ef fcac 	bl	80089a8 <__aeabi_dmul>
 8019050:	4682      	mov	sl, r0
 8019052:	468b      	mov	fp, r1
 8019054:	e7be      	b.n	8018fd4 <_dtoa_r+0x58c>
 8019056:	465d      	mov	r5, fp
 8019058:	9e04      	ldr	r6, [sp, #16]
 801905a:	f8df b26c 	ldr.w	fp, [pc, #620]	; 80192c8 <_dtoa_r+0x880>
 801905e:	4654      	mov	r4, sl
 8019060:	f04f 0a00 	mov.w	sl, #0
 8019064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019068:	4620      	mov	r0, r4
 801906a:	4629      	mov	r1, r5
 801906c:	f7ef fdc6 	bl	8008bfc <__aeabi_ddiv>
 8019070:	f7ef ff4a 	bl	8008f08 <__aeabi_d2iz>
 8019074:	4607      	mov	r7, r0
 8019076:	f7ef fc2d 	bl	80088d4 <__aeabi_i2d>
 801907a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801907e:	f7ef fc93 	bl	80089a8 <__aeabi_dmul>
 8019082:	4602      	mov	r2, r0
 8019084:	460b      	mov	r3, r1
 8019086:	4620      	mov	r0, r4
 8019088:	4629      	mov	r1, r5
 801908a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801908e:	f7ef fad3 	bl	8008638 <__aeabi_dsub>
 8019092:	f806 4b01 	strb.w	r4, [r6], #1
 8019096:	9c04      	ldr	r4, [sp, #16]
 8019098:	9d05      	ldr	r5, [sp, #20]
 801909a:	1b34      	subs	r4, r6, r4
 801909c:	42a5      	cmp	r5, r4
 801909e:	4602      	mov	r2, r0
 80190a0:	460b      	mov	r3, r1
 80190a2:	d133      	bne.n	801910c <_dtoa_r+0x6c4>
 80190a4:	f7ef faca 	bl	800863c <__adddf3>
 80190a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80190ac:	4604      	mov	r4, r0
 80190ae:	460d      	mov	r5, r1
 80190b0:	f7ef ff0a 	bl	8008ec8 <__aeabi_dcmpgt>
 80190b4:	b9c0      	cbnz	r0, 80190e8 <_dtoa_r+0x6a0>
 80190b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80190ba:	4620      	mov	r0, r4
 80190bc:	4629      	mov	r1, r5
 80190be:	f7ef fedb 	bl	8008e78 <__aeabi_dcmpeq>
 80190c2:	b108      	cbz	r0, 80190c8 <_dtoa_r+0x680>
 80190c4:	07fb      	lsls	r3, r7, #31
 80190c6:	d40f      	bmi.n	80190e8 <_dtoa_r+0x6a0>
 80190c8:	4641      	mov	r1, r8
 80190ca:	4648      	mov	r0, r9
 80190cc:	f000 fabd 	bl	801964a <_Bfree>
 80190d0:	2300      	movs	r3, #0
 80190d2:	7033      	strb	r3, [r6, #0]
 80190d4:	9b03      	ldr	r3, [sp, #12]
 80190d6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80190d8:	3301      	adds	r3, #1
 80190da:	6013      	str	r3, [r2, #0]
 80190dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80190de:	2b00      	cmp	r3, #0
 80190e0:	f43f ace8 	beq.w	8018ab4 <_dtoa_r+0x6c>
 80190e4:	601e      	str	r6, [r3, #0]
 80190e6:	e4e5      	b.n	8018ab4 <_dtoa_r+0x6c>
 80190e8:	9d03      	ldr	r5, [sp, #12]
 80190ea:	4633      	mov	r3, r6
 80190ec:	461e      	mov	r6, r3
 80190ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80190f2:	2a39      	cmp	r2, #57	; 0x39
 80190f4:	d106      	bne.n	8019104 <_dtoa_r+0x6bc>
 80190f6:	9a04      	ldr	r2, [sp, #16]
 80190f8:	429a      	cmp	r2, r3
 80190fa:	d1f7      	bne.n	80190ec <_dtoa_r+0x6a4>
 80190fc:	9904      	ldr	r1, [sp, #16]
 80190fe:	2230      	movs	r2, #48	; 0x30
 8019100:	3501      	adds	r5, #1
 8019102:	700a      	strb	r2, [r1, #0]
 8019104:	781a      	ldrb	r2, [r3, #0]
 8019106:	3201      	adds	r2, #1
 8019108:	701a      	strb	r2, [r3, #0]
 801910a:	e79c      	b.n	8019046 <_dtoa_r+0x5fe>
 801910c:	4652      	mov	r2, sl
 801910e:	465b      	mov	r3, fp
 8019110:	f7ef fc4a 	bl	80089a8 <__aeabi_dmul>
 8019114:	2200      	movs	r2, #0
 8019116:	2300      	movs	r3, #0
 8019118:	4604      	mov	r4, r0
 801911a:	460d      	mov	r5, r1
 801911c:	f7ef feac 	bl	8008e78 <__aeabi_dcmpeq>
 8019120:	2800      	cmp	r0, #0
 8019122:	d09f      	beq.n	8019064 <_dtoa_r+0x61c>
 8019124:	e7d0      	b.n	80190c8 <_dtoa_r+0x680>
 8019126:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019128:	2a00      	cmp	r2, #0
 801912a:	f000 80cf 	beq.w	80192cc <_dtoa_r+0x884>
 801912e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019130:	2a01      	cmp	r2, #1
 8019132:	f300 80ad 	bgt.w	8019290 <_dtoa_r+0x848>
 8019136:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019138:	2a00      	cmp	r2, #0
 801913a:	f000 80a5 	beq.w	8019288 <_dtoa_r+0x840>
 801913e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019142:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019144:	9e06      	ldr	r6, [sp, #24]
 8019146:	9a06      	ldr	r2, [sp, #24]
 8019148:	441a      	add	r2, r3
 801914a:	9206      	str	r2, [sp, #24]
 801914c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801914e:	2101      	movs	r1, #1
 8019150:	441a      	add	r2, r3
 8019152:	4648      	mov	r0, r9
 8019154:	9209      	str	r2, [sp, #36]	; 0x24
 8019156:	f000 fb15 	bl	8019784 <__i2b>
 801915a:	4605      	mov	r5, r0
 801915c:	b166      	cbz	r6, 8019178 <_dtoa_r+0x730>
 801915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019160:	2b00      	cmp	r3, #0
 8019162:	dd09      	ble.n	8019178 <_dtoa_r+0x730>
 8019164:	42b3      	cmp	r3, r6
 8019166:	9a06      	ldr	r2, [sp, #24]
 8019168:	bfa8      	it	ge
 801916a:	4633      	movge	r3, r6
 801916c:	1ad2      	subs	r2, r2, r3
 801916e:	9206      	str	r2, [sp, #24]
 8019170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019172:	1af6      	subs	r6, r6, r3
 8019174:	1ad3      	subs	r3, r2, r3
 8019176:	9309      	str	r3, [sp, #36]	; 0x24
 8019178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801917a:	b1f3      	cbz	r3, 80191ba <_dtoa_r+0x772>
 801917c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801917e:	2b00      	cmp	r3, #0
 8019180:	f000 80a8 	beq.w	80192d4 <_dtoa_r+0x88c>
 8019184:	2c00      	cmp	r4, #0
 8019186:	dd10      	ble.n	80191aa <_dtoa_r+0x762>
 8019188:	4629      	mov	r1, r5
 801918a:	4622      	mov	r2, r4
 801918c:	4648      	mov	r0, r9
 801918e:	f000 fbb9 	bl	8019904 <__pow5mult>
 8019192:	4642      	mov	r2, r8
 8019194:	4601      	mov	r1, r0
 8019196:	4605      	mov	r5, r0
 8019198:	4648      	mov	r0, r9
 801919a:	f000 fb09 	bl	80197b0 <__multiply>
 801919e:	4641      	mov	r1, r8
 80191a0:	4607      	mov	r7, r0
 80191a2:	4648      	mov	r0, r9
 80191a4:	f000 fa51 	bl	801964a <_Bfree>
 80191a8:	46b8      	mov	r8, r7
 80191aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191ac:	1b1a      	subs	r2, r3, r4
 80191ae:	d004      	beq.n	80191ba <_dtoa_r+0x772>
 80191b0:	4641      	mov	r1, r8
 80191b2:	4648      	mov	r0, r9
 80191b4:	f000 fba6 	bl	8019904 <__pow5mult>
 80191b8:	4680      	mov	r8, r0
 80191ba:	2101      	movs	r1, #1
 80191bc:	4648      	mov	r0, r9
 80191be:	f000 fae1 	bl	8019784 <__i2b>
 80191c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	4604      	mov	r4, r0
 80191c8:	f340 8086 	ble.w	80192d8 <_dtoa_r+0x890>
 80191cc:	461a      	mov	r2, r3
 80191ce:	4601      	mov	r1, r0
 80191d0:	4648      	mov	r0, r9
 80191d2:	f000 fb97 	bl	8019904 <__pow5mult>
 80191d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80191d8:	2b01      	cmp	r3, #1
 80191da:	4604      	mov	r4, r0
 80191dc:	dd7f      	ble.n	80192de <_dtoa_r+0x896>
 80191de:	2700      	movs	r7, #0
 80191e0:	6923      	ldr	r3, [r4, #16]
 80191e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80191e6:	6918      	ldr	r0, [r3, #16]
 80191e8:	f000 fa7e 	bl	80196e8 <__hi0bits>
 80191ec:	f1c0 0020 	rsb	r0, r0, #32
 80191f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191f2:	4418      	add	r0, r3
 80191f4:	f010 001f 	ands.w	r0, r0, #31
 80191f8:	f000 8098 	beq.w	801932c <_dtoa_r+0x8e4>
 80191fc:	f1c0 0320 	rsb	r3, r0, #32
 8019200:	2b04      	cmp	r3, #4
 8019202:	f340 8088 	ble.w	8019316 <_dtoa_r+0x8ce>
 8019206:	9b06      	ldr	r3, [sp, #24]
 8019208:	f1c0 001c 	rsb	r0, r0, #28
 801920c:	4403      	add	r3, r0
 801920e:	9306      	str	r3, [sp, #24]
 8019210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019212:	4403      	add	r3, r0
 8019214:	4406      	add	r6, r0
 8019216:	9309      	str	r3, [sp, #36]	; 0x24
 8019218:	9b06      	ldr	r3, [sp, #24]
 801921a:	2b00      	cmp	r3, #0
 801921c:	dd05      	ble.n	801922a <_dtoa_r+0x7e2>
 801921e:	4641      	mov	r1, r8
 8019220:	461a      	mov	r2, r3
 8019222:	4648      	mov	r0, r9
 8019224:	f000 fbae 	bl	8019984 <__lshift>
 8019228:	4680      	mov	r8, r0
 801922a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801922c:	2b00      	cmp	r3, #0
 801922e:	dd05      	ble.n	801923c <_dtoa_r+0x7f4>
 8019230:	4621      	mov	r1, r4
 8019232:	461a      	mov	r2, r3
 8019234:	4648      	mov	r0, r9
 8019236:	f000 fba5 	bl	8019984 <__lshift>
 801923a:	4604      	mov	r4, r0
 801923c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801923e:	2b00      	cmp	r3, #0
 8019240:	d076      	beq.n	8019330 <_dtoa_r+0x8e8>
 8019242:	4621      	mov	r1, r4
 8019244:	4640      	mov	r0, r8
 8019246:	f000 fc09 	bl	8019a5c <__mcmp>
 801924a:	2800      	cmp	r0, #0
 801924c:	da70      	bge.n	8019330 <_dtoa_r+0x8e8>
 801924e:	9b03      	ldr	r3, [sp, #12]
 8019250:	3b01      	subs	r3, #1
 8019252:	9303      	str	r3, [sp, #12]
 8019254:	4641      	mov	r1, r8
 8019256:	2300      	movs	r3, #0
 8019258:	220a      	movs	r2, #10
 801925a:	4648      	mov	r0, r9
 801925c:	f000 f9fe 	bl	801965c <__multadd>
 8019260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019262:	4680      	mov	r8, r0
 8019264:	2b00      	cmp	r3, #0
 8019266:	f000 81aa 	beq.w	80195be <_dtoa_r+0xb76>
 801926a:	2300      	movs	r3, #0
 801926c:	4629      	mov	r1, r5
 801926e:	220a      	movs	r2, #10
 8019270:	4648      	mov	r0, r9
 8019272:	f000 f9f3 	bl	801965c <__multadd>
 8019276:	9b08      	ldr	r3, [sp, #32]
 8019278:	2b00      	cmp	r3, #0
 801927a:	4605      	mov	r5, r0
 801927c:	f300 8093 	bgt.w	80193a6 <_dtoa_r+0x95e>
 8019280:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019282:	2b02      	cmp	r3, #2
 8019284:	dc5c      	bgt.n	8019340 <_dtoa_r+0x8f8>
 8019286:	e08e      	b.n	80193a6 <_dtoa_r+0x95e>
 8019288:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801928a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801928e:	e758      	b.n	8019142 <_dtoa_r+0x6fa>
 8019290:	9b05      	ldr	r3, [sp, #20]
 8019292:	1e5c      	subs	r4, r3, #1
 8019294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019296:	42a3      	cmp	r3, r4
 8019298:	bfbf      	itttt	lt
 801929a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801929c:	9a10      	ldrlt	r2, [sp, #64]	; 0x40
 801929e:	940a      	strlt	r4, [sp, #40]	; 0x28
 80192a0:	1ae3      	sublt	r3, r4, r3
 80192a2:	bfb4      	ite	lt
 80192a4:	18d2      	addlt	r2, r2, r3
 80192a6:	1b1c      	subge	r4, r3, r4
 80192a8:	9b05      	ldr	r3, [sp, #20]
 80192aa:	bfbc      	itt	lt
 80192ac:	9210      	strlt	r2, [sp, #64]	; 0x40
 80192ae:	2400      	movlt	r4, #0
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	bfb7      	itett	lt
 80192b4:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 80192b8:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 80192bc:	1a9e      	sublt	r6, r3, r2
 80192be:	2300      	movlt	r3, #0
 80192c0:	e741      	b.n	8019146 <_dtoa_r+0x6fe>
 80192c2:	bf00      	nop
 80192c4:	3fe00000 	.word	0x3fe00000
 80192c8:	40240000 	.word	0x40240000
 80192cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80192ce:	9e06      	ldr	r6, [sp, #24]
 80192d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80192d2:	e743      	b.n	801915c <_dtoa_r+0x714>
 80192d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80192d6:	e76b      	b.n	80191b0 <_dtoa_r+0x768>
 80192d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80192da:	2b01      	cmp	r3, #1
 80192dc:	dc17      	bgt.n	801930e <_dtoa_r+0x8c6>
 80192de:	f1ba 0f00 	cmp.w	sl, #0
 80192e2:	d114      	bne.n	801930e <_dtoa_r+0x8c6>
 80192e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80192e8:	b99b      	cbnz	r3, 8019312 <_dtoa_r+0x8ca>
 80192ea:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80192ee:	0d3f      	lsrs	r7, r7, #20
 80192f0:	053f      	lsls	r7, r7, #20
 80192f2:	b137      	cbz	r7, 8019302 <_dtoa_r+0x8ba>
 80192f4:	9b06      	ldr	r3, [sp, #24]
 80192f6:	3301      	adds	r3, #1
 80192f8:	9306      	str	r3, [sp, #24]
 80192fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192fc:	3301      	adds	r3, #1
 80192fe:	9309      	str	r3, [sp, #36]	; 0x24
 8019300:	2701      	movs	r7, #1
 8019302:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019304:	2b00      	cmp	r3, #0
 8019306:	f47f af6b 	bne.w	80191e0 <_dtoa_r+0x798>
 801930a:	2001      	movs	r0, #1
 801930c:	e770      	b.n	80191f0 <_dtoa_r+0x7a8>
 801930e:	2700      	movs	r7, #0
 8019310:	e7f7      	b.n	8019302 <_dtoa_r+0x8ba>
 8019312:	4657      	mov	r7, sl
 8019314:	e7f5      	b.n	8019302 <_dtoa_r+0x8ba>
 8019316:	f43f af7f 	beq.w	8019218 <_dtoa_r+0x7d0>
 801931a:	9a06      	ldr	r2, [sp, #24]
 801931c:	331c      	adds	r3, #28
 801931e:	441a      	add	r2, r3
 8019320:	9206      	str	r2, [sp, #24]
 8019322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019324:	441a      	add	r2, r3
 8019326:	441e      	add	r6, r3
 8019328:	9209      	str	r2, [sp, #36]	; 0x24
 801932a:	e775      	b.n	8019218 <_dtoa_r+0x7d0>
 801932c:	4603      	mov	r3, r0
 801932e:	e7f4      	b.n	801931a <_dtoa_r+0x8d2>
 8019330:	9b05      	ldr	r3, [sp, #20]
 8019332:	2b00      	cmp	r3, #0
 8019334:	dc31      	bgt.n	801939a <_dtoa_r+0x952>
 8019336:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019338:	2b02      	cmp	r3, #2
 801933a:	dd2e      	ble.n	801939a <_dtoa_r+0x952>
 801933c:	9b05      	ldr	r3, [sp, #20]
 801933e:	9308      	str	r3, [sp, #32]
 8019340:	9b08      	ldr	r3, [sp, #32]
 8019342:	b963      	cbnz	r3, 801935e <_dtoa_r+0x916>
 8019344:	4621      	mov	r1, r4
 8019346:	2205      	movs	r2, #5
 8019348:	4648      	mov	r0, r9
 801934a:	f000 f987 	bl	801965c <__multadd>
 801934e:	4601      	mov	r1, r0
 8019350:	4604      	mov	r4, r0
 8019352:	4640      	mov	r0, r8
 8019354:	f000 fb82 	bl	8019a5c <__mcmp>
 8019358:	2800      	cmp	r0, #0
 801935a:	f73f adba 	bgt.w	8018ed2 <_dtoa_r+0x48a>
 801935e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019360:	9e04      	ldr	r6, [sp, #16]
 8019362:	43db      	mvns	r3, r3
 8019364:	9303      	str	r3, [sp, #12]
 8019366:	2700      	movs	r7, #0
 8019368:	4621      	mov	r1, r4
 801936a:	4648      	mov	r0, r9
 801936c:	f000 f96d 	bl	801964a <_Bfree>
 8019370:	2d00      	cmp	r5, #0
 8019372:	f43f aea9 	beq.w	80190c8 <_dtoa_r+0x680>
 8019376:	b12f      	cbz	r7, 8019384 <_dtoa_r+0x93c>
 8019378:	42af      	cmp	r7, r5
 801937a:	d003      	beq.n	8019384 <_dtoa_r+0x93c>
 801937c:	4639      	mov	r1, r7
 801937e:	4648      	mov	r0, r9
 8019380:	f000 f963 	bl	801964a <_Bfree>
 8019384:	4629      	mov	r1, r5
 8019386:	4648      	mov	r0, r9
 8019388:	f000 f95f 	bl	801964a <_Bfree>
 801938c:	e69c      	b.n	80190c8 <_dtoa_r+0x680>
 801938e:	2400      	movs	r4, #0
 8019390:	4625      	mov	r5, r4
 8019392:	e7e4      	b.n	801935e <_dtoa_r+0x916>
 8019394:	9503      	str	r5, [sp, #12]
 8019396:	4625      	mov	r5, r4
 8019398:	e59b      	b.n	8018ed2 <_dtoa_r+0x48a>
 801939a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801939c:	2b00      	cmp	r3, #0
 801939e:	f000 80c4 	beq.w	801952a <_dtoa_r+0xae2>
 80193a2:	9b05      	ldr	r3, [sp, #20]
 80193a4:	9308      	str	r3, [sp, #32]
 80193a6:	2e00      	cmp	r6, #0
 80193a8:	dd05      	ble.n	80193b6 <_dtoa_r+0x96e>
 80193aa:	4629      	mov	r1, r5
 80193ac:	4632      	mov	r2, r6
 80193ae:	4648      	mov	r0, r9
 80193b0:	f000 fae8 	bl	8019984 <__lshift>
 80193b4:	4605      	mov	r5, r0
 80193b6:	2f00      	cmp	r7, #0
 80193b8:	d058      	beq.n	801946c <_dtoa_r+0xa24>
 80193ba:	6869      	ldr	r1, [r5, #4]
 80193bc:	4648      	mov	r0, r9
 80193be:	f000 f91f 	bl	8019600 <_Balloc>
 80193c2:	4606      	mov	r6, r0
 80193c4:	b920      	cbnz	r0, 80193d0 <_dtoa_r+0x988>
 80193c6:	4b82      	ldr	r3, [pc, #520]	; (80195d0 <_dtoa_r+0xb88>)
 80193c8:	4602      	mov	r2, r0
 80193ca:	f240 21ef 	movw	r1, #751	; 0x2ef
 80193ce:	e476      	b.n	8018cbe <_dtoa_r+0x276>
 80193d0:	692a      	ldr	r2, [r5, #16]
 80193d2:	3202      	adds	r2, #2
 80193d4:	0092      	lsls	r2, r2, #2
 80193d6:	f105 010c 	add.w	r1, r5, #12
 80193da:	300c      	adds	r0, #12
 80193dc:	f7fb f9a6 	bl	801472c <memcpy>
 80193e0:	2201      	movs	r2, #1
 80193e2:	4631      	mov	r1, r6
 80193e4:	4648      	mov	r0, r9
 80193e6:	f000 facd 	bl	8019984 <__lshift>
 80193ea:	9b04      	ldr	r3, [sp, #16]
 80193ec:	9a04      	ldr	r2, [sp, #16]
 80193ee:	3301      	adds	r3, #1
 80193f0:	9305      	str	r3, [sp, #20]
 80193f2:	9b08      	ldr	r3, [sp, #32]
 80193f4:	4413      	add	r3, r2
 80193f6:	930a      	str	r3, [sp, #40]	; 0x28
 80193f8:	f00a 0301 	and.w	r3, sl, #1
 80193fc:	462f      	mov	r7, r5
 80193fe:	9309      	str	r3, [sp, #36]	; 0x24
 8019400:	4605      	mov	r5, r0
 8019402:	9b05      	ldr	r3, [sp, #20]
 8019404:	4621      	mov	r1, r4
 8019406:	4640      	mov	r0, r8
 8019408:	f103 3bff 	add.w	fp, r3, #4294967295
 801940c:	f7ff fa94 	bl	8018938 <quorem>
 8019410:	4639      	mov	r1, r7
 8019412:	9006      	str	r0, [sp, #24]
 8019414:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8019418:	4640      	mov	r0, r8
 801941a:	f000 fb1f 	bl	8019a5c <__mcmp>
 801941e:	462a      	mov	r2, r5
 8019420:	9008      	str	r0, [sp, #32]
 8019422:	4621      	mov	r1, r4
 8019424:	4648      	mov	r0, r9
 8019426:	f000 fb35 	bl	8019a94 <__mdiff>
 801942a:	68c2      	ldr	r2, [r0, #12]
 801942c:	4606      	mov	r6, r0
 801942e:	b9fa      	cbnz	r2, 8019470 <_dtoa_r+0xa28>
 8019430:	4601      	mov	r1, r0
 8019432:	4640      	mov	r0, r8
 8019434:	f000 fb12 	bl	8019a5c <__mcmp>
 8019438:	4602      	mov	r2, r0
 801943a:	4631      	mov	r1, r6
 801943c:	4648      	mov	r0, r9
 801943e:	920b      	str	r2, [sp, #44]	; 0x2c
 8019440:	f000 f903 	bl	801964a <_Bfree>
 8019444:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019448:	9e05      	ldr	r6, [sp, #20]
 801944a:	ea43 0102 	orr.w	r1, r3, r2
 801944e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019450:	4319      	orrs	r1, r3
 8019452:	d10f      	bne.n	8019474 <_dtoa_r+0xa2c>
 8019454:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8019458:	d028      	beq.n	80194ac <_dtoa_r+0xa64>
 801945a:	9b08      	ldr	r3, [sp, #32]
 801945c:	2b00      	cmp	r3, #0
 801945e:	dd02      	ble.n	8019466 <_dtoa_r+0xa1e>
 8019460:	9b06      	ldr	r3, [sp, #24]
 8019462:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8019466:	f88b a000 	strb.w	sl, [fp]
 801946a:	e77d      	b.n	8019368 <_dtoa_r+0x920>
 801946c:	4628      	mov	r0, r5
 801946e:	e7bc      	b.n	80193ea <_dtoa_r+0x9a2>
 8019470:	2201      	movs	r2, #1
 8019472:	e7e2      	b.n	801943a <_dtoa_r+0x9f2>
 8019474:	9b08      	ldr	r3, [sp, #32]
 8019476:	2b00      	cmp	r3, #0
 8019478:	db04      	blt.n	8019484 <_dtoa_r+0xa3c>
 801947a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801947c:	430b      	orrs	r3, r1
 801947e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019480:	430b      	orrs	r3, r1
 8019482:	d120      	bne.n	80194c6 <_dtoa_r+0xa7e>
 8019484:	2a00      	cmp	r2, #0
 8019486:	ddee      	ble.n	8019466 <_dtoa_r+0xa1e>
 8019488:	4641      	mov	r1, r8
 801948a:	2201      	movs	r2, #1
 801948c:	4648      	mov	r0, r9
 801948e:	f000 fa79 	bl	8019984 <__lshift>
 8019492:	4621      	mov	r1, r4
 8019494:	4680      	mov	r8, r0
 8019496:	f000 fae1 	bl	8019a5c <__mcmp>
 801949a:	2800      	cmp	r0, #0
 801949c:	dc03      	bgt.n	80194a6 <_dtoa_r+0xa5e>
 801949e:	d1e2      	bne.n	8019466 <_dtoa_r+0xa1e>
 80194a0:	f01a 0f01 	tst.w	sl, #1
 80194a4:	d0df      	beq.n	8019466 <_dtoa_r+0xa1e>
 80194a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80194aa:	d1d9      	bne.n	8019460 <_dtoa_r+0xa18>
 80194ac:	2339      	movs	r3, #57	; 0x39
 80194ae:	f88b 3000 	strb.w	r3, [fp]
 80194b2:	4633      	mov	r3, r6
 80194b4:	461e      	mov	r6, r3
 80194b6:	3b01      	subs	r3, #1
 80194b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80194bc:	2a39      	cmp	r2, #57	; 0x39
 80194be:	d06b      	beq.n	8019598 <_dtoa_r+0xb50>
 80194c0:	3201      	adds	r2, #1
 80194c2:	701a      	strb	r2, [r3, #0]
 80194c4:	e750      	b.n	8019368 <_dtoa_r+0x920>
 80194c6:	2a00      	cmp	r2, #0
 80194c8:	dd07      	ble.n	80194da <_dtoa_r+0xa92>
 80194ca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80194ce:	d0ed      	beq.n	80194ac <_dtoa_r+0xa64>
 80194d0:	f10a 0301 	add.w	r3, sl, #1
 80194d4:	f88b 3000 	strb.w	r3, [fp]
 80194d8:	e746      	b.n	8019368 <_dtoa_r+0x920>
 80194da:	9b05      	ldr	r3, [sp, #20]
 80194dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80194de:	f803 ac01 	strb.w	sl, [r3, #-1]
 80194e2:	4293      	cmp	r3, r2
 80194e4:	d042      	beq.n	801956c <_dtoa_r+0xb24>
 80194e6:	4641      	mov	r1, r8
 80194e8:	2300      	movs	r3, #0
 80194ea:	220a      	movs	r2, #10
 80194ec:	4648      	mov	r0, r9
 80194ee:	f000 f8b5 	bl	801965c <__multadd>
 80194f2:	42af      	cmp	r7, r5
 80194f4:	4680      	mov	r8, r0
 80194f6:	f04f 0300 	mov.w	r3, #0
 80194fa:	f04f 020a 	mov.w	r2, #10
 80194fe:	4639      	mov	r1, r7
 8019500:	4648      	mov	r0, r9
 8019502:	d107      	bne.n	8019514 <_dtoa_r+0xacc>
 8019504:	f000 f8aa 	bl	801965c <__multadd>
 8019508:	4607      	mov	r7, r0
 801950a:	4605      	mov	r5, r0
 801950c:	9b05      	ldr	r3, [sp, #20]
 801950e:	3301      	adds	r3, #1
 8019510:	9305      	str	r3, [sp, #20]
 8019512:	e776      	b.n	8019402 <_dtoa_r+0x9ba>
 8019514:	f000 f8a2 	bl	801965c <__multadd>
 8019518:	4629      	mov	r1, r5
 801951a:	4607      	mov	r7, r0
 801951c:	2300      	movs	r3, #0
 801951e:	220a      	movs	r2, #10
 8019520:	4648      	mov	r0, r9
 8019522:	f000 f89b 	bl	801965c <__multadd>
 8019526:	4605      	mov	r5, r0
 8019528:	e7f0      	b.n	801950c <_dtoa_r+0xac4>
 801952a:	9b05      	ldr	r3, [sp, #20]
 801952c:	9308      	str	r3, [sp, #32]
 801952e:	9e04      	ldr	r6, [sp, #16]
 8019530:	4621      	mov	r1, r4
 8019532:	4640      	mov	r0, r8
 8019534:	f7ff fa00 	bl	8018938 <quorem>
 8019538:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801953c:	9b04      	ldr	r3, [sp, #16]
 801953e:	f806 ab01 	strb.w	sl, [r6], #1
 8019542:	1af2      	subs	r2, r6, r3
 8019544:	9b08      	ldr	r3, [sp, #32]
 8019546:	4293      	cmp	r3, r2
 8019548:	dd07      	ble.n	801955a <_dtoa_r+0xb12>
 801954a:	4641      	mov	r1, r8
 801954c:	2300      	movs	r3, #0
 801954e:	220a      	movs	r2, #10
 8019550:	4648      	mov	r0, r9
 8019552:	f000 f883 	bl	801965c <__multadd>
 8019556:	4680      	mov	r8, r0
 8019558:	e7ea      	b.n	8019530 <_dtoa_r+0xae8>
 801955a:	9b08      	ldr	r3, [sp, #32]
 801955c:	2b00      	cmp	r3, #0
 801955e:	bfc8      	it	gt
 8019560:	461e      	movgt	r6, r3
 8019562:	9b04      	ldr	r3, [sp, #16]
 8019564:	bfd8      	it	le
 8019566:	2601      	movle	r6, #1
 8019568:	441e      	add	r6, r3
 801956a:	2700      	movs	r7, #0
 801956c:	4641      	mov	r1, r8
 801956e:	2201      	movs	r2, #1
 8019570:	4648      	mov	r0, r9
 8019572:	f000 fa07 	bl	8019984 <__lshift>
 8019576:	4621      	mov	r1, r4
 8019578:	4680      	mov	r8, r0
 801957a:	f000 fa6f 	bl	8019a5c <__mcmp>
 801957e:	2800      	cmp	r0, #0
 8019580:	dc97      	bgt.n	80194b2 <_dtoa_r+0xa6a>
 8019582:	d102      	bne.n	801958a <_dtoa_r+0xb42>
 8019584:	f01a 0f01 	tst.w	sl, #1
 8019588:	d193      	bne.n	80194b2 <_dtoa_r+0xa6a>
 801958a:	4633      	mov	r3, r6
 801958c:	461e      	mov	r6, r3
 801958e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019592:	2a30      	cmp	r2, #48	; 0x30
 8019594:	d0fa      	beq.n	801958c <_dtoa_r+0xb44>
 8019596:	e6e7      	b.n	8019368 <_dtoa_r+0x920>
 8019598:	9a04      	ldr	r2, [sp, #16]
 801959a:	429a      	cmp	r2, r3
 801959c:	d18a      	bne.n	80194b4 <_dtoa_r+0xa6c>
 801959e:	9b03      	ldr	r3, [sp, #12]
 80195a0:	3301      	adds	r3, #1
 80195a2:	9303      	str	r3, [sp, #12]
 80195a4:	2331      	movs	r3, #49	; 0x31
 80195a6:	7013      	strb	r3, [r2, #0]
 80195a8:	e6de      	b.n	8019368 <_dtoa_r+0x920>
 80195aa:	4b0a      	ldr	r3, [pc, #40]	; (80195d4 <_dtoa_r+0xb8c>)
 80195ac:	f7ff ba9f 	b.w	8018aee <_dtoa_r+0xa6>
 80195b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	f47f aa82 	bne.w	8018abc <_dtoa_r+0x74>
 80195b8:	4b07      	ldr	r3, [pc, #28]	; (80195d8 <_dtoa_r+0xb90>)
 80195ba:	f7ff ba98 	b.w	8018aee <_dtoa_r+0xa6>
 80195be:	9b08      	ldr	r3, [sp, #32]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	dcb4      	bgt.n	801952e <_dtoa_r+0xae6>
 80195c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80195c6:	2b02      	cmp	r3, #2
 80195c8:	f73f aeba 	bgt.w	8019340 <_dtoa_r+0x8f8>
 80195cc:	e7af      	b.n	801952e <_dtoa_r+0xae6>
 80195ce:	bf00      	nop
 80195d0:	0801b800 	.word	0x0801b800
 80195d4:	0801b787 	.word	0x0801b787
 80195d8:	0801b7f3 	.word	0x0801b7f3

080195dc <__ascii_mbtowc>:
 80195dc:	b082      	sub	sp, #8
 80195de:	b901      	cbnz	r1, 80195e2 <__ascii_mbtowc+0x6>
 80195e0:	a901      	add	r1, sp, #4
 80195e2:	b142      	cbz	r2, 80195f6 <__ascii_mbtowc+0x1a>
 80195e4:	b14b      	cbz	r3, 80195fa <__ascii_mbtowc+0x1e>
 80195e6:	7813      	ldrb	r3, [r2, #0]
 80195e8:	600b      	str	r3, [r1, #0]
 80195ea:	7812      	ldrb	r2, [r2, #0]
 80195ec:	1e10      	subs	r0, r2, #0
 80195ee:	bf18      	it	ne
 80195f0:	2001      	movne	r0, #1
 80195f2:	b002      	add	sp, #8
 80195f4:	4770      	bx	lr
 80195f6:	4610      	mov	r0, r2
 80195f8:	e7fb      	b.n	80195f2 <__ascii_mbtowc+0x16>
 80195fa:	f06f 0001 	mvn.w	r0, #1
 80195fe:	e7f8      	b.n	80195f2 <__ascii_mbtowc+0x16>

08019600 <_Balloc>:
 8019600:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8019602:	b570      	push	{r4, r5, r6, lr}
 8019604:	4605      	mov	r5, r0
 8019606:	460c      	mov	r4, r1
 8019608:	b17b      	cbz	r3, 801962a <_Balloc+0x2a>
 801960a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801960c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019610:	b9a0      	cbnz	r0, 801963c <_Balloc+0x3c>
 8019612:	2101      	movs	r1, #1
 8019614:	fa01 f604 	lsl.w	r6, r1, r4
 8019618:	1d72      	adds	r2, r6, #5
 801961a:	0092      	lsls	r2, r2, #2
 801961c:	4628      	mov	r0, r5
 801961e:	f000 fc1f 	bl	8019e60 <_calloc_r>
 8019622:	b148      	cbz	r0, 8019638 <_Balloc+0x38>
 8019624:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8019628:	e00b      	b.n	8019642 <_Balloc+0x42>
 801962a:	2221      	movs	r2, #33	; 0x21
 801962c:	2104      	movs	r1, #4
 801962e:	f000 fc17 	bl	8019e60 <_calloc_r>
 8019632:	6468      	str	r0, [r5, #68]	; 0x44
 8019634:	2800      	cmp	r0, #0
 8019636:	d1e8      	bne.n	801960a <_Balloc+0xa>
 8019638:	2000      	movs	r0, #0
 801963a:	bd70      	pop	{r4, r5, r6, pc}
 801963c:	6802      	ldr	r2, [r0, #0]
 801963e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8019642:	2300      	movs	r3, #0
 8019644:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019648:	e7f7      	b.n	801963a <_Balloc+0x3a>

0801964a <_Bfree>:
 801964a:	b131      	cbz	r1, 801965a <_Bfree+0x10>
 801964c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801964e:	684a      	ldr	r2, [r1, #4]
 8019650:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019654:	6008      	str	r0, [r1, #0]
 8019656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801965a:	4770      	bx	lr

0801965c <__multadd>:
 801965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019660:	690d      	ldr	r5, [r1, #16]
 8019662:	4607      	mov	r7, r0
 8019664:	460c      	mov	r4, r1
 8019666:	461e      	mov	r6, r3
 8019668:	f101 0c14 	add.w	ip, r1, #20
 801966c:	2000      	movs	r0, #0
 801966e:	f8dc 3000 	ldr.w	r3, [ip]
 8019672:	b299      	uxth	r1, r3
 8019674:	fb02 6101 	mla	r1, r2, r1, r6
 8019678:	0c1e      	lsrs	r6, r3, #16
 801967a:	0c0b      	lsrs	r3, r1, #16
 801967c:	fb02 3306 	mla	r3, r2, r6, r3
 8019680:	b289      	uxth	r1, r1
 8019682:	3001      	adds	r0, #1
 8019684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019688:	4285      	cmp	r5, r0
 801968a:	f84c 1b04 	str.w	r1, [ip], #4
 801968e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019692:	dcec      	bgt.n	801966e <__multadd+0x12>
 8019694:	b30e      	cbz	r6, 80196da <__multadd+0x7e>
 8019696:	68a3      	ldr	r3, [r4, #8]
 8019698:	42ab      	cmp	r3, r5
 801969a:	dc19      	bgt.n	80196d0 <__multadd+0x74>
 801969c:	6861      	ldr	r1, [r4, #4]
 801969e:	4638      	mov	r0, r7
 80196a0:	3101      	adds	r1, #1
 80196a2:	f7ff ffad 	bl	8019600 <_Balloc>
 80196a6:	4680      	mov	r8, r0
 80196a8:	b928      	cbnz	r0, 80196b6 <__multadd+0x5a>
 80196aa:	4602      	mov	r2, r0
 80196ac:	4b0c      	ldr	r3, [pc, #48]	; (80196e0 <__multadd+0x84>)
 80196ae:	480d      	ldr	r0, [pc, #52]	; (80196e4 <__multadd+0x88>)
 80196b0:	21ba      	movs	r1, #186	; 0xba
 80196b2:	f000 fbb7 	bl	8019e24 <__assert_func>
 80196b6:	6922      	ldr	r2, [r4, #16]
 80196b8:	3202      	adds	r2, #2
 80196ba:	f104 010c 	add.w	r1, r4, #12
 80196be:	0092      	lsls	r2, r2, #2
 80196c0:	300c      	adds	r0, #12
 80196c2:	f7fb f833 	bl	801472c <memcpy>
 80196c6:	4621      	mov	r1, r4
 80196c8:	4638      	mov	r0, r7
 80196ca:	f7ff ffbe 	bl	801964a <_Bfree>
 80196ce:	4644      	mov	r4, r8
 80196d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80196d4:	3501      	adds	r5, #1
 80196d6:	615e      	str	r6, [r3, #20]
 80196d8:	6125      	str	r5, [r4, #16]
 80196da:	4620      	mov	r0, r4
 80196dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196e0:	0801b800 	.word	0x0801b800
 80196e4:	0801b869 	.word	0x0801b869

080196e8 <__hi0bits>:
 80196e8:	0c02      	lsrs	r2, r0, #16
 80196ea:	0412      	lsls	r2, r2, #16
 80196ec:	4603      	mov	r3, r0
 80196ee:	b9ca      	cbnz	r2, 8019724 <__hi0bits+0x3c>
 80196f0:	0403      	lsls	r3, r0, #16
 80196f2:	2010      	movs	r0, #16
 80196f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80196f8:	bf04      	itt	eq
 80196fa:	021b      	lsleq	r3, r3, #8
 80196fc:	3008      	addeq	r0, #8
 80196fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019702:	bf04      	itt	eq
 8019704:	011b      	lsleq	r3, r3, #4
 8019706:	3004      	addeq	r0, #4
 8019708:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801970c:	bf04      	itt	eq
 801970e:	009b      	lsleq	r3, r3, #2
 8019710:	3002      	addeq	r0, #2
 8019712:	2b00      	cmp	r3, #0
 8019714:	db05      	blt.n	8019722 <__hi0bits+0x3a>
 8019716:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801971a:	f100 0001 	add.w	r0, r0, #1
 801971e:	bf08      	it	eq
 8019720:	2020      	moveq	r0, #32
 8019722:	4770      	bx	lr
 8019724:	2000      	movs	r0, #0
 8019726:	e7e5      	b.n	80196f4 <__hi0bits+0xc>

08019728 <__lo0bits>:
 8019728:	6803      	ldr	r3, [r0, #0]
 801972a:	4602      	mov	r2, r0
 801972c:	f013 0007 	ands.w	r0, r3, #7
 8019730:	d00b      	beq.n	801974a <__lo0bits+0x22>
 8019732:	07d9      	lsls	r1, r3, #31
 8019734:	d421      	bmi.n	801977a <__lo0bits+0x52>
 8019736:	0798      	lsls	r0, r3, #30
 8019738:	bf49      	itett	mi
 801973a:	085b      	lsrmi	r3, r3, #1
 801973c:	089b      	lsrpl	r3, r3, #2
 801973e:	2001      	movmi	r0, #1
 8019740:	6013      	strmi	r3, [r2, #0]
 8019742:	bf5c      	itt	pl
 8019744:	6013      	strpl	r3, [r2, #0]
 8019746:	2002      	movpl	r0, #2
 8019748:	4770      	bx	lr
 801974a:	b299      	uxth	r1, r3
 801974c:	b909      	cbnz	r1, 8019752 <__lo0bits+0x2a>
 801974e:	0c1b      	lsrs	r3, r3, #16
 8019750:	2010      	movs	r0, #16
 8019752:	b2d9      	uxtb	r1, r3
 8019754:	b909      	cbnz	r1, 801975a <__lo0bits+0x32>
 8019756:	3008      	adds	r0, #8
 8019758:	0a1b      	lsrs	r3, r3, #8
 801975a:	0719      	lsls	r1, r3, #28
 801975c:	bf04      	itt	eq
 801975e:	091b      	lsreq	r3, r3, #4
 8019760:	3004      	addeq	r0, #4
 8019762:	0799      	lsls	r1, r3, #30
 8019764:	bf04      	itt	eq
 8019766:	089b      	lsreq	r3, r3, #2
 8019768:	3002      	addeq	r0, #2
 801976a:	07d9      	lsls	r1, r3, #31
 801976c:	d403      	bmi.n	8019776 <__lo0bits+0x4e>
 801976e:	085b      	lsrs	r3, r3, #1
 8019770:	f100 0001 	add.w	r0, r0, #1
 8019774:	d003      	beq.n	801977e <__lo0bits+0x56>
 8019776:	6013      	str	r3, [r2, #0]
 8019778:	4770      	bx	lr
 801977a:	2000      	movs	r0, #0
 801977c:	4770      	bx	lr
 801977e:	2020      	movs	r0, #32
 8019780:	4770      	bx	lr
	...

08019784 <__i2b>:
 8019784:	b510      	push	{r4, lr}
 8019786:	460c      	mov	r4, r1
 8019788:	2101      	movs	r1, #1
 801978a:	f7ff ff39 	bl	8019600 <_Balloc>
 801978e:	4602      	mov	r2, r0
 8019790:	b928      	cbnz	r0, 801979e <__i2b+0x1a>
 8019792:	4b05      	ldr	r3, [pc, #20]	; (80197a8 <__i2b+0x24>)
 8019794:	4805      	ldr	r0, [pc, #20]	; (80197ac <__i2b+0x28>)
 8019796:	f240 1145 	movw	r1, #325	; 0x145
 801979a:	f000 fb43 	bl	8019e24 <__assert_func>
 801979e:	2301      	movs	r3, #1
 80197a0:	6144      	str	r4, [r0, #20]
 80197a2:	6103      	str	r3, [r0, #16]
 80197a4:	bd10      	pop	{r4, pc}
 80197a6:	bf00      	nop
 80197a8:	0801b800 	.word	0x0801b800
 80197ac:	0801b869 	.word	0x0801b869

080197b0 <__multiply>:
 80197b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b4:	4691      	mov	r9, r2
 80197b6:	690a      	ldr	r2, [r1, #16]
 80197b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80197bc:	429a      	cmp	r2, r3
 80197be:	bfb8      	it	lt
 80197c0:	460b      	movlt	r3, r1
 80197c2:	460c      	mov	r4, r1
 80197c4:	bfbc      	itt	lt
 80197c6:	464c      	movlt	r4, r9
 80197c8:	4699      	movlt	r9, r3
 80197ca:	6927      	ldr	r7, [r4, #16]
 80197cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80197d0:	68a3      	ldr	r3, [r4, #8]
 80197d2:	6861      	ldr	r1, [r4, #4]
 80197d4:	eb07 060a 	add.w	r6, r7, sl
 80197d8:	42b3      	cmp	r3, r6
 80197da:	b085      	sub	sp, #20
 80197dc:	bfb8      	it	lt
 80197de:	3101      	addlt	r1, #1
 80197e0:	f7ff ff0e 	bl	8019600 <_Balloc>
 80197e4:	b930      	cbnz	r0, 80197f4 <__multiply+0x44>
 80197e6:	4602      	mov	r2, r0
 80197e8:	4b44      	ldr	r3, [pc, #272]	; (80198fc <__multiply+0x14c>)
 80197ea:	4845      	ldr	r0, [pc, #276]	; (8019900 <__multiply+0x150>)
 80197ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80197f0:	f000 fb18 	bl	8019e24 <__assert_func>
 80197f4:	f100 0514 	add.w	r5, r0, #20
 80197f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80197fc:	462b      	mov	r3, r5
 80197fe:	2200      	movs	r2, #0
 8019800:	4543      	cmp	r3, r8
 8019802:	d321      	bcc.n	8019848 <__multiply+0x98>
 8019804:	f104 0314 	add.w	r3, r4, #20
 8019808:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801980c:	f109 0314 	add.w	r3, r9, #20
 8019810:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019814:	9202      	str	r2, [sp, #8]
 8019816:	1b3a      	subs	r2, r7, r4
 8019818:	3a15      	subs	r2, #21
 801981a:	f022 0203 	bic.w	r2, r2, #3
 801981e:	3204      	adds	r2, #4
 8019820:	f104 0115 	add.w	r1, r4, #21
 8019824:	428f      	cmp	r7, r1
 8019826:	bf38      	it	cc
 8019828:	2204      	movcc	r2, #4
 801982a:	9201      	str	r2, [sp, #4]
 801982c:	9a02      	ldr	r2, [sp, #8]
 801982e:	9303      	str	r3, [sp, #12]
 8019830:	429a      	cmp	r2, r3
 8019832:	d80c      	bhi.n	801984e <__multiply+0x9e>
 8019834:	2e00      	cmp	r6, #0
 8019836:	dd03      	ble.n	8019840 <__multiply+0x90>
 8019838:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801983c:	2b00      	cmp	r3, #0
 801983e:	d05a      	beq.n	80198f6 <__multiply+0x146>
 8019840:	6106      	str	r6, [r0, #16]
 8019842:	b005      	add	sp, #20
 8019844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019848:	f843 2b04 	str.w	r2, [r3], #4
 801984c:	e7d8      	b.n	8019800 <__multiply+0x50>
 801984e:	f8b3 a000 	ldrh.w	sl, [r3]
 8019852:	f1ba 0f00 	cmp.w	sl, #0
 8019856:	d023      	beq.n	80198a0 <__multiply+0xf0>
 8019858:	f104 0e14 	add.w	lr, r4, #20
 801985c:	46a9      	mov	r9, r5
 801985e:	f04f 0c00 	mov.w	ip, #0
 8019862:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019866:	f8d9 1000 	ldr.w	r1, [r9]
 801986a:	fa1f fb82 	uxth.w	fp, r2
 801986e:	b289      	uxth	r1, r1
 8019870:	fb0a 110b 	mla	r1, sl, fp, r1
 8019874:	4461      	add	r1, ip
 8019876:	f8d9 c000 	ldr.w	ip, [r9]
 801987a:	0c12      	lsrs	r2, r2, #16
 801987c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019880:	fb0a c202 	mla	r2, sl, r2, ip
 8019884:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019888:	b289      	uxth	r1, r1
 801988a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801988e:	4577      	cmp	r7, lr
 8019890:	f849 1b04 	str.w	r1, [r9], #4
 8019894:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019898:	d8e3      	bhi.n	8019862 <__multiply+0xb2>
 801989a:	9a01      	ldr	r2, [sp, #4]
 801989c:	f845 c002 	str.w	ip, [r5, r2]
 80198a0:	9a03      	ldr	r2, [sp, #12]
 80198a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80198a6:	3304      	adds	r3, #4
 80198a8:	f1b9 0f00 	cmp.w	r9, #0
 80198ac:	d021      	beq.n	80198f2 <__multiply+0x142>
 80198ae:	6829      	ldr	r1, [r5, #0]
 80198b0:	f104 0c14 	add.w	ip, r4, #20
 80198b4:	46ae      	mov	lr, r5
 80198b6:	f04f 0a00 	mov.w	sl, #0
 80198ba:	f8bc b000 	ldrh.w	fp, [ip]
 80198be:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80198c2:	fb09 220b 	mla	r2, r9, fp, r2
 80198c6:	4452      	add	r2, sl
 80198c8:	b289      	uxth	r1, r1
 80198ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80198ce:	f84e 1b04 	str.w	r1, [lr], #4
 80198d2:	f85c 1b04 	ldr.w	r1, [ip], #4
 80198d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80198da:	f8be 1000 	ldrh.w	r1, [lr]
 80198de:	fb09 110a 	mla	r1, r9, sl, r1
 80198e2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80198e6:	4567      	cmp	r7, ip
 80198e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80198ec:	d8e5      	bhi.n	80198ba <__multiply+0x10a>
 80198ee:	9a01      	ldr	r2, [sp, #4]
 80198f0:	50a9      	str	r1, [r5, r2]
 80198f2:	3504      	adds	r5, #4
 80198f4:	e79a      	b.n	801982c <__multiply+0x7c>
 80198f6:	3e01      	subs	r6, #1
 80198f8:	e79c      	b.n	8019834 <__multiply+0x84>
 80198fa:	bf00      	nop
 80198fc:	0801b800 	.word	0x0801b800
 8019900:	0801b869 	.word	0x0801b869

08019904 <__pow5mult>:
 8019904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019908:	4615      	mov	r5, r2
 801990a:	f012 0203 	ands.w	r2, r2, #3
 801990e:	4606      	mov	r6, r0
 8019910:	460f      	mov	r7, r1
 8019912:	d007      	beq.n	8019924 <__pow5mult+0x20>
 8019914:	4c1a      	ldr	r4, [pc, #104]	; (8019980 <__pow5mult+0x7c>)
 8019916:	3a01      	subs	r2, #1
 8019918:	2300      	movs	r3, #0
 801991a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801991e:	f7ff fe9d 	bl	801965c <__multadd>
 8019922:	4607      	mov	r7, r0
 8019924:	10ad      	asrs	r5, r5, #2
 8019926:	d027      	beq.n	8019978 <__pow5mult+0x74>
 8019928:	6c34      	ldr	r4, [r6, #64]	; 0x40
 801992a:	b944      	cbnz	r4, 801993e <__pow5mult+0x3a>
 801992c:	f240 2171 	movw	r1, #625	; 0x271
 8019930:	4630      	mov	r0, r6
 8019932:	f7ff ff27 	bl	8019784 <__i2b>
 8019936:	2300      	movs	r3, #0
 8019938:	6430      	str	r0, [r6, #64]	; 0x40
 801993a:	4604      	mov	r4, r0
 801993c:	6003      	str	r3, [r0, #0]
 801993e:	f04f 0900 	mov.w	r9, #0
 8019942:	07eb      	lsls	r3, r5, #31
 8019944:	d50a      	bpl.n	801995c <__pow5mult+0x58>
 8019946:	4639      	mov	r1, r7
 8019948:	4622      	mov	r2, r4
 801994a:	4630      	mov	r0, r6
 801994c:	f7ff ff30 	bl	80197b0 <__multiply>
 8019950:	4639      	mov	r1, r7
 8019952:	4680      	mov	r8, r0
 8019954:	4630      	mov	r0, r6
 8019956:	f7ff fe78 	bl	801964a <_Bfree>
 801995a:	4647      	mov	r7, r8
 801995c:	106d      	asrs	r5, r5, #1
 801995e:	d00b      	beq.n	8019978 <__pow5mult+0x74>
 8019960:	6820      	ldr	r0, [r4, #0]
 8019962:	b938      	cbnz	r0, 8019974 <__pow5mult+0x70>
 8019964:	4622      	mov	r2, r4
 8019966:	4621      	mov	r1, r4
 8019968:	4630      	mov	r0, r6
 801996a:	f7ff ff21 	bl	80197b0 <__multiply>
 801996e:	6020      	str	r0, [r4, #0]
 8019970:	f8c0 9000 	str.w	r9, [r0]
 8019974:	4604      	mov	r4, r0
 8019976:	e7e4      	b.n	8019942 <__pow5mult+0x3e>
 8019978:	4638      	mov	r0, r7
 801997a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801997e:	bf00      	nop
 8019980:	0801b9b8 	.word	0x0801b9b8

08019984 <__lshift>:
 8019984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019988:	460c      	mov	r4, r1
 801998a:	6849      	ldr	r1, [r1, #4]
 801998c:	6923      	ldr	r3, [r4, #16]
 801998e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019992:	68a3      	ldr	r3, [r4, #8]
 8019994:	4607      	mov	r7, r0
 8019996:	4691      	mov	r9, r2
 8019998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801999c:	f108 0601 	add.w	r6, r8, #1
 80199a0:	42b3      	cmp	r3, r6
 80199a2:	db0b      	blt.n	80199bc <__lshift+0x38>
 80199a4:	4638      	mov	r0, r7
 80199a6:	f7ff fe2b 	bl	8019600 <_Balloc>
 80199aa:	4605      	mov	r5, r0
 80199ac:	b948      	cbnz	r0, 80199c2 <__lshift+0x3e>
 80199ae:	4602      	mov	r2, r0
 80199b0:	4b28      	ldr	r3, [pc, #160]	; (8019a54 <__lshift+0xd0>)
 80199b2:	4829      	ldr	r0, [pc, #164]	; (8019a58 <__lshift+0xd4>)
 80199b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80199b8:	f000 fa34 	bl	8019e24 <__assert_func>
 80199bc:	3101      	adds	r1, #1
 80199be:	005b      	lsls	r3, r3, #1
 80199c0:	e7ee      	b.n	80199a0 <__lshift+0x1c>
 80199c2:	2300      	movs	r3, #0
 80199c4:	f100 0114 	add.w	r1, r0, #20
 80199c8:	f100 0210 	add.w	r2, r0, #16
 80199cc:	4618      	mov	r0, r3
 80199ce:	4553      	cmp	r3, sl
 80199d0:	db33      	blt.n	8019a3a <__lshift+0xb6>
 80199d2:	6920      	ldr	r0, [r4, #16]
 80199d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80199d8:	f104 0314 	add.w	r3, r4, #20
 80199dc:	f019 091f 	ands.w	r9, r9, #31
 80199e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80199e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80199e8:	d02b      	beq.n	8019a42 <__lshift+0xbe>
 80199ea:	f1c9 0e20 	rsb	lr, r9, #32
 80199ee:	468a      	mov	sl, r1
 80199f0:	2200      	movs	r2, #0
 80199f2:	6818      	ldr	r0, [r3, #0]
 80199f4:	fa00 f009 	lsl.w	r0, r0, r9
 80199f8:	4310      	orrs	r0, r2
 80199fa:	f84a 0b04 	str.w	r0, [sl], #4
 80199fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a02:	459c      	cmp	ip, r3
 8019a04:	fa22 f20e 	lsr.w	r2, r2, lr
 8019a08:	d8f3      	bhi.n	80199f2 <__lshift+0x6e>
 8019a0a:	ebac 0304 	sub.w	r3, ip, r4
 8019a0e:	3b15      	subs	r3, #21
 8019a10:	f023 0303 	bic.w	r3, r3, #3
 8019a14:	3304      	adds	r3, #4
 8019a16:	f104 0015 	add.w	r0, r4, #21
 8019a1a:	4584      	cmp	ip, r0
 8019a1c:	bf38      	it	cc
 8019a1e:	2304      	movcc	r3, #4
 8019a20:	50ca      	str	r2, [r1, r3]
 8019a22:	b10a      	cbz	r2, 8019a28 <__lshift+0xa4>
 8019a24:	f108 0602 	add.w	r6, r8, #2
 8019a28:	3e01      	subs	r6, #1
 8019a2a:	4638      	mov	r0, r7
 8019a2c:	612e      	str	r6, [r5, #16]
 8019a2e:	4621      	mov	r1, r4
 8019a30:	f7ff fe0b 	bl	801964a <_Bfree>
 8019a34:	4628      	mov	r0, r5
 8019a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8019a3e:	3301      	adds	r3, #1
 8019a40:	e7c5      	b.n	80199ce <__lshift+0x4a>
 8019a42:	3904      	subs	r1, #4
 8019a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a48:	f841 2f04 	str.w	r2, [r1, #4]!
 8019a4c:	459c      	cmp	ip, r3
 8019a4e:	d8f9      	bhi.n	8019a44 <__lshift+0xc0>
 8019a50:	e7ea      	b.n	8019a28 <__lshift+0xa4>
 8019a52:	bf00      	nop
 8019a54:	0801b800 	.word	0x0801b800
 8019a58:	0801b869 	.word	0x0801b869

08019a5c <__mcmp>:
 8019a5c:	690a      	ldr	r2, [r1, #16]
 8019a5e:	4603      	mov	r3, r0
 8019a60:	6900      	ldr	r0, [r0, #16]
 8019a62:	1a80      	subs	r0, r0, r2
 8019a64:	b530      	push	{r4, r5, lr}
 8019a66:	d10d      	bne.n	8019a84 <__mcmp+0x28>
 8019a68:	3314      	adds	r3, #20
 8019a6a:	3114      	adds	r1, #20
 8019a6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019a70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019a74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019a78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019a7c:	4295      	cmp	r5, r2
 8019a7e:	d002      	beq.n	8019a86 <__mcmp+0x2a>
 8019a80:	d304      	bcc.n	8019a8c <__mcmp+0x30>
 8019a82:	2001      	movs	r0, #1
 8019a84:	bd30      	pop	{r4, r5, pc}
 8019a86:	42a3      	cmp	r3, r4
 8019a88:	d3f4      	bcc.n	8019a74 <__mcmp+0x18>
 8019a8a:	e7fb      	b.n	8019a84 <__mcmp+0x28>
 8019a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8019a90:	e7f8      	b.n	8019a84 <__mcmp+0x28>
	...

08019a94 <__mdiff>:
 8019a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a98:	460d      	mov	r5, r1
 8019a9a:	4607      	mov	r7, r0
 8019a9c:	4611      	mov	r1, r2
 8019a9e:	4628      	mov	r0, r5
 8019aa0:	4614      	mov	r4, r2
 8019aa2:	f7ff ffdb 	bl	8019a5c <__mcmp>
 8019aa6:	1e06      	subs	r6, r0, #0
 8019aa8:	d111      	bne.n	8019ace <__mdiff+0x3a>
 8019aaa:	4631      	mov	r1, r6
 8019aac:	4638      	mov	r0, r7
 8019aae:	f7ff fda7 	bl	8019600 <_Balloc>
 8019ab2:	4602      	mov	r2, r0
 8019ab4:	b928      	cbnz	r0, 8019ac2 <__mdiff+0x2e>
 8019ab6:	4b39      	ldr	r3, [pc, #228]	; (8019b9c <__mdiff+0x108>)
 8019ab8:	f240 2137 	movw	r1, #567	; 0x237
 8019abc:	4838      	ldr	r0, [pc, #224]	; (8019ba0 <__mdiff+0x10c>)
 8019abe:	f000 f9b1 	bl	8019e24 <__assert_func>
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8019ac8:	4610      	mov	r0, r2
 8019aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ace:	bfa4      	itt	ge
 8019ad0:	4623      	movge	r3, r4
 8019ad2:	462c      	movge	r4, r5
 8019ad4:	4638      	mov	r0, r7
 8019ad6:	6861      	ldr	r1, [r4, #4]
 8019ad8:	bfa6      	itte	ge
 8019ada:	461d      	movge	r5, r3
 8019adc:	2600      	movge	r6, #0
 8019ade:	2601      	movlt	r6, #1
 8019ae0:	f7ff fd8e 	bl	8019600 <_Balloc>
 8019ae4:	4602      	mov	r2, r0
 8019ae6:	b918      	cbnz	r0, 8019af0 <__mdiff+0x5c>
 8019ae8:	4b2c      	ldr	r3, [pc, #176]	; (8019b9c <__mdiff+0x108>)
 8019aea:	f240 2145 	movw	r1, #581	; 0x245
 8019aee:	e7e5      	b.n	8019abc <__mdiff+0x28>
 8019af0:	6927      	ldr	r7, [r4, #16]
 8019af2:	60c6      	str	r6, [r0, #12]
 8019af4:	692e      	ldr	r6, [r5, #16]
 8019af6:	f104 0014 	add.w	r0, r4, #20
 8019afa:	f105 0914 	add.w	r9, r5, #20
 8019afe:	f102 0e14 	add.w	lr, r2, #20
 8019b02:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8019b06:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019b0a:	3410      	adds	r4, #16
 8019b0c:	46f2      	mov	sl, lr
 8019b0e:	2100      	movs	r1, #0
 8019b10:	f859 3b04 	ldr.w	r3, [r9], #4
 8019b14:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8019b18:	fa11 f88b 	uxtah	r8, r1, fp
 8019b1c:	b299      	uxth	r1, r3
 8019b1e:	0c1b      	lsrs	r3, r3, #16
 8019b20:	eba8 0801 	sub.w	r8, r8, r1
 8019b24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019b28:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019b2c:	fa1f f888 	uxth.w	r8, r8
 8019b30:	1419      	asrs	r1, r3, #16
 8019b32:	454e      	cmp	r6, r9
 8019b34:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019b38:	f84a 3b04 	str.w	r3, [sl], #4
 8019b3c:	d8e8      	bhi.n	8019b10 <__mdiff+0x7c>
 8019b3e:	1b73      	subs	r3, r6, r5
 8019b40:	3b15      	subs	r3, #21
 8019b42:	f023 0303 	bic.w	r3, r3, #3
 8019b46:	3304      	adds	r3, #4
 8019b48:	3515      	adds	r5, #21
 8019b4a:	42ae      	cmp	r6, r5
 8019b4c:	bf38      	it	cc
 8019b4e:	2304      	movcc	r3, #4
 8019b50:	4418      	add	r0, r3
 8019b52:	4473      	add	r3, lr
 8019b54:	469e      	mov	lr, r3
 8019b56:	4606      	mov	r6, r0
 8019b58:	4566      	cmp	r6, ip
 8019b5a:	d30e      	bcc.n	8019b7a <__mdiff+0xe6>
 8019b5c:	f10c 0103 	add.w	r1, ip, #3
 8019b60:	1a09      	subs	r1, r1, r0
 8019b62:	f021 0103 	bic.w	r1, r1, #3
 8019b66:	3803      	subs	r0, #3
 8019b68:	4584      	cmp	ip, r0
 8019b6a:	bf38      	it	cc
 8019b6c:	2100      	movcc	r1, #0
 8019b6e:	440b      	add	r3, r1
 8019b70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019b74:	b179      	cbz	r1, 8019b96 <__mdiff+0x102>
 8019b76:	6117      	str	r7, [r2, #16]
 8019b78:	e7a6      	b.n	8019ac8 <__mdiff+0x34>
 8019b7a:	f856 8b04 	ldr.w	r8, [r6], #4
 8019b7e:	fa11 f488 	uxtah	r4, r1, r8
 8019b82:	1425      	asrs	r5, r4, #16
 8019b84:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8019b88:	b2a4      	uxth	r4, r4
 8019b8a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8019b8e:	f84e 4b04 	str.w	r4, [lr], #4
 8019b92:	1429      	asrs	r1, r5, #16
 8019b94:	e7e0      	b.n	8019b58 <__mdiff+0xc4>
 8019b96:	3f01      	subs	r7, #1
 8019b98:	e7ea      	b.n	8019b70 <__mdiff+0xdc>
 8019b9a:	bf00      	nop
 8019b9c:	0801b800 	.word	0x0801b800
 8019ba0:	0801b869 	.word	0x0801b869

08019ba4 <__d2b>:
 8019ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019ba6:	2101      	movs	r1, #1
 8019ba8:	9e08      	ldr	r6, [sp, #32]
 8019baa:	4617      	mov	r7, r2
 8019bac:	461c      	mov	r4, r3
 8019bae:	f7ff fd27 	bl	8019600 <_Balloc>
 8019bb2:	4605      	mov	r5, r0
 8019bb4:	b930      	cbnz	r0, 8019bc4 <__d2b+0x20>
 8019bb6:	4602      	mov	r2, r0
 8019bb8:	4b23      	ldr	r3, [pc, #140]	; (8019c48 <__d2b+0xa4>)
 8019bba:	4824      	ldr	r0, [pc, #144]	; (8019c4c <__d2b+0xa8>)
 8019bbc:	f240 310f 	movw	r1, #783	; 0x30f
 8019bc0:	f000 f930 	bl	8019e24 <__assert_func>
 8019bc4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8019bc8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8019bcc:	bb24      	cbnz	r4, 8019c18 <__d2b+0x74>
 8019bce:	2f00      	cmp	r7, #0
 8019bd0:	9301      	str	r3, [sp, #4]
 8019bd2:	d026      	beq.n	8019c22 <__d2b+0x7e>
 8019bd4:	4668      	mov	r0, sp
 8019bd6:	9700      	str	r7, [sp, #0]
 8019bd8:	f7ff fda6 	bl	8019728 <__lo0bits>
 8019bdc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019be0:	b1e8      	cbz	r0, 8019c1e <__d2b+0x7a>
 8019be2:	f1c0 0320 	rsb	r3, r0, #32
 8019be6:	fa02 f303 	lsl.w	r3, r2, r3
 8019bea:	430b      	orrs	r3, r1
 8019bec:	40c2      	lsrs	r2, r0
 8019bee:	616b      	str	r3, [r5, #20]
 8019bf0:	9201      	str	r2, [sp, #4]
 8019bf2:	9b01      	ldr	r3, [sp, #4]
 8019bf4:	61ab      	str	r3, [r5, #24]
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	bf14      	ite	ne
 8019bfa:	2102      	movne	r1, #2
 8019bfc:	2101      	moveq	r1, #1
 8019bfe:	6129      	str	r1, [r5, #16]
 8019c00:	b1bc      	cbz	r4, 8019c32 <__d2b+0x8e>
 8019c02:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8019c06:	4404      	add	r4, r0
 8019c08:	6034      	str	r4, [r6, #0]
 8019c0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c10:	6018      	str	r0, [r3, #0]
 8019c12:	4628      	mov	r0, r5
 8019c14:	b003      	add	sp, #12
 8019c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019c1c:	e7d7      	b.n	8019bce <__d2b+0x2a>
 8019c1e:	6169      	str	r1, [r5, #20]
 8019c20:	e7e7      	b.n	8019bf2 <__d2b+0x4e>
 8019c22:	a801      	add	r0, sp, #4
 8019c24:	f7ff fd80 	bl	8019728 <__lo0bits>
 8019c28:	9b01      	ldr	r3, [sp, #4]
 8019c2a:	616b      	str	r3, [r5, #20]
 8019c2c:	3020      	adds	r0, #32
 8019c2e:	2101      	movs	r1, #1
 8019c30:	e7e5      	b.n	8019bfe <__d2b+0x5a>
 8019c32:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8019c36:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019c3a:	6030      	str	r0, [r6, #0]
 8019c3c:	6918      	ldr	r0, [r3, #16]
 8019c3e:	f7ff fd53 	bl	80196e8 <__hi0bits>
 8019c42:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019c46:	e7e2      	b.n	8019c0e <__d2b+0x6a>
 8019c48:	0801b800 	.word	0x0801b800
 8019c4c:	0801b869 	.word	0x0801b869

08019c50 <__ascii_wctomb>:
 8019c50:	4603      	mov	r3, r0
 8019c52:	4608      	mov	r0, r1
 8019c54:	b141      	cbz	r1, 8019c68 <__ascii_wctomb+0x18>
 8019c56:	2aff      	cmp	r2, #255	; 0xff
 8019c58:	d904      	bls.n	8019c64 <__ascii_wctomb+0x14>
 8019c5a:	228a      	movs	r2, #138	; 0x8a
 8019c5c:	601a      	str	r2, [r3, #0]
 8019c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8019c62:	4770      	bx	lr
 8019c64:	700a      	strb	r2, [r1, #0]
 8019c66:	2001      	movs	r0, #1
 8019c68:	4770      	bx	lr
	...

08019c6c <_wcrtomb_r>:
 8019c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c6e:	4c09      	ldr	r4, [pc, #36]	; (8019c94 <_wcrtomb_r+0x28>)
 8019c70:	b085      	sub	sp, #20
 8019c72:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8019c76:	4605      	mov	r5, r0
 8019c78:	461e      	mov	r6, r3
 8019c7a:	b909      	cbnz	r1, 8019c80 <_wcrtomb_r+0x14>
 8019c7c:	460a      	mov	r2, r1
 8019c7e:	a901      	add	r1, sp, #4
 8019c80:	47b8      	blx	r7
 8019c82:	1c43      	adds	r3, r0, #1
 8019c84:	bf01      	itttt	eq
 8019c86:	2300      	moveq	r3, #0
 8019c88:	6033      	streq	r3, [r6, #0]
 8019c8a:	238a      	moveq	r3, #138	; 0x8a
 8019c8c:	602b      	streq	r3, [r5, #0]
 8019c8e:	b005      	add	sp, #20
 8019c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c92:	bf00      	nop
 8019c94:	200005d8 	.word	0x200005d8

08019c98 <__ssprint_r>:
 8019c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c9c:	6813      	ldr	r3, [r2, #0]
 8019c9e:	9301      	str	r3, [sp, #4]
 8019ca0:	6893      	ldr	r3, [r2, #8]
 8019ca2:	4680      	mov	r8, r0
 8019ca4:	460c      	mov	r4, r1
 8019ca6:	4617      	mov	r7, r2
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d157      	bne.n	8019d5c <__ssprint_r+0xc4>
 8019cac:	2000      	movs	r0, #0
 8019cae:	2300      	movs	r3, #0
 8019cb0:	607b      	str	r3, [r7, #4]
 8019cb2:	b003      	add	sp, #12
 8019cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cb8:	9b01      	ldr	r3, [sp, #4]
 8019cba:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8019cbe:	3308      	adds	r3, #8
 8019cc0:	9301      	str	r3, [sp, #4]
 8019cc2:	68a6      	ldr	r6, [r4, #8]
 8019cc4:	6820      	ldr	r0, [r4, #0]
 8019cc6:	f1bb 0f00 	cmp.w	fp, #0
 8019cca:	d0f5      	beq.n	8019cb8 <__ssprint_r+0x20>
 8019ccc:	45b3      	cmp	fp, r6
 8019cce:	d32d      	bcc.n	8019d2c <__ssprint_r+0x94>
 8019cd0:	89a2      	ldrh	r2, [r4, #12]
 8019cd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019cd6:	d029      	beq.n	8019d2c <__ssprint_r+0x94>
 8019cd8:	6921      	ldr	r1, [r4, #16]
 8019cda:	6965      	ldr	r5, [r4, #20]
 8019cdc:	eba0 0901 	sub.w	r9, r0, r1
 8019ce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019ce8:	f109 0001 	add.w	r0, r9, #1
 8019cec:	106d      	asrs	r5, r5, #1
 8019cee:	4458      	add	r0, fp
 8019cf0:	4285      	cmp	r5, r0
 8019cf2:	bf38      	it	cc
 8019cf4:	4605      	movcc	r5, r0
 8019cf6:	0553      	lsls	r3, r2, #21
 8019cf8:	d534      	bpl.n	8019d64 <__ssprint_r+0xcc>
 8019cfa:	4629      	mov	r1, r5
 8019cfc:	4640      	mov	r0, r8
 8019cfe:	f7fa fe47 	bl	8014990 <_malloc_r>
 8019d02:	4606      	mov	r6, r0
 8019d04:	2800      	cmp	r0, #0
 8019d06:	d038      	beq.n	8019d7a <__ssprint_r+0xe2>
 8019d08:	464a      	mov	r2, r9
 8019d0a:	6921      	ldr	r1, [r4, #16]
 8019d0c:	f7fa fd0e 	bl	801472c <memcpy>
 8019d10:	89a2      	ldrh	r2, [r4, #12]
 8019d12:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8019d16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019d1a:	81a2      	strh	r2, [r4, #12]
 8019d1c:	6126      	str	r6, [r4, #16]
 8019d1e:	6165      	str	r5, [r4, #20]
 8019d20:	444e      	add	r6, r9
 8019d22:	eba5 0509 	sub.w	r5, r5, r9
 8019d26:	6026      	str	r6, [r4, #0]
 8019d28:	60a5      	str	r5, [r4, #8]
 8019d2a:	465e      	mov	r6, fp
 8019d2c:	455e      	cmp	r6, fp
 8019d2e:	bf28      	it	cs
 8019d30:	465e      	movcs	r6, fp
 8019d32:	4632      	mov	r2, r6
 8019d34:	4651      	mov	r1, sl
 8019d36:	6820      	ldr	r0, [r4, #0]
 8019d38:	f7fa fbf2 	bl	8014520 <memmove>
 8019d3c:	68a2      	ldr	r2, [r4, #8]
 8019d3e:	1b92      	subs	r2, r2, r6
 8019d40:	60a2      	str	r2, [r4, #8]
 8019d42:	6822      	ldr	r2, [r4, #0]
 8019d44:	4432      	add	r2, r6
 8019d46:	6022      	str	r2, [r4, #0]
 8019d48:	68ba      	ldr	r2, [r7, #8]
 8019d4a:	eba2 030b 	sub.w	r3, r2, fp
 8019d4e:	44da      	add	sl, fp
 8019d50:	60bb      	str	r3, [r7, #8]
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d0aa      	beq.n	8019cac <__ssprint_r+0x14>
 8019d56:	f04f 0b00 	mov.w	fp, #0
 8019d5a:	e7b2      	b.n	8019cc2 <__ssprint_r+0x2a>
 8019d5c:	f04f 0a00 	mov.w	sl, #0
 8019d60:	46d3      	mov	fp, sl
 8019d62:	e7ae      	b.n	8019cc2 <__ssprint_r+0x2a>
 8019d64:	462a      	mov	r2, r5
 8019d66:	4640      	mov	r0, r8
 8019d68:	f7fb f858 	bl	8014e1c <_realloc_r>
 8019d6c:	4606      	mov	r6, r0
 8019d6e:	2800      	cmp	r0, #0
 8019d70:	d1d4      	bne.n	8019d1c <__ssprint_r+0x84>
 8019d72:	6921      	ldr	r1, [r4, #16]
 8019d74:	4640      	mov	r0, r8
 8019d76:	f7fa fd4b 	bl	8014810 <_free_r>
 8019d7a:	230c      	movs	r3, #12
 8019d7c:	f8c8 3000 	str.w	r3, [r8]
 8019d80:	89a3      	ldrh	r3, [r4, #12]
 8019d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d86:	81a3      	strh	r3, [r4, #12]
 8019d88:	2300      	movs	r3, #0
 8019d8a:	60bb      	str	r3, [r7, #8]
 8019d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d90:	e78d      	b.n	8019cae <__ssprint_r+0x16>

08019d92 <__swbuf_r>:
 8019d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d94:	460e      	mov	r6, r1
 8019d96:	4614      	mov	r4, r2
 8019d98:	4605      	mov	r5, r0
 8019d9a:	b118      	cbz	r0, 8019da4 <__swbuf_r+0x12>
 8019d9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8019d9e:	b90b      	cbnz	r3, 8019da4 <__swbuf_r+0x12>
 8019da0:	f7fa f8e4 	bl	8013f6c <__sinit>
 8019da4:	69a3      	ldr	r3, [r4, #24]
 8019da6:	60a3      	str	r3, [r4, #8]
 8019da8:	89a3      	ldrh	r3, [r4, #12]
 8019daa:	0719      	lsls	r1, r3, #28
 8019dac:	d529      	bpl.n	8019e02 <__swbuf_r+0x70>
 8019dae:	6923      	ldr	r3, [r4, #16]
 8019db0:	b33b      	cbz	r3, 8019e02 <__swbuf_r+0x70>
 8019db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019db6:	b2f6      	uxtb	r6, r6
 8019db8:	049a      	lsls	r2, r3, #18
 8019dba:	4637      	mov	r7, r6
 8019dbc:	d52a      	bpl.n	8019e14 <__swbuf_r+0x82>
 8019dbe:	6823      	ldr	r3, [r4, #0]
 8019dc0:	6922      	ldr	r2, [r4, #16]
 8019dc2:	1a98      	subs	r0, r3, r2
 8019dc4:	6963      	ldr	r3, [r4, #20]
 8019dc6:	4283      	cmp	r3, r0
 8019dc8:	dc04      	bgt.n	8019dd4 <__swbuf_r+0x42>
 8019dca:	4621      	mov	r1, r4
 8019dcc:	4628      	mov	r0, r5
 8019dce:	f7fe fbdd 	bl	801858c <_fflush_r>
 8019dd2:	b9e0      	cbnz	r0, 8019e0e <__swbuf_r+0x7c>
 8019dd4:	68a3      	ldr	r3, [r4, #8]
 8019dd6:	3b01      	subs	r3, #1
 8019dd8:	60a3      	str	r3, [r4, #8]
 8019dda:	6823      	ldr	r3, [r4, #0]
 8019ddc:	1c5a      	adds	r2, r3, #1
 8019dde:	6022      	str	r2, [r4, #0]
 8019de0:	701e      	strb	r6, [r3, #0]
 8019de2:	6962      	ldr	r2, [r4, #20]
 8019de4:	1c43      	adds	r3, r0, #1
 8019de6:	429a      	cmp	r2, r3
 8019de8:	d004      	beq.n	8019df4 <__swbuf_r+0x62>
 8019dea:	89a3      	ldrh	r3, [r4, #12]
 8019dec:	07db      	lsls	r3, r3, #31
 8019dee:	d506      	bpl.n	8019dfe <__swbuf_r+0x6c>
 8019df0:	2e0a      	cmp	r6, #10
 8019df2:	d104      	bne.n	8019dfe <__swbuf_r+0x6c>
 8019df4:	4621      	mov	r1, r4
 8019df6:	4628      	mov	r0, r5
 8019df8:	f7fe fbc8 	bl	801858c <_fflush_r>
 8019dfc:	b938      	cbnz	r0, 8019e0e <__swbuf_r+0x7c>
 8019dfe:	4638      	mov	r0, r7
 8019e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e02:	4621      	mov	r1, r4
 8019e04:	4628      	mov	r0, r5
 8019e06:	f7fa fb33 	bl	8014470 <__swsetup_r>
 8019e0a:	2800      	cmp	r0, #0
 8019e0c:	d0d1      	beq.n	8019db2 <__swbuf_r+0x20>
 8019e0e:	f04f 37ff 	mov.w	r7, #4294967295
 8019e12:	e7f4      	b.n	8019dfe <__swbuf_r+0x6c>
 8019e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019e18:	81a3      	strh	r3, [r4, #12]
 8019e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019e20:	6663      	str	r3, [r4, #100]	; 0x64
 8019e22:	e7cc      	b.n	8019dbe <__swbuf_r+0x2c>

08019e24 <__assert_func>:
 8019e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019e26:	4614      	mov	r4, r2
 8019e28:	461a      	mov	r2, r3
 8019e2a:	4b09      	ldr	r3, [pc, #36]	; (8019e50 <__assert_func+0x2c>)
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	4605      	mov	r5, r0
 8019e30:	68d8      	ldr	r0, [r3, #12]
 8019e32:	b14c      	cbz	r4, 8019e48 <__assert_func+0x24>
 8019e34:	4b07      	ldr	r3, [pc, #28]	; (8019e54 <__assert_func+0x30>)
 8019e36:	9100      	str	r1, [sp, #0]
 8019e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019e3c:	4906      	ldr	r1, [pc, #24]	; (8019e58 <__assert_func+0x34>)
 8019e3e:	462b      	mov	r3, r5
 8019e40:	f000 f844 	bl	8019ecc <fiprintf>
 8019e44:	f000 f854 	bl	8019ef0 <abort>
 8019e48:	4b04      	ldr	r3, [pc, #16]	; (8019e5c <__assert_func+0x38>)
 8019e4a:	461c      	mov	r4, r3
 8019e4c:	e7f3      	b.n	8019e36 <__assert_func+0x12>
 8019e4e:	bf00      	nop
 8019e50:	200001c0 	.word	0x200001c0
 8019e54:	0801b9c4 	.word	0x0801b9c4
 8019e58:	0801b9d1 	.word	0x0801b9d1
 8019e5c:	0801b9ff 	.word	0x0801b9ff

08019e60 <_calloc_r>:
 8019e60:	b538      	push	{r3, r4, r5, lr}
 8019e62:	fba1 1502 	umull	r1, r5, r1, r2
 8019e66:	b92d      	cbnz	r5, 8019e74 <_calloc_r+0x14>
 8019e68:	f7fa fd92 	bl	8014990 <_malloc_r>
 8019e6c:	4604      	mov	r4, r0
 8019e6e:	b938      	cbnz	r0, 8019e80 <_calloc_r+0x20>
 8019e70:	4620      	mov	r0, r4
 8019e72:	bd38      	pop	{r3, r4, r5, pc}
 8019e74:	f7fa fc2c 	bl	80146d0 <__errno>
 8019e78:	230c      	movs	r3, #12
 8019e7a:	6003      	str	r3, [r0, #0]
 8019e7c:	2400      	movs	r4, #0
 8019e7e:	e7f7      	b.n	8019e70 <_calloc_r+0x10>
 8019e80:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019e84:	f022 0203 	bic.w	r2, r2, #3
 8019e88:	3a04      	subs	r2, #4
 8019e8a:	2a24      	cmp	r2, #36	; 0x24
 8019e8c:	d819      	bhi.n	8019ec2 <_calloc_r+0x62>
 8019e8e:	2a13      	cmp	r2, #19
 8019e90:	d915      	bls.n	8019ebe <_calloc_r+0x5e>
 8019e92:	2a1b      	cmp	r2, #27
 8019e94:	e9c0 5500 	strd	r5, r5, [r0]
 8019e98:	d806      	bhi.n	8019ea8 <_calloc_r+0x48>
 8019e9a:	f100 0308 	add.w	r3, r0, #8
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	e9c3 2200 	strd	r2, r2, [r3]
 8019ea4:	609a      	str	r2, [r3, #8]
 8019ea6:	e7e3      	b.n	8019e70 <_calloc_r+0x10>
 8019ea8:	2a24      	cmp	r2, #36	; 0x24
 8019eaa:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8019eae:	bf11      	iteee	ne
 8019eb0:	f100 0310 	addne.w	r3, r0, #16
 8019eb4:	6105      	streq	r5, [r0, #16]
 8019eb6:	f100 0318 	addeq.w	r3, r0, #24
 8019eba:	6145      	streq	r5, [r0, #20]
 8019ebc:	e7ef      	b.n	8019e9e <_calloc_r+0x3e>
 8019ebe:	4603      	mov	r3, r0
 8019ec0:	e7ed      	b.n	8019e9e <_calloc_r+0x3e>
 8019ec2:	4629      	mov	r1, r5
 8019ec4:	f7fa fb46 	bl	8014554 <memset>
 8019ec8:	e7d2      	b.n	8019e70 <_calloc_r+0x10>
	...

08019ecc <fiprintf>:
 8019ecc:	b40e      	push	{r1, r2, r3}
 8019ece:	b503      	push	{r0, r1, lr}
 8019ed0:	4601      	mov	r1, r0
 8019ed2:	ab03      	add	r3, sp, #12
 8019ed4:	4805      	ldr	r0, [pc, #20]	; (8019eec <fiprintf+0x20>)
 8019ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8019eda:	6800      	ldr	r0, [r0, #0]
 8019edc:	9301      	str	r3, [sp, #4]
 8019ede:	f7fd fda5 	bl	8017a2c <_vfiprintf_r>
 8019ee2:	b002      	add	sp, #8
 8019ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ee8:	b003      	add	sp, #12
 8019eea:	4770      	bx	lr
 8019eec:	200001c0 	.word	0x200001c0

08019ef0 <abort>:
 8019ef0:	b508      	push	{r3, lr}
 8019ef2:	2006      	movs	r0, #6
 8019ef4:	f000 f82c 	bl	8019f50 <raise>
 8019ef8:	2001      	movs	r0, #1
 8019efa:	f7f0 fa7c 	bl	800a3f6 <_exit>

08019efe <_raise_r>:
 8019efe:	291f      	cmp	r1, #31
 8019f00:	b538      	push	{r3, r4, r5, lr}
 8019f02:	4604      	mov	r4, r0
 8019f04:	460d      	mov	r5, r1
 8019f06:	d904      	bls.n	8019f12 <_raise_r+0x14>
 8019f08:	2316      	movs	r3, #22
 8019f0a:	6003      	str	r3, [r0, #0]
 8019f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f10:	bd38      	pop	{r3, r4, r5, pc}
 8019f12:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 8019f16:	b112      	cbz	r2, 8019f1e <_raise_r+0x20>
 8019f18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019f1c:	b94b      	cbnz	r3, 8019f32 <_raise_r+0x34>
 8019f1e:	4620      	mov	r0, r4
 8019f20:	f000 f830 	bl	8019f84 <_getpid_r>
 8019f24:	462a      	mov	r2, r5
 8019f26:	4601      	mov	r1, r0
 8019f28:	4620      	mov	r0, r4
 8019f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f2e:	f000 b817 	b.w	8019f60 <_kill_r>
 8019f32:	2b01      	cmp	r3, #1
 8019f34:	d00a      	beq.n	8019f4c <_raise_r+0x4e>
 8019f36:	1c59      	adds	r1, r3, #1
 8019f38:	d103      	bne.n	8019f42 <_raise_r+0x44>
 8019f3a:	2316      	movs	r3, #22
 8019f3c:	6003      	str	r3, [r0, #0]
 8019f3e:	2001      	movs	r0, #1
 8019f40:	e7e6      	b.n	8019f10 <_raise_r+0x12>
 8019f42:	2400      	movs	r4, #0
 8019f44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019f48:	4628      	mov	r0, r5
 8019f4a:	4798      	blx	r3
 8019f4c:	2000      	movs	r0, #0
 8019f4e:	e7df      	b.n	8019f10 <_raise_r+0x12>

08019f50 <raise>:
 8019f50:	4b02      	ldr	r3, [pc, #8]	; (8019f5c <raise+0xc>)
 8019f52:	4601      	mov	r1, r0
 8019f54:	6818      	ldr	r0, [r3, #0]
 8019f56:	f7ff bfd2 	b.w	8019efe <_raise_r>
 8019f5a:	bf00      	nop
 8019f5c:	200001c0 	.word	0x200001c0

08019f60 <_kill_r>:
 8019f60:	b538      	push	{r3, r4, r5, lr}
 8019f62:	4d07      	ldr	r5, [pc, #28]	; (8019f80 <_kill_r+0x20>)
 8019f64:	2300      	movs	r3, #0
 8019f66:	4604      	mov	r4, r0
 8019f68:	4608      	mov	r0, r1
 8019f6a:	4611      	mov	r1, r2
 8019f6c:	602b      	str	r3, [r5, #0]
 8019f6e:	f7f0 fa32 	bl	800a3d6 <_kill>
 8019f72:	1c43      	adds	r3, r0, #1
 8019f74:	d102      	bne.n	8019f7c <_kill_r+0x1c>
 8019f76:	682b      	ldr	r3, [r5, #0]
 8019f78:	b103      	cbz	r3, 8019f7c <_kill_r+0x1c>
 8019f7a:	6023      	str	r3, [r4, #0]
 8019f7c:	bd38      	pop	{r3, r4, r5, pc}
 8019f7e:	bf00      	nop
 8019f80:	20004974 	.word	0x20004974

08019f84 <_getpid_r>:
 8019f84:	f7f0 ba20 	b.w	800a3c8 <_getpid>

08019f88 <pow>:
 8019f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f8c:	4614      	mov	r4, r2
 8019f8e:	461d      	mov	r5, r3
 8019f90:	4680      	mov	r8, r0
 8019f92:	4689      	mov	r9, r1
 8019f94:	f000 f868 	bl	801a068 <__ieee754_pow>
 8019f98:	4622      	mov	r2, r4
 8019f9a:	4606      	mov	r6, r0
 8019f9c:	460f      	mov	r7, r1
 8019f9e:	462b      	mov	r3, r5
 8019fa0:	4620      	mov	r0, r4
 8019fa2:	4629      	mov	r1, r5
 8019fa4:	f7ee ff9a 	bl	8008edc <__aeabi_dcmpun>
 8019fa8:	bbc8      	cbnz	r0, 801a01e <pow+0x96>
 8019faa:	2200      	movs	r2, #0
 8019fac:	2300      	movs	r3, #0
 8019fae:	4640      	mov	r0, r8
 8019fb0:	4649      	mov	r1, r9
 8019fb2:	f7ee ff61 	bl	8008e78 <__aeabi_dcmpeq>
 8019fb6:	b1b8      	cbz	r0, 8019fe8 <pow+0x60>
 8019fb8:	2200      	movs	r2, #0
 8019fba:	2300      	movs	r3, #0
 8019fbc:	4620      	mov	r0, r4
 8019fbe:	4629      	mov	r1, r5
 8019fc0:	f7ee ff5a 	bl	8008e78 <__aeabi_dcmpeq>
 8019fc4:	2800      	cmp	r0, #0
 8019fc6:	d141      	bne.n	801a04c <pow+0xc4>
 8019fc8:	4620      	mov	r0, r4
 8019fca:	4629      	mov	r1, r5
 8019fcc:	f000 f844 	bl	801a058 <finite>
 8019fd0:	b328      	cbz	r0, 801a01e <pow+0x96>
 8019fd2:	2200      	movs	r2, #0
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	4620      	mov	r0, r4
 8019fd8:	4629      	mov	r1, r5
 8019fda:	f7ee ff57 	bl	8008e8c <__aeabi_dcmplt>
 8019fde:	b1f0      	cbz	r0, 801a01e <pow+0x96>
 8019fe0:	f7fa fb76 	bl	80146d0 <__errno>
 8019fe4:	2322      	movs	r3, #34	; 0x22
 8019fe6:	e019      	b.n	801a01c <pow+0x94>
 8019fe8:	4630      	mov	r0, r6
 8019fea:	4639      	mov	r1, r7
 8019fec:	f000 f834 	bl	801a058 <finite>
 8019ff0:	b9c8      	cbnz	r0, 801a026 <pow+0x9e>
 8019ff2:	4640      	mov	r0, r8
 8019ff4:	4649      	mov	r1, r9
 8019ff6:	f000 f82f 	bl	801a058 <finite>
 8019ffa:	b1a0      	cbz	r0, 801a026 <pow+0x9e>
 8019ffc:	4620      	mov	r0, r4
 8019ffe:	4629      	mov	r1, r5
 801a000:	f000 f82a 	bl	801a058 <finite>
 801a004:	b178      	cbz	r0, 801a026 <pow+0x9e>
 801a006:	4632      	mov	r2, r6
 801a008:	463b      	mov	r3, r7
 801a00a:	4630      	mov	r0, r6
 801a00c:	4639      	mov	r1, r7
 801a00e:	f7ee ff65 	bl	8008edc <__aeabi_dcmpun>
 801a012:	2800      	cmp	r0, #0
 801a014:	d0e4      	beq.n	8019fe0 <pow+0x58>
 801a016:	f7fa fb5b 	bl	80146d0 <__errno>
 801a01a:	2321      	movs	r3, #33	; 0x21
 801a01c:	6003      	str	r3, [r0, #0]
 801a01e:	4630      	mov	r0, r6
 801a020:	4639      	mov	r1, r7
 801a022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a026:	2200      	movs	r2, #0
 801a028:	2300      	movs	r3, #0
 801a02a:	4630      	mov	r0, r6
 801a02c:	4639      	mov	r1, r7
 801a02e:	f7ee ff23 	bl	8008e78 <__aeabi_dcmpeq>
 801a032:	2800      	cmp	r0, #0
 801a034:	d0f3      	beq.n	801a01e <pow+0x96>
 801a036:	4640      	mov	r0, r8
 801a038:	4649      	mov	r1, r9
 801a03a:	f000 f80d 	bl	801a058 <finite>
 801a03e:	2800      	cmp	r0, #0
 801a040:	d0ed      	beq.n	801a01e <pow+0x96>
 801a042:	4620      	mov	r0, r4
 801a044:	4629      	mov	r1, r5
 801a046:	f000 f807 	bl	801a058 <finite>
 801a04a:	e7c8      	b.n	8019fde <pow+0x56>
 801a04c:	4f01      	ldr	r7, [pc, #4]	; (801a054 <pow+0xcc>)
 801a04e:	2600      	movs	r6, #0
 801a050:	e7e5      	b.n	801a01e <pow+0x96>
 801a052:	bf00      	nop
 801a054:	3ff00000 	.word	0x3ff00000

0801a058 <finite>:
 801a058:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 801a05c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a060:	0fc0      	lsrs	r0, r0, #31
 801a062:	4770      	bx	lr
 801a064:	0000      	movs	r0, r0
	...

0801a068 <__ieee754_pow>:
 801a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a06c:	b093      	sub	sp, #76	; 0x4c
 801a06e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a072:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 801a076:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801a07a:	4689      	mov	r9, r1
 801a07c:	ea56 0102 	orrs.w	r1, r6, r2
 801a080:	4680      	mov	r8, r0
 801a082:	d111      	bne.n	801a0a8 <__ieee754_pow+0x40>
 801a084:	1803      	adds	r3, r0, r0
 801a086:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 801a08a:	4152      	adcs	r2, r2
 801a08c:	4299      	cmp	r1, r3
 801a08e:	4b82      	ldr	r3, [pc, #520]	; (801a298 <__ieee754_pow+0x230>)
 801a090:	4193      	sbcs	r3, r2
 801a092:	f080 84b5 	bcs.w	801aa00 <__ieee754_pow+0x998>
 801a096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a09a:	4640      	mov	r0, r8
 801a09c:	4649      	mov	r1, r9
 801a09e:	f7ee facd 	bl	800863c <__adddf3>
 801a0a2:	4683      	mov	fp, r0
 801a0a4:	468c      	mov	ip, r1
 801a0a6:	e06f      	b.n	801a188 <__ieee754_pow+0x120>
 801a0a8:	4b7c      	ldr	r3, [pc, #496]	; (801a29c <__ieee754_pow+0x234>)
 801a0aa:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 801a0ae:	429c      	cmp	r4, r3
 801a0b0:	464d      	mov	r5, r9
 801a0b2:	4682      	mov	sl, r0
 801a0b4:	dc06      	bgt.n	801a0c4 <__ieee754_pow+0x5c>
 801a0b6:	d101      	bne.n	801a0bc <__ieee754_pow+0x54>
 801a0b8:	2800      	cmp	r0, #0
 801a0ba:	d1ec      	bne.n	801a096 <__ieee754_pow+0x2e>
 801a0bc:	429e      	cmp	r6, r3
 801a0be:	dc01      	bgt.n	801a0c4 <__ieee754_pow+0x5c>
 801a0c0:	d10f      	bne.n	801a0e2 <__ieee754_pow+0x7a>
 801a0c2:	b172      	cbz	r2, 801a0e2 <__ieee754_pow+0x7a>
 801a0c4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801a0c8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801a0cc:	ea55 050a 	orrs.w	r5, r5, sl
 801a0d0:	d1e1      	bne.n	801a096 <__ieee754_pow+0x2e>
 801a0d2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801a0d6:	18db      	adds	r3, r3, r3
 801a0d8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801a0dc:	4152      	adcs	r2, r2
 801a0de:	429d      	cmp	r5, r3
 801a0e0:	e7d5      	b.n	801a08e <__ieee754_pow+0x26>
 801a0e2:	2d00      	cmp	r5, #0
 801a0e4:	da39      	bge.n	801a15a <__ieee754_pow+0xf2>
 801a0e6:	4b6e      	ldr	r3, [pc, #440]	; (801a2a0 <__ieee754_pow+0x238>)
 801a0e8:	429e      	cmp	r6, r3
 801a0ea:	dc52      	bgt.n	801a192 <__ieee754_pow+0x12a>
 801a0ec:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a0f0:	429e      	cmp	r6, r3
 801a0f2:	f340 8498 	ble.w	801aa26 <__ieee754_pow+0x9be>
 801a0f6:	1533      	asrs	r3, r6, #20
 801a0f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a0fc:	2b14      	cmp	r3, #20
 801a0fe:	dd0f      	ble.n	801a120 <__ieee754_pow+0xb8>
 801a100:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a104:	fa22 f103 	lsr.w	r1, r2, r3
 801a108:	fa01 f303 	lsl.w	r3, r1, r3
 801a10c:	4293      	cmp	r3, r2
 801a10e:	f040 848a 	bne.w	801aa26 <__ieee754_pow+0x9be>
 801a112:	f001 0101 	and.w	r1, r1, #1
 801a116:	f1c1 0302 	rsb	r3, r1, #2
 801a11a:	9300      	str	r3, [sp, #0]
 801a11c:	b182      	cbz	r2, 801a140 <__ieee754_pow+0xd8>
 801a11e:	e05d      	b.n	801a1dc <__ieee754_pow+0x174>
 801a120:	2a00      	cmp	r2, #0
 801a122:	d159      	bne.n	801a1d8 <__ieee754_pow+0x170>
 801a124:	f1c3 0314 	rsb	r3, r3, #20
 801a128:	fa46 f103 	asr.w	r1, r6, r3
 801a12c:	fa01 f303 	lsl.w	r3, r1, r3
 801a130:	42b3      	cmp	r3, r6
 801a132:	f040 8475 	bne.w	801aa20 <__ieee754_pow+0x9b8>
 801a136:	f001 0101 	and.w	r1, r1, #1
 801a13a:	f1c1 0302 	rsb	r3, r1, #2
 801a13e:	9300      	str	r3, [sp, #0]
 801a140:	4b58      	ldr	r3, [pc, #352]	; (801a2a4 <__ieee754_pow+0x23c>)
 801a142:	429e      	cmp	r6, r3
 801a144:	d132      	bne.n	801a1ac <__ieee754_pow+0x144>
 801a146:	2f00      	cmp	r7, #0
 801a148:	f280 8466 	bge.w	801aa18 <__ieee754_pow+0x9b0>
 801a14c:	4955      	ldr	r1, [pc, #340]	; (801a2a4 <__ieee754_pow+0x23c>)
 801a14e:	4642      	mov	r2, r8
 801a150:	464b      	mov	r3, r9
 801a152:	2000      	movs	r0, #0
 801a154:	f7ee fd52 	bl	8008bfc <__aeabi_ddiv>
 801a158:	e7a3      	b.n	801a0a2 <__ieee754_pow+0x3a>
 801a15a:	2300      	movs	r3, #0
 801a15c:	9300      	str	r3, [sp, #0]
 801a15e:	2a00      	cmp	r2, #0
 801a160:	d13c      	bne.n	801a1dc <__ieee754_pow+0x174>
 801a162:	4b4e      	ldr	r3, [pc, #312]	; (801a29c <__ieee754_pow+0x234>)
 801a164:	429e      	cmp	r6, r3
 801a166:	d1eb      	bne.n	801a140 <__ieee754_pow+0xd8>
 801a168:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a16c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a170:	ea53 030a 	orrs.w	r3, r3, sl
 801a174:	f000 8444 	beq.w	801aa00 <__ieee754_pow+0x998>
 801a178:	4b4b      	ldr	r3, [pc, #300]	; (801a2a8 <__ieee754_pow+0x240>)
 801a17a:	429c      	cmp	r4, r3
 801a17c:	dd0b      	ble.n	801a196 <__ieee754_pow+0x12e>
 801a17e:	2f00      	cmp	r7, #0
 801a180:	f2c0 8444 	blt.w	801aa0c <__ieee754_pow+0x9a4>
 801a184:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 801a188:	4658      	mov	r0, fp
 801a18a:	4661      	mov	r1, ip
 801a18c:	b013      	add	sp, #76	; 0x4c
 801a18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a192:	2302      	movs	r3, #2
 801a194:	e7e2      	b.n	801a15c <__ieee754_pow+0xf4>
 801a196:	2f00      	cmp	r7, #0
 801a198:	f04f 0b00 	mov.w	fp, #0
 801a19c:	f04f 0c00 	mov.w	ip, #0
 801a1a0:	daf2      	bge.n	801a188 <__ieee754_pow+0x120>
 801a1a2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801a1a6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 801a1aa:	e7ed      	b.n	801a188 <__ieee754_pow+0x120>
 801a1ac:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801a1b0:	d106      	bne.n	801a1c0 <__ieee754_pow+0x158>
 801a1b2:	4642      	mov	r2, r8
 801a1b4:	464b      	mov	r3, r9
 801a1b6:	4640      	mov	r0, r8
 801a1b8:	4649      	mov	r1, r9
 801a1ba:	f7ee fbf5 	bl	80089a8 <__aeabi_dmul>
 801a1be:	e770      	b.n	801a0a2 <__ieee754_pow+0x3a>
 801a1c0:	4b3a      	ldr	r3, [pc, #232]	; (801a2ac <__ieee754_pow+0x244>)
 801a1c2:	429f      	cmp	r7, r3
 801a1c4:	d10a      	bne.n	801a1dc <__ieee754_pow+0x174>
 801a1c6:	2d00      	cmp	r5, #0
 801a1c8:	db08      	blt.n	801a1dc <__ieee754_pow+0x174>
 801a1ca:	4640      	mov	r0, r8
 801a1cc:	4649      	mov	r1, r9
 801a1ce:	b013      	add	sp, #76	; 0x4c
 801a1d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1d4:	f000 bd06 	b.w	801abe4 <__ieee754_sqrt>
 801a1d8:	2300      	movs	r3, #0
 801a1da:	9300      	str	r3, [sp, #0]
 801a1dc:	4640      	mov	r0, r8
 801a1de:	4649      	mov	r1, r9
 801a1e0:	f000 fc54 	bl	801aa8c <fabs>
 801a1e4:	4683      	mov	fp, r0
 801a1e6:	468c      	mov	ip, r1
 801a1e8:	f1ba 0f00 	cmp.w	sl, #0
 801a1ec:	d128      	bne.n	801a240 <__ieee754_pow+0x1d8>
 801a1ee:	b124      	cbz	r4, 801a1fa <__ieee754_pow+0x192>
 801a1f0:	4b2c      	ldr	r3, [pc, #176]	; (801a2a4 <__ieee754_pow+0x23c>)
 801a1f2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801a1f6:	429a      	cmp	r2, r3
 801a1f8:	d122      	bne.n	801a240 <__ieee754_pow+0x1d8>
 801a1fa:	2f00      	cmp	r7, #0
 801a1fc:	da07      	bge.n	801a20e <__ieee754_pow+0x1a6>
 801a1fe:	465a      	mov	r2, fp
 801a200:	4663      	mov	r3, ip
 801a202:	4928      	ldr	r1, [pc, #160]	; (801a2a4 <__ieee754_pow+0x23c>)
 801a204:	2000      	movs	r0, #0
 801a206:	f7ee fcf9 	bl	8008bfc <__aeabi_ddiv>
 801a20a:	4683      	mov	fp, r0
 801a20c:	468c      	mov	ip, r1
 801a20e:	2d00      	cmp	r5, #0
 801a210:	daba      	bge.n	801a188 <__ieee754_pow+0x120>
 801a212:	9b00      	ldr	r3, [sp, #0]
 801a214:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a218:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a21c:	431c      	orrs	r4, r3
 801a21e:	d108      	bne.n	801a232 <__ieee754_pow+0x1ca>
 801a220:	465a      	mov	r2, fp
 801a222:	4663      	mov	r3, ip
 801a224:	4658      	mov	r0, fp
 801a226:	4661      	mov	r1, ip
 801a228:	f7ee fa06 	bl	8008638 <__aeabi_dsub>
 801a22c:	4602      	mov	r2, r0
 801a22e:	460b      	mov	r3, r1
 801a230:	e790      	b.n	801a154 <__ieee754_pow+0xec>
 801a232:	9b00      	ldr	r3, [sp, #0]
 801a234:	2b01      	cmp	r3, #1
 801a236:	d1a7      	bne.n	801a188 <__ieee754_pow+0x120>
 801a238:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 801a23c:	469c      	mov	ip, r3
 801a23e:	e7a3      	b.n	801a188 <__ieee754_pow+0x120>
 801a240:	0feb      	lsrs	r3, r5, #31
 801a242:	3b01      	subs	r3, #1
 801a244:	930c      	str	r3, [sp, #48]	; 0x30
 801a246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a248:	9b00      	ldr	r3, [sp, #0]
 801a24a:	4313      	orrs	r3, r2
 801a24c:	d104      	bne.n	801a258 <__ieee754_pow+0x1f0>
 801a24e:	4642      	mov	r2, r8
 801a250:	464b      	mov	r3, r9
 801a252:	4640      	mov	r0, r8
 801a254:	4649      	mov	r1, r9
 801a256:	e7e7      	b.n	801a228 <__ieee754_pow+0x1c0>
 801a258:	4b15      	ldr	r3, [pc, #84]	; (801a2b0 <__ieee754_pow+0x248>)
 801a25a:	429e      	cmp	r6, r3
 801a25c:	f340 80f2 	ble.w	801a444 <__ieee754_pow+0x3dc>
 801a260:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a264:	429e      	cmp	r6, r3
 801a266:	4b10      	ldr	r3, [pc, #64]	; (801a2a8 <__ieee754_pow+0x240>)
 801a268:	dd09      	ble.n	801a27e <__ieee754_pow+0x216>
 801a26a:	429c      	cmp	r4, r3
 801a26c:	dc0c      	bgt.n	801a288 <__ieee754_pow+0x220>
 801a26e:	2f00      	cmp	r7, #0
 801a270:	da0c      	bge.n	801a28c <__ieee754_pow+0x224>
 801a272:	2000      	movs	r0, #0
 801a274:	b013      	add	sp, #76	; 0x4c
 801a276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a27a:	f000 bcae 	b.w	801abda <__math_oflow>
 801a27e:	429c      	cmp	r4, r3
 801a280:	dbf5      	blt.n	801a26e <__ieee754_pow+0x206>
 801a282:	4b08      	ldr	r3, [pc, #32]	; (801a2a4 <__ieee754_pow+0x23c>)
 801a284:	429c      	cmp	r4, r3
 801a286:	dd15      	ble.n	801a2b4 <__ieee754_pow+0x24c>
 801a288:	2f00      	cmp	r7, #0
 801a28a:	dcf2      	bgt.n	801a272 <__ieee754_pow+0x20a>
 801a28c:	2000      	movs	r0, #0
 801a28e:	b013      	add	sp, #76	; 0x4c
 801a290:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a294:	f000 bc9c 	b.w	801abd0 <__math_uflow>
 801a298:	fff00000 	.word	0xfff00000
 801a29c:	7ff00000 	.word	0x7ff00000
 801a2a0:	433fffff 	.word	0x433fffff
 801a2a4:	3ff00000 	.word	0x3ff00000
 801a2a8:	3fefffff 	.word	0x3fefffff
 801a2ac:	3fe00000 	.word	0x3fe00000
 801a2b0:	41e00000 	.word	0x41e00000
 801a2b4:	4661      	mov	r1, ip
 801a2b6:	4b5e      	ldr	r3, [pc, #376]	; (801a430 <__ieee754_pow+0x3c8>)
 801a2b8:	2200      	movs	r2, #0
 801a2ba:	4658      	mov	r0, fp
 801a2bc:	f7ee f9bc 	bl	8008638 <__aeabi_dsub>
 801a2c0:	a353      	add	r3, pc, #332	; (adr r3, 801a410 <__ieee754_pow+0x3a8>)
 801a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2c6:	4604      	mov	r4, r0
 801a2c8:	460d      	mov	r5, r1
 801a2ca:	f7ee fb6d 	bl	80089a8 <__aeabi_dmul>
 801a2ce:	a352      	add	r3, pc, #328	; (adr r3, 801a418 <__ieee754_pow+0x3b0>)
 801a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2d4:	4606      	mov	r6, r0
 801a2d6:	460f      	mov	r7, r1
 801a2d8:	4620      	mov	r0, r4
 801a2da:	4629      	mov	r1, r5
 801a2dc:	f7ee fb64 	bl	80089a8 <__aeabi_dmul>
 801a2e0:	4b54      	ldr	r3, [pc, #336]	; (801a434 <__ieee754_pow+0x3cc>)
 801a2e2:	4682      	mov	sl, r0
 801a2e4:	468b      	mov	fp, r1
 801a2e6:	2200      	movs	r2, #0
 801a2e8:	4620      	mov	r0, r4
 801a2ea:	4629      	mov	r1, r5
 801a2ec:	f7ee fb5c 	bl	80089a8 <__aeabi_dmul>
 801a2f0:	4602      	mov	r2, r0
 801a2f2:	460b      	mov	r3, r1
 801a2f4:	a14a      	add	r1, pc, #296	; (adr r1, 801a420 <__ieee754_pow+0x3b8>)
 801a2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a2fa:	f7ee f99d 	bl	8008638 <__aeabi_dsub>
 801a2fe:	4622      	mov	r2, r4
 801a300:	462b      	mov	r3, r5
 801a302:	f7ee fb51 	bl	80089a8 <__aeabi_dmul>
 801a306:	4602      	mov	r2, r0
 801a308:	460b      	mov	r3, r1
 801a30a:	2000      	movs	r0, #0
 801a30c:	494a      	ldr	r1, [pc, #296]	; (801a438 <__ieee754_pow+0x3d0>)
 801a30e:	f7ee f993 	bl	8008638 <__aeabi_dsub>
 801a312:	4622      	mov	r2, r4
 801a314:	462b      	mov	r3, r5
 801a316:	4680      	mov	r8, r0
 801a318:	4689      	mov	r9, r1
 801a31a:	4620      	mov	r0, r4
 801a31c:	4629      	mov	r1, r5
 801a31e:	f7ee fb43 	bl	80089a8 <__aeabi_dmul>
 801a322:	4602      	mov	r2, r0
 801a324:	460b      	mov	r3, r1
 801a326:	4640      	mov	r0, r8
 801a328:	4649      	mov	r1, r9
 801a32a:	f7ee fb3d 	bl	80089a8 <__aeabi_dmul>
 801a32e:	a33e      	add	r3, pc, #248	; (adr r3, 801a428 <__ieee754_pow+0x3c0>)
 801a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a334:	f7ee fb38 	bl	80089a8 <__aeabi_dmul>
 801a338:	4602      	mov	r2, r0
 801a33a:	460b      	mov	r3, r1
 801a33c:	4650      	mov	r0, sl
 801a33e:	4659      	mov	r1, fp
 801a340:	f7ee f97a 	bl	8008638 <__aeabi_dsub>
 801a344:	4602      	mov	r2, r0
 801a346:	460b      	mov	r3, r1
 801a348:	4604      	mov	r4, r0
 801a34a:	460d      	mov	r5, r1
 801a34c:	4630      	mov	r0, r6
 801a34e:	4639      	mov	r1, r7
 801a350:	f7ee f974 	bl	800863c <__adddf3>
 801a354:	2000      	movs	r0, #0
 801a356:	4632      	mov	r2, r6
 801a358:	463b      	mov	r3, r7
 801a35a:	4682      	mov	sl, r0
 801a35c:	468b      	mov	fp, r1
 801a35e:	f7ee f96b 	bl	8008638 <__aeabi_dsub>
 801a362:	4602      	mov	r2, r0
 801a364:	460b      	mov	r3, r1
 801a366:	4620      	mov	r0, r4
 801a368:	4629      	mov	r1, r5
 801a36a:	f7ee f965 	bl	8008638 <__aeabi_dsub>
 801a36e:	9b00      	ldr	r3, [sp, #0]
 801a370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a372:	3b01      	subs	r3, #1
 801a374:	4313      	orrs	r3, r2
 801a376:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a37a:	bf0c      	ite	eq
 801a37c:	4b2f      	ldreq	r3, [pc, #188]	; (801a43c <__ieee754_pow+0x3d4>)
 801a37e:	4b2c      	ldrne	r3, [pc, #176]	; (801a430 <__ieee754_pow+0x3c8>)
 801a380:	2600      	movs	r6, #0
 801a382:	2200      	movs	r2, #0
 801a384:	e9cd 2300 	strd	r2, r3, [sp]
 801a388:	4604      	mov	r4, r0
 801a38a:	460d      	mov	r5, r1
 801a38c:	4632      	mov	r2, r6
 801a38e:	463b      	mov	r3, r7
 801a390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a394:	f7ee f950 	bl	8008638 <__aeabi_dsub>
 801a398:	4652      	mov	r2, sl
 801a39a:	465b      	mov	r3, fp
 801a39c:	f7ee fb04 	bl	80089a8 <__aeabi_dmul>
 801a3a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a3a4:	4680      	mov	r8, r0
 801a3a6:	4689      	mov	r9, r1
 801a3a8:	4620      	mov	r0, r4
 801a3aa:	4629      	mov	r1, r5
 801a3ac:	f7ee fafc 	bl	80089a8 <__aeabi_dmul>
 801a3b0:	4602      	mov	r2, r0
 801a3b2:	460b      	mov	r3, r1
 801a3b4:	4640      	mov	r0, r8
 801a3b6:	4649      	mov	r1, r9
 801a3b8:	f7ee f940 	bl	800863c <__adddf3>
 801a3bc:	4632      	mov	r2, r6
 801a3be:	463b      	mov	r3, r7
 801a3c0:	4680      	mov	r8, r0
 801a3c2:	4689      	mov	r9, r1
 801a3c4:	4650      	mov	r0, sl
 801a3c6:	4659      	mov	r1, fp
 801a3c8:	f7ee faee 	bl	80089a8 <__aeabi_dmul>
 801a3cc:	460b      	mov	r3, r1
 801a3ce:	4604      	mov	r4, r0
 801a3d0:	460d      	mov	r5, r1
 801a3d2:	4602      	mov	r2, r0
 801a3d4:	4649      	mov	r1, r9
 801a3d6:	4640      	mov	r0, r8
 801a3d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801a3dc:	f7ee f92e 	bl	800863c <__adddf3>
 801a3e0:	4b17      	ldr	r3, [pc, #92]	; (801a440 <__ieee754_pow+0x3d8>)
 801a3e2:	4299      	cmp	r1, r3
 801a3e4:	4682      	mov	sl, r0
 801a3e6:	460f      	mov	r7, r1
 801a3e8:	460e      	mov	r6, r1
 801a3ea:	f340 82e4 	ble.w	801a9b6 <__ieee754_pow+0x94e>
 801a3ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801a3f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801a3f6:	4303      	orrs	r3, r0
 801a3f8:	f000 81e0 	beq.w	801a7bc <__ieee754_pow+0x754>
 801a3fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a400:	2200      	movs	r2, #0
 801a402:	2300      	movs	r3, #0
 801a404:	f7ee fd42 	bl	8008e8c <__aeabi_dcmplt>
 801a408:	3800      	subs	r0, #0
 801a40a:	bf18      	it	ne
 801a40c:	2001      	movne	r0, #1
 801a40e:	e731      	b.n	801a274 <__ieee754_pow+0x20c>
 801a410:	60000000 	.word	0x60000000
 801a414:	3ff71547 	.word	0x3ff71547
 801a418:	f85ddf44 	.word	0xf85ddf44
 801a41c:	3e54ae0b 	.word	0x3e54ae0b
 801a420:	55555555 	.word	0x55555555
 801a424:	3fd55555 	.word	0x3fd55555
 801a428:	652b82fe 	.word	0x652b82fe
 801a42c:	3ff71547 	.word	0x3ff71547
 801a430:	3ff00000 	.word	0x3ff00000
 801a434:	3fd00000 	.word	0x3fd00000
 801a438:	3fe00000 	.word	0x3fe00000
 801a43c:	bff00000 	.word	0xbff00000
 801a440:	408fffff 	.word	0x408fffff
 801a444:	4bd4      	ldr	r3, [pc, #848]	; (801a798 <__ieee754_pow+0x730>)
 801a446:	402b      	ands	r3, r5
 801a448:	2200      	movs	r2, #0
 801a44a:	b943      	cbnz	r3, 801a45e <__ieee754_pow+0x3f6>
 801a44c:	4658      	mov	r0, fp
 801a44e:	4bd3      	ldr	r3, [pc, #844]	; (801a79c <__ieee754_pow+0x734>)
 801a450:	4661      	mov	r1, ip
 801a452:	f7ee faa9 	bl	80089a8 <__aeabi_dmul>
 801a456:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801a45a:	4683      	mov	fp, r0
 801a45c:	460c      	mov	r4, r1
 801a45e:	1523      	asrs	r3, r4, #20
 801a460:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a464:	4413      	add	r3, r2
 801a466:	930b      	str	r3, [sp, #44]	; 0x2c
 801a468:	4bcd      	ldr	r3, [pc, #820]	; (801a7a0 <__ieee754_pow+0x738>)
 801a46a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a46e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801a472:	429c      	cmp	r4, r3
 801a474:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a478:	dd08      	ble.n	801a48c <__ieee754_pow+0x424>
 801a47a:	4bca      	ldr	r3, [pc, #808]	; (801a7a4 <__ieee754_pow+0x73c>)
 801a47c:	429c      	cmp	r4, r3
 801a47e:	f340 8164 	ble.w	801a74a <__ieee754_pow+0x6e2>
 801a482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a484:	3301      	adds	r3, #1
 801a486:	930b      	str	r3, [sp, #44]	; 0x2c
 801a488:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801a48c:	2600      	movs	r6, #0
 801a48e:	00f3      	lsls	r3, r6, #3
 801a490:	930d      	str	r3, [sp, #52]	; 0x34
 801a492:	4bc5      	ldr	r3, [pc, #788]	; (801a7a8 <__ieee754_pow+0x740>)
 801a494:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a498:	e9d3 3400 	ldrd	r3, r4, [r3]
 801a49c:	4658      	mov	r0, fp
 801a49e:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801a4a2:	461a      	mov	r2, r3
 801a4a4:	4629      	mov	r1, r5
 801a4a6:	4623      	mov	r3, r4
 801a4a8:	f7ee f8c6 	bl	8008638 <__aeabi_dsub>
 801a4ac:	46da      	mov	sl, fp
 801a4ae:	4652      	mov	r2, sl
 801a4b0:	462b      	mov	r3, r5
 801a4b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801a4b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a4ba:	f7ee f8bf 	bl	800863c <__adddf3>
 801a4be:	4602      	mov	r2, r0
 801a4c0:	460b      	mov	r3, r1
 801a4c2:	2000      	movs	r0, #0
 801a4c4:	49b9      	ldr	r1, [pc, #740]	; (801a7ac <__ieee754_pow+0x744>)
 801a4c6:	f7ee fb99 	bl	8008bfc <__aeabi_ddiv>
 801a4ca:	4602      	mov	r2, r0
 801a4cc:	460b      	mov	r3, r1
 801a4ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801a4d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801a4d6:	f7ee fa67 	bl	80089a8 <__aeabi_dmul>
 801a4da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a4de:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801a4e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	9304      	str	r3, [sp, #16]
 801a4ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801a4ee:	46ab      	mov	fp, r5
 801a4f0:	106d      	asrs	r5, r5, #1
 801a4f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801a4f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801a4fa:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 801a4fe:	2200      	movs	r2, #0
 801a500:	4640      	mov	r0, r8
 801a502:	4649      	mov	r1, r9
 801a504:	4614      	mov	r4, r2
 801a506:	461d      	mov	r5, r3
 801a508:	f7ee fa4e 	bl	80089a8 <__aeabi_dmul>
 801a50c:	4602      	mov	r2, r0
 801a50e:	460b      	mov	r3, r1
 801a510:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801a514:	f7ee f890 	bl	8008638 <__aeabi_dsub>
 801a518:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a51c:	4606      	mov	r6, r0
 801a51e:	460f      	mov	r7, r1
 801a520:	4620      	mov	r0, r4
 801a522:	4629      	mov	r1, r5
 801a524:	f7ee f888 	bl	8008638 <__aeabi_dsub>
 801a528:	4602      	mov	r2, r0
 801a52a:	460b      	mov	r3, r1
 801a52c:	4650      	mov	r0, sl
 801a52e:	4659      	mov	r1, fp
 801a530:	f7ee f882 	bl	8008638 <__aeabi_dsub>
 801a534:	4642      	mov	r2, r8
 801a536:	464b      	mov	r3, r9
 801a538:	f7ee fa36 	bl	80089a8 <__aeabi_dmul>
 801a53c:	4602      	mov	r2, r0
 801a53e:	460b      	mov	r3, r1
 801a540:	4630      	mov	r0, r6
 801a542:	4639      	mov	r1, r7
 801a544:	f7ee f878 	bl	8008638 <__aeabi_dsub>
 801a548:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a54c:	f7ee fa2c 	bl	80089a8 <__aeabi_dmul>
 801a550:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a554:	4682      	mov	sl, r0
 801a556:	468b      	mov	fp, r1
 801a558:	4610      	mov	r0, r2
 801a55a:	4619      	mov	r1, r3
 801a55c:	f7ee fa24 	bl	80089a8 <__aeabi_dmul>
 801a560:	a37b      	add	r3, pc, #492	; (adr r3, 801a750 <__ieee754_pow+0x6e8>)
 801a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a566:	4604      	mov	r4, r0
 801a568:	460d      	mov	r5, r1
 801a56a:	f7ee fa1d 	bl	80089a8 <__aeabi_dmul>
 801a56e:	a37a      	add	r3, pc, #488	; (adr r3, 801a758 <__ieee754_pow+0x6f0>)
 801a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a574:	f7ee f862 	bl	800863c <__adddf3>
 801a578:	4622      	mov	r2, r4
 801a57a:	462b      	mov	r3, r5
 801a57c:	f7ee fa14 	bl	80089a8 <__aeabi_dmul>
 801a580:	a377      	add	r3, pc, #476	; (adr r3, 801a760 <__ieee754_pow+0x6f8>)
 801a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a586:	f7ee f859 	bl	800863c <__adddf3>
 801a58a:	4622      	mov	r2, r4
 801a58c:	462b      	mov	r3, r5
 801a58e:	f7ee fa0b 	bl	80089a8 <__aeabi_dmul>
 801a592:	a375      	add	r3, pc, #468	; (adr r3, 801a768 <__ieee754_pow+0x700>)
 801a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a598:	f7ee f850 	bl	800863c <__adddf3>
 801a59c:	4622      	mov	r2, r4
 801a59e:	462b      	mov	r3, r5
 801a5a0:	f7ee fa02 	bl	80089a8 <__aeabi_dmul>
 801a5a4:	a372      	add	r3, pc, #456	; (adr r3, 801a770 <__ieee754_pow+0x708>)
 801a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5aa:	f7ee f847 	bl	800863c <__adddf3>
 801a5ae:	4622      	mov	r2, r4
 801a5b0:	462b      	mov	r3, r5
 801a5b2:	f7ee f9f9 	bl	80089a8 <__aeabi_dmul>
 801a5b6:	a370      	add	r3, pc, #448	; (adr r3, 801a778 <__ieee754_pow+0x710>)
 801a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5bc:	f7ee f83e 	bl	800863c <__adddf3>
 801a5c0:	4622      	mov	r2, r4
 801a5c2:	4606      	mov	r6, r0
 801a5c4:	460f      	mov	r7, r1
 801a5c6:	462b      	mov	r3, r5
 801a5c8:	4620      	mov	r0, r4
 801a5ca:	4629      	mov	r1, r5
 801a5cc:	f7ee f9ec 	bl	80089a8 <__aeabi_dmul>
 801a5d0:	4602      	mov	r2, r0
 801a5d2:	460b      	mov	r3, r1
 801a5d4:	4630      	mov	r0, r6
 801a5d6:	4639      	mov	r1, r7
 801a5d8:	f7ee f9e6 	bl	80089a8 <__aeabi_dmul>
 801a5dc:	4642      	mov	r2, r8
 801a5de:	4604      	mov	r4, r0
 801a5e0:	460d      	mov	r5, r1
 801a5e2:	464b      	mov	r3, r9
 801a5e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a5e8:	f7ee f828 	bl	800863c <__adddf3>
 801a5ec:	4652      	mov	r2, sl
 801a5ee:	465b      	mov	r3, fp
 801a5f0:	f7ee f9da 	bl	80089a8 <__aeabi_dmul>
 801a5f4:	4622      	mov	r2, r4
 801a5f6:	462b      	mov	r3, r5
 801a5f8:	f7ee f820 	bl	800863c <__adddf3>
 801a5fc:	4642      	mov	r2, r8
 801a5fe:	4606      	mov	r6, r0
 801a600:	460f      	mov	r7, r1
 801a602:	464b      	mov	r3, r9
 801a604:	4640      	mov	r0, r8
 801a606:	4649      	mov	r1, r9
 801a608:	f7ee f9ce 	bl	80089a8 <__aeabi_dmul>
 801a60c:	4602      	mov	r2, r0
 801a60e:	460b      	mov	r3, r1
 801a610:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a614:	4b66      	ldr	r3, [pc, #408]	; (801a7b0 <__ieee754_pow+0x748>)
 801a616:	2200      	movs	r2, #0
 801a618:	f7ee f810 	bl	800863c <__adddf3>
 801a61c:	4632      	mov	r2, r6
 801a61e:	463b      	mov	r3, r7
 801a620:	f7ee f80c 	bl	800863c <__adddf3>
 801a624:	2400      	movs	r4, #0
 801a626:	460d      	mov	r5, r1
 801a628:	4622      	mov	r2, r4
 801a62a:	460b      	mov	r3, r1
 801a62c:	4640      	mov	r0, r8
 801a62e:	4649      	mov	r1, r9
 801a630:	f7ee f9ba 	bl	80089a8 <__aeabi_dmul>
 801a634:	4b5e      	ldr	r3, [pc, #376]	; (801a7b0 <__ieee754_pow+0x748>)
 801a636:	4680      	mov	r8, r0
 801a638:	4689      	mov	r9, r1
 801a63a:	2200      	movs	r2, #0
 801a63c:	4620      	mov	r0, r4
 801a63e:	4629      	mov	r1, r5
 801a640:	f7ed fffa 	bl	8008638 <__aeabi_dsub>
 801a644:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a648:	f7ed fff6 	bl	8008638 <__aeabi_dsub>
 801a64c:	4602      	mov	r2, r0
 801a64e:	460b      	mov	r3, r1
 801a650:	4630      	mov	r0, r6
 801a652:	4639      	mov	r1, r7
 801a654:	f7ed fff0 	bl	8008638 <__aeabi_dsub>
 801a658:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a65c:	f7ee f9a4 	bl	80089a8 <__aeabi_dmul>
 801a660:	4622      	mov	r2, r4
 801a662:	4606      	mov	r6, r0
 801a664:	460f      	mov	r7, r1
 801a666:	462b      	mov	r3, r5
 801a668:	4650      	mov	r0, sl
 801a66a:	4659      	mov	r1, fp
 801a66c:	f7ee f99c 	bl	80089a8 <__aeabi_dmul>
 801a670:	4602      	mov	r2, r0
 801a672:	460b      	mov	r3, r1
 801a674:	4630      	mov	r0, r6
 801a676:	4639      	mov	r1, r7
 801a678:	f7ed ffe0 	bl	800863c <__adddf3>
 801a67c:	4606      	mov	r6, r0
 801a67e:	460f      	mov	r7, r1
 801a680:	4602      	mov	r2, r0
 801a682:	460b      	mov	r3, r1
 801a684:	4640      	mov	r0, r8
 801a686:	4649      	mov	r1, r9
 801a688:	f7ed ffd8 	bl	800863c <__adddf3>
 801a68c:	2400      	movs	r4, #0
 801a68e:	a33c      	add	r3, pc, #240	; (adr r3, 801a780 <__ieee754_pow+0x718>)
 801a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a694:	4620      	mov	r0, r4
 801a696:	460d      	mov	r5, r1
 801a698:	f7ee f986 	bl	80089a8 <__aeabi_dmul>
 801a69c:	4642      	mov	r2, r8
 801a69e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a6a2:	464b      	mov	r3, r9
 801a6a4:	4620      	mov	r0, r4
 801a6a6:	4629      	mov	r1, r5
 801a6a8:	f7ed ffc6 	bl	8008638 <__aeabi_dsub>
 801a6ac:	4602      	mov	r2, r0
 801a6ae:	460b      	mov	r3, r1
 801a6b0:	4630      	mov	r0, r6
 801a6b2:	4639      	mov	r1, r7
 801a6b4:	f7ed ffc0 	bl	8008638 <__aeabi_dsub>
 801a6b8:	a333      	add	r3, pc, #204	; (adr r3, 801a788 <__ieee754_pow+0x720>)
 801a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6be:	f7ee f973 	bl	80089a8 <__aeabi_dmul>
 801a6c2:	a333      	add	r3, pc, #204	; (adr r3, 801a790 <__ieee754_pow+0x728>)
 801a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6c8:	4606      	mov	r6, r0
 801a6ca:	460f      	mov	r7, r1
 801a6cc:	4620      	mov	r0, r4
 801a6ce:	4629      	mov	r1, r5
 801a6d0:	f7ee f96a 	bl	80089a8 <__aeabi_dmul>
 801a6d4:	4602      	mov	r2, r0
 801a6d6:	460b      	mov	r3, r1
 801a6d8:	4630      	mov	r0, r6
 801a6da:	4639      	mov	r1, r7
 801a6dc:	f7ed ffae 	bl	800863c <__adddf3>
 801a6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a6e2:	4b34      	ldr	r3, [pc, #208]	; (801a7b4 <__ieee754_pow+0x74c>)
 801a6e4:	4413      	add	r3, r2
 801a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6ea:	f7ed ffa7 	bl	800863c <__adddf3>
 801a6ee:	4680      	mov	r8, r0
 801a6f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a6f2:	4689      	mov	r9, r1
 801a6f4:	f7ee f8ee 	bl	80088d4 <__aeabi_i2d>
 801a6f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a6fa:	4b2f      	ldr	r3, [pc, #188]	; (801a7b8 <__ieee754_pow+0x750>)
 801a6fc:	4413      	add	r3, r2
 801a6fe:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a702:	4604      	mov	r4, r0
 801a704:	460d      	mov	r5, r1
 801a706:	4642      	mov	r2, r8
 801a708:	464b      	mov	r3, r9
 801a70a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a70e:	f7ed ff95 	bl	800863c <__adddf3>
 801a712:	4632      	mov	r2, r6
 801a714:	463b      	mov	r3, r7
 801a716:	f7ed ff91 	bl	800863c <__adddf3>
 801a71a:	4622      	mov	r2, r4
 801a71c:	462b      	mov	r3, r5
 801a71e:	f7ed ff8d 	bl	800863c <__adddf3>
 801a722:	2000      	movs	r0, #0
 801a724:	4622      	mov	r2, r4
 801a726:	462b      	mov	r3, r5
 801a728:	4682      	mov	sl, r0
 801a72a:	468b      	mov	fp, r1
 801a72c:	f7ed ff84 	bl	8008638 <__aeabi_dsub>
 801a730:	4632      	mov	r2, r6
 801a732:	463b      	mov	r3, r7
 801a734:	f7ed ff80 	bl	8008638 <__aeabi_dsub>
 801a738:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a73c:	f7ed ff7c 	bl	8008638 <__aeabi_dsub>
 801a740:	4602      	mov	r2, r0
 801a742:	460b      	mov	r3, r1
 801a744:	4640      	mov	r0, r8
 801a746:	4649      	mov	r1, r9
 801a748:	e60f      	b.n	801a36a <__ieee754_pow+0x302>
 801a74a:	2601      	movs	r6, #1
 801a74c:	e69f      	b.n	801a48e <__ieee754_pow+0x426>
 801a74e:	bf00      	nop
 801a750:	4a454eef 	.word	0x4a454eef
 801a754:	3fca7e28 	.word	0x3fca7e28
 801a758:	93c9db65 	.word	0x93c9db65
 801a75c:	3fcd864a 	.word	0x3fcd864a
 801a760:	a91d4101 	.word	0xa91d4101
 801a764:	3fd17460 	.word	0x3fd17460
 801a768:	518f264d 	.word	0x518f264d
 801a76c:	3fd55555 	.word	0x3fd55555
 801a770:	db6fabff 	.word	0xdb6fabff
 801a774:	3fdb6db6 	.word	0x3fdb6db6
 801a778:	33333303 	.word	0x33333303
 801a77c:	3fe33333 	.word	0x3fe33333
 801a780:	e0000000 	.word	0xe0000000
 801a784:	3feec709 	.word	0x3feec709
 801a788:	dc3a03fd 	.word	0xdc3a03fd
 801a78c:	3feec709 	.word	0x3feec709
 801a790:	145b01f5 	.word	0x145b01f5
 801a794:	be3e2fe0 	.word	0xbe3e2fe0
 801a798:	7ff00000 	.word	0x7ff00000
 801a79c:	43400000 	.word	0x43400000
 801a7a0:	0003988e 	.word	0x0003988e
 801a7a4:	000bb679 	.word	0x000bb679
 801a7a8:	0801ba00 	.word	0x0801ba00
 801a7ac:	3ff00000 	.word	0x3ff00000
 801a7b0:	40080000 	.word	0x40080000
 801a7b4:	0801ba20 	.word	0x0801ba20
 801a7b8:	0801ba10 	.word	0x0801ba10
 801a7bc:	a39c      	add	r3, pc, #624	; (adr r3, 801aa30 <__ieee754_pow+0x9c8>)
 801a7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7c2:	4640      	mov	r0, r8
 801a7c4:	4649      	mov	r1, r9
 801a7c6:	f7ed ff39 	bl	800863c <__adddf3>
 801a7ca:	4622      	mov	r2, r4
 801a7cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a7d0:	462b      	mov	r3, r5
 801a7d2:	4650      	mov	r0, sl
 801a7d4:	4639      	mov	r1, r7
 801a7d6:	f7ed ff2f 	bl	8008638 <__aeabi_dsub>
 801a7da:	4602      	mov	r2, r0
 801a7dc:	460b      	mov	r3, r1
 801a7de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a7e2:	f7ee fb71 	bl	8008ec8 <__aeabi_dcmpgt>
 801a7e6:	2800      	cmp	r0, #0
 801a7e8:	f47f ae08 	bne.w	801a3fc <__ieee754_pow+0x394>
 801a7ec:	4aa2      	ldr	r2, [pc, #648]	; (801aa78 <__ieee754_pow+0xa10>)
 801a7ee:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 801a7f2:	4293      	cmp	r3, r2
 801a7f4:	f340 80ff 	ble.w	801a9f6 <__ieee754_pow+0x98e>
 801a7f8:	151b      	asrs	r3, r3, #20
 801a7fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801a7fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801a802:	fa4a fa03 	asr.w	sl, sl, r3
 801a806:	44b2      	add	sl, r6
 801a808:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801a80c:	489b      	ldr	r0, [pc, #620]	; (801aa7c <__ieee754_pow+0xa14>)
 801a80e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a812:	4108      	asrs	r0, r1
 801a814:	ea00 030a 	and.w	r3, r0, sl
 801a818:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a81c:	f1c1 0114 	rsb	r1, r1, #20
 801a820:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801a824:	fa4a fa01 	asr.w	sl, sl, r1
 801a828:	2e00      	cmp	r6, #0
 801a82a:	f04f 0200 	mov.w	r2, #0
 801a82e:	4620      	mov	r0, r4
 801a830:	4629      	mov	r1, r5
 801a832:	bfb8      	it	lt
 801a834:	f1ca 0a00 	rsblt	sl, sl, #0
 801a838:	f7ed fefe 	bl	8008638 <__aeabi_dsub>
 801a83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a840:	4642      	mov	r2, r8
 801a842:	464b      	mov	r3, r9
 801a844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a848:	f7ed fef8 	bl	800863c <__adddf3>
 801a84c:	2400      	movs	r4, #0
 801a84e:	a37a      	add	r3, pc, #488	; (adr r3, 801aa38 <__ieee754_pow+0x9d0>)
 801a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a854:	4620      	mov	r0, r4
 801a856:	460d      	mov	r5, r1
 801a858:	f7ee f8a6 	bl	80089a8 <__aeabi_dmul>
 801a85c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a860:	4606      	mov	r6, r0
 801a862:	460f      	mov	r7, r1
 801a864:	4620      	mov	r0, r4
 801a866:	4629      	mov	r1, r5
 801a868:	f7ed fee6 	bl	8008638 <__aeabi_dsub>
 801a86c:	4602      	mov	r2, r0
 801a86e:	460b      	mov	r3, r1
 801a870:	4640      	mov	r0, r8
 801a872:	4649      	mov	r1, r9
 801a874:	f7ed fee0 	bl	8008638 <__aeabi_dsub>
 801a878:	a371      	add	r3, pc, #452	; (adr r3, 801aa40 <__ieee754_pow+0x9d8>)
 801a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a87e:	f7ee f893 	bl	80089a8 <__aeabi_dmul>
 801a882:	a371      	add	r3, pc, #452	; (adr r3, 801aa48 <__ieee754_pow+0x9e0>)
 801a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a888:	4680      	mov	r8, r0
 801a88a:	4689      	mov	r9, r1
 801a88c:	4620      	mov	r0, r4
 801a88e:	4629      	mov	r1, r5
 801a890:	f7ee f88a 	bl	80089a8 <__aeabi_dmul>
 801a894:	4602      	mov	r2, r0
 801a896:	460b      	mov	r3, r1
 801a898:	4640      	mov	r0, r8
 801a89a:	4649      	mov	r1, r9
 801a89c:	f7ed fece 	bl	800863c <__adddf3>
 801a8a0:	4604      	mov	r4, r0
 801a8a2:	460d      	mov	r5, r1
 801a8a4:	4602      	mov	r2, r0
 801a8a6:	460b      	mov	r3, r1
 801a8a8:	4630      	mov	r0, r6
 801a8aa:	4639      	mov	r1, r7
 801a8ac:	f7ed fec6 	bl	800863c <__adddf3>
 801a8b0:	4632      	mov	r2, r6
 801a8b2:	463b      	mov	r3, r7
 801a8b4:	4680      	mov	r8, r0
 801a8b6:	4689      	mov	r9, r1
 801a8b8:	f7ed febe 	bl	8008638 <__aeabi_dsub>
 801a8bc:	4602      	mov	r2, r0
 801a8be:	460b      	mov	r3, r1
 801a8c0:	4620      	mov	r0, r4
 801a8c2:	4629      	mov	r1, r5
 801a8c4:	f7ed feb8 	bl	8008638 <__aeabi_dsub>
 801a8c8:	4642      	mov	r2, r8
 801a8ca:	4606      	mov	r6, r0
 801a8cc:	460f      	mov	r7, r1
 801a8ce:	464b      	mov	r3, r9
 801a8d0:	4640      	mov	r0, r8
 801a8d2:	4649      	mov	r1, r9
 801a8d4:	f7ee f868 	bl	80089a8 <__aeabi_dmul>
 801a8d8:	a35d      	add	r3, pc, #372	; (adr r3, 801aa50 <__ieee754_pow+0x9e8>)
 801a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8de:	4604      	mov	r4, r0
 801a8e0:	460d      	mov	r5, r1
 801a8e2:	f7ee f861 	bl	80089a8 <__aeabi_dmul>
 801a8e6:	a35c      	add	r3, pc, #368	; (adr r3, 801aa58 <__ieee754_pow+0x9f0>)
 801a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ec:	f7ed fea4 	bl	8008638 <__aeabi_dsub>
 801a8f0:	4622      	mov	r2, r4
 801a8f2:	462b      	mov	r3, r5
 801a8f4:	f7ee f858 	bl	80089a8 <__aeabi_dmul>
 801a8f8:	a359      	add	r3, pc, #356	; (adr r3, 801aa60 <__ieee754_pow+0x9f8>)
 801a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8fe:	f7ed fe9d 	bl	800863c <__adddf3>
 801a902:	4622      	mov	r2, r4
 801a904:	462b      	mov	r3, r5
 801a906:	f7ee f84f 	bl	80089a8 <__aeabi_dmul>
 801a90a:	a357      	add	r3, pc, #348	; (adr r3, 801aa68 <__ieee754_pow+0xa00>)
 801a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a910:	f7ed fe92 	bl	8008638 <__aeabi_dsub>
 801a914:	4622      	mov	r2, r4
 801a916:	462b      	mov	r3, r5
 801a918:	f7ee f846 	bl	80089a8 <__aeabi_dmul>
 801a91c:	a354      	add	r3, pc, #336	; (adr r3, 801aa70 <__ieee754_pow+0xa08>)
 801a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a922:	f7ed fe8b 	bl	800863c <__adddf3>
 801a926:	4622      	mov	r2, r4
 801a928:	462b      	mov	r3, r5
 801a92a:	f7ee f83d 	bl	80089a8 <__aeabi_dmul>
 801a92e:	4602      	mov	r2, r0
 801a930:	460b      	mov	r3, r1
 801a932:	4640      	mov	r0, r8
 801a934:	4649      	mov	r1, r9
 801a936:	f7ed fe7f 	bl	8008638 <__aeabi_dsub>
 801a93a:	4604      	mov	r4, r0
 801a93c:	460d      	mov	r5, r1
 801a93e:	4602      	mov	r2, r0
 801a940:	460b      	mov	r3, r1
 801a942:	4640      	mov	r0, r8
 801a944:	4649      	mov	r1, r9
 801a946:	f7ee f82f 	bl	80089a8 <__aeabi_dmul>
 801a94a:	2200      	movs	r2, #0
 801a94c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a954:	4620      	mov	r0, r4
 801a956:	4629      	mov	r1, r5
 801a958:	f7ed fe6e 	bl	8008638 <__aeabi_dsub>
 801a95c:	4602      	mov	r2, r0
 801a95e:	460b      	mov	r3, r1
 801a960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a964:	f7ee f94a 	bl	8008bfc <__aeabi_ddiv>
 801a968:	4632      	mov	r2, r6
 801a96a:	4604      	mov	r4, r0
 801a96c:	460d      	mov	r5, r1
 801a96e:	463b      	mov	r3, r7
 801a970:	4640      	mov	r0, r8
 801a972:	4649      	mov	r1, r9
 801a974:	f7ee f818 	bl	80089a8 <__aeabi_dmul>
 801a978:	4632      	mov	r2, r6
 801a97a:	463b      	mov	r3, r7
 801a97c:	f7ed fe5e 	bl	800863c <__adddf3>
 801a980:	4602      	mov	r2, r0
 801a982:	460b      	mov	r3, r1
 801a984:	4620      	mov	r0, r4
 801a986:	4629      	mov	r1, r5
 801a988:	f7ed fe56 	bl	8008638 <__aeabi_dsub>
 801a98c:	4642      	mov	r2, r8
 801a98e:	464b      	mov	r3, r9
 801a990:	f7ed fe52 	bl	8008638 <__aeabi_dsub>
 801a994:	4602      	mov	r2, r0
 801a996:	460b      	mov	r3, r1
 801a998:	2000      	movs	r0, #0
 801a99a:	4939      	ldr	r1, [pc, #228]	; (801aa80 <__ieee754_pow+0xa18>)
 801a99c:	f7ed fe4c 	bl	8008638 <__aeabi_dsub>
 801a9a0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801a9a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801a9a8:	da28      	bge.n	801a9fc <__ieee754_pow+0x994>
 801a9aa:	4652      	mov	r2, sl
 801a9ac:	f000 f874 	bl	801aa98 <scalbn>
 801a9b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a9b4:	e401      	b.n	801a1ba <__ieee754_pow+0x152>
 801a9b6:	4b33      	ldr	r3, [pc, #204]	; (801aa84 <__ieee754_pow+0xa1c>)
 801a9b8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801a9bc:	429f      	cmp	r7, r3
 801a9be:	f77f af15 	ble.w	801a7ec <__ieee754_pow+0x784>
 801a9c2:	4b31      	ldr	r3, [pc, #196]	; (801aa88 <__ieee754_pow+0xa20>)
 801a9c4:	440b      	add	r3, r1
 801a9c6:	4303      	orrs	r3, r0
 801a9c8:	d009      	beq.n	801a9de <__ieee754_pow+0x976>
 801a9ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a9ce:	2200      	movs	r2, #0
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	f7ee fa5b 	bl	8008e8c <__aeabi_dcmplt>
 801a9d6:	3800      	subs	r0, #0
 801a9d8:	bf18      	it	ne
 801a9da:	2001      	movne	r0, #1
 801a9dc:	e457      	b.n	801a28e <__ieee754_pow+0x226>
 801a9de:	4622      	mov	r2, r4
 801a9e0:	462b      	mov	r3, r5
 801a9e2:	f7ed fe29 	bl	8008638 <__aeabi_dsub>
 801a9e6:	4642      	mov	r2, r8
 801a9e8:	464b      	mov	r3, r9
 801a9ea:	f7ee fa63 	bl	8008eb4 <__aeabi_dcmpge>
 801a9ee:	2800      	cmp	r0, #0
 801a9f0:	f43f aefc 	beq.w	801a7ec <__ieee754_pow+0x784>
 801a9f4:	e7e9      	b.n	801a9ca <__ieee754_pow+0x962>
 801a9f6:	f04f 0a00 	mov.w	sl, #0
 801a9fa:	e721      	b.n	801a840 <__ieee754_pow+0x7d8>
 801a9fc:	4621      	mov	r1, r4
 801a9fe:	e7d7      	b.n	801a9b0 <__ieee754_pow+0x948>
 801aa00:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801aa80 <__ieee754_pow+0xa18>
 801aa04:	f04f 0b00 	mov.w	fp, #0
 801aa08:	f7ff bbbe 	b.w	801a188 <__ieee754_pow+0x120>
 801aa0c:	f04f 0b00 	mov.w	fp, #0
 801aa10:	f04f 0c00 	mov.w	ip, #0
 801aa14:	f7ff bbb8 	b.w	801a188 <__ieee754_pow+0x120>
 801aa18:	4640      	mov	r0, r8
 801aa1a:	4649      	mov	r1, r9
 801aa1c:	f7ff bb41 	b.w	801a0a2 <__ieee754_pow+0x3a>
 801aa20:	9200      	str	r2, [sp, #0]
 801aa22:	f7ff bb8d 	b.w	801a140 <__ieee754_pow+0xd8>
 801aa26:	2300      	movs	r3, #0
 801aa28:	f7ff bb77 	b.w	801a11a <__ieee754_pow+0xb2>
 801aa2c:	f3af 8000 	nop.w
 801aa30:	652b82fe 	.word	0x652b82fe
 801aa34:	3c971547 	.word	0x3c971547
 801aa38:	00000000 	.word	0x00000000
 801aa3c:	3fe62e43 	.word	0x3fe62e43
 801aa40:	fefa39ef 	.word	0xfefa39ef
 801aa44:	3fe62e42 	.word	0x3fe62e42
 801aa48:	0ca86c39 	.word	0x0ca86c39
 801aa4c:	be205c61 	.word	0xbe205c61
 801aa50:	72bea4d0 	.word	0x72bea4d0
 801aa54:	3e663769 	.word	0x3e663769
 801aa58:	c5d26bf1 	.word	0xc5d26bf1
 801aa5c:	3ebbbd41 	.word	0x3ebbbd41
 801aa60:	af25de2c 	.word	0xaf25de2c
 801aa64:	3f11566a 	.word	0x3f11566a
 801aa68:	16bebd93 	.word	0x16bebd93
 801aa6c:	3f66c16c 	.word	0x3f66c16c
 801aa70:	5555553e 	.word	0x5555553e
 801aa74:	3fc55555 	.word	0x3fc55555
 801aa78:	3fe00000 	.word	0x3fe00000
 801aa7c:	fff00000 	.word	0xfff00000
 801aa80:	3ff00000 	.word	0x3ff00000
 801aa84:	4090cbff 	.word	0x4090cbff
 801aa88:	3f6f3400 	.word	0x3f6f3400

0801aa8c <fabs>:
 801aa8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aa90:	4619      	mov	r1, r3
 801aa92:	4770      	bx	lr
 801aa94:	0000      	movs	r0, r0
	...

0801aa98 <scalbn>:
 801aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa9a:	4616      	mov	r6, r2
 801aa9c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801aaa0:	4604      	mov	r4, r0
 801aaa2:	460d      	mov	r5, r1
 801aaa4:	460b      	mov	r3, r1
 801aaa6:	b992      	cbnz	r2, 801aace <scalbn+0x36>
 801aaa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aaac:	4303      	orrs	r3, r0
 801aaae:	d03c      	beq.n	801ab2a <scalbn+0x92>
 801aab0:	4b31      	ldr	r3, [pc, #196]	; (801ab78 <scalbn+0xe0>)
 801aab2:	2200      	movs	r2, #0
 801aab4:	f7ed ff78 	bl	80089a8 <__aeabi_dmul>
 801aab8:	4b30      	ldr	r3, [pc, #192]	; (801ab7c <scalbn+0xe4>)
 801aaba:	429e      	cmp	r6, r3
 801aabc:	4604      	mov	r4, r0
 801aabe:	460d      	mov	r5, r1
 801aac0:	da0f      	bge.n	801aae2 <scalbn+0x4a>
 801aac2:	a329      	add	r3, pc, #164	; (adr r3, 801ab68 <scalbn+0xd0>)
 801aac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aac8:	f7ed ff6e 	bl	80089a8 <__aeabi_dmul>
 801aacc:	e006      	b.n	801aadc <scalbn+0x44>
 801aace:	f240 77ff 	movw	r7, #2047	; 0x7ff
 801aad2:	42ba      	cmp	r2, r7
 801aad4:	d109      	bne.n	801aaea <scalbn+0x52>
 801aad6:	4602      	mov	r2, r0
 801aad8:	f7ed fdb0 	bl	800863c <__adddf3>
 801aadc:	4604      	mov	r4, r0
 801aade:	460d      	mov	r5, r1
 801aae0:	e023      	b.n	801ab2a <scalbn+0x92>
 801aae2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801aae6:	460b      	mov	r3, r1
 801aae8:	3a36      	subs	r2, #54	; 0x36
 801aaea:	f24c 3150 	movw	r1, #50000	; 0xc350
 801aaee:	428e      	cmp	r6, r1
 801aaf0:	dd0e      	ble.n	801ab10 <scalbn+0x78>
 801aaf2:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 801aaf6:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 801aafa:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 801aafe:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 801ab02:	a31b      	add	r3, pc, #108	; (adr r3, 801ab70 <scalbn+0xd8>)
 801ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab08:	481d      	ldr	r0, [pc, #116]	; (801ab80 <scalbn+0xe8>)
 801ab0a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 801ab0e:	e7db      	b.n	801aac8 <scalbn+0x30>
 801ab10:	4432      	add	r2, r6
 801ab12:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ab16:	428a      	cmp	r2, r1
 801ab18:	dceb      	bgt.n	801aaf2 <scalbn+0x5a>
 801ab1a:	2a00      	cmp	r2, #0
 801ab1c:	dd08      	ble.n	801ab30 <scalbn+0x98>
 801ab1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ab26:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ab2a:	4620      	mov	r0, r4
 801ab2c:	4629      	mov	r1, r5
 801ab2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab30:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ab34:	da0c      	bge.n	801ab50 <scalbn+0xb8>
 801ab36:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 801ab3a:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 801ab3e:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 801ab42:	a309      	add	r3, pc, #36	; (adr r3, 801ab68 <scalbn+0xd0>)
 801ab44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab48:	480e      	ldr	r0, [pc, #56]	; (801ab84 <scalbn+0xec>)
 801ab4a:	f041 011f 	orr.w	r1, r1, #31
 801ab4e:	e7bb      	b.n	801aac8 <scalbn+0x30>
 801ab50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab54:	3236      	adds	r2, #54	; 0x36
 801ab56:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ab5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ab5e:	4620      	mov	r0, r4
 801ab60:	4b09      	ldr	r3, [pc, #36]	; (801ab88 <scalbn+0xf0>)
 801ab62:	4629      	mov	r1, r5
 801ab64:	2200      	movs	r2, #0
 801ab66:	e7af      	b.n	801aac8 <scalbn+0x30>
 801ab68:	c2f8f359 	.word	0xc2f8f359
 801ab6c:	01a56e1f 	.word	0x01a56e1f
 801ab70:	8800759c 	.word	0x8800759c
 801ab74:	7e37e43c 	.word	0x7e37e43c
 801ab78:	43500000 	.word	0x43500000
 801ab7c:	ffff3cb0 	.word	0xffff3cb0
 801ab80:	8800759c 	.word	0x8800759c
 801ab84:	c2f8f359 	.word	0xc2f8f359
 801ab88:	3c900000 	.word	0x3c900000

0801ab8c <with_errno>:
 801ab8c:	b570      	push	{r4, r5, r6, lr}
 801ab8e:	4604      	mov	r4, r0
 801ab90:	460d      	mov	r5, r1
 801ab92:	4616      	mov	r6, r2
 801ab94:	f7f9 fd9c 	bl	80146d0 <__errno>
 801ab98:	4629      	mov	r1, r5
 801ab9a:	6006      	str	r6, [r0, #0]
 801ab9c:	4620      	mov	r0, r4
 801ab9e:	bd70      	pop	{r4, r5, r6, pc}

0801aba0 <xflow>:
 801aba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aba2:	4615      	mov	r5, r2
 801aba4:	461c      	mov	r4, r3
 801aba6:	b180      	cbz	r0, 801abca <xflow+0x2a>
 801aba8:	4610      	mov	r0, r2
 801abaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801abae:	e9cd 0100 	strd	r0, r1, [sp]
 801abb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801abb6:	4628      	mov	r0, r5
 801abb8:	4621      	mov	r1, r4
 801abba:	f7ed fef5 	bl	80089a8 <__aeabi_dmul>
 801abbe:	2222      	movs	r2, #34	; 0x22
 801abc0:	b003      	add	sp, #12
 801abc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801abc6:	f7ff bfe1 	b.w	801ab8c <with_errno>
 801abca:	4610      	mov	r0, r2
 801abcc:	4619      	mov	r1, r3
 801abce:	e7ee      	b.n	801abae <xflow+0xe>

0801abd0 <__math_uflow>:
 801abd0:	2200      	movs	r2, #0
 801abd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801abd6:	f7ff bfe3 	b.w	801aba0 <xflow>

0801abda <__math_oflow>:
 801abda:	2200      	movs	r2, #0
 801abdc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801abe0:	f7ff bfde 	b.w	801aba0 <xflow>

0801abe4 <__ieee754_sqrt>:
 801abe4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 801ad88 <__ieee754_sqrt+0x1a4>
 801abe8:	ea3c 0c01 	bics.w	ip, ip, r1
 801abec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abf0:	460a      	mov	r2, r1
 801abf2:	460b      	mov	r3, r1
 801abf4:	4606      	mov	r6, r0
 801abf6:	460d      	mov	r5, r1
 801abf8:	4604      	mov	r4, r0
 801abfa:	d10e      	bne.n	801ac1a <__ieee754_sqrt+0x36>
 801abfc:	4602      	mov	r2, r0
 801abfe:	f7ed fed3 	bl	80089a8 <__aeabi_dmul>
 801ac02:	4602      	mov	r2, r0
 801ac04:	460b      	mov	r3, r1
 801ac06:	4630      	mov	r0, r6
 801ac08:	4629      	mov	r1, r5
 801ac0a:	f7ed fd17 	bl	800863c <__adddf3>
 801ac0e:	4606      	mov	r6, r0
 801ac10:	460d      	mov	r5, r1
 801ac12:	4630      	mov	r0, r6
 801ac14:	4629      	mov	r1, r5
 801ac16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac1a:	2900      	cmp	r1, #0
 801ac1c:	dc0d      	bgt.n	801ac3a <__ieee754_sqrt+0x56>
 801ac1e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801ac22:	ea5c 0c00 	orrs.w	ip, ip, r0
 801ac26:	d0f4      	beq.n	801ac12 <__ieee754_sqrt+0x2e>
 801ac28:	b139      	cbz	r1, 801ac3a <__ieee754_sqrt+0x56>
 801ac2a:	4602      	mov	r2, r0
 801ac2c:	f7ed fd04 	bl	8008638 <__aeabi_dsub>
 801ac30:	4602      	mov	r2, r0
 801ac32:	460b      	mov	r3, r1
 801ac34:	f7ed ffe2 	bl	8008bfc <__aeabi_ddiv>
 801ac38:	e7e9      	b.n	801ac0e <__ieee754_sqrt+0x2a>
 801ac3a:	1512      	asrs	r2, r2, #20
 801ac3c:	f000 8089 	beq.w	801ad52 <__ieee754_sqrt+0x16e>
 801ac40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ac44:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801ac48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ac4c:	07d2      	lsls	r2, r2, #31
 801ac4e:	bf5c      	itt	pl
 801ac50:	005b      	lslpl	r3, r3, #1
 801ac52:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 801ac56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ac5a:	bf58      	it	pl
 801ac5c:	0064      	lslpl	r4, r4, #1
 801ac5e:	2500      	movs	r5, #0
 801ac60:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801ac64:	0062      	lsls	r2, r4, #1
 801ac66:	1076      	asrs	r6, r6, #1
 801ac68:	2016      	movs	r0, #22
 801ac6a:	4629      	mov	r1, r5
 801ac6c:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 801ac70:	190f      	adds	r7, r1, r4
 801ac72:	429f      	cmp	r7, r3
 801ac74:	bfde      	ittt	le
 801ac76:	1bdb      	suble	r3, r3, r7
 801ac78:	1939      	addle	r1, r7, r4
 801ac7a:	192d      	addle	r5, r5, r4
 801ac7c:	005b      	lsls	r3, r3, #1
 801ac7e:	3801      	subs	r0, #1
 801ac80:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801ac84:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801ac88:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801ac8c:	d1f0      	bne.n	801ac70 <__ieee754_sqrt+0x8c>
 801ac8e:	4604      	mov	r4, r0
 801ac90:	2720      	movs	r7, #32
 801ac92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801ac96:	428b      	cmp	r3, r1
 801ac98:	eb0c 0e00 	add.w	lr, ip, r0
 801ac9c:	dc02      	bgt.n	801aca4 <__ieee754_sqrt+0xc0>
 801ac9e:	d113      	bne.n	801acc8 <__ieee754_sqrt+0xe4>
 801aca0:	4596      	cmp	lr, r2
 801aca2:	d811      	bhi.n	801acc8 <__ieee754_sqrt+0xe4>
 801aca4:	f1be 0f00 	cmp.w	lr, #0
 801aca8:	eb0e 000c 	add.w	r0, lr, ip
 801acac:	da56      	bge.n	801ad5c <__ieee754_sqrt+0x178>
 801acae:	2800      	cmp	r0, #0
 801acb0:	db54      	blt.n	801ad5c <__ieee754_sqrt+0x178>
 801acb2:	f101 0801 	add.w	r8, r1, #1
 801acb6:	1a5b      	subs	r3, r3, r1
 801acb8:	4596      	cmp	lr, r2
 801acba:	bf88      	it	hi
 801acbc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801acc0:	eba2 020e 	sub.w	r2, r2, lr
 801acc4:	4464      	add	r4, ip
 801acc6:	4641      	mov	r1, r8
 801acc8:	005b      	lsls	r3, r3, #1
 801acca:	3f01      	subs	r7, #1
 801accc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801acd0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801acd4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801acd8:	d1dd      	bne.n	801ac96 <__ieee754_sqrt+0xb2>
 801acda:	4313      	orrs	r3, r2
 801acdc:	d01b      	beq.n	801ad16 <__ieee754_sqrt+0x132>
 801acde:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801ad8c <__ieee754_sqrt+0x1a8>
 801ace2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801ad90 <__ieee754_sqrt+0x1ac>
 801ace6:	e9da 0100 	ldrd	r0, r1, [sl]
 801acea:	e9db 2300 	ldrd	r2, r3, [fp]
 801acee:	f7ed fca3 	bl	8008638 <__aeabi_dsub>
 801acf2:	e9da 8900 	ldrd	r8, r9, [sl]
 801acf6:	4602      	mov	r2, r0
 801acf8:	460b      	mov	r3, r1
 801acfa:	4640      	mov	r0, r8
 801acfc:	4649      	mov	r1, r9
 801acfe:	f7ee f8cf 	bl	8008ea0 <__aeabi_dcmple>
 801ad02:	b140      	cbz	r0, 801ad16 <__ieee754_sqrt+0x132>
 801ad04:	f1b4 3fff 	cmp.w	r4, #4294967295
 801ad08:	e9da 0100 	ldrd	r0, r1, [sl]
 801ad0c:	e9db 2300 	ldrd	r2, r3, [fp]
 801ad10:	d126      	bne.n	801ad60 <__ieee754_sqrt+0x17c>
 801ad12:	3501      	adds	r5, #1
 801ad14:	463c      	mov	r4, r7
 801ad16:	106b      	asrs	r3, r5, #1
 801ad18:	0864      	lsrs	r4, r4, #1
 801ad1a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ad1e:	07ea      	lsls	r2, r5, #31
 801ad20:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ad24:	bf48      	it	mi
 801ad26:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 801ad2a:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 801ad2e:	4620      	mov	r0, r4
 801ad30:	e76d      	b.n	801ac0e <__ieee754_sqrt+0x2a>
 801ad32:	0ae3      	lsrs	r3, r4, #11
 801ad34:	3915      	subs	r1, #21
 801ad36:	0564      	lsls	r4, r4, #21
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d0fa      	beq.n	801ad32 <__ieee754_sqrt+0x14e>
 801ad3c:	02d8      	lsls	r0, r3, #11
 801ad3e:	d50a      	bpl.n	801ad56 <__ieee754_sqrt+0x172>
 801ad40:	f1c2 0020 	rsb	r0, r2, #32
 801ad44:	fa24 f000 	lsr.w	r0, r4, r0
 801ad48:	1e55      	subs	r5, r2, #1
 801ad4a:	4094      	lsls	r4, r2
 801ad4c:	4303      	orrs	r3, r0
 801ad4e:	1b4a      	subs	r2, r1, r5
 801ad50:	e776      	b.n	801ac40 <__ieee754_sqrt+0x5c>
 801ad52:	4611      	mov	r1, r2
 801ad54:	e7f0      	b.n	801ad38 <__ieee754_sqrt+0x154>
 801ad56:	005b      	lsls	r3, r3, #1
 801ad58:	3201      	adds	r2, #1
 801ad5a:	e7ef      	b.n	801ad3c <__ieee754_sqrt+0x158>
 801ad5c:	4688      	mov	r8, r1
 801ad5e:	e7aa      	b.n	801acb6 <__ieee754_sqrt+0xd2>
 801ad60:	f7ed fc6c 	bl	800863c <__adddf3>
 801ad64:	e9da 8900 	ldrd	r8, r9, [sl]
 801ad68:	4602      	mov	r2, r0
 801ad6a:	460b      	mov	r3, r1
 801ad6c:	4640      	mov	r0, r8
 801ad6e:	4649      	mov	r1, r9
 801ad70:	f7ee f88c 	bl	8008e8c <__aeabi_dcmplt>
 801ad74:	b120      	cbz	r0, 801ad80 <__ieee754_sqrt+0x19c>
 801ad76:	1ca1      	adds	r1, r4, #2
 801ad78:	bf08      	it	eq
 801ad7a:	3501      	addeq	r5, #1
 801ad7c:	3402      	adds	r4, #2
 801ad7e:	e7ca      	b.n	801ad16 <__ieee754_sqrt+0x132>
 801ad80:	3401      	adds	r4, #1
 801ad82:	f024 0401 	bic.w	r4, r4, #1
 801ad86:	e7c6      	b.n	801ad16 <__ieee754_sqrt+0x132>
 801ad88:	7ff00000 	.word	0x7ff00000
 801ad8c:	20000748 	.word	0x20000748
 801ad90:	20000750 	.word	0x20000750

0801ad94 <_init>:
 801ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad96:	bf00      	nop
 801ad98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad9a:	bc08      	pop	{r3}
 801ad9c:	469e      	mov	lr, r3
 801ad9e:	4770      	bx	lr

0801ada0 <_fini>:
 801ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ada2:	bf00      	nop
 801ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ada6:	bc08      	pop	{r3}
 801ada8:	469e      	mov	lr, r3
 801adaa:	4770      	bx	lr

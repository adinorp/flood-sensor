
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08008400  08008400  00008400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016bac  08008540  08008540  00008540  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001808  0801f0f0  0801f0f0  0001f0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080208f8  080208f8  00030760  2**0
                  CONTENTS
  4 .ARM          00000008  080208f8  080208f8  000208f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020900  08020900  00030760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020900  08020900  00020900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020908  08020908  00020908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000080  0802090c  00030080  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000511c  20000760  08020fec  00030760  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000587c  08020fec  0003587c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030760  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003078a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003bdf9  00000000  00000000  000307cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a51  00000000  00000000  0006c5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d10  00000000  00000000  00075018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002275  00000000  00000000  00077d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025dfe  00000000  00000000  00079f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000451c4  00000000  00000000  0009fd9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4c4f  00000000  00000000  000e4f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000d2a0  00000000  00000000  001b9bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c5  00000000  00000000  001c6e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008540 <__do_global_dtors_aux>:
 8008540:	b510      	push	{r4, lr}
 8008542:	4c05      	ldr	r4, [pc, #20]	; (8008558 <__do_global_dtors_aux+0x18>)
 8008544:	7823      	ldrb	r3, [r4, #0]
 8008546:	b933      	cbnz	r3, 8008556 <__do_global_dtors_aux+0x16>
 8008548:	4b04      	ldr	r3, [pc, #16]	; (800855c <__do_global_dtors_aux+0x1c>)
 800854a:	b113      	cbz	r3, 8008552 <__do_global_dtors_aux+0x12>
 800854c:	4804      	ldr	r0, [pc, #16]	; (8008560 <__do_global_dtors_aux+0x20>)
 800854e:	f3af 8000 	nop.w
 8008552:	2301      	movs	r3, #1
 8008554:	7023      	strb	r3, [r4, #0]
 8008556:	bd10      	pop	{r4, pc}
 8008558:	20000760 	.word	0x20000760
 800855c:	00000000 	.word	0x00000000
 8008560:	0801f0d4 	.word	0x0801f0d4

08008564 <frame_dummy>:
 8008564:	b508      	push	{r3, lr}
 8008566:	4b03      	ldr	r3, [pc, #12]	; (8008574 <frame_dummy+0x10>)
 8008568:	b11b      	cbz	r3, 8008572 <frame_dummy+0xe>
 800856a:	4903      	ldr	r1, [pc, #12]	; (8008578 <frame_dummy+0x14>)
 800856c:	4803      	ldr	r0, [pc, #12]	; (800857c <frame_dummy+0x18>)
 800856e:	f3af 8000 	nop.w
 8008572:	bd08      	pop	{r3, pc}
 8008574:	00000000 	.word	0x00000000
 8008578:	20000764 	.word	0x20000764
 800857c:	0801f0d4 	.word	0x0801f0d4

08008580 <memchr>:
 8008580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008584:	2a10      	cmp	r2, #16
 8008586:	db2b      	blt.n	80085e0 <memchr+0x60>
 8008588:	f010 0f07 	tst.w	r0, #7
 800858c:	d008      	beq.n	80085a0 <memchr+0x20>
 800858e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008592:	3a01      	subs	r2, #1
 8008594:	428b      	cmp	r3, r1
 8008596:	d02d      	beq.n	80085f4 <memchr+0x74>
 8008598:	f010 0f07 	tst.w	r0, #7
 800859c:	b342      	cbz	r2, 80085f0 <memchr+0x70>
 800859e:	d1f6      	bne.n	800858e <memchr+0xe>
 80085a0:	b4f0      	push	{r4, r5, r6, r7}
 80085a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80085a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80085aa:	f022 0407 	bic.w	r4, r2, #7
 80085ae:	f07f 0700 	mvns.w	r7, #0
 80085b2:	2300      	movs	r3, #0
 80085b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80085b8:	3c08      	subs	r4, #8
 80085ba:	ea85 0501 	eor.w	r5, r5, r1
 80085be:	ea86 0601 	eor.w	r6, r6, r1
 80085c2:	fa85 f547 	uadd8	r5, r5, r7
 80085c6:	faa3 f587 	sel	r5, r3, r7
 80085ca:	fa86 f647 	uadd8	r6, r6, r7
 80085ce:	faa5 f687 	sel	r6, r5, r7
 80085d2:	b98e      	cbnz	r6, 80085f8 <memchr+0x78>
 80085d4:	d1ee      	bne.n	80085b4 <memchr+0x34>
 80085d6:	bcf0      	pop	{r4, r5, r6, r7}
 80085d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80085dc:	f002 0207 	and.w	r2, r2, #7
 80085e0:	b132      	cbz	r2, 80085f0 <memchr+0x70>
 80085e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80085e6:	3a01      	subs	r2, #1
 80085e8:	ea83 0301 	eor.w	r3, r3, r1
 80085ec:	b113      	cbz	r3, 80085f4 <memchr+0x74>
 80085ee:	d1f8      	bne.n	80085e2 <memchr+0x62>
 80085f0:	2000      	movs	r0, #0
 80085f2:	4770      	bx	lr
 80085f4:	3801      	subs	r0, #1
 80085f6:	4770      	bx	lr
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	bf06      	itte	eq
 80085fc:	4635      	moveq	r5, r6
 80085fe:	3803      	subeq	r0, #3
 8008600:	3807      	subne	r0, #7
 8008602:	f015 0f01 	tst.w	r5, #1
 8008606:	d107      	bne.n	8008618 <memchr+0x98>
 8008608:	3001      	adds	r0, #1
 800860a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800860e:	bf02      	ittt	eq
 8008610:	3001      	addeq	r0, #1
 8008612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008616:	3001      	addeq	r0, #1
 8008618:	bcf0      	pop	{r4, r5, r6, r7}
 800861a:	3801      	subs	r0, #1
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop

08008620 <strlen>:
 8008620:	4603      	mov	r3, r0
 8008622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008626:	2a00      	cmp	r2, #0
 8008628:	d1fb      	bne.n	8008622 <strlen+0x2>
 800862a:	1a18      	subs	r0, r3, r0
 800862c:	3801      	subs	r0, #1
 800862e:	4770      	bx	lr

08008630 <__aeabi_drsub>:
 8008630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008634:	e002      	b.n	800863c <__adddf3>
 8008636:	bf00      	nop

08008638 <__aeabi_dsub>:
 8008638:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800863c <__adddf3>:
 800863c:	b530      	push	{r4, r5, lr}
 800863e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008642:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008646:	ea94 0f05 	teq	r4, r5
 800864a:	bf08      	it	eq
 800864c:	ea90 0f02 	teqeq	r0, r2
 8008650:	bf1f      	itttt	ne
 8008652:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008656:	ea55 0c02 	orrsne.w	ip, r5, r2
 800865a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800865e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008662:	f000 80e2 	beq.w	800882a <__adddf3+0x1ee>
 8008666:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800866a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800866e:	bfb8      	it	lt
 8008670:	426d      	neglt	r5, r5
 8008672:	dd0c      	ble.n	800868e <__adddf3+0x52>
 8008674:	442c      	add	r4, r5
 8008676:	ea80 0202 	eor.w	r2, r0, r2
 800867a:	ea81 0303 	eor.w	r3, r1, r3
 800867e:	ea82 0000 	eor.w	r0, r2, r0
 8008682:	ea83 0101 	eor.w	r1, r3, r1
 8008686:	ea80 0202 	eor.w	r2, r0, r2
 800868a:	ea81 0303 	eor.w	r3, r1, r3
 800868e:	2d36      	cmp	r5, #54	; 0x36
 8008690:	bf88      	it	hi
 8008692:	bd30      	pophi	{r4, r5, pc}
 8008694:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008698:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800869c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80086a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80086a4:	d002      	beq.n	80086ac <__adddf3+0x70>
 80086a6:	4240      	negs	r0, r0
 80086a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80086ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80086b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80086b8:	d002      	beq.n	80086c0 <__adddf3+0x84>
 80086ba:	4252      	negs	r2, r2
 80086bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80086c0:	ea94 0f05 	teq	r4, r5
 80086c4:	f000 80a7 	beq.w	8008816 <__adddf3+0x1da>
 80086c8:	f1a4 0401 	sub.w	r4, r4, #1
 80086cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80086d0:	db0d      	blt.n	80086ee <__adddf3+0xb2>
 80086d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80086d6:	fa22 f205 	lsr.w	r2, r2, r5
 80086da:	1880      	adds	r0, r0, r2
 80086dc:	f141 0100 	adc.w	r1, r1, #0
 80086e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80086e4:	1880      	adds	r0, r0, r2
 80086e6:	fa43 f305 	asr.w	r3, r3, r5
 80086ea:	4159      	adcs	r1, r3
 80086ec:	e00e      	b.n	800870c <__adddf3+0xd0>
 80086ee:	f1a5 0520 	sub.w	r5, r5, #32
 80086f2:	f10e 0e20 	add.w	lr, lr, #32
 80086f6:	2a01      	cmp	r2, #1
 80086f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80086fc:	bf28      	it	cs
 80086fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008702:	fa43 f305 	asr.w	r3, r3, r5
 8008706:	18c0      	adds	r0, r0, r3
 8008708:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800870c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008710:	d507      	bpl.n	8008722 <__adddf3+0xe6>
 8008712:	f04f 0e00 	mov.w	lr, #0
 8008716:	f1dc 0c00 	rsbs	ip, ip, #0
 800871a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800871e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008722:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008726:	d31b      	bcc.n	8008760 <__adddf3+0x124>
 8008728:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800872c:	d30c      	bcc.n	8008748 <__adddf3+0x10c>
 800872e:	0849      	lsrs	r1, r1, #1
 8008730:	ea5f 0030 	movs.w	r0, r0, rrx
 8008734:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008738:	f104 0401 	add.w	r4, r4, #1
 800873c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008740:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008744:	f080 809a 	bcs.w	800887c <__adddf3+0x240>
 8008748:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800874c:	bf08      	it	eq
 800874e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008752:	f150 0000 	adcs.w	r0, r0, #0
 8008756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800875a:	ea41 0105 	orr.w	r1, r1, r5
 800875e:	bd30      	pop	{r4, r5, pc}
 8008760:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008764:	4140      	adcs	r0, r0
 8008766:	eb41 0101 	adc.w	r1, r1, r1
 800876a:	3c01      	subs	r4, #1
 800876c:	bf28      	it	cs
 800876e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008772:	d2e9      	bcs.n	8008748 <__adddf3+0x10c>
 8008774:	f091 0f00 	teq	r1, #0
 8008778:	bf04      	itt	eq
 800877a:	4601      	moveq	r1, r0
 800877c:	2000      	moveq	r0, #0
 800877e:	fab1 f381 	clz	r3, r1
 8008782:	bf08      	it	eq
 8008784:	3320      	addeq	r3, #32
 8008786:	f1a3 030b 	sub.w	r3, r3, #11
 800878a:	f1b3 0220 	subs.w	r2, r3, #32
 800878e:	da0c      	bge.n	80087aa <__adddf3+0x16e>
 8008790:	320c      	adds	r2, #12
 8008792:	dd08      	ble.n	80087a6 <__adddf3+0x16a>
 8008794:	f102 0c14 	add.w	ip, r2, #20
 8008798:	f1c2 020c 	rsb	r2, r2, #12
 800879c:	fa01 f00c 	lsl.w	r0, r1, ip
 80087a0:	fa21 f102 	lsr.w	r1, r1, r2
 80087a4:	e00c      	b.n	80087c0 <__adddf3+0x184>
 80087a6:	f102 0214 	add.w	r2, r2, #20
 80087aa:	bfd8      	it	le
 80087ac:	f1c2 0c20 	rsble	ip, r2, #32
 80087b0:	fa01 f102 	lsl.w	r1, r1, r2
 80087b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80087b8:	bfdc      	itt	le
 80087ba:	ea41 010c 	orrle.w	r1, r1, ip
 80087be:	4090      	lslle	r0, r2
 80087c0:	1ae4      	subs	r4, r4, r3
 80087c2:	bfa2      	ittt	ge
 80087c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80087c8:	4329      	orrge	r1, r5
 80087ca:	bd30      	popge	{r4, r5, pc}
 80087cc:	ea6f 0404 	mvn.w	r4, r4
 80087d0:	3c1f      	subs	r4, #31
 80087d2:	da1c      	bge.n	800880e <__adddf3+0x1d2>
 80087d4:	340c      	adds	r4, #12
 80087d6:	dc0e      	bgt.n	80087f6 <__adddf3+0x1ba>
 80087d8:	f104 0414 	add.w	r4, r4, #20
 80087dc:	f1c4 0220 	rsb	r2, r4, #32
 80087e0:	fa20 f004 	lsr.w	r0, r0, r4
 80087e4:	fa01 f302 	lsl.w	r3, r1, r2
 80087e8:	ea40 0003 	orr.w	r0, r0, r3
 80087ec:	fa21 f304 	lsr.w	r3, r1, r4
 80087f0:	ea45 0103 	orr.w	r1, r5, r3
 80087f4:	bd30      	pop	{r4, r5, pc}
 80087f6:	f1c4 040c 	rsb	r4, r4, #12
 80087fa:	f1c4 0220 	rsb	r2, r4, #32
 80087fe:	fa20 f002 	lsr.w	r0, r0, r2
 8008802:	fa01 f304 	lsl.w	r3, r1, r4
 8008806:	ea40 0003 	orr.w	r0, r0, r3
 800880a:	4629      	mov	r1, r5
 800880c:	bd30      	pop	{r4, r5, pc}
 800880e:	fa21 f004 	lsr.w	r0, r1, r4
 8008812:	4629      	mov	r1, r5
 8008814:	bd30      	pop	{r4, r5, pc}
 8008816:	f094 0f00 	teq	r4, #0
 800881a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800881e:	bf06      	itte	eq
 8008820:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008824:	3401      	addeq	r4, #1
 8008826:	3d01      	subne	r5, #1
 8008828:	e74e      	b.n	80086c8 <__adddf3+0x8c>
 800882a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800882e:	bf18      	it	ne
 8008830:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008834:	d029      	beq.n	800888a <__adddf3+0x24e>
 8008836:	ea94 0f05 	teq	r4, r5
 800883a:	bf08      	it	eq
 800883c:	ea90 0f02 	teqeq	r0, r2
 8008840:	d005      	beq.n	800884e <__adddf3+0x212>
 8008842:	ea54 0c00 	orrs.w	ip, r4, r0
 8008846:	bf04      	itt	eq
 8008848:	4619      	moveq	r1, r3
 800884a:	4610      	moveq	r0, r2
 800884c:	bd30      	pop	{r4, r5, pc}
 800884e:	ea91 0f03 	teq	r1, r3
 8008852:	bf1e      	ittt	ne
 8008854:	2100      	movne	r1, #0
 8008856:	2000      	movne	r0, #0
 8008858:	bd30      	popne	{r4, r5, pc}
 800885a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800885e:	d105      	bne.n	800886c <__adddf3+0x230>
 8008860:	0040      	lsls	r0, r0, #1
 8008862:	4149      	adcs	r1, r1
 8008864:	bf28      	it	cs
 8008866:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800886a:	bd30      	pop	{r4, r5, pc}
 800886c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008870:	bf3c      	itt	cc
 8008872:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008876:	bd30      	popcc	{r4, r5, pc}
 8008878:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800887c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008884:	f04f 0000 	mov.w	r0, #0
 8008888:	bd30      	pop	{r4, r5, pc}
 800888a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800888e:	bf1a      	itte	ne
 8008890:	4619      	movne	r1, r3
 8008892:	4610      	movne	r0, r2
 8008894:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008898:	bf1c      	itt	ne
 800889a:	460b      	movne	r3, r1
 800889c:	4602      	movne	r2, r0
 800889e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80088a2:	bf06      	itte	eq
 80088a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80088a8:	ea91 0f03 	teqeq	r1, r3
 80088ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80088b0:	bd30      	pop	{r4, r5, pc}
 80088b2:	bf00      	nop

080088b4 <__aeabi_ui2d>:
 80088b4:	f090 0f00 	teq	r0, #0
 80088b8:	bf04      	itt	eq
 80088ba:	2100      	moveq	r1, #0
 80088bc:	4770      	bxeq	lr
 80088be:	b530      	push	{r4, r5, lr}
 80088c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80088c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80088c8:	f04f 0500 	mov.w	r5, #0
 80088cc:	f04f 0100 	mov.w	r1, #0
 80088d0:	e750      	b.n	8008774 <__adddf3+0x138>
 80088d2:	bf00      	nop

080088d4 <__aeabi_i2d>:
 80088d4:	f090 0f00 	teq	r0, #0
 80088d8:	bf04      	itt	eq
 80088da:	2100      	moveq	r1, #0
 80088dc:	4770      	bxeq	lr
 80088de:	b530      	push	{r4, r5, lr}
 80088e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80088e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80088e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80088ec:	bf48      	it	mi
 80088ee:	4240      	negmi	r0, r0
 80088f0:	f04f 0100 	mov.w	r1, #0
 80088f4:	e73e      	b.n	8008774 <__adddf3+0x138>
 80088f6:	bf00      	nop

080088f8 <__aeabi_f2d>:
 80088f8:	0042      	lsls	r2, r0, #1
 80088fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80088fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8008902:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008906:	bf1f      	itttt	ne
 8008908:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800890c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008910:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008914:	4770      	bxne	lr
 8008916:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800891a:	bf08      	it	eq
 800891c:	4770      	bxeq	lr
 800891e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008922:	bf04      	itt	eq
 8008924:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008928:	4770      	bxeq	lr
 800892a:	b530      	push	{r4, r5, lr}
 800892c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008930:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008934:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008938:	e71c      	b.n	8008774 <__adddf3+0x138>
 800893a:	bf00      	nop

0800893c <__aeabi_ul2d>:
 800893c:	ea50 0201 	orrs.w	r2, r0, r1
 8008940:	bf08      	it	eq
 8008942:	4770      	bxeq	lr
 8008944:	b530      	push	{r4, r5, lr}
 8008946:	f04f 0500 	mov.w	r5, #0
 800894a:	e00a      	b.n	8008962 <__aeabi_l2d+0x16>

0800894c <__aeabi_l2d>:
 800894c:	ea50 0201 	orrs.w	r2, r0, r1
 8008950:	bf08      	it	eq
 8008952:	4770      	bxeq	lr
 8008954:	b530      	push	{r4, r5, lr}
 8008956:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800895a:	d502      	bpl.n	8008962 <__aeabi_l2d+0x16>
 800895c:	4240      	negs	r0, r0
 800895e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008962:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008966:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800896a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800896e:	f43f aed8 	beq.w	8008722 <__adddf3+0xe6>
 8008972:	f04f 0203 	mov.w	r2, #3
 8008976:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800897a:	bf18      	it	ne
 800897c:	3203      	addne	r2, #3
 800897e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008982:	bf18      	it	ne
 8008984:	3203      	addne	r2, #3
 8008986:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800898a:	f1c2 0320 	rsb	r3, r2, #32
 800898e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008992:	fa20 f002 	lsr.w	r0, r0, r2
 8008996:	fa01 fe03 	lsl.w	lr, r1, r3
 800899a:	ea40 000e 	orr.w	r0, r0, lr
 800899e:	fa21 f102 	lsr.w	r1, r1, r2
 80089a2:	4414      	add	r4, r2
 80089a4:	e6bd      	b.n	8008722 <__adddf3+0xe6>
 80089a6:	bf00      	nop

080089a8 <__aeabi_dmul>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80089ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80089b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80089b6:	bf1d      	ittte	ne
 80089b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80089bc:	ea94 0f0c 	teqne	r4, ip
 80089c0:	ea95 0f0c 	teqne	r5, ip
 80089c4:	f000 f8de 	bleq	8008b84 <__aeabi_dmul+0x1dc>
 80089c8:	442c      	add	r4, r5
 80089ca:	ea81 0603 	eor.w	r6, r1, r3
 80089ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80089d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80089d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80089da:	bf18      	it	ne
 80089dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80089e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089e8:	d038      	beq.n	8008a5c <__aeabi_dmul+0xb4>
 80089ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80089ee:	f04f 0500 	mov.w	r5, #0
 80089f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80089f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80089fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80089fe:	f04f 0600 	mov.w	r6, #0
 8008a02:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008a06:	f09c 0f00 	teq	ip, #0
 8008a0a:	bf18      	it	ne
 8008a0c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008a10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008a14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008a18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008a1c:	d204      	bcs.n	8008a28 <__aeabi_dmul+0x80>
 8008a1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008a22:	416d      	adcs	r5, r5
 8008a24:	eb46 0606 	adc.w	r6, r6, r6
 8008a28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008a2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008a30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008a34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008a38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008a3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008a40:	bf88      	it	hi
 8008a42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008a46:	d81e      	bhi.n	8008a86 <__aeabi_dmul+0xde>
 8008a48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008a4c:	bf08      	it	eq
 8008a4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008a52:	f150 0000 	adcs.w	r0, r0, #0
 8008a56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008a60:	ea46 0101 	orr.w	r1, r6, r1
 8008a64:	ea40 0002 	orr.w	r0, r0, r2
 8008a68:	ea81 0103 	eor.w	r1, r1, r3
 8008a6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008a70:	bfc2      	ittt	gt
 8008a72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a7a:	bd70      	popgt	{r4, r5, r6, pc}
 8008a7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a80:	f04f 0e00 	mov.w	lr, #0
 8008a84:	3c01      	subs	r4, #1
 8008a86:	f300 80ab 	bgt.w	8008be0 <__aeabi_dmul+0x238>
 8008a8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008a8e:	bfde      	ittt	le
 8008a90:	2000      	movle	r0, #0
 8008a92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008a96:	bd70      	pople	{r4, r5, r6, pc}
 8008a98:	f1c4 0400 	rsb	r4, r4, #0
 8008a9c:	3c20      	subs	r4, #32
 8008a9e:	da35      	bge.n	8008b0c <__aeabi_dmul+0x164>
 8008aa0:	340c      	adds	r4, #12
 8008aa2:	dc1b      	bgt.n	8008adc <__aeabi_dmul+0x134>
 8008aa4:	f104 0414 	add.w	r4, r4, #20
 8008aa8:	f1c4 0520 	rsb	r5, r4, #32
 8008aac:	fa00 f305 	lsl.w	r3, r0, r5
 8008ab0:	fa20 f004 	lsr.w	r0, r0, r4
 8008ab4:	fa01 f205 	lsl.w	r2, r1, r5
 8008ab8:	ea40 0002 	orr.w	r0, r0, r2
 8008abc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008ac0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ac4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008ac8:	fa21 f604 	lsr.w	r6, r1, r4
 8008acc:	eb42 0106 	adc.w	r1, r2, r6
 8008ad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008ad4:	bf08      	it	eq
 8008ad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	f1c4 040c 	rsb	r4, r4, #12
 8008ae0:	f1c4 0520 	rsb	r5, r4, #32
 8008ae4:	fa00 f304 	lsl.w	r3, r0, r4
 8008ae8:	fa20 f005 	lsr.w	r0, r0, r5
 8008aec:	fa01 f204 	lsl.w	r2, r1, r4
 8008af0:	ea40 0002 	orr.w	r0, r0, r2
 8008af4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008af8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008afc:	f141 0100 	adc.w	r1, r1, #0
 8008b00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008b04:	bf08      	it	eq
 8008b06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	f1c4 0520 	rsb	r5, r4, #32
 8008b10:	fa00 f205 	lsl.w	r2, r0, r5
 8008b14:	ea4e 0e02 	orr.w	lr, lr, r2
 8008b18:	fa20 f304 	lsr.w	r3, r0, r4
 8008b1c:	fa01 f205 	lsl.w	r2, r1, r5
 8008b20:	ea43 0302 	orr.w	r3, r3, r2
 8008b24:	fa21 f004 	lsr.w	r0, r1, r4
 8008b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008b2c:	fa21 f204 	lsr.w	r2, r1, r4
 8008b30:	ea20 0002 	bic.w	r0, r0, r2
 8008b34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008b3c:	bf08      	it	eq
 8008b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	f094 0f00 	teq	r4, #0
 8008b48:	d10f      	bne.n	8008b6a <__aeabi_dmul+0x1c2>
 8008b4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008b4e:	0040      	lsls	r0, r0, #1
 8008b50:	eb41 0101 	adc.w	r1, r1, r1
 8008b54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008b58:	bf08      	it	eq
 8008b5a:	3c01      	subeq	r4, #1
 8008b5c:	d0f7      	beq.n	8008b4e <__aeabi_dmul+0x1a6>
 8008b5e:	ea41 0106 	orr.w	r1, r1, r6
 8008b62:	f095 0f00 	teq	r5, #0
 8008b66:	bf18      	it	ne
 8008b68:	4770      	bxne	lr
 8008b6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008b6e:	0052      	lsls	r2, r2, #1
 8008b70:	eb43 0303 	adc.w	r3, r3, r3
 8008b74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008b78:	bf08      	it	eq
 8008b7a:	3d01      	subeq	r5, #1
 8008b7c:	d0f7      	beq.n	8008b6e <__aeabi_dmul+0x1c6>
 8008b7e:	ea43 0306 	orr.w	r3, r3, r6
 8008b82:	4770      	bx	lr
 8008b84:	ea94 0f0c 	teq	r4, ip
 8008b88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008b8c:	bf18      	it	ne
 8008b8e:	ea95 0f0c 	teqne	r5, ip
 8008b92:	d00c      	beq.n	8008bae <__aeabi_dmul+0x206>
 8008b94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008b98:	bf18      	it	ne
 8008b9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008b9e:	d1d1      	bne.n	8008b44 <__aeabi_dmul+0x19c>
 8008ba0:	ea81 0103 	eor.w	r1, r1, r3
 8008ba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008ba8:	f04f 0000 	mov.w	r0, #0
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008bb2:	bf06      	itte	eq
 8008bb4:	4610      	moveq	r0, r2
 8008bb6:	4619      	moveq	r1, r3
 8008bb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008bbc:	d019      	beq.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bbe:	ea94 0f0c 	teq	r4, ip
 8008bc2:	d102      	bne.n	8008bca <__aeabi_dmul+0x222>
 8008bc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008bc8:	d113      	bne.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bca:	ea95 0f0c 	teq	r5, ip
 8008bce:	d105      	bne.n	8008bdc <__aeabi_dmul+0x234>
 8008bd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008bd4:	bf1c      	itt	ne
 8008bd6:	4610      	movne	r0, r2
 8008bd8:	4619      	movne	r1, r3
 8008bda:	d10a      	bne.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bdc:	ea81 0103 	eor.w	r1, r1, r3
 8008be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008be4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008be8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bec:	f04f 0000 	mov.w	r0, #0
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
 8008bf2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008bf6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}

08008bfc <__aeabi_ddiv>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008c02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008c06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008c0a:	bf1d      	ittte	ne
 8008c0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008c10:	ea94 0f0c 	teqne	r4, ip
 8008c14:	ea95 0f0c 	teqne	r5, ip
 8008c18:	f000 f8a7 	bleq	8008d6a <__aeabi_ddiv+0x16e>
 8008c1c:	eba4 0405 	sub.w	r4, r4, r5
 8008c20:	ea81 0e03 	eor.w	lr, r1, r3
 8008c24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008c28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008c2c:	f000 8088 	beq.w	8008d40 <__aeabi_ddiv+0x144>
 8008c30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008c34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008c38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008c3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008c40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008c44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008c48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008c4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008c50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008c54:	429d      	cmp	r5, r3
 8008c56:	bf08      	it	eq
 8008c58:	4296      	cmpeq	r6, r2
 8008c5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008c5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008c62:	d202      	bcs.n	8008c6a <__aeabi_ddiv+0x6e>
 8008c64:	085b      	lsrs	r3, r3, #1
 8008c66:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c6a:	1ab6      	subs	r6, r6, r2
 8008c6c:	eb65 0503 	sbc.w	r5, r5, r3
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008c7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008c7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c86:	bf22      	ittt	cs
 8008c88:	1ab6      	subcs	r6, r6, r2
 8008c8a:	4675      	movcs	r5, lr
 8008c8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c96:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c9e:	bf22      	ittt	cs
 8008ca0:	1ab6      	subcs	r6, r6, r2
 8008ca2:	4675      	movcs	r5, lr
 8008ca4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	ea4f 0232 	mov.w	r2, r2, rrx
 8008cae:	ebb6 0e02 	subs.w	lr, r6, r2
 8008cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008cb6:	bf22      	ittt	cs
 8008cb8:	1ab6      	subcs	r6, r6, r2
 8008cba:	4675      	movcs	r5, lr
 8008cbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8008cc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8008cca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008cce:	bf22      	ittt	cs
 8008cd0:	1ab6      	subcs	r6, r6, r2
 8008cd2:	4675      	movcs	r5, lr
 8008cd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008cd8:	ea55 0e06 	orrs.w	lr, r5, r6
 8008cdc:	d018      	beq.n	8008d10 <__aeabi_ddiv+0x114>
 8008cde:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008ce2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008ce6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008cea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008cee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008cf2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008cf6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008cfa:	d1c0      	bne.n	8008c7e <__aeabi_ddiv+0x82>
 8008cfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d00:	d10b      	bne.n	8008d1a <__aeabi_ddiv+0x11e>
 8008d02:	ea41 0100 	orr.w	r1, r1, r0
 8008d06:	f04f 0000 	mov.w	r0, #0
 8008d0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008d0e:	e7b6      	b.n	8008c7e <__aeabi_ddiv+0x82>
 8008d10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d14:	bf04      	itt	eq
 8008d16:	4301      	orreq	r1, r0
 8008d18:	2000      	moveq	r0, #0
 8008d1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008d1e:	bf88      	it	hi
 8008d20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008d24:	f63f aeaf 	bhi.w	8008a86 <__aeabi_dmul+0xde>
 8008d28:	ebb5 0c03 	subs.w	ip, r5, r3
 8008d2c:	bf04      	itt	eq
 8008d2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008d32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008d36:	f150 0000 	adcs.w	r0, r0, #0
 8008d3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008d44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008d48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008d4c:	bfc2      	ittt	gt
 8008d4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008d52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008d56:	bd70      	popgt	{r4, r5, r6, pc}
 8008d58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008d5c:	f04f 0e00 	mov.w	lr, #0
 8008d60:	3c01      	subs	r4, #1
 8008d62:	e690      	b.n	8008a86 <__aeabi_dmul+0xde>
 8008d64:	ea45 0e06 	orr.w	lr, r5, r6
 8008d68:	e68d      	b.n	8008a86 <__aeabi_dmul+0xde>
 8008d6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008d6e:	ea94 0f0c 	teq	r4, ip
 8008d72:	bf08      	it	eq
 8008d74:	ea95 0f0c 	teqeq	r5, ip
 8008d78:	f43f af3b 	beq.w	8008bf2 <__aeabi_dmul+0x24a>
 8008d7c:	ea94 0f0c 	teq	r4, ip
 8008d80:	d10a      	bne.n	8008d98 <__aeabi_ddiv+0x19c>
 8008d82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008d86:	f47f af34 	bne.w	8008bf2 <__aeabi_dmul+0x24a>
 8008d8a:	ea95 0f0c 	teq	r5, ip
 8008d8e:	f47f af25 	bne.w	8008bdc <__aeabi_dmul+0x234>
 8008d92:	4610      	mov	r0, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	e72c      	b.n	8008bf2 <__aeabi_dmul+0x24a>
 8008d98:	ea95 0f0c 	teq	r5, ip
 8008d9c:	d106      	bne.n	8008dac <__aeabi_ddiv+0x1b0>
 8008d9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008da2:	f43f aefd 	beq.w	8008ba0 <__aeabi_dmul+0x1f8>
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	e722      	b.n	8008bf2 <__aeabi_dmul+0x24a>
 8008dac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008db0:	bf18      	it	ne
 8008db2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008db6:	f47f aec5 	bne.w	8008b44 <__aeabi_dmul+0x19c>
 8008dba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008dbe:	f47f af0d 	bne.w	8008bdc <__aeabi_dmul+0x234>
 8008dc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008dc6:	f47f aeeb 	bne.w	8008ba0 <__aeabi_dmul+0x1f8>
 8008dca:	e712      	b.n	8008bf2 <__aeabi_dmul+0x24a>

08008dcc <__gedf2>:
 8008dcc:	f04f 3cff 	mov.w	ip, #4294967295
 8008dd0:	e006      	b.n	8008de0 <__cmpdf2+0x4>
 8008dd2:	bf00      	nop

08008dd4 <__ledf2>:
 8008dd4:	f04f 0c01 	mov.w	ip, #1
 8008dd8:	e002      	b.n	8008de0 <__cmpdf2+0x4>
 8008dda:	bf00      	nop

08008ddc <__cmpdf2>:
 8008ddc:	f04f 0c01 	mov.w	ip, #1
 8008de0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008de4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008de8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008dec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008df0:	bf18      	it	ne
 8008df2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008df6:	d01b      	beq.n	8008e30 <__cmpdf2+0x54>
 8008df8:	b001      	add	sp, #4
 8008dfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008dfe:	bf0c      	ite	eq
 8008e00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008e04:	ea91 0f03 	teqne	r1, r3
 8008e08:	bf02      	ittt	eq
 8008e0a:	ea90 0f02 	teqeq	r0, r2
 8008e0e:	2000      	moveq	r0, #0
 8008e10:	4770      	bxeq	lr
 8008e12:	f110 0f00 	cmn.w	r0, #0
 8008e16:	ea91 0f03 	teq	r1, r3
 8008e1a:	bf58      	it	pl
 8008e1c:	4299      	cmppl	r1, r3
 8008e1e:	bf08      	it	eq
 8008e20:	4290      	cmpeq	r0, r2
 8008e22:	bf2c      	ite	cs
 8008e24:	17d8      	asrcs	r0, r3, #31
 8008e26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008e2a:	f040 0001 	orr.w	r0, r0, #1
 8008e2e:	4770      	bx	lr
 8008e30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008e34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008e38:	d102      	bne.n	8008e40 <__cmpdf2+0x64>
 8008e3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008e3e:	d107      	bne.n	8008e50 <__cmpdf2+0x74>
 8008e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008e48:	d1d6      	bne.n	8008df8 <__cmpdf2+0x1c>
 8008e4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008e4e:	d0d3      	beq.n	8008df8 <__cmpdf2+0x1c>
 8008e50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop

08008e58 <__aeabi_cdrcmple>:
 8008e58:	4684      	mov	ip, r0
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4662      	mov	r2, ip
 8008e5e:	468c      	mov	ip, r1
 8008e60:	4619      	mov	r1, r3
 8008e62:	4663      	mov	r3, ip
 8008e64:	e000      	b.n	8008e68 <__aeabi_cdcmpeq>
 8008e66:	bf00      	nop

08008e68 <__aeabi_cdcmpeq>:
 8008e68:	b501      	push	{r0, lr}
 8008e6a:	f7ff ffb7 	bl	8008ddc <__cmpdf2>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	bf48      	it	mi
 8008e72:	f110 0f00 	cmnmi.w	r0, #0
 8008e76:	bd01      	pop	{r0, pc}

08008e78 <__aeabi_dcmpeq>:
 8008e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e7c:	f7ff fff4 	bl	8008e68 <__aeabi_cdcmpeq>
 8008e80:	bf0c      	ite	eq
 8008e82:	2001      	moveq	r0, #1
 8008e84:	2000      	movne	r0, #0
 8008e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e8a:	bf00      	nop

08008e8c <__aeabi_dcmplt>:
 8008e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e90:	f7ff ffea 	bl	8008e68 <__aeabi_cdcmpeq>
 8008e94:	bf34      	ite	cc
 8008e96:	2001      	movcc	r0, #1
 8008e98:	2000      	movcs	r0, #0
 8008e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e9e:	bf00      	nop

08008ea0 <__aeabi_dcmple>:
 8008ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ea4:	f7ff ffe0 	bl	8008e68 <__aeabi_cdcmpeq>
 8008ea8:	bf94      	ite	ls
 8008eaa:	2001      	movls	r0, #1
 8008eac:	2000      	movhi	r0, #0
 8008eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8008eb2:	bf00      	nop

08008eb4 <__aeabi_dcmpge>:
 8008eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008eb8:	f7ff ffce 	bl	8008e58 <__aeabi_cdrcmple>
 8008ebc:	bf94      	ite	ls
 8008ebe:	2001      	movls	r0, #1
 8008ec0:	2000      	movhi	r0, #0
 8008ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008ec6:	bf00      	nop

08008ec8 <__aeabi_dcmpgt>:
 8008ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ecc:	f7ff ffc4 	bl	8008e58 <__aeabi_cdrcmple>
 8008ed0:	bf34      	ite	cc
 8008ed2:	2001      	movcc	r0, #1
 8008ed4:	2000      	movcs	r0, #0
 8008ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008eda:	bf00      	nop

08008edc <__aeabi_dcmpun>:
 8008edc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ee0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ee4:	d102      	bne.n	8008eec <__aeabi_dcmpun+0x10>
 8008ee6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008eea:	d10a      	bne.n	8008f02 <__aeabi_dcmpun+0x26>
 8008eec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ef0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ef4:	d102      	bne.n	8008efc <__aeabi_dcmpun+0x20>
 8008ef6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008efa:	d102      	bne.n	8008f02 <__aeabi_dcmpun+0x26>
 8008efc:	f04f 0000 	mov.w	r0, #0
 8008f00:	4770      	bx	lr
 8008f02:	f04f 0001 	mov.w	r0, #1
 8008f06:	4770      	bx	lr

08008f08 <__aeabi_d2iz>:
 8008f08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008f0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008f10:	d215      	bcs.n	8008f3e <__aeabi_d2iz+0x36>
 8008f12:	d511      	bpl.n	8008f38 <__aeabi_d2iz+0x30>
 8008f14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008f18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008f1c:	d912      	bls.n	8008f44 <__aeabi_d2iz+0x3c>
 8008f1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008f2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008f2e:	fa23 f002 	lsr.w	r0, r3, r2
 8008f32:	bf18      	it	ne
 8008f34:	4240      	negne	r0, r0
 8008f36:	4770      	bx	lr
 8008f38:	f04f 0000 	mov.w	r0, #0
 8008f3c:	4770      	bx	lr
 8008f3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008f42:	d105      	bne.n	8008f50 <__aeabi_d2iz+0x48>
 8008f44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008f48:	bf08      	it	eq
 8008f4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008f4e:	4770      	bx	lr
 8008f50:	f04f 0000 	mov.w	r0, #0
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop

08008f58 <__aeabi_d2uiz>:
 8008f58:	004a      	lsls	r2, r1, #1
 8008f5a:	d211      	bcs.n	8008f80 <__aeabi_d2uiz+0x28>
 8008f5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008f60:	d211      	bcs.n	8008f86 <__aeabi_d2uiz+0x2e>
 8008f62:	d50d      	bpl.n	8008f80 <__aeabi_d2uiz+0x28>
 8008f64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008f68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008f6c:	d40e      	bmi.n	8008f8c <__aeabi_d2uiz+0x34>
 8008f6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008f7a:	fa23 f002 	lsr.w	r0, r3, r2
 8008f7e:	4770      	bx	lr
 8008f80:	f04f 0000 	mov.w	r0, #0
 8008f84:	4770      	bx	lr
 8008f86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008f8a:	d102      	bne.n	8008f92 <__aeabi_d2uiz+0x3a>
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	4770      	bx	lr
 8008f92:	f04f 0000 	mov.w	r0, #0
 8008f96:	4770      	bx	lr

08008f98 <__aeabi_frsub>:
 8008f98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8008f9c:	e002      	b.n	8008fa4 <__addsf3>
 8008f9e:	bf00      	nop

08008fa0 <__aeabi_fsub>:
 8008fa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08008fa4 <__addsf3>:
 8008fa4:	0042      	lsls	r2, r0, #1
 8008fa6:	bf1f      	itttt	ne
 8008fa8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8008fac:	ea92 0f03 	teqne	r2, r3
 8008fb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8008fb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008fb8:	d06a      	beq.n	8009090 <__addsf3+0xec>
 8008fba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008fbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8008fc2:	bfc1      	itttt	gt
 8008fc4:	18d2      	addgt	r2, r2, r3
 8008fc6:	4041      	eorgt	r1, r0
 8008fc8:	4048      	eorgt	r0, r1
 8008fca:	4041      	eorgt	r1, r0
 8008fcc:	bfb8      	it	lt
 8008fce:	425b      	neglt	r3, r3
 8008fd0:	2b19      	cmp	r3, #25
 8008fd2:	bf88      	it	hi
 8008fd4:	4770      	bxhi	lr
 8008fd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8008fda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008fde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008fe2:	bf18      	it	ne
 8008fe4:	4240      	negne	r0, r0
 8008fe6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008fea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008fee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8008ff2:	bf18      	it	ne
 8008ff4:	4249      	negne	r1, r1
 8008ff6:	ea92 0f03 	teq	r2, r3
 8008ffa:	d03f      	beq.n	800907c <__addsf3+0xd8>
 8008ffc:	f1a2 0201 	sub.w	r2, r2, #1
 8009000:	fa41 fc03 	asr.w	ip, r1, r3
 8009004:	eb10 000c 	adds.w	r0, r0, ip
 8009008:	f1c3 0320 	rsb	r3, r3, #32
 800900c:	fa01 f103 	lsl.w	r1, r1, r3
 8009010:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8009014:	d502      	bpl.n	800901c <__addsf3+0x78>
 8009016:	4249      	negs	r1, r1
 8009018:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800901c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8009020:	d313      	bcc.n	800904a <__addsf3+0xa6>
 8009022:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009026:	d306      	bcc.n	8009036 <__addsf3+0x92>
 8009028:	0840      	lsrs	r0, r0, #1
 800902a:	ea4f 0131 	mov.w	r1, r1, rrx
 800902e:	f102 0201 	add.w	r2, r2, #1
 8009032:	2afe      	cmp	r2, #254	; 0xfe
 8009034:	d251      	bcs.n	80090da <__addsf3+0x136>
 8009036:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800903a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800903e:	bf08      	it	eq
 8009040:	f020 0001 	biceq.w	r0, r0, #1
 8009044:	ea40 0003 	orr.w	r0, r0, r3
 8009048:	4770      	bx	lr
 800904a:	0049      	lsls	r1, r1, #1
 800904c:	eb40 0000 	adc.w	r0, r0, r0
 8009050:	3a01      	subs	r2, #1
 8009052:	bf28      	it	cs
 8009054:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8009058:	d2ed      	bcs.n	8009036 <__addsf3+0x92>
 800905a:	fab0 fc80 	clz	ip, r0
 800905e:	f1ac 0c08 	sub.w	ip, ip, #8
 8009062:	ebb2 020c 	subs.w	r2, r2, ip
 8009066:	fa00 f00c 	lsl.w	r0, r0, ip
 800906a:	bfaa      	itet	ge
 800906c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8009070:	4252      	neglt	r2, r2
 8009072:	4318      	orrge	r0, r3
 8009074:	bfbc      	itt	lt
 8009076:	40d0      	lsrlt	r0, r2
 8009078:	4318      	orrlt	r0, r3
 800907a:	4770      	bx	lr
 800907c:	f092 0f00 	teq	r2, #0
 8009080:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8009084:	bf06      	itte	eq
 8009086:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800908a:	3201      	addeq	r2, #1
 800908c:	3b01      	subne	r3, #1
 800908e:	e7b5      	b.n	8008ffc <__addsf3+0x58>
 8009090:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8009094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8009098:	bf18      	it	ne
 800909a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800909e:	d021      	beq.n	80090e4 <__addsf3+0x140>
 80090a0:	ea92 0f03 	teq	r2, r3
 80090a4:	d004      	beq.n	80090b0 <__addsf3+0x10c>
 80090a6:	f092 0f00 	teq	r2, #0
 80090aa:	bf08      	it	eq
 80090ac:	4608      	moveq	r0, r1
 80090ae:	4770      	bx	lr
 80090b0:	ea90 0f01 	teq	r0, r1
 80090b4:	bf1c      	itt	ne
 80090b6:	2000      	movne	r0, #0
 80090b8:	4770      	bxne	lr
 80090ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80090be:	d104      	bne.n	80090ca <__addsf3+0x126>
 80090c0:	0040      	lsls	r0, r0, #1
 80090c2:	bf28      	it	cs
 80090c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80090c8:	4770      	bx	lr
 80090ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80090ce:	bf3c      	itt	cc
 80090d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80090d4:	4770      	bxcc	lr
 80090d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80090da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80090de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80090e2:	4770      	bx	lr
 80090e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80090e8:	bf16      	itet	ne
 80090ea:	4608      	movne	r0, r1
 80090ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80090f0:	4601      	movne	r1, r0
 80090f2:	0242      	lsls	r2, r0, #9
 80090f4:	bf06      	itte	eq
 80090f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80090fa:	ea90 0f01 	teqeq	r0, r1
 80090fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8009102:	4770      	bx	lr

08009104 <__aeabi_ui2f>:
 8009104:	f04f 0300 	mov.w	r3, #0
 8009108:	e004      	b.n	8009114 <__aeabi_i2f+0x8>
 800910a:	bf00      	nop

0800910c <__aeabi_i2f>:
 800910c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8009110:	bf48      	it	mi
 8009112:	4240      	negmi	r0, r0
 8009114:	ea5f 0c00 	movs.w	ip, r0
 8009118:	bf08      	it	eq
 800911a:	4770      	bxeq	lr
 800911c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8009120:	4601      	mov	r1, r0
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	e01c      	b.n	8009162 <__aeabi_l2f+0x2a>

08009128 <__aeabi_ul2f>:
 8009128:	ea50 0201 	orrs.w	r2, r0, r1
 800912c:	bf08      	it	eq
 800912e:	4770      	bxeq	lr
 8009130:	f04f 0300 	mov.w	r3, #0
 8009134:	e00a      	b.n	800914c <__aeabi_l2f+0x14>
 8009136:	bf00      	nop

08009138 <__aeabi_l2f>:
 8009138:	ea50 0201 	orrs.w	r2, r0, r1
 800913c:	bf08      	it	eq
 800913e:	4770      	bxeq	lr
 8009140:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8009144:	d502      	bpl.n	800914c <__aeabi_l2f+0x14>
 8009146:	4240      	negs	r0, r0
 8009148:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800914c:	ea5f 0c01 	movs.w	ip, r1
 8009150:	bf02      	ittt	eq
 8009152:	4684      	moveq	ip, r0
 8009154:	4601      	moveq	r1, r0
 8009156:	2000      	moveq	r0, #0
 8009158:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800915c:	bf08      	it	eq
 800915e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8009162:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009166:	fabc f28c 	clz	r2, ip
 800916a:	3a08      	subs	r2, #8
 800916c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8009170:	db10      	blt.n	8009194 <__aeabi_l2f+0x5c>
 8009172:	fa01 fc02 	lsl.w	ip, r1, r2
 8009176:	4463      	add	r3, ip
 8009178:	fa00 fc02 	lsl.w	ip, r0, r2
 800917c:	f1c2 0220 	rsb	r2, r2, #32
 8009180:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8009184:	fa20 f202 	lsr.w	r2, r0, r2
 8009188:	eb43 0002 	adc.w	r0, r3, r2
 800918c:	bf08      	it	eq
 800918e:	f020 0001 	biceq.w	r0, r0, #1
 8009192:	4770      	bx	lr
 8009194:	f102 0220 	add.w	r2, r2, #32
 8009198:	fa01 fc02 	lsl.w	ip, r1, r2
 800919c:	f1c2 0220 	rsb	r2, r2, #32
 80091a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80091a4:	fa21 f202 	lsr.w	r2, r1, r2
 80091a8:	eb43 0002 	adc.w	r0, r3, r2
 80091ac:	bf08      	it	eq
 80091ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80091b2:	4770      	bx	lr

080091b4 <__aeabi_f2uiz>:
 80091b4:	0042      	lsls	r2, r0, #1
 80091b6:	d20e      	bcs.n	80091d6 <__aeabi_f2uiz+0x22>
 80091b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80091bc:	d30b      	bcc.n	80091d6 <__aeabi_f2uiz+0x22>
 80091be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80091c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80091c6:	d409      	bmi.n	80091dc <__aeabi_f2uiz+0x28>
 80091c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80091cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091d0:	fa23 f002 	lsr.w	r0, r3, r2
 80091d4:	4770      	bx	lr
 80091d6:	f04f 0000 	mov.w	r0, #0
 80091da:	4770      	bx	lr
 80091dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80091e0:	d101      	bne.n	80091e6 <__aeabi_f2uiz+0x32>
 80091e2:	0242      	lsls	r2, r0, #9
 80091e4:	d102      	bne.n	80091ec <__aeabi_f2uiz+0x38>
 80091e6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ea:	4770      	bx	lr
 80091ec:	f04f 0000 	mov.w	r0, #0
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop

080091f4 <__aeabi_uldivmod>:
 80091f4:	b953      	cbnz	r3, 800920c <__aeabi_uldivmod+0x18>
 80091f6:	b94a      	cbnz	r2, 800920c <__aeabi_uldivmod+0x18>
 80091f8:	2900      	cmp	r1, #0
 80091fa:	bf08      	it	eq
 80091fc:	2800      	cmpeq	r0, #0
 80091fe:	bf1c      	itt	ne
 8009200:	f04f 31ff 	movne.w	r1, #4294967295
 8009204:	f04f 30ff 	movne.w	r0, #4294967295
 8009208:	f000 b970 	b.w	80094ec <__aeabi_idiv0>
 800920c:	f1ad 0c08 	sub.w	ip, sp, #8
 8009210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8009214:	f000 f806 	bl	8009224 <__udivmoddi4>
 8009218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800921c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009220:	b004      	add	sp, #16
 8009222:	4770      	bx	lr

08009224 <__udivmoddi4>:
 8009224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009228:	9e08      	ldr	r6, [sp, #32]
 800922a:	460d      	mov	r5, r1
 800922c:	4604      	mov	r4, r0
 800922e:	460f      	mov	r7, r1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d14a      	bne.n	80092ca <__udivmoddi4+0xa6>
 8009234:	428a      	cmp	r2, r1
 8009236:	4694      	mov	ip, r2
 8009238:	d965      	bls.n	8009306 <__udivmoddi4+0xe2>
 800923a:	fab2 f382 	clz	r3, r2
 800923e:	b143      	cbz	r3, 8009252 <__udivmoddi4+0x2e>
 8009240:	fa02 fc03 	lsl.w	ip, r2, r3
 8009244:	f1c3 0220 	rsb	r2, r3, #32
 8009248:	409f      	lsls	r7, r3
 800924a:	fa20 f202 	lsr.w	r2, r0, r2
 800924e:	4317      	orrs	r7, r2
 8009250:	409c      	lsls	r4, r3
 8009252:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8009256:	fa1f f58c 	uxth.w	r5, ip
 800925a:	fbb7 f1fe 	udiv	r1, r7, lr
 800925e:	0c22      	lsrs	r2, r4, #16
 8009260:	fb0e 7711 	mls	r7, lr, r1, r7
 8009264:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8009268:	fb01 f005 	mul.w	r0, r1, r5
 800926c:	4290      	cmp	r0, r2
 800926e:	d90a      	bls.n	8009286 <__udivmoddi4+0x62>
 8009270:	eb1c 0202 	adds.w	r2, ip, r2
 8009274:	f101 37ff 	add.w	r7, r1, #4294967295
 8009278:	f080 811b 	bcs.w	80094b2 <__udivmoddi4+0x28e>
 800927c:	4290      	cmp	r0, r2
 800927e:	f240 8118 	bls.w	80094b2 <__udivmoddi4+0x28e>
 8009282:	3902      	subs	r1, #2
 8009284:	4462      	add	r2, ip
 8009286:	1a12      	subs	r2, r2, r0
 8009288:	b2a4      	uxth	r4, r4
 800928a:	fbb2 f0fe 	udiv	r0, r2, lr
 800928e:	fb0e 2210 	mls	r2, lr, r0, r2
 8009292:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009296:	fb00 f505 	mul.w	r5, r0, r5
 800929a:	42a5      	cmp	r5, r4
 800929c:	d90a      	bls.n	80092b4 <__udivmoddi4+0x90>
 800929e:	eb1c 0404 	adds.w	r4, ip, r4
 80092a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80092a6:	f080 8106 	bcs.w	80094b6 <__udivmoddi4+0x292>
 80092aa:	42a5      	cmp	r5, r4
 80092ac:	f240 8103 	bls.w	80094b6 <__udivmoddi4+0x292>
 80092b0:	4464      	add	r4, ip
 80092b2:	3802      	subs	r0, #2
 80092b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80092b8:	1b64      	subs	r4, r4, r5
 80092ba:	2100      	movs	r1, #0
 80092bc:	b11e      	cbz	r6, 80092c6 <__udivmoddi4+0xa2>
 80092be:	40dc      	lsrs	r4, r3
 80092c0:	2300      	movs	r3, #0
 80092c2:	e9c6 4300 	strd	r4, r3, [r6]
 80092c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ca:	428b      	cmp	r3, r1
 80092cc:	d908      	bls.n	80092e0 <__udivmoddi4+0xbc>
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	f000 80ec 	beq.w	80094ac <__udivmoddi4+0x288>
 80092d4:	2100      	movs	r1, #0
 80092d6:	e9c6 0500 	strd	r0, r5, [r6]
 80092da:	4608      	mov	r0, r1
 80092dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e0:	fab3 f183 	clz	r1, r3
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d149      	bne.n	800937c <__udivmoddi4+0x158>
 80092e8:	42ab      	cmp	r3, r5
 80092ea:	d302      	bcc.n	80092f2 <__udivmoddi4+0xce>
 80092ec:	4282      	cmp	r2, r0
 80092ee:	f200 80f7 	bhi.w	80094e0 <__udivmoddi4+0x2bc>
 80092f2:	1a84      	subs	r4, r0, r2
 80092f4:	eb65 0203 	sbc.w	r2, r5, r3
 80092f8:	2001      	movs	r0, #1
 80092fa:	4617      	mov	r7, r2
 80092fc:	2e00      	cmp	r6, #0
 80092fe:	d0e2      	beq.n	80092c6 <__udivmoddi4+0xa2>
 8009300:	e9c6 4700 	strd	r4, r7, [r6]
 8009304:	e7df      	b.n	80092c6 <__udivmoddi4+0xa2>
 8009306:	b902      	cbnz	r2, 800930a <__udivmoddi4+0xe6>
 8009308:	deff      	udf	#255	; 0xff
 800930a:	fab2 f382 	clz	r3, r2
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 808f 	bne.w	8009432 <__udivmoddi4+0x20e>
 8009314:	1a8a      	subs	r2, r1, r2
 8009316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800931a:	fa1f fe8c 	uxth.w	lr, ip
 800931e:	2101      	movs	r1, #1
 8009320:	fbb2 f5f7 	udiv	r5, r2, r7
 8009324:	fb07 2015 	mls	r0, r7, r5, r2
 8009328:	0c22      	lsrs	r2, r4, #16
 800932a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800932e:	fb0e f005 	mul.w	r0, lr, r5
 8009332:	4290      	cmp	r0, r2
 8009334:	d908      	bls.n	8009348 <__udivmoddi4+0x124>
 8009336:	eb1c 0202 	adds.w	r2, ip, r2
 800933a:	f105 38ff 	add.w	r8, r5, #4294967295
 800933e:	d202      	bcs.n	8009346 <__udivmoddi4+0x122>
 8009340:	4290      	cmp	r0, r2
 8009342:	f200 80ca 	bhi.w	80094da <__udivmoddi4+0x2b6>
 8009346:	4645      	mov	r5, r8
 8009348:	1a12      	subs	r2, r2, r0
 800934a:	b2a4      	uxth	r4, r4
 800934c:	fbb2 f0f7 	udiv	r0, r2, r7
 8009350:	fb07 2210 	mls	r2, r7, r0, r2
 8009354:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009358:	fb0e fe00 	mul.w	lr, lr, r0
 800935c:	45a6      	cmp	lr, r4
 800935e:	d908      	bls.n	8009372 <__udivmoddi4+0x14e>
 8009360:	eb1c 0404 	adds.w	r4, ip, r4
 8009364:	f100 32ff 	add.w	r2, r0, #4294967295
 8009368:	d202      	bcs.n	8009370 <__udivmoddi4+0x14c>
 800936a:	45a6      	cmp	lr, r4
 800936c:	f200 80ba 	bhi.w	80094e4 <__udivmoddi4+0x2c0>
 8009370:	4610      	mov	r0, r2
 8009372:	eba4 040e 	sub.w	r4, r4, lr
 8009376:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800937a:	e79f      	b.n	80092bc <__udivmoddi4+0x98>
 800937c:	f1c1 0720 	rsb	r7, r1, #32
 8009380:	408b      	lsls	r3, r1
 8009382:	fa22 fc07 	lsr.w	ip, r2, r7
 8009386:	ea4c 0c03 	orr.w	ip, ip, r3
 800938a:	fa05 f401 	lsl.w	r4, r5, r1
 800938e:	fa20 f307 	lsr.w	r3, r0, r7
 8009392:	40fd      	lsrs	r5, r7
 8009394:	4323      	orrs	r3, r4
 8009396:	fa00 f901 	lsl.w	r9, r0, r1
 800939a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800939e:	fa1f fe8c 	uxth.w	lr, ip
 80093a2:	fbb5 f8f0 	udiv	r8, r5, r0
 80093a6:	0c1c      	lsrs	r4, r3, #16
 80093a8:	fb00 5518 	mls	r5, r0, r8, r5
 80093ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80093b0:	fb08 f50e 	mul.w	r5, r8, lr
 80093b4:	42a5      	cmp	r5, r4
 80093b6:	fa02 f201 	lsl.w	r2, r2, r1
 80093ba:	d90b      	bls.n	80093d4 <__udivmoddi4+0x1b0>
 80093bc:	eb1c 0404 	adds.w	r4, ip, r4
 80093c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80093c4:	f080 8087 	bcs.w	80094d6 <__udivmoddi4+0x2b2>
 80093c8:	42a5      	cmp	r5, r4
 80093ca:	f240 8084 	bls.w	80094d6 <__udivmoddi4+0x2b2>
 80093ce:	f1a8 0802 	sub.w	r8, r8, #2
 80093d2:	4464      	add	r4, ip
 80093d4:	1b64      	subs	r4, r4, r5
 80093d6:	b29d      	uxth	r5, r3
 80093d8:	fbb4 f3f0 	udiv	r3, r4, r0
 80093dc:	fb00 4413 	mls	r4, r0, r3, r4
 80093e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80093e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80093e8:	45a6      	cmp	lr, r4
 80093ea:	d908      	bls.n	80093fe <__udivmoddi4+0x1da>
 80093ec:	eb1c 0404 	adds.w	r4, ip, r4
 80093f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80093f4:	d26b      	bcs.n	80094ce <__udivmoddi4+0x2aa>
 80093f6:	45a6      	cmp	lr, r4
 80093f8:	d969      	bls.n	80094ce <__udivmoddi4+0x2aa>
 80093fa:	3b02      	subs	r3, #2
 80093fc:	4464      	add	r4, ip
 80093fe:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8009402:	fba0 8302 	umull	r8, r3, r0, r2
 8009406:	eba4 040e 	sub.w	r4, r4, lr
 800940a:	429c      	cmp	r4, r3
 800940c:	46c6      	mov	lr, r8
 800940e:	461d      	mov	r5, r3
 8009410:	d355      	bcc.n	80094be <__udivmoddi4+0x29a>
 8009412:	d052      	beq.n	80094ba <__udivmoddi4+0x296>
 8009414:	b156      	cbz	r6, 800942c <__udivmoddi4+0x208>
 8009416:	ebb9 030e 	subs.w	r3, r9, lr
 800941a:	eb64 0405 	sbc.w	r4, r4, r5
 800941e:	fa04 f707 	lsl.w	r7, r4, r7
 8009422:	40cb      	lsrs	r3, r1
 8009424:	40cc      	lsrs	r4, r1
 8009426:	431f      	orrs	r7, r3
 8009428:	e9c6 7400 	strd	r7, r4, [r6]
 800942c:	2100      	movs	r1, #0
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009432:	f1c3 0120 	rsb	r1, r3, #32
 8009436:	fa02 fc03 	lsl.w	ip, r2, r3
 800943a:	fa20 f201 	lsr.w	r2, r0, r1
 800943e:	fa25 f101 	lsr.w	r1, r5, r1
 8009442:	409d      	lsls	r5, r3
 8009444:	432a      	orrs	r2, r5
 8009446:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800944a:	fa1f fe8c 	uxth.w	lr, ip
 800944e:	fbb1 f0f7 	udiv	r0, r1, r7
 8009452:	fb07 1510 	mls	r5, r7, r0, r1
 8009456:	0c11      	lsrs	r1, r2, #16
 8009458:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800945c:	fb00 f50e 	mul.w	r5, r0, lr
 8009460:	428d      	cmp	r5, r1
 8009462:	fa04 f403 	lsl.w	r4, r4, r3
 8009466:	d908      	bls.n	800947a <__udivmoddi4+0x256>
 8009468:	eb1c 0101 	adds.w	r1, ip, r1
 800946c:	f100 38ff 	add.w	r8, r0, #4294967295
 8009470:	d22f      	bcs.n	80094d2 <__udivmoddi4+0x2ae>
 8009472:	428d      	cmp	r5, r1
 8009474:	d92d      	bls.n	80094d2 <__udivmoddi4+0x2ae>
 8009476:	3802      	subs	r0, #2
 8009478:	4461      	add	r1, ip
 800947a:	1b49      	subs	r1, r1, r5
 800947c:	b292      	uxth	r2, r2
 800947e:	fbb1 f5f7 	udiv	r5, r1, r7
 8009482:	fb07 1115 	mls	r1, r7, r5, r1
 8009486:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800948a:	fb05 f10e 	mul.w	r1, r5, lr
 800948e:	4291      	cmp	r1, r2
 8009490:	d908      	bls.n	80094a4 <__udivmoddi4+0x280>
 8009492:	eb1c 0202 	adds.w	r2, ip, r2
 8009496:	f105 38ff 	add.w	r8, r5, #4294967295
 800949a:	d216      	bcs.n	80094ca <__udivmoddi4+0x2a6>
 800949c:	4291      	cmp	r1, r2
 800949e:	d914      	bls.n	80094ca <__udivmoddi4+0x2a6>
 80094a0:	3d02      	subs	r5, #2
 80094a2:	4462      	add	r2, ip
 80094a4:	1a52      	subs	r2, r2, r1
 80094a6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80094aa:	e739      	b.n	8009320 <__udivmoddi4+0xfc>
 80094ac:	4631      	mov	r1, r6
 80094ae:	4630      	mov	r0, r6
 80094b0:	e709      	b.n	80092c6 <__udivmoddi4+0xa2>
 80094b2:	4639      	mov	r1, r7
 80094b4:	e6e7      	b.n	8009286 <__udivmoddi4+0x62>
 80094b6:	4610      	mov	r0, r2
 80094b8:	e6fc      	b.n	80092b4 <__udivmoddi4+0x90>
 80094ba:	45c1      	cmp	r9, r8
 80094bc:	d2aa      	bcs.n	8009414 <__udivmoddi4+0x1f0>
 80094be:	ebb8 0e02 	subs.w	lr, r8, r2
 80094c2:	eb63 050c 	sbc.w	r5, r3, ip
 80094c6:	3801      	subs	r0, #1
 80094c8:	e7a4      	b.n	8009414 <__udivmoddi4+0x1f0>
 80094ca:	4645      	mov	r5, r8
 80094cc:	e7ea      	b.n	80094a4 <__udivmoddi4+0x280>
 80094ce:	4603      	mov	r3, r0
 80094d0:	e795      	b.n	80093fe <__udivmoddi4+0x1da>
 80094d2:	4640      	mov	r0, r8
 80094d4:	e7d1      	b.n	800947a <__udivmoddi4+0x256>
 80094d6:	46d0      	mov	r8, sl
 80094d8:	e77c      	b.n	80093d4 <__udivmoddi4+0x1b0>
 80094da:	3d02      	subs	r5, #2
 80094dc:	4462      	add	r2, ip
 80094de:	e733      	b.n	8009348 <__udivmoddi4+0x124>
 80094e0:	4608      	mov	r0, r1
 80094e2:	e70b      	b.n	80092fc <__udivmoddi4+0xd8>
 80094e4:	4464      	add	r4, ip
 80094e6:	3802      	subs	r0, #2
 80094e8:	e743      	b.n	8009372 <__udivmoddi4+0x14e>
 80094ea:	bf00      	nop

080094ec <__aeabi_idiv0>:
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop

080094f0 <osDelayTask>:
 * @brief Delay routine
 * @param[in] delay Amount of time for which the calling task should block
 **/

void osDelayTask(systime_t delay)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
   //Delay the task for the specified duration
   vTaskDelay(OS_MS_TO_SYSTICKS(delay));
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f00d f86b 	bl	80165d4 <vTaskDelay>
}
 80094fe:	bf00      	nop
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800950a:	f00d fd11 	bl	8016f30 <xTaskGetSchedulerState>
 800950e:	4603      	mov	r3, r0
 8009510:	2b01      	cmp	r3, #1
 8009512:	d001      	beq.n	8009518 <osSuspendAllTasks+0x12>
   {
      //Suspend all tasks
      vTaskSuspendAll();
 8009514:	f00d f902 	bl	801671c <vTaskSuspendAll>
   }
}
 8009518:	bf00      	nop
 800951a:	bd80      	pop	{r7, pc}

0800951c <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009520:	f00d fd06 	bl	8016f30 <xTaskGetSchedulerState>
 8009524:	4603      	mov	r3, r0
 8009526:	2b01      	cmp	r3, #1
 8009528:	d001      	beq.n	800952e <osResumeAllTasks+0x12>
   {
      //Resume all tasks
      xTaskResumeAll();
 800952a:	f00d f905 	bl	8016738 <xTaskResumeAll>
   }
}
 800952e:	bf00      	nop
 8009530:	bd80      	pop	{r7, pc}

08009532 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = pvPortMalloc(size);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f00e fc4e 	bl	8017ddc <pvPortMalloc>
 8009540:	60f8      	str	r0, [r7, #12]
   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 8009542:	68fb      	ldr	r3, [r7, #12]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

__weak_func void osFreeMem(void *p)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      vPortFree(p);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f00e fd08 	bl	8017f70 <vPortFree>
   }
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8009568:	b480      	push	{r7}
 800956a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800956c:	bf00      	nop
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4a06      	ldr	r2, [pc, #24]	; (800959c <vApplicationGetIdleTaskMemory+0x28>)
 8009584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	4a05      	ldr	r2, [pc, #20]	; (80095a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800958a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2280      	movs	r2, #128	; 0x80
 8009590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8009592:	bf00      	nop
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	bc80      	pop	{r7}
 800959a:	4770      	bx	lr
 800959c:	20000780 	.word	0x20000780
 80095a0:	200008f8 	.word	0x200008f8

080095a4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	4a07      	ldr	r2, [pc, #28]	; (80095d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80095b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	4a06      	ldr	r2, [pc, #24]	; (80095d4 <vApplicationGetTimerTaskMemory+0x30>)
 80095ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095c2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80095c4:	bf00      	nop
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bc80      	pop	{r7}
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	20000af8 	.word	0x20000af8
 80095d4:	20000c70 	.word	0x20000c70

080095d8 <vApplicationStackOverflowHook>:
 * @brief FreeRTOS stackoverflow detection callback
 **/

void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    signed char *pcTaskName )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
	fprintf(stderr, "Stack overflow in task '%s'!\r\n", pcTaskName);
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <vApplicationStackOverflowHook+0x30>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	4908      	ldr	r1, [pc, #32]	; (800960c <vApplicationStackOverflowHook+0x34>)
 80095ec:	4618      	mov	r0, r3
 80095ee:	f00e fe65 	bl	80182bc <fprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009604:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	while(1);
 8009606:	e7fe      	b.n	8009606 <vApplicationStackOverflowHook+0x2e>
 8009608:	200001c8 	.word	0x200001c8
 800960c:	0801f0f0 	.word	0x0801f0f0

08009610 <vApplicationMallocFailedHook>:
/**
 * @brief FreeRTOS memory allocation failed detection callback
 **/

void vApplicationMallocFailedHook( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
	fprintf(stderr, "OS memory allocation failed!\r\n");
 8009616:	4b09      	ldr	r3, [pc, #36]	; (800963c <vApplicationMallocFailedHook+0x2c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	221e      	movs	r2, #30
 800961e:	2101      	movs	r1, #1
 8009620:	4807      	ldr	r0, [pc, #28]	; (8009640 <vApplicationMallocFailedHook+0x30>)
 8009622:	f00f f80f 	bl	8018644 <fwrite>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	607b      	str	r3, [r7, #4]
}
 8009638:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	while(1);
 800963a:	e7fe      	b.n	800963a <vApplicationMallocFailedHook+0x2a>
 800963c:	200001c8 	.word	0x200001c8
 8009640:	0801f110 	.word	0x0801f110

08009644 <Int2Str>:
 * @param  intnum: The integer to be converted
 * @retval None
 **/

void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 800964e:	4b25      	ldr	r3, [pc, #148]	; (80096e4 <Int2Str+0xa0>)
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	2300      	movs	r3, #0
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	2300      	movs	r3, #0
 8009658:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 800965a:	2300      	movs	r3, #0
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	e038      	b.n	80096d2 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	fbb2 f3f3 	udiv	r3, r2, r3
 8009668:	b2da      	uxtb	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	1c59      	adds	r1, r3, #1
 800966e:	60f9      	str	r1, [r7, #12]
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	440b      	add	r3, r1
 8009674:	3230      	adds	r2, #48	; 0x30
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009682:	6939      	ldr	r1, [r7, #16]
 8009684:	fb01 f202 	mul.w	r2, r1, r2
 8009688:	1a9b      	subs	r3, r3, r2
 800968a:	603b      	str	r3, [r7, #0]
    divider /= 10;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	4a16      	ldr	r2, [pc, #88]	; (80096e8 <Int2Str+0xa4>)
 8009690:	fba2 2303 	umull	r2, r3, r2, r3
 8009694:	08db      	lsrs	r3, r3, #3
 8009696:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3b01      	subs	r3, #1
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	4413      	add	r3, r2
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	2b30      	cmp	r3, #48	; 0x30
 80096a4:	bf0c      	ite	eq
 80096a6:	2301      	moveq	r3, #1
 80096a8:	2300      	movne	r3, #0
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bf0c      	ite	eq
 80096b2:	2301      	moveq	r3, #1
 80096b4:	2300      	movne	r3, #0
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	4013      	ands	r3, r2
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <Int2Str+0x82>
    {
      pos = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	e002      	b.n	80096cc <Int2Str+0x88>
    }
    else
    {
      status++;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	3301      	adds	r3, #1
 80096ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	3301      	adds	r3, #1
 80096d0:	617b      	str	r3, [r7, #20]
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	d9c3      	bls.n	8009660 <Int2Str+0x1c>
    }
  }
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	bc80      	pop	{r7}
 80096e2:	4770      	bx	lr
 80096e4:	3b9aca00 	.word	0x3b9aca00
 80096e8:	cccccccd 	.word	0xcccccccd

080096ec <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	2300      	movs	r3, #0
 80096fc:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	2b30      	cmp	r3, #48	; 0x30
 8009708:	f040 80d7 	bne.w	80098ba <Str2Int+0x1ce>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3301      	adds	r3, #1
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b78      	cmp	r3, #120	; 0x78
 8009714:	d005      	beq.n	8009722 <Str2Int+0x36>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3301      	adds	r3, #1
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b58      	cmp	r3, #88	; 0x58
 800971e:	f040 80cc 	bne.w	80098ba <Str2Int+0x1ce>
  {
    i = 2;
 8009722:	2302      	movs	r3, #2
 8009724:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8009726:	e057      	b.n	80097d8 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	4413      	add	r3, r2
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b40      	cmp	r3, #64	; 0x40
 8009732:	d905      	bls.n	8009740 <Str2Int+0x54>
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	4413      	add	r3, r2
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b46      	cmp	r3, #70	; 0x46
 800973e:	d917      	bls.n	8009770 <Str2Int+0x84>
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	4413      	add	r3, r2
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b60      	cmp	r3, #96	; 0x60
 800974a:	d905      	bls.n	8009758 <Str2Int+0x6c>
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	4413      	add	r3, r2
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2b66      	cmp	r3, #102	; 0x66
 8009756:	d90b      	bls.n	8009770 <Str2Int+0x84>
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	4413      	add	r3, r2
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b2f      	cmp	r3, #47	; 0x2f
 8009762:	d936      	bls.n	80097d2 <Str2Int+0xe6>
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	4413      	add	r3, r2
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b39      	cmp	r3, #57	; 0x39
 800976e:	d830      	bhi.n	80097d2 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	440a      	add	r2, r1
 800977a:	7812      	ldrb	r2, [r2, #0]
 800977c:	2a2f      	cmp	r2, #47	; 0x2f
 800977e:	d90b      	bls.n	8009798 <Str2Int+0xac>
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	440a      	add	r2, r1
 8009786:	7812      	ldrb	r2, [r2, #0]
 8009788:	2a39      	cmp	r2, #57	; 0x39
 800978a:	d805      	bhi.n	8009798 <Str2Int+0xac>
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	440a      	add	r2, r1
 8009792:	7812      	ldrb	r2, [r2, #0]
 8009794:	3a30      	subs	r2, #48	; 0x30
 8009796:	e016      	b.n	80097c6 <Str2Int+0xda>
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	440a      	add	r2, r1
 800979e:	7812      	ldrb	r2, [r2, #0]
 80097a0:	2a40      	cmp	r2, #64	; 0x40
 80097a2:	d90b      	bls.n	80097bc <Str2Int+0xd0>
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	440a      	add	r2, r1
 80097aa:	7812      	ldrb	r2, [r2, #0]
 80097ac:	2a46      	cmp	r2, #70	; 0x46
 80097ae:	d805      	bhi.n	80097bc <Str2Int+0xd0>
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	440a      	add	r2, r1
 80097b6:	7812      	ldrb	r2, [r2, #0]
 80097b8:	3a37      	subs	r2, #55	; 0x37
 80097ba:	e004      	b.n	80097c6 <Str2Int+0xda>
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	440a      	add	r2, r1
 80097c2:	7812      	ldrb	r2, [r2, #0]
 80097c4:	3a57      	subs	r2, #87	; 0x57
 80097c6:	4413      	add	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	3301      	adds	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
 80097d0:	e002      	b.n	80097d8 <Str2Int+0xec>
        res = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
        break;
 80097d6:	e008      	b.n	80097ea <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2b0a      	cmp	r3, #10
 80097dc:	d805      	bhi.n	80097ea <Str2Int+0xfe>
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	4413      	add	r3, r2
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d19e      	bne.n	8009728 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	4413      	add	r3, r2
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d167      	bne.n	80098c6 <Str2Int+0x1da>
    {
      *p_intnum = val;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	601a      	str	r2, [r3, #0]
      res = 1;
 80097fc:	2301      	movs	r3, #1
 80097fe:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8009800:	e061      	b.n	80098c6 <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	4413      	add	r3, r2
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d105      	bne.n	800981a <Str2Int+0x12e>
      {
        *p_intnum = val;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 8009814:	2301      	movs	r3, #1
 8009816:	613b      	str	r3, [r7, #16]
 8009818:	e04c      	b.n	80098b4 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	4413      	add	r3, r2
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b6b      	cmp	r3, #107	; 0x6b
 8009824:	d005      	beq.n	8009832 <Str2Int+0x146>
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	4413      	add	r3, r2
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	2b4b      	cmp	r3, #75	; 0x4b
 8009830:	d10b      	bne.n	800984a <Str2Int+0x15e>
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d008      	beq.n	800984a <Str2Int+0x15e>
      {
        val = val << 10;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	029b      	lsls	r3, r3, #10
 800983c:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	601a      	str	r2, [r3, #0]
        res = 1;
 8009844:	2301      	movs	r3, #1
 8009846:	613b      	str	r3, [r7, #16]
 8009848:	e034      	b.n	80098b4 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	4413      	add	r3, r2
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b6d      	cmp	r3, #109	; 0x6d
 8009854:	d005      	beq.n	8009862 <Str2Int+0x176>
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	4413      	add	r3, r2
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	2b4d      	cmp	r3, #77	; 0x4d
 8009860:	d10b      	bne.n	800987a <Str2Int+0x18e>
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d008      	beq.n	800987a <Str2Int+0x18e>
      {
        val = val << 20;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	051b      	lsls	r3, r3, #20
 800986c:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	601a      	str	r2, [r3, #0]
        res = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	613b      	str	r3, [r7, #16]
 8009878:	e01c      	b.n	80098b4 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	4413      	add	r3, r2
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	2b2f      	cmp	r3, #47	; 0x2f
 8009884:	d913      	bls.n	80098ae <Str2Int+0x1c2>
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	4413      	add	r3, r2
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b39      	cmp	r3, #57	; 0x39
 8009890:	d80d      	bhi.n	80098ae <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	4619      	mov	r1, r3
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	4413      	add	r3, r2
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	440b      	add	r3, r1
 80098a8:	3b30      	subs	r3, #48	; 0x30
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	e002      	b.n	80098b4 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	613b      	str	r3, [r7, #16]
        break;
 80098b2:	e008      	b.n	80098c6 <Str2Int+0x1da>
      }
      i++;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	3301      	adds	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b0a      	cmp	r3, #10
 80098be:	d802      	bhi.n	80098c6 <Str2Int+0x1da>
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d19d      	bne.n	8009802 <Str2Int+0x116>
    }
  }

  return res;
 80098c6:	693b      	ldr	r3, [r7, #16]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	371c      	adds	r7, #28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr
	...

080098d4 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 80098e0:	e002      	b.n	80098e8 <Serial_PutString+0x14>
  {
    length++;
 80098e2:	89fb      	ldrh	r3, [r7, #14]
 80098e4:	3301      	adds	r3, #1
 80098e6:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 80098e8:	89fb      	ldrh	r3, [r7, #14]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	4413      	add	r3, r2
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1f6      	bne.n	80098e2 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 80098f4:	89fa      	ldrh	r2, [r7, #14]
 80098f6:	2364      	movs	r3, #100	; 0x64
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4803      	ldr	r0, [pc, #12]	; (8009908 <Serial_PutString+0x34>)
 80098fc:	f008 fd30 	bl	8012360 <HAL_UART_Transmit>
}
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	20001360 	.word	0x20001360

0800990c <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 8009916:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <Serial_PutByte+0x34>)
 8009918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991c:	2ba0      	cmp	r3, #160	; 0xa0
 800991e:	d103      	bne.n	8009928 <Serial_PutByte+0x1c>
  {
    UartHandle.gState = HAL_UART_STATE_READY;
 8009920:	4b07      	ldr	r3, [pc, #28]	; (8009940 <Serial_PutByte+0x34>)
 8009922:	2220      	movs	r2, #32
 8009924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 8009928:	1df9      	adds	r1, r7, #7
 800992a:	2364      	movs	r3, #100	; 0x64
 800992c:	2201      	movs	r2, #1
 800992e:	4804      	ldr	r0, [pc, #16]	; (8009940 <Serial_PutByte+0x34>)
 8009930:	f008 fd16 	bl	8012360 <HAL_UART_Transmit>
 8009934:	4603      	mov	r3, r0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20001360 	.word	0x20001360

08009944 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800994c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4313      	orrs	r3, r2
 800995a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800995c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4013      	ands	r3, r2
 8009966:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009968:	68fb      	ldr	r3, [r7, #12]
}
 800996a:	bf00      	nop
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	bc80      	pop	{r7}
 8009972:	4770      	bx	lr

08009974 <updateDevice>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool updateDevice()
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
	uint8_t c;
	bool status = false;
 800997a:	2300      	movs	r3, #0
 800997c:	71fb      	strb	r3, [r7, #7]
	bool bootReady = false;
 800997e:	2300      	movs	r3, #0
 8009980:	71bb      	strb	r3, [r7, #6]
	serialPutStr("E5 POR\n");
 8009982:	4815      	ldr	r0, [pc, #84]	; (80099d8 <updateDevice+0x64>)
 8009984:	f00b f98a 	bl	8014c9c <serialPutStr>
    do
    {
    	if(HAL_UART_Receive(&huart2, &c, 1, 100) == HAL_OK)
 8009988:	1d79      	adds	r1, r7, #5
 800998a:	2364      	movs	r3, #100	; 0x64
 800998c:	2201      	movs	r2, #1
 800998e:	4813      	ldr	r0, [pc, #76]	; (80099dc <updateDevice+0x68>)
 8009990:	f008 fd6c 	bl	801246c <HAL_UART_Receive>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d113      	bne.n	80099c2 <updateDevice+0x4e>
		{
    		switch(c)
 800999a:	797b      	ldrb	r3, [r7, #5]
 800999c:	2b61      	cmp	r3, #97	; 0x61
 800999e:	d002      	beq.n	80099a6 <updateDevice+0x32>
 80099a0:	2b62      	cmp	r3, #98	; 0x62
 80099a2:	d005      	beq.n	80099b0 <updateDevice+0x3c>
 80099a4:	e009      	b.n	80099ba <updateDevice+0x46>
    		{
    		case 'a':
    			status = true;
 80099a6:	2301      	movs	r3, #1
 80099a8:	71fb      	strb	r3, [r7, #7]
    			bootReady = true;
 80099aa:	2301      	movs	r3, #1
 80099ac:	71bb      	strb	r3, [r7, #6]
    			break;
 80099ae:	e008      	b.n	80099c2 <updateDevice+0x4e>

    		case 'b':
    			status = false;
 80099b0:	2300      	movs	r3, #0
 80099b2:	71fb      	strb	r3, [r7, #7]
    			bootReady = true;
 80099b4:	2301      	movs	r3, #1
 80099b6:	71bb      	strb	r3, [r7, #6]
    			break;
 80099b8:	e003      	b.n	80099c2 <updateDevice+0x4e>
    		default:
    			serialPutStr("Unknown Command\n");
 80099ba:	4809      	ldr	r0, [pc, #36]	; (80099e0 <updateDevice+0x6c>)
 80099bc:	f00b f96e 	bl	8014c9c <serialPutStr>
    			break;
 80099c0:	bf00      	nop
    		}
		}
    }while(!bootReady);
 80099c2:	79bb      	ldrb	r3, [r7, #6]
 80099c4:	f083 0301 	eor.w	r3, r3, #1
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1dc      	bne.n	8009988 <updateDevice+0x14>

	return status;
 80099ce:	79fb      	ldrb	r3, [r7, #7]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	0801f130 	.word	0x0801f130
 80099dc:	200011bc 	.word	0x200011bc
 80099e0:	0801f138 	.word	0x0801f138

080099e4 <__io_putchar>:

int __io_putchar(int ch)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
	uint8_t c;

	c = (uint8_t)ch;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	73fb      	strb	r3, [r7, #15]

	if(HAL_UART_Transmit(&huart2, &c, 1, 100) == HAL_OK)
 80099f2:	f107 010f 	add.w	r1, r7, #15
 80099f6:	2364      	movs	r3, #100	; 0x64
 80099f8:	2201      	movs	r2, #1
 80099fa:	4807      	ldr	r0, [pc, #28]	; (8009a18 <__io_putchar+0x34>)
 80099fc:	f008 fcb0 	bl	8012360 <HAL_UART_Transmit>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <__io_putchar+0x26>
		return ch;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	e001      	b.n	8009a0e <__io_putchar+0x2a>
	else
		return -1;
 8009a0a:	f04f 33ff 	mov.w	r3, #4294967295
	return -1;
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	200011bc 	.word	0x200011bc

08009a1c <ledTaskHandler>:
/**
 * @brief Led task routine (for debug purpose)
 **/

void ledTaskHandler(void const * argument)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8009a24:	2201      	movs	r2, #1
 8009a26:	2140      	movs	r1, #64	; 0x40
 8009a28:	4807      	ldr	r0, [pc, #28]	; (8009a48 <ledTaskHandler+0x2c>)
 8009a2a:	f005 f8b7 	bl	800eb9c <HAL_GPIO_WritePin>
		osDelay(100);
 8009a2e:	2064      	movs	r0, #100	; 0x64
 8009a30:	f00b fab5 	bl	8014f9e <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8009a34:	2200      	movs	r2, #0
 8009a36:	2140      	movs	r1, #64	; 0x40
 8009a38:	4803      	ldr	r0, [pc, #12]	; (8009a48 <ledTaskHandler+0x2c>)
 8009a3a:	f005 f8af 	bl	800eb9c <HAL_GPIO_WritePin>
		osDelay(900);
 8009a3e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8009a42:	f00b faac 	bl	8014f9e <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8009a46:	e7ed      	b.n	8009a24 <ledTaskHandler+0x8>
 8009a48:	48000400 	.word	0x48000400

08009a4c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8009a4c:	b5b0      	push	{r4, r5, r7, lr}
 8009a4e:	b0a4      	sub	sp, #144	; 0x90
 8009a50:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009a52:	f003 fa35 	bl	800cec0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8009a56:	f000 f8b7 	bl	8009bc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8009a5a:	f000 fb09 	bl	800a070 <MX_GPIO_Init>
	MX_ADC_Init();
 8009a5e:	f000 f90f 	bl	8009c80 <MX_ADC_Init>
	MX_LPUART1_UART_Init();
 8009a62:	f000 f99b 	bl	8009d9c <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 8009a66:	f000 f9e3 	bl	8009e30 <MX_USART2_UART_Init>
	MX_RTC_Init();
 8009a6a:	f000 fa2d 	bl	8009ec8 <MX_RTC_Init>
	MX_SPI2_Init();
 8009a6e:	f000 fac1 	bl	8009ff4 <MX_SPI2_Init>
	MX_I2C2_Init();
 8009a72:	f000 f953 	bl	8009d1c <MX_I2C2_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UartMutex */
	osMutexDef(UartMutex);
 8009a76:	2300      	movs	r3, #0
 8009a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8009a82:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009a86:	4618      	mov	r0, r3
 8009a88:	f00b fa9d 	bl	8014fc6 <osMutexCreate>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	4a41      	ldr	r2, [pc, #260]	; (8009b94 <main+0x148>)
 8009a90:	6013      	str	r3, [r2, #0]

	/* definition and creation of SpiMutex */
	osMutexDef(SpiMutex);
 8009a92:	2300      	movs	r3, #0
 8009a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 8009a9e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f00b fa8f 	bl	8014fc6 <osMutexCreate>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	4a3b      	ldr	r2, [pc, #236]	; (8009b98 <main+0x14c>)
 8009aac:	6013      	str	r3, [r2, #0]

	/* definition and creation of I2cMutex */
	osMutexDef(I2cMutex);
 8009aae:	2300      	movs	r3, #0
 8009ab0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	67fb      	str	r3, [r7, #124]	; 0x7c
	I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 8009ab6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009aba:	4618      	mov	r0, r3
 8009abc:	f00b fa83 	bl	8014fc6 <osMutexCreate>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	4a36      	ldr	r2, [pc, #216]	; (8009b9c <main+0x150>)
 8009ac4:	6013      	str	r3, [r2, #0]

	/* definition and creation of RtcMutex */
	osMutexDef(RtcMutex);
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	673b      	str	r3, [r7, #112]	; 0x70
 8009aca:	2300      	movs	r3, #0
 8009acc:	677b      	str	r3, [r7, #116]	; 0x74
	RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 8009ace:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f00b fa77 	bl	8014fc6 <osMutexCreate>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	4a31      	ldr	r2, [pc, #196]	; (8009ba0 <main+0x154>)
 8009adc:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */

	// definition and creation of iapMutex */
	osMutexDef(iapMutex);
 8009ade:	2300      	movs	r3, #0
 8009ae0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
	iapMutexHandle = osMutexCreate(osMutex(iapMutex));
 8009ae6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009aea:	4618      	mov	r0, r3
 8009aec:	f00b fa6b 	bl	8014fc6 <osMutexCreate>
 8009af0:	4603      	mov	r3, r0
 8009af2:	4a2c      	ldr	r2, [pc, #176]	; (8009ba4 <main+0x158>)
 8009af4:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of xQueue1 */
	osMessageQDef(xQueue1, 100, uint16_t);
 8009af6:	4b2c      	ldr	r3, [pc, #176]	; (8009ba8 <main+0x15c>)
 8009af8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009afe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 8009b02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f00b faf9 	bl	8015100 <osMessageCreate>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4a26      	ldr	r2, [pc, #152]	; (8009bac <main+0x160>)
 8009b12:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	// definition and creation of uartUserTask

	if(updateDevice())
 8009b14:	f7ff ff2e 	bl	8009974 <updateDevice>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d026      	beq.n	8009b6c <main+0x120>
	{
		osThreadDef(uartUserTask, uartUserTaskHandler, osPriorityNormal, 0, 500);
 8009b1e:	4b24      	ldr	r3, [pc, #144]	; (8009bb0 <main+0x164>)
 8009b20:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009b24:	461d      	mov	r5, r3
 8009b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		uartUserTaskHandle = osThreadCreate(osThread(uartUserTask), NULL);
 8009b32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009b36:	2100      	movs	r1, #0
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f00b f9e4 	bl	8014f06 <osThreadCreate>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	4a1c      	ldr	r2, [pc, #112]	; (8009bb4 <main+0x168>)
 8009b42:	6013      	str	r3, [r2, #0]

		// definition and creation of ledTask
		osThreadDef(ledTask, ledTaskHandler, osPriorityNormal, 0, 128);
 8009b44:	4b1c      	ldr	r3, [pc, #112]	; (8009bb8 <main+0x16c>)
 8009b46:	f107 0420 	add.w	r4, r7, #32
 8009b4a:	461d      	mov	r5, r3
 8009b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8009b58:	f107 0320 	add.w	r3, r7, #32
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f00b f9d1 	bl	8014f06 <osThreadCreate>
 8009b64:	4603      	mov	r3, r0
 8009b66:	4a15      	ldr	r2, [pc, #84]	; (8009bbc <main+0x170>)
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	e010      	b.n	8009b8e <main+0x142>
	}
	else
	{
		osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 500);
 8009b6c:	4b14      	ldr	r3, [pc, #80]	; (8009bc0 <main+0x174>)
 8009b6e:	1d3c      	adds	r4, r7, #4
 8009b70:	461d      	mov	r5, r3
 8009b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 8009b7e:	1d3b      	adds	r3, r7, #4
 8009b80:	2100      	movs	r1, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f00b f9bf 	bl	8014f06 <osThreadCreate>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	4a0e      	ldr	r2, [pc, #56]	; (8009bc4 <main+0x178>)
 8009b8c:	6013      	str	r3, [r2, #0]


	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8009b8e:	f00b f9b3 	bl	8014ef8 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8009b92:	e7fe      	b.n	8009b92 <main+0x146>
 8009b94:	200012f4 	.word	0x200012f4
 8009b98:	200012f8 	.word	0x200012f8
 8009b9c:	200012fc 	.word	0x200012fc
 8009ba0:	20001300 	.word	0x20001300
 8009ba4:	20001304 	.word	0x20001304
 8009ba8:	0801f164 	.word	0x0801f164
 8009bac:	200012f0 	.word	0x200012f0
 8009bb0:	0801f184 	.word	0x0801f184
 8009bb4:	2000130c 	.word	0x2000130c
 8009bb8:	0801f1a8 	.word	0x0801f1a8
 8009bbc:	20001308 	.word	0x20001308
 8009bc0:	0801f1d4 	.word	0x0801f1d4
 8009bc4:	200012ec 	.word	0x200012ec

08009bc8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b09a      	sub	sp, #104	; 0x68
 8009bcc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009bce:	f107 0320 	add.w	r3, r7, #32
 8009bd2:	2248      	movs	r2, #72	; 0x48
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f00e fe5c 	bl	8018894 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009bdc:	f107 0308 	add.w	r3, r7, #8
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	605a      	str	r2, [r3, #4]
 8009be6:	609a      	str	r2, [r3, #8]
 8009be8:	60da      	str	r2, [r3, #12]
 8009bea:	611a      	str	r2, [r3, #16]
 8009bec:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009bee:	4b23      	ldr	r3, [pc, #140]	; (8009c7c <SystemClock_Config+0xb4>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009bf6:	4a21      	ldr	r2, [pc, #132]	; (8009c7c <SystemClock_Config+0xb4>)
 8009bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	4b1f      	ldr	r3, [pc, #124]	; (8009c7c <SystemClock_Config+0xb4>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c06:	607b      	str	r3, [r7, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8009c0a:	232a      	movs	r3, #42	; 0x2a
 8009c0c:	623b      	str	r3, [r7, #32]
			|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c12:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009c14:	2301      	movs	r3, #1
 8009c16:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009c18:	2340      	movs	r3, #64	; 0x40
 8009c1a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8009c20:	23b0      	movs	r3, #176	; 0xb0
 8009c22:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8009c24:	2300      	movs	r3, #0
 8009c26:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c30:	f107 0320 	add.w	r3, r7, #32
 8009c34:	4618      	mov	r0, r3
 8009c36:	f005 fb97 	bl	800f368 <HAL_RCC_OscConfig>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 8009c40:	f000 fab2 	bl	800a1a8 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8009c44:	234f      	movs	r3, #79	; 0x4f
 8009c46:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009c50:	2300      	movs	r3, #0
 8009c52:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009c54:	2300      	movs	r3, #0
 8009c56:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009c5c:	f107 0308 	add.w	r3, r7, #8
 8009c60:	2102      	movs	r1, #2
 8009c62:	4618      	mov	r0, r3
 8009c64:	f005 ff02 	bl	800fa6c <HAL_RCC_ClockConfig>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8009c6e:	f000 fa9b 	bl	800a1a8 <Error_Handler>
	}
}
 8009c72:	bf00      	nop
 8009c74:	3768      	adds	r7, #104	; 0x68
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	58000400 	.word	0x58000400

08009c80 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC;
 8009c84:	4b23      	ldr	r3, [pc, #140]	; (8009d14 <MX_ADC_Init+0x94>)
 8009c86:	4a24      	ldr	r2, [pc, #144]	; (8009d18 <MX_ADC_Init+0x98>)
 8009c88:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8009c8a:	4b22      	ldr	r3, [pc, #136]	; (8009d14 <MX_ADC_Init+0x94>)
 8009c8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009c90:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8009c92:	4b20      	ldr	r3, [pc, #128]	; (8009d14 <MX_ADC_Init+0x94>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009c98:	4b1e      	ldr	r3, [pc, #120]	; (8009d14 <MX_ADC_Init+0x94>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009c9e:	4b1d      	ldr	r3, [pc, #116]	; (8009d14 <MX_ADC_Init+0x94>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009ca4:	4b1b      	ldr	r3, [pc, #108]	; (8009d14 <MX_ADC_Init+0x94>)
 8009ca6:	2204      	movs	r2, #4
 8009ca8:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8009caa:	4b1a      	ldr	r3, [pc, #104]	; (8009d14 <MX_ADC_Init+0x94>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8009cb0:	4b18      	ldr	r3, [pc, #96]	; (8009d14 <MX_ADC_Init+0x94>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8009cb6:	4b17      	ldr	r3, [pc, #92]	; (8009d14 <MX_ADC_Init+0x94>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	769a      	strb	r2, [r3, #26]
	hadc.Init.NbrOfConversion = 1;
 8009cbc:	4b15      	ldr	r3, [pc, #84]	; (8009d14 <MX_ADC_Init+0x94>)
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	61da      	str	r2, [r3, #28]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8009cc2:	4b14      	ldr	r3, [pc, #80]	; (8009d14 <MX_ADC_Init+0x94>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009cca:	4b12      	ldr	r3, [pc, #72]	; (8009d14 <MX_ADC_Init+0x94>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009cd0:	4b10      	ldr	r3, [pc, #64]	; (8009d14 <MX_ADC_Init+0x94>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <MX_ADC_Init+0x94>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009cde:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <MX_ADC_Init+0x94>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8009ce4:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <MX_ADC_Init+0x94>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8009cea:	4b0a      	ldr	r3, [pc, #40]	; (8009d14 <MX_ADC_Init+0x94>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.OversamplingMode = DISABLE;
 8009cf0:	4b08      	ldr	r3, [pc, #32]	; (8009d14 <MX_ADC_Init+0x94>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8009cf8:	4b06      	ldr	r3, [pc, #24]	; (8009d14 <MX_ADC_Init+0x94>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8009cfe:	4805      	ldr	r0, [pc, #20]	; (8009d14 <MX_ADC_Init+0x94>)
 8009d00:	f003 face 	bl	800d2a0 <HAL_ADC_Init>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <MX_ADC_Init+0x8e>
	{
		Error_Handler();
 8009d0a:	f000 fa4d 	bl	800a1a8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8009d0e:	bf00      	nop
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20001070 	.word	0x20001070
 8009d18:	40012400 	.word	0x40012400

08009d1c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8009d20:	4b1b      	ldr	r3, [pc, #108]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d22:	4a1c      	ldr	r2, [pc, #112]	; (8009d94 <MX_I2C2_Init+0x78>)
 8009d24:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8009d26:	4b1a      	ldr	r3, [pc, #104]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d28:	4a1b      	ldr	r2, [pc, #108]	; (8009d98 <MX_I2C2_Init+0x7c>)
 8009d2a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8009d2c:	4b18      	ldr	r3, [pc, #96]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d32:	4b17      	ldr	r3, [pc, #92]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d34:	2201      	movs	r2, #1
 8009d36:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d38:	4b15      	ldr	r3, [pc, #84]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8009d3e:	4b14      	ldr	r3, [pc, #80]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009d44:	4b12      	ldr	r3, [pc, #72]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d4a:	4b11      	ldr	r3, [pc, #68]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d50:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009d56:	480e      	ldr	r0, [pc, #56]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d58:	f004 ff37 	bl	800ebca <HAL_I2C_Init>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8009d62:	f000 fa21 	bl	800a1a8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009d66:	2100      	movs	r1, #0
 8009d68:	4809      	ldr	r0, [pc, #36]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d6a:	f004 ffbd 	bl	800ece8 <HAL_I2CEx_ConfigAnalogFilter>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8009d74:	f000 fa18 	bl	800a1a8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009d78:	2100      	movs	r1, #0
 8009d7a:	4805      	ldr	r0, [pc, #20]	; (8009d90 <MX_I2C2_Init+0x74>)
 8009d7c:	f004 fffe 	bl	800ed7c <HAL_I2CEx_ConfigDigitalFilter>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8009d86:	f000 fa0f 	bl	800a1a8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8009d8a:	bf00      	nop
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	200010d4 	.word	0x200010d4
 8009d94:	40005800 	.word	0x40005800
 8009d98:	20303e5d 	.word	0x20303e5d

08009d9c <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8009da0:	4b21      	ldr	r3, [pc, #132]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009da2:	4a22      	ldr	r2, [pc, #136]	; (8009e2c <MX_LPUART1_UART_Init+0x90>)
 8009da4:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
 8009da6:	4b20      	ldr	r3, [pc, #128]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009da8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009dac:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009dae:	4b1e      	ldr	r3, [pc, #120]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009db4:	4b1c      	ldr	r3, [pc, #112]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009dba:	4b1b      	ldr	r3, [pc, #108]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_RX;
 8009dc0:	4b19      	ldr	r3, [pc, #100]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009dc2:	2204      	movs	r2, #4
 8009dc4:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009dc6:	4b18      	ldr	r3, [pc, #96]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009dcc:	4b16      	ldr	r3, [pc, #88]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009dd2:	4b15      	ldr	r3, [pc, #84]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009dd8:	4b13      	ldr	r3, [pc, #76]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8009dde:	4812      	ldr	r0, [pc, #72]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009de0:	f008 fa66 	bl	80122b0 <HAL_HalfDuplex_Init>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <MX_LPUART1_UART_Init+0x52>
	{
		Error_Handler();
 8009dea:	f000 f9dd 	bl	800a1a8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009dee:	2100      	movs	r1, #0
 8009df0:	480d      	ldr	r0, [pc, #52]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009df2:	f00a faee 	bl	80143d2 <HAL_UARTEx_SetTxFifoThreshold>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <MX_LPUART1_UART_Init+0x64>
	{
		Error_Handler();
 8009dfc:	f000 f9d4 	bl	800a1a8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e00:	2100      	movs	r1, #0
 8009e02:	4809      	ldr	r0, [pc, #36]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009e04:	f00a fb23 	bl	801444e <HAL_UARTEx_SetRxFifoThreshold>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <MX_LPUART1_UART_Init+0x76>
	{
		Error_Handler();
 8009e0e:	f000 f9cb 	bl	800a1a8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8009e12:	4805      	ldr	r0, [pc, #20]	; (8009e28 <MX_LPUART1_UART_Init+0x8c>)
 8009e14:	f00a faa5 	bl	8014362 <HAL_UARTEx_DisableFifoMode>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <MX_LPUART1_UART_Init+0x86>
	{
		Error_Handler();
 8009e1e:	f000 f9c3 	bl	800a1a8 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8009e22:	bf00      	nop
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	20001128 	.word	0x20001128
 8009e2c:	40008000 	.word	0x40008000

08009e30 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8009e34:	4b22      	ldr	r3, [pc, #136]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e36:	4a23      	ldr	r2, [pc, #140]	; (8009ec4 <MX_USART2_UART_Init+0x94>)
 8009e38:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8009e3a:	4b21      	ldr	r3, [pc, #132]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009e40:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009e42:	4b1f      	ldr	r3, [pc, #124]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8009e48:	4b1d      	ldr	r3, [pc, #116]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8009e4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8009e54:	4b1a      	ldr	r3, [pc, #104]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e56:	220c      	movs	r2, #12
 8009e58:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e5a:	4b19      	ldr	r3, [pc, #100]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e60:	4b17      	ldr	r3, [pc, #92]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e62:	2200      	movs	r2, #0
 8009e64:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009e66:	4b16      	ldr	r3, [pc, #88]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009e6c:	4b14      	ldr	r3, [pc, #80]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009e72:	4b13      	ldr	r3, [pc, #76]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8009e78:	4811      	ldr	r0, [pc, #68]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e7a:	f008 f9c9 	bl	8012210 <HAL_UART_Init>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d001      	beq.n	8009e88 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8009e84:	f000 f990 	bl	800a1a8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e88:	2100      	movs	r1, #0
 8009e8a:	480d      	ldr	r0, [pc, #52]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e8c:	f00a faa1 	bl	80143d2 <HAL_UARTEx_SetTxFifoThreshold>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8009e96:	f000 f987 	bl	800a1a8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	4808      	ldr	r0, [pc, #32]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009e9e:	f00a fad6 	bl	801444e <HAL_UARTEx_SetRxFifoThreshold>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d001      	beq.n	8009eac <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8009ea8:	f000 f97e 	bl	800a1a8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009eac:	4804      	ldr	r0, [pc, #16]	; (8009ec0 <MX_USART2_UART_Init+0x90>)
 8009eae:	f00a fa58 	bl	8014362 <HAL_UARTEx_DisableFifoMode>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8009eb8:	f000 f976 	bl	800a1a8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8009ebc:	bf00      	nop
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	200011bc 	.word	0x200011bc
 8009ec4:	40004400 	.word	0x40004400

08009ec8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b092      	sub	sp, #72	; 0x48
 8009ecc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8009ece:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	605a      	str	r2, [r3, #4]
 8009ed8:	609a      	str	r2, [r3, #8]
 8009eda:	60da      	str	r2, [r3, #12]
 8009edc:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8009ede:	2300      	movs	r3, #0
 8009ee0:	633b      	str	r3, [r7, #48]	; 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 8009ee2:	1d3b      	adds	r3, r7, #4
 8009ee4:	222c      	movs	r2, #44	; 0x2c
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f00e fcd3 	bl	8018894 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8009eee:	4b3f      	ldr	r3, [pc, #252]	; (8009fec <MX_RTC_Init+0x124>)
 8009ef0:	4a3f      	ldr	r2, [pc, #252]	; (8009ff0 <MX_RTC_Init+0x128>)
 8009ef2:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009ef4:	4b3d      	ldr	r3, [pc, #244]	; (8009fec <MX_RTC_Init+0x124>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8009efa:	4b3c      	ldr	r3, [pc, #240]	; (8009fec <MX_RTC_Init+0x124>)
 8009efc:	227f      	movs	r2, #127	; 0x7f
 8009efe:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8009f00:	4b3a      	ldr	r3, [pc, #232]	; (8009fec <MX_RTC_Init+0x124>)
 8009f02:	22ff      	movs	r2, #255	; 0xff
 8009f04:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009f06:	4b39      	ldr	r3, [pc, #228]	; (8009fec <MX_RTC_Init+0x124>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009f0c:	4b37      	ldr	r3, [pc, #220]	; (8009fec <MX_RTC_Init+0x124>)
 8009f0e:	2200      	movs	r2, #0
 8009f10:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009f12:	4b36      	ldr	r3, [pc, #216]	; (8009fec <MX_RTC_Init+0x124>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009f18:	4b34      	ldr	r3, [pc, #208]	; (8009fec <MX_RTC_Init+0x124>)
 8009f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009f1e:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8009f20:	4b32      	ldr	r3, [pc, #200]	; (8009fec <MX_RTC_Init+0x124>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8009f26:	4b31      	ldr	r3, [pc, #196]	; (8009fec <MX_RTC_Init+0x124>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009f2c:	482f      	ldr	r0, [pc, #188]	; (8009fec <MX_RTC_Init+0x124>)
 8009f2e:	f006 fa97 	bl	8010460 <HAL_RTC_Init>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <MX_RTC_Init+0x74>
	{
		Error_Handler();
 8009f38:	f000 f936 	bl	800a1a8 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	sTime.Minutes = 0x0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	sTime.Seconds = 0x0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009f52:	2300      	movs	r3, #0
 8009f54:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009f56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	4823      	ldr	r0, [pc, #140]	; (8009fec <MX_RTC_Init+0x124>)
 8009f60:	f006 fb00 	bl	8010564 <HAL_RTC_SetTime>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <MX_RTC_Init+0xa6>
	{
		Error_Handler();
 8009f6a:	f000 f91d 	bl	800a1a8 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 8009f74:	2301      	movs	r3, #1
 8009f76:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sDate.Date = 0x1;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sDate.Year = 0x0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009f86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4817      	ldr	r0, [pc, #92]	; (8009fec <MX_RTC_Init+0x124>)
 8009f90:	f006 fb84 	bl	801069c <HAL_RTC_SetDate>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <MX_RTC_Init+0xd6>
	{
		Error_Handler();
 8009f9a:	f000 f905 	bl	800a1a8 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8009fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009fce:	1d3b      	adds	r3, r7, #4
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4805      	ldr	r0, [pc, #20]	; (8009fec <MX_RTC_Init+0x124>)
 8009fd6:	f006 fbe7 	bl	80107a8 <HAL_RTC_SetAlarm>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <MX_RTC_Init+0x11c>
	{
		Error_Handler();
 8009fe0:	f000 f8e2 	bl	800a1a8 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8009fe4:	bf00      	nop
 8009fe6:	3748      	adds	r7, #72	; 0x48
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20001250 	.word	0x20001250
 8009ff0:	40002800 	.word	0x40002800

08009ff4 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8009ff8:	4b1b      	ldr	r3, [pc, #108]	; (800a068 <MX_SPI2_Init+0x74>)
 8009ffa:	4a1c      	ldr	r2, [pc, #112]	; (800a06c <MX_SPI2_Init+0x78>)
 8009ffc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8009ffe:	4b1a      	ldr	r3, [pc, #104]	; (800a068 <MX_SPI2_Init+0x74>)
 800a000:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a004:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a006:	4b18      	ldr	r3, [pc, #96]	; (800a068 <MX_SPI2_Init+0x74>)
 800a008:	2200      	movs	r2, #0
 800a00a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a00c:	4b16      	ldr	r3, [pc, #88]	; (800a068 <MX_SPI2_Init+0x74>)
 800a00e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a012:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a014:	4b14      	ldr	r3, [pc, #80]	; (800a068 <MX_SPI2_Init+0x74>)
 800a016:	2200      	movs	r2, #0
 800a018:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a01a:	4b13      	ldr	r3, [pc, #76]	; (800a068 <MX_SPI2_Init+0x74>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800a020:	4b11      	ldr	r3, [pc, #68]	; (800a068 <MX_SPI2_Init+0x74>)
 800a022:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a026:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a028:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <MX_SPI2_Init+0x74>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a02e:	4b0e      	ldr	r3, [pc, #56]	; (800a068 <MX_SPI2_Init+0x74>)
 800a030:	2200      	movs	r2, #0
 800a032:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a034:	4b0c      	ldr	r3, [pc, #48]	; (800a068 <MX_SPI2_Init+0x74>)
 800a036:	2200      	movs	r2, #0
 800a038:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a03a:	4b0b      	ldr	r3, [pc, #44]	; (800a068 <MX_SPI2_Init+0x74>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800a040:	4b09      	ldr	r3, [pc, #36]	; (800a068 <MX_SPI2_Init+0x74>)
 800a042:	2207      	movs	r2, #7
 800a044:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a046:	4b08      	ldr	r3, [pc, #32]	; (800a068 <MX_SPI2_Init+0x74>)
 800a048:	2200      	movs	r2, #0
 800a04a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a04c:	4b06      	ldr	r3, [pc, #24]	; (800a068 <MX_SPI2_Init+0x74>)
 800a04e:	2200      	movs	r2, #0
 800a050:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a052:	4805      	ldr	r0, [pc, #20]	; (800a068 <MX_SPI2_Init+0x74>)
 800a054:	f006 fd61 	bl	8010b1a <HAL_SPI_Init>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 800a05e:	f000 f8a3 	bl	800a1a8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800a062:	bf00      	nop
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20001288 	.word	0x20001288
 800a06c:	40003800 	.word	0x40003800

0800a070 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a076:	1d3b      	adds	r3, r7, #4
 800a078:	2200      	movs	r2, #0
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	605a      	str	r2, [r3, #4]
 800a07e:	609a      	str	r2, [r3, #8]
 800a080:	60da      	str	r2, [r3, #12]
 800a082:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a084:	2001      	movs	r0, #1
 800a086:	f7ff fc5d 	bl	8009944 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a08a:	2002      	movs	r0, #2
 800a08c:	f7ff fc5a 	bl	8009944 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800a090:	2004      	movs	r0, #4
 800a092:	f7ff fc57 	bl	8009944 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 800a096:	2200      	movs	r2, #0
 800a098:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800a09c:	481e      	ldr	r0, [pc, #120]	; (800a118 <MX_GPIO_Init+0xa8>)
 800a09e:	f004 fd7d 	bl	800eb9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f240 2101 	movw	r1, #513	; 0x201
 800a0a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0ac:	f004 fd76 	bl	800eb9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2102      	movs	r1, #2
 800a0b4:	4819      	ldr	r0, [pc, #100]	; (800a11c <MX_GPIO_Init+0xac>)
 800a0b6:	f004 fd71 	bl	800eb9c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ADC_SW_Pin FLASH_CS_Pin MB_OC_Pin LED_Pin */
	GPIO_InitStruct.Pin = ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin|LED_Pin;
 800a0ba:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 800a0be:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0cc:	1d3b      	adds	r3, r7, #4
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4811      	ldr	r0, [pc, #68]	; (800a118 <MX_GPIO_Init+0xa8>)
 800a0d2:	f004 fb35 	bl	800e740 <HAL_GPIO_Init>

	/*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
	GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 800a0d6:	f240 2301 	movw	r3, #513	; 0x201
 800a0da:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0e8:	1d3b      	adds	r3, r7, #4
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0f0:	f004 fb26 	bl	800e740 <HAL_GPIO_Init>

	/*Configure GPIO pin : MB_CTL_Pin */
	GPIO_InitStruct.Pin = MB_CTL_Pin;
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a100:	2300      	movs	r3, #0
 800a102:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 800a104:	1d3b      	adds	r3, r7, #4
 800a106:	4619      	mov	r1, r3
 800a108:	4804      	ldr	r0, [pc, #16]	; (800a11c <MX_GPIO_Init+0xac>)
 800a10a:	f004 fb19 	bl	800e740 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800a10e:	bf00      	nop
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	48000400 	.word	0x48000400
 800a11c:	48000800 	.word	0x48000800

0800a120 <Get_AdcHandle>:
	osDelay(Delay);
}


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
	return &hadc;
 800a124:	4b02      	ldr	r3, [pc, #8]	; (800a130 <Get_AdcHandle+0x10>)
}
 800a126:	4618      	mov	r0, r3
 800a128:	46bd      	mov	sp, r7
 800a12a:	bc80      	pop	{r7}
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	20001070 	.word	0x20001070

0800a134 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 800a134:	b480      	push	{r7}
 800a136:	af00      	add	r7, sp, #0
	return &huart2;
 800a138:	4b02      	ldr	r3, [pc, #8]	; (800a144 <Get_DebugHandle+0x10>)
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bc80      	pop	{r7}
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	200011bc 	.word	0x200011bc

0800a148 <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 800a148:	b480      	push	{r7}
 800a14a:	af00      	add	r7, sp, #0
	return &hlpuart1;;
 800a14c:	4b02      	ldr	r3, [pc, #8]	; (800a158 <Get_SonarHandle+0x10>)
}
 800a14e:	4618      	mov	r0, r3
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	20001128 	.word	0x20001128

0800a15c <Get_SpiHandle>:
{
	return &hrtc;
}

SPI_HandleTypeDef   *Get_SpiHandle(void)
{
 800a15c:	b480      	push	{r7}
 800a15e:	af00      	add	r7, sp, #0
	return &hspi2;
 800a160:	4b02      	ldr	r3, [pc, #8]	; (800a16c <Get_SpiHandle+0x10>)
}
 800a162:	4618      	mov	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	bc80      	pop	{r7}
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	20001288 	.word	0x20001288

0800a170 <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 800a170:	b480      	push	{r7}
 800a172:	af00      	add	r7, sp, #0
	return xQueue1Handle;;
 800a174:	4b02      	ldr	r3, [pc, #8]	; (800a180 <Get_TerminalQueueHandle+0x10>)
 800a176:	681b      	ldr	r3, [r3, #0]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bc80      	pop	{r7}
 800a17e:	4770      	bx	lr
 800a180:	200012f0 	.word	0x200012f0

0800a184 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a04      	ldr	r2, [pc, #16]	; (800a1a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d101      	bne.n	800a19a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800a196:	f002 feb3 	bl	800cf00 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800a19a:	bf00      	nop
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	40012c00 	.word	0x40012c00

0800a1a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a1ac:	b672      	cpsid	i
}
 800a1ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800a1b0:	e7fe      	b.n	800a1b0 <Error_Handler+0x8>

0800a1b2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800a1b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a1ca:	bf00      	nop
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bc80      	pop	{r7}
 800a1d0:	4770      	bx	lr

0800a1d2 <LL_AHB2_GRP1_EnableClock>:
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a1da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a1ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
}
 800a1f8:	bf00      	nop
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bc80      	pop	{r7}
 800a200:	4770      	bx	lr

0800a202 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a20a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a20e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4313      	orrs	r3, r2
 800a218:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a21a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a21e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4013      	ands	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a226:	68fb      	ldr	r3, [r7, #12]
}
 800a228:	bf00      	nop
 800a22a:	3714      	adds	r7, #20
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bc80      	pop	{r7}
 800a230:	4770      	bx	lr

0800a232 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800a232:	b480      	push	{r7}
 800a234:	b085      	sub	sp, #20
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800a23a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a23e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4313      	orrs	r3, r2
 800a248:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800a24a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a24e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4013      	ands	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a256:	68fb      	ldr	r3, [r7, #12]
}
 800a258:	bf00      	nop
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bc80      	pop	{r7}
 800a260:	4770      	bx	lr

0800a262 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800a262:	b480      	push	{r7}
 800a264:	b083      	sub	sp, #12
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800a26a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a26e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	43db      	mvns	r3, r3
 800a274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a278:	4013      	ands	r3, r2
 800a27a:	658b      	str	r3, [r1, #88]	; 0x58
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	bc80      	pop	{r7}
 800a284:	4770      	bx	lr

0800a286 <LL_APB1_GRP2_DisableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_DisableClock(uint32_t Periphs)
{
 800a286:	b480      	push	{r7}
 800a288:	b083      	sub	sp, #12
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800a28e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a292:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	43db      	mvns	r3, r3
 800a298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a29c:	4013      	ands	r3, r2
 800a29e:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bc80      	pop	{r7}
 800a2a8:	4770      	bx	lr

0800a2aa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b085      	sub	sp, #20
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a2b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a2b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a2c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
}
 800a2d0:	bf00      	nop
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bc80      	pop	{r7}
 800a2d8:	4770      	bx	lr

0800a2da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a2de:	2200      	movs	r2, #0
 800a2e0:	210f      	movs	r1, #15
 800a2e2:	f06f 0001 	mvn.w	r0, #1
 800a2e6:	f003 ff1e 	bl	800e126 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a2ea:	bf00      	nop
 800a2ec:	bd80      	pop	{r7, pc}
	...

0800a2f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2f8:	f107 030c 	add.w	r3, r7, #12
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	601a      	str	r2, [r3, #0]
 800a300:	605a      	str	r2, [r3, #4]
 800a302:	609a      	str	r2, [r3, #8]
 800a304:	60da      	str	r2, [r3, #12]
 800a306:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a0c      	ldr	r2, [pc, #48]	; (800a340 <HAL_ADC_MspInit+0x50>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d112      	bne.n	800a338 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800a312:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a316:	f7ff ffc8 	bl	800a2aa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a31a:	2002      	movs	r0, #2
 800a31c:	f7ff ff59 	bl	800a1d2 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a320:	2308      	movs	r3, #8
 800a322:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a324:	2303      	movs	r3, #3
 800a326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a32c:	f107 030c 	add.w	r3, r7, #12
 800a330:	4619      	mov	r1, r3
 800a332:	4804      	ldr	r0, [pc, #16]	; (800a344 <HAL_ADC_MspInit+0x54>)
 800a334:	f004 fa04 	bl	800e740 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 800a338:	bf00      	nop
 800a33a:	3720      	adds	r7, #32
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	40012400 	.word	0x40012400
 800a344:	48000400 	.word	0x48000400

0800a348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b096      	sub	sp, #88	; 0x58
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a350:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a354:	2200      	movs	r2, #0
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	605a      	str	r2, [r3, #4]
 800a35a:	609a      	str	r2, [r3, #8]
 800a35c:	60da      	str	r2, [r3, #12]
 800a35e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a360:	f107 030c 	add.w	r3, r7, #12
 800a364:	2238      	movs	r2, #56	; 0x38
 800a366:	2100      	movs	r1, #0
 800a368:	4618      	mov	r0, r3
 800a36a:	f00e fa93 	bl	8018894 <memset>
  if(hi2c->Instance==I2C2)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a21      	ldr	r2, [pc, #132]	; (800a3f8 <HAL_I2C_MspInit+0xb0>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d13b      	bne.n	800a3f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a378:	2380      	movs	r3, #128	; 0x80
 800a37a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a37c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800a380:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a382:	f107 030c 	add.w	r3, r7, #12
 800a386:	4618      	mov	r0, r3
 800a388:	f005 ff50 	bl	801022c <HAL_RCCEx_PeriphCLKConfig>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800a392:	f7ff ff09 	bl	800a1a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a396:	2001      	movs	r0, #1
 800a398:	f7ff ff1b 	bl	800a1d2 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a39c:	2002      	movs	r0, #2
 800a39e:	f7ff ff18 	bl	800a1d2 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a3a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a3a8:	2312      	movs	r3, #18
 800a3aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a3b4:	2304      	movs	r3, #4
 800a3b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3bc:	4619      	mov	r1, r3
 800a3be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a3c2:	f004 f9bd 	bl	800e740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a3c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a3cc:	2312      	movs	r3, #18
 800a3ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a3d8:	2304      	movs	r3, #4
 800a3da:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4806      	ldr	r0, [pc, #24]	; (800a3fc <HAL_I2C_MspInit+0xb4>)
 800a3e4:	f004 f9ac 	bl	800e740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a3e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a3ec:	f7ff ff09 	bl	800a202 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800a3f0:	bf00      	nop
 800a3f2:	3758      	adds	r7, #88	; 0x58
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	40005800 	.word	0x40005800
 800a3fc:	48000400 	.word	0x48000400

0800a400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b096      	sub	sp, #88	; 0x58
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a408:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	605a      	str	r2, [r3, #4]
 800a412:	609a      	str	r2, [r3, #8]
 800a414:	60da      	str	r2, [r3, #12]
 800a416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a418:	f107 030c 	add.w	r3, r7, #12
 800a41c:	2238      	movs	r2, #56	; 0x38
 800a41e:	2100      	movs	r1, #0
 800a420:	4618      	mov	r0, r3
 800a422:	f00e fa37 	bl	8018894 <memset>
  if(huart->Instance==LPUART1)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a30      	ldr	r2, [pc, #192]	; (800a4ec <HAL_UART_MspInit+0xec>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d125      	bne.n	800a47c <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a430:	2320      	movs	r3, #32
 800a432:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800a434:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a438:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a43a:	f107 030c 	add.w	r3, r7, #12
 800a43e:	4618      	mov	r0, r3
 800a440:	f005 fef4 	bl	801022c <HAL_RCCEx_PeriphCLKConfig>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a44a:	f7ff fead 	bl	800a1a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a44e:	2001      	movs	r0, #1
 800a450:	f7ff feef 	bl	800a232 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a454:	2004      	movs	r0, #4
 800a456:	f7ff febc 	bl	800a1d2 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 800a45a:	2301      	movs	r3, #1
 800a45c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a45e:	2312      	movs	r3, #18
 800a460:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a462:	2301      	movs	r3, #1
 800a464:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a466:	2300      	movs	r3, #0
 800a468:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a46a:	2308      	movs	r3, #8
 800a46c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a46e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a472:	4619      	mov	r1, r3
 800a474:	481e      	ldr	r0, [pc, #120]	; (800a4f0 <HAL_UART_MspInit+0xf0>)
 800a476:	f004 f963 	bl	800e740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a47a:	e033      	b.n	800a4e4 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a1c      	ldr	r2, [pc, #112]	; (800a4f4 <HAL_UART_MspInit+0xf4>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d12e      	bne.n	800a4e4 <HAL_UART_MspInit+0xe4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a486:	2302      	movs	r3, #2
 800a488:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a48a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800a48e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a490:	f107 030c 	add.w	r3, r7, #12
 800a494:	4618      	mov	r0, r3
 800a496:	f005 fec9 	bl	801022c <HAL_RCCEx_PeriphCLKConfig>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 800a4a0:	f7ff fe82 	bl	800a1a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a4a4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a4a8:	f7ff feab 	bl	800a202 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4ac:	2001      	movs	r0, #1
 800a4ae:	f7ff fe90 	bl	800a1d2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800a4b2:	230c      	movs	r3, #12
 800a4b4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a4c2:	2307      	movs	r3, #7
 800a4c4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a4d0:	f004 f936 	bl	800e740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2105      	movs	r1, #5
 800a4d8:	2025      	movs	r0, #37	; 0x25
 800a4da:	f003 fe24 	bl	800e126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a4de:	2025      	movs	r0, #37	; 0x25
 800a4e0:	f003 fe3b 	bl	800e15a <HAL_NVIC_EnableIRQ>
}
 800a4e4:	bf00      	nop
 800a4e6:	3758      	adds	r7, #88	; 0x58
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	40008000 	.word	0x40008000
 800a4f0:	48000800 	.word	0x48000800
 800a4f4:	40004400 	.word	0x40004400

0800a4f8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a0f      	ldr	r2, [pc, #60]	; (800a544 <HAL_UART_MspDeInit+0x4c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d107      	bne.n	800a51a <HAL_UART_MspDeInit+0x22>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800a50a:	2001      	movs	r0, #1
 800a50c:	f7ff febb 	bl	800a286 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 800a510:	2102      	movs	r1, #2
 800a512:	480d      	ldr	r0, [pc, #52]	; (800a548 <HAL_UART_MspDeInit+0x50>)
 800a514:	f004 fa74 	bl	800ea00 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800a518:	e010      	b.n	800a53c <HAL_UART_MspDeInit+0x44>
  else if(huart->Instance==USART2)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a0b      	ldr	r2, [pc, #44]	; (800a54c <HAL_UART_MspDeInit+0x54>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d10b      	bne.n	800a53c <HAL_UART_MspDeInit+0x44>
    __HAL_RCC_USART2_CLK_DISABLE();
 800a524:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a528:	f7ff fe9b 	bl	800a262 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 800a52c:	210c      	movs	r1, #12
 800a52e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a532:	f004 fa65 	bl	800ea00 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800a536:	2025      	movs	r0, #37	; 0x25
 800a538:	f003 fe1d 	bl	800e176 <HAL_NVIC_DisableIRQ>
}
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	40008000 	.word	0x40008000
 800a548:	48000800 	.word	0x48000800
 800a54c:	40004400 	.word	0x40004400

0800a550 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b090      	sub	sp, #64	; 0x40
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a558:	f107 0308 	add.w	r3, r7, #8
 800a55c:	2238      	movs	r2, #56	; 0x38
 800a55e:	2100      	movs	r1, #0
 800a560:	4618      	mov	r0, r3
 800a562:	f00e f997 	bl	8018894 <memset>
  if(hrtc->Instance==RTC)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a0e      	ldr	r2, [pc, #56]	; (800a5a4 <HAL_RTC_MspInit+0x54>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d115      	bne.n	800a59c <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a574:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a57a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a57c:	f107 0308 	add.w	r3, r7, #8
 800a580:	4618      	mov	r0, r3
 800a582:	f005 fe53 	bl	801022c <HAL_RCCEx_PeriphCLKConfig>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a58c:	f7ff fe0c 	bl	800a1a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a590:	f7ff fe0f 	bl	800a1b2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a594:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a598:	f7ff fe33 	bl	800a202 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a59c:	bf00      	nop
 800a59e:	3740      	adds	r7, #64	; 0x40
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	40002800 	.word	0x40002800

0800a5a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b096      	sub	sp, #88	; 0x58
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	609a      	str	r2, [r3, #8]
 800a5bc:	60da      	str	r2, [r3, #12]
 800a5be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a5c0:	f107 030c 	add.w	r3, r7, #12
 800a5c4:	2238      	movs	r2, #56	; 0x38
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f00e f963 	bl	8018894 <memset>
  if(hspi->Instance==SPI2)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a21      	ldr	r2, [pc, #132]	; (800a658 <HAL_SPI_MspInit+0xb0>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d13b      	bne.n	800a650 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800a5d8:	2310      	movs	r3, #16
 800a5da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 800a5dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5e0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5e2:	f107 030c 	add.w	r3, r7, #12
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f005 fe20 	bl	801022c <HAL_RCCEx_PeriphCLKConfig>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800a5f2:	f7ff fdd9 	bl	800a1a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a5f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a5fa:	f7ff fe02 	bl	800a202 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5fe:	2002      	movs	r0, #2
 800a600:	f7ff fde7 	bl	800a1d2 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a604:	2001      	movs	r0, #1
 800a606:	f7ff fde4 	bl	800a1d2 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800a60a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800a60e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a610:	2302      	movs	r3, #2
 800a612:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a614:	2301      	movs	r3, #1
 800a616:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a618:	2300      	movs	r3, #0
 800a61a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a61c:	2305      	movs	r3, #5
 800a61e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a620:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a624:	4619      	mov	r1, r3
 800a626:	480d      	ldr	r0, [pc, #52]	; (800a65c <HAL_SPI_MspInit+0xb4>)
 800a628:	f004 f88a 	bl	800e740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a62c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a630:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a632:	2302      	movs	r3, #2
 800a634:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a636:	2301      	movs	r3, #1
 800a638:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a63a:	2300      	movs	r3, #0
 800a63c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a63e:	2305      	movs	r3, #5
 800a640:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a642:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a646:	4619      	mov	r1, r3
 800a648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a64c:	f004 f878 	bl	800e740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a650:	bf00      	nop
 800a652:	3758      	adds	r7, #88	; 0x58
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	40003800 	.word	0x40003800
 800a65c:	48000400 	.word	0x48000400

0800a660 <LL_APB2_GRP1_EnableClock>:
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800a668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a66c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a66e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4313      	orrs	r3, r2
 800a676:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a67c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4013      	ands	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a684:	68fb      	ldr	r3, [r7, #12]
}
 800a686:	bf00      	nop
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bc80      	pop	{r7}
 800a68e:	4770      	bx	lr

0800a690 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08c      	sub	sp, #48	; 0x30
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a698:	2300      	movs	r3, #0
 800a69a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a6a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a6aa:	f7ff ffd9 	bl	800a660 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a6ae:	f107 0208 	add.w	r2, r7, #8
 800a6b2:	f107 030c 	add.w	r3, r7, #12
 800a6b6:	4611      	mov	r1, r2
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f005 fbd3 	bl	800fe64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800a6be:	f005 fbbf 	bl	800fe40 <HAL_RCC_GetPCLK2Freq>
 800a6c2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	4a21      	ldr	r2, [pc, #132]	; (800a74c <HAL_InitTick+0xbc>)
 800a6c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6cc:	0c9b      	lsrs	r3, r3, #18
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a6d2:	4b1f      	ldr	r3, [pc, #124]	; (800a750 <HAL_InitTick+0xc0>)
 800a6d4:	4a1f      	ldr	r2, [pc, #124]	; (800a754 <HAL_InitTick+0xc4>)
 800a6d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800a6d8:	4b1d      	ldr	r3, [pc, #116]	; (800a750 <HAL_InitTick+0xc0>)
 800a6da:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a6de:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a6e0:	4a1b      	ldr	r2, [pc, #108]	; (800a750 <HAL_InitTick+0xc0>)
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a6e6:	4b1a      	ldr	r3, [pc, #104]	; (800a750 <HAL_InitTick+0xc0>)
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a6ec:	4b18      	ldr	r3, [pc, #96]	; (800a750 <HAL_InitTick+0xc0>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800a6f2:	4817      	ldr	r0, [pc, #92]	; (800a750 <HAL_InitTick+0xc0>)
 800a6f4:	f007 fafe 	bl	8011cf4 <HAL_TIM_Base_Init>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800a6fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a702:	2b00      	cmp	r3, #0
 800a704:	d11b      	bne.n	800a73e <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800a706:	4812      	ldr	r0, [pc, #72]	; (800a750 <HAL_InitTick+0xc0>)
 800a708:	f007 fb54 	bl	8011db4 <HAL_TIM_Base_Start_IT>
 800a70c:	4603      	mov	r3, r0
 800a70e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800a712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a716:	2b00      	cmp	r3, #0
 800a718:	d111      	bne.n	800a73e <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a71a:	2018      	movs	r0, #24
 800a71c:	f003 fd1d 	bl	800e15a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b0f      	cmp	r3, #15
 800a724:	d808      	bhi.n	800a738 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800a726:	2200      	movs	r2, #0
 800a728:	6879      	ldr	r1, [r7, #4]
 800a72a:	2018      	movs	r0, #24
 800a72c:	f003 fcfb 	bl	800e126 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a730:	4a09      	ldr	r2, [pc, #36]	; (800a758 <HAL_InitTick+0xc8>)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	e002      	b.n	800a73e <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800a73e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a742:	4618      	mov	r0, r3
 800a744:	3730      	adds	r7, #48	; 0x30
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	431bde83 	.word	0x431bde83
 800a750:	20001310 	.word	0x20001310
 800a754:	40012c00 	.word	0x40012c00
 800a758:	20000088 	.word	0x20000088

0800a75c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a760:	e7fe      	b.n	800a760 <NMI_Handler+0x4>

0800a762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a762:	b480      	push	{r7}
 800a764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a766:	e7fe      	b.n	800a766 <HardFault_Handler+0x4>

0800a768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a768:	b480      	push	{r7}
 800a76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a76c:	e7fe      	b.n	800a76c <MemManage_Handler+0x4>

0800a76e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a76e:	b480      	push	{r7}
 800a770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a772:	e7fe      	b.n	800a772 <BusFault_Handler+0x4>

0800a774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a778:	e7fe      	b.n	800a778 <UsageFault_Handler+0x4>

0800a77a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a77a:	b480      	push	{r7}
 800a77c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a77e:	bf00      	nop
 800a780:	46bd      	mov	sp, r7
 800a782:	bc80      	pop	{r7}
 800a784:	4770      	bx	lr
	...

0800a788 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a78c:	4802      	ldr	r0, [pc, #8]	; (800a798 <TIM1_UP_IRQHandler+0x10>)
 800a78e:	f007 fb5d 	bl	8011e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a792:	bf00      	nop
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	20001310 	.word	0x20001310

0800a79c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a7a0:	4802      	ldr	r0, [pc, #8]	; (800a7ac <USART2_IRQHandler+0x10>)
 800a7a2:	f007 ff73 	bl	801268c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a7a6:	bf00      	nop
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200011bc 	.word	0x200011bc

0800a7b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	af00      	add	r7, sp, #0
  return 1;
 800a7b4:	2301      	movs	r3, #1
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bc80      	pop	{r7}
 800a7bc:	4770      	bx	lr

0800a7be <_kill>:

int _kill(int pid, int sig)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a7c8:	f00e f922 	bl	8018a10 <__errno>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2216      	movs	r2, #22
 800a7d0:	601a      	str	r2, [r3, #0]
  return -1;
 800a7d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <_exit>:

void _exit (int status)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a7e6:	f04f 31ff 	mov.w	r1, #4294967295
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7ff ffe7 	bl	800a7be <_kill>
  while (1) {}    /* Make sure we hang here */
 800a7f0:	e7fe      	b.n	800a7f0 <_exit+0x12>

0800a7f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b086      	sub	sp, #24
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7fe:	2300      	movs	r3, #0
 800a800:	617b      	str	r3, [r7, #20]
 800a802:	e00a      	b.n	800a81a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a804:	f3af 8000 	nop.w
 800a808:	4601      	mov	r1, r0
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	1c5a      	adds	r2, r3, #1
 800a80e:	60ba      	str	r2, [r7, #8]
 800a810:	b2ca      	uxtb	r2, r1
 800a812:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	3301      	adds	r3, #1
 800a818:	617b      	str	r3, [r7, #20]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	429a      	cmp	r2, r3
 800a820:	dbf0      	blt.n	800a804 <_read+0x12>
  }

  return len;
 800a822:	687b      	ldr	r3, [r7, #4]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a838:	2300      	movs	r3, #0
 800a83a:	617b      	str	r3, [r7, #20]
 800a83c:	e009      	b.n	800a852 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	60ba      	str	r2, [r7, #8]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff f8cc 	bl	80099e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	3301      	adds	r3, #1
 800a850:	617b      	str	r3, [r7, #20]
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	429a      	cmp	r2, r3
 800a858:	dbf1      	blt.n	800a83e <_write+0x12>
  }
  return len;
 800a85a:	687b      	ldr	r3, [r7, #4]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3718      	adds	r7, #24
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <_close>:

int _close(int file)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a86c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a870:	4618      	mov	r0, r3
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	bc80      	pop	{r7}
 800a878:	4770      	bx	lr

0800a87a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a88a:	605a      	str	r2, [r3, #4]
  return 0;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	bc80      	pop	{r7}
 800a896:	4770      	bx	lr

0800a898 <_isatty>:

int _isatty(int file)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a8a0:	2301      	movs	r3, #1
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	370c      	adds	r7, #12
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bc80      	pop	{r7}
 800a8aa:	4770      	bx	lr

0800a8ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bc80      	pop	{r7}
 800a8c2:	4770      	bx	lr

0800a8c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a8cc:	4a14      	ldr	r2, [pc, #80]	; (800a920 <_sbrk+0x5c>)
 800a8ce:	4b15      	ldr	r3, [pc, #84]	; (800a924 <_sbrk+0x60>)
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a8d8:	4b13      	ldr	r3, [pc, #76]	; (800a928 <_sbrk+0x64>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d102      	bne.n	800a8e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a8e0:	4b11      	ldr	r3, [pc, #68]	; (800a928 <_sbrk+0x64>)
 800a8e2:	4a12      	ldr	r2, [pc, #72]	; (800a92c <_sbrk+0x68>)
 800a8e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a8e6:	4b10      	ldr	r3, [pc, #64]	; (800a928 <_sbrk+0x64>)
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d207      	bcs.n	800a904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a8f4:	f00e f88c 	bl	8018a10 <__errno>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	220c      	movs	r2, #12
 800a8fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a902:	e009      	b.n	800a918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a904:	4b08      	ldr	r3, [pc, #32]	; (800a928 <_sbrk+0x64>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a90a:	4b07      	ldr	r3, [pc, #28]	; (800a928 <_sbrk+0x64>)
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4413      	add	r3, r2
 800a912:	4a05      	ldr	r2, [pc, #20]	; (800a928 <_sbrk+0x64>)
 800a914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a916:	68fb      	ldr	r3, [r7, #12]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20010000 	.word	0x20010000
 800a924:	00000400 	.word	0x00000400
 800a928:	2000135c 	.word	0x2000135c
 800a92c:	20005880 	.word	0x20005880

0800a930 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a930:	b480      	push	{r7}
 800a932:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800a934:	4b03      	ldr	r3, [pc, #12]	; (800a944 <SystemInit+0x14>)
 800a936:	4a04      	ldr	r2, [pc, #16]	; (800a948 <SystemInit+0x18>)
 800a938:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800a93a:	bf00      	nop
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bc80      	pop	{r7}
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	e000ed00 	.word	0xe000ed00
 800a948:	08008400 	.word	0x08008400

0800a94c <LL_AHB2_GRP1_EnableClock>:
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a95a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4313      	orrs	r3, r2
 800a962:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4013      	ands	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a970:	68fb      	ldr	r3, [r7, #12]
}
 800a972:	bf00      	nop
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	bc80      	pop	{r7}
 800a97a:	4770      	bx	lr

0800a97c <LL_APB1_GRP1_EnableClock>:
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a98a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4313      	orrs	r3, r2
 800a992:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a998:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4013      	ands	r3, r2
 800a99e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
}
 800a9a2:	bf00      	nop
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bc80      	pop	{r7}
 800a9aa:	4770      	bx	lr

0800a9ac <uartUserDownload>:
/**
 * @brief Download a file via serial port
 **/

void uartUserDownload(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
   uint8_t number[11] = {0};
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	60bb      	str	r3, [r7, #8]
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	f8c3 2003 	str.w	r2, [r3, #3]
   uint32_t size = 0;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	607b      	str	r3, [r7, #4]
   COM_StatusTypeDef result;

   cboot_error_t cboot_error;

   //Get exclusive access
   osMutexWait(iapMutexHandle, osWaitForever);
 800a9c6:	4b6b      	ldr	r3, [pc, #428]	; (800ab74 <uartUserDownload+0x1c8>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f04f 31ff 	mov.w	r1, #4294967295
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f00a fb12 	bl	8014ff8 <osMutexWait>

   //Suspend scheduler
   osThreadSuspendAll();
 800a9d4:	f00a fbbc 	bl	8015150 <osThreadSuspendAll>

#if 1
   //Debug message
   TRACE_INFO("\r\n");
 800a9d8:	f7fe fd95 	bl	8009506 <osSuspendAllTasks>
 800a9dc:	4b66      	ldr	r3, [pc, #408]	; (800ab78 <uartUserDownload+0x1cc>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	4865      	ldr	r0, [pc, #404]	; (800ab7c <uartUserDownload+0x1d0>)
 800a9e8:	f00d fe2c 	bl	8018644 <fwrite>
 800a9ec:	f7fe fd96 	bl	800951c <osResumeAllTasks>
   TRACE_INFO("Starting firmware update...\r\n");
 800a9f0:	f7fe fd89 	bl	8009506 <osSuspendAllTasks>
 800a9f4:	4b60      	ldr	r3, [pc, #384]	; (800ab78 <uartUserDownload+0x1cc>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	221d      	movs	r2, #29
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	4860      	ldr	r0, [pc, #384]	; (800ab80 <uartUserDownload+0x1d4>)
 800aa00:	f00d fe20 	bl	8018644 <fwrite>
 800aa04:	f7fe fd8a 	bl	800951c <osResumeAllTasks>



   //Get default IAP settings
   iapGetDefaultSettings(&iapSettings);
 800aa08:	485e      	ldr	r0, [pc, #376]	; (800ab84 <uartUserDownload+0x1d8>)
 800aa0a:	f000 fcb5 	bl	800b378 <iapGetDefaultSettings>
   iapSettings.imageInCrypto.cipherMode                     = IAP_SETTING_CIPHER_MODE;
   iapSettings.imageInCrypto.cipherKey                      = IAP_SETTING_CIPHER_KEY;
   iapSettings.imageInCrypto.cipherKeyLen                   = IAP_SETTING_CIHPER_KEY_LEN;
#else
   //User IAP settings configuration
   iapSettings.imageInCrypto.verifySettings.verifyMethod    = IAP_VERIFY_METHOD;
 800aa0e:	4b5d      	ldr	r3, [pc, #372]	; (800ab84 <uartUserDownload+0x1d8>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	721a      	strb	r2, [r3, #8]
   iapSettings.imageInCrypto.verifySettings.integrityAlgo   = IAP_SETTING_INTEGRITY_ALGO;
 800aa14:	4b5b      	ldr	r3, [pc, #364]	; (800ab84 <uartUserDownload+0x1d8>)
 800aa16:	4a5c      	ldr	r2, [pc, #368]	; (800ab88 <uartUserDownload+0x1dc>)
 800aa18:	60da      	str	r2, [r3, #12]
#endif
   //User IAP primary(internal flash) memory driver
   iapSettings.primaryFlashDriver             = IAP_SETTING_PRM_MEM_DRIVER;
 800aa1a:	4b5a      	ldr	r3, [pc, #360]	; (800ab84 <uartUserDownload+0x1d8>)
 800aa1c:	4a5b      	ldr	r2, [pc, #364]	; (800ab8c <uartUserDownload+0x1e0>)
 800aa1e:	605a      	str	r2, [r3, #4]
   //User IAP secondary(external flash) memory driver
   iapSettings.secondaryFlashDriver           = IAP_SETTING_SRD_MEM_DRIVER;
 800aa20:	4b58      	ldr	r3, [pc, #352]	; (800ab84 <uartUserDownload+0x1d8>)
 800aa22:	4a5b      	ldr	r2, [pc, #364]	; (800ab90 <uartUserDownload+0x1e4>)
 800aa24:	611a      	str	r2, [r3, #16]

   //User IAP first secondary memory slot configuration
   iapSettings.addrSlot1                       = IAP_SETTING_SRD_MEM_SLOT_1_ADDR;
 800aa26:	4b57      	ldr	r3, [pc, #348]	; (800ab84 <uartUserDownload+0x1d8>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	839a      	strh	r2, [r3, #28]
   iapSettings.sizeSlot1                       = IAP_SETTING_SRD_MEM_SLOT_1_SIZE;
 800aa2c:	4b55      	ldr	r3, [pc, #340]	; (800ab84 <uartUserDownload+0x1d8>)
 800aa2e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800aa32:	621a      	str	r2, [r3, #32]
#if defined(APP_DEMO_3)
   iapSettings.appVersion = 0x00030000;
#elif defined(APP_DEMO_2)
   iapSettings.appVersion = 0x00020000;
#else
   iapSettings.appVersion = 0x00010000;
 800aa34:	4b53      	ldr	r3, [pc, #332]	; (800ab84 <uartUserDownload+0x1d8>)
 800aa36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aa3a:	601a      	str	r2, [r3, #0]
#endif

   //Initialize IAP Application context
   cboot_error = iapInit(&iapContext, &iapSettings);
 800aa3c:	4951      	ldr	r1, [pc, #324]	; (800ab84 <uartUserDownload+0x1d8>)
 800aa3e:	4855      	ldr	r0, [pc, #340]	; (800ab94 <uartUserDownload+0x1e8>)
 800aa40:	f000 fcaa 	bl	800b398 <iapInit>
 800aa44:	4603      	mov	r3, r0
 800aa46:	82fb      	strh	r3, [r7, #22]
   //Is any error?
   if(cboot_error != CBOOT_NO_ERROR)
 800aa48:	8afb      	ldrh	r3, [r7, #22]
 800aa4a:	f240 224b 	movw	r2, #587	; 0x24b
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d00c      	beq.n	800aa6c <uartUserDownload+0xc0>
   {
      //Debug message
      TRACE_ERROR("Failed to initialize IAP!\r\n");
 800aa52:	f7fe fd58 	bl	8009506 <osSuspendAllTasks>
 800aa56:	4b48      	ldr	r3, [pc, #288]	; (800ab78 <uartUserDownload+0x1cc>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	221b      	movs	r2, #27
 800aa5e:	2101      	movs	r1, #1
 800aa60:	484d      	ldr	r0, [pc, #308]	; (800ab98 <uartUserDownload+0x1ec>)
 800aa62:	f00d fdef 	bl	8018644 <fwrite>
 800aa66:	f7fe fd59 	bl	800951c <osResumeAllTasks>
 800aa6a:	e078      	b.n	800ab5e <uartUserDownload+0x1b2>
   }
   else
#endif
   {
      Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\r\n");
 800aa6c:	484b      	ldr	r0, [pc, #300]	; (800ab9c <uartUserDownload+0x1f0>)
 800aa6e:	f7fe ff31 	bl	80098d4 <Serial_PutString>
      result = Ymodem_Receive( &size );
 800aa72:	1d3b      	adds	r3, r7, #4
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fad3 	bl	800b020 <Ymodem_Receive>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	757b      	strb	r3, [r7, #21]
      if (result == COM_OK)
 800aa7e:	7d7b      	ldrb	r3, [r7, #21]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d154      	bne.n	800ab2e <uartUserDownload+0x182>
      {
         Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 800aa84:	4846      	ldr	r0, [pc, #280]	; (800aba0 <uartUserDownload+0x1f4>)
 800aa86:	f7fe ff25 	bl	80098d4 <Serial_PutString>
         Serial_PutString(aFileName);
 800aa8a:	4846      	ldr	r0, [pc, #280]	; (800aba4 <uartUserDownload+0x1f8>)
 800aa8c:	f7fe ff22 	bl	80098d4 <Serial_PutString>
         Int2Str(number, size);
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	f107 0308 	add.w	r3, r7, #8
 800aa96:	4611      	mov	r1, r2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fe fdd3 	bl	8009644 <Int2Str>
         Serial_PutString((uint8_t *)"\r\n Size: ");
 800aa9e:	4842      	ldr	r0, [pc, #264]	; (800aba8 <uartUserDownload+0x1fc>)
 800aaa0:	f7fe ff18 	bl	80098d4 <Serial_PutString>
         Serial_PutString(number);
 800aaa4:	f107 0308 	add.w	r3, r7, #8
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe ff13 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t *)" Bytes\r\n");
 800aaae:	483f      	ldr	r0, [pc, #252]	; (800abac <uartUserDownload+0x200>)
 800aab0:	f7fe ff10 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t *)"-------------------\r\n");
 800aab4:	483e      	ldr	r0, [pc, #248]	; (800abb0 <uartUserDownload+0x204>)
 800aab6:	f7fe ff0d 	bl	80098d4 <Serial_PutString>
#if 1
         cboot_error = iapFinalize(&iapContext);
 800aaba:	4836      	ldr	r0, [pc, #216]	; (800ab94 <uartUserDownload+0x1e8>)
 800aabc:	f000 fd72 	bl	800b5a4 <iapFinalize>
 800aac0:	4603      	mov	r3, r0
 800aac2:	82fb      	strh	r3, [r7, #22]
         if(cboot_error != CBOOT_NO_ERROR)
 800aac4:	8afb      	ldrh	r3, [r7, #22]
 800aac6:	f240 224b 	movw	r2, #587	; 0x24b
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d00c      	beq.n	800aae8 <uartUserDownload+0x13c>
         {
            //Debug message
            TRACE_ERROR("Failed to finalize firmware update!\r\n");
 800aace:	f7fe fd1a 	bl	8009506 <osSuspendAllTasks>
 800aad2:	4b29      	ldr	r3, [pc, #164]	; (800ab78 <uartUserDownload+0x1cc>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	2225      	movs	r2, #37	; 0x25
 800aada:	2101      	movs	r1, #1
 800aadc:	4835      	ldr	r0, [pc, #212]	; (800abb4 <uartUserDownload+0x208>)
 800aade:	f00d fdb1 	bl	8018644 <fwrite>
 800aae2:	f7fe fd1b 	bl	800951c <osResumeAllTasks>
 800aae6:	e03a      	b.n	800ab5e <uartUserDownload+0x1b2>
         }
         else
         {
        	//DEbug message
        	TRACE_INFO("Update image successfully processed. Rebooting to finalize update...\r\n");
 800aae8:	f7fe fd0d 	bl	8009506 <osSuspendAllTasks>
 800aaec:	4b22      	ldr	r3, [pc, #136]	; (800ab78 <uartUserDownload+0x1cc>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	2246      	movs	r2, #70	; 0x46
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	4830      	ldr	r0, [pc, #192]	; (800abb8 <uartUserDownload+0x20c>)
 800aaf8:	f00d fda4 	bl	8018644 <fwrite>
 800aafc:	f7fe fd0e 	bl	800951c <osResumeAllTasks>

            cboot_error = iapReboot(&iapContext);
 800ab00:	4824      	ldr	r0, [pc, #144]	; (800ab94 <uartUserDownload+0x1e8>)
 800ab02:	f000 fdb5 	bl	800b670 <iapReboot>
 800ab06:	4603      	mov	r3, r0
 800ab08:	82fb      	strh	r3, [r7, #22]
            if(cboot_error != CBOOT_NO_ERROR)
 800ab0a:	8afb      	ldrh	r3, [r7, #22]
 800ab0c:	f240 224b 	movw	r2, #587	; 0x24b
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d024      	beq.n	800ab5e <uartUserDownload+0x1b2>
            {
               //Debug message
               TRACE_ERROR("Failed to reboot!\r\n");
 800ab14:	f7fe fcf7 	bl	8009506 <osSuspendAllTasks>
 800ab18:	4b17      	ldr	r3, [pc, #92]	; (800ab78 <uartUserDownload+0x1cc>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	2213      	movs	r2, #19
 800ab20:	2101      	movs	r1, #1
 800ab22:	4826      	ldr	r0, [pc, #152]	; (800abbc <uartUserDownload+0x210>)
 800ab24:	f00d fd8e 	bl	8018644 <fwrite>
 800ab28:	f7fe fcf8 	bl	800951c <osResumeAllTasks>
 800ab2c:	e017      	b.n	800ab5e <uartUserDownload+0x1b2>
            }
         }
#endif
      }
      else if (result == COM_LIMIT)
 800ab2e:	7d7b      	ldrb	r3, [r7, #21]
 800ab30:	2b05      	cmp	r3, #5
 800ab32:	d103      	bne.n	800ab3c <uartUserDownload+0x190>
      {
         Serial_PutString((uint8_t *)"\r\n\r\nThe image size is higher than the allowed space memory!\r\n");
 800ab34:	4822      	ldr	r0, [pc, #136]	; (800abc0 <uartUserDownload+0x214>)
 800ab36:	f7fe fecd 	bl	80098d4 <Serial_PutString>
 800ab3a:	e010      	b.n	800ab5e <uartUserDownload+0x1b2>
      }
      else if (result == COM_DATA)
 800ab3c:	7d7b      	ldrb	r3, [r7, #21]
 800ab3e:	2b04      	cmp	r3, #4
 800ab40:	d103      	bne.n	800ab4a <uartUserDownload+0x19e>
      {
         Serial_PutString((uint8_t *)"\r\n\r\nVerification failed!\r\n");
 800ab42:	4820      	ldr	r0, [pc, #128]	; (800abc4 <uartUserDownload+0x218>)
 800ab44:	f7fe fec6 	bl	80098d4 <Serial_PutString>
 800ab48:	e009      	b.n	800ab5e <uartUserDownload+0x1b2>
      }
      else if (result == COM_ABORT)
 800ab4a:	7d7b      	ldrb	r3, [r7, #21]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d103      	bne.n	800ab58 <uartUserDownload+0x1ac>
      {
         Serial_PutString((uint8_t *)"\r\n\nAborted by user.\r\n");
 800ab50:	481d      	ldr	r0, [pc, #116]	; (800abc8 <uartUserDownload+0x21c>)
 800ab52:	f7fe febf 	bl	80098d4 <Serial_PutString>
 800ab56:	e002      	b.n	800ab5e <uartUserDownload+0x1b2>
      }
      else
      {
         Serial_PutString((uint8_t *)"\r\nFailed to receive the file!\r\n");
 800ab58:	481c      	ldr	r0, [pc, #112]	; (800abcc <uartUserDownload+0x220>)
 800ab5a:	f7fe febb 	bl	80098d4 <Serial_PutString>
      }
   }

   //Suspend scheduler
   osThreadResumeAll();
 800ab5e:	f00a fafe 	bl	801515e <osThreadResumeAll>

   //Release exclusive access
   osMutexRelease(iapMutexHandle);
 800ab62:	4b04      	ldr	r3, [pc, #16]	; (800ab74 <uartUserDownload+0x1c8>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f00a fa94 	bl	8015094 <osMutexRelease>
}
 800ab6c:	bf00      	nop
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	20001304 	.word	0x20001304
 800ab78:	200001c8 	.word	0x200001c8
 800ab7c:	0801f1f0 	.word	0x0801f1f0
 800ab80:	0801f1f4 	.word	0x0801f1f4
 800ab84:	20001bf8 	.word	0x20001bf8
 800ab88:	0801fdcc 	.word	0x0801fdcc
 800ab8c:	0801fe3c 	.word	0x0801fe3c
 800ab90:	0801fe90 	.word	0x0801fe90
 800ab94:	200013f4 	.word	0x200013f4
 800ab98:	0801f214 	.word	0x0801f214
 800ab9c:	0801f230 	.word	0x0801f230
 800aba0:	0801f26c 	.word	0x0801f26c
 800aba4:	20001c1c 	.word	0x20001c1c
 800aba8:	0801f2c0 	.word	0x0801f2c0
 800abac:	0801f2cc 	.word	0x0801f2cc
 800abb0:	0801f2d8 	.word	0x0801f2d8
 800abb4:	0801f2f0 	.word	0x0801f2f0
 800abb8:	0801f318 	.word	0x0801f318
 800abbc:	0801f360 	.word	0x0801f360
 800abc0:	0801f374 	.word	0x0801f374
 800abc4:	0801f3b4 	.word	0x0801f3b4
 800abc8:	0801f3d0 	.word	0x0801f3d0
 800abcc:	0801f3e8 	.word	0x0801f3e8

0800abd0 <Ymodem_Receive_UserCallback>:
 * @param[in] length Length of the received data
 * @retuen Error code
 **/

cboot_error_t Ymodem_Receive_UserCallback(uint8_t *data, size_t length)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
   cboot_error_t cboot_error;

   //Write received bytes in flash
   cboot_error = iapUpdate(&iapContext, data, length);
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	6879      	ldr	r1, [r7, #4]
 800abde:	480d      	ldr	r0, [pc, #52]	; (800ac14 <Ymodem_Receive_UserCallback+0x44>)
 800abe0:	f000 fc60 	bl	800b4a4 <iapUpdate>
 800abe4:	4603      	mov	r3, r0
 800abe6:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(cboot_error != CBOOT_NO_ERROR)
 800abe8:	89fb      	ldrh	r3, [r7, #14]
 800abea:	f240 224b 	movw	r2, #587	; 0x24b
 800abee:	4293      	cmp	r3, r2
 800abf0:	d00b      	beq.n	800ac0a <Ymodem_Receive_UserCallback+0x3a>
   {
      //Debug message
      TRACE_ERROR("Failed to update firmware!\r\n");
 800abf2:	f7fe fc88 	bl	8009506 <osSuspendAllTasks>
 800abf6:	4b08      	ldr	r3, [pc, #32]	; (800ac18 <Ymodem_Receive_UserCallback+0x48>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	221c      	movs	r2, #28
 800abfe:	2101      	movs	r1, #1
 800ac00:	4806      	ldr	r0, [pc, #24]	; (800ac1c <Ymodem_Receive_UserCallback+0x4c>)
 800ac02:	f00d fd1f 	bl	8018644 <fwrite>
 800ac06:	f7fe fc89 	bl	800951c <osResumeAllTasks>
   }

   //Status code
   return cboot_error;
 800ac0a:	89fb      	ldrh	r3, [r7, #14]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	200013f4 	.word	0x200013f4
 800ac18:	200001c8 	.word	0x200001c8
 800ac1c:	0801f408 	.word	0x0801f408

0800ac20 <uartUserInit>:
/**
 * @brief Initialize user uart
 **/

void uartUserInit(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b086      	sub	sp, #24
 800ac24:	af00      	add	r7, sp, #0

   //
   // Setup UART against MX_UART_Init(). May not be needed if we keep MX_UART_Init().
   //

   HAL_UART_MspDeInit(Get_DebugHandle());
 800ac26:	f7ff fa85 	bl	800a134 <Get_DebugHandle>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff fc63 	bl	800a4f8 <HAL_UART_MspDeInit>

   //Enable GPIOA clock
   __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac32:	2001      	movs	r0, #1
 800ac34:	f7ff fe8a 	bl	800a94c <LL_AHB2_GRP1_EnableClock>
   //Enable USART2 clock
   __HAL_RCC_USART2_CLK_ENABLE();
 800ac38:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ac3c:	f7ff fe9e 	bl	800a97c <LL_APB1_GRP1_EnableClock>

   //Configure USART2_TX (PA2)
   GPIO_InitStructure.Pin = GPIO_PIN_2;
 800ac40:	2304      	movs	r3, #4
 800ac42:	607b      	str	r3, [r7, #4]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800ac44:	2302      	movs	r3, #2
 800ac46:	60bb      	str	r3, [r7, #8]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 800ac50:	2307      	movs	r3, #7
 800ac52:	617b      	str	r3, [r7, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800ac54:	1d3b      	adds	r3, r7, #4
 800ac56:	4619      	mov	r1, r3
 800ac58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac5c:	f003 fd70 	bl	800e740 <HAL_GPIO_Init>

   //Configure USART2_RX (PA3)
   GPIO_InitStructure.Pin = GPIO_PIN_3;
 800ac60:	2308      	movs	r3, #8
 800ac62:	607b      	str	r3, [r7, #4]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800ac64:	2302      	movs	r3, #2
 800ac66:	60bb      	str	r3, [r7, #8]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 800ac70:	2307      	movs	r3, #7
 800ac72:	617b      	str	r3, [r7, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800ac74:	1d3b      	adds	r3, r7, #4
 800ac76:	4619      	mov	r1, r3
 800ac78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac7c:	f003 fd60 	bl	800e740 <HAL_GPIO_Init>

   UartHandle.Instance = USART2;
 800ac80:	4b0e      	ldr	r3, [pc, #56]	; (800acbc <uartUserInit+0x9c>)
 800ac82:	4a0f      	ldr	r2, [pc, #60]	; (800acc0 <uartUserInit+0xa0>)
 800ac84:	601a      	str	r2, [r3, #0]
   UartHandle.Init.BaudRate = 115200;
 800ac86:	4b0d      	ldr	r3, [pc, #52]	; (800acbc <uartUserInit+0x9c>)
 800ac88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ac8c:	605a      	str	r2, [r3, #4]
   UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800ac8e:	4b0b      	ldr	r3, [pc, #44]	; (800acbc <uartUserInit+0x9c>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	609a      	str	r2, [r3, #8]
   UartHandle.Init.StopBits = UART_STOPBITS_1;
 800ac94:	4b09      	ldr	r3, [pc, #36]	; (800acbc <uartUserInit+0x9c>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	60da      	str	r2, [r3, #12]
   UartHandle.Init.Parity = UART_PARITY_NONE;
 800ac9a:	4b08      	ldr	r3, [pc, #32]	; (800acbc <uartUserInit+0x9c>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	611a      	str	r2, [r3, #16]
   UartHandle.Init.Mode = UART_MODE_TX_RX;
 800aca0:	4b06      	ldr	r3, [pc, #24]	; (800acbc <uartUserInit+0x9c>)
 800aca2:	220c      	movs	r2, #12
 800aca4:	615a      	str	r2, [r3, #20]
   UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aca6:	4b05      	ldr	r3, [pc, #20]	; (800acbc <uartUserInit+0x9c>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	619a      	str	r2, [r3, #24]
   HAL_UART_Init(&UartHandle);
 800acac:	4803      	ldr	r0, [pc, #12]	; (800acbc <uartUserInit+0x9c>)
 800acae:	f007 faaf 	bl	8012210 <HAL_UART_Init>
}
 800acb2:	bf00      	nop
 800acb4:	3718      	adds	r7, #24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	20001360 	.word	0x20001360
 800acc0:	40004400 	.word	0x40004400

0800acc4 <uartUserTaskHandler>:
/**
 * @brief Uart user task routine
 **/

void uartUserTaskHandler(void *param)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
   uint8_t key = 0;
 800accc:	2300      	movs	r3, #0
 800acce:	737b      	strb	r3, [r7, #13]
   uint8_t state = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73fb      	strb	r3, [r7, #15]
   HAL_StatusTypeDef status;

   //Init uart
   uartUserInit();
 800acd4:	f7ff ffa4 	bl	800ac20 <uartUserInit>

   while(1)
   {
      if(state == 0)
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d11a      	bne.n	800ad14 <uartUserTaskHandler+0x50>
      {
         Serial_PutString((uint8_t*) "\r\n");
 800acde:	482d      	ldr	r0, [pc, #180]	; (800ad94 <uartUserTaskHandler+0xd0>)
 800ace0:	f7fe fdf8 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "=======================\r\n");
 800ace4:	482c      	ldr	r0, [pc, #176]	; (800ad98 <uartUserTaskHandler+0xd4>)
 800ace6:	f7fe fdf5 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "= Y-MODEM update menu =\r\n");
 800acea:	482c      	ldr	r0, [pc, #176]	; (800ad9c <uartUserTaskHandler+0xd8>)
 800acec:	f7fe fdf2 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "=======================\r\n");
 800acf0:	4829      	ldr	r0, [pc, #164]	; (800ad98 <uartUserTaskHandler+0xd4>)
 800acf2:	f7fe fdef 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "Choices:\r\n");
 800acf6:	482a      	ldr	r0, [pc, #168]	; (800ada0 <uartUserTaskHandler+0xdc>)
 800acf8:	f7fe fdec 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "  1 -> Download update image\r\n");
 800acfc:	4829      	ldr	r0, [pc, #164]	; (800ada4 <uartUserTaskHandler+0xe0>)
 800acfe:	f7fe fde9 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "  2 -> Get current application version\r\n");
 800ad02:	4829      	ldr	r0, [pc, #164]	; (800ada8 <uartUserTaskHandler+0xe4>)
 800ad04:	f7fe fde6 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "\r\n");
 800ad08:	4822      	ldr	r0, [pc, #136]	; (800ad94 <uartUserTaskHandler+0xd0>)
 800ad0a:	f7fe fde3 	bl	80098d4 <Serial_PutString>

         //Change state
         state = 1;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	73fb      	strb	r3, [r7, #15]
 800ad12:	e03b      	b.n	800ad8c <uartUserTaskHandler+0xc8>
      }
      else if(state == 1)
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d138      	bne.n	800ad8c <uartUserTaskHandler+0xc8>
      {
         /* Clean the input path */
         __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800ad1a:	4b24      	ldr	r3, [pc, #144]	; (800adac <uartUserTaskHandler+0xe8>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	699a      	ldr	r2, [r3, #24]
 800ad20:	4b22      	ldr	r3, [pc, #136]	; (800adac <uartUserTaskHandler+0xe8>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f042 0208 	orr.w	r2, r2, #8
 800ad28:	619a      	str	r2, [r3, #24]
 800ad2a:	4b20      	ldr	r3, [pc, #128]	; (800adac <uartUserTaskHandler+0xe8>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	699a      	ldr	r2, [r3, #24]
 800ad30:	4b1e      	ldr	r3, [pc, #120]	; (800adac <uartUserTaskHandler+0xe8>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f042 0210 	orr.w	r2, r2, #16
 800ad38:	619a      	str	r2, [r3, #24]

         /* Receive key */
         status = HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 800ad3a:	f107 010d 	add.w	r1, r7, #13
 800ad3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad42:	2201      	movs	r2, #1
 800ad44:	4819      	ldr	r0, [pc, #100]	; (800adac <uartUserTaskHandler+0xe8>)
 800ad46:	f007 fb91 	bl	801246c <HAL_UART_Receive>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	73bb      	strb	r3, [r7, #14]

         if(status == HAL_OK)
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d11b      	bne.n	800ad8c <uartUserTaskHandler+0xc8>
         {
            switch(key)
 800ad54:	7b7b      	ldrb	r3, [r7, #13]
 800ad56:	2b31      	cmp	r3, #49	; 0x31
 800ad58:	d002      	beq.n	800ad60 <uartUserTaskHandler+0x9c>
 800ad5a:	2b32      	cmp	r3, #50	; 0x32
 800ad5c:	d006      	beq.n	800ad6c <uartUserTaskHandler+0xa8>
 800ad5e:	e009      	b.n	800ad74 <uartUserTaskHandler+0xb0>
            {
               case '1':
                  Serial_PutString((uint8_t*) "Downloading update image...\r\n");
 800ad60:	4813      	ldr	r0, [pc, #76]	; (800adb0 <uartUserTaskHandler+0xec>)
 800ad62:	f7fe fdb7 	bl	80098d4 <Serial_PutString>
                  //Start downloading file
                  uartUserDownload();
 800ad66:	f7ff fe21 	bl	800a9ac <uartUserDownload>
                  break;
 800ad6a:	e00a      	b.n	800ad82 <uartUserTaskHandler+0xbe>

               case '2':
#if defined(APP_DEMO_V1)
                  Serial_PutString((uint8_t*) "v1.0.0\r\n");
#elif defined(APP_DEMO_V2)
                  Serial_PutString((uint8_t*) "v2.0.0\r\n");
 800ad6c:	4811      	ldr	r0, [pc, #68]	; (800adb4 <uartUserTaskHandler+0xf0>)
 800ad6e:	f7fe fdb1 	bl	80098d4 <Serial_PutString>
#else
                  Serial_PutString((uint8_t*) "v3.0.0\r\n");
#endif
                  break;
 800ad72:	e006      	b.n	800ad82 <uartUserTaskHandler+0xbe>

               default:
                  Serial_PutString((uint8_t*) "Unknown number!\r\n");
 800ad74:	4810      	ldr	r0, [pc, #64]	; (800adb8 <uartUserTaskHandler+0xf4>)
 800ad76:	f7fe fdad 	bl	80098d4 <Serial_PutString>
                  Serial_PutString((uint8_t*) "Number should be 1 or 2!\r\n");
 800ad7a:	4810      	ldr	r0, [pc, #64]	; (800adbc <uartUserTaskHandler+0xf8>)
 800ad7c:	f7fe fdaa 	bl	80098d4 <Serial_PutString>
                  break;
 800ad80:	bf00      	nop
            }
            Serial_PutString((uint8_t*) "\r\n");
 800ad82:	4804      	ldr	r0, [pc, #16]	; (800ad94 <uartUserTaskHandler+0xd0>)
 800ad84:	f7fe fda6 	bl	80098d4 <Serial_PutString>

            //Change state
            state = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	73fb      	strb	r3, [r7, #15]
      {
         //For sanity
      }

      //Os delay
      osDelayTask(200);
 800ad8c:	20c8      	movs	r0, #200	; 0xc8
 800ad8e:	f7fe fbaf 	bl	80094f0 <osDelayTask>
      if(state == 0)
 800ad92:	e7a1      	b.n	800acd8 <uartUserTaskHandler+0x14>
 800ad94:	0801f1f0 	.word	0x0801f1f0
 800ad98:	0801f428 	.word	0x0801f428
 800ad9c:	0801f444 	.word	0x0801f444
 800ada0:	0801f460 	.word	0x0801f460
 800ada4:	0801f46c 	.word	0x0801f46c
 800ada8:	0801f48c 	.word	0x0801f48c
 800adac:	20001360 	.word	0x20001360
 800adb0:	0801f4b8 	.word	0x0801f4b8
 800adb4:	0801f4d8 	.word	0x0801f4d8
 800adb8:	0801f4e4 	.word	0x0801f4e4
 800adbc:	0801f4f8 	.word	0x0801f4f8

0800adc0 <ReceivePacket>:
 * @return HAL_OK: normally return
 *         HAL_BUSY: abort by user
 **/

static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 800adcc:	2300      	movs	r3, #0
 800adce:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 800add6:	f107 0113 	add.w	r1, r7, #19
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	485d      	ldr	r0, [pc, #372]	; (800af54 <ReceivePacket+0x194>)
 800ade0:	f007 fb44 	bl	801246c <HAL_UART_Receive>
 800ade4:	4603      	mov	r3, r0
 800ade6:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 800ade8:	7efb      	ldrb	r3, [r7, #27]
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 80aa 	bne.w	800af44 <ReceivePacket+0x184>
  {
    switch (char1)
 800adf0:	7cfb      	ldrb	r3, [r7, #19]
 800adf2:	2b61      	cmp	r3, #97	; 0x61
 800adf4:	d059      	beq.n	800aeaa <ReceivePacket+0xea>
 800adf6:	2b61      	cmp	r3, #97	; 0x61
 800adf8:	dc5a      	bgt.n	800aeb0 <ReceivePacket+0xf0>
 800adfa:	2b18      	cmp	r3, #24
 800adfc:	dc38      	bgt.n	800ae70 <ReceivePacket+0xb0>
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	dd56      	ble.n	800aeb0 <ReceivePacket+0xf0>
 800ae02:	3b01      	subs	r3, #1
 800ae04:	2b17      	cmp	r3, #23
 800ae06:	d853      	bhi.n	800aeb0 <ReceivePacket+0xf0>
 800ae08:	a201      	add	r2, pc, #4	; (adr r2, 800ae10 <ReceivePacket+0x50>)
 800ae0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0e:	bf00      	nop
 800ae10:	0800ae77 	.word	0x0800ae77
 800ae14:	0800ae7d 	.word	0x0800ae7d
 800ae18:	0800aeb1 	.word	0x0800aeb1
 800ae1c:	0800aeb7 	.word	0x0800aeb7
 800ae20:	0800aeb1 	.word	0x0800aeb1
 800ae24:	0800aeb1 	.word	0x0800aeb1
 800ae28:	0800aeb1 	.word	0x0800aeb1
 800ae2c:	0800aeb1 	.word	0x0800aeb1
 800ae30:	0800aeb1 	.word	0x0800aeb1
 800ae34:	0800aeb1 	.word	0x0800aeb1
 800ae38:	0800aeb1 	.word	0x0800aeb1
 800ae3c:	0800aeb1 	.word	0x0800aeb1
 800ae40:	0800aeb1 	.word	0x0800aeb1
 800ae44:	0800aeb1 	.word	0x0800aeb1
 800ae48:	0800aeb1 	.word	0x0800aeb1
 800ae4c:	0800aeb1 	.word	0x0800aeb1
 800ae50:	0800aeb1 	.word	0x0800aeb1
 800ae54:	0800aeb1 	.word	0x0800aeb1
 800ae58:	0800aeb1 	.word	0x0800aeb1
 800ae5c:	0800aeb1 	.word	0x0800aeb1
 800ae60:	0800aeb1 	.word	0x0800aeb1
 800ae64:	0800aeb1 	.word	0x0800aeb1
 800ae68:	0800aeb1 	.word	0x0800aeb1
 800ae6c:	0800ae85 	.word	0x0800ae85
 800ae70:	2b41      	cmp	r3, #65	; 0x41
 800ae72:	d01a      	beq.n	800aeaa <ReceivePacket+0xea>
 800ae74:	e01c      	b.n	800aeb0 <ReceivePacket+0xf0>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 800ae76:	2380      	movs	r3, #128	; 0x80
 800ae78:	61fb      	str	r3, [r7, #28]
        break;
 800ae7a:	e01d      	b.n	800aeb8 <ReceivePacket+0xf8>
      case STX:
        packet_size = PACKET_1K_SIZE;
 800ae7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae80:	61fb      	str	r3, [r7, #28]
        break;
 800ae82:	e019      	b.n	800aeb8 <ReceivePacket+0xf8>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 800ae84:	f107 0113 	add.w	r1, r7, #19
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	4831      	ldr	r0, [pc, #196]	; (800af54 <ReceivePacket+0x194>)
 800ae8e:	f007 faed 	bl	801246c <HAL_UART_Receive>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d105      	bne.n	800aea4 <ReceivePacket+0xe4>
 800ae98:	7cfb      	ldrb	r3, [r7, #19]
 800ae9a:	2b18      	cmp	r3, #24
 800ae9c:	d102      	bne.n	800aea4 <ReceivePacket+0xe4>
        {
          packet_size = 2;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 800aea2:	e009      	b.n	800aeb8 <ReceivePacket+0xf8>
          status = HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	76fb      	strb	r3, [r7, #27]
        break;
 800aea8:	e006      	b.n	800aeb8 <ReceivePacket+0xf8>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	76fb      	strb	r3, [r7, #27]
        break;
 800aeae:	e003      	b.n	800aeb8 <ReceivePacket+0xf8>
      default:
        status = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	76fb      	strb	r3, [r7, #27]
        break;
 800aeb4:	e000      	b.n	800aeb8 <ReceivePacket+0xf8>
        break;
 800aeb6:	bf00      	nop
    }
    *p_data = char1;
 800aeb8:	7cfa      	ldrb	r2, [r7, #19]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	2b7f      	cmp	r3, #127	; 0x7f
 800aec2:	d93f      	bls.n	800af44 <ReceivePacket+0x184>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	1c99      	adds	r1, r3, #2
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	3304      	adds	r3, #4
 800aece:	b29a      	uxth	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4820      	ldr	r0, [pc, #128]	; (800af54 <ReceivePacket+0x194>)
 800aed4:	f007 faca 	bl	801246c <HAL_UART_Receive>
 800aed8:	4603      	mov	r3, r0
 800aeda:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 800aedc:	7efb      	ldrb	r3, [r7, #27]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d12e      	bne.n	800af40 <ReceivePacket+0x180>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3302      	adds	r3, #2
 800aee6:	781a      	ldrb	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3303      	adds	r3, #3
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	43db      	mvns	r3, r3
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d004      	beq.n	800af00 <ReceivePacket+0x140>
        {
          packet_size = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	76fb      	strb	r3, [r7, #27]
 800aefe:	e021      	b.n	800af44 <ReceivePacket+0x184>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	3304      	adds	r3, #4
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	4413      	add	r3, r2
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	021b      	lsls	r3, r3, #8
 800af0c:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	3305      	adds	r3, #5
 800af12:	68fa      	ldr	r2, [r7, #12]
 800af14:	4413      	add	r3, r2
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	461a      	mov	r2, r3
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4413      	add	r3, r2
 800af1e:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	3304      	adds	r3, #4
 800af24:	69f9      	ldr	r1, [r7, #28]
 800af26:	4618      	mov	r0, r3
 800af28:	f000 f849 	bl	800afbe <Cal_CRC16>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461a      	mov	r2, r3
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	4293      	cmp	r3, r2
 800af34:	d006      	beq.n	800af44 <ReceivePacket+0x184>
          {
            packet_size = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	76fb      	strb	r3, [r7, #27]
 800af3e:	e001      	b.n	800af44 <ReceivePacket+0x184>
          }
        }
      }
      else
      {
        packet_size = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	601a      	str	r2, [r3, #0]
  return status;
 800af4a:	7efb      	ldrb	r3, [r7, #27]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3720      	adds	r7, #32
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	20001360 	.word	0x20001360

0800af58 <UpdateCRC16>:
 * @param[in] input byte
 * @return None
 **/

uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	460a      	mov	r2, r1
 800af62:	80fb      	strh	r3, [r7, #6]
 800af64:	4613      	mov	r3, r2
 800af66:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 800af68:	88fb      	ldrh	r3, [r7, #6]
 800af6a:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 800af6c:	797b      	ldrb	r3, [r7, #5]
 800af6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af72:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	005b      	lsls	r3, r3, #1
 800af78:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	005b      	lsls	r3, r3, #1
 800af7e:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af86:	2b00      	cmp	r3, #0
 800af88:	d002      	beq.n	800af90 <UpdateCRC16+0x38>
      ++crc;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3301      	adds	r3, #1
 800af8e:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d005      	beq.n	800afa6 <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800afa0:	f083 0301 	eor.w	r3, r3, #1
 800afa4:	60fb      	str	r3, [r7, #12]
  }

  while(!(in & 0x10000));
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d0e1      	beq.n	800af74 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	b29b      	uxth	r3, r3
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	bc80      	pop	{r7}
 800afbc:	4770      	bx	lr

0800afbe <Cal_CRC16>:
 * @param[in] length
 * @return None
 **/

uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
 800afc6:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	4413      	add	r3, r2
 800afd2:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 800afd4:	e00a      	b.n	800afec <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	b298      	uxth	r0, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	1c5a      	adds	r2, r3, #1
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	4619      	mov	r1, r3
 800afe4:	f7ff ffb8 	bl	800af58 <UpdateCRC16>
 800afe8:	4603      	mov	r3, r0
 800afea:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d3f0      	bcc.n	800afd6 <Cal_CRC16+0x18>

  crc = UpdateCRC16(crc, 0);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	2100      	movs	r1, #0
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff ffac 	bl	800af58 <UpdateCRC16>
 800b000:	4603      	mov	r3, r0
 800b002:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	b29b      	uxth	r3, r3
 800b008:	2100      	movs	r1, #0
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff ffa4 	bl	800af58 <UpdateCRC16>
 800b010:	4603      	mov	r3, r0
 800b012:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	b29b      	uxth	r3, r3
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <Ymodem_Receive>:
 * @param[out] p_size The size of the file.
 * @return COM_StatusTypeDef result of reception/programming
 **/

COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b092      	sub	sp, #72	; 0x48
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0, packets_received = 0, bytes_received = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	643b      	str	r3, [r7, #64]	; 0x40
 800b02c:	2300      	movs	r3, #0
 800b02e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b030:	2300      	movs	r3, #0
 800b032:	637b      	str	r3, [r7, #52]	; 0x34
 800b034:	2300      	movs	r3, #0
 800b036:	633b      	str	r3, [r7, #48]	; 0x30
 800b038:	2300      	movs	r3, #0
 800b03a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t filesize;
  uint8_t *file_ptr, *data_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH];
  COM_StatusTypeDef result = COM_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  while ((session_done == 0) && (result == COM_OK))
 800b042:	e0ea      	b.n	800b21a <Ymodem_Receive+0x1fa>
  {
    packets_received = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	633b      	str	r3, [r7, #48]	; 0x30
    file_done = 0;
 800b048:	2300      	movs	r3, #0
 800b04a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 800b04c:	e0dd      	b.n	800b20a <Ymodem_Receive+0x1ea>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 800b04e:	f107 031c 	add.w	r3, r7, #28
 800b052:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b056:	4619      	mov	r1, r3
 800b058:	4877      	ldr	r0, [pc, #476]	; (800b238 <Ymodem_Receive+0x218>)
 800b05a:	f7ff feb1 	bl	800adc0 <ReceivePacket>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d003      	beq.n	800b06c <Ymodem_Receive+0x4c>
 800b064:	2b02      	cmp	r3, #2
 800b066:	f000 80b2 	beq.w	800b1ce <Ymodem_Receive+0x1ae>
 800b06a:	e0ba      	b.n	800b1e2 <Ymodem_Receive+0x1c2>
      {
        case HAL_OK:
          errors = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d008      	beq.n	800b088 <Ymodem_Receive+0x68>
 800b076:	2b02      	cmp	r3, #2
 800b078:	d10c      	bne.n	800b094 <Ymodem_Receive+0x74>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 800b07a:	2006      	movs	r0, #6
 800b07c:	f7fe fc46 	bl	800990c <Serial_PutByte>
              result = COM_ABORT;
 800b080:	2302      	movs	r3, #2
 800b082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              break;
 800b086:	e0a1      	b.n	800b1cc <Ymodem_Receive+0x1ac>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 800b088:	2006      	movs	r0, #6
 800b08a:	f7fe fc3f 	bl	800990c <Serial_PutByte>
              file_done = 1;
 800b08e:	2301      	movs	r3, #1
 800b090:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 800b092:	e09b      	b.n	800b1cc <Ymodem_Receive+0x1ac>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != (0xFFU & packets_received))
 800b094:	4b68      	ldr	r3, [pc, #416]	; (800b238 <Ymodem_Receive+0x218>)
 800b096:	789b      	ldrb	r3, [r3, #2]
 800b098:	461a      	mov	r2, r3
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d003      	beq.n	800b0aa <Ymodem_Receive+0x8a>
              {
                Serial_PutByte(NAK);
 800b0a2:	2015      	movs	r0, #21
 800b0a4:	f7fe fc32 	bl	800990c <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 800b0a8:	e08f      	b.n	800b1ca <Ymodem_Receive+0x1aa>
                if (packets_received == 0)
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d158      	bne.n	800b162 <Ymodem_Receive+0x142>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 800b0b0:	4b61      	ldr	r3, [pc, #388]	; (800b238 <Ymodem_Receive+0x218>)
 800b0b2:	791b      	ldrb	r3, [r3, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d04c      	beq.n	800b152 <Ymodem_Receive+0x132>
                    i = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 800b0bc:	4b5f      	ldr	r3, [pc, #380]	; (800b23c <Ymodem_Receive+0x21c>)
 800b0be:	62bb      	str	r3, [r7, #40]	; 0x28
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800b0c0:	e008      	b.n	800b0d4 <Ymodem_Receive+0xb4>
                      aFileName[i++] = *file_ptr++;
 800b0c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0c4:	1c53      	adds	r3, r2, #1
 800b0c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ca:	1c59      	adds	r1, r3, #1
 800b0cc:	6479      	str	r1, [r7, #68]	; 0x44
 800b0ce:	7811      	ldrb	r1, [r2, #0]
 800b0d0:	4a5b      	ldr	r2, [pc, #364]	; (800b240 <Ymodem_Receive+0x220>)
 800b0d2:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <Ymodem_Receive+0xc2>
 800b0dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0de:	2b3f      	cmp	r3, #63	; 0x3f
 800b0e0:	d9ef      	bls.n	800b0c2 <Ymodem_Receive+0xa2>
                    aFileName[i++] = '\0';
 800b0e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0e4:	1c5a      	adds	r2, r3, #1
 800b0e6:	647a      	str	r2, [r7, #68]	; 0x44
 800b0e8:	4a55      	ldr	r2, [pc, #340]	; (800b240 <Ymodem_Receive+0x220>)
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	62bb      	str	r3, [r7, #40]	; 0x28
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800b0f8:	e00a      	b.n	800b110 <Ymodem_Receive+0xf0>
                      file_size[i++] = *file_ptr++;
 800b0fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0fc:	1c53      	adds	r3, r2, #1
 800b0fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800b100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b102:	1c59      	adds	r1, r3, #1
 800b104:	6479      	str	r1, [r7, #68]	; 0x44
 800b106:	7812      	ldrb	r2, [r2, #0]
 800b108:	3348      	adds	r3, #72	; 0x48
 800b10a:	443b      	add	r3, r7
 800b10c:	f803 2c40 	strb.w	r2, [r3, #-64]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	2b20      	cmp	r3, #32
 800b116:	d002      	beq.n	800b11e <Ymodem_Receive+0xfe>
 800b118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b11a:	2b0f      	cmp	r3, #15
 800b11c:	d9ed      	bls.n	800b0fa <Ymodem_Receive+0xda>
                    file_size[i++] = '\0';
 800b11e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	647a      	str	r2, [r7, #68]	; 0x44
 800b124:	3348      	adds	r3, #72	; 0x48
 800b126:	443b      	add	r3, r7
 800b128:	2200      	movs	r2, #0
 800b12a:	f803 2c40 	strb.w	r2, [r3, #-64]
                    Str2Int(file_size, &filesize);
 800b12e:	f107 0218 	add.w	r2, r7, #24
 800b132:	f107 0308 	add.w	r3, r7, #8
 800b136:	4611      	mov	r1, r2
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe fad7 	bl	80096ec <Str2Int>
                    *p_size = filesize;
 800b13e:	69ba      	ldr	r2, [r7, #24]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 800b144:	2006      	movs	r0, #6
 800b146:	f7fe fbe1 	bl	800990c <Serial_PutByte>
                    Serial_PutByte(CRC16);
 800b14a:	2043      	movs	r0, #67	; 0x43
 800b14c:	f7fe fbde 	bl	800990c <Serial_PutByte>
 800b150:	e036      	b.n	800b1c0 <Ymodem_Receive+0x1a0>
                    Serial_PutByte(ACK);
 800b152:	2006      	movs	r0, #6
 800b154:	f7fe fbda 	bl	800990c <Serial_PutByte>
                    file_done = 1;
 800b158:	2301      	movs	r3, #1
 800b15a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 800b15c:	2301      	movs	r3, #1
 800b15e:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 800b160:	e034      	b.n	800b1cc <Ymodem_Receive+0x1ac>
                   data_ptr = (uint8_t*)&aPacketData[PACKET_DATA_INDEX];
 800b162:	4b36      	ldr	r3, [pc, #216]	; (800b23c <Ymodem_Receive+0x21c>)
 800b164:	623b      	str	r3, [r7, #32]
                   if((filesize - bytes_received) < 1024)
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b170:	d20a      	bcs.n	800b188 <Ymodem_Receive+0x168>
                      while(data_ptr[packet_length-1] == '\x1A')
 800b172:	e002      	b.n	800b17a <Ymodem_Receive+0x15a>
                         packet_length--;
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	3b01      	subs	r3, #1
 800b178:	61fb      	str	r3, [r7, #28]
                      while(data_ptr[packet_length-1] == '\x1A')
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	6a3a      	ldr	r2, [r7, #32]
 800b180:	4413      	add	r3, r2
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	2b1a      	cmp	r3, #26
 800b186:	d0f5      	beq.n	800b174 <Ymodem_Receive+0x154>
                   bytes_received += packet_length;
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b18c:	4413      	add	r3, r2
 800b18e:	62fb      	str	r3, [r7, #44]	; 0x2c
                   if(Ymodem_Receive_UserCallback(data_ptr, packet_length) == CBOOT_NO_ERROR)
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	4619      	mov	r1, r3
 800b194:	6a38      	ldr	r0, [r7, #32]
 800b196:	f7ff fd1b 	bl	800abd0 <Ymodem_Receive_UserCallback>
 800b19a:	4603      	mov	r3, r0
 800b19c:	461a      	mov	r2, r3
 800b19e:	f240 234b 	movw	r3, #587	; 0x24b
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d103      	bne.n	800b1ae <Ymodem_Receive+0x18e>
                      Serial_PutByte(ACK);
 800b1a6:	2006      	movs	r0, #6
 800b1a8:	f7fe fbb0 	bl	800990c <Serial_PutByte>
 800b1ac:	e008      	b.n	800b1c0 <Ymodem_Receive+0x1a0>
                    Serial_PutByte(CA);
 800b1ae:	2018      	movs	r0, #24
 800b1b0:	f7fe fbac 	bl	800990c <Serial_PutByte>
                    Serial_PutByte(CA);
 800b1b4:	2018      	movs	r0, #24
 800b1b6:	f7fe fba9 	bl	800990c <Serial_PutByte>
                    result = COM_DATA;
 800b1ba:	2304      	movs	r3, #4
 800b1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                packets_received ++;
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	633b      	str	r3, [r7, #48]	; 0x30
                session_begin = 1;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b1ca:	bf00      	nop
          }
          break;
 800b1cc:	e01d      	b.n	800b20a <Ymodem_Receive+0x1ea>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 800b1ce:	2018      	movs	r0, #24
 800b1d0:	f7fe fb9c 	bl	800990c <Serial_PutByte>
          Serial_PutByte(CA);
 800b1d4:	2018      	movs	r0, #24
 800b1d6:	f7fe fb99 	bl	800990c <Serial_PutByte>
          result = COM_ABORT;
 800b1da:	2302      	movs	r3, #2
 800b1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b1e0:	e013      	b.n	800b20a <Ymodem_Receive+0x1ea>
        default:
          if (session_begin > 0)
 800b1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <Ymodem_Receive+0x1ce>
          {
            errors ++;
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f0:	2b05      	cmp	r3, #5
 800b1f2:	d906      	bls.n	800b202 <Ymodem_Receive+0x1e2>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 800b1f4:	2018      	movs	r0, #24
 800b1f6:	f7fe fb89 	bl	800990c <Serial_PutByte>
            Serial_PutByte(CA);
 800b1fa:	2018      	movs	r0, #24
 800b1fc:	f7fe fb86 	bl	800990c <Serial_PutByte>
 800b200:	e002      	b.n	800b208 <Ymodem_Receive+0x1e8>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 800b202:	2043      	movs	r0, #67	; 0x43
 800b204:	f7fe fb82 	bl	800990c <Serial_PutByte>
          }
          break;
 800b208:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 800b20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d104      	bne.n	800b21a <Ymodem_Receive+0x1fa>
 800b210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b214:	2b00      	cmp	r3, #0
 800b216:	f43f af1a 	beq.w	800b04e <Ymodem_Receive+0x2e>
  while ((session_done == 0) && (result == COM_OK))
 800b21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d104      	bne.n	800b22a <Ymodem_Receive+0x20a>
 800b220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b224:	2b00      	cmp	r3, #0
 800b226:	f43f af0d 	beq.w	800b044 <Ymodem_Receive+0x24>
      }
    }
  }
  return result;
 800b22a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3748      	adds	r7, #72	; 0x48
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20001c5c 	.word	0x20001c5c
 800b23c:	20001c60 	.word	0x20001c60
 800b240:	20001c1c 	.word	0x20001c1c

0800b244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b244:	480d      	ldr	r0, [pc, #52]	; (800b27c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800b246:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b248:	f7ff fb72 	bl	800a930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b24c:	480c      	ldr	r0, [pc, #48]	; (800b280 <LoopForever+0x6>)
  ldr r1, =_edata
 800b24e:	490d      	ldr	r1, [pc, #52]	; (800b284 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b250:	4a0d      	ldr	r2, [pc, #52]	; (800b288 <LoopForever+0xe>)
  movs r3, #0
 800b252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b254:	e002      	b.n	800b25c <LoopCopyDataInit>

0800b256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b25a:	3304      	adds	r3, #4

0800b25c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b25c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b25e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b260:	d3f9      	bcc.n	800b256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b262:	4a0a      	ldr	r2, [pc, #40]	; (800b28c <LoopForever+0x12>)
  ldr r4, =_ebss
 800b264:	4c0a      	ldr	r4, [pc, #40]	; (800b290 <LoopForever+0x16>)
  movs r3, #0
 800b266:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b268:	e001      	b.n	800b26e <LoopFillZerobss>

0800b26a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b26a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b26c:	3204      	adds	r2, #4

0800b26e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b26e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b270:	d3fb      	bcc.n	800b26a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800b272:	f00d fbd3 	bl	8018a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b276:	f7fe fbe9 	bl	8009a4c <main>

0800b27a <LoopForever>:

LoopForever:
    b LoopForever
 800b27a:	e7fe      	b.n	800b27a <LoopForever>
  ldr   r0, =_estack
 800b27c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b280:	20000080 	.word	0x20000080
  ldr r1, =_edata
 800b284:	20000760 	.word	0x20000760
  ldr r2, =_sidata
 800b288:	0802090c 	.word	0x0802090c
  ldr r2, =_sbss
 800b28c:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 800b290:	2000587c 	.word	0x2000587c

0800b294 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b294:	e7fe      	b.n	800b294 <ADC_IRQHandler>

0800b296 <crc32Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

error_t crc32Compute(const void *data, size_t length, uint8_t *digest)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b086      	sub	sp, #24
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	60f8      	str	r0, [r7, #12]
 800b29e:	60b9      	str	r1, [r7, #8]
 800b2a0:	607a      	str	r2, [r7, #4]
   //Allocate a memory buffer to hold the CRC32 context
   Crc32Context *context = cryptoAllocMem(sizeof(Crc32Context));
 800b2a2:	2004      	movs	r0, #4
 800b2a4:	f7fe f945 	bl	8009532 <osAllocMem>
 800b2a8:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(context == NULL)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <crc32Compute+0x1e>
      return ERROR_OUT_OF_MEMORY;
 800b2b0:	2364      	movs	r3, #100	; 0x64
 800b2b2:	e00f      	b.n	800b2d4 <crc32Compute+0x3e>

   //Initialize the CRC32 context
   crc32Init(context);
 800b2b4:	6978      	ldr	r0, [r7, #20]
 800b2b6:	f000 f811 	bl	800b2dc <crc32Init>
   //Digest the message
   crc32Update(context, data, length);
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	68f9      	ldr	r1, [r7, #12]
 800b2be:	6978      	ldr	r0, [r7, #20]
 800b2c0:	f000 f81a 	bl	800b2f8 <crc32Update>
   //Finalize the CRC32 message digest
   crc32Final(context, digest);
 800b2c4:	6879      	ldr	r1, [r7, #4]
 800b2c6:	6978      	ldr	r0, [r7, #20]
 800b2c8:	f000 f844 	bl	800b354 <crc32Final>

   //Free previously allocated memory
   cryptoFreeMem(context);
 800b2cc:	6978      	ldr	r0, [r7, #20]
 800b2ce:	f7fe f93d 	bl	800954c <osFreeMem>
   //Successful processing
   return NO_ERROR;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <crc32Init>:
 * @brief Initialize CRC32 message digest context
 * @param[in] context Pointer to the CRC32 context to initialize
 **/

void crc32Init(Crc32Context *context)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
   //CRC (digest) preset value
   context->digest = 0xFFFFFFFF;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ea:	601a      	str	r2, [r3, #0]
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bc80      	pop	{r7}
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <crc32Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void crc32Update(Crc32Context *context, const void *data, size_t length)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b089      	sub	sp, #36	; 0x24
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
   size_t i;
   const uint8_t *p;
   uint32_t crc;

   //Restaure last crc
   crc = (uint32_t)context->digest;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	61bb      	str	r3, [r7, #24]

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	617b      	str	r3, [r7, #20]

   //Process the incoming data
   for(i = 0; i < length; i++)
 800b30e:	2300      	movs	r3, #0
 800b310:	61fb      	str	r3, [r7, #28]
 800b312:	e010      	b.n	800b336 <crc32Update+0x3e>
   {
      //The message is processed byte by byte
      crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ p[i]];
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	0a1a      	lsrs	r2, r3, #8
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	6978      	ldr	r0, [r7, #20]
 800b31e:	69f9      	ldr	r1, [r7, #28]
 800b320:	4401      	add	r1, r0
 800b322:	7809      	ldrb	r1, [r1, #0]
 800b324:	404b      	eors	r3, r1
 800b326:	490a      	ldr	r1, [pc, #40]	; (800b350 <crc32Update+0x58>)
 800b328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b32c:	4053      	eors	r3, r2
 800b32e:	61bb      	str	r3, [r7, #24]
   for(i = 0; i < length; i++)
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	3301      	adds	r3, #1
 800b334:	61fb      	str	r3, [r7, #28]
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d3ea      	bcc.n	800b314 <crc32Update+0x1c>
   }

   //Save updated crc
   context->digest = crc;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	69ba      	ldr	r2, [r7, #24]
 800b342:	601a      	str	r2, [r3, #0]
}
 800b344:	bf00      	nop
 800b346:	3724      	adds	r7, #36	; 0x24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bc80      	pop	{r7}
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	0801f9cc 	.word	0x0801f9cc

0800b354 <crc32Final>:
 * @param[in] context Pointer to the CRC32 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

void crc32Final(Crc32Context *context, uint8_t *digest)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
   //Copy the resulting digest
   if(digest != NULL)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d004      	beq.n	800b36e <crc32Final+0x1a>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	461a      	mov	r2, r3
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	601a      	str	r2, [r3, #0]
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	bc80      	pop	{r7}
 800b376:	4770      	bx	lr

0800b378 <iapGetDefaultSettings>:
* @brief Initialize settings with default values
* @param[in,out] settings Structure that contains IAP settings
**/

void iapGetDefaultSettings(IapSettings *settings)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
   //Clear image output crypto settings structure
   memset(settings, 0x00, sizeof(IapSettings));
 800b380:	2224      	movs	r2, #36	; 0x24
 800b382:	2100      	movs	r1, #0
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f00d fa85 	bl	8018894 <memset>

#if (VERIFY_INTEGRITY_SUPPORT == ENABLED || IAP_SINGLE_BANK_SUPPORT == ENABLED)
   //IAP integrity setting
   settings->imageInCrypto.verifySettings.integrityAlgo = NULL;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	60da      	str	r2, [r3, #12]
   settings->imageInCrypto.cipherAlgo = NULL;
   settings->imageInCrypto.cipherMode = CIPHER_MODE_NULL;
   settings->imageInCrypto.cipherKey = NULL;
   settings->imageInCrypto.cipherKeyLen = 0;
#endif
}
 800b390:	bf00      	nop
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <iapInit>:
 * @param[in,out] context Pointer to the IAP Application context to be initialized
 * @return Status code
 **/

cboot_error_t iapInit(IapContext *context, const IapSettings *settings)
{
 800b398:	b5b0      	push	{r4, r5, r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   uint16_t newImgIdx;
#endif

   //Check Parameters validity
   if(context == NULL || settings == NULL)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d002      	beq.n	800b3ae <iapInit+0x16>
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d102      	bne.n	800b3b4 <iapInit+0x1c>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800b3ae:	f240 234d 	movw	r3, #589	; 0x24d
 800b3b2:	e073      	b.n	800b49c <iapInit+0x104>

   //Debug message
   TRACE_INFO("Initializing IAP...\r\n");

   //Clear the IAP context
   memset(context, 0, sizeof(IapContext));
 800b3b4:	f640 0204 	movw	r2, #2052	; 0x804
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f00d fa6a 	bl	8018894 <memset>

    //Save user settings
   context->settings = *settings;
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	461d      	mov	r5, r3
 800b3c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3d0:	682b      	ldr	r3, [r5, #0]
 800b3d2:	6023      	str	r3, [r4, #0]

   //Initialize primary (internal flash) memory driver
   error = iapInitPrimaryMemory(&context->settings,context);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f000 f9b4 	bl	800b746 <iapInitPrimaryMemory>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b3e2:	89fb      	ldrh	r3, [r7, #14]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <iapInit+0x56>
      return CBOOT_ERROR_FAILURE;
 800b3e8:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b3ec:	e056      	b.n	800b49c <iapInit+0x104>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   //Initialize secondary (external) memory driver
   error = iapInitSecondaryMemory(&context->settings,context);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6879      	ldr	r1, [r7, #4]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 fa03 	bl	800b7fe <iapInitSecondaryMemory>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b3fc:	89fb      	ldrh	r3, [r7, #14]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d002      	beq.n	800b408 <iapInit+0x70>
      return CBOOT_ERROR_FAILURE;
 800b402:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b406:	e049      	b.n	800b49c <iapInit+0x104>
#endif

   //Initialize image input context (will process received update image)
   error = iapInitInputImage(&context->settings,context);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6879      	ldr	r1, [r7, #4]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 fa55 	bl	800b8bc <iapInitInputImage>
 800b412:	4603      	mov	r3, r0
 800b414:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b416:	89fb      	ldrh	r3, [r7, #14]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <iapInit+0x8a>
      return CBOOT_ERROR_FAILURE;
 800b41c:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b420:	e03c      	b.n	800b49c <iapInit+0x104>

   //Initialize image output context (will process the output binary or image)
   error = iapInitOutputImage(&context->settings,context);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	4618      	mov	r0, r3
 800b428:	f000 fab6 	bl	800b998 <iapInitOutputImage>
 800b42c:	4603      	mov	r3, r0
 800b42e:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b430:	89fb      	ldrh	r3, [r7, #14]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d002      	beq.n	800b43c <iapInit+0xa4>
      return CBOOT_ERROR_FAILURE;
 800b436:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b43a:	e02f      	b.n	800b49c <iapInit+0x104>

#if IAP_SINGLE_BANK_SUPPORT == ENABLED
   // Set index of output image
   error = iapCalculateOutputImageIdx(context, &newImgIdx);
 800b43c:	f107 030c 	add.w	r3, r7, #12
 800b440:	4619      	mov	r1, r3
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 f93d 	bl	800b6c2 <iapCalculateOutputImageIdx>
 800b448:	4603      	mov	r3, r0
 800b44a:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b44c:	89fb      	ldrh	r3, [r7, #14]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <iapInit+0xc0>
      return CBOOT_ERROR_FAILURE;
 800b452:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b456:	e021      	b.n	800b49c <iapInit+0x104>

   context->imageOutput.imgIdx = newImgIdx;
 800b458:	89ba      	ldrh	r2, [r7, #12]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8a3 2430 	strh.w	r2, [r3, #1072]	; 0x430
#endif

   //Get slot to store output update image
   error = iapGetUpdateSlot(context, &context->imageOutput.slotInfo);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f957 	bl	800b71c <iapGetUpdateSlot>
 800b46e:	4603      	mov	r3, r0
 800b470:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b472:	89fb      	ldrh	r3, [r7, #14]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <iapInit+0xe6>
      return CBOOT_ERROR_FAILURE;
 800b478:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b47c:	e00e      	b.n	800b49c <iapInit+0x104>

   //Get external flash memory start address
   context->imageOutput.firmwareAddr = context->imageOutput.slotInfo->addr;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438

   //Initialize memory position to flash bank start addresse
   context->imageOutput.pos = context->imageOutput.firmwareAddr;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 2438 	ldr.w	r2, [r3, #1080]	; 0x438
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

   //Successful process
   return CBOOT_NO_ERROR;
 800b498:	f240 234b 	movw	r3, #587	; 0x24b
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bdb0      	pop	{r4, r5, r7, pc}

0800b4a4 <iapUpdate>:
 * @param[in] length Length of the firmware chunck of data to be written
 * @return Status code
 **/

cboot_error_t iapUpdate(IapContext *context, const void *data, size_t length)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
   error_t error;
   uint_t n;
   uint8_t *pData;

   //Check parameters validity
   if (context == NULL || data == NULL || length == 0)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <iapUpdate+0x1e>
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <iapUpdate+0x1e>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d102      	bne.n	800b4c8 <iapUpdate+0x24>
      return CBOOT_ERROR_INVALID_PARAMETERS;//ERROR_INVALID_PARAMETER;
 800b4c2:	f240 234d 	movw	r3, #589	; 0x24d
 800b4c6:	e065      	b.n	800b594 <iapUpdate+0xf0>

   //Initialize variables
   n = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	617b      	str	r3, [r7, #20]
   error = NO_ERROR;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	83fb      	strh	r3, [r7, #30]

   //Point to the beginning of the data
   pData = (uint8_t*)data;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	61bb      	str	r3, [r7, #24]

   //Process the incoming data
   while(length > 0)
 800b4d4:	e053      	b.n	800b57e <iapUpdate+0xda>
   {
      //Still room in buffer?
      if(context->imageInput.bufferLen < sizeof(context->imageInput.buffer))
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b4dc:	2b7f      	cmp	r3, #127	; 0x7f
 800b4de:	d83e      	bhi.n	800b55e <iapUpdate+0xba>
      {
         //Fill buffer with input data
         n = MIN(length, sizeof(context->imageInput.buffer) - context->imageInput.bufferLen);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b4e6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	bf28      	it	cs
 800b4f0:	4613      	movcs	r3, r2
 800b4f2:	617b      	str	r3, [r7, #20]
         memcpy(context->imageInput.bufferPos, pData, n);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	69b9      	ldr	r1, [r7, #24]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f00d fab4 	bl	8018a6c <memcpy>

         //Update buffer position and length
         context->imageInput.bufferPos += n;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	441a      	add	r2, r3
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
         context->imageInput.bufferLen += n;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	441a      	add	r2, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

         //Update input data postion and length
         pData += n;
 800b524:	69ba      	ldr	r2, [r7, #24]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	4413      	add	r3, r2
 800b52a:	61bb      	str	r3, [r7, #24]
         length -= n;
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	607b      	str	r3, [r7, #4]

         //Process received image input data
         error = iapProcessInputImage(&context->imageInput);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	335c      	adds	r3, #92	; 0x5c
 800b538:	4618      	mov	r0, r3
 800b53a:	f000 fb8b 	bl	800bc54 <iapProcessInputImage>
 800b53e:	4603      	mov	r3, r0
 800b540:	83fb      	strh	r3, [r7, #30]
         //Is any error?
         if(error)
 800b542:	8bfb      	ldrh	r3, [r7, #30]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d01a      	beq.n	800b57e <iapUpdate+0xda>
         {
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
            //Erase output image slot first bytes to make sure bootloader doesn't
            //consider it as a new valid update image if a reboot occurs
            context->secondaryMem.driver->erase(
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b54c:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 800b554:	6812      	ldr	r2, [r2, #0]
 800b556:	2140      	movs	r1, #64	; 0x40
 800b558:	4610      	mov	r0, r2
 800b55a:	4798      	blx	r3
#endif
            break;
 800b55c:	e012      	b.n	800b584 <iapUpdate+0xe0>
         }
      }
      else
      {
         //Debug message
         TRACE_ERROR("Buffer would overflow!\r\n");
 800b55e:	f7fd ffd2 	bl	8009506 <osSuspendAllTasks>
 800b562:	4b0e      	ldr	r3, [pc, #56]	; (800b59c <iapUpdate+0xf8>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	2218      	movs	r2, #24
 800b56a:	2101      	movs	r1, #1
 800b56c:	480c      	ldr	r0, [pc, #48]	; (800b5a0 <iapUpdate+0xfc>)
 800b56e:	f00d f869 	bl	8018644 <fwrite>
 800b572:	f7fd ffd3 	bl	800951c <osResumeAllTasks>
         error = ERROR_BUFFER_OVERFLOW;
 800b576:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800b57a:	83fb      	strh	r3, [r7, #30]
         break;
 800b57c:	e002      	b.n	800b584 <iapUpdate+0xe0>
   while(length > 0)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1a8      	bne.n	800b4d6 <iapUpdate+0x32>
      }
   }

   //Return error code
   if(error) {
 800b584:	8bfb      	ldrh	r3, [r7, #30]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d002      	beq.n	800b590 <iapUpdate+0xec>
      return CBOOT_ERROR_FAILURE;
 800b58a:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b58e:	e001      	b.n	800b594 <iapUpdate+0xf0>
   } else {
      return CBOOT_NO_ERROR;
 800b590:	f240 234b 	movw	r3, #587	; 0x24b
   }
}
 800b594:	4618      	mov	r0, r3
 800b596:	3720      	adds	r7, #32
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	200001c8 	.word	0x200001c8
 800b5a0:	0801f524 	.word	0x0801f524

0800b5a4 <iapFinalize>:
 * @param[in,out] context Pointer to the IAP application context
 * @return Error code
 **/

cboot_error_t iapFinalize(IapContext* context)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
   IAP_EXT_MEM_ENCRYPTION_SUPPORT == ENABLED)
   BootMailBox bMsg;
#endif

   //Check parameters validity
   if (context == NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d102      	bne.n	800b5b8 <iapFinalize+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800b5b2:	f240 234d 	movw	r3, #589	; 0x24d
 800b5b6:	e051      	b.n	800b65c <iapFinalize+0xb8>

   //Debug message
   TRACE_INFO("Finalizing firmware update...\r\n");

   //Ready to verify firmware image validity?
   if (context->imageInput.state == IAP_STATE_VALIDATE_APP)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	d134      	bne.n	800b62c <iapFinalize+0x88>
   {
      //Verify firmware image validity (could integrity tag or
      //authentification tag or signature)
      error = verifyConfirm(&context->imageInput.verifyContext, context->imageInput.checkData, context->imageInput.checkDataLen);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f503 7108 	add.w	r1, r3, #544	; 0x220
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	f001 fab1 	bl	800cb3c <verifyConfirm>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if (error)
 800b5de:	89fb      	ldrh	r3, [r7, #14]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d01c      	beq.n	800b61e <iapFinalize+0x7a>
      {
         //Debug message
         TRACE_ERROR("Firmware image is invalid!\r\n");
 800b5e4:	f7fd ff8f 	bl	8009506 <osSuspendAllTasks>
 800b5e8:	4b1e      	ldr	r3, [pc, #120]	; (800b664 <iapFinalize+0xc0>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	221c      	movs	r2, #28
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	481d      	ldr	r0, [pc, #116]	; (800b668 <iapFinalize+0xc4>)
 800b5f4:	f00d f826 	bl	8018644 <fwrite>
 800b5f8:	f7fd ff90 	bl	800951c <osResumeAllTasks>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
            //Erase output image slot first bytes to make sure bootloader doesn't
            //consider it as a new valid update image if a reboot occurs
            context->secondaryMem.driver->erase(
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b600:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 800b608:	6812      	ldr	r2, [r2, #0]
 800b60a:	2140      	movs	r1, #64	; 0x40
 800b60c:	4610      	mov	r0, r2
 800b60e:	4798      	blx	r3
#endif

         //Return to IAP idle state
         context->imageInput.state = IAP_STATE_IDLE;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
         //Return error code
         return CBOOT_ERROR_INVALID_IMAGE_APP;
 800b618:	f44f 7315 	mov.w	r3, #596	; 0x254
 800b61c:	e01e      	b.n	800b65c <iapFinalize+0xb8>
         if(error)
            return CBOOT_ERROR_FAILURE;
      }
#endif
      //Change IAP state
      context->imageInput.state = IAP_STATE_APP_REBOOT;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2205      	movs	r2, #5
 800b622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return CBOOT_ERROR_IMAGE_NOT_READY;
   }

   //Successful process
   return CBOOT_NO_ERROR;
 800b626:	f240 234b 	movw	r3, #587	; 0x24b
 800b62a:	e017      	b.n	800b65c <iapFinalize+0xb8>
      TRACE_ERROR("Firmware image is not ready for verification!\r\n");
 800b62c:	f7fd ff6b 	bl	8009506 <osSuspendAllTasks>
 800b630:	4b0c      	ldr	r3, [pc, #48]	; (800b664 <iapFinalize+0xc0>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	222f      	movs	r2, #47	; 0x2f
 800b638:	2101      	movs	r1, #1
 800b63a:	480c      	ldr	r0, [pc, #48]	; (800b66c <iapFinalize+0xc8>)
 800b63c:	f00d f802 	bl	8018644 <fwrite>
 800b640:	f7fd ff6c 	bl	800951c <osResumeAllTasks>
            context->secondaryMem.driver->erase(
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b648:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 800b650:	6812      	ldr	r2, [r2, #0]
 800b652:	2140      	movs	r1, #64	; 0x40
 800b654:	4610      	mov	r0, r2
 800b656:	4798      	blx	r3
      return CBOOT_ERROR_IMAGE_NOT_READY;
 800b658:	f240 2355 	movw	r3, #597	; 0x255
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	200001c8 	.word	0x200001c8
 800b668:	0801f540 	.word	0x0801f540
 800b66c:	0801f560 	.word	0x0801f560

0800b670 <iapReboot>:
 * @param[in] context Pointer to the IAP context
 * @return Error code.
 **/

cboot_error_t iapReboot(IapContext* context)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]

   //Debug message
   TRACE_INFO("Rebooting device to finalize update...\r\n");

   //Check parameter validity
   if (context == NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d102      	bne.n	800b684 <iapReboot+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800b67e:	f240 234d 	movw	r3, #589	; 0x24d
 800b682:	e01a      	b.n	800b6ba <iapReboot+0x4a>

   if (context->imageInput.state == IAP_STATE_APP_REBOOT)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b68a:	2b05      	cmp	r3, #5
 800b68c:	d113      	bne.n	800b6b6 <iapReboot+0x46>
   {
      //Get flash info
      error = context->primaryMem.driver->getInfo(&memInfo);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	f107 0208 	add.w	r2, r7, #8
 800b698:	4610      	mov	r0, r2
 800b69a:	4798      	blx	r3
 800b69c:	4603      	mov	r3, r0
 800b69e:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800b6a0:	89fb      	ldrh	r3, [r7, #14]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <iapReboot+0x3c>
         return CBOOT_ERROR_FAILURE;
 800b6a6:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b6aa:	e006      	b.n	800b6ba <iapReboot+0x4a>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Reboot system to complete firmware update procedure
      mcuSystemReset();
 800b6ac:	f001 f9a0 	bl	800c9f0 <mcuSystemReset>
      //Wrong state
      return CBOOT_ERROR_INVALID_STATE;
   }

   //Successful process
   return CBOOT_NO_ERROR;
 800b6b0:	f240 234b 	movw	r3, #587	; 0x24b
 800b6b4:	e001      	b.n	800b6ba <iapReboot+0x4a>
      return CBOOT_ERROR_INVALID_STATE;
 800b6b6:	f240 2356 	movw	r3, #598	; 0x256
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <iapCalculateOutputImageIdx>:
 * @param[out] imgIdx Calculated value of the output image index.
 * @return Error code.
 **/

error_t iapCalculateOutputImageIdx(IapContext *context, uint16_t *imgIdx)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b094      	sub	sp, #80	; 0x50
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
   ImageHeader imgHeader;
   uint32_t curIdx;
   error_t error;

   //Check paramter validity
   if(context == NULL || imgIdx == NULL)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d002      	beq.n	800b6d8 <iapCalculateOutputImageIdx+0x16>
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d101      	bne.n	800b6dc <iapCalculateOutputImageIdx+0x1a>
      return ERROR_INVALID_PARAMETER;
 800b6d8:	2302      	movs	r3, #2
 800b6da:	e01b      	b.n	800b714 <iapCalculateOutputImageIdx+0x52>

   //Get image header from primary flash memory first slot
   error = iapGetImageHeaderFromSlot(&context->primaryMem.slots[0], &imgHeader);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	3328      	adds	r3, #40	; 0x28
 800b6e0:	f107 0208 	add.w	r2, r7, #8
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f000 fa76 	bl	800bbd8 <iapGetImageHeaderFromSlot>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   //Is any error?
   if(error)
 800b6f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <iapCalculateOutputImageIdx+0x3e>
      return error;
 800b6fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b6fe:	e009      	b.n	800b714 <iapCalculateOutputImageIdx+0x52>

   //Get image index from header
   curIdx = imgHeader.imgIndex;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	64bb      	str	r3, [r7, #72]	; 0x48
   //Save incremented image index
   *imgIdx = ++curIdx;
 800b704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b706:	3301      	adds	r3, #1
 800b708:	64bb      	str	r3, [r7, #72]	; 0x48
 800b70a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	801a      	strh	r2, [r3, #0]

   //Successful process
   return NO_ERROR;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3750      	adds	r7, #80	; 0x50
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <iapGetUpdateSlot>:
 * @param[out] slot Pointer to the slot that will be used to hold output image.
 * @return
 **/

error_t iapGetUpdateSlot(IapContext *context, SlotDesc **slot)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
   SlotDesc *tempSlot;
   ImageHeader header;
#endif

   //Check parameters validity
   if(context == NULL)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <iapGetUpdateSlot+0x14>
      return ERROR_INVALID_PARAMETER;
 800b72c:	2302      	movs	r3, #2
 800b72e:	e005      	b.n	800b73c <iapGetUpdateSlot+0x20>
   //Select the second slot of primary flash memory that match the second flash bank
   *slot = (SlotDesc*)&context->primaryMem.slots[1];
#else
#if (IAP_FALLBACK_SUPPORT == DISABLED)
   //In single bank mode without fallback support only one
   *slot = (SlotDesc*)&context->secondaryMem.slots[0];
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	601a      	str	r2, [r3, #0]
   }
#endif
#endif

   //Successful process
   return NO_ERROR;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	bc80      	pop	{r7}
 800b744:	4770      	bx	lr

0800b746 <iapInitPrimaryMemory>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitPrimaryMemory(IapSettings *settings, IapContext *context)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b086      	sub	sp, #24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	6039      	str	r1, [r7, #0]
   uint32_t nextSector;
#endif
   error_t error;

   //Check parameters validity
   if(context == NULL || settings == NULL)
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d002      	beq.n	800b75c <iapInitPrimaryMemory+0x16>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <iapInitPrimaryMemory+0x1a>
      return ERROR_INVALID_PARAMETER;
 800b75c:	2302      	movs	r3, #2
 800b75e:	e04a      	b.n	800b7f6 <iapInitPrimaryMemory+0xb0>

   //Check primary flash memory driver is valid
   if(settings->primaryFlashDriver == NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d101      	bne.n	800b76c <iapInitPrimaryMemory+0x26>
      return ERROR_INVALID_PARAMETER;
 800b768:	2302      	movs	r3, #2
 800b76a:	e044      	b.n	800b7f6 <iapInitPrimaryMemory+0xb0>

   //Save primary flash memory driver
   context->primaryMem.driver = (FlashDriver*)settings->primaryFlashDriver;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685a      	ldr	r2, [r3, #4]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	625a      	str	r2, [r3, #36]	; 0x24

   //Point to the memory driver
   flashDriver = (FlashDriver*)context->primaryMem.driver;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	617b      	str	r3, [r7, #20]

   //Initialize primary (internal) memory flash driver
   error = flashDriver->init();
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4798      	blx	r3
 800b780:	4603      	mov	r3, r0
 800b782:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b784:	8a7b      	ldrh	r3, [r7, #18]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d001      	beq.n	800b78e <iapInitPrimaryMemory+0x48>
      return error;
 800b78a:	8a7b      	ldrh	r3, [r7, #18]
 800b78c:	e033      	b.n	800b7f6 <iapInitPrimaryMemory+0xb0>

   //Get memory driver informations
   error = flashDriver->getInfo(&memInfo);
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	f107 020c 	add.w	r2, r7, #12
 800b796:	4610      	mov	r0, r2
 800b798:	4798      	blx	r3
 800b79a:	4603      	mov	r3, r0
 800b79c:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b79e:	8a7b      	ldrh	r3, [r7, #18]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <iapInitPrimaryMemory+0x62>
      return error;
 800b7a4:	8a7b      	ldrh	r3, [r7, #18]
 800b7a6:	e026      	b.n	800b7f6 <iapInitPrimaryMemory+0xb0>
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
   //Debug message
   TRACE_DEBUG("Primary flash addr = 0x%08lX | Bootloader size = 0x%08X\r\n", (unsigned long) memInfo->flashAddr, BOOTLOADER_SIZE);

   // Get the address of the next sector available after the bootloader
   error = context->primaryMem.driver->getNextSectorAddr(memInfo->flashAddr + BOOTLOADER_SIZE, &nextSector);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	68d2      	ldr	r2, [r2, #12]
 800b7b2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b7b6:	f107 0108 	add.w	r1, r7, #8
 800b7ba:	4610      	mov	r0, r2
 800b7bc:	4798      	blx	r3
 800b7be:	4603      	mov	r3, r0
 800b7c0:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b7c2:	8a7b      	ldrh	r3, [r7, #18]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d001      	beq.n	800b7cc <iapInitPrimaryMemory+0x86>
      return error;
 800b7c8:	8a7b      	ldrh	r3, [r7, #18]
 800b7ca:	e014      	b.n	800b7f6 <iapInitPrimaryMemory+0xb0>
   //Debug message
   TRACE_DEBUG("Primary slot 1 addr = 0x%08lX\r\n", (unsigned long) nextSector);

   //Set primary flash memory slot which hold current running application
   //This slot is located after the bootloader at the beginning of the next available flash sector
   context->primaryMem.slots[0].addr = nextSector;
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	629a      	str	r2, [r3, #40]	; 0x28
   context->primaryMem.slots[0].size = (memInfo->flashAddr + memInfo->flashSize) - (nextSector + settings->sizeSlot1);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	441a      	add	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a19      	ldr	r1, [r3, #32]
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	440b      	add	r3, r1
 800b7e4:	1ad2      	subs	r2, r2, r3
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	62da      	str	r2, [r3, #44]	; 0x2c
   context->primaryMem.slots[0].flash =  (FlashDesc*)&context->primaryMem;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	631a      	str	r2, [r3, #48]	; 0x30
   context->primaryMem.slots[1].size = memInfo->bankSize;
   context->primaryMem.slots[1].flash = (FlashDesc*)&context->primaryMem;
#endif

   //Succesful process
   return NO_ERROR;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3718      	adds	r7, #24
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <iapInitSecondaryMemory>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitSecondaryMemory(IapSettings *settings, IapContext *context)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b086      	sub	sp, #24
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	6039      	str	r1, [r7, #0]
   FlashDriver *flashDriver;
   const FlashInfo *memInfo;
   bool_t ret;

   //Check parameters validity
   if(context == NULL || settings == NULL)
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d002      	beq.n	800b814 <iapInitSecondaryMemory+0x16>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <iapInitSecondaryMemory+0x1a>
      return ERROR_INVALID_PARAMETER;
 800b814:	2302      	movs	r3, #2
 800b816:	e04d      	b.n	800b8b4 <iapInitSecondaryMemory+0xb6>

   //Check secondary flash memory driver is valid
   if(settings->secondaryFlashDriver == NULL)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <iapInitSecondaryMemory+0x26>
      return ERROR_INVALID_PARAMETER;
 800b820:	2302      	movs	r3, #2
 800b822:	e047      	b.n	800b8b4 <iapInitSecondaryMemory+0xb6>

   //Save secondary flash memory driver
   context->secondaryMem.driver = (FlashDriver*)settings->secondaryFlashDriver;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	691a      	ldr	r2, [r3, #16]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	641a      	str	r2, [r3, #64]	; 0x40

   //Point to the secondary flash memory driver
   flashDriver = (FlashDriver*)context->secondaryMem.driver;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b830:	617b      	str	r3, [r7, #20]

   //Initialize secondary flash memory driver
   error = flashDriver->init();
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4798      	blx	r3
 800b838:	4603      	mov	r3, r0
 800b83a:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b83c:	8a7b      	ldrh	r3, [r7, #18]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <iapInitSecondaryMemory+0x48>
      return error;
 800b842:	8a7b      	ldrh	r3, [r7, #18]
 800b844:	e036      	b.n	800b8b4 <iapInitSecondaryMemory+0xb6>

   //Get secondary flash memory driver informations
   error = flashDriver->getInfo(&memInfo);
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	f107 0208 	add.w	r2, r7, #8
 800b84e:	4610      	mov	r0, r2
 800b850:	4798      	blx	r3
 800b852:	4603      	mov	r3, r0
 800b854:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b856:	8a7b      	ldrh	r3, [r7, #18]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <iapInitSecondaryMemory+0x62>
      return error;
 800b85c:	8a7b      	ldrh	r3, [r7, #18]
 800b85e:	e029      	b.n	800b8b4 <iapInitSecondaryMemory+0xb6>
   //Debug message
   TRACE_DEBUG("Secondary flash addr = 0x%08lX\r\n", (unsigned long) memInfo->flashAddr);
   TRACE_DEBUG("Secondary slot 1 addr = 0x%08lX\r\n", (unsigned long) settings->addrSlot1);

   //Check if user slot 1 address match a secondary flash memory sector address
   ret = flashDriver->isSectorAddr(settings->addrSlot1);
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	8b92      	ldrh	r2, [r2, #28]
 800b868:	4610      	mov	r0, r2
 800b86a:	4798      	blx	r3
 800b86c:	60f8      	str	r0, [r7, #12]
   if(!ret)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <iapInitSecondaryMemory+0x7a>
      return ERROR_INVALID_VALUE;
 800b874:	23f1      	movs	r3, #241	; 0xf1
 800b876:	e01d      	b.n	800b8b4 <iapInitSecondaryMemory+0xb6>

   //Check if user slot 1 fits in secondary flash memory
   if(settings->addrSlot1 + settings->sizeSlot1 > memInfo->flashAddr + memInfo->flashSize)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	8b9b      	ldrh	r3, [r3, #28]
 800b87c:	461a      	mov	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	441a      	add	r2, r3
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	68d9      	ldr	r1, [r3, #12]
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	440b      	add	r3, r1
 800b88e:	429a      	cmp	r2, r3
 800b890:	d901      	bls.n	800b896 <iapInitSecondaryMemory+0x98>
      return ERROR_FAILURE;
 800b892:	2301      	movs	r3, #1
 800b894:	e00e      	b.n	800b8b4 <iapInitSecondaryMemory+0xb6>

   //Set secondary flash memory slot 1 which will hold the new encrypted update image
   //If fallback support is enabled the slot 1 could also hold the
   //backup encrypted image of the current running application
   context->secondaryMem.slots[0].addr = settings->addrSlot1;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	8b9b      	ldrh	r3, [r3, #28]
 800b89a:	461a      	mov	r2, r3
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	645a      	str	r2, [r3, #68]	; 0x44
   context->secondaryMem.slots[0].size = settings->sizeSlot1;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a1a      	ldr	r2, [r3, #32]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	649a      	str	r2, [r3, #72]	; 0x48
   context->secondaryMem.slots[0].flash = (FlashDesc*)&context->secondaryMem;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	64da      	str	r2, [r3, #76]	; 0x4c
   context->secondaryMem.slots[1].flash = (FlashDriver*)&context->secondaryMem;
#endif
#endif

   //Succesful process
   return NO_ERROR;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <iapInitInputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitInputImage(IapSettings *settings, IapContext *context)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
   error_t error;
   ImageContext *imageIn;

   //Initialize status code
   error = NO_ERROR;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	81fb      	strh	r3, [r7, #14]

   //Check parameters validity
   if(context == NULL || settings == NULL)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <iapInitInputImage+0x1a>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d101      	bne.n	800b8da <iapInitInputImage+0x1e>
      return ERROR_INVALID_PARAMETER;
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	e055      	b.n	800b986 <iapInitInputImage+0xca>

   //Check image verification method settings
   if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	7a1b      	ldrb	r3, [r3, #8]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d105      	bne.n	800b8ee <iapInitInputImage+0x32>
   {
#if VERIFY_INTEGRITY_SUPPORT == ENABLED
      //Check image integrity verification settings
      if(settings->imageInCrypto.verifySettings.integrityAlgo == NULL)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d11b      	bne.n	800b922 <iapInitInputImage+0x66>
         return ERROR_INVALID_PARAMETER;
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	e04b      	b.n	800b986 <iapInitInputImage+0xca>
#else
      //Image integrity verification support is not activated
      return ERROR_INVALID_PARAMETER;
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7a1b      	ldrb	r3, [r3, #8]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <iapInitInputImage+0x3e>
      //Force authentication algorythm to HMAC
      if(settings->imageInCrypto.verifySettings.authAlgo != VERIFY_AUTH_HMAC)
         return ERROR_UNSUPPORTED_ALGO;
#else
      //Image authentication verification support is not activated
      return ERROR_INVALID_PARAMETER;
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e045      	b.n	800b986 <iapInitInputImage+0xca>
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	7a1b      	ldrb	r3, [r3, #8]
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d101      	bne.n	800b906 <iapInitInputImage+0x4a>
      if(settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_RSA &&
         settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_ECDSA)
         return ERROR_UNSUPPORTED_SIGNATURE_ALGO;
#else
      //Image signature verification support is not activated
      return ERROR_INVALID_PARAMETER;
 800b902:	2302      	movs	r3, #2
 800b904:	e03f      	b.n	800b986 <iapInitInputImage+0xca>
#endif
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image verification mode not supported!\r\n");
 800b906:	f7fd fdfe 	bl	8009506 <osSuspendAllTasks>
 800b90a:	4b21      	ldr	r3, [pc, #132]	; (800b990 <iapInitInputImage+0xd4>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	2228      	movs	r2, #40	; 0x28
 800b912:	2101      	movs	r1, #1
 800b914:	481f      	ldr	r0, [pc, #124]	; (800b994 <iapInitInputImage+0xd8>)
 800b916:	f00c fe95 	bl	8018644 <fwrite>
 800b91a:	f7fd fdff 	bl	800951c <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800b91e:	2367      	movs	r3, #103	; 0x67
 800b920:	e031      	b.n	800b986 <iapInitInputImage+0xca>
   if(settings->imageInCrypto.cipherMode != CIPHER_MODE_CBC)
      return ERROR_UNSUPPORTED_CIPHER_MODE;
#endif

   //Point to the input image context
   imageIn = (ImageContext*)&context->imageInput;
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	335c      	adds	r3, #92	; 0x5c
 800b926:	60bb      	str	r3, [r7, #8]

   //Clear input image context
   memset(imageIn, 0x00, sizeof(ImageContext));
 800b928:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 800b92c:	2100      	movs	r1, #0
 800b92e:	68b8      	ldr	r0, [r7, #8]
 800b930:	f00c ffb0 	bl	8018894 <memset>

   //Set pointer to IAP context
   imageIn->iapContext = (IapContext*)context;
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	605a      	str	r2, [r3, #4]
   //Initialize buffer position to buffer start addresse
   imageIn->bufferPos = imageIn->buffer;
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	f103 0219 	add.w	r2, r3, #25
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   //Initialize check data position to check data start addresse
   imageIn->checkDataPos = imageIn->checkData;
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

   //Initialize image input process state
   imageIn->state = IAP_STATE_RECV_APP_HEADER;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	2201      	movs	r2, #1
 800b956:	761a      	strb	r2, [r3, #24]
         return error;
   }
#endif

   //Initialize verification module
   error = verifyInit(&imageIn->verifyContext, &settings->imageInCrypto.verifySettings);
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3308      	adds	r3, #8
 800b962:	4619      	mov	r1, r3
 800b964:	4610      	mov	r0, r2
 800b966:	f001 f847 	bl	800c9f8 <verifyInit>
 800b96a:	4603      	mov	r3, r0
 800b96c:	81fb      	strh	r3, [r7, #14]
   //Is any error ?
   if (error)
 800b96e:	89fb      	ldrh	r3, [r7, #14]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <iapInitInputImage+0xbc>
      return error;
 800b974:	89fb      	ldrh	r3, [r7, #14]
 800b976:	e006      	b.n	800b986 <iapInitInputImage+0xca>

   //Get exepecting image check data size
   imageIn->checkDataSize = imageIn->verifyContext.checkDataSize;
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

   //Successful process
   return NO_ERROR;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	200001c8 	.word	0x200001c8
 800b994:	0801f590 	.word	0x0801f590

0800b998 <iapInitOutputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitOutputImage(IapSettings *settings, IapContext *context)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
   error_t error;
   ImageContext *imageOut;
   VerifySettings verifySettings;

   //Initialize status code
   error = NO_ERROR;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	82fb      	strh	r3, [r7, #22]

   //Initialize verify settings structure
   memset(&verifySettings, 0, sizeof(VerifySettings));
 800b9a6:	f107 0308 	add.w	r3, r7, #8
 800b9aa:	2208      	movs	r2, #8
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f00c ff70 	bl	8018894 <memset>

   //Check parameters validty
   if(context == NULL || settings == NULL)
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d002      	beq.n	800b9c0 <iapInitOutputImage+0x28>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <iapInitOutputImage+0x2c>
      return ERROR_INVALID_PARAMETER;
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	e02f      	b.n	800ba24 <iapInitOutputImage+0x8c>

   //Point to the output image context
   imageOut = (ImageContext*)&context->imageOutput;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800b9ca:	613b      	str	r3, [r7, #16]

   //Clear output image context
   memset(imageOut, 0x00, sizeof(ImageContext));
 800b9cc:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	6938      	ldr	r0, [r7, #16]
 800b9d4:	f00c ff5e 	bl	8018894 <memset>

   //Set pointer to IAP context
   imageOut->iapContext = (IapContext*)context;
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	605a      	str	r2, [r3, #4]
   //Initialize buffer position to buffer start addresse
   imageOut->bufferPos = imageOut->buffer;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	f103 0219 	add.w	r2, r3, #25
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

   //Initialize image output process state
   imageOut->state = 0;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	761a      	strb	r2, [r3, #24]
   if (error)
      return error;
#endif

   //Initialize check data position to check data start addresse
   imageOut->checkDataPos = imageOut->checkData;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

   //Set verification module settings
   verifySettings.verifyMethod = VERIFY_METHOD_INTEGRITY;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	723b      	strb	r3, [r7, #8]
   verifySettings.integrityAlgo = CRC32_HASH_ALGO;
 800ba00:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <iapInitOutputImage+0x94>)
 800ba02:	60fb      	str	r3, [r7, #12]

   //Initialize verification module
   error = verifyInit(&imageOut->verifyContext, &verifySettings);
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	33a4      	adds	r3, #164	; 0xa4
 800ba08:	f107 0208 	add.w	r2, r7, #8
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 fff2 	bl	800c9f8 <verifyInit>
 800ba14:	4603      	mov	r3, r0
 800ba16:	82fb      	strh	r3, [r7, #22]
   //Is any error ?
   if (error)
 800ba18:	8afb      	ldrh	r3, [r7, #22]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d001      	beq.n	800ba22 <iapInitOutputImage+0x8a>
      return error;
 800ba1e:	8afb      	ldrh	r3, [r7, #22]
 800ba20:	e000      	b.n	800ba24 <iapInitOutputImage+0x8c>
#endif

   //Return status code
   return error;
 800ba22:	8afb      	ldrh	r3, [r7, #22]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	0801fdcc 	.word	0x0801fdcc

0800ba30 <iapWrite>:
 * @param[in] length Length of the firmware data bloc to be written
 * @return Error code
 **/

error_t iapWrite(ImageContext *context, const uint8_t *data, size_t length, uint8_t flag)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b08a      	sub	sp, #40	; 0x28
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	70fb      	strb	r3, [r7, #3]
   size_t writeBlockSize;
   const FlashInfo *memInfo;
   const FlashDriver *flashDriver;

   //Check parameters validity
   if(context == NULL || data == NULL || length == 0)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d005      	beq.n	800ba50 <iapWrite+0x20>
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <iapWrite+0x20>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <iapWrite+0x24>
      return ERROR_INVALID_PARAMETER;
 800ba50:	2302      	movs	r3, #2
 800ba52:	e0b2      	b.n	800bbba <iapWrite+0x18a>

   //Get memory driver
   flashDriver = ((FlashDesc*)context->slotInfo->flash)->driver;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	627b      	str	r3, [r7, #36]	; 0x24

   //Get memory driver informations
   error = flashDriver->getInfo(&memInfo);
 800ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	f107 0214 	add.w	r2, r7, #20
 800ba68:	4610      	mov	r0, r2
 800ba6a:	4798      	blx	r3
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	847b      	strh	r3, [r7, #34]	; 0x22
   //Is any error?
   if(error)
 800ba70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <iapWrite+0x4a>
      return error;
 800ba76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba78:	e09f      	b.n	800bbba <iapWrite+0x18a>

   //Get memory driver write block size
   writeBlockSize = memInfo->writeSize;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	695b      	ldr	r3, [r3, #20]
 800ba7e:	61fb      	str	r3, [r7, #28]

   //Temporary data flush required?
   if(flag == 2)
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d15c      	bne.n	800bb40 <iapWrite+0x110>
   {
      //Reset temporary buffer data
      memset(tempBuffer, 0x00, sizeof(tempBuffer));
 800ba86:	2240      	movs	r2, #64	; 0x40
 800ba88:	2100      	movs	r1, #0
 800ba8a:	484e      	ldr	r0, [pc, #312]	; (800bbc4 <iapWrite+0x194>)
 800ba8c:	f00c ff02 	bl	8018894 <memset>
      //Reset temporary buffer position
      tempBufferPos = tempBuffer;
 800ba90:	4b4d      	ldr	r3, [pc, #308]	; (800bbc8 <iapWrite+0x198>)
 800ba92:	4a4c      	ldr	r2, [pc, #304]	; (800bbc4 <iapWrite+0x194>)
 800ba94:	601a      	str	r2, [r3, #0]
      //Reset temporary buffer length
      tempBufferLen = 0;
 800ba96:	4b4d      	ldr	r3, [pc, #308]	; (800bbcc <iapWrite+0x19c>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	601a      	str	r2, [r3, #0]
   }

   //Process incomming data
   while(length > 0)
 800ba9c:	e050      	b.n	800bb40 <iapWrite+0x110>
   {
      //Fill temporary buffer to reach allowed flash memory write block size
      n = MIN(length, writeBlockSize - tempBufferLen);
 800ba9e:	4b4b      	ldr	r3, [pc, #300]	; (800bbcc <iapWrite+0x19c>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	69fa      	ldr	r2, [r7, #28]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	4293      	cmp	r3, r2
 800baaa:	bf28      	it	cs
 800baac:	4613      	movcs	r3, r2
 800baae:	61bb      	str	r3, [r7, #24]

      //Fill buffer
      memcpy(tempBufferPos, data, n);
 800bab0:	4b45      	ldr	r3, [pc, #276]	; (800bbc8 <iapWrite+0x198>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	69ba      	ldr	r2, [r7, #24]
 800bab6:	68b9      	ldr	r1, [r7, #8]
 800bab8:	4618      	mov	r0, r3
 800baba:	f00c ffd7 	bl	8018a6c <memcpy>
      //Update temporary buffer position
      tempBufferPos += n;
 800babe:	4b42      	ldr	r3, [pc, #264]	; (800bbc8 <iapWrite+0x198>)
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	4413      	add	r3, r2
 800bac6:	4a40      	ldr	r2, [pc, #256]	; (800bbc8 <iapWrite+0x198>)
 800bac8:	6013      	str	r3, [r2, #0]
      //Update temporary buffer length
      tempBufferLen += n;
 800baca:	4b40      	ldr	r3, [pc, #256]	; (800bbcc <iapWrite+0x19c>)
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	4413      	add	r3, r2
 800bad2:	4a3e      	ldr	r2, [pc, #248]	; (800bbcc <iapWrite+0x19c>)
 800bad4:	6013      	str	r3, [r2, #0]
      //Advance data pointer
      data += n;
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	4413      	add	r3, r2
 800badc:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	607b      	str	r3, [r7, #4]

      //Enought data to be write?
      if(tempBufferLen == writeBlockSize)
 800bae6:	4b39      	ldr	r3, [pc, #228]	; (800bbcc <iapWrite+0x19c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	69fa      	ldr	r2, [r7, #28]
 800baec:	429a      	cmp	r2, r3
 800baee:	d127      	bne.n	800bb40 <iapWrite+0x110>
      {
         //Write image data into memory
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
     error = context->iapContext->secondaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	6910      	ldr	r0, [r2, #16]
 800bafc:	69fa      	ldr	r2, [r7, #28]
 800bafe:	4931      	ldr	r1, [pc, #196]	; (800bbc4 <iapWrite+0x194>)
 800bb00:	4798      	blx	r3
 800bb02:	4603      	mov	r3, r0
 800bb04:	847b      	strh	r3, [r7, #34]	; 0x22
#elif IAP_DUAL_BANK_SUPPORT == ENABLED
     error = context->iapContext->primaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
#endif
         //Is any error?
         if(error)
 800bb06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00d      	beq.n	800bb28 <iapWrite+0xf8>
         {
            //Debug message
            TRACE_ERROR("Failed to write image data into external flash memory!\r\n");
 800bb0c:	f7fd fcfb 	bl	8009506 <osSuspendAllTasks>
 800bb10:	4b2f      	ldr	r3, [pc, #188]	; (800bbd0 <iapWrite+0x1a0>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	2238      	movs	r2, #56	; 0x38
 800bb18:	2101      	movs	r1, #1
 800bb1a:	482e      	ldr	r0, [pc, #184]	; (800bbd4 <iapWrite+0x1a4>)
 800bb1c:	f00c fd92 	bl	8018644 <fwrite>
 800bb20:	f7fd fcfc 	bl	800951c <osResumeAllTasks>
            return error;
 800bb24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb26:	e048      	b.n	800bbba <iapWrite+0x18a>
         }

         //Advance memory write address
         context->pos += writeBlockSize;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	691a      	ldr	r2, [r3, #16]
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	441a      	add	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	611a      	str	r2, [r3, #16]
         //Reset temporary buffer position
         tempBufferPos = tempBuffer;
 800bb34:	4b24      	ldr	r3, [pc, #144]	; (800bbc8 <iapWrite+0x198>)
 800bb36:	4a23      	ldr	r2, [pc, #140]	; (800bbc4 <iapWrite+0x194>)
 800bb38:	601a      	str	r2, [r3, #0]
         //Reset temporary buffer length
         tempBufferLen = 0;
 800bb3a:	4b24      	ldr	r3, [pc, #144]	; (800bbcc <iapWrite+0x19c>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	601a      	str	r2, [r3, #0]
   while(length > 0)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1ab      	bne.n	800ba9e <iapWrite+0x6e>
      }
   }

   //Temporary data write required?
   if(tempBufferLen != 0 && flag == 1)
 800bb46:	4b21      	ldr	r3, [pc, #132]	; (800bbcc <iapWrite+0x19c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d034      	beq.n	800bbb8 <iapWrite+0x188>
 800bb4e:	78fb      	ldrb	r3, [r7, #3]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d131      	bne.n	800bbb8 <iapWrite+0x188>
   {
      //Complete buffer with padding to reach minimum allowed write block size
      memset(tempBufferPos, 0x00, writeBlockSize - tempBufferLen);
 800bb54:	4b1c      	ldr	r3, [pc, #112]	; (800bbc8 <iapWrite+0x198>)
 800bb56:	6818      	ldr	r0, [r3, #0]
 800bb58:	4b1c      	ldr	r3, [pc, #112]	; (800bbcc <iapWrite+0x19c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	69fa      	ldr	r2, [r7, #28]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	461a      	mov	r2, r3
 800bb62:	2100      	movs	r1, #0
 800bb64:	f00c fe96 	bl	8018894 <memset>

      //Write image data into memory
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
      error = context->iapContext->secondaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	6910      	ldr	r0, [r2, #16]
 800bb74:	69fa      	ldr	r2, [r7, #28]
 800bb76:	4913      	ldr	r1, [pc, #76]	; (800bbc4 <iapWrite+0x194>)
 800bb78:	4798      	blx	r3
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	847b      	strh	r3, [r7, #34]	; 0x22
#elif IAP_DUAL_BANK_SUPPORT == ENABLED
      error = context->iapContext->primaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
#endif
      //Is any error?
      if(error)
 800bb7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00d      	beq.n	800bba0 <iapWrite+0x170>
      {
         //Debug message
         TRACE_ERROR("Failed to write image data into external flash memory!\r\n");
 800bb84:	f7fd fcbf 	bl	8009506 <osSuspendAllTasks>
 800bb88:	4b11      	ldr	r3, [pc, #68]	; (800bbd0 <iapWrite+0x1a0>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	2238      	movs	r2, #56	; 0x38
 800bb90:	2101      	movs	r1, #1
 800bb92:	4810      	ldr	r0, [pc, #64]	; (800bbd4 <iapWrite+0x1a4>)
 800bb94:	f00c fd56 	bl	8018644 <fwrite>
 800bb98:	f7fd fcc0 	bl	800951c <osResumeAllTasks>
         return error;
 800bb9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb9e:	e00c      	b.n	800bbba <iapWrite+0x18a>
      }

      //Advance memory write address
      context->pos += writeBlockSize;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	691a      	ldr	r2, [r3, #16]
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	441a      	add	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	611a      	str	r2, [r3, #16]
      //Reset temporary buffer position
      tempBufferPos = tempBuffer;
 800bbac:	4b06      	ldr	r3, [pc, #24]	; (800bbc8 <iapWrite+0x198>)
 800bbae:	4a05      	ldr	r2, [pc, #20]	; (800bbc4 <iapWrite+0x194>)
 800bbb0:	601a      	str	r2, [r3, #0]
      //Reset temporary buffer length
      tempBufferLen = 0;
 800bbb2:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <iapWrite+0x19c>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
   }

   //Successful process
   return NO_ERROR;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3728      	adds	r7, #40	; 0x28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20002064 	.word	0x20002064
 800bbc8:	20000084 	.word	0x20000084
 800bbcc:	200020a4 	.word	0x200020a4
 800bbd0:	200001c8 	.word	0x200001c8
 800bbd4:	0801f5bc 	.word	0x0801f5bc

0800bbd8 <iapGetImageHeaderFromSlot>:
 * @param[out] header Pointer to store the extracted image header.
 * @return Error code.
 **/

error_t iapGetImageHeaderFromSlot(SlotDesc *slot, ImageHeader *header)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b096      	sub	sp, #88	; 0x58
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
   FlashDriver *flashDriver;
   ImageHeader *imgHeader;
   uint8_t buffer[sizeof(ImageHeader)];

   //Check parameter validity
   if(slot == NULL || header == NULL)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d002      	beq.n	800bbee <iapGetImageHeaderFromSlot+0x16>
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <iapGetImageHeaderFromSlot+0x1a>
      return ERROR_INVALID_PARAMETER;
 800bbee:	2302      	movs	r3, #2
 800bbf0:	e02c      	b.n	800bc4c <iapGetImageHeaderFromSlot+0x74>

   //Point to the slot memory driver
   flashDriver = (FlashDriver*)((FlashDesc*)slot->flash)->driver;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	657b      	str	r3, [r7, #84]	; 0x54

   //Read first slot 64 bytes
   error = flashDriver->read(slot->addr, buffer, sizeof(ImageHeader));
 800bbfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	6810      	ldr	r0, [r2, #0]
 800bc02:	f107 010c 	add.w	r1, r7, #12
 800bc06:	2240      	movs	r2, #64	; 0x40
 800bc08:	4798      	blx	r3
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   //Is any error?
   if(error)
 800bc10:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d001      	beq.n	800bc1c <iapGetImageHeaderFromSlot+0x44>
      return ERROR_FAILURE;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e017      	b.n	800bc4c <iapGetImageHeaderFromSlot+0x74>

   //Get image header from above buffer
   error = imageGetHeader(buffer, sizeof(ImageHeader), &imgHeader);
 800bc1c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800bc20:	f107 030c 	add.w	r3, r7, #12
 800bc24:	2140      	movs	r1, #64	; 0x40
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 fba0 	bl	800c36c <imageGetHeader>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   //Is any error?
   if(error)
 800bc32:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <iapGetImageHeaderFromSlot+0x66>
      return ERROR_INVALID_HEADER;
 800bc3a:	23d4      	movs	r3, #212	; 0xd4
 800bc3c:	e006      	b.n	800bc4c <iapGetImageHeaderFromSlot+0x74>

   //Save image header
   memcpy(header, imgHeader, sizeof(ImageHeader));
 800bc3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc40:	2240      	movs	r2, #64	; 0x40
 800bc42:	4619      	mov	r1, r3
 800bc44:	6838      	ldr	r0, [r7, #0]
 800bc46:	f00c ff11 	bl	8018a6c <memcpy>

   //Successful process
   return NO_ERROR;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3758      	adds	r7, #88	; 0x58
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <iapProcessInputImage>:
 * @param[in,out] context Pointer to the Input image context
 * @return Status code
 **/

error_t iapProcessInputImage(ImageContext *context)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
   error_t error;

   //IAP receiving image header state?
   if(context->state == IAP_STATE_RECV_APP_HEADER)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	7e1b      	ldrb	r3, [r3, #24]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d109      	bne.n	800bc78 <iapProcessInputImage+0x24>
   {
      //Process image header
      error = iapProcessAppHeader(context);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 f967 	bl	800bf38 <iapProcessAppHeader>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800bc6e:	89fb      	ldrh	r3, [r7, #14]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d020      	beq.n	800bcb6 <iapProcessInputImage+0x62>
         return error;
 800bc74:	89fb      	ldrh	r3, [r7, #14]
 800bc76:	e01f      	b.n	800bcb8 <iapProcessInputImage+0x64>
   }
   //IAP receiving image data state?
   else if(context->state == IAP_STATE_RECV_APP_DATA)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	7e1b      	ldrb	r3, [r3, #24]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d109      	bne.n	800bc94 <iapProcessInputImage+0x40>
   {
      //Process image data
      error = iapProcessAppData(context);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fa1b 	bl	800c0bc <iapProcessAppData>
 800bc86:	4603      	mov	r3, r0
 800bc88:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800bc8a:	89fb      	ldrh	r3, [r7, #14]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d012      	beq.n	800bcb6 <iapProcessInputImage+0x62>
         return error;
 800bc90:	89fb      	ldrh	r3, [r7, #14]
 800bc92:	e011      	b.n	800bcb8 <iapProcessInputImage+0x64>
   }
   //IAP receiving image check data state?
   else if(context->state == IAP_STATE_RECV_APP_CHECK)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	7e1b      	ldrb	r3, [r3, #24]
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d109      	bne.n	800bcb0 <iapProcessInputImage+0x5c>
   {
      //Process image check data
      error = iapProcessAppCheck(context);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fabf 	bl	800c220 <iapProcessAppCheck>
 800bca2:	4603      	mov	r3, r0
 800bca4:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800bca6:	89fb      	ldrh	r3, [r7, #14]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d004      	beq.n	800bcb6 <iapProcessInputImage+0x62>
         return error;
 800bcac:	89fb      	ldrh	r3, [r7, #14]
 800bcae:	e003      	b.n	800bcb8 <iapProcessInputImage+0x64>
   }
   else
   {
      //Wrong state
      error = ERROR_WRONG_STATE;
 800bcb0:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bcb4:	81fb      	strh	r3, [r7, #14]
   }

   //Successful process
   return NO_ERROR;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <iapProcessOutputImageSingleBank>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

error_t iapProcessOutputImageSingleBank(ImageContext *context, uint8_t *data, size_t length)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b088      	sub	sp, #32
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	60f8      	str	r0, [r7, #12]
 800bcc8:	60b9      	str	r1, [r7, #8]
 800bcca:	607a      	str	r2, [r7, #4]
   error_t error;
   size_t n;
   ImageHeader *imgHeader;

   //Check parameters validity
   if(context == NULL || data == NULL || length == 0)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d006      	beq.n	800bce0 <iapProcessOutputImageSingleBank+0x20>
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d003      	beq.n	800bce0 <iapProcessOutputImageSingleBank+0x20>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f040 8111 	bne.w	800bf02 <iapProcessOutputImageSingleBank+0x242>
      return ERROR_INVALID_PARAMETER;
 800bce0:	2302      	movs	r3, #2
 800bce2:	e113      	b.n	800bf0c <iapProcessOutputImageSingleBank+0x24c>

   //Process the incoming data
   while(length > 0)
   {
      //The buffer can hold at most it size
      n = MIN(length, sizeof(context->buffer) - context->bufferLen);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bcea:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	bf28      	it	cs
 800bcf4:	4613      	movcs	r3, r2
 800bcf6:	61fb      	str	r3, [r7, #28]

      //Copy the data to the buffer
      memcpy(context->bufferPos, data, n);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcfe:	69fa      	ldr	r2, [r7, #28]
 800bd00:	68b9      	ldr	r1, [r7, #8]
 800bd02:	4618      	mov	r0, r3
 800bd04:	f00c feb2 	bl	8018a6c <memcpy>

      //Advance the data pointer
      data += n;
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	607b      	str	r3, [r7, #4]
      //Update buffer data length
      context->bufferLen += n;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	441a      	add	r2, r3
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      //Update buffer data free position
      context->bufferPos += n;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	441a      	add	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      //Format new Header
      if(context->state == 0)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	7e1b      	ldrb	r3, [r3, #24]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d14f      	bne.n	800bde0 <iapProcessOutputImageSingleBank+0x120>
      {
         //Point to image header
         imgHeader = (ImageHeader*)context->buffer;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	3319      	adds	r3, #25
 800bd44:	617b      	str	r3, [r7, #20]

         //Debug message
         TRACE_DEBUG_ARRAY("HEADER: ", (uint8_t*)imgHeader, sizeof(ImageHeader));

         //Set new header image index
         imgHeader->imgIndex = context->imgIdx;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	605a      	str	r2, [r3, #4]

         //Save original image data size
         context->firmwareLength = imgHeader->dataSize;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	60da      	str	r2, [r3, #12]
         if(imgHeader->dataSize % context->cipherEngine.ivLen != 0)
            imgHeader->dataSize += context->cipherEngine.ivLen - (imgHeader->dataSize % context->cipherEngine.ivLen);
#endif

         //Compute new image header crc
         CRC32_HASH_ALGO->compute((uint8_t*)imgHeader, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&imgHeader->headCrc);
 800bd5a:	4b6e      	ldr	r3, [pc, #440]	; (800bf14 <iapProcessOutputImageSingleBank+0x254>)
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	697a      	ldr	r2, [r7, #20]
 800bd60:	323c      	adds	r2, #60	; 0x3c
 800bd62:	213c      	movs	r1, #60	; 0x3c
 800bd64:	6978      	ldr	r0, [r7, #20]
 800bd66:	4798      	blx	r3

         //Update application check computation tag (could be integrity tag or
         //authentification tag or hash signature tag)
         error = verifyProcess(&context->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	333c      	adds	r3, #60	; 0x3c
 800bd72:	2204      	movs	r2, #4
 800bd74:	4619      	mov	r1, r3
 800bd76:	f000 fe99 	bl	800caac <verifyProcess>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	837b      	strh	r3, [r7, #26]
         //Is any error?
         if(error)
 800bd7e:	8b7b      	ldrh	r3, [r7, #26]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <iapProcessOutputImageSingleBank+0xc8>
            return error;
 800bd84:	8b7b      	ldrh	r3, [r7, #26]
 800bd86:	e0c1      	b.n	800bf0c <iapProcessOutputImageSingleBank+0x24c>

         //Set external memory start write address (selected slot start address)
         context->firmwareAddr = context->slotInfo->addr;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	609a      	str	r2, [r3, #8]
         context->pos = context->firmwareAddr;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	689a      	ldr	r2, [r3, #8]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	611a      	str	r2, [r3, #16]

         //Write new image header (with flush)
         error = iapWrite(context, (uint8_t*)imgHeader, sizeof(ImageHeader), 2);
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	2240      	movs	r2, #64	; 0x40
 800bda0:	6979      	ldr	r1, [r7, #20]
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7ff fe44 	bl	800ba30 <iapWrite>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	837b      	strh	r3, [r7, #26]
         if(error)
 800bdac:	8b7b      	ldrh	r3, [r7, #26]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <iapProcessOutputImageSingleBank+0xf6>
            return error;
 800bdb2:	8b7b      	ldrh	r3, [r7, #26]
 800bdb4:	e0aa      	b.n	800bf0c <iapProcessOutputImageSingleBank+0x24c>
         if(error)
            return error;
#endif

         //Reset buffer position
         context->bufferPos = context->buffer;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f103 0219 	add.w	r2, r3, #25
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         //Reset buffer data
         memset(context->buffer, 0x00, sizeof(context->buffer));
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3319      	adds	r3, #25
 800bdc6:	2280      	movs	r2, #128	; 0x80
 800bdc8:	2100      	movs	r1, #0
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f00c fd62 	bl	8018894 <memset>
         //Reset buffer data length
         context->bufferLen = 0;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

         //Change state
         context->state = 1;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2201      	movs	r2, #1
 800bddc:	761a      	strb	r2, [r3, #24]
 800bdde:	e090      	b.n	800bf02 <iapProcessOutputImageSingleBank+0x242>
      }
      //Encrypt data
      else
      {
         //Reached end of image firmware binary section?
         if(context->written + context->bufferLen == context->firmwareLength)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	695a      	ldr	r2, [r3, #20]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bdea:	441a      	add	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d149      	bne.n	800be88 <iapProcessOutputImageSingleBank+0x1c8>
            error = iapWrite(context, context->buffer, context->bufferLen, 1);
            if(error)
               return error;
#else
            //Update image check data computation tag (crc tag)
            error = verifyProcess(&context->verifyContext, context->buffer, context->bufferLen);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f103 0119 	add.w	r1, r3, #25
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be06:	461a      	mov	r2, r3
 800be08:	f000 fe50 	bl	800caac <verifyProcess>
 800be0c:	4603      	mov	r3, r0
 800be0e:	837b      	strh	r3, [r7, #26]
            if(error)
 800be10:	8b7b      	ldrh	r3, [r7, #26]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d001      	beq.n	800be1a <iapProcessOutputImageSingleBank+0x15a>
               return error;
 800be16:	8b7b      	ldrh	r3, [r7, #26]
 800be18:	e078      	b.n	800bf0c <iapProcessOutputImageSingleBank+0x24c>

            //Write image data block into memory
            error = iapWrite(context, context->buffer, context->bufferLen, 0);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f103 0119 	add.w	r1, r3, #25
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800be26:	2300      	movs	r3, #0
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f7ff fe01 	bl	800ba30 <iapWrite>
 800be2e:	4603      	mov	r3, r0
 800be30:	837b      	strh	r3, [r7, #26]
            if(error)
 800be32:	8b7b      	ldrh	r3, [r7, #26]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <iapProcessOutputImageSingleBank+0x17c>
               return error;
 800be38:	8b7b      	ldrh	r3, [r7, #26]
 800be3a:	e067      	b.n	800bf0c <iapProcessOutputImageSingleBank+0x24c>
#endif

            //Update written data
            context->written += n;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	695a      	ldr	r2, [r3, #20]
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	441a      	add	r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	615a      	str	r2, [r3, #20]

            //Finalize image check data computation tag (crc tag)
            error = verifyGenerateCheckData(&context->verifyContext, context->buffer,
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f103 0119 	add.w	r1, r3, #25
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	33a0      	adds	r3, #160	; 0xa0
 800be5e:	f000 fec7 	bl	800cbf0 <verifyGenerateCheckData>
 800be62:	4603      	mov	r3, r0
 800be64:	837b      	strh	r3, [r7, #26]
               context->verifyContext.imageCheckDigestSize, &context->bufferLen);

            //Write new image check data tag (crc tag)
            error = iapWrite(context, context->buffer, context->bufferLen, 1);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f103 0119 	add.w	r1, r3, #25
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800be72:	2301      	movs	r3, #1
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f7ff fddb 	bl	800ba30 <iapWrite>
 800be7a:	4603      	mov	r3, r0
 800be7c:	837b      	strh	r3, [r7, #26]
            if(error)
 800be7e:	8b7b      	ldrh	r3, [r7, #26]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d03e      	beq.n	800bf02 <iapProcessOutputImageSingleBank+0x242>
               return error;
 800be84:	8b7b      	ldrh	r3, [r7, #26]
 800be86:	e041      	b.n	800bf0c <iapProcessOutputImageSingleBank+0x24c>
            memcpy(context->buffer, context->bufferPos, context->bufferLen);
            //Reset buffer position
            context->bufferPos = context->buffer + context->bufferLen;
#else
            //Update image check data computation tag (crc tag)
            error = verifyProcess(&context->verifyContext, context->buffer, context->bufferLen);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f103 0119 	add.w	r1, r3, #25
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be9a:	461a      	mov	r2, r3
 800be9c:	f000 fe06 	bl	800caac <verifyProcess>
 800bea0:	4603      	mov	r3, r0
 800bea2:	837b      	strh	r3, [r7, #26]
            if(error)
 800bea4:	8b7b      	ldrh	r3, [r7, #26]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d001      	beq.n	800beae <iapProcessOutputImageSingleBank+0x1ee>
               return error;
 800beaa:	8b7b      	ldrh	r3, [r7, #26]
 800beac:	e02e      	b.n	800bf0c <iapProcessOutputImageSingleBank+0x24c>

            //Write encrypted image data into memory
            error = iapWrite(context, context->buffer, context->bufferLen, 0);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f103 0119 	add.w	r1, r3, #25
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800beba:	2300      	movs	r3, #0
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f7ff fdb7 	bl	800ba30 <iapWrite>
 800bec2:	4603      	mov	r3, r0
 800bec4:	837b      	strh	r3, [r7, #26]
            if(error)
 800bec6:	8b7b      	ldrh	r3, [r7, #26]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <iapProcessOutputImageSingleBank+0x210>
               return error;
 800becc:	8b7b      	ldrh	r3, [r7, #26]
 800bece:	e01d      	b.n	800bf0c <iapProcessOutputImageSingleBank+0x24c>

            //Update context buffer length
            context->written += context->bufferLen;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	695a      	ldr	r2, [r3, #20]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800beda:	441a      	add	r2, r3
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	615a      	str	r2, [r3, #20]

            //Update buffer data length
            context->bufferLen = 0;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            //Reset buffer position
            context->bufferPos = context->buffer;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f103 0219 	add.w	r2, r3, #25
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            //Reset buffer
            memset(context->buffer, 0, sizeof(context->buffer));
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	3319      	adds	r3, #25
 800bef8:	2280      	movs	r2, #128	; 0x80
 800befa:	2100      	movs	r1, #0
 800befc:	4618      	mov	r0, r3
 800befe:	f00c fcc9 	bl	8018894 <memset>
   while(length > 0)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f47f aeed 	bne.w	800bce4 <iapProcessOutputImageSingleBank+0x24>
         }
      }
   }

   //Successful process
   return NO_ERROR;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3720      	adds	r7, #32
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	0801fdcc 	.word	0x0801fdcc

0800bf18 <iapProcessOutputImage>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

error_t iapProcessOutputImage(ImageContext *context, uint8_t *data, size_t length)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   return iapProcessOutputImageSingleBank(context, data, length);
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	68b9      	ldr	r1, [r7, #8]
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f7ff fec9 	bl	800bcc0 <iapProcessOutputImageSingleBank>
 800bf2e:	4603      	mov	r3, r0
#else
   return iapProcessOutputImageDualBank(context, data, length);
#endif
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3710      	adds	r7, #16
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <iapProcessAppHeader>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppHeader(ImageContext *context)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b088      	sub	sp, #32
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
   const FlashInfo *memInfo;
   ImageContext *outputImg;
   uint_t n;

   //Check parameter validity
   if (context == NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <iapProcessAppHeader+0x12>
      return ERROR_INVALID_PARAMETER;
 800bf46:	2302      	movs	r3, #2
 800bf48:	e0ad      	b.n	800c0a6 <iapProcessAppHeader+0x16e>

   //Initialize variable
   imgHeader = NULL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	613b      	str	r3, [r7, #16]
   n = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	61fb      	str	r3, [r7, #28]

   //Is buffer full enough to contains IAP image header?
   if (context->bufferLen >= sizeof(ImageHeader))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf58:	2b3f      	cmp	r3, #63	; 0x3f
 800bf5a:	f240 80a3 	bls.w	800c0a4 <iapProcessAppHeader+0x16c>
   {
      //Debug message
      TRACE_DEBUG("Processing firmware image header...\r\n");

      //Get input image header
      error = imageGetHeader(context->buffer, context->bufferLen, &imgHeader);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f103 0019 	add.w	r0, r3, #25
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf6a:	f107 0210 	add.w	r2, r7, #16
 800bf6e:	4619      	mov	r1, r3
 800bf70:	f000 f9fc 	bl	800c36c <imageGetHeader>
 800bf74:	4603      	mov	r3, r0
 800bf76:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800bf78:	8b7b      	ldrh	r3, [r7, #26]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <iapProcessAppHeader+0x4a>
      {
         //Debug message
         TRACE_INFO("Input image header is invalid!\r\n");
         //Forward error
         return error;
 800bf7e:	8b7b      	ldrh	r3, [r7, #26]
 800bf80:	e091      	b.n	800c0a6 <iapProcessAppHeader+0x16e>
         return ERROR_FAILURE;
     }
#endif

      //Check header image type
      if(imgHeader->imgType != IMAGE_TYPE_APP)
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	7a1b      	ldrb	r3, [r3, #8]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00d      	beq.n	800bfa6 <iapProcessAppHeader+0x6e>
      {
         //Debug message
         TRACE_ERROR("Invalid header image type!\r\n");
 800bf8a:	f7fd fabc 	bl	8009506 <osSuspendAllTasks>
 800bf8e:	4b48      	ldr	r3, [pc, #288]	; (800c0b0 <iapProcessAppHeader+0x178>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	221c      	movs	r2, #28
 800bf96:	2101      	movs	r1, #1
 800bf98:	4846      	ldr	r0, [pc, #280]	; (800c0b4 <iapProcessAppHeader+0x17c>)
 800bf9a:	f00c fb53 	bl	8018644 <fwrite>
 800bf9e:	f7fd fabd 	bl	800951c <osResumeAllTasks>
         return ERROR_FAILURE;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e07f      	b.n	800c0a6 <iapProcessAppHeader+0x16e>
      }

      //Get memory driver infos
      error = context->iapContext->primaryMem.driver->getInfo(&memInfo);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	f107 020c 	add.w	r2, r7, #12
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	4798      	blx	r3
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800bfba:	8b7b      	ldrh	r3, [r7, #26]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d001      	beq.n	800bfc4 <iapProcessAppHeader+0x8c>
         return error;
 800bfc0:	8b7b      	ldrh	r3, [r7, #26]
 800bfc2:	e070      	b.n	800c0a6 <iapProcessAppHeader+0x16e>

      //Point to output image context
      outputImg = (ImageContext*)&context->iapContext->imageOutput;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800bfcc:	617b      	str	r3, [r7, #20]

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Would firmware overcome the external flash memory slot size?
      if (imgHeader->dataSize + sizeof(ImageHeader) + outputImg->verifyContext.verifySettings.integrityAlgo->digestSize > outputImg->slotInfo->size)
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bfda:	695b      	ldr	r3, [r3, #20]
 800bfdc:	4413      	add	r3, r2
 800bfde:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d90e      	bls.n	800c00c <iapProcessAppHeader+0xd4>
      //Would firmware overcome the flash bank 2 size?
      if (imgHeader->dataSize > context->iapContext->imageOutput.slotInfo->size)
#endif
      {
         //Debug message
         TRACE_ERROR("Image is bigger than the flash memory slot!\r\n");
 800bfee:	f7fd fa8a 	bl	8009506 <osSuspendAllTasks>
 800bff2:	4b2f      	ldr	r3, [pc, #188]	; (800c0b0 <iapProcessAppHeader+0x178>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	222d      	movs	r2, #45	; 0x2d
 800bffa:	2101      	movs	r1, #1
 800bffc:	482e      	ldr	r0, [pc, #184]	; (800c0b8 <iapProcessAppHeader+0x180>)
 800bffe:	f00c fb21 	bl	8018644 <fwrite>
 800c002:	f7fd fa8b 	bl	800951c <osResumeAllTasks>
         //Forward error
         return ERROR_BUFFER_OVERFLOW;
 800c006:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800c00a:	e04c      	b.n	800c0a6 <iapProcessAppHeader+0x16e>
      }

      //Save application firmware length
      context->firmwareLength = imgHeader->dataSize;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	60da      	str	r2, [r3, #12]
      outputImg->firmwareLength = imgHeader->dataSize;
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	60da      	str	r2, [r3, #12]

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Process parsed image input header for later output image generation
      error = iapProcessOutputImage(&context->iapContext->imageOutput, (uint8_t*)imgHeader, sizeof(ImageHeader));
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c028:	6939      	ldr	r1, [r7, #16]
 800c02a:	2240      	movs	r2, #64	; 0x40
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff ff73 	bl	800bf18 <iapProcessOutputImage>
 800c032:	4603      	mov	r3, r0
 800c034:	837b      	strh	r3, [r7, #26]
      if(error)
 800c036:	8b7b      	ldrh	r3, [r7, #26]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <iapProcessAppHeader+0x108>
         return error;
 800c03c:	8b7b      	ldrh	r3, [r7, #26]
 800c03e:	e032      	b.n	800c0a6 <iapProcessAppHeader+0x16e>
#endif

      //Update application check computation tag (could be integrity tag or
      //authentification tag or hash signature tag)
      error = verifyProcess(&context->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	333c      	adds	r3, #60	; 0x3c
 800c04a:	2204      	movs	r2, #4
 800c04c:	4619      	mov	r1, r3
 800c04e:	f000 fd2d 	bl	800caac <verifyProcess>
 800c052:	4603      	mov	r3, r0
 800c054:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800c056:	8b7b      	ldrh	r3, [r7, #26]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <iapProcessAppHeader+0x128>
         return error;
 800c05c:	8b7b      	ldrh	r3, [r7, #26]
 800c05e:	e022      	b.n	800c0a6 <iapProcessAppHeader+0x16e>


      //Remove header from buffer
      n = context->bufferLen - sizeof(ImageHeader);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c066:	3b40      	subs	r3, #64	; 0x40
 800c068:	61fb      	str	r3, [r7, #28]
      memcpy(context->buffer, context->buffer + sizeof(ImageHeader), n);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f103 0019 	add.w	r0, r3, #25
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3319      	adds	r3, #25
 800c074:	3340      	adds	r3, #64	; 0x40
 800c076:	69fa      	ldr	r2, [r7, #28]
 800c078:	4619      	mov	r1, r3
 800c07a:	f00c fcf7 	bl	8018a6c <memcpy>
      context->bufferPos -= sizeof(ImageHeader);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c084:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      context->bufferLen -= sizeof(ImageHeader);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c094:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

      //Change IAP state
      context->state = IAP_STATE_RECV_APP_DATA;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	761a      	strb	r2, [r3, #24]
   }

   //Successful process
   return NO_ERROR;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3720      	adds	r7, #32
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	200001c8 	.word	0x200001c8
 800c0b4:	0801f5f8 	.word	0x0801f5f8
 800c0b8:	0801f618 	.word	0x0801f618

0800c0bc <iapProcessAppData>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppData(ImageContext *context)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
   error_t error;
   uint_t dataLength;
   static ImageContext *imgOutput;

   //Check parameter validity
   if (context == NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <iapProcessAppData+0x12>
      return ERROR_INVALID_PARAMETER;
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	e0a2      	b.n	800c214 <iapProcessAppData+0x158>

   //Point to image output context
   imgOutput = (ImageContext*) &context->iapContext->imageOutput;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c0d6:	4a51      	ldr	r2, [pc, #324]	; (800c21c <iapProcessAppData+0x160>)
 800c0d8:	6013      	str	r3, [r2, #0]
   //Receiving image firmware data?
   if(1)
   {
#endif
      //Is buffer full or full enought to contain last application data?
      if ((context->bufferLen == sizeof(context->buffer)) ||
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0e0:	2b80      	cmp	r3, #128	; 0x80
 800c0e2:	d00a      	beq.n	800c0fa <iapProcessAppData+0x3e>
         (context->written + context->bufferLen >= context->firmwareLength))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	695a      	ldr	r2, [r3, #20]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0ee:	441a      	add	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	68db      	ldr	r3, [r3, #12]
      if ((context->bufferLen == sizeof(context->buffer)) ||
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	f0c0 808c 	bcc.w	800c212 <iapProcessAppData+0x156>
      {
         //We must not process more data than the firmware length
         dataLength = MIN(context->bufferLen, context->firmwareLength - context->written);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68da      	ldr	r2, [r3, #12]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	1ad2      	subs	r2, r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c10a:	4293      	cmp	r3, r2
 800c10c:	bf28      	it	cs
 800c10e:	4613      	movcs	r3, r2
 800c110:	60fb      	str	r3, [r7, #12]

         //Update application check computation tag (could be integrity tag or
         //authentification tag or hash signature tag)
         error = verifyProcess(&context->verifyContext, context->buffer, dataLength);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	3319      	adds	r3, #25
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	4619      	mov	r1, r3
 800c120:	f000 fcc4 	bl	800caac <verifyProcess>
 800c124:	4603      	mov	r3, r0
 800c126:	817b      	strh	r3, [r7, #10]
         //Is any error?
         if (error)
 800c128:	897b      	ldrh	r3, [r7, #10]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d001      	beq.n	800c132 <iapProcessAppData+0x76>
            return error;
 800c12e:	897b      	ldrh	r3, [r7, #10]
 800c130:	e070      	b.n	800c214 <iapProcessAppData+0x158>
               return error;
         }
#endif

         //Process output image data
         error = iapProcessOutputImage(imgOutput, context->buffer, dataLength);
 800c132:	4b3a      	ldr	r3, [pc, #232]	; (800c21c <iapProcessAppData+0x160>)
 800c134:	6818      	ldr	r0, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	3319      	adds	r3, #25
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	4619      	mov	r1, r3
 800c13e:	f7ff feeb 	bl	800bf18 <iapProcessOutputImage>
 800c142:	4603      	mov	r3, r0
 800c144:	817b      	strh	r3, [r7, #10]
         //Is any error?
         if(error)
 800c146:	897b      	ldrh	r3, [r7, #10]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d001      	beq.n	800c150 <iapProcessAppData+0x94>
            return error;
 800c14c:	897b      	ldrh	r3, [r7, #10]
 800c14e:	e061      	b.n	800c214 <iapProcessAppData+0x158>

         context->written += dataLength;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	695a      	ldr	r2, [r3, #20]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	441a      	add	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	615a      	str	r2, [r3, #20]

         //Is buffer contains remaining data?
         if (context->bufferLen != dataLength)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	429a      	cmp	r2, r3
 800c166:	d02b      	beq.n	800c1c0 <iapProcessAppData+0x104>
         {
            //Discard already processed data
            memset(context->buffer, 0, dataLength);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3319      	adds	r3, #25
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	2100      	movs	r1, #0
 800c170:	4618      	mov	r0, r3
 800c172:	f00c fb8f 	bl	8018894 <memset>

            //Put remaining data at buffer start
            memcpy(context->buffer, context->buffer + dataLength,
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f103 0019 	add.w	r0, r3, #25
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f103 0219 	add.w	r2, r3, #25
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	18d1      	adds	r1, r2, r3
               context->bufferLen - dataLength);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
            memcpy(context->buffer, context->buffer + dataLength,
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	461a      	mov	r2, r3
 800c192:	f00c fc6b 	bl	8018a6c <memcpy>
            //Update buffer position and length
            context->bufferPos = context->buffer + (context->bufferLen - dataLength);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f103 0219 	add.w	r2, r3, #25
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	1acb      	subs	r3, r1, r3
 800c1a6:	441a      	add	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            context->bufferLen = context->bufferLen - dataLength;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	1ad2      	subs	r2, r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800c1be:	e010      	b.n	800c1e2 <iapProcessAppData+0x126>
         }
         else
         {
            //Reset buffer
            memset(context->buffer, 0, sizeof(context->buffer));
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	3319      	adds	r3, #25
 800c1c4:	2280      	movs	r2, #128	; 0x80
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f00c fb63 	bl	8018894 <memset>
            context->bufferPos = context->buffer;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f103 0219 	add.w	r2, r3, #25
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            context->bufferLen = 0;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         }

         //Is application data all received?
         if (context->written == context->firmwareLength)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	695a      	ldr	r2, [r3, #20]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d111      	bne.n	800c212 <iapProcessAppData+0x156>
         {
            //Change IAP state
            context->state = IAP_STATE_RECV_APP_CHECK;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2203      	movs	r2, #3
 800c1f2:	761a      	strb	r2, [r3, #24]

            //Still data to process?
            if (context->bufferLen > 0)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d009      	beq.n	800c212 <iapProcessAppData+0x156>
            {
               //Process IAP check app data
               error = iapProcessAppCheck(context);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f80e 	bl	800c220 <iapProcessAppCheck>
 800c204:	4603      	mov	r3, r0
 800c206:	817b      	strh	r3, [r7, #10]
               //Is any error?
               if (error)
 800c208:	897b      	ldrh	r3, [r7, #10]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <iapProcessAppData+0x156>
                  return error;
 800c20e:	897b      	ldrh	r3, [r7, #10]
 800c210:	e000      	b.n	800c214 <iapProcessAppData+0x158>
         }
      }
   }

   //Successfull process
   return NO_ERROR;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	200020a8 	.word	0x200020a8

0800c220 <iapProcessAppCheck>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppCheck(ImageContext *context)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
   //Check parameter validity
   if (context == NULL)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <iapProcessAppCheck+0x12>
      return ERROR_INVALID_PARAMETER;
 800c22e:	2302      	movs	r3, #2
 800c230:	e058      	b.n	800c2e4 <iapProcessAppCheck+0xc4>

   //Is buffer full enough to contains IAP image check data?
   //(could be integrity/authentification tag or signature)
   if (context->checkDataLen + context->bufferLen <= context->checkDataSize)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c23e:	441a      	add	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c246:	429a      	cmp	r2, r3
 800c248:	d83c      	bhi.n	800c2c4 <iapProcessAppCheck+0xa4>
   {
      //Save image check data block
      memcpy(context->checkDataPos, context->buffer, context->bufferLen);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f103 0119 	add.w	r1, r3, #25
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c25c:	461a      	mov	r2, r3
 800c25e:	f00c fc05 	bl	8018a6c <memcpy>
      context->checkDataPos += context->bufferLen;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c26e:	441a      	add	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      context->checkDataLen += context->bufferLen;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c282:	441a      	add	r2, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

      //Reset buffer
      memset(context->buffer, 0, sizeof(context->buffer));
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3319      	adds	r3, #25
 800c28e:	2280      	movs	r2, #128	; 0x80
 800c290:	2100      	movs	r1, #0
 800c292:	4618      	mov	r0, r3
 800c294:	f00c fafe 	bl	8018894 <memset>
      context->bufferPos = context->buffer;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f103 0219 	add.w	r2, r3, #25
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      context->bufferLen = 0;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

      //Is image check data fully received?
      if (context->checkDataLen == context->checkDataSize)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d112      	bne.n	800c2e2 <iapProcessAppCheck+0xc2>
      {
         //Change IAP state
         context->state = IAP_STATE_VALIDATE_APP;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2204      	movs	r2, #4
 800c2c0:	761a      	strb	r2, [r3, #24]
 800c2c2:	e00e      	b.n	800c2e2 <iapProcessAppCheck+0xc2>
      }
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image check data is bigger than expected!\r\n");
 800c2c4:	f7fd f91f 	bl	8009506 <osSuspendAllTasks>
 800c2c8:	4b08      	ldr	r3, [pc, #32]	; (800c2ec <iapProcessAppCheck+0xcc>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	222b      	movs	r2, #43	; 0x2b
 800c2d0:	2101      	movs	r1, #1
 800c2d2:	4807      	ldr	r0, [pc, #28]	; (800c2f0 <iapProcessAppCheck+0xd0>)
 800c2d4:	f00c f9b6 	bl	8018644 <fwrite>
 800c2d8:	f7fd f920 	bl	800951c <osResumeAllTasks>
      return ERROR_BUFFER_OVERFLOW;
 800c2dc:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800c2e0:	e000      	b.n	800c2e4 <iapProcessAppCheck+0xc4>
   }

   //Successful process
   return NO_ERROR;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	200001c8 	.word	0x200001c8
 800c2f0:	0801f648 	.word	0x0801f648

0800c2f4 <imageCheckHeader>:
 * @param[in] header Pointeur to the internal image header to be checked
 * @return Status code
 **/

error_t imageCheckHeader(ImageHeader *header)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
   error_t error;
   uint32_t computedCrc;

   //Check parameter vailidty
   if(header == NULL)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d101      	bne.n	800c306 <imageCheckHeader+0x12>
      return ERROR_INVALID_PARAMETER;
 800c302:	2302      	movs	r3, #2
 800c304:	e028      	b.n	800c358 <imageCheckHeader+0x64>

   //Compute image header crc
   error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&computedCrc);
 800c306:	4b16      	ldr	r3, [pc, #88]	; (800c360 <imageCheckHeader+0x6c>)
 800c308:	6a1b      	ldr	r3, [r3, #32]
 800c30a:	f107 0208 	add.w	r2, r7, #8
 800c30e:	213c      	movs	r1, #60	; 0x3c
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	4798      	blx	r3
 800c314:	4603      	mov	r3, r0
 800c316:	81fb      	strh	r3, [r7, #14]
   if(error)
 800c318:	89fb      	ldrh	r3, [r7, #14]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00d      	beq.n	800c33a <imageCheckHeader+0x46>
   {
      //Debug message
      TRACE_ERROR("Failed to compute image header crc!\r\n");
 800c31e:	f7fd f8f2 	bl	8009506 <osSuspendAllTasks>
 800c322:	4b10      	ldr	r3, [pc, #64]	; (800c364 <imageCheckHeader+0x70>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	2225      	movs	r2, #37	; 0x25
 800c32a:	2101      	movs	r1, #1
 800c32c:	480e      	ldr	r0, [pc, #56]	; (800c368 <imageCheckHeader+0x74>)
 800c32e:	f00c f989 	bl	8018644 <fwrite>
 800c332:	f7fd f8f3 	bl	800951c <osResumeAllTasks>
      return error;
 800c336:	89fb      	ldrh	r3, [r7, #14]
 800c338:	e00e      	b.n	800c358 <imageCheckHeader+0x64>
   }

   //Check image header integrity
   if(header->headCrc != computedCrc)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	429a      	cmp	r2, r3
 800c342:	d001      	beq.n	800c348 <imageCheckHeader+0x54>
      return ERROR_INVALID_HEADER;
 800c344:	23d4      	movs	r3, #212	; 0xd4
 800c346:	e007      	b.n	800c358 <imageCheckHeader+0x64>

   //Check image header version
   if(header->headVers != IMAGE_HEADER_VERSION)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c350:	d001      	beq.n	800c356 <imageCheckHeader+0x62>
      return ERROR_INVALID_VERSION;
 800c352:	23f3      	movs	r3, #243	; 0xf3
 800c354:	e000      	b.n	800c358 <imageCheckHeader+0x64>

   //Successful process
   return NO_ERROR;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	0801fdcc 	.word	0x0801fdcc
 800c364:	200001c8 	.word	0x200001c8
 800c368:	0801f674 	.word	0x0801f674

0800c36c <imageGetHeader>:
 * @param[out] header Pointeur to the header structure to be returned
 * @return Status code
 **/

error_t imageGetHeader(uint8_t *buffer, size_t bufferLen, ImageHeader **header)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
   error_t error;
   ImageHeader *tempHeader;

   //Check parameters validity
   if(buffer == NULL || bufferLen == 0)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d002      	beq.n	800c384 <imageGetHeader+0x18>
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <imageGetHeader+0x1c>
      return ERROR_INVALID_PARAMETER;
 800c384:	2302      	movs	r3, #2
 800c386:	e014      	b.n	800c3b2 <imageGetHeader+0x46>

   if(bufferLen < sizeof(ImageHeader))
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2b3f      	cmp	r3, #63	; 0x3f
 800c38c:	d801      	bhi.n	800c392 <imageGetHeader+0x26>
      return ERROR_INVALID_LENGTH;
 800c38e:	23ec      	movs	r3, #236	; 0xec
 800c390:	e00f      	b.n	800c3b2 <imageGetHeader+0x46>

   //Point to the image header
   tempHeader = (ImageHeader *)buffer;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	617b      	str	r3, [r7, #20]

   //Check image header
   error = imageCheckHeader(tempHeader);
 800c396:	6978      	ldr	r0, [r7, #20]
 800c398:	f7ff ffac 	bl	800c2f4 <imageCheckHeader>
 800c39c:	4603      	mov	r3, r0
 800c39e:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800c3a0:	8a7b      	ldrh	r3, [r7, #18]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <imageGetHeader+0x3e>
      return error;
 800c3a6:	8a7b      	ldrh	r3, [r7, #18]
 800c3a8:	e003      	b.n	800c3b2 <imageGetHeader+0x46>

   //Save image header
   *header = (ImageHeader*) tempHeader;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	697a      	ldr	r2, [r7, #20]
 800c3ae:	601a      	str	r2, [r3, #0]

   //Successful process
   return NO_ERROR;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
	...

0800c3bc <stm32wlxxFlashDriverInit>:
 * @brief Initialize Flash Memory.
 * @return Error code
 **/

error_t stm32wlxxFlashDriverInit(void)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	af00      	add	r7, sp, #0
   //Debug message
   TRACE_INFO("Initializing %s memory...\r\n", STM32WLxx_FLASH_NAME);

   //Wait for last flash operation on flash
   FLASH_WaitForLastOperation(50);
 800c3c0:	2032      	movs	r0, #50	; 0x32
 800c3c2:	f002 f823 	bl	800e40c <FLASH_WaitForLastOperation>
   //Clear all flash error flags
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800c3c6:	4b06      	ldr	r3, [pc, #24]	; (800c3e0 <stm32wlxxFlashDriverInit+0x24>)
 800c3c8:	699b      	ldr	r3, [r3, #24]
 800c3ca:	4a05      	ldr	r2, [pc, #20]	; (800c3e0 <stm32wlxxFlashDriverInit+0x24>)
 800c3cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c3d0:	6193      	str	r3, [r2, #24]
 800c3d2:	4b03      	ldr	r3, [pc, #12]	; (800c3e0 <stm32wlxxFlashDriverInit+0x24>)
 800c3d4:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800c3d8:	611a      	str	r2, [r3, #16]

   //Successfull process
   return NO_ERROR;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	58004000 	.word	0x58004000

0800c3e4 <stm32wlxxFlashDriverGetInfo>:
 * @param[in,out] info Pointeur to the Memory information structure to be returned
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetInfo(const FlashInfo **info)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
   //Set Memory information pointeur
   *info = (const FlashInfo*) &stm32wlxxFlashDriverInfo;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a04      	ldr	r2, [pc, #16]	; (800c400 <stm32wlxxFlashDriverGetInfo+0x1c>)
 800c3f0:	601a      	str	r2, [r3, #0]

   //Successfull process
   return NO_ERROR;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bc80      	pop	{r7}
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop
 800c400:	0801fe0c 	.word	0x0801fe0c

0800c404 <stm32wlxxFlashDriverGetStatus>:
 * @param[in,out] status Pointeur to the Memory status to be returned
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetStatus(FlashStatus *status)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
   uint32_t flag;

   //Check parameter vailidity
   if(status == NULL)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d101      	bne.n	800c416 <stm32wlxxFlashDriverGetStatus+0x12>
      return ERROR_INVALID_PARAMETER;
 800c412:	2302      	movs	r3, #2
 800c414:	e027      	b.n	800c466 <stm32wlxxFlashDriverGetStatus+0x62>

   do
   {
      //Get Flash Memory error flags status
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS);
 800c416:	4b16      	ldr	r3, [pc, #88]	; (800c470 <stm32wlxxFlashDriverGetStatus+0x6c>)
 800c418:	699a      	ldr	r2, [r3, #24]
 800c41a:	4b16      	ldr	r3, [pc, #88]	; (800c474 <stm32wlxxFlashDriverGetStatus+0x70>)
 800c41c:	4013      	ands	r3, r2
 800c41e:	4a15      	ldr	r2, [pc, #84]	; (800c474 <stm32wlxxFlashDriverGetStatus+0x70>)
 800c420:	4293      	cmp	r3, r2
 800c422:	bf0c      	ite	eq
 800c424:	2301      	moveq	r3, #1
 800c426:	2300      	movne	r3, #0
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	60fb      	str	r3, [r7, #12]
      //Is any error flag set?
      if(flag != RESET)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d003      	beq.n	800c43a <stm32wlxxFlashDriverGetStatus+0x36>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_ERR;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2202      	movs	r2, #2
 800c436:	701a      	strb	r2, [r3, #0]
         break;
 800c438:	e014      	b.n	800c464 <stm32wlxxFlashDriverGetStatus+0x60>
      }

      //Get Flash Memory busy flags
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 800c43a:	4b0d      	ldr	r3, [pc, #52]	; (800c470 <stm32wlxxFlashDriverGetStatus+0x6c>)
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c446:	bf0c      	ite	eq
 800c448:	2301      	moveq	r3, #1
 800c44a:	2300      	movne	r3, #0
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	60fb      	str	r3, [r7, #12]
      //Is busy flag set?
      if(flag != RESET)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d003      	beq.n	800c45e <stm32wlxxFlashDriverGetStatus+0x5a>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_BUSY;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	701a      	strb	r2, [r3, #0]
         break;
 800c45c:	e002      	b.n	800c464 <stm32wlxxFlashDriverGetStatus+0x60>
      }

      //Set Flash memory status
      *status = FLASH_STATUS_OK;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	701a      	strb	r2, [r3, #0]
   }while(0);

   //Successfull process
   return NO_ERROR;
 800c464:	2300      	movs	r3, #0
}
 800c466:	4618      	mov	r0, r3
 800c468:	3714      	adds	r7, #20
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bc80      	pop	{r7}
 800c46e:	4770      	bx	lr
 800c470:	58004000 	.word	0x58004000
 800c474:	c000c3fa 	.word	0xc000c3fa

0800c478 <stm32wlxxFlashDriverWrite>:
 * @param[in] length Number of data bytes to write in
 * @return Error code
 **/

error_t stm32wlxxFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08a      	sub	sp, #40	; 0x28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
   const uint8_t *p;
   uint8_t word[STM32WLxx_FLASH_WRITE_SIZE];
   size_t n;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c484:	4b30      	ldr	r3, [pc, #192]	; (800c548 <stm32wlxxFlashDriverWrite+0xd0>)
 800c486:	623b      	str	r3, [r7, #32]

   //Check address validity
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c48e:	d308      	bcc.n	800c4a2 <stm32wlxxFlashDriverWrite+0x2a>
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	429a      	cmp	r2, r3
 800c496:	d204      	bcs.n	800c4a2 <stm32wlxxFlashDriverWrite+0x2a>
      (address % sizeof(uint32_t) != 0))
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <stm32wlxxFlashDriverWrite+0x2e>
      return ERROR_INVALID_PARAMETER;
 800c4a2:	2302      	movs	r3, #2
 800c4a4:	e04c      	b.n	800c540 <stm32wlxxFlashDriverWrite+0xc8>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d005      	beq.n	800c4b8 <stm32wlxxFlashDriverWrite+0x40>
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	6a3a      	ldr	r2, [r7, #32]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d201      	bcs.n	800c4bc <stm32wlxxFlashDriverWrite+0x44>
      return ERROR_INVALID_PARAMETER;
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	e041      	b.n	800c540 <stm32wlxxFlashDriverWrite+0xc8>
   TRACE_INFO("Writing data (%d bytes) at 0x%08X\r\n", length, address);
   TRACE_DEBUG_ARRAY("WRITE DATA: ", data, length);


   //Cast data pointer
   p = (const uint8_t*) data;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	627b      	str	r3, [r7, #36]	; 0x24

   //Perform write operation
   while(length > 0)
 800c4c0:	e03a      	b.n	800c538 <stm32wlxxFlashDriverWrite+0xc0>
   {
      //Prevent to write more than allowed flash write bytes at a time
      n = MIN(sizeof(word), length);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b08      	cmp	r3, #8
 800c4c6:	bf28      	it	cs
 800c4c8:	2308      	movcs	r3, #8
 800c4ca:	61fb      	str	r3, [r7, #28]

      //Check if remaining bytes is less than required flash write size
      if(n < sizeof(word))
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	2b07      	cmp	r3, #7
 800c4d0:	d806      	bhi.n	800c4e0 <stm32wlxxFlashDriverWrite+0x68>
         memset(word, 0, sizeof(word));
 800c4d2:	f107 0310 	add.w	r3, r7, #16
 800c4d6:	2208      	movs	r2, #8
 800c4d8:	2100      	movs	r1, #0
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f00c f9da 	bl	8018894 <memset>

      //Copy n bytes
      memcpy(word, p, n);
 800c4e0:	f107 0310 	add.w	r3, r7, #16
 800c4e4:	69fa      	ldr	r2, [r7, #28]
 800c4e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f00c fabf 	bl	8018a6c <memcpy>

      //Program 32-bit word in flash memory
      error = stm32wlxxFlashDriverWriteWord(address, (uint32_t)word);
 800c4ee:	f107 0310 	add.w	r3, r7, #16
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 f9b7 	bl	800c868 <stm32wlxxFlashDriverWriteWord>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	837b      	strh	r3, [r7, #26]
      if(error)
 800c4fe:	8b7b      	ldrh	r3, [r7, #26]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00d      	beq.n	800c520 <stm32wlxxFlashDriverWrite+0xa8>
      {
         TRACE_ERROR("Failed to write in flash memory!\r\n");
 800c504:	f7fc ffff 	bl	8009506 <osSuspendAllTasks>
 800c508:	4b10      	ldr	r3, [pc, #64]	; (800c54c <stm32wlxxFlashDriverWrite+0xd4>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68db      	ldr	r3, [r3, #12]
 800c50e:	2222      	movs	r2, #34	; 0x22
 800c510:	2101      	movs	r1, #1
 800c512:	480f      	ldr	r0, [pc, #60]	; (800c550 <stm32wlxxFlashDriverWrite+0xd8>)
 800c514:	f00c f896 	bl	8018644 <fwrite>
 800c518:	f7fd f800 	bl	800951c <osResumeAllTasks>
         return error;
 800c51c:	8b7b      	ldrh	r3, [r7, #26]
 800c51e:	e00f      	b.n	800c540 <stm32wlxxFlashDriverWrite+0xc8>
      }

      //Advance data pointer
      p += n;
 800c520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	4413      	add	r3, r2
 800c526:	627b      	str	r3, [r7, #36]	; 0x24
      //Increment word address
      address += n;
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	4413      	add	r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]
      //Remaining bytes to be written
      length -= n;
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	607b      	str	r3, [r7, #4]
   while(length > 0)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1c1      	bne.n	800c4c2 <stm32wlxxFlashDriverWrite+0x4a>
   }

   //Successful process
   return NO_ERROR;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3728      	adds	r7, #40	; 0x28
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	08040000 	.word	0x08040000
 800c54c:	200001c8 	.word	0x200001c8
 800c550:	0801f6b8 	.word	0x0801f6b8

0800c554 <stm32wlxxFlashDriverRead>:
 * @param[in] length Number of data bytes to read out
 * @return Error code
 **/

error_t stm32wlxxFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 800c554:	b480      	push	{r7}
 800c556:	b087      	sub	sp, #28
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t topAddress;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c560:	4b17      	ldr	r3, [pc, #92]	; (800c5c0 <stm32wlxxFlashDriverRead+0x6c>)
 800c562:	613b      	str	r3, [r7, #16]

   //Check address validity
   if(address < STM32WLxx_FLASH_ADDR || address >= topAddress)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c56a:	d303      	bcc.n	800c574 <stm32wlxxFlashDriverRead+0x20>
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	429a      	cmp	r2, r3
 800c572:	d301      	bcc.n	800c578 <stm32wlxxFlashDriverRead+0x24>
      return ERROR_INVALID_PARAMETER;
 800c574:	2302      	movs	r3, #2
 800c576:	e01e      	b.n	800c5b6 <stm32wlxxFlashDriverRead+0x62>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d005      	beq.n	800c58a <stm32wlxxFlashDriverRead+0x36>
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4413      	add	r3, r2
 800c584:	693a      	ldr	r2, [r7, #16]
 800c586:	429a      	cmp	r2, r3
 800c588:	d201      	bcs.n	800c58e <stm32wlxxFlashDriverRead+0x3a>
      return ERROR_INVALID_PARAMETER;
 800c58a:	2302      	movs	r3, #2
 800c58c:	e013      	b.n	800c5b6 <stm32wlxxFlashDriverRead+0x62>

   //Perform read operation
   for(i = 0; i < length; i++)
 800c58e:	2300      	movs	r3, #0
 800c590:	617b      	str	r3, [r7, #20]
 800c592:	e00b      	b.n	800c5ac <stm32wlxxFlashDriverRead+0x58>
   {
      *((uint8_t *)data + i) = *(uint8_t*)address;
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	68b9      	ldr	r1, [r7, #8]
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	440b      	add	r3, r1
 800c59c:	7812      	ldrb	r2, [r2, #0]
 800c59e:	701a      	strb	r2, [r3, #0]
      address++;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < length; i++)
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d3ef      	bcc.n	800c594 <stm32wlxxFlashDriverRead+0x40>
   }

   //Successfull process
   return NO_ERROR;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	371c      	adds	r7, #28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bc80      	pop	{r7}
 800c5be:	4770      	bx	lr
 800c5c0:	08040000 	.word	0x08040000

0800c5c4 <stm32wlxxFlashDriverErase>:
 * @param[in] address Address in Memory to start erasing from
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 **/
error_t stm32wlxxFlashDriverErase(uint32_t address, size_t length)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b088      	sub	sp, #32
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   int_t firstSectorNumber;
   uint32_t lastSectorAddr;
   int_t lastSectorNumber;

   error = NO_ERROR;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	837b      	strh	r3, [r7, #26]

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c5d2:	4b29      	ldr	r3, [pc, #164]	; (800c678 <stm32wlxxFlashDriverErase+0xb4>)
 800c5d4:	617b      	str	r3, [r7, #20]

   //Check address validity
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5dc:	d308      	bcc.n	800c5f0 <stm32wlxxFlashDriverErase+0x2c>
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d204      	bcs.n	800c5f0 <stm32wlxxFlashDriverErase+0x2c>
      (address % sizeof(uint32_t) != 0))
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d001      	beq.n	800c5f4 <stm32wlxxFlashDriverErase+0x30>
      return ERROR_INVALID_PARAMETER;
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	e03c      	b.n	800c66e <stm32wlxxFlashDriverErase+0xaa>

   //Check parameters validity (is data in flash)
   if((length == 0) || (address + length > topAddress))
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d005      	beq.n	800c606 <stm32wlxxFlashDriverErase+0x42>
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	4413      	add	r3, r2
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	429a      	cmp	r2, r3
 800c604:	d201      	bcs.n	800c60a <stm32wlxxFlashDriverErase+0x46>
      return ERROR_INVALID_PARAMETER;
 800c606:	2302      	movs	r3, #2
 800c608:	e031      	b.n	800c66e <stm32wlxxFlashDriverErase+0xaa>

   //Get the number of the first sector to erase
   firstSectorNumber = stm32wlxxFlashGetSector(address);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f9a0 	bl	800c950 <stm32wlxxFlashGetSector>
 800c610:	6138      	str	r0, [r7, #16]

   if(address + length == topAddress)
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	4413      	add	r3, r2
 800c618:	697a      	ldr	r2, [r7, #20]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d102      	bne.n	800c624 <stm32wlxxFlashDriverErase+0x60>
   {
      //Set last sector number as the flash sector total number
      lastSectorNumber = STM32WLxx_FLASH_SECTOR_NUMBER;
 800c61e:	2380      	movs	r3, #128	; 0x80
 800c620:	61fb      	str	r3, [r7, #28]
 800c622:	e014      	b.n	800c64e <stm32wlxxFlashDriverErase+0x8a>
   }
   else
   {
      //Get the address of the boundary sector (not to be erased)
      error = stm32wlxxFlashDriverGetNextSector(address+length, &lastSectorAddr);
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	4413      	add	r3, r2
 800c62a:	f107 020c 	add.w	r2, r7, #12
 800c62e:	4611      	mov	r1, r2
 800c630:	4618      	mov	r0, r3
 800c632:	f000 f823 	bl	800c67c <stm32wlxxFlashDriverGetNextSector>
 800c636:	4603      	mov	r3, r0
 800c638:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800c63a:	8b7b      	ldrh	r3, [r7, #26]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <stm32wlxxFlashDriverErase+0x80>
         return error;
 800c640:	8b7b      	ldrh	r3, [r7, #26]
 800c642:	e014      	b.n	800c66e <stm32wlxxFlashDriverErase+0xaa>

      //The last sector to erase is the last flash bank 1 sector
      lastSectorNumber = stm32wlxxFlashGetSector(lastSectorAddr);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	4618      	mov	r0, r3
 800c648:	f000 f982 	bl	800c950 <stm32wlxxFlashGetSector>
 800c64c:	61f8      	str	r0, [r7, #28]
   }

   //Erase sectors of the flash bank 1 (the only one flash bank)
   error = stm32wlxxFlashDriverEraseSector(STM32WLxx_FLASH_BANK1_ID, firstSectorNumber, lastSectorNumber-firstSectorNumber);
 800c64e:	6939      	ldr	r1, [r7, #16]
 800c650:	69fa      	ldr	r2, [r7, #28]
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	461a      	mov	r2, r3
 800c658:	2001      	movs	r0, #1
 800c65a:	f000 f88d 	bl	800c778 <stm32wlxxFlashDriverEraseSector>
 800c65e:	4603      	mov	r3, r0
 800c660:	837b      	strh	r3, [r7, #26]
   //Is any error?
   if(error)
 800c662:	8b7b      	ldrh	r3, [r7, #26]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d001      	beq.n	800c66c <stm32wlxxFlashDriverErase+0xa8>
      return error;
 800c668:	8b7b      	ldrh	r3, [r7, #26]
 800c66a:	e000      	b.n	800c66e <stm32wlxxFlashDriverErase+0xaa>

   //Successful process
   return NO_ERROR;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3720      	adds	r7, #32
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	08040000 	.word	0x08040000

0800c67c <stm32wlxxFlashDriverGetNextSector>:
 * @brief Get address of the neighbouring sector
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetNextSector(uint32_t address, uint32_t *sectorAddr)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b089      	sub	sp, #36	; 0x24
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t j;
   SectorsGroup *sg;
   uint32_t sAddr = 0xFFFFFFFF;
 800c686:	f04f 33ff 	mov.w	r3, #4294967295
 800c68a:	617b      	str	r3, [r7, #20]
   uint32_t lastSectorAddr;

   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 800c68c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      (sectorsList[SECTORS_LIST_LEN-1].size * (sectorsList[SECTORS_LIST_LEN-1].nb - 1));
 800c690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c694:	2380      	movs	r3, #128	; 0x80
 800c696:	3b01      	subs	r3, #1
 800c698:	fb01 f303 	mul.w	r3, r1, r3
   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 800c69c:	4413      	add	r3, r2
 800c69e:	613b      	str	r3, [r7, #16]

   //Check parameters validity
   if(address < STM32WLxx_FLASH_ADDR || address > lastSectorAddr || sectorAddr == NULL)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6a6:	d306      	bcc.n	800c6b6 <stm32wlxxFlashDriverGetNextSector+0x3a>
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d802      	bhi.n	800c6b6 <stm32wlxxFlashDriverGetNextSector+0x3a>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d101      	bne.n	800c6ba <stm32wlxxFlashDriverGetNextSector+0x3e>
      return ERROR_INVALID_PARAMETER;
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e044      	b.n	800c744 <stm32wlxxFlashDriverGetNextSector+0xc8>

   //Loop through sectors list
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	61fb      	str	r3, [r7, #28]
 800c6be:	e036      	b.n	800c72e <stm32wlxxFlashDriverGetNextSector+0xb2>
   {
      //Point to the current sectors group
      sg = (SectorsGroup *) &sectorsList[i];
 800c6c0:	69fa      	ldr	r2, [r7, #28]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	4413      	add	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4a21      	ldr	r2, [pc, #132]	; (800c750 <stm32wlxxFlashDriverGetNextSector+0xd4>)
 800c6cc:	4413      	add	r3, r2
 800c6ce:	60fb      	str	r3, [r7, #12]

      //Is address in current sector group
      if(address <= sg->addr + sg->size*sg->nb)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	68f9      	ldr	r1, [r7, #12]
 800c6da:	6889      	ldr	r1, [r1, #8]
 800c6dc:	fb01 f303 	mul.w	r3, r1, r3
 800c6e0:	4413      	add	r3, r2
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d81f      	bhi.n	800c728 <stm32wlxxFlashDriverGetNextSector+0xac>
      {
         //Loop through sectors group list
         for(j = 0; j < sg->nb; j++)
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	61bb      	str	r3, [r7, #24]
 800c6ec:	e017      	b.n	800c71e <stm32wlxxFlashDriverGetNextSector+0xa2>
         {
            //Is address located in current sector?
            if(address <= sg->addr + j*sg->size)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	69b9      	ldr	r1, [r7, #24]
 800c6f8:	fb01 f303 	mul.w	r3, r1, r3
 800c6fc:	4413      	add	r3, r2
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	429a      	cmp	r2, r3
 800c702:	d809      	bhi.n	800c718 <stm32wlxxFlashDriverGetNextSector+0x9c>
            {
               //Set next sector address
               sAddr = sg->addr + j*sg->size;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	69b9      	ldr	r1, [r7, #24]
 800c70e:	fb01 f303 	mul.w	r3, r1, r3
 800c712:	4413      	add	r3, r2
 800c714:	617b      	str	r3, [r7, #20]
               break;
 800c716:	e007      	b.n	800c728 <stm32wlxxFlashDriverGetNextSector+0xac>
         for(j = 0; j < sg->nb; j++)
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	3301      	adds	r3, #1
 800c71c:	61bb      	str	r3, [r7, #24]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	69ba      	ldr	r2, [r7, #24]
 800c724:	429a      	cmp	r2, r3
 800c726:	d3e2      	bcc.n	800c6ee <stm32wlxxFlashDriverGetNextSector+0x72>
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	3301      	adds	r3, #1
 800c72c:	61fb      	str	r3, [r7, #28]
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d103      	bne.n	800c73c <stm32wlxxFlashDriverGetNextSector+0xc0>
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73a:	d0c1      	beq.n	800c6c0 <stm32wlxxFlashDriverGetNextSector+0x44>
         }
      }
   }

   //Save next sector addr
   *sectorAddr = sAddr;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	697a      	ldr	r2, [r7, #20]
 800c740:	601a      	str	r2, [r3, #0]

   //Succesfull process
   return NO_ERROR;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3724      	adds	r7, #36	; 0x24
 800c748:	46bd      	mov	sp, r7
 800c74a:	bc80      	pop	{r7}
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	0801fe00 	.word	0x0801fe00

0800c754 <stm32wlxxFlashDriverIsSectorAddr>:
 * @brief Determine if a given address is contained within a sector
 * @return boolean
 **/

bool_t stm32wlxxFlashDriverIsSectorAddr(uint32_t address)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
   int_t sector;

   //Get Flash memory sector number
   sector = stm32wlxxFlashGetSector(address);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 f8f7 	bl	800c950 <stm32wlxxFlashGetSector>
 800c762:	60f8      	str	r0, [r7, #12]

   //Is given address match a sector start address?
   if(sector >= 0)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	db01      	blt.n	800c76e <stm32wlxxFlashDriverIsSectorAddr+0x1a>
      return TRUE;
 800c76a:	2301      	movs	r3, #1
 800c76c:	e000      	b.n	800c770 <stm32wlxxFlashDriverIsSectorAddr+0x1c>
   else
      return FALSE;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <stm32wlxxFlashDriverEraseSector>:
 * @param[in] nbSectors Number of Flash memory sector to be erased
 * @return Error code
 **/

error_t stm32wlxxFlashDriverEraseSector(uint32_t bankID, uint32_t firstSector, size_t nbSectors)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b08a      	sub	sp, #40	; 0x28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint32_t sectorError;

   //Check parameter validity
   if((firstSector >= STM32WLxx_FLASH_SECTOR_NUMBER) || (nbSectors == 0) ||
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	2b7f      	cmp	r3, #127	; 0x7f
 800c788:	d80b      	bhi.n	800c7a2 <stm32wlxxFlashDriverEraseSector+0x2a>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d008      	beq.n	800c7a2 <stm32wlxxFlashDriverEraseSector+0x2a>
      ((firstSector + nbSectors - 1) >= STM32WLxx_FLASH_SECTOR_NUMBER) ||
 800c790:	68ba      	ldr	r2, [r7, #8]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4413      	add	r3, r2
 800c796:	3b01      	subs	r3, #1
   if((firstSector >= STM32WLxx_FLASH_SECTOR_NUMBER) || (nbSectors == 0) ||
 800c798:	2b7f      	cmp	r3, #127	; 0x7f
 800c79a:	d802      	bhi.n	800c7a2 <stm32wlxxFlashDriverEraseSector+0x2a>
      ((firstSector + nbSectors - 1) >= STM32WLxx_FLASH_SECTOR_NUMBER) ||
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d001      	beq.n	800c7a6 <stm32wlxxFlashDriverEraseSector+0x2e>
      (bankID != STM32WLxx_FLASH_BANK1_ID))
      return ERROR_INVALID_PARAMETER;
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	e054      	b.n	800c850 <stm32wlxxFlashDriverEraseSector+0xd8>

   //Start of exception handling block
   do
   {
      //Allow access to Flash control registers and user False
      status = HAL_FLASH_Unlock();
 800c7a6:	f001 fdf5 	bl	800e394 <HAL_FLASH_Unlock>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      //Is any error?
      if (status != HAL_OK)
 800c7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00c      	beq.n	800c7d2 <stm32wlxxFlashDriverEraseSector+0x5a>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 800c7b8:	f7fc fea5 	bl	8009506 <osSuspendAllTasks>
 800c7bc:	4b26      	ldr	r3, [pc, #152]	; (800c858 <stm32wlxxFlashDriverEraseSector+0xe0>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	2227      	movs	r2, #39	; 0x27
 800c7c4:	2101      	movs	r1, #1
 800c7c6:	4825      	ldr	r0, [pc, #148]	; (800c85c <stm32wlxxFlashDriverEraseSector+0xe4>)
 800c7c8:	f00b ff3c 	bl	8018644 <fwrite>
 800c7cc:	f7fc fea6 	bl	800951c <osResumeAllTasks>
         break;
 800c7d0:	e036      	b.n	800c840 <stm32wlxxFlashDriverEraseSector+0xc8>
      }

      //Set flash erase settings
      EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.Page       = firstSector;
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	61fb      	str	r3, [r7, #28]
      EraseInitStruct.NbPages    = nbSectors;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	623b      	str	r3, [r7, #32]

      //Wait for the last flash operation
      FLASH_WaitForLastOperation((uint32_t)5000U);
 800c7de:	f241 3088 	movw	r0, #5000	; 0x1388
 800c7e2:	f001 fe13 	bl	800e40c <FLASH_WaitForLastOperation>

      //Erase the specified Flash sector(s)
      status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 800c7e6:	f107 0214 	add.w	r2, r7, #20
 800c7ea:	f107 0318 	add.w	r3, r7, #24
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f001 fed1 	bl	800e598 <HAL_FLASHEx_Erase>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      //Is any error?
      if(status != HAL_OK)
 800c7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <stm32wlxxFlashDriverEraseSector+0xa4>
      {
         //Debug message
         TRACE_ERROR("Failed to erase flash sector(s) %ld, error = 0x%08lX!\r\n", firstSector, sectorError);
 800c804:	f7fc fe7f 	bl	8009506 <osSuspendAllTasks>
 800c808:	4b13      	ldr	r3, [pc, #76]	; (800c858 <stm32wlxxFlashDriverEraseSector+0xe0>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68d8      	ldr	r0, [r3, #12]
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	4913      	ldr	r1, [pc, #76]	; (800c860 <stm32wlxxFlashDriverEraseSector+0xe8>)
 800c814:	f00b fd52 	bl	80182bc <fprintf>
 800c818:	f7fc fe80 	bl	800951c <osResumeAllTasks>
      }

      //Disable the Flash option control register access (recommended to protect
      //the option Bytes against possible unwanted operations)
      if(HAL_FLASH_Lock() != HAL_OK)
 800c81c:	f001 fddc 	bl	800e3d8 <HAL_FLASH_Lock>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00c      	beq.n	800c840 <stm32wlxxFlashDriverEraseSector+0xc8>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 800c826:	f7fc fe6e 	bl	8009506 <osSuspendAllTasks>
 800c82a:	4b0b      	ldr	r3, [pc, #44]	; (800c858 <stm32wlxxFlashDriverEraseSector+0xe0>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	2225      	movs	r2, #37	; 0x25
 800c832:	2101      	movs	r1, #1
 800c834:	480b      	ldr	r0, [pc, #44]	; (800c864 <stm32wlxxFlashDriverEraseSector+0xec>)
 800c836:	f00b ff05 	bl	8018644 <fwrite>
 800c83a:	f7fc fe6f 	bl	800951c <osResumeAllTasks>
         break;
 800c83e:	bf00      	nop
      }
   }while(0);

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 800c840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c844:	2b00      	cmp	r3, #0
 800c846:	d101      	bne.n	800c84c <stm32wlxxFlashDriverEraseSector+0xd4>
 800c848:	2300      	movs	r3, #0
 800c84a:	e001      	b.n	800c850 <stm32wlxxFlashDriverEraseSector+0xd8>
 800c84c:	f240 2309 	movw	r3, #521	; 0x209
}
 800c850:	4618      	mov	r0, r3
 800c852:	3728      	adds	r7, #40	; 0x28
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	200001c8 	.word	0x200001c8
 800c85c:	0801f6dc 	.word	0x0801f6dc
 800c860:	0801f704 	.word	0x0801f704
 800c864:	0801f73c 	.word	0x0801f73c

0800c868 <stm32wlxxFlashDriverWriteWord>:
 * @param[in] word 32-bit word to write in Flash memory
 * @return Error code
 **/

error_t stm32wlxxFlashDriverWriteWord(uint32_t address, uint32_t word)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08a      	sub	sp, #40	; 0x28
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c872:	4b33      	ldr	r3, [pc, #204]	; (800c940 <stm32wlxxFlashDriverWriteWord+0xd8>)
 800c874:	623b      	str	r3, [r7, #32]

   //Check parameters validity (is data in flash)
   if((address + sizeof(uint32_t) >= topAddress) ||
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	3304      	adds	r3, #4
 800c87a:	6a3a      	ldr	r2, [r7, #32]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d904      	bls.n	800c88a <stm32wlxxFlashDriverWriteWord+0x22>
      (address % sizeof(uint32_t) != 0))
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f003 0303 	and.w	r3, r3, #3
   if((address + sizeof(uint32_t) >= topAddress) ||
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <stm32wlxxFlashDriverWriteWord+0x26>
      return ERROR_INVALID_PARAMETER;
 800c88a:	2302      	movs	r3, #2
 800c88c:	e053      	b.n	800c936 <stm32wlxxFlashDriverWriteWord+0xce>

   //Unlock FLASH
   HAL_FLASH_Unlock();
 800c88e:	f001 fd81 	bl	800e394 <HAL_FLASH_Unlock>

   do
   {
      //Get flash sector number according to the given wirte address
      // (-1 if it doesn't match a flash sector start address)
      flashSector = stm32wlxxFlashGetSector(address);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 f85c 	bl	800c950 <stm32wlxxFlashGetSector>
 800c898:	61f8      	str	r0, [r7, #28]

      //Is write address match a flash sector start address?
      if(flashSector >= 0)
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	db25      	blt.n	800c8ec <stm32wlxxFlashDriverWriteWord+0x84>
      {
         //Set flash erase settings
         EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	60fb      	str	r3, [r7, #12]
         EraseInitStruct.Page       = flashSector;
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	613b      	str	r3, [r7, #16]
         EraseInitStruct.NbPages    = 1;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	617b      	str	r3, [r7, #20]

         //Wait for the last flash operation
         FLASH_WaitForLastOperation((uint32_t)5000U);
 800c8ac:	f241 3088 	movw	r0, #5000	; 0x1388
 800c8b0:	f001 fdac 	bl	800e40c <FLASH_WaitForLastOperation>

         //Erase the sector
         status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 800c8b4:	f107 0218 	add.w	r2, r7, #24
 800c8b8:	f107 030c 	add.w	r3, r7, #12
 800c8bc:	4611      	mov	r1, r2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f001 fe6a 	bl	800e598 <HAL_FLASHEx_Erase>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         if(status != HAL_OK)
 800c8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00c      	beq.n	800c8ec <stm32wlxxFlashDriverWriteWord+0x84>
         {
            //Debug message
            TRACE_ERROR("Flash erase failed!\r\n");
 800c8d2:	f7fc fe18 	bl	8009506 <osSuspendAllTasks>
 800c8d6:	4b1b      	ldr	r3, [pc, #108]	; (800c944 <stm32wlxxFlashDriverWriteWord+0xdc>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	2215      	movs	r2, #21
 800c8de:	2101      	movs	r1, #1
 800c8e0:	4819      	ldr	r0, [pc, #100]	; (800c948 <stm32wlxxFlashDriverWriteWord+0xe0>)
 800c8e2:	f00b feaf 	bl	8018644 <fwrite>
 800c8e6:	f7fc fe19 	bl	800951c <osResumeAllTasks>
            break;
 800c8ea:	e01a      	b.n	800c922 <stm32wlxxFlashDriverWriteWord+0xba>

      //Write word (64bits) into flash
      // Becareful !!!
      // - If FLASH_TYPEPROGRAM_DOUBLEWORD type program -> Data parameter MUST be the 64bits data value
      // - If FLASH_TYPEPROGRAM_FAST type program -> Data parameter MUST be the the address of data
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *((uint64_t*)word));
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	6879      	ldr	r1, [r7, #4]
 800c8f4:	2001      	movs	r0, #1
 800c8f6:	f001 fd09 	bl	800e30c <HAL_FLASH_Program>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if(status != HAL_OK)
 800c900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c904:	2b00      	cmp	r3, #0
 800c906:	d00c      	beq.n	800c922 <stm32wlxxFlashDriverWriteWord+0xba>
      {
         //Debug message
         TRACE_ERROR("Flash program failed!\r\n");
 800c908:	f7fc fdfd 	bl	8009506 <osSuspendAllTasks>
 800c90c:	4b0d      	ldr	r3, [pc, #52]	; (800c944 <stm32wlxxFlashDriverWriteWord+0xdc>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	2217      	movs	r2, #23
 800c914:	2101      	movs	r1, #1
 800c916:	480d      	ldr	r0, [pc, #52]	; (800c94c <stm32wlxxFlashDriverWriteWord+0xe4>)
 800c918:	f00b fe94 	bl	8018644 <fwrite>
 800c91c:	f7fc fdfe 	bl	800951c <osResumeAllTasks>
         break;
 800c920:	bf00      	nop
      }
   }while(0);

   //Lock FLASH
   HAL_FLASH_Lock();
 800c922:	f001 fd59 	bl	800e3d8 <HAL_FLASH_Lock>

   //Return error code
   return (status != HAL_OK)? ERROR_FAILURE : NO_ERROR;
 800c926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	bf14      	ite	ne
 800c92e:	2301      	movne	r3, #1
 800c930:	2300      	moveq	r3, #0
 800c932:	b2db      	uxtb	r3, r3
 800c934:	b29b      	uxth	r3, r3
}
 800c936:	4618      	mov	r0, r3
 800c938:	3728      	adds	r7, #40	; 0x28
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	08040000 	.word	0x08040000
 800c944:	200001c8 	.word	0x200001c8
 800c948:	0801f764 	.word	0x0801f764
 800c94c:	0801f77c 	.word	0x0801f77c

0800c950 <stm32wlxxFlashGetSector>:
 * @param[in] address Given Flash Memory address
 * @return Sector number or -1
 **/

int_t stm32wlxxFlashGetSector(uint32_t address)
{
 800c950:	b480      	push	{r7}
 800c952:	b087      	sub	sp, #28
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
    uint_t j;
    int_t sector;
    SectorsGroup* sGroup;

    //Initialize sector number
    sector = -1;
 800c958:	f04f 33ff 	mov.w	r3, #4294967295
 800c95c:	60fb      	str	r3, [r7, #12]

    //Loop through flash sector group list
    for(i = 0; i < SECTORS_LIST_LEN; i++)
 800c95e:	2300      	movs	r3, #0
 800c960:	617b      	str	r3, [r7, #20]
 800c962:	e024      	b.n	800c9ae <stm32wlxxFlashGetSector+0x5e>
    {
        //Point to the current sector group
        sGroup = (SectorsGroup*) &sectorsList[i];
 800c964:	697a      	ldr	r2, [r7, #20]
 800c966:	4613      	mov	r3, r2
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	4413      	add	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	4a14      	ldr	r2, [pc, #80]	; (800c9c0 <stm32wlxxFlashGetSector+0x70>)
 800c970:	4413      	add	r3, r2
 800c972:	60bb      	str	r3, [r7, #8]

        //Loop through sector group sectors list
        for(j = 0; j < sGroup->nb; j++)
 800c974:	2300      	movs	r3, #0
 800c976:	613b      	str	r3, [r7, #16]
 800c978:	e011      	b.n	800c99e <stm32wlxxFlashGetSector+0x4e>
        {
            //Is current sector address matches given address?
            if(sGroup->addr + sGroup->size*j == address)
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	6939      	ldr	r1, [r7, #16]
 800c984:	fb01 f303 	mul.w	r3, r1, r3
 800c988:	4413      	add	r3, r2
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d103      	bne.n	800c998 <stm32wlxxFlashGetSector+0x48>
            {
                sector = j;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	60fb      	str	r3, [r7, #12]
                return sector;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	e00e      	b.n	800c9b6 <stm32wlxxFlashGetSector+0x66>
        for(j = 0; j < sGroup->nb; j++)
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	3301      	adds	r3, #1
 800c99c:	613b      	str	r3, [r7, #16]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d3e8      	bcc.n	800c97a <stm32wlxxFlashGetSector+0x2a>
    for(i = 0; i < SECTORS_LIST_LEN; i++)
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	617b      	str	r3, [r7, #20]
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d0d7      	beq.n	800c964 <stm32wlxxFlashGetSector+0x14>
            }
        }
    }

    return sector;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	371c      	adds	r7, #28
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bc80      	pop	{r7}
 800c9be:	4770      	bx	lr
 800c9c0:	0801fe00 	.word	0x0801fe00

0800c9c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c9c8:	f3bf 8f4f 	dsb	sy
}
 800c9cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c9ce:	4b06      	ldr	r3, [pc, #24]	; (800c9e8 <__NVIC_SystemReset+0x24>)
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c9d6:	4904      	ldr	r1, [pc, #16]	; (800c9e8 <__NVIC_SystemReset+0x24>)
 800c9d8:	4b04      	ldr	r3, [pc, #16]	; (800c9ec <__NVIC_SystemReset+0x28>)
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c9de:	f3bf 8f4f 	dsb	sy
}
 800c9e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c9e4:	bf00      	nop
 800c9e6:	e7fd      	b.n	800c9e4 <__NVIC_SystemReset+0x20>
 800c9e8:	e000ed00 	.word	0xe000ed00
 800c9ec:	05fa0004 	.word	0x05fa0004

0800c9f0 <mcuSystemReset>:
/**
 * @brief Reset MCU system
 **/

void mcuSystemReset(void)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	af00      	add	r7, sp, #0
   NVIC_SystemReset();
 800c9f4:	f7ff ffe6 	bl	800c9c4 <__NVIC_SystemReset>

0800c9f8 <verifyInit>:
 * @param[in] settings Image Verification specific settings
 * @return
 **/

error_t verifyInit(VerifyContext *context, VerifySettings *settings)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
   //Check parameters
   if (context == NULL || settings == NULL)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <verifyInit+0x16>
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d101      	bne.n	800ca12 <verifyInit+0x1a>
      return ERROR_INVALID_PARAMETER;
 800ca0e:	2302      	movs	r3, #2
 800ca10:	e043      	b.n	800ca9a <verifyInit+0xa2>

   //Save verify settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2208      	movs	r2, #8
 800ca16:	6839      	ldr	r1, [r7, #0]
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f00c f827 	bl	8018a6c <memcpy>

   //Save verification module user settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2208      	movs	r2, #8
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f00c f821 	bl	8018a6c <memcpy>

   //Initialize verification context for integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d11a      	bne.n	800ca68 <verifyInit+0x70>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d014      	beq.n	800ca64 <verifyInit+0x6c>
      {
         //Initialize integrity algo context
         context->verifySettings.integrityAlgo->init(context->checkContext);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	685b      	ldr	r3, [r3, #4]
 800ca3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	3208      	adds	r2, #8
 800ca44:	4610      	mov	r0, r2
 800ca46:	4798      	blx	r3

         //Set image check digest size
         context->imageCheckDigestSize = context->verifySettings.integrityAlgo->digestSize;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	695a      	ldr	r2, [r3, #20]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

         //Set check data (integrity tag) size
         context->checkDataSize = context->imageCheckDigestSize;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

         //Successful process
         return NO_ERROR;
 800ca60:	2300      	movs	r3, #0
 800ca62:	e01a      	b.n	800ca9a <verifyInit+0xa2>
      }
      else
      {
         return ERROR_INVALID_PARAMETER;
 800ca64:	2302      	movs	r3, #2
 800ca66:	e018      	b.n	800ca9a <verifyInit+0xa2>
#else
      return ERROR_INVALID_PARAMETER;
#endif
   }
   //Initialize verification context for authentication method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d101      	bne.n	800ca74 <verifyInit+0x7c>
   {
#if (VERIFY_AUTHENTICATION_SUPPORT == ENABLED)
      //Initialize authentication algorithm
      return authInit(context);
#else
      return ERROR_INVALID_PARAMETER;
 800ca70:	2302      	movs	r3, #2
 800ca72:	e012      	b.n	800ca9a <verifyInit+0xa2>
#endif
   }
   //Initialize verification context for signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b02      	cmp	r3, #2
 800ca7a:	d101      	bne.n	800ca80 <verifyInit+0x88>
   {
#if (VERIFY_SIGNATURE_SUPPORT == ENABLED)
      //Initialize signature algorithm
      return signInit(context);
#else
      return ERROR_INVALID_PARAMETER;
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	e00c      	b.n	800ca9a <verifyInit+0xa2>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 800ca80:	f7fc fd41 	bl	8009506 <osSuspendAllTasks>
 800ca84:	4b07      	ldr	r3, [pc, #28]	; (800caa4 <verifyInit+0xac>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	2222      	movs	r2, #34	; 0x22
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	4806      	ldr	r0, [pc, #24]	; (800caa8 <verifyInit+0xb0>)
 800ca90:	f00b fdd8 	bl	8018644 <fwrite>
 800ca94:	f7fc fd42 	bl	800951c <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800ca98:	2367      	movs	r3, #103	; 0x67
   }
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	200001c8 	.word	0x200001c8
 800caa8:	0801f794 	.word	0x0801f794

0800caac <verifyProcess>:
 * @param[in] length Length og the image data block
 * @return Error code
 **/

error_t verifyProcess(VerifyContext *context, uint8_t *data, size_t length)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
   //Check parameters
   if (context == NULL || (data == NULL || length == 0))
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d005      	beq.n	800caca <verifyProcess+0x1e>
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <verifyProcess+0x1e>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d101      	bne.n	800cace <verifyProcess+0x22>
      return ERROR_INVALID_PARAMETER;
 800caca:	2302      	movs	r3, #2
 800cacc:	e02d      	b.n	800cb2a <verifyProcess+0x7e>

   //Process image data block integrity hash tag calculation
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	781b      	ldrb	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d110      	bne.n	800caf8 <verifyProcess+0x4c>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00a      	beq.n	800caf4 <verifyProcess+0x48>
      {
         //Update integrity hash tag
         context->verifySettings.integrityAlgo->update(context->checkContext, data, length);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	f102 0008 	add.w	r0, r2, #8
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	68b9      	ldr	r1, [r7, #8]
 800caee:	4798      	blx	r3
      TRACE_ERROR("Verification mode not supported!\r\n");
      return ERROR_NOT_IMPLEMENTED;
   }

   //Successful process
   return NO_ERROR;
 800caf0:	2300      	movs	r3, #0
 800caf2:	e01a      	b.n	800cb2a <verifyProcess+0x7e>
         return ERROR_INVALID_PARAMETER;
 800caf4:	2302      	movs	r3, #2
 800caf6:	e018      	b.n	800cb2a <verifyProcess+0x7e>
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d101      	bne.n	800cb04 <verifyProcess+0x58>
      return ERROR_INVALID_PARAMETER;
 800cb00:	2302      	movs	r3, #2
 800cb02:	e012      	b.n	800cb2a <verifyProcess+0x7e>
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d101      	bne.n	800cb10 <verifyProcess+0x64>
      return ERROR_INVALID_PARAMETER;
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	e00c      	b.n	800cb2a <verifyProcess+0x7e>
      TRACE_ERROR("Verification mode not supported!\r\n");
 800cb10:	f7fc fcf9 	bl	8009506 <osSuspendAllTasks>
 800cb14:	4b07      	ldr	r3, [pc, #28]	; (800cb34 <verifyProcess+0x88>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	2222      	movs	r2, #34	; 0x22
 800cb1c:	2101      	movs	r1, #1
 800cb1e:	4806      	ldr	r0, [pc, #24]	; (800cb38 <verifyProcess+0x8c>)
 800cb20:	f00b fd90 	bl	8018644 <fwrite>
 800cb24:	f7fc fcfa 	bl	800951c <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800cb28:	2367      	movs	r3, #103	; 0x67
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	200001c8 	.word	0x200001c8
 800cb38:	0801f794 	.word	0x0801f794

0800cb3c <verifyConfirm>:
 * @param[in] verifyDataLength Length of the image check data
 * @return Error code
 **/

error_t verifyConfirm(VerifyContext *context, uint8_t *verifyData, size_t verifyDataLength)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
   error_t error;

   //Initialize error code
   error = NO_ERROR;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	82fb      	strh	r3, [r7, #22]

   //Check parameters
   if (context == NULL || verifyData == NULL || verifyDataLength == 0)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d005      	beq.n	800cb5e <verifyConfirm+0x22>
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d002      	beq.n	800cb5e <verifyConfirm+0x22>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <verifyConfirm+0x26>
      return ERROR_INVALID_PARAMETER;
 800cb5e:	2302      	movs	r3, #2
 800cb60:	e03e      	b.n	800cbe0 <verifyConfirm+0xa4>

   //Check image check data using integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d11f      	bne.n	800cbaa <verifyConfirm+0x6e>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d019      	beq.n	800cba6 <verifyConfirm+0x6a>
      {
         //Finalize interity tag computation
         context->verifySettings.integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	f102 0008 	add.w	r0, r2, #8
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	32dc      	adds	r2, #220	; 0xdc
 800cb82:	4611      	mov	r1, r2
 800cb84:	4798      	blx	r3
         TRACE_DEBUG("Computed integrity tag (%d bytes)\r\n", context->imageCheckDigestSize);
         TRACE_DEBUG_ARRAY("  ", context->imageCheckDigest, context->imageCheckDigestSize);
         TRACE_DEBUG("\r\n");

         //Compare computed integrity digest with the one received in the image
         if (osMemcmp(verifyData, context->imageCheckDigest, context->imageCheckDigestSize) != 0)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cb92:	461a      	mov	r2, r3
 800cb94:	68b8      	ldr	r0, [r7, #8]
 800cb96:	f00b fe53 	bl	8018840 <memcmp>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d01e      	beq.n	800cbde <verifyConfirm+0xa2>
         {
            //Debug message
            TRACE_INFO("Firmware integrity tag is not valid!\r\n");
            error = ERROR_ABORTED;
 800cba0:	230f      	movs	r3, #15
 800cba2:	82fb      	strh	r3, [r7, #22]
 800cba4:	e01b      	b.n	800cbde <verifyConfirm+0xa2>
         }
      }
      else
      {
         return ERROR_INVALID_PARAMETER;
 800cba6:	2302      	movs	r3, #2
 800cba8:	e01a      	b.n	800cbe0 <verifyConfirm+0xa4>
#else
      return ERROR_INVALID_PARAMETER;
#endif
   }
   //Check image check data using authentification method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d101      	bne.n	800cbb6 <verifyConfirm+0x7a>
      else
      {
         return ERROR_INVALID_PARAMETER;
      }
#else
      return ERROR_INVALID_PARAMETER;
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	e014      	b.n	800cbe0 <verifyConfirm+0xa4>
#endif
   }
   //Check image check data using signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d101      	bne.n	800cbc2 <verifyConfirm+0x86>
      else
      {
         return ERROR_INVALID_PARAMETER;
      }
#else
      return ERROR_INVALID_PARAMETER;
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	e00e      	b.n	800cbe0 <verifyConfirm+0xa4>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 800cbc2:	f7fc fca0 	bl	8009506 <osSuspendAllTasks>
 800cbc6:	4b08      	ldr	r3, [pc, #32]	; (800cbe8 <verifyConfirm+0xac>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	2222      	movs	r2, #34	; 0x22
 800cbce:	2101      	movs	r1, #1
 800cbd0:	4806      	ldr	r0, [pc, #24]	; (800cbec <verifyConfirm+0xb0>)
 800cbd2:	f00b fd37 	bl	8018644 <fwrite>
 800cbd6:	f7fc fca1 	bl	800951c <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800cbda:	2367      	movs	r3, #103	; 0x67
 800cbdc:	e000      	b.n	800cbe0 <verifyConfirm+0xa4>
   }

   //Successful process
   return error;
 800cbde:	8afb      	ldrh	r3, [r7, #22]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3718      	adds	r7, #24
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	200001c8 	.word	0x200001c8
 800cbec:	0801f794 	.word	0x0801f794

0800cbf0 <verifyGenerateCheckData>:
 * @param[out] checkDataLength Length of the image check data buffer tag
 * @return Error code
 **/

error_t verifyGenerateCheckData(VerifyContext *context, uint8_t *checkData, size_t checkDataSize, size_t *checkDataLength)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	603b      	str	r3, [r7, #0]
   VerifySettings *settings;

   //Check parameters
   if (context == NULL || checkData == NULL || checkDataLength == NULL)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d005      	beq.n	800cc10 <verifyGenerateCheckData+0x20>
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d002      	beq.n	800cc10 <verifyGenerateCheckData+0x20>
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d101      	bne.n	800cc14 <verifyGenerateCheckData+0x24>
      return ERROR_INVALID_PARAMETER;
 800cc10:	2302      	movs	r3, #2
 800cc12:	e03c      	b.n	800cc8e <verifyGenerateCheckData+0x9e>

   //Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	617b      	str	r3, [r7, #20]

   //Generate image check integrity tag
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d129      	bne.n	800cc74 <verifyGenerateCheckData+0x84>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d023      	beq.n	800cc70 <verifyGenerateCheckData+0x80>
      {
         //Finalize interity tag check computation
         settings->integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	f102 0008 	add.w	r0, r2, #8
 800cc34:	68fa      	ldr	r2, [r7, #12]
 800cc36:	32dc      	adds	r2, #220	; 0xdc
 800cc38:	4611      	mov	r1, r2
 800cc3a:	4798      	blx	r3

         if(checkDataSize >= context->imageCheckDigestSize)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d310      	bcc.n	800cc6a <verifyGenerateCheckData+0x7a>
         {
            //Save interity tag check data length
            *checkDataLength = context->imageCheckDigestSize;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	601a      	str	r2, [r3, #0]
            //Save interity tag check data
            memcpy(checkData, context->imageCheckDigest, context->imageCheckDigestSize);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cc5e:	461a      	mov	r2, r3
 800cc60:	68b8      	ldr	r0, [r7, #8]
 800cc62:	f00b ff03 	bl	8018a6c <memcpy>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
      return ERROR_ABORTED;
   }

   //Successfull process
   return NO_ERROR;
 800cc66:	2300      	movs	r3, #0
 800cc68:	e011      	b.n	800cc8e <verifyGenerateCheckData+0x9e>
            return ERROR_BUFFER_OVERFLOW;
 800cc6a:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800cc6e:	e00e      	b.n	800cc8e <verifyGenerateCheckData+0x9e>
         return ERROR_INVALID_PARAMETER;
 800cc70:	2302      	movs	r3, #2
 800cc72:	e00c      	b.n	800cc8e <verifyGenerateCheckData+0x9e>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
 800cc74:	f7fc fc47 	bl	8009506 <osSuspendAllTasks>
 800cc78:	4b07      	ldr	r3, [pc, #28]	; (800cc98 <verifyGenerateCheckData+0xa8>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	2238      	movs	r2, #56	; 0x38
 800cc80:	2101      	movs	r1, #1
 800cc82:	4806      	ldr	r0, [pc, #24]	; (800cc9c <verifyGenerateCheckData+0xac>)
 800cc84:	f00b fcde 	bl	8018644 <fwrite>
 800cc88:	f7fc fc48 	bl	800951c <osResumeAllTasks>
      return ERROR_ABORTED;
 800cc8c:	230f      	movs	r3, #15
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3718      	adds	r7, #24
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	200001c8 	.word	0x200001c8
 800cc9c:	0801f7b8 	.word	0x0801f7b8

0800cca0 <w25q80dvFlashDriverInit>:
 * @brief Initialize Flash Memory.
 * @return Error code
 **/

error_t w25q80dvFlashDriverInit(void)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
	bool_t status;

   //Debug message
   TRACE_INFO("Initializing %s memory...\r\n", W25Q80DV_NAME);

   status = Flash__Init();
 800cca6:	f007 fd95 	bl	80147d4 <Flash__Init>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	607b      	str	r3, [r7, #4]
   if(!status)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <w25q80dvFlashDriverInit+0x18>
   {
      TRACE_ERROR("Failed to initialize SPI External Flash!\r\n");
      return ERROR_FAILURE;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e000      	b.n	800ccba <w25q80dvFlashDriverInit+0x1a>
   }

   //Successfull process
   return NO_ERROR;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
	...

0800ccc4 <w25q80dvFlashDriverGetInfo>:
 * @param[in,out] info Pointeur to the Memory information structure to be returned
 * @return Error code
 **/

error_t w25q80dvFlashDriverGetInfo(const FlashInfo **info)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
   //Set Memory information pointeur
   *info = (const FlashInfo*) &w25q80dvFlashDriverInfo;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4a04      	ldr	r2, [pc, #16]	; (800cce0 <w25q80dvFlashDriverGetInfo+0x1c>)
 800ccd0:	601a      	str	r2, [r3, #0]

   //Successfull process
   return NO_ERROR;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bc80      	pop	{r7}
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	0801fe60 	.word	0x0801fe60

0800cce4 <w25q80dvFlashDriverGetStatus>:
 * @param[in,out] status Pointeur to the Memory status to be returned
 * @return Error code
 **/

error_t w25q80dvFlashDriverGetStatus(FlashStatus *status)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
   uint16_t statusReg;

   //Check parameter vailidity
   if(status == NULL)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d101      	bne.n	800ccf6 <w25q80dvFlashDriverGetStatus+0x12>
      return ERROR_INVALID_PARAMETER;
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	e010      	b.n	800cd18 <w25q80dvFlashDriverGetStatus+0x34>

   //TODO: Get SPI Flash Memory error flags status

   //Read w25q80dv status register 1 & 2
   statusReg = Flash__ReadDeviceStatus();
 800ccf6:	f007 fe00 	bl	80148fa <Flash__ReadDeviceStatus>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	81fb      	strh	r3, [r7, #14]

   if(statusReg & STATUS_REG_BUSY)
 800ccfe:	89fb      	ldrh	r3, [r7, #14]
 800cd00:	f003 0301 	and.w	r3, r3, #1
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d003      	beq.n	800cd10 <w25q80dvFlashDriverGetStatus+0x2c>
   {
	   //Set Flash memory status
	   *status = FLASH_STATUS_BUSY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	701a      	strb	r2, [r3, #0]
 800cd0e:	e002      	b.n	800cd16 <w25q80dvFlashDriverGetStatus+0x32>
   }
   else
   {
	   //Set Flash memory status
	   *status = FLASH_STATUS_OK;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	701a      	strb	r2, [r3, #0]
   }

   //Successfull process
   return NO_ERROR;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <w25q80dvFlashDriverWrite>:
 * @param[in] length Number of data bytes to write in
 * @return Error code
 **/

error_t w25q80dvFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b088      	sub	sp, #32
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
   const uint8_t *p;
   uint8_t word[4];
   size_t n;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 800cd2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cd30:	61bb      	str	r3, [r7, #24]

   //Check address validity
   if((address < W25Q80DV_ADDR || address >= topAddress) ||
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d204      	bcs.n	800cd44 <w25q80dvFlashDriverWrite+0x24>
      (address % sizeof(uint32_t) != 0))
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f003 0303 	and.w	r3, r3, #3
   if((address < W25Q80DV_ADDR || address >= topAddress) ||
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <w25q80dvFlashDriverWrite+0x28>
      return ERROR_INVALID_PARAMETER;
 800cd44:	2302      	movs	r3, #2
 800cd46:	e042      	b.n	800cdce <w25q80dvFlashDriverWrite+0xae>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d005      	beq.n	800cd5a <w25q80dvFlashDriverWrite+0x3a>
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4413      	add	r3, r2
 800cd54:	69ba      	ldr	r2, [r7, #24]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d201      	bcs.n	800cd5e <w25q80dvFlashDriverWrite+0x3e>
      return ERROR_INVALID_PARAMETER;
 800cd5a:	2302      	movs	r3, #2
 800cd5c:	e037      	b.n	800cdce <w25q80dvFlashDriverWrite+0xae>

   //Cast data pointer
   p = (const uint8_t*) data;
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	61fb      	str	r3, [r7, #28]

   //Perform write operation
   while(length > 0)
 800cd62:	e030      	b.n	800cdc6 <w25q80dvFlashDriverWrite+0xa6>
   {
      //Prevent to write more than 4 bytes at a time
      n = MIN(sizeof(word), length);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b04      	cmp	r3, #4
 800cd68:	bf28      	it	cs
 800cd6a:	2304      	movcs	r3, #4
 800cd6c:	617b      	str	r3, [r7, #20]

      //Check if remaining bytes is less than 4 (32bits word)
      if(n < sizeof(uint32_t))
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b03      	cmp	r3, #3
 800cd72:	d806      	bhi.n	800cd82 <w25q80dvFlashDriverWrite+0x62>
         memset(word, 0, sizeof(word));
 800cd74:	f107 0310 	add.w	r3, r7, #16
 800cd78:	2204      	movs	r2, #4
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f00b fd89 	bl	8018894 <memset>

      //Copy n bytes
      memcpy(word, p, n);
 800cd82:	f107 0310 	add.w	r3, r7, #16
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	69f9      	ldr	r1, [r7, #28]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f00b fe6e 	bl	8018a6c <memcpy>

      //Is address match sector start address?
      if(address % W25Q80DV_SUBSECTORS_SIZE == 0)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d102      	bne.n	800cda0 <w25q80dvFlashDriverWrite+0x80>
      {
         //Erases the specified block
    	 Flash__SectorErase4k(address);
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f007 fe62 	bl	8014a64 <Flash__SectorErase4k>
      }

      //Program 32-bit word in flash memory
      Flash__PageProgram(address, word, sizeof(uint32_t));
 800cda0:	f107 0310 	add.w	r3, r7, #16
 800cda4:	2204      	movs	r2, #4
 800cda6:	4619      	mov	r1, r3
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f007 fe0e 	bl	80149ca <Flash__PageProgram>

      //Advance data pointer
      p += n;
 800cdae:	69fa      	ldr	r2, [r7, #28]
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	61fb      	str	r3, [r7, #28]
      //Increment word address
      address += n;
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	4413      	add	r3, r2
 800cdbc:	60fb      	str	r3, [r7, #12]
      //Remaining bytes to be written
      length -= n;
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	607b      	str	r3, [r7, #4]
   while(length > 0)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d1cb      	bne.n	800cd64 <w25q80dvFlashDriverWrite+0x44>
   }

   //Successful process
   return NO_ERROR;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3720      	adds	r7, #32
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <w25q80dvFlashDriverRead>:
 * @param[in] length Number of data bytes to read out
 * @return Error code
 **/

error_t w25q80dvFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b086      	sub	sp, #24
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	60f8      	str	r0, [r7, #12]
 800cdde:	60b9      	str	r1, [r7, #8]
 800cde0:	607a      	str	r2, [r7, #4]
   uint32_t topAddress;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 800cde2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cde6:	617b      	str	r3, [r7, #20]

   //Check address validity
   if(address < W25Q80DV_ADDR || address >= topAddress)
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d301      	bcc.n	800cdf4 <w25q80dvFlashDriverRead+0x1e>
      return ERROR_INVALID_PARAMETER;
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	e010      	b.n	800ce16 <w25q80dvFlashDriverRead+0x40>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d005      	beq.n	800ce06 <w25q80dvFlashDriverRead+0x30>
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4413      	add	r3, r2
 800ce00:	697a      	ldr	r2, [r7, #20]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d201      	bcs.n	800ce0a <w25q80dvFlashDriverRead+0x34>
      return ERROR_INVALID_PARAMETER;
 800ce06:	2302      	movs	r3, #2
 800ce08:	e005      	b.n	800ce16 <w25q80dvFlashDriverRead+0x40>

   //Perform read operation
   Flash__ReadBuffer(address, data, length);
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	68b9      	ldr	r1, [r7, #8]
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f007 fd8b 	bl	801492a <Flash__ReadBuffer>

   //Successfull process
   return NO_ERROR;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3718      	adds	r7, #24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <w25q80dvFlashDriverErase>:
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 **/

error_t w25q80dvFlashDriverErase(uint32_t address, size_t length)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 800ce28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ce2c:	60fb      	str	r3, [r7, #12]

   //Check address validity
   if(address < W25Q80DV_ADDR || address >= topAddress)
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d301      	bcc.n	800ce3a <w25q80dvFlashDriverErase+0x1c>
      return ERROR_INVALID_PARAMETER;
 800ce36:	2302      	movs	r3, #2
 800ce38:	e02d      	b.n	800ce96 <w25q80dvFlashDriverErase+0x78>

   //Check parameters validity (is data in flash)
   if(address + length > topAddress)
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	4413      	add	r3, r2
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d201      	bcs.n	800ce4a <w25q80dvFlashDriverErase+0x2c>
      return ERROR_INVALID_PARAMETER;
 800ce46:	2302      	movs	r3, #2
 800ce48:	e025      	b.n	800ce96 <w25q80dvFlashDriverErase+0x78>

   //Be sure address match a memory flash subsector start address
   if(address % W25Q80DV_SUBSECTORS_SIZE != 0)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d01c      	beq.n	800ce8e <w25q80dvFlashDriverErase+0x70>
   {
      length += address % W25Q80DV_SUBSECTORS_SIZE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	603b      	str	r3, [r7, #0]
      address -= address % W25Q80DV_SUBSECTORS_SIZE;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ce66:	f023 030f 	bic.w	r3, r3, #15
 800ce6a:	607b      	str	r3, [r7, #4]
   }

   //Perform erase operation
   while(length > 0)
 800ce6c:	e00f      	b.n	800ce8e <w25q80dvFlashDriverErase+0x70>
   {
      //Erases the specified block
	  Flash__SectorErase4k(address);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f007 fdf8 	bl	8014a64 <Flash__SectorErase4k>

      //Increment word address
      address += W25Q80DV_SUBSECTORS_SIZE;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce7a:	607b      	str	r3, [r7, #4]
      //Remaining bytes to be erased
      length -= MIN(length, W25Q80DV_SUBSECTORS_SIZE);
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce82:	bf28      	it	cs
 800ce84:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	603b      	str	r3, [r7, #0]
   while(length > 0)
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1ec      	bne.n	800ce6e <w25q80dvFlashDriverErase+0x50>
   }

   //Successful process
   return NO_ERROR;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3710      	adds	r7, #16
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <w25q80dvFlashDriverIsSectorAddr>:
 * @brief Determine if a given address match a sector tart address
 * @return boolean
 **/

bool_t w25q80dvFlashDriverIsSectorAddr(uint32_t address)
{
 800ce9e:	b480      	push	{r7}
 800cea0:	b083      	sub	sp, #12
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
   //Is given address match a sector start address?
   if((address % W25Q80DV_SUBSECTORS_SIZE) == 0)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d101      	bne.n	800ceb4 <w25q80dvFlashDriverIsSectorAddr+0x16>
      return TRUE;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e000      	b.n	800ceb6 <w25q80dvFlashDriverIsSectorAddr+0x18>
   else
      return FALSE;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bc80      	pop	{r7}
 800cebe:	4770      	bx	lr

0800cec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800cec6:	2300      	movs	r3, #0
 800cec8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ceca:	2003      	movs	r0, #3
 800cecc:	f001 f920 	bl	800e110 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ced0:	f002 ff90 	bl	800fdf4 <HAL_RCC_GetHCLKFreq>
 800ced4:	4603      	mov	r3, r0
 800ced6:	4a09      	ldr	r2, [pc, #36]	; (800cefc <HAL_Init+0x3c>)
 800ced8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ceda:	200f      	movs	r0, #15
 800cedc:	f7fd fbd8 	bl	800a690 <HAL_InitTick>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	71fb      	strb	r3, [r7, #7]
 800ceea:	e001      	b.n	800cef0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ceec:	f7fd f9f5 	bl	800a2da <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800cef0:	79fb      	ldrb	r3, [r7, #7]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	20000080 	.word	0x20000080

0800cf00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cf00:	b480      	push	{r7}
 800cf02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800cf04:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <HAL_IncTick+0x1c>)
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	461a      	mov	r2, r3
 800cf0a:	4b05      	ldr	r3, [pc, #20]	; (800cf20 <HAL_IncTick+0x20>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4413      	add	r3, r2
 800cf10:	4a03      	ldr	r2, [pc, #12]	; (800cf20 <HAL_IncTick+0x20>)
 800cf12:	6013      	str	r3, [r2, #0]
}
 800cf14:	bf00      	nop
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bc80      	pop	{r7}
 800cf1a:	4770      	bx	lr
 800cf1c:	2000008c 	.word	0x2000008c
 800cf20:	200020ac 	.word	0x200020ac

0800cf24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cf24:	b480      	push	{r7}
 800cf26:	af00      	add	r7, sp, #0
  return uwTick;
 800cf28:	4b02      	ldr	r3, [pc, #8]	; (800cf34 <HAL_GetTick+0x10>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bc80      	pop	{r7}
 800cf32:	4770      	bx	lr
 800cf34:	200020ac 	.word	0x200020ac

0800cf38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cf40:	f7ff fff0 	bl	800cf24 <HAL_GetTick>
 800cf44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf50:	d005      	beq.n	800cf5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cf52:	4b0a      	ldr	r3, [pc, #40]	; (800cf7c <HAL_Delay+0x44>)
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	461a      	mov	r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800cf5e:	bf00      	nop
 800cf60:	f7ff ffe0 	bl	800cf24 <HAL_GetTick>
 800cf64:	4602      	mov	r2, r0
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d8f7      	bhi.n	800cf60 <HAL_Delay+0x28>
  {
  }
}
 800cf70:	bf00      	nop
 800cf72:	bf00      	nop
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	2000008c 	.word	0x2000008c

0800cf80 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800cf80:	b480      	push	{r7}
 800cf82:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800cf84:	4b02      	ldr	r3, [pc, #8]	; (800cf90 <HAL_GetUIDw0+0x10>)
 800cf86:	681b      	ldr	r3, [r3, #0]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bc80      	pop	{r7}
 800cf8e:	4770      	bx	lr
 800cf90:	1fff7590 	.word	0x1fff7590

0800cf94 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800cf94:	b480      	push	{r7}
 800cf96:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800cf98:	4b02      	ldr	r3, [pc, #8]	; (800cfa4 <HAL_GetUIDw1+0x10>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bc80      	pop	{r7}
 800cfa2:	4770      	bx	lr
 800cfa4:	1fff7594 	.word	0x1fff7594

0800cfa8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800cfac:	4b02      	ldr	r3, [pc, #8]	; (800cfb8 <HAL_GetUIDw2+0x10>)
 800cfae:	681b      	ldr	r3, [r3, #0]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bc80      	pop	{r7}
 800cfb6:	4770      	bx	lr
 800cfb8:	1fff7598 	.word	0x1fff7598

0800cfbc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	431a      	orrs	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	601a      	str	r2, [r3, #0]
}
 800cfd6:	bf00      	nop
 800cfd8:	370c      	adds	r7, #12
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bc80      	pop	{r7}
 800cfde:	4770      	bx	lr

0800cfe0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bc80      	pop	{r7}
 800cff8:	4770      	bx	lr

0800cffa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b085      	sub	sp, #20
 800cffe:	af00      	add	r7, sp, #0
 800d000:	60f8      	str	r0, [r7, #12]
 800d002:	60b9      	str	r1, [r7, #8]
 800d004:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	695a      	ldr	r2, [r3, #20]
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	f003 0304 	and.w	r3, r3, #4
 800d010:	2107      	movs	r1, #7
 800d012:	fa01 f303 	lsl.w	r3, r1, r3
 800d016:	43db      	mvns	r3, r3
 800d018:	401a      	ands	r2, r3
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	f003 0304 	and.w	r3, r3, #4
 800d020:	6879      	ldr	r1, [r7, #4]
 800d022:	fa01 f303 	lsl.w	r3, r1, r3
 800d026:	431a      	orrs	r2, r3
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800d02c:	bf00      	nop
 800d02e:	3714      	adds	r7, #20
 800d030:	46bd      	mov	sp, r7
 800d032:	bc80      	pop	{r7}
 800d034:	4770      	bx	lr

0800d036 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800d036:	b480      	push	{r7}
 800d038:	b083      	sub	sp, #12
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	695a      	ldr	r2, [r3, #20]
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	f003 0304 	and.w	r3, r3, #4
 800d04a:	2107      	movs	r1, #7
 800d04c:	fa01 f303 	lsl.w	r3, r1, r3
 800d050:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800d058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	bc80      	pop	{r7}
 800d064:	4770      	bx	lr

0800d066 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800d066:	b480      	push	{r7}
 800d068:	b083      	sub	sp, #12
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800d07a:	2301      	movs	r3, #1
 800d07c:	e000      	b.n	800d080 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	bc80      	pop	{r7}
 800d088:	4770      	bx	lr

0800d08a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800d08a:	b480      	push	{r7}
 800d08c:	b085      	sub	sp, #20
 800d08e:	af00      	add	r7, sp, #0
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	60b9      	str	r1, [r7, #8]
 800d094:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	f003 031f 	and.w	r3, r3, #31
 800d0a0:	210f      	movs	r1, #15
 800d0a2:	fa01 f303 	lsl.w	r3, r1, r3
 800d0a6:	43db      	mvns	r3, r3
 800d0a8:	401a      	ands	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	0e9b      	lsrs	r3, r3, #26
 800d0ae:	f003 010f 	and.w	r1, r3, #15
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	f003 031f 	and.w	r3, r3, #31
 800d0b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d0bc:	431a      	orrs	r2, r3
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800d0c2:	bf00      	nop
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bc80      	pop	{r7}
 800d0ca:	4770      	bx	lr

0800d0cc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d0e0:	431a      	orrs	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d0e6:	bf00      	nop
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bc80      	pop	{r7}
 800d0ee:	4770      	bx	lr

0800d0f0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
 800d0f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d104:	43db      	mvns	r3, r3
 800d106:	401a      	ands	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d10c:	bf00      	nop
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	bc80      	pop	{r7}
 800d114:	4770      	bx	lr

0800d116 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800d116:	b480      	push	{r7}
 800d118:	b085      	sub	sp, #20
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	60f8      	str	r0, [r7, #12]
 800d11e:	60b9      	str	r1, [r7, #8]
 800d120:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	695a      	ldr	r2, [r3, #20]
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	021b      	lsls	r3, r3, #8
 800d12a:	43db      	mvns	r3, r3
 800d12c:	401a      	ands	r2, r3
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	0219      	lsls	r1, r3, #8
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	400b      	ands	r3, r1
 800d136:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800d13a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d13e:	431a      	orrs	r2, r3
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800d144:	bf00      	nop
 800d146:	3714      	adds	r7, #20
 800d148:	46bd      	mov	sp, r7
 800d14a:	bc80      	pop	{r7}
 800d14c:	4770      	bx	lr

0800d14e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800d14e:	b480      	push	{r7}
 800d150:	b083      	sub	sp, #12
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800d15e:	f023 0317 	bic.w	r3, r3, #23
 800d162:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800d16a:	bf00      	nop
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	bc80      	pop	{r7}
 800d172:	4770      	bx	lr

0800d174 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d188:	d101      	bne.n	800d18e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800d18a:	2301      	movs	r3, #1
 800d18c:	e000      	b.n	800d190 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	bc80      	pop	{r7}
 800d198:	4770      	bx	lr

0800d19a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1aa:	f023 0317 	bic.w	r3, r3, #23
 800d1ae:	f043 0201 	orr.w	r2, r3, #1
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800d1b6:	bf00      	nop
 800d1b8:	370c      	adds	r7, #12
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bc80      	pop	{r7}
 800d1be:	4770      	bx	lr

0800d1c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1d0:	f023 0317 	bic.w	r3, r3, #23
 800d1d4:	f043 0202 	orr.w	r2, r3, #2
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800d1dc:	bf00      	nop
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bc80      	pop	{r7}
 800d1e4:	4770      	bx	lr

0800d1e6 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800d1e6:	b480      	push	{r7}
 800d1e8:	b083      	sub	sp, #12
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	f003 0301 	and.w	r3, r3, #1
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d101      	bne.n	800d1fe <LL_ADC_IsEnabled+0x18>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e000      	b.n	800d200 <LL_ADC_IsEnabled+0x1a>
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	bc80      	pop	{r7}
 800d208:	4770      	bx	lr

0800d20a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800d20a:	b480      	push	{r7}
 800d20c:	b083      	sub	sp, #12
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	f003 0302 	and.w	r3, r3, #2
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d101      	bne.n	800d222 <LL_ADC_IsDisableOngoing+0x18>
 800d21e:	2301      	movs	r3, #1
 800d220:	e000      	b.n	800d224 <LL_ADC_IsDisableOngoing+0x1a>
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	bc80      	pop	{r7}
 800d22c:	4770      	bx	lr

0800d22e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800d22e:	b480      	push	{r7}
 800d230:	b083      	sub	sp, #12
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d23e:	f023 0317 	bic.w	r3, r3, #23
 800d242:	f043 0204 	orr.w	r2, r3, #4
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800d24a:	bf00      	nop
 800d24c:	370c      	adds	r7, #12
 800d24e:	46bd      	mov	sp, r7
 800d250:	bc80      	pop	{r7}
 800d252:	4770      	bx	lr

0800d254 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d264:	f023 0317 	bic.w	r3, r3, #23
 800d268:	f043 0210 	orr.w	r2, r3, #16
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800d270:	bf00      	nop
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	bc80      	pop	{r7}
 800d278:	4770      	bx	lr

0800d27a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800d27a:	b480      	push	{r7}
 800d27c:	b083      	sub	sp, #12
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	f003 0304 	and.w	r3, r3, #4
 800d28a:	2b04      	cmp	r3, #4
 800d28c:	d101      	bne.n	800d292 <LL_ADC_REG_IsConversionOngoing+0x18>
 800d28e:	2301      	movs	r3, #1
 800d290:	e000      	b.n	800d294 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	370c      	adds	r7, #12
 800d298:	46bd      	mov	sp, r7
 800d29a:	bc80      	pop	{r7}
 800d29c:	4770      	bx	lr
	...

0800d2a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b088      	sub	sp, #32
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d101      	bne.n	800d2c2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e17e      	b.n	800d5c0 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d109      	bne.n	800d2e4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7fd f80d 	bl	800a2f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff ff43 	bl	800d174 <LL_ADC_IsInternalRegulatorEnabled>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d115      	bne.n	800d320 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7ff ff28 	bl	800d14e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d2fe:	4b9e      	ldr	r3, [pc, #632]	; (800d578 <HAL_ADC_Init+0x2d8>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	099b      	lsrs	r3, r3, #6
 800d304:	4a9d      	ldr	r2, [pc, #628]	; (800d57c <HAL_ADC_Init+0x2dc>)
 800d306:	fba2 2303 	umull	r2, r3, r2, r3
 800d30a:	099b      	lsrs	r3, r3, #6
 800d30c:	3301      	adds	r3, #1
 800d30e:	005b      	lsls	r3, r3, #1
 800d310:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800d312:	e002      	b.n	800d31a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	3b01      	subs	r3, #1
 800d318:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1f9      	bne.n	800d314 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4618      	mov	r0, r3
 800d326:	f7ff ff25 	bl	800d174 <LL_ADC_IsInternalRegulatorEnabled>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d10d      	bne.n	800d34c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d334:	f043 0210 	orr.w	r2, r3, #16
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d340:	f043 0201 	orr.w	r2, r3, #1
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4618      	mov	r0, r3
 800d352:	f7ff ff92 	bl	800d27a <LL_ADC_REG_IsConversionOngoing>
 800d356:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d35c:	f003 0310 	and.w	r3, r3, #16
 800d360:	2b00      	cmp	r3, #0
 800d362:	f040 8124 	bne.w	800d5ae <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f040 8120 	bne.w	800d5ae <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d372:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800d376:	f043 0202 	orr.w	r2, r3, #2
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff ff2f 	bl	800d1e6 <LL_ADC_IsEnabled>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f040 80a7 	bne.w	800d4de <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7e1b      	ldrb	r3, [r3, #24]
 800d398:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800d39a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	7e5b      	ldrb	r3, [r3, #25]
 800d3a0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800d3a2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7e9b      	ldrb	r3, [r3, #26]
 800d3a8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800d3aa:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d3b0:	2a00      	cmp	r2, #0
 800d3b2:	d002      	beq.n	800d3ba <HAL_ADC_Init+0x11a>
 800d3b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d3b8:	e000      	b.n	800d3bc <HAL_ADC_Init+0x11c>
 800d3ba:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800d3bc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800d3c2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	691b      	ldr	r3, [r3, #16]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	da04      	bge.n	800d3d6 <HAL_ADC_Init+0x136>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3d4:	e001      	b.n	800d3da <HAL_ADC_Init+0x13a>
 800d3d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800d3da:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d3e2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800d3e4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d114      	bne.n	800d420 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	7e9b      	ldrb	r3, [r3, #26]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d104      	bne.n	800d408 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d404:	61bb      	str	r3, [r7, #24]
 800d406:	e00b      	b.n	800d420 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d40c:	f043 0220 	orr.w	r2, r3, #32
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d418:	f043 0201 	orr.w	r2, r3, #1
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d424:	2b00      	cmp	r3, #0
 800d426:	d009      	beq.n	800d43c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800d434:	4313      	orrs	r3, r2
 800d436:	69ba      	ldr	r2, [r7, #24]
 800d438:	4313      	orrs	r3, r2
 800d43a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800d446:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	6812      	ldr	r2, [r2, #0]
 800d44e:	69b9      	ldr	r1, [r7, #24]
 800d450:	430b      	orrs	r3, r1
 800d452:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d460:	4313      	orrs	r3, r2
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	4313      	orrs	r3, r2
 800d466:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d111      	bne.n	800d496 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d47e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800d484:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800d48a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	4313      	orrs	r3, r2
 800d490:	f043 0301 	orr.w	r3, r3, #1
 800d494:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	691a      	ldr	r2, [r3, #16]
 800d49c:	4b38      	ldr	r3, [pc, #224]	; (800d580 <HAL_ADC_Init+0x2e0>)
 800d49e:	4013      	ands	r3, r2
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	6812      	ldr	r2, [r2, #0]
 800d4a4:	6979      	ldr	r1, [r7, #20]
 800d4a6:	430b      	orrs	r3, r1
 800d4a8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800d4b2:	d014      	beq.n	800d4de <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800d4b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4bc:	d00f      	beq.n	800d4de <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800d4c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4c6:	d00a      	beq.n	800d4de <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800d4c8:	4b2e      	ldr	r3, [pc, #184]	; (800d584 <HAL_ADC_Init+0x2e4>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800d4d8:	492a      	ldr	r1, [pc, #168]	; (800d584 <HAL_ADC_Init+0x2e4>)
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	f7ff fd86 	bl	800cffa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6818      	ldr	r0, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	4923      	ldr	r1, [pc, #140]	; (800d588 <HAL_ADC_Init+0x2e8>)
 800d4fa:	f7ff fd7e 	bl	800cffa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d108      	bne.n	800d518 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f062 020f 	orn	r2, r2, #15
 800d514:	629a      	str	r2, [r3, #40]	; 0x28
 800d516:	e017      	b.n	800d548 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d520:	d112      	bne.n	800d548 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	69db      	ldr	r3, [r3, #28]
 800d52c:	3b01      	subs	r3, #1
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	f003 031c 	and.w	r3, r3, #28
 800d534:	f06f 020f 	mvn.w	r2, #15
 800d538:	fa02 f103 	lsl.w	r1, r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	430a      	orrs	r2, r1
 800d546:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2100      	movs	r1, #0
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff fd71 	bl	800d036 <LL_ADC_GetSamplingTimeCommonChannels>
 800d554:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d116      	bne.n	800d58c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d568:	f023 0303 	bic.w	r3, r3, #3
 800d56c:	f043 0201 	orr.w	r2, r3, #1
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d574:	e023      	b.n	800d5be <HAL_ADC_Init+0x31e>
 800d576:	bf00      	nop
 800d578:	20000080 	.word	0x20000080
 800d57c:	053e2d63 	.word	0x053e2d63
 800d580:	1ffffc02 	.word	0x1ffffc02
 800d584:	40012708 	.word	0x40012708
 800d588:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d590:	f023 0312 	bic.w	r3, r3, #18
 800d594:	f043 0210 	orr.w	r2, r3, #16
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5a0:	f043 0201 	orr.w	r2, r3, #1
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d5ac:	e007      	b.n	800d5be <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5b2:	f043 0210 	orr.w	r2, r3, #16
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800d5be:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3720      	adds	r7, #32
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7ff fe50 	bl	800d27a <LL_ADC_REG_IsConversionOngoing>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d132      	bne.n	800d646 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d101      	bne.n	800d5ee <HAL_ADC_Start+0x26>
 800d5ea:	2302      	movs	r3, #2
 800d5ec:	e02e      	b.n	800d64c <HAL_ADC_Start+0x84>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fa8a 	bl	800db10 <ADC_Enable>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800d600:	7bfb      	ldrb	r3, [r7, #15]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d11a      	bne.n	800d63c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d60a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d60e:	f023 0301 	bic.w	r3, r3, #1
 800d612:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	221c      	movs	r2, #28
 800d626:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4618      	mov	r0, r3
 800d636:	f7ff fdfa 	bl	800d22e <LL_ADC_REG_StartConversion>
 800d63a:	e006      	b.n	800d64a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800d644:	e001      	b.n	800d64a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800d646:	2302      	movs	r3, #2
 800d648:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800d64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d662:	2b01      	cmp	r3, #1
 800d664:	d101      	bne.n	800d66a <HAL_ADC_Stop+0x16>
 800d666:	2302      	movs	r3, #2
 800d668:	e022      	b.n	800d6b0 <HAL_ADC_Stop+0x5c>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fa07 	bl	800da86 <ADC_ConversionStop>
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d111      	bne.n	800d6a6 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 faca 	bl	800dc1c <ADC_Disable>
 800d688:	4603      	mov	r3, r0
 800d68a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d109      	bne.n	800d6a6 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d69a:	f023 0301 	bic.w	r3, r3, #1
 800d69e:	f043 0201 	orr.w	r2, r3, #1
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800d6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3710      	adds	r7, #16
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	695b      	ldr	r3, [r3, #20]
 800d6c6:	2b08      	cmp	r3, #8
 800d6c8:	d102      	bne.n	800d6d0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800d6ca:	2308      	movs	r3, #8
 800d6cc:	60fb      	str	r3, [r7, #12]
 800d6ce:	e010      	b.n	800d6f2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	f003 0301 	and.w	r3, r3, #1
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d007      	beq.n	800d6ee <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6e2:	f043 0220 	orr.w	r2, r3, #32
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e077      	b.n	800d7de <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800d6ee:	2304      	movs	r3, #4
 800d6f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800d6f2:	f7ff fc17 	bl	800cf24 <HAL_GetTick>
 800d6f6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800d6f8:	e021      	b.n	800d73e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d700:	d01d      	beq.n	800d73e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800d702:	f7ff fc0f 	bl	800cf24 <HAL_GetTick>
 800d706:	4602      	mov	r2, r0
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	683a      	ldr	r2, [r7, #0]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d302      	bcc.n	800d718 <HAL_ADC_PollForConversion+0x60>
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d112      	bne.n	800d73e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	4013      	ands	r3, r2
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10b      	bne.n	800d73e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d72a:	f043 0204 	orr.w	r2, r3, #4
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800d73a:	2303      	movs	r3, #3
 800d73c:	e04f      	b.n	800d7de <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	4013      	ands	r3, r2
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d0d6      	beq.n	800d6fa <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d750:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff fc82 	bl	800d066 <LL_ADC_REG_IsTriggerSourceSWStart>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d031      	beq.n	800d7cc <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	7e9b      	ldrb	r3, [r3, #26]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d12d      	bne.n	800d7cc <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f003 0308 	and.w	r3, r3, #8
 800d77a:	2b08      	cmp	r3, #8
 800d77c:	d126      	bne.n	800d7cc <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4618      	mov	r0, r3
 800d784:	f7ff fd79 	bl	800d27a <LL_ADC_REG_IsConversionOngoing>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d112      	bne.n	800d7b4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	685a      	ldr	r2, [r3, #4]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f022 020c 	bic.w	r2, r2, #12
 800d79c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7a6:	f023 0301 	bic.w	r3, r3, #1
 800d7aa:	f043 0201 	orr.w	r2, r3, #1
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	659a      	str	r2, [r3, #88]	; 0x58
 800d7b2:	e00b      	b.n	800d7cc <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7b8:	f043 0220 	orr.w	r2, r3, #32
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7c4:	f043 0201 	orr.w	r2, r3, #1
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	7e1b      	ldrb	r3, [r3, #24]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d103      	bne.n	800d7dc <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	220c      	movs	r2, #12
 800d7da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3710      	adds	r7, #16
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800d7e6:	b480      	push	{r7}
 800d7e8:	b083      	sub	sp, #12
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	370c      	adds	r7, #12
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bc80      	pop	{r7}
 800d7fc:	4770      	bx	lr
	...

0800d800 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d80a:	2300      	movs	r3, #0
 800d80c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800d80e:	2300      	movs	r3, #0
 800d810:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	691b      	ldr	r3, [r3, #16]
 800d816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d820:	2b01      	cmp	r3, #1
 800d822:	d101      	bne.n	800d828 <HAL_ADC_ConfigChannel+0x28>
 800d824:	2302      	movs	r3, #2
 800d826:	e110      	b.n	800da4a <HAL_ADC_ConfigChannel+0x24a>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4618      	mov	r0, r3
 800d836:	f7ff fd20 	bl	800d27a <LL_ADC_REG_IsConversionOngoing>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f040 80f7 	bne.w	800da30 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	2b02      	cmp	r3, #2
 800d848:	f000 80b1 	beq.w	800d9ae <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d854:	d004      	beq.n	800d860 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d85a:	4a7e      	ldr	r2, [pc, #504]	; (800da54 <HAL_ADC_ConfigChannel+0x254>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d108      	bne.n	800d872 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4619      	mov	r1, r3
 800d86a:	4610      	mov	r0, r2
 800d86c:	f7ff fc2e 	bl	800d0cc <LL_ADC_REG_SetSequencerChAdd>
 800d870:	e041      	b.n	800d8f6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	f003 031f 	and.w	r3, r3, #31
 800d87e:	210f      	movs	r1, #15
 800d880:	fa01 f303 	lsl.w	r3, r1, r3
 800d884:	43db      	mvns	r3, r3
 800d886:	401a      	ands	r2, r3
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d890:	2b00      	cmp	r3, #0
 800d892:	d105      	bne.n	800d8a0 <HAL_ADC_ConfigChannel+0xa0>
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	0e9b      	lsrs	r3, r3, #26
 800d89a:	f003 031f 	and.w	r3, r3, #31
 800d89e:	e011      	b.n	800d8c4 <HAL_ADC_ConfigChannel+0xc4>
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	fa93 f3a3 	rbit	r3, r3
 800d8ac:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800d8b8:	2320      	movs	r3, #32
 800d8ba:	e003      	b.n	800d8c4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	fab3 f383 	clz	r3, r3
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6849      	ldr	r1, [r1, #4]
 800d8c8:	f001 011f 	and.w	r1, r1, #31
 800d8cc:	408b      	lsls	r3, r1
 800d8ce:	431a      	orrs	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	089b      	lsrs	r3, r3, #2
 800d8da:	1c5a      	adds	r2, r3, #1
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	69db      	ldr	r3, [r3, #28]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d808      	bhi.n	800d8f6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6818      	ldr	r0, [r3, #0]
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	6859      	ldr	r1, [r3, #4]
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	f7ff fbca 	bl	800d08a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6818      	ldr	r0, [r3, #0]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	6819      	ldr	r1, [r3, #0]
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	461a      	mov	r2, r3
 800d904:	f7ff fc07 	bl	800d116 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f280 8097 	bge.w	800da40 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d912:	4851      	ldr	r0, [pc, #324]	; (800da58 <HAL_ADC_ConfigChannel+0x258>)
 800d914:	f7ff fb64 	bl	800cfe0 <LL_ADC_GetCommonPathInternalCh>
 800d918:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a4f      	ldr	r2, [pc, #316]	; (800da5c <HAL_ADC_ConfigChannel+0x25c>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d120      	bne.n	800d966 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d11b      	bne.n	800d966 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d934:	4619      	mov	r1, r3
 800d936:	4848      	ldr	r0, [pc, #288]	; (800da58 <HAL_ADC_ConfigChannel+0x258>)
 800d938:	f7ff fb40 	bl	800cfbc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d93c:	4b48      	ldr	r3, [pc, #288]	; (800da60 <HAL_ADC_ConfigChannel+0x260>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	099b      	lsrs	r3, r3, #6
 800d942:	4a48      	ldr	r2, [pc, #288]	; (800da64 <HAL_ADC_ConfigChannel+0x264>)
 800d944:	fba2 2303 	umull	r2, r3, r2, r3
 800d948:	099b      	lsrs	r3, r3, #6
 800d94a:	1c5a      	adds	r2, r3, #1
 800d94c:	4613      	mov	r3, r2
 800d94e:	005b      	lsls	r3, r3, #1
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800d956:	e002      	b.n	800d95e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	3b01      	subs	r3, #1
 800d95c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d1f9      	bne.n	800d958 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d964:	e06c      	b.n	800da40 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a3f      	ldr	r2, [pc, #252]	; (800da68 <HAL_ADC_ConfigChannel+0x268>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d10c      	bne.n	800d98a <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d976:	2b00      	cmp	r3, #0
 800d978:	d107      	bne.n	800d98a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d980:	4619      	mov	r1, r3
 800d982:	4835      	ldr	r0, [pc, #212]	; (800da58 <HAL_ADC_ConfigChannel+0x258>)
 800d984:	f7ff fb1a 	bl	800cfbc <LL_ADC_SetCommonPathInternalCh>
 800d988:	e05a      	b.n	800da40 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a37      	ldr	r2, [pc, #220]	; (800da6c <HAL_ADC_ConfigChannel+0x26c>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d155      	bne.n	800da40 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800d994:	69bb      	ldr	r3, [r7, #24]
 800d996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d150      	bne.n	800da40 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	482c      	ldr	r0, [pc, #176]	; (800da58 <HAL_ADC_ConfigChannel+0x258>)
 800d9a8:	f7ff fb08 	bl	800cfbc <LL_ADC_SetCommonPathInternalCh>
 800d9ac:	e048      	b.n	800da40 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9b6:	d004      	beq.n	800d9c2 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d9bc:	4a25      	ldr	r2, [pc, #148]	; (800da54 <HAL_ADC_ConfigChannel+0x254>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d107      	bne.n	800d9d2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	4610      	mov	r0, r2
 800d9ce:	f7ff fb8f 	bl	800d0f0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	da32      	bge.n	800da40 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d9da:	481f      	ldr	r0, [pc, #124]	; (800da58 <HAL_ADC_ConfigChannel+0x258>)
 800d9dc:	f7ff fb00 	bl	800cfe0 <LL_ADC_GetCommonPathInternalCh>
 800d9e0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a1d      	ldr	r2, [pc, #116]	; (800da5c <HAL_ADC_ConfigChannel+0x25c>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d107      	bne.n	800d9fc <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	4818      	ldr	r0, [pc, #96]	; (800da58 <HAL_ADC_ConfigChannel+0x258>)
 800d9f6:	f7ff fae1 	bl	800cfbc <LL_ADC_SetCommonPathInternalCh>
 800d9fa:	e021      	b.n	800da40 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a19      	ldr	r2, [pc, #100]	; (800da68 <HAL_ADC_ConfigChannel+0x268>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d107      	bne.n	800da16 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da0c:	4619      	mov	r1, r3
 800da0e:	4812      	ldr	r0, [pc, #72]	; (800da58 <HAL_ADC_ConfigChannel+0x258>)
 800da10:	f7ff fad4 	bl	800cfbc <LL_ADC_SetCommonPathInternalCh>
 800da14:	e014      	b.n	800da40 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a14      	ldr	r2, [pc, #80]	; (800da6c <HAL_ADC_ConfigChannel+0x26c>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d10f      	bne.n	800da40 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800da26:	4619      	mov	r1, r3
 800da28:	480b      	ldr	r0, [pc, #44]	; (800da58 <HAL_ADC_ConfigChannel+0x258>)
 800da2a:	f7ff fac7 	bl	800cfbc <LL_ADC_SetCommonPathInternalCh>
 800da2e:	e007      	b.n	800da40 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da34:	f043 0220 	orr.w	r2, r3, #32
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800da3c:	2301      	movs	r3, #1
 800da3e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800da48:	7ffb      	ldrb	r3, [r7, #31]
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3720      	adds	r7, #32
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	80000004 	.word	0x80000004
 800da58:	40012708 	.word	0x40012708
 800da5c:	b0001000 	.word	0xb0001000
 800da60:	20000080 	.word	0x20000080
 800da64:	053e2d63 	.word	0x053e2d63
 800da68:	b8004000 	.word	0xb8004000
 800da6c:	b4002000 	.word	0xb4002000

0800da70 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	bc80      	pop	{r7}
 800da84:	4770      	bx	lr

0800da86 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800da86:	b580      	push	{r7, lr}
 800da88:	b084      	sub	sp, #16
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fbf1 	bl	800d27a <LL_ADC_REG_IsConversionOngoing>
 800da98:	4603      	mov	r3, r0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d033      	beq.n	800db06 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7ff fbb1 	bl	800d20a <LL_ADC_IsDisableOngoing>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d104      	bne.n	800dab8 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7ff fbce 	bl	800d254 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800dab8:	f7ff fa34 	bl	800cf24 <HAL_GetTick>
 800dabc:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800dabe:	e01b      	b.n	800daf8 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800dac0:	f7ff fa30 	bl	800cf24 <HAL_GetTick>
 800dac4:	4602      	mov	r2, r0
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d914      	bls.n	800daf8 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	f003 0304 	and.w	r3, r3, #4
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d00d      	beq.n	800daf8 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dae0:	f043 0210 	orr.w	r2, r3, #16
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daec:	f043 0201 	orr.w	r2, r3, #1
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	e007      	b.n	800db08 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	f003 0304 	and.w	r3, r3, #4
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1dc      	bne.n	800dac0 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800db18:	2300      	movs	r3, #0
 800db1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff fb60 	bl	800d1e6 <LL_ADC_IsEnabled>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d169      	bne.n	800dc00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	689a      	ldr	r2, [r3, #8]
 800db32:	4b36      	ldr	r3, [pc, #216]	; (800dc0c <ADC_Enable+0xfc>)
 800db34:	4013      	ands	r3, r2
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00d      	beq.n	800db56 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db3e:	f043 0210 	orr.w	r2, r3, #16
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db4a:	f043 0201 	orr.w	r2, r3, #1
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800db52:	2301      	movs	r3, #1
 800db54:	e055      	b.n	800dc02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff fb1d 	bl	800d19a <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800db60:	482b      	ldr	r0, [pc, #172]	; (800dc10 <ADC_Enable+0x100>)
 800db62:	f7ff fa3d 	bl	800cfe0 <LL_ADC_GetCommonPathInternalCh>
 800db66:	4603      	mov	r3, r0
 800db68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00f      	beq.n	800db90 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800db70:	4b28      	ldr	r3, [pc, #160]	; (800dc14 <ADC_Enable+0x104>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	099b      	lsrs	r3, r3, #6
 800db76:	4a28      	ldr	r2, [pc, #160]	; (800dc18 <ADC_Enable+0x108>)
 800db78:	fba2 2303 	umull	r2, r3, r2, r3
 800db7c:	099b      	lsrs	r3, r3, #6
 800db7e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800db80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800db82:	e002      	b.n	800db8a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	3b01      	subs	r3, #1
 800db88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d1f9      	bne.n	800db84 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	7e5b      	ldrb	r3, [r3, #25]
 800db94:	2b01      	cmp	r3, #1
 800db96:	d033      	beq.n	800dc00 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800db98:	f7ff f9c4 	bl	800cf24 <HAL_GetTick>
 800db9c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800db9e:	e028      	b.n	800dbf2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7ff fb1e 	bl	800d1e6 <LL_ADC_IsEnabled>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d104      	bne.n	800dbba <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7ff faf0 	bl	800d19a <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800dbba:	f7ff f9b3 	bl	800cf24 <HAL_GetTick>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	d914      	bls.n	800dbf2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f003 0301 	and.w	r3, r3, #1
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d00d      	beq.n	800dbf2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbda:	f043 0210 	orr.w	r2, r3, #16
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbe6:	f043 0201 	orr.w	r2, r3, #1
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e007      	b.n	800dc02 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f003 0301 	and.w	r3, r3, #1
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d1cf      	bne.n	800dba0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	80000017 	.word	0x80000017
 800dc10:	40012708 	.word	0x40012708
 800dc14:	20000080 	.word	0x20000080
 800dc18:	053e2d63 	.word	0x053e2d63

0800dc1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7ff faee 	bl	800d20a <LL_ADC_IsDisableOngoing>
 800dc2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7ff fad6 	bl	800d1e6 <LL_ADC_IsEnabled>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d047      	beq.n	800dcd0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d144      	bne.n	800dcd0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	f003 0305 	and.w	r3, r3, #5
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d10c      	bne.n	800dc6e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff fab1 	bl	800d1c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2203      	movs	r2, #3
 800dc64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800dc66:	f7ff f95d 	bl	800cf24 <HAL_GetTick>
 800dc6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dc6c:	e029      	b.n	800dcc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc72:	f043 0210 	orr.w	r2, r3, #16
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc7e:	f043 0201 	orr.w	r2, r3, #1
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e023      	b.n	800dcd2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800dc8a:	f7ff f94b 	bl	800cf24 <HAL_GetTick>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d914      	bls.n	800dcc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	f003 0301 	and.w	r3, r3, #1
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00d      	beq.n	800dcc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcaa:	f043 0210 	orr.w	r2, r3, #16
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcb6:	f043 0201 	orr.w	r2, r3, #1
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e007      	b.n	800dcd2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1dc      	bne.n	800dc8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <LL_ADC_SetCalibrationFactor>:
{
 800dcda:	b480      	push	{r7}
 800dcdc:	b083      	sub	sp, #12
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dcea:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	431a      	orrs	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 800dcf8:	bf00      	nop
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bc80      	pop	{r7}
 800dd00:	4770      	bx	lr

0800dd02 <LL_ADC_GetCalibrationFactor>:
{
 800dd02:	b480      	push	{r7}
 800dd04:	b083      	sub	sp, #12
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dd10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	370c      	adds	r7, #12
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bc80      	pop	{r7}
 800dd1c:	4770      	bx	lr

0800dd1e <LL_ADC_Enable>:
{
 800dd1e:	b480      	push	{r7}
 800dd20:	b083      	sub	sp, #12
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	689b      	ldr	r3, [r3, #8]
 800dd2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd2e:	f023 0317 	bic.w	r3, r3, #23
 800dd32:	f043 0201 	orr.w	r2, r3, #1
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	609a      	str	r2, [r3, #8]
}
 800dd3a:	bf00      	nop
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bc80      	pop	{r7}
 800dd42:	4770      	bx	lr

0800dd44 <LL_ADC_Disable>:
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd54:	f023 0317 	bic.w	r3, r3, #23
 800dd58:	f043 0202 	orr.w	r2, r3, #2
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	609a      	str	r2, [r3, #8]
}
 800dd60:	bf00      	nop
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bc80      	pop	{r7}
 800dd68:	4770      	bx	lr

0800dd6a <LL_ADC_IsEnabled>:
{
 800dd6a:	b480      	push	{r7}
 800dd6c:	b083      	sub	sp, #12
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	f003 0301 	and.w	r3, r3, #1
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d101      	bne.n	800dd82 <LL_ADC_IsEnabled+0x18>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e000      	b.n	800dd84 <LL_ADC_IsEnabled+0x1a>
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bc80      	pop	{r7}
 800dd8c:	4770      	bx	lr

0800dd8e <LL_ADC_StartCalibration>:
{
 800dd8e:	b480      	push	{r7}
 800dd90:	b083      	sub	sp, #12
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd9e:	f023 0317 	bic.w	r3, r3, #23
 800dda2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	609a      	str	r2, [r3, #8]
}
 800ddaa:	bf00      	nop
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bc80      	pop	{r7}
 800ddb2:	4770      	bx	lr

0800ddb4 <LL_ADC_IsCalibrationOnGoing>:
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddc8:	d101      	bne.n	800ddce <LL_ADC_IsCalibrationOnGoing+0x1a>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e000      	b.n	800ddd0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bc80      	pop	{r7}
 800ddd8:	4770      	bx	lr

0800ddda <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b088      	sub	sp, #32
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800dde2:	2300      	movs	r3, #0
 800dde4:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d101      	bne.n	800ddf8 <HAL_ADCEx_Calibration_Start+0x1e>
 800ddf4:	2302      	movs	r3, #2
 800ddf6:	e0b9      	b.n	800df6c <HAL_ADCEx_Calibration_Start+0x192>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff ff0b 	bl	800dc1c <ADC_Disable>
 800de06:	4603      	mov	r3, r0
 800de08:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4618      	mov	r0, r3
 800de10:	f7ff ffab 	bl	800dd6a <LL_ADC_IsEnabled>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	f040 809d 	bne.w	800df56 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800de24:	f043 0202 	orr.w	r2, r3, #2
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68da      	ldr	r2, [r3, #12]
 800de32:	f248 0303 	movw	r3, #32771	; 0x8003
 800de36:	4013      	ands	r3, r2
 800de38:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	6812      	ldr	r2, [r2, #0]
 800de44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de48:	f023 0303 	bic.w	r3, r3, #3
 800de4c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800de4e:	2300      	movs	r3, #0
 800de50:	61fb      	str	r3, [r7, #28]
 800de52:	e02e      	b.n	800deb2 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff ff98 	bl	800dd8e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800de5e:	e014      	b.n	800de8a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	3301      	adds	r3, #1
 800de64:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800de6c:	d30d      	bcc.n	800de8a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de72:	f023 0312 	bic.w	r3, r3, #18
 800de76:	f043 0210 	orr.w	r2, r3, #16
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800de86:	2301      	movs	r3, #1
 800de88:	e070      	b.n	800df6c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4618      	mov	r0, r3
 800de90:	f7ff ff90 	bl	800ddb4 <LL_ADC_IsCalibrationOnGoing>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1e2      	bne.n	800de60 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7ff ff2f 	bl	800dd02 <LL_ADC_GetCalibrationFactor>
 800dea4:	4602      	mov	r2, r0
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	4413      	add	r3, r2
 800deaa:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	3301      	adds	r3, #1
 800deb0:	61fb      	str	r3, [r7, #28]
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	2b07      	cmp	r3, #7
 800deb6:	d9cd      	bls.n	800de54 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800deb8:	69ba      	ldr	r2, [r7, #24]
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dec0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7ff ff29 	bl	800dd1e <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	69b9      	ldr	r1, [r7, #24]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7ff ff01 	bl	800dcda <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4618      	mov	r0, r3
 800dede:	f7ff ff31 	bl	800dd44 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800dee2:	f7ff f81f 	bl	800cf24 <HAL_GetTick>
 800dee6:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800dee8:	e01c      	b.n	800df24 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800deea:	f7ff f81b 	bl	800cf24 <HAL_GetTick>
 800deee:	4602      	mov	r2, r0
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	1ad3      	subs	r3, r2, r3
 800def4:	2b02      	cmp	r3, #2
 800def6:	d915      	bls.n	800df24 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4618      	mov	r0, r3
 800defe:	f7ff ff34 	bl	800dd6a <LL_ADC_IsEnabled>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00d      	beq.n	800df24 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df0c:	f043 0210 	orr.w	r2, r3, #16
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df18:	f043 0201 	orr.w	r2, r3, #1
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800df20:	2301      	movs	r3, #1
 800df22:	e023      	b.n	800df6c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4618      	mov	r0, r3
 800df2a:	f7ff ff1e 	bl	800dd6a <LL_ADC_IsEnabled>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1da      	bne.n	800deea <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68d9      	ldr	r1, [r3, #12]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	693a      	ldr	r2, [r7, #16]
 800df40:	430a      	orrs	r2, r1
 800df42:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df48:	f023 0303 	bic.w	r3, r3, #3
 800df4c:	f043 0201 	orr.w	r2, r3, #1
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	659a      	str	r2, [r3, #88]	; 0x58
 800df54:	e005      	b.n	800df62 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df5a:	f043 0210 	orr.w	r2, r3, #16
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3720      	adds	r7, #32
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <__NVIC_SetPriorityGrouping>:
{
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f003 0307 	and.w	r3, r3, #7
 800df82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800df84:	4b0c      	ldr	r3, [pc, #48]	; (800dfb8 <__NVIC_SetPriorityGrouping+0x44>)
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800df90:	4013      	ands	r3, r2
 800df92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800df9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dfa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dfa6:	4a04      	ldr	r2, [pc, #16]	; (800dfb8 <__NVIC_SetPriorityGrouping+0x44>)
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	60d3      	str	r3, [r2, #12]
}
 800dfac:	bf00      	nop
 800dfae:	3714      	adds	r7, #20
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bc80      	pop	{r7}
 800dfb4:	4770      	bx	lr
 800dfb6:	bf00      	nop
 800dfb8:	e000ed00 	.word	0xe000ed00

0800dfbc <__NVIC_GetPriorityGrouping>:
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dfc0:	4b04      	ldr	r3, [pc, #16]	; (800dfd4 <__NVIC_GetPriorityGrouping+0x18>)
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	0a1b      	lsrs	r3, r3, #8
 800dfc6:	f003 0307 	and.w	r3, r3, #7
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bc80      	pop	{r7}
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	e000ed00 	.word	0xe000ed00

0800dfd8 <__NVIC_EnableIRQ>:
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	4603      	mov	r3, r0
 800dfe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dfe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	db0b      	blt.n	800e002 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dfea:	79fb      	ldrb	r3, [r7, #7]
 800dfec:	f003 021f 	and.w	r2, r3, #31
 800dff0:	4906      	ldr	r1, [pc, #24]	; (800e00c <__NVIC_EnableIRQ+0x34>)
 800dff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dff6:	095b      	lsrs	r3, r3, #5
 800dff8:	2001      	movs	r0, #1
 800dffa:	fa00 f202 	lsl.w	r2, r0, r2
 800dffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e002:	bf00      	nop
 800e004:	370c      	adds	r7, #12
 800e006:	46bd      	mov	sp, r7
 800e008:	bc80      	pop	{r7}
 800e00a:	4770      	bx	lr
 800e00c:	e000e100 	.word	0xe000e100

0800e010 <__NVIC_DisableIRQ>:
{
 800e010:	b480      	push	{r7}
 800e012:	b083      	sub	sp, #12
 800e014:	af00      	add	r7, sp, #0
 800e016:	4603      	mov	r3, r0
 800e018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e01a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	db12      	blt.n	800e048 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e022:	79fb      	ldrb	r3, [r7, #7]
 800e024:	f003 021f 	and.w	r2, r3, #31
 800e028:	490a      	ldr	r1, [pc, #40]	; (800e054 <__NVIC_DisableIRQ+0x44>)
 800e02a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e02e:	095b      	lsrs	r3, r3, #5
 800e030:	2001      	movs	r0, #1
 800e032:	fa00 f202 	lsl.w	r2, r0, r2
 800e036:	3320      	adds	r3, #32
 800e038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800e03c:	f3bf 8f4f 	dsb	sy
}
 800e040:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e042:	f3bf 8f6f 	isb	sy
}
 800e046:	bf00      	nop
}
 800e048:	bf00      	nop
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bc80      	pop	{r7}
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	e000e100 	.word	0xe000e100

0800e058 <__NVIC_SetPriority>:
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	4603      	mov	r3, r0
 800e060:	6039      	str	r1, [r7, #0]
 800e062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	db0a      	blt.n	800e082 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	490c      	ldr	r1, [pc, #48]	; (800e0a4 <__NVIC_SetPriority+0x4c>)
 800e072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e076:	0112      	lsls	r2, r2, #4
 800e078:	b2d2      	uxtb	r2, r2
 800e07a:	440b      	add	r3, r1
 800e07c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e080:	e00a      	b.n	800e098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	b2da      	uxtb	r2, r3
 800e086:	4908      	ldr	r1, [pc, #32]	; (800e0a8 <__NVIC_SetPriority+0x50>)
 800e088:	79fb      	ldrb	r3, [r7, #7]
 800e08a:	f003 030f 	and.w	r3, r3, #15
 800e08e:	3b04      	subs	r3, #4
 800e090:	0112      	lsls	r2, r2, #4
 800e092:	b2d2      	uxtb	r2, r2
 800e094:	440b      	add	r3, r1
 800e096:	761a      	strb	r2, [r3, #24]
}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bc80      	pop	{r7}
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	e000e100 	.word	0xe000e100
 800e0a8:	e000ed00 	.word	0xe000ed00

0800e0ac <NVIC_EncodePriority>:
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b089      	sub	sp, #36	; 0x24
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f003 0307 	and.w	r3, r3, #7
 800e0be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	f1c3 0307 	rsb	r3, r3, #7
 800e0c6:	2b04      	cmp	r3, #4
 800e0c8:	bf28      	it	cs
 800e0ca:	2304      	movcs	r3, #4
 800e0cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	3304      	adds	r3, #4
 800e0d2:	2b06      	cmp	r3, #6
 800e0d4:	d902      	bls.n	800e0dc <NVIC_EncodePriority+0x30>
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	3b03      	subs	r3, #3
 800e0da:	e000      	b.n	800e0de <NVIC_EncodePriority+0x32>
 800e0dc:	2300      	movs	r3, #0
 800e0de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e4:	69bb      	ldr	r3, [r7, #24]
 800e0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ea:	43da      	mvns	r2, r3
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	401a      	ands	r2, r3
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e0f4:	f04f 31ff 	mov.w	r1, #4294967295
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800e0fe:	43d9      	mvns	r1, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e104:	4313      	orrs	r3, r2
}
 800e106:	4618      	mov	r0, r3
 800e108:	3724      	adds	r7, #36	; 0x24
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bc80      	pop	{r7}
 800e10e:	4770      	bx	lr

0800e110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f7ff ff2b 	bl	800df74 <__NVIC_SetPriorityGrouping>
}
 800e11e:	bf00      	nop
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b086      	sub	sp, #24
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	4603      	mov	r3, r0
 800e12e:	60b9      	str	r1, [r7, #8]
 800e130:	607a      	str	r2, [r7, #4]
 800e132:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800e134:	f7ff ff42 	bl	800dfbc <__NVIC_GetPriorityGrouping>
 800e138:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	68b9      	ldr	r1, [r7, #8]
 800e13e:	6978      	ldr	r0, [r7, #20]
 800e140:	f7ff ffb4 	bl	800e0ac <NVIC_EncodePriority>
 800e144:	4602      	mov	r2, r0
 800e146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e14a:	4611      	mov	r1, r2
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7ff ff83 	bl	800e058 <__NVIC_SetPriority>
}
 800e152:	bf00      	nop
 800e154:	3718      	adds	r7, #24
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b082      	sub	sp, #8
 800e15e:	af00      	add	r7, sp, #0
 800e160:	4603      	mov	r3, r0
 800e162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff ff35 	bl	800dfd8 <__NVIC_EnableIRQ>
}
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b082      	sub	sp, #8
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	4603      	mov	r3, r0
 800e17e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800e180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e184:	4618      	mov	r0, r3
 800e186:	f7ff ff43 	bl	800e010 <__NVIC_DisableIRQ>
}
 800e18a:	bf00      	nop
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e192:	b480      	push	{r7}
 800e194:	b083      	sub	sp, #12
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d101      	bne.n	800e1a4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e04f      	b.n	800e244 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d008      	beq.n	800e1c2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2204      	movs	r2, #4
 800e1b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e040      	b.n	800e244 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f022 020e 	bic.w	r2, r2, #14
 800e1d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e1e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f022 0201 	bic.w	r2, r2, #1
 800e1f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1f6:	f003 021c 	and.w	r2, r3, #28
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1fe:	2101      	movs	r1, #1
 800e200:	fa01 f202 	lsl.w	r2, r1, r2
 800e204:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e20e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00c      	beq.n	800e232 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e226:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e230:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2201      	movs	r2, #1
 800e236:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	bc80      	pop	{r7}
 800e24c:	4770      	bx	lr

0800e24e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e24e:	b580      	push	{r7, lr}
 800e250:	b084      	sub	sp, #16
 800e252:	af00      	add	r7, sp, #0
 800e254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e256:	2300      	movs	r3, #0
 800e258:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b02      	cmp	r3, #2
 800e264:	d005      	beq.n	800e272 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2204      	movs	r2, #4
 800e26a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	73fb      	strb	r3, [r7, #15]
 800e270:	e047      	b.n	800e302 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f022 020e 	bic.w	r2, r2, #14
 800e280:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681a      	ldr	r2, [r3, #0]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f022 0201 	bic.w	r2, r2, #1
 800e290:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e29c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e2a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2a6:	f003 021c 	and.w	r2, r3, #28
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ae:	2101      	movs	r1, #1
 800e2b0:	fa01 f202 	lsl.w	r2, r1, r2
 800e2b4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e2be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00c      	beq.n	800e2e2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e2d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e2e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d003      	beq.n	800e302 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	4798      	blx	r3
    }
  }
  return status;
 800e302:	7bfb      	ldrb	r3, [r7, #15]
}
 800e304:	4618      	mov	r0, r3
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b086      	sub	sp, #24
 800e310:	af00      	add	r7, sp, #0
 800e312:	60f8      	str	r0, [r7, #12]
 800e314:	60b9      	str	r1, [r7, #8]
 800e316:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e31a:	4b1c      	ldr	r3, [pc, #112]	; (800e38c <HAL_FLASH_Program+0x80>)
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d101      	bne.n	800e326 <HAL_FLASH_Program+0x1a>
 800e322:	2302      	movs	r3, #2
 800e324:	e02d      	b.n	800e382 <HAL_FLASH_Program+0x76>
 800e326:	4b19      	ldr	r3, [pc, #100]	; (800e38c <HAL_FLASH_Program+0x80>)
 800e328:	2201      	movs	r2, #1
 800e32a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e32c:	4b17      	ldr	r3, [pc, #92]	; (800e38c <HAL_FLASH_Program+0x80>)
 800e32e:	2200      	movs	r2, #0
 800e330:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e336:	f000 f869 	bl	800e40c <FLASH_WaitForLastOperation>
 800e33a:	4603      	mov	r3, r0
 800e33c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800e33e:	7dfb      	ldrb	r3, [r7, #23]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d11a      	bne.n	800e37a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b01      	cmp	r3, #1
 800e348:	d105      	bne.n	800e356 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800e34a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e34e:	68b8      	ldr	r0, [r7, #8]
 800e350:	f000 f8be 	bl	800e4d0 <FLASH_Program_DoubleWord>
 800e354:	e004      	b.n	800e360 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	4619      	mov	r1, r3
 800e35a:	68b8      	ldr	r0, [r7, #8]
 800e35c:	f000 f8de 	bl	800e51c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e364:	f000 f852 	bl	800e40c <FLASH_WaitForLastOperation>
 800e368:	4603      	mov	r3, r0
 800e36a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800e36c:	4b08      	ldr	r3, [pc, #32]	; (800e390 <HAL_FLASH_Program+0x84>)
 800e36e:	695a      	ldr	r2, [r3, #20]
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	43db      	mvns	r3, r3
 800e374:	4906      	ldr	r1, [pc, #24]	; (800e390 <HAL_FLASH_Program+0x84>)
 800e376:	4013      	ands	r3, r2
 800e378:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e37a:	4b04      	ldr	r3, [pc, #16]	; (800e38c <HAL_FLASH_Program+0x80>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800e380:	7dfb      	ldrb	r3, [r7, #23]
}
 800e382:	4618      	mov	r0, r3
 800e384:	3718      	adds	r7, #24
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop
 800e38c:	200020b0 	.word	0x200020b0
 800e390:	58004000 	.word	0x58004000

0800e394 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e39a:	2300      	movs	r3, #0
 800e39c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e39e:	4b0b      	ldr	r3, [pc, #44]	; (800e3cc <HAL_FLASH_Unlock+0x38>)
 800e3a0:	695b      	ldr	r3, [r3, #20]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	da0b      	bge.n	800e3be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e3a6:	4b09      	ldr	r3, [pc, #36]	; (800e3cc <HAL_FLASH_Unlock+0x38>)
 800e3a8:	4a09      	ldr	r2, [pc, #36]	; (800e3d0 <HAL_FLASH_Unlock+0x3c>)
 800e3aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e3ac:	4b07      	ldr	r3, [pc, #28]	; (800e3cc <HAL_FLASH_Unlock+0x38>)
 800e3ae:	4a09      	ldr	r2, [pc, #36]	; (800e3d4 <HAL_FLASH_Unlock+0x40>)
 800e3b0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e3b2:	4b06      	ldr	r3, [pc, #24]	; (800e3cc <HAL_FLASH_Unlock+0x38>)
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	da01      	bge.n	800e3be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e3be:	79fb      	ldrb	r3, [r7, #7]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bc80      	pop	{r7}
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop
 800e3cc:	58004000 	.word	0x58004000
 800e3d0:	45670123 	.word	0x45670123
 800e3d4:	cdef89ab 	.word	0xcdef89ab

0800e3d8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800e3e2:	4b09      	ldr	r3, [pc, #36]	; (800e408 <HAL_FLASH_Lock+0x30>)
 800e3e4:	695b      	ldr	r3, [r3, #20]
 800e3e6:	4a08      	ldr	r2, [pc, #32]	; (800e408 <HAL_FLASH_Lock+0x30>)
 800e3e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e3ec:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800e3ee:	4b06      	ldr	r3, [pc, #24]	; (800e408 <HAL_FLASH_Lock+0x30>)
 800e3f0:	695b      	ldr	r3, [r3, #20]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	db01      	blt.n	800e3fa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e3fa:	79fb      	ldrb	r3, [r7, #7]
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	370c      	adds	r7, #12
 800e400:	46bd      	mov	sp, r7
 800e402:	bc80      	pop	{r7}
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop
 800e408:	58004000 	.word	0x58004000

0800e40c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800e414:	f7fe fd86 	bl	800cf24 <HAL_GetTick>
 800e418:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e41a:	e009      	b.n	800e430 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e41c:	f7fe fd82 	bl	800cf24 <HAL_GetTick>
 800e420:	4602      	mov	r2, r0
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	1ad3      	subs	r3, r2, r3
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d801      	bhi.n	800e430 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800e42c:	2303      	movs	r3, #3
 800e42e:	e047      	b.n	800e4c0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e430:	4b25      	ldr	r3, [pc, #148]	; (800e4c8 <FLASH_WaitForLastOperation+0xbc>)
 800e432:	691b      	ldr	r3, [r3, #16]
 800e434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e43c:	d0ee      	beq.n	800e41c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800e43e:	4b22      	ldr	r3, [pc, #136]	; (800e4c8 <FLASH_WaitForLastOperation+0xbc>)
 800e440:	691b      	ldr	r3, [r3, #16]
 800e442:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d002      	beq.n	800e454 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e44e:	4b1e      	ldr	r3, [pc, #120]	; (800e4c8 <FLASH_WaitForLastOperation+0xbc>)
 800e450:	2201      	movs	r2, #1
 800e452:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800e454:	68ba      	ldr	r2, [r7, #8]
 800e456:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800e45a:	4013      	ands	r3, r2
 800e45c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e464:	2b00      	cmp	r3, #0
 800e466:	d007      	beq.n	800e478 <FLASH_WaitForLastOperation+0x6c>
 800e468:	4b17      	ldr	r3, [pc, #92]	; (800e4c8 <FLASH_WaitForLastOperation+0xbc>)
 800e46a:	699a      	ldr	r2, [r3, #24]
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e472:	4915      	ldr	r1, [pc, #84]	; (800e4c8 <FLASH_WaitForLastOperation+0xbc>)
 800e474:	4313      	orrs	r3, r2
 800e476:	618b      	str	r3, [r1, #24]
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d004      	beq.n	800e48c <FLASH_WaitForLastOperation+0x80>
 800e482:	4a11      	ldr	r2, [pc, #68]	; (800e4c8 <FLASH_WaitForLastOperation+0xbc>)
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e48a:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00e      	beq.n	800e4b0 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800e492:	4a0e      	ldr	r2, [pc, #56]	; (800e4cc <FLASH_WaitForLastOperation+0xc0>)
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800e498:	2301      	movs	r3, #1
 800e49a:	e011      	b.n	800e4c0 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e49c:	f7fe fd42 	bl	800cf24 <HAL_GetTick>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	1ad3      	subs	r3, r2, r3
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d801      	bhi.n	800e4b0 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 800e4ac:	2303      	movs	r3, #3
 800e4ae:	e007      	b.n	800e4c0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800e4b0:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <FLASH_WaitForLastOperation+0xbc>)
 800e4b2:	691b      	ldr	r3, [r3, #16]
 800e4b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e4bc:	d0ee      	beq.n	800e49c <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3710      	adds	r7, #16
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	58004000 	.word	0x58004000
 800e4cc:	200020b0 	.word	0x200020b0

0800e4d0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800e4dc:	4b0e      	ldr	r3, [pc, #56]	; (800e518 <FLASH_Program_DoubleWord+0x48>)
 800e4de:	695b      	ldr	r3, [r3, #20]
 800e4e0:	4a0d      	ldr	r2, [pc, #52]	; (800e518 <FLASH_Program_DoubleWord+0x48>)
 800e4e2:	f043 0301 	orr.w	r3, r3, #1
 800e4e6:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	683a      	ldr	r2, [r7, #0]
 800e4ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800e4ee:	f3bf 8f6f 	isb	sy
}
 800e4f2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800e4f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e4f8:	f04f 0200 	mov.w	r2, #0
 800e4fc:	f04f 0300 	mov.w	r3, #0
 800e500:	000a      	movs	r2, r1
 800e502:	2300      	movs	r3, #0
 800e504:	68f9      	ldr	r1, [r7, #12]
 800e506:	3104      	adds	r1, #4
 800e508:	4613      	mov	r3, r2
 800e50a:	600b      	str	r3, [r1, #0]
}
 800e50c:	bf00      	nop
 800e50e:	3714      	adds	r7, #20
 800e510:	46bd      	mov	sp, r7
 800e512:	bc80      	pop	{r7}
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	58004000 	.word	0x58004000

0800e51c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800e51c:	b480      	push	{r7}
 800e51e:	b089      	sub	sp, #36	; 0x24
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800e526:	2340      	movs	r3, #64	; 0x40
 800e528:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800e532:	4b18      	ldr	r3, [pc, #96]	; (800e594 <FLASH_Program_Fast+0x78>)
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	4a17      	ldr	r2, [pc, #92]	; (800e594 <FLASH_Program_Fast+0x78>)
 800e538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e53c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e53e:	f3ef 8310 	mrs	r3, PRIMASK
 800e542:	60fb      	str	r3, [r7, #12]
  return(result);
 800e544:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800e546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e548:	b672      	cpsid	i
}
 800e54a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	3304      	adds	r3, #4
 800e558:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	3304      	adds	r3, #4
 800e55e:	617b      	str	r3, [r7, #20]
    row_index--;
 800e560:	7ffb      	ldrb	r3, [r7, #31]
 800e562:	3b01      	subs	r3, #1
 800e564:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800e566:	7ffb      	ldrb	r3, [r7, #31]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1ef      	bne.n	800e54c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800e56c:	bf00      	nop
 800e56e:	4b09      	ldr	r3, [pc, #36]	; (800e594 <FLASH_Program_Fast+0x78>)
 800e570:	691b      	ldr	r3, [r3, #16]
 800e572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e57a:	d0f8      	beq.n	800e56e <FLASH_Program_Fast+0x52>
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	f383 8810 	msr	PRIMASK, r3
}
 800e586:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800e588:	bf00      	nop
 800e58a:	3724      	adds	r7, #36	; 0x24
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bc80      	pop	{r7}
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop
 800e594:	58004000 	.word	0x58004000

0800e598 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e5a2:	4b28      	ldr	r3, [pc, #160]	; (800e644 <HAL_FLASHEx_Erase+0xac>)
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d101      	bne.n	800e5ae <HAL_FLASHEx_Erase+0x16>
 800e5aa:	2302      	movs	r3, #2
 800e5ac:	e046      	b.n	800e63c <HAL_FLASHEx_Erase+0xa4>
 800e5ae:	4b25      	ldr	r3, [pc, #148]	; (800e644 <HAL_FLASHEx_Erase+0xac>)
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e5b4:	4b23      	ldr	r3, [pc, #140]	; (800e644 <HAL_FLASHEx_Erase+0xac>)
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e5ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e5be:	f7ff ff25 	bl	800e40c <FLASH_WaitForLastOperation>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e5c6:	7bfb      	ldrb	r3, [r7, #15]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d133      	bne.n	800e634 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b04      	cmp	r3, #4
 800e5d2:	d108      	bne.n	800e5e6 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 800e5d4:	f000 f838 	bl	800e648 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e5d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e5dc:	f7ff ff16 	bl	800e40c <FLASH_WaitForLastOperation>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	73fb      	strb	r3, [r7, #15]
 800e5e4:	e024      	b.n	800e630 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5ec:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	60bb      	str	r3, [r7, #8]
 800e5f4:	e012      	b.n	800e61c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800e5f6:	68b8      	ldr	r0, [r7, #8]
 800e5f8:	f000 f836 	bl	800e668 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e5fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e600:	f7ff ff04 	bl	800e40c <FLASH_WaitForLastOperation>
 800e604:	4603      	mov	r3, r0
 800e606:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800e608:	7bfb      	ldrb	r3, [r7, #15]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d003      	beq.n	800e616 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	68ba      	ldr	r2, [r7, #8]
 800e612:	601a      	str	r2, [r3, #0]
          break;
 800e614:	e00a      	b.n	800e62c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	3301      	adds	r3, #1
 800e61a:	60bb      	str	r3, [r7, #8]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	4413      	add	r3, r2
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d3e4      	bcc.n	800e5f6 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800e62c:	f000 f878 	bl	800e720 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e630:	f000 f832 	bl	800e698 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e634:	4b03      	ldr	r3, [pc, #12]	; (800e644 <HAL_FLASHEx_Erase+0xac>)
 800e636:	2200      	movs	r2, #0
 800e638:	701a      	strb	r2, [r3, #0]

  return status;
 800e63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3710      	adds	r7, #16
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	200020b0 	.word	0x200020b0

0800e648 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800e648:	b480      	push	{r7}
 800e64a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800e64c:	4b05      	ldr	r3, [pc, #20]	; (800e664 <FLASH_MassErase+0x1c>)
 800e64e:	695b      	ldr	r3, [r3, #20]
 800e650:	4a04      	ldr	r2, [pc, #16]	; (800e664 <FLASH_MassErase+0x1c>)
 800e652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e656:	f043 0304 	orr.w	r3, r3, #4
 800e65a:	6153      	str	r3, [r2, #20]
#endif
}
 800e65c:	bf00      	nop
 800e65e:	46bd      	mov	sp, r7
 800e660:	bc80      	pop	{r7}
 800e662:	4770      	bx	lr
 800e664:	58004000 	.word	0x58004000

0800e668 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800e670:	4b08      	ldr	r3, [pc, #32]	; (800e694 <FLASH_PageErase+0x2c>)
 800e672:	695b      	ldr	r3, [r3, #20]
 800e674:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	00db      	lsls	r3, r3, #3
 800e67c:	4313      	orrs	r3, r2
 800e67e:	4a05      	ldr	r2, [pc, #20]	; (800e694 <FLASH_PageErase+0x2c>)
 800e680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e684:	f043 0302 	orr.w	r3, r3, #2
 800e688:	6153      	str	r3, [r2, #20]
#endif
}
 800e68a:	bf00      	nop
 800e68c:	370c      	adds	r7, #12
 800e68e:	46bd      	mov	sp, r7
 800e690:	bc80      	pop	{r7}
 800e692:	4770      	bx	lr
 800e694:	58004000 	.word	0x58004000

0800e698 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800e698:	b480      	push	{r7}
 800e69a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800e69c:	4b1f      	ldr	r3, [pc, #124]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d117      	bne.n	800e6d8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e6a8:	4b1c      	ldr	r3, [pc, #112]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4a1b      	ldr	r2, [pc, #108]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e6b2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e6b4:	4b19      	ldr	r3, [pc, #100]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a18      	ldr	r2, [pc, #96]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e6be:	6013      	str	r3, [r2, #0]
 800e6c0:	4b16      	ldr	r3, [pc, #88]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a15      	ldr	r2, [pc, #84]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e6ca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e6cc:	4b13      	ldr	r3, [pc, #76]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a12      	ldr	r2, [pc, #72]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e6d6:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800e6d8:	4b10      	ldr	r3, [pc, #64]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d117      	bne.n	800e714 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e6e4:	4b0d      	ldr	r3, [pc, #52]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a0c      	ldr	r2, [pc, #48]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e6ee:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e6f0:	4b0a      	ldr	r3, [pc, #40]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a09      	ldr	r2, [pc, #36]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e6fa:	6013      	str	r3, [r2, #0]
 800e6fc:	4b07      	ldr	r3, [pc, #28]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a06      	ldr	r2, [pc, #24]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e706:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e708:	4b04      	ldr	r3, [pc, #16]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a03      	ldr	r2, [pc, #12]	; (800e71c <FLASH_FlushCaches+0x84>)
 800e70e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e712:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800e714:	bf00      	nop
 800e716:	46bd      	mov	sp, r7
 800e718:	bc80      	pop	{r7}
 800e71a:	4770      	bx	lr
 800e71c:	58004000 	.word	0x58004000

0800e720 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800e720:	b480      	push	{r7}
 800e722:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800e724:	4b05      	ldr	r3, [pc, #20]	; (800e73c <FLASH_AcknowledgePageErase+0x1c>)
 800e726:	695b      	ldr	r3, [r3, #20]
 800e728:	4a04      	ldr	r2, [pc, #16]	; (800e73c <FLASH_AcknowledgePageErase+0x1c>)
 800e72a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800e72e:	f023 0302 	bic.w	r3, r3, #2
 800e732:	6153      	str	r3, [r2, #20]
#endif
}
 800e734:	bf00      	nop
 800e736:	46bd      	mov	sp, r7
 800e738:	bc80      	pop	{r7}
 800e73a:	4770      	bx	lr
 800e73c:	58004000 	.word	0x58004000

0800e740 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e740:	b480      	push	{r7}
 800e742:	b087      	sub	sp, #28
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e74a:	2300      	movs	r3, #0
 800e74c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e74e:	e140      	b.n	800e9d2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	2101      	movs	r1, #1
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	fa01 f303 	lsl.w	r3, r1, r3
 800e75c:	4013      	ands	r3, r2
 800e75e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2b00      	cmp	r3, #0
 800e764:	f000 8132 	beq.w	800e9cc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	f003 0303 	and.w	r3, r3, #3
 800e770:	2b01      	cmp	r3, #1
 800e772:	d005      	beq.n	800e780 <HAL_GPIO_Init+0x40>
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	f003 0303 	and.w	r3, r3, #3
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	d130      	bne.n	800e7e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	689b      	ldr	r3, [r3, #8]
 800e784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	005b      	lsls	r3, r3, #1
 800e78a:	2203      	movs	r2, #3
 800e78c:	fa02 f303 	lsl.w	r3, r2, r3
 800e790:	43db      	mvns	r3, r3
 800e792:	693a      	ldr	r2, [r7, #16]
 800e794:	4013      	ands	r3, r2
 800e796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	68da      	ldr	r2, [r3, #12]
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	005b      	lsls	r3, r3, #1
 800e7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7a4:	693a      	ldr	r2, [r7, #16]
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	693a      	ldr	r2, [r7, #16]
 800e7ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e7be:	43db      	mvns	r3, r3
 800e7c0:	693a      	ldr	r2, [r7, #16]
 800e7c2:	4013      	ands	r3, r2
 800e7c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	091b      	lsrs	r3, r3, #4
 800e7cc:	f003 0201 	and.w	r2, r3, #1
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	fa02 f303 	lsl.w	r3, r2, r3
 800e7d6:	693a      	ldr	r2, [r7, #16]
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	693a      	ldr	r2, [r7, #16]
 800e7e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	f003 0303 	and.w	r3, r3, #3
 800e7ea:	2b03      	cmp	r3, #3
 800e7ec:	d017      	beq.n	800e81e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	005b      	lsls	r3, r3, #1
 800e7f8:	2203      	movs	r2, #3
 800e7fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e7fe:	43db      	mvns	r3, r3
 800e800:	693a      	ldr	r2, [r7, #16]
 800e802:	4013      	ands	r3, r2
 800e804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	689a      	ldr	r2, [r3, #8]
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	fa02 f303 	lsl.w	r3, r2, r3
 800e812:	693a      	ldr	r2, [r7, #16]
 800e814:	4313      	orrs	r3, r2
 800e816:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	693a      	ldr	r2, [r7, #16]
 800e81c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	f003 0303 	and.w	r3, r3, #3
 800e826:	2b02      	cmp	r3, #2
 800e828:	d123      	bne.n	800e872 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	08da      	lsrs	r2, r3, #3
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	3208      	adds	r2, #8
 800e832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	f003 0307 	and.w	r3, r3, #7
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	220f      	movs	r2, #15
 800e842:	fa02 f303 	lsl.w	r3, r2, r3
 800e846:	43db      	mvns	r3, r3
 800e848:	693a      	ldr	r2, [r7, #16]
 800e84a:	4013      	ands	r3, r2
 800e84c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	691a      	ldr	r2, [r3, #16]
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	f003 0307 	and.w	r3, r3, #7
 800e858:	009b      	lsls	r3, r3, #2
 800e85a:	fa02 f303 	lsl.w	r3, r2, r3
 800e85e:	693a      	ldr	r2, [r7, #16]
 800e860:	4313      	orrs	r3, r2
 800e862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	08da      	lsrs	r2, r3, #3
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	3208      	adds	r2, #8
 800e86c:	6939      	ldr	r1, [r7, #16]
 800e86e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	005b      	lsls	r3, r3, #1
 800e87c:	2203      	movs	r2, #3
 800e87e:	fa02 f303 	lsl.w	r3, r2, r3
 800e882:	43db      	mvns	r3, r3
 800e884:	693a      	ldr	r2, [r7, #16]
 800e886:	4013      	ands	r3, r2
 800e888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	f003 0203 	and.w	r2, r3, #3
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	005b      	lsls	r3, r3, #1
 800e896:	fa02 f303 	lsl.w	r3, r2, r3
 800e89a:	693a      	ldr	r2, [r7, #16]
 800e89c:	4313      	orrs	r3, r2
 800e89e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f000 808c 	beq.w	800e9cc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800e8b4:	4a4e      	ldr	r2, [pc, #312]	; (800e9f0 <HAL_GPIO_Init+0x2b0>)
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	089b      	lsrs	r3, r3, #2
 800e8ba:	3302      	adds	r3, #2
 800e8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	f003 0303 	and.w	r3, r3, #3
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	2207      	movs	r2, #7
 800e8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e8d0:	43db      	mvns	r3, r3
 800e8d2:	693a      	ldr	r2, [r7, #16]
 800e8d4:	4013      	ands	r3, r2
 800e8d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e8de:	d00d      	beq.n	800e8fc <HAL_GPIO_Init+0x1bc>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4a44      	ldr	r2, [pc, #272]	; (800e9f4 <HAL_GPIO_Init+0x2b4>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d007      	beq.n	800e8f8 <HAL_GPIO_Init+0x1b8>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4a43      	ldr	r2, [pc, #268]	; (800e9f8 <HAL_GPIO_Init+0x2b8>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d101      	bne.n	800e8f4 <HAL_GPIO_Init+0x1b4>
 800e8f0:	2302      	movs	r3, #2
 800e8f2:	e004      	b.n	800e8fe <HAL_GPIO_Init+0x1be>
 800e8f4:	2307      	movs	r3, #7
 800e8f6:	e002      	b.n	800e8fe <HAL_GPIO_Init+0x1be>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e000      	b.n	800e8fe <HAL_GPIO_Init+0x1be>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	f002 0203 	and.w	r2, r2, #3
 800e904:	0092      	lsls	r2, r2, #2
 800e906:	4093      	lsls	r3, r2
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	4313      	orrs	r3, r2
 800e90c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e90e:	4938      	ldr	r1, [pc, #224]	; (800e9f0 <HAL_GPIO_Init+0x2b0>)
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	089b      	lsrs	r3, r3, #2
 800e914:	3302      	adds	r3, #2
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e91c:	4b37      	ldr	r3, [pc, #220]	; (800e9fc <HAL_GPIO_Init+0x2bc>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	43db      	mvns	r3, r3
 800e926:	693a      	ldr	r2, [r7, #16]
 800e928:	4013      	ands	r3, r2
 800e92a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e934:	2b00      	cmp	r3, #0
 800e936:	d003      	beq.n	800e940 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800e938:	693a      	ldr	r2, [r7, #16]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	4313      	orrs	r3, r2
 800e93e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e940:	4a2e      	ldr	r2, [pc, #184]	; (800e9fc <HAL_GPIO_Init+0x2bc>)
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e946:	4b2d      	ldr	r3, [pc, #180]	; (800e9fc <HAL_GPIO_Init+0x2bc>)
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	43db      	mvns	r3, r3
 800e950:	693a      	ldr	r2, [r7, #16]
 800e952:	4013      	ands	r3, r2
 800e954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d003      	beq.n	800e96a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800e962:	693a      	ldr	r2, [r7, #16]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	4313      	orrs	r3, r2
 800e968:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e96a:	4a24      	ldr	r2, [pc, #144]	; (800e9fc <HAL_GPIO_Init+0x2bc>)
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800e970:	4b22      	ldr	r3, [pc, #136]	; (800e9fc <HAL_GPIO_Init+0x2bc>)
 800e972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e976:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	43db      	mvns	r3, r3
 800e97c:	693a      	ldr	r2, [r7, #16]
 800e97e:	4013      	ands	r3, r2
 800e980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d003      	beq.n	800e996 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800e98e:	693a      	ldr	r2, [r7, #16]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	4313      	orrs	r3, r2
 800e994:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800e996:	4a19      	ldr	r2, [pc, #100]	; (800e9fc <HAL_GPIO_Init+0x2bc>)
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800e99e:	4b17      	ldr	r3, [pc, #92]	; (800e9fc <HAL_GPIO_Init+0x2bc>)
 800e9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9a4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	43db      	mvns	r3, r3
 800e9aa:	693a      	ldr	r2, [r7, #16]
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800e9bc:	693a      	ldr	r2, [r7, #16]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	4313      	orrs	r3, r2
 800e9c2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800e9c4:	4a0d      	ldr	r2, [pc, #52]	; (800e9fc <HAL_GPIO_Init+0x2bc>)
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	fa22 f303 	lsr.w	r3, r2, r3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f47f aeb7 	bne.w	800e750 <HAL_GPIO_Init+0x10>
  }
}
 800e9e2:	bf00      	nop
 800e9e4:	bf00      	nop
 800e9e6:	371c      	adds	r7, #28
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bc80      	pop	{r7}
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	40010000 	.word	0x40010000
 800e9f4:	48000400 	.word	0x48000400
 800e9f8:	48000800 	.word	0x48000800
 800e9fc:	58000800 	.word	0x58000800

0800ea00 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b087      	sub	sp, #28
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800ea0e:	e0af      	b.n	800eb70 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800ea10:	2201      	movs	r2, #1
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	fa02 f303 	lsl.w	r3, r2, r3
 800ea18:	683a      	ldr	r2, [r7, #0]
 800ea1a:	4013      	ands	r3, r2
 800ea1c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f000 80a2 	beq.w	800eb6a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800ea26:	4a59      	ldr	r2, [pc, #356]	; (800eb8c <HAL_GPIO_DeInit+0x18c>)
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	089b      	lsrs	r3, r3, #2
 800ea2c:	3302      	adds	r3, #2
 800ea2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea32:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	f003 0303 	and.w	r3, r3, #3
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	2207      	movs	r2, #7
 800ea3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	4013      	ands	r3, r2
 800ea46:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ea4e:	d00d      	beq.n	800ea6c <HAL_GPIO_DeInit+0x6c>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4a4f      	ldr	r2, [pc, #316]	; (800eb90 <HAL_GPIO_DeInit+0x190>)
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d007      	beq.n	800ea68 <HAL_GPIO_DeInit+0x68>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4a4e      	ldr	r2, [pc, #312]	; (800eb94 <HAL_GPIO_DeInit+0x194>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d101      	bne.n	800ea64 <HAL_GPIO_DeInit+0x64>
 800ea60:	2302      	movs	r3, #2
 800ea62:	e004      	b.n	800ea6e <HAL_GPIO_DeInit+0x6e>
 800ea64:	2307      	movs	r3, #7
 800ea66:	e002      	b.n	800ea6e <HAL_GPIO_DeInit+0x6e>
 800ea68:	2301      	movs	r3, #1
 800ea6a:	e000      	b.n	800ea6e <HAL_GPIO_DeInit+0x6e>
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	697a      	ldr	r2, [r7, #20]
 800ea70:	f002 0203 	and.w	r2, r2, #3
 800ea74:	0092      	lsls	r2, r2, #2
 800ea76:	4093      	lsls	r3, r2
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d136      	bne.n	800eaec <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800ea7e:	4b46      	ldr	r3, [pc, #280]	; (800eb98 <HAL_GPIO_DeInit+0x198>)
 800ea80:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	43db      	mvns	r3, r3
 800ea88:	4943      	ldr	r1, [pc, #268]	; (800eb98 <HAL_GPIO_DeInit+0x198>)
 800ea8a:	4013      	ands	r3, r2
 800ea8c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800ea90:	4b41      	ldr	r3, [pc, #260]	; (800eb98 <HAL_GPIO_DeInit+0x198>)
 800ea92:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	43db      	mvns	r3, r3
 800ea9a:	493f      	ldr	r1, [pc, #252]	; (800eb98 <HAL_GPIO_DeInit+0x198>)
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800eaa2:	4b3d      	ldr	r3, [pc, #244]	; (800eb98 <HAL_GPIO_DeInit+0x198>)
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	43db      	mvns	r3, r3
 800eaaa:	493b      	ldr	r1, [pc, #236]	; (800eb98 <HAL_GPIO_DeInit+0x198>)
 800eaac:	4013      	ands	r3, r2
 800eaae:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800eab0:	4b39      	ldr	r3, [pc, #228]	; (800eb98 <HAL_GPIO_DeInit+0x198>)
 800eab2:	685a      	ldr	r2, [r3, #4]
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	43db      	mvns	r3, r3
 800eab8:	4937      	ldr	r1, [pc, #220]	; (800eb98 <HAL_GPIO_DeInit+0x198>)
 800eaba:	4013      	ands	r3, r2
 800eabc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	f003 0303 	and.w	r3, r3, #3
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	2207      	movs	r2, #7
 800eac8:	fa02 f303 	lsl.w	r3, r2, r3
 800eacc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800eace:	4a2f      	ldr	r2, [pc, #188]	; (800eb8c <HAL_GPIO_DeInit+0x18c>)
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	089b      	lsrs	r3, r3, #2
 800ead4:	3302      	adds	r3, #2
 800ead6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	43da      	mvns	r2, r3
 800eade:	482b      	ldr	r0, [pc, #172]	; (800eb8c <HAL_GPIO_DeInit+0x18c>)
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	089b      	lsrs	r3, r3, #2
 800eae4:	400a      	ands	r2, r1
 800eae6:	3302      	adds	r3, #2
 800eae8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	005b      	lsls	r3, r3, #1
 800eaf4:	2103      	movs	r1, #3
 800eaf6:	fa01 f303 	lsl.w	r3, r1, r3
 800eafa:	431a      	orrs	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	08da      	lsrs	r2, r3, #3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	3208      	adds	r2, #8
 800eb08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	f003 0307 	and.w	r3, r3, #7
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	220f      	movs	r2, #15
 800eb16:	fa02 f303 	lsl.w	r3, r2, r3
 800eb1a:	43db      	mvns	r3, r3
 800eb1c:	697a      	ldr	r2, [r7, #20]
 800eb1e:	08d2      	lsrs	r2, r2, #3
 800eb20:	4019      	ands	r1, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	3208      	adds	r2, #8
 800eb26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	689a      	ldr	r2, [r3, #8]
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	005b      	lsls	r3, r3, #1
 800eb32:	2103      	movs	r1, #3
 800eb34:	fa01 f303 	lsl.w	r3, r1, r3
 800eb38:	43db      	mvns	r3, r3
 800eb3a:	401a      	ands	r2, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	685a      	ldr	r2, [r3, #4]
 800eb44:	2101      	movs	r1, #1
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	fa01 f303 	lsl.w	r3, r1, r3
 800eb4c:	43db      	mvns	r3, r3
 800eb4e:	401a      	ands	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68da      	ldr	r2, [r3, #12]
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	005b      	lsls	r3, r3, #1
 800eb5c:	2103      	movs	r1, #3
 800eb5e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb62:	43db      	mvns	r3, r3
 800eb64:	401a      	ands	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	60da      	str	r2, [r3, #12]
    }

    position++;
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800eb70:	683a      	ldr	r2, [r7, #0]
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	fa22 f303 	lsr.w	r3, r2, r3
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f47f af49 	bne.w	800ea10 <HAL_GPIO_DeInit+0x10>
  }
}
 800eb7e:	bf00      	nop
 800eb80:	bf00      	nop
 800eb82:	371c      	adds	r7, #28
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bc80      	pop	{r7}
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop
 800eb8c:	40010000 	.word	0x40010000
 800eb90:	48000400 	.word	0x48000400
 800eb94:	48000800 	.word	0x48000800
 800eb98:	58000800 	.word	0x58000800

0800eb9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	460b      	mov	r3, r1
 800eba6:	807b      	strh	r3, [r7, #2]
 800eba8:	4613      	mov	r3, r2
 800ebaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ebac:	787b      	ldrb	r3, [r7, #1]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d003      	beq.n	800ebba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ebb2:	887a      	ldrh	r2, [r7, #2]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ebb8:	e002      	b.n	800ebc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ebba:	887a      	ldrh	r2, [r7, #2]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ebc0:	bf00      	nop
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bc80      	pop	{r7}
 800ebc8:	4770      	bx	lr

0800ebca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ebca:	b580      	push	{r7, lr}
 800ebcc:	b082      	sub	sp, #8
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d101      	bne.n	800ebdc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	e081      	b.n	800ece0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d106      	bne.n	800ebf6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f7fb fba9 	bl	800a348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2224      	movs	r2, #36	; 0x24
 800ebfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f022 0201 	bic.w	r2, r2, #1
 800ec0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	685a      	ldr	r2, [r3, #4]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ec1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	689a      	ldr	r2, [r3, #8]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d107      	bne.n	800ec44 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689a      	ldr	r2, [r3, #8]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec40:	609a      	str	r2, [r3, #8]
 800ec42:	e006      	b.n	800ec52 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	689a      	ldr	r2, [r3, #8]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ec50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	2b02      	cmp	r3, #2
 800ec58:	d104      	bne.n	800ec64 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec62:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	6812      	ldr	r2, [r2, #0]
 800ec6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ec72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec76:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	68da      	ldr	r2, [r3, #12]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec86:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	691a      	ldr	r2, [r3, #16]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	695b      	ldr	r3, [r3, #20]
 800ec90:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	699b      	ldr	r3, [r3, #24]
 800ec98:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	430a      	orrs	r2, r1
 800eca0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	69d9      	ldr	r1, [r3, #28]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a1a      	ldr	r2, [r3, #32]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	430a      	orrs	r2, r1
 800ecb0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	681a      	ldr	r2, [r3, #0]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f042 0201 	orr.w	r2, r2, #1
 800ecc0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2220      	movs	r2, #32
 800eccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ecde:	2300      	movs	r3, #0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3708      	adds	r7, #8
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	2b20      	cmp	r3, #32
 800ecfc:	d138      	bne.n	800ed70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d101      	bne.n	800ed0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ed08:	2302      	movs	r3, #2
 800ed0a:	e032      	b.n	800ed72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2224      	movs	r2, #36	; 0x24
 800ed18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f022 0201 	bic.w	r2, r2, #1
 800ed2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ed3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	6819      	ldr	r1, [r3, #0]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	683a      	ldr	r2, [r7, #0]
 800ed48:	430a      	orrs	r2, r1
 800ed4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f042 0201 	orr.w	r2, r2, #1
 800ed5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2220      	movs	r2, #32
 800ed60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2200      	movs	r2, #0
 800ed68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	e000      	b.n	800ed72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ed70:	2302      	movs	r3, #2
  }
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	370c      	adds	r7, #12
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bc80      	pop	{r7}
 800ed7a:	4770      	bx	lr

0800ed7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b085      	sub	sp, #20
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	2b20      	cmp	r3, #32
 800ed90:	d139      	bne.n	800ee06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d101      	bne.n	800eda0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	e033      	b.n	800ee08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2224      	movs	r2, #36	; 0x24
 800edac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f022 0201 	bic.w	r2, r2, #1
 800edbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800edce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	021b      	lsls	r3, r3, #8
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	4313      	orrs	r3, r2
 800edd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	68fa      	ldr	r2, [r7, #12]
 800ede0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f042 0201 	orr.w	r2, r2, #1
 800edf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2220      	movs	r2, #32
 800edf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ee02:	2300      	movs	r3, #0
 800ee04:	e000      	b.n	800ee08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ee06:	2302      	movs	r3, #2
  }
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3714      	adds	r7, #20
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bc80      	pop	{r7}
 800ee10:	4770      	bx	lr
	...

0800ee14 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ee14:	b480      	push	{r7}
 800ee16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ee18:	4b04      	ldr	r3, [pc, #16]	; (800ee2c <HAL_PWR_EnableBkUpAccess+0x18>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a03      	ldr	r2, [pc, #12]	; (800ee2c <HAL_PWR_EnableBkUpAccess+0x18>)
 800ee1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee22:	6013      	str	r3, [r2, #0]
}
 800ee24:	bf00      	nop
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bc80      	pop	{r7}
 800ee2a:	4770      	bx	lr
 800ee2c:	58000400 	.word	0x58000400

0800ee30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ee30:	b480      	push	{r7}
 800ee32:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800ee34:	4b03      	ldr	r3, [pc, #12]	; (800ee44 <HAL_PWREx_GetVoltageRange+0x14>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bc80      	pop	{r7}
 800ee42:	4770      	bx	lr
 800ee44:	58000400 	.word	0x58000400

0800ee48 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800ee4c:	4b06      	ldr	r3, [pc, #24]	; (800ee68 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee58:	d101      	bne.n	800ee5e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	e000      	b.n	800ee60 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800ee5e:	2300      	movs	r3, #0
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bc80      	pop	{r7}
 800ee66:	4770      	bx	lr
 800ee68:	58000400 	.word	0x58000400

0800ee6c <LL_RCC_HSE_EnableTcxo>:
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800ee70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ee7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ee7e:	6013      	str	r3, [r2, #0]
}
 800ee80:	bf00      	nop
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bc80      	pop	{r7}
 800ee86:	4770      	bx	lr

0800ee88 <LL_RCC_HSE_DisableTcxo>:
{
 800ee88:	b480      	push	{r7}
 800ee8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800ee8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ee96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ee9a:	6013      	str	r3, [r2, #0]
}
 800ee9c:	bf00      	nop
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bc80      	pop	{r7}
 800eea2:	4770      	bx	lr

0800eea4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800eea4:	b480      	push	{r7}
 800eea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800eea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eeb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eeb6:	d101      	bne.n	800eebc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e000      	b.n	800eebe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bc80      	pop	{r7}
 800eec4:	4770      	bx	lr

0800eec6 <LL_RCC_HSE_Enable>:
{
 800eec6:	b480      	push	{r7}
 800eec8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800eeca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eed8:	6013      	str	r3, [r2, #0]
}
 800eeda:	bf00      	nop
 800eedc:	46bd      	mov	sp, r7
 800eede:	bc80      	pop	{r7}
 800eee0:	4770      	bx	lr

0800eee2 <LL_RCC_HSE_Disable>:
{
 800eee2:	b480      	push	{r7}
 800eee4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800eee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eef4:	6013      	str	r3, [r2, #0]
}
 800eef6:	bf00      	nop
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bc80      	pop	{r7}
 800eefc:	4770      	bx	lr

0800eefe <LL_RCC_HSE_IsReady>:
{
 800eefe:	b480      	push	{r7}
 800ef00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ef02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef10:	d101      	bne.n	800ef16 <LL_RCC_HSE_IsReady+0x18>
 800ef12:	2301      	movs	r3, #1
 800ef14:	e000      	b.n	800ef18 <LL_RCC_HSE_IsReady+0x1a>
 800ef16:	2300      	movs	r3, #0
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bc80      	pop	{r7}
 800ef1e:	4770      	bx	lr

0800ef20 <LL_RCC_HSI_Enable>:
{
 800ef20:	b480      	push	{r7}
 800ef22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800ef24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef32:	6013      	str	r3, [r2, #0]
}
 800ef34:	bf00      	nop
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bc80      	pop	{r7}
 800ef3a:	4770      	bx	lr

0800ef3c <LL_RCC_HSI_Disable>:
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800ef40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef4e:	6013      	str	r3, [r2, #0]
}
 800ef50:	bf00      	nop
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bc80      	pop	{r7}
 800ef56:	4770      	bx	lr

0800ef58 <LL_RCC_HSI_IsReady>:
{
 800ef58:	b480      	push	{r7}
 800ef5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ef5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef6a:	d101      	bne.n	800ef70 <LL_RCC_HSI_IsReady+0x18>
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e000      	b.n	800ef72 <LL_RCC_HSI_IsReady+0x1a>
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bc80      	pop	{r7}
 800ef78:	4770      	bx	lr

0800ef7a <LL_RCC_HSI_SetCalibTrimming>:
{
 800ef7a:	b480      	push	{r7}
 800ef7c:	b083      	sub	sp, #12
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800ef82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	061b      	lsls	r3, r3, #24
 800ef90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ef94:	4313      	orrs	r3, r2
 800ef96:	604b      	str	r3, [r1, #4]
}
 800ef98:	bf00      	nop
 800ef9a:	370c      	adds	r7, #12
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bc80      	pop	{r7}
 800efa0:	4770      	bx	lr

0800efa2 <LL_RCC_LSE_IsReady>:
{
 800efa2:	b480      	push	{r7}
 800efa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800efa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efae:	f003 0302 	and.w	r3, r3, #2
 800efb2:	2b02      	cmp	r3, #2
 800efb4:	d101      	bne.n	800efba <LL_RCC_LSE_IsReady+0x18>
 800efb6:	2301      	movs	r3, #1
 800efb8:	e000      	b.n	800efbc <LL_RCC_LSE_IsReady+0x1a>
 800efba:	2300      	movs	r3, #0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bc80      	pop	{r7}
 800efc2:	4770      	bx	lr

0800efc4 <LL_RCC_LSI_Enable>:
{
 800efc4:	b480      	push	{r7}
 800efc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800efc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800efd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800efd4:	f043 0301 	orr.w	r3, r3, #1
 800efd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800efdc:	bf00      	nop
 800efde:	46bd      	mov	sp, r7
 800efe0:	bc80      	pop	{r7}
 800efe2:	4770      	bx	lr

0800efe4 <LL_RCC_LSI_Disable>:
{
 800efe4:	b480      	push	{r7}
 800efe6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800efe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eff4:	f023 0301 	bic.w	r3, r3, #1
 800eff8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800effc:	bf00      	nop
 800effe:	46bd      	mov	sp, r7
 800f000:	bc80      	pop	{r7}
 800f002:	4770      	bx	lr

0800f004 <LL_RCC_LSI_IsReady>:
{
 800f004:	b480      	push	{r7}
 800f006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800f008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f00c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f010:	f003 0302 	and.w	r3, r3, #2
 800f014:	2b02      	cmp	r3, #2
 800f016:	d101      	bne.n	800f01c <LL_RCC_LSI_IsReady+0x18>
 800f018:	2301      	movs	r3, #1
 800f01a:	e000      	b.n	800f01e <LL_RCC_LSI_IsReady+0x1a>
 800f01c:	2300      	movs	r3, #0
}
 800f01e:	4618      	mov	r0, r3
 800f020:	46bd      	mov	sp, r7
 800f022:	bc80      	pop	{r7}
 800f024:	4770      	bx	lr

0800f026 <LL_RCC_MSI_Enable>:
{
 800f026:	b480      	push	{r7}
 800f028:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800f02a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f034:	f043 0301 	orr.w	r3, r3, #1
 800f038:	6013      	str	r3, [r2, #0]
}
 800f03a:	bf00      	nop
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bc80      	pop	{r7}
 800f040:	4770      	bx	lr

0800f042 <LL_RCC_MSI_Disable>:
{
 800f042:	b480      	push	{r7}
 800f044:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800f046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f050:	f023 0301 	bic.w	r3, r3, #1
 800f054:	6013      	str	r3, [r2, #0]
}
 800f056:	bf00      	nop
 800f058:	46bd      	mov	sp, r7
 800f05a:	bc80      	pop	{r7}
 800f05c:	4770      	bx	lr

0800f05e <LL_RCC_MSI_IsReady>:
{
 800f05e:	b480      	push	{r7}
 800f060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800f062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f003 0302 	and.w	r3, r3, #2
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	d101      	bne.n	800f074 <LL_RCC_MSI_IsReady+0x16>
 800f070:	2301      	movs	r3, #1
 800f072:	e000      	b.n	800f076 <LL_RCC_MSI_IsReady+0x18>
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	46bd      	mov	sp, r7
 800f07a:	bc80      	pop	{r7}
 800f07c:	4770      	bx	lr

0800f07e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800f07e:	b480      	push	{r7}
 800f080:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800f082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f003 0308 	and.w	r3, r3, #8
 800f08c:	2b08      	cmp	r3, #8
 800f08e:	d101      	bne.n	800f094 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800f090:	2301      	movs	r3, #1
 800f092:	e000      	b.n	800f096 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800f094:	2300      	movs	r3, #0
}
 800f096:	4618      	mov	r0, r3
 800f098:	46bd      	mov	sp, r7
 800f09a:	bc80      	pop	{r7}
 800f09c:	4770      	bx	lr

0800f09e <LL_RCC_MSI_GetRange>:
{
 800f09e:	b480      	push	{r7}
 800f0a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800f0a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bc80      	pop	{r7}
 800f0b2:	4770      	bx	lr

0800f0b4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800f0b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f0c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bc80      	pop	{r7}
 800f0ca:	4770      	bx	lr

0800f0cc <LL_RCC_MSI_SetCalibTrimming>:
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b083      	sub	sp, #12
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800f0d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	021b      	lsls	r3, r3, #8
 800f0e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	604b      	str	r3, [r1, #4]
}
 800f0ea:	bf00      	nop
 800f0ec:	370c      	adds	r7, #12
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bc80      	pop	{r7}
 800f0f2:	4770      	bx	lr

0800f0f4 <LL_RCC_SetSysClkSource>:
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800f0fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	f023 0203 	bic.w	r2, r3, #3
 800f106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4313      	orrs	r3, r2
 800f10e:	608b      	str	r3, [r1, #8]
}
 800f110:	bf00      	nop
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	bc80      	pop	{r7}
 800f118:	4770      	bx	lr

0800f11a <LL_RCC_GetSysClkSource>:
{
 800f11a:	b480      	push	{r7}
 800f11c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f11e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	f003 030c 	and.w	r3, r3, #12
}
 800f128:	4618      	mov	r0, r3
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bc80      	pop	{r7}
 800f12e:	4770      	bx	lr

0800f130 <LL_RCC_SetAHBPrescaler>:
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800f138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4313      	orrs	r3, r2
 800f14a:	608b      	str	r3, [r1, #8]
}
 800f14c:	bf00      	nop
 800f14e:	370c      	adds	r7, #12
 800f150:	46bd      	mov	sp, r7
 800f152:	bc80      	pop	{r7}
 800f154:	4770      	bx	lr

0800f156 <LL_RCC_SetAHB3Prescaler>:
{
 800f156:	b480      	push	{r7}
 800f158:	b083      	sub	sp, #12
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800f15e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f162:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f166:	f023 020f 	bic.w	r2, r3, #15
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	091b      	lsrs	r3, r3, #4
 800f16e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f172:	4313      	orrs	r3, r2
 800f174:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bc80      	pop	{r7}
 800f180:	4770      	bx	lr

0800f182 <LL_RCC_SetAPB1Prescaler>:
{
 800f182:	b480      	push	{r7}
 800f184:	b083      	sub	sp, #12
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800f18a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f194:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4313      	orrs	r3, r2
 800f19c:	608b      	str	r3, [r1, #8]
}
 800f19e:	bf00      	nop
 800f1a0:	370c      	adds	r7, #12
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bc80      	pop	{r7}
 800f1a6:	4770      	bx	lr

0800f1a8 <LL_RCC_SetAPB2Prescaler>:
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800f1b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f1ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	608b      	str	r3, [r1, #8]
}
 800f1c4:	bf00      	nop
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bc80      	pop	{r7}
 800f1cc:	4770      	bx	lr

0800f1ce <LL_RCC_GetAHBPrescaler>:
{
 800f1ce:	b480      	push	{r7}
 800f1d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800f1d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bc80      	pop	{r7}
 800f1e2:	4770      	bx	lr

0800f1e4 <LL_RCC_GetAHB3Prescaler>:
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800f1e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f1f0:	011b      	lsls	r3, r3, #4
 800f1f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bc80      	pop	{r7}
 800f1fc:	4770      	bx	lr

0800f1fe <LL_RCC_GetAPB1Prescaler>:
{
 800f1fe:	b480      	push	{r7}
 800f200:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800f202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f206:	689b      	ldr	r3, [r3, #8]
 800f208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	46bd      	mov	sp, r7
 800f210:	bc80      	pop	{r7}
 800f212:	4770      	bx	lr

0800f214 <LL_RCC_GetAPB2Prescaler>:
{
 800f214:	b480      	push	{r7}
 800f216:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800f218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800f222:	4618      	mov	r0, r3
 800f224:	46bd      	mov	sp, r7
 800f226:	bc80      	pop	{r7}
 800f228:	4770      	bx	lr

0800f22a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800f22a:	b480      	push	{r7}
 800f22c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800f22e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f23c:	6013      	str	r3, [r2, #0]
}
 800f23e:	bf00      	nop
 800f240:	46bd      	mov	sp, r7
 800f242:	bc80      	pop	{r7}
 800f244:	4770      	bx	lr

0800f246 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800f246:	b480      	push	{r7}
 800f248:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800f24a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f258:	6013      	str	r3, [r2, #0]
}
 800f25a:	bf00      	nop
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bc80      	pop	{r7}
 800f260:	4770      	bx	lr

0800f262 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800f262:	b480      	push	{r7}
 800f264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800f266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f274:	d101      	bne.n	800f27a <LL_RCC_PLL_IsReady+0x18>
 800f276:	2301      	movs	r3, #1
 800f278:	e000      	b.n	800f27c <LL_RCC_PLL_IsReady+0x1a>
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	46bd      	mov	sp, r7
 800f280:	bc80      	pop	{r7}
 800f282:	4770      	bx	lr

0800f284 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800f288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f28c:	68db      	ldr	r3, [r3, #12]
 800f28e:	0a1b      	lsrs	r3, r3, #8
 800f290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800f294:	4618      	mov	r0, r3
 800f296:	46bd      	mov	sp, r7
 800f298:	bc80      	pop	{r7}
 800f29a:	4770      	bx	lr

0800f29c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800f29c:	b480      	push	{r7}
 800f29e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800f2a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bc80      	pop	{r7}
 800f2b0:	4770      	bx	lr

0800f2b2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800f2b2:	b480      	push	{r7}
 800f2b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800f2b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bc80      	pop	{r7}
 800f2c6:	4770      	bx	lr

0800f2c8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800f2cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2d0:	68db      	ldr	r3, [r3, #12]
 800f2d2:	f003 0303 	and.w	r3, r3, #3
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bc80      	pop	{r7}
 800f2dc:	4770      	bx	lr

0800f2de <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800f2de:	b480      	push	{r7}
 800f2e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800f2e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f2ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2f0:	d101      	bne.n	800f2f6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e000      	b.n	800f2f8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800f2f6:	2300      	movs	r3, #0
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bc80      	pop	{r7}
 800f2fe:	4770      	bx	lr

0800f300 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800f300:	b480      	push	{r7}
 800f302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800f304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f308:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f30c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f314:	d101      	bne.n	800f31a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800f316:	2301      	movs	r3, #1
 800f318:	e000      	b.n	800f31c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800f31a:	2300      	movs	r3, #0
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	46bd      	mov	sp, r7
 800f320:	bc80      	pop	{r7}
 800f322:	4770      	bx	lr

0800f324 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800f324:	b480      	push	{r7}
 800f326:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800f328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f336:	d101      	bne.n	800f33c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800f338:	2301      	movs	r3, #1
 800f33a:	e000      	b.n	800f33e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800f33c:	2300      	movs	r3, #0
}
 800f33e:	4618      	mov	r0, r3
 800f340:	46bd      	mov	sp, r7
 800f342:	bc80      	pop	{r7}
 800f344:	4770      	bx	lr

0800f346 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800f346:	b480      	push	{r7}
 800f348:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800f34a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f34e:	689b      	ldr	r3, [r3, #8]
 800f350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f354:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f358:	d101      	bne.n	800f35e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800f35a:	2301      	movs	r3, #1
 800f35c:	e000      	b.n	800f360 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	46bd      	mov	sp, r7
 800f364:	bc80      	pop	{r7}
 800f366:	4770      	bx	lr

0800f368 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b088      	sub	sp, #32
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d101      	bne.n	800f37a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f376:	2301      	movs	r3, #1
 800f378:	e36f      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f37a:	f7ff fece 	bl	800f11a <LL_RCC_GetSysClkSource>
 800f37e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f380:	f7ff ffa2 	bl	800f2c8 <LL_RCC_PLL_GetMainSource>
 800f384:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f003 0320 	and.w	r3, r3, #32
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f000 80c4 	beq.w	800f51c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d005      	beq.n	800f3a6 <HAL_RCC_OscConfig+0x3e>
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	2b0c      	cmp	r3, #12
 800f39e:	d176      	bne.n	800f48e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f3a0:	69bb      	ldr	r3, [r7, #24]
 800f3a2:	2b01      	cmp	r3, #1
 800f3a4:	d173      	bne.n	800f48e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6a1b      	ldr	r3, [r3, #32]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d101      	bne.n	800f3b2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e353      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f3b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f003 0308 	and.w	r3, r3, #8
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d005      	beq.n	800f3d0 <HAL_RCC_OscConfig+0x68>
 800f3c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3ce:	e006      	b.n	800f3de <HAL_RCC_OscConfig+0x76>
 800f3d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f3d8:	091b      	lsrs	r3, r3, #4
 800f3da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d222      	bcs.n	800f428 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f000 fd7a 	bl	800fee0 <RCC_SetFlashLatencyFromMSIRange>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d001      	beq.n	800f3f6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	e331      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f3f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f400:	f043 0308 	orr.w	r3, r3, #8
 800f404:	6013      	str	r3, [r2, #0]
 800f406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f418:	4313      	orrs	r3, r2
 800f41a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f420:	4618      	mov	r0, r3
 800f422:	f7ff fe53 	bl	800f0cc <LL_RCC_MSI_SetCalibTrimming>
 800f426:	e021      	b.n	800f46c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f432:	f043 0308 	orr.w	r3, r3, #8
 800f436:	6013      	str	r3, [r2, #0]
 800f438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f446:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f44a:	4313      	orrs	r3, r2
 800f44c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff fe3a 	bl	800f0cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f45c:	4618      	mov	r0, r3
 800f45e:	f000 fd3f 	bl	800fee0 <RCC_SetFlashLatencyFromMSIRange>
 800f462:	4603      	mov	r3, r0
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800f468:	2301      	movs	r3, #1
 800f46a:	e2f6      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f46c:	f000 fcc2 	bl	800fdf4 <HAL_RCC_GetHCLKFreq>
 800f470:	4603      	mov	r3, r0
 800f472:	4aa7      	ldr	r2, [pc, #668]	; (800f710 <HAL_RCC_OscConfig+0x3a8>)
 800f474:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800f476:	4ba7      	ldr	r3, [pc, #668]	; (800f714 <HAL_RCC_OscConfig+0x3ac>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fb f908 	bl	800a690 <HAL_InitTick>
 800f480:	4603      	mov	r3, r0
 800f482:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800f484:	7cfb      	ldrb	r3, [r7, #19]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d047      	beq.n	800f51a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800f48a:	7cfb      	ldrb	r3, [r7, #19]
 800f48c:	e2e5      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6a1b      	ldr	r3, [r3, #32]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d02c      	beq.n	800f4f0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f496:	f7ff fdc6 	bl	800f026 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f49a:	f7fd fd43 	bl	800cf24 <HAL_GetTick>
 800f49e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800f4a0:	e008      	b.n	800f4b4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f4a2:	f7fd fd3f 	bl	800cf24 <HAL_GetTick>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	d901      	bls.n	800f4b4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800f4b0:	2303      	movs	r3, #3
 800f4b2:	e2d2      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800f4b4:	f7ff fdd3 	bl	800f05e <LL_RCC_MSI_IsReady>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d0f1      	beq.n	800f4a2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f4be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f4c8:	f043 0308 	orr.w	r3, r3, #8
 800f4cc:	6013      	str	r3, [r2, #0]
 800f4ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7ff fdef 	bl	800f0cc <LL_RCC_MSI_SetCalibTrimming>
 800f4ee:	e015      	b.n	800f51c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f4f0:	f7ff fda7 	bl	800f042 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f4f4:	f7fd fd16 	bl	800cf24 <HAL_GetTick>
 800f4f8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800f4fa:	e008      	b.n	800f50e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f4fc:	f7fd fd12 	bl	800cf24 <HAL_GetTick>
 800f500:	4602      	mov	r2, r0
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	1ad3      	subs	r3, r2, r3
 800f506:	2b02      	cmp	r3, #2
 800f508:	d901      	bls.n	800f50e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800f50a:	2303      	movs	r3, #3
 800f50c:	e2a5      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800f50e:	f7ff fda6 	bl	800f05e <LL_RCC_MSI_IsReady>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d1f1      	bne.n	800f4fc <HAL_RCC_OscConfig+0x194>
 800f518:	e000      	b.n	800f51c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f51a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f003 0301 	and.w	r3, r3, #1
 800f524:	2b00      	cmp	r3, #0
 800f526:	d058      	beq.n	800f5da <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	2b08      	cmp	r3, #8
 800f52c:	d005      	beq.n	800f53a <HAL_RCC_OscConfig+0x1d2>
 800f52e:	69fb      	ldr	r3, [r7, #28]
 800f530:	2b0c      	cmp	r3, #12
 800f532:	d108      	bne.n	800f546 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	2b03      	cmp	r3, #3
 800f538:	d105      	bne.n	800f546 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d14b      	bne.n	800f5da <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800f542:	2301      	movs	r3, #1
 800f544:	e289      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800f546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f558:	4313      	orrs	r3, r2
 800f55a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f564:	d102      	bne.n	800f56c <HAL_RCC_OscConfig+0x204>
 800f566:	f7ff fcae 	bl	800eec6 <LL_RCC_HSE_Enable>
 800f56a:	e00d      	b.n	800f588 <HAL_RCC_OscConfig+0x220>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800f574:	d104      	bne.n	800f580 <HAL_RCC_OscConfig+0x218>
 800f576:	f7ff fc79 	bl	800ee6c <LL_RCC_HSE_EnableTcxo>
 800f57a:	f7ff fca4 	bl	800eec6 <LL_RCC_HSE_Enable>
 800f57e:	e003      	b.n	800f588 <HAL_RCC_OscConfig+0x220>
 800f580:	f7ff fcaf 	bl	800eee2 <LL_RCC_HSE_Disable>
 800f584:	f7ff fc80 	bl	800ee88 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d012      	beq.n	800f5b6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f590:	f7fd fcc8 	bl	800cf24 <HAL_GetTick>
 800f594:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800f596:	e008      	b.n	800f5aa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f598:	f7fd fcc4 	bl	800cf24 <HAL_GetTick>
 800f59c:	4602      	mov	r2, r0
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	1ad3      	subs	r3, r2, r3
 800f5a2:	2b64      	cmp	r3, #100	; 0x64
 800f5a4:	d901      	bls.n	800f5aa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800f5a6:	2303      	movs	r3, #3
 800f5a8:	e257      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800f5aa:	f7ff fca8 	bl	800eefe <LL_RCC_HSE_IsReady>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d0f1      	beq.n	800f598 <HAL_RCC_OscConfig+0x230>
 800f5b4:	e011      	b.n	800f5da <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f5b6:	f7fd fcb5 	bl	800cf24 <HAL_GetTick>
 800f5ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800f5bc:	e008      	b.n	800f5d0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f5be:	f7fd fcb1 	bl	800cf24 <HAL_GetTick>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	2b64      	cmp	r3, #100	; 0x64
 800f5ca:	d901      	bls.n	800f5d0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800f5cc:	2303      	movs	r3, #3
 800f5ce:	e244      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800f5d0:	f7ff fc95 	bl	800eefe <LL_RCC_HSE_IsReady>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1f1      	bne.n	800f5be <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f003 0302 	and.w	r3, r3, #2
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d046      	beq.n	800f674 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	2b04      	cmp	r3, #4
 800f5ea:	d005      	beq.n	800f5f8 <HAL_RCC_OscConfig+0x290>
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	2b0c      	cmp	r3, #12
 800f5f0:	d10e      	bne.n	800f610 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	2b02      	cmp	r3, #2
 800f5f6:	d10b      	bne.n	800f610 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	691b      	ldr	r3, [r3, #16]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d101      	bne.n	800f604 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800f600:	2301      	movs	r3, #1
 800f602:	e22a      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	695b      	ldr	r3, [r3, #20]
 800f608:	4618      	mov	r0, r3
 800f60a:	f7ff fcb6 	bl	800ef7a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f60e:	e031      	b.n	800f674 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	691b      	ldr	r3, [r3, #16]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d019      	beq.n	800f64c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f618:	f7ff fc82 	bl	800ef20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f61c:	f7fd fc82 	bl	800cf24 <HAL_GetTick>
 800f620:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800f622:	e008      	b.n	800f636 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f624:	f7fd fc7e 	bl	800cf24 <HAL_GetTick>
 800f628:	4602      	mov	r2, r0
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	1ad3      	subs	r3, r2, r3
 800f62e:	2b02      	cmp	r3, #2
 800f630:	d901      	bls.n	800f636 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800f632:	2303      	movs	r3, #3
 800f634:	e211      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800f636:	f7ff fc8f 	bl	800ef58 <LL_RCC_HSI_IsReady>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d0f1      	beq.n	800f624 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	695b      	ldr	r3, [r3, #20]
 800f644:	4618      	mov	r0, r3
 800f646:	f7ff fc98 	bl	800ef7a <LL_RCC_HSI_SetCalibTrimming>
 800f64a:	e013      	b.n	800f674 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f64c:	f7ff fc76 	bl	800ef3c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f650:	f7fd fc68 	bl	800cf24 <HAL_GetTick>
 800f654:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800f656:	e008      	b.n	800f66a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f658:	f7fd fc64 	bl	800cf24 <HAL_GetTick>
 800f65c:	4602      	mov	r2, r0
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	1ad3      	subs	r3, r2, r3
 800f662:	2b02      	cmp	r3, #2
 800f664:	d901      	bls.n	800f66a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800f666:	2303      	movs	r3, #3
 800f668:	e1f7      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800f66a:	f7ff fc75 	bl	800ef58 <LL_RCC_HSI_IsReady>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1f1      	bne.n	800f658 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	f003 0308 	and.w	r3, r3, #8
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d06e      	beq.n	800f75e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	699b      	ldr	r3, [r3, #24]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d056      	beq.n	800f736 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800f688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f68c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f690:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	69da      	ldr	r2, [r3, #28]
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f003 0310 	and.w	r3, r3, #16
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d031      	beq.n	800f704 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f003 0302 	and.w	r3, r3, #2
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d006      	beq.n	800f6b8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d101      	bne.n	800f6b8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	e1d0      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f003 0301 	and.w	r3, r3, #1
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d013      	beq.n	800f6ea <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800f6c2:	f7ff fc8f 	bl	800efe4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f6c6:	f7fd fc2d 	bl	800cf24 <HAL_GetTick>
 800f6ca:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800f6cc:	e008      	b.n	800f6e0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f6ce:	f7fd fc29 	bl	800cf24 <HAL_GetTick>
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	1ad3      	subs	r3, r2, r3
 800f6d8:	2b11      	cmp	r3, #17
 800f6da:	d901      	bls.n	800f6e0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800f6dc:	2303      	movs	r3, #3
 800f6de:	e1bc      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800f6e0:	f7ff fc90 	bl	800f004 <LL_RCC_LSI_IsReady>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d1f1      	bne.n	800f6ce <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800f6ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f6ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6f2:	f023 0210 	bic.w	r2, r3, #16
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	69db      	ldr	r3, [r3, #28]
 800f6fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f6fe:	4313      	orrs	r3, r2
 800f700:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f704:	f7ff fc5e 	bl	800efc4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f708:	f7fd fc0c 	bl	800cf24 <HAL_GetTick>
 800f70c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800f70e:	e00c      	b.n	800f72a <HAL_RCC_OscConfig+0x3c2>
 800f710:	20000080 	.word	0x20000080
 800f714:	20000088 	.word	0x20000088
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f718:	f7fd fc04 	bl	800cf24 <HAL_GetTick>
 800f71c:	4602      	mov	r2, r0
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	1ad3      	subs	r3, r2, r3
 800f722:	2b11      	cmp	r3, #17
 800f724:	d901      	bls.n	800f72a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800f726:	2303      	movs	r3, #3
 800f728:	e197      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800f72a:	f7ff fc6b 	bl	800f004 <LL_RCC_LSI_IsReady>
 800f72e:	4603      	mov	r3, r0
 800f730:	2b00      	cmp	r3, #0
 800f732:	d0f1      	beq.n	800f718 <HAL_RCC_OscConfig+0x3b0>
 800f734:	e013      	b.n	800f75e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f736:	f7ff fc55 	bl	800efe4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f73a:	f7fd fbf3 	bl	800cf24 <HAL_GetTick>
 800f73e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800f740:	e008      	b.n	800f754 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f742:	f7fd fbef 	bl	800cf24 <HAL_GetTick>
 800f746:	4602      	mov	r2, r0
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	1ad3      	subs	r3, r2, r3
 800f74c:	2b11      	cmp	r3, #17
 800f74e:	d901      	bls.n	800f754 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800f750:	2303      	movs	r3, #3
 800f752:	e182      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800f754:	f7ff fc56 	bl	800f004 <LL_RCC_LSI_IsReady>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d1f1      	bne.n	800f742 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f003 0304 	and.w	r3, r3, #4
 800f766:	2b00      	cmp	r3, #0
 800f768:	f000 80d8 	beq.w	800f91c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800f76c:	f7ff fb6c 	bl	800ee48 <LL_PWR_IsEnabledBkUpAccess>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d113      	bne.n	800f79e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f776:	f7ff fb4d 	bl	800ee14 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f77a:	f7fd fbd3 	bl	800cf24 <HAL_GetTick>
 800f77e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800f780:	e008      	b.n	800f794 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f782:	f7fd fbcf 	bl	800cf24 <HAL_GetTick>
 800f786:	4602      	mov	r2, r0
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	1ad3      	subs	r3, r2, r3
 800f78c:	2b02      	cmp	r3, #2
 800f78e:	d901      	bls.n	800f794 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800f790:	2303      	movs	r3, #3
 800f792:	e162      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800f794:	f7ff fb58 	bl	800ee48 <LL_PWR_IsEnabledBkUpAccess>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d0f1      	beq.n	800f782 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	68db      	ldr	r3, [r3, #12]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d07b      	beq.n	800f89e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	2b85      	cmp	r3, #133	; 0x85
 800f7ac:	d003      	beq.n	800f7b6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	68db      	ldr	r3, [r3, #12]
 800f7b2:	2b05      	cmp	r3, #5
 800f7b4:	d109      	bne.n	800f7ca <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f7b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f7c2:	f043 0304 	orr.w	r3, r3, #4
 800f7c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f7ca:	f7fd fbab 	bl	800cf24 <HAL_GetTick>
 800f7ce:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f7d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f7dc:	f043 0301 	orr.w	r3, r3, #1
 800f7e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800f7e4:	e00a      	b.n	800f7fc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f7e6:	f7fd fb9d 	bl	800cf24 <HAL_GetTick>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	1ad3      	subs	r3, r2, r3
 800f7f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d901      	bls.n	800f7fc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800f7f8:	2303      	movs	r3, #3
 800f7fa:	e12e      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800f7fc:	f7ff fbd1 	bl	800efa2 <LL_RCC_LSE_IsReady>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d0ef      	beq.n	800f7e6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	68db      	ldr	r3, [r3, #12]
 800f80a:	2b81      	cmp	r3, #129	; 0x81
 800f80c:	d003      	beq.n	800f816 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	68db      	ldr	r3, [r3, #12]
 800f812:	2b85      	cmp	r3, #133	; 0x85
 800f814:	d121      	bne.n	800f85a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f816:	f7fd fb85 	bl	800cf24 <HAL_GetTick>
 800f81a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800f81c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f82c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800f830:	e00a      	b.n	800f848 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f832:	f7fd fb77 	bl	800cf24 <HAL_GetTick>
 800f836:	4602      	mov	r2, r0
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f840:	4293      	cmp	r3, r2
 800f842:	d901      	bls.n	800f848 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800f844:	2303      	movs	r3, #3
 800f846:	e108      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800f848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f854:	2b00      	cmp	r3, #0
 800f856:	d0ec      	beq.n	800f832 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800f858:	e060      	b.n	800f91c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f85a:	f7fd fb63 	bl	800cf24 <HAL_GetTick>
 800f85e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800f860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f868:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f86c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f874:	e00a      	b.n	800f88c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f876:	f7fd fb55 	bl	800cf24 <HAL_GetTick>
 800f87a:	4602      	mov	r2, r0
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	1ad3      	subs	r3, r2, r3
 800f880:	f241 3288 	movw	r2, #5000	; 0x1388
 800f884:	4293      	cmp	r3, r2
 800f886:	d901      	bls.n	800f88c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800f888:	2303      	movs	r3, #3
 800f88a:	e0e6      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f88c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d1ec      	bne.n	800f876 <HAL_RCC_OscConfig+0x50e>
 800f89c:	e03e      	b.n	800f91c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f89e:	f7fd fb41 	bl	800cf24 <HAL_GetTick>
 800f8a2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800f8a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f8b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f8b8:	e00a      	b.n	800f8d0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8ba:	f7fd fb33 	bl	800cf24 <HAL_GetTick>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	1ad3      	subs	r3, r2, r3
 800f8c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d901      	bls.n	800f8d0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800f8cc:	2303      	movs	r3, #3
 800f8ce:	e0c4      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f8d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d1ec      	bne.n	800f8ba <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f8e0:	f7fd fb20 	bl	800cf24 <HAL_GetTick>
 800f8e4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f8e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f8f2:	f023 0301 	bic.w	r3, r3, #1
 800f8f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800f8fa:	e00a      	b.n	800f912 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8fc:	f7fd fb12 	bl	800cf24 <HAL_GetTick>
 800f900:	4602      	mov	r2, r0
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	1ad3      	subs	r3, r2, r3
 800f906:	f241 3288 	movw	r2, #5000	; 0x1388
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d901      	bls.n	800f912 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800f90e:	2303      	movs	r3, #3
 800f910:	e0a3      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800f912:	f7ff fb46 	bl	800efa2 <LL_RCC_LSE_IsReady>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1ef      	bne.n	800f8fc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f920:	2b00      	cmp	r3, #0
 800f922:	f000 8099 	beq.w	800fa58 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	2b0c      	cmp	r3, #12
 800f92a:	d06c      	beq.n	800fa06 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f930:	2b02      	cmp	r3, #2
 800f932:	d14b      	bne.n	800f9cc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f934:	f7ff fc87 	bl	800f246 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f938:	f7fd faf4 	bl	800cf24 <HAL_GetTick>
 800f93c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800f93e:	e008      	b.n	800f952 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f940:	f7fd faf0 	bl	800cf24 <HAL_GetTick>
 800f944:	4602      	mov	r2, r0
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	1ad3      	subs	r3, r2, r3
 800f94a:	2b0a      	cmp	r3, #10
 800f94c:	d901      	bls.n	800f952 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800f94e:	2303      	movs	r3, #3
 800f950:	e083      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800f952:	f7ff fc86 	bl	800f262 <LL_RCC_PLL_IsReady>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d1f1      	bne.n	800f940 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f95c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f960:	68da      	ldr	r2, [r3, #12]
 800f962:	4b40      	ldr	r3, [pc, #256]	; (800fa64 <HAL_RCC_OscConfig+0x6fc>)
 800f964:	4013      	ands	r3, r2
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800f96a:	687a      	ldr	r2, [r7, #4]
 800f96c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f96e:	4311      	orrs	r1, r2
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f974:	0212      	lsls	r2, r2, #8
 800f976:	4311      	orrs	r1, r2
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f97c:	4311      	orrs	r1, r2
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f982:	4311      	orrs	r1, r2
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f988:	430a      	orrs	r2, r1
 800f98a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f98e:	4313      	orrs	r3, r2
 800f990:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f992:	f7ff fc4a 	bl	800f22a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f99a:	68db      	ldr	r3, [r3, #12]
 800f99c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f9a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9a4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9a6:	f7fd fabd 	bl	800cf24 <HAL_GetTick>
 800f9aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800f9ac:	e008      	b.n	800f9c0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9ae:	f7fd fab9 	bl	800cf24 <HAL_GetTick>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	2b0a      	cmp	r3, #10
 800f9ba:	d901      	bls.n	800f9c0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800f9bc:	2303      	movs	r3, #3
 800f9be:	e04c      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800f9c0:	f7ff fc4f 	bl	800f262 <LL_RCC_PLL_IsReady>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d0f1      	beq.n	800f9ae <HAL_RCC_OscConfig+0x646>
 800f9ca:	e045      	b.n	800fa58 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f9cc:	f7ff fc3b 	bl	800f246 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9d0:	f7fd faa8 	bl	800cf24 <HAL_GetTick>
 800f9d4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800f9d6:	e008      	b.n	800f9ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9d8:	f7fd faa4 	bl	800cf24 <HAL_GetTick>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	1ad3      	subs	r3, r2, r3
 800f9e2:	2b0a      	cmp	r3, #10
 800f9e4:	d901      	bls.n	800f9ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	e037      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800f9ea:	f7ff fc3a 	bl	800f262 <LL_RCC_PLL_IsReady>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d1f1      	bne.n	800f9d8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800f9f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f9f8:	68da      	ldr	r2, [r3, #12]
 800f9fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f9fe:	4b1a      	ldr	r3, [pc, #104]	; (800fa68 <HAL_RCC_OscConfig+0x700>)
 800fa00:	4013      	ands	r3, r2
 800fa02:	60cb      	str	r3, [r1, #12]
 800fa04:	e028      	b.n	800fa58 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d101      	bne.n	800fa12 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e023      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800fa12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	f003 0203 	and.w	r2, r3, #3
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d115      	bne.n	800fa54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d10e      	bne.n	800fa54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa40:	021b      	lsls	r3, r3, #8
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d106      	bne.n	800fa54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d001      	beq.n	800fa58 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800fa54:	2301      	movs	r3, #1
 800fa56:	e000      	b.n	800fa5a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800fa58:	2300      	movs	r3, #0
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3720      	adds	r7, #32
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
 800fa62:	bf00      	nop
 800fa64:	11c1808c 	.word	0x11c1808c
 800fa68:	eefefffc 	.word	0xeefefffc

0800fa6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b084      	sub	sp, #16
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d101      	bne.n	800fa80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	e10f      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fa80:	4b89      	ldr	r3, [pc, #548]	; (800fca8 <HAL_RCC_ClockConfig+0x23c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f003 0307 	and.w	r3, r3, #7
 800fa88:	683a      	ldr	r2, [r7, #0]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d91b      	bls.n	800fac6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa8e:	4b86      	ldr	r3, [pc, #536]	; (800fca8 <HAL_RCC_ClockConfig+0x23c>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f023 0207 	bic.w	r2, r3, #7
 800fa96:	4984      	ldr	r1, [pc, #528]	; (800fca8 <HAL_RCC_ClockConfig+0x23c>)
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fa9e:	f7fd fa41 	bl	800cf24 <HAL_GetTick>
 800faa2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800faa4:	e008      	b.n	800fab8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800faa6:	f7fd fa3d 	bl	800cf24 <HAL_GetTick>
 800faaa:	4602      	mov	r2, r0
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	1ad3      	subs	r3, r2, r3
 800fab0:	2b02      	cmp	r3, #2
 800fab2:	d901      	bls.n	800fab8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800fab4:	2303      	movs	r3, #3
 800fab6:	e0f3      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fab8:	4b7b      	ldr	r3, [pc, #492]	; (800fca8 <HAL_RCC_ClockConfig+0x23c>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f003 0307 	and.w	r3, r3, #7
 800fac0:	683a      	ldr	r2, [r7, #0]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d1ef      	bne.n	800faa6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f003 0302 	and.w	r3, r3, #2
 800face:	2b00      	cmp	r3, #0
 800fad0:	d016      	beq.n	800fb00 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	4618      	mov	r0, r3
 800fad8:	f7ff fb2a 	bl	800f130 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fadc:	f7fd fa22 	bl	800cf24 <HAL_GetTick>
 800fae0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800fae2:	e008      	b.n	800faf6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fae4:	f7fd fa1e 	bl	800cf24 <HAL_GetTick>
 800fae8:	4602      	mov	r2, r0
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	2b02      	cmp	r3, #2
 800faf0:	d901      	bls.n	800faf6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800faf2:	2303      	movs	r3, #3
 800faf4:	e0d4      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800faf6:	f7ff fbf2 	bl	800f2de <LL_RCC_IsActiveFlag_HPRE>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d0f1      	beq.n	800fae4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d016      	beq.n	800fb3a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	695b      	ldr	r3, [r3, #20]
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7ff fb20 	bl	800f156 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fb16:	f7fd fa05 	bl	800cf24 <HAL_GetTick>
 800fb1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800fb1c:	e008      	b.n	800fb30 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fb1e:	f7fd fa01 	bl	800cf24 <HAL_GetTick>
 800fb22:	4602      	mov	r2, r0
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	1ad3      	subs	r3, r2, r3
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d901      	bls.n	800fb30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800fb2c:	2303      	movs	r3, #3
 800fb2e:	e0b7      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800fb30:	f7ff fbe6 	bl	800f300 <LL_RCC_IsActiveFlag_SHDHPRE>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d0f1      	beq.n	800fb1e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f003 0304 	and.w	r3, r3, #4
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d016      	beq.n	800fb74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	68db      	ldr	r3, [r3, #12]
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff fb19 	bl	800f182 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fb50:	f7fd f9e8 	bl	800cf24 <HAL_GetTick>
 800fb54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800fb56:	e008      	b.n	800fb6a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fb58:	f7fd f9e4 	bl	800cf24 <HAL_GetTick>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	2b02      	cmp	r3, #2
 800fb64:	d901      	bls.n	800fb6a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800fb66:	2303      	movs	r3, #3
 800fb68:	e09a      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800fb6a:	f7ff fbdb 	bl	800f324 <LL_RCC_IsActiveFlag_PPRE1>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d0f1      	beq.n	800fb58 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f003 0308 	and.w	r3, r3, #8
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d017      	beq.n	800fbb0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	00db      	lsls	r3, r3, #3
 800fb86:	4618      	mov	r0, r3
 800fb88:	f7ff fb0e 	bl	800f1a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fb8c:	f7fd f9ca 	bl	800cf24 <HAL_GetTick>
 800fb90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800fb92:	e008      	b.n	800fba6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fb94:	f7fd f9c6 	bl	800cf24 <HAL_GetTick>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d901      	bls.n	800fba6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800fba2:	2303      	movs	r3, #3
 800fba4:	e07c      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800fba6:	f7ff fbce 	bl	800f346 <LL_RCC_IsActiveFlag_PPRE2>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d0f1      	beq.n	800fb94 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f003 0301 	and.w	r3, r3, #1
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d043      	beq.n	800fc44 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	2b02      	cmp	r3, #2
 800fbc2:	d106      	bne.n	800fbd2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800fbc4:	f7ff f99b 	bl	800eefe <LL_RCC_HSE_IsReady>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d11e      	bne.n	800fc0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	e066      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	2b03      	cmp	r3, #3
 800fbd8:	d106      	bne.n	800fbe8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800fbda:	f7ff fb42 	bl	800f262 <LL_RCC_PLL_IsReady>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d113      	bne.n	800fc0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e05b      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d106      	bne.n	800fbfe <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800fbf0:	f7ff fa35 	bl	800f05e <LL_RCC_MSI_IsReady>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d108      	bne.n	800fc0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e050      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800fbfe:	f7ff f9ab 	bl	800ef58 <LL_RCC_HSI_IsReady>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d101      	bne.n	800fc0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	e049      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7ff fa6f 	bl	800f0f4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fc16:	f7fd f985 	bl	800cf24 <HAL_GetTick>
 800fc1a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fc1c:	e00a      	b.n	800fc34 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fc1e:	f7fd f981 	bl	800cf24 <HAL_GetTick>
 800fc22:	4602      	mov	r2, r0
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	1ad3      	subs	r3, r2, r3
 800fc28:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d901      	bls.n	800fc34 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800fc30:	2303      	movs	r3, #3
 800fc32:	e035      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fc34:	f7ff fa71 	bl	800f11a <LL_RCC_GetSysClkSource>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	009b      	lsls	r3, r3, #2
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d1ec      	bne.n	800fc1e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fc44:	4b18      	ldr	r3, [pc, #96]	; (800fca8 <HAL_RCC_ClockConfig+0x23c>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f003 0307 	and.w	r3, r3, #7
 800fc4c:	683a      	ldr	r2, [r7, #0]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d21b      	bcs.n	800fc8a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fc52:	4b15      	ldr	r3, [pc, #84]	; (800fca8 <HAL_RCC_ClockConfig+0x23c>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f023 0207 	bic.w	r2, r3, #7
 800fc5a:	4913      	ldr	r1, [pc, #76]	; (800fca8 <HAL_RCC_ClockConfig+0x23c>)
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fc62:	f7fd f95f 	bl	800cf24 <HAL_GetTick>
 800fc66:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc68:	e008      	b.n	800fc7c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800fc6a:	f7fd f95b 	bl	800cf24 <HAL_GetTick>
 800fc6e:	4602      	mov	r2, r0
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	1ad3      	subs	r3, r2, r3
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d901      	bls.n	800fc7c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800fc78:	2303      	movs	r3, #3
 800fc7a:	e011      	b.n	800fca0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc7c:	4b0a      	ldr	r3, [pc, #40]	; (800fca8 <HAL_RCC_ClockConfig+0x23c>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f003 0307 	and.w	r3, r3, #7
 800fc84:	683a      	ldr	r2, [r7, #0]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d1ef      	bne.n	800fc6a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800fc8a:	f000 f8b3 	bl	800fdf4 <HAL_RCC_GetHCLKFreq>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	4a06      	ldr	r2, [pc, #24]	; (800fcac <HAL_RCC_ClockConfig+0x240>)
 800fc92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800fc94:	4b06      	ldr	r3, [pc, #24]	; (800fcb0 <HAL_RCC_ClockConfig+0x244>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fa fcf9 	bl	800a690 <HAL_InitTick>
 800fc9e:	4603      	mov	r3, r0
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3710      	adds	r7, #16
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	58004000 	.word	0x58004000
 800fcac:	20000080 	.word	0x20000080
 800fcb0:	20000088 	.word	0x20000088

0800fcb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fcb4:	b590      	push	{r4, r7, lr}
 800fcb6:	b087      	sub	sp, #28
 800fcb8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fcc2:	f7ff fa2a 	bl	800f11a <LL_RCC_GetSysClkSource>
 800fcc6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fcc8:	f7ff fafe 	bl	800f2c8 <LL_RCC_PLL_GetMainSource>
 800fccc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d005      	beq.n	800fce0 <HAL_RCC_GetSysClockFreq+0x2c>
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	2b0c      	cmp	r3, #12
 800fcd8:	d139      	bne.n	800fd4e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d136      	bne.n	800fd4e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800fce0:	f7ff f9cd 	bl	800f07e <LL_RCC_MSI_IsEnabledRangeSelect>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d115      	bne.n	800fd16 <HAL_RCC_GetSysClockFreq+0x62>
 800fcea:	f7ff f9c8 	bl	800f07e <LL_RCC_MSI_IsEnabledRangeSelect>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b01      	cmp	r3, #1
 800fcf2:	d106      	bne.n	800fd02 <HAL_RCC_GetSysClockFreq+0x4e>
 800fcf4:	f7ff f9d3 	bl	800f09e <LL_RCC_MSI_GetRange>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	0a1b      	lsrs	r3, r3, #8
 800fcfc:	f003 030f 	and.w	r3, r3, #15
 800fd00:	e005      	b.n	800fd0e <HAL_RCC_GetSysClockFreq+0x5a>
 800fd02:	f7ff f9d7 	bl	800f0b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800fd06:	4603      	mov	r3, r0
 800fd08:	0a1b      	lsrs	r3, r3, #8
 800fd0a:	f003 030f 	and.w	r3, r3, #15
 800fd0e:	4a36      	ldr	r2, [pc, #216]	; (800fde8 <HAL_RCC_GetSysClockFreq+0x134>)
 800fd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd14:	e014      	b.n	800fd40 <HAL_RCC_GetSysClockFreq+0x8c>
 800fd16:	f7ff f9b2 	bl	800f07e <LL_RCC_MSI_IsEnabledRangeSelect>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d106      	bne.n	800fd2e <HAL_RCC_GetSysClockFreq+0x7a>
 800fd20:	f7ff f9bd 	bl	800f09e <LL_RCC_MSI_GetRange>
 800fd24:	4603      	mov	r3, r0
 800fd26:	091b      	lsrs	r3, r3, #4
 800fd28:	f003 030f 	and.w	r3, r3, #15
 800fd2c:	e005      	b.n	800fd3a <HAL_RCC_GetSysClockFreq+0x86>
 800fd2e:	f7ff f9c1 	bl	800f0b4 <LL_RCC_MSI_GetRangeAfterStandby>
 800fd32:	4603      	mov	r3, r0
 800fd34:	091b      	lsrs	r3, r3, #4
 800fd36:	f003 030f 	and.w	r3, r3, #15
 800fd3a:	4a2b      	ldr	r2, [pc, #172]	; (800fde8 <HAL_RCC_GetSysClockFreq+0x134>)
 800fd3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd40:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d115      	bne.n	800fd74 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800fd4c:	e012      	b.n	800fd74 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	2b04      	cmp	r3, #4
 800fd52:	d102      	bne.n	800fd5a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800fd54:	4b25      	ldr	r3, [pc, #148]	; (800fdec <HAL_RCC_GetSysClockFreq+0x138>)
 800fd56:	617b      	str	r3, [r7, #20]
 800fd58:	e00c      	b.n	800fd74 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	2b08      	cmp	r3, #8
 800fd5e:	d109      	bne.n	800fd74 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800fd60:	f7ff f8a0 	bl	800eea4 <LL_RCC_HSE_IsEnabledDiv2>
 800fd64:	4603      	mov	r3, r0
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	d102      	bne.n	800fd70 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800fd6a:	4b20      	ldr	r3, [pc, #128]	; (800fdec <HAL_RCC_GetSysClockFreq+0x138>)
 800fd6c:	617b      	str	r3, [r7, #20]
 800fd6e:	e001      	b.n	800fd74 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800fd70:	4b1f      	ldr	r3, [pc, #124]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800fd72:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fd74:	f7ff f9d1 	bl	800f11a <LL_RCC_GetSysClkSource>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b0c      	cmp	r3, #12
 800fd7c:	d12f      	bne.n	800fdde <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800fd7e:	f7ff faa3 	bl	800f2c8 <LL_RCC_PLL_GetMainSource>
 800fd82:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2b02      	cmp	r3, #2
 800fd88:	d003      	beq.n	800fd92 <HAL_RCC_GetSysClockFreq+0xde>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2b03      	cmp	r3, #3
 800fd8e:	d003      	beq.n	800fd98 <HAL_RCC_GetSysClockFreq+0xe4>
 800fd90:	e00d      	b.n	800fdae <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800fd92:	4b16      	ldr	r3, [pc, #88]	; (800fdec <HAL_RCC_GetSysClockFreq+0x138>)
 800fd94:	60fb      	str	r3, [r7, #12]
        break;
 800fd96:	e00d      	b.n	800fdb4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800fd98:	f7ff f884 	bl	800eea4 <LL_RCC_HSE_IsEnabledDiv2>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d102      	bne.n	800fda8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800fda2:	4b12      	ldr	r3, [pc, #72]	; (800fdec <HAL_RCC_GetSysClockFreq+0x138>)
 800fda4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800fda6:	e005      	b.n	800fdb4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800fda8:	4b11      	ldr	r3, [pc, #68]	; (800fdf0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800fdaa:	60fb      	str	r3, [r7, #12]
        break;
 800fdac:	e002      	b.n	800fdb4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	60fb      	str	r3, [r7, #12]
        break;
 800fdb2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800fdb4:	f7ff fa66 	bl	800f284 <LL_RCC_PLL_GetN>
 800fdb8:	4602      	mov	r2, r0
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	fb03 f402 	mul.w	r4, r3, r2
 800fdc0:	f7ff fa77 	bl	800f2b2 <LL_RCC_PLL_GetDivider>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	091b      	lsrs	r3, r3, #4
 800fdc8:	3301      	adds	r3, #1
 800fdca:	fbb4 f4f3 	udiv	r4, r4, r3
 800fdce:	f7ff fa65 	bl	800f29c <LL_RCC_PLL_GetR>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	0f5b      	lsrs	r3, r3, #29
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	fbb4 f3f3 	udiv	r3, r4, r3
 800fddc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800fdde:	697b      	ldr	r3, [r7, #20]
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	371c      	adds	r7, #28
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd90      	pop	{r4, r7, pc}
 800fde8:	0801f98c 	.word	0x0801f98c
 800fdec:	00f42400 	.word	0x00f42400
 800fdf0:	01e84800 	.word	0x01e84800

0800fdf4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fdf4:	b598      	push	{r3, r4, r7, lr}
 800fdf6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800fdf8:	f7ff ff5c 	bl	800fcb4 <HAL_RCC_GetSysClockFreq>
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	f7ff f9e6 	bl	800f1ce <LL_RCC_GetAHBPrescaler>
 800fe02:	4603      	mov	r3, r0
 800fe04:	091b      	lsrs	r3, r3, #4
 800fe06:	f003 030f 	and.w	r3, r3, #15
 800fe0a:	4a03      	ldr	r2, [pc, #12]	; (800fe18 <HAL_RCC_GetHCLKFreq+0x24>)
 800fe0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	bd98      	pop	{r3, r4, r7, pc}
 800fe18:	0801f92c 	.word	0x0801f92c

0800fe1c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fe1c:	b598      	push	{r3, r4, r7, lr}
 800fe1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800fe20:	f7ff ffe8 	bl	800fdf4 <HAL_RCC_GetHCLKFreq>
 800fe24:	4604      	mov	r4, r0
 800fe26:	f7ff f9ea 	bl	800f1fe <LL_RCC_GetAPB1Prescaler>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	0a1b      	lsrs	r3, r3, #8
 800fe2e:	4a03      	ldr	r2, [pc, #12]	; (800fe3c <HAL_RCC_GetPCLK1Freq+0x20>)
 800fe30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe34:	fa24 f303 	lsr.w	r3, r4, r3
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	bd98      	pop	{r3, r4, r7, pc}
 800fe3c:	0801f96c 	.word	0x0801f96c

0800fe40 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fe40:	b598      	push	{r3, r4, r7, lr}
 800fe42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800fe44:	f7ff ffd6 	bl	800fdf4 <HAL_RCC_GetHCLKFreq>
 800fe48:	4604      	mov	r4, r0
 800fe4a:	f7ff f9e3 	bl	800f214 <LL_RCC_GetAPB2Prescaler>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	0adb      	lsrs	r3, r3, #11
 800fe52:	4a03      	ldr	r2, [pc, #12]	; (800fe60 <HAL_RCC_GetPCLK2Freq+0x20>)
 800fe54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe58:	fa24 f303 	lsr.w	r3, r4, r3
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	bd98      	pop	{r3, r4, r7, pc}
 800fe60:	0801f96c 	.word	0x0801f96c

0800fe64 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b085      	sub	sp, #20
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d02d      	beq.n	800fed0 <HAL_RCC_GetClockConfig+0x6c>
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d02a      	beq.n	800fed0 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	224f      	movs	r2, #79	; 0x4f
 800fe7e:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 800fe80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fe84:	689b      	ldr	r3, [r3, #8]
 800fe86:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f003 020c 	and.w	r2, r3, #12
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 800feb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800feb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800feb8:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	011b      	lsls	r3, r3, #4
 800febe:	b2da      	uxtb	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 800fec4:	4b05      	ldr	r3, [pc, #20]	; (800fedc <HAL_RCC_GetClockConfig+0x78>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f003 0207 	and.w	r2, r3, #7
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	601a      	str	r2, [r3, #0]
  }
}
 800fed0:	bf00      	nop
 800fed2:	3714      	adds	r7, #20
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bc80      	pop	{r7}
 800fed8:	4770      	bx	lr
 800feda:	bf00      	nop
 800fedc:	58004000 	.word	0x58004000

0800fee0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800fee0:	b590      	push	{r4, r7, lr}
 800fee2:	b085      	sub	sp, #20
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	091b      	lsrs	r3, r3, #4
 800feec:	f003 030f 	and.w	r3, r3, #15
 800fef0:	4a10      	ldr	r2, [pc, #64]	; (800ff34 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800fef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fef6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800fef8:	f7ff f974 	bl	800f1e4 <LL_RCC_GetAHB3Prescaler>
 800fefc:	4603      	mov	r3, r0
 800fefe:	091b      	lsrs	r3, r3, #4
 800ff00:	f003 030f 	and.w	r3, r3, #15
 800ff04:	4a0c      	ldr	r2, [pc, #48]	; (800ff38 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800ff06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff0a:	68fa      	ldr	r2, [r7, #12]
 800ff0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff10:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	4a09      	ldr	r2, [pc, #36]	; (800ff3c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800ff16:	fba2 2303 	umull	r2, r3, r2, r3
 800ff1a:	0c9c      	lsrs	r4, r3, #18
 800ff1c:	f7fe ff88 	bl	800ee30 <HAL_PWREx_GetVoltageRange>
 800ff20:	4603      	mov	r3, r0
 800ff22:	4619      	mov	r1, r3
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 f80b 	bl	800ff40 <RCC_SetFlashLatency>
 800ff2a:	4603      	mov	r3, r0
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3714      	adds	r7, #20
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd90      	pop	{r4, r7, pc}
 800ff34:	0801f98c 	.word	0x0801f98c
 800ff38:	0801f92c 	.word	0x0801f92c
 800ff3c:	431bde83 	.word	0x431bde83

0800ff40 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b08e      	sub	sp, #56	; 0x38
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800ff4a:	4a3a      	ldr	r2, [pc, #232]	; (8010034 <RCC_SetFlashLatency+0xf4>)
 800ff4c:	f107 0320 	add.w	r3, r7, #32
 800ff50:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff54:	6018      	str	r0, [r3, #0]
 800ff56:	3304      	adds	r3, #4
 800ff58:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800ff5a:	4a37      	ldr	r2, [pc, #220]	; (8010038 <RCC_SetFlashLatency+0xf8>)
 800ff5c:	f107 0318 	add.w	r3, r7, #24
 800ff60:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff64:	6018      	str	r0, [r3, #0]
 800ff66:	3304      	adds	r3, #4
 800ff68:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800ff6a:	4a34      	ldr	r2, [pc, #208]	; (801003c <RCC_SetFlashLatency+0xfc>)
 800ff6c:	f107 030c 	add.w	r3, r7, #12
 800ff70:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff72:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ff76:	2300      	movs	r3, #0
 800ff78:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff80:	d11b      	bne.n	800ffba <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ff82:	2300      	movs	r3, #0
 800ff84:	633b      	str	r3, [r7, #48]	; 0x30
 800ff86:	e014      	b.n	800ffb2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800ff88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	3338      	adds	r3, #56	; 0x38
 800ff8e:	443b      	add	r3, r7
 800ff90:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800ff94:	461a      	mov	r2, r3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d807      	bhi.n	800ffac <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	3338      	adds	r3, #56	; 0x38
 800ffa2:	443b      	add	r3, r7
 800ffa4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ffa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffaa:	e021      	b.n	800fff0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ffac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffae:	3301      	adds	r3, #1
 800ffb0:	633b      	str	r3, [r7, #48]	; 0x30
 800ffb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb4:	2b02      	cmp	r3, #2
 800ffb6:	d9e7      	bls.n	800ff88 <RCC_SetFlashLatency+0x48>
 800ffb8:	e01a      	b.n	800fff0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ffba:	2300      	movs	r3, #0
 800ffbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffbe:	e014      	b.n	800ffea <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800ffc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc2:	005b      	lsls	r3, r3, #1
 800ffc4:	3338      	adds	r3, #56	; 0x38
 800ffc6:	443b      	add	r3, r7
 800ffc8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800ffcc:	461a      	mov	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d807      	bhi.n	800ffe4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ffd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd6:	009b      	lsls	r3, r3, #2
 800ffd8:	3338      	adds	r3, #56	; 0x38
 800ffda:	443b      	add	r3, r7
 800ffdc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ffe0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffe2:	e005      	b.n	800fff0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ffe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffec:	2b02      	cmp	r3, #2
 800ffee:	d9e7      	bls.n	800ffc0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800fff0:	4b13      	ldr	r3, [pc, #76]	; (8010040 <RCC_SetFlashLatency+0x100>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f023 0207 	bic.w	r2, r3, #7
 800fff8:	4911      	ldr	r1, [pc, #68]	; (8010040 <RCC_SetFlashLatency+0x100>)
 800fffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fffc:	4313      	orrs	r3, r2
 800fffe:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010000:	f7fc ff90 	bl	800cf24 <HAL_GetTick>
 8010004:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8010006:	e008      	b.n	801001a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8010008:	f7fc ff8c 	bl	800cf24 <HAL_GetTick>
 801000c:	4602      	mov	r2, r0
 801000e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010010:	1ad3      	subs	r3, r2, r3
 8010012:	2b02      	cmp	r3, #2
 8010014:	d901      	bls.n	801001a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8010016:	2303      	movs	r3, #3
 8010018:	e007      	b.n	801002a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801001a:	4b09      	ldr	r3, [pc, #36]	; (8010040 <RCC_SetFlashLatency+0x100>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f003 0307 	and.w	r3, r3, #7
 8010022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010024:	429a      	cmp	r2, r3
 8010026:	d1ef      	bne.n	8010008 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8010028:	2300      	movs	r3, #0
}
 801002a:	4618      	mov	r0, r3
 801002c:	3738      	adds	r7, #56	; 0x38
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	0801f818 	.word	0x0801f818
 8010038:	0801f820 	.word	0x0801f820
 801003c:	0801f828 	.word	0x0801f828
 8010040:	58004000 	.word	0x58004000

08010044 <LL_RCC_LSE_IsReady>:
{
 8010044:	b480      	push	{r7}
 8010046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8010048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801004c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010050:	f003 0302 	and.w	r3, r3, #2
 8010054:	2b02      	cmp	r3, #2
 8010056:	d101      	bne.n	801005c <LL_RCC_LSE_IsReady+0x18>
 8010058:	2301      	movs	r3, #1
 801005a:	e000      	b.n	801005e <LL_RCC_LSE_IsReady+0x1a>
 801005c:	2300      	movs	r3, #0
}
 801005e:	4618      	mov	r0, r3
 8010060:	46bd      	mov	sp, r7
 8010062:	bc80      	pop	{r7}
 8010064:	4770      	bx	lr

08010066 <LL_RCC_SetUSARTClockSource>:
{
 8010066:	b480      	push	{r7}
 8010068:	b083      	sub	sp, #12
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 801006e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010072:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	0c1b      	lsrs	r3, r3, #16
 801007a:	43db      	mvns	r3, r3
 801007c:	401a      	ands	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	b29b      	uxth	r3, r3
 8010082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010086:	4313      	orrs	r3, r2
 8010088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801008c:	bf00      	nop
 801008e:	370c      	adds	r7, #12
 8010090:	46bd      	mov	sp, r7
 8010092:	bc80      	pop	{r7}
 8010094:	4770      	bx	lr

08010096 <LL_RCC_SetI2SClockSource>:
{
 8010096:	b480      	push	{r7}
 8010098:	b083      	sub	sp, #12
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 801009e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4313      	orrs	r3, r2
 80100b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80100b6:	bf00      	nop
 80100b8:	370c      	adds	r7, #12
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bc80      	pop	{r7}
 80100be:	4770      	bx	lr

080100c0 <LL_RCC_SetLPUARTClockSource>:
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80100c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80100d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	4313      	orrs	r3, r2
 80100dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80100e0:	bf00      	nop
 80100e2:	370c      	adds	r7, #12
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bc80      	pop	{r7}
 80100e8:	4770      	bx	lr

080100ea <LL_RCC_SetI2CClockSource>:
{
 80100ea:	b480      	push	{r7}
 80100ec:	b083      	sub	sp, #12
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80100f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	091b      	lsrs	r3, r3, #4
 80100fe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8010102:	43db      	mvns	r3, r3
 8010104:	401a      	ands	r2, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	011b      	lsls	r3, r3, #4
 801010a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801010e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010112:	4313      	orrs	r3, r2
 8010114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8010118:	bf00      	nop
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	bc80      	pop	{r7}
 8010120:	4770      	bx	lr

08010122 <LL_RCC_SetLPTIMClockSource>:
{
 8010122:	b480      	push	{r7}
 8010124:	b083      	sub	sp, #12
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801012a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801012e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	0c1b      	lsrs	r3, r3, #16
 8010136:	041b      	lsls	r3, r3, #16
 8010138:	43db      	mvns	r3, r3
 801013a:	401a      	ands	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	041b      	lsls	r3, r3, #16
 8010140:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010144:	4313      	orrs	r3, r2
 8010146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801014a:	bf00      	nop
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	bc80      	pop	{r7}
 8010152:	4770      	bx	lr

08010154 <LL_RCC_SetRNGClockSource>:
{
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 801015c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010164:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8010168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4313      	orrs	r3, r2
 8010170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8010174:	bf00      	nop
 8010176:	370c      	adds	r7, #12
 8010178:	46bd      	mov	sp, r7
 801017a:	bc80      	pop	{r7}
 801017c:	4770      	bx	lr

0801017e <LL_RCC_SetADCClockSource>:
{
 801017e:	b480      	push	{r7}
 8010180:	b083      	sub	sp, #12
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8010186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801018a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801018e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4313      	orrs	r3, r2
 801019a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801019e:	bf00      	nop
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bc80      	pop	{r7}
 80101a6:	4770      	bx	lr

080101a8 <LL_RCC_SetRTCClockSource>:
{
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80101b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80101bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4313      	orrs	r3, r2
 80101c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80101c8:	bf00      	nop
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bc80      	pop	{r7}
 80101d0:	4770      	bx	lr

080101d2 <LL_RCC_GetRTCClockSource>:
{
 80101d2:	b480      	push	{r7}
 80101d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80101d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101de:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bc80      	pop	{r7}
 80101e8:	4770      	bx	lr

080101ea <LL_RCC_ForceBackupDomainReset>:
{
 80101ea:	b480      	push	{r7}
 80101ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80101ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80101fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80101fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8010202:	bf00      	nop
 8010204:	46bd      	mov	sp, r7
 8010206:	bc80      	pop	{r7}
 8010208:	4770      	bx	lr

0801020a <LL_RCC_ReleaseBackupDomainReset>:
{
 801020a:	b480      	push	{r7}
 801020c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801020e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801021a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801021e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8010222:	bf00      	nop
 8010224:	46bd      	mov	sp, r7
 8010226:	bc80      	pop	{r7}
 8010228:	4770      	bx	lr
	...

0801022c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b086      	sub	sp, #24
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8010234:	2300      	movs	r3, #0
 8010236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8010238:	2300      	movs	r3, #0
 801023a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 801023c:	2300      	movs	r3, #0
 801023e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010248:	2b00      	cmp	r3, #0
 801024a:	d058      	beq.n	80102fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 801024c:	f7fe fde2 	bl	800ee14 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010250:	f7fc fe68 	bl	800cf24 <HAL_GetTick>
 8010254:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8010256:	e009      	b.n	801026c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010258:	f7fc fe64 	bl	800cf24 <HAL_GetTick>
 801025c:	4602      	mov	r2, r0
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	1ad3      	subs	r3, r2, r3
 8010262:	2b02      	cmp	r3, #2
 8010264:	d902      	bls.n	801026c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8010266:	2303      	movs	r3, #3
 8010268:	74fb      	strb	r3, [r7, #19]
        break;
 801026a:	e006      	b.n	801027a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 801026c:	4b7b      	ldr	r3, [pc, #492]	; (801045c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010278:	d1ee      	bne.n	8010258 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 801027a:	7cfb      	ldrb	r3, [r7, #19]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d13c      	bne.n	80102fa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8010280:	f7ff ffa7 	bl	80101d2 <LL_RCC_GetRTCClockSource>
 8010284:	4602      	mov	r2, r0
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801028a:	429a      	cmp	r2, r3
 801028c:	d00f      	beq.n	80102ae <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801028e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801029a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801029c:	f7ff ffa5 	bl	80101ea <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80102a0:	f7ff ffb3 	bl	801020a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80102a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	f003 0302 	and.w	r3, r3, #2
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d014      	beq.n	80102e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80102b8:	f7fc fe34 	bl	800cf24 <HAL_GetTick>
 80102bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80102be:	e00b      	b.n	80102d8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80102c0:	f7fc fe30 	bl	800cf24 <HAL_GetTick>
 80102c4:	4602      	mov	r2, r0
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	1ad3      	subs	r3, r2, r3
 80102ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d902      	bls.n	80102d8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80102d2:	2303      	movs	r3, #3
 80102d4:	74fb      	strb	r3, [r7, #19]
            break;
 80102d6:	e004      	b.n	80102e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80102d8:	f7ff feb4 	bl	8010044 <LL_RCC_LSE_IsReady>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d1ee      	bne.n	80102c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80102e2:	7cfb      	ldrb	r3, [r7, #19]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d105      	bne.n	80102f4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7ff ff5b 	bl	80101a8 <LL_RCC_SetRTCClockSource>
 80102f2:	e004      	b.n	80102fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80102f4:	7cfb      	ldrb	r3, [r7, #19]
 80102f6:	74bb      	strb	r3, [r7, #18]
 80102f8:	e001      	b.n	80102fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102fa:	7cfb      	ldrb	r3, [r7, #19]
 80102fc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	f003 0301 	and.w	r3, r3, #1
 8010306:	2b00      	cmp	r3, #0
 8010308:	d004      	beq.n	8010314 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	4618      	mov	r0, r3
 8010310:	f7ff fea9 	bl	8010066 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f003 0302 	and.w	r3, r3, #2
 801031c:	2b00      	cmp	r3, #0
 801031e:	d004      	beq.n	801032a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	689b      	ldr	r3, [r3, #8]
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff fe9e 	bl	8010066 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	f003 0320 	and.w	r3, r3, #32
 8010332:	2b00      	cmp	r3, #0
 8010334:	d004      	beq.n	8010340 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	691b      	ldr	r3, [r3, #16]
 801033a:	4618      	mov	r0, r3
 801033c:	f7ff fec0 	bl	80100c0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010348:	2b00      	cmp	r3, #0
 801034a:	d004      	beq.n	8010356 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6a1b      	ldr	r3, [r3, #32]
 8010350:	4618      	mov	r0, r3
 8010352:	f7ff fee6 	bl	8010122 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801035e:	2b00      	cmp	r3, #0
 8010360:	d004      	beq.n	801036c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010366:	4618      	mov	r0, r3
 8010368:	f7ff fedb 	bl	8010122 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010374:	2b00      	cmp	r3, #0
 8010376:	d004      	beq.n	8010382 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037c:	4618      	mov	r0, r3
 801037e:	f7ff fed0 	bl	8010122 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801038a:	2b00      	cmp	r3, #0
 801038c:	d004      	beq.n	8010398 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	695b      	ldr	r3, [r3, #20]
 8010392:	4618      	mov	r0, r3
 8010394:	f7ff fea9 	bl	80100ea <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d004      	beq.n	80103ae <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	699b      	ldr	r3, [r3, #24]
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff fe9e 	bl	80100ea <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d004      	beq.n	80103c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	69db      	ldr	r3, [r3, #28]
 80103be:	4618      	mov	r0, r3
 80103c0:	f7ff fe93 	bl	80100ea <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f003 0310 	and.w	r3, r3, #16
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d011      	beq.n	80103f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	68db      	ldr	r3, [r3, #12]
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7ff fe5e 	bl	8010096 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103e2:	d107      	bne.n	80103f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80103e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80103ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80103f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d010      	beq.n	8010422 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010404:	4618      	mov	r0, r3
 8010406:	f7ff fea5 	bl	8010154 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801040e:	2b00      	cmp	r3, #0
 8010410:	d107      	bne.n	8010422 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8010412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010416:	68db      	ldr	r3, [r3, #12]
 8010418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801041c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010420:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801042a:	2b00      	cmp	r3, #0
 801042c:	d011      	beq.n	8010452 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010432:	4618      	mov	r0, r3
 8010434:	f7ff fea3 	bl	801017e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801043c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010440:	d107      	bne.n	8010452 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8010442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801044c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010450:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8010452:	7cbb      	ldrb	r3, [r7, #18]
}
 8010454:	4618      	mov	r0, r3
 8010456:	3718      	adds	r7, #24
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	58000400 	.word	0x58000400

08010460 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010468:	2301      	movs	r3, #1
 801046a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d071      	beq.n	8010556 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010478:	b2db      	uxtb	r3, r3
 801047a:	2b00      	cmp	r3, #0
 801047c:	d106      	bne.n	801048c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2200      	movs	r2, #0
 8010482:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f7fa f862 	bl	800a550 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2202      	movs	r2, #2
 8010490:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010494:	4b32      	ldr	r3, [pc, #200]	; (8010560 <HAL_RTC_Init+0x100>)
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	f003 0310 	and.w	r3, r3, #16
 801049c:	2b10      	cmp	r3, #16
 801049e:	d051      	beq.n	8010544 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80104a0:	4b2f      	ldr	r3, [pc, #188]	; (8010560 <HAL_RTC_Init+0x100>)
 80104a2:	22ca      	movs	r2, #202	; 0xca
 80104a4:	625a      	str	r2, [r3, #36]	; 0x24
 80104a6:	4b2e      	ldr	r3, [pc, #184]	; (8010560 <HAL_RTC_Init+0x100>)
 80104a8:	2253      	movs	r2, #83	; 0x53
 80104aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 faa3 	bl	80109f8 <RTC_EnterInitMode>
 80104b2:	4603      	mov	r3, r0
 80104b4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80104b6:	7bfb      	ldrb	r3, [r7, #15]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d13f      	bne.n	801053c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80104bc:	4b28      	ldr	r3, [pc, #160]	; (8010560 <HAL_RTC_Init+0x100>)
 80104be:	699b      	ldr	r3, [r3, #24]
 80104c0:	4a27      	ldr	r2, [pc, #156]	; (8010560 <HAL_RTC_Init+0x100>)
 80104c2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80104c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104ca:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80104cc:	4b24      	ldr	r3, [pc, #144]	; (8010560 <HAL_RTC_Init+0x100>)
 80104ce:	699a      	ldr	r2, [r3, #24]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6859      	ldr	r1, [r3, #4]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	691b      	ldr	r3, [r3, #16]
 80104d8:	4319      	orrs	r1, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	699b      	ldr	r3, [r3, #24]
 80104de:	430b      	orrs	r3, r1
 80104e0:	491f      	ldr	r1, [pc, #124]	; (8010560 <HAL_RTC_Init+0x100>)
 80104e2:	4313      	orrs	r3, r2
 80104e4:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68da      	ldr	r2, [r3, #12]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	689b      	ldr	r3, [r3, #8]
 80104ee:	041b      	lsls	r3, r3, #16
 80104f0:	491b      	ldr	r1, [pc, #108]	; (8010560 <HAL_RTC_Init+0x100>)
 80104f2:	4313      	orrs	r3, r2
 80104f4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80104f6:	4b1a      	ldr	r3, [pc, #104]	; (8010560 <HAL_RTC_Init+0x100>)
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010506:	430b      	orrs	r3, r1
 8010508:	4915      	ldr	r1, [pc, #84]	; (8010560 <HAL_RTC_Init+0x100>)
 801050a:	4313      	orrs	r3, r2
 801050c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f000 faa6 	bl	8010a60 <RTC_ExitInitMode>
 8010514:	4603      	mov	r3, r0
 8010516:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8010518:	7bfb      	ldrb	r3, [r7, #15]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d10e      	bne.n	801053c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 801051e:	4b10      	ldr	r3, [pc, #64]	; (8010560 <HAL_RTC_Init+0x100>)
 8010520:	699b      	ldr	r3, [r3, #24]
 8010522:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6a19      	ldr	r1, [r3, #32]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	69db      	ldr	r3, [r3, #28]
 801052e:	4319      	orrs	r1, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	695b      	ldr	r3, [r3, #20]
 8010534:	430b      	orrs	r3, r1
 8010536:	490a      	ldr	r1, [pc, #40]	; (8010560 <HAL_RTC_Init+0x100>)
 8010538:	4313      	orrs	r3, r2
 801053a:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801053c:	4b08      	ldr	r3, [pc, #32]	; (8010560 <HAL_RTC_Init+0x100>)
 801053e:	22ff      	movs	r2, #255	; 0xff
 8010540:	625a      	str	r2, [r3, #36]	; 0x24
 8010542:	e001      	b.n	8010548 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8010544:	2300      	movs	r3, #0
 8010546:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010548:	7bfb      	ldrb	r3, [r7, #15]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d103      	bne.n	8010556 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2201      	movs	r2, #1
 8010552:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8010556:	7bfb      	ldrb	r3, [r7, #15]
}
 8010558:	4618      	mov	r0, r3
 801055a:	3710      	adds	r7, #16
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}
 8010560:	40002800 	.word	0x40002800

08010564 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010564:	b590      	push	{r4, r7, lr}
 8010566:	b087      	sub	sp, #28
 8010568:	af00      	add	r7, sp, #0
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010576:	2b01      	cmp	r3, #1
 8010578:	d101      	bne.n	801057e <HAL_RTC_SetTime+0x1a>
 801057a:	2302      	movs	r3, #2
 801057c:	e088      	b.n	8010690 <HAL_RTC_SetTime+0x12c>
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2201      	movs	r2, #1
 8010582:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2202      	movs	r2, #2
 801058a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801058e:	4b42      	ldr	r3, [pc, #264]	; (8010698 <HAL_RTC_SetTime+0x134>)
 8010590:	22ca      	movs	r2, #202	; 0xca
 8010592:	625a      	str	r2, [r3, #36]	; 0x24
 8010594:	4b40      	ldr	r3, [pc, #256]	; (8010698 <HAL_RTC_SetTime+0x134>)
 8010596:	2253      	movs	r2, #83	; 0x53
 8010598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801059a:	68f8      	ldr	r0, [r7, #12]
 801059c:	f000 fa2c 	bl	80109f8 <RTC_EnterInitMode>
 80105a0:	4603      	mov	r3, r0
 80105a2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80105a4:	7cfb      	ldrb	r3, [r7, #19]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d15e      	bne.n	8010668 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80105aa:	4b3b      	ldr	r3, [pc, #236]	; (8010698 <HAL_RTC_SetTime+0x134>)
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80105b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105b6:	d057      	beq.n	8010668 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d125      	bne.n	801060a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80105be:	4b36      	ldr	r3, [pc, #216]	; (8010698 <HAL_RTC_SetTime+0x134>)
 80105c0:	699b      	ldr	r3, [r3, #24]
 80105c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d102      	bne.n	80105d0 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	2200      	movs	r2, #0
 80105ce:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	4618      	mov	r0, r3
 80105d6:	f000 fa81 	bl	8010adc <RTC_ByteToBcd2>
 80105da:	4603      	mov	r3, r0
 80105dc:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	785b      	ldrb	r3, [r3, #1]
 80105e2:	4618      	mov	r0, r3
 80105e4:	f000 fa7a 	bl	8010adc <RTC_ByteToBcd2>
 80105e8:	4603      	mov	r3, r0
 80105ea:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80105ec:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	789b      	ldrb	r3, [r3, #2]
 80105f2:	4618      	mov	r0, r3
 80105f4:	f000 fa72 	bl	8010adc <RTC_ByteToBcd2>
 80105f8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80105fa:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	78db      	ldrb	r3, [r3, #3]
 8010602:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010604:	4313      	orrs	r3, r2
 8010606:	617b      	str	r3, [r7, #20]
 8010608:	e017      	b.n	801063a <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 801060a:	4b23      	ldr	r3, [pc, #140]	; (8010698 <HAL_RTC_SetTime+0x134>)
 801060c:	699b      	ldr	r3, [r3, #24]
 801060e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010612:	2b00      	cmp	r3, #0
 8010614:	d102      	bne.n	801061c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	2200      	movs	r2, #0
 801061a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	785b      	ldrb	r3, [r3, #1]
 8010626:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010628:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 801062a:	68ba      	ldr	r2, [r7, #8]
 801062c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801062e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	78db      	ldrb	r3, [r3, #3]
 8010634:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010636:	4313      	orrs	r3, r2
 8010638:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 801063a:	4a17      	ldr	r2, [pc, #92]	; (8010698 <HAL_RTC_SetTime+0x134>)
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010642:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010646:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8010648:	4b13      	ldr	r3, [pc, #76]	; (8010698 <HAL_RTC_SetTime+0x134>)
 801064a:	699b      	ldr	r3, [r3, #24]
 801064c:	4a12      	ldr	r2, [pc, #72]	; (8010698 <HAL_RTC_SetTime+0x134>)
 801064e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010652:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8010654:	4b10      	ldr	r3, [pc, #64]	; (8010698 <HAL_RTC_SetTime+0x134>)
 8010656:	699a      	ldr	r2, [r3, #24]
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	68d9      	ldr	r1, [r3, #12]
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	691b      	ldr	r3, [r3, #16]
 8010660:	430b      	orrs	r3, r1
 8010662:	490d      	ldr	r1, [pc, #52]	; (8010698 <HAL_RTC_SetTime+0x134>)
 8010664:	4313      	orrs	r3, r2
 8010666:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8010668:	68f8      	ldr	r0, [r7, #12]
 801066a:	f000 f9f9 	bl	8010a60 <RTC_ExitInitMode>
 801066e:	4603      	mov	r3, r0
 8010670:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010672:	4b09      	ldr	r3, [pc, #36]	; (8010698 <HAL_RTC_SetTime+0x134>)
 8010674:	22ff      	movs	r2, #255	; 0xff
 8010676:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010678:	7cfb      	ldrb	r3, [r7, #19]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d103      	bne.n	8010686 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2201      	movs	r2, #1
 8010682:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2200      	movs	r2, #0
 801068a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 801068e:	7cfb      	ldrb	r3, [r7, #19]
}
 8010690:	4618      	mov	r0, r3
 8010692:	371c      	adds	r7, #28
 8010694:	46bd      	mov	sp, r7
 8010696:	bd90      	pop	{r4, r7, pc}
 8010698:	40002800 	.word	0x40002800

0801069c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801069c:	b590      	push	{r4, r7, lr}
 801069e:	b087      	sub	sp, #28
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	d101      	bne.n	80106b6 <HAL_RTC_SetDate+0x1a>
 80106b2:	2302      	movs	r3, #2
 80106b4:	e071      	b.n	801079a <HAL_RTC_SetDate+0xfe>
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2201      	movs	r2, #1
 80106ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2202      	movs	r2, #2
 80106c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d10e      	bne.n	80106ea <HAL_RTC_SetDate+0x4e>
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	785b      	ldrb	r3, [r3, #1]
 80106d0:	f003 0310 	and.w	r3, r3, #16
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d008      	beq.n	80106ea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	785b      	ldrb	r3, [r3, #1]
 80106dc:	f023 0310 	bic.w	r3, r3, #16
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	330a      	adds	r3, #10
 80106e4:	b2da      	uxtb	r2, r3
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d11c      	bne.n	801072a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	78db      	ldrb	r3, [r3, #3]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f000 f9f1 	bl	8010adc <RTC_ByteToBcd2>
 80106fa:	4603      	mov	r3, r0
 80106fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	785b      	ldrb	r3, [r3, #1]
 8010702:	4618      	mov	r0, r3
 8010704:	f000 f9ea 	bl	8010adc <RTC_ByteToBcd2>
 8010708:	4603      	mov	r3, r0
 801070a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 801070c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	789b      	ldrb	r3, [r3, #2]
 8010712:	4618      	mov	r0, r3
 8010714:	f000 f9e2 	bl	8010adc <RTC_ByteToBcd2>
 8010718:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801071a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010724:	4313      	orrs	r3, r2
 8010726:	617b      	str	r3, [r7, #20]
 8010728:	e00e      	b.n	8010748 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	78db      	ldrb	r3, [r3, #3]
 801072e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	785b      	ldrb	r3, [r3, #1]
 8010734:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010736:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8010738:	68ba      	ldr	r2, [r7, #8]
 801073a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801073c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010744:	4313      	orrs	r3, r2
 8010746:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010748:	4b16      	ldr	r3, [pc, #88]	; (80107a4 <HAL_RTC_SetDate+0x108>)
 801074a:	22ca      	movs	r2, #202	; 0xca
 801074c:	625a      	str	r2, [r3, #36]	; 0x24
 801074e:	4b15      	ldr	r3, [pc, #84]	; (80107a4 <HAL_RTC_SetDate+0x108>)
 8010750:	2253      	movs	r2, #83	; 0x53
 8010752:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	f000 f94f 	bl	80109f8 <RTC_EnterInitMode>
 801075a:	4603      	mov	r3, r0
 801075c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801075e:	7cfb      	ldrb	r3, [r7, #19]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d10b      	bne.n	801077c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8010764:	4a0f      	ldr	r2, [pc, #60]	; (80107a4 <HAL_RTC_SetDate+0x108>)
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801076c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010770:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010772:	68f8      	ldr	r0, [r7, #12]
 8010774:	f000 f974 	bl	8010a60 <RTC_ExitInitMode>
 8010778:	4603      	mov	r3, r0
 801077a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801077c:	4b09      	ldr	r3, [pc, #36]	; (80107a4 <HAL_RTC_SetDate+0x108>)
 801077e:	22ff      	movs	r2, #255	; 0xff
 8010780:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010782:	7cfb      	ldrb	r3, [r7, #19]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d103      	bne.n	8010790 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2201      	movs	r2, #1
 801078c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8010798:	7cfb      	ldrb	r3, [r7, #19]
}
 801079a:	4618      	mov	r0, r3
 801079c:	371c      	adds	r7, #28
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd90      	pop	{r4, r7, pc}
 80107a2:	bf00      	nop
 80107a4:	40002800 	.word	0x40002800

080107a8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80107a8:	b590      	push	{r4, r7, lr}
 80107aa:	b087      	sub	sp, #28
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80107b4:	2300      	movs	r3, #0
 80107b6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d101      	bne.n	80107c6 <HAL_RTC_SetAlarm+0x1e>
 80107c2:	2302      	movs	r3, #2
 80107c4:	e0eb      	b.n	801099e <HAL_RTC_SetAlarm+0x1f6>
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2201      	movs	r2, #1
 80107ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2202      	movs	r2, #2
 80107d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80107d6:	4b74      	ldr	r3, [pc, #464]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80107de:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107e6:	d06a      	beq.n	80108be <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d13a      	bne.n	8010864 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80107ee:	4b6e      	ldr	r3, [pc, #440]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 80107f0:	699b      	ldr	r3, [r3, #24]
 80107f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d102      	bne.n	8010800 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	2200      	movs	r2, #0
 80107fe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	695b      	ldr	r3, [r3, #20]
 8010804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	4618      	mov	r0, r3
 801080e:	f000 f965 	bl	8010adc <RTC_ByteToBcd2>
 8010812:	4603      	mov	r3, r0
 8010814:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	785b      	ldrb	r3, [r3, #1]
 801081a:	4618      	mov	r0, r3
 801081c:	f000 f95e 	bl	8010adc <RTC_ByteToBcd2>
 8010820:	4603      	mov	r3, r0
 8010822:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010824:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	789b      	ldrb	r3, [r3, #2]
 801082a:	4618      	mov	r0, r3
 801082c:	f000 f956 	bl	8010adc <RTC_ByteToBcd2>
 8010830:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010832:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	78db      	ldrb	r3, [r3, #3]
 801083a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801083c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010846:	4618      	mov	r0, r3
 8010848:	f000 f948 	bl	8010adc <RTC_ByteToBcd2>
 801084c:	4603      	mov	r3, r0
 801084e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010850:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010858:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801085e:	4313      	orrs	r3, r2
 8010860:	617b      	str	r3, [r7, #20]
 8010862:	e02c      	b.n	80108be <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	695b      	ldr	r3, [r3, #20]
 8010868:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 801086c:	d00d      	beq.n	801088a <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	695b      	ldr	r3, [r3, #20]
 8010872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010876:	d008      	beq.n	801088a <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8010878:	4b4b      	ldr	r3, [pc, #300]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 801087a:	699b      	ldr	r3, [r3, #24]
 801087c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010880:	2b00      	cmp	r3, #0
 8010882:	d102      	bne.n	801088a <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	2200      	movs	r2, #0
 8010888:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	785b      	ldrb	r3, [r3, #1]
 8010894:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010896:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010898:	68ba      	ldr	r2, [r7, #8]
 801089a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801089c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	78db      	ldrb	r3, [r3, #3]
 80108a2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80108a4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80108ac:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80108ae:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80108b4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80108ba:	4313      	orrs	r3, r2
 80108bc:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80108be:	4b3a      	ldr	r3, [pc, #232]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 80108c0:	22ca      	movs	r2, #202	; 0xca
 80108c2:	625a      	str	r2, [r3, #36]	; 0x24
 80108c4:	4b38      	ldr	r3, [pc, #224]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 80108c6:	2253      	movs	r2, #83	; 0x53
 80108c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108d2:	d12c      	bne.n	801092e <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 80108d4:	4b34      	ldr	r3, [pc, #208]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 80108d6:	699b      	ldr	r3, [r3, #24]
 80108d8:	4a33      	ldr	r2, [pc, #204]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 80108da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80108de:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80108e0:	4b31      	ldr	r3, [pc, #196]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 80108e2:	2201      	movs	r2, #1
 80108e4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108ec:	d107      	bne.n	80108fe <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	699a      	ldr	r2, [r3, #24]
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	69db      	ldr	r3, [r3, #28]
 80108f6:	492c      	ldr	r1, [pc, #176]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 80108f8:	4313      	orrs	r3, r2
 80108fa:	644b      	str	r3, [r1, #68]	; 0x44
 80108fc:	e006      	b.n	801090c <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80108fe:	4a2a      	ldr	r2, [pc, #168]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8010904:	4a28      	ldr	r2, [pc, #160]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	699b      	ldr	r3, [r3, #24]
 801090a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 801090c:	4a26      	ldr	r2, [pc, #152]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010918:	f043 0201 	orr.w	r2, r3, #1
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8010920:	4b21      	ldr	r3, [pc, #132]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010922:	699b      	ldr	r3, [r3, #24]
 8010924:	4a20      	ldr	r2, [pc, #128]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801092a:	6193      	str	r3, [r2, #24]
 801092c:	e02b      	b.n	8010986 <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 801092e:	4b1e      	ldr	r3, [pc, #120]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010930:	699b      	ldr	r3, [r3, #24]
 8010932:	4a1d      	ldr	r2, [pc, #116]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010934:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8010938:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 801093a:	4b1b      	ldr	r3, [pc, #108]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 801093c:	2202      	movs	r2, #2
 801093e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010946:	d107      	bne.n	8010958 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	699a      	ldr	r2, [r3, #24]
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	69db      	ldr	r3, [r3, #28]
 8010950:	4915      	ldr	r1, [pc, #84]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010952:	4313      	orrs	r3, r2
 8010954:	64cb      	str	r3, [r1, #76]	; 0x4c
 8010956:	e006      	b.n	8010966 <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8010958:	4a13      	ldr	r2, [pc, #76]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 801095e:	4a12      	ldr	r2, [pc, #72]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	699b      	ldr	r3, [r3, #24]
 8010964:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8010966:	4a10      	ldr	r2, [pc, #64]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010972:	f043 0202 	orr.w	r2, r3, #2
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 801097a:	4b0b      	ldr	r3, [pc, #44]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 801097c:	699b      	ldr	r3, [r3, #24]
 801097e:	4a0a      	ldr	r2, [pc, #40]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010984:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010986:	4b08      	ldr	r3, [pc, #32]	; (80109a8 <HAL_RTC_SetAlarm+0x200>)
 8010988:	22ff      	movs	r2, #255	; 0xff
 801098a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2201      	movs	r2, #1
 8010990:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	2200      	movs	r2, #0
 8010998:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801099c:	2300      	movs	r3, #0
}
 801099e:	4618      	mov	r0, r3
 80109a0:	371c      	adds	r7, #28
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd90      	pop	{r4, r7, pc}
 80109a6:	bf00      	nop
 80109a8:	40002800 	.word	0x40002800

080109ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80109b4:	4b0f      	ldr	r3, [pc, #60]	; (80109f4 <HAL_RTC_WaitForSynchro+0x48>)
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	4a0e      	ldr	r2, [pc, #56]	; (80109f4 <HAL_RTC_WaitForSynchro+0x48>)
 80109ba:	f023 0320 	bic.w	r3, r3, #32
 80109be:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80109c0:	f7fc fab0 	bl	800cf24 <HAL_GetTick>
 80109c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80109c6:	e009      	b.n	80109dc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80109c8:	f7fc faac 	bl	800cf24 <HAL_GetTick>
 80109cc:	4602      	mov	r2, r0
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	1ad3      	subs	r3, r2, r3
 80109d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80109d6:	d901      	bls.n	80109dc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80109d8:	2303      	movs	r3, #3
 80109da:	e006      	b.n	80109ea <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80109dc:	4b05      	ldr	r3, [pc, #20]	; (80109f4 <HAL_RTC_WaitForSynchro+0x48>)
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	f003 0320 	and.w	r3, r3, #32
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d0ef      	beq.n	80109c8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80109e8:	2300      	movs	r3, #0
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3710      	adds	r7, #16
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	40002800 	.word	0x40002800

080109f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b084      	sub	sp, #16
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010a00:	2300      	movs	r3, #0
 8010a02:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8010a04:	4b15      	ldr	r3, [pc, #84]	; (8010a5c <RTC_EnterInitMode+0x64>)
 8010a06:	68db      	ldr	r3, [r3, #12]
 8010a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d120      	bne.n	8010a52 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010a10:	4b12      	ldr	r3, [pc, #72]	; (8010a5c <RTC_EnterInitMode+0x64>)
 8010a12:	68db      	ldr	r3, [r3, #12]
 8010a14:	4a11      	ldr	r2, [pc, #68]	; (8010a5c <RTC_EnterInitMode+0x64>)
 8010a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a1a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8010a1c:	f7fc fa82 	bl	800cf24 <HAL_GetTick>
 8010a20:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010a22:	e00d      	b.n	8010a40 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010a24:	f7fc fa7e 	bl	800cf24 <HAL_GetTick>
 8010a28:	4602      	mov	r2, r0
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	1ad3      	subs	r3, r2, r3
 8010a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010a32:	d905      	bls.n	8010a40 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8010a34:	2303      	movs	r3, #3
 8010a36:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2203      	movs	r2, #3
 8010a3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010a40:	4b06      	ldr	r3, [pc, #24]	; (8010a5c <RTC_EnterInitMode+0x64>)
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d102      	bne.n	8010a52 <RTC_EnterInitMode+0x5a>
 8010a4c:	7bfb      	ldrb	r3, [r7, #15]
 8010a4e:	2b03      	cmp	r3, #3
 8010a50:	d1e8      	bne.n	8010a24 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8010a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	3710      	adds	r7, #16
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}
 8010a5c:	40002800 	.word	0x40002800

08010a60 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010a6c:	4b1a      	ldr	r3, [pc, #104]	; (8010ad8 <RTC_ExitInitMode+0x78>)
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	4a19      	ldr	r2, [pc, #100]	; (8010ad8 <RTC_ExitInitMode+0x78>)
 8010a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a76:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010a78:	4b17      	ldr	r3, [pc, #92]	; (8010ad8 <RTC_ExitInitMode+0x78>)
 8010a7a:	699b      	ldr	r3, [r3, #24]
 8010a7c:	f003 0320 	and.w	r3, r3, #32
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d10c      	bne.n	8010a9e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f7ff ff91 	bl	80109ac <HAL_RTC_WaitForSynchro>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d01e      	beq.n	8010ace <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2203      	movs	r2, #3
 8010a94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8010a98:	2303      	movs	r3, #3
 8010a9a:	73fb      	strb	r3, [r7, #15]
 8010a9c:	e017      	b.n	8010ace <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010a9e:	4b0e      	ldr	r3, [pc, #56]	; (8010ad8 <RTC_ExitInitMode+0x78>)
 8010aa0:	699b      	ldr	r3, [r3, #24]
 8010aa2:	4a0d      	ldr	r2, [pc, #52]	; (8010ad8 <RTC_ExitInitMode+0x78>)
 8010aa4:	f023 0320 	bic.w	r3, r3, #32
 8010aa8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7ff ff7e 	bl	80109ac <HAL_RTC_WaitForSynchro>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d005      	beq.n	8010ac2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2203      	movs	r2, #3
 8010aba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8010abe:	2303      	movs	r3, #3
 8010ac0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010ac2:	4b05      	ldr	r3, [pc, #20]	; (8010ad8 <RTC_ExitInitMode+0x78>)
 8010ac4:	699b      	ldr	r3, [r3, #24]
 8010ac6:	4a04      	ldr	r2, [pc, #16]	; (8010ad8 <RTC_ExitInitMode+0x78>)
 8010ac8:	f043 0320 	orr.w	r3, r3, #32
 8010acc:	6193      	str	r3, [r2, #24]
  }

  return status;
 8010ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3710      	adds	r7, #16
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	40002800 	.word	0x40002800

08010adc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b085      	sub	sp, #20
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8010aea:	79fb      	ldrb	r3, [r7, #7]
 8010aec:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8010aee:	e005      	b.n	8010afc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	3301      	adds	r3, #1
 8010af4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8010af6:	7afb      	ldrb	r3, [r7, #11]
 8010af8:	3b0a      	subs	r3, #10
 8010afa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8010afc:	7afb      	ldrb	r3, [r7, #11]
 8010afe:	2b09      	cmp	r3, #9
 8010b00:	d8f6      	bhi.n	8010af0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	011b      	lsls	r3, r3, #4
 8010b08:	b2da      	uxtb	r2, r3
 8010b0a:	7afb      	ldrb	r3, [r7, #11]
 8010b0c:	4313      	orrs	r3, r2
 8010b0e:	b2db      	uxtb	r3, r3
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3714      	adds	r7, #20
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bc80      	pop	{r7}
 8010b18:	4770      	bx	lr

08010b1a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b084      	sub	sp, #16
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d101      	bne.n	8010b2c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	e0c6      	b.n	8010cba <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d108      	bne.n	8010b46 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010b3c:	d009      	beq.n	8010b52 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2200      	movs	r2, #0
 8010b42:	61da      	str	r2, [r3, #28]
 8010b44:	e005      	b.n	8010b52 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2200      	movs	r2, #0
 8010b50:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010b58:	b2db      	uxtb	r3, r3
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d106      	bne.n	8010b6c <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7f9 fd1e 	bl	800a5a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2202      	movs	r2, #2
 8010b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010b82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010b8c:	d902      	bls.n	8010b94 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	60fb      	str	r3, [r7, #12]
 8010b92:	e002      	b.n	8010b9a <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	68db      	ldr	r3, [r3, #12]
 8010b9e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8010ba2:	d007      	beq.n	8010bb4 <HAL_SPI_Init+0x9a>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010bac:	d002      	beq.n	8010bb4 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	689b      	ldr	r3, [r3, #8]
 8010bc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010bc4:	431a      	orrs	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	691b      	ldr	r3, [r3, #16]
 8010bca:	f003 0302 	and.w	r3, r3, #2
 8010bce:	431a      	orrs	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	695b      	ldr	r3, [r3, #20]
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	431a      	orrs	r2, r3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010be2:	431a      	orrs	r2, r3
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	69db      	ldr	r3, [r3, #28]
 8010be8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010bec:	431a      	orrs	r2, r3
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6a1b      	ldr	r3, [r3, #32]
 8010bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bf6:	ea42 0103 	orr.w	r1, r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bfe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	430a      	orrs	r2, r1
 8010c08:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c12:	d11b      	bne.n	8010c4c <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10b      	bne.n	8010c34 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	68db      	ldr	r3, [r3, #12]
 8010c20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010c24:	d903      	bls.n	8010c2e <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2202      	movs	r2, #2
 8010c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8010c2c:	e002      	b.n	8010c34 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2201      	movs	r2, #1
 8010c32:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c38:	2b02      	cmp	r3, #2
 8010c3a:	d107      	bne.n	8010c4c <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010c4a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	699b      	ldr	r3, [r3, #24]
 8010c50:	0c1b      	lsrs	r3, r3, #16
 8010c52:	f003 0204 	and.w	r2, r3, #4
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c5a:	f003 0310 	and.w	r3, r3, #16
 8010c5e:	431a      	orrs	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c64:	f003 0308 	and.w	r3, r3, #8
 8010c68:	431a      	orrs	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	68db      	ldr	r3, [r3, #12]
 8010c6e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8010c72:	ea42 0103 	orr.w	r1, r2, r3
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	430a      	orrs	r2, r1
 8010c82:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c8c:	d105      	bne.n	8010c9a <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	b292      	uxth	r2, r2
 8010c98:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	69da      	ldr	r2, [r3, #28]
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010ca8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8010cb8:	2300      	movs	r3, #0
}
 8010cba:	4618      	mov	r0, r3
 8010cbc:	3710      	adds	r7, #16
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}

08010cc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010cc2:	b580      	push	{r7, lr}
 8010cc4:	b088      	sub	sp, #32
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	60f8      	str	r0, [r7, #12]
 8010cca:	60b9      	str	r1, [r7, #8]
 8010ccc:	603b      	str	r3, [r7, #0]
 8010cce:	4613      	mov	r3, r2
 8010cd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d101      	bne.n	8010ce4 <HAL_SPI_Transmit+0x22>
 8010ce0:	2302      	movs	r3, #2
 8010ce2:	e17a      	b.n	8010fda <HAL_SPI_Transmit+0x318>
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	2201      	movs	r2, #1
 8010ce8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010cec:	f7fc f91a 	bl	800cf24 <HAL_GetTick>
 8010cf0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010cf2:	88fb      	ldrh	r3, [r7, #6]
 8010cf4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d002      	beq.n	8010d08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010d02:	2302      	movs	r3, #2
 8010d04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010d06:	e15f      	b.n	8010fc8 <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d002      	beq.n	8010d14 <HAL_SPI_Transmit+0x52>
 8010d0e:	88fb      	ldrh	r3, [r7, #6]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d102      	bne.n	8010d1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010d14:	2301      	movs	r3, #1
 8010d16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010d18:	e156      	b.n	8010fc8 <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	2203      	movs	r2, #3
 8010d1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	2200      	movs	r2, #0
 8010d26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	68ba      	ldr	r2, [r7, #8]
 8010d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	88fa      	ldrh	r2, [r7, #6]
 8010d32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	88fa      	ldrh	r2, [r7, #6]
 8010d38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	2200      	movs	r2, #0
 8010d44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	2200      	movs	r2, #0
 8010d54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	689b      	ldr	r3, [r3, #8]
 8010d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d64:	d10f      	bne.n	8010d86 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010d84:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d8e:	d10f      	bne.n	8010db0 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010d9e:	601a      	str	r2, [r3, #0]
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	681a      	ldr	r2, [r3, #0]
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010dae:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dba:	2b40      	cmp	r3, #64	; 0x40
 8010dbc:	d007      	beq.n	8010dce <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010dcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010dd6:	d94b      	bls.n	8010e70 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d002      	beq.n	8010de6 <HAL_SPI_Transmit+0x124>
 8010de0:	8afb      	ldrh	r3, [r7, #22]
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d13e      	bne.n	8010e64 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dea:	881a      	ldrh	r2, [r3, #0]
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df6:	1c9a      	adds	r2, r3, #2
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	3b01      	subs	r3, #1
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010e0a:	e02b      	b.n	8010e64 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	f003 0302 	and.w	r3, r3, #2
 8010e16:	2b02      	cmp	r3, #2
 8010e18:	d112      	bne.n	8010e40 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e1e:	881a      	ldrh	r2, [r3, #0]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e2a:	1c9a      	adds	r2, r3, #2
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	3b01      	subs	r3, #1
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010e3e:	e011      	b.n	8010e64 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e40:	f7fc f870 	bl	800cf24 <HAL_GetTick>
 8010e44:	4602      	mov	r2, r0
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	683a      	ldr	r2, [r7, #0]
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d803      	bhi.n	8010e58 <HAL_SPI_Transmit+0x196>
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e56:	d102      	bne.n	8010e5e <HAL_SPI_Transmit+0x19c>
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d102      	bne.n	8010e64 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8010e5e:	2303      	movs	r3, #3
 8010e60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010e62:	e0b1      	b.n	8010fc8 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d1ce      	bne.n	8010e0c <HAL_SPI_Transmit+0x14a>
 8010e6e:	e07c      	b.n	8010f6a <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d002      	beq.n	8010e7e <HAL_SPI_Transmit+0x1bc>
 8010e78:	8afb      	ldrh	r3, [r7, #22]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d170      	bne.n	8010f60 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	2b01      	cmp	r3, #1
 8010e86:	d912      	bls.n	8010eae <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e8c:	881a      	ldrh	r2, [r3, #0]
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e98:	1c9a      	adds	r2, r3, #2
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	3b02      	subs	r3, #2
 8010ea6:	b29a      	uxth	r2, r3
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010eac:	e058      	b.n	8010f60 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	330c      	adds	r3, #12
 8010eb8:	7812      	ldrb	r2, [r2, #0]
 8010eba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ec0:	1c5a      	adds	r2, r3, #1
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010eca:	b29b      	uxth	r3, r3
 8010ecc:	3b01      	subs	r3, #1
 8010ece:	b29a      	uxth	r2, r3
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8010ed4:	e044      	b.n	8010f60 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	689b      	ldr	r3, [r3, #8]
 8010edc:	f003 0302 	and.w	r3, r3, #2
 8010ee0:	2b02      	cmp	r3, #2
 8010ee2:	d12b      	bne.n	8010f3c <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ee8:	b29b      	uxth	r3, r3
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	d912      	bls.n	8010f14 <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ef2:	881a      	ldrh	r2, [r3, #0]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010efe:	1c9a      	adds	r2, r3, #2
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	3b02      	subs	r3, #2
 8010f0c:	b29a      	uxth	r2, r3
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010f12:	e025      	b.n	8010f60 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	330c      	adds	r3, #12
 8010f1e:	7812      	ldrb	r2, [r2, #0]
 8010f20:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f26:	1c5a      	adds	r2, r3, #1
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	3b01      	subs	r3, #1
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010f3a:	e011      	b.n	8010f60 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f3c:	f7fb fff2 	bl	800cf24 <HAL_GetTick>
 8010f40:	4602      	mov	r2, r0
 8010f42:	69bb      	ldr	r3, [r7, #24]
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	683a      	ldr	r2, [r7, #0]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d803      	bhi.n	8010f54 <HAL_SPI_Transmit+0x292>
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f52:	d102      	bne.n	8010f5a <HAL_SPI_Transmit+0x298>
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d102      	bne.n	8010f60 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8010f5a:	2303      	movs	r3, #3
 8010f5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010f5e:	e033      	b.n	8010fc8 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d1b5      	bne.n	8010ed6 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010f72:	d107      	bne.n	8010f84 <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	681a      	ldr	r2, [r3, #0]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010f82:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010f84:	69ba      	ldr	r2, [r7, #24]
 8010f86:	6839      	ldr	r1, [r7, #0]
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f000 fe6d 	bl	8011c68 <SPI_EndRxTxTransaction>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d002      	beq.n	8010f9a <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2220      	movs	r2, #32
 8010f98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	689b      	ldr	r3, [r3, #8]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d10a      	bne.n	8010fb8 <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	613b      	str	r3, [r7, #16]
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	613b      	str	r3, [r7, #16]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	689b      	ldr	r3, [r3, #8]
 8010fb4:	613b      	str	r3, [r7, #16]
 8010fb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d002      	beq.n	8010fc6 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	77fb      	strb	r3, [r7, #31]
 8010fc4:	e000      	b.n	8010fc8 <HAL_SPI_Transmit+0x306>
  }

error:
 8010fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2201      	movs	r2, #1
 8010fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3720      	adds	r7, #32
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}

08010fe2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010fe2:	b580      	push	{r7, lr}
 8010fe4:	b08c      	sub	sp, #48	; 0x30
 8010fe6:	af02      	add	r7, sp, #8
 8010fe8:	60f8      	str	r0, [r7, #12]
 8010fea:	60b9      	str	r1, [r7, #8]
 8010fec:	603b      	str	r3, [r7, #0]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011008:	d112      	bne.n	8011030 <HAL_SPI_Receive+0x4e>
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d10e      	bne.n	8011030 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	2204      	movs	r2, #4
 8011016:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801101a:	88fa      	ldrh	r2, [r7, #6]
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	4613      	mov	r3, r2
 8011022:	68ba      	ldr	r2, [r7, #8]
 8011024:	68b9      	ldr	r1, [r7, #8]
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f000 f9c4 	bl	80113b4 <HAL_SPI_TransmitReceive>
 801102c:	4603      	mov	r3, r0
 801102e:	e1bd      	b.n	80113ac <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011036:	2b01      	cmp	r3, #1
 8011038:	d101      	bne.n	801103e <HAL_SPI_Receive+0x5c>
 801103a:	2302      	movs	r3, #2
 801103c:	e1b6      	b.n	80113ac <HAL_SPI_Receive+0x3ca>
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	2201      	movs	r2, #1
 8011042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011046:	f7fb ff6d 	bl	800cf24 <HAL_GetTick>
 801104a:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011052:	b2db      	uxtb	r3, r3
 8011054:	2b01      	cmp	r3, #1
 8011056:	d003      	beq.n	8011060 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8011058:	2302      	movs	r3, #2
 801105a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 801105e:	e19b      	b.n	8011398 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d002      	beq.n	801106c <HAL_SPI_Receive+0x8a>
 8011066:	88fb      	ldrh	r3, [r7, #6]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d103      	bne.n	8011074 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 801106c:	2301      	movs	r3, #1
 801106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8011072:	e191      	b.n	8011398 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2204      	movs	r2, #4
 8011078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	2200      	movs	r2, #0
 8011080:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	68ba      	ldr	r2, [r7, #8]
 8011086:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	88fa      	ldrh	r2, [r7, #6]
 801108c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	88fa      	ldrh	r2, [r7, #6]
 8011094:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	2200      	movs	r2, #0
 801109c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2200      	movs	r2, #0
 80110a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2200      	movs	r2, #0
 80110a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2200      	movs	r2, #0
 80110ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2200      	movs	r2, #0
 80110b4:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80110be:	d118      	bne.n	80110f2 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80110ce:	601a      	str	r2, [r3, #0]
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80110de:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	3b01      	subs	r3, #1
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	68db      	ldr	r3, [r3, #12]
 80110f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80110fa:	d908      	bls.n	801110e <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	685a      	ldr	r2, [r3, #4]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801110a:	605a      	str	r2, [r3, #4]
 801110c:	e007      	b.n	801111e <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	685a      	ldr	r2, [r3, #4]
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801111c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	689b      	ldr	r3, [r3, #8]
 8011122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011126:	d10f      	bne.n	8011148 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011136:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011146:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011152:	2b40      	cmp	r3, #64	; 0x40
 8011154:	d007      	beq.n	8011166 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011164:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801116e:	d869      	bhi.n	8011244 <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011170:	e031      	b.n	80111d6 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	689b      	ldr	r3, [r3, #8]
 8011178:	f003 0301 	and.w	r3, r3, #1
 801117c:	2b01      	cmp	r3, #1
 801117e:	d117      	bne.n	80111b0 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	f103 020c 	add.w	r2, r3, #12
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801118c:	7812      	ldrb	r2, [r2, #0]
 801118e:	b2d2      	uxtb	r2, r2
 8011190:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011196:	1c5a      	adds	r2, r3, #1
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	3b01      	subs	r3, #1
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80111ae:	e012      	b.n	80111d6 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80111b0:	f7fb feb8 	bl	800cf24 <HAL_GetTick>
 80111b4:	4602      	mov	r2, r0
 80111b6:	6a3b      	ldr	r3, [r7, #32]
 80111b8:	1ad3      	subs	r3, r2, r3
 80111ba:	683a      	ldr	r2, [r7, #0]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d803      	bhi.n	80111c8 <HAL_SPI_Receive+0x1e6>
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111c6:	d102      	bne.n	80111ce <HAL_SPI_Receive+0x1ec>
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d103      	bne.n	80111d6 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 80111ce:	2303      	movs	r3, #3
 80111d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80111d4:	e0e0      	b.n	8011398 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80111dc:	b29b      	uxth	r3, r3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d1c7      	bne.n	8011172 <HAL_SPI_Receive+0x190>
 80111e2:	e035      	b.n	8011250 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	689b      	ldr	r3, [r3, #8]
 80111ea:	f003 0301 	and.w	r3, r3, #1
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d115      	bne.n	801121e <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	68da      	ldr	r2, [r3, #12]
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111fc:	b292      	uxth	r2, r2
 80111fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011204:	1c9a      	adds	r2, r3, #2
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011210:	b29b      	uxth	r3, r3
 8011212:	3b01      	subs	r3, #1
 8011214:	b29a      	uxth	r2, r3
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801121c:	e012      	b.n	8011244 <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801121e:	f7fb fe81 	bl	800cf24 <HAL_GetTick>
 8011222:	4602      	mov	r2, r0
 8011224:	6a3b      	ldr	r3, [r7, #32]
 8011226:	1ad3      	subs	r3, r2, r3
 8011228:	683a      	ldr	r2, [r7, #0]
 801122a:	429a      	cmp	r2, r3
 801122c:	d803      	bhi.n	8011236 <HAL_SPI_Receive+0x254>
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011234:	d102      	bne.n	801123c <HAL_SPI_Receive+0x25a>
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d103      	bne.n	8011244 <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 801123c:	2303      	movs	r3, #3
 801123e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8011242:	e0a9      	b.n	8011398 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801124a:	b29b      	uxth	r3, r3
 801124c:	2b00      	cmp	r3, #0
 801124e:	d1c9      	bne.n	80111e4 <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011258:	d178      	bne.n	801134c <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011268:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 801126a:	6a3b      	ldr	r3, [r7, #32]
 801126c:	9300      	str	r3, [sp, #0]
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	2201      	movs	r2, #1
 8011272:	2101      	movs	r1, #1
 8011274:	68f8      	ldr	r0, [r7, #12]
 8011276:	f000 fb81 	bl	801197c <SPI_WaitFlagStateUntilTimeout>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	d003      	beq.n	8011288 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8011280:	2303      	movs	r3, #3
 8011282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8011286:	e087      	b.n	8011398 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011290:	d907      	bls.n	80112a2 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	68da      	ldr	r2, [r3, #12]
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801129c:	b292      	uxth	r2, r2
 801129e:	801a      	strh	r2, [r3, #0]
 80112a0:	e008      	b.n	80112b4 <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f103 020c 	add.w	r2, r3, #12
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ae:	7812      	ldrb	r2, [r2, #0]
 80112b0:	b2d2      	uxtb	r2, r2
 80112b2:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80112b4:	6a3b      	ldr	r3, [r7, #32]
 80112b6:	9300      	str	r3, [sp, #0]
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	2201      	movs	r2, #1
 80112bc:	2101      	movs	r1, #1
 80112be:	68f8      	ldr	r0, [r7, #12]
 80112c0:	f000 fb5c 	bl	801197c <SPI_WaitFlagStateUntilTimeout>
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d009      	beq.n	80112de <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80112ce:	f043 0202 	orr.w	r2, r3, #2
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80112d6:	2303      	movs	r3, #3
 80112d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80112dc:	e05c      	b.n	8011398 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80112e6:	d105      	bne.n	80112f4 <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80112f0:	69bb      	ldr	r3, [r7, #24]
 80112f2:	e02b      	b.n	801134c <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	330c      	adds	r3, #12
 80112fa:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80112fc:	69fb      	ldr	r3, [r7, #28]
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	b2db      	uxtb	r3, r3
 8011302:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011304:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801130e:	d11d      	bne.n	801134c <HAL_SPI_Receive+0x36a>
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011314:	2b02      	cmp	r3, #2
 8011316:	d119      	bne.n	801134c <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8011318:	6a3b      	ldr	r3, [r7, #32]
 801131a:	9300      	str	r3, [sp, #0]
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	2201      	movs	r2, #1
 8011320:	2101      	movs	r1, #1
 8011322:	68f8      	ldr	r0, [r7, #12]
 8011324:	f000 fb2a 	bl	801197c <SPI_WaitFlagStateUntilTimeout>
 8011328:	4603      	mov	r3, r0
 801132a:	2b00      	cmp	r3, #0
 801132c:	d009      	beq.n	8011342 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011332:	f043 0202 	orr.w	r2, r3, #2
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 801133a:	2303      	movs	r3, #3
 801133c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8011340:	e02a      	b.n	8011398 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8011342:	69fb      	ldr	r3, [r7, #28]
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	b2db      	uxtb	r3, r3
 8011348:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 801134a:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801134c:	6a3a      	ldr	r2, [r7, #32]
 801134e:	6839      	ldr	r1, [r7, #0]
 8011350:	68f8      	ldr	r0, [r7, #12]
 8011352:	f000 fc31 	bl	8011bb8 <SPI_EndRxTransaction>
 8011356:	4603      	mov	r3, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	d002      	beq.n	8011362 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2220      	movs	r2, #32
 8011360:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	689b      	ldr	r3, [r3, #8]
 8011368:	f003 0310 	and.w	r3, r3, #16
 801136c:	2b10      	cmp	r3, #16
 801136e:	d10a      	bne.n	8011386 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011374:	f043 0202 	orr.w	r2, r3, #2
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8011384:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801138a:	2b00      	cmp	r3, #0
 801138c:	d003      	beq.n	8011396 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 801138e:	2301      	movs	r3, #1
 8011390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011394:	e000      	b.n	8011398 <HAL_SPI_Receive+0x3b6>
  }

error :
 8011396:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2201      	movs	r2, #1
 801139c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2200      	movs	r2, #0
 80113a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80113a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3728      	adds	r7, #40	; 0x28
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b092      	sub	sp, #72	; 0x48
 80113b8:	af02      	add	r7, sp, #8
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	607a      	str	r2, [r7, #4]
 80113c0:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80113c2:	2300      	movs	r3, #0
 80113c4:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80113ca:	2301      	movs	r3, #1
 80113cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80113ce:	2300      	movs	r3, #0
 80113d0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d101      	bne.n	80113e2 <HAL_SPI_TransmitReceive+0x2e>
 80113de:	2302      	movs	r3, #2
 80113e0:	e2c8      	b.n	8011974 <HAL_SPI_TransmitReceive+0x5c0>
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	2201      	movs	r2, #1
 80113e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80113ea:	f7fb fd9b 	bl	800cf24 <HAL_GetTick>
 80113ee:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80113f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8011400:	887b      	ldrh	r3, [r7, #2]
 8011402:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8011404:	887b      	ldrh	r3, [r7, #2]
 8011406:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011418:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801141c:	2b01      	cmp	r3, #1
 801141e:	d00f      	beq.n	8011440 <HAL_SPI_TransmitReceive+0x8c>
 8011420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011426:	d107      	bne.n	8011438 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	689b      	ldr	r3, [r3, #8]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d103      	bne.n	8011438 <HAL_SPI_TransmitReceive+0x84>
 8011430:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011434:	2b04      	cmp	r3, #4
 8011436:	d003      	beq.n	8011440 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8011438:	2302      	movs	r3, #2
 801143a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 801143e:	e28f      	b.n	8011960 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d005      	beq.n	8011452 <HAL_SPI_TransmitReceive+0x9e>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d002      	beq.n	8011452 <HAL_SPI_TransmitReceive+0x9e>
 801144c:	887b      	ldrh	r3, [r7, #2]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d103      	bne.n	801145a <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8011452:	2301      	movs	r3, #1
 8011454:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8011458:	e282      	b.n	8011960 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011460:	b2db      	uxtb	r3, r3
 8011462:	2b04      	cmp	r3, #4
 8011464:	d003      	beq.n	801146e <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	2205      	movs	r2, #5
 801146a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2200      	movs	r2, #0
 8011472:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	887a      	ldrh	r2, [r7, #2]
 801147e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	887a      	ldrh	r2, [r7, #2]
 8011486:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	68ba      	ldr	r2, [r7, #8]
 801148e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	887a      	ldrh	r2, [r7, #2]
 8011494:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	887a      	ldrh	r2, [r7, #2]
 801149a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2200      	movs	r2, #0
 80114a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2200      	movs	r2, #0
 80114a6:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80114b0:	d10f      	bne.n	80114d2 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	681a      	ldr	r2, [r3, #0]
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80114c0:	601a      	str	r2, [r3, #0]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80114d0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	68db      	ldr	r3, [r3, #12]
 80114d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80114da:	d802      	bhi.n	80114e2 <HAL_SPI_TransmitReceive+0x12e>
 80114dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80114de:	2b01      	cmp	r3, #1
 80114e0:	d908      	bls.n	80114f4 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	685a      	ldr	r2, [r3, #4]
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80114f0:	605a      	str	r2, [r3, #4]
 80114f2:	e007      	b.n	8011504 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	685a      	ldr	r2, [r3, #4]
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011502:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801150e:	2b40      	cmp	r3, #64	; 0x40
 8011510:	d007      	beq.n	8011522 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011520:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801152a:	f240 80a4 	bls.w	8011676 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d003      	beq.n	801153e <HAL_SPI_TransmitReceive+0x18a>
 8011536:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011538:	2b01      	cmp	r3, #1
 801153a:	f040 808e 	bne.w	801165a <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011542:	881a      	ldrh	r2, [r3, #0]
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801154e:	1c9a      	adds	r2, r3, #2
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011558:	b29b      	uxth	r3, r3
 801155a:	3b01      	subs	r3, #1
 801155c:	b29a      	uxth	r2, r3
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011562:	e07a      	b.n	801165a <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	689b      	ldr	r3, [r3, #8]
 801156a:	f003 0302 	and.w	r3, r3, #2
 801156e:	2b02      	cmp	r3, #2
 8011570:	d13f      	bne.n	80115f2 <HAL_SPI_TransmitReceive+0x23e>
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011576:	b29b      	uxth	r3, r3
 8011578:	2b00      	cmp	r3, #0
 801157a:	d03a      	beq.n	80115f2 <HAL_SPI_TransmitReceive+0x23e>
 801157c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801157e:	2b01      	cmp	r3, #1
 8011580:	d137      	bne.n	80115f2 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011586:	881a      	ldrh	r2, [r3, #0]
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011592:	1c9a      	adds	r2, r3, #2
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801159c:	b29b      	uxth	r3, r3
 801159e:	3b01      	subs	r3, #1
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80115a6:	2300      	movs	r3, #0
 80115a8:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115ae:	b29b      	uxth	r3, r3
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d11e      	bne.n	80115f2 <HAL_SPI_TransmitReceive+0x23e>
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115bc:	d119      	bne.n	80115f2 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80115be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c0:	f003 0304 	and.w	r3, r3, #4
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d10c      	bne.n	80115e2 <HAL_SPI_TransmitReceive+0x22e>
 80115c8:	6a3b      	ldr	r3, [r7, #32]
 80115ca:	f003 0308 	and.w	r3, r3, #8
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d007      	beq.n	80115e2 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80115e0:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	681a      	ldr	r2, [r3, #0]
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80115f0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	689b      	ldr	r3, [r3, #8]
 80115f8:	f003 0301 	and.w	r3, r3, #1
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d11c      	bne.n	801163a <HAL_SPI_TransmitReceive+0x286>
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011606:	b29b      	uxth	r3, r3
 8011608:	2b00      	cmp	r3, #0
 801160a:	d016      	beq.n	801163a <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	68da      	ldr	r2, [r3, #12]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011616:	b292      	uxth	r2, r2
 8011618:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801161e:	1c9a      	adds	r2, r3, #2
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801162a:	b29b      	uxth	r3, r3
 801162c:	3b01      	subs	r3, #1
 801162e:	b29a      	uxth	r2, r3
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011636:	2301      	movs	r3, #1
 8011638:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801163a:	f7fb fc73 	bl	800cf24 <HAL_GetTick>
 801163e:	4602      	mov	r2, r0
 8011640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011642:	1ad3      	subs	r3, r2, r3
 8011644:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011646:	429a      	cmp	r2, r3
 8011648:	d807      	bhi.n	801165a <HAL_SPI_TransmitReceive+0x2a6>
 801164a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011650:	d003      	beq.n	801165a <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8011652:	2303      	movs	r3, #3
 8011654:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8011658:	e182      	b.n	8011960 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801165e:	b29b      	uxth	r3, r3
 8011660:	2b00      	cmp	r3, #0
 8011662:	f47f af7f 	bne.w	8011564 <HAL_SPI_TransmitReceive+0x1b0>
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801166c:	b29b      	uxth	r3, r3
 801166e:	2b00      	cmp	r3, #0
 8011670:	f47f af78 	bne.w	8011564 <HAL_SPI_TransmitReceive+0x1b0>
 8011674:	e103      	b.n	801187e <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d003      	beq.n	8011686 <HAL_SPI_TransmitReceive+0x2d2>
 801167e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011680:	2b01      	cmp	r3, #1
 8011682:	f040 80ef 	bne.w	8011864 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801168a:	b29b      	uxth	r3, r3
 801168c:	2b01      	cmp	r3, #1
 801168e:	d912      	bls.n	80116b6 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011694:	881a      	ldrh	r2, [r3, #0]
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116a0:	1c9a      	adds	r2, r3, #2
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	3b02      	subs	r3, #2
 80116ae:	b29a      	uxth	r2, r3
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80116b4:	e0d6      	b.n	8011864 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	330c      	adds	r3, #12
 80116c0:	7812      	ldrb	r2, [r2, #0]
 80116c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116c8:	1c5a      	adds	r2, r3, #1
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	3b01      	subs	r3, #1
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80116dc:	e0c2      	b.n	8011864 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	689b      	ldr	r3, [r3, #8]
 80116e4:	f003 0302 	and.w	r3, r3, #2
 80116e8:	2b02      	cmp	r3, #2
 80116ea:	d158      	bne.n	801179e <HAL_SPI_TransmitReceive+0x3ea>
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d053      	beq.n	801179e <HAL_SPI_TransmitReceive+0x3ea>
 80116f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d150      	bne.n	801179e <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011700:	b29b      	uxth	r3, r3
 8011702:	2b01      	cmp	r3, #1
 8011704:	d912      	bls.n	801172c <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801170a:	881a      	ldrh	r2, [r3, #0]
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011716:	1c9a      	adds	r2, r3, #2
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011720:	b29b      	uxth	r3, r3
 8011722:	3b02      	subs	r3, #2
 8011724:	b29a      	uxth	r2, r3
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	87da      	strh	r2, [r3, #62]	; 0x3e
 801172a:	e012      	b.n	8011752 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	330c      	adds	r3, #12
 8011736:	7812      	ldrb	r2, [r2, #0]
 8011738:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801173e:	1c5a      	adds	r2, r3, #1
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011748:	b29b      	uxth	r3, r3
 801174a:	3b01      	subs	r3, #1
 801174c:	b29a      	uxth	r2, r3
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011752:	2300      	movs	r3, #0
 8011754:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801175a:	b29b      	uxth	r3, r3
 801175c:	2b00      	cmp	r3, #0
 801175e:	d11e      	bne.n	801179e <HAL_SPI_TransmitReceive+0x3ea>
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011768:	d119      	bne.n	801179e <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 801176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176c:	f003 0304 	and.w	r3, r3, #4
 8011770:	2b00      	cmp	r3, #0
 8011772:	d10c      	bne.n	801178e <HAL_SPI_TransmitReceive+0x3da>
 8011774:	6a3b      	ldr	r3, [r7, #32]
 8011776:	f003 0308 	and.w	r3, r3, #8
 801177a:	2b00      	cmp	r3, #0
 801177c:	d007      	beq.n	801178e <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	681a      	ldr	r2, [r3, #0]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801178c:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801179c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	689b      	ldr	r3, [r3, #8]
 80117a4:	f003 0301 	and.w	r3, r3, #1
 80117a8:	2b01      	cmp	r3, #1
 80117aa:	d148      	bne.n	801183e <HAL_SPI_TransmitReceive+0x48a>
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d042      	beq.n	801183e <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80117be:	b29b      	uxth	r3, r3
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d923      	bls.n	801180c <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	68da      	ldr	r2, [r3, #12]
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117ce:	b292      	uxth	r2, r2
 80117d0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117d6:	1c9a      	adds	r2, r3, #2
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	3b02      	subs	r3, #2
 80117e6:	b29a      	uxth	r2, r3
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	2b01      	cmp	r3, #1
 80117f8:	d81f      	bhi.n	801183a <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	685a      	ldr	r2, [r3, #4]
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011808:	605a      	str	r2, [r3, #4]
 801180a:	e016      	b.n	801183a <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f103 020c 	add.w	r2, r3, #12
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011818:	7812      	ldrb	r2, [r2, #0]
 801181a:	b2d2      	uxtb	r2, r2
 801181c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011822:	1c5a      	adds	r2, r3, #1
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801182e:	b29b      	uxth	r3, r3
 8011830:	3b01      	subs	r3, #1
 8011832:	b29a      	uxth	r2, r3
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801183a:	2301      	movs	r3, #1
 801183c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801183e:	f7fb fb71 	bl	800cf24 <HAL_GetTick>
 8011842:	4602      	mov	r2, r0
 8011844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011846:	1ad3      	subs	r3, r2, r3
 8011848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801184a:	429a      	cmp	r2, r3
 801184c:	d803      	bhi.n	8011856 <HAL_SPI_TransmitReceive+0x4a2>
 801184e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011854:	d102      	bne.n	801185c <HAL_SPI_TransmitReceive+0x4a8>
 8011856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011858:	2b00      	cmp	r3, #0
 801185a:	d103      	bne.n	8011864 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 801185c:	2303      	movs	r3, #3
 801185e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8011862:	e07d      	b.n	8011960 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011868:	b29b      	uxth	r3, r3
 801186a:	2b00      	cmp	r3, #0
 801186c:	f47f af37 	bne.w	80116de <HAL_SPI_TransmitReceive+0x32a>
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011876:	b29b      	uxth	r3, r3
 8011878:	2b00      	cmp	r3, #0
 801187a:	f47f af30 	bne.w	80116de <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011886:	d146      	bne.n	8011916 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8011888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801188a:	9300      	str	r3, [sp, #0]
 801188c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801188e:	2201      	movs	r2, #1
 8011890:	2101      	movs	r1, #1
 8011892:	68f8      	ldr	r0, [r7, #12]
 8011894:	f000 f872 	bl	801197c <SPI_WaitFlagStateUntilTimeout>
 8011898:	4603      	mov	r3, r0
 801189a:	2b00      	cmp	r3, #0
 801189c:	d009      	beq.n	80118b2 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80118a2:	f043 0202 	orr.w	r2, r3, #2
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80118aa:	2303      	movs	r3, #3
 80118ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80118b0:	e056      	b.n	8011960 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	68db      	ldr	r3, [r3, #12]
 80118b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80118ba:	d105      	bne.n	80118c8 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	e026      	b.n	8011916 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	330c      	adds	r3, #12
 80118ce:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	b2db      	uxtb	r3, r3
 80118d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80118d8:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118de:	2b02      	cmp	r3, #2
 80118e0:	d119      	bne.n	8011916 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80118e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e4:	9300      	str	r3, [sp, #0]
 80118e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118e8:	2201      	movs	r2, #1
 80118ea:	2101      	movs	r1, #1
 80118ec:	68f8      	ldr	r0, [r7, #12]
 80118ee:	f000 f845 	bl	801197c <SPI_WaitFlagStateUntilTimeout>
 80118f2:	4603      	mov	r3, r0
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d009      	beq.n	801190c <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80118fc:	f043 0202 	orr.w	r2, r3, #2
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8011904:	2303      	movs	r3, #3
 8011906:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 801190a:	e029      	b.n	8011960 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 801190c:	69fb      	ldr	r3, [r7, #28]
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	b2db      	uxtb	r3, r3
 8011912:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8011914:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	689b      	ldr	r3, [r3, #8]
 801191c:	f003 0310 	and.w	r3, r3, #16
 8011920:	2b10      	cmp	r3, #16
 8011922:	d10d      	bne.n	8011940 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011928:	f043 0202 	orr.w	r2, r3, #2
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8011938:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 801193a:	2301      	movs	r3, #1
 801193c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011942:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	f000 f98f 	bl	8011c68 <SPI_EndRxTxTransaction>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	d006      	beq.n	801195e <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8011950:	2301      	movs	r3, #1
 8011952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	2220      	movs	r2, #32
 801195a:	661a      	str	r2, [r3, #96]	; 0x60
 801195c:	e000      	b.n	8011960 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 801195e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2201      	movs	r2, #1
 8011964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2200      	movs	r2, #0
 801196c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011970:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8011974:	4618      	mov	r0, r3
 8011976:	3740      	adds	r7, #64	; 0x40
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b088      	sub	sp, #32
 8011980:	af00      	add	r7, sp, #0
 8011982:	60f8      	str	r0, [r7, #12]
 8011984:	60b9      	str	r1, [r7, #8]
 8011986:	603b      	str	r3, [r7, #0]
 8011988:	4613      	mov	r3, r2
 801198a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801198c:	f7fb faca 	bl	800cf24 <HAL_GetTick>
 8011990:	4602      	mov	r2, r0
 8011992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011994:	1a9b      	subs	r3, r3, r2
 8011996:	683a      	ldr	r2, [r7, #0]
 8011998:	4413      	add	r3, r2
 801199a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801199c:	f7fb fac2 	bl	800cf24 <HAL_GetTick>
 80119a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80119a2:	4b39      	ldr	r3, [pc, #228]	; (8011a88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	015b      	lsls	r3, r3, #5
 80119a8:	0d1b      	lsrs	r3, r3, #20
 80119aa:	69fa      	ldr	r2, [r7, #28]
 80119ac:	fb02 f303 	mul.w	r3, r2, r3
 80119b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80119b2:	e054      	b.n	8011a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119ba:	d050      	beq.n	8011a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80119bc:	f7fb fab2 	bl	800cf24 <HAL_GetTick>
 80119c0:	4602      	mov	r2, r0
 80119c2:	69bb      	ldr	r3, [r7, #24]
 80119c4:	1ad3      	subs	r3, r2, r3
 80119c6:	69fa      	ldr	r2, [r7, #28]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d902      	bls.n	80119d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80119cc:	69fb      	ldr	r3, [r7, #28]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d13d      	bne.n	8011a4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	685a      	ldr	r2, [r3, #4]
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80119e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80119ea:	d111      	bne.n	8011a10 <SPI_WaitFlagStateUntilTimeout+0x94>
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	689b      	ldr	r3, [r3, #8]
 80119f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119f4:	d004      	beq.n	8011a00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	689b      	ldr	r3, [r3, #8]
 80119fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80119fe:	d107      	bne.n	8011a10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	681a      	ldr	r2, [r3, #0]
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011a0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a18:	d10f      	bne.n	8011a3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011a28:	601a      	str	r2, [r3, #0]
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011a38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2200      	movs	r2, #0
 8011a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8011a4a:	2303      	movs	r3, #3
 8011a4c:	e017      	b.n	8011a7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d101      	bne.n	8011a58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011a54:	2300      	movs	r3, #0
 8011a56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	3b01      	subs	r3, #1
 8011a5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	689a      	ldr	r2, [r3, #8]
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	4013      	ands	r3, r2
 8011a68:	68ba      	ldr	r2, [r7, #8]
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	bf0c      	ite	eq
 8011a6e:	2301      	moveq	r3, #1
 8011a70:	2300      	movne	r3, #0
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	461a      	mov	r2, r3
 8011a76:	79fb      	ldrb	r3, [r7, #7]
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	d19b      	bne.n	80119b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011a7c:	2300      	movs	r3, #0
}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3720      	adds	r7, #32
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	20000080 	.word	0x20000080

08011a8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08a      	sub	sp, #40	; 0x28
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	607a      	str	r2, [r7, #4]
 8011a98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011a9e:	f7fb fa41 	bl	800cf24 <HAL_GetTick>
 8011aa2:	4602      	mov	r2, r0
 8011aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aa6:	1a9b      	subs	r3, r3, r2
 8011aa8:	683a      	ldr	r2, [r7, #0]
 8011aaa:	4413      	add	r3, r2
 8011aac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8011aae:	f7fb fa39 	bl	800cf24 <HAL_GetTick>
 8011ab2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	330c      	adds	r3, #12
 8011aba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011abc:	4b3d      	ldr	r3, [pc, #244]	; (8011bb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	4613      	mov	r3, r2
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	4413      	add	r3, r2
 8011ac6:	00da      	lsls	r2, r3, #3
 8011ac8:	1ad3      	subs	r3, r2, r3
 8011aca:	0d1b      	lsrs	r3, r3, #20
 8011acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ace:	fb02 f303 	mul.w	r3, r2, r3
 8011ad2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011ad4:	e060      	b.n	8011b98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011adc:	d107      	bne.n	8011aee <SPI_WaitFifoStateUntilTimeout+0x62>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d104      	bne.n	8011aee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	b2db      	uxtb	r3, r3
 8011aea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011aec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011af4:	d050      	beq.n	8011b98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011af6:	f7fb fa15 	bl	800cf24 <HAL_GetTick>
 8011afa:	4602      	mov	r2, r0
 8011afc:	6a3b      	ldr	r3, [r7, #32]
 8011afe:	1ad3      	subs	r3, r2, r3
 8011b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d902      	bls.n	8011b0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8011b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d13d      	bne.n	8011b88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	685a      	ldr	r2, [r3, #4]
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011b1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011b24:	d111      	bne.n	8011b4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	689b      	ldr	r3, [r3, #8]
 8011b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b2e:	d004      	beq.n	8011b3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b38:	d107      	bne.n	8011b4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	681a      	ldr	r2, [r3, #0]
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011b48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011b52:	d10f      	bne.n	8011b74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	681a      	ldr	r2, [r3, #0]
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011b62:	601a      	str	r2, [r3, #0]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	681a      	ldr	r2, [r3, #0]
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011b72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	2201      	movs	r2, #1
 8011b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8011b84:	2303      	movs	r3, #3
 8011b86:	e010      	b.n	8011baa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d101      	bne.n	8011b92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	3b01      	subs	r3, #1
 8011b96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	689a      	ldr	r2, [r3, #8]
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	4013      	ands	r3, r2
 8011ba2:	687a      	ldr	r2, [r7, #4]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d196      	bne.n	8011ad6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8011ba8:	2300      	movs	r3, #0
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	3728      	adds	r7, #40	; 0x28
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	20000080 	.word	0x20000080

08011bb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b086      	sub	sp, #24
 8011bbc:	af02      	add	r7, sp, #8
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	60b9      	str	r1, [r7, #8]
 8011bc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	685b      	ldr	r3, [r3, #4]
 8011bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011bcc:	d111      	bne.n	8011bf2 <SPI_EndRxTransaction+0x3a>
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	689b      	ldr	r3, [r3, #8]
 8011bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bd6:	d004      	beq.n	8011be2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	689b      	ldr	r3, [r3, #8]
 8011bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011be0:	d107      	bne.n	8011bf2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011bf0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	9300      	str	r3, [sp, #0]
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	2180      	movs	r1, #128	; 0x80
 8011bfc:	68f8      	ldr	r0, [r7, #12]
 8011bfe:	f7ff febd 	bl	801197c <SPI_WaitFlagStateUntilTimeout>
 8011c02:	4603      	mov	r3, r0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d007      	beq.n	8011c18 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c0c:	f043 0220 	orr.w	r2, r3, #32
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011c14:	2303      	movs	r3, #3
 8011c16:	e023      	b.n	8011c60 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011c20:	d11d      	bne.n	8011c5e <SPI_EndRxTransaction+0xa6>
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	689b      	ldr	r3, [r3, #8]
 8011c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c2a:	d004      	beq.n	8011c36 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	689b      	ldr	r3, [r3, #8]
 8011c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c34:	d113      	bne.n	8011c5e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	9300      	str	r3, [sp, #0]
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011c42:	68f8      	ldr	r0, [r7, #12]
 8011c44:	f7ff ff22 	bl	8011a8c <SPI_WaitFifoStateUntilTimeout>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d007      	beq.n	8011c5e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c52:	f043 0220 	orr.w	r2, r3, #32
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8011c5a:	2303      	movs	r3, #3
 8011c5c:	e000      	b.n	8011c60 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8011c5e:	2300      	movs	r3, #0
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3710      	adds	r7, #16
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}

08011c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b086      	sub	sp, #24
 8011c6c:	af02      	add	r7, sp, #8
 8011c6e:	60f8      	str	r0, [r7, #12]
 8011c70:	60b9      	str	r1, [r7, #8]
 8011c72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	9300      	str	r3, [sp, #0]
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8011c80:	68f8      	ldr	r0, [r7, #12]
 8011c82:	f7ff ff03 	bl	8011a8c <SPI_WaitFifoStateUntilTimeout>
 8011c86:	4603      	mov	r3, r0
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d007      	beq.n	8011c9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c90:	f043 0220 	orr.w	r2, r3, #32
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011c98:	2303      	movs	r3, #3
 8011c9a:	e027      	b.n	8011cec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	9300      	str	r3, [sp, #0]
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	2180      	movs	r1, #128	; 0x80
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f7ff fe68 	bl	801197c <SPI_WaitFlagStateUntilTimeout>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d007      	beq.n	8011cc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cb6:	f043 0220 	orr.w	r2, r3, #32
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011cbe:	2303      	movs	r3, #3
 8011cc0:	e014      	b.n	8011cec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011cce:	68f8      	ldr	r0, [r7, #12]
 8011cd0:	f7ff fedc 	bl	8011a8c <SPI_WaitFifoStateUntilTimeout>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d007      	beq.n	8011cea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cde:	f043 0220 	orr.w	r2, r3, #32
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011ce6:	2303      	movs	r3, #3
 8011ce8:	e000      	b.n	8011cec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011cea:	2300      	movs	r3, #0
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3710      	adds	r7, #16
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d101      	bne.n	8011d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011d02:	2301      	movs	r3, #1
 8011d04:	e049      	b.n	8011d9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d106      	bne.n	8011d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2200      	movs	r2, #0
 8011d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 f841 	bl	8011da2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2202      	movs	r2, #2
 8011d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	3304      	adds	r3, #4
 8011d30:	4619      	mov	r1, r3
 8011d32:	4610      	mov	r0, r2
 8011d34:	f000 f9ce 	bl	80120d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2201      	movs	r2, #1
 8011d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2201      	movs	r2, #1
 8011d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2201      	movs	r2, #1
 8011d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2201      	movs	r2, #1
 8011d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2201      	movs	r2, #1
 8011d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2201      	movs	r2, #1
 8011d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2201      	movs	r2, #1
 8011d8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2201      	movs	r2, #1
 8011d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011d98:	2300      	movs	r3, #0
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3708      	adds	r7, #8
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8011da2:	b480      	push	{r7}
 8011da4:	b083      	sub	sp, #12
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011daa:	bf00      	nop
 8011dac:	370c      	adds	r7, #12
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bc80      	pop	{r7}
 8011db2:	4770      	bx	lr

08011db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011db4:	b480      	push	{r7}
 8011db6:	b085      	sub	sp, #20
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011dc2:	b2db      	uxtb	r3, r3
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d001      	beq.n	8011dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011dc8:	2301      	movs	r3, #1
 8011dca:	e036      	b.n	8011e3a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2202      	movs	r2, #2
 8011dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	68da      	ldr	r2, [r3, #12]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	f042 0201 	orr.w	r2, r2, #1
 8011de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	4a16      	ldr	r2, [pc, #88]	; (8011e44 <HAL_TIM_Base_Start_IT+0x90>)
 8011dea:	4293      	cmp	r3, r2
 8011dec:	d004      	beq.n	8011df8 <HAL_TIM_Base_Start_IT+0x44>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011df6:	d115      	bne.n	8011e24 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	689a      	ldr	r2, [r3, #8]
 8011dfe:	4b12      	ldr	r3, [pc, #72]	; (8011e48 <HAL_TIM_Base_Start_IT+0x94>)
 8011e00:	4013      	ands	r3, r2
 8011e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2b06      	cmp	r3, #6
 8011e08:	d015      	beq.n	8011e36 <HAL_TIM_Base_Start_IT+0x82>
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e10:	d011      	beq.n	8011e36 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	681a      	ldr	r2, [r3, #0]
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f042 0201 	orr.w	r2, r2, #1
 8011e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e22:	e008      	b.n	8011e36 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f042 0201 	orr.w	r2, r2, #1
 8011e32:	601a      	str	r2, [r3, #0]
 8011e34:	e000      	b.n	8011e38 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011e38:	2300      	movs	r3, #0
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3714      	adds	r7, #20
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bc80      	pop	{r7}
 8011e42:	4770      	bx	lr
 8011e44:	40012c00 	.word	0x40012c00
 8011e48:	00010007 	.word	0x00010007

08011e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b082      	sub	sp, #8
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	691b      	ldr	r3, [r3, #16]
 8011e5a:	f003 0302 	and.w	r3, r3, #2
 8011e5e:	2b02      	cmp	r3, #2
 8011e60:	d122      	bne.n	8011ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	f003 0302 	and.w	r3, r3, #2
 8011e6c:	2b02      	cmp	r3, #2
 8011e6e:	d11b      	bne.n	8011ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f06f 0202 	mvn.w	r2, #2
 8011e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	2201      	movs	r2, #1
 8011e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	699b      	ldr	r3, [r3, #24]
 8011e86:	f003 0303 	and.w	r3, r3, #3
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d003      	beq.n	8011e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 f904 	bl	801209c <HAL_TIM_IC_CaptureCallback>
 8011e94:	e005      	b.n	8011ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 f8f7 	bl	801208a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f000 f906 	bl	80120ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	691b      	ldr	r3, [r3, #16]
 8011eae:	f003 0304 	and.w	r3, r3, #4
 8011eb2:	2b04      	cmp	r3, #4
 8011eb4:	d122      	bne.n	8011efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	f003 0304 	and.w	r3, r3, #4
 8011ec0:	2b04      	cmp	r3, #4
 8011ec2:	d11b      	bne.n	8011efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f06f 0204 	mvn.w	r2, #4
 8011ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2202      	movs	r2, #2
 8011ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	699b      	ldr	r3, [r3, #24]
 8011eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d003      	beq.n	8011eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f000 f8da 	bl	801209c <HAL_TIM_IC_CaptureCallback>
 8011ee8:	e005      	b.n	8011ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 f8cd 	bl	801208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 f8dc 	bl	80120ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	691b      	ldr	r3, [r3, #16]
 8011f02:	f003 0308 	and.w	r3, r3, #8
 8011f06:	2b08      	cmp	r3, #8
 8011f08:	d122      	bne.n	8011f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	68db      	ldr	r3, [r3, #12]
 8011f10:	f003 0308 	and.w	r3, r3, #8
 8011f14:	2b08      	cmp	r3, #8
 8011f16:	d11b      	bne.n	8011f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	f06f 0208 	mvn.w	r2, #8
 8011f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2204      	movs	r2, #4
 8011f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	69db      	ldr	r3, [r3, #28]
 8011f2e:	f003 0303 	and.w	r3, r3, #3
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d003      	beq.n	8011f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f000 f8b0 	bl	801209c <HAL_TIM_IC_CaptureCallback>
 8011f3c:	e005      	b.n	8011f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f000 f8a3 	bl	801208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f000 f8b2 	bl	80120ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	691b      	ldr	r3, [r3, #16]
 8011f56:	f003 0310 	and.w	r3, r3, #16
 8011f5a:	2b10      	cmp	r3, #16
 8011f5c:	d122      	bne.n	8011fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	f003 0310 	and.w	r3, r3, #16
 8011f68:	2b10      	cmp	r3, #16
 8011f6a:	d11b      	bne.n	8011fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f06f 0210 	mvn.w	r2, #16
 8011f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2208      	movs	r2, #8
 8011f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	69db      	ldr	r3, [r3, #28]
 8011f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d003      	beq.n	8011f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f000 f886 	bl	801209c <HAL_TIM_IC_CaptureCallback>
 8011f90:	e005      	b.n	8011f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f92:	6878      	ldr	r0, [r7, #4]
 8011f94:	f000 f879 	bl	801208a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f000 f888 	bl	80120ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	691b      	ldr	r3, [r3, #16]
 8011faa:	f003 0301 	and.w	r3, r3, #1
 8011fae:	2b01      	cmp	r3, #1
 8011fb0:	d10e      	bne.n	8011fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	f003 0301 	and.w	r3, r3, #1
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d107      	bne.n	8011fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f06f 0201 	mvn.w	r2, #1
 8011fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7f8 f8da 	bl	800a184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	691b      	ldr	r3, [r3, #16]
 8011fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fda:	2b80      	cmp	r3, #128	; 0x80
 8011fdc:	d10e      	bne.n	8011ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fe8:	2b80      	cmp	r3, #128	; 0x80
 8011fea:	d107      	bne.n	8011ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f000 f8d7 	bl	80121aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	691b      	ldr	r3, [r3, #16]
 8012002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801200a:	d10e      	bne.n	801202a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	68db      	ldr	r3, [r3, #12]
 8012012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012016:	2b80      	cmp	r3, #128	; 0x80
 8012018:	d107      	bne.n	801202a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f000 f8c9 	bl	80121bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	691b      	ldr	r3, [r3, #16]
 8012030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012034:	2b40      	cmp	r3, #64	; 0x40
 8012036:	d10e      	bne.n	8012056 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012042:	2b40      	cmp	r3, #64	; 0x40
 8012044:	d107      	bne.n	8012056 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801204e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f000 f835 	bl	80120c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	691b      	ldr	r3, [r3, #16]
 801205c:	f003 0320 	and.w	r3, r3, #32
 8012060:	2b20      	cmp	r3, #32
 8012062:	d10e      	bne.n	8012082 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	68db      	ldr	r3, [r3, #12]
 801206a:	f003 0320 	and.w	r3, r3, #32
 801206e:	2b20      	cmp	r3, #32
 8012070:	d107      	bne.n	8012082 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	f06f 0220 	mvn.w	r2, #32
 801207a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f000 f88b 	bl	8012198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012082:	bf00      	nop
 8012084:	3708      	adds	r7, #8
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}

0801208a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801208a:	b480      	push	{r7}
 801208c:	b083      	sub	sp, #12
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012092:	bf00      	nop
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	bc80      	pop	{r7}
 801209a:	4770      	bx	lr

0801209c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801209c:	b480      	push	{r7}
 801209e:	b083      	sub	sp, #12
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80120a4:	bf00      	nop
 80120a6:	370c      	adds	r7, #12
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bc80      	pop	{r7}
 80120ac:	4770      	bx	lr

080120ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80120ae:	b480      	push	{r7}
 80120b0:	b083      	sub	sp, #12
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80120b6:	bf00      	nop
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bc80      	pop	{r7}
 80120be:	4770      	bx	lr

080120c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80120c0:	b480      	push	{r7}
 80120c2:	b083      	sub	sp, #12
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80120c8:	bf00      	nop
 80120ca:	370c      	adds	r7, #12
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bc80      	pop	{r7}
 80120d0:	4770      	bx	lr
	...

080120d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80120d4:	b480      	push	{r7}
 80120d6:	b085      	sub	sp, #20
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	4a29      	ldr	r2, [pc, #164]	; (801218c <TIM_Base_SetConfig+0xb8>)
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d003      	beq.n	80120f4 <TIM_Base_SetConfig+0x20>
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80120f2:	d108      	bne.n	8012106 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80120fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	68fa      	ldr	r2, [r7, #12]
 8012102:	4313      	orrs	r3, r2
 8012104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	4a20      	ldr	r2, [pc, #128]	; (801218c <TIM_Base_SetConfig+0xb8>)
 801210a:	4293      	cmp	r3, r2
 801210c:	d00b      	beq.n	8012126 <TIM_Base_SetConfig+0x52>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012114:	d007      	beq.n	8012126 <TIM_Base_SetConfig+0x52>
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	4a1d      	ldr	r2, [pc, #116]	; (8012190 <TIM_Base_SetConfig+0xbc>)
 801211a:	4293      	cmp	r3, r2
 801211c:	d003      	beq.n	8012126 <TIM_Base_SetConfig+0x52>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	4a1c      	ldr	r2, [pc, #112]	; (8012194 <TIM_Base_SetConfig+0xc0>)
 8012122:	4293      	cmp	r3, r2
 8012124:	d108      	bne.n	8012138 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801212c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	68db      	ldr	r3, [r3, #12]
 8012132:	68fa      	ldr	r2, [r7, #12]
 8012134:	4313      	orrs	r3, r2
 8012136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	695b      	ldr	r3, [r3, #20]
 8012142:	4313      	orrs	r3, r2
 8012144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	68fa      	ldr	r2, [r7, #12]
 801214a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	689a      	ldr	r2, [r3, #8]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	4a0b      	ldr	r2, [pc, #44]	; (801218c <TIM_Base_SetConfig+0xb8>)
 8012160:	4293      	cmp	r3, r2
 8012162:	d007      	beq.n	8012174 <TIM_Base_SetConfig+0xa0>
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	4a0a      	ldr	r2, [pc, #40]	; (8012190 <TIM_Base_SetConfig+0xbc>)
 8012168:	4293      	cmp	r3, r2
 801216a:	d003      	beq.n	8012174 <TIM_Base_SetConfig+0xa0>
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	4a09      	ldr	r2, [pc, #36]	; (8012194 <TIM_Base_SetConfig+0xc0>)
 8012170:	4293      	cmp	r3, r2
 8012172:	d103      	bne.n	801217c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	691a      	ldr	r2, [r3, #16]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2201      	movs	r2, #1
 8012180:	615a      	str	r2, [r3, #20]
}
 8012182:	bf00      	nop
 8012184:	3714      	adds	r7, #20
 8012186:	46bd      	mov	sp, r7
 8012188:	bc80      	pop	{r7}
 801218a:	4770      	bx	lr
 801218c:	40012c00 	.word	0x40012c00
 8012190:	40014400 	.word	0x40014400
 8012194:	40014800 	.word	0x40014800

08012198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012198:	b480      	push	{r7}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80121a0:	bf00      	nop
 80121a2:	370c      	adds	r7, #12
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bc80      	pop	{r7}
 80121a8:	4770      	bx	lr

080121aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80121aa:	b480      	push	{r7}
 80121ac:	b083      	sub	sp, #12
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80121b2:	bf00      	nop
 80121b4:	370c      	adds	r7, #12
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bc80      	pop	{r7}
 80121ba:	4770      	bx	lr

080121bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80121c4:	bf00      	nop
 80121c6:	370c      	adds	r7, #12
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bc80      	pop	{r7}
 80121cc:	4770      	bx	lr

080121ce <LL_RCC_GetUSARTClockSource>:
{
 80121ce:	b480      	push	{r7}
 80121d0:	b083      	sub	sp, #12
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80121d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80121da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	401a      	ands	r2, r3
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	041b      	lsls	r3, r3, #16
 80121e6:	4313      	orrs	r3, r2
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	370c      	adds	r7, #12
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bc80      	pop	{r7}
 80121f0:	4770      	bx	lr

080121f2 <LL_RCC_GetLPUARTClockSource>:
{
 80121f2:	b480      	push	{r7}
 80121f4:	b083      	sub	sp, #12
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80121fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80121fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	4013      	ands	r3, r2
}
 8012206:	4618      	mov	r0, r3
 8012208:	370c      	adds	r7, #12
 801220a:	46bd      	mov	sp, r7
 801220c:	bc80      	pop	{r7}
 801220e:	4770      	bx	lr

08012210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d101      	bne.n	8012222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801221e:	2301      	movs	r3, #1
 8012220:	e042      	b.n	80122a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012228:	2b00      	cmp	r3, #0
 801222a:	d106      	bne.n	801223a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2200      	movs	r2, #0
 8012230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f7f8 f8e3 	bl	800a400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2224      	movs	r2, #36	; 0x24
 801223e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	f022 0201 	bic.w	r2, r2, #1
 8012250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f000 fd5c 	bl	8012d10 <UART_SetConfig>
 8012258:	4603      	mov	r3, r0
 801225a:	2b01      	cmp	r3, #1
 801225c:	d101      	bne.n	8012262 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801225e:	2301      	movs	r3, #1
 8012260:	e022      	b.n	80122a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012266:	2b00      	cmp	r3, #0
 8012268:	d002      	beq.n	8012270 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801226a:	6878      	ldr	r0, [r7, #4]
 801226c:	f000 ffc4 	bl	80131f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	685a      	ldr	r2, [r3, #4]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801227e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	689a      	ldr	r2, [r3, #8]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801228e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	681a      	ldr	r2, [r3, #0]
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f042 0201 	orr.w	r2, r2, #1
 801229e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f001 f84a 	bl	801333a <UART_CheckIdleState>
 80122a6:	4603      	mov	r3, r0
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3708      	adds	r7, #8
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d101      	bne.n	80122c2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80122be:	2301      	movs	r3, #1
 80122c0:	e04a      	b.n	8012358 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d106      	bne.n	80122da <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2200      	movs	r2, #0
 80122d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7f8 f893 	bl	800a400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2224      	movs	r2, #36	; 0x24
 80122de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	f022 0201 	bic.w	r2, r2, #1
 80122f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f000 fd0c 	bl	8012d10 <UART_SetConfig>
 80122f8:	4603      	mov	r3, r0
 80122fa:	2b01      	cmp	r3, #1
 80122fc:	d101      	bne.n	8012302 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80122fe:	2301      	movs	r3, #1
 8012300:	e02a      	b.n	8012358 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012306:	2b00      	cmp	r3, #0
 8012308:	d002      	beq.n	8012310 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 ff74 	bl	80131f8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	685a      	ldr	r2, [r3, #4]
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801231e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	689a      	ldr	r2, [r3, #8]
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 801232e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	689a      	ldr	r2, [r3, #8]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	f042 0208 	orr.w	r2, r2, #8
 801233e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	681a      	ldr	r2, [r3, #0]
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	f042 0201 	orr.w	r2, r2, #1
 801234e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f000 fff2 	bl	801333a <UART_CheckIdleState>
 8012356:	4603      	mov	r3, r0
}
 8012358:	4618      	mov	r0, r3
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b08a      	sub	sp, #40	; 0x28
 8012364:	af02      	add	r7, sp, #8
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	603b      	str	r3, [r7, #0]
 801236c:	4613      	mov	r3, r2
 801236e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012376:	2b20      	cmp	r3, #32
 8012378:	d173      	bne.n	8012462 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d002      	beq.n	8012386 <HAL_UART_Transmit+0x26>
 8012380:	88fb      	ldrh	r3, [r7, #6]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d101      	bne.n	801238a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012386:	2301      	movs	r3, #1
 8012388:	e06c      	b.n	8012464 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2200      	movs	r2, #0
 801238e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	2221      	movs	r2, #33	; 0x21
 8012396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801239a:	f7fa fdc3 	bl	800cf24 <HAL_GetTick>
 801239e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	88fa      	ldrh	r2, [r7, #6]
 80123a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	88fa      	ldrh	r2, [r7, #6]
 80123ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	689b      	ldr	r3, [r3, #8]
 80123b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123b8:	d108      	bne.n	80123cc <HAL_UART_Transmit+0x6c>
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	691b      	ldr	r3, [r3, #16]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d104      	bne.n	80123cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80123c2:	2300      	movs	r3, #0
 80123c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	61bb      	str	r3, [r7, #24]
 80123ca:	e003      	b.n	80123d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80123d0:	2300      	movs	r3, #0
 80123d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80123d4:	e02c      	b.n	8012430 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	9300      	str	r3, [sp, #0]
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	2200      	movs	r2, #0
 80123de:	2180      	movs	r1, #128	; 0x80
 80123e0:	68f8      	ldr	r0, [r7, #12]
 80123e2:	f000 fff8 	bl	80133d6 <UART_WaitOnFlagUntilTimeout>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d001      	beq.n	80123f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80123ec:	2303      	movs	r3, #3
 80123ee:	e039      	b.n	8012464 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80123f0:	69fb      	ldr	r3, [r7, #28]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d10b      	bne.n	801240e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	881b      	ldrh	r3, [r3, #0]
 80123fa:	461a      	mov	r2, r3
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012404:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	3302      	adds	r3, #2
 801240a:	61bb      	str	r3, [r7, #24]
 801240c:	e007      	b.n	801241e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	781a      	ldrb	r2, [r3, #0]
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	3301      	adds	r3, #1
 801241c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012424:	b29b      	uxth	r3, r3
 8012426:	3b01      	subs	r3, #1
 8012428:	b29a      	uxth	r2, r3
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012436:	b29b      	uxth	r3, r3
 8012438:	2b00      	cmp	r3, #0
 801243a:	d1cc      	bne.n	80123d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	9300      	str	r3, [sp, #0]
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	2200      	movs	r2, #0
 8012444:	2140      	movs	r1, #64	; 0x40
 8012446:	68f8      	ldr	r0, [r7, #12]
 8012448:	f000 ffc5 	bl	80133d6 <UART_WaitOnFlagUntilTimeout>
 801244c:	4603      	mov	r3, r0
 801244e:	2b00      	cmp	r3, #0
 8012450:	d001      	beq.n	8012456 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8012452:	2303      	movs	r3, #3
 8012454:	e006      	b.n	8012464 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	2220      	movs	r2, #32
 801245a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801245e:	2300      	movs	r3, #0
 8012460:	e000      	b.n	8012464 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8012462:	2302      	movs	r3, #2
  }
}
 8012464:	4618      	mov	r0, r3
 8012466:	3720      	adds	r7, #32
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}

0801246c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b08a      	sub	sp, #40	; 0x28
 8012470:	af02      	add	r7, sp, #8
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	603b      	str	r3, [r7, #0]
 8012478:	4613      	mov	r3, r2
 801247a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012482:	2b20      	cmp	r3, #32
 8012484:	f040 80b1 	bne.w	80125ea <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d002      	beq.n	8012494 <HAL_UART_Receive+0x28>
 801248e:	88fb      	ldrh	r3, [r7, #6]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d101      	bne.n	8012498 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8012494:	2301      	movs	r3, #1
 8012496:	e0a9      	b.n	80125ec <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2200      	movs	r2, #0
 801249c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	2222      	movs	r2, #34	; 0x22
 80124a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2200      	movs	r2, #0
 80124ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80124ae:	f7fa fd39 	bl	800cf24 <HAL_GetTick>
 80124b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	88fa      	ldrh	r2, [r7, #6]
 80124b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	88fa      	ldrh	r2, [r7, #6]
 80124c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	689b      	ldr	r3, [r3, #8]
 80124c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80124cc:	d10e      	bne.n	80124ec <HAL_UART_Receive+0x80>
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	691b      	ldr	r3, [r3, #16]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d105      	bne.n	80124e2 <HAL_UART_Receive+0x76>
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80124dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80124e0:	e02d      	b.n	801253e <HAL_UART_Receive+0xd2>
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	22ff      	movs	r2, #255	; 0xff
 80124e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80124ea:	e028      	b.n	801253e <HAL_UART_Receive+0xd2>
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	689b      	ldr	r3, [r3, #8]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d10d      	bne.n	8012510 <HAL_UART_Receive+0xa4>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	691b      	ldr	r3, [r3, #16]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d104      	bne.n	8012506 <HAL_UART_Receive+0x9a>
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	22ff      	movs	r2, #255	; 0xff
 8012500:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012504:	e01b      	b.n	801253e <HAL_UART_Receive+0xd2>
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	227f      	movs	r2, #127	; 0x7f
 801250a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801250e:	e016      	b.n	801253e <HAL_UART_Receive+0xd2>
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	689b      	ldr	r3, [r3, #8]
 8012514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012518:	d10d      	bne.n	8012536 <HAL_UART_Receive+0xca>
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	691b      	ldr	r3, [r3, #16]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d104      	bne.n	801252c <HAL_UART_Receive+0xc0>
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	227f      	movs	r2, #127	; 0x7f
 8012526:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801252a:	e008      	b.n	801253e <HAL_UART_Receive+0xd2>
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	223f      	movs	r2, #63	; 0x3f
 8012530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012534:	e003      	b.n	801253e <HAL_UART_Receive+0xd2>
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	2200      	movs	r2, #0
 801253a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012544:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	689b      	ldr	r3, [r3, #8]
 801254a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801254e:	d108      	bne.n	8012562 <HAL_UART_Receive+0xf6>
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	691b      	ldr	r3, [r3, #16]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d104      	bne.n	8012562 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8012558:	2300      	movs	r3, #0
 801255a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	61bb      	str	r3, [r7, #24]
 8012560:	e003      	b.n	801256a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012566:	2300      	movs	r3, #0
 8012568:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801256a:	e032      	b.n	80125d2 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	9300      	str	r3, [sp, #0]
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	2200      	movs	r2, #0
 8012574:	2120      	movs	r1, #32
 8012576:	68f8      	ldr	r0, [r7, #12]
 8012578:	f000 ff2d 	bl	80133d6 <UART_WaitOnFlagUntilTimeout>
 801257c:	4603      	mov	r3, r0
 801257e:	2b00      	cmp	r3, #0
 8012580:	d001      	beq.n	8012586 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8012582:	2303      	movs	r3, #3
 8012584:	e032      	b.n	80125ec <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d10c      	bne.n	80125a6 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012592:	b29a      	uxth	r2, r3
 8012594:	8a7b      	ldrh	r3, [r7, #18]
 8012596:	4013      	ands	r3, r2
 8012598:	b29a      	uxth	r2, r3
 801259a:	69bb      	ldr	r3, [r7, #24]
 801259c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801259e:	69bb      	ldr	r3, [r7, #24]
 80125a0:	3302      	adds	r3, #2
 80125a2:	61bb      	str	r3, [r7, #24]
 80125a4:	e00c      	b.n	80125c0 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	8a7b      	ldrh	r3, [r7, #18]
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	4013      	ands	r3, r2
 80125b4:	b2da      	uxtb	r2, r3
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	3301      	adds	r3, #1
 80125be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	3b01      	subs	r3, #1
 80125ca:	b29a      	uxth	r2, r3
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125d8:	b29b      	uxth	r3, r3
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d1c6      	bne.n	801256c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	2220      	movs	r2, #32
 80125e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80125e6:	2300      	movs	r3, #0
 80125e8:	e000      	b.n	80125ec <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80125ea:	2302      	movs	r3, #2
  }
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3720      	adds	r7, #32
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b08a      	sub	sp, #40	; 0x28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	4613      	mov	r3, r2
 8012600:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012608:	2b20      	cmp	r3, #32
 801260a:	d137      	bne.n	801267c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d002      	beq.n	8012618 <HAL_UART_Receive_IT+0x24>
 8012612:	88fb      	ldrh	r3, [r7, #6]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d101      	bne.n	801261c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8012618:	2301      	movs	r3, #1
 801261a:	e030      	b.n	801267e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	2200      	movs	r2, #0
 8012620:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	4a18      	ldr	r2, [pc, #96]	; (8012688 <HAL_UART_Receive_IT+0x94>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d01f      	beq.n	801266c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012636:	2b00      	cmp	r3, #0
 8012638:	d018      	beq.n	801266c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	e853 3f00 	ldrex	r3, [r3]
 8012646:	613b      	str	r3, [r7, #16]
   return(result);
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801264e:	627b      	str	r3, [r7, #36]	; 0x24
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	461a      	mov	r2, r3
 8012656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012658:	623b      	str	r3, [r7, #32]
 801265a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801265c:	69f9      	ldr	r1, [r7, #28]
 801265e:	6a3a      	ldr	r2, [r7, #32]
 8012660:	e841 2300 	strex	r3, r2, [r1]
 8012664:	61bb      	str	r3, [r7, #24]
   return(result);
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d1e6      	bne.n	801263a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801266c:	88fb      	ldrh	r3, [r7, #6]
 801266e:	461a      	mov	r2, r3
 8012670:	68b9      	ldr	r1, [r7, #8]
 8012672:	68f8      	ldr	r0, [r7, #12]
 8012674:	f000 ff78 	bl	8013568 <UART_Start_Receive_IT>
 8012678:	4603      	mov	r3, r0
 801267a:	e000      	b.n	801267e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801267c:	2302      	movs	r3, #2
  }
}
 801267e:	4618      	mov	r0, r3
 8012680:	3728      	adds	r7, #40	; 0x28
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	40008000 	.word	0x40008000

0801268c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b0ba      	sub	sp, #232	; 0xe8
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	69db      	ldr	r3, [r3, #28]
 801269a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	689b      	ldr	r3, [r3, #8]
 80126ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80126b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80126b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80126ba:	4013      	ands	r3, r2
 80126bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80126c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d11b      	bne.n	8012700 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80126c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80126cc:	f003 0320 	and.w	r3, r3, #32
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d015      	beq.n	8012700 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80126d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126d8:	f003 0320 	and.w	r3, r3, #32
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d105      	bne.n	80126ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80126e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d009      	beq.n	8012700 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	f000 82e3 	beq.w	8012cbc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	4798      	blx	r3
      }
      return;
 80126fe:	e2dd      	b.n	8012cbc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012704:	2b00      	cmp	r3, #0
 8012706:	f000 8123 	beq.w	8012950 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801270a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801270e:	4b8d      	ldr	r3, [pc, #564]	; (8012944 <HAL_UART_IRQHandler+0x2b8>)
 8012710:	4013      	ands	r3, r2
 8012712:	2b00      	cmp	r3, #0
 8012714:	d106      	bne.n	8012724 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012716:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801271a:	4b8b      	ldr	r3, [pc, #556]	; (8012948 <HAL_UART_IRQHandler+0x2bc>)
 801271c:	4013      	ands	r3, r2
 801271e:	2b00      	cmp	r3, #0
 8012720:	f000 8116 	beq.w	8012950 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012728:	f003 0301 	and.w	r3, r3, #1
 801272c:	2b00      	cmp	r3, #0
 801272e:	d011      	beq.n	8012754 <HAL_UART_IRQHandler+0xc8>
 8012730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012738:	2b00      	cmp	r3, #0
 801273a:	d00b      	beq.n	8012754 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2201      	movs	r2, #1
 8012742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801274a:	f043 0201 	orr.w	r2, r3, #1
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012758:	f003 0302 	and.w	r3, r3, #2
 801275c:	2b00      	cmp	r3, #0
 801275e:	d011      	beq.n	8012784 <HAL_UART_IRQHandler+0xf8>
 8012760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012764:	f003 0301 	and.w	r3, r3, #1
 8012768:	2b00      	cmp	r3, #0
 801276a:	d00b      	beq.n	8012784 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2202      	movs	r2, #2
 8012772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801277a:	f043 0204 	orr.w	r2, r3, #4
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012788:	f003 0304 	and.w	r3, r3, #4
 801278c:	2b00      	cmp	r3, #0
 801278e:	d011      	beq.n	80127b4 <HAL_UART_IRQHandler+0x128>
 8012790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012794:	f003 0301 	and.w	r3, r3, #1
 8012798:	2b00      	cmp	r3, #0
 801279a:	d00b      	beq.n	80127b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	2204      	movs	r2, #4
 80127a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127aa:	f043 0202 	orr.w	r2, r3, #2
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80127b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127b8:	f003 0308 	and.w	r3, r3, #8
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d017      	beq.n	80127f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80127c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127c4:	f003 0320 	and.w	r3, r3, #32
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d105      	bne.n	80127d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80127cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80127d0:	4b5c      	ldr	r3, [pc, #368]	; (8012944 <HAL_UART_IRQHandler+0x2b8>)
 80127d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d00b      	beq.n	80127f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	2208      	movs	r2, #8
 80127de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127e6:	f043 0208 	orr.w	r2, r3, #8
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80127f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d012      	beq.n	8012822 <HAL_UART_IRQHandler+0x196>
 80127fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012804:	2b00      	cmp	r3, #0
 8012806:	d00c      	beq.n	8012822 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012818:	f043 0220 	orr.w	r2, r3, #32
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012828:	2b00      	cmp	r3, #0
 801282a:	f000 8249 	beq.w	8012cc0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012832:	f003 0320 	and.w	r3, r3, #32
 8012836:	2b00      	cmp	r3, #0
 8012838:	d013      	beq.n	8012862 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801283a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801283e:	f003 0320 	and.w	r3, r3, #32
 8012842:	2b00      	cmp	r3, #0
 8012844:	d105      	bne.n	8012852 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801284e:	2b00      	cmp	r3, #0
 8012850:	d007      	beq.n	8012862 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012856:	2b00      	cmp	r3, #0
 8012858:	d003      	beq.n	8012862 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	689b      	ldr	r3, [r3, #8]
 8012872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012876:	2b40      	cmp	r3, #64	; 0x40
 8012878:	d005      	beq.n	8012886 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801287a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801287e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012882:	2b00      	cmp	r3, #0
 8012884:	d054      	beq.n	8012930 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f000 ff8e 	bl	80137a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	689b      	ldr	r3, [r3, #8]
 8012892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012896:	2b40      	cmp	r3, #64	; 0x40
 8012898:	d146      	bne.n	8012928 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	3308      	adds	r3, #8
 80128a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128a8:	e853 3f00 	ldrex	r3, [r3]
 80128ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80128b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80128b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	3308      	adds	r3, #8
 80128c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80128c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80128ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80128d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80128d6:	e841 2300 	strex	r3, r2, [r1]
 80128da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80128de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d1d9      	bne.n	801289a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d017      	beq.n	8012920 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128f6:	4a15      	ldr	r2, [pc, #84]	; (801294c <HAL_UART_IRQHandler+0x2c0>)
 80128f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012900:	4618      	mov	r0, r3
 8012902:	f7fb fca4 	bl	800e24e <HAL_DMA_Abort_IT>
 8012906:	4603      	mov	r3, r0
 8012908:	2b00      	cmp	r3, #0
 801290a:	d019      	beq.n	8012940 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012914:	687a      	ldr	r2, [r7, #4]
 8012916:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801291a:	4610      	mov	r0, r2
 801291c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801291e:	e00f      	b.n	8012940 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f000 f9e0 	bl	8012ce6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012926:	e00b      	b.n	8012940 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 f9dc 	bl	8012ce6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801292e:	e007      	b.n	8012940 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f000 f9d8 	bl	8012ce6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2200      	movs	r2, #0
 801293a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801293e:	e1bf      	b.n	8012cc0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012940:	bf00      	nop
    return;
 8012942:	e1bd      	b.n	8012cc0 <HAL_UART_IRQHandler+0x634>
 8012944:	10000001 	.word	0x10000001
 8012948:	04000120 	.word	0x04000120
 801294c:	08013873 	.word	0x08013873

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012954:	2b01      	cmp	r3, #1
 8012956:	f040 8153 	bne.w	8012c00 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801295a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801295e:	f003 0310 	and.w	r3, r3, #16
 8012962:	2b00      	cmp	r3, #0
 8012964:	f000 814c 	beq.w	8012c00 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801296c:	f003 0310 	and.w	r3, r3, #16
 8012970:	2b00      	cmp	r3, #0
 8012972:	f000 8145 	beq.w	8012c00 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	2210      	movs	r2, #16
 801297c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	689b      	ldr	r3, [r3, #8]
 8012984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012988:	2b40      	cmp	r3, #64	; 0x40
 801298a:	f040 80bb 	bne.w	8012b04 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801299c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	f000 818f 	beq.w	8012cc4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80129b0:	429a      	cmp	r2, r3
 80129b2:	f080 8187 	bcs.w	8012cc4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80129bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f003 0320 	and.w	r3, r3, #32
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	f040 8087 	bne.w	8012ae2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80129e0:	e853 3f00 	ldrex	r3, [r3]
 80129e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80129e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80129ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80129f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	461a      	mov	r2, r3
 80129fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80129fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012a02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012a0e:	e841 2300 	strex	r3, r2, [r1]
 8012a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d1da      	bne.n	80129d4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	3308      	adds	r3, #8
 8012a24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a28:	e853 3f00 	ldrex	r3, [r3]
 8012a2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a30:	f023 0301 	bic.w	r3, r3, #1
 8012a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	3308      	adds	r3, #8
 8012a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012a42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012a46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012a4e:	e841 2300 	strex	r3, r2, [r1]
 8012a52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1e1      	bne.n	8012a1e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	3308      	adds	r3, #8
 8012a60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a64:	e853 3f00 	ldrex	r3, [r3]
 8012a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	3308      	adds	r3, #8
 8012a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012a80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012a86:	e841 2300 	strex	r3, r2, [r1]
 8012a8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d1e3      	bne.n	8012a5a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2220      	movs	r2, #32
 8012a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012aa8:	e853 3f00 	ldrex	r3, [r3]
 8012aac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ab0:	f023 0310 	bic.w	r3, r3, #16
 8012ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	461a      	mov	r2, r3
 8012abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ac2:	65bb      	str	r3, [r7, #88]	; 0x58
 8012ac4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ac6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012ac8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012aca:	e841 2300 	strex	r3, r2, [r1]
 8012ace:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d1e4      	bne.n	8012aa0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7fb fb58 	bl	800e192 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2202      	movs	r2, #2
 8012ae6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012af4:	b29b      	uxth	r3, r3
 8012af6:	1ad3      	subs	r3, r2, r3
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	4619      	mov	r1, r3
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f000 f8fb 	bl	8012cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012b02:	e0df      	b.n	8012cc4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	1ad3      	subs	r3, r2, r3
 8012b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	f000 80d1 	beq.w	8012cc8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8012b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	f000 80cc 	beq.w	8012cc8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b38:	e853 3f00 	ldrex	r3, [r3]
 8012b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012b44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012b52:	647b      	str	r3, [r7, #68]	; 0x44
 8012b54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b5a:	e841 2300 	strex	r3, r2, [r1]
 8012b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d1e4      	bne.n	8012b30 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	3308      	adds	r3, #8
 8012b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b70:	e853 3f00 	ldrex	r3, [r3]
 8012b74:	623b      	str	r3, [r7, #32]
   return(result);
 8012b76:	6a3b      	ldr	r3, [r7, #32]
 8012b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012b7c:	f023 0301 	bic.w	r3, r3, #1
 8012b80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	3308      	adds	r3, #8
 8012b8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012b8e:	633a      	str	r2, [r7, #48]	; 0x30
 8012b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b96:	e841 2300 	strex	r3, r2, [r1]
 8012b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d1e1      	bne.n	8012b66 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2220      	movs	r2, #32
 8012ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	2200      	movs	r2, #0
 8012bae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bbc:	693b      	ldr	r3, [r7, #16]
 8012bbe:	e853 3f00 	ldrex	r3, [r3]
 8012bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f023 0310 	bic.w	r3, r3, #16
 8012bca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012bd8:	61fb      	str	r3, [r7, #28]
 8012bda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bdc:	69b9      	ldr	r1, [r7, #24]
 8012bde:	69fa      	ldr	r2, [r7, #28]
 8012be0:	e841 2300 	strex	r3, r2, [r1]
 8012be4:	617b      	str	r3, [r7, #20]
   return(result);
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d1e4      	bne.n	8012bb6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2202      	movs	r2, #2
 8012bf0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012bf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f000 f87d 	bl	8012cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012bfe:	e063      	b.n	8012cc8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d00e      	beq.n	8012c2a <HAL_UART_IRQHandler+0x59e>
 8012c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d008      	beq.n	8012c2a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012c20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f001 fb82 	bl	801432c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c28:	e051      	b.n	8012cce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d014      	beq.n	8012c60 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d105      	bne.n	8012c4e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d008      	beq.n	8012c60 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d03a      	beq.n	8012ccc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	4798      	blx	r3
    }
    return;
 8012c5e:	e035      	b.n	8012ccc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d009      	beq.n	8012c80 <HAL_UART_IRQHandler+0x5f4>
 8012c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d003      	beq.n	8012c80 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f000 fe10 	bl	801389e <UART_EndTransmit_IT>
    return;
 8012c7e:	e026      	b.n	8012cce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d009      	beq.n	8012ca0 <HAL_UART_IRQHandler+0x614>
 8012c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d003      	beq.n	8012ca0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f001 fb59 	bl	8014350 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c9e:	e016      	b.n	8012cce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d010      	beq.n	8012cce <HAL_UART_IRQHandler+0x642>
 8012cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	da0c      	bge.n	8012cce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f001 fb42 	bl	801433e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012cba:	e008      	b.n	8012cce <HAL_UART_IRQHandler+0x642>
      return;
 8012cbc:	bf00      	nop
 8012cbe:	e006      	b.n	8012cce <HAL_UART_IRQHandler+0x642>
    return;
 8012cc0:	bf00      	nop
 8012cc2:	e004      	b.n	8012cce <HAL_UART_IRQHandler+0x642>
      return;
 8012cc4:	bf00      	nop
 8012cc6:	e002      	b.n	8012cce <HAL_UART_IRQHandler+0x642>
      return;
 8012cc8:	bf00      	nop
 8012cca:	e000      	b.n	8012cce <HAL_UART_IRQHandler+0x642>
    return;
 8012ccc:	bf00      	nop
  }
}
 8012cce:	37e8      	adds	r7, #232	; 0xe8
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012cdc:	bf00      	nop
 8012cde:	370c      	adds	r7, #12
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bc80      	pop	{r7}
 8012ce4:	4770      	bx	lr

08012ce6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012ce6:	b480      	push	{r7}
 8012ce8:	b083      	sub	sp, #12
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012cee:	bf00      	nop
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bc80      	pop	{r7}
 8012cf6:	4770      	bx	lr

08012cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	460b      	mov	r3, r1
 8012d02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012d04:	bf00      	nop
 8012d06:	370c      	adds	r7, #12
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bc80      	pop	{r7}
 8012d0c:	4770      	bx	lr
	...

08012d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012d14:	b08c      	sub	sp, #48	; 0x30
 8012d16:	af00      	add	r7, sp, #0
 8012d18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	689a      	ldr	r2, [r3, #8]
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	691b      	ldr	r3, [r3, #16]
 8012d28:	431a      	orrs	r2, r3
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	695b      	ldr	r3, [r3, #20]
 8012d2e:	431a      	orrs	r2, r3
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	69db      	ldr	r3, [r3, #28]
 8012d34:	4313      	orrs	r3, r2
 8012d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	681a      	ldr	r2, [r3, #0]
 8012d3e:	4b94      	ldr	r3, [pc, #592]	; (8012f90 <UART_SetConfig+0x280>)
 8012d40:	4013      	ands	r3, r2
 8012d42:	697a      	ldr	r2, [r7, #20]
 8012d44:	6812      	ldr	r2, [r2, #0]
 8012d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d48:	430b      	orrs	r3, r1
 8012d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	68da      	ldr	r2, [r3, #12]
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	430a      	orrs	r2, r1
 8012d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	699b      	ldr	r3, [r3, #24]
 8012d66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	4a89      	ldr	r2, [pc, #548]	; (8012f94 <UART_SetConfig+0x284>)
 8012d6e:	4293      	cmp	r3, r2
 8012d70:	d004      	beq.n	8012d7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	6a1b      	ldr	r3, [r3, #32]
 8012d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d78:	4313      	orrs	r3, r2
 8012d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	689b      	ldr	r3, [r3, #8]
 8012d82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8012d86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8012d8a:	697a      	ldr	r2, [r7, #20]
 8012d8c:	6812      	ldr	r2, [r2, #0]
 8012d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d90:	430b      	orrs	r3, r1
 8012d92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d9a:	f023 010f 	bic.w	r1, r3, #15
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	430a      	orrs	r2, r1
 8012da8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	4a7a      	ldr	r2, [pc, #488]	; (8012f98 <UART_SetConfig+0x288>)
 8012db0:	4293      	cmp	r3, r2
 8012db2:	d127      	bne.n	8012e04 <UART_SetConfig+0xf4>
 8012db4:	2003      	movs	r0, #3
 8012db6:	f7ff fa0a 	bl	80121ce <LL_RCC_GetUSARTClockSource>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8012dc0:	2b03      	cmp	r3, #3
 8012dc2:	d81b      	bhi.n	8012dfc <UART_SetConfig+0xec>
 8012dc4:	a201      	add	r2, pc, #4	; (adr r2, 8012dcc <UART_SetConfig+0xbc>)
 8012dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dca:	bf00      	nop
 8012dcc:	08012ddd 	.word	0x08012ddd
 8012dd0:	08012ded 	.word	0x08012ded
 8012dd4:	08012de5 	.word	0x08012de5
 8012dd8:	08012df5 	.word	0x08012df5
 8012ddc:	2301      	movs	r3, #1
 8012dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012de2:	e080      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012de4:	2302      	movs	r3, #2
 8012de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012dea:	e07c      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012dec:	2304      	movs	r3, #4
 8012dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012df2:	e078      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012df4:	2308      	movs	r3, #8
 8012df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012dfa:	e074      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012dfc:	2310      	movs	r3, #16
 8012dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e02:	e070      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	4a64      	ldr	r2, [pc, #400]	; (8012f9c <UART_SetConfig+0x28c>)
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d138      	bne.n	8012e80 <UART_SetConfig+0x170>
 8012e0e:	200c      	movs	r0, #12
 8012e10:	f7ff f9dd 	bl	80121ce <LL_RCC_GetUSARTClockSource>
 8012e14:	4603      	mov	r3, r0
 8012e16:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8012e1a:	2b0c      	cmp	r3, #12
 8012e1c:	d82c      	bhi.n	8012e78 <UART_SetConfig+0x168>
 8012e1e:	a201      	add	r2, pc, #4	; (adr r2, 8012e24 <UART_SetConfig+0x114>)
 8012e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e24:	08012e59 	.word	0x08012e59
 8012e28:	08012e79 	.word	0x08012e79
 8012e2c:	08012e79 	.word	0x08012e79
 8012e30:	08012e79 	.word	0x08012e79
 8012e34:	08012e69 	.word	0x08012e69
 8012e38:	08012e79 	.word	0x08012e79
 8012e3c:	08012e79 	.word	0x08012e79
 8012e40:	08012e79 	.word	0x08012e79
 8012e44:	08012e61 	.word	0x08012e61
 8012e48:	08012e79 	.word	0x08012e79
 8012e4c:	08012e79 	.word	0x08012e79
 8012e50:	08012e79 	.word	0x08012e79
 8012e54:	08012e71 	.word	0x08012e71
 8012e58:	2300      	movs	r3, #0
 8012e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e5e:	e042      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012e60:	2302      	movs	r3, #2
 8012e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e66:	e03e      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012e68:	2304      	movs	r3, #4
 8012e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e6e:	e03a      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012e70:	2308      	movs	r3, #8
 8012e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e76:	e036      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012e78:	2310      	movs	r3, #16
 8012e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e7e:	e032      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4a43      	ldr	r2, [pc, #268]	; (8012f94 <UART_SetConfig+0x284>)
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d12a      	bne.n	8012ee0 <UART_SetConfig+0x1d0>
 8012e8a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012e8e:	f7ff f9b0 	bl	80121f2 <LL_RCC_GetLPUARTClockSource>
 8012e92:	4603      	mov	r3, r0
 8012e94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012e98:	d01a      	beq.n	8012ed0 <UART_SetConfig+0x1c0>
 8012e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012e9e:	d81b      	bhi.n	8012ed8 <UART_SetConfig+0x1c8>
 8012ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012ea4:	d00c      	beq.n	8012ec0 <UART_SetConfig+0x1b0>
 8012ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012eaa:	d815      	bhi.n	8012ed8 <UART_SetConfig+0x1c8>
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d003      	beq.n	8012eb8 <UART_SetConfig+0x1a8>
 8012eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012eb4:	d008      	beq.n	8012ec8 <UART_SetConfig+0x1b8>
 8012eb6:	e00f      	b.n	8012ed8 <UART_SetConfig+0x1c8>
 8012eb8:	2300      	movs	r3, #0
 8012eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012ebe:	e012      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012ec0:	2302      	movs	r3, #2
 8012ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012ec6:	e00e      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012ec8:	2304      	movs	r3, #4
 8012eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012ece:	e00a      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012ed0:	2308      	movs	r3, #8
 8012ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012ed6:	e006      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012ed8:	2310      	movs	r3, #16
 8012eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012ede:	e002      	b.n	8012ee6 <UART_SetConfig+0x1d6>
 8012ee0:	2310      	movs	r3, #16
 8012ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4a2a      	ldr	r2, [pc, #168]	; (8012f94 <UART_SetConfig+0x284>)
 8012eec:	4293      	cmp	r3, r2
 8012eee:	f040 80a4 	bne.w	801303a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012ef6:	2b08      	cmp	r3, #8
 8012ef8:	d823      	bhi.n	8012f42 <UART_SetConfig+0x232>
 8012efa:	a201      	add	r2, pc, #4	; (adr r2, 8012f00 <UART_SetConfig+0x1f0>)
 8012efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f00:	08012f25 	.word	0x08012f25
 8012f04:	08012f43 	.word	0x08012f43
 8012f08:	08012f2d 	.word	0x08012f2d
 8012f0c:	08012f43 	.word	0x08012f43
 8012f10:	08012f33 	.word	0x08012f33
 8012f14:	08012f43 	.word	0x08012f43
 8012f18:	08012f43 	.word	0x08012f43
 8012f1c:	08012f43 	.word	0x08012f43
 8012f20:	08012f3b 	.word	0x08012f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012f24:	f7fc ff7a 	bl	800fe1c <HAL_RCC_GetPCLK1Freq>
 8012f28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012f2a:	e010      	b.n	8012f4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012f2c:	4b1c      	ldr	r3, [pc, #112]	; (8012fa0 <UART_SetConfig+0x290>)
 8012f2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012f30:	e00d      	b.n	8012f4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012f32:	f7fc febf 	bl	800fcb4 <HAL_RCC_GetSysClockFreq>
 8012f36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012f38:	e009      	b.n	8012f4e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012f3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012f40:	e005      	b.n	8012f4e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8012f42:	2300      	movs	r3, #0
 8012f44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8012f46:	2301      	movs	r3, #1
 8012f48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8012f4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	f000 8137 	beq.w	80131c4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f5a:	4a12      	ldr	r2, [pc, #72]	; (8012fa4 <UART_SetConfig+0x294>)
 8012f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012f60:	461a      	mov	r2, r3
 8012f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f64:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	685a      	ldr	r2, [r3, #4]
 8012f6e:	4613      	mov	r3, r2
 8012f70:	005b      	lsls	r3, r3, #1
 8012f72:	4413      	add	r3, r2
 8012f74:	69ba      	ldr	r2, [r7, #24]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d305      	bcc.n	8012f86 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	685b      	ldr	r3, [r3, #4]
 8012f7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012f80:	69ba      	ldr	r2, [r7, #24]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d910      	bls.n	8012fa8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8012f86:	2301      	movs	r3, #1
 8012f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012f8c:	e11a      	b.n	80131c4 <UART_SetConfig+0x4b4>
 8012f8e:	bf00      	nop
 8012f90:	cfff69f3 	.word	0xcfff69f3
 8012f94:	40008000 	.word	0x40008000
 8012f98:	40013800 	.word	0x40013800
 8012f9c:	40004400 	.word	0x40004400
 8012fa0:	00f42400 	.word	0x00f42400
 8012fa4:	0801feb4 	.word	0x0801feb4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012faa:	2200      	movs	r2, #0
 8012fac:	60bb      	str	r3, [r7, #8]
 8012fae:	60fa      	str	r2, [r7, #12]
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fb4:	4a8e      	ldr	r2, [pc, #568]	; (80131f0 <UART_SetConfig+0x4e0>)
 8012fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	603b      	str	r3, [r7, #0]
 8012fc0:	607a      	str	r2, [r7, #4]
 8012fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012fca:	f7f6 f913 	bl	80091f4 <__aeabi_uldivmod>
 8012fce:	4602      	mov	r2, r0
 8012fd0:	460b      	mov	r3, r1
 8012fd2:	4610      	mov	r0, r2
 8012fd4:	4619      	mov	r1, r3
 8012fd6:	f04f 0200 	mov.w	r2, #0
 8012fda:	f04f 0300 	mov.w	r3, #0
 8012fde:	020b      	lsls	r3, r1, #8
 8012fe0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012fe4:	0202      	lsls	r2, r0, #8
 8012fe6:	6979      	ldr	r1, [r7, #20]
 8012fe8:	6849      	ldr	r1, [r1, #4]
 8012fea:	0849      	lsrs	r1, r1, #1
 8012fec:	2000      	movs	r0, #0
 8012fee:	460c      	mov	r4, r1
 8012ff0:	4605      	mov	r5, r0
 8012ff2:	eb12 0804 	adds.w	r8, r2, r4
 8012ff6:	eb43 0905 	adc.w	r9, r3, r5
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	2200      	movs	r2, #0
 8013000:	469a      	mov	sl, r3
 8013002:	4693      	mov	fp, r2
 8013004:	4652      	mov	r2, sl
 8013006:	465b      	mov	r3, fp
 8013008:	4640      	mov	r0, r8
 801300a:	4649      	mov	r1, r9
 801300c:	f7f6 f8f2 	bl	80091f4 <__aeabi_uldivmod>
 8013010:	4602      	mov	r2, r0
 8013012:	460b      	mov	r3, r1
 8013014:	4613      	mov	r3, r2
 8013016:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013018:	6a3b      	ldr	r3, [r7, #32]
 801301a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801301e:	d308      	bcc.n	8013032 <UART_SetConfig+0x322>
 8013020:	6a3b      	ldr	r3, [r7, #32]
 8013022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013026:	d204      	bcs.n	8013032 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	6a3a      	ldr	r2, [r7, #32]
 801302e:	60da      	str	r2, [r3, #12]
 8013030:	e0c8      	b.n	80131c4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8013032:	2301      	movs	r3, #1
 8013034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8013038:	e0c4      	b.n	80131c4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	69db      	ldr	r3, [r3, #28]
 801303e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013042:	d167      	bne.n	8013114 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8013044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013048:	2b08      	cmp	r3, #8
 801304a:	d828      	bhi.n	801309e <UART_SetConfig+0x38e>
 801304c:	a201      	add	r2, pc, #4	; (adr r2, 8013054 <UART_SetConfig+0x344>)
 801304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013052:	bf00      	nop
 8013054:	08013079 	.word	0x08013079
 8013058:	08013081 	.word	0x08013081
 801305c:	08013089 	.word	0x08013089
 8013060:	0801309f 	.word	0x0801309f
 8013064:	0801308f 	.word	0x0801308f
 8013068:	0801309f 	.word	0x0801309f
 801306c:	0801309f 	.word	0x0801309f
 8013070:	0801309f 	.word	0x0801309f
 8013074:	08013097 	.word	0x08013097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013078:	f7fc fed0 	bl	800fe1c <HAL_RCC_GetPCLK1Freq>
 801307c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801307e:	e014      	b.n	80130aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013080:	f7fc fede 	bl	800fe40 <HAL_RCC_GetPCLK2Freq>
 8013084:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013086:	e010      	b.n	80130aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013088:	4b5a      	ldr	r3, [pc, #360]	; (80131f4 <UART_SetConfig+0x4e4>)
 801308a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801308c:	e00d      	b.n	80130aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801308e:	f7fc fe11 	bl	800fcb4 <HAL_RCC_GetSysClockFreq>
 8013092:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013094:	e009      	b.n	80130aa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801309a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801309c:	e005      	b.n	80130aa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 801309e:	2300      	movs	r3, #0
 80130a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80130a2:	2301      	movs	r3, #1
 80130a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80130a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	f000 8089 	beq.w	80131c4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b6:	4a4e      	ldr	r2, [pc, #312]	; (80131f0 <UART_SetConfig+0x4e0>)
 80130b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130bc:	461a      	mov	r2, r3
 80130be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80130c4:	005a      	lsls	r2, r3, #1
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	685b      	ldr	r3, [r3, #4]
 80130ca:	085b      	lsrs	r3, r3, #1
 80130cc:	441a      	add	r2, r3
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80130d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80130d8:	6a3b      	ldr	r3, [r7, #32]
 80130da:	2b0f      	cmp	r3, #15
 80130dc:	d916      	bls.n	801310c <UART_SetConfig+0x3fc>
 80130de:	6a3b      	ldr	r3, [r7, #32]
 80130e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80130e4:	d212      	bcs.n	801310c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80130e6:	6a3b      	ldr	r3, [r7, #32]
 80130e8:	b29b      	uxth	r3, r3
 80130ea:	f023 030f 	bic.w	r3, r3, #15
 80130ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80130f0:	6a3b      	ldr	r3, [r7, #32]
 80130f2:	085b      	lsrs	r3, r3, #1
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	f003 0307 	and.w	r3, r3, #7
 80130fa:	b29a      	uxth	r2, r3
 80130fc:	8bfb      	ldrh	r3, [r7, #30]
 80130fe:	4313      	orrs	r3, r2
 8013100:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8013102:	697b      	ldr	r3, [r7, #20]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	8bfa      	ldrh	r2, [r7, #30]
 8013108:	60da      	str	r2, [r3, #12]
 801310a:	e05b      	b.n	80131c4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 801310c:	2301      	movs	r3, #1
 801310e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8013112:	e057      	b.n	80131c4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013114:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013118:	2b08      	cmp	r3, #8
 801311a:	d828      	bhi.n	801316e <UART_SetConfig+0x45e>
 801311c:	a201      	add	r2, pc, #4	; (adr r2, 8013124 <UART_SetConfig+0x414>)
 801311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013122:	bf00      	nop
 8013124:	08013149 	.word	0x08013149
 8013128:	08013151 	.word	0x08013151
 801312c:	08013159 	.word	0x08013159
 8013130:	0801316f 	.word	0x0801316f
 8013134:	0801315f 	.word	0x0801315f
 8013138:	0801316f 	.word	0x0801316f
 801313c:	0801316f 	.word	0x0801316f
 8013140:	0801316f 	.word	0x0801316f
 8013144:	08013167 	.word	0x08013167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013148:	f7fc fe68 	bl	800fe1c <HAL_RCC_GetPCLK1Freq>
 801314c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801314e:	e014      	b.n	801317a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013150:	f7fc fe76 	bl	800fe40 <HAL_RCC_GetPCLK2Freq>
 8013154:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013156:	e010      	b.n	801317a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013158:	4b26      	ldr	r3, [pc, #152]	; (80131f4 <UART_SetConfig+0x4e4>)
 801315a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801315c:	e00d      	b.n	801317a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801315e:	f7fc fda9 	bl	800fcb4 <HAL_RCC_GetSysClockFreq>
 8013162:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013164:	e009      	b.n	801317a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801316a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801316c:	e005      	b.n	801317a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 801316e:	2300      	movs	r3, #0
 8013170:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8013172:	2301      	movs	r3, #1
 8013174:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8013178:	bf00      	nop
    }

    if (pclk != 0U)
 801317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317c:	2b00      	cmp	r3, #0
 801317e:	d021      	beq.n	80131c4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013184:	4a1a      	ldr	r2, [pc, #104]	; (80131f0 <UART_SetConfig+0x4e0>)
 8013186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801318a:	461a      	mov	r2, r3
 801318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013192:	697b      	ldr	r3, [r7, #20]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	085b      	lsrs	r3, r3, #1
 8013198:	441a      	add	r2, r3
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80131a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80131a4:	6a3b      	ldr	r3, [r7, #32]
 80131a6:	2b0f      	cmp	r3, #15
 80131a8:	d909      	bls.n	80131be <UART_SetConfig+0x4ae>
 80131aa:	6a3b      	ldr	r3, [r7, #32]
 80131ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80131b0:	d205      	bcs.n	80131be <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80131b2:	6a3b      	ldr	r3, [r7, #32]
 80131b4:	b29a      	uxth	r2, r3
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	60da      	str	r2, [r3, #12]
 80131bc:	e002      	b.n	80131c4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80131be:	2301      	movs	r3, #1
 80131c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	2201      	movs	r2, #1
 80131c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	2201      	movs	r2, #1
 80131d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	2200      	movs	r2, #0
 80131d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	2200      	movs	r2, #0
 80131de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80131e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3730      	adds	r7, #48	; 0x30
 80131e8:	46bd      	mov	sp, r7
 80131ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80131ee:	bf00      	nop
 80131f0:	0801feb4 	.word	0x0801feb4
 80131f4:	00f42400 	.word	0x00f42400

080131f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80131f8:	b480      	push	{r7}
 80131fa:	b083      	sub	sp, #12
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013204:	f003 0301 	and.w	r3, r3, #1
 8013208:	2b00      	cmp	r3, #0
 801320a:	d00a      	beq.n	8013222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	430a      	orrs	r2, r1
 8013220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013226:	f003 0302 	and.w	r3, r3, #2
 801322a:	2b00      	cmp	r3, #0
 801322c:	d00a      	beq.n	8013244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	430a      	orrs	r2, r1
 8013242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013248:	f003 0304 	and.w	r3, r3, #4
 801324c:	2b00      	cmp	r3, #0
 801324e:	d00a      	beq.n	8013266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	430a      	orrs	r2, r1
 8013264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801326a:	f003 0308 	and.w	r3, r3, #8
 801326e:	2b00      	cmp	r3, #0
 8013270:	d00a      	beq.n	8013288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	685b      	ldr	r3, [r3, #4]
 8013278:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	430a      	orrs	r2, r1
 8013286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801328c:	f003 0310 	and.w	r3, r3, #16
 8013290:	2b00      	cmp	r3, #0
 8013292:	d00a      	beq.n	80132aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	689b      	ldr	r3, [r3, #8]
 801329a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	430a      	orrs	r2, r1
 80132a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132ae:	f003 0320 	and.w	r3, r3, #32
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d00a      	beq.n	80132cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	689b      	ldr	r3, [r3, #8]
 80132bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	430a      	orrs	r2, r1
 80132ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d01a      	beq.n	801330e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	430a      	orrs	r2, r1
 80132ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80132f6:	d10a      	bne.n	801330e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	430a      	orrs	r2, r1
 801330c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013316:	2b00      	cmp	r3, #0
 8013318:	d00a      	beq.n	8013330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	685b      	ldr	r3, [r3, #4]
 8013320:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	430a      	orrs	r2, r1
 801332e:	605a      	str	r2, [r3, #4]
  }
}
 8013330:	bf00      	nop
 8013332:	370c      	adds	r7, #12
 8013334:	46bd      	mov	sp, r7
 8013336:	bc80      	pop	{r7}
 8013338:	4770      	bx	lr

0801333a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801333a:	b580      	push	{r7, lr}
 801333c:	b086      	sub	sp, #24
 801333e:	af02      	add	r7, sp, #8
 8013340:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2200      	movs	r2, #0
 8013346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801334a:	f7f9 fdeb 	bl	800cf24 <HAL_GetTick>
 801334e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	f003 0308 	and.w	r3, r3, #8
 801335a:	2b08      	cmp	r3, #8
 801335c:	d10e      	bne.n	801337c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801335e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013362:	9300      	str	r3, [sp, #0]
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2200      	movs	r2, #0
 8013368:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f000 f832 	bl	80133d6 <UART_WaitOnFlagUntilTimeout>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d001      	beq.n	801337c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013378:	2303      	movs	r3, #3
 801337a:	e028      	b.n	80133ce <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	f003 0304 	and.w	r3, r3, #4
 8013386:	2b04      	cmp	r3, #4
 8013388:	d10e      	bne.n	80133a8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801338a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801338e:	9300      	str	r3, [sp, #0]
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	2200      	movs	r2, #0
 8013394:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f000 f81c 	bl	80133d6 <UART_WaitOnFlagUntilTimeout>
 801339e:	4603      	mov	r3, r0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d001      	beq.n	80133a8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80133a4:	2303      	movs	r3, #3
 80133a6:	e012      	b.n	80133ce <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2220      	movs	r2, #32
 80133ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2220      	movs	r2, #32
 80133b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2200      	movs	r2, #0
 80133bc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2200      	movs	r2, #0
 80133c2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2200      	movs	r2, #0
 80133c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80133cc:	2300      	movs	r3, #0
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3710      	adds	r7, #16
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}

080133d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80133d6:	b580      	push	{r7, lr}
 80133d8:	b09c      	sub	sp, #112	; 0x70
 80133da:	af00      	add	r7, sp, #0
 80133dc:	60f8      	str	r0, [r7, #12]
 80133de:	60b9      	str	r1, [r7, #8]
 80133e0:	603b      	str	r3, [r7, #0]
 80133e2:	4613      	mov	r3, r2
 80133e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80133e6:	e0a9      	b.n	801353c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80133e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80133ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ee:	f000 80a5 	beq.w	801353c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80133f2:	f7f9 fd97 	bl	800cf24 <HAL_GetTick>
 80133f6:	4602      	mov	r2, r0
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	1ad3      	subs	r3, r2, r3
 80133fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80133fe:	429a      	cmp	r2, r3
 8013400:	d302      	bcc.n	8013408 <UART_WaitOnFlagUntilTimeout+0x32>
 8013402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013404:	2b00      	cmp	r3, #0
 8013406:	d140      	bne.n	801348a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801340e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013410:	e853 3f00 	ldrex	r3, [r3]
 8013414:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013418:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801341c:	667b      	str	r3, [r7, #100]	; 0x64
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	461a      	mov	r2, r3
 8013424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013428:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801342a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801342c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801342e:	e841 2300 	strex	r3, r2, [r1]
 8013432:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013436:	2b00      	cmp	r3, #0
 8013438:	d1e6      	bne.n	8013408 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	3308      	adds	r3, #8
 8013440:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013444:	e853 3f00 	ldrex	r3, [r3]
 8013448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344c:	f023 0301 	bic.w	r3, r3, #1
 8013450:	663b      	str	r3, [r7, #96]	; 0x60
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	3308      	adds	r3, #8
 8013458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801345a:	64ba      	str	r2, [r7, #72]	; 0x48
 801345c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801345e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013462:	e841 2300 	strex	r3, r2, [r1]
 8013466:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801346a:	2b00      	cmp	r3, #0
 801346c:	d1e5      	bne.n	801343a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2220      	movs	r2, #32
 8013472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	2220      	movs	r2, #32
 801347a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	2200      	movs	r2, #0
 8013482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8013486:	2303      	movs	r3, #3
 8013488:	e069      	b.n	801355e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	f003 0304 	and.w	r3, r3, #4
 8013494:	2b00      	cmp	r3, #0
 8013496:	d051      	beq.n	801353c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	69db      	ldr	r3, [r3, #28]
 801349e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80134a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80134a6:	d149      	bne.n	801353c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80134b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ba:	e853 3f00 	ldrex	r3, [r3]
 80134be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80134c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80134c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	461a      	mov	r2, r3
 80134ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134d0:	637b      	str	r3, [r7, #52]	; 0x34
 80134d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80134d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134d8:	e841 2300 	strex	r3, r2, [r1]
 80134dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80134de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d1e6      	bne.n	80134b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	3308      	adds	r3, #8
 80134ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	e853 3f00 	ldrex	r3, [r3]
 80134f2:	613b      	str	r3, [r7, #16]
   return(result);
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	f023 0301 	bic.w	r3, r3, #1
 80134fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	3308      	adds	r3, #8
 8013502:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013504:	623a      	str	r2, [r7, #32]
 8013506:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013508:	69f9      	ldr	r1, [r7, #28]
 801350a:	6a3a      	ldr	r2, [r7, #32]
 801350c:	e841 2300 	strex	r3, r2, [r1]
 8013510:	61bb      	str	r3, [r7, #24]
   return(result);
 8013512:	69bb      	ldr	r3, [r7, #24]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d1e5      	bne.n	80134e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2220      	movs	r2, #32
 801351c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	2220      	movs	r2, #32
 8013524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	2220      	movs	r2, #32
 801352c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	2200      	movs	r2, #0
 8013534:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013538:	2303      	movs	r3, #3
 801353a:	e010      	b.n	801355e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	69da      	ldr	r2, [r3, #28]
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	4013      	ands	r3, r2
 8013546:	68ba      	ldr	r2, [r7, #8]
 8013548:	429a      	cmp	r2, r3
 801354a:	bf0c      	ite	eq
 801354c:	2301      	moveq	r3, #1
 801354e:	2300      	movne	r3, #0
 8013550:	b2db      	uxtb	r3, r3
 8013552:	461a      	mov	r2, r3
 8013554:	79fb      	ldrb	r3, [r7, #7]
 8013556:	429a      	cmp	r2, r3
 8013558:	f43f af46 	beq.w	80133e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801355c:	2300      	movs	r3, #0
}
 801355e:	4618      	mov	r0, r3
 8013560:	3770      	adds	r7, #112	; 0x70
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
	...

08013568 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013568:	b480      	push	{r7}
 801356a:	b0a3      	sub	sp, #140	; 0x8c
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	4613      	mov	r3, r2
 8013574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	68ba      	ldr	r2, [r7, #8]
 801357a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	88fa      	ldrh	r2, [r7, #6]
 8013580:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	88fa      	ldrh	r2, [r7, #6]
 8013588:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	2200      	movs	r2, #0
 8013590:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	689b      	ldr	r3, [r3, #8]
 8013596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801359a:	d10e      	bne.n	80135ba <UART_Start_Receive_IT+0x52>
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	691b      	ldr	r3, [r3, #16]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d105      	bne.n	80135b0 <UART_Start_Receive_IT+0x48>
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80135aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80135ae:	e02d      	b.n	801360c <UART_Start_Receive_IT+0xa4>
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	22ff      	movs	r2, #255	; 0xff
 80135b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80135b8:	e028      	b.n	801360c <UART_Start_Receive_IT+0xa4>
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	689b      	ldr	r3, [r3, #8]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d10d      	bne.n	80135de <UART_Start_Receive_IT+0x76>
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	691b      	ldr	r3, [r3, #16]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d104      	bne.n	80135d4 <UART_Start_Receive_IT+0x6c>
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	22ff      	movs	r2, #255	; 0xff
 80135ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80135d2:	e01b      	b.n	801360c <UART_Start_Receive_IT+0xa4>
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	227f      	movs	r2, #127	; 0x7f
 80135d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80135dc:	e016      	b.n	801360c <UART_Start_Receive_IT+0xa4>
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	689b      	ldr	r3, [r3, #8]
 80135e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80135e6:	d10d      	bne.n	8013604 <UART_Start_Receive_IT+0x9c>
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	691b      	ldr	r3, [r3, #16]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d104      	bne.n	80135fa <UART_Start_Receive_IT+0x92>
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	227f      	movs	r2, #127	; 0x7f
 80135f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80135f8:	e008      	b.n	801360c <UART_Start_Receive_IT+0xa4>
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	223f      	movs	r2, #63	; 0x3f
 80135fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013602:	e003      	b.n	801360c <UART_Start_Receive_IT+0xa4>
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2200      	movs	r2, #0
 8013608:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2200      	movs	r2, #0
 8013610:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2222      	movs	r2, #34	; 0x22
 8013618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	3308      	adds	r3, #8
 8013622:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013626:	e853 3f00 	ldrex	r3, [r3]
 801362a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801362c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801362e:	f043 0301 	orr.w	r3, r3, #1
 8013632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	3308      	adds	r3, #8
 801363c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013640:	673a      	str	r2, [r7, #112]	; 0x70
 8013642:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013644:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013646:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013648:	e841 2300 	strex	r3, r2, [r1]
 801364c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801364e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013650:	2b00      	cmp	r3, #0
 8013652:	d1e3      	bne.n	801361c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801365c:	d14f      	bne.n	80136fe <UART_Start_Receive_IT+0x196>
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013664:	88fa      	ldrh	r2, [r7, #6]
 8013666:	429a      	cmp	r2, r3
 8013668:	d349      	bcc.n	80136fe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	689b      	ldr	r3, [r3, #8]
 801366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013672:	d107      	bne.n	8013684 <UART_Start_Receive_IT+0x11c>
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	691b      	ldr	r3, [r3, #16]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d103      	bne.n	8013684 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	4a46      	ldr	r2, [pc, #280]	; (8013798 <UART_Start_Receive_IT+0x230>)
 8013680:	675a      	str	r2, [r3, #116]	; 0x74
 8013682:	e002      	b.n	801368a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	4a45      	ldr	r2, [pc, #276]	; (801379c <UART_Start_Receive_IT+0x234>)
 8013688:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	691b      	ldr	r3, [r3, #16]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d01a      	beq.n	80136c8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801369a:	e853 3f00 	ldrex	r3, [r3]
 801369e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80136a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80136a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	461a      	mov	r2, r3
 80136b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80136b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80136b6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80136ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80136bc:	e841 2300 	strex	r3, r2, [r1]
 80136c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80136c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d1e4      	bne.n	8013692 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	3308      	adds	r3, #8
 80136ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136d2:	e853 3f00 	ldrex	r3, [r3]
 80136d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80136d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	3308      	adds	r3, #8
 80136e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80136e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80136ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80136ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80136f0:	e841 2300 	strex	r3, r2, [r1]
 80136f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80136f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d1e5      	bne.n	80136c8 <UART_Start_Receive_IT+0x160>
 80136fc:	e046      	b.n	801378c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	689b      	ldr	r3, [r3, #8]
 8013702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013706:	d107      	bne.n	8013718 <UART_Start_Receive_IT+0x1b0>
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	691b      	ldr	r3, [r3, #16]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d103      	bne.n	8013718 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	4a23      	ldr	r2, [pc, #140]	; (80137a0 <UART_Start_Receive_IT+0x238>)
 8013714:	675a      	str	r2, [r3, #116]	; 0x74
 8013716:	e002      	b.n	801371e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	4a22      	ldr	r2, [pc, #136]	; (80137a4 <UART_Start_Receive_IT+0x23c>)
 801371c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	691b      	ldr	r3, [r3, #16]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d019      	beq.n	801375a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801372e:	e853 3f00 	ldrex	r3, [r3]
 8013732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013736:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801373a:	677b      	str	r3, [r7, #116]	; 0x74
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	461a      	mov	r2, r3
 8013742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013744:	637b      	str	r3, [r7, #52]	; 0x34
 8013746:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801374a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801374c:	e841 2300 	strex	r3, r2, [r1]
 8013750:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013754:	2b00      	cmp	r3, #0
 8013756:	d1e6      	bne.n	8013726 <UART_Start_Receive_IT+0x1be>
 8013758:	e018      	b.n	801378c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	e853 3f00 	ldrex	r3, [r3]
 8013766:	613b      	str	r3, [r7, #16]
   return(result);
 8013768:	693b      	ldr	r3, [r7, #16]
 801376a:	f043 0320 	orr.w	r3, r3, #32
 801376e:	67bb      	str	r3, [r7, #120]	; 0x78
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	461a      	mov	r2, r3
 8013776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013778:	623b      	str	r3, [r7, #32]
 801377a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801377c:	69f9      	ldr	r1, [r7, #28]
 801377e:	6a3a      	ldr	r2, [r7, #32]
 8013780:	e841 2300 	strex	r3, r2, [r1]
 8013784:	61bb      	str	r3, [r7, #24]
   return(result);
 8013786:	69bb      	ldr	r3, [r7, #24]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d1e6      	bne.n	801375a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801378c:	2300      	movs	r3, #0
}
 801378e:	4618      	mov	r0, r3
 8013790:	378c      	adds	r7, #140	; 0x8c
 8013792:	46bd      	mov	sp, r7
 8013794:	bc80      	pop	{r7}
 8013796:	4770      	bx	lr
 8013798:	08013fc5 	.word	0x08013fc5
 801379c:	08013c65 	.word	0x08013c65
 80137a0:	08013aad 	.word	0x08013aad
 80137a4:	080138f5 	.word	0x080138f5

080137a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b095      	sub	sp, #84	; 0x54
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137b8:	e853 3f00 	ldrex	r3, [r3]
 80137bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80137be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80137c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	461a      	mov	r2, r3
 80137cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137ce:	643b      	str	r3, [r7, #64]	; 0x40
 80137d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80137d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137d6:	e841 2300 	strex	r3, r2, [r1]
 80137da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80137dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d1e6      	bne.n	80137b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	3308      	adds	r3, #8
 80137e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137ea:	6a3b      	ldr	r3, [r7, #32]
 80137ec:	e853 3f00 	ldrex	r3, [r3]
 80137f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80137f2:	69fb      	ldr	r3, [r7, #28]
 80137f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80137f8:	f023 0301 	bic.w	r3, r3, #1
 80137fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	3308      	adds	r3, #8
 8013804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801380a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801380c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801380e:	e841 2300 	strex	r3, r2, [r1]
 8013812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013816:	2b00      	cmp	r3, #0
 8013818:	d1e3      	bne.n	80137e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801381e:	2b01      	cmp	r3, #1
 8013820:	d118      	bne.n	8013854 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	e853 3f00 	ldrex	r3, [r3]
 801382e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	f023 0310 	bic.w	r3, r3, #16
 8013836:	647b      	str	r3, [r7, #68]	; 0x44
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	461a      	mov	r2, r3
 801383e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013840:	61bb      	str	r3, [r7, #24]
 8013842:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013844:	6979      	ldr	r1, [r7, #20]
 8013846:	69ba      	ldr	r2, [r7, #24]
 8013848:	e841 2300 	strex	r3, r2, [r1]
 801384c:	613b      	str	r3, [r7, #16]
   return(result);
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d1e6      	bne.n	8013822 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2220      	movs	r2, #32
 8013858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	2200      	movs	r2, #0
 8013860:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2200      	movs	r2, #0
 8013866:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013868:	bf00      	nop
 801386a:	3754      	adds	r7, #84	; 0x54
 801386c:	46bd      	mov	sp, r7
 801386e:	bc80      	pop	{r7}
 8013870:	4770      	bx	lr

08013872 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013872:	b580      	push	{r7, lr}
 8013874:	b084      	sub	sp, #16
 8013876:	af00      	add	r7, sp, #0
 8013878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801387e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2200      	movs	r2, #0
 8013884:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	2200      	movs	r2, #0
 801388c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013890:	68f8      	ldr	r0, [r7, #12]
 8013892:	f7ff fa28 	bl	8012ce6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013896:	bf00      	nop
 8013898:	3710      	adds	r7, #16
 801389a:	46bd      	mov	sp, r7
 801389c:	bd80      	pop	{r7, pc}

0801389e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801389e:	b580      	push	{r7, lr}
 80138a0:	b088      	sub	sp, #32
 80138a2:	af00      	add	r7, sp, #0
 80138a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	e853 3f00 	ldrex	r3, [r3]
 80138b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80138ba:	61fb      	str	r3, [r7, #28]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	461a      	mov	r2, r3
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	61bb      	str	r3, [r7, #24]
 80138c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138c8:	6979      	ldr	r1, [r7, #20]
 80138ca:	69ba      	ldr	r2, [r7, #24]
 80138cc:	e841 2300 	strex	r3, r2, [r1]
 80138d0:	613b      	str	r3, [r7, #16]
   return(result);
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d1e6      	bne.n	80138a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	2220      	movs	r2, #32
 80138dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2200      	movs	r2, #0
 80138e4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ff f9f4 	bl	8012cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80138ec:	bf00      	nop
 80138ee:	3720      	adds	r7, #32
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b09c      	sub	sp, #112	; 0x70
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013902:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801390c:	2b22      	cmp	r3, #34	; 0x22
 801390e:	f040 80be 	bne.w	8013a8e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013918:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801391c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013920:	b2d9      	uxtb	r1, r3
 8013922:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013926:	b2da      	uxtb	r2, r3
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801392c:	400a      	ands	r2, r1
 801392e:	b2d2      	uxtb	r2, r2
 8013930:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013936:	1c5a      	adds	r2, r3, #1
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013942:	b29b      	uxth	r3, r3
 8013944:	3b01      	subs	r3, #1
 8013946:	b29a      	uxth	r2, r3
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013954:	b29b      	uxth	r3, r3
 8013956:	2b00      	cmp	r3, #0
 8013958:	f040 80a1 	bne.w	8013a9e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013964:	e853 3f00 	ldrex	r3, [r3]
 8013968:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801396c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013970:	66bb      	str	r3, [r7, #104]	; 0x68
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	461a      	mov	r2, r3
 8013978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801397a:	65bb      	str	r3, [r7, #88]	; 0x58
 801397c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801397e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013982:	e841 2300 	strex	r3, r2, [r1]
 8013986:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801398a:	2b00      	cmp	r3, #0
 801398c:	d1e6      	bne.n	801395c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	3308      	adds	r3, #8
 8013994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013998:	e853 3f00 	ldrex	r3, [r3]
 801399c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139a0:	f023 0301 	bic.w	r3, r3, #1
 80139a4:	667b      	str	r3, [r7, #100]	; 0x64
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	3308      	adds	r3, #8
 80139ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80139ae:	647a      	str	r2, [r7, #68]	; 0x44
 80139b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80139b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139b6:	e841 2300 	strex	r3, r2, [r1]
 80139ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80139bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d1e5      	bne.n	801398e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2220      	movs	r2, #32
 80139c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2200      	movs	r2, #0
 80139ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2200      	movs	r2, #0
 80139d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	4a33      	ldr	r2, [pc, #204]	; (8013aa8 <UART_RxISR_8BIT+0x1b4>)
 80139dc:	4293      	cmp	r3, r2
 80139de:	d01f      	beq.n	8013a20 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	685b      	ldr	r3, [r3, #4]
 80139e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d018      	beq.n	8013a20 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f6:	e853 3f00 	ldrex	r3, [r3]
 80139fa:	623b      	str	r3, [r7, #32]
   return(result);
 80139fc:	6a3b      	ldr	r3, [r7, #32]
 80139fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013a02:	663b      	str	r3, [r7, #96]	; 0x60
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	461a      	mov	r2, r3
 8013a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8013a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a14:	e841 2300 	strex	r3, r2, [r1]
 8013a18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d1e6      	bne.n	80139ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a24:	2b01      	cmp	r3, #1
 8013a26:	d12e      	bne.n	8013a86 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	e853 3f00 	ldrex	r3, [r3]
 8013a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	f023 0310 	bic.w	r3, r3, #16
 8013a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	461a      	mov	r2, r3
 8013a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a4c:	61fb      	str	r3, [r7, #28]
 8013a4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a50:	69b9      	ldr	r1, [r7, #24]
 8013a52:	69fa      	ldr	r2, [r7, #28]
 8013a54:	e841 2300 	strex	r3, r2, [r1]
 8013a58:	617b      	str	r3, [r7, #20]
   return(result);
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1e6      	bne.n	8013a2e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	69db      	ldr	r3, [r3, #28]
 8013a66:	f003 0310 	and.w	r3, r3, #16
 8013a6a:	2b10      	cmp	r3, #16
 8013a6c:	d103      	bne.n	8013a76 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	2210      	movs	r2, #16
 8013a74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f7ff f93a 	bl	8012cf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013a84:	e00b      	b.n	8013a9e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f001 f9e6 	bl	8014e58 <HAL_UART_RxCpltCallback>
}
 8013a8c:	e007      	b.n	8013a9e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	699a      	ldr	r2, [r3, #24]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	f042 0208 	orr.w	r2, r2, #8
 8013a9c:	619a      	str	r2, [r3, #24]
}
 8013a9e:	bf00      	nop
 8013aa0:	3770      	adds	r7, #112	; 0x70
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	40008000 	.word	0x40008000

08013aac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b09c      	sub	sp, #112	; 0x70
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013aba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ac4:	2b22      	cmp	r3, #34	; 0x22
 8013ac6:	f040 80be 	bne.w	8013c46 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ad0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ad8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8013ada:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8013ade:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013ae2:	4013      	ands	r3, r2
 8013ae4:	b29a      	uxth	r2, r3
 8013ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013ae8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013aee:	1c9a      	adds	r2, r3, #2
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	3b01      	subs	r3, #1
 8013afe:	b29a      	uxth	r2, r3
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	f040 80a1 	bne.w	8013c56 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b1c:	e853 3f00 	ldrex	r3, [r3]
 8013b20:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013b28:	667b      	str	r3, [r7, #100]	; 0x64
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	461a      	mov	r2, r3
 8013b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b32:	657b      	str	r3, [r7, #84]	; 0x54
 8013b34:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013b38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013b3a:	e841 2300 	strex	r3, r2, [r1]
 8013b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d1e6      	bne.n	8013b14 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	3308      	adds	r3, #8
 8013b4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b50:	e853 3f00 	ldrex	r3, [r3]
 8013b54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b58:	f023 0301 	bic.w	r3, r3, #1
 8013b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	3308      	adds	r3, #8
 8013b64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013b66:	643a      	str	r2, [r7, #64]	; 0x40
 8013b68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013b6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b6e:	e841 2300 	strex	r3, r2, [r1]
 8013b72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d1e5      	bne.n	8013b46 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2220      	movs	r2, #32
 8013b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2200      	movs	r2, #0
 8013b86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	4a33      	ldr	r2, [pc, #204]	; (8013c60 <UART_RxISR_16BIT+0x1b4>)
 8013b94:	4293      	cmp	r3, r2
 8013b96:	d01f      	beq.n	8013bd8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d018      	beq.n	8013bd8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bac:	6a3b      	ldr	r3, [r7, #32]
 8013bae:	e853 3f00 	ldrex	r3, [r3]
 8013bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8013bb4:	69fb      	ldr	r3, [r7, #28]
 8013bb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013bc6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bcc:	e841 2300 	strex	r3, r2, [r1]
 8013bd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d1e6      	bne.n	8013ba6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bdc:	2b01      	cmp	r3, #1
 8013bde:	d12e      	bne.n	8013c3e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2200      	movs	r2, #0
 8013be4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	e853 3f00 	ldrex	r3, [r3]
 8013bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	f023 0310 	bic.w	r3, r3, #16
 8013bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	461a      	mov	r2, r3
 8013c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c04:	61bb      	str	r3, [r7, #24]
 8013c06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c08:	6979      	ldr	r1, [r7, #20]
 8013c0a:	69ba      	ldr	r2, [r7, #24]
 8013c0c:	e841 2300 	strex	r3, r2, [r1]
 8013c10:	613b      	str	r3, [r7, #16]
   return(result);
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d1e6      	bne.n	8013be6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	69db      	ldr	r3, [r3, #28]
 8013c1e:	f003 0310 	and.w	r3, r3, #16
 8013c22:	2b10      	cmp	r3, #16
 8013c24:	d103      	bne.n	8013c2e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	2210      	movs	r2, #16
 8013c2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c34:	4619      	mov	r1, r3
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f7ff f85e 	bl	8012cf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013c3c:	e00b      	b.n	8013c56 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f001 f90a 	bl	8014e58 <HAL_UART_RxCpltCallback>
}
 8013c44:	e007      	b.n	8013c56 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	699a      	ldr	r2, [r3, #24]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f042 0208 	orr.w	r2, r2, #8
 8013c54:	619a      	str	r2, [r3, #24]
}
 8013c56:	bf00      	nop
 8013c58:	3770      	adds	r7, #112	; 0x70
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
 8013c5e:	bf00      	nop
 8013c60:	40008000 	.word	0x40008000

08013c64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b0ac      	sub	sp, #176	; 0xb0
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c72:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	69db      	ldr	r3, [r3, #28]
 8013c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	689b      	ldr	r3, [r3, #8]
 8013c90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013c9a:	2b22      	cmp	r3, #34	; 0x22
 8013c9c:	f040 8182 	bne.w	8013fa4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013ca6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013caa:	e125      	b.n	8013ef8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cb2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013cb6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8013cba:	b2d9      	uxtb	r1, r3
 8013cbc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8013cc0:	b2da      	uxtb	r2, r3
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cc6:	400a      	ands	r2, r1
 8013cc8:	b2d2      	uxtb	r2, r2
 8013cca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cd0:	1c5a      	adds	r2, r3, #1
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	3b01      	subs	r3, #1
 8013ce0:	b29a      	uxth	r2, r3
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	69db      	ldr	r3, [r3, #28]
 8013cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013cf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013cf6:	f003 0307 	and.w	r3, r3, #7
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d053      	beq.n	8013da6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d02:	f003 0301 	and.w	r3, r3, #1
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d011      	beq.n	8013d2e <UART_RxISR_8BIT_FIFOEN+0xca>
 8013d0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d00b      	beq.n	8013d2e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d24:	f043 0201 	orr.w	r2, r3, #1
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d32:	f003 0302 	and.w	r3, r3, #2
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d011      	beq.n	8013d5e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8013d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013d3e:	f003 0301 	and.w	r3, r3, #1
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d00b      	beq.n	8013d5e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	2202      	movs	r2, #2
 8013d4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d54:	f043 0204 	orr.w	r2, r3, #4
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d62:	f003 0304 	and.w	r3, r3, #4
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d011      	beq.n	8013d8e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8013d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013d6e:	f003 0301 	and.w	r3, r3, #1
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d00b      	beq.n	8013d8e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	2204      	movs	r2, #4
 8013d7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d84:	f043 0202 	orr.w	r2, r3, #2
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d006      	beq.n	8013da6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	f7fe ffa4 	bl	8012ce6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	2200      	movs	r2, #0
 8013da2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	f040 80a2 	bne.w	8013ef8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013dbc:	e853 3f00 	ldrex	r3, [r3]
 8013dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8013dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013dd8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dda:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013ddc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013dde:	e841 2300 	strex	r3, r2, [r1]
 8013de2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8013de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d1e4      	bne.n	8013db4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	3308      	adds	r3, #8
 8013df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013df4:	e853 3f00 	ldrex	r3, [r3]
 8013df8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8013dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013e00:	f023 0301 	bic.w	r3, r3, #1
 8013e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	3308      	adds	r3, #8
 8013e0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013e12:	66ba      	str	r2, [r7, #104]	; 0x68
 8013e14:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013e18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013e1a:	e841 2300 	strex	r3, r2, [r1]
 8013e1e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d1e1      	bne.n	8013dea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2220      	movs	r2, #32
 8013e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	2200      	movs	r2, #0
 8013e32:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	2200      	movs	r2, #0
 8013e38:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	4a5f      	ldr	r2, [pc, #380]	; (8013fbc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8013e40:	4293      	cmp	r3, r2
 8013e42:	d021      	beq.n	8013e88 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d01a      	beq.n	8013e88 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e5a:	e853 3f00 	ldrex	r3, [r3]
 8013e5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	461a      	mov	r2, r3
 8013e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e74:	657b      	str	r3, [r7, #84]	; 0x54
 8013e76:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013e7c:	e841 2300 	strex	r3, r2, [r1]
 8013e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d1e4      	bne.n	8013e52 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d130      	bne.n	8013ef2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2200      	movs	r2, #0
 8013e94:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e9e:	e853 3f00 	ldrex	r3, [r3]
 8013ea2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea6:	f023 0310 	bic.w	r3, r3, #16
 8013eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	461a      	mov	r2, r3
 8013eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8013eba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ebc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ebe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013ec0:	e841 2300 	strex	r3, r2, [r1]
 8013ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d1e4      	bne.n	8013e96 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	69db      	ldr	r3, [r3, #28]
 8013ed2:	f003 0310 	and.w	r3, r3, #16
 8013ed6:	2b10      	cmp	r3, #16
 8013ed8:	d103      	bne.n	8013ee2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2210      	movs	r2, #16
 8013ee0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013ee8:	4619      	mov	r1, r3
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f7fe ff04 	bl	8012cf8 <HAL_UARTEx_RxEventCallback>
 8013ef0:	e002      	b.n	8013ef8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f000 ffb0 	bl	8014e58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013ef8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d006      	beq.n	8013f0e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8013f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f04:	f003 0320 	and.w	r3, r3, #32
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	f47f aecf 	bne.w	8013cac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013f18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d049      	beq.n	8013fb4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013f26:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8013f2a:	429a      	cmp	r2, r3
 8013f2c:	d242      	bcs.n	8013fb4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	3308      	adds	r3, #8
 8013f34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f36:	6a3b      	ldr	r3, [r7, #32]
 8013f38:	e853 3f00 	ldrex	r3, [r3]
 8013f3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	3308      	adds	r3, #8
 8013f4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013f52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013f54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f5a:	e841 2300 	strex	r3, r2, [r1]
 8013f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d1e3      	bne.n	8013f2e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	4a15      	ldr	r2, [pc, #84]	; (8013fc0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8013f6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	e853 3f00 	ldrex	r3, [r3]
 8013f78:	60bb      	str	r3, [r7, #8]
   return(result);
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	f043 0320 	orr.w	r3, r3, #32
 8013f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	461a      	mov	r2, r3
 8013f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013f8e:	61bb      	str	r3, [r7, #24]
 8013f90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f92:	6979      	ldr	r1, [r7, #20]
 8013f94:	69ba      	ldr	r2, [r7, #24]
 8013f96:	e841 2300 	strex	r3, r2, [r1]
 8013f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8013f9c:	693b      	ldr	r3, [r7, #16]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d1e4      	bne.n	8013f6c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013fa2:	e007      	b.n	8013fb4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	699a      	ldr	r2, [r3, #24]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	f042 0208 	orr.w	r2, r2, #8
 8013fb2:	619a      	str	r2, [r3, #24]
}
 8013fb4:	bf00      	nop
 8013fb6:	37b0      	adds	r7, #176	; 0xb0
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	40008000 	.word	0x40008000
 8013fc0:	080138f5 	.word	0x080138f5

08013fc4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b0ae      	sub	sp, #184	; 0xb8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fd2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	69db      	ldr	r3, [r3, #28]
 8013fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	689b      	ldr	r3, [r3, #8]
 8013ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ffa:	2b22      	cmp	r3, #34	; 0x22
 8013ffc:	f040 8186 	bne.w	801430c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014006:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801400a:	e129      	b.n	8014260 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014012:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801401a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801401e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8014022:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8014026:	4013      	ands	r3, r2
 8014028:	b29a      	uxth	r2, r3
 801402a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801402e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014034:	1c9a      	adds	r2, r3, #2
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014040:	b29b      	uxth	r3, r3
 8014042:	3b01      	subs	r3, #1
 8014044:	b29a      	uxth	r2, r3
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	69db      	ldr	r3, [r3, #28]
 8014052:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801405a:	f003 0307 	and.w	r3, r3, #7
 801405e:	2b00      	cmp	r3, #0
 8014060:	d053      	beq.n	801410a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014066:	f003 0301 	and.w	r3, r3, #1
 801406a:	2b00      	cmp	r3, #0
 801406c:	d011      	beq.n	8014092 <UART_RxISR_16BIT_FIFOEN+0xce>
 801406e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014076:	2b00      	cmp	r3, #0
 8014078:	d00b      	beq.n	8014092 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	2201      	movs	r2, #1
 8014080:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014088:	f043 0201 	orr.w	r2, r3, #1
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014096:	f003 0302 	and.w	r3, r3, #2
 801409a:	2b00      	cmp	r3, #0
 801409c:	d011      	beq.n	80140c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801409e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80140a2:	f003 0301 	and.w	r3, r3, #1
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d00b      	beq.n	80140c2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	2202      	movs	r2, #2
 80140b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140b8:	f043 0204 	orr.w	r2, r3, #4
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80140c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80140c6:	f003 0304 	and.w	r3, r3, #4
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d011      	beq.n	80140f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80140ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80140d2:	f003 0301 	and.w	r3, r3, #1
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d00b      	beq.n	80140f2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	2204      	movs	r2, #4
 80140e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140e8:	f043 0202 	orr.w	r2, r3, #2
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d006      	beq.n	801410a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f7fe fdf2 	bl	8012ce6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2200      	movs	r2, #0
 8014106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014110:	b29b      	uxth	r3, r3
 8014112:	2b00      	cmp	r3, #0
 8014114:	f040 80a4 	bne.w	8014260 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801411e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014120:	e853 3f00 	ldrex	r3, [r3]
 8014124:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801412c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	461a      	mov	r2, r3
 8014136:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801413a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801413e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014140:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014142:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014146:	e841 2300 	strex	r3, r2, [r1]
 801414a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801414c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801414e:	2b00      	cmp	r3, #0
 8014150:	d1e2      	bne.n	8014118 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	3308      	adds	r3, #8
 8014158:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801415a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801415c:	e853 3f00 	ldrex	r3, [r3]
 8014160:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014168:	f023 0301 	bic.w	r3, r3, #1
 801416c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	3308      	adds	r3, #8
 8014176:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801417a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801417c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801417e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014180:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014182:	e841 2300 	strex	r3, r2, [r1]
 8014186:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801418a:	2b00      	cmp	r3, #0
 801418c:	d1e1      	bne.n	8014152 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2220      	movs	r2, #32
 8014192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2200      	movs	r2, #0
 801419a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2200      	movs	r2, #0
 80141a0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	4a5f      	ldr	r2, [pc, #380]	; (8014324 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80141a8:	4293      	cmp	r3, r2
 80141aa:	d021      	beq.n	80141f0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d01a      	beq.n	80141f0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141c2:	e853 3f00 	ldrex	r3, [r3]
 80141c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80141c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80141ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	461a      	mov	r2, r3
 80141d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80141dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80141de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80141e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80141e4:	e841 2300 	strex	r3, r2, [r1]
 80141e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80141ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d1e4      	bne.n	80141ba <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141f4:	2b01      	cmp	r3, #1
 80141f6:	d130      	bne.n	801425a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2200      	movs	r2, #0
 80141fc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014206:	e853 3f00 	ldrex	r3, [r3]
 801420a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801420c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801420e:	f023 0310 	bic.w	r3, r3, #16
 8014212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	461a      	mov	r2, r3
 801421c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014220:	647b      	str	r3, [r7, #68]	; 0x44
 8014222:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014224:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014228:	e841 2300 	strex	r3, r2, [r1]
 801422c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801422e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014230:	2b00      	cmp	r3, #0
 8014232:	d1e4      	bne.n	80141fe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	69db      	ldr	r3, [r3, #28]
 801423a:	f003 0310 	and.w	r3, r3, #16
 801423e:	2b10      	cmp	r3, #16
 8014240:	d103      	bne.n	801424a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	2210      	movs	r2, #16
 8014248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014250:	4619      	mov	r1, r3
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f7fe fd50 	bl	8012cf8 <HAL_UARTEx_RxEventCallback>
 8014258:	e002      	b.n	8014260 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f000 fdfc 	bl	8014e58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014260:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014264:	2b00      	cmp	r3, #0
 8014266:	d006      	beq.n	8014276 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8014268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801426c:	f003 0320 	and.w	r3, r3, #32
 8014270:	2b00      	cmp	r3, #0
 8014272:	f47f aecb 	bne.w	801400c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801427c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014280:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8014284:	2b00      	cmp	r3, #0
 8014286:	d049      	beq.n	801431c <UART_RxISR_16BIT_FIFOEN+0x358>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801428e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8014292:	429a      	cmp	r2, r3
 8014294:	d242      	bcs.n	801431c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	3308      	adds	r3, #8
 801429c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a0:	e853 3f00 	ldrex	r3, [r3]
 80142a4:	623b      	str	r3, [r7, #32]
   return(result);
 80142a6:	6a3b      	ldr	r3, [r7, #32]
 80142a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80142ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	3308      	adds	r3, #8
 80142b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80142ba:	633a      	str	r2, [r7, #48]	; 0x30
 80142bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80142c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142c2:	e841 2300 	strex	r3, r2, [r1]
 80142c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80142c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d1e3      	bne.n	8014296 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	4a15      	ldr	r2, [pc, #84]	; (8014328 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80142d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	e853 3f00 	ldrex	r3, [r3]
 80142e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	f043 0320 	orr.w	r3, r3, #32
 80142e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	461a      	mov	r2, r3
 80142f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80142f6:	61fb      	str	r3, [r7, #28]
 80142f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142fa:	69b9      	ldr	r1, [r7, #24]
 80142fc:	69fa      	ldr	r2, [r7, #28]
 80142fe:	e841 2300 	strex	r3, r2, [r1]
 8014302:	617b      	str	r3, [r7, #20]
   return(result);
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d1e4      	bne.n	80142d4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801430a:	e007      	b.n	801431c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	699a      	ldr	r2, [r3, #24]
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	f042 0208 	orr.w	r2, r2, #8
 801431a:	619a      	str	r2, [r3, #24]
}
 801431c:	bf00      	nop
 801431e:	37b8      	adds	r7, #184	; 0xb8
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	40008000 	.word	0x40008000
 8014328:	08013aad 	.word	0x08013aad

0801432c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801432c:	b480      	push	{r7}
 801432e:	b083      	sub	sp, #12
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014334:	bf00      	nop
 8014336:	370c      	adds	r7, #12
 8014338:	46bd      	mov	sp, r7
 801433a:	bc80      	pop	{r7}
 801433c:	4770      	bx	lr

0801433e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801433e:	b480      	push	{r7}
 8014340:	b083      	sub	sp, #12
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014346:	bf00      	nop
 8014348:	370c      	adds	r7, #12
 801434a:	46bd      	mov	sp, r7
 801434c:	bc80      	pop	{r7}
 801434e:	4770      	bx	lr

08014350 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8014350:	b480      	push	{r7}
 8014352:	b083      	sub	sp, #12
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014358:	bf00      	nop
 801435a:	370c      	adds	r7, #12
 801435c:	46bd      	mov	sp, r7
 801435e:	bc80      	pop	{r7}
 8014360:	4770      	bx	lr

08014362 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014362:	b480      	push	{r7}
 8014364:	b085      	sub	sp, #20
 8014366:	af00      	add	r7, sp, #0
 8014368:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014370:	2b01      	cmp	r3, #1
 8014372:	d101      	bne.n	8014378 <HAL_UARTEx_DisableFifoMode+0x16>
 8014374:	2302      	movs	r3, #2
 8014376:	e027      	b.n	80143c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2201      	movs	r2, #1
 801437c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2224      	movs	r2, #36	; 0x24
 8014384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	681a      	ldr	r2, [r3, #0]
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	f022 0201 	bic.w	r2, r2, #1
 801439e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80143a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2200      	movs	r2, #0
 80143ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	68fa      	ldr	r2, [r7, #12]
 80143b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	2220      	movs	r2, #32
 80143ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2200      	movs	r2, #0
 80143c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80143c6:	2300      	movs	r3, #0
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3714      	adds	r7, #20
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bc80      	pop	{r7}
 80143d0:	4770      	bx	lr

080143d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80143d2:	b580      	push	{r7, lr}
 80143d4:	b084      	sub	sp, #16
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
 80143da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80143e2:	2b01      	cmp	r3, #1
 80143e4:	d101      	bne.n	80143ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80143e6:	2302      	movs	r3, #2
 80143e8:	e02d      	b.n	8014446 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2201      	movs	r2, #1
 80143ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2224      	movs	r2, #36	; 0x24
 80143f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	f022 0201 	bic.w	r2, r2, #1
 8014410:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	689b      	ldr	r3, [r3, #8]
 8014418:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	683a      	ldr	r2, [r7, #0]
 8014422:	430a      	orrs	r2, r1
 8014424:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f000 f850 	bl	80144cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	68fa      	ldr	r2, [r7, #12]
 8014432:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2220      	movs	r2, #32
 8014438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2200      	movs	r2, #0
 8014440:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014444:	2300      	movs	r3, #0
}
 8014446:	4618      	mov	r0, r3
 8014448:	3710      	adds	r7, #16
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}

0801444e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801444e:	b580      	push	{r7, lr}
 8014450:	b084      	sub	sp, #16
 8014452:	af00      	add	r7, sp, #0
 8014454:	6078      	str	r0, [r7, #4]
 8014456:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801445e:	2b01      	cmp	r3, #1
 8014460:	d101      	bne.n	8014466 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014462:	2302      	movs	r3, #2
 8014464:	e02d      	b.n	80144c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2201      	movs	r2, #1
 801446a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	2224      	movs	r2, #36	; 0x24
 8014472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	f022 0201 	bic.w	r2, r2, #1
 801448c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	689b      	ldr	r3, [r3, #8]
 8014494:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	683a      	ldr	r2, [r7, #0]
 801449e:	430a      	orrs	r2, r1
 80144a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f000 f812 	bl	80144cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	68fa      	ldr	r2, [r7, #12]
 80144ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2220      	movs	r2, #32
 80144b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2200      	movs	r2, #0
 80144bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80144c0:	2300      	movs	r3, #0
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3710      	adds	r7, #16
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}
	...

080144cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80144cc:	b480      	push	{r7}
 80144ce:	b085      	sub	sp, #20
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d108      	bne.n	80144ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2201      	movs	r2, #1
 80144e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2201      	movs	r2, #1
 80144e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80144ec:	e031      	b.n	8014552 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80144ee:	2308      	movs	r3, #8
 80144f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80144f2:	2308      	movs	r3, #8
 80144f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	689b      	ldr	r3, [r3, #8]
 80144fc:	0e5b      	lsrs	r3, r3, #25
 80144fe:	b2db      	uxtb	r3, r3
 8014500:	f003 0307 	and.w	r3, r3, #7
 8014504:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	689b      	ldr	r3, [r3, #8]
 801450c:	0f5b      	lsrs	r3, r3, #29
 801450e:	b2db      	uxtb	r3, r3
 8014510:	f003 0307 	and.w	r3, r3, #7
 8014514:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014516:	7bbb      	ldrb	r3, [r7, #14]
 8014518:	7b3a      	ldrb	r2, [r7, #12]
 801451a:	4910      	ldr	r1, [pc, #64]	; (801455c <UARTEx_SetNbDataToProcess+0x90>)
 801451c:	5c8a      	ldrb	r2, [r1, r2]
 801451e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014522:	7b3a      	ldrb	r2, [r7, #12]
 8014524:	490e      	ldr	r1, [pc, #56]	; (8014560 <UARTEx_SetNbDataToProcess+0x94>)
 8014526:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014528:	fb93 f3f2 	sdiv	r3, r3, r2
 801452c:	b29a      	uxth	r2, r3
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014534:	7bfb      	ldrb	r3, [r7, #15]
 8014536:	7b7a      	ldrb	r2, [r7, #13]
 8014538:	4908      	ldr	r1, [pc, #32]	; (801455c <UARTEx_SetNbDataToProcess+0x90>)
 801453a:	5c8a      	ldrb	r2, [r1, r2]
 801453c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014540:	7b7a      	ldrb	r2, [r7, #13]
 8014542:	4907      	ldr	r1, [pc, #28]	; (8014560 <UARTEx_SetNbDataToProcess+0x94>)
 8014544:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014546:	fb93 f3f2 	sdiv	r3, r3, r2
 801454a:	b29a      	uxth	r2, r3
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014552:	bf00      	nop
 8014554:	3714      	adds	r7, #20
 8014556:	46bd      	mov	sp, r7
 8014558:	bc80      	pop	{r7}
 801455a:	4770      	bx	lr
 801455c:	0801fecc 	.word	0x0801fecc
 8014560:	0801fed4 	.word	0x0801fed4

08014564 <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b086      	sub	sp, #24
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 801456c:	f7f5 fdd8 	bl	800a120 <Get_AdcHandle>
 8014570:	4603      	mov	r3, r0
 8014572:	4618      	mov	r0, r3
 8014574:	f7f9 fc31 	bl	800ddda <HAL_ADCEx_Calibration_Start>
 8014578:	4603      	mov	r3, r0
 801457a:	2b00      	cmp	r3, #0
 801457c:	d001      	beq.n	8014582 <ReadADCChannel+0x1e>
	    Error_Handler();
 801457e:	f7f5 fe13 	bl	800a1a8 <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 8014582:	f107 0308 	add.w	r3, r7, #8
 8014586:	2200      	movs	r2, #0
 8014588:	601a      	str	r2, [r3, #0]
 801458a:	605a      	str	r2, [r3, #4]
 801458c:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8014592:	2300      	movs	r3, #0
 8014594:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8014596:	2300      	movs	r3, #0
 8014598:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 801459a:	f7f5 fdc1 	bl	800a120 <Get_AdcHandle>
 801459e:	4602      	mov	r2, r0
 80145a0:	f107 0308 	add.w	r3, r7, #8
 80145a4:	4619      	mov	r1, r3
 80145a6:	4610      	mov	r0, r2
 80145a8:	f7f9 f92a 	bl	800d800 <HAL_ADC_ConfigChannel>
 80145ac:	4603      	mov	r3, r0
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d001      	beq.n	80145b6 <ReadADCChannel+0x52>
		Error_Handler();
 80145b2:	f7f5 fdf9 	bl	800a1a8 <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 80145b6:	f7f5 fdb3 	bl	800a120 <Get_AdcHandle>
 80145ba:	4603      	mov	r3, r0
 80145bc:	4618      	mov	r0, r3
 80145be:	f7f9 f803 	bl	800d5c8 <HAL_ADC_Start>
 80145c2:	4603      	mov	r3, r0
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d001      	beq.n	80145cc <ReadADCChannel+0x68>
		Error_Handler();
 80145c8:	f7f5 fdee 	bl	800a1a8 <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 80145cc:	f7f5 fda8 	bl	800a120 <Get_AdcHandle>
 80145d0:	4603      	mov	r3, r0
 80145d2:	f04f 31ff 	mov.w	r1, #4294967295
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7f9 f86e 	bl	800d6b8 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 80145dc:	f7f5 fda0 	bl	800a120 <Get_AdcHandle>
 80145e0:	4603      	mov	r3, r0
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7f9 f836 	bl	800d654 <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 80145e8:	f7f5 fd9a 	bl	800a120 <Get_AdcHandle>
 80145ec:	4603      	mov	r3, r0
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7f9 fa3e 	bl	800da70 <HAL_ADC_GetState>
 80145f4:	4603      	mov	r3, r0
 80145f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80145fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80145fe:	d107      	bne.n	8014610 <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 8014600:	f7f5 fd8e 	bl	800a120 <Get_AdcHandle>
 8014604:	4603      	mov	r3, r0
 8014606:	4618      	mov	r0, r3
 8014608:	f7f9 f8ed 	bl	800d7e6 <HAL_ADC_GetValue>
 801460c:	4603      	mov	r3, r0
 801460e:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 8014610:	8afb      	ldrh	r3, [r7, #22]
}
 8014612:	4618      	mov	r0, r3
 8014614:	3718      	adds	r7, #24
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
	...

0801461c <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 8014620:	2200      	movs	r2, #0
 8014622:	2180      	movs	r1, #128	; 0x80
 8014624:	480a      	ldr	r0, [pc, #40]	; (8014650 <AdcRead_VBatt+0x34>)
 8014626:	f7fa fab9 	bl	800eb9c <HAL_GPIO_WritePin>
	adcResult = ReadADCChannel(ADC_CHANNEL_2); // * 3.3 * 23) / (4096 * 13);
 801462a:	480a      	ldr	r0, [pc, #40]	; (8014654 <AdcRead_VBatt+0x38>)
 801462c:	f7ff ff9a 	bl	8014564 <ReadADCChannel>
 8014630:	4603      	mov	r3, r0
 8014632:	4618      	mov	r0, r3
 8014634:	f7f4 fd66 	bl	8009104 <__aeabi_ui2f>
 8014638:	4603      	mov	r3, r0
 801463a:	4a07      	ldr	r2, [pc, #28]	; (8014658 <AdcRead_VBatt+0x3c>)
 801463c:	6013      	str	r3, [r2, #0]
	return adcResult;
 801463e:	4b06      	ldr	r3, [pc, #24]	; (8014658 <AdcRead_VBatt+0x3c>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	4618      	mov	r0, r3
 8014644:	f7f4 fdb6 	bl	80091b4 <__aeabi_f2uiz>
 8014648:	4603      	mov	r3, r0
 801464a:	b29b      	uxth	r3, r3
}
 801464c:	4618      	mov	r0, r3
 801464e:	bd80      	pop	{r7, pc}
 8014650:	48000400 	.word	0x48000400
 8014654:	08000004 	.word	0x08000004
 8014658:	200020c8 	.word	0x200020c8

0801465c <commandReadDeviceId>:

char DataBuffer[200];
char *Version = "4.0";

void commandReadDeviceId(char *data)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b096      	sub	sp, #88	; 0x58
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 8014664:	2300      	movs	r3, #0
 8014666:	61bb      	str	r3, [r7, #24]
 8014668:	f107 031c 	add.w	r3, r7, #28
 801466c:	2200      	movs	r2, #0
 801466e:	601a      	str	r2, [r3, #0]
 8014670:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 8014672:	f7f8 fc85 	bl	800cf80 <HAL_GetUIDw0>
 8014676:	4603      	mov	r3, r0
 8014678:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 801467a:	f7f8 fc8b 	bl	800cf94 <HAL_GetUIDw1>
 801467e:	4603      	mov	r3, r0
 8014680:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 8014682:	f7f8 fc91 	bl	800cfa8 <HAL_GetUIDw2>
 8014686:	4603      	mov	r3, r0
 8014688:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 801468a:	f107 0318 	add.w	r3, r7, #24
 801468e:	220c      	movs	r2, #12
 8014690:	2100      	movs	r1, #0
 8014692:	4618      	mov	r0, r3
 8014694:	f004 f8fe 	bl	8018894 <memset>
 8014698:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 801469a:	61bb      	str	r3, [r7, #24]
 801469c:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 801469e:	61fb      	str	r3, [r7, #28]
 80146a0:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 80146a2:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 80146a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80146a8:	4a1e      	ldr	r2, [pc, #120]	; (8014724 <commandReadDeviceId+0xc8>)
 80146aa:	2132      	movs	r1, #50	; 0x32
 80146ac:	4618      	mov	r0, r3
 80146ae:	f003 ffd7 	bl	8018660 <snprintf>
  serialPutStr(DeviceId);
 80146b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80146b6:	4618      	mov	r0, r3
 80146b8:	f000 faf0 	bl	8014c9c <serialPutStr>
  for(i=0; i<12; i++)
 80146bc:	2300      	movs	r3, #0
 80146be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80146c2:	e026      	b.n	8014712 <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 80146c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146c8:	2b0a      	cmp	r3, #10
 80146ca:	d80c      	bhi.n	80146e6 <commandReadDeviceId+0x8a>
 80146cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146d0:	3358      	adds	r3, #88	; 0x58
 80146d2:	443b      	add	r3, r7
 80146d4:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80146d8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80146dc:	4a12      	ldr	r2, [pc, #72]	; (8014728 <commandReadDeviceId+0xcc>)
 80146de:	2132      	movs	r1, #50	; 0x32
 80146e0:	f003 ffbe 	bl	8018660 <snprintf>
 80146e4:	e00b      	b.n	80146fe <commandReadDeviceId+0xa2>
 80146e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146ea:	3358      	adds	r3, #88	; 0x58
 80146ec:	443b      	add	r3, r7
 80146ee:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80146f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80146f6:	4a0d      	ldr	r2, [pc, #52]	; (801472c <commandReadDeviceId+0xd0>)
 80146f8:	2132      	movs	r1, #50	; 0x32
 80146fa:	f003 ffb1 	bl	8018660 <snprintf>
    serialPutStr(DeviceId);
 80146fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014702:	4618      	mov	r0, r3
 8014704:	f000 faca 	bl	8014c9c <serialPutStr>
  for(i=0; i<12; i++)
 8014708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801470c:	3301      	adds	r3, #1
 801470e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8014712:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014716:	2b0b      	cmp	r3, #11
 8014718:	d9d4      	bls.n	80146c4 <commandReadDeviceId+0x68>
  }
}
 801471a:	bf00      	nop
 801471c:	bf00      	nop
 801471e:	3758      	adds	r7, #88	; 0x58
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}
 8014724:	0801f838 	.word	0x0801f838
 8014728:	0801f848 	.word	0x0801f848
 801472c:	0801f84c 	.word	0x0801f84c

08014730 <commandReadDeviceBattery>:

void commandReadDeviceBattery(char *data)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b082      	sub	sp, #8
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 8014738:	4808      	ldr	r0, [pc, #32]	; (801475c <commandReadDeviceBattery+0x2c>)
 801473a:	f000 faaf 	bl	8014c9c <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %d\n",AdcRead_VBatt());
 801473e:	f7ff ff6d 	bl	801461c <AdcRead_VBatt>
 8014742:	4603      	mov	r3, r0
 8014744:	461a      	mov	r2, r3
 8014746:	4906      	ldr	r1, [pc, #24]	; (8014760 <commandReadDeviceBattery+0x30>)
 8014748:	4806      	ldr	r0, [pc, #24]	; (8014764 <commandReadDeviceBattery+0x34>)
 801474a:	f003 ffbd 	bl	80186c8 <sprintf>
	 serialPutStr(DataBuffer);
 801474e:	4805      	ldr	r0, [pc, #20]	; (8014764 <commandReadDeviceBattery+0x34>)
 8014750:	f000 faa4 	bl	8014c9c <serialPutStr>
}
 8014754:	bf00      	nop
 8014756:	3708      	adds	r7, #8
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}
 801475c:	0801f850 	.word	0x0801f850
 8014760:	0801f85c 	.word	0x0801f85c
 8014764:	200020cc 	.word	0x200020cc

08014768 <commandGetDistance>:


char sonarBuffer[100];
void commandGetDistance(char *data)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b082      	sub	sp, #8
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 8014770:	2201      	movs	r2, #1
 8014772:	2101      	movs	r1, #1
 8014774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014778:	f7fa fa10 	bl	800eb9c <HAL_GPIO_WritePin>
	sprintf(sonarBuffer,"OK,DISTREAD %d\n",getSonarDistance());
 801477c:	f000 f9a4 	bl	8014ac8 <getSonarDistance>
 8014780:	4603      	mov	r3, r0
 8014782:	461a      	mov	r2, r3
 8014784:	4905      	ldr	r1, [pc, #20]	; (801479c <commandGetDistance+0x34>)
 8014786:	4806      	ldr	r0, [pc, #24]	; (80147a0 <commandGetDistance+0x38>)
 8014788:	f003 ff9e 	bl	80186c8 <sprintf>
	serialPutStr(sonarBuffer);
 801478c:	4804      	ldr	r0, [pc, #16]	; (80147a0 <commandGetDistance+0x38>)
 801478e:	f000 fa85 	bl	8014c9c <serialPutStr>
}
 8014792:	bf00      	nop
 8014794:	3708      	adds	r7, #8
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	0801f86c 	.word	0x0801f86c
 80147a0:	20002194 	.word	0x20002194

080147a4 <commandGetVersion>:

void commandGetVersion(char *data)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b082      	sub	sp, #8
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]

	sprintf(DataBuffer,"OK,VERSION %s\n",Version);
 80147ac:	4b06      	ldr	r3, [pc, #24]	; (80147c8 <commandGetVersion+0x24>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	461a      	mov	r2, r3
 80147b2:	4906      	ldr	r1, [pc, #24]	; (80147cc <commandGetVersion+0x28>)
 80147b4:	4806      	ldr	r0, [pc, #24]	; (80147d0 <commandGetVersion+0x2c>)
 80147b6:	f003 ff87 	bl	80186c8 <sprintf>
	serialPutStr(DataBuffer);
 80147ba:	4805      	ldr	r0, [pc, #20]	; (80147d0 <commandGetVersion+0x2c>)
 80147bc:	f000 fa6e 	bl	8014c9c <serialPutStr>
}
 80147c0:	bf00      	nop
 80147c2:	3708      	adds	r7, #8
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}
 80147c8:	20000090 	.word	0x20000090
 80147cc:	0801f87c 	.word	0x0801f87c
 80147d0:	200020cc 	.word	0x200020cc

080147d4 <Flash__Init>:
/**
 * @brief Flash Init routine
 **/

bool Flash__Init(void)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b082      	sub	sp, #8
 80147d8:	af00      	add	r7, sp, #0
	uint32_t jedecId;

	HAL_Delay(100);
 80147da:	2064      	movs	r0, #100	; 0x64
 80147dc:	f7f8 fbac 	bl	800cf38 <HAL_Delay>
	//Assert Spi CS pin
	Spi1_AssertCs();
 80147e0:	f000 fa12 	bl	8014c08 <Spi1_AssertCs>
	HAL_Delay(100);
 80147e4:	2064      	movs	r0, #100	; 0x64
 80147e6:	f7f8 fba7 	bl	800cf38 <HAL_Delay>

	Flash__GetJEDEC_ID(&jedecId);
 80147ea:	1d3b      	adds	r3, r7, #4
 80147ec:	4618      	mov	r0, r3
 80147ee:	f000 f835 	bl	801485c <Flash__GetJEDEC_ID>

	if(jedecId != WINBOND_JEDEC_ID)
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	4a04      	ldr	r2, [pc, #16]	; (8014808 <Flash__Init+0x34>)
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d001      	beq.n	80147fe <Flash__Init+0x2a>
	{
		return false;
 80147fa:	2300      	movs	r3, #0
 80147fc:	e000      	b.n	8014800 <Flash__Init+0x2c>
	}
	else
	{
		return true;
 80147fe:	2301      	movs	r3, #1
	}
}
 8014800:	4618      	mov	r0, r3
 8014802:	3708      	adds	r7, #8
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}
 8014808:	00ef4017 	.word	0x00ef4017

0801480c <Flash__SpiWrite>:
/**
 * @brief Flash Spi write routine
 **/

void Flash__SpiWrite(unsigned char data)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b082      	sub	sp, #8
 8014810:	af00      	add	r7, sp, #0
 8014812:	4603      	mov	r3, r0
 8014814:	71fb      	strb	r3, [r7, #7]
	Spi1_Transmit(&data, sizeof(data));
 8014816:	1dfb      	adds	r3, r7, #7
 8014818:	2101      	movs	r1, #1
 801481a:	4618      	mov	r0, r3
 801481c:	f000 fa0c 	bl	8014c38 <Spi1_Transmit>
}
 8014820:	bf00      	nop
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <Flash__SpiRead>:
/**
 * @brief Flash Spi read routine
 **/

unsigned char Flash__SpiRead(void)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
	unsigned char ret = 0x00;
 801482e:	2300      	movs	r3, #0
 8014830:	71fb      	strb	r3, [r7, #7]
	Spi1_Receive(&ret, sizeof(ret));
 8014832:	1dfb      	adds	r3, r7, #7
 8014834:	2101      	movs	r1, #1
 8014836:	4618      	mov	r0, r3
 8014838:	f000 fa17 	bl	8014c6a <Spi1_Receive>
	return ret;
 801483c:	79fb      	ldrb	r3, [r7, #7]
}
 801483e:	4618      	mov	r0, r3
 8014840:	3708      	adds	r7, #8
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}

08014846 <Flash__WriteEnable>:
/**
 * @brief Flash Write Enable routine
 **/

void Flash__WriteEnable(void)
{
 8014846:	b580      	push	{r7, lr}
 8014848:	af00      	add	r7, sp, #0
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 801484a:	f000 f9e9 	bl	8014c20 <Spi1_DeassertCs>
	//Send Write Enable Command
	Flash__SpiWrite(CMD_WREN);
 801484e:	2006      	movs	r0, #6
 8014850:	f7ff ffdc 	bl	801480c <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014854:	f000 f9d8 	bl	8014c08 <Spi1_AssertCs>
}
 8014858:	bf00      	nop
 801485a:	bd80      	pop	{r7, pc}

0801485c <Flash__GetJEDEC_ID>:
 *
 * @param[out] jdecId Flash JEDEC id to be read
 **/

void Flash__GetJEDEC_ID(uint32_t *jdecId)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
	uint8_t read_buff[3];

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014864:	f000 f9dc 	bl	8014c20 <Spi1_DeassertCs>
	//Send Read JEDEC ID Command
	Flash__SpiWrite(CMD_JEDEC_ID);
 8014868:	209f      	movs	r0, #159	; 0x9f
 801486a:	f7ff ffcf 	bl	801480c <Flash__SpiWrite>
	read_buff[0] = Flash__SpiRead();
 801486e:	f7ff ffdb 	bl	8014828 <Flash__SpiRead>
 8014872:	4603      	mov	r3, r0
 8014874:	733b      	strb	r3, [r7, #12]
	read_buff[1] = Flash__SpiRead();
 8014876:	f7ff ffd7 	bl	8014828 <Flash__SpiRead>
 801487a:	4603      	mov	r3, r0
 801487c:	737b      	strb	r3, [r7, #13]
	read_buff[2] = Flash__SpiRead();
 801487e:	f7ff ffd3 	bl	8014828 <Flash__SpiRead>
 8014882:	4603      	mov	r3, r0
 8014884:	73bb      	strb	r3, [r7, #14]
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014886:	f000 f9bf 	bl	8014c08 <Spi1_AssertCs>

	//Format JEDEC ID
	*jdecId = (read_buff[0] << 16) | (read_buff[1] << 8) | read_buff[2];
 801488a:	7b3b      	ldrb	r3, [r7, #12]
 801488c:	041a      	lsls	r2, r3, #16
 801488e:	7b7b      	ldrb	r3, [r7, #13]
 8014890:	021b      	lsls	r3, r3, #8
 8014892:	4313      	orrs	r3, r2
 8014894:	7bba      	ldrb	r2, [r7, #14]
 8014896:	4313      	orrs	r3, r2
 8014898:	461a      	mov	r2, r3
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	601a      	str	r2, [r3, #0]
}
 801489e:	bf00      	nop
 80148a0:	3710      	adds	r7, #16
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}

080148a6 <Flash__ReadDeviceStatus1>:
/**
 * @brief Flash read device status register 1 routine
 **/

uint8_t Flash__ReadDeviceStatus1(void)
{
 80148a6:	b580      	push	{r7, lr}
 80148a8:	b082      	sub	sp, #8
 80148aa:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80148ac:	2300      	movs	r3, #0
 80148ae:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80148b0:	f000 f9b6 	bl	8014c20 <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);
 80148b4:	2005      	movs	r0, #5
 80148b6:	f7ff ffa9 	bl	801480c <Flash__SpiWrite>
	data = Flash__SpiRead();                     // dummy
 80148ba:	f7ff ffb5 	bl	8014828 <Flash__SpiRead>
 80148be:	4603      	mov	r3, r0
 80148c0:	71fb      	strb	r3, [r7, #7]
	//Assert Spi CS pin
	Spi1_AssertCs();
 80148c2:	f000 f9a1 	bl	8014c08 <Spi1_AssertCs>

	return (data);
 80148c6:	79fb      	ldrb	r3, [r7, #7]
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3708      	adds	r7, #8
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <Flash__ReadDeviceStatus2>:
/**
 * @brief Flash read device status register 2 routine
 **/

uint8_t Flash__ReadDeviceStatus2(void)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b082      	sub	sp, #8
 80148d4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80148d6:	2300      	movs	r3, #0
 80148d8:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80148da:	f000 f9a1 	bl	8014c20 <Spi1_DeassertCs>
	//Send Read Status Register 2 Command
	Flash__SpiWrite(CMD_RDSR2);
 80148de:	2035      	movs	r0, #53	; 0x35
 80148e0:	f7ff ff94 	bl	801480c <Flash__SpiWrite>
	data = Flash__SpiRead();                     // dummy
 80148e4:	f7ff ffa0 	bl	8014828 <Flash__SpiRead>
 80148e8:	4603      	mov	r3, r0
 80148ea:	71fb      	strb	r3, [r7, #7]
	//Assert Spi CS pin
	Spi1_AssertCs();
 80148ec:	f000 f98c 	bl	8014c08 <Spi1_AssertCs>

	return (data);
 80148f0:	79fb      	ldrb	r3, [r7, #7]
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3708      	adds	r7, #8
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}

080148fa <Flash__ReadDeviceStatus>:
/**
 * @brief Flash read device status routine
 **/

uint16_t Flash__ReadDeviceStatus(void)
{
 80148fa:	b590      	push	{r4, r7, lr}
 80148fc:	b083      	sub	sp, #12
 80148fe:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 8014900:	2300      	movs	r3, #0
 8014902:	80fb      	strh	r3, [r7, #6]

	data = Flash__ReadDeviceStatus2();
 8014904:	f7ff ffe4 	bl	80148d0 <Flash__ReadDeviceStatus2>
 8014908:	4603      	mov	r3, r0
 801490a:	80fb      	strh	r3, [r7, #6]
	data = (data << 8) | Flash__ReadDeviceStatus1();
 801490c:	88fb      	ldrh	r3, [r7, #6]
 801490e:	021b      	lsls	r3, r3, #8
 8014910:	b21c      	sxth	r4, r3
 8014912:	f7ff ffc8 	bl	80148a6 <Flash__ReadDeviceStatus1>
 8014916:	4603      	mov	r3, r0
 8014918:	b21b      	sxth	r3, r3
 801491a:	4323      	orrs	r3, r4
 801491c:	b21b      	sxth	r3, r3
 801491e:	80fb      	strh	r3, [r7, #6]

	return (data);
 8014920:	88fb      	ldrh	r3, [r7, #6]
}
 8014922:	4618      	mov	r0, r3
 8014924:	370c      	adds	r7, #12
 8014926:	46bd      	mov	sp, r7
 8014928:	bd90      	pop	{r4, r7, pc}

0801492a <Flash__ReadBuffer>:
 * @param[in] pBuffer Pointer to the buffer that receives the data read
 * @param[in] Length Number of bytes to read
 **/

bool Flash__ReadBuffer(uint32_t addr, uint8_t *pBuffer, uint32_t length)
{
 801492a:	b590      	push	{r4, r7, lr}
 801492c:	b087      	sub	sp, #28
 801492e:	af00      	add	r7, sp, #0
 8014930:	60f8      	str	r0, [r7, #12]
 8014932:	60b9      	str	r1, [r7, #8]
 8014934:	607a      	str	r2, [r7, #4]
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014936:	f000 f973 	bl	8014c20 <Spi1_DeassertCs>
#if WINBOND_USE_FAST_READ
	//Send Fast Read Command
	Flash__SpiWrite(CMD_READ_HS);               // send 0Bh
 801493a:	200b      	movs	r0, #11
 801493c:	f7ff ff66 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 16) & 0xFF);       // Send ReadAddr high nibble
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	0c1b      	lsrs	r3, r3, #16
 8014944:	b2db      	uxtb	r3, r3
 8014946:	4618      	mov	r0, r3
 8014948:	f7ff ff60 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 8) & 0xFF); 		// Send ReadAddr middle nibble address byte to read from
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	0a1b      	lsrs	r3, r3, #8
 8014950:	b2db      	uxtb	r3, r3
 8014952:	4618      	mov	r0, r3
 8014954:	f7ff ff5a 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite(addr & 0xFF); 				// Send ReadAddr low nibble address byte to read from
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	b2db      	uxtb	r3, r3
 801495c:	4618      	mov	r0, r3
 801495e:	f7ff ff55 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite(DUMMY);						// Dummy eight clocks
 8014962:	20ff      	movs	r0, #255	; 0xff
 8014964:	f7ff ff52 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 16) & 0xFF);       // Send ReadAddr high nibble
	Flash__SpiWrite((addr >> 8) & 0xFF); 		// Send ReadAddr middle nibble address byte to read from
	Flash__SpiWrite(addr & 0xFF); 				// Send ReadAddr low nibble address byte to read from
#endif
	//Read bytes
	for (uint32_t i = 0; i < length; ++i) {
 8014968:	2300      	movs	r3, #0
 801496a:	617b      	str	r3, [r7, #20]
 801496c:	e009      	b.n	8014982 <Flash__ReadBuffer+0x58>
		pBuffer[i] = Flash__SpiRead();
 801496e:	68ba      	ldr	r2, [r7, #8]
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	18d4      	adds	r4, r2, r3
 8014974:	f7ff ff58 	bl	8014828 <Flash__SpiRead>
 8014978:	4603      	mov	r3, r0
 801497a:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < length; ++i) {
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	3301      	adds	r3, #1
 8014980:	617b      	str	r3, [r7, #20]
 8014982:	697a      	ldr	r2, [r7, #20]
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	429a      	cmp	r2, r3
 8014988:	d3f1      	bcc.n	801496e <Flash__ReadBuffer+0x44>
	}
	//Assert Spi CS pin
	Spi1_AssertCs();
 801498a:	f000 f93d 	bl	8014c08 <Spi1_AssertCs>

	return true;
 801498e:	2301      	movs	r3, #1
}
 8014990:	4618      	mov	r0, r3
 8014992:	371c      	adds	r7, #28
 8014994:	46bd      	mov	sp, r7
 8014996:	bd90      	pop	{r4, r7, pc}

08014998 <flashWaitWhileBusy>:
 * Polls the status of the write in progress (WIP) bit of the status register
 * until the write operation is completed
 **/

void flashWaitWhileBusy(void)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b082      	sub	sp, #8
 801499c:	af00      	add	r7, sp, #0
	uint8_t flash_status = 0;
 801499e:	2300      	movs	r3, #0
 80149a0:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80149a2:	f000 f93d 	bl	8014c20 <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);   //Send RDSR command
 80149a6:	2005      	movs	r0, #5
 80149a8:	f7ff ff30 	bl	801480c <Flash__SpiWrite>
	/*Loop whiles memory is busy with a write cycle */
	do { /* Send dummy bytes to clock out data from flash */
		flash_status = Flash__SpiRead();
 80149ac:	f7ff ff3c 	bl	8014828 <Flash__SpiRead>
 80149b0:	4603      	mov	r3, r0
 80149b2:	71fb      	strb	r3, [r7, #7]
	} while (flash_status & 0x01); /* Write in progress */
 80149b4:	79fb      	ldrb	r3, [r7, #7]
 80149b6:	f003 0301 	and.w	r3, r3, #1
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d1f6      	bne.n	80149ac <flashWaitWhileBusy+0x14>
	//Assert Spi CS pin
	Spi1_AssertCs();
 80149be:	f000 f923 	bl	8014c08 <Spi1_AssertCs>
}
 80149c2:	bf00      	nop
 80149c4:	3708      	adds	r7, #8
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}

080149ca <Flash__PageProgram>:
 * @param[in] write_buffer Pointer to buffer containing the date to be written to flash
 * @param[in] length Number of bytes to be written
 **/

void Flash__PageProgram(uint32_t addr, uint8_t *write_buffer, uint16_t length)
{
 80149ca:	b580      	push	{r7, lr}
 80149cc:	b084      	sub	sp, #16
 80149ce:	af00      	add	r7, sp, #0
 80149d0:	60f8      	str	r0, [r7, #12]
 80149d2:	60b9      	str	r1, [r7, #8]
 80149d4:	4613      	mov	r3, r2
 80149d6:	80fb      	strh	r3, [r7, #6]
	//Wait for last operation to end
	flashWaitWhileBusy();
 80149d8:	f7ff ffde 	bl	8014998 <flashWaitWhileBusy>
	//Enable write operation
	Flash__WriteEnable();
 80149dc:	f7ff ff33 	bl	8014846 <Flash__WriteEnable>

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80149e0:	f000 f91e 	bl	8014c20 <Spi1_DeassertCs>
	// Send Page Program Command
	Flash__SpiWrite(CMD_PAGEPROG);
 80149e4:	2002      	movs	r0, #2
 80149e6:	f7ff ff11 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	0c1b      	lsrs	r3, r3, #16
 80149ee:	b2db      	uxtb	r3, r3
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7ff ff0b 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	0a1b      	lsrs	r3, r3, #8
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7ff ff05 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7ff ff00 	bl	801480c <Flash__SpiWrite>


	// Check if the address match the beginning of a page
	if(addr & 0xFF)
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	b2db      	uxtb	r3, r3
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d009      	beq.n	8014a28 <Flash__PageProgram+0x5e>
	{
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE - (addr % SPI_FLASH_PERWRITEPAGESIZE));
 8014a14:	88fa      	ldrh	r2, [r7, #6]
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	b2db      	uxtb	r3, r3
 8014a1a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014a1e:	4293      	cmp	r3, r2
 8014a20:	bf28      	it	cs
 8014a22:	4613      	movcs	r3, r2
 8014a24:	80fb      	strh	r3, [r7, #6]
 8014a26:	e00f      	b.n	8014a48 <Flash__PageProgram+0x7e>
	}
	else
	{
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE);
 8014a28:	88fb      	ldrh	r3, [r7, #6]
 8014a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a2e:	bf28      	it	cs
 8014a30:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8014a34:	80fb      	strh	r3, [r7, #6]
	}

	/* while there is data to be written on the FLASH */
	while (length--) {
 8014a36:	e007      	b.n	8014a48 <Flash__PageProgram+0x7e>
		/* Send the current byte */
		Flash__SpiWrite(*write_buffer);
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7ff fee5 	bl	801480c <Flash__SpiWrite>
		/* Point on the next byte to be written */
		write_buffer++;
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	3301      	adds	r3, #1
 8014a46:	60bb      	str	r3, [r7, #8]
	while (length--) {
 8014a48:	88fb      	ldrh	r3, [r7, #6]
 8014a4a:	1e5a      	subs	r2, r3, #1
 8014a4c:	80fa      	strh	r2, [r7, #6]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d1f2      	bne.n	8014a38 <Flash__PageProgram+0x6e>
	}
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014a52:	f000 f8d9 	bl	8014c08 <Spi1_AssertCs>

	// Wait for page program operation to end
	flashWaitWhileBusy();
 8014a56:	f7ff ff9f 	bl	8014998 <flashWaitWhileBusy>
}
 8014a5a:	bf00      	nop
 8014a5c:	3710      	adds	r7, #16
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
	...

08014a64 <Flash__SectorErase4k>:
 * @brief Flash 4kB Sector Erase routine
 * @param[in] addr Address of the sector to be erased
 **/

void Flash__SectorErase4k(uint32_t addr)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b082      	sub	sp, #8
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
	// Wait for last operation to end
	flashWaitWhileBusy();
 8014a6c:	f7ff ff94 	bl	8014998 <flashWaitWhileBusy>
	// Enable write operation
	Flash__WriteEnable();
 8014a70:	f7ff fee9 	bl	8014846 <Flash__WriteEnable>

	//Make sure it is a 4k sector address
	if(addr & 0xFFF)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d003      	beq.n	8014a86 <Flash__SectorErase4k+0x22>
	{
		addr = addr & 0x00FFF000;
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	4b10      	ldr	r3, [pc, #64]	; (8014ac4 <Flash__SectorErase4k+0x60>)
 8014a82:	4013      	ands	r3, r2
 8014a84:	607b      	str	r3, [r7, #4]
	}

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014a86:	f000 f8cb 	bl	8014c20 <Spi1_DeassertCs>
	//Send Sector Erase Command
	Flash__SpiWrite(CMD_ERASE_SECTOR);
 8014a8a:	2020      	movs	r0, #32
 8014a8c:	f7ff febe 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	0c1b      	lsrs	r3, r3, #16
 8014a94:	b2db      	uxtb	r3, r3
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7ff feb8 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	0a1b      	lsrs	r3, r3, #8
 8014aa0:	b2db      	uxtb	r3, r3
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7ff feb2 	bl	801480c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7ff fead 	bl	801480c <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014ab2:	f000 f8a9 	bl	8014c08 <Spi1_AssertCs>

	// Wait for sector erase 4k operation to end
	flashWaitWhileBusy();
 8014ab6:	f7ff ff6f 	bl	8014998 <flashWaitWhileBusy>
}
 8014aba:	bf00      	nop
 8014abc:	3708      	adds	r7, #8
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd80      	pop	{r7, pc}
 8014ac2:	bf00      	nop
 8014ac4:	00fff000 	.word	0x00fff000

08014ac8 <getSonarDistance>:
 */

#include "Maxbotix.h"


uint16_t getSonarDistance(void){
 8014ac8:	b5b0      	push	{r4, r5, r7, lr}
 8014aca:	b086      	sub	sp, #24
 8014acc:	af00      	add	r7, sp, #0
	  unsigned char RxBuffer[4];
	  bool newData = false;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	75fb      	strb	r3, [r7, #23]
	  uint16_t dist_mm = 0;
 8014ad2:	2300      	movs	r3, #0
 8014ad4:	82bb      	strh	r3, [r7, #20]
	  unsigned char rx;
	  uint8_t tries = 0;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	74fb      	strb	r3, [r7, #19]

	  HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 8014ada:	2201      	movs	r2, #1
 8014adc:	2101      	movs	r1, #1
 8014ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014ae2:	f7fa f85b 	bl	800eb9c <HAL_GPIO_WritePin>
	  do {
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_SET);
 8014ae6:	2201      	movs	r2, #1
 8014ae8:	2102      	movs	r1, #2
 8014aea:	4844      	ldr	r0, [pc, #272]	; (8014bfc <getSonarDistance+0x134>)
 8014aec:	f7fa f856 	bl	800eb9c <HAL_GPIO_WritePin>
	    HAL_Delay(1); // todo: implement HAL_Delay_Microseconds()
 8014af0:	2001      	movs	r0, #1
 8014af2:	f7f8 fa21 	bl	800cf38 <HAL_Delay>
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8014af6:	2200      	movs	r2, #0
 8014af8:	2102      	movs	r1, #2
 8014afa:	4840      	ldr	r0, [pc, #256]	; (8014bfc <getSonarDistance+0x134>)
 8014afc:	f7fa f84e 	bl	800eb9c <HAL_GPIO_WritePin>
	    if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&rx, 1, 20) == HAL_OK) {
 8014b00:	f7f5 fb22 	bl	800a148 <Get_SonarHandle>
 8014b04:	1df9      	adds	r1, r7, #7
 8014b06:	2314      	movs	r3, #20
 8014b08:	2201      	movs	r2, #1
 8014b0a:	f7fd fcaf 	bl	801246c <HAL_UART_Receive>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d160      	bne.n	8014bd6 <getSonarDistance+0x10e>
	      if ((char)rx == 'R') {
 8014b14:	79fb      	ldrb	r3, [r7, #7]
 8014b16:	2b52      	cmp	r3, #82	; 0x52
 8014b18:	d15a      	bne.n	8014bd0 <getSonarDistance+0x108>
	        if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&RxBuffer, 4, 20) == HAL_OK) {
 8014b1a:	f7f5 fb15 	bl	800a148 <Get_SonarHandle>
 8014b1e:	f107 0108 	add.w	r1, r7, #8
 8014b22:	2314      	movs	r3, #20
 8014b24:	2204      	movs	r2, #4
 8014b26:	f7fd fca1 	bl	801246c <HAL_UART_Receive>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d155      	bne.n	8014bdc <getSonarDistance+0x114>
	          if (isdigit(RxBuffer[3])) {
 8014b30:	7afb      	ldrb	r3, [r7, #11]
 8014b32:	3301      	adds	r3, #1
 8014b34:	4a32      	ldr	r2, [pc, #200]	; (8014c00 <getSonarDistance+0x138>)
 8014b36:	4413      	add	r3, r2
 8014b38:	781b      	ldrb	r3, [r3, #0]
 8014b3a:	f003 0304 	and.w	r3, r3, #4
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d001      	beq.n	8014b46 <getSonarDistance+0x7e>
	            newData = true;
 8014b42:	2301      	movs	r3, #1
 8014b44:	75fb      	strb	r3, [r7, #23]
	          }
	          if (newData) {
 8014b46:	7dfb      	ldrb	r3, [r7, #23]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d047      	beq.n	8014bdc <getSonarDistance+0x114>
	            for (int i = 0; i < 4; i++)
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	60fb      	str	r3, [r7, #12]
 8014b50:	e035      	b.n	8014bbe <getSonarDistance+0xf6>
	              dist_mm += (RxBuffer[3 - i] - '0') * pow(10, i);
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	f1c3 0303 	rsb	r3, r3, #3
 8014b58:	3318      	adds	r3, #24
 8014b5a:	443b      	add	r3, r7
 8014b5c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8014b60:	3b30      	subs	r3, #48	; 0x30
 8014b62:	4618      	mov	r0, r3
 8014b64:	f7f3 feb6 	bl	80088d4 <__aeabi_i2d>
 8014b68:	4604      	mov	r4, r0
 8014b6a:	460d      	mov	r5, r1
 8014b6c:	68f8      	ldr	r0, [r7, #12]
 8014b6e:	f7f3 feb1 	bl	80088d4 <__aeabi_i2d>
 8014b72:	4602      	mov	r2, r0
 8014b74:	460b      	mov	r3, r1
 8014b76:	f04f 0000 	mov.w	r0, #0
 8014b7a:	4922      	ldr	r1, [pc, #136]	; (8014c04 <getSonarDistance+0x13c>)
 8014b7c:	f009 fba4 	bl	801e2c8 <pow>
 8014b80:	4602      	mov	r2, r0
 8014b82:	460b      	mov	r3, r1
 8014b84:	4620      	mov	r0, r4
 8014b86:	4629      	mov	r1, r5
 8014b88:	f7f3 ff0e 	bl	80089a8 <__aeabi_dmul>
 8014b8c:	4602      	mov	r2, r0
 8014b8e:	460b      	mov	r3, r1
 8014b90:	4614      	mov	r4, r2
 8014b92:	461d      	mov	r5, r3
 8014b94:	8abb      	ldrh	r3, [r7, #20]
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7f3 fe9c 	bl	80088d4 <__aeabi_i2d>
 8014b9c:	4602      	mov	r2, r0
 8014b9e:	460b      	mov	r3, r1
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	4629      	mov	r1, r5
 8014ba4:	f7f3 fd4a 	bl	800863c <__adddf3>
 8014ba8:	4602      	mov	r2, r0
 8014baa:	460b      	mov	r3, r1
 8014bac:	4610      	mov	r0, r2
 8014bae:	4619      	mov	r1, r3
 8014bb0:	f7f4 f9d2 	bl	8008f58 <__aeabi_d2uiz>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	82bb      	strh	r3, [r7, #20]
	            for (int i = 0; i < 4; i++)
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	3301      	adds	r3, #1
 8014bbc:	60fb      	str	r3, [r7, #12]
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	2b03      	cmp	r3, #3
 8014bc2:	ddc6      	ble.n	8014b52 <getSonarDistance+0x8a>
	            if (dist_mm==0)
 8014bc4:	8abb      	ldrh	r3, [r7, #20]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d108      	bne.n	8014bdc <getSonarDistance+0x114>
	            	newData = false;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	75fb      	strb	r3, [r7, #23]
 8014bce:	e005      	b.n	8014bdc <getSonarDistance+0x114>
	          }
	        }
	      } else {
	        newData = false;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	75fb      	strb	r3, [r7, #23]
 8014bd4:	e002      	b.n	8014bdc <getSonarDistance+0x114>
	      }
	    } else {
	      tries++;
 8014bd6:	7cfb      	ldrb	r3, [r7, #19]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	74fb      	strb	r3, [r7, #19]
	    }
	  } while (newData == false && tries < MAX_SONAR_TRIES - 1);
 8014bdc:	7dfb      	ldrb	r3, [r7, #23]
 8014bde:	f083 0301 	eor.w	r3, r3, #1
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d003      	beq.n	8014bf0 <getSonarDistance+0x128>
 8014be8:	7cfb      	ldrb	r3, [r7, #19]
 8014bea:	2b03      	cmp	r3, #3
 8014bec:	f67f af7b 	bls.w	8014ae6 <getSonarDistance+0x1e>
	  return dist_mm;
 8014bf0:	8abb      	ldrh	r3, [r7, #20]
}
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3718      	adds	r7, #24
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	48000800 	.word	0x48000800
 8014c00:	0802051c 	.word	0x0802051c
 8014c04:	40240000 	.word	0x40240000

08014c08 <Spi1_AssertCs>:
 */

#include "Spi.h"

void Spi1_AssertCs(void)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	af00      	add	r7, sp, #0
	//Assert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8014c0c:	2201      	movs	r2, #1
 8014c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014c12:	4802      	ldr	r0, [pc, #8]	; (8014c1c <Spi1_AssertCs+0x14>)
 8014c14:	f7f9 ffc2 	bl	800eb9c <HAL_GPIO_WritePin>
}
 8014c18:	bf00      	nop
 8014c1a:	bd80      	pop	{r7, pc}
 8014c1c:	48000400 	.word	0x48000400

08014c20 <Spi1_DeassertCs>:

void Spi1_DeassertCs(void)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	af00      	add	r7, sp, #0
	//Deassert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8014c24:	2200      	movs	r2, #0
 8014c26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014c2a:	4802      	ldr	r0, [pc, #8]	; (8014c34 <Spi1_DeassertCs+0x14>)
 8014c2c:	f7f9 ffb6 	bl	800eb9c <HAL_GPIO_WritePin>
}
 8014c30:	bf00      	nop
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	48000400 	.word	0x48000400

08014c38 <Spi1_Transmit>:

bool Spi1_Transmit(uint8_t *buff, uint16_t size)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	6078      	str	r0, [r7, #4]
 8014c40:	460b      	mov	r3, r1
 8014c42:	807b      	strh	r3, [r7, #2]
  bool status = false;
 8014c44:	2300      	movs	r3, #0
 8014c46:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Transmit(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8014c48:	f7f5 fa88 	bl	800a15c <Get_SpiHandle>
 8014c4c:	887a      	ldrh	r2, [r7, #2]
 8014c4e:	2364      	movs	r3, #100	; 0x64
 8014c50:	6879      	ldr	r1, [r7, #4]
 8014c52:	f7fc f836 	bl	8010cc2 <HAL_SPI_Transmit>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d101      	bne.n	8014c60 <Spi1_Transmit+0x28>
  {
    status  = true;
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8014c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3710      	adds	r7, #16
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}

08014c6a <Spi1_Receive>:


bool Spi1_Receive(uint8_t *buff, uint16_t size)
{
 8014c6a:	b580      	push	{r7, lr}
 8014c6c:	b084      	sub	sp, #16
 8014c6e:	af00      	add	r7, sp, #0
 8014c70:	6078      	str	r0, [r7, #4]
 8014c72:	460b      	mov	r3, r1
 8014c74:	807b      	strh	r3, [r7, #2]
  bool status = false;
 8014c76:	2300      	movs	r3, #0
 8014c78:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Receive(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8014c7a:	f7f5 fa6f 	bl	800a15c <Get_SpiHandle>
 8014c7e:	887a      	ldrh	r2, [r7, #2]
 8014c80:	2364      	movs	r3, #100	; 0x64
 8014c82:	6879      	ldr	r1, [r7, #4]
 8014c84:	f7fc f9ad 	bl	8010fe2 <HAL_SPI_Receive>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d101      	bne.n	8014c92 <Spi1_Receive+0x28>
  {
    status = true;
 8014c8e:	2301      	movs	r3, #1
 8014c90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3710      	adds	r7, #16
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}

08014c9c <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8014c9c:	b590      	push	{r4, r7, lr}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8014ca4:	f7f5 fa46 	bl	800a134 <Get_DebugHandle>
 8014ca8:	4604      	mov	r4, r0
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f7f3 fcb8 	bl	8008620 <strlen>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	230a      	movs	r3, #10
 8014cb6:	6879      	ldr	r1, [r7, #4]
 8014cb8:	4620      	mov	r0, r4
 8014cba:	f7fd fb51 	bl	8012360 <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 8014cbe:	bf00      	nop
 8014cc0:	370c      	adds	r7, #12
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd90      	pop	{r4, r7, pc}
	...

08014cc8 <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b084      	sub	sp, #16
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	60fb      	str	r3, [r7, #12]
	char tRxedChar;



	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8014cd4:	f7f5 fa2e 	bl	800a134 <Get_DebugHandle>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	2201      	movs	r2, #1
 8014cdc:	4911      	ldr	r1, [pc, #68]	; (8014d24 <terminalTaskHandler+0x5c>)
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7fd fc88 	bl	80125f4 <HAL_UART_Receive_IT>
	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 8014ce4:	4810      	ldr	r0, [pc, #64]	; (8014d28 <terminalTaskHandler+0x60>)
 8014ce6:	f7ff ffd9 	bl	8014c9c <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8014cea:	f7f5 fa41 	bl	800a170 <Get_TerminalQueueHandle>
 8014cee:	f107 030b 	add.w	r3, r7, #11
 8014cf2:	220a      	movs	r2, #10
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	f000 fe9d 	bl	8015a34 <xQueueReceive>
 8014cfa:	4603      	mov	r3, r0
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d00c      	beq.n	8014d1a <terminalTaskHandler+0x52>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 8014d00:	7afb      	ldrb	r3, [r7, #11]
 8014d02:	4618      	mov	r0, r3
 8014d04:	f000 f814 	bl	8014d30 <CommandLineBuildCommand>
 8014d08:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d004      	beq.n	8014d1a <terminalTaskHandler+0x52>
			{
				CommandLineProcessCommand(gCommandBuffer);
 8014d10:	4806      	ldr	r0, [pc, #24]	; (8014d2c <terminalTaskHandler+0x64>)
 8014d12:	f000 f855 	bl	8014dc0 <CommandLineProcessCommand>
				tCommandReady = 0;
 8014d16:	2300      	movs	r3, #0
 8014d18:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 8014d1a:	2001      	movs	r0, #1
 8014d1c:	f000 f93f 	bl	8014f9e <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8014d20:	e7e3      	b.n	8014cea <terminalTaskHandler+0x22>
 8014d22:	bf00      	nop
 8014d24:	200021fc 	.word	0x200021fc
 8014d28:	0801f8d8 	.word	0x0801f8d8
 8014d2c:	20002200 	.word	0x20002200

08014d30 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 8014d30:	b480      	push	{r7}
 8014d32:	b083      	sub	sp, #12
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	4603      	mov	r3, r0
 8014d38:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 8014d3a:	79fb      	ldrb	r3, [r7, #7]
 8014d3c:	2b0a      	cmp	r3, #10
 8014d3e:	d005      	beq.n	8014d4c <CommandLineBuildCommand+0x1c>
 8014d40:	79fb      	ldrb	r3, [r7, #7]
 8014d42:	2b20      	cmp	r3, #32
 8014d44:	d002      	beq.n	8014d4c <CommandLineBuildCommand+0x1c>
 8014d46:	79fb      	ldrb	r3, [r7, #7]
 8014d48:	2b09      	cmp	r3, #9
 8014d4a:	d101      	bne.n	8014d50 <CommandLineBuildCommand+0x20>
	{
		return false;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	e02d      	b.n	8014dac <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8014d50:	79fb      	ldrb	r3, [r7, #7]
 8014d52:	2b0d      	cmp	r3, #13
 8014d54:	d10a      	bne.n	8014d6c <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 8014d56:	4b18      	ldr	r3, [pc, #96]	; (8014db8 <CommandLineBuildCommand+0x88>)
 8014d58:	881b      	ldrh	r3, [r3, #0]
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	4b17      	ldr	r3, [pc, #92]	; (8014dbc <CommandLineBuildCommand+0x8c>)
 8014d5e:	2100      	movs	r1, #0
 8014d60:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 8014d62:	4b15      	ldr	r3, [pc, #84]	; (8014db8 <CommandLineBuildCommand+0x88>)
 8014d64:	2200      	movs	r2, #0
 8014d66:	801a      	strh	r2, [r3, #0]
		return true;
 8014d68:	2301      	movs	r3, #1
 8014d6a:	e01f      	b.n	8014dac <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8014d6c:	79fb      	ldrb	r3, [r7, #7]
 8014d6e:	2b60      	cmp	r3, #96	; 0x60
 8014d70:	d906      	bls.n	8014d80 <CommandLineBuildCommand+0x50>
 8014d72:	79fb      	ldrb	r3, [r7, #7]
 8014d74:	2b7a      	cmp	r3, #122	; 0x7a
 8014d76:	d803      	bhi.n	8014d80 <CommandLineBuildCommand+0x50>
 8014d78:	79fb      	ldrb	r3, [r7, #7]
 8014d7a:	3b20      	subs	r3, #32
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	e000      	b.n	8014d82 <CommandLineBuildCommand+0x52>
 8014d80:	79fb      	ldrb	r3, [r7, #7]
 8014d82:	4a0d      	ldr	r2, [pc, #52]	; (8014db8 <CommandLineBuildCommand+0x88>)
 8014d84:	8812      	ldrh	r2, [r2, #0]
 8014d86:	4611      	mov	r1, r2
 8014d88:	4a0c      	ldr	r2, [pc, #48]	; (8014dbc <CommandLineBuildCommand+0x8c>)
 8014d8a:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8014d8c:	4b0a      	ldr	r3, [pc, #40]	; (8014db8 <CommandLineBuildCommand+0x88>)
 8014d8e:	881b      	ldrh	r3, [r3, #0]
 8014d90:	3301      	adds	r3, #1
 8014d92:	b29a      	uxth	r2, r3
 8014d94:	4b08      	ldr	r3, [pc, #32]	; (8014db8 <CommandLineBuildCommand+0x88>)
 8014d96:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 8014d98:	4b07      	ldr	r3, [pc, #28]	; (8014db8 <CommandLineBuildCommand+0x88>)
 8014d9a:	881b      	ldrh	r3, [r3, #0]
 8014d9c:	2b77      	cmp	r3, #119	; 0x77
 8014d9e:	d904      	bls.n	8014daa <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 8014da0:	4b05      	ldr	r3, [pc, #20]	; (8014db8 <CommandLineBuildCommand+0x88>)
 8014da2:	2200      	movs	r2, #0
 8014da4:	801a      	strh	r2, [r3, #0]
		return true;
 8014da6:	2301      	movs	r3, #1
 8014da8:	e000      	b.n	8014dac <CommandLineBuildCommand+0x7c>
	}

	return false;
 8014daa:	2300      	movs	r3, #0

}
 8014dac:	4618      	mov	r0, r3
 8014dae:	370c      	adds	r7, #12
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bc80      	pop	{r7}
 8014db4:	4770      	bx	lr
 8014db6:	bf00      	nop
 8014db8:	200022e4 	.word	0x200022e4
 8014dbc:	20002200 	.word	0x20002200

08014dc0 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 8014dc0:	b590      	push	{r4, r7, lr}
 8014dc2:	b087      	sub	sp, #28
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 8014dc8:	2300      	movs	r3, #0
 8014dca:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 8014dcc:	491e      	ldr	r1, [pc, #120]	; (8014e48 <CommandLineProcessCommand+0x88>)
 8014dce:	2000      	movs	r0, #0
 8014dd0:	f003 fd7a 	bl	80188c8 <strtok>
 8014dd4:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	617b      	str	r3, [r7, #20]
 8014dda:	e020      	b.n	8014e1e <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 8014ddc:	4a1b      	ldr	r2, [pc, #108]	; (8014e4c <CommandLineProcessCommand+0x8c>)
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8014de4:	4a19      	ldr	r2, [pc, #100]	; (8014e4c <CommandLineProcessCommand+0x8c>)
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014dec:	4618      	mov	r0, r3
 8014dee:	f7f3 fc17 	bl	8008620 <strlen>
 8014df2:	4603      	mov	r3, r0
 8014df4:	461a      	mov	r2, r3
 8014df6:	6879      	ldr	r1, [r7, #4]
 8014df8:	4620      	mov	r0, r4
 8014dfa:	f003 fd53 	bl	80188a4 <strncmp>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d109      	bne.n	8014e18 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 8014e04:	2301      	movs	r3, #1
 8014e06:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 8014e08:	4a10      	ldr	r2, [pc, #64]	; (8014e4c <CommandLineProcessCommand+0x8c>)
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	00db      	lsls	r3, r3, #3
 8014e0e:	4413      	add	r3, r2
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	68f8      	ldr	r0, [r7, #12]
 8014e14:	4798      	blx	r3
			break;
 8014e16:	e008      	b.n	8014e2a <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	617b      	str	r3, [r7, #20]
 8014e1e:	4a0b      	ldr	r2, [pc, #44]	; (8014e4c <CommandLineProcessCommand+0x8c>)
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d1d8      	bne.n	8014ddc <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message. */
	if (CommandFound==false)
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d107      	bne.n	8014e40 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 8014e30:	4a07      	ldr	r2, [pc, #28]	; (8014e50 <CommandLineProcessCommand+0x90>)
 8014e32:	2164      	movs	r1, #100	; 0x64
 8014e34:	4807      	ldr	r0, [pc, #28]	; (8014e54 <CommandLineProcessCommand+0x94>)
 8014e36:	f003 fc13 	bl	8018660 <snprintf>
		serialPutStr(TerminalMsgBuffer);
 8014e3a:	4806      	ldr	r0, [pc, #24]	; (8014e54 <CommandLineProcessCommand+0x94>)
 8014e3c:	f7ff ff2e 	bl	8014c9c <serialPutStr>
	}
}
 8014e40:	bf00      	nop
 8014e42:	371c      	adds	r7, #28
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd90      	pop	{r4, r7, pc}
 8014e48:	0801f8f4 	.word	0x0801f8f4
 8014e4c:	0801fedc 	.word	0x0801fedc
 8014e50:	0801f8f8 	.word	0x0801f8f8
 8014e54:	2000227c 	.word	0x2000227c

08014e58 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b082      	sub	sp, #8
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	4a0c      	ldr	r2, [pc, #48]	; (8014e98 <HAL_UART_RxCpltCallback+0x40>)
 8014e66:	4293      	cmp	r3, r2
 8014e68:	d112      	bne.n	8014e90 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8014e6a:	f7f5 f963 	bl	800a134 <Get_DebugHandle>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	2201      	movs	r2, #1
 8014e72:	490a      	ldr	r1, [pc, #40]	; (8014e9c <HAL_UART_RxCpltCallback+0x44>)
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fd fbbd 	bl	80125f4 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 8014e7a:	4b08      	ldr	r3, [pc, #32]	; (8014e9c <HAL_UART_RxCpltCallback+0x44>)
 8014e7c:	781a      	ldrb	r2, [r3, #0]
 8014e7e:	4b08      	ldr	r3, [pc, #32]	; (8014ea0 <HAL_UART_RxCpltCallback+0x48>)
 8014e80:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 8014e82:	f7f5 f975 	bl	800a170 <Get_TerminalQueueHandle>
 8014e86:	2300      	movs	r3, #0
 8014e88:	4a06      	ldr	r2, [pc, #24]	; (8014ea4 <HAL_UART_RxCpltCallback+0x4c>)
 8014e8a:	4905      	ldr	r1, [pc, #20]	; (8014ea0 <HAL_UART_RxCpltCallback+0x48>)
 8014e8c:	f000 fcac 	bl	80157e8 <xQueueGenericSendFromISR>
	}
}
 8014e90:	bf00      	nop
 8014e92:	3708      	adds	r7, #8
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}
 8014e98:	40004400 	.word	0x40004400
 8014e9c:	200021fc 	.word	0x200021fc
 8014ea0:	200021f8 	.word	0x200021f8
 8014ea4:	200022e0 	.word	0x200022e0

08014ea8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014ea8:	b480      	push	{r7}
 8014eaa:	b085      	sub	sp, #20
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	4603      	mov	r3, r0
 8014eb0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014eba:	2b84      	cmp	r3, #132	; 0x84
 8014ebc:	d005      	beq.n	8014eca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014ebe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	3303      	adds	r3, #3
 8014ec8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014eca:	68fb      	ldr	r3, [r7, #12]
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3714      	adds	r7, #20
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bc80      	pop	{r7}
 8014ed4:	4770      	bx	lr

08014ed6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014ed6:	b480      	push	{r7}
 8014ed8:	b083      	sub	sp, #12
 8014eda:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014edc:	f3ef 8305 	mrs	r3, IPSR
 8014ee0:	607b      	str	r3, [r7, #4]
  return(result);
 8014ee2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	bf14      	ite	ne
 8014ee8:	2301      	movne	r3, #1
 8014eea:	2300      	moveq	r3, #0
 8014eec:	b2db      	uxtb	r3, r3
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	370c      	adds	r7, #12
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bc80      	pop	{r7}
 8014ef6:	4770      	bx	lr

08014ef8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014efc:	f001 fb9e 	bl	801663c <vTaskStartScheduler>
  
  return osOK;
 8014f00:	2300      	movs	r3, #0
}
 8014f02:	4618      	mov	r0, r3
 8014f04:	bd80      	pop	{r7, pc}

08014f06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f08:	b089      	sub	sp, #36	; 0x24
 8014f0a:	af04      	add	r7, sp, #16
 8014f0c:	6078      	str	r0, [r7, #4]
 8014f0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	695b      	ldr	r3, [r3, #20]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d020      	beq.n	8014f5a <osThreadCreate+0x54>
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	699b      	ldr	r3, [r3, #24]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d01c      	beq.n	8014f5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	685c      	ldr	r4, [r3, #4]
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	691e      	ldr	r6, [r3, #16]
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7ff ffb8 	bl	8014ea8 <makeFreeRtosPriority>
 8014f38:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	695b      	ldr	r3, [r3, #20]
 8014f3e:	687a      	ldr	r2, [r7, #4]
 8014f40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f42:	9202      	str	r2, [sp, #8]
 8014f44:	9301      	str	r3, [sp, #4]
 8014f46:	9100      	str	r1, [sp, #0]
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	4632      	mov	r2, r6
 8014f4c:	4629      	mov	r1, r5
 8014f4e:	4620      	mov	r0, r4
 8014f50:	f001 f960 	bl	8016214 <xTaskCreateStatic>
 8014f54:	4603      	mov	r3, r0
 8014f56:	60fb      	str	r3, [r7, #12]
 8014f58:	e01c      	b.n	8014f94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	685c      	ldr	r4, [r3, #4]
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f66:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7ff ff9a 	bl	8014ea8 <makeFreeRtosPriority>
 8014f74:	4602      	mov	r2, r0
 8014f76:	f107 030c 	add.w	r3, r7, #12
 8014f7a:	9301      	str	r3, [sp, #4]
 8014f7c:	9200      	str	r2, [sp, #0]
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	4632      	mov	r2, r6
 8014f82:	4629      	mov	r1, r5
 8014f84:	4620      	mov	r0, r4
 8014f86:	f001 f9a4 	bl	80162d2 <xTaskCreate>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d001      	beq.n	8014f94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014f90:	2300      	movs	r3, #0
 8014f92:	e000      	b.n	8014f96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014f94:	68fb      	ldr	r3, [r7, #12]
}
 8014f96:	4618      	mov	r0, r3
 8014f98:	3714      	adds	r7, #20
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f9e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014f9e:	b580      	push	{r7, lr}
 8014fa0:	b084      	sub	sp, #16
 8014fa2:	af00      	add	r7, sp, #0
 8014fa4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d001      	beq.n	8014fb4 <osDelay+0x16>
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	e000      	b.n	8014fb6 <osDelay+0x18>
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f001 fb0c 	bl	80165d4 <vTaskDelay>
  
  return osOK;
 8014fbc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3710      	adds	r7, #16
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}

08014fc6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8014fc6:	b580      	push	{r7, lr}
 8014fc8:	b082      	sub	sp, #8
 8014fca:	af00      	add	r7, sp, #0
 8014fcc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	685b      	ldr	r3, [r3, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d007      	beq.n	8014fe6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	4619      	mov	r1, r3
 8014fdc:	2001      	movs	r0, #1
 8014fde:	f000 faea 	bl	80155b6 <xQueueCreateMutexStatic>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	e003      	b.n	8014fee <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8014fe6:	2001      	movs	r0, #1
 8014fe8:	f000 facd 	bl	8015586 <xQueueCreateMutex>
 8014fec:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3708      	adds	r7, #8
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
	...

08014ff8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8015002:	2300      	movs	r3, #0
 8015004:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d101      	bne.n	8015010 <osMutexWait+0x18>
    return osErrorParameter;
 801500c:	2380      	movs	r3, #128	; 0x80
 801500e:	e03a      	b.n	8015086 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8015010:	2300      	movs	r3, #0
 8015012:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801501a:	d103      	bne.n	8015024 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 801501c:	f04f 33ff 	mov.w	r3, #4294967295
 8015020:	60fb      	str	r3, [r7, #12]
 8015022:	e009      	b.n	8015038 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d006      	beq.n	8015038 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801502a:	683b      	ldr	r3, [r7, #0]
 801502c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d101      	bne.n	8015038 <osMutexWait+0x40>
      ticks = 1;
 8015034:	2301      	movs	r3, #1
 8015036:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8015038:	f7ff ff4d 	bl	8014ed6 <inHandlerMode>
 801503c:	4603      	mov	r3, r0
 801503e:	2b00      	cmp	r3, #0
 8015040:	d017      	beq.n	8015072 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8015042:	f107 0308 	add.w	r3, r7, #8
 8015046:	461a      	mov	r2, r3
 8015048:	2100      	movs	r1, #0
 801504a:	6878      	ldr	r0, [r7, #4]
 801504c:	f000 fede 	bl	8015e0c <xQueueReceiveFromISR>
 8015050:	4603      	mov	r3, r0
 8015052:	2b01      	cmp	r3, #1
 8015054:	d001      	beq.n	801505a <osMutexWait+0x62>
      return osErrorOS;
 8015056:	23ff      	movs	r3, #255	; 0xff
 8015058:	e015      	b.n	8015086 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d011      	beq.n	8015084 <osMutexWait+0x8c>
 8015060:	4b0b      	ldr	r3, [pc, #44]	; (8015090 <osMutexWait+0x98>)
 8015062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015066:	601a      	str	r2, [r3, #0]
 8015068:	f3bf 8f4f 	dsb	sy
 801506c:	f3bf 8f6f 	isb	sy
 8015070:	e008      	b.n	8015084 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8015072:	68f9      	ldr	r1, [r7, #12]
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f000 fdbd 	bl	8015bf4 <xQueueSemaphoreTake>
 801507a:	4603      	mov	r3, r0
 801507c:	2b01      	cmp	r3, #1
 801507e:	d001      	beq.n	8015084 <osMutexWait+0x8c>
    return osErrorOS;
 8015080:	23ff      	movs	r3, #255	; 0xff
 8015082:	e000      	b.n	8015086 <osMutexWait+0x8e>
  }
  
  return osOK;
 8015084:	2300      	movs	r3, #0
}
 8015086:	4618      	mov	r0, r3
 8015088:	3710      	adds	r7, #16
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}
 801508e:	bf00      	nop
 8015090:	e000ed04 	.word	0xe000ed04

08015094 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801509c:	2300      	movs	r3, #0
 801509e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80150a0:	2300      	movs	r3, #0
 80150a2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80150a4:	f7ff ff17 	bl	8014ed6 <inHandlerMode>
 80150a8:	4603      	mov	r3, r0
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d016      	beq.n	80150dc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80150ae:	f107 0308 	add.w	r3, r7, #8
 80150b2:	4619      	mov	r1, r3
 80150b4:	6878      	ldr	r0, [r7, #4]
 80150b6:	f000 fc2f 	bl	8015918 <xQueueGiveFromISR>
 80150ba:	4603      	mov	r3, r0
 80150bc:	2b01      	cmp	r3, #1
 80150be:	d001      	beq.n	80150c4 <osMutexRelease+0x30>
      return osErrorOS;
 80150c0:	23ff      	movs	r3, #255	; 0xff
 80150c2:	e017      	b.n	80150f4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80150c4:	68bb      	ldr	r3, [r7, #8]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d013      	beq.n	80150f2 <osMutexRelease+0x5e>
 80150ca:	4b0c      	ldr	r3, [pc, #48]	; (80150fc <osMutexRelease+0x68>)
 80150cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150d0:	601a      	str	r2, [r3, #0]
 80150d2:	f3bf 8f4f 	dsb	sy
 80150d6:	f3bf 8f6f 	isb	sy
 80150da:	e00a      	b.n	80150f2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80150dc:	2300      	movs	r3, #0
 80150de:	2200      	movs	r2, #0
 80150e0:	2100      	movs	r1, #0
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f000 fa82 	bl	80155ec <xQueueGenericSend>
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b01      	cmp	r3, #1
 80150ec:	d001      	beq.n	80150f2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80150ee:	23ff      	movs	r3, #255	; 0xff
 80150f0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80150f2:	68fb      	ldr	r3, [r7, #12]
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	3710      	adds	r7, #16
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}
 80150fc:	e000ed04 	.word	0xe000ed04

08015100 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8015100:	b590      	push	{r4, r7, lr}
 8015102:	b085      	sub	sp, #20
 8015104:	af02      	add	r7, sp, #8
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	689b      	ldr	r3, [r3, #8]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d011      	beq.n	8015136 <osMessageCreate+0x36>
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	68db      	ldr	r3, [r3, #12]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d00d      	beq.n	8015136 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	6818      	ldr	r0, [r3, #0]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	6859      	ldr	r1, [r3, #4]
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	689a      	ldr	r2, [r3, #8]
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	68db      	ldr	r3, [r3, #12]
 801512a:	2400      	movs	r4, #0
 801512c:	9400      	str	r4, [sp, #0]
 801512e:	f000 f939 	bl	80153a4 <xQueueGenericCreateStatic>
 8015132:	4603      	mov	r3, r0
 8015134:	e008      	b.n	8015148 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6818      	ldr	r0, [r3, #0]
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	2200      	movs	r2, #0
 8015140:	4619      	mov	r1, r3
 8015142:	f000 f9a7 	bl	8015494 <xQueueGenericCreate>
 8015146:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8015148:	4618      	mov	r0, r3
 801514a:	370c      	adds	r7, #12
 801514c:	46bd      	mov	sp, r7
 801514e:	bd90      	pop	{r4, r7, pc}

08015150 <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 8015154:	f001 fae2 	bl	801671c <vTaskSuspendAll>
  
  return osOK;
 8015158:	2300      	movs	r3, #0
}
 801515a:	4618      	mov	r0, r3
 801515c:	bd80      	pop	{r7, pc}

0801515e <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 801515e:	b580      	push	{r7, lr}
 8015160:	af00      	add	r7, sp, #0
  if (xTaskResumeAll() == pdTRUE)
 8015162:	f001 fae9 	bl	8016738 <xTaskResumeAll>
 8015166:	4603      	mov	r3, r0
 8015168:	2b01      	cmp	r3, #1
 801516a:	d101      	bne.n	8015170 <osThreadResumeAll+0x12>
    return osOK;
 801516c:	2300      	movs	r3, #0
 801516e:	e000      	b.n	8015172 <osThreadResumeAll+0x14>
  else
    return osErrorOS;
 8015170:	23ff      	movs	r3, #255	; 0xff
  
}
 8015172:	4618      	mov	r0, r3
 8015174:	bd80      	pop	{r7, pc}

08015176 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015176:	b480      	push	{r7}
 8015178:	b083      	sub	sp, #12
 801517a:	af00      	add	r7, sp, #0
 801517c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f103 0208 	add.w	r2, r3, #8
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f04f 32ff 	mov.w	r2, #4294967295
 801518e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f103 0208 	add.w	r2, r3, #8
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	f103 0208 	add.w	r2, r3, #8
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2200      	movs	r2, #0
 80151a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80151aa:	bf00      	nop
 80151ac:	370c      	adds	r7, #12
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bc80      	pop	{r7}
 80151b2:	4770      	bx	lr

080151b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80151b4:	b480      	push	{r7}
 80151b6:	b083      	sub	sp, #12
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2200      	movs	r2, #0
 80151c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80151c2:	bf00      	nop
 80151c4:	370c      	adds	r7, #12
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bc80      	pop	{r7}
 80151ca:	4770      	bx	lr

080151cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80151cc:	b480      	push	{r7}
 80151ce:	b085      	sub	sp, #20
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
 80151d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	68fa      	ldr	r2, [r7, #12]
 80151e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	689a      	ldr	r2, [r3, #8]
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	689b      	ldr	r3, [r3, #8]
 80151ee:	683a      	ldr	r2, [r7, #0]
 80151f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	683a      	ldr	r2, [r7, #0]
 80151f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	687a      	ldr	r2, [r7, #4]
 80151fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	1c5a      	adds	r2, r3, #1
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	601a      	str	r2, [r3, #0]
}
 8015208:	bf00      	nop
 801520a:	3714      	adds	r7, #20
 801520c:	46bd      	mov	sp, r7
 801520e:	bc80      	pop	{r7}
 8015210:	4770      	bx	lr

08015212 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015212:	b480      	push	{r7}
 8015214:	b085      	sub	sp, #20
 8015216:	af00      	add	r7, sp, #0
 8015218:	6078      	str	r0, [r7, #4]
 801521a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015228:	d103      	bne.n	8015232 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	691b      	ldr	r3, [r3, #16]
 801522e:	60fb      	str	r3, [r7, #12]
 8015230:	e00c      	b.n	801524c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	3308      	adds	r3, #8
 8015236:	60fb      	str	r3, [r7, #12]
 8015238:	e002      	b.n	8015240 <vListInsert+0x2e>
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	685b      	ldr	r3, [r3, #4]
 801523e:	60fb      	str	r3, [r7, #12]
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	685b      	ldr	r3, [r3, #4]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	68ba      	ldr	r2, [r7, #8]
 8015248:	429a      	cmp	r2, r3
 801524a:	d2f6      	bcs.n	801523a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	685a      	ldr	r2, [r3, #4]
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	683a      	ldr	r2, [r7, #0]
 801525a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	68fa      	ldr	r2, [r7, #12]
 8015260:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	683a      	ldr	r2, [r7, #0]
 8015266:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	687a      	ldr	r2, [r7, #4]
 801526c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	1c5a      	adds	r2, r3, #1
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	601a      	str	r2, [r3, #0]
}
 8015278:	bf00      	nop
 801527a:	3714      	adds	r7, #20
 801527c:	46bd      	mov	sp, r7
 801527e:	bc80      	pop	{r7}
 8015280:	4770      	bx	lr

08015282 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015282:	b480      	push	{r7}
 8015284:	b085      	sub	sp, #20
 8015286:	af00      	add	r7, sp, #0
 8015288:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	691b      	ldr	r3, [r3, #16]
 801528e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	685b      	ldr	r3, [r3, #4]
 8015294:	687a      	ldr	r2, [r7, #4]
 8015296:	6892      	ldr	r2, [r2, #8]
 8015298:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	689b      	ldr	r3, [r3, #8]
 801529e:	687a      	ldr	r2, [r7, #4]
 80152a0:	6852      	ldr	r2, [r2, #4]
 80152a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	d103      	bne.n	80152b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	689a      	ldr	r2, [r3, #8]
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2200      	movs	r2, #0
 80152ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	1e5a      	subs	r2, r3, #1
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	681b      	ldr	r3, [r3, #0]
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3714      	adds	r7, #20
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bc80      	pop	{r7}
 80152d2:	4770      	bx	lr

080152d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b084      	sub	sp, #16
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d10a      	bne.n	80152fe <xQueueGenericReset+0x2a>
	__asm volatile
 80152e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ec:	f383 8811 	msr	BASEPRI, r3
 80152f0:	f3bf 8f6f 	isb	sy
 80152f4:	f3bf 8f4f 	dsb	sy
 80152f8:	60bb      	str	r3, [r7, #8]
}
 80152fa:	bf00      	nop
 80152fc:	e7fe      	b.n	80152fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80152fe:	f002 fc6d 	bl	8017bdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	681a      	ldr	r2, [r3, #0]
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801530a:	68f9      	ldr	r1, [r7, #12]
 801530c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801530e:	fb01 f303 	mul.w	r3, r1, r3
 8015312:	441a      	add	r2, r3
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2200      	movs	r2, #0
 801531c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	681a      	ldr	r2, [r3, #0]
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	681a      	ldr	r2, [r3, #0]
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801532e:	3b01      	subs	r3, #1
 8015330:	68f9      	ldr	r1, [r7, #12]
 8015332:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015334:	fb01 f303 	mul.w	r3, r1, r3
 8015338:	441a      	add	r2, r3
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	22ff      	movs	r2, #255	; 0xff
 8015342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	22ff      	movs	r2, #255	; 0xff
 801534a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d114      	bne.n	801537e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	691b      	ldr	r3, [r3, #16]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d01a      	beq.n	8015392 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	3310      	adds	r3, #16
 8015360:	4618      	mov	r0, r3
 8015362:	f001 fc23 	bl	8016bac <xTaskRemoveFromEventList>
 8015366:	4603      	mov	r3, r0
 8015368:	2b00      	cmp	r3, #0
 801536a:	d012      	beq.n	8015392 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801536c:	4b0c      	ldr	r3, [pc, #48]	; (80153a0 <xQueueGenericReset+0xcc>)
 801536e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015372:	601a      	str	r2, [r3, #0]
 8015374:	f3bf 8f4f 	dsb	sy
 8015378:	f3bf 8f6f 	isb	sy
 801537c:	e009      	b.n	8015392 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	3310      	adds	r3, #16
 8015382:	4618      	mov	r0, r3
 8015384:	f7ff fef7 	bl	8015176 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	3324      	adds	r3, #36	; 0x24
 801538c:	4618      	mov	r0, r3
 801538e:	f7ff fef2 	bl	8015176 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015392:	f002 fc53 	bl	8017c3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015396:	2301      	movs	r3, #1
}
 8015398:	4618      	mov	r0, r3
 801539a:	3710      	adds	r7, #16
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}
 80153a0:	e000ed04 	.word	0xe000ed04

080153a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b08e      	sub	sp, #56	; 0x38
 80153a8:	af02      	add	r7, sp, #8
 80153aa:	60f8      	str	r0, [r7, #12]
 80153ac:	60b9      	str	r1, [r7, #8]
 80153ae:	607a      	str	r2, [r7, #4]
 80153b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d10a      	bne.n	80153ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80153b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153bc:	f383 8811 	msr	BASEPRI, r3
 80153c0:	f3bf 8f6f 	isb	sy
 80153c4:	f3bf 8f4f 	dsb	sy
 80153c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80153ca:	bf00      	nop
 80153cc:	e7fe      	b.n	80153cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d10a      	bne.n	80153ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80153d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d8:	f383 8811 	msr	BASEPRI, r3
 80153dc:	f3bf 8f6f 	isb	sy
 80153e0:	f3bf 8f4f 	dsb	sy
 80153e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80153e6:	bf00      	nop
 80153e8:	e7fe      	b.n	80153e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d002      	beq.n	80153f6 <xQueueGenericCreateStatic+0x52>
 80153f0:	68bb      	ldr	r3, [r7, #8]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d001      	beq.n	80153fa <xQueueGenericCreateStatic+0x56>
 80153f6:	2301      	movs	r3, #1
 80153f8:	e000      	b.n	80153fc <xQueueGenericCreateStatic+0x58>
 80153fa:	2300      	movs	r3, #0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d10a      	bne.n	8015416 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015404:	f383 8811 	msr	BASEPRI, r3
 8015408:	f3bf 8f6f 	isb	sy
 801540c:	f3bf 8f4f 	dsb	sy
 8015410:	623b      	str	r3, [r7, #32]
}
 8015412:	bf00      	nop
 8015414:	e7fe      	b.n	8015414 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d102      	bne.n	8015422 <xQueueGenericCreateStatic+0x7e>
 801541c:	68bb      	ldr	r3, [r7, #8]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d101      	bne.n	8015426 <xQueueGenericCreateStatic+0x82>
 8015422:	2301      	movs	r3, #1
 8015424:	e000      	b.n	8015428 <xQueueGenericCreateStatic+0x84>
 8015426:	2300      	movs	r3, #0
 8015428:	2b00      	cmp	r3, #0
 801542a:	d10a      	bne.n	8015442 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015430:	f383 8811 	msr	BASEPRI, r3
 8015434:	f3bf 8f6f 	isb	sy
 8015438:	f3bf 8f4f 	dsb	sy
 801543c:	61fb      	str	r3, [r7, #28]
}
 801543e:	bf00      	nop
 8015440:	e7fe      	b.n	8015440 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015442:	2348      	movs	r3, #72	; 0x48
 8015444:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015446:	697b      	ldr	r3, [r7, #20]
 8015448:	2b48      	cmp	r3, #72	; 0x48
 801544a:	d00a      	beq.n	8015462 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015450:	f383 8811 	msr	BASEPRI, r3
 8015454:	f3bf 8f6f 	isb	sy
 8015458:	f3bf 8f4f 	dsb	sy
 801545c:	61bb      	str	r3, [r7, #24]
}
 801545e:	bf00      	nop
 8015460:	e7fe      	b.n	8015460 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015462:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801546a:	2b00      	cmp	r3, #0
 801546c:	d00d      	beq.n	801548a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015470:	2201      	movs	r2, #1
 8015472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015476:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801547c:	9300      	str	r3, [sp, #0]
 801547e:	4613      	mov	r3, r2
 8015480:	687a      	ldr	r2, [r7, #4]
 8015482:	68b9      	ldr	r1, [r7, #8]
 8015484:	68f8      	ldr	r0, [r7, #12]
 8015486:	f000 f845 	bl	8015514 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801548c:	4618      	mov	r0, r3
 801548e:	3730      	adds	r7, #48	; 0x30
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015494:	b580      	push	{r7, lr}
 8015496:	b08a      	sub	sp, #40	; 0x28
 8015498:	af02      	add	r7, sp, #8
 801549a:	60f8      	str	r0, [r7, #12]
 801549c:	60b9      	str	r1, [r7, #8]
 801549e:	4613      	mov	r3, r2
 80154a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d10a      	bne.n	80154be <xQueueGenericCreate+0x2a>
	__asm volatile
 80154a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154ac:	f383 8811 	msr	BASEPRI, r3
 80154b0:	f3bf 8f6f 	isb	sy
 80154b4:	f3bf 8f4f 	dsb	sy
 80154b8:	613b      	str	r3, [r7, #16]
}
 80154ba:	bf00      	nop
 80154bc:	e7fe      	b.n	80154bc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d102      	bne.n	80154ca <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80154c4:	2300      	movs	r3, #0
 80154c6:	61fb      	str	r3, [r7, #28]
 80154c8:	e004      	b.n	80154d4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	68ba      	ldr	r2, [r7, #8]
 80154ce:	fb02 f303 	mul.w	r3, r2, r3
 80154d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80154d4:	69fb      	ldr	r3, [r7, #28]
 80154d6:	3348      	adds	r3, #72	; 0x48
 80154d8:	4618      	mov	r0, r3
 80154da:	f002 fc7f 	bl	8017ddc <pvPortMalloc>
 80154de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80154e0:	69bb      	ldr	r3, [r7, #24]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d011      	beq.n	801550a <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80154e6:	69bb      	ldr	r3, [r7, #24]
 80154e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80154ea:	697b      	ldr	r3, [r7, #20]
 80154ec:	3348      	adds	r3, #72	; 0x48
 80154ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80154f0:	69bb      	ldr	r3, [r7, #24]
 80154f2:	2200      	movs	r2, #0
 80154f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80154f8:	79fa      	ldrb	r2, [r7, #7]
 80154fa:	69bb      	ldr	r3, [r7, #24]
 80154fc:	9300      	str	r3, [sp, #0]
 80154fe:	4613      	mov	r3, r2
 8015500:	697a      	ldr	r2, [r7, #20]
 8015502:	68b9      	ldr	r1, [r7, #8]
 8015504:	68f8      	ldr	r0, [r7, #12]
 8015506:	f000 f805 	bl	8015514 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801550a:	69bb      	ldr	r3, [r7, #24]
	}
 801550c:	4618      	mov	r0, r3
 801550e:	3720      	adds	r7, #32
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}

08015514 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b084      	sub	sp, #16
 8015518:	af00      	add	r7, sp, #0
 801551a:	60f8      	str	r0, [r7, #12]
 801551c:	60b9      	str	r1, [r7, #8]
 801551e:	607a      	str	r2, [r7, #4]
 8015520:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015522:	68bb      	ldr	r3, [r7, #8]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d103      	bne.n	8015530 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015528:	69bb      	ldr	r3, [r7, #24]
 801552a:	69ba      	ldr	r2, [r7, #24]
 801552c:	601a      	str	r2, [r3, #0]
 801552e:	e002      	b.n	8015536 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	687a      	ldr	r2, [r7, #4]
 8015534:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015536:	69bb      	ldr	r3, [r7, #24]
 8015538:	68fa      	ldr	r2, [r7, #12]
 801553a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801553c:	69bb      	ldr	r3, [r7, #24]
 801553e:	68ba      	ldr	r2, [r7, #8]
 8015540:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015542:	2101      	movs	r1, #1
 8015544:	69b8      	ldr	r0, [r7, #24]
 8015546:	f7ff fec5 	bl	80152d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801554a:	bf00      	nop
 801554c:	3710      	adds	r7, #16
 801554e:	46bd      	mov	sp, r7
 8015550:	bd80      	pop	{r7, pc}

08015552 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015552:	b580      	push	{r7, lr}
 8015554:	b082      	sub	sp, #8
 8015556:	af00      	add	r7, sp, #0
 8015558:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d00e      	beq.n	801557e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	2200      	movs	r2, #0
 8015564:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2200      	movs	r2, #0
 801556a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2200      	movs	r2, #0
 8015570:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015572:	2300      	movs	r3, #0
 8015574:	2200      	movs	r2, #0
 8015576:	2100      	movs	r1, #0
 8015578:	6878      	ldr	r0, [r7, #4]
 801557a:	f000 f837 	bl	80155ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801557e:	bf00      	nop
 8015580:	3708      	adds	r7, #8
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}

08015586 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015586:	b580      	push	{r7, lr}
 8015588:	b086      	sub	sp, #24
 801558a:	af00      	add	r7, sp, #0
 801558c:	4603      	mov	r3, r0
 801558e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015590:	2301      	movs	r3, #1
 8015592:	617b      	str	r3, [r7, #20]
 8015594:	2300      	movs	r3, #0
 8015596:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015598:	79fb      	ldrb	r3, [r7, #7]
 801559a:	461a      	mov	r2, r3
 801559c:	6939      	ldr	r1, [r7, #16]
 801559e:	6978      	ldr	r0, [r7, #20]
 80155a0:	f7ff ff78 	bl	8015494 <xQueueGenericCreate>
 80155a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80155a6:	68f8      	ldr	r0, [r7, #12]
 80155a8:	f7ff ffd3 	bl	8015552 <prvInitialiseMutex>

		return xNewQueue;
 80155ac:	68fb      	ldr	r3, [r7, #12]
	}
 80155ae:	4618      	mov	r0, r3
 80155b0:	3718      	adds	r7, #24
 80155b2:	46bd      	mov	sp, r7
 80155b4:	bd80      	pop	{r7, pc}

080155b6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80155b6:	b580      	push	{r7, lr}
 80155b8:	b088      	sub	sp, #32
 80155ba:	af02      	add	r7, sp, #8
 80155bc:	4603      	mov	r3, r0
 80155be:	6039      	str	r1, [r7, #0]
 80155c0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80155c2:	2301      	movs	r3, #1
 80155c4:	617b      	str	r3, [r7, #20]
 80155c6:	2300      	movs	r3, #0
 80155c8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80155ca:	79fb      	ldrb	r3, [r7, #7]
 80155cc:	9300      	str	r3, [sp, #0]
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	2200      	movs	r2, #0
 80155d2:	6939      	ldr	r1, [r7, #16]
 80155d4:	6978      	ldr	r0, [r7, #20]
 80155d6:	f7ff fee5 	bl	80153a4 <xQueueGenericCreateStatic>
 80155da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	f7ff ffb8 	bl	8015552 <prvInitialiseMutex>

		return xNewQueue;
 80155e2:	68fb      	ldr	r3, [r7, #12]
	}
 80155e4:	4618      	mov	r0, r3
 80155e6:	3718      	adds	r7, #24
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}

080155ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b08e      	sub	sp, #56	; 0x38
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	60f8      	str	r0, [r7, #12]
 80155f4:	60b9      	str	r1, [r7, #8]
 80155f6:	607a      	str	r2, [r7, #4]
 80155f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80155fa:	2300      	movs	r3, #0
 80155fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015604:	2b00      	cmp	r3, #0
 8015606:	d10a      	bne.n	801561e <xQueueGenericSend+0x32>
	__asm volatile
 8015608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801560c:	f383 8811 	msr	BASEPRI, r3
 8015610:	f3bf 8f6f 	isb	sy
 8015614:	f3bf 8f4f 	dsb	sy
 8015618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801561a:	bf00      	nop
 801561c:	e7fe      	b.n	801561c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801561e:	68bb      	ldr	r3, [r7, #8]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d103      	bne.n	801562c <xQueueGenericSend+0x40>
 8015624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015628:	2b00      	cmp	r3, #0
 801562a:	d101      	bne.n	8015630 <xQueueGenericSend+0x44>
 801562c:	2301      	movs	r3, #1
 801562e:	e000      	b.n	8015632 <xQueueGenericSend+0x46>
 8015630:	2300      	movs	r3, #0
 8015632:	2b00      	cmp	r3, #0
 8015634:	d10a      	bne.n	801564c <xQueueGenericSend+0x60>
	__asm volatile
 8015636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801563a:	f383 8811 	msr	BASEPRI, r3
 801563e:	f3bf 8f6f 	isb	sy
 8015642:	f3bf 8f4f 	dsb	sy
 8015646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015648:	bf00      	nop
 801564a:	e7fe      	b.n	801564a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801564c:	683b      	ldr	r3, [r7, #0]
 801564e:	2b02      	cmp	r3, #2
 8015650:	d103      	bne.n	801565a <xQueueGenericSend+0x6e>
 8015652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015656:	2b01      	cmp	r3, #1
 8015658:	d101      	bne.n	801565e <xQueueGenericSend+0x72>
 801565a:	2301      	movs	r3, #1
 801565c:	e000      	b.n	8015660 <xQueueGenericSend+0x74>
 801565e:	2300      	movs	r3, #0
 8015660:	2b00      	cmp	r3, #0
 8015662:	d10a      	bne.n	801567a <xQueueGenericSend+0x8e>
	__asm volatile
 8015664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015668:	f383 8811 	msr	BASEPRI, r3
 801566c:	f3bf 8f6f 	isb	sy
 8015670:	f3bf 8f4f 	dsb	sy
 8015674:	623b      	str	r3, [r7, #32]
}
 8015676:	bf00      	nop
 8015678:	e7fe      	b.n	8015678 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801567a:	f001 fc59 	bl	8016f30 <xTaskGetSchedulerState>
 801567e:	4603      	mov	r3, r0
 8015680:	2b00      	cmp	r3, #0
 8015682:	d102      	bne.n	801568a <xQueueGenericSend+0x9e>
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d101      	bne.n	801568e <xQueueGenericSend+0xa2>
 801568a:	2301      	movs	r3, #1
 801568c:	e000      	b.n	8015690 <xQueueGenericSend+0xa4>
 801568e:	2300      	movs	r3, #0
 8015690:	2b00      	cmp	r3, #0
 8015692:	d10a      	bne.n	80156aa <xQueueGenericSend+0xbe>
	__asm volatile
 8015694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015698:	f383 8811 	msr	BASEPRI, r3
 801569c:	f3bf 8f6f 	isb	sy
 80156a0:	f3bf 8f4f 	dsb	sy
 80156a4:	61fb      	str	r3, [r7, #28]
}
 80156a6:	bf00      	nop
 80156a8:	e7fe      	b.n	80156a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80156aa:	f002 fa97 	bl	8017bdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80156ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80156b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d302      	bcc.n	80156c0 <xQueueGenericSend+0xd4>
 80156ba:	683b      	ldr	r3, [r7, #0]
 80156bc:	2b02      	cmp	r3, #2
 80156be:	d129      	bne.n	8015714 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80156c0:	683a      	ldr	r2, [r7, #0]
 80156c2:	68b9      	ldr	r1, [r7, #8]
 80156c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156c6:	f000 fc38 	bl	8015f3a <prvCopyDataToQueue>
 80156ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80156cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d010      	beq.n	80156f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80156d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156d6:	3324      	adds	r3, #36	; 0x24
 80156d8:	4618      	mov	r0, r3
 80156da:	f001 fa67 	bl	8016bac <xTaskRemoveFromEventList>
 80156de:	4603      	mov	r3, r0
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d013      	beq.n	801570c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80156e4:	4b3f      	ldr	r3, [pc, #252]	; (80157e4 <xQueueGenericSend+0x1f8>)
 80156e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156ea:	601a      	str	r2, [r3, #0]
 80156ec:	f3bf 8f4f 	dsb	sy
 80156f0:	f3bf 8f6f 	isb	sy
 80156f4:	e00a      	b.n	801570c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80156f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d007      	beq.n	801570c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80156fc:	4b39      	ldr	r3, [pc, #228]	; (80157e4 <xQueueGenericSend+0x1f8>)
 80156fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015702:	601a      	str	r2, [r3, #0]
 8015704:	f3bf 8f4f 	dsb	sy
 8015708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801570c:	f002 fa96 	bl	8017c3c <vPortExitCritical>
				return pdPASS;
 8015710:	2301      	movs	r3, #1
 8015712:	e063      	b.n	80157dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d103      	bne.n	8015722 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801571a:	f002 fa8f 	bl	8017c3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801571e:	2300      	movs	r3, #0
 8015720:	e05c      	b.n	80157dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015724:	2b00      	cmp	r3, #0
 8015726:	d106      	bne.n	8015736 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015728:	f107 0314 	add.w	r3, r7, #20
 801572c:	4618      	mov	r0, r3
 801572e:	f001 fa9f 	bl	8016c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015732:	2301      	movs	r3, #1
 8015734:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015736:	f002 fa81 	bl	8017c3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801573a:	f000 ffef 	bl	801671c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801573e:	f002 fa4d 	bl	8017bdc <vPortEnterCritical>
 8015742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015748:	b25b      	sxtb	r3, r3
 801574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801574e:	d103      	bne.n	8015758 <xQueueGenericSend+0x16c>
 8015750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015752:	2200      	movs	r2, #0
 8015754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801575e:	b25b      	sxtb	r3, r3
 8015760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015764:	d103      	bne.n	801576e <xQueueGenericSend+0x182>
 8015766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015768:	2200      	movs	r2, #0
 801576a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801576e:	f002 fa65 	bl	8017c3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015772:	1d3a      	adds	r2, r7, #4
 8015774:	f107 0314 	add.w	r3, r7, #20
 8015778:	4611      	mov	r1, r2
 801577a:	4618      	mov	r0, r3
 801577c:	f001 fa8e 	bl	8016c9c <xTaskCheckForTimeOut>
 8015780:	4603      	mov	r3, r0
 8015782:	2b00      	cmp	r3, #0
 8015784:	d124      	bne.n	80157d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015788:	f000 fccf 	bl	801612a <prvIsQueueFull>
 801578c:	4603      	mov	r3, r0
 801578e:	2b00      	cmp	r3, #0
 8015790:	d018      	beq.n	80157c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015794:	3310      	adds	r3, #16
 8015796:	687a      	ldr	r2, [r7, #4]
 8015798:	4611      	mov	r1, r2
 801579a:	4618      	mov	r0, r3
 801579c:	f001 f9b6 	bl	8016b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80157a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157a2:	f000 fc5a 	bl	801605a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80157a6:	f000 ffc7 	bl	8016738 <xTaskResumeAll>
 80157aa:	4603      	mov	r3, r0
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f47f af7c 	bne.w	80156aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80157b2:	4b0c      	ldr	r3, [pc, #48]	; (80157e4 <xQueueGenericSend+0x1f8>)
 80157b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157b8:	601a      	str	r2, [r3, #0]
 80157ba:	f3bf 8f4f 	dsb	sy
 80157be:	f3bf 8f6f 	isb	sy
 80157c2:	e772      	b.n	80156aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80157c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157c6:	f000 fc48 	bl	801605a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80157ca:	f000 ffb5 	bl	8016738 <xTaskResumeAll>
 80157ce:	e76c      	b.n	80156aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80157d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157d2:	f000 fc42 	bl	801605a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80157d6:	f000 ffaf 	bl	8016738 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80157da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3738      	adds	r7, #56	; 0x38
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}
 80157e4:	e000ed04 	.word	0xe000ed04

080157e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b08e      	sub	sp, #56	; 0x38
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	607a      	str	r2, [r7, #4]
 80157f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80157fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d10a      	bne.n	8015816 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015804:	f383 8811 	msr	BASEPRI, r3
 8015808:	f3bf 8f6f 	isb	sy
 801580c:	f3bf 8f4f 	dsb	sy
 8015810:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015812:	bf00      	nop
 8015814:	e7fe      	b.n	8015814 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d103      	bne.n	8015824 <xQueueGenericSendFromISR+0x3c>
 801581c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015820:	2b00      	cmp	r3, #0
 8015822:	d101      	bne.n	8015828 <xQueueGenericSendFromISR+0x40>
 8015824:	2301      	movs	r3, #1
 8015826:	e000      	b.n	801582a <xQueueGenericSendFromISR+0x42>
 8015828:	2300      	movs	r3, #0
 801582a:	2b00      	cmp	r3, #0
 801582c:	d10a      	bne.n	8015844 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015832:	f383 8811 	msr	BASEPRI, r3
 8015836:	f3bf 8f6f 	isb	sy
 801583a:	f3bf 8f4f 	dsb	sy
 801583e:	623b      	str	r3, [r7, #32]
}
 8015840:	bf00      	nop
 8015842:	e7fe      	b.n	8015842 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	2b02      	cmp	r3, #2
 8015848:	d103      	bne.n	8015852 <xQueueGenericSendFromISR+0x6a>
 801584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801584e:	2b01      	cmp	r3, #1
 8015850:	d101      	bne.n	8015856 <xQueueGenericSendFromISR+0x6e>
 8015852:	2301      	movs	r3, #1
 8015854:	e000      	b.n	8015858 <xQueueGenericSendFromISR+0x70>
 8015856:	2300      	movs	r3, #0
 8015858:	2b00      	cmp	r3, #0
 801585a:	d10a      	bne.n	8015872 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015860:	f383 8811 	msr	BASEPRI, r3
 8015864:	f3bf 8f6f 	isb	sy
 8015868:	f3bf 8f4f 	dsb	sy
 801586c:	61fb      	str	r3, [r7, #28]
}
 801586e:	bf00      	nop
 8015870:	e7fe      	b.n	8015870 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015872:	f002 fa75 	bl	8017d60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015876:	f3ef 8211 	mrs	r2, BASEPRI
 801587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801587e:	f383 8811 	msr	BASEPRI, r3
 8015882:	f3bf 8f6f 	isb	sy
 8015886:	f3bf 8f4f 	dsb	sy
 801588a:	61ba      	str	r2, [r7, #24]
 801588c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801588e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015890:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801589a:	429a      	cmp	r2, r3
 801589c:	d302      	bcc.n	80158a4 <xQueueGenericSendFromISR+0xbc>
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	2b02      	cmp	r3, #2
 80158a2:	d12c      	bne.n	80158fe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80158a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80158aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80158ae:	683a      	ldr	r2, [r7, #0]
 80158b0:	68b9      	ldr	r1, [r7, #8]
 80158b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158b4:	f000 fb41 	bl	8015f3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80158b8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80158bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158c0:	d112      	bne.n	80158e8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d016      	beq.n	80158f8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158cc:	3324      	adds	r3, #36	; 0x24
 80158ce:	4618      	mov	r0, r3
 80158d0:	f001 f96c 	bl	8016bac <xTaskRemoveFromEventList>
 80158d4:	4603      	mov	r3, r0
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d00e      	beq.n	80158f8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d00b      	beq.n	80158f8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	2201      	movs	r2, #1
 80158e4:	601a      	str	r2, [r3, #0]
 80158e6:	e007      	b.n	80158f8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80158e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80158ec:	3301      	adds	r3, #1
 80158ee:	b2db      	uxtb	r3, r3
 80158f0:	b25a      	sxtb	r2, r3
 80158f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80158f8:	2301      	movs	r3, #1
 80158fa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80158fc:	e001      	b.n	8015902 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80158fe:	2300      	movs	r3, #0
 8015900:	637b      	str	r3, [r7, #52]	; 0x34
 8015902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015904:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015906:	693b      	ldr	r3, [r7, #16]
 8015908:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801590c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801590e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015910:	4618      	mov	r0, r3
 8015912:	3738      	adds	r7, #56	; 0x38
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}

08015918 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b08e      	sub	sp, #56	; 0x38
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
 8015920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015928:	2b00      	cmp	r3, #0
 801592a:	d10a      	bne.n	8015942 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015930:	f383 8811 	msr	BASEPRI, r3
 8015934:	f3bf 8f6f 	isb	sy
 8015938:	f3bf 8f4f 	dsb	sy
 801593c:	623b      	str	r3, [r7, #32]
}
 801593e:	bf00      	nop
 8015940:	e7fe      	b.n	8015940 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015946:	2b00      	cmp	r3, #0
 8015948:	d00a      	beq.n	8015960 <xQueueGiveFromISR+0x48>
	__asm volatile
 801594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801594e:	f383 8811 	msr	BASEPRI, r3
 8015952:	f3bf 8f6f 	isb	sy
 8015956:	f3bf 8f4f 	dsb	sy
 801595a:	61fb      	str	r3, [r7, #28]
}
 801595c:	bf00      	nop
 801595e:	e7fe      	b.n	801595e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d103      	bne.n	8015970 <xQueueGiveFromISR+0x58>
 8015968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801596a:	689b      	ldr	r3, [r3, #8]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d101      	bne.n	8015974 <xQueueGiveFromISR+0x5c>
 8015970:	2301      	movs	r3, #1
 8015972:	e000      	b.n	8015976 <xQueueGiveFromISR+0x5e>
 8015974:	2300      	movs	r3, #0
 8015976:	2b00      	cmp	r3, #0
 8015978:	d10a      	bne.n	8015990 <xQueueGiveFromISR+0x78>
	__asm volatile
 801597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801597e:	f383 8811 	msr	BASEPRI, r3
 8015982:	f3bf 8f6f 	isb	sy
 8015986:	f3bf 8f4f 	dsb	sy
 801598a:	61bb      	str	r3, [r7, #24]
}
 801598c:	bf00      	nop
 801598e:	e7fe      	b.n	801598e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015990:	f002 f9e6 	bl	8017d60 <vPortValidateInterruptPriority>
	__asm volatile
 8015994:	f3ef 8211 	mrs	r2, BASEPRI
 8015998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801599c:	f383 8811 	msr	BASEPRI, r3
 80159a0:	f3bf 8f6f 	isb	sy
 80159a4:	f3bf 8f4f 	dsb	sy
 80159a8:	617a      	str	r2, [r7, #20]
 80159aa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80159ac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80159ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80159b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159b4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80159b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159bc:	429a      	cmp	r2, r3
 80159be:	d22b      	bcs.n	8015a18 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80159c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80159c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80159ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159cc:	1c5a      	adds	r2, r3, #1
 80159ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159d0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80159d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80159d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159da:	d112      	bne.n	8015a02 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80159dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d016      	beq.n	8015a12 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80159e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e6:	3324      	adds	r3, #36	; 0x24
 80159e8:	4618      	mov	r0, r3
 80159ea:	f001 f8df 	bl	8016bac <xTaskRemoveFromEventList>
 80159ee:	4603      	mov	r3, r0
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d00e      	beq.n	8015a12 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d00b      	beq.n	8015a12 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80159fa:	683b      	ldr	r3, [r7, #0]
 80159fc:	2201      	movs	r2, #1
 80159fe:	601a      	str	r2, [r3, #0]
 8015a00:	e007      	b.n	8015a12 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a06:	3301      	adds	r3, #1
 8015a08:	b2db      	uxtb	r3, r3
 8015a0a:	b25a      	sxtb	r2, r3
 8015a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015a12:	2301      	movs	r3, #1
 8015a14:	637b      	str	r3, [r7, #52]	; 0x34
 8015a16:	e001      	b.n	8015a1c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8015a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	f383 8811 	msr	BASEPRI, r3
}
 8015a26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3738      	adds	r7, #56	; 0x38
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
	...

08015a34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b08c      	sub	sp, #48	; 0x30
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	60f8      	str	r0, [r7, #12]
 8015a3c:	60b9      	str	r1, [r7, #8]
 8015a3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015a40:	2300      	movs	r3, #0
 8015a42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d10a      	bne.n	8015a64 <xQueueReceive+0x30>
	__asm volatile
 8015a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a52:	f383 8811 	msr	BASEPRI, r3
 8015a56:	f3bf 8f6f 	isb	sy
 8015a5a:	f3bf 8f4f 	dsb	sy
 8015a5e:	623b      	str	r3, [r7, #32]
}
 8015a60:	bf00      	nop
 8015a62:	e7fe      	b.n	8015a62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d103      	bne.n	8015a72 <xQueueReceive+0x3e>
 8015a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d101      	bne.n	8015a76 <xQueueReceive+0x42>
 8015a72:	2301      	movs	r3, #1
 8015a74:	e000      	b.n	8015a78 <xQueueReceive+0x44>
 8015a76:	2300      	movs	r3, #0
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d10a      	bne.n	8015a92 <xQueueReceive+0x5e>
	__asm volatile
 8015a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a80:	f383 8811 	msr	BASEPRI, r3
 8015a84:	f3bf 8f6f 	isb	sy
 8015a88:	f3bf 8f4f 	dsb	sy
 8015a8c:	61fb      	str	r3, [r7, #28]
}
 8015a8e:	bf00      	nop
 8015a90:	e7fe      	b.n	8015a90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a92:	f001 fa4d 	bl	8016f30 <xTaskGetSchedulerState>
 8015a96:	4603      	mov	r3, r0
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d102      	bne.n	8015aa2 <xQueueReceive+0x6e>
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d101      	bne.n	8015aa6 <xQueueReceive+0x72>
 8015aa2:	2301      	movs	r3, #1
 8015aa4:	e000      	b.n	8015aa8 <xQueueReceive+0x74>
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d10a      	bne.n	8015ac2 <xQueueReceive+0x8e>
	__asm volatile
 8015aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab0:	f383 8811 	msr	BASEPRI, r3
 8015ab4:	f3bf 8f6f 	isb	sy
 8015ab8:	f3bf 8f4f 	dsb	sy
 8015abc:	61bb      	str	r3, [r7, #24]
}
 8015abe:	bf00      	nop
 8015ac0:	e7fe      	b.n	8015ac0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015ac2:	f002 f88b 	bl	8017bdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015aca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d01f      	beq.n	8015b12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015ad2:	68b9      	ldr	r1, [r7, #8]
 8015ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ad6:	f000 fa9a 	bl	801600e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015adc:	1e5a      	subs	r2, r3, #1
 8015ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ae0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ae4:	691b      	ldr	r3, [r3, #16]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d00f      	beq.n	8015b0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aec:	3310      	adds	r3, #16
 8015aee:	4618      	mov	r0, r3
 8015af0:	f001 f85c 	bl	8016bac <xTaskRemoveFromEventList>
 8015af4:	4603      	mov	r3, r0
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d007      	beq.n	8015b0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015afa:	4b3d      	ldr	r3, [pc, #244]	; (8015bf0 <xQueueReceive+0x1bc>)
 8015afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b00:	601a      	str	r2, [r3, #0]
 8015b02:	f3bf 8f4f 	dsb	sy
 8015b06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015b0a:	f002 f897 	bl	8017c3c <vPortExitCritical>
				return pdPASS;
 8015b0e:	2301      	movs	r3, #1
 8015b10:	e069      	b.n	8015be6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d103      	bne.n	8015b20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015b18:	f002 f890 	bl	8017c3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	e062      	b.n	8015be6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d106      	bne.n	8015b34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015b26:	f107 0310 	add.w	r3, r7, #16
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f001 f8a0 	bl	8016c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015b30:	2301      	movs	r3, #1
 8015b32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015b34:	f002 f882 	bl	8017c3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015b38:	f000 fdf0 	bl	801671c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b3c:	f002 f84e 	bl	8017bdc <vPortEnterCritical>
 8015b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b46:	b25b      	sxtb	r3, r3
 8015b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b4c:	d103      	bne.n	8015b56 <xQueueReceive+0x122>
 8015b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b50:	2200      	movs	r2, #0
 8015b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b5c:	b25b      	sxtb	r3, r3
 8015b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b62:	d103      	bne.n	8015b6c <xQueueReceive+0x138>
 8015b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b66:	2200      	movs	r2, #0
 8015b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015b6c:	f002 f866 	bl	8017c3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b70:	1d3a      	adds	r2, r7, #4
 8015b72:	f107 0310 	add.w	r3, r7, #16
 8015b76:	4611      	mov	r1, r2
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f001 f88f 	bl	8016c9c <xTaskCheckForTimeOut>
 8015b7e:	4603      	mov	r3, r0
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d123      	bne.n	8015bcc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b86:	f000 faba 	bl	80160fe <prvIsQueueEmpty>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d017      	beq.n	8015bc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b92:	3324      	adds	r3, #36	; 0x24
 8015b94:	687a      	ldr	r2, [r7, #4]
 8015b96:	4611      	mov	r1, r2
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f000 ffb7 	bl	8016b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ba0:	f000 fa5b 	bl	801605a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015ba4:	f000 fdc8 	bl	8016738 <xTaskResumeAll>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d189      	bne.n	8015ac2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8015bae:	4b10      	ldr	r3, [pc, #64]	; (8015bf0 <xQueueReceive+0x1bc>)
 8015bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bb4:	601a      	str	r2, [r3, #0]
 8015bb6:	f3bf 8f4f 	dsb	sy
 8015bba:	f3bf 8f6f 	isb	sy
 8015bbe:	e780      	b.n	8015ac2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bc2:	f000 fa4a 	bl	801605a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015bc6:	f000 fdb7 	bl	8016738 <xTaskResumeAll>
 8015bca:	e77a      	b.n	8015ac2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bce:	f000 fa44 	bl	801605a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015bd2:	f000 fdb1 	bl	8016738 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bd8:	f000 fa91 	bl	80160fe <prvIsQueueEmpty>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	f43f af6f 	beq.w	8015ac2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015be4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	3730      	adds	r7, #48	; 0x30
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}
 8015bee:	bf00      	nop
 8015bf0:	e000ed04 	.word	0xe000ed04

08015bf4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b08e      	sub	sp, #56	; 0x38
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015c06:	2300      	movs	r3, #0
 8015c08:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d10a      	bne.n	8015c26 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c14:	f383 8811 	msr	BASEPRI, r3
 8015c18:	f3bf 8f6f 	isb	sy
 8015c1c:	f3bf 8f4f 	dsb	sy
 8015c20:	623b      	str	r3, [r7, #32]
}
 8015c22:	bf00      	nop
 8015c24:	e7fe      	b.n	8015c24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d00a      	beq.n	8015c44 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8015c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c32:	f383 8811 	msr	BASEPRI, r3
 8015c36:	f3bf 8f6f 	isb	sy
 8015c3a:	f3bf 8f4f 	dsb	sy
 8015c3e:	61fb      	str	r3, [r7, #28]
}
 8015c40:	bf00      	nop
 8015c42:	e7fe      	b.n	8015c42 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015c44:	f001 f974 	bl	8016f30 <xTaskGetSchedulerState>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d102      	bne.n	8015c54 <xQueueSemaphoreTake+0x60>
 8015c4e:	683b      	ldr	r3, [r7, #0]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d101      	bne.n	8015c58 <xQueueSemaphoreTake+0x64>
 8015c54:	2301      	movs	r3, #1
 8015c56:	e000      	b.n	8015c5a <xQueueSemaphoreTake+0x66>
 8015c58:	2300      	movs	r3, #0
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d10a      	bne.n	8015c74 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8015c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c62:	f383 8811 	msr	BASEPRI, r3
 8015c66:	f3bf 8f6f 	isb	sy
 8015c6a:	f3bf 8f4f 	dsb	sy
 8015c6e:	61bb      	str	r3, [r7, #24]
}
 8015c70:	bf00      	nop
 8015c72:	e7fe      	b.n	8015c72 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015c74:	f001 ffb2 	bl	8017bdc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d024      	beq.n	8015cce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c86:	1e5a      	subs	r2, r3, #1
 8015c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d104      	bne.n	8015c9e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015c94:	f001 fb0a 	bl	80172ac <pvTaskIncrementMutexHeldCount>
 8015c98:	4602      	mov	r2, r0
 8015c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca0:	691b      	ldr	r3, [r3, #16]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d00f      	beq.n	8015cc6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca8:	3310      	adds	r3, #16
 8015caa:	4618      	mov	r0, r3
 8015cac:	f000 ff7e 	bl	8016bac <xTaskRemoveFromEventList>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d007      	beq.n	8015cc6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015cb6:	4b54      	ldr	r3, [pc, #336]	; (8015e08 <xQueueSemaphoreTake+0x214>)
 8015cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cbc:	601a      	str	r2, [r3, #0]
 8015cbe:	f3bf 8f4f 	dsb	sy
 8015cc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015cc6:	f001 ffb9 	bl	8017c3c <vPortExitCritical>
				return pdPASS;
 8015cca:	2301      	movs	r3, #1
 8015ccc:	e097      	b.n	8015dfe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d111      	bne.n	8015cf8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d00a      	beq.n	8015cf0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8015cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cde:	f383 8811 	msr	BASEPRI, r3
 8015ce2:	f3bf 8f6f 	isb	sy
 8015ce6:	f3bf 8f4f 	dsb	sy
 8015cea:	617b      	str	r3, [r7, #20]
}
 8015cec:	bf00      	nop
 8015cee:	e7fe      	b.n	8015cee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015cf0:	f001 ffa4 	bl	8017c3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	e082      	b.n	8015dfe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d106      	bne.n	8015d0c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015cfe:	f107 030c 	add.w	r3, r7, #12
 8015d02:	4618      	mov	r0, r3
 8015d04:	f000 ffb4 	bl	8016c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015d08:	2301      	movs	r3, #1
 8015d0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015d0c:	f001 ff96 	bl	8017c3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015d10:	f000 fd04 	bl	801671c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015d14:	f001 ff62 	bl	8017bdc <vPortEnterCritical>
 8015d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015d1e:	b25b      	sxtb	r3, r3
 8015d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d24:	d103      	bne.n	8015d2e <xQueueSemaphoreTake+0x13a>
 8015d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d28:	2200      	movs	r2, #0
 8015d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015d34:	b25b      	sxtb	r3, r3
 8015d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d3a:	d103      	bne.n	8015d44 <xQueueSemaphoreTake+0x150>
 8015d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d3e:	2200      	movs	r2, #0
 8015d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015d44:	f001 ff7a 	bl	8017c3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015d48:	463a      	mov	r2, r7
 8015d4a:	f107 030c 	add.w	r3, r7, #12
 8015d4e:	4611      	mov	r1, r2
 8015d50:	4618      	mov	r0, r3
 8015d52:	f000 ffa3 	bl	8016c9c <xTaskCheckForTimeOut>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d132      	bne.n	8015dc2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015d5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d5e:	f000 f9ce 	bl	80160fe <prvIsQueueEmpty>
 8015d62:	4603      	mov	r3, r0
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d026      	beq.n	8015db6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d109      	bne.n	8015d84 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015d70:	f001 ff34 	bl	8017bdc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d76:	689b      	ldr	r3, [r3, #8]
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f001 f8f7 	bl	8016f6c <xTaskPriorityInherit>
 8015d7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015d80:	f001 ff5c 	bl	8017c3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d86:	3324      	adds	r3, #36	; 0x24
 8015d88:	683a      	ldr	r2, [r7, #0]
 8015d8a:	4611      	mov	r1, r2
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f000 febd 	bl	8016b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d94:	f000 f961 	bl	801605a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015d98:	f000 fcce 	bl	8016738 <xTaskResumeAll>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	f47f af68 	bne.w	8015c74 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015da4:	4b18      	ldr	r3, [pc, #96]	; (8015e08 <xQueueSemaphoreTake+0x214>)
 8015da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015daa:	601a      	str	r2, [r3, #0]
 8015dac:	f3bf 8f4f 	dsb	sy
 8015db0:	f3bf 8f6f 	isb	sy
 8015db4:	e75e      	b.n	8015c74 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015db8:	f000 f94f 	bl	801605a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015dbc:	f000 fcbc 	bl	8016738 <xTaskResumeAll>
 8015dc0:	e758      	b.n	8015c74 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015dc4:	f000 f949 	bl	801605a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015dc8:	f000 fcb6 	bl	8016738 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015dce:	f000 f996 	bl	80160fe <prvIsQueueEmpty>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	f43f af4d 	beq.w	8015c74 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d00d      	beq.n	8015dfc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015de0:	f001 fefc 	bl	8017bdc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015de4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015de6:	f000 f891 	bl	8015f0c <prvGetDisinheritPriorityAfterTimeout>
 8015dea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dee:	689b      	ldr	r3, [r3, #8]
 8015df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015df2:	4618      	mov	r0, r3
 8015df4:	f001 f9c0 	bl	8017178 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015df8:	f001 ff20 	bl	8017c3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015dfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3738      	adds	r7, #56	; 0x38
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
 8015e06:	bf00      	nop
 8015e08:	e000ed04 	.word	0xe000ed04

08015e0c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b08e      	sub	sp, #56	; 0x38
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	60f8      	str	r0, [r7, #12]
 8015e14:	60b9      	str	r1, [r7, #8]
 8015e16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d10a      	bne.n	8015e38 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e26:	f383 8811 	msr	BASEPRI, r3
 8015e2a:	f3bf 8f6f 	isb	sy
 8015e2e:	f3bf 8f4f 	dsb	sy
 8015e32:	623b      	str	r3, [r7, #32]
}
 8015e34:	bf00      	nop
 8015e36:	e7fe      	b.n	8015e36 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e38:	68bb      	ldr	r3, [r7, #8]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d103      	bne.n	8015e46 <xQueueReceiveFromISR+0x3a>
 8015e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d101      	bne.n	8015e4a <xQueueReceiveFromISR+0x3e>
 8015e46:	2301      	movs	r3, #1
 8015e48:	e000      	b.n	8015e4c <xQueueReceiveFromISR+0x40>
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d10a      	bne.n	8015e66 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e54:	f383 8811 	msr	BASEPRI, r3
 8015e58:	f3bf 8f6f 	isb	sy
 8015e5c:	f3bf 8f4f 	dsb	sy
 8015e60:	61fb      	str	r3, [r7, #28]
}
 8015e62:	bf00      	nop
 8015e64:	e7fe      	b.n	8015e64 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e66:	f001 ff7b 	bl	8017d60 <vPortValidateInterruptPriority>
	__asm volatile
 8015e6a:	f3ef 8211 	mrs	r2, BASEPRI
 8015e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e72:	f383 8811 	msr	BASEPRI, r3
 8015e76:	f3bf 8f6f 	isb	sy
 8015e7a:	f3bf 8f4f 	dsb	sy
 8015e7e:	61ba      	str	r2, [r7, #24]
 8015e80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015e82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d02f      	beq.n	8015ef2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015e9c:	68b9      	ldr	r1, [r7, #8]
 8015e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ea0:	f000 f8b5 	bl	801600e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea6:	1e5a      	subs	r2, r3, #1
 8015ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eaa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015eac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eb4:	d112      	bne.n	8015edc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb8:	691b      	ldr	r3, [r3, #16]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d016      	beq.n	8015eec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec0:	3310      	adds	r3, #16
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	f000 fe72 	bl	8016bac <xTaskRemoveFromEventList>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d00e      	beq.n	8015eec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d00b      	beq.n	8015eec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2201      	movs	r2, #1
 8015ed8:	601a      	str	r2, [r3, #0]
 8015eda:	e007      	b.n	8015eec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ee0:	3301      	adds	r3, #1
 8015ee2:	b2db      	uxtb	r3, r3
 8015ee4:	b25a      	sxtb	r2, r3
 8015ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015eec:	2301      	movs	r3, #1
 8015eee:	637b      	str	r3, [r7, #52]	; 0x34
 8015ef0:	e001      	b.n	8015ef6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8015ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015efa:	693b      	ldr	r3, [r7, #16]
 8015efc:	f383 8811 	msr	BASEPRI, r3
}
 8015f00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3738      	adds	r7, #56	; 0x38
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}

08015f0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015f0c:	b480      	push	{r7}
 8015f0e:	b085      	sub	sp, #20
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d006      	beq.n	8015f2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	f1c3 0307 	rsb	r3, r3, #7
 8015f26:	60fb      	str	r3, [r7, #12]
 8015f28:	e001      	b.n	8015f2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015f2e:	68fb      	ldr	r3, [r7, #12]
	}
 8015f30:	4618      	mov	r0, r3
 8015f32:	3714      	adds	r7, #20
 8015f34:	46bd      	mov	sp, r7
 8015f36:	bc80      	pop	{r7}
 8015f38:	4770      	bx	lr

08015f3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015f3a:	b580      	push	{r7, lr}
 8015f3c:	b086      	sub	sp, #24
 8015f3e:	af00      	add	r7, sp, #0
 8015f40:	60f8      	str	r0, [r7, #12]
 8015f42:	60b9      	str	r1, [r7, #8]
 8015f44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015f46:	2300      	movs	r3, #0
 8015f48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d10d      	bne.n	8015f74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d14d      	bne.n	8015ffc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	689b      	ldr	r3, [r3, #8]
 8015f64:	4618      	mov	r0, r3
 8015f66:	f001 f881 	bl	801706c <xTaskPriorityDisinherit>
 8015f6a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	609a      	str	r2, [r3, #8]
 8015f72:	e043      	b.n	8015ffc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d119      	bne.n	8015fae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	6858      	ldr	r0, [r3, #4]
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f82:	461a      	mov	r2, r3
 8015f84:	68b9      	ldr	r1, [r7, #8]
 8015f86:	f002 fd71 	bl	8018a6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	685a      	ldr	r2, [r3, #4]
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f92:	441a      	add	r2, r3
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	685a      	ldr	r2, [r3, #4]
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	689b      	ldr	r3, [r3, #8]
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d32b      	bcc.n	8015ffc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	681a      	ldr	r2, [r3, #0]
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	605a      	str	r2, [r3, #4]
 8015fac:	e026      	b.n	8015ffc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	68d8      	ldr	r0, [r3, #12]
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fb6:	461a      	mov	r2, r3
 8015fb8:	68b9      	ldr	r1, [r7, #8]
 8015fba:	f002 fd57 	bl	8018a6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	68da      	ldr	r2, [r3, #12]
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fc6:	425b      	negs	r3, r3
 8015fc8:	441a      	add	r2, r3
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	68da      	ldr	r2, [r3, #12]
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d207      	bcs.n	8015fea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	689a      	ldr	r2, [r3, #8]
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fe2:	425b      	negs	r3, r3
 8015fe4:	441a      	add	r2, r3
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2b02      	cmp	r3, #2
 8015fee:	d105      	bne.n	8015ffc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d002      	beq.n	8015ffc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	3b01      	subs	r3, #1
 8015ffa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	1c5a      	adds	r2, r3, #1
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016004:	697b      	ldr	r3, [r7, #20]
}
 8016006:	4618      	mov	r0, r3
 8016008:	3718      	adds	r7, #24
 801600a:	46bd      	mov	sp, r7
 801600c:	bd80      	pop	{r7, pc}

0801600e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801600e:	b580      	push	{r7, lr}
 8016010:	b082      	sub	sp, #8
 8016012:	af00      	add	r7, sp, #0
 8016014:	6078      	str	r0, [r7, #4]
 8016016:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801601c:	2b00      	cmp	r3, #0
 801601e:	d018      	beq.n	8016052 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	68da      	ldr	r2, [r3, #12]
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016028:	441a      	add	r2, r3
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	68da      	ldr	r2, [r3, #12]
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	689b      	ldr	r3, [r3, #8]
 8016036:	429a      	cmp	r2, r3
 8016038:	d303      	bcc.n	8016042 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681a      	ldr	r2, [r3, #0]
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	68d9      	ldr	r1, [r3, #12]
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801604a:	461a      	mov	r2, r3
 801604c:	6838      	ldr	r0, [r7, #0]
 801604e:	f002 fd0d 	bl	8018a6c <memcpy>
	}
}
 8016052:	bf00      	nop
 8016054:	3708      	adds	r7, #8
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}

0801605a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801605a:	b580      	push	{r7, lr}
 801605c:	b084      	sub	sp, #16
 801605e:	af00      	add	r7, sp, #0
 8016060:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016062:	f001 fdbb 	bl	8017bdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801606c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801606e:	e011      	b.n	8016094 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016074:	2b00      	cmp	r3, #0
 8016076:	d012      	beq.n	801609e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	3324      	adds	r3, #36	; 0x24
 801607c:	4618      	mov	r0, r3
 801607e:	f000 fd95 	bl	8016bac <xTaskRemoveFromEventList>
 8016082:	4603      	mov	r3, r0
 8016084:	2b00      	cmp	r3, #0
 8016086:	d001      	beq.n	801608c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016088:	f000 fe6a 	bl	8016d60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801608c:	7bfb      	ldrb	r3, [r7, #15]
 801608e:	3b01      	subs	r3, #1
 8016090:	b2db      	uxtb	r3, r3
 8016092:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016098:	2b00      	cmp	r3, #0
 801609a:	dce9      	bgt.n	8016070 <prvUnlockQueue+0x16>
 801609c:	e000      	b.n	80160a0 <prvUnlockQueue+0x46>
					break;
 801609e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	22ff      	movs	r2, #255	; 0xff
 80160a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80160a8:	f001 fdc8 	bl	8017c3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80160ac:	f001 fd96 	bl	8017bdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80160b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80160b8:	e011      	b.n	80160de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	691b      	ldr	r3, [r3, #16]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d012      	beq.n	80160e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	3310      	adds	r3, #16
 80160c6:	4618      	mov	r0, r3
 80160c8:	f000 fd70 	bl	8016bac <xTaskRemoveFromEventList>
 80160cc:	4603      	mov	r3, r0
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d001      	beq.n	80160d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80160d2:	f000 fe45 	bl	8016d60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80160d6:	7bbb      	ldrb	r3, [r7, #14]
 80160d8:	3b01      	subs	r3, #1
 80160da:	b2db      	uxtb	r3, r3
 80160dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80160de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	dce9      	bgt.n	80160ba <prvUnlockQueue+0x60>
 80160e6:	e000      	b.n	80160ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80160e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	22ff      	movs	r2, #255	; 0xff
 80160ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80160f2:	f001 fda3 	bl	8017c3c <vPortExitCritical>
}
 80160f6:	bf00      	nop
 80160f8:	3710      	adds	r7, #16
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}

080160fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80160fe:	b580      	push	{r7, lr}
 8016100:	b084      	sub	sp, #16
 8016102:	af00      	add	r7, sp, #0
 8016104:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016106:	f001 fd69 	bl	8017bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801610e:	2b00      	cmp	r3, #0
 8016110:	d102      	bne.n	8016118 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016112:	2301      	movs	r3, #1
 8016114:	60fb      	str	r3, [r7, #12]
 8016116:	e001      	b.n	801611c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016118:	2300      	movs	r3, #0
 801611a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801611c:	f001 fd8e 	bl	8017c3c <vPortExitCritical>

	return xReturn;
 8016120:	68fb      	ldr	r3, [r7, #12]
}
 8016122:	4618      	mov	r0, r3
 8016124:	3710      	adds	r7, #16
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}

0801612a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801612a:	b580      	push	{r7, lr}
 801612c:	b084      	sub	sp, #16
 801612e:	af00      	add	r7, sp, #0
 8016130:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016132:	f001 fd53 	bl	8017bdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801613e:	429a      	cmp	r2, r3
 8016140:	d102      	bne.n	8016148 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016142:	2301      	movs	r3, #1
 8016144:	60fb      	str	r3, [r7, #12]
 8016146:	e001      	b.n	801614c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016148:	2300      	movs	r3, #0
 801614a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801614c:	f001 fd76 	bl	8017c3c <vPortExitCritical>

	return xReturn;
 8016150:	68fb      	ldr	r3, [r7, #12]
}
 8016152:	4618      	mov	r0, r3
 8016154:	3710      	adds	r7, #16
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}
	...

0801615c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801615c:	b480      	push	{r7}
 801615e:	b085      	sub	sp, #20
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
 8016164:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016166:	2300      	movs	r3, #0
 8016168:	60fb      	str	r3, [r7, #12]
 801616a:	e014      	b.n	8016196 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801616c:	4a0e      	ldr	r2, [pc, #56]	; (80161a8 <vQueueAddToRegistry+0x4c>)
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d10b      	bne.n	8016190 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016178:	490b      	ldr	r1, [pc, #44]	; (80161a8 <vQueueAddToRegistry+0x4c>)
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	683a      	ldr	r2, [r7, #0]
 801617e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016182:	4a09      	ldr	r2, [pc, #36]	; (80161a8 <vQueueAddToRegistry+0x4c>)
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	00db      	lsls	r3, r3, #3
 8016188:	4413      	add	r3, r2
 801618a:	687a      	ldr	r2, [r7, #4]
 801618c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801618e:	e006      	b.n	801619e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	3301      	adds	r3, #1
 8016194:	60fb      	str	r3, [r7, #12]
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	2b07      	cmp	r3, #7
 801619a:	d9e7      	bls.n	801616c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801619c:	bf00      	nop
 801619e:	bf00      	nop
 80161a0:	3714      	adds	r7, #20
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bc80      	pop	{r7}
 80161a6:	4770      	bx	lr
 80161a8:	200022e8 	.word	0x200022e8

080161ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b086      	sub	sp, #24
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	60f8      	str	r0, [r7, #12]
 80161b4:	60b9      	str	r1, [r7, #8]
 80161b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80161bc:	f001 fd0e 	bl	8017bdc <vPortEnterCritical>
 80161c0:	697b      	ldr	r3, [r7, #20]
 80161c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161c6:	b25b      	sxtb	r3, r3
 80161c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161cc:	d103      	bne.n	80161d6 <vQueueWaitForMessageRestricted+0x2a>
 80161ce:	697b      	ldr	r3, [r7, #20]
 80161d0:	2200      	movs	r2, #0
 80161d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80161d6:	697b      	ldr	r3, [r7, #20]
 80161d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161dc:	b25b      	sxtb	r3, r3
 80161de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161e2:	d103      	bne.n	80161ec <vQueueWaitForMessageRestricted+0x40>
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	2200      	movs	r2, #0
 80161e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80161ec:	f001 fd26 	bl	8017c3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d106      	bne.n	8016206 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	3324      	adds	r3, #36	; 0x24
 80161fc:	687a      	ldr	r2, [r7, #4]
 80161fe:	68b9      	ldr	r1, [r7, #8]
 8016200:	4618      	mov	r0, r3
 8016202:	f000 fca7 	bl	8016b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016206:	6978      	ldr	r0, [r7, #20]
 8016208:	f7ff ff27 	bl	801605a <prvUnlockQueue>
	}
 801620c:	bf00      	nop
 801620e:	3718      	adds	r7, #24
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}

08016214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016214:	b580      	push	{r7, lr}
 8016216:	b08e      	sub	sp, #56	; 0x38
 8016218:	af04      	add	r7, sp, #16
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	607a      	str	r2, [r7, #4]
 8016220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016224:	2b00      	cmp	r3, #0
 8016226:	d10a      	bne.n	801623e <xTaskCreateStatic+0x2a>
	__asm volatile
 8016228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801622c:	f383 8811 	msr	BASEPRI, r3
 8016230:	f3bf 8f6f 	isb	sy
 8016234:	f3bf 8f4f 	dsb	sy
 8016238:	623b      	str	r3, [r7, #32]
}
 801623a:	bf00      	nop
 801623c:	e7fe      	b.n	801623c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016240:	2b00      	cmp	r3, #0
 8016242:	d10a      	bne.n	801625a <xTaskCreateStatic+0x46>
	__asm volatile
 8016244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016248:	f383 8811 	msr	BASEPRI, r3
 801624c:	f3bf 8f6f 	isb	sy
 8016250:	f3bf 8f4f 	dsb	sy
 8016254:	61fb      	str	r3, [r7, #28]
}
 8016256:	bf00      	nop
 8016258:	e7fe      	b.n	8016258 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801625a:	f44f 73bc 	mov.w	r3, #376	; 0x178
 801625e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016260:	693b      	ldr	r3, [r7, #16]
 8016262:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 8016266:	d00a      	beq.n	801627e <xTaskCreateStatic+0x6a>
	__asm volatile
 8016268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801626c:	f383 8811 	msr	BASEPRI, r3
 8016270:	f3bf 8f6f 	isb	sy
 8016274:	f3bf 8f4f 	dsb	sy
 8016278:	61bb      	str	r3, [r7, #24]
}
 801627a:	bf00      	nop
 801627c:	e7fe      	b.n	801627c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801627e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016282:	2b00      	cmp	r3, #0
 8016284:	d01e      	beq.n	80162c4 <xTaskCreateStatic+0xb0>
 8016286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016288:	2b00      	cmp	r3, #0
 801628a:	d01b      	beq.n	80162c4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801628e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016294:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016298:	2202      	movs	r2, #2
 801629a:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801629e:	2300      	movs	r3, #0
 80162a0:	9303      	str	r3, [sp, #12]
 80162a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a4:	9302      	str	r3, [sp, #8]
 80162a6:	f107 0314 	add.w	r3, r7, #20
 80162aa:	9301      	str	r3, [sp, #4]
 80162ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ae:	9300      	str	r3, [sp, #0]
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	687a      	ldr	r2, [r7, #4]
 80162b4:	68b9      	ldr	r1, [r7, #8]
 80162b6:	68f8      	ldr	r0, [r7, #12]
 80162b8:	f000 f852 	bl	8016360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80162bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162be:	f000 f91f 	bl	8016500 <prvAddNewTaskToReadyList>
 80162c2:	e001      	b.n	80162c8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80162c4:	2300      	movs	r3, #0
 80162c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80162c8:	697b      	ldr	r3, [r7, #20]
	}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3728      	adds	r7, #40	; 0x28
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}

080162d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80162d2:	b580      	push	{r7, lr}
 80162d4:	b08c      	sub	sp, #48	; 0x30
 80162d6:	af04      	add	r7, sp, #16
 80162d8:	60f8      	str	r0, [r7, #12]
 80162da:	60b9      	str	r1, [r7, #8]
 80162dc:	603b      	str	r3, [r7, #0]
 80162de:	4613      	mov	r3, r2
 80162e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80162e2:	88fb      	ldrh	r3, [r7, #6]
 80162e4:	009b      	lsls	r3, r3, #2
 80162e6:	4618      	mov	r0, r3
 80162e8:	f001 fd78 	bl	8017ddc <pvPortMalloc>
 80162ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d00f      	beq.n	8016314 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80162f4:	f44f 70bc 	mov.w	r0, #376	; 0x178
 80162f8:	f001 fd70 	bl	8017ddc <pvPortMalloc>
 80162fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80162fe:	69fb      	ldr	r3, [r7, #28]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d003      	beq.n	801630c <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016304:	69fb      	ldr	r3, [r7, #28]
 8016306:	697a      	ldr	r2, [r7, #20]
 8016308:	631a      	str	r2, [r3, #48]	; 0x30
 801630a:	e005      	b.n	8016318 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801630c:	6978      	ldr	r0, [r7, #20]
 801630e:	f001 fe2f 	bl	8017f70 <vPortFree>
 8016312:	e001      	b.n	8016318 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016314:	2300      	movs	r3, #0
 8016316:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016318:	69fb      	ldr	r3, [r7, #28]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d017      	beq.n	801634e <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801631e:	69fb      	ldr	r3, [r7, #28]
 8016320:	2200      	movs	r2, #0
 8016322:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016326:	88fa      	ldrh	r2, [r7, #6]
 8016328:	2300      	movs	r3, #0
 801632a:	9303      	str	r3, [sp, #12]
 801632c:	69fb      	ldr	r3, [r7, #28]
 801632e:	9302      	str	r3, [sp, #8]
 8016330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016332:	9301      	str	r3, [sp, #4]
 8016334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016336:	9300      	str	r3, [sp, #0]
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	68b9      	ldr	r1, [r7, #8]
 801633c:	68f8      	ldr	r0, [r7, #12]
 801633e:	f000 f80f 	bl	8016360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016342:	69f8      	ldr	r0, [r7, #28]
 8016344:	f000 f8dc 	bl	8016500 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016348:	2301      	movs	r3, #1
 801634a:	61bb      	str	r3, [r7, #24]
 801634c:	e002      	b.n	8016354 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801634e:	f04f 33ff 	mov.w	r3, #4294967295
 8016352:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016354:	69bb      	ldr	r3, [r7, #24]
	}
 8016356:	4618      	mov	r0, r3
 8016358:	3720      	adds	r7, #32
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}
	...

08016360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b088      	sub	sp, #32
 8016364:	af00      	add	r7, sp, #0
 8016366:	60f8      	str	r0, [r7, #12]
 8016368:	60b9      	str	r1, [r7, #8]
 801636a:	607a      	str	r2, [r7, #4]
 801636c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016370:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	009b      	lsls	r3, r3, #2
 8016376:	461a      	mov	r2, r3
 8016378:	21a5      	movs	r1, #165	; 0xa5
 801637a:	f002 fa8b 	bl	8018894 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016388:	3b01      	subs	r3, #1
 801638a:	009b      	lsls	r3, r3, #2
 801638c:	4413      	add	r3, r2
 801638e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016390:	69bb      	ldr	r3, [r7, #24]
 8016392:	f023 0307 	bic.w	r3, r3, #7
 8016396:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016398:	69bb      	ldr	r3, [r7, #24]
 801639a:	f003 0307 	and.w	r3, r3, #7
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d00a      	beq.n	80163b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80163a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a6:	f383 8811 	msr	BASEPRI, r3
 80163aa:	f3bf 8f6f 	isb	sy
 80163ae:	f3bf 8f4f 	dsb	sy
 80163b2:	617b      	str	r3, [r7, #20]
}
 80163b4:	bf00      	nop
 80163b6:	e7fe      	b.n	80163b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80163b8:	68bb      	ldr	r3, [r7, #8]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d01f      	beq.n	80163fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80163be:	2300      	movs	r3, #0
 80163c0:	61fb      	str	r3, [r7, #28]
 80163c2:	e012      	b.n	80163ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80163c4:	68ba      	ldr	r2, [r7, #8]
 80163c6:	69fb      	ldr	r3, [r7, #28]
 80163c8:	4413      	add	r3, r2
 80163ca:	7819      	ldrb	r1, [r3, #0]
 80163cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163ce:	69fb      	ldr	r3, [r7, #28]
 80163d0:	4413      	add	r3, r2
 80163d2:	3334      	adds	r3, #52	; 0x34
 80163d4:	460a      	mov	r2, r1
 80163d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80163d8:	68ba      	ldr	r2, [r7, #8]
 80163da:	69fb      	ldr	r3, [r7, #28]
 80163dc:	4413      	add	r3, r2
 80163de:	781b      	ldrb	r3, [r3, #0]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d006      	beq.n	80163f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80163e4:	69fb      	ldr	r3, [r7, #28]
 80163e6:	3301      	adds	r3, #1
 80163e8:	61fb      	str	r3, [r7, #28]
 80163ea:	69fb      	ldr	r3, [r7, #28]
 80163ec:	2b0f      	cmp	r3, #15
 80163ee:	d9e9      	bls.n	80163c4 <prvInitialiseNewTask+0x64>
 80163f0:	e000      	b.n	80163f4 <prvInitialiseNewTask+0x94>
			{
				break;
 80163f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80163f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f6:	2200      	movs	r2, #0
 80163f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80163fc:	e003      	b.n	8016406 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80163fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016400:	2200      	movs	r2, #0
 8016402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016408:	2b06      	cmp	r3, #6
 801640a:	d901      	bls.n	8016410 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801640c:	2306      	movs	r3, #6
 801640e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016414:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801641a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801641e:	2200      	movs	r2, #0
 8016420:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016424:	3304      	adds	r3, #4
 8016426:	4618      	mov	r0, r3
 8016428:	f7fe fec4 	bl	80151b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801642e:	3318      	adds	r3, #24
 8016430:	4618      	mov	r0, r3
 8016432:	f7fe febf 	bl	80151b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801643a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801643e:	f1c3 0207 	rsb	r2, r3, #7
 8016442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016444:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801644a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644e:	2200      	movs	r2, #0
 8016450:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016456:	2200      	movs	r2, #0
 8016458:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801645e:	3350      	adds	r3, #80	; 0x50
 8016460:	f44f 7290 	mov.w	r2, #288	; 0x120
 8016464:	2100      	movs	r1, #0
 8016466:	4618      	mov	r0, r3
 8016468:	f002 fa14 	bl	8018894 <memset>
 801646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801646e:	4a21      	ldr	r2, [pc, #132]	; (80164f4 <prvInitialiseNewTask+0x194>)
 8016470:	655a      	str	r2, [r3, #84]	; 0x54
 8016472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016474:	4a20      	ldr	r2, [pc, #128]	; (80164f8 <prvInitialiseNewTask+0x198>)
 8016476:	659a      	str	r2, [r3, #88]	; 0x58
 8016478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801647a:	4a20      	ldr	r2, [pc, #128]	; (80164fc <prvInitialiseNewTask+0x19c>)
 801647c:	65da      	str	r2, [r3, #92]	; 0x5c
 801647e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016480:	f04f 0201 	mov.w	r2, #1
 8016484:	f04f 0300 	mov.w	r3, #0
 8016488:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 801648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801648e:	f243 320e 	movw	r2, #13070	; 0x330e
 8016492:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
 8016496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016498:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 801649c:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
 80164a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a2:	f241 2234 	movw	r2, #4660	; 0x1234
 80164a6:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 80164aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ac:	f24e 626d 	movw	r2, #58989	; 0xe66d
 80164b0:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 80164b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b6:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 80164ba:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80164be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c0:	2205      	movs	r2, #5
 80164c2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 80164c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c8:	220b      	movs	r2, #11
 80164ca:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80164ce:	683a      	ldr	r2, [r7, #0]
 80164d0:	68f9      	ldr	r1, [r7, #12]
 80164d2:	69b8      	ldr	r0, [r7, #24]
 80164d4:	f001 fa94 	bl	8017a00 <pxPortInitialiseStack>
 80164d8:	4602      	mov	r2, r0
 80164da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80164de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d002      	beq.n	80164ea <prvInitialiseNewTask+0x18a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80164e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80164ea:	bf00      	nop
 80164ec:	3720      	adds	r7, #32
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	20005570 	.word	0x20005570
 80164f8:	200055d8 	.word	0x200055d8
 80164fc:	20005640 	.word	0x20005640

08016500 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b082      	sub	sp, #8
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016508:	f001 fb68 	bl	8017bdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801650c:	4b2a      	ldr	r3, [pc, #168]	; (80165b8 <prvAddNewTaskToReadyList+0xb8>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	3301      	adds	r3, #1
 8016512:	4a29      	ldr	r2, [pc, #164]	; (80165b8 <prvAddNewTaskToReadyList+0xb8>)
 8016514:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016516:	4b29      	ldr	r3, [pc, #164]	; (80165bc <prvAddNewTaskToReadyList+0xbc>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d109      	bne.n	8016532 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801651e:	4a27      	ldr	r2, [pc, #156]	; (80165bc <prvAddNewTaskToReadyList+0xbc>)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016524:	4b24      	ldr	r3, [pc, #144]	; (80165b8 <prvAddNewTaskToReadyList+0xb8>)
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	2b01      	cmp	r3, #1
 801652a:	d110      	bne.n	801654e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801652c:	f000 fc3e 	bl	8016dac <prvInitialiseTaskLists>
 8016530:	e00d      	b.n	801654e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016532:	4b23      	ldr	r3, [pc, #140]	; (80165c0 <prvAddNewTaskToReadyList+0xc0>)
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d109      	bne.n	801654e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801653a:	4b20      	ldr	r3, [pc, #128]	; (80165bc <prvAddNewTaskToReadyList+0xbc>)
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016544:	429a      	cmp	r2, r3
 8016546:	d802      	bhi.n	801654e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016548:	4a1c      	ldr	r2, [pc, #112]	; (80165bc <prvAddNewTaskToReadyList+0xbc>)
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801654e:	4b1d      	ldr	r3, [pc, #116]	; (80165c4 <prvAddNewTaskToReadyList+0xc4>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	3301      	adds	r3, #1
 8016554:	4a1b      	ldr	r2, [pc, #108]	; (80165c4 <prvAddNewTaskToReadyList+0xc4>)
 8016556:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801655c:	2201      	movs	r2, #1
 801655e:	409a      	lsls	r2, r3
 8016560:	4b19      	ldr	r3, [pc, #100]	; (80165c8 <prvAddNewTaskToReadyList+0xc8>)
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	4313      	orrs	r3, r2
 8016566:	4a18      	ldr	r2, [pc, #96]	; (80165c8 <prvAddNewTaskToReadyList+0xc8>)
 8016568:	6013      	str	r3, [r2, #0]
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801656e:	4613      	mov	r3, r2
 8016570:	009b      	lsls	r3, r3, #2
 8016572:	4413      	add	r3, r2
 8016574:	009b      	lsls	r3, r3, #2
 8016576:	4a15      	ldr	r2, [pc, #84]	; (80165cc <prvAddNewTaskToReadyList+0xcc>)
 8016578:	441a      	add	r2, r3
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	3304      	adds	r3, #4
 801657e:	4619      	mov	r1, r3
 8016580:	4610      	mov	r0, r2
 8016582:	f7fe fe23 	bl	80151cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016586:	f001 fb59 	bl	8017c3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801658a:	4b0d      	ldr	r3, [pc, #52]	; (80165c0 <prvAddNewTaskToReadyList+0xc0>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d00e      	beq.n	80165b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016592:	4b0a      	ldr	r3, [pc, #40]	; (80165bc <prvAddNewTaskToReadyList+0xbc>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801659c:	429a      	cmp	r2, r3
 801659e:	d207      	bcs.n	80165b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80165a0:	4b0b      	ldr	r3, [pc, #44]	; (80165d0 <prvAddNewTaskToReadyList+0xd0>)
 80165a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165a6:	601a      	str	r2, [r3, #0]
 80165a8:	f3bf 8f4f 	dsb	sy
 80165ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80165b0:	bf00      	nop
 80165b2:	3708      	adds	r7, #8
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd80      	pop	{r7, pc}
 80165b8:	20002428 	.word	0x20002428
 80165bc:	20002328 	.word	0x20002328
 80165c0:	20002434 	.word	0x20002434
 80165c4:	20002444 	.word	0x20002444
 80165c8:	20002430 	.word	0x20002430
 80165cc:	2000232c 	.word	0x2000232c
 80165d0:	e000ed04 	.word	0xe000ed04

080165d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80165dc:	2300      	movs	r3, #0
 80165de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d017      	beq.n	8016616 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80165e6:	4b13      	ldr	r3, [pc, #76]	; (8016634 <vTaskDelay+0x60>)
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d00a      	beq.n	8016604 <vTaskDelay+0x30>
	__asm volatile
 80165ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165f2:	f383 8811 	msr	BASEPRI, r3
 80165f6:	f3bf 8f6f 	isb	sy
 80165fa:	f3bf 8f4f 	dsb	sy
 80165fe:	60bb      	str	r3, [r7, #8]
}
 8016600:	bf00      	nop
 8016602:	e7fe      	b.n	8016602 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016604:	f000 f88a 	bl	801671c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016608:	2100      	movs	r1, #0
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 fe62 	bl	80172d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016610:	f000 f892 	bl	8016738 <xTaskResumeAll>
 8016614:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d107      	bne.n	801662c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801661c:	4b06      	ldr	r3, [pc, #24]	; (8016638 <vTaskDelay+0x64>)
 801661e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016622:	601a      	str	r2, [r3, #0]
 8016624:	f3bf 8f4f 	dsb	sy
 8016628:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801662c:	bf00      	nop
 801662e:	3710      	adds	r7, #16
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}
 8016634:	20002450 	.word	0x20002450
 8016638:	e000ed04 	.word	0xe000ed04

0801663c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b08a      	sub	sp, #40	; 0x28
 8016640:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016642:	2300      	movs	r3, #0
 8016644:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016646:	2300      	movs	r3, #0
 8016648:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801664a:	463a      	mov	r2, r7
 801664c:	1d39      	adds	r1, r7, #4
 801664e:	f107 0308 	add.w	r3, r7, #8
 8016652:	4618      	mov	r0, r3
 8016654:	f7f2 ff8e 	bl	8009574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016658:	6839      	ldr	r1, [r7, #0]
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	68ba      	ldr	r2, [r7, #8]
 801665e:	9202      	str	r2, [sp, #8]
 8016660:	9301      	str	r3, [sp, #4]
 8016662:	2300      	movs	r3, #0
 8016664:	9300      	str	r3, [sp, #0]
 8016666:	2300      	movs	r3, #0
 8016668:	460a      	mov	r2, r1
 801666a:	4924      	ldr	r1, [pc, #144]	; (80166fc <vTaskStartScheduler+0xc0>)
 801666c:	4824      	ldr	r0, [pc, #144]	; (8016700 <vTaskStartScheduler+0xc4>)
 801666e:	f7ff fdd1 	bl	8016214 <xTaskCreateStatic>
 8016672:	4603      	mov	r3, r0
 8016674:	4a23      	ldr	r2, [pc, #140]	; (8016704 <vTaskStartScheduler+0xc8>)
 8016676:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016678:	4b22      	ldr	r3, [pc, #136]	; (8016704 <vTaskStartScheduler+0xc8>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d002      	beq.n	8016686 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016680:	2301      	movs	r3, #1
 8016682:	617b      	str	r3, [r7, #20]
 8016684:	e001      	b.n	801668a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016686:	2300      	movs	r3, #0
 8016688:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801668a:	697b      	ldr	r3, [r7, #20]
 801668c:	2b01      	cmp	r3, #1
 801668e:	d102      	bne.n	8016696 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016690:	f000 fe86 	bl	80173a0 <xTimerCreateTimerTask>
 8016694:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016696:	697b      	ldr	r3, [r7, #20]
 8016698:	2b01      	cmp	r3, #1
 801669a:	d11b      	bne.n	80166d4 <vTaskStartScheduler+0x98>
	__asm volatile
 801669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a0:	f383 8811 	msr	BASEPRI, r3
 80166a4:	f3bf 8f6f 	isb	sy
 80166a8:	f3bf 8f4f 	dsb	sy
 80166ac:	613b      	str	r3, [r7, #16]
}
 80166ae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80166b0:	4b15      	ldr	r3, [pc, #84]	; (8016708 <vTaskStartScheduler+0xcc>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	3350      	adds	r3, #80	; 0x50
 80166b6:	4a15      	ldr	r2, [pc, #84]	; (801670c <vTaskStartScheduler+0xd0>)
 80166b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80166ba:	4b15      	ldr	r3, [pc, #84]	; (8016710 <vTaskStartScheduler+0xd4>)
 80166bc:	f04f 32ff 	mov.w	r2, #4294967295
 80166c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80166c2:	4b14      	ldr	r3, [pc, #80]	; (8016714 <vTaskStartScheduler+0xd8>)
 80166c4:	2201      	movs	r2, #1
 80166c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80166c8:	4b13      	ldr	r3, [pc, #76]	; (8016718 <vTaskStartScheduler+0xdc>)
 80166ca:	2200      	movs	r2, #0
 80166cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80166ce:	f001 fa13 	bl	8017af8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80166d2:	e00e      	b.n	80166f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80166d4:	697b      	ldr	r3, [r7, #20]
 80166d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166da:	d10a      	bne.n	80166f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80166dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166e0:	f383 8811 	msr	BASEPRI, r3
 80166e4:	f3bf 8f6f 	isb	sy
 80166e8:	f3bf 8f4f 	dsb	sy
 80166ec:	60fb      	str	r3, [r7, #12]
}
 80166ee:	bf00      	nop
 80166f0:	e7fe      	b.n	80166f0 <vTaskStartScheduler+0xb4>
}
 80166f2:	bf00      	nop
 80166f4:	3718      	adds	r7, #24
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}
 80166fa:	bf00      	nop
 80166fc:	0801f914 	.word	0x0801f914
 8016700:	08016d79 	.word	0x08016d79
 8016704:	2000244c 	.word	0x2000244c
 8016708:	20002328 	.word	0x20002328
 801670c:	200001c8 	.word	0x200001c8
 8016710:	20002448 	.word	0x20002448
 8016714:	20002434 	.word	0x20002434
 8016718:	2000242c 	.word	0x2000242c

0801671c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801671c:	b480      	push	{r7}
 801671e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016720:	4b04      	ldr	r3, [pc, #16]	; (8016734 <vTaskSuspendAll+0x18>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	3301      	adds	r3, #1
 8016726:	4a03      	ldr	r2, [pc, #12]	; (8016734 <vTaskSuspendAll+0x18>)
 8016728:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801672a:	bf00      	nop
 801672c:	46bd      	mov	sp, r7
 801672e:	bc80      	pop	{r7}
 8016730:	4770      	bx	lr
 8016732:	bf00      	nop
 8016734:	20002450 	.word	0x20002450

08016738 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b084      	sub	sp, #16
 801673c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801673e:	2300      	movs	r3, #0
 8016740:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016742:	2300      	movs	r3, #0
 8016744:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016746:	4b41      	ldr	r3, [pc, #260]	; (801684c <xTaskResumeAll+0x114>)
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d10a      	bne.n	8016764 <xTaskResumeAll+0x2c>
	__asm volatile
 801674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016752:	f383 8811 	msr	BASEPRI, r3
 8016756:	f3bf 8f6f 	isb	sy
 801675a:	f3bf 8f4f 	dsb	sy
 801675e:	603b      	str	r3, [r7, #0]
}
 8016760:	bf00      	nop
 8016762:	e7fe      	b.n	8016762 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016764:	f001 fa3a 	bl	8017bdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016768:	4b38      	ldr	r3, [pc, #224]	; (801684c <xTaskResumeAll+0x114>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	3b01      	subs	r3, #1
 801676e:	4a37      	ldr	r2, [pc, #220]	; (801684c <xTaskResumeAll+0x114>)
 8016770:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016772:	4b36      	ldr	r3, [pc, #216]	; (801684c <xTaskResumeAll+0x114>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d161      	bne.n	801683e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801677a:	4b35      	ldr	r3, [pc, #212]	; (8016850 <xTaskResumeAll+0x118>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d05d      	beq.n	801683e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016782:	e02e      	b.n	80167e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016784:	4b33      	ldr	r3, [pc, #204]	; (8016854 <xTaskResumeAll+0x11c>)
 8016786:	68db      	ldr	r3, [r3, #12]
 8016788:	68db      	ldr	r3, [r3, #12]
 801678a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	3318      	adds	r3, #24
 8016790:	4618      	mov	r0, r3
 8016792:	f7fe fd76 	bl	8015282 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	3304      	adds	r3, #4
 801679a:	4618      	mov	r0, r3
 801679c:	f7fe fd71 	bl	8015282 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167a4:	2201      	movs	r2, #1
 80167a6:	409a      	lsls	r2, r3
 80167a8:	4b2b      	ldr	r3, [pc, #172]	; (8016858 <xTaskResumeAll+0x120>)
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	4313      	orrs	r3, r2
 80167ae:	4a2a      	ldr	r2, [pc, #168]	; (8016858 <xTaskResumeAll+0x120>)
 80167b0:	6013      	str	r3, [r2, #0]
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167b6:	4613      	mov	r3, r2
 80167b8:	009b      	lsls	r3, r3, #2
 80167ba:	4413      	add	r3, r2
 80167bc:	009b      	lsls	r3, r3, #2
 80167be:	4a27      	ldr	r2, [pc, #156]	; (801685c <xTaskResumeAll+0x124>)
 80167c0:	441a      	add	r2, r3
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	3304      	adds	r3, #4
 80167c6:	4619      	mov	r1, r3
 80167c8:	4610      	mov	r0, r2
 80167ca:	f7fe fcff 	bl	80151cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167d2:	4b23      	ldr	r3, [pc, #140]	; (8016860 <xTaskResumeAll+0x128>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167d8:	429a      	cmp	r2, r3
 80167da:	d302      	bcc.n	80167e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80167dc:	4b21      	ldr	r3, [pc, #132]	; (8016864 <xTaskResumeAll+0x12c>)
 80167de:	2201      	movs	r2, #1
 80167e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80167e2:	4b1c      	ldr	r3, [pc, #112]	; (8016854 <xTaskResumeAll+0x11c>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d1cc      	bne.n	8016784 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d001      	beq.n	80167f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80167f0:	f000 fb7e 	bl	8016ef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80167f4:	4b1c      	ldr	r3, [pc, #112]	; (8016868 <xTaskResumeAll+0x130>)
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d010      	beq.n	8016822 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016800:	f000 f844 	bl	801688c <xTaskIncrementTick>
 8016804:	4603      	mov	r3, r0
 8016806:	2b00      	cmp	r3, #0
 8016808:	d002      	beq.n	8016810 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801680a:	4b16      	ldr	r3, [pc, #88]	; (8016864 <xTaskResumeAll+0x12c>)
 801680c:	2201      	movs	r2, #1
 801680e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	3b01      	subs	r3, #1
 8016814:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d1f1      	bne.n	8016800 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801681c:	4b12      	ldr	r3, [pc, #72]	; (8016868 <xTaskResumeAll+0x130>)
 801681e:	2200      	movs	r2, #0
 8016820:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016822:	4b10      	ldr	r3, [pc, #64]	; (8016864 <xTaskResumeAll+0x12c>)
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d009      	beq.n	801683e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801682a:	2301      	movs	r3, #1
 801682c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801682e:	4b0f      	ldr	r3, [pc, #60]	; (801686c <xTaskResumeAll+0x134>)
 8016830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016834:	601a      	str	r2, [r3, #0]
 8016836:	f3bf 8f4f 	dsb	sy
 801683a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801683e:	f001 f9fd 	bl	8017c3c <vPortExitCritical>

	return xAlreadyYielded;
 8016842:	68bb      	ldr	r3, [r7, #8]
}
 8016844:	4618      	mov	r0, r3
 8016846:	3710      	adds	r7, #16
 8016848:	46bd      	mov	sp, r7
 801684a:	bd80      	pop	{r7, pc}
 801684c:	20002450 	.word	0x20002450
 8016850:	20002428 	.word	0x20002428
 8016854:	200023e8 	.word	0x200023e8
 8016858:	20002430 	.word	0x20002430
 801685c:	2000232c 	.word	0x2000232c
 8016860:	20002328 	.word	0x20002328
 8016864:	2000243c 	.word	0x2000243c
 8016868:	20002438 	.word	0x20002438
 801686c:	e000ed04 	.word	0xe000ed04

08016870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016870:	b480      	push	{r7}
 8016872:	b083      	sub	sp, #12
 8016874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016876:	4b04      	ldr	r3, [pc, #16]	; (8016888 <xTaskGetTickCount+0x18>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801687c:	687b      	ldr	r3, [r7, #4]
}
 801687e:	4618      	mov	r0, r3
 8016880:	370c      	adds	r7, #12
 8016882:	46bd      	mov	sp, r7
 8016884:	bc80      	pop	{r7}
 8016886:	4770      	bx	lr
 8016888:	2000242c 	.word	0x2000242c

0801688c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b086      	sub	sp, #24
 8016890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016892:	2300      	movs	r3, #0
 8016894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016896:	4b4e      	ldr	r3, [pc, #312]	; (80169d0 <xTaskIncrementTick+0x144>)
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	2b00      	cmp	r3, #0
 801689c:	f040 8088 	bne.w	80169b0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80168a0:	4b4c      	ldr	r3, [pc, #304]	; (80169d4 <xTaskIncrementTick+0x148>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	3301      	adds	r3, #1
 80168a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80168a8:	4a4a      	ldr	r2, [pc, #296]	; (80169d4 <xTaskIncrementTick+0x148>)
 80168aa:	693b      	ldr	r3, [r7, #16]
 80168ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80168ae:	693b      	ldr	r3, [r7, #16]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d120      	bne.n	80168f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80168b4:	4b48      	ldr	r3, [pc, #288]	; (80169d8 <xTaskIncrementTick+0x14c>)
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d00a      	beq.n	80168d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80168be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c2:	f383 8811 	msr	BASEPRI, r3
 80168c6:	f3bf 8f6f 	isb	sy
 80168ca:	f3bf 8f4f 	dsb	sy
 80168ce:	603b      	str	r3, [r7, #0]
}
 80168d0:	bf00      	nop
 80168d2:	e7fe      	b.n	80168d2 <xTaskIncrementTick+0x46>
 80168d4:	4b40      	ldr	r3, [pc, #256]	; (80169d8 <xTaskIncrementTick+0x14c>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	60fb      	str	r3, [r7, #12]
 80168da:	4b40      	ldr	r3, [pc, #256]	; (80169dc <xTaskIncrementTick+0x150>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	4a3e      	ldr	r2, [pc, #248]	; (80169d8 <xTaskIncrementTick+0x14c>)
 80168e0:	6013      	str	r3, [r2, #0]
 80168e2:	4a3e      	ldr	r2, [pc, #248]	; (80169dc <xTaskIncrementTick+0x150>)
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	6013      	str	r3, [r2, #0]
 80168e8:	4b3d      	ldr	r3, [pc, #244]	; (80169e0 <xTaskIncrementTick+0x154>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	3301      	adds	r3, #1
 80168ee:	4a3c      	ldr	r2, [pc, #240]	; (80169e0 <xTaskIncrementTick+0x154>)
 80168f0:	6013      	str	r3, [r2, #0]
 80168f2:	f000 fafd 	bl	8016ef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80168f6:	4b3b      	ldr	r3, [pc, #236]	; (80169e4 <xTaskIncrementTick+0x158>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	693a      	ldr	r2, [r7, #16]
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d348      	bcc.n	8016992 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016900:	4b35      	ldr	r3, [pc, #212]	; (80169d8 <xTaskIncrementTick+0x14c>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d104      	bne.n	8016914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801690a:	4b36      	ldr	r3, [pc, #216]	; (80169e4 <xTaskIncrementTick+0x158>)
 801690c:	f04f 32ff 	mov.w	r2, #4294967295
 8016910:	601a      	str	r2, [r3, #0]
					break;
 8016912:	e03e      	b.n	8016992 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016914:	4b30      	ldr	r3, [pc, #192]	; (80169d8 <xTaskIncrementTick+0x14c>)
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	68db      	ldr	r3, [r3, #12]
 801691a:	68db      	ldr	r3, [r3, #12]
 801691c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	685b      	ldr	r3, [r3, #4]
 8016922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016924:	693a      	ldr	r2, [r7, #16]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	429a      	cmp	r2, r3
 801692a:	d203      	bcs.n	8016934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801692c:	4a2d      	ldr	r2, [pc, #180]	; (80169e4 <xTaskIncrementTick+0x158>)
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016932:	e02e      	b.n	8016992 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016934:	68bb      	ldr	r3, [r7, #8]
 8016936:	3304      	adds	r3, #4
 8016938:	4618      	mov	r0, r3
 801693a:	f7fe fca2 	bl	8015282 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801693e:	68bb      	ldr	r3, [r7, #8]
 8016940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016942:	2b00      	cmp	r3, #0
 8016944:	d004      	beq.n	8016950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016946:	68bb      	ldr	r3, [r7, #8]
 8016948:	3318      	adds	r3, #24
 801694a:	4618      	mov	r0, r3
 801694c:	f7fe fc99 	bl	8015282 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016950:	68bb      	ldr	r3, [r7, #8]
 8016952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016954:	2201      	movs	r2, #1
 8016956:	409a      	lsls	r2, r3
 8016958:	4b23      	ldr	r3, [pc, #140]	; (80169e8 <xTaskIncrementTick+0x15c>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	4313      	orrs	r3, r2
 801695e:	4a22      	ldr	r2, [pc, #136]	; (80169e8 <xTaskIncrementTick+0x15c>)
 8016960:	6013      	str	r3, [r2, #0]
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016966:	4613      	mov	r3, r2
 8016968:	009b      	lsls	r3, r3, #2
 801696a:	4413      	add	r3, r2
 801696c:	009b      	lsls	r3, r3, #2
 801696e:	4a1f      	ldr	r2, [pc, #124]	; (80169ec <xTaskIncrementTick+0x160>)
 8016970:	441a      	add	r2, r3
 8016972:	68bb      	ldr	r3, [r7, #8]
 8016974:	3304      	adds	r3, #4
 8016976:	4619      	mov	r1, r3
 8016978:	4610      	mov	r0, r2
 801697a:	f7fe fc27 	bl	80151cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016982:	4b1b      	ldr	r3, [pc, #108]	; (80169f0 <xTaskIncrementTick+0x164>)
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016988:	429a      	cmp	r2, r3
 801698a:	d3b9      	bcc.n	8016900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801698c:	2301      	movs	r3, #1
 801698e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016990:	e7b6      	b.n	8016900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016992:	4b17      	ldr	r3, [pc, #92]	; (80169f0 <xTaskIncrementTick+0x164>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016998:	4914      	ldr	r1, [pc, #80]	; (80169ec <xTaskIncrementTick+0x160>)
 801699a:	4613      	mov	r3, r2
 801699c:	009b      	lsls	r3, r3, #2
 801699e:	4413      	add	r3, r2
 80169a0:	009b      	lsls	r3, r3, #2
 80169a2:	440b      	add	r3, r1
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	2b01      	cmp	r3, #1
 80169a8:	d907      	bls.n	80169ba <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80169aa:	2301      	movs	r3, #1
 80169ac:	617b      	str	r3, [r7, #20]
 80169ae:	e004      	b.n	80169ba <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80169b0:	4b10      	ldr	r3, [pc, #64]	; (80169f4 <xTaskIncrementTick+0x168>)
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	3301      	adds	r3, #1
 80169b6:	4a0f      	ldr	r2, [pc, #60]	; (80169f4 <xTaskIncrementTick+0x168>)
 80169b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80169ba:	4b0f      	ldr	r3, [pc, #60]	; (80169f8 <xTaskIncrementTick+0x16c>)
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d001      	beq.n	80169c6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80169c2:	2301      	movs	r3, #1
 80169c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80169c6:	697b      	ldr	r3, [r7, #20]
}
 80169c8:	4618      	mov	r0, r3
 80169ca:	3718      	adds	r7, #24
 80169cc:	46bd      	mov	sp, r7
 80169ce:	bd80      	pop	{r7, pc}
 80169d0:	20002450 	.word	0x20002450
 80169d4:	2000242c 	.word	0x2000242c
 80169d8:	200023e0 	.word	0x200023e0
 80169dc:	200023e4 	.word	0x200023e4
 80169e0:	20002440 	.word	0x20002440
 80169e4:	20002448 	.word	0x20002448
 80169e8:	20002430 	.word	0x20002430
 80169ec:	2000232c 	.word	0x2000232c
 80169f0:	20002328 	.word	0x20002328
 80169f4:	20002438 	.word	0x20002438
 80169f8:	2000243c 	.word	0x2000243c

080169fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b088      	sub	sp, #32
 8016a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016a02:	4b3c      	ldr	r3, [pc, #240]	; (8016af4 <vTaskSwitchContext+0xf8>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d003      	beq.n	8016a12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016a0a:	4b3b      	ldr	r3, [pc, #236]	; (8016af8 <vTaskSwitchContext+0xfc>)
 8016a0c:	2201      	movs	r2, #1
 8016a0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016a10:	e06b      	b.n	8016aea <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8016a12:	4b39      	ldr	r3, [pc, #228]	; (8016af8 <vTaskSwitchContext+0xfc>)
 8016a14:	2200      	movs	r2, #0
 8016a16:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016a18:	4b38      	ldr	r3, [pc, #224]	; (8016afc <vTaskSwitchContext+0x100>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a1e:	61fb      	str	r3, [r7, #28]
 8016a20:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8016a24:	61bb      	str	r3, [r7, #24]
 8016a26:	69fb      	ldr	r3, [r7, #28]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	69ba      	ldr	r2, [r7, #24]
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d111      	bne.n	8016a54 <vTaskSwitchContext+0x58>
 8016a30:	69fb      	ldr	r3, [r7, #28]
 8016a32:	3304      	adds	r3, #4
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	69ba      	ldr	r2, [r7, #24]
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d10b      	bne.n	8016a54 <vTaskSwitchContext+0x58>
 8016a3c:	69fb      	ldr	r3, [r7, #28]
 8016a3e:	3308      	adds	r3, #8
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	69ba      	ldr	r2, [r7, #24]
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d105      	bne.n	8016a54 <vTaskSwitchContext+0x58>
 8016a48:	69fb      	ldr	r3, [r7, #28]
 8016a4a:	330c      	adds	r3, #12
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	69ba      	ldr	r2, [r7, #24]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d008      	beq.n	8016a66 <vTaskSwitchContext+0x6a>
 8016a54:	4b29      	ldr	r3, [pc, #164]	; (8016afc <vTaskSwitchContext+0x100>)
 8016a56:	681a      	ldr	r2, [r3, #0]
 8016a58:	4b28      	ldr	r3, [pc, #160]	; (8016afc <vTaskSwitchContext+0x100>)
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	3334      	adds	r3, #52	; 0x34
 8016a5e:	4619      	mov	r1, r3
 8016a60:	4610      	mov	r0, r2
 8016a62:	f7f2 fdb9 	bl	80095d8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a66:	4b26      	ldr	r3, [pc, #152]	; (8016b00 <vTaskSwitchContext+0x104>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	fab3 f383 	clz	r3, r3
 8016a72:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016a74:	7afb      	ldrb	r3, [r7, #11]
 8016a76:	f1c3 031f 	rsb	r3, r3, #31
 8016a7a:	617b      	str	r3, [r7, #20]
 8016a7c:	4921      	ldr	r1, [pc, #132]	; (8016b04 <vTaskSwitchContext+0x108>)
 8016a7e:	697a      	ldr	r2, [r7, #20]
 8016a80:	4613      	mov	r3, r2
 8016a82:	009b      	lsls	r3, r3, #2
 8016a84:	4413      	add	r3, r2
 8016a86:	009b      	lsls	r3, r3, #2
 8016a88:	440b      	add	r3, r1
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d10a      	bne.n	8016aa6 <vTaskSwitchContext+0xaa>
	__asm volatile
 8016a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a94:	f383 8811 	msr	BASEPRI, r3
 8016a98:	f3bf 8f6f 	isb	sy
 8016a9c:	f3bf 8f4f 	dsb	sy
 8016aa0:	607b      	str	r3, [r7, #4]
}
 8016aa2:	bf00      	nop
 8016aa4:	e7fe      	b.n	8016aa4 <vTaskSwitchContext+0xa8>
 8016aa6:	697a      	ldr	r2, [r7, #20]
 8016aa8:	4613      	mov	r3, r2
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	4413      	add	r3, r2
 8016aae:	009b      	lsls	r3, r3, #2
 8016ab0:	4a14      	ldr	r2, [pc, #80]	; (8016b04 <vTaskSwitchContext+0x108>)
 8016ab2:	4413      	add	r3, r2
 8016ab4:	613b      	str	r3, [r7, #16]
 8016ab6:	693b      	ldr	r3, [r7, #16]
 8016ab8:	685b      	ldr	r3, [r3, #4]
 8016aba:	685a      	ldr	r2, [r3, #4]
 8016abc:	693b      	ldr	r3, [r7, #16]
 8016abe:	605a      	str	r2, [r3, #4]
 8016ac0:	693b      	ldr	r3, [r7, #16]
 8016ac2:	685a      	ldr	r2, [r3, #4]
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	3308      	adds	r3, #8
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d104      	bne.n	8016ad6 <vTaskSwitchContext+0xda>
 8016acc:	693b      	ldr	r3, [r7, #16]
 8016ace:	685b      	ldr	r3, [r3, #4]
 8016ad0:	685a      	ldr	r2, [r3, #4]
 8016ad2:	693b      	ldr	r3, [r7, #16]
 8016ad4:	605a      	str	r2, [r3, #4]
 8016ad6:	693b      	ldr	r3, [r7, #16]
 8016ad8:	685b      	ldr	r3, [r3, #4]
 8016ada:	68db      	ldr	r3, [r3, #12]
 8016adc:	4a07      	ldr	r2, [pc, #28]	; (8016afc <vTaskSwitchContext+0x100>)
 8016ade:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016ae0:	4b06      	ldr	r3, [pc, #24]	; (8016afc <vTaskSwitchContext+0x100>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	3350      	adds	r3, #80	; 0x50
 8016ae6:	4a08      	ldr	r2, [pc, #32]	; (8016b08 <vTaskSwitchContext+0x10c>)
 8016ae8:	6013      	str	r3, [r2, #0]
}
 8016aea:	bf00      	nop
 8016aec:	3720      	adds	r7, #32
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bd80      	pop	{r7, pc}
 8016af2:	bf00      	nop
 8016af4:	20002450 	.word	0x20002450
 8016af8:	2000243c 	.word	0x2000243c
 8016afc:	20002328 	.word	0x20002328
 8016b00:	20002430 	.word	0x20002430
 8016b04:	2000232c 	.word	0x2000232c
 8016b08:	200001c8 	.word	0x200001c8

08016b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b084      	sub	sp, #16
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
 8016b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d10a      	bne.n	8016b32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b20:	f383 8811 	msr	BASEPRI, r3
 8016b24:	f3bf 8f6f 	isb	sy
 8016b28:	f3bf 8f4f 	dsb	sy
 8016b2c:	60fb      	str	r3, [r7, #12]
}
 8016b2e:	bf00      	nop
 8016b30:	e7fe      	b.n	8016b30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016b32:	4b07      	ldr	r3, [pc, #28]	; (8016b50 <vTaskPlaceOnEventList+0x44>)
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	3318      	adds	r3, #24
 8016b38:	4619      	mov	r1, r3
 8016b3a:	6878      	ldr	r0, [r7, #4]
 8016b3c:	f7fe fb69 	bl	8015212 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016b40:	2101      	movs	r1, #1
 8016b42:	6838      	ldr	r0, [r7, #0]
 8016b44:	f000 fbc6 	bl	80172d4 <prvAddCurrentTaskToDelayedList>
}
 8016b48:	bf00      	nop
 8016b4a:	3710      	adds	r7, #16
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	20002328 	.word	0x20002328

08016b54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b086      	sub	sp, #24
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	60f8      	str	r0, [r7, #12]
 8016b5c:	60b9      	str	r1, [r7, #8]
 8016b5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d10a      	bne.n	8016b7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b6a:	f383 8811 	msr	BASEPRI, r3
 8016b6e:	f3bf 8f6f 	isb	sy
 8016b72:	f3bf 8f4f 	dsb	sy
 8016b76:	617b      	str	r3, [r7, #20]
}
 8016b78:	bf00      	nop
 8016b7a:	e7fe      	b.n	8016b7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016b7c:	4b0a      	ldr	r3, [pc, #40]	; (8016ba8 <vTaskPlaceOnEventListRestricted+0x54>)
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	3318      	adds	r3, #24
 8016b82:	4619      	mov	r1, r3
 8016b84:	68f8      	ldr	r0, [r7, #12]
 8016b86:	f7fe fb21 	bl	80151cc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d002      	beq.n	8016b96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016b90:	f04f 33ff 	mov.w	r3, #4294967295
 8016b94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016b96:	6879      	ldr	r1, [r7, #4]
 8016b98:	68b8      	ldr	r0, [r7, #8]
 8016b9a:	f000 fb9b 	bl	80172d4 <prvAddCurrentTaskToDelayedList>
	}
 8016b9e:	bf00      	nop
 8016ba0:	3718      	adds	r7, #24
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}
 8016ba6:	bf00      	nop
 8016ba8:	20002328 	.word	0x20002328

08016bac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b086      	sub	sp, #24
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	68db      	ldr	r3, [r3, #12]
 8016bb8:	68db      	ldr	r3, [r3, #12]
 8016bba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016bbc:	693b      	ldr	r3, [r7, #16]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d10a      	bne.n	8016bd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bc6:	f383 8811 	msr	BASEPRI, r3
 8016bca:	f3bf 8f6f 	isb	sy
 8016bce:	f3bf 8f4f 	dsb	sy
 8016bd2:	60fb      	str	r3, [r7, #12]
}
 8016bd4:	bf00      	nop
 8016bd6:	e7fe      	b.n	8016bd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016bd8:	693b      	ldr	r3, [r7, #16]
 8016bda:	3318      	adds	r3, #24
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f7fe fb50 	bl	8015282 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016be2:	4b1d      	ldr	r3, [pc, #116]	; (8016c58 <xTaskRemoveFromEventList+0xac>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d11c      	bne.n	8016c24 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016bea:	693b      	ldr	r3, [r7, #16]
 8016bec:	3304      	adds	r3, #4
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7fe fb47 	bl	8015282 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016bf4:	693b      	ldr	r3, [r7, #16]
 8016bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bf8:	2201      	movs	r2, #1
 8016bfa:	409a      	lsls	r2, r3
 8016bfc:	4b17      	ldr	r3, [pc, #92]	; (8016c5c <xTaskRemoveFromEventList+0xb0>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	4313      	orrs	r3, r2
 8016c02:	4a16      	ldr	r2, [pc, #88]	; (8016c5c <xTaskRemoveFromEventList+0xb0>)
 8016c04:	6013      	str	r3, [r2, #0]
 8016c06:	693b      	ldr	r3, [r7, #16]
 8016c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c0a:	4613      	mov	r3, r2
 8016c0c:	009b      	lsls	r3, r3, #2
 8016c0e:	4413      	add	r3, r2
 8016c10:	009b      	lsls	r3, r3, #2
 8016c12:	4a13      	ldr	r2, [pc, #76]	; (8016c60 <xTaskRemoveFromEventList+0xb4>)
 8016c14:	441a      	add	r2, r3
 8016c16:	693b      	ldr	r3, [r7, #16]
 8016c18:	3304      	adds	r3, #4
 8016c1a:	4619      	mov	r1, r3
 8016c1c:	4610      	mov	r0, r2
 8016c1e:	f7fe fad5 	bl	80151cc <vListInsertEnd>
 8016c22:	e005      	b.n	8016c30 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	3318      	adds	r3, #24
 8016c28:	4619      	mov	r1, r3
 8016c2a:	480e      	ldr	r0, [pc, #56]	; (8016c64 <xTaskRemoveFromEventList+0xb8>)
 8016c2c:	f7fe face 	bl	80151cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016c30:	693b      	ldr	r3, [r7, #16]
 8016c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c34:	4b0c      	ldr	r3, [pc, #48]	; (8016c68 <xTaskRemoveFromEventList+0xbc>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c3a:	429a      	cmp	r2, r3
 8016c3c:	d905      	bls.n	8016c4a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016c3e:	2301      	movs	r3, #1
 8016c40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016c42:	4b0a      	ldr	r3, [pc, #40]	; (8016c6c <xTaskRemoveFromEventList+0xc0>)
 8016c44:	2201      	movs	r2, #1
 8016c46:	601a      	str	r2, [r3, #0]
 8016c48:	e001      	b.n	8016c4e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016c4e:	697b      	ldr	r3, [r7, #20]
}
 8016c50:	4618      	mov	r0, r3
 8016c52:	3718      	adds	r7, #24
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}
 8016c58:	20002450 	.word	0x20002450
 8016c5c:	20002430 	.word	0x20002430
 8016c60:	2000232c 	.word	0x2000232c
 8016c64:	200023e8 	.word	0x200023e8
 8016c68:	20002328 	.word	0x20002328
 8016c6c:	2000243c 	.word	0x2000243c

08016c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016c70:	b480      	push	{r7}
 8016c72:	b083      	sub	sp, #12
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016c78:	4b06      	ldr	r3, [pc, #24]	; (8016c94 <vTaskInternalSetTimeOutState+0x24>)
 8016c7a:	681a      	ldr	r2, [r3, #0]
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016c80:	4b05      	ldr	r3, [pc, #20]	; (8016c98 <vTaskInternalSetTimeOutState+0x28>)
 8016c82:	681a      	ldr	r2, [r3, #0]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	605a      	str	r2, [r3, #4]
}
 8016c88:	bf00      	nop
 8016c8a:	370c      	adds	r7, #12
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bc80      	pop	{r7}
 8016c90:	4770      	bx	lr
 8016c92:	bf00      	nop
 8016c94:	20002440 	.word	0x20002440
 8016c98:	2000242c 	.word	0x2000242c

08016c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b088      	sub	sp, #32
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
 8016ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d10a      	bne.n	8016cc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb0:	f383 8811 	msr	BASEPRI, r3
 8016cb4:	f3bf 8f6f 	isb	sy
 8016cb8:	f3bf 8f4f 	dsb	sy
 8016cbc:	613b      	str	r3, [r7, #16]
}
 8016cbe:	bf00      	nop
 8016cc0:	e7fe      	b.n	8016cc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d10a      	bne.n	8016cde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ccc:	f383 8811 	msr	BASEPRI, r3
 8016cd0:	f3bf 8f6f 	isb	sy
 8016cd4:	f3bf 8f4f 	dsb	sy
 8016cd8:	60fb      	str	r3, [r7, #12]
}
 8016cda:	bf00      	nop
 8016cdc:	e7fe      	b.n	8016cdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016cde:	f000 ff7d 	bl	8017bdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016ce2:	4b1d      	ldr	r3, [pc, #116]	; (8016d58 <xTaskCheckForTimeOut+0xbc>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	685b      	ldr	r3, [r3, #4]
 8016cec:	69ba      	ldr	r2, [r7, #24]
 8016cee:	1ad3      	subs	r3, r2, r3
 8016cf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cfa:	d102      	bne.n	8016d02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	61fb      	str	r3, [r7, #28]
 8016d00:	e023      	b.n	8016d4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	681a      	ldr	r2, [r3, #0]
 8016d06:	4b15      	ldr	r3, [pc, #84]	; (8016d5c <xTaskCheckForTimeOut+0xc0>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	429a      	cmp	r2, r3
 8016d0c:	d007      	beq.n	8016d1e <xTaskCheckForTimeOut+0x82>
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	685b      	ldr	r3, [r3, #4]
 8016d12:	69ba      	ldr	r2, [r7, #24]
 8016d14:	429a      	cmp	r2, r3
 8016d16:	d302      	bcc.n	8016d1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016d18:	2301      	movs	r3, #1
 8016d1a:	61fb      	str	r3, [r7, #28]
 8016d1c:	e015      	b.n	8016d4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016d1e:	683b      	ldr	r3, [r7, #0]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	697a      	ldr	r2, [r7, #20]
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d20b      	bcs.n	8016d40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016d28:	683b      	ldr	r3, [r7, #0]
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	697b      	ldr	r3, [r7, #20]
 8016d2e:	1ad2      	subs	r2, r2, r3
 8016d30:	683b      	ldr	r3, [r7, #0]
 8016d32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f7ff ff9b 	bl	8016c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	61fb      	str	r3, [r7, #28]
 8016d3e:	e004      	b.n	8016d4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	2200      	movs	r2, #0
 8016d44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016d46:	2301      	movs	r3, #1
 8016d48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016d4a:	f000 ff77 	bl	8017c3c <vPortExitCritical>

	return xReturn;
 8016d4e:	69fb      	ldr	r3, [r7, #28]
}
 8016d50:	4618      	mov	r0, r3
 8016d52:	3720      	adds	r7, #32
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	2000242c 	.word	0x2000242c
 8016d5c:	20002440 	.word	0x20002440

08016d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016d60:	b480      	push	{r7}
 8016d62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016d64:	4b03      	ldr	r3, [pc, #12]	; (8016d74 <vTaskMissedYield+0x14>)
 8016d66:	2201      	movs	r2, #1
 8016d68:	601a      	str	r2, [r3, #0]
}
 8016d6a:	bf00      	nop
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bc80      	pop	{r7}
 8016d70:	4770      	bx	lr
 8016d72:	bf00      	nop
 8016d74:	2000243c 	.word	0x2000243c

08016d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b082      	sub	sp, #8
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016d80:	f000 f854 	bl	8016e2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016d84:	4b07      	ldr	r3, [pc, #28]	; (8016da4 <prvIdleTask+0x2c>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	2b01      	cmp	r3, #1
 8016d8a:	d907      	bls.n	8016d9c <prvIdleTask+0x24>
			{
				taskYIELD();
 8016d8c:	4b06      	ldr	r3, [pc, #24]	; (8016da8 <prvIdleTask+0x30>)
 8016d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d92:	601a      	str	r2, [r3, #0]
 8016d94:	f3bf 8f4f 	dsb	sy
 8016d98:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016d9c:	f7f2 fbe4 	bl	8009568 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016da0:	e7ee      	b.n	8016d80 <prvIdleTask+0x8>
 8016da2:	bf00      	nop
 8016da4:	2000232c 	.word	0x2000232c
 8016da8:	e000ed04 	.word	0xe000ed04

08016dac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b082      	sub	sp, #8
 8016db0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016db2:	2300      	movs	r3, #0
 8016db4:	607b      	str	r3, [r7, #4]
 8016db6:	e00c      	b.n	8016dd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016db8:	687a      	ldr	r2, [r7, #4]
 8016dba:	4613      	mov	r3, r2
 8016dbc:	009b      	lsls	r3, r3, #2
 8016dbe:	4413      	add	r3, r2
 8016dc0:	009b      	lsls	r3, r3, #2
 8016dc2:	4a12      	ldr	r2, [pc, #72]	; (8016e0c <prvInitialiseTaskLists+0x60>)
 8016dc4:	4413      	add	r3, r2
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f7fe f9d5 	bl	8015176 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	3301      	adds	r3, #1
 8016dd0:	607b      	str	r3, [r7, #4]
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2b06      	cmp	r3, #6
 8016dd6:	d9ef      	bls.n	8016db8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016dd8:	480d      	ldr	r0, [pc, #52]	; (8016e10 <prvInitialiseTaskLists+0x64>)
 8016dda:	f7fe f9cc 	bl	8015176 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016dde:	480d      	ldr	r0, [pc, #52]	; (8016e14 <prvInitialiseTaskLists+0x68>)
 8016de0:	f7fe f9c9 	bl	8015176 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016de4:	480c      	ldr	r0, [pc, #48]	; (8016e18 <prvInitialiseTaskLists+0x6c>)
 8016de6:	f7fe f9c6 	bl	8015176 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016dea:	480c      	ldr	r0, [pc, #48]	; (8016e1c <prvInitialiseTaskLists+0x70>)
 8016dec:	f7fe f9c3 	bl	8015176 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016df0:	480b      	ldr	r0, [pc, #44]	; (8016e20 <prvInitialiseTaskLists+0x74>)
 8016df2:	f7fe f9c0 	bl	8015176 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016df6:	4b0b      	ldr	r3, [pc, #44]	; (8016e24 <prvInitialiseTaskLists+0x78>)
 8016df8:	4a05      	ldr	r2, [pc, #20]	; (8016e10 <prvInitialiseTaskLists+0x64>)
 8016dfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016dfc:	4b0a      	ldr	r3, [pc, #40]	; (8016e28 <prvInitialiseTaskLists+0x7c>)
 8016dfe:	4a05      	ldr	r2, [pc, #20]	; (8016e14 <prvInitialiseTaskLists+0x68>)
 8016e00:	601a      	str	r2, [r3, #0]
}
 8016e02:	bf00      	nop
 8016e04:	3708      	adds	r7, #8
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bd80      	pop	{r7, pc}
 8016e0a:	bf00      	nop
 8016e0c:	2000232c 	.word	0x2000232c
 8016e10:	200023b8 	.word	0x200023b8
 8016e14:	200023cc 	.word	0x200023cc
 8016e18:	200023e8 	.word	0x200023e8
 8016e1c:	200023fc 	.word	0x200023fc
 8016e20:	20002414 	.word	0x20002414
 8016e24:	200023e0 	.word	0x200023e0
 8016e28:	200023e4 	.word	0x200023e4

08016e2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b082      	sub	sp, #8
 8016e30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e32:	e019      	b.n	8016e68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016e34:	f000 fed2 	bl	8017bdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e38:	4b10      	ldr	r3, [pc, #64]	; (8016e7c <prvCheckTasksWaitingTermination+0x50>)
 8016e3a:	68db      	ldr	r3, [r3, #12]
 8016e3c:	68db      	ldr	r3, [r3, #12]
 8016e3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	3304      	adds	r3, #4
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7fe fa1c 	bl	8015282 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016e4a:	4b0d      	ldr	r3, [pc, #52]	; (8016e80 <prvCheckTasksWaitingTermination+0x54>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	3b01      	subs	r3, #1
 8016e50:	4a0b      	ldr	r2, [pc, #44]	; (8016e80 <prvCheckTasksWaitingTermination+0x54>)
 8016e52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016e54:	4b0b      	ldr	r3, [pc, #44]	; (8016e84 <prvCheckTasksWaitingTermination+0x58>)
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	3b01      	subs	r3, #1
 8016e5a:	4a0a      	ldr	r2, [pc, #40]	; (8016e84 <prvCheckTasksWaitingTermination+0x58>)
 8016e5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016e5e:	f000 feed 	bl	8017c3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f000 f810 	bl	8016e88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e68:	4b06      	ldr	r3, [pc, #24]	; (8016e84 <prvCheckTasksWaitingTermination+0x58>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d1e1      	bne.n	8016e34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016e70:	bf00      	nop
 8016e72:	bf00      	nop
 8016e74:	3708      	adds	r7, #8
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}
 8016e7a:	bf00      	nop
 8016e7c:	200023fc 	.word	0x200023fc
 8016e80:	20002428 	.word	0x20002428
 8016e84:	20002410 	.word	0x20002410

08016e88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b084      	sub	sp, #16
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	3350      	adds	r3, #80	; 0x50
 8016e94:	4618      	mov	r0, r3
 8016e96:	f001 fd57 	bl	8018948 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f893 3175 	ldrb.w	r3, [r3, #373]	; 0x175
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d108      	bne.n	8016eb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f001 f861 	bl	8017f70 <vPortFree>
				vPortFree( pxTCB );
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f001 f85e 	bl	8017f70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016eb4:	e018      	b.n	8016ee8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	f893 3175 	ldrb.w	r3, [r3, #373]	; 0x175
 8016ebc:	2b01      	cmp	r3, #1
 8016ebe:	d103      	bne.n	8016ec8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016ec0:	6878      	ldr	r0, [r7, #4]
 8016ec2:	f001 f855 	bl	8017f70 <vPortFree>
	}
 8016ec6:	e00f      	b.n	8016ee8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f893 3175 	ldrb.w	r3, [r3, #373]	; 0x175
 8016ece:	2b02      	cmp	r3, #2
 8016ed0:	d00a      	beq.n	8016ee8 <prvDeleteTCB+0x60>
	__asm volatile
 8016ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ed6:	f383 8811 	msr	BASEPRI, r3
 8016eda:	f3bf 8f6f 	isb	sy
 8016ede:	f3bf 8f4f 	dsb	sy
 8016ee2:	60fb      	str	r3, [r7, #12]
}
 8016ee4:	bf00      	nop
 8016ee6:	e7fe      	b.n	8016ee6 <prvDeleteTCB+0x5e>
	}
 8016ee8:	bf00      	nop
 8016eea:	3710      	adds	r7, #16
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bd80      	pop	{r7, pc}

08016ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016ef0:	b480      	push	{r7}
 8016ef2:	b083      	sub	sp, #12
 8016ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016ef6:	4b0c      	ldr	r3, [pc, #48]	; (8016f28 <prvResetNextTaskUnblockTime+0x38>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d104      	bne.n	8016f0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016f00:	4b0a      	ldr	r3, [pc, #40]	; (8016f2c <prvResetNextTaskUnblockTime+0x3c>)
 8016f02:	f04f 32ff 	mov.w	r2, #4294967295
 8016f06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016f08:	e008      	b.n	8016f1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f0a:	4b07      	ldr	r3, [pc, #28]	; (8016f28 <prvResetNextTaskUnblockTime+0x38>)
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	68db      	ldr	r3, [r3, #12]
 8016f10:	68db      	ldr	r3, [r3, #12]
 8016f12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	4a04      	ldr	r2, [pc, #16]	; (8016f2c <prvResetNextTaskUnblockTime+0x3c>)
 8016f1a:	6013      	str	r3, [r2, #0]
}
 8016f1c:	bf00      	nop
 8016f1e:	370c      	adds	r7, #12
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bc80      	pop	{r7}
 8016f24:	4770      	bx	lr
 8016f26:	bf00      	nop
 8016f28:	200023e0 	.word	0x200023e0
 8016f2c:	20002448 	.word	0x20002448

08016f30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016f30:	b480      	push	{r7}
 8016f32:	b083      	sub	sp, #12
 8016f34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016f36:	4b0b      	ldr	r3, [pc, #44]	; (8016f64 <xTaskGetSchedulerState+0x34>)
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d102      	bne.n	8016f44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016f3e:	2301      	movs	r3, #1
 8016f40:	607b      	str	r3, [r7, #4]
 8016f42:	e008      	b.n	8016f56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016f44:	4b08      	ldr	r3, [pc, #32]	; (8016f68 <xTaskGetSchedulerState+0x38>)
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d102      	bne.n	8016f52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016f4c:	2302      	movs	r3, #2
 8016f4e:	607b      	str	r3, [r7, #4]
 8016f50:	e001      	b.n	8016f56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016f52:	2300      	movs	r3, #0
 8016f54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016f56:	687b      	ldr	r3, [r7, #4]
	}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	370c      	adds	r7, #12
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bc80      	pop	{r7}
 8016f60:	4770      	bx	lr
 8016f62:	bf00      	nop
 8016f64:	20002434 	.word	0x20002434
 8016f68:	20002450 	.word	0x20002450

08016f6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b084      	sub	sp, #16
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016f78:	2300      	movs	r3, #0
 8016f7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d069      	beq.n	8017056 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016f82:	68bb      	ldr	r3, [r7, #8]
 8016f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f86:	4b36      	ldr	r3, [pc, #216]	; (8017060 <xTaskPriorityInherit+0xf4>)
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d259      	bcs.n	8017044 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	699b      	ldr	r3, [r3, #24]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	db06      	blt.n	8016fa6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f98:	4b31      	ldr	r3, [pc, #196]	; (8017060 <xTaskPriorityInherit+0xf4>)
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f9e:	f1c3 0207 	rsb	r2, r3, #7
 8016fa2:	68bb      	ldr	r3, [r7, #8]
 8016fa4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016fa6:	68bb      	ldr	r3, [r7, #8]
 8016fa8:	6959      	ldr	r1, [r3, #20]
 8016faa:	68bb      	ldr	r3, [r7, #8]
 8016fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fae:	4613      	mov	r3, r2
 8016fb0:	009b      	lsls	r3, r3, #2
 8016fb2:	4413      	add	r3, r2
 8016fb4:	009b      	lsls	r3, r3, #2
 8016fb6:	4a2b      	ldr	r2, [pc, #172]	; (8017064 <xTaskPriorityInherit+0xf8>)
 8016fb8:	4413      	add	r3, r2
 8016fba:	4299      	cmp	r1, r3
 8016fbc:	d13a      	bne.n	8017034 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016fbe:	68bb      	ldr	r3, [r7, #8]
 8016fc0:	3304      	adds	r3, #4
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f7fe f95d 	bl	8015282 <uxListRemove>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d115      	bne.n	8016ffa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8016fce:	68bb      	ldr	r3, [r7, #8]
 8016fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fd2:	4924      	ldr	r1, [pc, #144]	; (8017064 <xTaskPriorityInherit+0xf8>)
 8016fd4:	4613      	mov	r3, r2
 8016fd6:	009b      	lsls	r3, r3, #2
 8016fd8:	4413      	add	r3, r2
 8016fda:	009b      	lsls	r3, r3, #2
 8016fdc:	440b      	add	r3, r1
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d10a      	bne.n	8016ffa <xTaskPriorityInherit+0x8e>
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fe8:	2201      	movs	r2, #1
 8016fea:	fa02 f303 	lsl.w	r3, r2, r3
 8016fee:	43da      	mvns	r2, r3
 8016ff0:	4b1d      	ldr	r3, [pc, #116]	; (8017068 <xTaskPriorityInherit+0xfc>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	4013      	ands	r3, r2
 8016ff6:	4a1c      	ldr	r2, [pc, #112]	; (8017068 <xTaskPriorityInherit+0xfc>)
 8016ff8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016ffa:	4b19      	ldr	r3, [pc, #100]	; (8017060 <xTaskPriorityInherit+0xf4>)
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017000:	68bb      	ldr	r3, [r7, #8]
 8017002:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017008:	2201      	movs	r2, #1
 801700a:	409a      	lsls	r2, r3
 801700c:	4b16      	ldr	r3, [pc, #88]	; (8017068 <xTaskPriorityInherit+0xfc>)
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	4313      	orrs	r3, r2
 8017012:	4a15      	ldr	r2, [pc, #84]	; (8017068 <xTaskPriorityInherit+0xfc>)
 8017014:	6013      	str	r3, [r2, #0]
 8017016:	68bb      	ldr	r3, [r7, #8]
 8017018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801701a:	4613      	mov	r3, r2
 801701c:	009b      	lsls	r3, r3, #2
 801701e:	4413      	add	r3, r2
 8017020:	009b      	lsls	r3, r3, #2
 8017022:	4a10      	ldr	r2, [pc, #64]	; (8017064 <xTaskPriorityInherit+0xf8>)
 8017024:	441a      	add	r2, r3
 8017026:	68bb      	ldr	r3, [r7, #8]
 8017028:	3304      	adds	r3, #4
 801702a:	4619      	mov	r1, r3
 801702c:	4610      	mov	r0, r2
 801702e:	f7fe f8cd 	bl	80151cc <vListInsertEnd>
 8017032:	e004      	b.n	801703e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017034:	4b0a      	ldr	r3, [pc, #40]	; (8017060 <xTaskPriorityInherit+0xf4>)
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801703e:	2301      	movs	r3, #1
 8017040:	60fb      	str	r3, [r7, #12]
 8017042:	e008      	b.n	8017056 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017048:	4b05      	ldr	r3, [pc, #20]	; (8017060 <xTaskPriorityInherit+0xf4>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801704e:	429a      	cmp	r2, r3
 8017050:	d201      	bcs.n	8017056 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017052:	2301      	movs	r3, #1
 8017054:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017056:	68fb      	ldr	r3, [r7, #12]
	}
 8017058:	4618      	mov	r0, r3
 801705a:	3710      	adds	r7, #16
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}
 8017060:	20002328 	.word	0x20002328
 8017064:	2000232c 	.word	0x2000232c
 8017068:	20002430 	.word	0x20002430

0801706c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801706c:	b580      	push	{r7, lr}
 801706e:	b086      	sub	sp, #24
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017078:	2300      	movs	r3, #0
 801707a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d06e      	beq.n	8017160 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017082:	4b3a      	ldr	r3, [pc, #232]	; (801716c <xTaskPriorityDisinherit+0x100>)
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	693a      	ldr	r2, [r7, #16]
 8017088:	429a      	cmp	r2, r3
 801708a:	d00a      	beq.n	80170a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017090:	f383 8811 	msr	BASEPRI, r3
 8017094:	f3bf 8f6f 	isb	sy
 8017098:	f3bf 8f4f 	dsb	sy
 801709c:	60fb      	str	r3, [r7, #12]
}
 801709e:	bf00      	nop
 80170a0:	e7fe      	b.n	80170a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80170a2:	693b      	ldr	r3, [r7, #16]
 80170a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d10a      	bne.n	80170c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80170aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ae:	f383 8811 	msr	BASEPRI, r3
 80170b2:	f3bf 8f6f 	isb	sy
 80170b6:	f3bf 8f4f 	dsb	sy
 80170ba:	60bb      	str	r3, [r7, #8]
}
 80170bc:	bf00      	nop
 80170be:	e7fe      	b.n	80170be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80170c0:	693b      	ldr	r3, [r7, #16]
 80170c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170c4:	1e5a      	subs	r2, r3, #1
 80170c6:	693b      	ldr	r3, [r7, #16]
 80170c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80170ca:	693b      	ldr	r3, [r7, #16]
 80170cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170ce:	693b      	ldr	r3, [r7, #16]
 80170d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170d2:	429a      	cmp	r2, r3
 80170d4:	d044      	beq.n	8017160 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80170d6:	693b      	ldr	r3, [r7, #16]
 80170d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d140      	bne.n	8017160 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80170de:	693b      	ldr	r3, [r7, #16]
 80170e0:	3304      	adds	r3, #4
 80170e2:	4618      	mov	r0, r3
 80170e4:	f7fe f8cd 	bl	8015282 <uxListRemove>
 80170e8:	4603      	mov	r3, r0
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d115      	bne.n	801711a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80170ee:	693b      	ldr	r3, [r7, #16]
 80170f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170f2:	491f      	ldr	r1, [pc, #124]	; (8017170 <xTaskPriorityDisinherit+0x104>)
 80170f4:	4613      	mov	r3, r2
 80170f6:	009b      	lsls	r3, r3, #2
 80170f8:	4413      	add	r3, r2
 80170fa:	009b      	lsls	r3, r3, #2
 80170fc:	440b      	add	r3, r1
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d10a      	bne.n	801711a <xTaskPriorityDisinherit+0xae>
 8017104:	693b      	ldr	r3, [r7, #16]
 8017106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017108:	2201      	movs	r2, #1
 801710a:	fa02 f303 	lsl.w	r3, r2, r3
 801710e:	43da      	mvns	r2, r3
 8017110:	4b18      	ldr	r3, [pc, #96]	; (8017174 <xTaskPriorityDisinherit+0x108>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	4013      	ands	r3, r2
 8017116:	4a17      	ldr	r2, [pc, #92]	; (8017174 <xTaskPriorityDisinherit+0x108>)
 8017118:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801711a:	693b      	ldr	r3, [r7, #16]
 801711c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801711e:	693b      	ldr	r3, [r7, #16]
 8017120:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017122:	693b      	ldr	r3, [r7, #16]
 8017124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017126:	f1c3 0207 	rsb	r2, r3, #7
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801712e:	693b      	ldr	r3, [r7, #16]
 8017130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017132:	2201      	movs	r2, #1
 8017134:	409a      	lsls	r2, r3
 8017136:	4b0f      	ldr	r3, [pc, #60]	; (8017174 <xTaskPriorityDisinherit+0x108>)
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	4313      	orrs	r3, r2
 801713c:	4a0d      	ldr	r2, [pc, #52]	; (8017174 <xTaskPriorityDisinherit+0x108>)
 801713e:	6013      	str	r3, [r2, #0]
 8017140:	693b      	ldr	r3, [r7, #16]
 8017142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017144:	4613      	mov	r3, r2
 8017146:	009b      	lsls	r3, r3, #2
 8017148:	4413      	add	r3, r2
 801714a:	009b      	lsls	r3, r3, #2
 801714c:	4a08      	ldr	r2, [pc, #32]	; (8017170 <xTaskPriorityDisinherit+0x104>)
 801714e:	441a      	add	r2, r3
 8017150:	693b      	ldr	r3, [r7, #16]
 8017152:	3304      	adds	r3, #4
 8017154:	4619      	mov	r1, r3
 8017156:	4610      	mov	r0, r2
 8017158:	f7fe f838 	bl	80151cc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801715c:	2301      	movs	r3, #1
 801715e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017160:	697b      	ldr	r3, [r7, #20]
	}
 8017162:	4618      	mov	r0, r3
 8017164:	3718      	adds	r7, #24
 8017166:	46bd      	mov	sp, r7
 8017168:	bd80      	pop	{r7, pc}
 801716a:	bf00      	nop
 801716c:	20002328 	.word	0x20002328
 8017170:	2000232c 	.word	0x2000232c
 8017174:	20002430 	.word	0x20002430

08017178 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017178:	b580      	push	{r7, lr}
 801717a:	b088      	sub	sp, #32
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
 8017180:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017186:	2301      	movs	r3, #1
 8017188:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	2b00      	cmp	r3, #0
 801718e:	f000 8083 	beq.w	8017298 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017192:	69bb      	ldr	r3, [r7, #24]
 8017194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017196:	2b00      	cmp	r3, #0
 8017198:	d10a      	bne.n	80171b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 801719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801719e:	f383 8811 	msr	BASEPRI, r3
 80171a2:	f3bf 8f6f 	isb	sy
 80171a6:	f3bf 8f4f 	dsb	sy
 80171aa:	60fb      	str	r3, [r7, #12]
}
 80171ac:	bf00      	nop
 80171ae:	e7fe      	b.n	80171ae <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80171b0:	69bb      	ldr	r3, [r7, #24]
 80171b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171b4:	683a      	ldr	r2, [r7, #0]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d902      	bls.n	80171c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	61fb      	str	r3, [r7, #28]
 80171be:	e002      	b.n	80171c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80171c0:	69bb      	ldr	r3, [r7, #24]
 80171c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80171c6:	69bb      	ldr	r3, [r7, #24]
 80171c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ca:	69fa      	ldr	r2, [r7, #28]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d063      	beq.n	8017298 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80171d0:	69bb      	ldr	r3, [r7, #24]
 80171d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80171d4:	697a      	ldr	r2, [r7, #20]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d15e      	bne.n	8017298 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80171da:	4b31      	ldr	r3, [pc, #196]	; (80172a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	69ba      	ldr	r2, [r7, #24]
 80171e0:	429a      	cmp	r2, r3
 80171e2:	d10a      	bne.n	80171fa <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80171e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171e8:	f383 8811 	msr	BASEPRI, r3
 80171ec:	f3bf 8f6f 	isb	sy
 80171f0:	f3bf 8f4f 	dsb	sy
 80171f4:	60bb      	str	r3, [r7, #8]
}
 80171f6:	bf00      	nop
 80171f8:	e7fe      	b.n	80171f8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80171fa:	69bb      	ldr	r3, [r7, #24]
 80171fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171fe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017200:	69bb      	ldr	r3, [r7, #24]
 8017202:	69fa      	ldr	r2, [r7, #28]
 8017204:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017206:	69bb      	ldr	r3, [r7, #24]
 8017208:	699b      	ldr	r3, [r3, #24]
 801720a:	2b00      	cmp	r3, #0
 801720c:	db04      	blt.n	8017218 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801720e:	69fb      	ldr	r3, [r7, #28]
 8017210:	f1c3 0207 	rsb	r2, r3, #7
 8017214:	69bb      	ldr	r3, [r7, #24]
 8017216:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017218:	69bb      	ldr	r3, [r7, #24]
 801721a:	6959      	ldr	r1, [r3, #20]
 801721c:	693a      	ldr	r2, [r7, #16]
 801721e:	4613      	mov	r3, r2
 8017220:	009b      	lsls	r3, r3, #2
 8017222:	4413      	add	r3, r2
 8017224:	009b      	lsls	r3, r3, #2
 8017226:	4a1f      	ldr	r2, [pc, #124]	; (80172a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8017228:	4413      	add	r3, r2
 801722a:	4299      	cmp	r1, r3
 801722c:	d134      	bne.n	8017298 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801722e:	69bb      	ldr	r3, [r7, #24]
 8017230:	3304      	adds	r3, #4
 8017232:	4618      	mov	r0, r3
 8017234:	f7fe f825 	bl	8015282 <uxListRemove>
 8017238:	4603      	mov	r3, r0
 801723a:	2b00      	cmp	r3, #0
 801723c:	d115      	bne.n	801726a <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801723e:	69bb      	ldr	r3, [r7, #24]
 8017240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017242:	4918      	ldr	r1, [pc, #96]	; (80172a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8017244:	4613      	mov	r3, r2
 8017246:	009b      	lsls	r3, r3, #2
 8017248:	4413      	add	r3, r2
 801724a:	009b      	lsls	r3, r3, #2
 801724c:	440b      	add	r3, r1
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d10a      	bne.n	801726a <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8017254:	69bb      	ldr	r3, [r7, #24]
 8017256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017258:	2201      	movs	r2, #1
 801725a:	fa02 f303 	lsl.w	r3, r2, r3
 801725e:	43da      	mvns	r2, r3
 8017260:	4b11      	ldr	r3, [pc, #68]	; (80172a8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	4013      	ands	r3, r2
 8017266:	4a10      	ldr	r2, [pc, #64]	; (80172a8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8017268:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801726a:	69bb      	ldr	r3, [r7, #24]
 801726c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801726e:	2201      	movs	r2, #1
 8017270:	409a      	lsls	r2, r3
 8017272:	4b0d      	ldr	r3, [pc, #52]	; (80172a8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	4313      	orrs	r3, r2
 8017278:	4a0b      	ldr	r2, [pc, #44]	; (80172a8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801727a:	6013      	str	r3, [r2, #0]
 801727c:	69bb      	ldr	r3, [r7, #24]
 801727e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017280:	4613      	mov	r3, r2
 8017282:	009b      	lsls	r3, r3, #2
 8017284:	4413      	add	r3, r2
 8017286:	009b      	lsls	r3, r3, #2
 8017288:	4a06      	ldr	r2, [pc, #24]	; (80172a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801728a:	441a      	add	r2, r3
 801728c:	69bb      	ldr	r3, [r7, #24]
 801728e:	3304      	adds	r3, #4
 8017290:	4619      	mov	r1, r3
 8017292:	4610      	mov	r0, r2
 8017294:	f7fd ff9a 	bl	80151cc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017298:	bf00      	nop
 801729a:	3720      	adds	r7, #32
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}
 80172a0:	20002328 	.word	0x20002328
 80172a4:	2000232c 	.word	0x2000232c
 80172a8:	20002430 	.word	0x20002430

080172ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80172ac:	b480      	push	{r7}
 80172ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80172b0:	4b07      	ldr	r3, [pc, #28]	; (80172d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d004      	beq.n	80172c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80172b8:	4b05      	ldr	r3, [pc, #20]	; (80172d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80172be:	3201      	adds	r2, #1
 80172c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80172c2:	4b03      	ldr	r3, [pc, #12]	; (80172d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80172c4:	681b      	ldr	r3, [r3, #0]
	}
 80172c6:	4618      	mov	r0, r3
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bc80      	pop	{r7}
 80172cc:	4770      	bx	lr
 80172ce:	bf00      	nop
 80172d0:	20002328 	.word	0x20002328

080172d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b084      	sub	sp, #16
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
 80172dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80172de:	4b29      	ldr	r3, [pc, #164]	; (8017384 <prvAddCurrentTaskToDelayedList+0xb0>)
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80172e4:	4b28      	ldr	r3, [pc, #160]	; (8017388 <prvAddCurrentTaskToDelayedList+0xb4>)
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	3304      	adds	r3, #4
 80172ea:	4618      	mov	r0, r3
 80172ec:	f7fd ffc9 	bl	8015282 <uxListRemove>
 80172f0:	4603      	mov	r3, r0
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d10b      	bne.n	801730e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80172f6:	4b24      	ldr	r3, [pc, #144]	; (8017388 <prvAddCurrentTaskToDelayedList+0xb4>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172fc:	2201      	movs	r2, #1
 80172fe:	fa02 f303 	lsl.w	r3, r2, r3
 8017302:	43da      	mvns	r2, r3
 8017304:	4b21      	ldr	r3, [pc, #132]	; (801738c <prvAddCurrentTaskToDelayedList+0xb8>)
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	4013      	ands	r3, r2
 801730a:	4a20      	ldr	r2, [pc, #128]	; (801738c <prvAddCurrentTaskToDelayedList+0xb8>)
 801730c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017314:	d10a      	bne.n	801732c <prvAddCurrentTaskToDelayedList+0x58>
 8017316:	683b      	ldr	r3, [r7, #0]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d007      	beq.n	801732c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801731c:	4b1a      	ldr	r3, [pc, #104]	; (8017388 <prvAddCurrentTaskToDelayedList+0xb4>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	3304      	adds	r3, #4
 8017322:	4619      	mov	r1, r3
 8017324:	481a      	ldr	r0, [pc, #104]	; (8017390 <prvAddCurrentTaskToDelayedList+0xbc>)
 8017326:	f7fd ff51 	bl	80151cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801732a:	e026      	b.n	801737a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801732c:	68fa      	ldr	r2, [r7, #12]
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	4413      	add	r3, r2
 8017332:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017334:	4b14      	ldr	r3, [pc, #80]	; (8017388 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	68ba      	ldr	r2, [r7, #8]
 801733a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801733c:	68ba      	ldr	r2, [r7, #8]
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	429a      	cmp	r2, r3
 8017342:	d209      	bcs.n	8017358 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017344:	4b13      	ldr	r3, [pc, #76]	; (8017394 <prvAddCurrentTaskToDelayedList+0xc0>)
 8017346:	681a      	ldr	r2, [r3, #0]
 8017348:	4b0f      	ldr	r3, [pc, #60]	; (8017388 <prvAddCurrentTaskToDelayedList+0xb4>)
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	3304      	adds	r3, #4
 801734e:	4619      	mov	r1, r3
 8017350:	4610      	mov	r0, r2
 8017352:	f7fd ff5e 	bl	8015212 <vListInsert>
}
 8017356:	e010      	b.n	801737a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017358:	4b0f      	ldr	r3, [pc, #60]	; (8017398 <prvAddCurrentTaskToDelayedList+0xc4>)
 801735a:	681a      	ldr	r2, [r3, #0]
 801735c:	4b0a      	ldr	r3, [pc, #40]	; (8017388 <prvAddCurrentTaskToDelayedList+0xb4>)
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	3304      	adds	r3, #4
 8017362:	4619      	mov	r1, r3
 8017364:	4610      	mov	r0, r2
 8017366:	f7fd ff54 	bl	8015212 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801736a:	4b0c      	ldr	r3, [pc, #48]	; (801739c <prvAddCurrentTaskToDelayedList+0xc8>)
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	68ba      	ldr	r2, [r7, #8]
 8017370:	429a      	cmp	r2, r3
 8017372:	d202      	bcs.n	801737a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017374:	4a09      	ldr	r2, [pc, #36]	; (801739c <prvAddCurrentTaskToDelayedList+0xc8>)
 8017376:	68bb      	ldr	r3, [r7, #8]
 8017378:	6013      	str	r3, [r2, #0]
}
 801737a:	bf00      	nop
 801737c:	3710      	adds	r7, #16
 801737e:	46bd      	mov	sp, r7
 8017380:	bd80      	pop	{r7, pc}
 8017382:	bf00      	nop
 8017384:	2000242c 	.word	0x2000242c
 8017388:	20002328 	.word	0x20002328
 801738c:	20002430 	.word	0x20002430
 8017390:	20002414 	.word	0x20002414
 8017394:	200023e4 	.word	0x200023e4
 8017398:	200023e0 	.word	0x200023e0
 801739c:	20002448 	.word	0x20002448

080173a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b08a      	sub	sp, #40	; 0x28
 80173a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80173a6:	2300      	movs	r3, #0
 80173a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80173aa:	f000 fae9 	bl	8017980 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80173ae:	4b1c      	ldr	r3, [pc, #112]	; (8017420 <xTimerCreateTimerTask+0x80>)
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d021      	beq.n	80173fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80173b6:	2300      	movs	r3, #0
 80173b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80173ba:	2300      	movs	r3, #0
 80173bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80173be:	1d3a      	adds	r2, r7, #4
 80173c0:	f107 0108 	add.w	r1, r7, #8
 80173c4:	f107 030c 	add.w	r3, r7, #12
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7f2 f8eb 	bl	80095a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80173ce:	6879      	ldr	r1, [r7, #4]
 80173d0:	68bb      	ldr	r3, [r7, #8]
 80173d2:	68fa      	ldr	r2, [r7, #12]
 80173d4:	9202      	str	r2, [sp, #8]
 80173d6:	9301      	str	r3, [sp, #4]
 80173d8:	2302      	movs	r3, #2
 80173da:	9300      	str	r3, [sp, #0]
 80173dc:	2300      	movs	r3, #0
 80173de:	460a      	mov	r2, r1
 80173e0:	4910      	ldr	r1, [pc, #64]	; (8017424 <xTimerCreateTimerTask+0x84>)
 80173e2:	4811      	ldr	r0, [pc, #68]	; (8017428 <xTimerCreateTimerTask+0x88>)
 80173e4:	f7fe ff16 	bl	8016214 <xTaskCreateStatic>
 80173e8:	4603      	mov	r3, r0
 80173ea:	4a10      	ldr	r2, [pc, #64]	; (801742c <xTimerCreateTimerTask+0x8c>)
 80173ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80173ee:	4b0f      	ldr	r3, [pc, #60]	; (801742c <xTimerCreateTimerTask+0x8c>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d001      	beq.n	80173fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80173f6:	2301      	movs	r3, #1
 80173f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80173fa:	697b      	ldr	r3, [r7, #20]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d10a      	bne.n	8017416 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017404:	f383 8811 	msr	BASEPRI, r3
 8017408:	f3bf 8f6f 	isb	sy
 801740c:	f3bf 8f4f 	dsb	sy
 8017410:	613b      	str	r3, [r7, #16]
}
 8017412:	bf00      	nop
 8017414:	e7fe      	b.n	8017414 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017416:	697b      	ldr	r3, [r7, #20]
}
 8017418:	4618      	mov	r0, r3
 801741a:	3718      	adds	r7, #24
 801741c:	46bd      	mov	sp, r7
 801741e:	bd80      	pop	{r7, pc}
 8017420:	20002484 	.word	0x20002484
 8017424:	0801f91c 	.word	0x0801f91c
 8017428:	08017565 	.word	0x08017565
 801742c:	20002488 	.word	0x20002488

08017430 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b08a      	sub	sp, #40	; 0x28
 8017434:	af00      	add	r7, sp, #0
 8017436:	60f8      	str	r0, [r7, #12]
 8017438:	60b9      	str	r1, [r7, #8]
 801743a:	607a      	str	r2, [r7, #4]
 801743c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801743e:	2300      	movs	r3, #0
 8017440:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d10a      	bne.n	801745e <xTimerGenericCommand+0x2e>
	__asm volatile
 8017448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801744c:	f383 8811 	msr	BASEPRI, r3
 8017450:	f3bf 8f6f 	isb	sy
 8017454:	f3bf 8f4f 	dsb	sy
 8017458:	623b      	str	r3, [r7, #32]
}
 801745a:	bf00      	nop
 801745c:	e7fe      	b.n	801745c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801745e:	4b1a      	ldr	r3, [pc, #104]	; (80174c8 <xTimerGenericCommand+0x98>)
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d02a      	beq.n	80174bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017466:	68bb      	ldr	r3, [r7, #8]
 8017468:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017472:	68bb      	ldr	r3, [r7, #8]
 8017474:	2b05      	cmp	r3, #5
 8017476:	dc18      	bgt.n	80174aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017478:	f7ff fd5a 	bl	8016f30 <xTaskGetSchedulerState>
 801747c:	4603      	mov	r3, r0
 801747e:	2b02      	cmp	r3, #2
 8017480:	d109      	bne.n	8017496 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017482:	4b11      	ldr	r3, [pc, #68]	; (80174c8 <xTimerGenericCommand+0x98>)
 8017484:	6818      	ldr	r0, [r3, #0]
 8017486:	f107 0114 	add.w	r1, r7, #20
 801748a:	2300      	movs	r3, #0
 801748c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801748e:	f7fe f8ad 	bl	80155ec <xQueueGenericSend>
 8017492:	6278      	str	r0, [r7, #36]	; 0x24
 8017494:	e012      	b.n	80174bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017496:	4b0c      	ldr	r3, [pc, #48]	; (80174c8 <xTimerGenericCommand+0x98>)
 8017498:	6818      	ldr	r0, [r3, #0]
 801749a:	f107 0114 	add.w	r1, r7, #20
 801749e:	2300      	movs	r3, #0
 80174a0:	2200      	movs	r2, #0
 80174a2:	f7fe f8a3 	bl	80155ec <xQueueGenericSend>
 80174a6:	6278      	str	r0, [r7, #36]	; 0x24
 80174a8:	e008      	b.n	80174bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80174aa:	4b07      	ldr	r3, [pc, #28]	; (80174c8 <xTimerGenericCommand+0x98>)
 80174ac:	6818      	ldr	r0, [r3, #0]
 80174ae:	f107 0114 	add.w	r1, r7, #20
 80174b2:	2300      	movs	r3, #0
 80174b4:	683a      	ldr	r2, [r7, #0]
 80174b6:	f7fe f997 	bl	80157e8 <xQueueGenericSendFromISR>
 80174ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80174bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80174be:	4618      	mov	r0, r3
 80174c0:	3728      	adds	r7, #40	; 0x28
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}
 80174c6:	bf00      	nop
 80174c8:	20002484 	.word	0x20002484

080174cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b088      	sub	sp, #32
 80174d0:	af02      	add	r7, sp, #8
 80174d2:	6078      	str	r0, [r7, #4]
 80174d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80174d6:	4b22      	ldr	r3, [pc, #136]	; (8017560 <prvProcessExpiredTimer+0x94>)
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	68db      	ldr	r3, [r3, #12]
 80174dc:	68db      	ldr	r3, [r3, #12]
 80174de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80174e0:	697b      	ldr	r3, [r7, #20]
 80174e2:	3304      	adds	r3, #4
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7fd fecc 	bl	8015282 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80174f0:	f003 0304 	and.w	r3, r3, #4
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d022      	beq.n	801753e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80174f8:	697b      	ldr	r3, [r7, #20]
 80174fa:	699a      	ldr	r2, [r3, #24]
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	18d1      	adds	r1, r2, r3
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	683a      	ldr	r2, [r7, #0]
 8017504:	6978      	ldr	r0, [r7, #20]
 8017506:	f000 f8cf 	bl	80176a8 <prvInsertTimerInActiveList>
 801750a:	4603      	mov	r3, r0
 801750c:	2b00      	cmp	r3, #0
 801750e:	d01f      	beq.n	8017550 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017510:	2300      	movs	r3, #0
 8017512:	9300      	str	r3, [sp, #0]
 8017514:	2300      	movs	r3, #0
 8017516:	687a      	ldr	r2, [r7, #4]
 8017518:	2100      	movs	r1, #0
 801751a:	6978      	ldr	r0, [r7, #20]
 801751c:	f7ff ff88 	bl	8017430 <xTimerGenericCommand>
 8017520:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017522:	693b      	ldr	r3, [r7, #16]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d113      	bne.n	8017550 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801752c:	f383 8811 	msr	BASEPRI, r3
 8017530:	f3bf 8f6f 	isb	sy
 8017534:	f3bf 8f4f 	dsb	sy
 8017538:	60fb      	str	r3, [r7, #12]
}
 801753a:	bf00      	nop
 801753c:	e7fe      	b.n	801753c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801753e:	697b      	ldr	r3, [r7, #20]
 8017540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017544:	f023 0301 	bic.w	r3, r3, #1
 8017548:	b2da      	uxtb	r2, r3
 801754a:	697b      	ldr	r3, [r7, #20]
 801754c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017550:	697b      	ldr	r3, [r7, #20]
 8017552:	6a1b      	ldr	r3, [r3, #32]
 8017554:	6978      	ldr	r0, [r7, #20]
 8017556:	4798      	blx	r3
}
 8017558:	bf00      	nop
 801755a:	3718      	adds	r7, #24
 801755c:	46bd      	mov	sp, r7
 801755e:	bd80      	pop	{r7, pc}
 8017560:	2000247c 	.word	0x2000247c

08017564 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b084      	sub	sp, #16
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801756c:	f107 0308 	add.w	r3, r7, #8
 8017570:	4618      	mov	r0, r3
 8017572:	f000 f857 	bl	8017624 <prvGetNextExpireTime>
 8017576:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017578:	68bb      	ldr	r3, [r7, #8]
 801757a:	4619      	mov	r1, r3
 801757c:	68f8      	ldr	r0, [r7, #12]
 801757e:	f000 f803 	bl	8017588 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017582:	f000 f8d3 	bl	801772c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017586:	e7f1      	b.n	801756c <prvTimerTask+0x8>

08017588 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b084      	sub	sp, #16
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
 8017590:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017592:	f7ff f8c3 	bl	801671c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017596:	f107 0308 	add.w	r3, r7, #8
 801759a:	4618      	mov	r0, r3
 801759c:	f000 f864 	bl	8017668 <prvSampleTimeNow>
 80175a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d130      	bne.n	801760a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d10a      	bne.n	80175c4 <prvProcessTimerOrBlockTask+0x3c>
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d806      	bhi.n	80175c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80175b6:	f7ff f8bf 	bl	8016738 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80175ba:	68f9      	ldr	r1, [r7, #12]
 80175bc:	6878      	ldr	r0, [r7, #4]
 80175be:	f7ff ff85 	bl	80174cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80175c2:	e024      	b.n	801760e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d008      	beq.n	80175dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80175ca:	4b13      	ldr	r3, [pc, #76]	; (8017618 <prvProcessTimerOrBlockTask+0x90>)
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d101      	bne.n	80175d8 <prvProcessTimerOrBlockTask+0x50>
 80175d4:	2301      	movs	r3, #1
 80175d6:	e000      	b.n	80175da <prvProcessTimerOrBlockTask+0x52>
 80175d8:	2300      	movs	r3, #0
 80175da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80175dc:	4b0f      	ldr	r3, [pc, #60]	; (801761c <prvProcessTimerOrBlockTask+0x94>)
 80175de:	6818      	ldr	r0, [r3, #0]
 80175e0:	687a      	ldr	r2, [r7, #4]
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	1ad3      	subs	r3, r2, r3
 80175e6:	683a      	ldr	r2, [r7, #0]
 80175e8:	4619      	mov	r1, r3
 80175ea:	f7fe fddf 	bl	80161ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80175ee:	f7ff f8a3 	bl	8016738 <xTaskResumeAll>
 80175f2:	4603      	mov	r3, r0
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d10a      	bne.n	801760e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80175f8:	4b09      	ldr	r3, [pc, #36]	; (8017620 <prvProcessTimerOrBlockTask+0x98>)
 80175fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175fe:	601a      	str	r2, [r3, #0]
 8017600:	f3bf 8f4f 	dsb	sy
 8017604:	f3bf 8f6f 	isb	sy
}
 8017608:	e001      	b.n	801760e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801760a:	f7ff f895 	bl	8016738 <xTaskResumeAll>
}
 801760e:	bf00      	nop
 8017610:	3710      	adds	r7, #16
 8017612:	46bd      	mov	sp, r7
 8017614:	bd80      	pop	{r7, pc}
 8017616:	bf00      	nop
 8017618:	20002480 	.word	0x20002480
 801761c:	20002484 	.word	0x20002484
 8017620:	e000ed04 	.word	0xe000ed04

08017624 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017624:	b480      	push	{r7}
 8017626:	b085      	sub	sp, #20
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801762c:	4b0d      	ldr	r3, [pc, #52]	; (8017664 <prvGetNextExpireTime+0x40>)
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d101      	bne.n	801763a <prvGetNextExpireTime+0x16>
 8017636:	2201      	movs	r2, #1
 8017638:	e000      	b.n	801763c <prvGetNextExpireTime+0x18>
 801763a:	2200      	movs	r2, #0
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d105      	bne.n	8017654 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017648:	4b06      	ldr	r3, [pc, #24]	; (8017664 <prvGetNextExpireTime+0x40>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	68db      	ldr	r3, [r3, #12]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	60fb      	str	r3, [r7, #12]
 8017652:	e001      	b.n	8017658 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017654:	2300      	movs	r3, #0
 8017656:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017658:	68fb      	ldr	r3, [r7, #12]
}
 801765a:	4618      	mov	r0, r3
 801765c:	3714      	adds	r7, #20
 801765e:	46bd      	mov	sp, r7
 8017660:	bc80      	pop	{r7}
 8017662:	4770      	bx	lr
 8017664:	2000247c 	.word	0x2000247c

08017668 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b084      	sub	sp, #16
 801766c:	af00      	add	r7, sp, #0
 801766e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017670:	f7ff f8fe 	bl	8016870 <xTaskGetTickCount>
 8017674:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017676:	4b0b      	ldr	r3, [pc, #44]	; (80176a4 <prvSampleTimeNow+0x3c>)
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	68fa      	ldr	r2, [r7, #12]
 801767c:	429a      	cmp	r2, r3
 801767e:	d205      	bcs.n	801768c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017680:	f000 f91a 	bl	80178b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	2201      	movs	r2, #1
 8017688:	601a      	str	r2, [r3, #0]
 801768a:	e002      	b.n	8017692 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2200      	movs	r2, #0
 8017690:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017692:	4a04      	ldr	r2, [pc, #16]	; (80176a4 <prvSampleTimeNow+0x3c>)
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017698:	68fb      	ldr	r3, [r7, #12]
}
 801769a:	4618      	mov	r0, r3
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	2000248c 	.word	0x2000248c

080176a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b086      	sub	sp, #24
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	60f8      	str	r0, [r7, #12]
 80176b0:	60b9      	str	r1, [r7, #8]
 80176b2:	607a      	str	r2, [r7, #4]
 80176b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80176b6:	2300      	movs	r3, #0
 80176b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	68ba      	ldr	r2, [r7, #8]
 80176be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	68fa      	ldr	r2, [r7, #12]
 80176c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80176c6:	68ba      	ldr	r2, [r7, #8]
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	429a      	cmp	r2, r3
 80176cc:	d812      	bhi.n	80176f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80176ce:	687a      	ldr	r2, [r7, #4]
 80176d0:	683b      	ldr	r3, [r7, #0]
 80176d2:	1ad2      	subs	r2, r2, r3
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	699b      	ldr	r3, [r3, #24]
 80176d8:	429a      	cmp	r2, r3
 80176da:	d302      	bcc.n	80176e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80176dc:	2301      	movs	r3, #1
 80176de:	617b      	str	r3, [r7, #20]
 80176e0:	e01b      	b.n	801771a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80176e2:	4b10      	ldr	r3, [pc, #64]	; (8017724 <prvInsertTimerInActiveList+0x7c>)
 80176e4:	681a      	ldr	r2, [r3, #0]
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	3304      	adds	r3, #4
 80176ea:	4619      	mov	r1, r3
 80176ec:	4610      	mov	r0, r2
 80176ee:	f7fd fd90 	bl	8015212 <vListInsert>
 80176f2:	e012      	b.n	801771a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80176f4:	687a      	ldr	r2, [r7, #4]
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	429a      	cmp	r2, r3
 80176fa:	d206      	bcs.n	801770a <prvInsertTimerInActiveList+0x62>
 80176fc:	68ba      	ldr	r2, [r7, #8]
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	429a      	cmp	r2, r3
 8017702:	d302      	bcc.n	801770a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017704:	2301      	movs	r3, #1
 8017706:	617b      	str	r3, [r7, #20]
 8017708:	e007      	b.n	801771a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801770a:	4b07      	ldr	r3, [pc, #28]	; (8017728 <prvInsertTimerInActiveList+0x80>)
 801770c:	681a      	ldr	r2, [r3, #0]
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	3304      	adds	r3, #4
 8017712:	4619      	mov	r1, r3
 8017714:	4610      	mov	r0, r2
 8017716:	f7fd fd7c 	bl	8015212 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801771a:	697b      	ldr	r3, [r7, #20]
}
 801771c:	4618      	mov	r0, r3
 801771e:	3718      	adds	r7, #24
 8017720:	46bd      	mov	sp, r7
 8017722:	bd80      	pop	{r7, pc}
 8017724:	20002480 	.word	0x20002480
 8017728:	2000247c 	.word	0x2000247c

0801772c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b08c      	sub	sp, #48	; 0x30
 8017730:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017732:	e0ae      	b.n	8017892 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017734:	68bb      	ldr	r3, [r7, #8]
 8017736:	2b00      	cmp	r3, #0
 8017738:	f2c0 80ab 	blt.w	8017892 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801773c:	693b      	ldr	r3, [r7, #16]
 801773e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017742:	695b      	ldr	r3, [r3, #20]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d004      	beq.n	8017752 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801774a:	3304      	adds	r3, #4
 801774c:	4618      	mov	r0, r3
 801774e:	f7fd fd98 	bl	8015282 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017752:	1d3b      	adds	r3, r7, #4
 8017754:	4618      	mov	r0, r3
 8017756:	f7ff ff87 	bl	8017668 <prvSampleTimeNow>
 801775a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 801775c:	68bb      	ldr	r3, [r7, #8]
 801775e:	2b09      	cmp	r3, #9
 8017760:	f200 8096 	bhi.w	8017890 <prvProcessReceivedCommands+0x164>
 8017764:	a201      	add	r2, pc, #4	; (adr r2, 801776c <prvProcessReceivedCommands+0x40>)
 8017766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801776a:	bf00      	nop
 801776c:	08017795 	.word	0x08017795
 8017770:	08017795 	.word	0x08017795
 8017774:	08017795 	.word	0x08017795
 8017778:	08017809 	.word	0x08017809
 801777c:	0801781d 	.word	0x0801781d
 8017780:	08017867 	.word	0x08017867
 8017784:	08017795 	.word	0x08017795
 8017788:	08017795 	.word	0x08017795
 801778c:	08017809 	.word	0x08017809
 8017790:	0801781d 	.word	0x0801781d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801779a:	f043 0301 	orr.w	r3, r3, #1
 801779e:	b2da      	uxtb	r2, r3
 80177a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80177a6:	68fa      	ldr	r2, [r7, #12]
 80177a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177aa:	699b      	ldr	r3, [r3, #24]
 80177ac:	18d1      	adds	r1, r2, r3
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	6a3a      	ldr	r2, [r7, #32]
 80177b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177b4:	f7ff ff78 	bl	80176a8 <prvInsertTimerInActiveList>
 80177b8:	4603      	mov	r3, r0
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d069      	beq.n	8017892 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80177be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c0:	6a1b      	ldr	r3, [r3, #32]
 80177c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80177c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80177cc:	f003 0304 	and.w	r3, r3, #4
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d05e      	beq.n	8017892 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80177d4:	68fa      	ldr	r2, [r7, #12]
 80177d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d8:	699b      	ldr	r3, [r3, #24]
 80177da:	441a      	add	r2, r3
 80177dc:	2300      	movs	r3, #0
 80177de:	9300      	str	r3, [sp, #0]
 80177e0:	2300      	movs	r3, #0
 80177e2:	2100      	movs	r1, #0
 80177e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177e6:	f7ff fe23 	bl	8017430 <xTimerGenericCommand>
 80177ea:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80177ec:	69fb      	ldr	r3, [r7, #28]
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	d14f      	bne.n	8017892 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80177f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f6:	f383 8811 	msr	BASEPRI, r3
 80177fa:	f3bf 8f6f 	isb	sy
 80177fe:	f3bf 8f4f 	dsb	sy
 8017802:	61bb      	str	r3, [r7, #24]
}
 8017804:	bf00      	nop
 8017806:	e7fe      	b.n	8017806 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801780a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801780e:	f023 0301 	bic.w	r3, r3, #1
 8017812:	b2da      	uxtb	r2, r3
 8017814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 801781a:	e03a      	b.n	8017892 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801781e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017822:	f043 0301 	orr.w	r3, r3, #1
 8017826:	b2da      	uxtb	r2, r3
 8017828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801782a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801782e:	68fa      	ldr	r2, [r7, #12]
 8017830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017832:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017836:	699b      	ldr	r3, [r3, #24]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d10a      	bne.n	8017852 <prvProcessReceivedCommands+0x126>
	__asm volatile
 801783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017840:	f383 8811 	msr	BASEPRI, r3
 8017844:	f3bf 8f6f 	isb	sy
 8017848:	f3bf 8f4f 	dsb	sy
 801784c:	617b      	str	r3, [r7, #20]
}
 801784e:	bf00      	nop
 8017850:	e7fe      	b.n	8017850 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017854:	699a      	ldr	r2, [r3, #24]
 8017856:	6a3b      	ldr	r3, [r7, #32]
 8017858:	18d1      	adds	r1, r2, r3
 801785a:	6a3b      	ldr	r3, [r7, #32]
 801785c:	6a3a      	ldr	r2, [r7, #32]
 801785e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017860:	f7ff ff22 	bl	80176a8 <prvInsertTimerInActiveList>
					break;
 8017864:	e015      	b.n	8017892 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801786c:	f003 0302 	and.w	r3, r3, #2
 8017870:	2b00      	cmp	r3, #0
 8017872:	d103      	bne.n	801787c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8017874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017876:	f000 fb7b 	bl	8017f70 <vPortFree>
 801787a:	e00a      	b.n	8017892 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801787e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017882:	f023 0301 	bic.w	r3, r3, #1
 8017886:	b2da      	uxtb	r2, r3
 8017888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801788a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801788e:	e000      	b.n	8017892 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8017890:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017892:	4b08      	ldr	r3, [pc, #32]	; (80178b4 <prvProcessReceivedCommands+0x188>)
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	f107 0108 	add.w	r1, r7, #8
 801789a:	2200      	movs	r2, #0
 801789c:	4618      	mov	r0, r3
 801789e:	f7fe f8c9 	bl	8015a34 <xQueueReceive>
 80178a2:	4603      	mov	r3, r0
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	f47f af45 	bne.w	8017734 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80178aa:	bf00      	nop
 80178ac:	bf00      	nop
 80178ae:	3728      	adds	r7, #40	; 0x28
 80178b0:	46bd      	mov	sp, r7
 80178b2:	bd80      	pop	{r7, pc}
 80178b4:	20002484 	.word	0x20002484

080178b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b088      	sub	sp, #32
 80178bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80178be:	e048      	b.n	8017952 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80178c0:	4b2d      	ldr	r3, [pc, #180]	; (8017978 <prvSwitchTimerLists+0xc0>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	68db      	ldr	r3, [r3, #12]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80178ca:	4b2b      	ldr	r3, [pc, #172]	; (8017978 <prvSwitchTimerLists+0xc0>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	68db      	ldr	r3, [r3, #12]
 80178d0:	68db      	ldr	r3, [r3, #12]
 80178d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	3304      	adds	r3, #4
 80178d8:	4618      	mov	r0, r3
 80178da:	f7fd fcd2 	bl	8015282 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	6a1b      	ldr	r3, [r3, #32]
 80178e2:	68f8      	ldr	r0, [r7, #12]
 80178e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80178ec:	f003 0304 	and.w	r3, r3, #4
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d02e      	beq.n	8017952 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	699b      	ldr	r3, [r3, #24]
 80178f8:	693a      	ldr	r2, [r7, #16]
 80178fa:	4413      	add	r3, r2
 80178fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80178fe:	68ba      	ldr	r2, [r7, #8]
 8017900:	693b      	ldr	r3, [r7, #16]
 8017902:	429a      	cmp	r2, r3
 8017904:	d90e      	bls.n	8017924 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	68ba      	ldr	r2, [r7, #8]
 801790a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	68fa      	ldr	r2, [r7, #12]
 8017910:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017912:	4b19      	ldr	r3, [pc, #100]	; (8017978 <prvSwitchTimerLists+0xc0>)
 8017914:	681a      	ldr	r2, [r3, #0]
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	3304      	adds	r3, #4
 801791a:	4619      	mov	r1, r3
 801791c:	4610      	mov	r0, r2
 801791e:	f7fd fc78 	bl	8015212 <vListInsert>
 8017922:	e016      	b.n	8017952 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017924:	2300      	movs	r3, #0
 8017926:	9300      	str	r3, [sp, #0]
 8017928:	2300      	movs	r3, #0
 801792a:	693a      	ldr	r2, [r7, #16]
 801792c:	2100      	movs	r1, #0
 801792e:	68f8      	ldr	r0, [r7, #12]
 8017930:	f7ff fd7e 	bl	8017430 <xTimerGenericCommand>
 8017934:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d10a      	bne.n	8017952 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017940:	f383 8811 	msr	BASEPRI, r3
 8017944:	f3bf 8f6f 	isb	sy
 8017948:	f3bf 8f4f 	dsb	sy
 801794c:	603b      	str	r3, [r7, #0]
}
 801794e:	bf00      	nop
 8017950:	e7fe      	b.n	8017950 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017952:	4b09      	ldr	r3, [pc, #36]	; (8017978 <prvSwitchTimerLists+0xc0>)
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d1b1      	bne.n	80178c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801795c:	4b06      	ldr	r3, [pc, #24]	; (8017978 <prvSwitchTimerLists+0xc0>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017962:	4b06      	ldr	r3, [pc, #24]	; (801797c <prvSwitchTimerLists+0xc4>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	4a04      	ldr	r2, [pc, #16]	; (8017978 <prvSwitchTimerLists+0xc0>)
 8017968:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801796a:	4a04      	ldr	r2, [pc, #16]	; (801797c <prvSwitchTimerLists+0xc4>)
 801796c:	697b      	ldr	r3, [r7, #20]
 801796e:	6013      	str	r3, [r2, #0]
}
 8017970:	bf00      	nop
 8017972:	3718      	adds	r7, #24
 8017974:	46bd      	mov	sp, r7
 8017976:	bd80      	pop	{r7, pc}
 8017978:	2000247c 	.word	0x2000247c
 801797c:	20002480 	.word	0x20002480

08017980 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017980:	b580      	push	{r7, lr}
 8017982:	b082      	sub	sp, #8
 8017984:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017986:	f000 f929 	bl	8017bdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801798a:	4b15      	ldr	r3, [pc, #84]	; (80179e0 <prvCheckForValidListAndQueue+0x60>)
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d120      	bne.n	80179d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017992:	4814      	ldr	r0, [pc, #80]	; (80179e4 <prvCheckForValidListAndQueue+0x64>)
 8017994:	f7fd fbef 	bl	8015176 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017998:	4813      	ldr	r0, [pc, #76]	; (80179e8 <prvCheckForValidListAndQueue+0x68>)
 801799a:	f7fd fbec 	bl	8015176 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801799e:	4b13      	ldr	r3, [pc, #76]	; (80179ec <prvCheckForValidListAndQueue+0x6c>)
 80179a0:	4a10      	ldr	r2, [pc, #64]	; (80179e4 <prvCheckForValidListAndQueue+0x64>)
 80179a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80179a4:	4b12      	ldr	r3, [pc, #72]	; (80179f0 <prvCheckForValidListAndQueue+0x70>)
 80179a6:	4a10      	ldr	r2, [pc, #64]	; (80179e8 <prvCheckForValidListAndQueue+0x68>)
 80179a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80179aa:	2300      	movs	r3, #0
 80179ac:	9300      	str	r3, [sp, #0]
 80179ae:	4b11      	ldr	r3, [pc, #68]	; (80179f4 <prvCheckForValidListAndQueue+0x74>)
 80179b0:	4a11      	ldr	r2, [pc, #68]	; (80179f8 <prvCheckForValidListAndQueue+0x78>)
 80179b2:	210c      	movs	r1, #12
 80179b4:	200a      	movs	r0, #10
 80179b6:	f7fd fcf5 	bl	80153a4 <xQueueGenericCreateStatic>
 80179ba:	4603      	mov	r3, r0
 80179bc:	4a08      	ldr	r2, [pc, #32]	; (80179e0 <prvCheckForValidListAndQueue+0x60>)
 80179be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80179c0:	4b07      	ldr	r3, [pc, #28]	; (80179e0 <prvCheckForValidListAndQueue+0x60>)
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d005      	beq.n	80179d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80179c8:	4b05      	ldr	r3, [pc, #20]	; (80179e0 <prvCheckForValidListAndQueue+0x60>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	490b      	ldr	r1, [pc, #44]	; (80179fc <prvCheckForValidListAndQueue+0x7c>)
 80179ce:	4618      	mov	r0, r3
 80179d0:	f7fe fbc4 	bl	801615c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80179d4:	f000 f932 	bl	8017c3c <vPortExitCritical>
}
 80179d8:	bf00      	nop
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}
 80179de:	bf00      	nop
 80179e0:	20002484 	.word	0x20002484
 80179e4:	20002454 	.word	0x20002454
 80179e8:	20002468 	.word	0x20002468
 80179ec:	2000247c 	.word	0x2000247c
 80179f0:	20002480 	.word	0x20002480
 80179f4:	20002508 	.word	0x20002508
 80179f8:	20002490 	.word	0x20002490
 80179fc:	0801f924 	.word	0x0801f924

08017a00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017a00:	b480      	push	{r7}
 8017a02:	b085      	sub	sp, #20
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	60f8      	str	r0, [r7, #12]
 8017a08:	60b9      	str	r1, [r7, #8]
 8017a0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	3b04      	subs	r3, #4
 8017a10:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	3b04      	subs	r3, #4
 8017a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017a20:	68bb      	ldr	r3, [r7, #8]
 8017a22:	f023 0201 	bic.w	r2, r3, #1
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	3b04      	subs	r3, #4
 8017a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017a30:	4a08      	ldr	r2, [pc, #32]	; (8017a54 <pxPortInitialiseStack+0x54>)
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	3b14      	subs	r3, #20
 8017a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017a3c:	687a      	ldr	r2, [r7, #4]
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	3b20      	subs	r3, #32
 8017a46:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017a48:	68fb      	ldr	r3, [r7, #12]
}
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	3714      	adds	r7, #20
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	bc80      	pop	{r7}
 8017a52:	4770      	bx	lr
 8017a54:	08017a59 	.word	0x08017a59

08017a58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017a58:	b480      	push	{r7}
 8017a5a:	b085      	sub	sp, #20
 8017a5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8017a5e:	2300      	movs	r3, #0
 8017a60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017a62:	4b12      	ldr	r3, [pc, #72]	; (8017aac <prvTaskExitError+0x54>)
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a6a:	d00a      	beq.n	8017a82 <prvTaskExitError+0x2a>
	__asm volatile
 8017a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a70:	f383 8811 	msr	BASEPRI, r3
 8017a74:	f3bf 8f6f 	isb	sy
 8017a78:	f3bf 8f4f 	dsb	sy
 8017a7c:	60fb      	str	r3, [r7, #12]
}
 8017a7e:	bf00      	nop
 8017a80:	e7fe      	b.n	8017a80 <prvTaskExitError+0x28>
	__asm volatile
 8017a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a86:	f383 8811 	msr	BASEPRI, r3
 8017a8a:	f3bf 8f6f 	isb	sy
 8017a8e:	f3bf 8f4f 	dsb	sy
 8017a92:	60bb      	str	r3, [r7, #8]
}
 8017a94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017a96:	bf00      	nop
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d0fc      	beq.n	8017a98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017a9e:	bf00      	nop
 8017aa0:	bf00      	nop
 8017aa2:	3714      	adds	r7, #20
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bc80      	pop	{r7}
 8017aa8:	4770      	bx	lr
 8017aaa:	bf00      	nop
 8017aac:	20000094 	.word	0x20000094

08017ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017ab0:	4b07      	ldr	r3, [pc, #28]	; (8017ad0 <pxCurrentTCBConst2>)
 8017ab2:	6819      	ldr	r1, [r3, #0]
 8017ab4:	6808      	ldr	r0, [r1, #0]
 8017ab6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017aba:	f380 8809 	msr	PSP, r0
 8017abe:	f3bf 8f6f 	isb	sy
 8017ac2:	f04f 0000 	mov.w	r0, #0
 8017ac6:	f380 8811 	msr	BASEPRI, r0
 8017aca:	f04e 0e0d 	orr.w	lr, lr, #13
 8017ace:	4770      	bx	lr

08017ad0 <pxCurrentTCBConst2>:
 8017ad0:	20002328 	.word	0x20002328
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017ad4:	bf00      	nop
 8017ad6:	bf00      	nop

08017ad8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8017ad8:	4806      	ldr	r0, [pc, #24]	; (8017af4 <prvPortStartFirstTask+0x1c>)
 8017ada:	6800      	ldr	r0, [r0, #0]
 8017adc:	6800      	ldr	r0, [r0, #0]
 8017ade:	f380 8808 	msr	MSP, r0
 8017ae2:	b662      	cpsie	i
 8017ae4:	b661      	cpsie	f
 8017ae6:	f3bf 8f4f 	dsb	sy
 8017aea:	f3bf 8f6f 	isb	sy
 8017aee:	df00      	svc	0
 8017af0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017af2:	bf00      	nop
 8017af4:	e000ed08 	.word	0xe000ed08

08017af8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b084      	sub	sp, #16
 8017afc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017afe:	4b32      	ldr	r3, [pc, #200]	; (8017bc8 <xPortStartScheduler+0xd0>)
 8017b00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	781b      	ldrb	r3, [r3, #0]
 8017b06:	b2db      	uxtb	r3, r3
 8017b08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	22ff      	movs	r2, #255	; 0xff
 8017b0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	781b      	ldrb	r3, [r3, #0]
 8017b14:	b2db      	uxtb	r3, r3
 8017b16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017b18:	78fb      	ldrb	r3, [r7, #3]
 8017b1a:	b2db      	uxtb	r3, r3
 8017b1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017b20:	b2da      	uxtb	r2, r3
 8017b22:	4b2a      	ldr	r3, [pc, #168]	; (8017bcc <xPortStartScheduler+0xd4>)
 8017b24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017b26:	4b2a      	ldr	r3, [pc, #168]	; (8017bd0 <xPortStartScheduler+0xd8>)
 8017b28:	2207      	movs	r2, #7
 8017b2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017b2c:	e009      	b.n	8017b42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8017b2e:	4b28      	ldr	r3, [pc, #160]	; (8017bd0 <xPortStartScheduler+0xd8>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	3b01      	subs	r3, #1
 8017b34:	4a26      	ldr	r2, [pc, #152]	; (8017bd0 <xPortStartScheduler+0xd8>)
 8017b36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017b38:	78fb      	ldrb	r3, [r7, #3]
 8017b3a:	b2db      	uxtb	r3, r3
 8017b3c:	005b      	lsls	r3, r3, #1
 8017b3e:	b2db      	uxtb	r3, r3
 8017b40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017b42:	78fb      	ldrb	r3, [r7, #3]
 8017b44:	b2db      	uxtb	r3, r3
 8017b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017b4a:	2b80      	cmp	r3, #128	; 0x80
 8017b4c:	d0ef      	beq.n	8017b2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017b4e:	4b20      	ldr	r3, [pc, #128]	; (8017bd0 <xPortStartScheduler+0xd8>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	f1c3 0307 	rsb	r3, r3, #7
 8017b56:	2b04      	cmp	r3, #4
 8017b58:	d00a      	beq.n	8017b70 <xPortStartScheduler+0x78>
	__asm volatile
 8017b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b5e:	f383 8811 	msr	BASEPRI, r3
 8017b62:	f3bf 8f6f 	isb	sy
 8017b66:	f3bf 8f4f 	dsb	sy
 8017b6a:	60bb      	str	r3, [r7, #8]
}
 8017b6c:	bf00      	nop
 8017b6e:	e7fe      	b.n	8017b6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017b70:	4b17      	ldr	r3, [pc, #92]	; (8017bd0 <xPortStartScheduler+0xd8>)
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	021b      	lsls	r3, r3, #8
 8017b76:	4a16      	ldr	r2, [pc, #88]	; (8017bd0 <xPortStartScheduler+0xd8>)
 8017b78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017b7a:	4b15      	ldr	r3, [pc, #84]	; (8017bd0 <xPortStartScheduler+0xd8>)
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017b82:	4a13      	ldr	r2, [pc, #76]	; (8017bd0 <xPortStartScheduler+0xd8>)
 8017b84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	b2da      	uxtb	r2, r3
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017b8e:	4b11      	ldr	r3, [pc, #68]	; (8017bd4 <xPortStartScheduler+0xdc>)
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	4a10      	ldr	r2, [pc, #64]	; (8017bd4 <xPortStartScheduler+0xdc>)
 8017b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017b98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017b9a:	4b0e      	ldr	r3, [pc, #56]	; (8017bd4 <xPortStartScheduler+0xdc>)
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	4a0d      	ldr	r2, [pc, #52]	; (8017bd4 <xPortStartScheduler+0xdc>)
 8017ba0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017ba4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017ba6:	f000 f8b9 	bl	8017d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017baa:	4b0b      	ldr	r3, [pc, #44]	; (8017bd8 <xPortStartScheduler+0xe0>)
 8017bac:	2200      	movs	r2, #0
 8017bae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017bb0:	f7ff ff92 	bl	8017ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017bb4:	f7fe ff22 	bl	80169fc <vTaskSwitchContext>
	prvTaskExitError();
 8017bb8:	f7ff ff4e 	bl	8017a58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017bbc:	2300      	movs	r3, #0
}
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	3710      	adds	r7, #16
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}
 8017bc6:	bf00      	nop
 8017bc8:	e000e400 	.word	0xe000e400
 8017bcc:	20002550 	.word	0x20002550
 8017bd0:	20002554 	.word	0x20002554
 8017bd4:	e000ed20 	.word	0xe000ed20
 8017bd8:	20000094 	.word	0x20000094

08017bdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017bdc:	b480      	push	{r7}
 8017bde:	b083      	sub	sp, #12
 8017be0:	af00      	add	r7, sp, #0
	__asm volatile
 8017be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017be6:	f383 8811 	msr	BASEPRI, r3
 8017bea:	f3bf 8f6f 	isb	sy
 8017bee:	f3bf 8f4f 	dsb	sy
 8017bf2:	607b      	str	r3, [r7, #4]
}
 8017bf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017bf6:	4b0f      	ldr	r3, [pc, #60]	; (8017c34 <vPortEnterCritical+0x58>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	3301      	adds	r3, #1
 8017bfc:	4a0d      	ldr	r2, [pc, #52]	; (8017c34 <vPortEnterCritical+0x58>)
 8017bfe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017c00:	4b0c      	ldr	r3, [pc, #48]	; (8017c34 <vPortEnterCritical+0x58>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	2b01      	cmp	r3, #1
 8017c06:	d10f      	bne.n	8017c28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017c08:	4b0b      	ldr	r3, [pc, #44]	; (8017c38 <vPortEnterCritical+0x5c>)
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	b2db      	uxtb	r3, r3
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d00a      	beq.n	8017c28 <vPortEnterCritical+0x4c>
	__asm volatile
 8017c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c16:	f383 8811 	msr	BASEPRI, r3
 8017c1a:	f3bf 8f6f 	isb	sy
 8017c1e:	f3bf 8f4f 	dsb	sy
 8017c22:	603b      	str	r3, [r7, #0]
}
 8017c24:	bf00      	nop
 8017c26:	e7fe      	b.n	8017c26 <vPortEnterCritical+0x4a>
	}
}
 8017c28:	bf00      	nop
 8017c2a:	370c      	adds	r7, #12
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bc80      	pop	{r7}
 8017c30:	4770      	bx	lr
 8017c32:	bf00      	nop
 8017c34:	20000094 	.word	0x20000094
 8017c38:	e000ed04 	.word	0xe000ed04

08017c3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017c3c:	b480      	push	{r7}
 8017c3e:	b083      	sub	sp, #12
 8017c40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017c42:	4b11      	ldr	r3, [pc, #68]	; (8017c88 <vPortExitCritical+0x4c>)
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d10a      	bne.n	8017c60 <vPortExitCritical+0x24>
	__asm volatile
 8017c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c4e:	f383 8811 	msr	BASEPRI, r3
 8017c52:	f3bf 8f6f 	isb	sy
 8017c56:	f3bf 8f4f 	dsb	sy
 8017c5a:	607b      	str	r3, [r7, #4]
}
 8017c5c:	bf00      	nop
 8017c5e:	e7fe      	b.n	8017c5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017c60:	4b09      	ldr	r3, [pc, #36]	; (8017c88 <vPortExitCritical+0x4c>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	3b01      	subs	r3, #1
 8017c66:	4a08      	ldr	r2, [pc, #32]	; (8017c88 <vPortExitCritical+0x4c>)
 8017c68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017c6a:	4b07      	ldr	r3, [pc, #28]	; (8017c88 <vPortExitCritical+0x4c>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d105      	bne.n	8017c7e <vPortExitCritical+0x42>
 8017c72:	2300      	movs	r3, #0
 8017c74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017c76:	683b      	ldr	r3, [r7, #0]
 8017c78:	f383 8811 	msr	BASEPRI, r3
}
 8017c7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017c7e:	bf00      	nop
 8017c80:	370c      	adds	r7, #12
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bc80      	pop	{r7}
 8017c86:	4770      	bx	lr
 8017c88:	20000094 	.word	0x20000094
 8017c8c:	00000000 	.word	0x00000000

08017c90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017c90:	f3ef 8009 	mrs	r0, PSP
 8017c94:	f3bf 8f6f 	isb	sy
 8017c98:	4b0d      	ldr	r3, [pc, #52]	; (8017cd0 <pxCurrentTCBConst>)
 8017c9a:	681a      	ldr	r2, [r3, #0]
 8017c9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017ca0:	6010      	str	r0, [r2, #0]
 8017ca2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8017ca6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017caa:	f380 8811 	msr	BASEPRI, r0
 8017cae:	f7fe fea5 	bl	80169fc <vTaskSwitchContext>
 8017cb2:	f04f 0000 	mov.w	r0, #0
 8017cb6:	f380 8811 	msr	BASEPRI, r0
 8017cba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017cbe:	6819      	ldr	r1, [r3, #0]
 8017cc0:	6808      	ldr	r0, [r1, #0]
 8017cc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017cc6:	f380 8809 	msr	PSP, r0
 8017cca:	f3bf 8f6f 	isb	sy
 8017cce:	4770      	bx	lr

08017cd0 <pxCurrentTCBConst>:
 8017cd0:	20002328 	.word	0x20002328
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017cd4:	bf00      	nop
 8017cd6:	bf00      	nop

08017cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b082      	sub	sp, #8
 8017cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8017cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce2:	f383 8811 	msr	BASEPRI, r3
 8017ce6:	f3bf 8f6f 	isb	sy
 8017cea:	f3bf 8f4f 	dsb	sy
 8017cee:	607b      	str	r3, [r7, #4]
}
 8017cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017cf2:	f7fe fdcb 	bl	801688c <xTaskIncrementTick>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d003      	beq.n	8017d04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017cfc:	4b06      	ldr	r3, [pc, #24]	; (8017d18 <SysTick_Handler+0x40>)
 8017cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d02:	601a      	str	r2, [r3, #0]
 8017d04:	2300      	movs	r3, #0
 8017d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	f383 8811 	msr	BASEPRI, r3
}
 8017d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017d10:	bf00      	nop
 8017d12:	3708      	adds	r7, #8
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bd80      	pop	{r7, pc}
 8017d18:	e000ed04 	.word	0xe000ed04

08017d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017d1c:	b480      	push	{r7}
 8017d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017d20:	4b0a      	ldr	r3, [pc, #40]	; (8017d4c <vPortSetupTimerInterrupt+0x30>)
 8017d22:	2200      	movs	r2, #0
 8017d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017d26:	4b0a      	ldr	r3, [pc, #40]	; (8017d50 <vPortSetupTimerInterrupt+0x34>)
 8017d28:	2200      	movs	r2, #0
 8017d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017d2c:	4b09      	ldr	r3, [pc, #36]	; (8017d54 <vPortSetupTimerInterrupt+0x38>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	4a09      	ldr	r2, [pc, #36]	; (8017d58 <vPortSetupTimerInterrupt+0x3c>)
 8017d32:	fba2 2303 	umull	r2, r3, r2, r3
 8017d36:	099b      	lsrs	r3, r3, #6
 8017d38:	4a08      	ldr	r2, [pc, #32]	; (8017d5c <vPortSetupTimerInterrupt+0x40>)
 8017d3a:	3b01      	subs	r3, #1
 8017d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017d3e:	4b03      	ldr	r3, [pc, #12]	; (8017d4c <vPortSetupTimerInterrupt+0x30>)
 8017d40:	2207      	movs	r2, #7
 8017d42:	601a      	str	r2, [r3, #0]
}
 8017d44:	bf00      	nop
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bc80      	pop	{r7}
 8017d4a:	4770      	bx	lr
 8017d4c:	e000e010 	.word	0xe000e010
 8017d50:	e000e018 	.word	0xe000e018
 8017d54:	20000080 	.word	0x20000080
 8017d58:	10624dd3 	.word	0x10624dd3
 8017d5c:	e000e014 	.word	0xe000e014

08017d60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017d60:	b480      	push	{r7}
 8017d62:	b085      	sub	sp, #20
 8017d64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017d66:	f3ef 8305 	mrs	r3, IPSR
 8017d6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	2b0f      	cmp	r3, #15
 8017d70:	d914      	bls.n	8017d9c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017d72:	4a16      	ldr	r2, [pc, #88]	; (8017dcc <vPortValidateInterruptPriority+0x6c>)
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	4413      	add	r3, r2
 8017d78:	781b      	ldrb	r3, [r3, #0]
 8017d7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017d7c:	4b14      	ldr	r3, [pc, #80]	; (8017dd0 <vPortValidateInterruptPriority+0x70>)
 8017d7e:	781b      	ldrb	r3, [r3, #0]
 8017d80:	7afa      	ldrb	r2, [r7, #11]
 8017d82:	429a      	cmp	r2, r3
 8017d84:	d20a      	bcs.n	8017d9c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d8a:	f383 8811 	msr	BASEPRI, r3
 8017d8e:	f3bf 8f6f 	isb	sy
 8017d92:	f3bf 8f4f 	dsb	sy
 8017d96:	607b      	str	r3, [r7, #4]
}
 8017d98:	bf00      	nop
 8017d9a:	e7fe      	b.n	8017d9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017d9c:	4b0d      	ldr	r3, [pc, #52]	; (8017dd4 <vPortValidateInterruptPriority+0x74>)
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017da4:	4b0c      	ldr	r3, [pc, #48]	; (8017dd8 <vPortValidateInterruptPriority+0x78>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	429a      	cmp	r2, r3
 8017daa:	d90a      	bls.n	8017dc2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017db0:	f383 8811 	msr	BASEPRI, r3
 8017db4:	f3bf 8f6f 	isb	sy
 8017db8:	f3bf 8f4f 	dsb	sy
 8017dbc:	603b      	str	r3, [r7, #0]
}
 8017dbe:	bf00      	nop
 8017dc0:	e7fe      	b.n	8017dc0 <vPortValidateInterruptPriority+0x60>
	}
 8017dc2:	bf00      	nop
 8017dc4:	3714      	adds	r7, #20
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bc80      	pop	{r7}
 8017dca:	4770      	bx	lr
 8017dcc:	e000e3f0 	.word	0xe000e3f0
 8017dd0:	20002550 	.word	0x20002550
 8017dd4:	e000ed0c 	.word	0xe000ed0c
 8017dd8:	20002554 	.word	0x20002554

08017ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b08a      	sub	sp, #40	; 0x28
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017de4:	2300      	movs	r3, #0
 8017de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017de8:	f7fe fc98 	bl	801671c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017dec:	4b5b      	ldr	r3, [pc, #364]	; (8017f5c <pvPortMalloc+0x180>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d101      	bne.n	8017df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017df4:	f000 f916 	bl	8018024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017df8:	4b59      	ldr	r3, [pc, #356]	; (8017f60 <pvPortMalloc+0x184>)
 8017dfa:	681a      	ldr	r2, [r3, #0]
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	4013      	ands	r3, r2
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	f040 808e 	bne.w	8017f22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d01d      	beq.n	8017e48 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017e0c:	2208      	movs	r2, #8
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	4413      	add	r3, r2
 8017e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	f003 0307 	and.w	r3, r3, #7
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d014      	beq.n	8017e48 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	f023 0307 	bic.w	r3, r3, #7
 8017e24:	3308      	adds	r3, #8
 8017e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f003 0307 	and.w	r3, r3, #7
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d00a      	beq.n	8017e48 <pvPortMalloc+0x6c>
	__asm volatile
 8017e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e36:	f383 8811 	msr	BASEPRI, r3
 8017e3a:	f3bf 8f6f 	isb	sy
 8017e3e:	f3bf 8f4f 	dsb	sy
 8017e42:	617b      	str	r3, [r7, #20]
}
 8017e44:	bf00      	nop
 8017e46:	e7fe      	b.n	8017e46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d069      	beq.n	8017f22 <pvPortMalloc+0x146>
 8017e4e:	4b45      	ldr	r3, [pc, #276]	; (8017f64 <pvPortMalloc+0x188>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	687a      	ldr	r2, [r7, #4]
 8017e54:	429a      	cmp	r2, r3
 8017e56:	d864      	bhi.n	8017f22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017e58:	4b43      	ldr	r3, [pc, #268]	; (8017f68 <pvPortMalloc+0x18c>)
 8017e5a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017e5c:	4b42      	ldr	r3, [pc, #264]	; (8017f68 <pvPortMalloc+0x18c>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017e62:	e004      	b.n	8017e6e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e66:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e70:	685b      	ldr	r3, [r3, #4]
 8017e72:	687a      	ldr	r2, [r7, #4]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d903      	bls.n	8017e80 <pvPortMalloc+0xa4>
 8017e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d1f1      	bne.n	8017e64 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017e80:	4b36      	ldr	r3, [pc, #216]	; (8017f5c <pvPortMalloc+0x180>)
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d04b      	beq.n	8017f22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017e8a:	6a3b      	ldr	r3, [r7, #32]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	2208      	movs	r2, #8
 8017e90:	4413      	add	r3, r2
 8017e92:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e96:	681a      	ldr	r2, [r3, #0]
 8017e98:	6a3b      	ldr	r3, [r7, #32]
 8017e9a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9e:	685a      	ldr	r2, [r3, #4]
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	1ad2      	subs	r2, r2, r3
 8017ea4:	2308      	movs	r3, #8
 8017ea6:	005b      	lsls	r3, r3, #1
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	d91f      	bls.n	8017eec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	4413      	add	r3, r2
 8017eb2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017eb4:	69bb      	ldr	r3, [r7, #24]
 8017eb6:	f003 0307 	and.w	r3, r3, #7
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d00a      	beq.n	8017ed4 <pvPortMalloc+0xf8>
	__asm volatile
 8017ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ec2:	f383 8811 	msr	BASEPRI, r3
 8017ec6:	f3bf 8f6f 	isb	sy
 8017eca:	f3bf 8f4f 	dsb	sy
 8017ece:	613b      	str	r3, [r7, #16]
}
 8017ed0:	bf00      	nop
 8017ed2:	e7fe      	b.n	8017ed2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed6:	685a      	ldr	r2, [r3, #4]
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	1ad2      	subs	r2, r2, r3
 8017edc:	69bb      	ldr	r3, [r7, #24]
 8017ede:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee2:	687a      	ldr	r2, [r7, #4]
 8017ee4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017ee6:	69b8      	ldr	r0, [r7, #24]
 8017ee8:	f000 f8fe 	bl	80180e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017eec:	4b1d      	ldr	r3, [pc, #116]	; (8017f64 <pvPortMalloc+0x188>)
 8017eee:	681a      	ldr	r2, [r3, #0]
 8017ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef2:	685b      	ldr	r3, [r3, #4]
 8017ef4:	1ad3      	subs	r3, r2, r3
 8017ef6:	4a1b      	ldr	r2, [pc, #108]	; (8017f64 <pvPortMalloc+0x188>)
 8017ef8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017efa:	4b1a      	ldr	r3, [pc, #104]	; (8017f64 <pvPortMalloc+0x188>)
 8017efc:	681a      	ldr	r2, [r3, #0]
 8017efe:	4b1b      	ldr	r3, [pc, #108]	; (8017f6c <pvPortMalloc+0x190>)
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	429a      	cmp	r2, r3
 8017f04:	d203      	bcs.n	8017f0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017f06:	4b17      	ldr	r3, [pc, #92]	; (8017f64 <pvPortMalloc+0x188>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	4a18      	ldr	r2, [pc, #96]	; (8017f6c <pvPortMalloc+0x190>)
 8017f0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f10:	685a      	ldr	r2, [r3, #4]
 8017f12:	4b13      	ldr	r3, [pc, #76]	; (8017f60 <pvPortMalloc+0x184>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	431a      	orrs	r2, r3
 8017f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1e:	2200      	movs	r2, #0
 8017f20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017f22:	f7fe fc09 	bl	8016738 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8017f26:	69fb      	ldr	r3, [r7, #28]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d101      	bne.n	8017f30 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8017f2c:	f7f1 fb70 	bl	8009610 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017f30:	69fb      	ldr	r3, [r7, #28]
 8017f32:	f003 0307 	and.w	r3, r3, #7
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d00a      	beq.n	8017f50 <pvPortMalloc+0x174>
	__asm volatile
 8017f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f3e:	f383 8811 	msr	BASEPRI, r3
 8017f42:	f3bf 8f6f 	isb	sy
 8017f46:	f3bf 8f4f 	dsb	sy
 8017f4a:	60fb      	str	r3, [r7, #12]
}
 8017f4c:	bf00      	nop
 8017f4e:	e7fe      	b.n	8017f4e <pvPortMalloc+0x172>
	return pvReturn;
 8017f50:	69fb      	ldr	r3, [r7, #28]
}
 8017f52:	4618      	mov	r0, r3
 8017f54:	3728      	adds	r7, #40	; 0x28
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}
 8017f5a:	bf00      	nop
 8017f5c:	20005560 	.word	0x20005560
 8017f60:	2000556c 	.word	0x2000556c
 8017f64:	20005564 	.word	0x20005564
 8017f68:	20005558 	.word	0x20005558
 8017f6c:	20005568 	.word	0x20005568

08017f70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b086      	sub	sp, #24
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d048      	beq.n	8018014 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017f82:	2308      	movs	r3, #8
 8017f84:	425b      	negs	r3, r3
 8017f86:	697a      	ldr	r2, [r7, #20]
 8017f88:	4413      	add	r3, r2
 8017f8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017f8c:	697b      	ldr	r3, [r7, #20]
 8017f8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017f90:	693b      	ldr	r3, [r7, #16]
 8017f92:	685a      	ldr	r2, [r3, #4]
 8017f94:	4b21      	ldr	r3, [pc, #132]	; (801801c <vPortFree+0xac>)
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	4013      	ands	r3, r2
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d10a      	bne.n	8017fb4 <vPortFree+0x44>
	__asm volatile
 8017f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fa2:	f383 8811 	msr	BASEPRI, r3
 8017fa6:	f3bf 8f6f 	isb	sy
 8017faa:	f3bf 8f4f 	dsb	sy
 8017fae:	60fb      	str	r3, [r7, #12]
}
 8017fb0:	bf00      	nop
 8017fb2:	e7fe      	b.n	8017fb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017fb4:	693b      	ldr	r3, [r7, #16]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d00a      	beq.n	8017fd2 <vPortFree+0x62>
	__asm volatile
 8017fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fc0:	f383 8811 	msr	BASEPRI, r3
 8017fc4:	f3bf 8f6f 	isb	sy
 8017fc8:	f3bf 8f4f 	dsb	sy
 8017fcc:	60bb      	str	r3, [r7, #8]
}
 8017fce:	bf00      	nop
 8017fd0:	e7fe      	b.n	8017fd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017fd2:	693b      	ldr	r3, [r7, #16]
 8017fd4:	685a      	ldr	r2, [r3, #4]
 8017fd6:	4b11      	ldr	r3, [pc, #68]	; (801801c <vPortFree+0xac>)
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	4013      	ands	r3, r2
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d019      	beq.n	8018014 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017fe0:	693b      	ldr	r3, [r7, #16]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d115      	bne.n	8018014 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017fe8:	693b      	ldr	r3, [r7, #16]
 8017fea:	685a      	ldr	r2, [r3, #4]
 8017fec:	4b0b      	ldr	r3, [pc, #44]	; (801801c <vPortFree+0xac>)
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	43db      	mvns	r3, r3
 8017ff2:	401a      	ands	r2, r3
 8017ff4:	693b      	ldr	r3, [r7, #16]
 8017ff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017ff8:	f7fe fb90 	bl	801671c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017ffc:	693b      	ldr	r3, [r7, #16]
 8017ffe:	685a      	ldr	r2, [r3, #4]
 8018000:	4b07      	ldr	r3, [pc, #28]	; (8018020 <vPortFree+0xb0>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	4413      	add	r3, r2
 8018006:	4a06      	ldr	r2, [pc, #24]	; (8018020 <vPortFree+0xb0>)
 8018008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801800a:	6938      	ldr	r0, [r7, #16]
 801800c:	f000 f86c 	bl	80180e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018010:	f7fe fb92 	bl	8016738 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018014:	bf00      	nop
 8018016:	3718      	adds	r7, #24
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}
 801801c:	2000556c 	.word	0x2000556c
 8018020:	20005564 	.word	0x20005564

08018024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018024:	b480      	push	{r7}
 8018026:	b085      	sub	sp, #20
 8018028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801802a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801802e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018030:	4b27      	ldr	r3, [pc, #156]	; (80180d0 <prvHeapInit+0xac>)
 8018032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	f003 0307 	and.w	r3, r3, #7
 801803a:	2b00      	cmp	r3, #0
 801803c:	d00c      	beq.n	8018058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	3307      	adds	r3, #7
 8018042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	f023 0307 	bic.w	r3, r3, #7
 801804a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801804c:	68ba      	ldr	r2, [r7, #8]
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	1ad3      	subs	r3, r2, r3
 8018052:	4a1f      	ldr	r2, [pc, #124]	; (80180d0 <prvHeapInit+0xac>)
 8018054:	4413      	add	r3, r2
 8018056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801805c:	4a1d      	ldr	r2, [pc, #116]	; (80180d4 <prvHeapInit+0xb0>)
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018062:	4b1c      	ldr	r3, [pc, #112]	; (80180d4 <prvHeapInit+0xb0>)
 8018064:	2200      	movs	r2, #0
 8018066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	68ba      	ldr	r2, [r7, #8]
 801806c:	4413      	add	r3, r2
 801806e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018070:	2208      	movs	r2, #8
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	1a9b      	subs	r3, r3, r2
 8018076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	f023 0307 	bic.w	r3, r3, #7
 801807e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	4a15      	ldr	r2, [pc, #84]	; (80180d8 <prvHeapInit+0xb4>)
 8018084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018086:	4b14      	ldr	r3, [pc, #80]	; (80180d8 <prvHeapInit+0xb4>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	2200      	movs	r2, #0
 801808c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801808e:	4b12      	ldr	r3, [pc, #72]	; (80180d8 <prvHeapInit+0xb4>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	2200      	movs	r2, #0
 8018094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801809a:	683b      	ldr	r3, [r7, #0]
 801809c:	68fa      	ldr	r2, [r7, #12]
 801809e:	1ad2      	subs	r2, r2, r3
 80180a0:	683b      	ldr	r3, [r7, #0]
 80180a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80180a4:	4b0c      	ldr	r3, [pc, #48]	; (80180d8 <prvHeapInit+0xb4>)
 80180a6:	681a      	ldr	r2, [r3, #0]
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80180ac:	683b      	ldr	r3, [r7, #0]
 80180ae:	685b      	ldr	r3, [r3, #4]
 80180b0:	4a0a      	ldr	r2, [pc, #40]	; (80180dc <prvHeapInit+0xb8>)
 80180b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80180b4:	683b      	ldr	r3, [r7, #0]
 80180b6:	685b      	ldr	r3, [r3, #4]
 80180b8:	4a09      	ldr	r2, [pc, #36]	; (80180e0 <prvHeapInit+0xbc>)
 80180ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80180bc:	4b09      	ldr	r3, [pc, #36]	; (80180e4 <prvHeapInit+0xc0>)
 80180be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80180c2:	601a      	str	r2, [r3, #0]
}
 80180c4:	bf00      	nop
 80180c6:	3714      	adds	r7, #20
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bc80      	pop	{r7}
 80180cc:	4770      	bx	lr
 80180ce:	bf00      	nop
 80180d0:	20002558 	.word	0x20002558
 80180d4:	20005558 	.word	0x20005558
 80180d8:	20005560 	.word	0x20005560
 80180dc:	20005568 	.word	0x20005568
 80180e0:	20005564 	.word	0x20005564
 80180e4:	2000556c 	.word	0x2000556c

080180e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80180e8:	b480      	push	{r7}
 80180ea:	b085      	sub	sp, #20
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80180f0:	4b27      	ldr	r3, [pc, #156]	; (8018190 <prvInsertBlockIntoFreeList+0xa8>)
 80180f2:	60fb      	str	r3, [r7, #12]
 80180f4:	e002      	b.n	80180fc <prvInsertBlockIntoFreeList+0x14>
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	60fb      	str	r3, [r7, #12]
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	687a      	ldr	r2, [r7, #4]
 8018102:	429a      	cmp	r2, r3
 8018104:	d8f7      	bhi.n	80180f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	685b      	ldr	r3, [r3, #4]
 801810e:	68ba      	ldr	r2, [r7, #8]
 8018110:	4413      	add	r3, r2
 8018112:	687a      	ldr	r2, [r7, #4]
 8018114:	429a      	cmp	r2, r3
 8018116:	d108      	bne.n	801812a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	685a      	ldr	r2, [r3, #4]
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	685b      	ldr	r3, [r3, #4]
 8018120:	441a      	add	r2, r3
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	685b      	ldr	r3, [r3, #4]
 8018132:	68ba      	ldr	r2, [r7, #8]
 8018134:	441a      	add	r2, r3
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	429a      	cmp	r2, r3
 801813c:	d118      	bne.n	8018170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	681a      	ldr	r2, [r3, #0]
 8018142:	4b14      	ldr	r3, [pc, #80]	; (8018194 <prvInsertBlockIntoFreeList+0xac>)
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	429a      	cmp	r2, r3
 8018148:	d00d      	beq.n	8018166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	685a      	ldr	r2, [r3, #4]
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	685b      	ldr	r3, [r3, #4]
 8018154:	441a      	add	r2, r3
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	681a      	ldr	r2, [r3, #0]
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	601a      	str	r2, [r3, #0]
 8018164:	e008      	b.n	8018178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018166:	4b0b      	ldr	r3, [pc, #44]	; (8018194 <prvInsertBlockIntoFreeList+0xac>)
 8018168:	681a      	ldr	r2, [r3, #0]
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	601a      	str	r2, [r3, #0]
 801816e:	e003      	b.n	8018178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	681a      	ldr	r2, [r3, #0]
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018178:	68fa      	ldr	r2, [r7, #12]
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	429a      	cmp	r2, r3
 801817e:	d002      	beq.n	8018186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	687a      	ldr	r2, [r7, #4]
 8018184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018186:	bf00      	nop
 8018188:	3714      	adds	r7, #20
 801818a:	46bd      	mov	sp, r7
 801818c:	bc80      	pop	{r7}
 801818e:	4770      	bx	lr
 8018190:	20005558 	.word	0x20005558
 8018194:	20005560 	.word	0x20005560

08018198 <std>:
 8018198:	2300      	movs	r3, #0
 801819a:	b510      	push	{r4, lr}
 801819c:	4604      	mov	r4, r0
 801819e:	e9c0 3300 	strd	r3, r3, [r0]
 80181a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80181a6:	6083      	str	r3, [r0, #8]
 80181a8:	8181      	strh	r1, [r0, #12]
 80181aa:	6643      	str	r3, [r0, #100]	; 0x64
 80181ac:	81c2      	strh	r2, [r0, #14]
 80181ae:	6183      	str	r3, [r0, #24]
 80181b0:	4619      	mov	r1, r3
 80181b2:	2208      	movs	r2, #8
 80181b4:	305c      	adds	r0, #92	; 0x5c
 80181b6:	f000 fb6d 	bl	8018894 <memset>
 80181ba:	4b05      	ldr	r3, [pc, #20]	; (80181d0 <std+0x38>)
 80181bc:	6223      	str	r3, [r4, #32]
 80181be:	4b05      	ldr	r3, [pc, #20]	; (80181d4 <std+0x3c>)
 80181c0:	6263      	str	r3, [r4, #36]	; 0x24
 80181c2:	4b05      	ldr	r3, [pc, #20]	; (80181d8 <std+0x40>)
 80181c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80181c6:	4b05      	ldr	r3, [pc, #20]	; (80181dc <std+0x44>)
 80181c8:	61e4      	str	r4, [r4, #28]
 80181ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80181cc:	bd10      	pop	{r4, pc}
 80181ce:	bf00      	nop
 80181d0:	08018709 	.word	0x08018709
 80181d4:	0801872b 	.word	0x0801872b
 80181d8:	08018763 	.word	0x08018763
 80181dc:	08018787 	.word	0x08018787

080181e0 <stdio_exit_handler>:
 80181e0:	4a02      	ldr	r2, [pc, #8]	; (80181ec <stdio_exit_handler+0xc>)
 80181e2:	4903      	ldr	r1, [pc, #12]	; (80181f0 <stdio_exit_handler+0x10>)
 80181e4:	4803      	ldr	r0, [pc, #12]	; (80181f4 <stdio_exit_handler+0x14>)
 80181e6:	f000 b9c5 	b.w	8018574 <_fwalk_sglue>
 80181ea:	bf00      	nop
 80181ec:	20000098 	.word	0x20000098
 80181f0:	0801c709 	.word	0x0801c709
 80181f4:	200000a8 	.word	0x200000a8

080181f8 <cleanup_stdio>:
 80181f8:	6841      	ldr	r1, [r0, #4]
 80181fa:	4b0c      	ldr	r3, [pc, #48]	; (801822c <cleanup_stdio+0x34>)
 80181fc:	4299      	cmp	r1, r3
 80181fe:	b510      	push	{r4, lr}
 8018200:	4604      	mov	r4, r0
 8018202:	d001      	beq.n	8018208 <cleanup_stdio+0x10>
 8018204:	f004 fa80 	bl	801c708 <_fclose_r>
 8018208:	68a1      	ldr	r1, [r4, #8]
 801820a:	4b09      	ldr	r3, [pc, #36]	; (8018230 <cleanup_stdio+0x38>)
 801820c:	4299      	cmp	r1, r3
 801820e:	d002      	beq.n	8018216 <cleanup_stdio+0x1e>
 8018210:	4620      	mov	r0, r4
 8018212:	f004 fa79 	bl	801c708 <_fclose_r>
 8018216:	68e1      	ldr	r1, [r4, #12]
 8018218:	4b06      	ldr	r3, [pc, #24]	; (8018234 <cleanup_stdio+0x3c>)
 801821a:	4299      	cmp	r1, r3
 801821c:	d004      	beq.n	8018228 <cleanup_stdio+0x30>
 801821e:	4620      	mov	r0, r4
 8018220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018224:	f004 ba70 	b.w	801c708 <_fclose_r>
 8018228:	bd10      	pop	{r4, pc}
 801822a:	bf00      	nop
 801822c:	20005570 	.word	0x20005570
 8018230:	200055d8 	.word	0x200055d8
 8018234:	20005640 	.word	0x20005640

08018238 <global_stdio_init.part.0>:
 8018238:	b510      	push	{r4, lr}
 801823a:	4b0b      	ldr	r3, [pc, #44]	; (8018268 <global_stdio_init.part.0+0x30>)
 801823c:	4c0b      	ldr	r4, [pc, #44]	; (801826c <global_stdio_init.part.0+0x34>)
 801823e:	4a0c      	ldr	r2, [pc, #48]	; (8018270 <global_stdio_init.part.0+0x38>)
 8018240:	601a      	str	r2, [r3, #0]
 8018242:	4620      	mov	r0, r4
 8018244:	2200      	movs	r2, #0
 8018246:	2104      	movs	r1, #4
 8018248:	f7ff ffa6 	bl	8018198 <std>
 801824c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018250:	2201      	movs	r2, #1
 8018252:	2109      	movs	r1, #9
 8018254:	f7ff ffa0 	bl	8018198 <std>
 8018258:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801825c:	2202      	movs	r2, #2
 801825e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018262:	2112      	movs	r1, #18
 8018264:	f7ff bf98 	b.w	8018198 <std>
 8018268:	200056a8 	.word	0x200056a8
 801826c:	20005570 	.word	0x20005570
 8018270:	080181e1 	.word	0x080181e1

08018274 <__sfp_lock_acquire>:
 8018274:	4801      	ldr	r0, [pc, #4]	; (801827c <__sfp_lock_acquire+0x8>)
 8018276:	f000 bbf7 	b.w	8018a68 <__retarget_lock_acquire_recursive>
 801827a:	bf00      	nop
 801827c:	200056b2 	.word	0x200056b2

08018280 <__sfp_lock_release>:
 8018280:	4801      	ldr	r0, [pc, #4]	; (8018288 <__sfp_lock_release+0x8>)
 8018282:	f000 bbf2 	b.w	8018a6a <__retarget_lock_release_recursive>
 8018286:	bf00      	nop
 8018288:	200056b2 	.word	0x200056b2

0801828c <__sinit>:
 801828c:	b510      	push	{r4, lr}
 801828e:	4604      	mov	r4, r0
 8018290:	f7ff fff0 	bl	8018274 <__sfp_lock_acquire>
 8018294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018296:	b11b      	cbz	r3, 80182a0 <__sinit+0x14>
 8018298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801829c:	f7ff bff0 	b.w	8018280 <__sfp_lock_release>
 80182a0:	4b04      	ldr	r3, [pc, #16]	; (80182b4 <__sinit+0x28>)
 80182a2:	6363      	str	r3, [r4, #52]	; 0x34
 80182a4:	4b04      	ldr	r3, [pc, #16]	; (80182b8 <__sinit+0x2c>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d1f5      	bne.n	8018298 <__sinit+0xc>
 80182ac:	f7ff ffc4 	bl	8018238 <global_stdio_init.part.0>
 80182b0:	e7f2      	b.n	8018298 <__sinit+0xc>
 80182b2:	bf00      	nop
 80182b4:	080181f9 	.word	0x080181f9
 80182b8:	200056a8 	.word	0x200056a8

080182bc <fprintf>:
 80182bc:	b40e      	push	{r1, r2, r3}
 80182be:	b503      	push	{r0, r1, lr}
 80182c0:	4601      	mov	r1, r0
 80182c2:	ab03      	add	r3, sp, #12
 80182c4:	4805      	ldr	r0, [pc, #20]	; (80182dc <fprintf+0x20>)
 80182c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80182ca:	6800      	ldr	r0, [r0, #0]
 80182cc:	9301      	str	r3, [sp, #4]
 80182ce:	f002 fabb 	bl	801a848 <_vfprintf_r>
 80182d2:	b002      	add	sp, #8
 80182d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80182d8:	b003      	add	sp, #12
 80182da:	4770      	bx	lr
 80182dc:	200001c8 	.word	0x200001c8

080182e0 <__sfvwrite_r>:
 80182e0:	6893      	ldr	r3, [r2, #8]
 80182e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182e6:	4606      	mov	r6, r0
 80182e8:	460c      	mov	r4, r1
 80182ea:	4691      	mov	r9, r2
 80182ec:	b91b      	cbnz	r3, 80182f6 <__sfvwrite_r+0x16>
 80182ee:	2000      	movs	r0, #0
 80182f0:	b003      	add	sp, #12
 80182f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182f6:	898b      	ldrh	r3, [r1, #12]
 80182f8:	0718      	lsls	r0, r3, #28
 80182fa:	d54f      	bpl.n	801839c <__sfvwrite_r+0xbc>
 80182fc:	690b      	ldr	r3, [r1, #16]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d04c      	beq.n	801839c <__sfvwrite_r+0xbc>
 8018302:	89a3      	ldrh	r3, [r4, #12]
 8018304:	f8d9 8000 	ldr.w	r8, [r9]
 8018308:	f013 0702 	ands.w	r7, r3, #2
 801830c:	d16b      	bne.n	80183e6 <__sfvwrite_r+0x106>
 801830e:	f013 0301 	ands.w	r3, r3, #1
 8018312:	f000 809b 	beq.w	801844c <__sfvwrite_r+0x16c>
 8018316:	4638      	mov	r0, r7
 8018318:	46ba      	mov	sl, r7
 801831a:	46bb      	mov	fp, r7
 801831c:	f1bb 0f00 	cmp.w	fp, #0
 8018320:	f000 8102 	beq.w	8018528 <__sfvwrite_r+0x248>
 8018324:	b950      	cbnz	r0, 801833c <__sfvwrite_r+0x5c>
 8018326:	465a      	mov	r2, fp
 8018328:	210a      	movs	r1, #10
 801832a:	4650      	mov	r0, sl
 801832c:	f7f0 f928 	bl	8008580 <memchr>
 8018330:	2800      	cmp	r0, #0
 8018332:	f000 80ff 	beq.w	8018534 <__sfvwrite_r+0x254>
 8018336:	3001      	adds	r0, #1
 8018338:	eba0 070a 	sub.w	r7, r0, sl
 801833c:	6820      	ldr	r0, [r4, #0]
 801833e:	6921      	ldr	r1, [r4, #16]
 8018340:	68a5      	ldr	r5, [r4, #8]
 8018342:	6963      	ldr	r3, [r4, #20]
 8018344:	455f      	cmp	r7, fp
 8018346:	463a      	mov	r2, r7
 8018348:	bf28      	it	cs
 801834a:	465a      	movcs	r2, fp
 801834c:	4288      	cmp	r0, r1
 801834e:	f240 80f4 	bls.w	801853a <__sfvwrite_r+0x25a>
 8018352:	441d      	add	r5, r3
 8018354:	42aa      	cmp	r2, r5
 8018356:	f340 80f0 	ble.w	801853a <__sfvwrite_r+0x25a>
 801835a:	4651      	mov	r1, sl
 801835c:	462a      	mov	r2, r5
 801835e:	f000 fa7f 	bl	8018860 <memmove>
 8018362:	6823      	ldr	r3, [r4, #0]
 8018364:	442b      	add	r3, r5
 8018366:	6023      	str	r3, [r4, #0]
 8018368:	4621      	mov	r1, r4
 801836a:	4630      	mov	r0, r6
 801836c:	f004 faae 	bl	801c8cc <_fflush_r>
 8018370:	2800      	cmp	r0, #0
 8018372:	d166      	bne.n	8018442 <__sfvwrite_r+0x162>
 8018374:	1b7f      	subs	r7, r7, r5
 8018376:	f040 80f8 	bne.w	801856a <__sfvwrite_r+0x28a>
 801837a:	4621      	mov	r1, r4
 801837c:	4630      	mov	r0, r6
 801837e:	f004 faa5 	bl	801c8cc <_fflush_r>
 8018382:	2800      	cmp	r0, #0
 8018384:	d15d      	bne.n	8018442 <__sfvwrite_r+0x162>
 8018386:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801838a:	1b5b      	subs	r3, r3, r5
 801838c:	44aa      	add	sl, r5
 801838e:	ebab 0b05 	sub.w	fp, fp, r5
 8018392:	f8c9 3008 	str.w	r3, [r9, #8]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d1c0      	bne.n	801831c <__sfvwrite_r+0x3c>
 801839a:	e7a8      	b.n	80182ee <__sfvwrite_r+0xe>
 801839c:	4621      	mov	r1, r4
 801839e:	4630      	mov	r0, r6
 80183a0:	f000 f9f6 	bl	8018790 <__swsetup_r>
 80183a4:	2800      	cmp	r0, #0
 80183a6:	d0ac      	beq.n	8018302 <__sfvwrite_r+0x22>
 80183a8:	f04f 30ff 	mov.w	r0, #4294967295
 80183ac:	e7a0      	b.n	80182f0 <__sfvwrite_r+0x10>
 80183ae:	e9d8 a500 	ldrd	sl, r5, [r8]
 80183b2:	f108 0808 	add.w	r8, r8, #8
 80183b6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80183ba:	69e1      	ldr	r1, [r4, #28]
 80183bc:	2d00      	cmp	r5, #0
 80183be:	d0f6      	beq.n	80183ae <__sfvwrite_r+0xce>
 80183c0:	42bd      	cmp	r5, r7
 80183c2:	462b      	mov	r3, r5
 80183c4:	4652      	mov	r2, sl
 80183c6:	bf28      	it	cs
 80183c8:	463b      	movcs	r3, r7
 80183ca:	4630      	mov	r0, r6
 80183cc:	47d8      	blx	fp
 80183ce:	2800      	cmp	r0, #0
 80183d0:	dd37      	ble.n	8018442 <__sfvwrite_r+0x162>
 80183d2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80183d6:	1a1b      	subs	r3, r3, r0
 80183d8:	4482      	add	sl, r0
 80183da:	1a2d      	subs	r5, r5, r0
 80183dc:	f8c9 3008 	str.w	r3, [r9, #8]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d1e8      	bne.n	80183b6 <__sfvwrite_r+0xd6>
 80183e4:	e783      	b.n	80182ee <__sfvwrite_r+0xe>
 80183e6:	f04f 0a00 	mov.w	sl, #0
 80183ea:	4f61      	ldr	r7, [pc, #388]	; (8018570 <__sfvwrite_r+0x290>)
 80183ec:	4655      	mov	r5, sl
 80183ee:	e7e2      	b.n	80183b6 <__sfvwrite_r+0xd6>
 80183f0:	e9d8 7a00 	ldrd	r7, sl, [r8]
 80183f4:	f108 0808 	add.w	r8, r8, #8
 80183f8:	6820      	ldr	r0, [r4, #0]
 80183fa:	68a2      	ldr	r2, [r4, #8]
 80183fc:	f1ba 0f00 	cmp.w	sl, #0
 8018400:	d0f6      	beq.n	80183f0 <__sfvwrite_r+0x110>
 8018402:	89a3      	ldrh	r3, [r4, #12]
 8018404:	0599      	lsls	r1, r3, #22
 8018406:	d563      	bpl.n	80184d0 <__sfvwrite_r+0x1f0>
 8018408:	4552      	cmp	r2, sl
 801840a:	d836      	bhi.n	801847a <__sfvwrite_r+0x19a>
 801840c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8018410:	d033      	beq.n	801847a <__sfvwrite_r+0x19a>
 8018412:	6921      	ldr	r1, [r4, #16]
 8018414:	6965      	ldr	r5, [r4, #20]
 8018416:	eba0 0b01 	sub.w	fp, r0, r1
 801841a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801841e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018422:	f10b 0201 	add.w	r2, fp, #1
 8018426:	106d      	asrs	r5, r5, #1
 8018428:	4452      	add	r2, sl
 801842a:	4295      	cmp	r5, r2
 801842c:	bf38      	it	cc
 801842e:	4615      	movcc	r5, r2
 8018430:	055b      	lsls	r3, r3, #21
 8018432:	d53d      	bpl.n	80184b0 <__sfvwrite_r+0x1d0>
 8018434:	4629      	mov	r1, r5
 8018436:	4630      	mov	r0, r6
 8018438:	f000 fc4a 	bl	8018cd0 <_malloc_r>
 801843c:	b948      	cbnz	r0, 8018452 <__sfvwrite_r+0x172>
 801843e:	230c      	movs	r3, #12
 8018440:	6033      	str	r3, [r6, #0]
 8018442:	89a3      	ldrh	r3, [r4, #12]
 8018444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018448:	81a3      	strh	r3, [r4, #12]
 801844a:	e7ad      	b.n	80183a8 <__sfvwrite_r+0xc8>
 801844c:	461f      	mov	r7, r3
 801844e:	469a      	mov	sl, r3
 8018450:	e7d2      	b.n	80183f8 <__sfvwrite_r+0x118>
 8018452:	465a      	mov	r2, fp
 8018454:	6921      	ldr	r1, [r4, #16]
 8018456:	9001      	str	r0, [sp, #4]
 8018458:	f000 fb08 	bl	8018a6c <memcpy>
 801845c:	89a2      	ldrh	r2, [r4, #12]
 801845e:	9b01      	ldr	r3, [sp, #4]
 8018460:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8018464:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018468:	81a2      	strh	r2, [r4, #12]
 801846a:	6123      	str	r3, [r4, #16]
 801846c:	6165      	str	r5, [r4, #20]
 801846e:	445b      	add	r3, fp
 8018470:	eba5 050b 	sub.w	r5, r5, fp
 8018474:	6023      	str	r3, [r4, #0]
 8018476:	4652      	mov	r2, sl
 8018478:	60a5      	str	r5, [r4, #8]
 801847a:	4552      	cmp	r2, sl
 801847c:	bf28      	it	cs
 801847e:	4652      	movcs	r2, sl
 8018480:	6820      	ldr	r0, [r4, #0]
 8018482:	9201      	str	r2, [sp, #4]
 8018484:	4639      	mov	r1, r7
 8018486:	f000 f9eb 	bl	8018860 <memmove>
 801848a:	68a3      	ldr	r3, [r4, #8]
 801848c:	9a01      	ldr	r2, [sp, #4]
 801848e:	1a9b      	subs	r3, r3, r2
 8018490:	60a3      	str	r3, [r4, #8]
 8018492:	6823      	ldr	r3, [r4, #0]
 8018494:	4413      	add	r3, r2
 8018496:	4655      	mov	r5, sl
 8018498:	6023      	str	r3, [r4, #0]
 801849a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801849e:	1b5b      	subs	r3, r3, r5
 80184a0:	442f      	add	r7, r5
 80184a2:	ebaa 0a05 	sub.w	sl, sl, r5
 80184a6:	f8c9 3008 	str.w	r3, [r9, #8]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d1a4      	bne.n	80183f8 <__sfvwrite_r+0x118>
 80184ae:	e71e      	b.n	80182ee <__sfvwrite_r+0xe>
 80184b0:	462a      	mov	r2, r5
 80184b2:	4630      	mov	r0, r6
 80184b4:	f000 fe52 	bl	801915c <_realloc_r>
 80184b8:	4603      	mov	r3, r0
 80184ba:	2800      	cmp	r0, #0
 80184bc:	d1d5      	bne.n	801846a <__sfvwrite_r+0x18a>
 80184be:	6921      	ldr	r1, [r4, #16]
 80184c0:	4630      	mov	r0, r6
 80184c2:	f000 fb45 	bl	8018b50 <_free_r>
 80184c6:	89a3      	ldrh	r3, [r4, #12]
 80184c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80184cc:	81a3      	strh	r3, [r4, #12]
 80184ce:	e7b6      	b.n	801843e <__sfvwrite_r+0x15e>
 80184d0:	6923      	ldr	r3, [r4, #16]
 80184d2:	4283      	cmp	r3, r0
 80184d4:	d302      	bcc.n	80184dc <__sfvwrite_r+0x1fc>
 80184d6:	6961      	ldr	r1, [r4, #20]
 80184d8:	4551      	cmp	r1, sl
 80184da:	d915      	bls.n	8018508 <__sfvwrite_r+0x228>
 80184dc:	4552      	cmp	r2, sl
 80184de:	bf28      	it	cs
 80184e0:	4652      	movcs	r2, sl
 80184e2:	4639      	mov	r1, r7
 80184e4:	4615      	mov	r5, r2
 80184e6:	f000 f9bb 	bl	8018860 <memmove>
 80184ea:	68a3      	ldr	r3, [r4, #8]
 80184ec:	6822      	ldr	r2, [r4, #0]
 80184ee:	1b5b      	subs	r3, r3, r5
 80184f0:	442a      	add	r2, r5
 80184f2:	60a3      	str	r3, [r4, #8]
 80184f4:	6022      	str	r2, [r4, #0]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d1cf      	bne.n	801849a <__sfvwrite_r+0x1ba>
 80184fa:	4621      	mov	r1, r4
 80184fc:	4630      	mov	r0, r6
 80184fe:	f004 f9e5 	bl	801c8cc <_fflush_r>
 8018502:	2800      	cmp	r0, #0
 8018504:	d0c9      	beq.n	801849a <__sfvwrite_r+0x1ba>
 8018506:	e79c      	b.n	8018442 <__sfvwrite_r+0x162>
 8018508:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801850c:	459a      	cmp	sl, r3
 801850e:	bf38      	it	cc
 8018510:	4653      	movcc	r3, sl
 8018512:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018514:	fb93 f3f1 	sdiv	r3, r3, r1
 8018518:	463a      	mov	r2, r7
 801851a:	434b      	muls	r3, r1
 801851c:	4630      	mov	r0, r6
 801851e:	69e1      	ldr	r1, [r4, #28]
 8018520:	47a8      	blx	r5
 8018522:	1e05      	subs	r5, r0, #0
 8018524:	dcb9      	bgt.n	801849a <__sfvwrite_r+0x1ba>
 8018526:	e78c      	b.n	8018442 <__sfvwrite_r+0x162>
 8018528:	e9d8 ab00 	ldrd	sl, fp, [r8]
 801852c:	2000      	movs	r0, #0
 801852e:	f108 0808 	add.w	r8, r8, #8
 8018532:	e6f3      	b.n	801831c <__sfvwrite_r+0x3c>
 8018534:	f10b 0701 	add.w	r7, fp, #1
 8018538:	e700      	b.n	801833c <__sfvwrite_r+0x5c>
 801853a:	4293      	cmp	r3, r2
 801853c:	dc08      	bgt.n	8018550 <__sfvwrite_r+0x270>
 801853e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018540:	69e1      	ldr	r1, [r4, #28]
 8018542:	4652      	mov	r2, sl
 8018544:	4630      	mov	r0, r6
 8018546:	47a8      	blx	r5
 8018548:	1e05      	subs	r5, r0, #0
 801854a:	f73f af13 	bgt.w	8018374 <__sfvwrite_r+0x94>
 801854e:	e778      	b.n	8018442 <__sfvwrite_r+0x162>
 8018550:	4651      	mov	r1, sl
 8018552:	9201      	str	r2, [sp, #4]
 8018554:	f000 f984 	bl	8018860 <memmove>
 8018558:	9a01      	ldr	r2, [sp, #4]
 801855a:	68a3      	ldr	r3, [r4, #8]
 801855c:	1a9b      	subs	r3, r3, r2
 801855e:	60a3      	str	r3, [r4, #8]
 8018560:	6823      	ldr	r3, [r4, #0]
 8018562:	4413      	add	r3, r2
 8018564:	6023      	str	r3, [r4, #0]
 8018566:	4615      	mov	r5, r2
 8018568:	e704      	b.n	8018374 <__sfvwrite_r+0x94>
 801856a:	2001      	movs	r0, #1
 801856c:	e70b      	b.n	8018386 <__sfvwrite_r+0xa6>
 801856e:	bf00      	nop
 8018570:	7ffffc00 	.word	0x7ffffc00

08018574 <_fwalk_sglue>:
 8018574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018578:	4607      	mov	r7, r0
 801857a:	4688      	mov	r8, r1
 801857c:	4614      	mov	r4, r2
 801857e:	2600      	movs	r6, #0
 8018580:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018584:	f1b9 0901 	subs.w	r9, r9, #1
 8018588:	d505      	bpl.n	8018596 <_fwalk_sglue+0x22>
 801858a:	6824      	ldr	r4, [r4, #0]
 801858c:	2c00      	cmp	r4, #0
 801858e:	d1f7      	bne.n	8018580 <_fwalk_sglue+0xc>
 8018590:	4630      	mov	r0, r6
 8018592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018596:	89ab      	ldrh	r3, [r5, #12]
 8018598:	2b01      	cmp	r3, #1
 801859a:	d907      	bls.n	80185ac <_fwalk_sglue+0x38>
 801859c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80185a0:	3301      	adds	r3, #1
 80185a2:	d003      	beq.n	80185ac <_fwalk_sglue+0x38>
 80185a4:	4629      	mov	r1, r5
 80185a6:	4638      	mov	r0, r7
 80185a8:	47c0      	blx	r8
 80185aa:	4306      	orrs	r6, r0
 80185ac:	3568      	adds	r5, #104	; 0x68
 80185ae:	e7e9      	b.n	8018584 <_fwalk_sglue+0x10>

080185b0 <_fwrite_r>:
 80185b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185b4:	b086      	sub	sp, #24
 80185b6:	fb02 f603 	mul.w	r6, r2, r3
 80185ba:	461d      	mov	r5, r3
 80185bc:	ab01      	add	r3, sp, #4
 80185be:	9303      	str	r3, [sp, #12]
 80185c0:	2301      	movs	r3, #1
 80185c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80185c4:	9101      	str	r1, [sp, #4]
 80185c6:	4690      	mov	r8, r2
 80185c8:	9602      	str	r6, [sp, #8]
 80185ca:	9605      	str	r6, [sp, #20]
 80185cc:	9304      	str	r3, [sp, #16]
 80185ce:	4607      	mov	r7, r0
 80185d0:	b118      	cbz	r0, 80185da <_fwrite_r+0x2a>
 80185d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80185d4:	b90b      	cbnz	r3, 80185da <_fwrite_r+0x2a>
 80185d6:	f7ff fe59 	bl	801828c <__sinit>
 80185da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185dc:	07d8      	lsls	r0, r3, #31
 80185de:	d405      	bmi.n	80185ec <_fwrite_r+0x3c>
 80185e0:	89a3      	ldrh	r3, [r4, #12]
 80185e2:	0599      	lsls	r1, r3, #22
 80185e4:	d402      	bmi.n	80185ec <_fwrite_r+0x3c>
 80185e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185e8:	f000 fa3e 	bl	8018a68 <__retarget_lock_acquire_recursive>
 80185ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185f0:	049a      	lsls	r2, r3, #18
 80185f2:	d406      	bmi.n	8018602 <_fwrite_r+0x52>
 80185f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80185f8:	81a3      	strh	r3, [r4, #12]
 80185fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80185fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8018600:	6663      	str	r3, [r4, #100]	; 0x64
 8018602:	aa03      	add	r2, sp, #12
 8018604:	4621      	mov	r1, r4
 8018606:	4638      	mov	r0, r7
 8018608:	f7ff fe6a 	bl	80182e0 <__sfvwrite_r>
 801860c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801860e:	b958      	cbnz	r0, 8018628 <_fwrite_r+0x78>
 8018610:	07d8      	lsls	r0, r3, #31
 8018612:	d405      	bmi.n	8018620 <_fwrite_r+0x70>
 8018614:	89a3      	ldrh	r3, [r4, #12]
 8018616:	0599      	lsls	r1, r3, #22
 8018618:	d402      	bmi.n	8018620 <_fwrite_r+0x70>
 801861a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801861c:	f000 fa25 	bl	8018a6a <__retarget_lock_release_recursive>
 8018620:	4628      	mov	r0, r5
 8018622:	b006      	add	sp, #24
 8018624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018628:	07da      	lsls	r2, r3, #31
 801862a:	d405      	bmi.n	8018638 <_fwrite_r+0x88>
 801862c:	89a3      	ldrh	r3, [r4, #12]
 801862e:	059b      	lsls	r3, r3, #22
 8018630:	d402      	bmi.n	8018638 <_fwrite_r+0x88>
 8018632:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018634:	f000 fa19 	bl	8018a6a <__retarget_lock_release_recursive>
 8018638:	9b05      	ldr	r3, [sp, #20]
 801863a:	1af6      	subs	r6, r6, r3
 801863c:	fbb6 f5f8 	udiv	r5, r6, r8
 8018640:	e7ee      	b.n	8018620 <_fwrite_r+0x70>
	...

08018644 <fwrite>:
 8018644:	b507      	push	{r0, r1, r2, lr}
 8018646:	9300      	str	r3, [sp, #0]
 8018648:	4613      	mov	r3, r2
 801864a:	460a      	mov	r2, r1
 801864c:	4601      	mov	r1, r0
 801864e:	4803      	ldr	r0, [pc, #12]	; (801865c <fwrite+0x18>)
 8018650:	6800      	ldr	r0, [r0, #0]
 8018652:	f7ff ffad 	bl	80185b0 <_fwrite_r>
 8018656:	b003      	add	sp, #12
 8018658:	f85d fb04 	ldr.w	pc, [sp], #4
 801865c:	200001c8 	.word	0x200001c8

08018660 <snprintf>:
 8018660:	b40c      	push	{r2, r3}
 8018662:	b530      	push	{r4, r5, lr}
 8018664:	4b17      	ldr	r3, [pc, #92]	; (80186c4 <snprintf+0x64>)
 8018666:	1e0c      	subs	r4, r1, #0
 8018668:	681d      	ldr	r5, [r3, #0]
 801866a:	b09d      	sub	sp, #116	; 0x74
 801866c:	da08      	bge.n	8018680 <snprintf+0x20>
 801866e:	238b      	movs	r3, #139	; 0x8b
 8018670:	602b      	str	r3, [r5, #0]
 8018672:	f04f 30ff 	mov.w	r0, #4294967295
 8018676:	b01d      	add	sp, #116	; 0x74
 8018678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801867c:	b002      	add	sp, #8
 801867e:	4770      	bx	lr
 8018680:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018684:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018688:	bf14      	ite	ne
 801868a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801868e:	4623      	moveq	r3, r4
 8018690:	9304      	str	r3, [sp, #16]
 8018692:	9307      	str	r3, [sp, #28]
 8018694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018698:	9002      	str	r0, [sp, #8]
 801869a:	9006      	str	r0, [sp, #24]
 801869c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80186a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80186a2:	ab21      	add	r3, sp, #132	; 0x84
 80186a4:	a902      	add	r1, sp, #8
 80186a6:	4628      	mov	r0, r5
 80186a8:	9301      	str	r3, [sp, #4]
 80186aa:	f000 fefd 	bl	80194a8 <_svfprintf_r>
 80186ae:	1c43      	adds	r3, r0, #1
 80186b0:	bfbc      	itt	lt
 80186b2:	238b      	movlt	r3, #139	; 0x8b
 80186b4:	602b      	strlt	r3, [r5, #0]
 80186b6:	2c00      	cmp	r4, #0
 80186b8:	d0dd      	beq.n	8018676 <snprintf+0x16>
 80186ba:	9b02      	ldr	r3, [sp, #8]
 80186bc:	2200      	movs	r2, #0
 80186be:	701a      	strb	r2, [r3, #0]
 80186c0:	e7d9      	b.n	8018676 <snprintf+0x16>
 80186c2:	bf00      	nop
 80186c4:	200001c8 	.word	0x200001c8

080186c8 <sprintf>:
 80186c8:	b40e      	push	{r1, r2, r3}
 80186ca:	b500      	push	{lr}
 80186cc:	b09c      	sub	sp, #112	; 0x70
 80186ce:	ab1d      	add	r3, sp, #116	; 0x74
 80186d0:	9002      	str	r0, [sp, #8]
 80186d2:	9006      	str	r0, [sp, #24]
 80186d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80186d8:	4809      	ldr	r0, [pc, #36]	; (8018700 <sprintf+0x38>)
 80186da:	9107      	str	r1, [sp, #28]
 80186dc:	9104      	str	r1, [sp, #16]
 80186de:	4909      	ldr	r1, [pc, #36]	; (8018704 <sprintf+0x3c>)
 80186e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80186e4:	9105      	str	r1, [sp, #20]
 80186e6:	6800      	ldr	r0, [r0, #0]
 80186e8:	9301      	str	r3, [sp, #4]
 80186ea:	a902      	add	r1, sp, #8
 80186ec:	f000 fedc 	bl	80194a8 <_svfprintf_r>
 80186f0:	9b02      	ldr	r3, [sp, #8]
 80186f2:	2200      	movs	r2, #0
 80186f4:	701a      	strb	r2, [r3, #0]
 80186f6:	b01c      	add	sp, #112	; 0x70
 80186f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80186fc:	b003      	add	sp, #12
 80186fe:	4770      	bx	lr
 8018700:	200001c8 	.word	0x200001c8
 8018704:	ffff0208 	.word	0xffff0208

08018708 <__sread>:
 8018708:	b510      	push	{r4, lr}
 801870a:	460c      	mov	r4, r1
 801870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018710:	f000 f95a 	bl	80189c8 <_read_r>
 8018714:	2800      	cmp	r0, #0
 8018716:	bfab      	itete	ge
 8018718:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801871a:	89a3      	ldrhlt	r3, [r4, #12]
 801871c:	181b      	addge	r3, r3, r0
 801871e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018722:	bfac      	ite	ge
 8018724:	6523      	strge	r3, [r4, #80]	; 0x50
 8018726:	81a3      	strhlt	r3, [r4, #12]
 8018728:	bd10      	pop	{r4, pc}

0801872a <__swrite>:
 801872a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801872e:	461f      	mov	r7, r3
 8018730:	898b      	ldrh	r3, [r1, #12]
 8018732:	05db      	lsls	r3, r3, #23
 8018734:	4605      	mov	r5, r0
 8018736:	460c      	mov	r4, r1
 8018738:	4616      	mov	r6, r2
 801873a:	d505      	bpl.n	8018748 <__swrite+0x1e>
 801873c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018740:	2302      	movs	r3, #2
 8018742:	2200      	movs	r2, #0
 8018744:	f000 f92e 	bl	80189a4 <_lseek_r>
 8018748:	89a3      	ldrh	r3, [r4, #12]
 801874a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801874e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018752:	81a3      	strh	r3, [r4, #12]
 8018754:	4632      	mov	r2, r6
 8018756:	463b      	mov	r3, r7
 8018758:	4628      	mov	r0, r5
 801875a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801875e:	f000 b945 	b.w	80189ec <_write_r>

08018762 <__sseek>:
 8018762:	b510      	push	{r4, lr}
 8018764:	460c      	mov	r4, r1
 8018766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801876a:	f000 f91b 	bl	80189a4 <_lseek_r>
 801876e:	1c43      	adds	r3, r0, #1
 8018770:	89a3      	ldrh	r3, [r4, #12]
 8018772:	bf15      	itete	ne
 8018774:	6520      	strne	r0, [r4, #80]	; 0x50
 8018776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801877a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801877e:	81a3      	strheq	r3, [r4, #12]
 8018780:	bf18      	it	ne
 8018782:	81a3      	strhne	r3, [r4, #12]
 8018784:	bd10      	pop	{r4, pc}

08018786 <__sclose>:
 8018786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801878a:	f000 b8cd 	b.w	8018928 <_close_r>
	...

08018790 <__swsetup_r>:
 8018790:	b538      	push	{r3, r4, r5, lr}
 8018792:	4b2a      	ldr	r3, [pc, #168]	; (801883c <__swsetup_r+0xac>)
 8018794:	4605      	mov	r5, r0
 8018796:	6818      	ldr	r0, [r3, #0]
 8018798:	460c      	mov	r4, r1
 801879a:	b118      	cbz	r0, 80187a4 <__swsetup_r+0x14>
 801879c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801879e:	b90b      	cbnz	r3, 80187a4 <__swsetup_r+0x14>
 80187a0:	f7ff fd74 	bl	801828c <__sinit>
 80187a4:	89a3      	ldrh	r3, [r4, #12]
 80187a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80187aa:	0718      	lsls	r0, r3, #28
 80187ac:	d422      	bmi.n	80187f4 <__swsetup_r+0x64>
 80187ae:	06d9      	lsls	r1, r3, #27
 80187b0:	d407      	bmi.n	80187c2 <__swsetup_r+0x32>
 80187b2:	2309      	movs	r3, #9
 80187b4:	602b      	str	r3, [r5, #0]
 80187b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80187ba:	81a3      	strh	r3, [r4, #12]
 80187bc:	f04f 30ff 	mov.w	r0, #4294967295
 80187c0:	e034      	b.n	801882c <__swsetup_r+0x9c>
 80187c2:	0758      	lsls	r0, r3, #29
 80187c4:	d512      	bpl.n	80187ec <__swsetup_r+0x5c>
 80187c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80187c8:	b141      	cbz	r1, 80187dc <__swsetup_r+0x4c>
 80187ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80187ce:	4299      	cmp	r1, r3
 80187d0:	d002      	beq.n	80187d8 <__swsetup_r+0x48>
 80187d2:	4628      	mov	r0, r5
 80187d4:	f000 f9bc 	bl	8018b50 <_free_r>
 80187d8:	2300      	movs	r3, #0
 80187da:	6323      	str	r3, [r4, #48]	; 0x30
 80187dc:	89a3      	ldrh	r3, [r4, #12]
 80187de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80187e2:	81a3      	strh	r3, [r4, #12]
 80187e4:	2300      	movs	r3, #0
 80187e6:	6063      	str	r3, [r4, #4]
 80187e8:	6923      	ldr	r3, [r4, #16]
 80187ea:	6023      	str	r3, [r4, #0]
 80187ec:	89a3      	ldrh	r3, [r4, #12]
 80187ee:	f043 0308 	orr.w	r3, r3, #8
 80187f2:	81a3      	strh	r3, [r4, #12]
 80187f4:	6923      	ldr	r3, [r4, #16]
 80187f6:	b94b      	cbnz	r3, 801880c <__swsetup_r+0x7c>
 80187f8:	89a3      	ldrh	r3, [r4, #12]
 80187fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80187fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018802:	d003      	beq.n	801880c <__swsetup_r+0x7c>
 8018804:	4621      	mov	r1, r4
 8018806:	4628      	mov	r0, r5
 8018808:	f004 f8ad 	bl	801c966 <__smakebuf_r>
 801880c:	89a0      	ldrh	r0, [r4, #12]
 801880e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018812:	f010 0301 	ands.w	r3, r0, #1
 8018816:	d00a      	beq.n	801882e <__swsetup_r+0x9e>
 8018818:	2300      	movs	r3, #0
 801881a:	60a3      	str	r3, [r4, #8]
 801881c:	6963      	ldr	r3, [r4, #20]
 801881e:	425b      	negs	r3, r3
 8018820:	61a3      	str	r3, [r4, #24]
 8018822:	6923      	ldr	r3, [r4, #16]
 8018824:	b943      	cbnz	r3, 8018838 <__swsetup_r+0xa8>
 8018826:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801882a:	d1c4      	bne.n	80187b6 <__swsetup_r+0x26>
 801882c:	bd38      	pop	{r3, r4, r5, pc}
 801882e:	0781      	lsls	r1, r0, #30
 8018830:	bf58      	it	pl
 8018832:	6963      	ldrpl	r3, [r4, #20]
 8018834:	60a3      	str	r3, [r4, #8]
 8018836:	e7f4      	b.n	8018822 <__swsetup_r+0x92>
 8018838:	2000      	movs	r0, #0
 801883a:	e7f7      	b.n	801882c <__swsetup_r+0x9c>
 801883c:	200001c8 	.word	0x200001c8

08018840 <memcmp>:
 8018840:	b510      	push	{r4, lr}
 8018842:	3901      	subs	r1, #1
 8018844:	4402      	add	r2, r0
 8018846:	4290      	cmp	r0, r2
 8018848:	d101      	bne.n	801884e <memcmp+0xe>
 801884a:	2000      	movs	r0, #0
 801884c:	e005      	b.n	801885a <memcmp+0x1a>
 801884e:	7803      	ldrb	r3, [r0, #0]
 8018850:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018854:	42a3      	cmp	r3, r4
 8018856:	d001      	beq.n	801885c <memcmp+0x1c>
 8018858:	1b18      	subs	r0, r3, r4
 801885a:	bd10      	pop	{r4, pc}
 801885c:	3001      	adds	r0, #1
 801885e:	e7f2      	b.n	8018846 <memcmp+0x6>

08018860 <memmove>:
 8018860:	4288      	cmp	r0, r1
 8018862:	b510      	push	{r4, lr}
 8018864:	eb01 0402 	add.w	r4, r1, r2
 8018868:	d902      	bls.n	8018870 <memmove+0x10>
 801886a:	4284      	cmp	r4, r0
 801886c:	4623      	mov	r3, r4
 801886e:	d807      	bhi.n	8018880 <memmove+0x20>
 8018870:	1e43      	subs	r3, r0, #1
 8018872:	42a1      	cmp	r1, r4
 8018874:	d008      	beq.n	8018888 <memmove+0x28>
 8018876:	f811 2b01 	ldrb.w	r2, [r1], #1
 801887a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801887e:	e7f8      	b.n	8018872 <memmove+0x12>
 8018880:	4402      	add	r2, r0
 8018882:	4601      	mov	r1, r0
 8018884:	428a      	cmp	r2, r1
 8018886:	d100      	bne.n	801888a <memmove+0x2a>
 8018888:	bd10      	pop	{r4, pc}
 801888a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801888e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018892:	e7f7      	b.n	8018884 <memmove+0x24>

08018894 <memset>:
 8018894:	4402      	add	r2, r0
 8018896:	4603      	mov	r3, r0
 8018898:	4293      	cmp	r3, r2
 801889a:	d100      	bne.n	801889e <memset+0xa>
 801889c:	4770      	bx	lr
 801889e:	f803 1b01 	strb.w	r1, [r3], #1
 80188a2:	e7f9      	b.n	8018898 <memset+0x4>

080188a4 <strncmp>:
 80188a4:	b510      	push	{r4, lr}
 80188a6:	b16a      	cbz	r2, 80188c4 <strncmp+0x20>
 80188a8:	3901      	subs	r1, #1
 80188aa:	1884      	adds	r4, r0, r2
 80188ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80188b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80188b4:	429a      	cmp	r2, r3
 80188b6:	d103      	bne.n	80188c0 <strncmp+0x1c>
 80188b8:	42a0      	cmp	r0, r4
 80188ba:	d001      	beq.n	80188c0 <strncmp+0x1c>
 80188bc:	2a00      	cmp	r2, #0
 80188be:	d1f5      	bne.n	80188ac <strncmp+0x8>
 80188c0:	1ad0      	subs	r0, r2, r3
 80188c2:	bd10      	pop	{r4, pc}
 80188c4:	4610      	mov	r0, r2
 80188c6:	e7fc      	b.n	80188c2 <strncmp+0x1e>

080188c8 <strtok>:
 80188c8:	4b02      	ldr	r3, [pc, #8]	; (80188d4 <strtok+0xc>)
 80188ca:	681a      	ldr	r2, [r3, #0]
 80188cc:	2301      	movs	r3, #1
 80188ce:	3250      	adds	r2, #80	; 0x50
 80188d0:	f000 b802 	b.w	80188d8 <__strtok_r>
 80188d4:	200001c8 	.word	0x200001c8

080188d8 <__strtok_r>:
 80188d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188da:	b908      	cbnz	r0, 80188e0 <__strtok_r+0x8>
 80188dc:	6810      	ldr	r0, [r2, #0]
 80188de:	b188      	cbz	r0, 8018904 <__strtok_r+0x2c>
 80188e0:	4604      	mov	r4, r0
 80188e2:	4620      	mov	r0, r4
 80188e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80188e8:	460f      	mov	r7, r1
 80188ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 80188ee:	b91e      	cbnz	r6, 80188f8 <__strtok_r+0x20>
 80188f0:	b965      	cbnz	r5, 801890c <__strtok_r+0x34>
 80188f2:	6015      	str	r5, [r2, #0]
 80188f4:	4628      	mov	r0, r5
 80188f6:	e005      	b.n	8018904 <__strtok_r+0x2c>
 80188f8:	42b5      	cmp	r5, r6
 80188fa:	d1f6      	bne.n	80188ea <__strtok_r+0x12>
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d1f0      	bne.n	80188e2 <__strtok_r+0xa>
 8018900:	6014      	str	r4, [r2, #0]
 8018902:	7003      	strb	r3, [r0, #0]
 8018904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018906:	461c      	mov	r4, r3
 8018908:	e00c      	b.n	8018924 <__strtok_r+0x4c>
 801890a:	b915      	cbnz	r5, 8018912 <__strtok_r+0x3a>
 801890c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018910:	460e      	mov	r6, r1
 8018912:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018916:	42ab      	cmp	r3, r5
 8018918:	d1f7      	bne.n	801890a <__strtok_r+0x32>
 801891a:	2b00      	cmp	r3, #0
 801891c:	d0f3      	beq.n	8018906 <__strtok_r+0x2e>
 801891e:	2300      	movs	r3, #0
 8018920:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018924:	6014      	str	r4, [r2, #0]
 8018926:	e7ed      	b.n	8018904 <__strtok_r+0x2c>

08018928 <_close_r>:
 8018928:	b538      	push	{r3, r4, r5, lr}
 801892a:	4d06      	ldr	r5, [pc, #24]	; (8018944 <_close_r+0x1c>)
 801892c:	2300      	movs	r3, #0
 801892e:	4604      	mov	r4, r0
 8018930:	4608      	mov	r0, r1
 8018932:	602b      	str	r3, [r5, #0]
 8018934:	f7f1 ff96 	bl	800a864 <_close>
 8018938:	1c43      	adds	r3, r0, #1
 801893a:	d102      	bne.n	8018942 <_close_r+0x1a>
 801893c:	682b      	ldr	r3, [r5, #0]
 801893e:	b103      	cbz	r3, 8018942 <_close_r+0x1a>
 8018940:	6023      	str	r3, [r4, #0]
 8018942:	bd38      	pop	{r3, r4, r5, pc}
 8018944:	200056ac 	.word	0x200056ac

08018948 <_reclaim_reent>:
 8018948:	4b15      	ldr	r3, [pc, #84]	; (80189a0 <_reclaim_reent+0x58>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	4283      	cmp	r3, r0
 801894e:	b570      	push	{r4, r5, r6, lr}
 8018950:	4604      	mov	r4, r0
 8018952:	d023      	beq.n	801899c <_reclaim_reent+0x54>
 8018954:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8018956:	b9fb      	cbnz	r3, 8018998 <_reclaim_reent+0x50>
 8018958:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801895a:	b111      	cbz	r1, 8018962 <_reclaim_reent+0x1a>
 801895c:	4620      	mov	r0, r4
 801895e:	f000 f8f7 	bl	8018b50 <_free_r>
 8018962:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8018964:	b111      	cbz	r1, 801896c <_reclaim_reent+0x24>
 8018966:	4620      	mov	r0, r4
 8018968:	f000 f8f2 	bl	8018b50 <_free_r>
 801896c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801896e:	b1ab      	cbz	r3, 801899c <_reclaim_reent+0x54>
 8018970:	4620      	mov	r0, r4
 8018972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018976:	4718      	bx	r3
 8018978:	5949      	ldr	r1, [r1, r5]
 801897a:	b939      	cbnz	r1, 801898c <_reclaim_reent+0x44>
 801897c:	3504      	adds	r5, #4
 801897e:	2d80      	cmp	r5, #128	; 0x80
 8018980:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018982:	d1f9      	bne.n	8018978 <_reclaim_reent+0x30>
 8018984:	4620      	mov	r0, r4
 8018986:	f000 f8e3 	bl	8018b50 <_free_r>
 801898a:	e7e5      	b.n	8018958 <_reclaim_reent+0x10>
 801898c:	680e      	ldr	r6, [r1, #0]
 801898e:	4620      	mov	r0, r4
 8018990:	f000 f8de 	bl	8018b50 <_free_r>
 8018994:	4631      	mov	r1, r6
 8018996:	e7f0      	b.n	801897a <_reclaim_reent+0x32>
 8018998:	2500      	movs	r5, #0
 801899a:	e7f0      	b.n	801897e <_reclaim_reent+0x36>
 801899c:	bd70      	pop	{r4, r5, r6, pc}
 801899e:	bf00      	nop
 80189a0:	200001c8 	.word	0x200001c8

080189a4 <_lseek_r>:
 80189a4:	b538      	push	{r3, r4, r5, lr}
 80189a6:	4d07      	ldr	r5, [pc, #28]	; (80189c4 <_lseek_r+0x20>)
 80189a8:	4604      	mov	r4, r0
 80189aa:	4608      	mov	r0, r1
 80189ac:	4611      	mov	r1, r2
 80189ae:	2200      	movs	r2, #0
 80189b0:	602a      	str	r2, [r5, #0]
 80189b2:	461a      	mov	r2, r3
 80189b4:	f7f1 ff7a 	bl	800a8ac <_lseek>
 80189b8:	1c43      	adds	r3, r0, #1
 80189ba:	d102      	bne.n	80189c2 <_lseek_r+0x1e>
 80189bc:	682b      	ldr	r3, [r5, #0]
 80189be:	b103      	cbz	r3, 80189c2 <_lseek_r+0x1e>
 80189c0:	6023      	str	r3, [r4, #0]
 80189c2:	bd38      	pop	{r3, r4, r5, pc}
 80189c4:	200056ac 	.word	0x200056ac

080189c8 <_read_r>:
 80189c8:	b538      	push	{r3, r4, r5, lr}
 80189ca:	4d07      	ldr	r5, [pc, #28]	; (80189e8 <_read_r+0x20>)
 80189cc:	4604      	mov	r4, r0
 80189ce:	4608      	mov	r0, r1
 80189d0:	4611      	mov	r1, r2
 80189d2:	2200      	movs	r2, #0
 80189d4:	602a      	str	r2, [r5, #0]
 80189d6:	461a      	mov	r2, r3
 80189d8:	f7f1 ff0b 	bl	800a7f2 <_read>
 80189dc:	1c43      	adds	r3, r0, #1
 80189de:	d102      	bne.n	80189e6 <_read_r+0x1e>
 80189e0:	682b      	ldr	r3, [r5, #0]
 80189e2:	b103      	cbz	r3, 80189e6 <_read_r+0x1e>
 80189e4:	6023      	str	r3, [r4, #0]
 80189e6:	bd38      	pop	{r3, r4, r5, pc}
 80189e8:	200056ac 	.word	0x200056ac

080189ec <_write_r>:
 80189ec:	b538      	push	{r3, r4, r5, lr}
 80189ee:	4d07      	ldr	r5, [pc, #28]	; (8018a0c <_write_r+0x20>)
 80189f0:	4604      	mov	r4, r0
 80189f2:	4608      	mov	r0, r1
 80189f4:	4611      	mov	r1, r2
 80189f6:	2200      	movs	r2, #0
 80189f8:	602a      	str	r2, [r5, #0]
 80189fa:	461a      	mov	r2, r3
 80189fc:	f7f1 ff16 	bl	800a82c <_write>
 8018a00:	1c43      	adds	r3, r0, #1
 8018a02:	d102      	bne.n	8018a0a <_write_r+0x1e>
 8018a04:	682b      	ldr	r3, [r5, #0]
 8018a06:	b103      	cbz	r3, 8018a0a <_write_r+0x1e>
 8018a08:	6023      	str	r3, [r4, #0]
 8018a0a:	bd38      	pop	{r3, r4, r5, pc}
 8018a0c:	200056ac 	.word	0x200056ac

08018a10 <__errno>:
 8018a10:	4b01      	ldr	r3, [pc, #4]	; (8018a18 <__errno+0x8>)
 8018a12:	6818      	ldr	r0, [r3, #0]
 8018a14:	4770      	bx	lr
 8018a16:	bf00      	nop
 8018a18:	200001c8 	.word	0x200001c8

08018a1c <__libc_init_array>:
 8018a1c:	b570      	push	{r4, r5, r6, lr}
 8018a1e:	4d0d      	ldr	r5, [pc, #52]	; (8018a54 <__libc_init_array+0x38>)
 8018a20:	4c0d      	ldr	r4, [pc, #52]	; (8018a58 <__libc_init_array+0x3c>)
 8018a22:	1b64      	subs	r4, r4, r5
 8018a24:	10a4      	asrs	r4, r4, #2
 8018a26:	2600      	movs	r6, #0
 8018a28:	42a6      	cmp	r6, r4
 8018a2a:	d109      	bne.n	8018a40 <__libc_init_array+0x24>
 8018a2c:	4d0b      	ldr	r5, [pc, #44]	; (8018a5c <__libc_init_array+0x40>)
 8018a2e:	4c0c      	ldr	r4, [pc, #48]	; (8018a60 <__libc_init_array+0x44>)
 8018a30:	f006 fb50 	bl	801f0d4 <_init>
 8018a34:	1b64      	subs	r4, r4, r5
 8018a36:	10a4      	asrs	r4, r4, #2
 8018a38:	2600      	movs	r6, #0
 8018a3a:	42a6      	cmp	r6, r4
 8018a3c:	d105      	bne.n	8018a4a <__libc_init_array+0x2e>
 8018a3e:	bd70      	pop	{r4, r5, r6, pc}
 8018a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a44:	4798      	blx	r3
 8018a46:	3601      	adds	r6, #1
 8018a48:	e7ee      	b.n	8018a28 <__libc_init_array+0xc>
 8018a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a4e:	4798      	blx	r3
 8018a50:	3601      	adds	r6, #1
 8018a52:	e7f2      	b.n	8018a3a <__libc_init_array+0x1e>
 8018a54:	08020900 	.word	0x08020900
 8018a58:	08020900 	.word	0x08020900
 8018a5c:	08020900 	.word	0x08020900
 8018a60:	08020908 	.word	0x08020908

08018a64 <__retarget_lock_init_recursive>:
 8018a64:	4770      	bx	lr

08018a66 <__retarget_lock_close_recursive>:
 8018a66:	4770      	bx	lr

08018a68 <__retarget_lock_acquire_recursive>:
 8018a68:	4770      	bx	lr

08018a6a <__retarget_lock_release_recursive>:
 8018a6a:	4770      	bx	lr

08018a6c <memcpy>:
 8018a6c:	440a      	add	r2, r1
 8018a6e:	4291      	cmp	r1, r2
 8018a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8018a74:	d100      	bne.n	8018a78 <memcpy+0xc>
 8018a76:	4770      	bx	lr
 8018a78:	b510      	push	{r4, lr}
 8018a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a82:	4291      	cmp	r1, r2
 8018a84:	d1f9      	bne.n	8018a7a <memcpy+0xe>
 8018a86:	bd10      	pop	{r4, pc}

08018a88 <register_fini>:
 8018a88:	4b02      	ldr	r3, [pc, #8]	; (8018a94 <register_fini+0xc>)
 8018a8a:	b113      	cbz	r3, 8018a92 <register_fini+0xa>
 8018a8c:	4802      	ldr	r0, [pc, #8]	; (8018a98 <register_fini+0x10>)
 8018a8e:	f000 b805 	b.w	8018a9c <atexit>
 8018a92:	4770      	bx	lr
 8018a94:	00000000 	.word	0x00000000
 8018a98:	0801cb51 	.word	0x0801cb51

08018a9c <atexit>:
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	4601      	mov	r1, r0
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	f004 b8a8 	b.w	801cbf8 <__register_exitproc>

08018aa8 <_malloc_trim_r>:
 8018aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018aac:	4606      	mov	r6, r0
 8018aae:	2008      	movs	r0, #8
 8018ab0:	460c      	mov	r4, r1
 8018ab2:	f004 f861 	bl	801cb78 <sysconf>
 8018ab6:	4f23      	ldr	r7, [pc, #140]	; (8018b44 <_malloc_trim_r+0x9c>)
 8018ab8:	4680      	mov	r8, r0
 8018aba:	4630      	mov	r0, r6
 8018abc:	f000 fb42 	bl	8019144 <__malloc_lock>
 8018ac0:	68bb      	ldr	r3, [r7, #8]
 8018ac2:	685d      	ldr	r5, [r3, #4]
 8018ac4:	f025 0503 	bic.w	r5, r5, #3
 8018ac8:	1b2c      	subs	r4, r5, r4
 8018aca:	3c11      	subs	r4, #17
 8018acc:	4444      	add	r4, r8
 8018ace:	fbb4 f4f8 	udiv	r4, r4, r8
 8018ad2:	3c01      	subs	r4, #1
 8018ad4:	fb08 f404 	mul.w	r4, r8, r4
 8018ad8:	45a0      	cmp	r8, r4
 8018ada:	dd05      	ble.n	8018ae8 <_malloc_trim_r+0x40>
 8018adc:	4630      	mov	r0, r6
 8018ade:	f000 fb37 	bl	8019150 <__malloc_unlock>
 8018ae2:	2000      	movs	r0, #0
 8018ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ae8:	2100      	movs	r1, #0
 8018aea:	4630      	mov	r0, r6
 8018aec:	f004 f820 	bl	801cb30 <_sbrk_r>
 8018af0:	68bb      	ldr	r3, [r7, #8]
 8018af2:	442b      	add	r3, r5
 8018af4:	4298      	cmp	r0, r3
 8018af6:	d1f1      	bne.n	8018adc <_malloc_trim_r+0x34>
 8018af8:	4261      	negs	r1, r4
 8018afa:	4630      	mov	r0, r6
 8018afc:	f004 f818 	bl	801cb30 <_sbrk_r>
 8018b00:	3001      	adds	r0, #1
 8018b02:	d110      	bne.n	8018b26 <_malloc_trim_r+0x7e>
 8018b04:	2100      	movs	r1, #0
 8018b06:	4630      	mov	r0, r6
 8018b08:	f004 f812 	bl	801cb30 <_sbrk_r>
 8018b0c:	68ba      	ldr	r2, [r7, #8]
 8018b0e:	1a83      	subs	r3, r0, r2
 8018b10:	2b0f      	cmp	r3, #15
 8018b12:	dde3      	ble.n	8018adc <_malloc_trim_r+0x34>
 8018b14:	490c      	ldr	r1, [pc, #48]	; (8018b48 <_malloc_trim_r+0xa0>)
 8018b16:	6809      	ldr	r1, [r1, #0]
 8018b18:	1a40      	subs	r0, r0, r1
 8018b1a:	490c      	ldr	r1, [pc, #48]	; (8018b4c <_malloc_trim_r+0xa4>)
 8018b1c:	f043 0301 	orr.w	r3, r3, #1
 8018b20:	6008      	str	r0, [r1, #0]
 8018b22:	6053      	str	r3, [r2, #4]
 8018b24:	e7da      	b.n	8018adc <_malloc_trim_r+0x34>
 8018b26:	68bb      	ldr	r3, [r7, #8]
 8018b28:	4a08      	ldr	r2, [pc, #32]	; (8018b4c <_malloc_trim_r+0xa4>)
 8018b2a:	1b2d      	subs	r5, r5, r4
 8018b2c:	f045 0501 	orr.w	r5, r5, #1
 8018b30:	605d      	str	r5, [r3, #4]
 8018b32:	6813      	ldr	r3, [r2, #0]
 8018b34:	4630      	mov	r0, r6
 8018b36:	1b1b      	subs	r3, r3, r4
 8018b38:	6013      	str	r3, [r2, #0]
 8018b3a:	f000 fb09 	bl	8019150 <__malloc_unlock>
 8018b3e:	2001      	movs	r0, #1
 8018b40:	e7d0      	b.n	8018ae4 <_malloc_trim_r+0x3c>
 8018b42:	bf00      	nop
 8018b44:	200001d0 	.word	0x200001d0
 8018b48:	200005d8 	.word	0x200005d8
 8018b4c:	200056b8 	.word	0x200056b8

08018b50 <_free_r>:
 8018b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b52:	4605      	mov	r5, r0
 8018b54:	460f      	mov	r7, r1
 8018b56:	2900      	cmp	r1, #0
 8018b58:	f000 80b1 	beq.w	8018cbe <_free_r+0x16e>
 8018b5c:	f000 faf2 	bl	8019144 <__malloc_lock>
 8018b60:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018b64:	4856      	ldr	r0, [pc, #344]	; (8018cc0 <_free_r+0x170>)
 8018b66:	f022 0401 	bic.w	r4, r2, #1
 8018b6a:	f1a7 0308 	sub.w	r3, r7, #8
 8018b6e:	eb03 0c04 	add.w	ip, r3, r4
 8018b72:	6881      	ldr	r1, [r0, #8]
 8018b74:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8018b78:	4561      	cmp	r1, ip
 8018b7a:	f026 0603 	bic.w	r6, r6, #3
 8018b7e:	f002 0201 	and.w	r2, r2, #1
 8018b82:	d11b      	bne.n	8018bbc <_free_r+0x6c>
 8018b84:	4426      	add	r6, r4
 8018b86:	b93a      	cbnz	r2, 8018b98 <_free_r+0x48>
 8018b88:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8018b8c:	1a9b      	subs	r3, r3, r2
 8018b8e:	4416      	add	r6, r2
 8018b90:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8018b94:	60ca      	str	r2, [r1, #12]
 8018b96:	6091      	str	r1, [r2, #8]
 8018b98:	f046 0201 	orr.w	r2, r6, #1
 8018b9c:	605a      	str	r2, [r3, #4]
 8018b9e:	6083      	str	r3, [r0, #8]
 8018ba0:	4b48      	ldr	r3, [pc, #288]	; (8018cc4 <_free_r+0x174>)
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	42b3      	cmp	r3, r6
 8018ba6:	d804      	bhi.n	8018bb2 <_free_r+0x62>
 8018ba8:	4b47      	ldr	r3, [pc, #284]	; (8018cc8 <_free_r+0x178>)
 8018baa:	4628      	mov	r0, r5
 8018bac:	6819      	ldr	r1, [r3, #0]
 8018bae:	f7ff ff7b 	bl	8018aa8 <_malloc_trim_r>
 8018bb2:	4628      	mov	r0, r5
 8018bb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018bb8:	f000 baca 	b.w	8019150 <__malloc_unlock>
 8018bbc:	f8cc 6004 	str.w	r6, [ip, #4]
 8018bc0:	2a00      	cmp	r2, #0
 8018bc2:	d138      	bne.n	8018c36 <_free_r+0xe6>
 8018bc4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8018bc8:	1a5b      	subs	r3, r3, r1
 8018bca:	440c      	add	r4, r1
 8018bcc:	6899      	ldr	r1, [r3, #8]
 8018bce:	f100 0708 	add.w	r7, r0, #8
 8018bd2:	42b9      	cmp	r1, r7
 8018bd4:	d031      	beq.n	8018c3a <_free_r+0xea>
 8018bd6:	68df      	ldr	r7, [r3, #12]
 8018bd8:	60cf      	str	r7, [r1, #12]
 8018bda:	60b9      	str	r1, [r7, #8]
 8018bdc:	eb0c 0106 	add.w	r1, ip, r6
 8018be0:	6849      	ldr	r1, [r1, #4]
 8018be2:	07c9      	lsls	r1, r1, #31
 8018be4:	d40b      	bmi.n	8018bfe <_free_r+0xae>
 8018be6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8018bea:	4434      	add	r4, r6
 8018bec:	bb3a      	cbnz	r2, 8018c3e <_free_r+0xee>
 8018bee:	4e37      	ldr	r6, [pc, #220]	; (8018ccc <_free_r+0x17c>)
 8018bf0:	42b1      	cmp	r1, r6
 8018bf2:	d124      	bne.n	8018c3e <_free_r+0xee>
 8018bf4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018bf8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8018bfc:	2201      	movs	r2, #1
 8018bfe:	f044 0101 	orr.w	r1, r4, #1
 8018c02:	6059      	str	r1, [r3, #4]
 8018c04:	511c      	str	r4, [r3, r4]
 8018c06:	2a00      	cmp	r2, #0
 8018c08:	d1d3      	bne.n	8018bb2 <_free_r+0x62>
 8018c0a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8018c0e:	d21b      	bcs.n	8018c48 <_free_r+0xf8>
 8018c10:	08e2      	lsrs	r2, r4, #3
 8018c12:	2101      	movs	r1, #1
 8018c14:	0964      	lsrs	r4, r4, #5
 8018c16:	40a1      	lsls	r1, r4
 8018c18:	6844      	ldr	r4, [r0, #4]
 8018c1a:	3201      	adds	r2, #1
 8018c1c:	4321      	orrs	r1, r4
 8018c1e:	6041      	str	r1, [r0, #4]
 8018c20:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8018c24:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8018c28:	3908      	subs	r1, #8
 8018c2a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8018c2e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8018c32:	60e3      	str	r3, [r4, #12]
 8018c34:	e7bd      	b.n	8018bb2 <_free_r+0x62>
 8018c36:	2200      	movs	r2, #0
 8018c38:	e7d0      	b.n	8018bdc <_free_r+0x8c>
 8018c3a:	2201      	movs	r2, #1
 8018c3c:	e7ce      	b.n	8018bdc <_free_r+0x8c>
 8018c3e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8018c42:	60ce      	str	r6, [r1, #12]
 8018c44:	60b1      	str	r1, [r6, #8]
 8018c46:	e7da      	b.n	8018bfe <_free_r+0xae>
 8018c48:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8018c4c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8018c50:	d214      	bcs.n	8018c7c <_free_r+0x12c>
 8018c52:	09a2      	lsrs	r2, r4, #6
 8018c54:	3238      	adds	r2, #56	; 0x38
 8018c56:	1c51      	adds	r1, r2, #1
 8018c58:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8018c5c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8018c60:	428e      	cmp	r6, r1
 8018c62:	d125      	bne.n	8018cb0 <_free_r+0x160>
 8018c64:	2401      	movs	r4, #1
 8018c66:	1092      	asrs	r2, r2, #2
 8018c68:	fa04 f202 	lsl.w	r2, r4, r2
 8018c6c:	6844      	ldr	r4, [r0, #4]
 8018c6e:	4322      	orrs	r2, r4
 8018c70:	6042      	str	r2, [r0, #4]
 8018c72:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8018c76:	60b3      	str	r3, [r6, #8]
 8018c78:	60cb      	str	r3, [r1, #12]
 8018c7a:	e79a      	b.n	8018bb2 <_free_r+0x62>
 8018c7c:	2a14      	cmp	r2, #20
 8018c7e:	d801      	bhi.n	8018c84 <_free_r+0x134>
 8018c80:	325b      	adds	r2, #91	; 0x5b
 8018c82:	e7e8      	b.n	8018c56 <_free_r+0x106>
 8018c84:	2a54      	cmp	r2, #84	; 0x54
 8018c86:	d802      	bhi.n	8018c8e <_free_r+0x13e>
 8018c88:	0b22      	lsrs	r2, r4, #12
 8018c8a:	326e      	adds	r2, #110	; 0x6e
 8018c8c:	e7e3      	b.n	8018c56 <_free_r+0x106>
 8018c8e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8018c92:	d802      	bhi.n	8018c9a <_free_r+0x14a>
 8018c94:	0be2      	lsrs	r2, r4, #15
 8018c96:	3277      	adds	r2, #119	; 0x77
 8018c98:	e7dd      	b.n	8018c56 <_free_r+0x106>
 8018c9a:	f240 5154 	movw	r1, #1364	; 0x554
 8018c9e:	428a      	cmp	r2, r1
 8018ca0:	bf9a      	itte	ls
 8018ca2:	0ca2      	lsrls	r2, r4, #18
 8018ca4:	327c      	addls	r2, #124	; 0x7c
 8018ca6:	227e      	movhi	r2, #126	; 0x7e
 8018ca8:	e7d5      	b.n	8018c56 <_free_r+0x106>
 8018caa:	6889      	ldr	r1, [r1, #8]
 8018cac:	428e      	cmp	r6, r1
 8018cae:	d004      	beq.n	8018cba <_free_r+0x16a>
 8018cb0:	684a      	ldr	r2, [r1, #4]
 8018cb2:	f022 0203 	bic.w	r2, r2, #3
 8018cb6:	42a2      	cmp	r2, r4
 8018cb8:	d8f7      	bhi.n	8018caa <_free_r+0x15a>
 8018cba:	68ce      	ldr	r6, [r1, #12]
 8018cbc:	e7d9      	b.n	8018c72 <_free_r+0x122>
 8018cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cc0:	200001d0 	.word	0x200001d0
 8018cc4:	200005dc 	.word	0x200005dc
 8018cc8:	200056e8 	.word	0x200056e8
 8018ccc:	200001d8 	.word	0x200001d8

08018cd0 <_malloc_r>:
 8018cd0:	f101 030b 	add.w	r3, r1, #11
 8018cd4:	2b16      	cmp	r3, #22
 8018cd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cda:	4605      	mov	r5, r0
 8018cdc:	d906      	bls.n	8018cec <_malloc_r+0x1c>
 8018cde:	f033 0707 	bics.w	r7, r3, #7
 8018ce2:	d504      	bpl.n	8018cee <_malloc_r+0x1e>
 8018ce4:	230c      	movs	r3, #12
 8018ce6:	602b      	str	r3, [r5, #0]
 8018ce8:	2400      	movs	r4, #0
 8018cea:	e1a1      	b.n	8019030 <_malloc_r+0x360>
 8018cec:	2710      	movs	r7, #16
 8018cee:	42b9      	cmp	r1, r7
 8018cf0:	d8f8      	bhi.n	8018ce4 <_malloc_r+0x14>
 8018cf2:	4628      	mov	r0, r5
 8018cf4:	f000 fa26 	bl	8019144 <__malloc_lock>
 8018cf8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8018cfc:	4eae      	ldr	r6, [pc, #696]	; (8018fb8 <_malloc_r+0x2e8>)
 8018cfe:	d237      	bcs.n	8018d70 <_malloc_r+0xa0>
 8018d00:	f107 0208 	add.w	r2, r7, #8
 8018d04:	4432      	add	r2, r6
 8018d06:	f1a2 0108 	sub.w	r1, r2, #8
 8018d0a:	6854      	ldr	r4, [r2, #4]
 8018d0c:	428c      	cmp	r4, r1
 8018d0e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8018d12:	d102      	bne.n	8018d1a <_malloc_r+0x4a>
 8018d14:	68d4      	ldr	r4, [r2, #12]
 8018d16:	42a2      	cmp	r2, r4
 8018d18:	d010      	beq.n	8018d3c <_malloc_r+0x6c>
 8018d1a:	6863      	ldr	r3, [r4, #4]
 8018d1c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8018d20:	f023 0303 	bic.w	r3, r3, #3
 8018d24:	60ca      	str	r2, [r1, #12]
 8018d26:	4423      	add	r3, r4
 8018d28:	6091      	str	r1, [r2, #8]
 8018d2a:	685a      	ldr	r2, [r3, #4]
 8018d2c:	f042 0201 	orr.w	r2, r2, #1
 8018d30:	605a      	str	r2, [r3, #4]
 8018d32:	4628      	mov	r0, r5
 8018d34:	f000 fa0c 	bl	8019150 <__malloc_unlock>
 8018d38:	3408      	adds	r4, #8
 8018d3a:	e179      	b.n	8019030 <_malloc_r+0x360>
 8018d3c:	3302      	adds	r3, #2
 8018d3e:	6934      	ldr	r4, [r6, #16]
 8018d40:	499e      	ldr	r1, [pc, #632]	; (8018fbc <_malloc_r+0x2ec>)
 8018d42:	428c      	cmp	r4, r1
 8018d44:	d077      	beq.n	8018e36 <_malloc_r+0x166>
 8018d46:	6862      	ldr	r2, [r4, #4]
 8018d48:	f022 0c03 	bic.w	ip, r2, #3
 8018d4c:	ebac 0007 	sub.w	r0, ip, r7
 8018d50:	280f      	cmp	r0, #15
 8018d52:	dd48      	ble.n	8018de6 <_malloc_r+0x116>
 8018d54:	19e2      	adds	r2, r4, r7
 8018d56:	f040 0301 	orr.w	r3, r0, #1
 8018d5a:	f047 0701 	orr.w	r7, r7, #1
 8018d5e:	6067      	str	r7, [r4, #4]
 8018d60:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8018d64:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8018d68:	6053      	str	r3, [r2, #4]
 8018d6a:	f844 000c 	str.w	r0, [r4, ip]
 8018d6e:	e7e0      	b.n	8018d32 <_malloc_r+0x62>
 8018d70:	0a7b      	lsrs	r3, r7, #9
 8018d72:	d02a      	beq.n	8018dca <_malloc_r+0xfa>
 8018d74:	2b04      	cmp	r3, #4
 8018d76:	d812      	bhi.n	8018d9e <_malloc_r+0xce>
 8018d78:	09bb      	lsrs	r3, r7, #6
 8018d7a:	3338      	adds	r3, #56	; 0x38
 8018d7c:	1c5a      	adds	r2, r3, #1
 8018d7e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8018d82:	f1a2 0c08 	sub.w	ip, r2, #8
 8018d86:	6854      	ldr	r4, [r2, #4]
 8018d88:	4564      	cmp	r4, ip
 8018d8a:	d006      	beq.n	8018d9a <_malloc_r+0xca>
 8018d8c:	6862      	ldr	r2, [r4, #4]
 8018d8e:	f022 0203 	bic.w	r2, r2, #3
 8018d92:	1bd0      	subs	r0, r2, r7
 8018d94:	280f      	cmp	r0, #15
 8018d96:	dd1c      	ble.n	8018dd2 <_malloc_r+0x102>
 8018d98:	3b01      	subs	r3, #1
 8018d9a:	3301      	adds	r3, #1
 8018d9c:	e7cf      	b.n	8018d3e <_malloc_r+0x6e>
 8018d9e:	2b14      	cmp	r3, #20
 8018da0:	d801      	bhi.n	8018da6 <_malloc_r+0xd6>
 8018da2:	335b      	adds	r3, #91	; 0x5b
 8018da4:	e7ea      	b.n	8018d7c <_malloc_r+0xac>
 8018da6:	2b54      	cmp	r3, #84	; 0x54
 8018da8:	d802      	bhi.n	8018db0 <_malloc_r+0xe0>
 8018daa:	0b3b      	lsrs	r3, r7, #12
 8018dac:	336e      	adds	r3, #110	; 0x6e
 8018dae:	e7e5      	b.n	8018d7c <_malloc_r+0xac>
 8018db0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8018db4:	d802      	bhi.n	8018dbc <_malloc_r+0xec>
 8018db6:	0bfb      	lsrs	r3, r7, #15
 8018db8:	3377      	adds	r3, #119	; 0x77
 8018dba:	e7df      	b.n	8018d7c <_malloc_r+0xac>
 8018dbc:	f240 5254 	movw	r2, #1364	; 0x554
 8018dc0:	4293      	cmp	r3, r2
 8018dc2:	d804      	bhi.n	8018dce <_malloc_r+0xfe>
 8018dc4:	0cbb      	lsrs	r3, r7, #18
 8018dc6:	337c      	adds	r3, #124	; 0x7c
 8018dc8:	e7d8      	b.n	8018d7c <_malloc_r+0xac>
 8018dca:	233f      	movs	r3, #63	; 0x3f
 8018dcc:	e7d6      	b.n	8018d7c <_malloc_r+0xac>
 8018dce:	237e      	movs	r3, #126	; 0x7e
 8018dd0:	e7d4      	b.n	8018d7c <_malloc_r+0xac>
 8018dd2:	2800      	cmp	r0, #0
 8018dd4:	68e1      	ldr	r1, [r4, #12]
 8018dd6:	db04      	blt.n	8018de2 <_malloc_r+0x112>
 8018dd8:	68a3      	ldr	r3, [r4, #8]
 8018dda:	60d9      	str	r1, [r3, #12]
 8018ddc:	608b      	str	r3, [r1, #8]
 8018dde:	18a3      	adds	r3, r4, r2
 8018de0:	e7a3      	b.n	8018d2a <_malloc_r+0x5a>
 8018de2:	460c      	mov	r4, r1
 8018de4:	e7d0      	b.n	8018d88 <_malloc_r+0xb8>
 8018de6:	2800      	cmp	r0, #0
 8018de8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8018dec:	db07      	blt.n	8018dfe <_malloc_r+0x12e>
 8018dee:	44a4      	add	ip, r4
 8018df0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8018df4:	f043 0301 	orr.w	r3, r3, #1
 8018df8:	f8cc 3004 	str.w	r3, [ip, #4]
 8018dfc:	e799      	b.n	8018d32 <_malloc_r+0x62>
 8018dfe:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8018e02:	6870      	ldr	r0, [r6, #4]
 8018e04:	f080 8093 	bcs.w	8018f2e <_malloc_r+0x25e>
 8018e08:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8018e0c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8018e10:	f04f 0c01 	mov.w	ip, #1
 8018e14:	3201      	adds	r2, #1
 8018e16:	fa0c fc0e 	lsl.w	ip, ip, lr
 8018e1a:	ea4c 0000 	orr.w	r0, ip, r0
 8018e1e:	6070      	str	r0, [r6, #4]
 8018e20:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8018e24:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8018e28:	3808      	subs	r0, #8
 8018e2a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8018e2e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8018e32:	f8cc 400c 	str.w	r4, [ip, #12]
 8018e36:	1098      	asrs	r0, r3, #2
 8018e38:	2201      	movs	r2, #1
 8018e3a:	4082      	lsls	r2, r0
 8018e3c:	6870      	ldr	r0, [r6, #4]
 8018e3e:	4290      	cmp	r0, r2
 8018e40:	d326      	bcc.n	8018e90 <_malloc_r+0x1c0>
 8018e42:	4210      	tst	r0, r2
 8018e44:	d106      	bne.n	8018e54 <_malloc_r+0x184>
 8018e46:	f023 0303 	bic.w	r3, r3, #3
 8018e4a:	0052      	lsls	r2, r2, #1
 8018e4c:	4210      	tst	r0, r2
 8018e4e:	f103 0304 	add.w	r3, r3, #4
 8018e52:	d0fa      	beq.n	8018e4a <_malloc_r+0x17a>
 8018e54:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8018e58:	46c1      	mov	r9, r8
 8018e5a:	469e      	mov	lr, r3
 8018e5c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8018e60:	454c      	cmp	r4, r9
 8018e62:	f040 80b7 	bne.w	8018fd4 <_malloc_r+0x304>
 8018e66:	f10e 0e01 	add.w	lr, lr, #1
 8018e6a:	f01e 0f03 	tst.w	lr, #3
 8018e6e:	f109 0908 	add.w	r9, r9, #8
 8018e72:	d1f3      	bne.n	8018e5c <_malloc_r+0x18c>
 8018e74:	0798      	lsls	r0, r3, #30
 8018e76:	f040 80e1 	bne.w	801903c <_malloc_r+0x36c>
 8018e7a:	6873      	ldr	r3, [r6, #4]
 8018e7c:	ea23 0302 	bic.w	r3, r3, r2
 8018e80:	6073      	str	r3, [r6, #4]
 8018e82:	6870      	ldr	r0, [r6, #4]
 8018e84:	0052      	lsls	r2, r2, #1
 8018e86:	4290      	cmp	r0, r2
 8018e88:	d302      	bcc.n	8018e90 <_malloc_r+0x1c0>
 8018e8a:	2a00      	cmp	r2, #0
 8018e8c:	f040 80e3 	bne.w	8019056 <_malloc_r+0x386>
 8018e90:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8018e94:	f8da 3004 	ldr.w	r3, [sl, #4]
 8018e98:	f023 0903 	bic.w	r9, r3, #3
 8018e9c:	45b9      	cmp	r9, r7
 8018e9e:	d304      	bcc.n	8018eaa <_malloc_r+0x1da>
 8018ea0:	eba9 0207 	sub.w	r2, r9, r7
 8018ea4:	2a0f      	cmp	r2, #15
 8018ea6:	f300 8141 	bgt.w	801912c <_malloc_r+0x45c>
 8018eaa:	4b45      	ldr	r3, [pc, #276]	; (8018fc0 <_malloc_r+0x2f0>)
 8018eac:	6819      	ldr	r1, [r3, #0]
 8018eae:	3110      	adds	r1, #16
 8018eb0:	4439      	add	r1, r7
 8018eb2:	2008      	movs	r0, #8
 8018eb4:	9101      	str	r1, [sp, #4]
 8018eb6:	f003 fe5f 	bl	801cb78 <sysconf>
 8018eba:	4a42      	ldr	r2, [pc, #264]	; (8018fc4 <_malloc_r+0x2f4>)
 8018ebc:	9901      	ldr	r1, [sp, #4]
 8018ebe:	6813      	ldr	r3, [r2, #0]
 8018ec0:	3301      	adds	r3, #1
 8018ec2:	bf1f      	itttt	ne
 8018ec4:	f101 31ff 	addne.w	r1, r1, #4294967295
 8018ec8:	1809      	addne	r1, r1, r0
 8018eca:	4243      	negne	r3, r0
 8018ecc:	4019      	andne	r1, r3
 8018ece:	4680      	mov	r8, r0
 8018ed0:	4628      	mov	r0, r5
 8018ed2:	9101      	str	r1, [sp, #4]
 8018ed4:	f003 fe2c 	bl	801cb30 <_sbrk_r>
 8018ed8:	1c42      	adds	r2, r0, #1
 8018eda:	eb0a 0b09 	add.w	fp, sl, r9
 8018ede:	4604      	mov	r4, r0
 8018ee0:	f000 80f7 	beq.w	80190d2 <_malloc_r+0x402>
 8018ee4:	4583      	cmp	fp, r0
 8018ee6:	9901      	ldr	r1, [sp, #4]
 8018ee8:	4a36      	ldr	r2, [pc, #216]	; (8018fc4 <_malloc_r+0x2f4>)
 8018eea:	d902      	bls.n	8018ef2 <_malloc_r+0x222>
 8018eec:	45b2      	cmp	sl, r6
 8018eee:	f040 80f0 	bne.w	80190d2 <_malloc_r+0x402>
 8018ef2:	4b35      	ldr	r3, [pc, #212]	; (8018fc8 <_malloc_r+0x2f8>)
 8018ef4:	6818      	ldr	r0, [r3, #0]
 8018ef6:	45a3      	cmp	fp, r4
 8018ef8:	4408      	add	r0, r1
 8018efa:	6018      	str	r0, [r3, #0]
 8018efc:	f108 3cff 	add.w	ip, r8, #4294967295
 8018f00:	f040 80ab 	bne.w	801905a <_malloc_r+0x38a>
 8018f04:	ea1b 0f0c 	tst.w	fp, ip
 8018f08:	f040 80a7 	bne.w	801905a <_malloc_r+0x38a>
 8018f0c:	68b2      	ldr	r2, [r6, #8]
 8018f0e:	4449      	add	r1, r9
 8018f10:	f041 0101 	orr.w	r1, r1, #1
 8018f14:	6051      	str	r1, [r2, #4]
 8018f16:	4a2d      	ldr	r2, [pc, #180]	; (8018fcc <_malloc_r+0x2fc>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	6811      	ldr	r1, [r2, #0]
 8018f1c:	428b      	cmp	r3, r1
 8018f1e:	bf88      	it	hi
 8018f20:	6013      	strhi	r3, [r2, #0]
 8018f22:	4a2b      	ldr	r2, [pc, #172]	; (8018fd0 <_malloc_r+0x300>)
 8018f24:	6811      	ldr	r1, [r2, #0]
 8018f26:	428b      	cmp	r3, r1
 8018f28:	bf88      	it	hi
 8018f2a:	6013      	strhi	r3, [r2, #0]
 8018f2c:	e0d1      	b.n	80190d2 <_malloc_r+0x402>
 8018f2e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8018f32:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8018f36:	d218      	bcs.n	8018f6a <_malloc_r+0x29a>
 8018f38:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8018f3c:	3238      	adds	r2, #56	; 0x38
 8018f3e:	f102 0e01 	add.w	lr, r2, #1
 8018f42:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8018f46:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8018f4a:	45f0      	cmp	r8, lr
 8018f4c:	d12b      	bne.n	8018fa6 <_malloc_r+0x2d6>
 8018f4e:	1092      	asrs	r2, r2, #2
 8018f50:	f04f 0c01 	mov.w	ip, #1
 8018f54:	fa0c f202 	lsl.w	r2, ip, r2
 8018f58:	4302      	orrs	r2, r0
 8018f5a:	6072      	str	r2, [r6, #4]
 8018f5c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8018f60:	f8c8 4008 	str.w	r4, [r8, #8]
 8018f64:	f8ce 400c 	str.w	r4, [lr, #12]
 8018f68:	e765      	b.n	8018e36 <_malloc_r+0x166>
 8018f6a:	2a14      	cmp	r2, #20
 8018f6c:	d801      	bhi.n	8018f72 <_malloc_r+0x2a2>
 8018f6e:	325b      	adds	r2, #91	; 0x5b
 8018f70:	e7e5      	b.n	8018f3e <_malloc_r+0x26e>
 8018f72:	2a54      	cmp	r2, #84	; 0x54
 8018f74:	d803      	bhi.n	8018f7e <_malloc_r+0x2ae>
 8018f76:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8018f7a:	326e      	adds	r2, #110	; 0x6e
 8018f7c:	e7df      	b.n	8018f3e <_malloc_r+0x26e>
 8018f7e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8018f82:	d803      	bhi.n	8018f8c <_malloc_r+0x2bc>
 8018f84:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8018f88:	3277      	adds	r2, #119	; 0x77
 8018f8a:	e7d8      	b.n	8018f3e <_malloc_r+0x26e>
 8018f8c:	f240 5e54 	movw	lr, #1364	; 0x554
 8018f90:	4572      	cmp	r2, lr
 8018f92:	bf9a      	itte	ls
 8018f94:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8018f98:	327c      	addls	r2, #124	; 0x7c
 8018f9a:	227e      	movhi	r2, #126	; 0x7e
 8018f9c:	e7cf      	b.n	8018f3e <_malloc_r+0x26e>
 8018f9e:	f8de e008 	ldr.w	lr, [lr, #8]
 8018fa2:	45f0      	cmp	r8, lr
 8018fa4:	d005      	beq.n	8018fb2 <_malloc_r+0x2e2>
 8018fa6:	f8de 2004 	ldr.w	r2, [lr, #4]
 8018faa:	f022 0203 	bic.w	r2, r2, #3
 8018fae:	4562      	cmp	r2, ip
 8018fb0:	d8f5      	bhi.n	8018f9e <_malloc_r+0x2ce>
 8018fb2:	f8de 800c 	ldr.w	r8, [lr, #12]
 8018fb6:	e7d1      	b.n	8018f5c <_malloc_r+0x28c>
 8018fb8:	200001d0 	.word	0x200001d0
 8018fbc:	200001d8 	.word	0x200001d8
 8018fc0:	200056e8 	.word	0x200056e8
 8018fc4:	200005d8 	.word	0x200005d8
 8018fc8:	200056b8 	.word	0x200056b8
 8018fcc:	200056e0 	.word	0x200056e0
 8018fd0:	200056e4 	.word	0x200056e4
 8018fd4:	6860      	ldr	r0, [r4, #4]
 8018fd6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8018fda:	f020 0003 	bic.w	r0, r0, #3
 8018fde:	eba0 0a07 	sub.w	sl, r0, r7
 8018fe2:	f1ba 0f0f 	cmp.w	sl, #15
 8018fe6:	dd12      	ble.n	801900e <_malloc_r+0x33e>
 8018fe8:	68a3      	ldr	r3, [r4, #8]
 8018fea:	19e2      	adds	r2, r4, r7
 8018fec:	f047 0701 	orr.w	r7, r7, #1
 8018ff0:	6067      	str	r7, [r4, #4]
 8018ff2:	f8c3 c00c 	str.w	ip, [r3, #12]
 8018ff6:	f8cc 3008 	str.w	r3, [ip, #8]
 8018ffa:	f04a 0301 	orr.w	r3, sl, #1
 8018ffe:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8019002:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019006:	6053      	str	r3, [r2, #4]
 8019008:	f844 a000 	str.w	sl, [r4, r0]
 801900c:	e691      	b.n	8018d32 <_malloc_r+0x62>
 801900e:	f1ba 0f00 	cmp.w	sl, #0
 8019012:	db11      	blt.n	8019038 <_malloc_r+0x368>
 8019014:	4420      	add	r0, r4
 8019016:	6843      	ldr	r3, [r0, #4]
 8019018:	f043 0301 	orr.w	r3, r3, #1
 801901c:	6043      	str	r3, [r0, #4]
 801901e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8019022:	4628      	mov	r0, r5
 8019024:	f8c3 c00c 	str.w	ip, [r3, #12]
 8019028:	f8cc 3008 	str.w	r3, [ip, #8]
 801902c:	f000 f890 	bl	8019150 <__malloc_unlock>
 8019030:	4620      	mov	r0, r4
 8019032:	b003      	add	sp, #12
 8019034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019038:	4664      	mov	r4, ip
 801903a:	e711      	b.n	8018e60 <_malloc_r+0x190>
 801903c:	f858 0908 	ldr.w	r0, [r8], #-8
 8019040:	4540      	cmp	r0, r8
 8019042:	f103 33ff 	add.w	r3, r3, #4294967295
 8019046:	f43f af15 	beq.w	8018e74 <_malloc_r+0x1a4>
 801904a:	e71a      	b.n	8018e82 <_malloc_r+0x1b2>
 801904c:	3304      	adds	r3, #4
 801904e:	0052      	lsls	r2, r2, #1
 8019050:	4210      	tst	r0, r2
 8019052:	d0fb      	beq.n	801904c <_malloc_r+0x37c>
 8019054:	e6fe      	b.n	8018e54 <_malloc_r+0x184>
 8019056:	4673      	mov	r3, lr
 8019058:	e7fa      	b.n	8019050 <_malloc_r+0x380>
 801905a:	f8d2 e000 	ldr.w	lr, [r2]
 801905e:	f1be 3fff 	cmp.w	lr, #4294967295
 8019062:	bf1b      	ittet	ne
 8019064:	eba4 0b0b 	subne.w	fp, r4, fp
 8019068:	eb0b 0200 	addne.w	r2, fp, r0
 801906c:	6014      	streq	r4, [r2, #0]
 801906e:	601a      	strne	r2, [r3, #0]
 8019070:	f014 0b07 	ands.w	fp, r4, #7
 8019074:	bf1a      	itte	ne
 8019076:	f1cb 0008 	rsbne	r0, fp, #8
 801907a:	1824      	addne	r4, r4, r0
 801907c:	4658      	moveq	r0, fp
 801907e:	1862      	adds	r2, r4, r1
 8019080:	ea02 010c 	and.w	r1, r2, ip
 8019084:	4480      	add	r8, r0
 8019086:	eba8 0801 	sub.w	r8, r8, r1
 801908a:	ea08 080c 	and.w	r8, r8, ip
 801908e:	4641      	mov	r1, r8
 8019090:	4628      	mov	r0, r5
 8019092:	9201      	str	r2, [sp, #4]
 8019094:	f003 fd4c 	bl	801cb30 <_sbrk_r>
 8019098:	1c43      	adds	r3, r0, #1
 801909a:	9a01      	ldr	r2, [sp, #4]
 801909c:	4b28      	ldr	r3, [pc, #160]	; (8019140 <_malloc_r+0x470>)
 801909e:	d107      	bne.n	80190b0 <_malloc_r+0x3e0>
 80190a0:	f1bb 0f00 	cmp.w	fp, #0
 80190a4:	d023      	beq.n	80190ee <_malloc_r+0x41e>
 80190a6:	f1ab 0008 	sub.w	r0, fp, #8
 80190aa:	4410      	add	r0, r2
 80190ac:	f04f 0800 	mov.w	r8, #0
 80190b0:	681a      	ldr	r2, [r3, #0]
 80190b2:	60b4      	str	r4, [r6, #8]
 80190b4:	1b00      	subs	r0, r0, r4
 80190b6:	4440      	add	r0, r8
 80190b8:	4442      	add	r2, r8
 80190ba:	f040 0001 	orr.w	r0, r0, #1
 80190be:	45b2      	cmp	sl, r6
 80190c0:	601a      	str	r2, [r3, #0]
 80190c2:	6060      	str	r0, [r4, #4]
 80190c4:	f43f af27 	beq.w	8018f16 <_malloc_r+0x246>
 80190c8:	f1b9 0f0f 	cmp.w	r9, #15
 80190cc:	d812      	bhi.n	80190f4 <_malloc_r+0x424>
 80190ce:	2301      	movs	r3, #1
 80190d0:	6063      	str	r3, [r4, #4]
 80190d2:	68b3      	ldr	r3, [r6, #8]
 80190d4:	685b      	ldr	r3, [r3, #4]
 80190d6:	f023 0303 	bic.w	r3, r3, #3
 80190da:	42bb      	cmp	r3, r7
 80190dc:	eba3 0207 	sub.w	r2, r3, r7
 80190e0:	d301      	bcc.n	80190e6 <_malloc_r+0x416>
 80190e2:	2a0f      	cmp	r2, #15
 80190e4:	dc22      	bgt.n	801912c <_malloc_r+0x45c>
 80190e6:	4628      	mov	r0, r5
 80190e8:	f000 f832 	bl	8019150 <__malloc_unlock>
 80190ec:	e5fc      	b.n	8018ce8 <_malloc_r+0x18>
 80190ee:	4610      	mov	r0, r2
 80190f0:	46d8      	mov	r8, fp
 80190f2:	e7dd      	b.n	80190b0 <_malloc_r+0x3e0>
 80190f4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80190f8:	f1a9 090c 	sub.w	r9, r9, #12
 80190fc:	f029 0907 	bic.w	r9, r9, #7
 8019100:	f002 0201 	and.w	r2, r2, #1
 8019104:	ea42 0209 	orr.w	r2, r2, r9
 8019108:	f8ca 2004 	str.w	r2, [sl, #4]
 801910c:	2105      	movs	r1, #5
 801910e:	eb0a 0209 	add.w	r2, sl, r9
 8019112:	f1b9 0f0f 	cmp.w	r9, #15
 8019116:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801911a:	f67f aefc 	bls.w	8018f16 <_malloc_r+0x246>
 801911e:	f10a 0108 	add.w	r1, sl, #8
 8019122:	4628      	mov	r0, r5
 8019124:	f7ff fd14 	bl	8018b50 <_free_r>
 8019128:	4b05      	ldr	r3, [pc, #20]	; (8019140 <_malloc_r+0x470>)
 801912a:	e6f4      	b.n	8018f16 <_malloc_r+0x246>
 801912c:	68b4      	ldr	r4, [r6, #8]
 801912e:	f047 0301 	orr.w	r3, r7, #1
 8019132:	4427      	add	r7, r4
 8019134:	f042 0201 	orr.w	r2, r2, #1
 8019138:	6063      	str	r3, [r4, #4]
 801913a:	60b7      	str	r7, [r6, #8]
 801913c:	607a      	str	r2, [r7, #4]
 801913e:	e5f8      	b.n	8018d32 <_malloc_r+0x62>
 8019140:	200056b8 	.word	0x200056b8

08019144 <__malloc_lock>:
 8019144:	4801      	ldr	r0, [pc, #4]	; (801914c <__malloc_lock+0x8>)
 8019146:	f7ff bc8f 	b.w	8018a68 <__retarget_lock_acquire_recursive>
 801914a:	bf00      	nop
 801914c:	200056b1 	.word	0x200056b1

08019150 <__malloc_unlock>:
 8019150:	4801      	ldr	r0, [pc, #4]	; (8019158 <__malloc_unlock+0x8>)
 8019152:	f7ff bc8a 	b.w	8018a6a <__retarget_lock_release_recursive>
 8019156:	bf00      	nop
 8019158:	200056b1 	.word	0x200056b1

0801915c <_realloc_r>:
 801915c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019160:	460c      	mov	r4, r1
 8019162:	4682      	mov	sl, r0
 8019164:	4611      	mov	r1, r2
 8019166:	b924      	cbnz	r4, 8019172 <_realloc_r+0x16>
 8019168:	b003      	add	sp, #12
 801916a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801916e:	f7ff bdaf 	b.w	8018cd0 <_malloc_r>
 8019172:	9201      	str	r2, [sp, #4]
 8019174:	f7ff ffe6 	bl	8019144 <__malloc_lock>
 8019178:	9901      	ldr	r1, [sp, #4]
 801917a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801917e:	f101 080b 	add.w	r8, r1, #11
 8019182:	f1b8 0f16 	cmp.w	r8, #22
 8019186:	d90b      	bls.n	80191a0 <_realloc_r+0x44>
 8019188:	f038 0807 	bics.w	r8, r8, #7
 801918c:	d50a      	bpl.n	80191a4 <_realloc_r+0x48>
 801918e:	230c      	movs	r3, #12
 8019190:	f8ca 3000 	str.w	r3, [sl]
 8019194:	f04f 0b00 	mov.w	fp, #0
 8019198:	4658      	mov	r0, fp
 801919a:	b003      	add	sp, #12
 801919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191a0:	f04f 0810 	mov.w	r8, #16
 80191a4:	4588      	cmp	r8, r1
 80191a6:	d3f2      	bcc.n	801918e <_realloc_r+0x32>
 80191a8:	f025 0603 	bic.w	r6, r5, #3
 80191ac:	45b0      	cmp	r8, r6
 80191ae:	f1a4 0908 	sub.w	r9, r4, #8
 80191b2:	f340 816e 	ble.w	8019492 <_realloc_r+0x336>
 80191b6:	4a9b      	ldr	r2, [pc, #620]	; (8019424 <_realloc_r+0x2c8>)
 80191b8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80191bc:	eb09 0306 	add.w	r3, r9, r6
 80191c0:	459c      	cmp	ip, r3
 80191c2:	685a      	ldr	r2, [r3, #4]
 80191c4:	d005      	beq.n	80191d2 <_realloc_r+0x76>
 80191c6:	f022 0001 	bic.w	r0, r2, #1
 80191ca:	4418      	add	r0, r3
 80191cc:	6840      	ldr	r0, [r0, #4]
 80191ce:	07c7      	lsls	r7, r0, #31
 80191d0:	d447      	bmi.n	8019262 <_realloc_r+0x106>
 80191d2:	f022 0203 	bic.w	r2, r2, #3
 80191d6:	459c      	cmp	ip, r3
 80191d8:	eb06 0702 	add.w	r7, r6, r2
 80191dc:	d119      	bne.n	8019212 <_realloc_r+0xb6>
 80191de:	f108 0010 	add.w	r0, r8, #16
 80191e2:	42b8      	cmp	r0, r7
 80191e4:	dc3f      	bgt.n	8019266 <_realloc_r+0x10a>
 80191e6:	eb09 0308 	add.w	r3, r9, r8
 80191ea:	4a8e      	ldr	r2, [pc, #568]	; (8019424 <_realloc_r+0x2c8>)
 80191ec:	eba7 0708 	sub.w	r7, r7, r8
 80191f0:	f047 0701 	orr.w	r7, r7, #1
 80191f4:	6093      	str	r3, [r2, #8]
 80191f6:	605f      	str	r7, [r3, #4]
 80191f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80191fc:	f003 0301 	and.w	r3, r3, #1
 8019200:	ea43 0308 	orr.w	r3, r3, r8
 8019204:	f844 3c04 	str.w	r3, [r4, #-4]
 8019208:	4650      	mov	r0, sl
 801920a:	f7ff ffa1 	bl	8019150 <__malloc_unlock>
 801920e:	46a3      	mov	fp, r4
 8019210:	e7c2      	b.n	8019198 <_realloc_r+0x3c>
 8019212:	45b8      	cmp	r8, r7
 8019214:	dc27      	bgt.n	8019266 <_realloc_r+0x10a>
 8019216:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801921a:	60da      	str	r2, [r3, #12]
 801921c:	6093      	str	r3, [r2, #8]
 801921e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019222:	eba7 0008 	sub.w	r0, r7, r8
 8019226:	280f      	cmp	r0, #15
 8019228:	f003 0301 	and.w	r3, r3, #1
 801922c:	eb09 0207 	add.w	r2, r9, r7
 8019230:	f240 8131 	bls.w	8019496 <_realloc_r+0x33a>
 8019234:	eb09 0108 	add.w	r1, r9, r8
 8019238:	ea48 0303 	orr.w	r3, r8, r3
 801923c:	f040 0001 	orr.w	r0, r0, #1
 8019240:	f8c9 3004 	str.w	r3, [r9, #4]
 8019244:	6048      	str	r0, [r1, #4]
 8019246:	6853      	ldr	r3, [r2, #4]
 8019248:	f043 0301 	orr.w	r3, r3, #1
 801924c:	6053      	str	r3, [r2, #4]
 801924e:	3108      	adds	r1, #8
 8019250:	4650      	mov	r0, sl
 8019252:	f7ff fc7d 	bl	8018b50 <_free_r>
 8019256:	4650      	mov	r0, sl
 8019258:	f7ff ff7a 	bl	8019150 <__malloc_unlock>
 801925c:	f109 0b08 	add.w	fp, r9, #8
 8019260:	e79a      	b.n	8019198 <_realloc_r+0x3c>
 8019262:	2200      	movs	r2, #0
 8019264:	4613      	mov	r3, r2
 8019266:	07e8      	lsls	r0, r5, #31
 8019268:	f100 80c6 	bmi.w	80193f8 <_realloc_r+0x29c>
 801926c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8019270:	eba9 0505 	sub.w	r5, r9, r5
 8019274:	6868      	ldr	r0, [r5, #4]
 8019276:	f020 0003 	bic.w	r0, r0, #3
 801927a:	eb00 0b06 	add.w	fp, r0, r6
 801927e:	2b00      	cmp	r3, #0
 8019280:	f000 8086 	beq.w	8019390 <_realloc_r+0x234>
 8019284:	459c      	cmp	ip, r3
 8019286:	eb02 070b 	add.w	r7, r2, fp
 801928a:	d149      	bne.n	8019320 <_realloc_r+0x1c4>
 801928c:	f108 0310 	add.w	r3, r8, #16
 8019290:	42bb      	cmp	r3, r7
 8019292:	dc7d      	bgt.n	8019390 <_realloc_r+0x234>
 8019294:	46ab      	mov	fp, r5
 8019296:	68eb      	ldr	r3, [r5, #12]
 8019298:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 801929c:	60d3      	str	r3, [r2, #12]
 801929e:	609a      	str	r2, [r3, #8]
 80192a0:	1f32      	subs	r2, r6, #4
 80192a2:	2a24      	cmp	r2, #36	; 0x24
 80192a4:	d837      	bhi.n	8019316 <_realloc_r+0x1ba>
 80192a6:	2a13      	cmp	r2, #19
 80192a8:	d933      	bls.n	8019312 <_realloc_r+0x1b6>
 80192aa:	6823      	ldr	r3, [r4, #0]
 80192ac:	60ab      	str	r3, [r5, #8]
 80192ae:	6863      	ldr	r3, [r4, #4]
 80192b0:	60eb      	str	r3, [r5, #12]
 80192b2:	2a1b      	cmp	r2, #27
 80192b4:	d81b      	bhi.n	80192ee <_realloc_r+0x192>
 80192b6:	3408      	adds	r4, #8
 80192b8:	f105 0310 	add.w	r3, r5, #16
 80192bc:	6822      	ldr	r2, [r4, #0]
 80192be:	601a      	str	r2, [r3, #0]
 80192c0:	6862      	ldr	r2, [r4, #4]
 80192c2:	605a      	str	r2, [r3, #4]
 80192c4:	68a2      	ldr	r2, [r4, #8]
 80192c6:	609a      	str	r2, [r3, #8]
 80192c8:	eb05 0308 	add.w	r3, r5, r8
 80192cc:	4a55      	ldr	r2, [pc, #340]	; (8019424 <_realloc_r+0x2c8>)
 80192ce:	eba7 0708 	sub.w	r7, r7, r8
 80192d2:	f047 0701 	orr.w	r7, r7, #1
 80192d6:	6093      	str	r3, [r2, #8]
 80192d8:	605f      	str	r7, [r3, #4]
 80192da:	686b      	ldr	r3, [r5, #4]
 80192dc:	f003 0301 	and.w	r3, r3, #1
 80192e0:	ea43 0308 	orr.w	r3, r3, r8
 80192e4:	606b      	str	r3, [r5, #4]
 80192e6:	4650      	mov	r0, sl
 80192e8:	f7ff ff32 	bl	8019150 <__malloc_unlock>
 80192ec:	e754      	b.n	8019198 <_realloc_r+0x3c>
 80192ee:	68a3      	ldr	r3, [r4, #8]
 80192f0:	612b      	str	r3, [r5, #16]
 80192f2:	68e3      	ldr	r3, [r4, #12]
 80192f4:	616b      	str	r3, [r5, #20]
 80192f6:	2a24      	cmp	r2, #36	; 0x24
 80192f8:	bf01      	itttt	eq
 80192fa:	6923      	ldreq	r3, [r4, #16]
 80192fc:	61ab      	streq	r3, [r5, #24]
 80192fe:	6962      	ldreq	r2, [r4, #20]
 8019300:	61ea      	streq	r2, [r5, #28]
 8019302:	bf19      	ittee	ne
 8019304:	3410      	addne	r4, #16
 8019306:	f105 0318 	addne.w	r3, r5, #24
 801930a:	f105 0320 	addeq.w	r3, r5, #32
 801930e:	3418      	addeq	r4, #24
 8019310:	e7d4      	b.n	80192bc <_realloc_r+0x160>
 8019312:	465b      	mov	r3, fp
 8019314:	e7d2      	b.n	80192bc <_realloc_r+0x160>
 8019316:	4621      	mov	r1, r4
 8019318:	4658      	mov	r0, fp
 801931a:	f7ff faa1 	bl	8018860 <memmove>
 801931e:	e7d3      	b.n	80192c8 <_realloc_r+0x16c>
 8019320:	45b8      	cmp	r8, r7
 8019322:	dc35      	bgt.n	8019390 <_realloc_r+0x234>
 8019324:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8019328:	4628      	mov	r0, r5
 801932a:	60da      	str	r2, [r3, #12]
 801932c:	6093      	str	r3, [r2, #8]
 801932e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8019332:	68eb      	ldr	r3, [r5, #12]
 8019334:	60d3      	str	r3, [r2, #12]
 8019336:	609a      	str	r2, [r3, #8]
 8019338:	1f32      	subs	r2, r6, #4
 801933a:	2a24      	cmp	r2, #36	; 0x24
 801933c:	d824      	bhi.n	8019388 <_realloc_r+0x22c>
 801933e:	2a13      	cmp	r2, #19
 8019340:	d908      	bls.n	8019354 <_realloc_r+0x1f8>
 8019342:	6823      	ldr	r3, [r4, #0]
 8019344:	60ab      	str	r3, [r5, #8]
 8019346:	6863      	ldr	r3, [r4, #4]
 8019348:	60eb      	str	r3, [r5, #12]
 801934a:	2a1b      	cmp	r2, #27
 801934c:	d80a      	bhi.n	8019364 <_realloc_r+0x208>
 801934e:	3408      	adds	r4, #8
 8019350:	f105 0010 	add.w	r0, r5, #16
 8019354:	6823      	ldr	r3, [r4, #0]
 8019356:	6003      	str	r3, [r0, #0]
 8019358:	6863      	ldr	r3, [r4, #4]
 801935a:	6043      	str	r3, [r0, #4]
 801935c:	68a3      	ldr	r3, [r4, #8]
 801935e:	6083      	str	r3, [r0, #8]
 8019360:	46a9      	mov	r9, r5
 8019362:	e75c      	b.n	801921e <_realloc_r+0xc2>
 8019364:	68a3      	ldr	r3, [r4, #8]
 8019366:	612b      	str	r3, [r5, #16]
 8019368:	68e3      	ldr	r3, [r4, #12]
 801936a:	616b      	str	r3, [r5, #20]
 801936c:	2a24      	cmp	r2, #36	; 0x24
 801936e:	bf01      	itttt	eq
 8019370:	6923      	ldreq	r3, [r4, #16]
 8019372:	61ab      	streq	r3, [r5, #24]
 8019374:	6963      	ldreq	r3, [r4, #20]
 8019376:	61eb      	streq	r3, [r5, #28]
 8019378:	bf19      	ittee	ne
 801937a:	3410      	addne	r4, #16
 801937c:	f105 0018 	addne.w	r0, r5, #24
 8019380:	f105 0020 	addeq.w	r0, r5, #32
 8019384:	3418      	addeq	r4, #24
 8019386:	e7e5      	b.n	8019354 <_realloc_r+0x1f8>
 8019388:	4621      	mov	r1, r4
 801938a:	f7ff fa69 	bl	8018860 <memmove>
 801938e:	e7e7      	b.n	8019360 <_realloc_r+0x204>
 8019390:	45d8      	cmp	r8, fp
 8019392:	dc31      	bgt.n	80193f8 <_realloc_r+0x29c>
 8019394:	4628      	mov	r0, r5
 8019396:	68eb      	ldr	r3, [r5, #12]
 8019398:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801939c:	60d3      	str	r3, [r2, #12]
 801939e:	609a      	str	r2, [r3, #8]
 80193a0:	1f32      	subs	r2, r6, #4
 80193a2:	2a24      	cmp	r2, #36	; 0x24
 80193a4:	d824      	bhi.n	80193f0 <_realloc_r+0x294>
 80193a6:	2a13      	cmp	r2, #19
 80193a8:	d908      	bls.n	80193bc <_realloc_r+0x260>
 80193aa:	6823      	ldr	r3, [r4, #0]
 80193ac:	60ab      	str	r3, [r5, #8]
 80193ae:	6863      	ldr	r3, [r4, #4]
 80193b0:	60eb      	str	r3, [r5, #12]
 80193b2:	2a1b      	cmp	r2, #27
 80193b4:	d80a      	bhi.n	80193cc <_realloc_r+0x270>
 80193b6:	3408      	adds	r4, #8
 80193b8:	f105 0010 	add.w	r0, r5, #16
 80193bc:	6823      	ldr	r3, [r4, #0]
 80193be:	6003      	str	r3, [r0, #0]
 80193c0:	6863      	ldr	r3, [r4, #4]
 80193c2:	6043      	str	r3, [r0, #4]
 80193c4:	68a3      	ldr	r3, [r4, #8]
 80193c6:	6083      	str	r3, [r0, #8]
 80193c8:	465f      	mov	r7, fp
 80193ca:	e7c9      	b.n	8019360 <_realloc_r+0x204>
 80193cc:	68a3      	ldr	r3, [r4, #8]
 80193ce:	612b      	str	r3, [r5, #16]
 80193d0:	68e3      	ldr	r3, [r4, #12]
 80193d2:	616b      	str	r3, [r5, #20]
 80193d4:	2a24      	cmp	r2, #36	; 0x24
 80193d6:	bf01      	itttt	eq
 80193d8:	6923      	ldreq	r3, [r4, #16]
 80193da:	61ab      	streq	r3, [r5, #24]
 80193dc:	6963      	ldreq	r3, [r4, #20]
 80193de:	61eb      	streq	r3, [r5, #28]
 80193e0:	bf19      	ittee	ne
 80193e2:	3410      	addne	r4, #16
 80193e4:	f105 0018 	addne.w	r0, r5, #24
 80193e8:	f105 0020 	addeq.w	r0, r5, #32
 80193ec:	3418      	addeq	r4, #24
 80193ee:	e7e5      	b.n	80193bc <_realloc_r+0x260>
 80193f0:	4621      	mov	r1, r4
 80193f2:	f7ff fa35 	bl	8018860 <memmove>
 80193f6:	e7e7      	b.n	80193c8 <_realloc_r+0x26c>
 80193f8:	4650      	mov	r0, sl
 80193fa:	f7ff fc69 	bl	8018cd0 <_malloc_r>
 80193fe:	4683      	mov	fp, r0
 8019400:	2800      	cmp	r0, #0
 8019402:	f43f af70 	beq.w	80192e6 <_realloc_r+0x18a>
 8019406:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801940a:	f023 0301 	bic.w	r3, r3, #1
 801940e:	444b      	add	r3, r9
 8019410:	f1a0 0208 	sub.w	r2, r0, #8
 8019414:	4293      	cmp	r3, r2
 8019416:	d107      	bne.n	8019428 <_realloc_r+0x2cc>
 8019418:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801941c:	f027 0703 	bic.w	r7, r7, #3
 8019420:	4437      	add	r7, r6
 8019422:	e6fc      	b.n	801921e <_realloc_r+0xc2>
 8019424:	200001d0 	.word	0x200001d0
 8019428:	1f32      	subs	r2, r6, #4
 801942a:	2a24      	cmp	r2, #36	; 0x24
 801942c:	d82d      	bhi.n	801948a <_realloc_r+0x32e>
 801942e:	2a13      	cmp	r2, #19
 8019430:	d928      	bls.n	8019484 <_realloc_r+0x328>
 8019432:	6823      	ldr	r3, [r4, #0]
 8019434:	6003      	str	r3, [r0, #0]
 8019436:	6863      	ldr	r3, [r4, #4]
 8019438:	6043      	str	r3, [r0, #4]
 801943a:	2a1b      	cmp	r2, #27
 801943c:	d80e      	bhi.n	801945c <_realloc_r+0x300>
 801943e:	f104 0208 	add.w	r2, r4, #8
 8019442:	f100 0308 	add.w	r3, r0, #8
 8019446:	6811      	ldr	r1, [r2, #0]
 8019448:	6019      	str	r1, [r3, #0]
 801944a:	6851      	ldr	r1, [r2, #4]
 801944c:	6059      	str	r1, [r3, #4]
 801944e:	6892      	ldr	r2, [r2, #8]
 8019450:	609a      	str	r2, [r3, #8]
 8019452:	4621      	mov	r1, r4
 8019454:	4650      	mov	r0, sl
 8019456:	f7ff fb7b 	bl	8018b50 <_free_r>
 801945a:	e744      	b.n	80192e6 <_realloc_r+0x18a>
 801945c:	68a3      	ldr	r3, [r4, #8]
 801945e:	6083      	str	r3, [r0, #8]
 8019460:	68e3      	ldr	r3, [r4, #12]
 8019462:	60c3      	str	r3, [r0, #12]
 8019464:	2a24      	cmp	r2, #36	; 0x24
 8019466:	bf01      	itttt	eq
 8019468:	6923      	ldreq	r3, [r4, #16]
 801946a:	6103      	streq	r3, [r0, #16]
 801946c:	6961      	ldreq	r1, [r4, #20]
 801946e:	6141      	streq	r1, [r0, #20]
 8019470:	bf19      	ittee	ne
 8019472:	f104 0210 	addne.w	r2, r4, #16
 8019476:	f100 0310 	addne.w	r3, r0, #16
 801947a:	f104 0218 	addeq.w	r2, r4, #24
 801947e:	f100 0318 	addeq.w	r3, r0, #24
 8019482:	e7e0      	b.n	8019446 <_realloc_r+0x2ea>
 8019484:	4603      	mov	r3, r0
 8019486:	4622      	mov	r2, r4
 8019488:	e7dd      	b.n	8019446 <_realloc_r+0x2ea>
 801948a:	4621      	mov	r1, r4
 801948c:	f7ff f9e8 	bl	8018860 <memmove>
 8019490:	e7df      	b.n	8019452 <_realloc_r+0x2f6>
 8019492:	4637      	mov	r7, r6
 8019494:	e6c3      	b.n	801921e <_realloc_r+0xc2>
 8019496:	431f      	orrs	r7, r3
 8019498:	f8c9 7004 	str.w	r7, [r9, #4]
 801949c:	6853      	ldr	r3, [r2, #4]
 801949e:	f043 0301 	orr.w	r3, r3, #1
 80194a2:	6053      	str	r3, [r2, #4]
 80194a4:	e6d7      	b.n	8019256 <_realloc_r+0xfa>
 80194a6:	bf00      	nop

080194a8 <_svfprintf_r>:
 80194a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ac:	b0d3      	sub	sp, #332	; 0x14c
 80194ae:	468a      	mov	sl, r1
 80194b0:	4693      	mov	fp, r2
 80194b2:	461d      	mov	r5, r3
 80194b4:	4681      	mov	r9, r0
 80194b6:	f003 fb15 	bl	801cae4 <_localeconv_r>
 80194ba:	6803      	ldr	r3, [r0, #0]
 80194bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80194be:	4618      	mov	r0, r3
 80194c0:	f7ef f8ae 	bl	8008620 <strlen>
 80194c4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80194c8:	9012      	str	r0, [sp, #72]	; 0x48
 80194ca:	0618      	lsls	r0, r3, #24
 80194cc:	d518      	bpl.n	8019500 <_svfprintf_r+0x58>
 80194ce:	f8da 3010 	ldr.w	r3, [sl, #16]
 80194d2:	b9ab      	cbnz	r3, 8019500 <_svfprintf_r+0x58>
 80194d4:	2140      	movs	r1, #64	; 0x40
 80194d6:	4648      	mov	r0, r9
 80194d8:	f7ff fbfa 	bl	8018cd0 <_malloc_r>
 80194dc:	f8ca 0000 	str.w	r0, [sl]
 80194e0:	f8ca 0010 	str.w	r0, [sl, #16]
 80194e4:	b948      	cbnz	r0, 80194fa <_svfprintf_r+0x52>
 80194e6:	230c      	movs	r3, #12
 80194e8:	f8c9 3000 	str.w	r3, [r9]
 80194ec:	f04f 33ff 	mov.w	r3, #4294967295
 80194f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80194f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80194f4:	b053      	add	sp, #332	; 0x14c
 80194f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194fa:	2340      	movs	r3, #64	; 0x40
 80194fc:	f8ca 3014 	str.w	r3, [sl, #20]
 8019500:	2300      	movs	r3, #0
 8019502:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8019506:	9309      	str	r3, [sp, #36]	; 0x24
 8019508:	2200      	movs	r2, #0
 801950a:	2300      	movs	r3, #0
 801950c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8019510:	2300      	movs	r3, #0
 8019512:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 8019516:	ac29      	add	r4, sp, #164	; 0xa4
 8019518:	9426      	str	r4, [sp, #152]	; 0x98
 801951a:	930d      	str	r3, [sp, #52]	; 0x34
 801951c:	9315      	str	r3, [sp, #84]	; 0x54
 801951e:	9318      	str	r3, [sp, #96]	; 0x60
 8019520:	930f      	str	r3, [sp, #60]	; 0x3c
 8019522:	465b      	mov	r3, fp
 8019524:	461e      	mov	r6, r3
 8019526:	f813 2b01 	ldrb.w	r2, [r3], #1
 801952a:	b10a      	cbz	r2, 8019530 <_svfprintf_r+0x88>
 801952c:	2a25      	cmp	r2, #37	; 0x25
 801952e:	d1f9      	bne.n	8019524 <_svfprintf_r+0x7c>
 8019530:	ebb6 070b 	subs.w	r7, r6, fp
 8019534:	d00d      	beq.n	8019552 <_svfprintf_r+0xaa>
 8019536:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019538:	443b      	add	r3, r7
 801953a:	9328      	str	r3, [sp, #160]	; 0xa0
 801953c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801953e:	3301      	adds	r3, #1
 8019540:	2b07      	cmp	r3, #7
 8019542:	e9c4 b700 	strd	fp, r7, [r4]
 8019546:	9327      	str	r3, [sp, #156]	; 0x9c
 8019548:	dc79      	bgt.n	801963e <_svfprintf_r+0x196>
 801954a:	3408      	adds	r4, #8
 801954c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801954e:	443b      	add	r3, r7
 8019550:	930f      	str	r3, [sp, #60]	; 0x3c
 8019552:	7833      	ldrb	r3, [r6, #0]
 8019554:	2b00      	cmp	r3, #0
 8019556:	f001 8135 	beq.w	801a7c4 <_svfprintf_r+0x131c>
 801955a:	2300      	movs	r3, #0
 801955c:	f04f 32ff 	mov.w	r2, #4294967295
 8019560:	3601      	adds	r6, #1
 8019562:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019566:	9207      	str	r2, [sp, #28]
 8019568:	9313      	str	r3, [sp, #76]	; 0x4c
 801956a:	4698      	mov	r8, r3
 801956c:	270a      	movs	r7, #10
 801956e:	212b      	movs	r1, #43	; 0x2b
 8019570:	4633      	mov	r3, r6
 8019572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019576:	920b      	str	r2, [sp, #44]	; 0x2c
 8019578:	930e      	str	r3, [sp, #56]	; 0x38
 801957a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801957c:	3b20      	subs	r3, #32
 801957e:	2b5a      	cmp	r3, #90	; 0x5a
 8019580:	f200 85a8 	bhi.w	801a0d4 <_svfprintf_r+0xc2c>
 8019584:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019588:	05a6007e 	.word	0x05a6007e
 801958c:	008605a6 	.word	0x008605a6
 8019590:	05a605a6 	.word	0x05a605a6
 8019594:	006505a6 	.word	0x006505a6
 8019598:	05a605a6 	.word	0x05a605a6
 801959c:	00930089 	.word	0x00930089
 80195a0:	009005a6 	.word	0x009005a6
 80195a4:	05a60096 	.word	0x05a60096
 80195a8:	00b500b2 	.word	0x00b500b2
 80195ac:	00b500b5 	.word	0x00b500b5
 80195b0:	00b500b5 	.word	0x00b500b5
 80195b4:	00b500b5 	.word	0x00b500b5
 80195b8:	00b500b5 	.word	0x00b500b5
 80195bc:	05a605a6 	.word	0x05a605a6
 80195c0:	05a605a6 	.word	0x05a605a6
 80195c4:	05a605a6 	.word	0x05a605a6
 80195c8:	012505a6 	.word	0x012505a6
 80195cc:	00e205a6 	.word	0x00e205a6
 80195d0:	012500f5 	.word	0x012500f5
 80195d4:	01250125 	.word	0x01250125
 80195d8:	05a605a6 	.word	0x05a605a6
 80195dc:	05a605a6 	.word	0x05a605a6
 80195e0:	05a600c5 	.word	0x05a600c5
 80195e4:	048505a6 	.word	0x048505a6
 80195e8:	05a605a6 	.word	0x05a605a6
 80195ec:	04cf05a6 	.word	0x04cf05a6
 80195f0:	04f005a6 	.word	0x04f005a6
 80195f4:	05a605a6 	.word	0x05a605a6
 80195f8:	05a60512 	.word	0x05a60512
 80195fc:	05a605a6 	.word	0x05a605a6
 8019600:	05a605a6 	.word	0x05a605a6
 8019604:	05a605a6 	.word	0x05a605a6
 8019608:	012505a6 	.word	0x012505a6
 801960c:	00e205a6 	.word	0x00e205a6
 8019610:	012500f7 	.word	0x012500f7
 8019614:	01250125 	.word	0x01250125
 8019618:	00f700c8 	.word	0x00f700c8
 801961c:	05a600dc 	.word	0x05a600dc
 8019620:	05a600d5 	.word	0x05a600d5
 8019624:	04870460 	.word	0x04870460
 8019628:	00dc04be 	.word	0x00dc04be
 801962c:	04cf05a6 	.word	0x04cf05a6
 8019630:	04f2007c 	.word	0x04f2007c
 8019634:	05a605a6 	.word	0x05a605a6
 8019638:	05a60531 	.word	0x05a60531
 801963c:	007c      	.short	0x007c
 801963e:	aa26      	add	r2, sp, #152	; 0x98
 8019640:	4651      	mov	r1, sl
 8019642:	4648      	mov	r0, r9
 8019644:	f004 fcc8 	bl	801dfd8 <__ssprint_r>
 8019648:	2800      	cmp	r0, #0
 801964a:	f040 812e 	bne.w	80198aa <_svfprintf_r+0x402>
 801964e:	ac29      	add	r4, sp, #164	; 0xa4
 8019650:	e77c      	b.n	801954c <_svfprintf_r+0xa4>
 8019652:	4648      	mov	r0, r9
 8019654:	f003 fa46 	bl	801cae4 <_localeconv_r>
 8019658:	6843      	ldr	r3, [r0, #4]
 801965a:	9318      	str	r3, [sp, #96]	; 0x60
 801965c:	4618      	mov	r0, r3
 801965e:	f7ee ffdf 	bl	8008620 <strlen>
 8019662:	9015      	str	r0, [sp, #84]	; 0x54
 8019664:	4648      	mov	r0, r9
 8019666:	f003 fa3d 	bl	801cae4 <_localeconv_r>
 801966a:	6883      	ldr	r3, [r0, #8]
 801966c:	930d      	str	r3, [sp, #52]	; 0x34
 801966e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019670:	212b      	movs	r1, #43	; 0x2b
 8019672:	b12b      	cbz	r3, 8019680 <_svfprintf_r+0x1d8>
 8019674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019676:	b11b      	cbz	r3, 8019680 <_svfprintf_r+0x1d8>
 8019678:	781b      	ldrb	r3, [r3, #0]
 801967a:	b10b      	cbz	r3, 8019680 <_svfprintf_r+0x1d8>
 801967c:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8019680:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019682:	e775      	b.n	8019570 <_svfprintf_r+0xc8>
 8019684:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8019688:	2b00      	cmp	r3, #0
 801968a:	d1f9      	bne.n	8019680 <_svfprintf_r+0x1d8>
 801968c:	2320      	movs	r3, #32
 801968e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019692:	e7f5      	b.n	8019680 <_svfprintf_r+0x1d8>
 8019694:	f048 0801 	orr.w	r8, r8, #1
 8019698:	e7f2      	b.n	8019680 <_svfprintf_r+0x1d8>
 801969a:	f855 3b04 	ldr.w	r3, [r5], #4
 801969e:	9313      	str	r3, [sp, #76]	; 0x4c
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	daed      	bge.n	8019680 <_svfprintf_r+0x1d8>
 80196a4:	425b      	negs	r3, r3
 80196a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80196a8:	f048 0804 	orr.w	r8, r8, #4
 80196ac:	e7e8      	b.n	8019680 <_svfprintf_r+0x1d8>
 80196ae:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 80196b2:	e7e5      	b.n	8019680 <_svfprintf_r+0x1d8>
 80196b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80196bc:	2a2a      	cmp	r2, #42	; 0x2a
 80196be:	d112      	bne.n	80196e6 <_svfprintf_r+0x23e>
 80196c0:	f855 2b04 	ldr.w	r2, [r5], #4
 80196c4:	930e      	str	r3, [sp, #56]	; 0x38
 80196c6:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80196ca:	9207      	str	r2, [sp, #28]
 80196cc:	e7d8      	b.n	8019680 <_svfprintf_r+0x1d8>
 80196ce:	9807      	ldr	r0, [sp, #28]
 80196d0:	fb07 2200 	mla	r2, r7, r0, r2
 80196d4:	9207      	str	r2, [sp, #28]
 80196d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196da:	920b      	str	r2, [sp, #44]	; 0x2c
 80196dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80196de:	3a30      	subs	r2, #48	; 0x30
 80196e0:	2a09      	cmp	r2, #9
 80196e2:	d9f4      	bls.n	80196ce <_svfprintf_r+0x226>
 80196e4:	e748      	b.n	8019578 <_svfprintf_r+0xd0>
 80196e6:	2200      	movs	r2, #0
 80196e8:	9207      	str	r2, [sp, #28]
 80196ea:	e7f7      	b.n	80196dc <_svfprintf_r+0x234>
 80196ec:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80196f0:	e7c6      	b.n	8019680 <_svfprintf_r+0x1d8>
 80196f2:	2200      	movs	r2, #0
 80196f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196f6:	9213      	str	r2, [sp, #76]	; 0x4c
 80196f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80196fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80196fc:	3a30      	subs	r2, #48	; 0x30
 80196fe:	fb07 2200 	mla	r2, r7, r0, r2
 8019702:	9213      	str	r2, [sp, #76]	; 0x4c
 8019704:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019708:	920b      	str	r2, [sp, #44]	; 0x2c
 801970a:	3a30      	subs	r2, #48	; 0x30
 801970c:	2a09      	cmp	r2, #9
 801970e:	d9f3      	bls.n	80196f8 <_svfprintf_r+0x250>
 8019710:	e732      	b.n	8019578 <_svfprintf_r+0xd0>
 8019712:	f048 0808 	orr.w	r8, r8, #8
 8019716:	e7b3      	b.n	8019680 <_svfprintf_r+0x1d8>
 8019718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801971a:	781b      	ldrb	r3, [r3, #0]
 801971c:	2b68      	cmp	r3, #104	; 0x68
 801971e:	bf01      	itttt	eq
 8019720:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8019722:	3301      	addeq	r3, #1
 8019724:	930e      	streq	r3, [sp, #56]	; 0x38
 8019726:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801972a:	bf18      	it	ne
 801972c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8019730:	e7a6      	b.n	8019680 <_svfprintf_r+0x1d8>
 8019732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019734:	781b      	ldrb	r3, [r3, #0]
 8019736:	2b6c      	cmp	r3, #108	; 0x6c
 8019738:	d105      	bne.n	8019746 <_svfprintf_r+0x29e>
 801973a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801973c:	3301      	adds	r3, #1
 801973e:	930e      	str	r3, [sp, #56]	; 0x38
 8019740:	f048 0820 	orr.w	r8, r8, #32
 8019744:	e79c      	b.n	8019680 <_svfprintf_r+0x1d8>
 8019746:	f048 0810 	orr.w	r8, r8, #16
 801974a:	e799      	b.n	8019680 <_svfprintf_r+0x1d8>
 801974c:	462a      	mov	r2, r5
 801974e:	f852 3b04 	ldr.w	r3, [r2], #4
 8019752:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8019756:	2300      	movs	r3, #0
 8019758:	920a      	str	r2, [sp, #40]	; 0x28
 801975a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801975e:	2700      	movs	r7, #0
 8019760:	9308      	str	r3, [sp, #32]
 8019762:	2301      	movs	r3, #1
 8019764:	9307      	str	r3, [sp, #28]
 8019766:	463e      	mov	r6, r7
 8019768:	970c      	str	r7, [sp, #48]	; 0x30
 801976a:	463d      	mov	r5, r7
 801976c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8019770:	e1b0      	b.n	8019ad4 <_svfprintf_r+0x62c>
 8019772:	f048 0810 	orr.w	r8, r8, #16
 8019776:	f018 0f20 	tst.w	r8, #32
 801977a:	d012      	beq.n	80197a2 <_svfprintf_r+0x2fa>
 801977c:	3507      	adds	r5, #7
 801977e:	f025 0307 	bic.w	r3, r5, #7
 8019782:	461a      	mov	r2, r3
 8019784:	685e      	ldr	r6, [r3, #4]
 8019786:	f852 5b08 	ldr.w	r5, [r2], #8
 801978a:	920a      	str	r2, [sp, #40]	; 0x28
 801978c:	2e00      	cmp	r6, #0
 801978e:	da06      	bge.n	801979e <_svfprintf_r+0x2f6>
 8019790:	426d      	negs	r5, r5
 8019792:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8019796:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 801979a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801979e:	2301      	movs	r3, #1
 80197a0:	e38a      	b.n	8019eb8 <_svfprintf_r+0xa10>
 80197a2:	462b      	mov	r3, r5
 80197a4:	f018 0f10 	tst.w	r8, #16
 80197a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80197ac:	930a      	str	r3, [sp, #40]	; 0x28
 80197ae:	d002      	beq.n	80197b6 <_svfprintf_r+0x30e>
 80197b0:	4635      	mov	r5, r6
 80197b2:	17f6      	asrs	r6, r6, #31
 80197b4:	e7ea      	b.n	801978c <_svfprintf_r+0x2e4>
 80197b6:	f018 0f40 	tst.w	r8, #64	; 0x40
 80197ba:	d003      	beq.n	80197c4 <_svfprintf_r+0x31c>
 80197bc:	b235      	sxth	r5, r6
 80197be:	f346 36c0 	sbfx	r6, r6, #15, #1
 80197c2:	e7e3      	b.n	801978c <_svfprintf_r+0x2e4>
 80197c4:	f418 7f00 	tst.w	r8, #512	; 0x200
 80197c8:	d0f2      	beq.n	80197b0 <_svfprintf_r+0x308>
 80197ca:	b275      	sxtb	r5, r6
 80197cc:	f346 16c0 	sbfx	r6, r6, #7, #1
 80197d0:	e7dc      	b.n	801978c <_svfprintf_r+0x2e4>
 80197d2:	3507      	adds	r5, #7
 80197d4:	f025 0307 	bic.w	r3, r5, #7
 80197d8:	4619      	mov	r1, r3
 80197da:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80197de:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80197e2:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 80197e6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80197ea:	910a      	str	r1, [sp, #40]	; 0x28
 80197ec:	4b3b      	ldr	r3, [pc, #236]	; (80198dc <_svfprintf_r+0x434>)
 80197ee:	f04f 32ff 	mov.w	r2, #4294967295
 80197f2:	4630      	mov	r0, r6
 80197f4:	4629      	mov	r1, r5
 80197f6:	f7ef fb71 	bl	8008edc <__aeabi_dcmpun>
 80197fa:	bb18      	cbnz	r0, 8019844 <_svfprintf_r+0x39c>
 80197fc:	4b37      	ldr	r3, [pc, #220]	; (80198dc <_svfprintf_r+0x434>)
 80197fe:	f04f 32ff 	mov.w	r2, #4294967295
 8019802:	4630      	mov	r0, r6
 8019804:	4629      	mov	r1, r5
 8019806:	f7ef fb4b 	bl	8008ea0 <__aeabi_dcmple>
 801980a:	b9d8      	cbnz	r0, 8019844 <_svfprintf_r+0x39c>
 801980c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019810:	2200      	movs	r2, #0
 8019812:	2300      	movs	r3, #0
 8019814:	f7ef fb3a 	bl	8008e8c <__aeabi_dcmplt>
 8019818:	b110      	cbz	r0, 8019820 <_svfprintf_r+0x378>
 801981a:	232d      	movs	r3, #45	; 0x2d
 801981c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019820:	4a2f      	ldr	r2, [pc, #188]	; (80198e0 <_svfprintf_r+0x438>)
 8019822:	4b30      	ldr	r3, [pc, #192]	; (80198e4 <_svfprintf_r+0x43c>)
 8019824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019826:	2947      	cmp	r1, #71	; 0x47
 8019828:	bfd4      	ite	le
 801982a:	4693      	movle	fp, r2
 801982c:	469b      	movgt	fp, r3
 801982e:	2303      	movs	r3, #3
 8019830:	2100      	movs	r1, #0
 8019832:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8019836:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801983a:	2700      	movs	r7, #0
 801983c:	463e      	mov	r6, r7
 801983e:	463b      	mov	r3, r7
 8019840:	f000 bffa 	b.w	801a838 <_svfprintf_r+0x1390>
 8019844:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019848:	4610      	mov	r0, r2
 801984a:	4619      	mov	r1, r3
 801984c:	f7ef fb46 	bl	8008edc <__aeabi_dcmpun>
 8019850:	b140      	cbz	r0, 8019864 <_svfprintf_r+0x3bc>
 8019852:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019854:	4a24      	ldr	r2, [pc, #144]	; (80198e8 <_svfprintf_r+0x440>)
 8019856:	2b00      	cmp	r3, #0
 8019858:	bfbc      	itt	lt
 801985a:	232d      	movlt	r3, #45	; 0x2d
 801985c:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8019860:	4b22      	ldr	r3, [pc, #136]	; (80198ec <_svfprintf_r+0x444>)
 8019862:	e7df      	b.n	8019824 <_svfprintf_r+0x37c>
 8019864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019866:	f023 0320 	bic.w	r3, r3, #32
 801986a:	2b41      	cmp	r3, #65	; 0x41
 801986c:	930c      	str	r3, [sp, #48]	; 0x30
 801986e:	d125      	bne.n	80198bc <_svfprintf_r+0x414>
 8019870:	2330      	movs	r3, #48	; 0x30
 8019872:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8019876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019878:	2b61      	cmp	r3, #97	; 0x61
 801987a:	bf0c      	ite	eq
 801987c:	2378      	moveq	r3, #120	; 0x78
 801987e:	2358      	movne	r3, #88	; 0x58
 8019880:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8019884:	9b07      	ldr	r3, [sp, #28]
 8019886:	2b63      	cmp	r3, #99	; 0x63
 8019888:	f048 0802 	orr.w	r8, r8, #2
 801988c:	dd30      	ble.n	80198f0 <_svfprintf_r+0x448>
 801988e:	1c59      	adds	r1, r3, #1
 8019890:	4648      	mov	r0, r9
 8019892:	f7ff fa1d 	bl	8018cd0 <_malloc_r>
 8019896:	4683      	mov	fp, r0
 8019898:	2800      	cmp	r0, #0
 801989a:	f040 81f9 	bne.w	8019c90 <_svfprintf_r+0x7e8>
 801989e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80198a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198a6:	f8aa 300c 	strh.w	r3, [sl, #12]
 80198aa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80198ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80198b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80198b4:	bf18      	it	ne
 80198b6:	f04f 33ff 	movne.w	r3, #4294967295
 80198ba:	e619      	b.n	80194f0 <_svfprintf_r+0x48>
 80198bc:	9b07      	ldr	r3, [sp, #28]
 80198be:	3301      	adds	r3, #1
 80198c0:	f000 81e8 	beq.w	8019c94 <_svfprintf_r+0x7ec>
 80198c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80198c6:	2b47      	cmp	r3, #71	; 0x47
 80198c8:	f040 81e7 	bne.w	8019c9a <_svfprintf_r+0x7f2>
 80198cc:	9b07      	ldr	r3, [sp, #28]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	f040 81e3 	bne.w	8019c9a <_svfprintf_r+0x7f2>
 80198d4:	9308      	str	r3, [sp, #32]
 80198d6:	2301      	movs	r3, #1
 80198d8:	9307      	str	r3, [sp, #28]
 80198da:	e00c      	b.n	80198f6 <_svfprintf_r+0x44e>
 80198dc:	7fefffff 	.word	0x7fefffff
 80198e0:	0802061d 	.word	0x0802061d
 80198e4:	08020621 	.word	0x08020621
 80198e8:	08020625 	.word	0x08020625
 80198ec:	08020629 	.word	0x08020629
 80198f0:	9008      	str	r0, [sp, #32]
 80198f2:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80198f6:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 80198fa:	9314      	str	r3, [sp, #80]	; 0x50
 80198fc:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 8019900:	1e1d      	subs	r5, r3, #0
 8019902:	bfb6      	itet	lt
 8019904:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8019908:	2300      	movge	r3, #0
 801990a:	232d      	movlt	r3, #45	; 0x2d
 801990c:	931c      	str	r3, [sp, #112]	; 0x70
 801990e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019910:	2b41      	cmp	r3, #65	; 0x41
 8019912:	f040 81da 	bne.w	8019cca <_svfprintf_r+0x822>
 8019916:	aa20      	add	r2, sp, #128	; 0x80
 8019918:	4638      	mov	r0, r7
 801991a:	4629      	mov	r1, r5
 801991c:	f003 f938 	bl	801cb90 <frexp>
 8019920:	2200      	movs	r2, #0
 8019922:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019926:	f7ef f83f 	bl	80089a8 <__aeabi_dmul>
 801992a:	2200      	movs	r2, #0
 801992c:	2300      	movs	r3, #0
 801992e:	4606      	mov	r6, r0
 8019930:	460f      	mov	r7, r1
 8019932:	f7ef faa1 	bl	8008e78 <__aeabi_dcmpeq>
 8019936:	b108      	cbz	r0, 801993c <_svfprintf_r+0x494>
 8019938:	2301      	movs	r3, #1
 801993a:	9320      	str	r3, [sp, #128]	; 0x80
 801993c:	4bad      	ldr	r3, [pc, #692]	; (8019bf4 <_svfprintf_r+0x74c>)
 801993e:	4aae      	ldr	r2, [pc, #696]	; (8019bf8 <_svfprintf_r+0x750>)
 8019940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019942:	2961      	cmp	r1, #97	; 0x61
 8019944:	bf18      	it	ne
 8019946:	461a      	movne	r2, r3
 8019948:	9b07      	ldr	r3, [sp, #28]
 801994a:	921b      	str	r2, [sp, #108]	; 0x6c
 801994c:	3b01      	subs	r3, #1
 801994e:	9309      	str	r3, [sp, #36]	; 0x24
 8019950:	465d      	mov	r5, fp
 8019952:	4baa      	ldr	r3, [pc, #680]	; (8019bfc <_svfprintf_r+0x754>)
 8019954:	2200      	movs	r2, #0
 8019956:	4630      	mov	r0, r6
 8019958:	4639      	mov	r1, r7
 801995a:	f7ef f825 	bl	80089a8 <__aeabi_dmul>
 801995e:	460f      	mov	r7, r1
 8019960:	4606      	mov	r6, r0
 8019962:	f7ef fad1 	bl	8008f08 <__aeabi_d2iz>
 8019966:	901d      	str	r0, [sp, #116]	; 0x74
 8019968:	f7ee ffb4 	bl	80088d4 <__aeabi_i2d>
 801996c:	4602      	mov	r2, r0
 801996e:	460b      	mov	r3, r1
 8019970:	4630      	mov	r0, r6
 8019972:	4639      	mov	r1, r7
 8019974:	f7ee fe60 	bl	8008638 <__aeabi_dsub>
 8019978:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801997a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801997c:	5c9b      	ldrb	r3, [r3, r2]
 801997e:	f805 3b01 	strb.w	r3, [r5], #1
 8019982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019984:	9316      	str	r3, [sp, #88]	; 0x58
 8019986:	1c5a      	adds	r2, r3, #1
 8019988:	4606      	mov	r6, r0
 801998a:	460f      	mov	r7, r1
 801998c:	d007      	beq.n	801999e <_svfprintf_r+0x4f6>
 801998e:	3b01      	subs	r3, #1
 8019990:	9309      	str	r3, [sp, #36]	; 0x24
 8019992:	2200      	movs	r2, #0
 8019994:	2300      	movs	r3, #0
 8019996:	f7ef fa6f 	bl	8008e78 <__aeabi_dcmpeq>
 801999a:	2800      	cmp	r0, #0
 801999c:	d0d9      	beq.n	8019952 <_svfprintf_r+0x4aa>
 801999e:	4b98      	ldr	r3, [pc, #608]	; (8019c00 <_svfprintf_r+0x758>)
 80199a0:	2200      	movs	r2, #0
 80199a2:	4630      	mov	r0, r6
 80199a4:	4639      	mov	r1, r7
 80199a6:	f7ef fa8f 	bl	8008ec8 <__aeabi_dcmpgt>
 80199aa:	b960      	cbnz	r0, 80199c6 <_svfprintf_r+0x51e>
 80199ac:	4b94      	ldr	r3, [pc, #592]	; (8019c00 <_svfprintf_r+0x758>)
 80199ae:	2200      	movs	r2, #0
 80199b0:	4630      	mov	r0, r6
 80199b2:	4639      	mov	r1, r7
 80199b4:	f7ef fa60 	bl	8008e78 <__aeabi_dcmpeq>
 80199b8:	2800      	cmp	r0, #0
 80199ba:	f000 8181 	beq.w	8019cc0 <_svfprintf_r+0x818>
 80199be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80199c0:	07db      	lsls	r3, r3, #31
 80199c2:	f140 817d 	bpl.w	8019cc0 <_svfprintf_r+0x818>
 80199c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80199c8:	9524      	str	r5, [sp, #144]	; 0x90
 80199ca:	7bd9      	ldrb	r1, [r3, #15]
 80199cc:	2030      	movs	r0, #48	; 0x30
 80199ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80199d0:	1e53      	subs	r3, r2, #1
 80199d2:	9324      	str	r3, [sp, #144]	; 0x90
 80199d4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80199d8:	428b      	cmp	r3, r1
 80199da:	f000 8160 	beq.w	8019c9e <_svfprintf_r+0x7f6>
 80199de:	2b39      	cmp	r3, #57	; 0x39
 80199e0:	bf0b      	itete	eq
 80199e2:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 80199e4:	3301      	addne	r3, #1
 80199e6:	7a9b      	ldrbeq	r3, [r3, #10]
 80199e8:	b2db      	uxtbne	r3, r3
 80199ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 80199ee:	eba5 030b 	sub.w	r3, r5, fp
 80199f2:	9309      	str	r3, [sp, #36]	; 0x24
 80199f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80199f6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80199f8:	2b47      	cmp	r3, #71	; 0x47
 80199fa:	f040 81b5 	bne.w	8019d68 <_svfprintf_r+0x8c0>
 80199fe:	1cef      	adds	r7, r5, #3
 8019a00:	db03      	blt.n	8019a0a <_svfprintf_r+0x562>
 8019a02:	9b07      	ldr	r3, [sp, #28]
 8019a04:	42ab      	cmp	r3, r5
 8019a06:	f280 81d5 	bge.w	8019db4 <_svfprintf_r+0x90c>
 8019a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a0c:	3b02      	subs	r3, #2
 8019a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019a12:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8019a16:	f021 0120 	bic.w	r1, r1, #32
 8019a1a:	2941      	cmp	r1, #65	; 0x41
 8019a1c:	bf08      	it	eq
 8019a1e:	320f      	addeq	r2, #15
 8019a20:	f105 33ff 	add.w	r3, r5, #4294967295
 8019a24:	bf06      	itte	eq
 8019a26:	b2d2      	uxtbeq	r2, r2
 8019a28:	2101      	moveq	r1, #1
 8019a2a:	2100      	movne	r1, #0
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	9320      	str	r3, [sp, #128]	; 0x80
 8019a30:	bfb8      	it	lt
 8019a32:	f1c5 0301 	rsblt	r3, r5, #1
 8019a36:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8019a3a:	bfb4      	ite	lt
 8019a3c:	222d      	movlt	r2, #45	; 0x2d
 8019a3e:	222b      	movge	r2, #43	; 0x2b
 8019a40:	2b09      	cmp	r3, #9
 8019a42:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8019a46:	f340 81a8 	ble.w	8019d9a <_svfprintf_r+0x8f2>
 8019a4a:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8019a4e:	260a      	movs	r6, #10
 8019a50:	4602      	mov	r2, r0
 8019a52:	fb93 f5f6 	sdiv	r5, r3, r6
 8019a56:	fb06 3115 	mls	r1, r6, r5, r3
 8019a5a:	3130      	adds	r1, #48	; 0x30
 8019a5c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019a60:	4619      	mov	r1, r3
 8019a62:	2963      	cmp	r1, #99	; 0x63
 8019a64:	f100 30ff 	add.w	r0, r0, #4294967295
 8019a68:	462b      	mov	r3, r5
 8019a6a:	dcf1      	bgt.n	8019a50 <_svfprintf_r+0x5a8>
 8019a6c:	3330      	adds	r3, #48	; 0x30
 8019a6e:	1e91      	subs	r1, r2, #2
 8019a70:	f800 3c01 	strb.w	r3, [r0, #-1]
 8019a74:	f10d 0589 	add.w	r5, sp, #137	; 0x89
 8019a78:	460b      	mov	r3, r1
 8019a7a:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8019a7e:	4283      	cmp	r3, r0
 8019a80:	f0c0 8186 	bcc.w	8019d90 <_svfprintf_r+0x8e8>
 8019a84:	f10d 0399 	add.w	r3, sp, #153	; 0x99
 8019a88:	1a9b      	subs	r3, r3, r2
 8019a8a:	4281      	cmp	r1, r0
 8019a8c:	bf88      	it	hi
 8019a8e:	2300      	movhi	r3, #0
 8019a90:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8019a94:	441a      	add	r2, r3
 8019a96:	ab22      	add	r3, sp, #136	; 0x88
 8019a98:	1ad3      	subs	r3, r2, r3
 8019a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a9c:	9319      	str	r3, [sp, #100]	; 0x64
 8019a9e:	2a01      	cmp	r2, #1
 8019aa0:	4413      	add	r3, r2
 8019aa2:	9307      	str	r3, [sp, #28]
 8019aa4:	dc02      	bgt.n	8019aac <_svfprintf_r+0x604>
 8019aa6:	f018 0f01 	tst.w	r8, #1
 8019aaa:	d003      	beq.n	8019ab4 <_svfprintf_r+0x60c>
 8019aac:	9b07      	ldr	r3, [sp, #28]
 8019aae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019ab0:	4413      	add	r3, r2
 8019ab2:	9307      	str	r3, [sp, #28]
 8019ab4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8019ab8:	2600      	movs	r6, #0
 8019aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019abe:	9314      	str	r3, [sp, #80]	; 0x50
 8019ac0:	960c      	str	r6, [sp, #48]	; 0x30
 8019ac2:	4635      	mov	r5, r6
 8019ac4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019ac6:	b113      	cbz	r3, 8019ace <_svfprintf_r+0x626>
 8019ac8:	232d      	movs	r3, #45	; 0x2d
 8019aca:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019ace:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019ad2:	2700      	movs	r7, #0
 8019ad4:	9b07      	ldr	r3, [sp, #28]
 8019ad6:	42bb      	cmp	r3, r7
 8019ad8:	bfb8      	it	lt
 8019ada:	463b      	movlt	r3, r7
 8019adc:	9314      	str	r3, [sp, #80]	; 0x50
 8019ade:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8019ae2:	b113      	cbz	r3, 8019aea <_svfprintf_r+0x642>
 8019ae4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ae6:	3301      	adds	r3, #1
 8019ae8:	9314      	str	r3, [sp, #80]	; 0x50
 8019aea:	f018 0302 	ands.w	r3, r8, #2
 8019aee:	931b      	str	r3, [sp, #108]	; 0x6c
 8019af0:	bf1e      	ittt	ne
 8019af2:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 8019af4:	3302      	addne	r3, #2
 8019af6:	9314      	strne	r3, [sp, #80]	; 0x50
 8019af8:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8019afc:	931c      	str	r3, [sp, #112]	; 0x70
 8019afe:	d122      	bne.n	8019b46 <_svfprintf_r+0x69e>
 8019b00:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8019b04:	1a9b      	subs	r3, r3, r2
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	9316      	str	r3, [sp, #88]	; 0x58
 8019b0a:	dd1c      	ble.n	8019b46 <_svfprintf_r+0x69e>
 8019b0c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019b0e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8019b12:	2810      	cmp	r0, #16
 8019b14:	483b      	ldr	r0, [pc, #236]	; (8019c04 <_svfprintf_r+0x75c>)
 8019b16:	6020      	str	r0, [r4, #0]
 8019b18:	f102 0201 	add.w	r2, r2, #1
 8019b1c:	f104 0108 	add.w	r1, r4, #8
 8019b20:	f300 82e7 	bgt.w	801a0f2 <_svfprintf_r+0xc4a>
 8019b24:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019b26:	6060      	str	r0, [r4, #4]
 8019b28:	4403      	add	r3, r0
 8019b2a:	2a07      	cmp	r2, #7
 8019b2c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019b30:	f340 82f4 	ble.w	801a11c <_svfprintf_r+0xc74>
 8019b34:	aa26      	add	r2, sp, #152	; 0x98
 8019b36:	4651      	mov	r1, sl
 8019b38:	4648      	mov	r0, r9
 8019b3a:	f004 fa4d 	bl	801dfd8 <__ssprint_r>
 8019b3e:	2800      	cmp	r0, #0
 8019b40:	f040 861e 	bne.w	801a780 <_svfprintf_r+0x12d8>
 8019b44:	ac29      	add	r4, sp, #164	; 0xa4
 8019b46:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8019b4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019b4c:	b16a      	cbz	r2, 8019b6a <_svfprintf_r+0x6c2>
 8019b4e:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8019b52:	6022      	str	r2, [r4, #0]
 8019b54:	2201      	movs	r2, #1
 8019b56:	4413      	add	r3, r2
 8019b58:	9328      	str	r3, [sp, #160]	; 0xa0
 8019b5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019b5c:	6062      	str	r2, [r4, #4]
 8019b5e:	4413      	add	r3, r2
 8019b60:	2b07      	cmp	r3, #7
 8019b62:	9327      	str	r3, [sp, #156]	; 0x9c
 8019b64:	f300 82dc 	bgt.w	801a120 <_svfprintf_r+0xc78>
 8019b68:	3408      	adds	r4, #8
 8019b6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019b6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019b6e:	b162      	cbz	r2, 8019b8a <_svfprintf_r+0x6e2>
 8019b70:	aa1f      	add	r2, sp, #124	; 0x7c
 8019b72:	6022      	str	r2, [r4, #0]
 8019b74:	2202      	movs	r2, #2
 8019b76:	4413      	add	r3, r2
 8019b78:	9328      	str	r3, [sp, #160]	; 0xa0
 8019b7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019b7c:	6062      	str	r2, [r4, #4]
 8019b7e:	3301      	adds	r3, #1
 8019b80:	2b07      	cmp	r3, #7
 8019b82:	9327      	str	r3, [sp, #156]	; 0x9c
 8019b84:	f300 82d6 	bgt.w	801a134 <_svfprintf_r+0xc8c>
 8019b88:	3408      	adds	r4, #8
 8019b8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019b8c:	2b80      	cmp	r3, #128	; 0x80
 8019b8e:	d122      	bne.n	8019bd6 <_svfprintf_r+0x72e>
 8019b90:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8019b94:	1a9b      	subs	r3, r3, r2
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	9316      	str	r3, [sp, #88]	; 0x58
 8019b9a:	dd1c      	ble.n	8019bd6 <_svfprintf_r+0x72e>
 8019b9c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019b9e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8019ba2:	2810      	cmp	r0, #16
 8019ba4:	4818      	ldr	r0, [pc, #96]	; (8019c08 <_svfprintf_r+0x760>)
 8019ba6:	6020      	str	r0, [r4, #0]
 8019ba8:	f102 0201 	add.w	r2, r2, #1
 8019bac:	f104 0108 	add.w	r1, r4, #8
 8019bb0:	f300 82ca 	bgt.w	801a148 <_svfprintf_r+0xca0>
 8019bb4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019bb6:	6060      	str	r0, [r4, #4]
 8019bb8:	4403      	add	r3, r0
 8019bba:	2a07      	cmp	r2, #7
 8019bbc:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019bc0:	f340 82d7 	ble.w	801a172 <_svfprintf_r+0xcca>
 8019bc4:	aa26      	add	r2, sp, #152	; 0x98
 8019bc6:	4651      	mov	r1, sl
 8019bc8:	4648      	mov	r0, r9
 8019bca:	f004 fa05 	bl	801dfd8 <__ssprint_r>
 8019bce:	2800      	cmp	r0, #0
 8019bd0:	f040 85d6 	bne.w	801a780 <_svfprintf_r+0x12d8>
 8019bd4:	ac29      	add	r4, sp, #164	; 0xa4
 8019bd6:	9b07      	ldr	r3, [sp, #28]
 8019bd8:	1aff      	subs	r7, r7, r3
 8019bda:	2f00      	cmp	r7, #0
 8019bdc:	dd28      	ble.n	8019c30 <_svfprintf_r+0x788>
 8019bde:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8019be2:	4809      	ldr	r0, [pc, #36]	; (8019c08 <_svfprintf_r+0x760>)
 8019be4:	6020      	str	r0, [r4, #0]
 8019be6:	2f10      	cmp	r7, #16
 8019be8:	f103 0301 	add.w	r3, r3, #1
 8019bec:	f104 0108 	add.w	r1, r4, #8
 8019bf0:	e00c      	b.n	8019c0c <_svfprintf_r+0x764>
 8019bf2:	bf00      	nop
 8019bf4:	0802063e 	.word	0x0802063e
 8019bf8:	0802062d 	.word	0x0802062d
 8019bfc:	40300000 	.word	0x40300000
 8019c00:	3fe00000 	.word	0x3fe00000
 8019c04:	08020651 	.word	0x08020651
 8019c08:	08020661 	.word	0x08020661
 8019c0c:	f300 82b3 	bgt.w	801a176 <_svfprintf_r+0xcce>
 8019c10:	6067      	str	r7, [r4, #4]
 8019c12:	2b07      	cmp	r3, #7
 8019c14:	4417      	add	r7, r2
 8019c16:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8019c1a:	f340 82bf 	ble.w	801a19c <_svfprintf_r+0xcf4>
 8019c1e:	aa26      	add	r2, sp, #152	; 0x98
 8019c20:	4651      	mov	r1, sl
 8019c22:	4648      	mov	r0, r9
 8019c24:	f004 f9d8 	bl	801dfd8 <__ssprint_r>
 8019c28:	2800      	cmp	r0, #0
 8019c2a:	f040 85a9 	bne.w	801a780 <_svfprintf_r+0x12d8>
 8019c2e:	ac29      	add	r4, sp, #164	; 0xa4
 8019c30:	f418 7f80 	tst.w	r8, #256	; 0x100
 8019c34:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8019c36:	f040 82b7 	bne.w	801a1a8 <_svfprintf_r+0xd00>
 8019c3a:	9b07      	ldr	r3, [sp, #28]
 8019c3c:	f8c4 b000 	str.w	fp, [r4]
 8019c40:	441f      	add	r7, r3
 8019c42:	6063      	str	r3, [r4, #4]
 8019c44:	9728      	str	r7, [sp, #160]	; 0xa0
 8019c46:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019c48:	3301      	adds	r3, #1
 8019c4a:	2b07      	cmp	r3, #7
 8019c4c:	9327      	str	r3, [sp, #156]	; 0x9c
 8019c4e:	f300 82f0 	bgt.w	801a232 <_svfprintf_r+0xd8a>
 8019c52:	3408      	adds	r4, #8
 8019c54:	f018 0f04 	tst.w	r8, #4
 8019c58:	f040 8574 	bne.w	801a744 <_svfprintf_r+0x129c>
 8019c5c:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 8019c60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c62:	428a      	cmp	r2, r1
 8019c64:	bfac      	ite	ge
 8019c66:	189b      	addge	r3, r3, r2
 8019c68:	185b      	addlt	r3, r3, r1
 8019c6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8019c6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019c6e:	b13b      	cbz	r3, 8019c80 <_svfprintf_r+0x7d8>
 8019c70:	aa26      	add	r2, sp, #152	; 0x98
 8019c72:	4651      	mov	r1, sl
 8019c74:	4648      	mov	r0, r9
 8019c76:	f004 f9af 	bl	801dfd8 <__ssprint_r>
 8019c7a:	2800      	cmp	r0, #0
 8019c7c:	f040 8580 	bne.w	801a780 <_svfprintf_r+0x12d8>
 8019c80:	2300      	movs	r3, #0
 8019c82:	9327      	str	r3, [sp, #156]	; 0x9c
 8019c84:	9b08      	ldr	r3, [sp, #32]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	f040 8596 	bne.w	801a7b8 <_svfprintf_r+0x1310>
 8019c8c:	ac29      	add	r4, sp, #164	; 0xa4
 8019c8e:	e0e6      	b.n	8019e5e <_svfprintf_r+0x9b6>
 8019c90:	9008      	str	r0, [sp, #32]
 8019c92:	e630      	b.n	80198f6 <_svfprintf_r+0x44e>
 8019c94:	9008      	str	r0, [sp, #32]
 8019c96:	2306      	movs	r3, #6
 8019c98:	e61e      	b.n	80198d8 <_svfprintf_r+0x430>
 8019c9a:	9008      	str	r0, [sp, #32]
 8019c9c:	e62b      	b.n	80198f6 <_svfprintf_r+0x44e>
 8019c9e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8019ca2:	e694      	b.n	80199ce <_svfprintf_r+0x526>
 8019ca4:	f803 0b01 	strb.w	r0, [r3], #1
 8019ca8:	1aca      	subs	r2, r1, r3
 8019caa:	2a00      	cmp	r2, #0
 8019cac:	dafa      	bge.n	8019ca4 <_svfprintf_r+0x7fc>
 8019cae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019cb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019cb2:	3201      	adds	r2, #1
 8019cb4:	f103 0301 	add.w	r3, r3, #1
 8019cb8:	bfb8      	it	lt
 8019cba:	2300      	movlt	r3, #0
 8019cbc:	441d      	add	r5, r3
 8019cbe:	e696      	b.n	80199ee <_svfprintf_r+0x546>
 8019cc0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019cc2:	462b      	mov	r3, r5
 8019cc4:	18a9      	adds	r1, r5, r2
 8019cc6:	2030      	movs	r0, #48	; 0x30
 8019cc8:	e7ee      	b.n	8019ca8 <_svfprintf_r+0x800>
 8019cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ccc:	2b46      	cmp	r3, #70	; 0x46
 8019cce:	d005      	beq.n	8019cdc <_svfprintf_r+0x834>
 8019cd0:	2b45      	cmp	r3, #69	; 0x45
 8019cd2:	d11d      	bne.n	8019d10 <_svfprintf_r+0x868>
 8019cd4:	9b07      	ldr	r3, [sp, #28]
 8019cd6:	1c5e      	adds	r6, r3, #1
 8019cd8:	2302      	movs	r3, #2
 8019cda:	e001      	b.n	8019ce0 <_svfprintf_r+0x838>
 8019cdc:	9e07      	ldr	r6, [sp, #28]
 8019cde:	2303      	movs	r3, #3
 8019ce0:	aa24      	add	r2, sp, #144	; 0x90
 8019ce2:	9204      	str	r2, [sp, #16]
 8019ce4:	aa21      	add	r2, sp, #132	; 0x84
 8019ce6:	9203      	str	r2, [sp, #12]
 8019ce8:	aa20      	add	r2, sp, #128	; 0x80
 8019cea:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8019cee:	9300      	str	r3, [sp, #0]
 8019cf0:	463a      	mov	r2, r7
 8019cf2:	462b      	mov	r3, r5
 8019cf4:	4648      	mov	r0, r9
 8019cf6:	f003 f847 	bl	801cd88 <_dtoa_r>
 8019cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019cfc:	2b47      	cmp	r3, #71	; 0x47
 8019cfe:	4683      	mov	fp, r0
 8019d00:	d108      	bne.n	8019d14 <_svfprintf_r+0x86c>
 8019d02:	f018 0f01 	tst.w	r8, #1
 8019d06:	d105      	bne.n	8019d14 <_svfprintf_r+0x86c>
 8019d08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019d0a:	eba3 030b 	sub.w	r3, r3, fp
 8019d0e:	e670      	b.n	80199f2 <_svfprintf_r+0x54a>
 8019d10:	9e07      	ldr	r6, [sp, #28]
 8019d12:	e7e1      	b.n	8019cd8 <_svfprintf_r+0x830>
 8019d14:	eb0b 0306 	add.w	r3, fp, r6
 8019d18:	9309      	str	r3, [sp, #36]	; 0x24
 8019d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d1c:	2b46      	cmp	r3, #70	; 0x46
 8019d1e:	d111      	bne.n	8019d44 <_svfprintf_r+0x89c>
 8019d20:	f89b 3000 	ldrb.w	r3, [fp]
 8019d24:	2b30      	cmp	r3, #48	; 0x30
 8019d26:	d109      	bne.n	8019d3c <_svfprintf_r+0x894>
 8019d28:	2200      	movs	r2, #0
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	4638      	mov	r0, r7
 8019d2e:	4629      	mov	r1, r5
 8019d30:	f7ef f8a2 	bl	8008e78 <__aeabi_dcmpeq>
 8019d34:	b910      	cbnz	r0, 8019d3c <_svfprintf_r+0x894>
 8019d36:	f1c6 0601 	rsb	r6, r6, #1
 8019d3a:	9620      	str	r6, [sp, #128]	; 0x80
 8019d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019d40:	441a      	add	r2, r3
 8019d42:	9209      	str	r2, [sp, #36]	; 0x24
 8019d44:	2200      	movs	r2, #0
 8019d46:	2300      	movs	r3, #0
 8019d48:	4638      	mov	r0, r7
 8019d4a:	4629      	mov	r1, r5
 8019d4c:	f7ef f894 	bl	8008e78 <__aeabi_dcmpeq>
 8019d50:	b108      	cbz	r0, 8019d56 <_svfprintf_r+0x8ae>
 8019d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d54:	9324      	str	r3, [sp, #144]	; 0x90
 8019d56:	2230      	movs	r2, #48	; 0x30
 8019d58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019d5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d5c:	4299      	cmp	r1, r3
 8019d5e:	d9d3      	bls.n	8019d08 <_svfprintf_r+0x860>
 8019d60:	1c59      	adds	r1, r3, #1
 8019d62:	9124      	str	r1, [sp, #144]	; 0x90
 8019d64:	701a      	strb	r2, [r3, #0]
 8019d66:	e7f7      	b.n	8019d58 <_svfprintf_r+0x8b0>
 8019d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d6a:	2b46      	cmp	r3, #70	; 0x46
 8019d6c:	f47f ae50 	bne.w	8019a10 <_svfprintf_r+0x568>
 8019d70:	9a07      	ldr	r2, [sp, #28]
 8019d72:	f008 0301 	and.w	r3, r8, #1
 8019d76:	2d00      	cmp	r5, #0
 8019d78:	ea43 0302 	orr.w	r3, r3, r2
 8019d7c:	dd29      	ble.n	8019dd2 <_svfprintf_r+0x92a>
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d034      	beq.n	8019dec <_svfprintf_r+0x944>
 8019d82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d84:	18eb      	adds	r3, r5, r3
 8019d86:	441a      	add	r2, r3
 8019d88:	9207      	str	r2, [sp, #28]
 8019d8a:	2366      	movs	r3, #102	; 0x66
 8019d8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8019d8e:	e033      	b.n	8019df8 <_svfprintf_r+0x950>
 8019d90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019d94:	f805 6f01 	strb.w	r6, [r5, #1]!
 8019d98:	e671      	b.n	8019a7e <_svfprintf_r+0x5d6>
 8019d9a:	b941      	cbnz	r1, 8019dae <_svfprintf_r+0x906>
 8019d9c:	2230      	movs	r2, #48	; 0x30
 8019d9e:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8019da2:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8019da6:	3330      	adds	r3, #48	; 0x30
 8019da8:	f802 3b01 	strb.w	r3, [r2], #1
 8019dac:	e673      	b.n	8019a96 <_svfprintf_r+0x5ee>
 8019dae:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8019db2:	e7f8      	b.n	8019da6 <_svfprintf_r+0x8fe>
 8019db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019db6:	42ab      	cmp	r3, r5
 8019db8:	dd10      	ble.n	8019ddc <_svfprintf_r+0x934>
 8019dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019dbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019dbe:	2d00      	cmp	r5, #0
 8019dc0:	4413      	add	r3, r2
 8019dc2:	9307      	str	r3, [sp, #28]
 8019dc4:	dc10      	bgt.n	8019de8 <_svfprintf_r+0x940>
 8019dc6:	9a07      	ldr	r2, [sp, #28]
 8019dc8:	f1c5 0301 	rsb	r3, r5, #1
 8019dcc:	441a      	add	r2, r3
 8019dce:	9207      	str	r2, [sp, #28]
 8019dd0:	e00a      	b.n	8019de8 <_svfprintf_r+0x940>
 8019dd2:	b16b      	cbz	r3, 8019df0 <_svfprintf_r+0x948>
 8019dd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019dd6:	9a07      	ldr	r2, [sp, #28]
 8019dd8:	3301      	adds	r3, #1
 8019dda:	e7d4      	b.n	8019d86 <_svfprintf_r+0x8de>
 8019ddc:	f018 0f01 	tst.w	r8, #1
 8019de0:	d01f      	beq.n	8019e22 <_svfprintf_r+0x97a>
 8019de2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019de4:	18eb      	adds	r3, r5, r3
 8019de6:	9307      	str	r3, [sp, #28]
 8019de8:	2367      	movs	r3, #103	; 0x67
 8019dea:	e7cf      	b.n	8019d8c <_svfprintf_r+0x8e4>
 8019dec:	9507      	str	r5, [sp, #28]
 8019dee:	e7cc      	b.n	8019d8a <_svfprintf_r+0x8e2>
 8019df0:	2366      	movs	r3, #102	; 0x66
 8019df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8019df4:	2301      	movs	r3, #1
 8019df6:	9307      	str	r3, [sp, #28]
 8019df8:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8019dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8019dfe:	d021      	beq.n	8019e44 <_svfprintf_r+0x99c>
 8019e00:	2600      	movs	r6, #0
 8019e02:	2d00      	cmp	r5, #0
 8019e04:	960c      	str	r6, [sp, #48]	; 0x30
 8019e06:	f77f ae5d 	ble.w	8019ac4 <_svfprintf_r+0x61c>
 8019e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e0c:	781b      	ldrb	r3, [r3, #0]
 8019e0e:	2bff      	cmp	r3, #255	; 0xff
 8019e10:	d109      	bne.n	8019e26 <_svfprintf_r+0x97e>
 8019e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e14:	9a07      	ldr	r2, [sp, #28]
 8019e16:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019e18:	4433      	add	r3, r6
 8019e1a:	fb01 2303 	mla	r3, r1, r3, r2
 8019e1e:	9307      	str	r3, [sp, #28]
 8019e20:	e650      	b.n	8019ac4 <_svfprintf_r+0x61c>
 8019e22:	9507      	str	r5, [sp, #28]
 8019e24:	e7e0      	b.n	8019de8 <_svfprintf_r+0x940>
 8019e26:	42ab      	cmp	r3, r5
 8019e28:	daf3      	bge.n	8019e12 <_svfprintf_r+0x96a>
 8019e2a:	1aed      	subs	r5, r5, r3
 8019e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e2e:	785b      	ldrb	r3, [r3, #1]
 8019e30:	b133      	cbz	r3, 8019e40 <_svfprintf_r+0x998>
 8019e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e34:	3301      	adds	r3, #1
 8019e36:	930c      	str	r3, [sp, #48]	; 0x30
 8019e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e3a:	3301      	adds	r3, #1
 8019e3c:	930d      	str	r3, [sp, #52]	; 0x34
 8019e3e:	e7e4      	b.n	8019e0a <_svfprintf_r+0x962>
 8019e40:	3601      	adds	r6, #1
 8019e42:	e7e2      	b.n	8019e0a <_svfprintf_r+0x962>
 8019e44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019e46:	e63d      	b.n	8019ac4 <_svfprintf_r+0x61c>
 8019e48:	1d2b      	adds	r3, r5, #4
 8019e4a:	f018 0f20 	tst.w	r8, #32
 8019e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8019e50:	d00a      	beq.n	8019e68 <_svfprintf_r+0x9c0>
 8019e52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e54:	682b      	ldr	r3, [r5, #0]
 8019e56:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019e58:	17d2      	asrs	r2, r2, #31
 8019e5a:	e9c3 1200 	strd	r1, r2, [r3]
 8019e5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019e60:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8019e64:	f7ff bb5d 	b.w	8019522 <_svfprintf_r+0x7a>
 8019e68:	f018 0f10 	tst.w	r8, #16
 8019e6c:	d003      	beq.n	8019e76 <_svfprintf_r+0x9ce>
 8019e6e:	682b      	ldr	r3, [r5, #0]
 8019e70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e72:	601a      	str	r2, [r3, #0]
 8019e74:	e7f3      	b.n	8019e5e <_svfprintf_r+0x9b6>
 8019e76:	f018 0f40 	tst.w	r8, #64	; 0x40
 8019e7a:	d003      	beq.n	8019e84 <_svfprintf_r+0x9dc>
 8019e7c:	682b      	ldr	r3, [r5, #0]
 8019e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e80:	801a      	strh	r2, [r3, #0]
 8019e82:	e7ec      	b.n	8019e5e <_svfprintf_r+0x9b6>
 8019e84:	f418 7f00 	tst.w	r8, #512	; 0x200
 8019e88:	d0f1      	beq.n	8019e6e <_svfprintf_r+0x9c6>
 8019e8a:	682b      	ldr	r3, [r5, #0]
 8019e8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e8e:	701a      	strb	r2, [r3, #0]
 8019e90:	e7e5      	b.n	8019e5e <_svfprintf_r+0x9b6>
 8019e92:	f048 0810 	orr.w	r8, r8, #16
 8019e96:	f018 0320 	ands.w	r3, r8, #32
 8019e9a:	d020      	beq.n	8019ede <_svfprintf_r+0xa36>
 8019e9c:	3507      	adds	r5, #7
 8019e9e:	f025 0307 	bic.w	r3, r5, #7
 8019ea2:	461a      	mov	r2, r3
 8019ea4:	685e      	ldr	r6, [r3, #4]
 8019ea6:	f852 5b08 	ldr.w	r5, [r2], #8
 8019eaa:	920a      	str	r2, [sp, #40]	; 0x28
 8019eac:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	2200      	movs	r2, #0
 8019eb4:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8019eb8:	9a07      	ldr	r2, [sp, #28]
 8019eba:	3201      	adds	r2, #1
 8019ebc:	f000 848d 	beq.w	801a7da <_svfprintf_r+0x1332>
 8019ec0:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8019ec4:	9208      	str	r2, [sp, #32]
 8019ec6:	ea55 0206 	orrs.w	r2, r5, r6
 8019eca:	f040 848c 	bne.w	801a7e6 <_svfprintf_r+0x133e>
 8019ece:	9a07      	ldr	r2, [sp, #28]
 8019ed0:	2a00      	cmp	r2, #0
 8019ed2:	f000 80f4 	beq.w	801a0be <_svfprintf_r+0xc16>
 8019ed6:	2b01      	cmp	r3, #1
 8019ed8:	f040 8488 	bne.w	801a7ec <_svfprintf_r+0x1344>
 8019edc:	e09e      	b.n	801a01c <_svfprintf_r+0xb74>
 8019ede:	462a      	mov	r2, r5
 8019ee0:	f018 0610 	ands.w	r6, r8, #16
 8019ee4:	f852 5b04 	ldr.w	r5, [r2], #4
 8019ee8:	920a      	str	r2, [sp, #40]	; 0x28
 8019eea:	d001      	beq.n	8019ef0 <_svfprintf_r+0xa48>
 8019eec:	461e      	mov	r6, r3
 8019eee:	e7dd      	b.n	8019eac <_svfprintf_r+0xa04>
 8019ef0:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8019ef4:	d001      	beq.n	8019efa <_svfprintf_r+0xa52>
 8019ef6:	b2ad      	uxth	r5, r5
 8019ef8:	e7d8      	b.n	8019eac <_svfprintf_r+0xa04>
 8019efa:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8019efe:	d0d5      	beq.n	8019eac <_svfprintf_r+0xa04>
 8019f00:	b2ed      	uxtb	r5, r5
 8019f02:	e7f3      	b.n	8019eec <_svfprintf_r+0xa44>
 8019f04:	462b      	mov	r3, r5
 8019f06:	2278      	movs	r2, #120	; 0x78
 8019f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8019f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8019f0e:	f647 0330 	movw	r3, #30768	; 0x7830
 8019f12:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8019f16:	4ba2      	ldr	r3, [pc, #648]	; (801a1a0 <_svfprintf_r+0xcf8>)
 8019f18:	931a      	str	r3, [sp, #104]	; 0x68
 8019f1a:	2600      	movs	r6, #0
 8019f1c:	f048 0802 	orr.w	r8, r8, #2
 8019f20:	2302      	movs	r3, #2
 8019f22:	920b      	str	r2, [sp, #44]	; 0x2c
 8019f24:	e7c5      	b.n	8019eb2 <_svfprintf_r+0xa0a>
 8019f26:	462b      	mov	r3, r5
 8019f28:	2500      	movs	r5, #0
 8019f2a:	f853 bb04 	ldr.w	fp, [r3], #4
 8019f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8019f30:	9b07      	ldr	r3, [sp, #28]
 8019f32:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8019f36:	1c58      	adds	r0, r3, #1
 8019f38:	d010      	beq.n	8019f5c <_svfprintf_r+0xab4>
 8019f3a:	461a      	mov	r2, r3
 8019f3c:	4629      	mov	r1, r5
 8019f3e:	4658      	mov	r0, fp
 8019f40:	f7ee fb1e 	bl	8008580 <memchr>
 8019f44:	9008      	str	r0, [sp, #32]
 8019f46:	2800      	cmp	r0, #0
 8019f48:	f000 80d0 	beq.w	801a0ec <_svfprintf_r+0xc44>
 8019f4c:	eba0 030b 	sub.w	r3, r0, fp
 8019f50:	e9cd 3507 	strd	r3, r5, [sp, #28]
 8019f54:	462f      	mov	r7, r5
 8019f56:	462e      	mov	r6, r5
 8019f58:	950c      	str	r5, [sp, #48]	; 0x30
 8019f5a:	e5bb      	b.n	8019ad4 <_svfprintf_r+0x62c>
 8019f5c:	4658      	mov	r0, fp
 8019f5e:	f7ee fb5f 	bl	8008620 <strlen>
 8019f62:	e9cd 0507 	strd	r0, r5, [sp, #28]
 8019f66:	e468      	b.n	801983a <_svfprintf_r+0x392>
 8019f68:	f048 0810 	orr.w	r8, r8, #16
 8019f6c:	f018 0320 	ands.w	r3, r8, #32
 8019f70:	d009      	beq.n	8019f86 <_svfprintf_r+0xade>
 8019f72:	3507      	adds	r5, #7
 8019f74:	f025 0307 	bic.w	r3, r5, #7
 8019f78:	461a      	mov	r2, r3
 8019f7a:	685e      	ldr	r6, [r3, #4]
 8019f7c:	f852 5b08 	ldr.w	r5, [r2], #8
 8019f80:	920a      	str	r2, [sp, #40]	; 0x28
 8019f82:	2301      	movs	r3, #1
 8019f84:	e795      	b.n	8019eb2 <_svfprintf_r+0xa0a>
 8019f86:	462a      	mov	r2, r5
 8019f88:	f018 0610 	ands.w	r6, r8, #16
 8019f8c:	f852 5b04 	ldr.w	r5, [r2], #4
 8019f90:	920a      	str	r2, [sp, #40]	; 0x28
 8019f92:	d001      	beq.n	8019f98 <_svfprintf_r+0xaf0>
 8019f94:	461e      	mov	r6, r3
 8019f96:	e7f4      	b.n	8019f82 <_svfprintf_r+0xada>
 8019f98:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8019f9c:	d001      	beq.n	8019fa2 <_svfprintf_r+0xafa>
 8019f9e:	b2ad      	uxth	r5, r5
 8019fa0:	e7ef      	b.n	8019f82 <_svfprintf_r+0xada>
 8019fa2:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 8019fa6:	d0ec      	beq.n	8019f82 <_svfprintf_r+0xada>
 8019fa8:	b2ed      	uxtb	r5, r5
 8019faa:	e7f3      	b.n	8019f94 <_svfprintf_r+0xaec>
 8019fac:	4b7d      	ldr	r3, [pc, #500]	; (801a1a4 <_svfprintf_r+0xcfc>)
 8019fae:	931a      	str	r3, [sp, #104]	; 0x68
 8019fb0:	f018 0320 	ands.w	r3, r8, #32
 8019fb4:	d01b      	beq.n	8019fee <_svfprintf_r+0xb46>
 8019fb6:	3507      	adds	r5, #7
 8019fb8:	f025 0307 	bic.w	r3, r5, #7
 8019fbc:	461a      	mov	r2, r3
 8019fbe:	685e      	ldr	r6, [r3, #4]
 8019fc0:	f852 5b08 	ldr.w	r5, [r2], #8
 8019fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8019fc6:	f018 0f01 	tst.w	r8, #1
 8019fca:	d00a      	beq.n	8019fe2 <_svfprintf_r+0xb3a>
 8019fcc:	ea55 0306 	orrs.w	r3, r5, r6
 8019fd0:	d007      	beq.n	8019fe2 <_svfprintf_r+0xb3a>
 8019fd2:	2330      	movs	r3, #48	; 0x30
 8019fd4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8019fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019fda:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8019fde:	f048 0802 	orr.w	r8, r8, #2
 8019fe2:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8019fe6:	2302      	movs	r3, #2
 8019fe8:	e763      	b.n	8019eb2 <_svfprintf_r+0xa0a>
 8019fea:	4b6d      	ldr	r3, [pc, #436]	; (801a1a0 <_svfprintf_r+0xcf8>)
 8019fec:	e7df      	b.n	8019fae <_svfprintf_r+0xb06>
 8019fee:	462a      	mov	r2, r5
 8019ff0:	f018 0610 	ands.w	r6, r8, #16
 8019ff4:	f852 5b04 	ldr.w	r5, [r2], #4
 8019ff8:	920a      	str	r2, [sp, #40]	; 0x28
 8019ffa:	d001      	beq.n	801a000 <_svfprintf_r+0xb58>
 8019ffc:	461e      	mov	r6, r3
 8019ffe:	e7e2      	b.n	8019fc6 <_svfprintf_r+0xb1e>
 801a000:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801a004:	d001      	beq.n	801a00a <_svfprintf_r+0xb62>
 801a006:	b2ad      	uxth	r5, r5
 801a008:	e7dd      	b.n	8019fc6 <_svfprintf_r+0xb1e>
 801a00a:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801a00e:	d0da      	beq.n	8019fc6 <_svfprintf_r+0xb1e>
 801a010:	b2ed      	uxtb	r5, r5
 801a012:	e7f3      	b.n	8019ffc <_svfprintf_r+0xb54>
 801a014:	2d0a      	cmp	r5, #10
 801a016:	f176 0300 	sbcs.w	r3, r6, #0
 801a01a:	d205      	bcs.n	801a028 <_svfprintf_r+0xb80>
 801a01c:	3530      	adds	r5, #48	; 0x30
 801a01e:	f88d 5147 	strb.w	r5, [sp, #327]	; 0x147
 801a022:	f20d 1b47 	addw	fp, sp, #327	; 0x147
 801a026:	e3fd      	b.n	801a824 <_svfprintf_r+0x137c>
 801a028:	2300      	movs	r3, #0
 801a02a:	9309      	str	r3, [sp, #36]	; 0x24
 801a02c:	9b08      	ldr	r3, [sp, #32]
 801a02e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a032:	af52      	add	r7, sp, #328	; 0x148
 801a034:	930c      	str	r3, [sp, #48]	; 0x30
 801a036:	220a      	movs	r2, #10
 801a038:	2300      	movs	r3, #0
 801a03a:	4628      	mov	r0, r5
 801a03c:	4631      	mov	r1, r6
 801a03e:	f7ef f8d9 	bl	80091f4 <__aeabi_uldivmod>
 801a042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a044:	9014      	str	r0, [sp, #80]	; 0x50
 801a046:	3301      	adds	r3, #1
 801a048:	9309      	str	r3, [sp, #36]	; 0x24
 801a04a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a04c:	3230      	adds	r2, #48	; 0x30
 801a04e:	4688      	mov	r8, r1
 801a050:	f107 3bff 	add.w	fp, r7, #4294967295
 801a054:	f807 2c01 	strb.w	r2, [r7, #-1]
 801a058:	b1d3      	cbz	r3, 801a090 <_svfprintf_r+0xbe8>
 801a05a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a05c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a05e:	781b      	ldrb	r3, [r3, #0]
 801a060:	429a      	cmp	r2, r3
 801a062:	d115      	bne.n	801a090 <_svfprintf_r+0xbe8>
 801a064:	2aff      	cmp	r2, #255	; 0xff
 801a066:	d013      	beq.n	801a090 <_svfprintf_r+0xbe8>
 801a068:	2d0a      	cmp	r5, #10
 801a06a:	f176 0300 	sbcs.w	r3, r6, #0
 801a06e:	d30f      	bcc.n	801a090 <_svfprintf_r+0xbe8>
 801a070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a072:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a074:	ebab 0b03 	sub.w	fp, fp, r3
 801a078:	461a      	mov	r2, r3
 801a07a:	4658      	mov	r0, fp
 801a07c:	f002 fd19 	bl	801cab2 <strncpy>
 801a080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a082:	785b      	ldrb	r3, [r3, #1]
 801a084:	b11b      	cbz	r3, 801a08e <_svfprintf_r+0xbe6>
 801a086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a088:	3301      	adds	r3, #1
 801a08a:	930d      	str	r3, [sp, #52]	; 0x34
 801a08c:	2300      	movs	r3, #0
 801a08e:	9309      	str	r3, [sp, #36]	; 0x24
 801a090:	2d0a      	cmp	r5, #10
 801a092:	f176 0600 	sbcs.w	r6, r6, #0
 801a096:	f0c0 83c5 	bcc.w	801a824 <_svfprintf_r+0x137c>
 801a09a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a09c:	4646      	mov	r6, r8
 801a09e:	465f      	mov	r7, fp
 801a0a0:	e7c9      	b.n	801a036 <_svfprintf_r+0xb8e>
 801a0a2:	f005 030f 	and.w	r3, r5, #15
 801a0a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a0a8:	092d      	lsrs	r5, r5, #4
 801a0aa:	5cd3      	ldrb	r3, [r2, r3]
 801a0ac:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801a0b0:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 801a0b4:	0936      	lsrs	r6, r6, #4
 801a0b6:	ea55 0306 	orrs.w	r3, r5, r6
 801a0ba:	d1f2      	bne.n	801a0a2 <_svfprintf_r+0xbfa>
 801a0bc:	e3b2      	b.n	801a824 <_svfprintf_r+0x137c>
 801a0be:	b933      	cbnz	r3, 801a0ce <_svfprintf_r+0xc26>
 801a0c0:	f018 0f01 	tst.w	r8, #1
 801a0c4:	d003      	beq.n	801a0ce <_svfprintf_r+0xc26>
 801a0c6:	2330      	movs	r3, #48	; 0x30
 801a0c8:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 801a0cc:	e7a9      	b.n	801a022 <_svfprintf_r+0xb7a>
 801a0ce:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801a0d2:	e3a7      	b.n	801a824 <_svfprintf_r+0x137c>
 801a0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	f000 8374 	beq.w	801a7c4 <_svfprintf_r+0x131c>
 801a0dc:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801a0e0:	2300      	movs	r3, #0
 801a0e2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a0e6:	950a      	str	r5, [sp, #40]	; 0x28
 801a0e8:	f7ff bb39 	b.w	801975e <_svfprintf_r+0x2b6>
 801a0ec:	9f08      	ldr	r7, [sp, #32]
 801a0ee:	f7ff bba5 	b.w	801983c <_svfprintf_r+0x394>
 801a0f2:	2010      	movs	r0, #16
 801a0f4:	4403      	add	r3, r0
 801a0f6:	2a07      	cmp	r2, #7
 801a0f8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801a0fc:	6060      	str	r0, [r4, #4]
 801a0fe:	dd08      	ble.n	801a112 <_svfprintf_r+0xc6a>
 801a100:	aa26      	add	r2, sp, #152	; 0x98
 801a102:	4651      	mov	r1, sl
 801a104:	4648      	mov	r0, r9
 801a106:	f003 ff67 	bl	801dfd8 <__ssprint_r>
 801a10a:	2800      	cmp	r0, #0
 801a10c:	f040 8338 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a110:	a929      	add	r1, sp, #164	; 0xa4
 801a112:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a114:	3b10      	subs	r3, #16
 801a116:	9316      	str	r3, [sp, #88]	; 0x58
 801a118:	460c      	mov	r4, r1
 801a11a:	e4f7      	b.n	8019b0c <_svfprintf_r+0x664>
 801a11c:	460c      	mov	r4, r1
 801a11e:	e512      	b.n	8019b46 <_svfprintf_r+0x69e>
 801a120:	aa26      	add	r2, sp, #152	; 0x98
 801a122:	4651      	mov	r1, sl
 801a124:	4648      	mov	r0, r9
 801a126:	f003 ff57 	bl	801dfd8 <__ssprint_r>
 801a12a:	2800      	cmp	r0, #0
 801a12c:	f040 8328 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a130:	ac29      	add	r4, sp, #164	; 0xa4
 801a132:	e51a      	b.n	8019b6a <_svfprintf_r+0x6c2>
 801a134:	aa26      	add	r2, sp, #152	; 0x98
 801a136:	4651      	mov	r1, sl
 801a138:	4648      	mov	r0, r9
 801a13a:	f003 ff4d 	bl	801dfd8 <__ssprint_r>
 801a13e:	2800      	cmp	r0, #0
 801a140:	f040 831e 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a144:	ac29      	add	r4, sp, #164	; 0xa4
 801a146:	e520      	b.n	8019b8a <_svfprintf_r+0x6e2>
 801a148:	2010      	movs	r0, #16
 801a14a:	4403      	add	r3, r0
 801a14c:	2a07      	cmp	r2, #7
 801a14e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801a152:	6060      	str	r0, [r4, #4]
 801a154:	dd08      	ble.n	801a168 <_svfprintf_r+0xcc0>
 801a156:	aa26      	add	r2, sp, #152	; 0x98
 801a158:	4651      	mov	r1, sl
 801a15a:	4648      	mov	r0, r9
 801a15c:	f003 ff3c 	bl	801dfd8 <__ssprint_r>
 801a160:	2800      	cmp	r0, #0
 801a162:	f040 830d 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a166:	a929      	add	r1, sp, #164	; 0xa4
 801a168:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a16a:	3b10      	subs	r3, #16
 801a16c:	9316      	str	r3, [sp, #88]	; 0x58
 801a16e:	460c      	mov	r4, r1
 801a170:	e514      	b.n	8019b9c <_svfprintf_r+0x6f4>
 801a172:	460c      	mov	r4, r1
 801a174:	e52f      	b.n	8019bd6 <_svfprintf_r+0x72e>
 801a176:	2010      	movs	r0, #16
 801a178:	4402      	add	r2, r0
 801a17a:	2b07      	cmp	r3, #7
 801a17c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a180:	6060      	str	r0, [r4, #4]
 801a182:	dd08      	ble.n	801a196 <_svfprintf_r+0xcee>
 801a184:	aa26      	add	r2, sp, #152	; 0x98
 801a186:	4651      	mov	r1, sl
 801a188:	4648      	mov	r0, r9
 801a18a:	f003 ff25 	bl	801dfd8 <__ssprint_r>
 801a18e:	2800      	cmp	r0, #0
 801a190:	f040 82f6 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a194:	a929      	add	r1, sp, #164	; 0xa4
 801a196:	3f10      	subs	r7, #16
 801a198:	460c      	mov	r4, r1
 801a19a:	e520      	b.n	8019bde <_svfprintf_r+0x736>
 801a19c:	460c      	mov	r4, r1
 801a19e:	e547      	b.n	8019c30 <_svfprintf_r+0x788>
 801a1a0:	0802062d 	.word	0x0802062d
 801a1a4:	0802063e 	.word	0x0802063e
 801a1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1aa:	2b65      	cmp	r3, #101	; 0x65
 801a1ac:	f340 8230 	ble.w	801a610 <_svfprintf_r+0x1168>
 801a1b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a1b4:	2200      	movs	r2, #0
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	f7ee fe5e 	bl	8008e78 <__aeabi_dcmpeq>
 801a1bc:	2800      	cmp	r0, #0
 801a1be:	d068      	beq.n	801a292 <_svfprintf_r+0xdea>
 801a1c0:	4b6d      	ldr	r3, [pc, #436]	; (801a378 <_svfprintf_r+0xed0>)
 801a1c2:	6023      	str	r3, [r4, #0]
 801a1c4:	2301      	movs	r3, #1
 801a1c6:	441f      	add	r7, r3
 801a1c8:	6063      	str	r3, [r4, #4]
 801a1ca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a1cc:	9728      	str	r7, [sp, #160]	; 0xa0
 801a1ce:	3301      	adds	r3, #1
 801a1d0:	2b07      	cmp	r3, #7
 801a1d2:	9327      	str	r3, [sp, #156]	; 0x9c
 801a1d4:	dc37      	bgt.n	801a246 <_svfprintf_r+0xd9e>
 801a1d6:	3408      	adds	r4, #8
 801a1d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a1da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a1dc:	4293      	cmp	r3, r2
 801a1de:	db03      	blt.n	801a1e8 <_svfprintf_r+0xd40>
 801a1e0:	f018 0f01 	tst.w	r8, #1
 801a1e4:	f43f ad36 	beq.w	8019c54 <_svfprintf_r+0x7ac>
 801a1e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a1ea:	6023      	str	r3, [r4, #0]
 801a1ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a1ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a1f0:	6063      	str	r3, [r4, #4]
 801a1f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a1f4:	4413      	add	r3, r2
 801a1f6:	9328      	str	r3, [sp, #160]	; 0xa0
 801a1f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a1fa:	3301      	adds	r3, #1
 801a1fc:	2b07      	cmp	r3, #7
 801a1fe:	9327      	str	r3, [sp, #156]	; 0x9c
 801a200:	dc2b      	bgt.n	801a25a <_svfprintf_r+0xdb2>
 801a202:	3408      	adds	r4, #8
 801a204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a206:	1e5d      	subs	r5, r3, #1
 801a208:	2d00      	cmp	r5, #0
 801a20a:	f77f ad23 	ble.w	8019c54 <_svfprintf_r+0x7ac>
 801a20e:	4e5b      	ldr	r6, [pc, #364]	; (801a37c <_svfprintf_r+0xed4>)
 801a210:	2710      	movs	r7, #16
 801a212:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a216:	2d10      	cmp	r5, #16
 801a218:	f103 0301 	add.w	r3, r3, #1
 801a21c:	f104 0108 	add.w	r1, r4, #8
 801a220:	6026      	str	r6, [r4, #0]
 801a222:	dc24      	bgt.n	801a26e <_svfprintf_r+0xdc6>
 801a224:	6065      	str	r5, [r4, #4]
 801a226:	4415      	add	r5, r2
 801a228:	9528      	str	r5, [sp, #160]	; 0xa0
 801a22a:	2b07      	cmp	r3, #7
 801a22c:	9327      	str	r3, [sp, #156]	; 0x9c
 801a22e:	f340 8286 	ble.w	801a73e <_svfprintf_r+0x1296>
 801a232:	aa26      	add	r2, sp, #152	; 0x98
 801a234:	4651      	mov	r1, sl
 801a236:	4648      	mov	r0, r9
 801a238:	f003 fece 	bl	801dfd8 <__ssprint_r>
 801a23c:	2800      	cmp	r0, #0
 801a23e:	f040 829f 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a242:	ac29      	add	r4, sp, #164	; 0xa4
 801a244:	e506      	b.n	8019c54 <_svfprintf_r+0x7ac>
 801a246:	aa26      	add	r2, sp, #152	; 0x98
 801a248:	4651      	mov	r1, sl
 801a24a:	4648      	mov	r0, r9
 801a24c:	f003 fec4 	bl	801dfd8 <__ssprint_r>
 801a250:	2800      	cmp	r0, #0
 801a252:	f040 8295 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a256:	ac29      	add	r4, sp, #164	; 0xa4
 801a258:	e7be      	b.n	801a1d8 <_svfprintf_r+0xd30>
 801a25a:	aa26      	add	r2, sp, #152	; 0x98
 801a25c:	4651      	mov	r1, sl
 801a25e:	4648      	mov	r0, r9
 801a260:	f003 feba 	bl	801dfd8 <__ssprint_r>
 801a264:	2800      	cmp	r0, #0
 801a266:	f040 828b 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a26a:	ac29      	add	r4, sp, #164	; 0xa4
 801a26c:	e7ca      	b.n	801a204 <_svfprintf_r+0xd5c>
 801a26e:	3210      	adds	r2, #16
 801a270:	2b07      	cmp	r3, #7
 801a272:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a276:	6067      	str	r7, [r4, #4]
 801a278:	dd08      	ble.n	801a28c <_svfprintf_r+0xde4>
 801a27a:	aa26      	add	r2, sp, #152	; 0x98
 801a27c:	4651      	mov	r1, sl
 801a27e:	4648      	mov	r0, r9
 801a280:	f003 feaa 	bl	801dfd8 <__ssprint_r>
 801a284:	2800      	cmp	r0, #0
 801a286:	f040 827b 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a28a:	a929      	add	r1, sp, #164	; 0xa4
 801a28c:	3d10      	subs	r5, #16
 801a28e:	460c      	mov	r4, r1
 801a290:	e7bf      	b.n	801a212 <_svfprintf_r+0xd6a>
 801a292:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a294:	2b00      	cmp	r3, #0
 801a296:	dc73      	bgt.n	801a380 <_svfprintf_r+0xed8>
 801a298:	4b37      	ldr	r3, [pc, #220]	; (801a378 <_svfprintf_r+0xed0>)
 801a29a:	6023      	str	r3, [r4, #0]
 801a29c:	2301      	movs	r3, #1
 801a29e:	441f      	add	r7, r3
 801a2a0:	6063      	str	r3, [r4, #4]
 801a2a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a2a4:	9728      	str	r7, [sp, #160]	; 0xa0
 801a2a6:	3301      	adds	r3, #1
 801a2a8:	2b07      	cmp	r3, #7
 801a2aa:	9327      	str	r3, [sp, #156]	; 0x9c
 801a2ac:	dc3d      	bgt.n	801a32a <_svfprintf_r+0xe82>
 801a2ae:	3408      	adds	r4, #8
 801a2b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a2b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a2b4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a2b6:	430b      	orrs	r3, r1
 801a2b8:	f008 0101 	and.w	r1, r8, #1
 801a2bc:	430b      	orrs	r3, r1
 801a2be:	f43f acc9 	beq.w	8019c54 <_svfprintf_r+0x7ac>
 801a2c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a2c4:	6023      	str	r3, [r4, #0]
 801a2c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a2c8:	6063      	str	r3, [r4, #4]
 801a2ca:	441a      	add	r2, r3
 801a2cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a2ce:	9228      	str	r2, [sp, #160]	; 0xa0
 801a2d0:	3301      	adds	r3, #1
 801a2d2:	2b07      	cmp	r3, #7
 801a2d4:	9327      	str	r3, [sp, #156]	; 0x9c
 801a2d6:	dc32      	bgt.n	801a33e <_svfprintf_r+0xe96>
 801a2d8:	3408      	adds	r4, #8
 801a2da:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a2dc:	2d00      	cmp	r5, #0
 801a2de:	da1b      	bge.n	801a318 <_svfprintf_r+0xe70>
 801a2e0:	4e26      	ldr	r6, [pc, #152]	; (801a37c <_svfprintf_r+0xed4>)
 801a2e2:	426d      	negs	r5, r5
 801a2e4:	4623      	mov	r3, r4
 801a2e6:	2710      	movs	r7, #16
 801a2e8:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 801a2ec:	2d10      	cmp	r5, #16
 801a2ee:	f102 0201 	add.w	r2, r2, #1
 801a2f2:	f104 0408 	add.w	r4, r4, #8
 801a2f6:	601e      	str	r6, [r3, #0]
 801a2f8:	dc2b      	bgt.n	801a352 <_svfprintf_r+0xeaa>
 801a2fa:	605d      	str	r5, [r3, #4]
 801a2fc:	2a07      	cmp	r2, #7
 801a2fe:	440d      	add	r5, r1
 801a300:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 801a304:	dd08      	ble.n	801a318 <_svfprintf_r+0xe70>
 801a306:	aa26      	add	r2, sp, #152	; 0x98
 801a308:	4651      	mov	r1, sl
 801a30a:	4648      	mov	r0, r9
 801a30c:	f003 fe64 	bl	801dfd8 <__ssprint_r>
 801a310:	2800      	cmp	r0, #0
 801a312:	f040 8235 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a316:	ac29      	add	r4, sp, #164	; 0xa4
 801a318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a31a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a31c:	6063      	str	r3, [r4, #4]
 801a31e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a320:	f8c4 b000 	str.w	fp, [r4]
 801a324:	4413      	add	r3, r2
 801a326:	9328      	str	r3, [sp, #160]	; 0xa0
 801a328:	e48d      	b.n	8019c46 <_svfprintf_r+0x79e>
 801a32a:	aa26      	add	r2, sp, #152	; 0x98
 801a32c:	4651      	mov	r1, sl
 801a32e:	4648      	mov	r0, r9
 801a330:	f003 fe52 	bl	801dfd8 <__ssprint_r>
 801a334:	2800      	cmp	r0, #0
 801a336:	f040 8223 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a33a:	ac29      	add	r4, sp, #164	; 0xa4
 801a33c:	e7b8      	b.n	801a2b0 <_svfprintf_r+0xe08>
 801a33e:	aa26      	add	r2, sp, #152	; 0x98
 801a340:	4651      	mov	r1, sl
 801a342:	4648      	mov	r0, r9
 801a344:	f003 fe48 	bl	801dfd8 <__ssprint_r>
 801a348:	2800      	cmp	r0, #0
 801a34a:	f040 8219 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a34e:	ac29      	add	r4, sp, #164	; 0xa4
 801a350:	e7c3      	b.n	801a2da <_svfprintf_r+0xe32>
 801a352:	3110      	adds	r1, #16
 801a354:	2a07      	cmp	r2, #7
 801a356:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801a35a:	605f      	str	r7, [r3, #4]
 801a35c:	dd08      	ble.n	801a370 <_svfprintf_r+0xec8>
 801a35e:	aa26      	add	r2, sp, #152	; 0x98
 801a360:	4651      	mov	r1, sl
 801a362:	4648      	mov	r0, r9
 801a364:	f003 fe38 	bl	801dfd8 <__ssprint_r>
 801a368:	2800      	cmp	r0, #0
 801a36a:	f040 8209 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a36e:	ac29      	add	r4, sp, #164	; 0xa4
 801a370:	3d10      	subs	r5, #16
 801a372:	4623      	mov	r3, r4
 801a374:	e7b8      	b.n	801a2e8 <_svfprintf_r+0xe40>
 801a376:	bf00      	nop
 801a378:	0802064f 	.word	0x0802064f
 801a37c:	08020661 	.word	0x08020661
 801a380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a382:	42ab      	cmp	r3, r5
 801a384:	bfa8      	it	ge
 801a386:	462b      	movge	r3, r5
 801a388:	2b00      	cmp	r3, #0
 801a38a:	9307      	str	r3, [sp, #28]
 801a38c:	dd09      	ble.n	801a3a2 <_svfprintf_r+0xefa>
 801a38e:	441f      	add	r7, r3
 801a390:	e9c4 b300 	strd	fp, r3, [r4]
 801a394:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a396:	9728      	str	r7, [sp, #160]	; 0xa0
 801a398:	3301      	adds	r3, #1
 801a39a:	2b07      	cmp	r3, #7
 801a39c:	9327      	str	r3, [sp, #156]	; 0x9c
 801a39e:	dc74      	bgt.n	801a48a <_svfprintf_r+0xfe2>
 801a3a0:	3408      	adds	r4, #8
 801a3a2:	9b07      	ldr	r3, [sp, #28]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	bfac      	ite	ge
 801a3a8:	1aef      	subge	r7, r5, r3
 801a3aa:	462f      	movlt	r7, r5
 801a3ac:	2f00      	cmp	r7, #0
 801a3ae:	dd18      	ble.n	801a3e2 <_svfprintf_r+0xf3a>
 801a3b0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a3b4:	4895      	ldr	r0, [pc, #596]	; (801a60c <_svfprintf_r+0x1164>)
 801a3b6:	6020      	str	r0, [r4, #0]
 801a3b8:	2f10      	cmp	r7, #16
 801a3ba:	f103 0301 	add.w	r3, r3, #1
 801a3be:	f104 0108 	add.w	r1, r4, #8
 801a3c2:	dc6c      	bgt.n	801a49e <_svfprintf_r+0xff6>
 801a3c4:	6067      	str	r7, [r4, #4]
 801a3c6:	2b07      	cmp	r3, #7
 801a3c8:	4417      	add	r7, r2
 801a3ca:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801a3ce:	dd79      	ble.n	801a4c4 <_svfprintf_r+0x101c>
 801a3d0:	aa26      	add	r2, sp, #152	; 0x98
 801a3d2:	4651      	mov	r1, sl
 801a3d4:	4648      	mov	r0, r9
 801a3d6:	f003 fdff 	bl	801dfd8 <__ssprint_r>
 801a3da:	2800      	cmp	r0, #0
 801a3dc:	f040 81d0 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a3e0:	ac29      	add	r4, sp, #164	; 0xa4
 801a3e2:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801a3e6:	445d      	add	r5, fp
 801a3e8:	d009      	beq.n	801a3fe <_svfprintf_r+0xf56>
 801a3ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d16b      	bne.n	801a4c8 <_svfprintf_r+0x1020>
 801a3f0:	2e00      	cmp	r6, #0
 801a3f2:	d16b      	bne.n	801a4cc <_svfprintf_r+0x1024>
 801a3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3f6:	445b      	add	r3, fp
 801a3f8:	429d      	cmp	r5, r3
 801a3fa:	bf28      	it	cs
 801a3fc:	461d      	movcs	r5, r3
 801a3fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a402:	4293      	cmp	r3, r2
 801a404:	db02      	blt.n	801a40c <_svfprintf_r+0xf64>
 801a406:	f018 0f01 	tst.w	r8, #1
 801a40a:	d00e      	beq.n	801a42a <_svfprintf_r+0xf82>
 801a40c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a40e:	6023      	str	r3, [r4, #0]
 801a410:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a412:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a414:	6063      	str	r3, [r4, #4]
 801a416:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a418:	4413      	add	r3, r2
 801a41a:	9328      	str	r3, [sp, #160]	; 0xa0
 801a41c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a41e:	3301      	adds	r3, #1
 801a420:	2b07      	cmp	r3, #7
 801a422:	9327      	str	r3, [sp, #156]	; 0x9c
 801a424:	f300 80cc 	bgt.w	801a5c0 <_svfprintf_r+0x1118>
 801a428:	3408      	adds	r4, #8
 801a42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a42c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801a42e:	1b9e      	subs	r6, r3, r6
 801a430:	445b      	add	r3, fp
 801a432:	1b5b      	subs	r3, r3, r5
 801a434:	429e      	cmp	r6, r3
 801a436:	bfa8      	it	ge
 801a438:	461e      	movge	r6, r3
 801a43a:	2e00      	cmp	r6, #0
 801a43c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a43e:	dd0a      	ble.n	801a456 <_svfprintf_r+0xfae>
 801a440:	4433      	add	r3, r6
 801a442:	9328      	str	r3, [sp, #160]	; 0xa0
 801a444:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a446:	3301      	adds	r3, #1
 801a448:	2b07      	cmp	r3, #7
 801a44a:	e9c4 5600 	strd	r5, r6, [r4]
 801a44e:	9327      	str	r3, [sp, #156]	; 0x9c
 801a450:	f300 80c0 	bgt.w	801a5d4 <_svfprintf_r+0x112c>
 801a454:	3408      	adds	r4, #8
 801a456:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a45a:	2e00      	cmp	r6, #0
 801a45c:	eba3 0505 	sub.w	r5, r3, r5
 801a460:	bfa8      	it	ge
 801a462:	1bad      	subge	r5, r5, r6
 801a464:	2d00      	cmp	r5, #0
 801a466:	f77f abf5 	ble.w	8019c54 <_svfprintf_r+0x7ac>
 801a46a:	4e68      	ldr	r6, [pc, #416]	; (801a60c <_svfprintf_r+0x1164>)
 801a46c:	2710      	movs	r7, #16
 801a46e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a472:	2d10      	cmp	r5, #16
 801a474:	f103 0301 	add.w	r3, r3, #1
 801a478:	f104 0108 	add.w	r1, r4, #8
 801a47c:	6026      	str	r6, [r4, #0]
 801a47e:	f300 80b3 	bgt.w	801a5e8 <_svfprintf_r+0x1140>
 801a482:	442a      	add	r2, r5
 801a484:	6065      	str	r5, [r4, #4]
 801a486:	9228      	str	r2, [sp, #160]	; 0xa0
 801a488:	e6cf      	b.n	801a22a <_svfprintf_r+0xd82>
 801a48a:	aa26      	add	r2, sp, #152	; 0x98
 801a48c:	4651      	mov	r1, sl
 801a48e:	4648      	mov	r0, r9
 801a490:	f003 fda2 	bl	801dfd8 <__ssprint_r>
 801a494:	2800      	cmp	r0, #0
 801a496:	f040 8173 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a49a:	ac29      	add	r4, sp, #164	; 0xa4
 801a49c:	e781      	b.n	801a3a2 <_svfprintf_r+0xefa>
 801a49e:	2010      	movs	r0, #16
 801a4a0:	4402      	add	r2, r0
 801a4a2:	2b07      	cmp	r3, #7
 801a4a4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a4a8:	6060      	str	r0, [r4, #4]
 801a4aa:	dd08      	ble.n	801a4be <_svfprintf_r+0x1016>
 801a4ac:	aa26      	add	r2, sp, #152	; 0x98
 801a4ae:	4651      	mov	r1, sl
 801a4b0:	4648      	mov	r0, r9
 801a4b2:	f003 fd91 	bl	801dfd8 <__ssprint_r>
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	f040 8162 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a4bc:	a929      	add	r1, sp, #164	; 0xa4
 801a4be:	3f10      	subs	r7, #16
 801a4c0:	460c      	mov	r4, r1
 801a4c2:	e775      	b.n	801a3b0 <_svfprintf_r+0xf08>
 801a4c4:	460c      	mov	r4, r1
 801a4c6:	e78c      	b.n	801a3e2 <_svfprintf_r+0xf3a>
 801a4c8:	2e00      	cmp	r6, #0
 801a4ca:	d049      	beq.n	801a560 <_svfprintf_r+0x10b8>
 801a4cc:	3e01      	subs	r6, #1
 801a4ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a4d0:	6023      	str	r3, [r4, #0]
 801a4d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a4d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a4d6:	6063      	str	r3, [r4, #4]
 801a4d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a4da:	4413      	add	r3, r2
 801a4dc:	9328      	str	r3, [sp, #160]	; 0xa0
 801a4de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a4e0:	3301      	adds	r3, #1
 801a4e2:	2b07      	cmp	r3, #7
 801a4e4:	9327      	str	r3, [sp, #156]	; 0x9c
 801a4e6:	dc42      	bgt.n	801a56e <_svfprintf_r+0x10c6>
 801a4e8:	3408      	adds	r4, #8
 801a4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4ec:	445b      	add	r3, fp
 801a4ee:	1b5a      	subs	r2, r3, r5
 801a4f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a4f2:	781b      	ldrb	r3, [r3, #0]
 801a4f4:	429a      	cmp	r2, r3
 801a4f6:	bfa8      	it	ge
 801a4f8:	461a      	movge	r2, r3
 801a4fa:	2a00      	cmp	r2, #0
 801a4fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a4fe:	9207      	str	r2, [sp, #28]
 801a500:	dd09      	ble.n	801a516 <_svfprintf_r+0x106e>
 801a502:	4413      	add	r3, r2
 801a504:	9328      	str	r3, [sp, #160]	; 0xa0
 801a506:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a508:	3301      	adds	r3, #1
 801a50a:	2b07      	cmp	r3, #7
 801a50c:	e9c4 5200 	strd	r5, r2, [r4]
 801a510:	9327      	str	r3, [sp, #156]	; 0x9c
 801a512:	dc36      	bgt.n	801a582 <_svfprintf_r+0x10da>
 801a514:	3408      	adds	r4, #8
 801a516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a518:	781f      	ldrb	r7, [r3, #0]
 801a51a:	9b07      	ldr	r3, [sp, #28]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	bfa8      	it	ge
 801a520:	1aff      	subge	r7, r7, r3
 801a522:	2f00      	cmp	r7, #0
 801a524:	dd18      	ble.n	801a558 <_svfprintf_r+0x10b0>
 801a526:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a52a:	4838      	ldr	r0, [pc, #224]	; (801a60c <_svfprintf_r+0x1164>)
 801a52c:	6020      	str	r0, [r4, #0]
 801a52e:	2f10      	cmp	r7, #16
 801a530:	f103 0301 	add.w	r3, r3, #1
 801a534:	f104 0108 	add.w	r1, r4, #8
 801a538:	dc2d      	bgt.n	801a596 <_svfprintf_r+0x10ee>
 801a53a:	443a      	add	r2, r7
 801a53c:	2b07      	cmp	r3, #7
 801a53e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a542:	6067      	str	r7, [r4, #4]
 801a544:	dd3a      	ble.n	801a5bc <_svfprintf_r+0x1114>
 801a546:	aa26      	add	r2, sp, #152	; 0x98
 801a548:	4651      	mov	r1, sl
 801a54a:	4648      	mov	r0, r9
 801a54c:	f003 fd44 	bl	801dfd8 <__ssprint_r>
 801a550:	2800      	cmp	r0, #0
 801a552:	f040 8115 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a556:	ac29      	add	r4, sp, #164	; 0xa4
 801a558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a55a:	781b      	ldrb	r3, [r3, #0]
 801a55c:	441d      	add	r5, r3
 801a55e:	e744      	b.n	801a3ea <_svfprintf_r+0xf42>
 801a560:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a562:	3b01      	subs	r3, #1
 801a564:	930d      	str	r3, [sp, #52]	; 0x34
 801a566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a568:	3b01      	subs	r3, #1
 801a56a:	930c      	str	r3, [sp, #48]	; 0x30
 801a56c:	e7af      	b.n	801a4ce <_svfprintf_r+0x1026>
 801a56e:	aa26      	add	r2, sp, #152	; 0x98
 801a570:	4651      	mov	r1, sl
 801a572:	4648      	mov	r0, r9
 801a574:	f003 fd30 	bl	801dfd8 <__ssprint_r>
 801a578:	2800      	cmp	r0, #0
 801a57a:	f040 8101 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a57e:	ac29      	add	r4, sp, #164	; 0xa4
 801a580:	e7b3      	b.n	801a4ea <_svfprintf_r+0x1042>
 801a582:	aa26      	add	r2, sp, #152	; 0x98
 801a584:	4651      	mov	r1, sl
 801a586:	4648      	mov	r0, r9
 801a588:	f003 fd26 	bl	801dfd8 <__ssprint_r>
 801a58c:	2800      	cmp	r0, #0
 801a58e:	f040 80f7 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a592:	ac29      	add	r4, sp, #164	; 0xa4
 801a594:	e7bf      	b.n	801a516 <_svfprintf_r+0x106e>
 801a596:	2010      	movs	r0, #16
 801a598:	4402      	add	r2, r0
 801a59a:	2b07      	cmp	r3, #7
 801a59c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a5a0:	6060      	str	r0, [r4, #4]
 801a5a2:	dd08      	ble.n	801a5b6 <_svfprintf_r+0x110e>
 801a5a4:	aa26      	add	r2, sp, #152	; 0x98
 801a5a6:	4651      	mov	r1, sl
 801a5a8:	4648      	mov	r0, r9
 801a5aa:	f003 fd15 	bl	801dfd8 <__ssprint_r>
 801a5ae:	2800      	cmp	r0, #0
 801a5b0:	f040 80e6 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a5b4:	a929      	add	r1, sp, #164	; 0xa4
 801a5b6:	3f10      	subs	r7, #16
 801a5b8:	460c      	mov	r4, r1
 801a5ba:	e7b4      	b.n	801a526 <_svfprintf_r+0x107e>
 801a5bc:	460c      	mov	r4, r1
 801a5be:	e7cb      	b.n	801a558 <_svfprintf_r+0x10b0>
 801a5c0:	aa26      	add	r2, sp, #152	; 0x98
 801a5c2:	4651      	mov	r1, sl
 801a5c4:	4648      	mov	r0, r9
 801a5c6:	f003 fd07 	bl	801dfd8 <__ssprint_r>
 801a5ca:	2800      	cmp	r0, #0
 801a5cc:	f040 80d8 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a5d0:	ac29      	add	r4, sp, #164	; 0xa4
 801a5d2:	e72a      	b.n	801a42a <_svfprintf_r+0xf82>
 801a5d4:	aa26      	add	r2, sp, #152	; 0x98
 801a5d6:	4651      	mov	r1, sl
 801a5d8:	4648      	mov	r0, r9
 801a5da:	f003 fcfd 	bl	801dfd8 <__ssprint_r>
 801a5de:	2800      	cmp	r0, #0
 801a5e0:	f040 80ce 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a5e4:	ac29      	add	r4, sp, #164	; 0xa4
 801a5e6:	e736      	b.n	801a456 <_svfprintf_r+0xfae>
 801a5e8:	3210      	adds	r2, #16
 801a5ea:	2b07      	cmp	r3, #7
 801a5ec:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a5f0:	6067      	str	r7, [r4, #4]
 801a5f2:	dd08      	ble.n	801a606 <_svfprintf_r+0x115e>
 801a5f4:	aa26      	add	r2, sp, #152	; 0x98
 801a5f6:	4651      	mov	r1, sl
 801a5f8:	4648      	mov	r0, r9
 801a5fa:	f003 fced 	bl	801dfd8 <__ssprint_r>
 801a5fe:	2800      	cmp	r0, #0
 801a600:	f040 80be 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a604:	a929      	add	r1, sp, #164	; 0xa4
 801a606:	3d10      	subs	r5, #16
 801a608:	460c      	mov	r4, r1
 801a60a:	e730      	b.n	801a46e <_svfprintf_r+0xfc6>
 801a60c:	08020661 	.word	0x08020661
 801a610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a612:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a614:	2a01      	cmp	r2, #1
 801a616:	f107 0701 	add.w	r7, r7, #1
 801a61a:	f103 0301 	add.w	r3, r3, #1
 801a61e:	f104 0508 	add.w	r5, r4, #8
 801a622:	dc02      	bgt.n	801a62a <_svfprintf_r+0x1182>
 801a624:	f018 0f01 	tst.w	r8, #1
 801a628:	d07e      	beq.n	801a728 <_svfprintf_r+0x1280>
 801a62a:	2201      	movs	r2, #1
 801a62c:	2b07      	cmp	r3, #7
 801a62e:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801a632:	f8c4 b000 	str.w	fp, [r4]
 801a636:	6062      	str	r2, [r4, #4]
 801a638:	dd08      	ble.n	801a64c <_svfprintf_r+0x11a4>
 801a63a:	aa26      	add	r2, sp, #152	; 0x98
 801a63c:	4651      	mov	r1, sl
 801a63e:	4648      	mov	r0, r9
 801a640:	f003 fcca 	bl	801dfd8 <__ssprint_r>
 801a644:	2800      	cmp	r0, #0
 801a646:	f040 809b 	bne.w	801a780 <_svfprintf_r+0x12d8>
 801a64a:	ad29      	add	r5, sp, #164	; 0xa4
 801a64c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a64e:	602b      	str	r3, [r5, #0]
 801a650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a652:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a654:	606b      	str	r3, [r5, #4]
 801a656:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a658:	4413      	add	r3, r2
 801a65a:	9328      	str	r3, [sp, #160]	; 0xa0
 801a65c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a65e:	3301      	adds	r3, #1
 801a660:	2b07      	cmp	r3, #7
 801a662:	9327      	str	r3, [sp, #156]	; 0x9c
 801a664:	dc32      	bgt.n	801a6cc <_svfprintf_r+0x1224>
 801a666:	3508      	adds	r5, #8
 801a668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a66a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a66e:	1e5c      	subs	r4, r3, #1
 801a670:	2200      	movs	r2, #0
 801a672:	2300      	movs	r3, #0
 801a674:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
 801a678:	f7ee fbfe 	bl	8008e78 <__aeabi_dcmpeq>
 801a67c:	2800      	cmp	r0, #0
 801a67e:	d12e      	bne.n	801a6de <_svfprintf_r+0x1236>
 801a680:	f10b 0301 	add.w	r3, fp, #1
 801a684:	e9c5 3400 	strd	r3, r4, [r5]
 801a688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a68a:	3701      	adds	r7, #1
 801a68c:	3e01      	subs	r6, #1
 801a68e:	441e      	add	r6, r3
 801a690:	2f07      	cmp	r7, #7
 801a692:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
 801a696:	dd50      	ble.n	801a73a <_svfprintf_r+0x1292>
 801a698:	aa26      	add	r2, sp, #152	; 0x98
 801a69a:	4651      	mov	r1, sl
 801a69c:	4648      	mov	r0, r9
 801a69e:	f003 fc9b 	bl	801dfd8 <__ssprint_r>
 801a6a2:	2800      	cmp	r0, #0
 801a6a4:	d16c      	bne.n	801a780 <_svfprintf_r+0x12d8>
 801a6a6:	ad29      	add	r5, sp, #164	; 0xa4
 801a6a8:	ab22      	add	r3, sp, #136	; 0x88
 801a6aa:	602b      	str	r3, [r5, #0]
 801a6ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a6ae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a6b0:	606b      	str	r3, [r5, #4]
 801a6b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a6b4:	4413      	add	r3, r2
 801a6b6:	9328      	str	r3, [sp, #160]	; 0xa0
 801a6b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a6ba:	3301      	adds	r3, #1
 801a6bc:	2b07      	cmp	r3, #7
 801a6be:	9327      	str	r3, [sp, #156]	; 0x9c
 801a6c0:	f73f adb7 	bgt.w	801a232 <_svfprintf_r+0xd8a>
 801a6c4:	f105 0408 	add.w	r4, r5, #8
 801a6c8:	f7ff bac4 	b.w	8019c54 <_svfprintf_r+0x7ac>
 801a6cc:	aa26      	add	r2, sp, #152	; 0x98
 801a6ce:	4651      	mov	r1, sl
 801a6d0:	4648      	mov	r0, r9
 801a6d2:	f003 fc81 	bl	801dfd8 <__ssprint_r>
 801a6d6:	2800      	cmp	r0, #0
 801a6d8:	d152      	bne.n	801a780 <_svfprintf_r+0x12d8>
 801a6da:	ad29      	add	r5, sp, #164	; 0xa4
 801a6dc:	e7c4      	b.n	801a668 <_svfprintf_r+0x11c0>
 801a6de:	2c00      	cmp	r4, #0
 801a6e0:	dde2      	ble.n	801a6a8 <_svfprintf_r+0x1200>
 801a6e2:	4e57      	ldr	r6, [pc, #348]	; (801a840 <_svfprintf_r+0x1398>)
 801a6e4:	2710      	movs	r7, #16
 801a6e6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a6ea:	2c10      	cmp	r4, #16
 801a6ec:	f103 0301 	add.w	r3, r3, #1
 801a6f0:	f105 0108 	add.w	r1, r5, #8
 801a6f4:	602e      	str	r6, [r5, #0]
 801a6f6:	dc07      	bgt.n	801a708 <_svfprintf_r+0x1260>
 801a6f8:	606c      	str	r4, [r5, #4]
 801a6fa:	2b07      	cmp	r3, #7
 801a6fc:	4414      	add	r4, r2
 801a6fe:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 801a702:	dcc9      	bgt.n	801a698 <_svfprintf_r+0x11f0>
 801a704:	460d      	mov	r5, r1
 801a706:	e7cf      	b.n	801a6a8 <_svfprintf_r+0x1200>
 801a708:	3210      	adds	r2, #16
 801a70a:	2b07      	cmp	r3, #7
 801a70c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a710:	606f      	str	r7, [r5, #4]
 801a712:	dd06      	ble.n	801a722 <_svfprintf_r+0x127a>
 801a714:	aa26      	add	r2, sp, #152	; 0x98
 801a716:	4651      	mov	r1, sl
 801a718:	4648      	mov	r0, r9
 801a71a:	f003 fc5d 	bl	801dfd8 <__ssprint_r>
 801a71e:	bb78      	cbnz	r0, 801a780 <_svfprintf_r+0x12d8>
 801a720:	a929      	add	r1, sp, #164	; 0xa4
 801a722:	3c10      	subs	r4, #16
 801a724:	460d      	mov	r5, r1
 801a726:	e7de      	b.n	801a6e6 <_svfprintf_r+0x123e>
 801a728:	2201      	movs	r2, #1
 801a72a:	2b07      	cmp	r3, #7
 801a72c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801a730:	f8c4 b000 	str.w	fp, [r4]
 801a734:	6062      	str	r2, [r4, #4]
 801a736:	ddb7      	ble.n	801a6a8 <_svfprintf_r+0x1200>
 801a738:	e7ae      	b.n	801a698 <_svfprintf_r+0x11f0>
 801a73a:	3508      	adds	r5, #8
 801a73c:	e7b4      	b.n	801a6a8 <_svfprintf_r+0x1200>
 801a73e:	460c      	mov	r4, r1
 801a740:	f7ff ba88 	b.w	8019c54 <_svfprintf_r+0x7ac>
 801a744:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801a748:	1a9d      	subs	r5, r3, r2
 801a74a:	2d00      	cmp	r5, #0
 801a74c:	f77f aa86 	ble.w	8019c5c <_svfprintf_r+0x7b4>
 801a750:	4e3c      	ldr	r6, [pc, #240]	; (801a844 <_svfprintf_r+0x139c>)
 801a752:	2710      	movs	r7, #16
 801a754:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a758:	2d10      	cmp	r5, #16
 801a75a:	f103 0301 	add.w	r3, r3, #1
 801a75e:	6026      	str	r6, [r4, #0]
 801a760:	dc18      	bgt.n	801a794 <_svfprintf_r+0x12ec>
 801a762:	6065      	str	r5, [r4, #4]
 801a764:	2b07      	cmp	r3, #7
 801a766:	4415      	add	r5, r2
 801a768:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801a76c:	f77f aa76 	ble.w	8019c5c <_svfprintf_r+0x7b4>
 801a770:	aa26      	add	r2, sp, #152	; 0x98
 801a772:	4651      	mov	r1, sl
 801a774:	4648      	mov	r0, r9
 801a776:	f003 fc2f 	bl	801dfd8 <__ssprint_r>
 801a77a:	2800      	cmp	r0, #0
 801a77c:	f43f aa6e 	beq.w	8019c5c <_svfprintf_r+0x7b4>
 801a780:	9b08      	ldr	r3, [sp, #32]
 801a782:	2b00      	cmp	r3, #0
 801a784:	f43f a891 	beq.w	80198aa <_svfprintf_r+0x402>
 801a788:	4619      	mov	r1, r3
 801a78a:	4648      	mov	r0, r9
 801a78c:	f7fe f9e0 	bl	8018b50 <_free_r>
 801a790:	f7ff b88b 	b.w	80198aa <_svfprintf_r+0x402>
 801a794:	3210      	adds	r2, #16
 801a796:	2b07      	cmp	r3, #7
 801a798:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a79c:	6067      	str	r7, [r4, #4]
 801a79e:	dc02      	bgt.n	801a7a6 <_svfprintf_r+0x12fe>
 801a7a0:	3408      	adds	r4, #8
 801a7a2:	3d10      	subs	r5, #16
 801a7a4:	e7d6      	b.n	801a754 <_svfprintf_r+0x12ac>
 801a7a6:	aa26      	add	r2, sp, #152	; 0x98
 801a7a8:	4651      	mov	r1, sl
 801a7aa:	4648      	mov	r0, r9
 801a7ac:	f003 fc14 	bl	801dfd8 <__ssprint_r>
 801a7b0:	2800      	cmp	r0, #0
 801a7b2:	d1e5      	bne.n	801a780 <_svfprintf_r+0x12d8>
 801a7b4:	ac29      	add	r4, sp, #164	; 0xa4
 801a7b6:	e7f4      	b.n	801a7a2 <_svfprintf_r+0x12fa>
 801a7b8:	9908      	ldr	r1, [sp, #32]
 801a7ba:	4648      	mov	r0, r9
 801a7bc:	f7fe f9c8 	bl	8018b50 <_free_r>
 801a7c0:	f7ff ba64 	b.w	8019c8c <_svfprintf_r+0x7e4>
 801a7c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	f43f a86f 	beq.w	80198aa <_svfprintf_r+0x402>
 801a7cc:	aa26      	add	r2, sp, #152	; 0x98
 801a7ce:	4651      	mov	r1, sl
 801a7d0:	4648      	mov	r0, r9
 801a7d2:	f003 fc01 	bl	801dfd8 <__ssprint_r>
 801a7d6:	f7ff b868 	b.w	80198aa <_svfprintf_r+0x402>
 801a7da:	ea55 0206 	orrs.w	r2, r5, r6
 801a7de:	f8cd 8020 	str.w	r8, [sp, #32]
 801a7e2:	f43f ab78 	beq.w	8019ed6 <_svfprintf_r+0xa2e>
 801a7e6:	2b01      	cmp	r3, #1
 801a7e8:	f43f ac14 	beq.w	801a014 <_svfprintf_r+0xb6c>
 801a7ec:	2b02      	cmp	r3, #2
 801a7ee:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801a7f2:	f43f ac56 	beq.w	801a0a2 <_svfprintf_r+0xbfa>
 801a7f6:	f005 0307 	and.w	r3, r5, #7
 801a7fa:	08ed      	lsrs	r5, r5, #3
 801a7fc:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 801a800:	08f6      	lsrs	r6, r6, #3
 801a802:	3330      	adds	r3, #48	; 0x30
 801a804:	ea55 0106 	orrs.w	r1, r5, r6
 801a808:	465a      	mov	r2, fp
 801a80a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801a80e:	d1f2      	bne.n	801a7f6 <_svfprintf_r+0x134e>
 801a810:	9908      	ldr	r1, [sp, #32]
 801a812:	07c9      	lsls	r1, r1, #31
 801a814:	d506      	bpl.n	801a824 <_svfprintf_r+0x137c>
 801a816:	2b30      	cmp	r3, #48	; 0x30
 801a818:	d004      	beq.n	801a824 <_svfprintf_r+0x137c>
 801a81a:	2330      	movs	r3, #48	; 0x30
 801a81c:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801a820:	f1a2 0b02 	sub.w	fp, r2, #2
 801a824:	ab52      	add	r3, sp, #328	; 0x148
 801a826:	eba3 030b 	sub.w	r3, r3, fp
 801a82a:	9f07      	ldr	r7, [sp, #28]
 801a82c:	9307      	str	r3, [sp, #28]
 801a82e:	2300      	movs	r3, #0
 801a830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a834:	9308      	str	r3, [sp, #32]
 801a836:	461e      	mov	r6, r3
 801a838:	930c      	str	r3, [sp, #48]	; 0x30
 801a83a:	461d      	mov	r5, r3
 801a83c:	f7ff b94a 	b.w	8019ad4 <_svfprintf_r+0x62c>
 801a840:	08020661 	.word	0x08020661
 801a844:	08020651 	.word	0x08020651

0801a848 <_vfprintf_r>:
 801a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a84c:	b0d3      	sub	sp, #332	; 0x14c
 801a84e:	468a      	mov	sl, r1
 801a850:	4691      	mov	r9, r2
 801a852:	461c      	mov	r4, r3
 801a854:	461d      	mov	r5, r3
 801a856:	4683      	mov	fp, r0
 801a858:	f002 f944 	bl	801cae4 <_localeconv_r>
 801a85c:	6803      	ldr	r3, [r0, #0]
 801a85e:	9317      	str	r3, [sp, #92]	; 0x5c
 801a860:	4618      	mov	r0, r3
 801a862:	f7ed fedd 	bl	8008620 <strlen>
 801a866:	900f      	str	r0, [sp, #60]	; 0x3c
 801a868:	f1bb 0f00 	cmp.w	fp, #0
 801a86c:	d005      	beq.n	801a87a <_vfprintf_r+0x32>
 801a86e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 801a872:	b913      	cbnz	r3, 801a87a <_vfprintf_r+0x32>
 801a874:	4658      	mov	r0, fp
 801a876:	f7fd fd09 	bl	801828c <__sinit>
 801a87a:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801a87e:	07d8      	lsls	r0, r3, #31
 801a880:	d407      	bmi.n	801a892 <_vfprintf_r+0x4a>
 801a882:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a886:	0599      	lsls	r1, r3, #22
 801a888:	d403      	bmi.n	801a892 <_vfprintf_r+0x4a>
 801a88a:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801a88e:	f7fe f8eb 	bl	8018a68 <__retarget_lock_acquire_recursive>
 801a892:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801a896:	049a      	lsls	r2, r3, #18
 801a898:	d409      	bmi.n	801a8ae <_vfprintf_r+0x66>
 801a89a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a89e:	f8aa 300c 	strh.w	r3, [sl, #12]
 801a8a2:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801a8a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a8aa:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 801a8ae:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a8b2:	071b      	lsls	r3, r3, #28
 801a8b4:	d502      	bpl.n	801a8bc <_vfprintf_r+0x74>
 801a8b6:	f8da 3010 	ldr.w	r3, [sl, #16]
 801a8ba:	b9c3      	cbnz	r3, 801a8ee <_vfprintf_r+0xa6>
 801a8bc:	4651      	mov	r1, sl
 801a8be:	4658      	mov	r0, fp
 801a8c0:	f7fd ff66 	bl	8018790 <__swsetup_r>
 801a8c4:	b198      	cbz	r0, 801a8ee <_vfprintf_r+0xa6>
 801a8c6:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801a8ca:	07df      	lsls	r7, r3, #31
 801a8cc:	d506      	bpl.n	801a8dc <_vfprintf_r+0x94>
 801a8ce:	f04f 33ff 	mov.w	r3, #4294967295
 801a8d2:	9312      	str	r3, [sp, #72]	; 0x48
 801a8d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801a8d6:	b053      	add	sp, #332	; 0x14c
 801a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8dc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a8e0:	059e      	lsls	r6, r3, #22
 801a8e2:	d4f4      	bmi.n	801a8ce <_vfprintf_r+0x86>
 801a8e4:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801a8e8:	f7fe f8bf 	bl	8018a6a <__retarget_lock_release_recursive>
 801a8ec:	e7ef      	b.n	801a8ce <_vfprintf_r+0x86>
 801a8ee:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a8f2:	f003 021a 	and.w	r2, r3, #26
 801a8f6:	2a0a      	cmp	r2, #10
 801a8f8:	d116      	bne.n	801a928 <_vfprintf_r+0xe0>
 801a8fa:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 801a8fe:	2a00      	cmp	r2, #0
 801a900:	db12      	blt.n	801a928 <_vfprintf_r+0xe0>
 801a902:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 801a906:	07d5      	lsls	r5, r2, #31
 801a908:	d405      	bmi.n	801a916 <_vfprintf_r+0xce>
 801a90a:	0598      	lsls	r0, r3, #22
 801a90c:	d403      	bmi.n	801a916 <_vfprintf_r+0xce>
 801a90e:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801a912:	f7fe f8aa 	bl	8018a6a <__retarget_lock_release_recursive>
 801a916:	4623      	mov	r3, r4
 801a918:	464a      	mov	r2, r9
 801a91a:	4651      	mov	r1, sl
 801a91c:	4658      	mov	r0, fp
 801a91e:	b053      	add	sp, #332	; 0x14c
 801a920:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a924:	f001 b9b0 	b.w	801bc88 <__sbprintf>
 801a928:	2300      	movs	r3, #0
 801a92a:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 801a92e:	9309      	str	r3, [sp, #36]	; 0x24
 801a930:	2200      	movs	r2, #0
 801a932:	2300      	movs	r3, #0
 801a934:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801a938:	2300      	movs	r3, #0
 801a93a:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 801a93e:	ac29      	add	r4, sp, #164	; 0xa4
 801a940:	9426      	str	r4, [sp, #152]	; 0x98
 801a942:	930d      	str	r3, [sp, #52]	; 0x34
 801a944:	9315      	str	r3, [sp, #84]	; 0x54
 801a946:	9318      	str	r3, [sp, #96]	; 0x60
 801a948:	9312      	str	r3, [sp, #72]	; 0x48
 801a94a:	464b      	mov	r3, r9
 801a94c:	461e      	mov	r6, r3
 801a94e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a952:	b10a      	cbz	r2, 801a958 <_vfprintf_r+0x110>
 801a954:	2a25      	cmp	r2, #37	; 0x25
 801a956:	d1f9      	bne.n	801a94c <_vfprintf_r+0x104>
 801a958:	ebb6 0709 	subs.w	r7, r6, r9
 801a95c:	d00d      	beq.n	801a97a <_vfprintf_r+0x132>
 801a95e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a960:	443b      	add	r3, r7
 801a962:	9328      	str	r3, [sp, #160]	; 0xa0
 801a964:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a966:	3301      	adds	r3, #1
 801a968:	2b07      	cmp	r3, #7
 801a96a:	e9c4 9700 	strd	r9, r7, [r4]
 801a96e:	9327      	str	r3, [sp, #156]	; 0x9c
 801a970:	dc79      	bgt.n	801aa66 <_vfprintf_r+0x21e>
 801a972:	3408      	adds	r4, #8
 801a974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a976:	443b      	add	r3, r7
 801a978:	9312      	str	r3, [sp, #72]	; 0x48
 801a97a:	7833      	ldrb	r3, [r6, #0]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	f001 813d 	beq.w	801bbfc <_vfprintf_r+0x13b4>
 801a982:	2300      	movs	r3, #0
 801a984:	f04f 32ff 	mov.w	r2, #4294967295
 801a988:	3601      	adds	r6, #1
 801a98a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a98e:	9207      	str	r2, [sp, #28]
 801a990:	9313      	str	r3, [sp, #76]	; 0x4c
 801a992:	4698      	mov	r8, r3
 801a994:	270a      	movs	r7, #10
 801a996:	212b      	movs	r1, #43	; 0x2b
 801a998:	4633      	mov	r3, r6
 801a99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a99e:	920b      	str	r2, [sp, #44]	; 0x2c
 801a9a0:	930e      	str	r3, [sp, #56]	; 0x38
 801a9a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a9a4:	3b20      	subs	r3, #32
 801a9a6:	2b5a      	cmp	r3, #90	; 0x5a
 801a9a8:	f200 85b2 	bhi.w	801b510 <_vfprintf_r+0xcc8>
 801a9ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a9b0:	05b0007e 	.word	0x05b0007e
 801a9b4:	008605b0 	.word	0x008605b0
 801a9b8:	05b005b0 	.word	0x05b005b0
 801a9bc:	006505b0 	.word	0x006505b0
 801a9c0:	05b005b0 	.word	0x05b005b0
 801a9c4:	00930089 	.word	0x00930089
 801a9c8:	009005b0 	.word	0x009005b0
 801a9cc:	05b00096 	.word	0x05b00096
 801a9d0:	00b500b2 	.word	0x00b500b2
 801a9d4:	00b500b5 	.word	0x00b500b5
 801a9d8:	00b500b5 	.word	0x00b500b5
 801a9dc:	00b500b5 	.word	0x00b500b5
 801a9e0:	00b500b5 	.word	0x00b500b5
 801a9e4:	05b005b0 	.word	0x05b005b0
 801a9e8:	05b005b0 	.word	0x05b005b0
 801a9ec:	05b005b0 	.word	0x05b005b0
 801a9f0:	012505b0 	.word	0x012505b0
 801a9f4:	00e205b0 	.word	0x00e205b0
 801a9f8:	012500f5 	.word	0x012500f5
 801a9fc:	01250125 	.word	0x01250125
 801aa00:	05b005b0 	.word	0x05b005b0
 801aa04:	05b005b0 	.word	0x05b005b0
 801aa08:	05b000c5 	.word	0x05b000c5
 801aa0c:	048f05b0 	.word	0x048f05b0
 801aa10:	05b005b0 	.word	0x05b005b0
 801aa14:	04d905b0 	.word	0x04d905b0
 801aa18:	04fa05b0 	.word	0x04fa05b0
 801aa1c:	05b005b0 	.word	0x05b005b0
 801aa20:	05b0051c 	.word	0x05b0051c
 801aa24:	05b005b0 	.word	0x05b005b0
 801aa28:	05b005b0 	.word	0x05b005b0
 801aa2c:	05b005b0 	.word	0x05b005b0
 801aa30:	012505b0 	.word	0x012505b0
 801aa34:	00e205b0 	.word	0x00e205b0
 801aa38:	012500f7 	.word	0x012500f7
 801aa3c:	01250125 	.word	0x01250125
 801aa40:	00f700c8 	.word	0x00f700c8
 801aa44:	05b000dc 	.word	0x05b000dc
 801aa48:	05b000d5 	.word	0x05b000d5
 801aa4c:	0491046a 	.word	0x0491046a
 801aa50:	00dc04c8 	.word	0x00dc04c8
 801aa54:	04d905b0 	.word	0x04d905b0
 801aa58:	04fc007c 	.word	0x04fc007c
 801aa5c:	05b005b0 	.word	0x05b005b0
 801aa60:	05b0053b 	.word	0x05b0053b
 801aa64:	007c      	.short	0x007c
 801aa66:	aa26      	add	r2, sp, #152	; 0x98
 801aa68:	4651      	mov	r1, sl
 801aa6a:	4658      	mov	r0, fp
 801aa6c:	f001 f94c 	bl	801bd08 <__sprint_r>
 801aa70:	2800      	cmp	r0, #0
 801aa72:	f040 812e 	bne.w	801acd2 <_vfprintf_r+0x48a>
 801aa76:	ac29      	add	r4, sp, #164	; 0xa4
 801aa78:	e77c      	b.n	801a974 <_vfprintf_r+0x12c>
 801aa7a:	4658      	mov	r0, fp
 801aa7c:	f002 f832 	bl	801cae4 <_localeconv_r>
 801aa80:	6843      	ldr	r3, [r0, #4]
 801aa82:	9318      	str	r3, [sp, #96]	; 0x60
 801aa84:	4618      	mov	r0, r3
 801aa86:	f7ed fdcb 	bl	8008620 <strlen>
 801aa8a:	9015      	str	r0, [sp, #84]	; 0x54
 801aa8c:	4658      	mov	r0, fp
 801aa8e:	f002 f829 	bl	801cae4 <_localeconv_r>
 801aa92:	6883      	ldr	r3, [r0, #8]
 801aa94:	930d      	str	r3, [sp, #52]	; 0x34
 801aa96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa98:	212b      	movs	r1, #43	; 0x2b
 801aa9a:	b12b      	cbz	r3, 801aaa8 <_vfprintf_r+0x260>
 801aa9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa9e:	b11b      	cbz	r3, 801aaa8 <_vfprintf_r+0x260>
 801aaa0:	781b      	ldrb	r3, [r3, #0]
 801aaa2:	b10b      	cbz	r3, 801aaa8 <_vfprintf_r+0x260>
 801aaa4:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801aaa8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801aaaa:	e775      	b.n	801a998 <_vfprintf_r+0x150>
 801aaac:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d1f9      	bne.n	801aaa8 <_vfprintf_r+0x260>
 801aab4:	2320      	movs	r3, #32
 801aab6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801aaba:	e7f5      	b.n	801aaa8 <_vfprintf_r+0x260>
 801aabc:	f048 0801 	orr.w	r8, r8, #1
 801aac0:	e7f2      	b.n	801aaa8 <_vfprintf_r+0x260>
 801aac2:	f855 3b04 	ldr.w	r3, [r5], #4
 801aac6:	9313      	str	r3, [sp, #76]	; 0x4c
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	daed      	bge.n	801aaa8 <_vfprintf_r+0x260>
 801aacc:	425b      	negs	r3, r3
 801aace:	9313      	str	r3, [sp, #76]	; 0x4c
 801aad0:	f048 0804 	orr.w	r8, r8, #4
 801aad4:	e7e8      	b.n	801aaa8 <_vfprintf_r+0x260>
 801aad6:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 801aada:	e7e5      	b.n	801aaa8 <_vfprintf_r+0x260>
 801aadc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aade:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aae2:	920b      	str	r2, [sp, #44]	; 0x2c
 801aae4:	2a2a      	cmp	r2, #42	; 0x2a
 801aae6:	d112      	bne.n	801ab0e <_vfprintf_r+0x2c6>
 801aae8:	f855 2b04 	ldr.w	r2, [r5], #4
 801aaec:	930e      	str	r3, [sp, #56]	; 0x38
 801aaee:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801aaf2:	9207      	str	r2, [sp, #28]
 801aaf4:	e7d8      	b.n	801aaa8 <_vfprintf_r+0x260>
 801aaf6:	9807      	ldr	r0, [sp, #28]
 801aaf8:	fb07 2200 	mla	r2, r7, r0, r2
 801aafc:	9207      	str	r2, [sp, #28]
 801aafe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab02:	920b      	str	r2, [sp, #44]	; 0x2c
 801ab04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ab06:	3a30      	subs	r2, #48	; 0x30
 801ab08:	2a09      	cmp	r2, #9
 801ab0a:	d9f4      	bls.n	801aaf6 <_vfprintf_r+0x2ae>
 801ab0c:	e748      	b.n	801a9a0 <_vfprintf_r+0x158>
 801ab0e:	2200      	movs	r2, #0
 801ab10:	9207      	str	r2, [sp, #28]
 801ab12:	e7f7      	b.n	801ab04 <_vfprintf_r+0x2bc>
 801ab14:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801ab18:	e7c6      	b.n	801aaa8 <_vfprintf_r+0x260>
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab1e:	9213      	str	r2, [sp, #76]	; 0x4c
 801ab20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ab22:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ab24:	3a30      	subs	r2, #48	; 0x30
 801ab26:	fb07 2200 	mla	r2, r7, r0, r2
 801ab2a:	9213      	str	r2, [sp, #76]	; 0x4c
 801ab2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab30:	920b      	str	r2, [sp, #44]	; 0x2c
 801ab32:	3a30      	subs	r2, #48	; 0x30
 801ab34:	2a09      	cmp	r2, #9
 801ab36:	d9f3      	bls.n	801ab20 <_vfprintf_r+0x2d8>
 801ab38:	e732      	b.n	801a9a0 <_vfprintf_r+0x158>
 801ab3a:	f048 0808 	orr.w	r8, r8, #8
 801ab3e:	e7b3      	b.n	801aaa8 <_vfprintf_r+0x260>
 801ab40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab42:	781b      	ldrb	r3, [r3, #0]
 801ab44:	2b68      	cmp	r3, #104	; 0x68
 801ab46:	bf01      	itttt	eq
 801ab48:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 801ab4a:	3301      	addeq	r3, #1
 801ab4c:	930e      	streq	r3, [sp, #56]	; 0x38
 801ab4e:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801ab52:	bf18      	it	ne
 801ab54:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801ab58:	e7a6      	b.n	801aaa8 <_vfprintf_r+0x260>
 801ab5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab5c:	781b      	ldrb	r3, [r3, #0]
 801ab5e:	2b6c      	cmp	r3, #108	; 0x6c
 801ab60:	d105      	bne.n	801ab6e <_vfprintf_r+0x326>
 801ab62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab64:	3301      	adds	r3, #1
 801ab66:	930e      	str	r3, [sp, #56]	; 0x38
 801ab68:	f048 0820 	orr.w	r8, r8, #32
 801ab6c:	e79c      	b.n	801aaa8 <_vfprintf_r+0x260>
 801ab6e:	f048 0810 	orr.w	r8, r8, #16
 801ab72:	e799      	b.n	801aaa8 <_vfprintf_r+0x260>
 801ab74:	462a      	mov	r2, r5
 801ab76:	f852 3b04 	ldr.w	r3, [r2], #4
 801ab7a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801ab7e:	2300      	movs	r3, #0
 801ab80:	920a      	str	r2, [sp, #40]	; 0x28
 801ab82:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801ab86:	2700      	movs	r7, #0
 801ab88:	9308      	str	r3, [sp, #32]
 801ab8a:	2301      	movs	r3, #1
 801ab8c:	9307      	str	r3, [sp, #28]
 801ab8e:	463e      	mov	r6, r7
 801ab90:	970c      	str	r7, [sp, #48]	; 0x30
 801ab92:	463d      	mov	r5, r7
 801ab94:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 801ab98:	e1ba      	b.n	801af10 <_vfprintf_r+0x6c8>
 801ab9a:	f048 0810 	orr.w	r8, r8, #16
 801ab9e:	f018 0f20 	tst.w	r8, #32
 801aba2:	d012      	beq.n	801abca <_vfprintf_r+0x382>
 801aba4:	3507      	adds	r5, #7
 801aba6:	f025 0307 	bic.w	r3, r5, #7
 801abaa:	461a      	mov	r2, r3
 801abac:	685e      	ldr	r6, [r3, #4]
 801abae:	f852 5b08 	ldr.w	r5, [r2], #8
 801abb2:	920a      	str	r2, [sp, #40]	; 0x28
 801abb4:	2e00      	cmp	r6, #0
 801abb6:	da06      	bge.n	801abc6 <_vfprintf_r+0x37e>
 801abb8:	426d      	negs	r5, r5
 801abba:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801abbe:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 801abc2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801abc6:	2301      	movs	r3, #1
 801abc8:	e394      	b.n	801b2f4 <_vfprintf_r+0xaac>
 801abca:	462b      	mov	r3, r5
 801abcc:	f018 0f10 	tst.w	r8, #16
 801abd0:	f853 6b04 	ldr.w	r6, [r3], #4
 801abd4:	930a      	str	r3, [sp, #40]	; 0x28
 801abd6:	d002      	beq.n	801abde <_vfprintf_r+0x396>
 801abd8:	4635      	mov	r5, r6
 801abda:	17f6      	asrs	r6, r6, #31
 801abdc:	e7ea      	b.n	801abb4 <_vfprintf_r+0x36c>
 801abde:	f018 0f40 	tst.w	r8, #64	; 0x40
 801abe2:	d003      	beq.n	801abec <_vfprintf_r+0x3a4>
 801abe4:	b235      	sxth	r5, r6
 801abe6:	f346 36c0 	sbfx	r6, r6, #15, #1
 801abea:	e7e3      	b.n	801abb4 <_vfprintf_r+0x36c>
 801abec:	f418 7f00 	tst.w	r8, #512	; 0x200
 801abf0:	d0f2      	beq.n	801abd8 <_vfprintf_r+0x390>
 801abf2:	b275      	sxtb	r5, r6
 801abf4:	f346 16c0 	sbfx	r6, r6, #7, #1
 801abf8:	e7dc      	b.n	801abb4 <_vfprintf_r+0x36c>
 801abfa:	3507      	adds	r5, #7
 801abfc:	f025 0307 	bic.w	r3, r5, #7
 801ac00:	4619      	mov	r1, r3
 801ac02:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801ac06:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801ac0a:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 801ac0e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801ac12:	910a      	str	r1, [sp, #40]	; 0x28
 801ac14:	4b40      	ldr	r3, [pc, #256]	; (801ad18 <_vfprintf_r+0x4d0>)
 801ac16:	f04f 32ff 	mov.w	r2, #4294967295
 801ac1a:	4630      	mov	r0, r6
 801ac1c:	4629      	mov	r1, r5
 801ac1e:	f7ee f95d 	bl	8008edc <__aeabi_dcmpun>
 801ac22:	bb18      	cbnz	r0, 801ac6c <_vfprintf_r+0x424>
 801ac24:	4b3c      	ldr	r3, [pc, #240]	; (801ad18 <_vfprintf_r+0x4d0>)
 801ac26:	f04f 32ff 	mov.w	r2, #4294967295
 801ac2a:	4630      	mov	r0, r6
 801ac2c:	4629      	mov	r1, r5
 801ac2e:	f7ee f937 	bl	8008ea0 <__aeabi_dcmple>
 801ac32:	b9d8      	cbnz	r0, 801ac6c <_vfprintf_r+0x424>
 801ac34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801ac38:	2200      	movs	r2, #0
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	f7ee f926 	bl	8008e8c <__aeabi_dcmplt>
 801ac40:	b110      	cbz	r0, 801ac48 <_vfprintf_r+0x400>
 801ac42:	232d      	movs	r3, #45	; 0x2d
 801ac44:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801ac48:	4a34      	ldr	r2, [pc, #208]	; (801ad1c <_vfprintf_r+0x4d4>)
 801ac4a:	4b35      	ldr	r3, [pc, #212]	; (801ad20 <_vfprintf_r+0x4d8>)
 801ac4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ac4e:	2947      	cmp	r1, #71	; 0x47
 801ac50:	bfd4      	ite	le
 801ac52:	4691      	movle	r9, r2
 801ac54:	4699      	movgt	r9, r3
 801ac56:	2303      	movs	r3, #3
 801ac58:	2100      	movs	r1, #0
 801ac5a:	e9cd 3107 	strd	r3, r1, [sp, #28]
 801ac5e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801ac62:	2700      	movs	r7, #0
 801ac64:	463e      	mov	r6, r7
 801ac66:	463b      	mov	r3, r7
 801ac68:	f001 b806 	b.w	801bc78 <_vfprintf_r+0x1430>
 801ac6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ac70:	4610      	mov	r0, r2
 801ac72:	4619      	mov	r1, r3
 801ac74:	f7ee f932 	bl	8008edc <__aeabi_dcmpun>
 801ac78:	b140      	cbz	r0, 801ac8c <_vfprintf_r+0x444>
 801ac7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ac7c:	4a29      	ldr	r2, [pc, #164]	; (801ad24 <_vfprintf_r+0x4dc>)
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	bfbc      	itt	lt
 801ac82:	232d      	movlt	r3, #45	; 0x2d
 801ac84:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 801ac88:	4b27      	ldr	r3, [pc, #156]	; (801ad28 <_vfprintf_r+0x4e0>)
 801ac8a:	e7df      	b.n	801ac4c <_vfprintf_r+0x404>
 801ac8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac8e:	f023 0320 	bic.w	r3, r3, #32
 801ac92:	2b41      	cmp	r3, #65	; 0x41
 801ac94:	930c      	str	r3, [sp, #48]	; 0x30
 801ac96:	d12e      	bne.n	801acf6 <_vfprintf_r+0x4ae>
 801ac98:	2330      	movs	r3, #48	; 0x30
 801ac9a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801ac9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aca0:	2b61      	cmp	r3, #97	; 0x61
 801aca2:	bf0c      	ite	eq
 801aca4:	2378      	moveq	r3, #120	; 0x78
 801aca6:	2358      	movne	r3, #88	; 0x58
 801aca8:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801acac:	9b07      	ldr	r3, [sp, #28]
 801acae:	2b63      	cmp	r3, #99	; 0x63
 801acb0:	f048 0802 	orr.w	r8, r8, #2
 801acb4:	dd3a      	ble.n	801ad2c <_vfprintf_r+0x4e4>
 801acb6:	1c59      	adds	r1, r3, #1
 801acb8:	4658      	mov	r0, fp
 801acba:	f7fe f809 	bl	8018cd0 <_malloc_r>
 801acbe:	4681      	mov	r9, r0
 801acc0:	2800      	cmp	r0, #0
 801acc2:	f040 8203 	bne.w	801b0cc <_vfprintf_r+0x884>
 801acc6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801acca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801acce:	f8aa 300c 	strh.w	r3, [sl, #12]
 801acd2:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801acd6:	07d9      	lsls	r1, r3, #31
 801acd8:	d407      	bmi.n	801acea <_vfprintf_r+0x4a2>
 801acda:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801acde:	059a      	lsls	r2, r3, #22
 801ace0:	d403      	bmi.n	801acea <_vfprintf_r+0x4a2>
 801ace2:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801ace6:	f7fd fec0 	bl	8018a6a <__retarget_lock_release_recursive>
 801acea:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801acee:	065b      	lsls	r3, r3, #25
 801acf0:	f57f adf0 	bpl.w	801a8d4 <_vfprintf_r+0x8c>
 801acf4:	e5eb      	b.n	801a8ce <_vfprintf_r+0x86>
 801acf6:	9b07      	ldr	r3, [sp, #28]
 801acf8:	3301      	adds	r3, #1
 801acfa:	f000 81e9 	beq.w	801b0d0 <_vfprintf_r+0x888>
 801acfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad00:	2b47      	cmp	r3, #71	; 0x47
 801ad02:	f040 81e8 	bne.w	801b0d6 <_vfprintf_r+0x88e>
 801ad06:	9b07      	ldr	r3, [sp, #28]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	f040 81e4 	bne.w	801b0d6 <_vfprintf_r+0x88e>
 801ad0e:	9308      	str	r3, [sp, #32]
 801ad10:	2301      	movs	r3, #1
 801ad12:	9307      	str	r3, [sp, #28]
 801ad14:	e00d      	b.n	801ad32 <_vfprintf_r+0x4ea>
 801ad16:	bf00      	nop
 801ad18:	7fefffff 	.word	0x7fefffff
 801ad1c:	0802061d 	.word	0x0802061d
 801ad20:	08020621 	.word	0x08020621
 801ad24:	08020625 	.word	0x08020625
 801ad28:	08020629 	.word	0x08020629
 801ad2c:	9008      	str	r0, [sp, #32]
 801ad2e:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 801ad32:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 801ad36:	9314      	str	r3, [sp, #80]	; 0x50
 801ad38:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 801ad3c:	1e1d      	subs	r5, r3, #0
 801ad3e:	bfb6      	itet	lt
 801ad40:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 801ad44:	2300      	movge	r3, #0
 801ad46:	232d      	movlt	r3, #45	; 0x2d
 801ad48:	931c      	str	r3, [sp, #112]	; 0x70
 801ad4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad4c:	2b41      	cmp	r3, #65	; 0x41
 801ad4e:	f040 81da 	bne.w	801b106 <_vfprintf_r+0x8be>
 801ad52:	aa20      	add	r2, sp, #128	; 0x80
 801ad54:	4638      	mov	r0, r7
 801ad56:	4629      	mov	r1, r5
 801ad58:	f001 ff1a 	bl	801cb90 <frexp>
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801ad62:	f7ed fe21 	bl	80089a8 <__aeabi_dmul>
 801ad66:	2200      	movs	r2, #0
 801ad68:	2300      	movs	r3, #0
 801ad6a:	4606      	mov	r6, r0
 801ad6c:	460f      	mov	r7, r1
 801ad6e:	f7ee f883 	bl	8008e78 <__aeabi_dcmpeq>
 801ad72:	b108      	cbz	r0, 801ad78 <_vfprintf_r+0x530>
 801ad74:	2301      	movs	r3, #1
 801ad76:	9320      	str	r3, [sp, #128]	; 0x80
 801ad78:	4bad      	ldr	r3, [pc, #692]	; (801b030 <_vfprintf_r+0x7e8>)
 801ad7a:	4aae      	ldr	r2, [pc, #696]	; (801b034 <_vfprintf_r+0x7ec>)
 801ad7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ad7e:	2961      	cmp	r1, #97	; 0x61
 801ad80:	bf18      	it	ne
 801ad82:	461a      	movne	r2, r3
 801ad84:	9b07      	ldr	r3, [sp, #28]
 801ad86:	921b      	str	r2, [sp, #108]	; 0x6c
 801ad88:	3b01      	subs	r3, #1
 801ad8a:	9309      	str	r3, [sp, #36]	; 0x24
 801ad8c:	464d      	mov	r5, r9
 801ad8e:	4baa      	ldr	r3, [pc, #680]	; (801b038 <_vfprintf_r+0x7f0>)
 801ad90:	2200      	movs	r2, #0
 801ad92:	4630      	mov	r0, r6
 801ad94:	4639      	mov	r1, r7
 801ad96:	f7ed fe07 	bl	80089a8 <__aeabi_dmul>
 801ad9a:	460f      	mov	r7, r1
 801ad9c:	4606      	mov	r6, r0
 801ad9e:	f7ee f8b3 	bl	8008f08 <__aeabi_d2iz>
 801ada2:	901d      	str	r0, [sp, #116]	; 0x74
 801ada4:	f7ed fd96 	bl	80088d4 <__aeabi_i2d>
 801ada8:	4602      	mov	r2, r0
 801adaa:	460b      	mov	r3, r1
 801adac:	4630      	mov	r0, r6
 801adae:	4639      	mov	r1, r7
 801adb0:	f7ed fc42 	bl	8008638 <__aeabi_dsub>
 801adb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801adb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801adb8:	5c9b      	ldrb	r3, [r3, r2]
 801adba:	f805 3b01 	strb.w	r3, [r5], #1
 801adbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adc0:	9316      	str	r3, [sp, #88]	; 0x58
 801adc2:	1c5a      	adds	r2, r3, #1
 801adc4:	4606      	mov	r6, r0
 801adc6:	460f      	mov	r7, r1
 801adc8:	d007      	beq.n	801adda <_vfprintf_r+0x592>
 801adca:	3b01      	subs	r3, #1
 801adcc:	9309      	str	r3, [sp, #36]	; 0x24
 801adce:	2200      	movs	r2, #0
 801add0:	2300      	movs	r3, #0
 801add2:	f7ee f851 	bl	8008e78 <__aeabi_dcmpeq>
 801add6:	2800      	cmp	r0, #0
 801add8:	d0d9      	beq.n	801ad8e <_vfprintf_r+0x546>
 801adda:	4b98      	ldr	r3, [pc, #608]	; (801b03c <_vfprintf_r+0x7f4>)
 801addc:	2200      	movs	r2, #0
 801adde:	4630      	mov	r0, r6
 801ade0:	4639      	mov	r1, r7
 801ade2:	f7ee f871 	bl	8008ec8 <__aeabi_dcmpgt>
 801ade6:	b960      	cbnz	r0, 801ae02 <_vfprintf_r+0x5ba>
 801ade8:	4b94      	ldr	r3, [pc, #592]	; (801b03c <_vfprintf_r+0x7f4>)
 801adea:	2200      	movs	r2, #0
 801adec:	4630      	mov	r0, r6
 801adee:	4639      	mov	r1, r7
 801adf0:	f7ee f842 	bl	8008e78 <__aeabi_dcmpeq>
 801adf4:	2800      	cmp	r0, #0
 801adf6:	f000 8181 	beq.w	801b0fc <_vfprintf_r+0x8b4>
 801adfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801adfc:	07da      	lsls	r2, r3, #31
 801adfe:	f140 817d 	bpl.w	801b0fc <_vfprintf_r+0x8b4>
 801ae02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ae04:	9524      	str	r5, [sp, #144]	; 0x90
 801ae06:	7bd9      	ldrb	r1, [r3, #15]
 801ae08:	2030      	movs	r0, #48	; 0x30
 801ae0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ae0c:	1e53      	subs	r3, r2, #1
 801ae0e:	9324      	str	r3, [sp, #144]	; 0x90
 801ae10:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801ae14:	428b      	cmp	r3, r1
 801ae16:	f000 8160 	beq.w	801b0da <_vfprintf_r+0x892>
 801ae1a:	2b39      	cmp	r3, #57	; 0x39
 801ae1c:	bf0b      	itete	eq
 801ae1e:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 801ae20:	3301      	addne	r3, #1
 801ae22:	7a9b      	ldrbeq	r3, [r3, #10]
 801ae24:	b2db      	uxtbne	r3, r3
 801ae26:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ae2a:	eba5 0309 	sub.w	r3, r5, r9
 801ae2e:	9309      	str	r3, [sp, #36]	; 0x24
 801ae30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae32:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801ae34:	2b47      	cmp	r3, #71	; 0x47
 801ae36:	f040 81b5 	bne.w	801b1a4 <_vfprintf_r+0x95c>
 801ae3a:	1ceb      	adds	r3, r5, #3
 801ae3c:	db03      	blt.n	801ae46 <_vfprintf_r+0x5fe>
 801ae3e:	9b07      	ldr	r3, [sp, #28]
 801ae40:	42ab      	cmp	r3, r5
 801ae42:	f280 81d5 	bge.w	801b1f0 <_vfprintf_r+0x9a8>
 801ae46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae48:	3b02      	subs	r3, #2
 801ae4a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ae4e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801ae52:	f021 0120 	bic.w	r1, r1, #32
 801ae56:	2941      	cmp	r1, #65	; 0x41
 801ae58:	bf08      	it	eq
 801ae5a:	320f      	addeq	r2, #15
 801ae5c:	f105 33ff 	add.w	r3, r5, #4294967295
 801ae60:	bf06      	itte	eq
 801ae62:	b2d2      	uxtbeq	r2, r2
 801ae64:	2101      	moveq	r1, #1
 801ae66:	2100      	movne	r1, #0
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	9320      	str	r3, [sp, #128]	; 0x80
 801ae6c:	bfb8      	it	lt
 801ae6e:	f1c5 0301 	rsblt	r3, r5, #1
 801ae72:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 801ae76:	bfb4      	ite	lt
 801ae78:	222d      	movlt	r2, #45	; 0x2d
 801ae7a:	222b      	movge	r2, #43	; 0x2b
 801ae7c:	2b09      	cmp	r3, #9
 801ae7e:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 801ae82:	f340 81a8 	ble.w	801b1d6 <_vfprintf_r+0x98e>
 801ae86:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 801ae8a:	260a      	movs	r6, #10
 801ae8c:	4602      	mov	r2, r0
 801ae8e:	fb93 f5f6 	sdiv	r5, r3, r6
 801ae92:	fb06 3115 	mls	r1, r6, r5, r3
 801ae96:	3130      	adds	r1, #48	; 0x30
 801ae98:	f802 1c01 	strb.w	r1, [r2, #-1]
 801ae9c:	4619      	mov	r1, r3
 801ae9e:	2963      	cmp	r1, #99	; 0x63
 801aea0:	f100 30ff 	add.w	r0, r0, #4294967295
 801aea4:	462b      	mov	r3, r5
 801aea6:	dcf1      	bgt.n	801ae8c <_vfprintf_r+0x644>
 801aea8:	3330      	adds	r3, #48	; 0x30
 801aeaa:	1e91      	subs	r1, r2, #2
 801aeac:	f800 3c01 	strb.w	r3, [r0, #-1]
 801aeb0:	f10d 0589 	add.w	r5, sp, #137	; 0x89
 801aeb4:	460b      	mov	r3, r1
 801aeb6:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 801aeba:	4283      	cmp	r3, r0
 801aebc:	f0c0 8186 	bcc.w	801b1cc <_vfprintf_r+0x984>
 801aec0:	f10d 0399 	add.w	r3, sp, #153	; 0x99
 801aec4:	1a9b      	subs	r3, r3, r2
 801aec6:	4281      	cmp	r1, r0
 801aec8:	bf88      	it	hi
 801aeca:	2300      	movhi	r3, #0
 801aecc:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801aed0:	441a      	add	r2, r3
 801aed2:	ab22      	add	r3, sp, #136	; 0x88
 801aed4:	1ad3      	subs	r3, r2, r3
 801aed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aed8:	9319      	str	r3, [sp, #100]	; 0x64
 801aeda:	2a01      	cmp	r2, #1
 801aedc:	4413      	add	r3, r2
 801aede:	9307      	str	r3, [sp, #28]
 801aee0:	dc02      	bgt.n	801aee8 <_vfprintf_r+0x6a0>
 801aee2:	f018 0f01 	tst.w	r8, #1
 801aee6:	d003      	beq.n	801aef0 <_vfprintf_r+0x6a8>
 801aee8:	9b07      	ldr	r3, [sp, #28]
 801aeea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aeec:	4413      	add	r3, r2
 801aeee:	9307      	str	r3, [sp, #28]
 801aef0:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801aef4:	2600      	movs	r6, #0
 801aef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801aefa:	9314      	str	r3, [sp, #80]	; 0x50
 801aefc:	960c      	str	r6, [sp, #48]	; 0x30
 801aefe:	4635      	mov	r5, r6
 801af00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801af02:	b113      	cbz	r3, 801af0a <_vfprintf_r+0x6c2>
 801af04:	232d      	movs	r3, #45	; 0x2d
 801af06:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801af0a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801af0e:	2700      	movs	r7, #0
 801af10:	9b07      	ldr	r3, [sp, #28]
 801af12:	42bb      	cmp	r3, r7
 801af14:	bfb8      	it	lt
 801af16:	463b      	movlt	r3, r7
 801af18:	9314      	str	r3, [sp, #80]	; 0x50
 801af1a:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801af1e:	b113      	cbz	r3, 801af26 <_vfprintf_r+0x6de>
 801af20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801af22:	3301      	adds	r3, #1
 801af24:	9314      	str	r3, [sp, #80]	; 0x50
 801af26:	f018 0302 	ands.w	r3, r8, #2
 801af2a:	931b      	str	r3, [sp, #108]	; 0x6c
 801af2c:	bf1e      	ittt	ne
 801af2e:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 801af30:	3302      	addne	r3, #2
 801af32:	9314      	strne	r3, [sp, #80]	; 0x50
 801af34:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801af38:	931c      	str	r3, [sp, #112]	; 0x70
 801af3a:	d122      	bne.n	801af82 <_vfprintf_r+0x73a>
 801af3c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801af40:	1a9b      	subs	r3, r3, r2
 801af42:	2b00      	cmp	r3, #0
 801af44:	9316      	str	r3, [sp, #88]	; 0x58
 801af46:	dd1c      	ble.n	801af82 <_vfprintf_r+0x73a>
 801af48:	9816      	ldr	r0, [sp, #88]	; 0x58
 801af4a:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801af4e:	2810      	cmp	r0, #16
 801af50:	483b      	ldr	r0, [pc, #236]	; (801b040 <_vfprintf_r+0x7f8>)
 801af52:	6020      	str	r0, [r4, #0]
 801af54:	f102 0201 	add.w	r2, r2, #1
 801af58:	f104 0108 	add.w	r1, r4, #8
 801af5c:	f300 82e7 	bgt.w	801b52e <_vfprintf_r+0xce6>
 801af60:	9816      	ldr	r0, [sp, #88]	; 0x58
 801af62:	6060      	str	r0, [r4, #4]
 801af64:	4403      	add	r3, r0
 801af66:	2a07      	cmp	r2, #7
 801af68:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801af6c:	f340 82f4 	ble.w	801b558 <_vfprintf_r+0xd10>
 801af70:	aa26      	add	r2, sp, #152	; 0x98
 801af72:	4651      	mov	r1, sl
 801af74:	4658      	mov	r0, fp
 801af76:	f000 fec7 	bl	801bd08 <__sprint_r>
 801af7a:	2800      	cmp	r0, #0
 801af7c:	f040 861c 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801af80:	ac29      	add	r4, sp, #164	; 0xa4
 801af82:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 801af86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801af88:	b16a      	cbz	r2, 801afa6 <_vfprintf_r+0x75e>
 801af8a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801af8e:	6022      	str	r2, [r4, #0]
 801af90:	2201      	movs	r2, #1
 801af92:	4413      	add	r3, r2
 801af94:	9328      	str	r3, [sp, #160]	; 0xa0
 801af96:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801af98:	6062      	str	r2, [r4, #4]
 801af9a:	4413      	add	r3, r2
 801af9c:	2b07      	cmp	r3, #7
 801af9e:	9327      	str	r3, [sp, #156]	; 0x9c
 801afa0:	f300 82dc 	bgt.w	801b55c <_vfprintf_r+0xd14>
 801afa4:	3408      	adds	r4, #8
 801afa6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801afa8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801afaa:	b162      	cbz	r2, 801afc6 <_vfprintf_r+0x77e>
 801afac:	aa1f      	add	r2, sp, #124	; 0x7c
 801afae:	6022      	str	r2, [r4, #0]
 801afb0:	2202      	movs	r2, #2
 801afb2:	4413      	add	r3, r2
 801afb4:	9328      	str	r3, [sp, #160]	; 0xa0
 801afb6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801afb8:	6062      	str	r2, [r4, #4]
 801afba:	3301      	adds	r3, #1
 801afbc:	2b07      	cmp	r3, #7
 801afbe:	9327      	str	r3, [sp, #156]	; 0x9c
 801afc0:	f300 82d6 	bgt.w	801b570 <_vfprintf_r+0xd28>
 801afc4:	3408      	adds	r4, #8
 801afc6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801afc8:	2b80      	cmp	r3, #128	; 0x80
 801afca:	d122      	bne.n	801b012 <_vfprintf_r+0x7ca>
 801afcc:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801afd0:	1a9b      	subs	r3, r3, r2
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	9316      	str	r3, [sp, #88]	; 0x58
 801afd6:	dd1c      	ble.n	801b012 <_vfprintf_r+0x7ca>
 801afd8:	9816      	ldr	r0, [sp, #88]	; 0x58
 801afda:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801afde:	2810      	cmp	r0, #16
 801afe0:	4818      	ldr	r0, [pc, #96]	; (801b044 <_vfprintf_r+0x7fc>)
 801afe2:	6020      	str	r0, [r4, #0]
 801afe4:	f102 0201 	add.w	r2, r2, #1
 801afe8:	f104 0108 	add.w	r1, r4, #8
 801afec:	f300 82ca 	bgt.w	801b584 <_vfprintf_r+0xd3c>
 801aff0:	9816      	ldr	r0, [sp, #88]	; 0x58
 801aff2:	6060      	str	r0, [r4, #4]
 801aff4:	4403      	add	r3, r0
 801aff6:	2a07      	cmp	r2, #7
 801aff8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801affc:	f340 82d7 	ble.w	801b5ae <_vfprintf_r+0xd66>
 801b000:	aa26      	add	r2, sp, #152	; 0x98
 801b002:	4651      	mov	r1, sl
 801b004:	4658      	mov	r0, fp
 801b006:	f000 fe7f 	bl	801bd08 <__sprint_r>
 801b00a:	2800      	cmp	r0, #0
 801b00c:	f040 85d4 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b010:	ac29      	add	r4, sp, #164	; 0xa4
 801b012:	9b07      	ldr	r3, [sp, #28]
 801b014:	1aff      	subs	r7, r7, r3
 801b016:	2f00      	cmp	r7, #0
 801b018:	dd28      	ble.n	801b06c <_vfprintf_r+0x824>
 801b01a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b01e:	4809      	ldr	r0, [pc, #36]	; (801b044 <_vfprintf_r+0x7fc>)
 801b020:	6020      	str	r0, [r4, #0]
 801b022:	2f10      	cmp	r7, #16
 801b024:	f103 0301 	add.w	r3, r3, #1
 801b028:	f104 0108 	add.w	r1, r4, #8
 801b02c:	e00c      	b.n	801b048 <_vfprintf_r+0x800>
 801b02e:	bf00      	nop
 801b030:	0802063e 	.word	0x0802063e
 801b034:	0802062d 	.word	0x0802062d
 801b038:	40300000 	.word	0x40300000
 801b03c:	3fe00000 	.word	0x3fe00000
 801b040:	08020671 	.word	0x08020671
 801b044:	08020681 	.word	0x08020681
 801b048:	f300 82b3 	bgt.w	801b5b2 <_vfprintf_r+0xd6a>
 801b04c:	6067      	str	r7, [r4, #4]
 801b04e:	2b07      	cmp	r3, #7
 801b050:	4417      	add	r7, r2
 801b052:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801b056:	f340 82bf 	ble.w	801b5d8 <_vfprintf_r+0xd90>
 801b05a:	aa26      	add	r2, sp, #152	; 0x98
 801b05c:	4651      	mov	r1, sl
 801b05e:	4658      	mov	r0, fp
 801b060:	f000 fe52 	bl	801bd08 <__sprint_r>
 801b064:	2800      	cmp	r0, #0
 801b066:	f040 85a7 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b06a:	ac29      	add	r4, sp, #164	; 0xa4
 801b06c:	f418 7f80 	tst.w	r8, #256	; 0x100
 801b070:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 801b072:	f040 82b7 	bne.w	801b5e4 <_vfprintf_r+0xd9c>
 801b076:	9b07      	ldr	r3, [sp, #28]
 801b078:	f8c4 9000 	str.w	r9, [r4]
 801b07c:	441f      	add	r7, r3
 801b07e:	6063      	str	r3, [r4, #4]
 801b080:	9728      	str	r7, [sp, #160]	; 0xa0
 801b082:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b084:	3301      	adds	r3, #1
 801b086:	2b07      	cmp	r3, #7
 801b088:	9327      	str	r3, [sp, #156]	; 0x9c
 801b08a:	f300 82f0 	bgt.w	801b66e <_vfprintf_r+0xe26>
 801b08e:	3408      	adds	r4, #8
 801b090:	f018 0f04 	tst.w	r8, #4
 801b094:	f040 8572 	bne.w	801bb7c <_vfprintf_r+0x1334>
 801b098:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
 801b09c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801b09e:	428a      	cmp	r2, r1
 801b0a0:	bfac      	ite	ge
 801b0a2:	189b      	addge	r3, r3, r2
 801b0a4:	185b      	addlt	r3, r3, r1
 801b0a6:	9312      	str	r3, [sp, #72]	; 0x48
 801b0a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b0aa:	b13b      	cbz	r3, 801b0bc <_vfprintf_r+0x874>
 801b0ac:	aa26      	add	r2, sp, #152	; 0x98
 801b0ae:	4651      	mov	r1, sl
 801b0b0:	4658      	mov	r0, fp
 801b0b2:	f000 fe29 	bl	801bd08 <__sprint_r>
 801b0b6:	2800      	cmp	r0, #0
 801b0b8:	f040 857e 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b0bc:	2300      	movs	r3, #0
 801b0be:	9327      	str	r3, [sp, #156]	; 0x9c
 801b0c0:	9b08      	ldr	r3, [sp, #32]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	f040 8594 	bne.w	801bbf0 <_vfprintf_r+0x13a8>
 801b0c8:	ac29      	add	r4, sp, #164	; 0xa4
 801b0ca:	e0e6      	b.n	801b29a <_vfprintf_r+0xa52>
 801b0cc:	9008      	str	r0, [sp, #32]
 801b0ce:	e630      	b.n	801ad32 <_vfprintf_r+0x4ea>
 801b0d0:	9008      	str	r0, [sp, #32]
 801b0d2:	2306      	movs	r3, #6
 801b0d4:	e61d      	b.n	801ad12 <_vfprintf_r+0x4ca>
 801b0d6:	9008      	str	r0, [sp, #32]
 801b0d8:	e62b      	b.n	801ad32 <_vfprintf_r+0x4ea>
 801b0da:	f802 0c01 	strb.w	r0, [r2, #-1]
 801b0de:	e694      	b.n	801ae0a <_vfprintf_r+0x5c2>
 801b0e0:	f803 0b01 	strb.w	r0, [r3], #1
 801b0e4:	1aca      	subs	r2, r1, r3
 801b0e6:	2a00      	cmp	r2, #0
 801b0e8:	dafa      	bge.n	801b0e0 <_vfprintf_r+0x898>
 801b0ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b0ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b0ee:	3201      	adds	r2, #1
 801b0f0:	f103 0301 	add.w	r3, r3, #1
 801b0f4:	bfb8      	it	lt
 801b0f6:	2300      	movlt	r3, #0
 801b0f8:	441d      	add	r5, r3
 801b0fa:	e696      	b.n	801ae2a <_vfprintf_r+0x5e2>
 801b0fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b0fe:	462b      	mov	r3, r5
 801b100:	18a9      	adds	r1, r5, r2
 801b102:	2030      	movs	r0, #48	; 0x30
 801b104:	e7ee      	b.n	801b0e4 <_vfprintf_r+0x89c>
 801b106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b108:	2b46      	cmp	r3, #70	; 0x46
 801b10a:	d005      	beq.n	801b118 <_vfprintf_r+0x8d0>
 801b10c:	2b45      	cmp	r3, #69	; 0x45
 801b10e:	d11d      	bne.n	801b14c <_vfprintf_r+0x904>
 801b110:	9b07      	ldr	r3, [sp, #28]
 801b112:	1c5e      	adds	r6, r3, #1
 801b114:	2302      	movs	r3, #2
 801b116:	e001      	b.n	801b11c <_vfprintf_r+0x8d4>
 801b118:	9e07      	ldr	r6, [sp, #28]
 801b11a:	2303      	movs	r3, #3
 801b11c:	aa24      	add	r2, sp, #144	; 0x90
 801b11e:	9204      	str	r2, [sp, #16]
 801b120:	aa21      	add	r2, sp, #132	; 0x84
 801b122:	9203      	str	r2, [sp, #12]
 801b124:	aa20      	add	r2, sp, #128	; 0x80
 801b126:	e9cd 6201 	strd	r6, r2, [sp, #4]
 801b12a:	9300      	str	r3, [sp, #0]
 801b12c:	463a      	mov	r2, r7
 801b12e:	462b      	mov	r3, r5
 801b130:	4658      	mov	r0, fp
 801b132:	f001 fe29 	bl	801cd88 <_dtoa_r>
 801b136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b138:	2b47      	cmp	r3, #71	; 0x47
 801b13a:	4681      	mov	r9, r0
 801b13c:	d108      	bne.n	801b150 <_vfprintf_r+0x908>
 801b13e:	f018 0f01 	tst.w	r8, #1
 801b142:	d105      	bne.n	801b150 <_vfprintf_r+0x908>
 801b144:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b146:	eba3 0309 	sub.w	r3, r3, r9
 801b14a:	e670      	b.n	801ae2e <_vfprintf_r+0x5e6>
 801b14c:	9e07      	ldr	r6, [sp, #28]
 801b14e:	e7e1      	b.n	801b114 <_vfprintf_r+0x8cc>
 801b150:	eb09 0306 	add.w	r3, r9, r6
 801b154:	9309      	str	r3, [sp, #36]	; 0x24
 801b156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b158:	2b46      	cmp	r3, #70	; 0x46
 801b15a:	d111      	bne.n	801b180 <_vfprintf_r+0x938>
 801b15c:	f899 3000 	ldrb.w	r3, [r9]
 801b160:	2b30      	cmp	r3, #48	; 0x30
 801b162:	d109      	bne.n	801b178 <_vfprintf_r+0x930>
 801b164:	2200      	movs	r2, #0
 801b166:	2300      	movs	r3, #0
 801b168:	4638      	mov	r0, r7
 801b16a:	4629      	mov	r1, r5
 801b16c:	f7ed fe84 	bl	8008e78 <__aeabi_dcmpeq>
 801b170:	b910      	cbnz	r0, 801b178 <_vfprintf_r+0x930>
 801b172:	f1c6 0601 	rsb	r6, r6, #1
 801b176:	9620      	str	r6, [sp, #128]	; 0x80
 801b178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b17a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b17c:	441a      	add	r2, r3
 801b17e:	9209      	str	r2, [sp, #36]	; 0x24
 801b180:	2200      	movs	r2, #0
 801b182:	2300      	movs	r3, #0
 801b184:	4638      	mov	r0, r7
 801b186:	4629      	mov	r1, r5
 801b188:	f7ed fe76 	bl	8008e78 <__aeabi_dcmpeq>
 801b18c:	b108      	cbz	r0, 801b192 <_vfprintf_r+0x94a>
 801b18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b190:	9324      	str	r3, [sp, #144]	; 0x90
 801b192:	2230      	movs	r2, #48	; 0x30
 801b194:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b196:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b198:	4299      	cmp	r1, r3
 801b19a:	d9d3      	bls.n	801b144 <_vfprintf_r+0x8fc>
 801b19c:	1c59      	adds	r1, r3, #1
 801b19e:	9124      	str	r1, [sp, #144]	; 0x90
 801b1a0:	701a      	strb	r2, [r3, #0]
 801b1a2:	e7f7      	b.n	801b194 <_vfprintf_r+0x94c>
 801b1a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b1a6:	2b46      	cmp	r3, #70	; 0x46
 801b1a8:	f47f ae50 	bne.w	801ae4c <_vfprintf_r+0x604>
 801b1ac:	9a07      	ldr	r2, [sp, #28]
 801b1ae:	f008 0301 	and.w	r3, r8, #1
 801b1b2:	2d00      	cmp	r5, #0
 801b1b4:	ea43 0302 	orr.w	r3, r3, r2
 801b1b8:	dd29      	ble.n	801b20e <_vfprintf_r+0x9c6>
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d034      	beq.n	801b228 <_vfprintf_r+0x9e0>
 801b1be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b1c0:	18eb      	adds	r3, r5, r3
 801b1c2:	441a      	add	r2, r3
 801b1c4:	9207      	str	r2, [sp, #28]
 801b1c6:	2366      	movs	r3, #102	; 0x66
 801b1c8:	930b      	str	r3, [sp, #44]	; 0x2c
 801b1ca:	e033      	b.n	801b234 <_vfprintf_r+0x9ec>
 801b1cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 801b1d0:	f805 6f01 	strb.w	r6, [r5, #1]!
 801b1d4:	e671      	b.n	801aeba <_vfprintf_r+0x672>
 801b1d6:	b941      	cbnz	r1, 801b1ea <_vfprintf_r+0x9a2>
 801b1d8:	2230      	movs	r2, #48	; 0x30
 801b1da:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 801b1de:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 801b1e2:	3330      	adds	r3, #48	; 0x30
 801b1e4:	f802 3b01 	strb.w	r3, [r2], #1
 801b1e8:	e673      	b.n	801aed2 <_vfprintf_r+0x68a>
 801b1ea:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801b1ee:	e7f8      	b.n	801b1e2 <_vfprintf_r+0x99a>
 801b1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1f2:	42ab      	cmp	r3, r5
 801b1f4:	dd10      	ble.n	801b218 <_vfprintf_r+0x9d0>
 801b1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b1fa:	2d00      	cmp	r5, #0
 801b1fc:	4413      	add	r3, r2
 801b1fe:	9307      	str	r3, [sp, #28]
 801b200:	dc10      	bgt.n	801b224 <_vfprintf_r+0x9dc>
 801b202:	9a07      	ldr	r2, [sp, #28]
 801b204:	f1c5 0301 	rsb	r3, r5, #1
 801b208:	441a      	add	r2, r3
 801b20a:	9207      	str	r2, [sp, #28]
 801b20c:	e00a      	b.n	801b224 <_vfprintf_r+0x9dc>
 801b20e:	b16b      	cbz	r3, 801b22c <_vfprintf_r+0x9e4>
 801b210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b212:	9a07      	ldr	r2, [sp, #28]
 801b214:	3301      	adds	r3, #1
 801b216:	e7d4      	b.n	801b1c2 <_vfprintf_r+0x97a>
 801b218:	f018 0f01 	tst.w	r8, #1
 801b21c:	d01f      	beq.n	801b25e <_vfprintf_r+0xa16>
 801b21e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b220:	18eb      	adds	r3, r5, r3
 801b222:	9307      	str	r3, [sp, #28]
 801b224:	2367      	movs	r3, #103	; 0x67
 801b226:	e7cf      	b.n	801b1c8 <_vfprintf_r+0x980>
 801b228:	9507      	str	r5, [sp, #28]
 801b22a:	e7cc      	b.n	801b1c6 <_vfprintf_r+0x97e>
 801b22c:	2366      	movs	r3, #102	; 0x66
 801b22e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b230:	2301      	movs	r3, #1
 801b232:	9307      	str	r3, [sp, #28]
 801b234:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801b238:	930c      	str	r3, [sp, #48]	; 0x30
 801b23a:	d021      	beq.n	801b280 <_vfprintf_r+0xa38>
 801b23c:	2600      	movs	r6, #0
 801b23e:	2d00      	cmp	r5, #0
 801b240:	960c      	str	r6, [sp, #48]	; 0x30
 801b242:	f77f ae5d 	ble.w	801af00 <_vfprintf_r+0x6b8>
 801b246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b248:	781b      	ldrb	r3, [r3, #0]
 801b24a:	2bff      	cmp	r3, #255	; 0xff
 801b24c:	d109      	bne.n	801b262 <_vfprintf_r+0xa1a>
 801b24e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b250:	9a07      	ldr	r2, [sp, #28]
 801b252:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b254:	4433      	add	r3, r6
 801b256:	fb01 2303 	mla	r3, r1, r3, r2
 801b25a:	9307      	str	r3, [sp, #28]
 801b25c:	e650      	b.n	801af00 <_vfprintf_r+0x6b8>
 801b25e:	9507      	str	r5, [sp, #28]
 801b260:	e7e0      	b.n	801b224 <_vfprintf_r+0x9dc>
 801b262:	42ab      	cmp	r3, r5
 801b264:	daf3      	bge.n	801b24e <_vfprintf_r+0xa06>
 801b266:	1aed      	subs	r5, r5, r3
 801b268:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b26a:	785b      	ldrb	r3, [r3, #1]
 801b26c:	b133      	cbz	r3, 801b27c <_vfprintf_r+0xa34>
 801b26e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b270:	3301      	adds	r3, #1
 801b272:	930c      	str	r3, [sp, #48]	; 0x30
 801b274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b276:	3301      	adds	r3, #1
 801b278:	930d      	str	r3, [sp, #52]	; 0x34
 801b27a:	e7e4      	b.n	801b246 <_vfprintf_r+0x9fe>
 801b27c:	3601      	adds	r6, #1
 801b27e:	e7e2      	b.n	801b246 <_vfprintf_r+0x9fe>
 801b280:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b282:	e63d      	b.n	801af00 <_vfprintf_r+0x6b8>
 801b284:	1d2b      	adds	r3, r5, #4
 801b286:	f018 0f20 	tst.w	r8, #32
 801b28a:	930a      	str	r3, [sp, #40]	; 0x28
 801b28c:	d00a      	beq.n	801b2a4 <_vfprintf_r+0xa5c>
 801b28e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b290:	682b      	ldr	r3, [r5, #0]
 801b292:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b294:	17d2      	asrs	r2, r2, #31
 801b296:	e9c3 1200 	strd	r1, r2, [r3]
 801b29a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b29c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 801b2a0:	f7ff bb53 	b.w	801a94a <_vfprintf_r+0x102>
 801b2a4:	f018 0f10 	tst.w	r8, #16
 801b2a8:	d003      	beq.n	801b2b2 <_vfprintf_r+0xa6a>
 801b2aa:	682b      	ldr	r3, [r5, #0]
 801b2ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b2ae:	601a      	str	r2, [r3, #0]
 801b2b0:	e7f3      	b.n	801b29a <_vfprintf_r+0xa52>
 801b2b2:	f018 0f40 	tst.w	r8, #64	; 0x40
 801b2b6:	d003      	beq.n	801b2c0 <_vfprintf_r+0xa78>
 801b2b8:	682b      	ldr	r3, [r5, #0]
 801b2ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b2bc:	801a      	strh	r2, [r3, #0]
 801b2be:	e7ec      	b.n	801b29a <_vfprintf_r+0xa52>
 801b2c0:	f418 7f00 	tst.w	r8, #512	; 0x200
 801b2c4:	d0f1      	beq.n	801b2aa <_vfprintf_r+0xa62>
 801b2c6:	682b      	ldr	r3, [r5, #0]
 801b2c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b2ca:	701a      	strb	r2, [r3, #0]
 801b2cc:	e7e5      	b.n	801b29a <_vfprintf_r+0xa52>
 801b2ce:	f048 0810 	orr.w	r8, r8, #16
 801b2d2:	f018 0320 	ands.w	r3, r8, #32
 801b2d6:	d020      	beq.n	801b31a <_vfprintf_r+0xad2>
 801b2d8:	3507      	adds	r5, #7
 801b2da:	f025 0307 	bic.w	r3, r5, #7
 801b2de:	461a      	mov	r2, r3
 801b2e0:	685e      	ldr	r6, [r3, #4]
 801b2e2:	f852 5b08 	ldr.w	r5, [r2], #8
 801b2e6:	920a      	str	r2, [sp, #40]	; 0x28
 801b2e8:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	2200      	movs	r2, #0
 801b2f0:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801b2f4:	9a07      	ldr	r2, [sp, #28]
 801b2f6:	3201      	adds	r2, #1
 801b2f8:	f000 848f 	beq.w	801bc1a <_vfprintf_r+0x13d2>
 801b2fc:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801b300:	9208      	str	r2, [sp, #32]
 801b302:	ea55 0206 	orrs.w	r2, r5, r6
 801b306:	f040 848e 	bne.w	801bc26 <_vfprintf_r+0x13de>
 801b30a:	9a07      	ldr	r2, [sp, #28]
 801b30c:	2a00      	cmp	r2, #0
 801b30e:	f000 80f4 	beq.w	801b4fa <_vfprintf_r+0xcb2>
 801b312:	2b01      	cmp	r3, #1
 801b314:	f040 848a 	bne.w	801bc2c <_vfprintf_r+0x13e4>
 801b318:	e09e      	b.n	801b458 <_vfprintf_r+0xc10>
 801b31a:	462a      	mov	r2, r5
 801b31c:	f018 0610 	ands.w	r6, r8, #16
 801b320:	f852 5b04 	ldr.w	r5, [r2], #4
 801b324:	920a      	str	r2, [sp, #40]	; 0x28
 801b326:	d001      	beq.n	801b32c <_vfprintf_r+0xae4>
 801b328:	461e      	mov	r6, r3
 801b32a:	e7dd      	b.n	801b2e8 <_vfprintf_r+0xaa0>
 801b32c:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801b330:	d001      	beq.n	801b336 <_vfprintf_r+0xaee>
 801b332:	b2ad      	uxth	r5, r5
 801b334:	e7d8      	b.n	801b2e8 <_vfprintf_r+0xaa0>
 801b336:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801b33a:	d0d5      	beq.n	801b2e8 <_vfprintf_r+0xaa0>
 801b33c:	b2ed      	uxtb	r5, r5
 801b33e:	e7f3      	b.n	801b328 <_vfprintf_r+0xae0>
 801b340:	462b      	mov	r3, r5
 801b342:	2278      	movs	r2, #120	; 0x78
 801b344:	f853 5b04 	ldr.w	r5, [r3], #4
 801b348:	930a      	str	r3, [sp, #40]	; 0x28
 801b34a:	f647 0330 	movw	r3, #30768	; 0x7830
 801b34e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 801b352:	4ba2      	ldr	r3, [pc, #648]	; (801b5dc <_vfprintf_r+0xd94>)
 801b354:	931a      	str	r3, [sp, #104]	; 0x68
 801b356:	2600      	movs	r6, #0
 801b358:	f048 0802 	orr.w	r8, r8, #2
 801b35c:	2302      	movs	r3, #2
 801b35e:	920b      	str	r2, [sp, #44]	; 0x2c
 801b360:	e7c5      	b.n	801b2ee <_vfprintf_r+0xaa6>
 801b362:	462b      	mov	r3, r5
 801b364:	2500      	movs	r5, #0
 801b366:	f853 9b04 	ldr.w	r9, [r3], #4
 801b36a:	930a      	str	r3, [sp, #40]	; 0x28
 801b36c:	9b07      	ldr	r3, [sp, #28]
 801b36e:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 801b372:	1c5e      	adds	r6, r3, #1
 801b374:	d010      	beq.n	801b398 <_vfprintf_r+0xb50>
 801b376:	461a      	mov	r2, r3
 801b378:	4629      	mov	r1, r5
 801b37a:	4648      	mov	r0, r9
 801b37c:	f7ed f900 	bl	8008580 <memchr>
 801b380:	9008      	str	r0, [sp, #32]
 801b382:	2800      	cmp	r0, #0
 801b384:	f000 80d0 	beq.w	801b528 <_vfprintf_r+0xce0>
 801b388:	eba0 0309 	sub.w	r3, r0, r9
 801b38c:	e9cd 3507 	strd	r3, r5, [sp, #28]
 801b390:	462f      	mov	r7, r5
 801b392:	462e      	mov	r6, r5
 801b394:	950c      	str	r5, [sp, #48]	; 0x30
 801b396:	e5bb      	b.n	801af10 <_vfprintf_r+0x6c8>
 801b398:	4648      	mov	r0, r9
 801b39a:	f7ed f941 	bl	8008620 <strlen>
 801b39e:	e9cd 0507 	strd	r0, r5, [sp, #28]
 801b3a2:	e45e      	b.n	801ac62 <_vfprintf_r+0x41a>
 801b3a4:	f048 0810 	orr.w	r8, r8, #16
 801b3a8:	f018 0320 	ands.w	r3, r8, #32
 801b3ac:	d009      	beq.n	801b3c2 <_vfprintf_r+0xb7a>
 801b3ae:	3507      	adds	r5, #7
 801b3b0:	f025 0307 	bic.w	r3, r5, #7
 801b3b4:	461a      	mov	r2, r3
 801b3b6:	685e      	ldr	r6, [r3, #4]
 801b3b8:	f852 5b08 	ldr.w	r5, [r2], #8
 801b3bc:	920a      	str	r2, [sp, #40]	; 0x28
 801b3be:	2301      	movs	r3, #1
 801b3c0:	e795      	b.n	801b2ee <_vfprintf_r+0xaa6>
 801b3c2:	462a      	mov	r2, r5
 801b3c4:	f018 0610 	ands.w	r6, r8, #16
 801b3c8:	f852 5b04 	ldr.w	r5, [r2], #4
 801b3cc:	920a      	str	r2, [sp, #40]	; 0x28
 801b3ce:	d001      	beq.n	801b3d4 <_vfprintf_r+0xb8c>
 801b3d0:	461e      	mov	r6, r3
 801b3d2:	e7f4      	b.n	801b3be <_vfprintf_r+0xb76>
 801b3d4:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801b3d8:	d001      	beq.n	801b3de <_vfprintf_r+0xb96>
 801b3da:	b2ad      	uxth	r5, r5
 801b3dc:	e7ef      	b.n	801b3be <_vfprintf_r+0xb76>
 801b3de:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801b3e2:	d0ec      	beq.n	801b3be <_vfprintf_r+0xb76>
 801b3e4:	b2ed      	uxtb	r5, r5
 801b3e6:	e7f3      	b.n	801b3d0 <_vfprintf_r+0xb88>
 801b3e8:	4b7d      	ldr	r3, [pc, #500]	; (801b5e0 <_vfprintf_r+0xd98>)
 801b3ea:	931a      	str	r3, [sp, #104]	; 0x68
 801b3ec:	f018 0320 	ands.w	r3, r8, #32
 801b3f0:	d01b      	beq.n	801b42a <_vfprintf_r+0xbe2>
 801b3f2:	3507      	adds	r5, #7
 801b3f4:	f025 0307 	bic.w	r3, r5, #7
 801b3f8:	461a      	mov	r2, r3
 801b3fa:	685e      	ldr	r6, [r3, #4]
 801b3fc:	f852 5b08 	ldr.w	r5, [r2], #8
 801b400:	920a      	str	r2, [sp, #40]	; 0x28
 801b402:	f018 0f01 	tst.w	r8, #1
 801b406:	d00a      	beq.n	801b41e <_vfprintf_r+0xbd6>
 801b408:	ea55 0306 	orrs.w	r3, r5, r6
 801b40c:	d007      	beq.n	801b41e <_vfprintf_r+0xbd6>
 801b40e:	2330      	movs	r3, #48	; 0x30
 801b410:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801b414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b416:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801b41a:	f048 0802 	orr.w	r8, r8, #2
 801b41e:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801b422:	2302      	movs	r3, #2
 801b424:	e763      	b.n	801b2ee <_vfprintf_r+0xaa6>
 801b426:	4b6d      	ldr	r3, [pc, #436]	; (801b5dc <_vfprintf_r+0xd94>)
 801b428:	e7df      	b.n	801b3ea <_vfprintf_r+0xba2>
 801b42a:	462a      	mov	r2, r5
 801b42c:	f018 0610 	ands.w	r6, r8, #16
 801b430:	f852 5b04 	ldr.w	r5, [r2], #4
 801b434:	920a      	str	r2, [sp, #40]	; 0x28
 801b436:	d001      	beq.n	801b43c <_vfprintf_r+0xbf4>
 801b438:	461e      	mov	r6, r3
 801b43a:	e7e2      	b.n	801b402 <_vfprintf_r+0xbba>
 801b43c:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801b440:	d001      	beq.n	801b446 <_vfprintf_r+0xbfe>
 801b442:	b2ad      	uxth	r5, r5
 801b444:	e7dd      	b.n	801b402 <_vfprintf_r+0xbba>
 801b446:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801b44a:	d0da      	beq.n	801b402 <_vfprintf_r+0xbba>
 801b44c:	b2ed      	uxtb	r5, r5
 801b44e:	e7f3      	b.n	801b438 <_vfprintf_r+0xbf0>
 801b450:	2d0a      	cmp	r5, #10
 801b452:	f176 0300 	sbcs.w	r3, r6, #0
 801b456:	d205      	bcs.n	801b464 <_vfprintf_r+0xc1c>
 801b458:	3530      	adds	r5, #48	; 0x30
 801b45a:	f88d 5147 	strb.w	r5, [sp, #327]	; 0x147
 801b45e:	f20d 1947 	addw	r9, sp, #327	; 0x147
 801b462:	e3ff      	b.n	801bc64 <_vfprintf_r+0x141c>
 801b464:	2300      	movs	r3, #0
 801b466:	9309      	str	r3, [sp, #36]	; 0x24
 801b468:	9b08      	ldr	r3, [sp, #32]
 801b46a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b46e:	af52      	add	r7, sp, #328	; 0x148
 801b470:	930c      	str	r3, [sp, #48]	; 0x30
 801b472:	220a      	movs	r2, #10
 801b474:	2300      	movs	r3, #0
 801b476:	4628      	mov	r0, r5
 801b478:	4631      	mov	r1, r6
 801b47a:	f7ed febb 	bl	80091f4 <__aeabi_uldivmod>
 801b47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b480:	9014      	str	r0, [sp, #80]	; 0x50
 801b482:	3301      	adds	r3, #1
 801b484:	9309      	str	r3, [sp, #36]	; 0x24
 801b486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b488:	3230      	adds	r2, #48	; 0x30
 801b48a:	4688      	mov	r8, r1
 801b48c:	f107 39ff 	add.w	r9, r7, #4294967295
 801b490:	f807 2c01 	strb.w	r2, [r7, #-1]
 801b494:	b1d3      	cbz	r3, 801b4cc <_vfprintf_r+0xc84>
 801b496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b49a:	781b      	ldrb	r3, [r3, #0]
 801b49c:	429a      	cmp	r2, r3
 801b49e:	d115      	bne.n	801b4cc <_vfprintf_r+0xc84>
 801b4a0:	2aff      	cmp	r2, #255	; 0xff
 801b4a2:	d013      	beq.n	801b4cc <_vfprintf_r+0xc84>
 801b4a4:	2d0a      	cmp	r5, #10
 801b4a6:	f176 0300 	sbcs.w	r3, r6, #0
 801b4aa:	d30f      	bcc.n	801b4cc <_vfprintf_r+0xc84>
 801b4ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b4ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b4b0:	eba9 0903 	sub.w	r9, r9, r3
 801b4b4:	461a      	mov	r2, r3
 801b4b6:	4648      	mov	r0, r9
 801b4b8:	f001 fafb 	bl	801cab2 <strncpy>
 801b4bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4be:	785b      	ldrb	r3, [r3, #1]
 801b4c0:	b11b      	cbz	r3, 801b4ca <_vfprintf_r+0xc82>
 801b4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4c4:	3301      	adds	r3, #1
 801b4c6:	930d      	str	r3, [sp, #52]	; 0x34
 801b4c8:	2300      	movs	r3, #0
 801b4ca:	9309      	str	r3, [sp, #36]	; 0x24
 801b4cc:	2d0a      	cmp	r5, #10
 801b4ce:	f176 0600 	sbcs.w	r6, r6, #0
 801b4d2:	f0c0 83c7 	bcc.w	801bc64 <_vfprintf_r+0x141c>
 801b4d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b4d8:	4646      	mov	r6, r8
 801b4da:	464f      	mov	r7, r9
 801b4dc:	e7c9      	b.n	801b472 <_vfprintf_r+0xc2a>
 801b4de:	f005 030f 	and.w	r3, r5, #15
 801b4e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b4e4:	092d      	lsrs	r5, r5, #4
 801b4e6:	5cd3      	ldrb	r3, [r2, r3]
 801b4e8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801b4ec:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 801b4f0:	0936      	lsrs	r6, r6, #4
 801b4f2:	ea55 0306 	orrs.w	r3, r5, r6
 801b4f6:	d1f2      	bne.n	801b4de <_vfprintf_r+0xc96>
 801b4f8:	e3b4      	b.n	801bc64 <_vfprintf_r+0x141c>
 801b4fa:	b933      	cbnz	r3, 801b50a <_vfprintf_r+0xcc2>
 801b4fc:	f018 0f01 	tst.w	r8, #1
 801b500:	d003      	beq.n	801b50a <_vfprintf_r+0xcc2>
 801b502:	2330      	movs	r3, #48	; 0x30
 801b504:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 801b508:	e7a9      	b.n	801b45e <_vfprintf_r+0xc16>
 801b50a:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801b50e:	e3a9      	b.n	801bc64 <_vfprintf_r+0x141c>
 801b510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b512:	2b00      	cmp	r3, #0
 801b514:	f000 8372 	beq.w	801bbfc <_vfprintf_r+0x13b4>
 801b518:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801b51c:	2300      	movs	r3, #0
 801b51e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801b522:	950a      	str	r5, [sp, #40]	; 0x28
 801b524:	f7ff bb2f 	b.w	801ab86 <_vfprintf_r+0x33e>
 801b528:	9f08      	ldr	r7, [sp, #32]
 801b52a:	f7ff bb9b 	b.w	801ac64 <_vfprintf_r+0x41c>
 801b52e:	2010      	movs	r0, #16
 801b530:	4403      	add	r3, r0
 801b532:	2a07      	cmp	r2, #7
 801b534:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801b538:	6060      	str	r0, [r4, #4]
 801b53a:	dd08      	ble.n	801b54e <_vfprintf_r+0xd06>
 801b53c:	aa26      	add	r2, sp, #152	; 0x98
 801b53e:	4651      	mov	r1, sl
 801b540:	4658      	mov	r0, fp
 801b542:	f000 fbe1 	bl	801bd08 <__sprint_r>
 801b546:	2800      	cmp	r0, #0
 801b548:	f040 8336 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b54c:	a929      	add	r1, sp, #164	; 0xa4
 801b54e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b550:	3b10      	subs	r3, #16
 801b552:	9316      	str	r3, [sp, #88]	; 0x58
 801b554:	460c      	mov	r4, r1
 801b556:	e4f7      	b.n	801af48 <_vfprintf_r+0x700>
 801b558:	460c      	mov	r4, r1
 801b55a:	e512      	b.n	801af82 <_vfprintf_r+0x73a>
 801b55c:	aa26      	add	r2, sp, #152	; 0x98
 801b55e:	4651      	mov	r1, sl
 801b560:	4658      	mov	r0, fp
 801b562:	f000 fbd1 	bl	801bd08 <__sprint_r>
 801b566:	2800      	cmp	r0, #0
 801b568:	f040 8326 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b56c:	ac29      	add	r4, sp, #164	; 0xa4
 801b56e:	e51a      	b.n	801afa6 <_vfprintf_r+0x75e>
 801b570:	aa26      	add	r2, sp, #152	; 0x98
 801b572:	4651      	mov	r1, sl
 801b574:	4658      	mov	r0, fp
 801b576:	f000 fbc7 	bl	801bd08 <__sprint_r>
 801b57a:	2800      	cmp	r0, #0
 801b57c:	f040 831c 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b580:	ac29      	add	r4, sp, #164	; 0xa4
 801b582:	e520      	b.n	801afc6 <_vfprintf_r+0x77e>
 801b584:	2010      	movs	r0, #16
 801b586:	4403      	add	r3, r0
 801b588:	2a07      	cmp	r2, #7
 801b58a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801b58e:	6060      	str	r0, [r4, #4]
 801b590:	dd08      	ble.n	801b5a4 <_vfprintf_r+0xd5c>
 801b592:	aa26      	add	r2, sp, #152	; 0x98
 801b594:	4651      	mov	r1, sl
 801b596:	4658      	mov	r0, fp
 801b598:	f000 fbb6 	bl	801bd08 <__sprint_r>
 801b59c:	2800      	cmp	r0, #0
 801b59e:	f040 830b 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b5a2:	a929      	add	r1, sp, #164	; 0xa4
 801b5a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b5a6:	3b10      	subs	r3, #16
 801b5a8:	9316      	str	r3, [sp, #88]	; 0x58
 801b5aa:	460c      	mov	r4, r1
 801b5ac:	e514      	b.n	801afd8 <_vfprintf_r+0x790>
 801b5ae:	460c      	mov	r4, r1
 801b5b0:	e52f      	b.n	801b012 <_vfprintf_r+0x7ca>
 801b5b2:	2010      	movs	r0, #16
 801b5b4:	4402      	add	r2, r0
 801b5b6:	2b07      	cmp	r3, #7
 801b5b8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b5bc:	6060      	str	r0, [r4, #4]
 801b5be:	dd08      	ble.n	801b5d2 <_vfprintf_r+0xd8a>
 801b5c0:	aa26      	add	r2, sp, #152	; 0x98
 801b5c2:	4651      	mov	r1, sl
 801b5c4:	4658      	mov	r0, fp
 801b5c6:	f000 fb9f 	bl	801bd08 <__sprint_r>
 801b5ca:	2800      	cmp	r0, #0
 801b5cc:	f040 82f4 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b5d0:	a929      	add	r1, sp, #164	; 0xa4
 801b5d2:	3f10      	subs	r7, #16
 801b5d4:	460c      	mov	r4, r1
 801b5d6:	e520      	b.n	801b01a <_vfprintf_r+0x7d2>
 801b5d8:	460c      	mov	r4, r1
 801b5da:	e547      	b.n	801b06c <_vfprintf_r+0x824>
 801b5dc:	0802062d 	.word	0x0802062d
 801b5e0:	0802063e 	.word	0x0802063e
 801b5e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b5e6:	2b65      	cmp	r3, #101	; 0x65
 801b5e8:	f340 822e 	ble.w	801ba48 <_vfprintf_r+0x1200>
 801b5ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b5f0:	2200      	movs	r2, #0
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	f7ed fc40 	bl	8008e78 <__aeabi_dcmpeq>
 801b5f8:	2800      	cmp	r0, #0
 801b5fa:	d068      	beq.n	801b6ce <_vfprintf_r+0xe86>
 801b5fc:	4b6d      	ldr	r3, [pc, #436]	; (801b7b4 <_vfprintf_r+0xf6c>)
 801b5fe:	6023      	str	r3, [r4, #0]
 801b600:	2301      	movs	r3, #1
 801b602:	441f      	add	r7, r3
 801b604:	6063      	str	r3, [r4, #4]
 801b606:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b608:	9728      	str	r7, [sp, #160]	; 0xa0
 801b60a:	3301      	adds	r3, #1
 801b60c:	2b07      	cmp	r3, #7
 801b60e:	9327      	str	r3, [sp, #156]	; 0x9c
 801b610:	dc37      	bgt.n	801b682 <_vfprintf_r+0xe3a>
 801b612:	3408      	adds	r4, #8
 801b614:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b618:	4293      	cmp	r3, r2
 801b61a:	db03      	blt.n	801b624 <_vfprintf_r+0xddc>
 801b61c:	f018 0f01 	tst.w	r8, #1
 801b620:	f43f ad36 	beq.w	801b090 <_vfprintf_r+0x848>
 801b624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b626:	6023      	str	r3, [r4, #0]
 801b628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b62a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b62c:	6063      	str	r3, [r4, #4]
 801b62e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b630:	4413      	add	r3, r2
 801b632:	9328      	str	r3, [sp, #160]	; 0xa0
 801b634:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b636:	3301      	adds	r3, #1
 801b638:	2b07      	cmp	r3, #7
 801b63a:	9327      	str	r3, [sp, #156]	; 0x9c
 801b63c:	dc2b      	bgt.n	801b696 <_vfprintf_r+0xe4e>
 801b63e:	3408      	adds	r4, #8
 801b640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b642:	1e5d      	subs	r5, r3, #1
 801b644:	2d00      	cmp	r5, #0
 801b646:	f77f ad23 	ble.w	801b090 <_vfprintf_r+0x848>
 801b64a:	4e5b      	ldr	r6, [pc, #364]	; (801b7b8 <_vfprintf_r+0xf70>)
 801b64c:	2710      	movs	r7, #16
 801b64e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b652:	2d10      	cmp	r5, #16
 801b654:	f103 0301 	add.w	r3, r3, #1
 801b658:	f104 0108 	add.w	r1, r4, #8
 801b65c:	6026      	str	r6, [r4, #0]
 801b65e:	dc24      	bgt.n	801b6aa <_vfprintf_r+0xe62>
 801b660:	6065      	str	r5, [r4, #4]
 801b662:	2b07      	cmp	r3, #7
 801b664:	4415      	add	r5, r2
 801b666:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801b66a:	f340 8284 	ble.w	801bb76 <_vfprintf_r+0x132e>
 801b66e:	aa26      	add	r2, sp, #152	; 0x98
 801b670:	4651      	mov	r1, sl
 801b672:	4658      	mov	r0, fp
 801b674:	f000 fb48 	bl	801bd08 <__sprint_r>
 801b678:	2800      	cmp	r0, #0
 801b67a:	f040 829d 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b67e:	ac29      	add	r4, sp, #164	; 0xa4
 801b680:	e506      	b.n	801b090 <_vfprintf_r+0x848>
 801b682:	aa26      	add	r2, sp, #152	; 0x98
 801b684:	4651      	mov	r1, sl
 801b686:	4658      	mov	r0, fp
 801b688:	f000 fb3e 	bl	801bd08 <__sprint_r>
 801b68c:	2800      	cmp	r0, #0
 801b68e:	f040 8293 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b692:	ac29      	add	r4, sp, #164	; 0xa4
 801b694:	e7be      	b.n	801b614 <_vfprintf_r+0xdcc>
 801b696:	aa26      	add	r2, sp, #152	; 0x98
 801b698:	4651      	mov	r1, sl
 801b69a:	4658      	mov	r0, fp
 801b69c:	f000 fb34 	bl	801bd08 <__sprint_r>
 801b6a0:	2800      	cmp	r0, #0
 801b6a2:	f040 8289 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b6a6:	ac29      	add	r4, sp, #164	; 0xa4
 801b6a8:	e7ca      	b.n	801b640 <_vfprintf_r+0xdf8>
 801b6aa:	3210      	adds	r2, #16
 801b6ac:	2b07      	cmp	r3, #7
 801b6ae:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b6b2:	6067      	str	r7, [r4, #4]
 801b6b4:	dd08      	ble.n	801b6c8 <_vfprintf_r+0xe80>
 801b6b6:	aa26      	add	r2, sp, #152	; 0x98
 801b6b8:	4651      	mov	r1, sl
 801b6ba:	4658      	mov	r0, fp
 801b6bc:	f000 fb24 	bl	801bd08 <__sprint_r>
 801b6c0:	2800      	cmp	r0, #0
 801b6c2:	f040 8279 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b6c6:	a929      	add	r1, sp, #164	; 0xa4
 801b6c8:	3d10      	subs	r5, #16
 801b6ca:	460c      	mov	r4, r1
 801b6cc:	e7bf      	b.n	801b64e <_vfprintf_r+0xe06>
 801b6ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	dc73      	bgt.n	801b7bc <_vfprintf_r+0xf74>
 801b6d4:	4b37      	ldr	r3, [pc, #220]	; (801b7b4 <_vfprintf_r+0xf6c>)
 801b6d6:	6023      	str	r3, [r4, #0]
 801b6d8:	2301      	movs	r3, #1
 801b6da:	441f      	add	r7, r3
 801b6dc:	6063      	str	r3, [r4, #4]
 801b6de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b6e0:	9728      	str	r7, [sp, #160]	; 0xa0
 801b6e2:	3301      	adds	r3, #1
 801b6e4:	2b07      	cmp	r3, #7
 801b6e6:	9327      	str	r3, [sp, #156]	; 0x9c
 801b6e8:	dc3d      	bgt.n	801b766 <_vfprintf_r+0xf1e>
 801b6ea:	3408      	adds	r4, #8
 801b6ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b6ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b6f0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801b6f2:	430b      	orrs	r3, r1
 801b6f4:	f008 0101 	and.w	r1, r8, #1
 801b6f8:	430b      	orrs	r3, r1
 801b6fa:	f43f acc9 	beq.w	801b090 <_vfprintf_r+0x848>
 801b6fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b700:	6023      	str	r3, [r4, #0]
 801b702:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b704:	6063      	str	r3, [r4, #4]
 801b706:	441a      	add	r2, r3
 801b708:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b70a:	9228      	str	r2, [sp, #160]	; 0xa0
 801b70c:	3301      	adds	r3, #1
 801b70e:	2b07      	cmp	r3, #7
 801b710:	9327      	str	r3, [sp, #156]	; 0x9c
 801b712:	dc32      	bgt.n	801b77a <_vfprintf_r+0xf32>
 801b714:	3408      	adds	r4, #8
 801b716:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b718:	2d00      	cmp	r5, #0
 801b71a:	da1b      	bge.n	801b754 <_vfprintf_r+0xf0c>
 801b71c:	4e26      	ldr	r6, [pc, #152]	; (801b7b8 <_vfprintf_r+0xf70>)
 801b71e:	426d      	negs	r5, r5
 801b720:	4623      	mov	r3, r4
 801b722:	2710      	movs	r7, #16
 801b724:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 801b728:	2d10      	cmp	r5, #16
 801b72a:	f102 0201 	add.w	r2, r2, #1
 801b72e:	f104 0408 	add.w	r4, r4, #8
 801b732:	601e      	str	r6, [r3, #0]
 801b734:	dc2b      	bgt.n	801b78e <_vfprintf_r+0xf46>
 801b736:	605d      	str	r5, [r3, #4]
 801b738:	2a07      	cmp	r2, #7
 801b73a:	440d      	add	r5, r1
 801b73c:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 801b740:	dd08      	ble.n	801b754 <_vfprintf_r+0xf0c>
 801b742:	aa26      	add	r2, sp, #152	; 0x98
 801b744:	4651      	mov	r1, sl
 801b746:	4658      	mov	r0, fp
 801b748:	f000 fade 	bl	801bd08 <__sprint_r>
 801b74c:	2800      	cmp	r0, #0
 801b74e:	f040 8233 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b752:	ac29      	add	r4, sp, #164	; 0xa4
 801b754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b758:	6063      	str	r3, [r4, #4]
 801b75a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b75c:	f8c4 9000 	str.w	r9, [r4]
 801b760:	4413      	add	r3, r2
 801b762:	9328      	str	r3, [sp, #160]	; 0xa0
 801b764:	e48d      	b.n	801b082 <_vfprintf_r+0x83a>
 801b766:	aa26      	add	r2, sp, #152	; 0x98
 801b768:	4651      	mov	r1, sl
 801b76a:	4658      	mov	r0, fp
 801b76c:	f000 facc 	bl	801bd08 <__sprint_r>
 801b770:	2800      	cmp	r0, #0
 801b772:	f040 8221 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b776:	ac29      	add	r4, sp, #164	; 0xa4
 801b778:	e7b8      	b.n	801b6ec <_vfprintf_r+0xea4>
 801b77a:	aa26      	add	r2, sp, #152	; 0x98
 801b77c:	4651      	mov	r1, sl
 801b77e:	4658      	mov	r0, fp
 801b780:	f000 fac2 	bl	801bd08 <__sprint_r>
 801b784:	2800      	cmp	r0, #0
 801b786:	f040 8217 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b78a:	ac29      	add	r4, sp, #164	; 0xa4
 801b78c:	e7c3      	b.n	801b716 <_vfprintf_r+0xece>
 801b78e:	3110      	adds	r1, #16
 801b790:	2a07      	cmp	r2, #7
 801b792:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801b796:	605f      	str	r7, [r3, #4]
 801b798:	dd08      	ble.n	801b7ac <_vfprintf_r+0xf64>
 801b79a:	aa26      	add	r2, sp, #152	; 0x98
 801b79c:	4651      	mov	r1, sl
 801b79e:	4658      	mov	r0, fp
 801b7a0:	f000 fab2 	bl	801bd08 <__sprint_r>
 801b7a4:	2800      	cmp	r0, #0
 801b7a6:	f040 8207 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b7aa:	ac29      	add	r4, sp, #164	; 0xa4
 801b7ac:	3d10      	subs	r5, #16
 801b7ae:	4623      	mov	r3, r4
 801b7b0:	e7b8      	b.n	801b724 <_vfprintf_r+0xedc>
 801b7b2:	bf00      	nop
 801b7b4:	0802064f 	.word	0x0802064f
 801b7b8:	08020681 	.word	0x08020681
 801b7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7be:	42ab      	cmp	r3, r5
 801b7c0:	bfa8      	it	ge
 801b7c2:	462b      	movge	r3, r5
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	9307      	str	r3, [sp, #28]
 801b7c8:	dd0a      	ble.n	801b7e0 <_vfprintf_r+0xf98>
 801b7ca:	441f      	add	r7, r3
 801b7cc:	e9c4 9300 	strd	r9, r3, [r4]
 801b7d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b7d2:	9728      	str	r7, [sp, #160]	; 0xa0
 801b7d4:	3301      	adds	r3, #1
 801b7d6:	2b07      	cmp	r3, #7
 801b7d8:	9327      	str	r3, [sp, #156]	; 0x9c
 801b7da:	f300 8084 	bgt.w	801b8e6 <_vfprintf_r+0x109e>
 801b7de:	3408      	adds	r4, #8
 801b7e0:	9b07      	ldr	r3, [sp, #28]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	bfac      	ite	ge
 801b7e6:	1aef      	subge	r7, r5, r3
 801b7e8:	462f      	movlt	r7, r5
 801b7ea:	2f00      	cmp	r7, #0
 801b7ec:	dd19      	ble.n	801b822 <_vfprintf_r+0xfda>
 801b7ee:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b7f2:	4894      	ldr	r0, [pc, #592]	; (801ba44 <_vfprintf_r+0x11fc>)
 801b7f4:	6020      	str	r0, [r4, #0]
 801b7f6:	2f10      	cmp	r7, #16
 801b7f8:	f103 0301 	add.w	r3, r3, #1
 801b7fc:	f104 0108 	add.w	r1, r4, #8
 801b800:	dc7b      	bgt.n	801b8fa <_vfprintf_r+0x10b2>
 801b802:	6067      	str	r7, [r4, #4]
 801b804:	2b07      	cmp	r3, #7
 801b806:	4417      	add	r7, r2
 801b808:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801b80c:	f340 8088 	ble.w	801b920 <_vfprintf_r+0x10d8>
 801b810:	aa26      	add	r2, sp, #152	; 0x98
 801b812:	4651      	mov	r1, sl
 801b814:	4658      	mov	r0, fp
 801b816:	f000 fa77 	bl	801bd08 <__sprint_r>
 801b81a:	2800      	cmp	r0, #0
 801b81c:	f040 81cc 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b820:	ac29      	add	r4, sp, #164	; 0xa4
 801b822:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801b826:	444d      	add	r5, r9
 801b828:	d009      	beq.n	801b83e <_vfprintf_r+0xff6>
 801b82a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d179      	bne.n	801b924 <_vfprintf_r+0x10dc>
 801b830:	2e00      	cmp	r6, #0
 801b832:	d179      	bne.n	801b928 <_vfprintf_r+0x10e0>
 801b834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b836:	444b      	add	r3, r9
 801b838:	429d      	cmp	r5, r3
 801b83a:	bf28      	it	cs
 801b83c:	461d      	movcs	r5, r3
 801b83e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b842:	4293      	cmp	r3, r2
 801b844:	db02      	blt.n	801b84c <_vfprintf_r+0x1004>
 801b846:	f018 0f01 	tst.w	r8, #1
 801b84a:	d00e      	beq.n	801b86a <_vfprintf_r+0x1022>
 801b84c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b84e:	6023      	str	r3, [r4, #0]
 801b850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b854:	6063      	str	r3, [r4, #4]
 801b856:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b858:	4413      	add	r3, r2
 801b85a:	9328      	str	r3, [sp, #160]	; 0xa0
 801b85c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b85e:	3301      	adds	r3, #1
 801b860:	2b07      	cmp	r3, #7
 801b862:	9327      	str	r3, [sp, #156]	; 0x9c
 801b864:	f300 80da 	bgt.w	801ba1c <_vfprintf_r+0x11d4>
 801b868:	3408      	adds	r4, #8
 801b86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b86c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801b86e:	1b9e      	subs	r6, r3, r6
 801b870:	444b      	add	r3, r9
 801b872:	1b5b      	subs	r3, r3, r5
 801b874:	429e      	cmp	r6, r3
 801b876:	bfa8      	it	ge
 801b878:	461e      	movge	r6, r3
 801b87a:	2e00      	cmp	r6, #0
 801b87c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b87e:	dd0a      	ble.n	801b896 <_vfprintf_r+0x104e>
 801b880:	4433      	add	r3, r6
 801b882:	9328      	str	r3, [sp, #160]	; 0xa0
 801b884:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b886:	3301      	adds	r3, #1
 801b888:	2b07      	cmp	r3, #7
 801b88a:	e9c4 5600 	strd	r5, r6, [r4]
 801b88e:	9327      	str	r3, [sp, #156]	; 0x9c
 801b890:	f300 80ce 	bgt.w	801ba30 <_vfprintf_r+0x11e8>
 801b894:	3408      	adds	r4, #8
 801b896:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b89a:	2e00      	cmp	r6, #0
 801b89c:	eba3 0505 	sub.w	r5, r3, r5
 801b8a0:	bfa8      	it	ge
 801b8a2:	1bad      	subge	r5, r5, r6
 801b8a4:	2d00      	cmp	r5, #0
 801b8a6:	f77f abf3 	ble.w	801b090 <_vfprintf_r+0x848>
 801b8aa:	4e66      	ldr	r6, [pc, #408]	; (801ba44 <_vfprintf_r+0x11fc>)
 801b8ac:	2710      	movs	r7, #16
 801b8ae:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b8b2:	2d10      	cmp	r5, #16
 801b8b4:	f103 0301 	add.w	r3, r3, #1
 801b8b8:	f104 0108 	add.w	r1, r4, #8
 801b8bc:	6026      	str	r6, [r4, #0]
 801b8be:	f77f aecf 	ble.w	801b660 <_vfprintf_r+0xe18>
 801b8c2:	3210      	adds	r2, #16
 801b8c4:	2b07      	cmp	r3, #7
 801b8c6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b8ca:	6067      	str	r7, [r4, #4]
 801b8cc:	dd08      	ble.n	801b8e0 <_vfprintf_r+0x1098>
 801b8ce:	aa26      	add	r2, sp, #152	; 0x98
 801b8d0:	4651      	mov	r1, sl
 801b8d2:	4658      	mov	r0, fp
 801b8d4:	f000 fa18 	bl	801bd08 <__sprint_r>
 801b8d8:	2800      	cmp	r0, #0
 801b8da:	f040 816d 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b8de:	a929      	add	r1, sp, #164	; 0xa4
 801b8e0:	3d10      	subs	r5, #16
 801b8e2:	460c      	mov	r4, r1
 801b8e4:	e7e3      	b.n	801b8ae <_vfprintf_r+0x1066>
 801b8e6:	aa26      	add	r2, sp, #152	; 0x98
 801b8e8:	4651      	mov	r1, sl
 801b8ea:	4658      	mov	r0, fp
 801b8ec:	f000 fa0c 	bl	801bd08 <__sprint_r>
 801b8f0:	2800      	cmp	r0, #0
 801b8f2:	f040 8161 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b8f6:	ac29      	add	r4, sp, #164	; 0xa4
 801b8f8:	e772      	b.n	801b7e0 <_vfprintf_r+0xf98>
 801b8fa:	2010      	movs	r0, #16
 801b8fc:	4402      	add	r2, r0
 801b8fe:	2b07      	cmp	r3, #7
 801b900:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b904:	6060      	str	r0, [r4, #4]
 801b906:	dd08      	ble.n	801b91a <_vfprintf_r+0x10d2>
 801b908:	aa26      	add	r2, sp, #152	; 0x98
 801b90a:	4651      	mov	r1, sl
 801b90c:	4658      	mov	r0, fp
 801b90e:	f000 f9fb 	bl	801bd08 <__sprint_r>
 801b912:	2800      	cmp	r0, #0
 801b914:	f040 8150 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b918:	a929      	add	r1, sp, #164	; 0xa4
 801b91a:	3f10      	subs	r7, #16
 801b91c:	460c      	mov	r4, r1
 801b91e:	e766      	b.n	801b7ee <_vfprintf_r+0xfa6>
 801b920:	460c      	mov	r4, r1
 801b922:	e77e      	b.n	801b822 <_vfprintf_r+0xfda>
 801b924:	2e00      	cmp	r6, #0
 801b926:	d049      	beq.n	801b9bc <_vfprintf_r+0x1174>
 801b928:	3e01      	subs	r6, #1
 801b92a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b92c:	6023      	str	r3, [r4, #0]
 801b92e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b930:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b932:	6063      	str	r3, [r4, #4]
 801b934:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b936:	4413      	add	r3, r2
 801b938:	9328      	str	r3, [sp, #160]	; 0xa0
 801b93a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b93c:	3301      	adds	r3, #1
 801b93e:	2b07      	cmp	r3, #7
 801b940:	9327      	str	r3, [sp, #156]	; 0x9c
 801b942:	dc42      	bgt.n	801b9ca <_vfprintf_r+0x1182>
 801b944:	3408      	adds	r4, #8
 801b946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b948:	444b      	add	r3, r9
 801b94a:	1b5a      	subs	r2, r3, r5
 801b94c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b94e:	781b      	ldrb	r3, [r3, #0]
 801b950:	429a      	cmp	r2, r3
 801b952:	bfa8      	it	ge
 801b954:	461a      	movge	r2, r3
 801b956:	2a00      	cmp	r2, #0
 801b958:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b95a:	9207      	str	r2, [sp, #28]
 801b95c:	dd09      	ble.n	801b972 <_vfprintf_r+0x112a>
 801b95e:	4413      	add	r3, r2
 801b960:	9328      	str	r3, [sp, #160]	; 0xa0
 801b962:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b964:	3301      	adds	r3, #1
 801b966:	2b07      	cmp	r3, #7
 801b968:	e9c4 5200 	strd	r5, r2, [r4]
 801b96c:	9327      	str	r3, [sp, #156]	; 0x9c
 801b96e:	dc36      	bgt.n	801b9de <_vfprintf_r+0x1196>
 801b970:	3408      	adds	r4, #8
 801b972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b974:	781f      	ldrb	r7, [r3, #0]
 801b976:	9b07      	ldr	r3, [sp, #28]
 801b978:	2b00      	cmp	r3, #0
 801b97a:	bfa8      	it	ge
 801b97c:	1aff      	subge	r7, r7, r3
 801b97e:	2f00      	cmp	r7, #0
 801b980:	dd18      	ble.n	801b9b4 <_vfprintf_r+0x116c>
 801b982:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b986:	482f      	ldr	r0, [pc, #188]	; (801ba44 <_vfprintf_r+0x11fc>)
 801b988:	6020      	str	r0, [r4, #0]
 801b98a:	2f10      	cmp	r7, #16
 801b98c:	f103 0301 	add.w	r3, r3, #1
 801b990:	f104 0108 	add.w	r1, r4, #8
 801b994:	dc2d      	bgt.n	801b9f2 <_vfprintf_r+0x11aa>
 801b996:	6067      	str	r7, [r4, #4]
 801b998:	2b07      	cmp	r3, #7
 801b99a:	4417      	add	r7, r2
 801b99c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801b9a0:	dd3a      	ble.n	801ba18 <_vfprintf_r+0x11d0>
 801b9a2:	aa26      	add	r2, sp, #152	; 0x98
 801b9a4:	4651      	mov	r1, sl
 801b9a6:	4658      	mov	r0, fp
 801b9a8:	f000 f9ae 	bl	801bd08 <__sprint_r>
 801b9ac:	2800      	cmp	r0, #0
 801b9ae:	f040 8103 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b9b2:	ac29      	add	r4, sp, #164	; 0xa4
 801b9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9b6:	781b      	ldrb	r3, [r3, #0]
 801b9b8:	441d      	add	r5, r3
 801b9ba:	e736      	b.n	801b82a <_vfprintf_r+0xfe2>
 801b9bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9be:	3b01      	subs	r3, #1
 801b9c0:	930d      	str	r3, [sp, #52]	; 0x34
 801b9c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b9c4:	3b01      	subs	r3, #1
 801b9c6:	930c      	str	r3, [sp, #48]	; 0x30
 801b9c8:	e7af      	b.n	801b92a <_vfprintf_r+0x10e2>
 801b9ca:	aa26      	add	r2, sp, #152	; 0x98
 801b9cc:	4651      	mov	r1, sl
 801b9ce:	4658      	mov	r0, fp
 801b9d0:	f000 f99a 	bl	801bd08 <__sprint_r>
 801b9d4:	2800      	cmp	r0, #0
 801b9d6:	f040 80ef 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b9da:	ac29      	add	r4, sp, #164	; 0xa4
 801b9dc:	e7b3      	b.n	801b946 <_vfprintf_r+0x10fe>
 801b9de:	aa26      	add	r2, sp, #152	; 0x98
 801b9e0:	4651      	mov	r1, sl
 801b9e2:	4658      	mov	r0, fp
 801b9e4:	f000 f990 	bl	801bd08 <__sprint_r>
 801b9e8:	2800      	cmp	r0, #0
 801b9ea:	f040 80e5 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801b9ee:	ac29      	add	r4, sp, #164	; 0xa4
 801b9f0:	e7bf      	b.n	801b972 <_vfprintf_r+0x112a>
 801b9f2:	2010      	movs	r0, #16
 801b9f4:	4402      	add	r2, r0
 801b9f6:	2b07      	cmp	r3, #7
 801b9f8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b9fc:	6060      	str	r0, [r4, #4]
 801b9fe:	dd08      	ble.n	801ba12 <_vfprintf_r+0x11ca>
 801ba00:	aa26      	add	r2, sp, #152	; 0x98
 801ba02:	4651      	mov	r1, sl
 801ba04:	4658      	mov	r0, fp
 801ba06:	f000 f97f 	bl	801bd08 <__sprint_r>
 801ba0a:	2800      	cmp	r0, #0
 801ba0c:	f040 80d4 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801ba10:	a929      	add	r1, sp, #164	; 0xa4
 801ba12:	3f10      	subs	r7, #16
 801ba14:	460c      	mov	r4, r1
 801ba16:	e7b4      	b.n	801b982 <_vfprintf_r+0x113a>
 801ba18:	460c      	mov	r4, r1
 801ba1a:	e7cb      	b.n	801b9b4 <_vfprintf_r+0x116c>
 801ba1c:	aa26      	add	r2, sp, #152	; 0x98
 801ba1e:	4651      	mov	r1, sl
 801ba20:	4658      	mov	r0, fp
 801ba22:	f000 f971 	bl	801bd08 <__sprint_r>
 801ba26:	2800      	cmp	r0, #0
 801ba28:	f040 80c6 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801ba2c:	ac29      	add	r4, sp, #164	; 0xa4
 801ba2e:	e71c      	b.n	801b86a <_vfprintf_r+0x1022>
 801ba30:	aa26      	add	r2, sp, #152	; 0x98
 801ba32:	4651      	mov	r1, sl
 801ba34:	4658      	mov	r0, fp
 801ba36:	f000 f967 	bl	801bd08 <__sprint_r>
 801ba3a:	2800      	cmp	r0, #0
 801ba3c:	f040 80bc 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801ba40:	ac29      	add	r4, sp, #164	; 0xa4
 801ba42:	e728      	b.n	801b896 <_vfprintf_r+0x104e>
 801ba44:	08020681 	.word	0x08020681
 801ba48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba4a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ba4c:	2a01      	cmp	r2, #1
 801ba4e:	f107 0701 	add.w	r7, r7, #1
 801ba52:	f103 0301 	add.w	r3, r3, #1
 801ba56:	f104 0508 	add.w	r5, r4, #8
 801ba5a:	dc02      	bgt.n	801ba62 <_vfprintf_r+0x121a>
 801ba5c:	f018 0f01 	tst.w	r8, #1
 801ba60:	d07e      	beq.n	801bb60 <_vfprintf_r+0x1318>
 801ba62:	2201      	movs	r2, #1
 801ba64:	2b07      	cmp	r3, #7
 801ba66:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801ba6a:	f8c4 9000 	str.w	r9, [r4]
 801ba6e:	6062      	str	r2, [r4, #4]
 801ba70:	dd08      	ble.n	801ba84 <_vfprintf_r+0x123c>
 801ba72:	aa26      	add	r2, sp, #152	; 0x98
 801ba74:	4651      	mov	r1, sl
 801ba76:	4658      	mov	r0, fp
 801ba78:	f000 f946 	bl	801bd08 <__sprint_r>
 801ba7c:	2800      	cmp	r0, #0
 801ba7e:	f040 809b 	bne.w	801bbb8 <_vfprintf_r+0x1370>
 801ba82:	ad29      	add	r5, sp, #164	; 0xa4
 801ba84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ba86:	602b      	str	r3, [r5, #0]
 801ba88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ba8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ba8c:	606b      	str	r3, [r5, #4]
 801ba8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ba90:	4413      	add	r3, r2
 801ba92:	9328      	str	r3, [sp, #160]	; 0xa0
 801ba94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ba96:	3301      	adds	r3, #1
 801ba98:	2b07      	cmp	r3, #7
 801ba9a:	9327      	str	r3, [sp, #156]	; 0x9c
 801ba9c:	dc32      	bgt.n	801bb04 <_vfprintf_r+0x12bc>
 801ba9e:	3508      	adds	r5, #8
 801baa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801baa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801baa6:	1e5c      	subs	r4, r3, #1
 801baa8:	2200      	movs	r2, #0
 801baaa:	2300      	movs	r3, #0
 801baac:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
 801bab0:	f7ed f9e2 	bl	8008e78 <__aeabi_dcmpeq>
 801bab4:	2800      	cmp	r0, #0
 801bab6:	d12e      	bne.n	801bb16 <_vfprintf_r+0x12ce>
 801bab8:	f109 0301 	add.w	r3, r9, #1
 801babc:	e9c5 3400 	strd	r3, r4, [r5]
 801bac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bac2:	3701      	adds	r7, #1
 801bac4:	3e01      	subs	r6, #1
 801bac6:	441e      	add	r6, r3
 801bac8:	2f07      	cmp	r7, #7
 801baca:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
 801bace:	dd50      	ble.n	801bb72 <_vfprintf_r+0x132a>
 801bad0:	aa26      	add	r2, sp, #152	; 0x98
 801bad2:	4651      	mov	r1, sl
 801bad4:	4658      	mov	r0, fp
 801bad6:	f000 f917 	bl	801bd08 <__sprint_r>
 801bada:	2800      	cmp	r0, #0
 801badc:	d16c      	bne.n	801bbb8 <_vfprintf_r+0x1370>
 801bade:	ad29      	add	r5, sp, #164	; 0xa4
 801bae0:	ab22      	add	r3, sp, #136	; 0x88
 801bae2:	602b      	str	r3, [r5, #0]
 801bae4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bae6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801bae8:	606b      	str	r3, [r5, #4]
 801baea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801baec:	4413      	add	r3, r2
 801baee:	9328      	str	r3, [sp, #160]	; 0xa0
 801baf0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801baf2:	3301      	adds	r3, #1
 801baf4:	2b07      	cmp	r3, #7
 801baf6:	9327      	str	r3, [sp, #156]	; 0x9c
 801baf8:	f73f adb9 	bgt.w	801b66e <_vfprintf_r+0xe26>
 801bafc:	f105 0408 	add.w	r4, r5, #8
 801bb00:	f7ff bac6 	b.w	801b090 <_vfprintf_r+0x848>
 801bb04:	aa26      	add	r2, sp, #152	; 0x98
 801bb06:	4651      	mov	r1, sl
 801bb08:	4658      	mov	r0, fp
 801bb0a:	f000 f8fd 	bl	801bd08 <__sprint_r>
 801bb0e:	2800      	cmp	r0, #0
 801bb10:	d152      	bne.n	801bbb8 <_vfprintf_r+0x1370>
 801bb12:	ad29      	add	r5, sp, #164	; 0xa4
 801bb14:	e7c4      	b.n	801baa0 <_vfprintf_r+0x1258>
 801bb16:	2c00      	cmp	r4, #0
 801bb18:	dde2      	ble.n	801bae0 <_vfprintf_r+0x1298>
 801bb1a:	4e59      	ldr	r6, [pc, #356]	; (801bc80 <_vfprintf_r+0x1438>)
 801bb1c:	2710      	movs	r7, #16
 801bb1e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801bb22:	2c10      	cmp	r4, #16
 801bb24:	f103 0301 	add.w	r3, r3, #1
 801bb28:	f105 0108 	add.w	r1, r5, #8
 801bb2c:	602e      	str	r6, [r5, #0]
 801bb2e:	dc07      	bgt.n	801bb40 <_vfprintf_r+0x12f8>
 801bb30:	606c      	str	r4, [r5, #4]
 801bb32:	2b07      	cmp	r3, #7
 801bb34:	4414      	add	r4, r2
 801bb36:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 801bb3a:	dcc9      	bgt.n	801bad0 <_vfprintf_r+0x1288>
 801bb3c:	460d      	mov	r5, r1
 801bb3e:	e7cf      	b.n	801bae0 <_vfprintf_r+0x1298>
 801bb40:	3210      	adds	r2, #16
 801bb42:	2b07      	cmp	r3, #7
 801bb44:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801bb48:	606f      	str	r7, [r5, #4]
 801bb4a:	dd06      	ble.n	801bb5a <_vfprintf_r+0x1312>
 801bb4c:	aa26      	add	r2, sp, #152	; 0x98
 801bb4e:	4651      	mov	r1, sl
 801bb50:	4658      	mov	r0, fp
 801bb52:	f000 f8d9 	bl	801bd08 <__sprint_r>
 801bb56:	bb78      	cbnz	r0, 801bbb8 <_vfprintf_r+0x1370>
 801bb58:	a929      	add	r1, sp, #164	; 0xa4
 801bb5a:	3c10      	subs	r4, #16
 801bb5c:	460d      	mov	r5, r1
 801bb5e:	e7de      	b.n	801bb1e <_vfprintf_r+0x12d6>
 801bb60:	2201      	movs	r2, #1
 801bb62:	2b07      	cmp	r3, #7
 801bb64:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801bb68:	f8c4 9000 	str.w	r9, [r4]
 801bb6c:	6062      	str	r2, [r4, #4]
 801bb6e:	ddb7      	ble.n	801bae0 <_vfprintf_r+0x1298>
 801bb70:	e7ae      	b.n	801bad0 <_vfprintf_r+0x1288>
 801bb72:	3508      	adds	r5, #8
 801bb74:	e7b4      	b.n	801bae0 <_vfprintf_r+0x1298>
 801bb76:	460c      	mov	r4, r1
 801bb78:	f7ff ba8a 	b.w	801b090 <_vfprintf_r+0x848>
 801bb7c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801bb80:	1a9d      	subs	r5, r3, r2
 801bb82:	2d00      	cmp	r5, #0
 801bb84:	f77f aa88 	ble.w	801b098 <_vfprintf_r+0x850>
 801bb88:	4e3e      	ldr	r6, [pc, #248]	; (801bc84 <_vfprintf_r+0x143c>)
 801bb8a:	2710      	movs	r7, #16
 801bb8c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801bb90:	2d10      	cmp	r5, #16
 801bb92:	f103 0301 	add.w	r3, r3, #1
 801bb96:	6026      	str	r6, [r4, #0]
 801bb98:	dc18      	bgt.n	801bbcc <_vfprintf_r+0x1384>
 801bb9a:	6065      	str	r5, [r4, #4]
 801bb9c:	2b07      	cmp	r3, #7
 801bb9e:	4415      	add	r5, r2
 801bba0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801bba4:	f77f aa78 	ble.w	801b098 <_vfprintf_r+0x850>
 801bba8:	aa26      	add	r2, sp, #152	; 0x98
 801bbaa:	4651      	mov	r1, sl
 801bbac:	4658      	mov	r0, fp
 801bbae:	f000 f8ab 	bl	801bd08 <__sprint_r>
 801bbb2:	2800      	cmp	r0, #0
 801bbb4:	f43f aa70 	beq.w	801b098 <_vfprintf_r+0x850>
 801bbb8:	9b08      	ldr	r3, [sp, #32]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	f43f a889 	beq.w	801acd2 <_vfprintf_r+0x48a>
 801bbc0:	4619      	mov	r1, r3
 801bbc2:	4658      	mov	r0, fp
 801bbc4:	f7fc ffc4 	bl	8018b50 <_free_r>
 801bbc8:	f7ff b883 	b.w	801acd2 <_vfprintf_r+0x48a>
 801bbcc:	3210      	adds	r2, #16
 801bbce:	2b07      	cmp	r3, #7
 801bbd0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801bbd4:	6067      	str	r7, [r4, #4]
 801bbd6:	dc02      	bgt.n	801bbde <_vfprintf_r+0x1396>
 801bbd8:	3408      	adds	r4, #8
 801bbda:	3d10      	subs	r5, #16
 801bbdc:	e7d6      	b.n	801bb8c <_vfprintf_r+0x1344>
 801bbde:	aa26      	add	r2, sp, #152	; 0x98
 801bbe0:	4651      	mov	r1, sl
 801bbe2:	4658      	mov	r0, fp
 801bbe4:	f000 f890 	bl	801bd08 <__sprint_r>
 801bbe8:	2800      	cmp	r0, #0
 801bbea:	d1e5      	bne.n	801bbb8 <_vfprintf_r+0x1370>
 801bbec:	ac29      	add	r4, sp, #164	; 0xa4
 801bbee:	e7f4      	b.n	801bbda <_vfprintf_r+0x1392>
 801bbf0:	9908      	ldr	r1, [sp, #32]
 801bbf2:	4658      	mov	r0, fp
 801bbf4:	f7fc ffac 	bl	8018b50 <_free_r>
 801bbf8:	f7ff ba66 	b.w	801b0c8 <_vfprintf_r+0x880>
 801bbfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bbfe:	b91b      	cbnz	r3, 801bc08 <_vfprintf_r+0x13c0>
 801bc00:	2300      	movs	r3, #0
 801bc02:	9327      	str	r3, [sp, #156]	; 0x9c
 801bc04:	f7ff b865 	b.w	801acd2 <_vfprintf_r+0x48a>
 801bc08:	aa26      	add	r2, sp, #152	; 0x98
 801bc0a:	4651      	mov	r1, sl
 801bc0c:	4658      	mov	r0, fp
 801bc0e:	f000 f87b 	bl	801bd08 <__sprint_r>
 801bc12:	2800      	cmp	r0, #0
 801bc14:	d0f4      	beq.n	801bc00 <_vfprintf_r+0x13b8>
 801bc16:	f7ff b85c 	b.w	801acd2 <_vfprintf_r+0x48a>
 801bc1a:	ea55 0206 	orrs.w	r2, r5, r6
 801bc1e:	f8cd 8020 	str.w	r8, [sp, #32]
 801bc22:	f43f ab76 	beq.w	801b312 <_vfprintf_r+0xaca>
 801bc26:	2b01      	cmp	r3, #1
 801bc28:	f43f ac12 	beq.w	801b450 <_vfprintf_r+0xc08>
 801bc2c:	2b02      	cmp	r3, #2
 801bc2e:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801bc32:	f43f ac54 	beq.w	801b4de <_vfprintf_r+0xc96>
 801bc36:	f005 0307 	and.w	r3, r5, #7
 801bc3a:	08ed      	lsrs	r5, r5, #3
 801bc3c:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 801bc40:	08f6      	lsrs	r6, r6, #3
 801bc42:	3330      	adds	r3, #48	; 0x30
 801bc44:	ea55 0106 	orrs.w	r1, r5, r6
 801bc48:	464a      	mov	r2, r9
 801bc4a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801bc4e:	d1f2      	bne.n	801bc36 <_vfprintf_r+0x13ee>
 801bc50:	9908      	ldr	r1, [sp, #32]
 801bc52:	07c8      	lsls	r0, r1, #31
 801bc54:	d506      	bpl.n	801bc64 <_vfprintf_r+0x141c>
 801bc56:	2b30      	cmp	r3, #48	; 0x30
 801bc58:	d004      	beq.n	801bc64 <_vfprintf_r+0x141c>
 801bc5a:	2330      	movs	r3, #48	; 0x30
 801bc5c:	f809 3c01 	strb.w	r3, [r9, #-1]
 801bc60:	f1a2 0902 	sub.w	r9, r2, #2
 801bc64:	ab52      	add	r3, sp, #328	; 0x148
 801bc66:	eba3 0309 	sub.w	r3, r3, r9
 801bc6a:	9f07      	ldr	r7, [sp, #28]
 801bc6c:	9307      	str	r3, [sp, #28]
 801bc6e:	2300      	movs	r3, #0
 801bc70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bc74:	9308      	str	r3, [sp, #32]
 801bc76:	461e      	mov	r6, r3
 801bc78:	930c      	str	r3, [sp, #48]	; 0x30
 801bc7a:	461d      	mov	r5, r3
 801bc7c:	f7ff b948 	b.w	801af10 <_vfprintf_r+0x6c8>
 801bc80:	08020681 	.word	0x08020681
 801bc84:	08020671 	.word	0x08020671

0801bc88 <__sbprintf>:
 801bc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc8a:	461f      	mov	r7, r3
 801bc8c:	898b      	ldrh	r3, [r1, #12]
 801bc8e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 801bc92:	f023 0302 	bic.w	r3, r3, #2
 801bc96:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bc9a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801bc9c:	9319      	str	r3, [sp, #100]	; 0x64
 801bc9e:	89cb      	ldrh	r3, [r1, #14]
 801bca0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bca4:	69cb      	ldr	r3, [r1, #28]
 801bca6:	9307      	str	r3, [sp, #28]
 801bca8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801bcaa:	9309      	str	r3, [sp, #36]	; 0x24
 801bcac:	ab1a      	add	r3, sp, #104	; 0x68
 801bcae:	9300      	str	r3, [sp, #0]
 801bcb0:	9304      	str	r3, [sp, #16]
 801bcb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bcb6:	4615      	mov	r5, r2
 801bcb8:	4606      	mov	r6, r0
 801bcba:	9302      	str	r3, [sp, #8]
 801bcbc:	9305      	str	r3, [sp, #20]
 801bcbe:	a816      	add	r0, sp, #88	; 0x58
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	460c      	mov	r4, r1
 801bcc4:	9306      	str	r3, [sp, #24]
 801bcc6:	f7fc fecd 	bl	8018a64 <__retarget_lock_init_recursive>
 801bcca:	462a      	mov	r2, r5
 801bccc:	463b      	mov	r3, r7
 801bcce:	4669      	mov	r1, sp
 801bcd0:	4630      	mov	r0, r6
 801bcd2:	f7fe fdb9 	bl	801a848 <_vfprintf_r>
 801bcd6:	1e05      	subs	r5, r0, #0
 801bcd8:	db07      	blt.n	801bcea <__sbprintf+0x62>
 801bcda:	4669      	mov	r1, sp
 801bcdc:	4630      	mov	r0, r6
 801bcde:	f000 fdf5 	bl	801c8cc <_fflush_r>
 801bce2:	2800      	cmp	r0, #0
 801bce4:	bf18      	it	ne
 801bce6:	f04f 35ff 	movne.w	r5, #4294967295
 801bcea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801bcee:	9816      	ldr	r0, [sp, #88]	; 0x58
 801bcf0:	065b      	lsls	r3, r3, #25
 801bcf2:	bf42      	ittt	mi
 801bcf4:	89a3      	ldrhmi	r3, [r4, #12]
 801bcf6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801bcfa:	81a3      	strhmi	r3, [r4, #12]
 801bcfc:	f7fc feb3 	bl	8018a66 <__retarget_lock_close_recursive>
 801bd00:	4628      	mov	r0, r5
 801bd02:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801bd06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bd08 <__sprint_r>:
 801bd08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd0c:	6893      	ldr	r3, [r2, #8]
 801bd0e:	4680      	mov	r8, r0
 801bd10:	460f      	mov	r7, r1
 801bd12:	4614      	mov	r4, r2
 801bd14:	b343      	cbz	r3, 801bd68 <__sprint_r+0x60>
 801bd16:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801bd18:	049d      	lsls	r5, r3, #18
 801bd1a:	d522      	bpl.n	801bd62 <__sprint_r+0x5a>
 801bd1c:	6815      	ldr	r5, [r2, #0]
 801bd1e:	3508      	adds	r5, #8
 801bd20:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 801bd24:	f04f 0900 	mov.w	r9, #0
 801bd28:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 801bd2c:	45ca      	cmp	sl, r9
 801bd2e:	dc0d      	bgt.n	801bd4c <__sprint_r+0x44>
 801bd30:	68a0      	ldr	r0, [r4, #8]
 801bd32:	f026 0603 	bic.w	r6, r6, #3
 801bd36:	1b80      	subs	r0, r0, r6
 801bd38:	60a0      	str	r0, [r4, #8]
 801bd3a:	3508      	adds	r5, #8
 801bd3c:	2800      	cmp	r0, #0
 801bd3e:	d1ef      	bne.n	801bd20 <__sprint_r+0x18>
 801bd40:	2300      	movs	r3, #0
 801bd42:	60a3      	str	r3, [r4, #8]
 801bd44:	2300      	movs	r3, #0
 801bd46:	6063      	str	r3, [r4, #4]
 801bd48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd4c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801bd50:	463a      	mov	r2, r7
 801bd52:	4640      	mov	r0, r8
 801bd54:	f000 fe84 	bl	801ca60 <_fputwc_r>
 801bd58:	1c43      	adds	r3, r0, #1
 801bd5a:	d0f1      	beq.n	801bd40 <__sprint_r+0x38>
 801bd5c:	f109 0901 	add.w	r9, r9, #1
 801bd60:	e7e4      	b.n	801bd2c <__sprint_r+0x24>
 801bd62:	f7fc fabd 	bl	80182e0 <__sfvwrite_r>
 801bd66:	e7eb      	b.n	801bd40 <__sprint_r+0x38>
 801bd68:	4618      	mov	r0, r3
 801bd6a:	e7eb      	b.n	801bd44 <__sprint_r+0x3c>

0801bd6c <_vfiprintf_r>:
 801bd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd70:	b0bd      	sub	sp, #244	; 0xf4
 801bd72:	460f      	mov	r7, r1
 801bd74:	9202      	str	r2, [sp, #8]
 801bd76:	461d      	mov	r5, r3
 801bd78:	461c      	mov	r4, r3
 801bd7a:	4681      	mov	r9, r0
 801bd7c:	b118      	cbz	r0, 801bd86 <_vfiprintf_r+0x1a>
 801bd7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801bd80:	b90b      	cbnz	r3, 801bd86 <_vfiprintf_r+0x1a>
 801bd82:	f7fc fa83 	bl	801828c <__sinit>
 801bd86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd88:	07d8      	lsls	r0, r3, #31
 801bd8a:	d405      	bmi.n	801bd98 <_vfiprintf_r+0x2c>
 801bd8c:	89bb      	ldrh	r3, [r7, #12]
 801bd8e:	0599      	lsls	r1, r3, #22
 801bd90:	d402      	bmi.n	801bd98 <_vfiprintf_r+0x2c>
 801bd92:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801bd94:	f7fc fe68 	bl	8018a68 <__retarget_lock_acquire_recursive>
 801bd98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801bd9c:	049a      	lsls	r2, r3, #18
 801bd9e:	d406      	bmi.n	801bdae <_vfiprintf_r+0x42>
 801bda0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bda4:	81bb      	strh	r3, [r7, #12]
 801bda6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bda8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bdac:	667b      	str	r3, [r7, #100]	; 0x64
 801bdae:	89bb      	ldrh	r3, [r7, #12]
 801bdb0:	071e      	lsls	r6, r3, #28
 801bdb2:	d501      	bpl.n	801bdb8 <_vfiprintf_r+0x4c>
 801bdb4:	693b      	ldr	r3, [r7, #16]
 801bdb6:	b9ab      	cbnz	r3, 801bde4 <_vfiprintf_r+0x78>
 801bdb8:	4639      	mov	r1, r7
 801bdba:	4648      	mov	r0, r9
 801bdbc:	f7fc fce8 	bl	8018790 <__swsetup_r>
 801bdc0:	b180      	cbz	r0, 801bde4 <_vfiprintf_r+0x78>
 801bdc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bdc4:	07d8      	lsls	r0, r3, #31
 801bdc6:	d506      	bpl.n	801bdd6 <_vfiprintf_r+0x6a>
 801bdc8:	f04f 33ff 	mov.w	r3, #4294967295
 801bdcc:	9303      	str	r3, [sp, #12]
 801bdce:	9803      	ldr	r0, [sp, #12]
 801bdd0:	b03d      	add	sp, #244	; 0xf4
 801bdd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdd6:	89bb      	ldrh	r3, [r7, #12]
 801bdd8:	0599      	lsls	r1, r3, #22
 801bdda:	d4f5      	bmi.n	801bdc8 <_vfiprintf_r+0x5c>
 801bddc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801bdde:	f7fc fe44 	bl	8018a6a <__retarget_lock_release_recursive>
 801bde2:	e7f1      	b.n	801bdc8 <_vfiprintf_r+0x5c>
 801bde4:	89bb      	ldrh	r3, [r7, #12]
 801bde6:	f003 021a 	and.w	r2, r3, #26
 801bdea:	2a0a      	cmp	r2, #10
 801bdec:	d114      	bne.n	801be18 <_vfiprintf_r+0xac>
 801bdee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801bdf2:	2a00      	cmp	r2, #0
 801bdf4:	db10      	blt.n	801be18 <_vfiprintf_r+0xac>
 801bdf6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801bdf8:	07d2      	lsls	r2, r2, #31
 801bdfa:	d404      	bmi.n	801be06 <_vfiprintf_r+0x9a>
 801bdfc:	059e      	lsls	r6, r3, #22
 801bdfe:	d402      	bmi.n	801be06 <_vfiprintf_r+0x9a>
 801be00:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801be02:	f7fc fe32 	bl	8018a6a <__retarget_lock_release_recursive>
 801be06:	9a02      	ldr	r2, [sp, #8]
 801be08:	462b      	mov	r3, r5
 801be0a:	4639      	mov	r1, r7
 801be0c:	4648      	mov	r0, r9
 801be0e:	b03d      	add	sp, #244	; 0xf4
 801be10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be14:	f000 bc38 	b.w	801c688 <__sbprintf>
 801be18:	2300      	movs	r3, #0
 801be1a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 801be1e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801be22:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801be26:	ae13      	add	r6, sp, #76	; 0x4c
 801be28:	9610      	str	r6, [sp, #64]	; 0x40
 801be2a:	9303      	str	r3, [sp, #12]
 801be2c:	9b02      	ldr	r3, [sp, #8]
 801be2e:	461d      	mov	r5, r3
 801be30:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be34:	b10a      	cbz	r2, 801be3a <_vfiprintf_r+0xce>
 801be36:	2a25      	cmp	r2, #37	; 0x25
 801be38:	d1f9      	bne.n	801be2e <_vfiprintf_r+0xc2>
 801be3a:	9b02      	ldr	r3, [sp, #8]
 801be3c:	ebb5 0803 	subs.w	r8, r5, r3
 801be40:	d00d      	beq.n	801be5e <_vfiprintf_r+0xf2>
 801be42:	e9c6 3800 	strd	r3, r8, [r6]
 801be46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801be48:	4443      	add	r3, r8
 801be4a:	9312      	str	r3, [sp, #72]	; 0x48
 801be4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be4e:	3301      	adds	r3, #1
 801be50:	2b07      	cmp	r3, #7
 801be52:	9311      	str	r3, [sp, #68]	; 0x44
 801be54:	dc76      	bgt.n	801bf44 <_vfiprintf_r+0x1d8>
 801be56:	3608      	adds	r6, #8
 801be58:	9b03      	ldr	r3, [sp, #12]
 801be5a:	4443      	add	r3, r8
 801be5c:	9303      	str	r3, [sp, #12]
 801be5e:	782b      	ldrb	r3, [r5, #0]
 801be60:	2b00      	cmp	r3, #0
 801be62:	f000 83d2 	beq.w	801c60a <_vfiprintf_r+0x89e>
 801be66:	2300      	movs	r3, #0
 801be68:	f04f 32ff 	mov.w	r2, #4294967295
 801be6c:	3501      	adds	r5, #1
 801be6e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801be72:	9201      	str	r2, [sp, #4]
 801be74:	9304      	str	r3, [sp, #16]
 801be76:	469a      	mov	sl, r3
 801be78:	462a      	mov	r2, r5
 801be7a:	f812 3b01 	ldrb.w	r3, [r2], #1
 801be7e:	9202      	str	r2, [sp, #8]
 801be80:	f1a3 0220 	sub.w	r2, r3, #32
 801be84:	2a5a      	cmp	r2, #90	; 0x5a
 801be86:	f200 831a 	bhi.w	801c4be <_vfiprintf_r+0x752>
 801be8a:	e8df f012 	tbh	[pc, r2, lsl #1]
 801be8e:	007d      	.short	0x007d
 801be90:	03180318 	.word	0x03180318
 801be94:	03180085 	.word	0x03180085
 801be98:	03180318 	.word	0x03180318
 801be9c:	03180065 	.word	0x03180065
 801bea0:	00880318 	.word	0x00880318
 801bea4:	03180092 	.word	0x03180092
 801bea8:	0094008f 	.word	0x0094008f
 801beac:	00af0318 	.word	0x00af0318
 801beb0:	00b200b2 	.word	0x00b200b2
 801beb4:	00b200b2 	.word	0x00b200b2
 801beb8:	00b200b2 	.word	0x00b200b2
 801bebc:	00b200b2 	.word	0x00b200b2
 801bec0:	031800b2 	.word	0x031800b2
 801bec4:	03180318 	.word	0x03180318
 801bec8:	03180318 	.word	0x03180318
 801becc:	03180318 	.word	0x03180318
 801bed0:	03180318 	.word	0x03180318
 801bed4:	00ea00dc 	.word	0x00ea00dc
 801bed8:	03180318 	.word	0x03180318
 801bedc:	03180318 	.word	0x03180318
 801bee0:	03180318 	.word	0x03180318
 801bee4:	03180318 	.word	0x03180318
 801bee8:	03180318 	.word	0x03180318
 801beec:	0318013a 	.word	0x0318013a
 801bef0:	03180318 	.word	0x03180318
 801bef4:	0318017f 	.word	0x0318017f
 801bef8:	0318025d 	.word	0x0318025d
 801befc:	027d0318 	.word	0x027d0318
 801bf00:	03180318 	.word	0x03180318
 801bf04:	03180318 	.word	0x03180318
 801bf08:	03180318 	.word	0x03180318
 801bf0c:	03180318 	.word	0x03180318
 801bf10:	03180318 	.word	0x03180318
 801bf14:	00ec00dc 	.word	0x00ec00dc
 801bf18:	03180318 	.word	0x03180318
 801bf1c:	00c20318 	.word	0x00c20318
 801bf20:	00d600ec 	.word	0x00d600ec
 801bf24:	00cf0318 	.word	0x00cf0318
 801bf28:	01180318 	.word	0x01180318
 801bf2c:	0171013c 	.word	0x0171013c
 801bf30:	031800d6 	.word	0x031800d6
 801bf34:	007b017f 	.word	0x007b017f
 801bf38:	0318025f 	.word	0x0318025f
 801bf3c:	02990318 	.word	0x02990318
 801bf40:	007b0318 	.word	0x007b0318
 801bf44:	aa10      	add	r2, sp, #64	; 0x40
 801bf46:	4639      	mov	r1, r7
 801bf48:	4648      	mov	r0, r9
 801bf4a:	f7ff fedd 	bl	801bd08 <__sprint_r>
 801bf4e:	2800      	cmp	r0, #0
 801bf50:	f040 833a 	bne.w	801c5c8 <_vfiprintf_r+0x85c>
 801bf54:	ae13      	add	r6, sp, #76	; 0x4c
 801bf56:	e77f      	b.n	801be58 <_vfiprintf_r+0xec>
 801bf58:	4648      	mov	r0, r9
 801bf5a:	f000 fdc3 	bl	801cae4 <_localeconv_r>
 801bf5e:	6843      	ldr	r3, [r0, #4]
 801bf60:	9309      	str	r3, [sp, #36]	; 0x24
 801bf62:	4618      	mov	r0, r3
 801bf64:	f7ec fb5c 	bl	8008620 <strlen>
 801bf68:	9008      	str	r0, [sp, #32]
 801bf6a:	4648      	mov	r0, r9
 801bf6c:	f000 fdba 	bl	801cae4 <_localeconv_r>
 801bf70:	6883      	ldr	r3, [r0, #8]
 801bf72:	9307      	str	r3, [sp, #28]
 801bf74:	9b08      	ldr	r3, [sp, #32]
 801bf76:	b12b      	cbz	r3, 801bf84 <_vfiprintf_r+0x218>
 801bf78:	9b07      	ldr	r3, [sp, #28]
 801bf7a:	b11b      	cbz	r3, 801bf84 <_vfiprintf_r+0x218>
 801bf7c:	781b      	ldrb	r3, [r3, #0]
 801bf7e:	b10b      	cbz	r3, 801bf84 <_vfiprintf_r+0x218>
 801bf80:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801bf84:	9d02      	ldr	r5, [sp, #8]
 801bf86:	e777      	b.n	801be78 <_vfiprintf_r+0x10c>
 801bf88:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d1f9      	bne.n	801bf84 <_vfiprintf_r+0x218>
 801bf90:	2320      	movs	r3, #32
 801bf92:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801bf96:	e7f5      	b.n	801bf84 <_vfiprintf_r+0x218>
 801bf98:	f04a 0a01 	orr.w	sl, sl, #1
 801bf9c:	e7f2      	b.n	801bf84 <_vfiprintf_r+0x218>
 801bf9e:	f854 3b04 	ldr.w	r3, [r4], #4
 801bfa2:	9304      	str	r3, [sp, #16]
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	daed      	bge.n	801bf84 <_vfiprintf_r+0x218>
 801bfa8:	425b      	negs	r3, r3
 801bfaa:	9304      	str	r3, [sp, #16]
 801bfac:	f04a 0a04 	orr.w	sl, sl, #4
 801bfb0:	e7e8      	b.n	801bf84 <_vfiprintf_r+0x218>
 801bfb2:	232b      	movs	r3, #43	; 0x2b
 801bfb4:	e7ed      	b.n	801bf92 <_vfiprintf_r+0x226>
 801bfb6:	9a02      	ldr	r2, [sp, #8]
 801bfb8:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bfbc:	2b2a      	cmp	r3, #42	; 0x2a
 801bfbe:	d112      	bne.n	801bfe6 <_vfiprintf_r+0x27a>
 801bfc0:	f854 3b04 	ldr.w	r3, [r4], #4
 801bfc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bfc8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801bfcc:	e7da      	b.n	801bf84 <_vfiprintf_r+0x218>
 801bfce:	9b01      	ldr	r3, [sp, #4]
 801bfd0:	200a      	movs	r0, #10
 801bfd2:	fb00 1303 	mla	r3, r0, r3, r1
 801bfd6:	9301      	str	r3, [sp, #4]
 801bfd8:	f812 3b01 	ldrb.w	r3, [r2], #1
 801bfdc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801bfe0:	2909      	cmp	r1, #9
 801bfe2:	d9f4      	bls.n	801bfce <_vfiprintf_r+0x262>
 801bfe4:	e74b      	b.n	801be7e <_vfiprintf_r+0x112>
 801bfe6:	2100      	movs	r1, #0
 801bfe8:	9101      	str	r1, [sp, #4]
 801bfea:	e7f7      	b.n	801bfdc <_vfiprintf_r+0x270>
 801bfec:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801bff0:	e7c8      	b.n	801bf84 <_vfiprintf_r+0x218>
 801bff2:	2100      	movs	r1, #0
 801bff4:	9a02      	ldr	r2, [sp, #8]
 801bff6:	9104      	str	r1, [sp, #16]
 801bff8:	9904      	ldr	r1, [sp, #16]
 801bffa:	3b30      	subs	r3, #48	; 0x30
 801bffc:	200a      	movs	r0, #10
 801bffe:	fb00 3301 	mla	r3, r0, r1, r3
 801c002:	9304      	str	r3, [sp, #16]
 801c004:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c008:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801c00c:	2909      	cmp	r1, #9
 801c00e:	d9f3      	bls.n	801bff8 <_vfiprintf_r+0x28c>
 801c010:	e735      	b.n	801be7e <_vfiprintf_r+0x112>
 801c012:	9b02      	ldr	r3, [sp, #8]
 801c014:	781b      	ldrb	r3, [r3, #0]
 801c016:	2b68      	cmp	r3, #104	; 0x68
 801c018:	bf01      	itttt	eq
 801c01a:	9b02      	ldreq	r3, [sp, #8]
 801c01c:	3301      	addeq	r3, #1
 801c01e:	9302      	streq	r3, [sp, #8]
 801c020:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801c024:	bf18      	it	ne
 801c026:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801c02a:	e7ab      	b.n	801bf84 <_vfiprintf_r+0x218>
 801c02c:	9b02      	ldr	r3, [sp, #8]
 801c02e:	781b      	ldrb	r3, [r3, #0]
 801c030:	2b6c      	cmp	r3, #108	; 0x6c
 801c032:	d105      	bne.n	801c040 <_vfiprintf_r+0x2d4>
 801c034:	9b02      	ldr	r3, [sp, #8]
 801c036:	3301      	adds	r3, #1
 801c038:	9302      	str	r3, [sp, #8]
 801c03a:	f04a 0a20 	orr.w	sl, sl, #32
 801c03e:	e7a1      	b.n	801bf84 <_vfiprintf_r+0x218>
 801c040:	f04a 0a10 	orr.w	sl, sl, #16
 801c044:	e79e      	b.n	801bf84 <_vfiprintf_r+0x218>
 801c046:	46a0      	mov	r8, r4
 801c048:	f858 3b04 	ldr.w	r3, [r8], #4
 801c04c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 801c050:	2300      	movs	r3, #0
 801c052:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801c056:	2201      	movs	r2, #1
 801c058:	9201      	str	r2, [sp, #4]
 801c05a:	461d      	mov	r5, r3
 801c05c:	f10d 0b8c 	add.w	fp, sp, #140	; 0x8c
 801c060:	e0a9      	b.n	801c1b6 <_vfiprintf_r+0x44a>
 801c062:	f04a 0a10 	orr.w	sl, sl, #16
 801c066:	f01a 0f20 	tst.w	sl, #32
 801c06a:	d011      	beq.n	801c090 <_vfiprintf_r+0x324>
 801c06c:	3407      	adds	r4, #7
 801c06e:	f024 0307 	bic.w	r3, r4, #7
 801c072:	4698      	mov	r8, r3
 801c074:	685d      	ldr	r5, [r3, #4]
 801c076:	f858 4b08 	ldr.w	r4, [r8], #8
 801c07a:	2d00      	cmp	r5, #0
 801c07c:	da06      	bge.n	801c08c <_vfiprintf_r+0x320>
 801c07e:	4264      	negs	r4, r4
 801c080:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801c084:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801c088:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801c08c:	2301      	movs	r3, #1
 801c08e:	e04a      	b.n	801c126 <_vfiprintf_r+0x3ba>
 801c090:	46a0      	mov	r8, r4
 801c092:	f01a 0f10 	tst.w	sl, #16
 801c096:	f858 5b04 	ldr.w	r5, [r8], #4
 801c09a:	d002      	beq.n	801c0a2 <_vfiprintf_r+0x336>
 801c09c:	462c      	mov	r4, r5
 801c09e:	17ed      	asrs	r5, r5, #31
 801c0a0:	e7eb      	b.n	801c07a <_vfiprintf_r+0x30e>
 801c0a2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801c0a6:	d003      	beq.n	801c0b0 <_vfiprintf_r+0x344>
 801c0a8:	b22c      	sxth	r4, r5
 801c0aa:	f345 35c0 	sbfx	r5, r5, #15, #1
 801c0ae:	e7e4      	b.n	801c07a <_vfiprintf_r+0x30e>
 801c0b0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801c0b4:	d0f2      	beq.n	801c09c <_vfiprintf_r+0x330>
 801c0b6:	b26c      	sxtb	r4, r5
 801c0b8:	f345 15c0 	sbfx	r5, r5, #7, #1
 801c0bc:	e7dd      	b.n	801c07a <_vfiprintf_r+0x30e>
 801c0be:	f01a 0f20 	tst.w	sl, #32
 801c0c2:	f104 0804 	add.w	r8, r4, #4
 801c0c6:	d007      	beq.n	801c0d8 <_vfiprintf_r+0x36c>
 801c0c8:	9a03      	ldr	r2, [sp, #12]
 801c0ca:	6823      	ldr	r3, [r4, #0]
 801c0cc:	9903      	ldr	r1, [sp, #12]
 801c0ce:	17d2      	asrs	r2, r2, #31
 801c0d0:	e9c3 1200 	strd	r1, r2, [r3]
 801c0d4:	4644      	mov	r4, r8
 801c0d6:	e6a9      	b.n	801be2c <_vfiprintf_r+0xc0>
 801c0d8:	f01a 0f10 	tst.w	sl, #16
 801c0dc:	d003      	beq.n	801c0e6 <_vfiprintf_r+0x37a>
 801c0de:	6823      	ldr	r3, [r4, #0]
 801c0e0:	9a03      	ldr	r2, [sp, #12]
 801c0e2:	601a      	str	r2, [r3, #0]
 801c0e4:	e7f6      	b.n	801c0d4 <_vfiprintf_r+0x368>
 801c0e6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801c0ea:	d003      	beq.n	801c0f4 <_vfiprintf_r+0x388>
 801c0ec:	6823      	ldr	r3, [r4, #0]
 801c0ee:	9a03      	ldr	r2, [sp, #12]
 801c0f0:	801a      	strh	r2, [r3, #0]
 801c0f2:	e7ef      	b.n	801c0d4 <_vfiprintf_r+0x368>
 801c0f4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801c0f8:	d0f1      	beq.n	801c0de <_vfiprintf_r+0x372>
 801c0fa:	6823      	ldr	r3, [r4, #0]
 801c0fc:	9a03      	ldr	r2, [sp, #12]
 801c0fe:	701a      	strb	r2, [r3, #0]
 801c100:	e7e8      	b.n	801c0d4 <_vfiprintf_r+0x368>
 801c102:	f04a 0a10 	orr.w	sl, sl, #16
 801c106:	f01a 0320 	ands.w	r3, sl, #32
 801c10a:	d01f      	beq.n	801c14c <_vfiprintf_r+0x3e0>
 801c10c:	3407      	adds	r4, #7
 801c10e:	f024 0307 	bic.w	r3, r4, #7
 801c112:	4698      	mov	r8, r3
 801c114:	685d      	ldr	r5, [r3, #4]
 801c116:	f858 4b08 	ldr.w	r4, [r8], #8
 801c11a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801c11e:	2300      	movs	r3, #0
 801c120:	2200      	movs	r2, #0
 801c122:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 801c126:	9a01      	ldr	r2, [sp, #4]
 801c128:	3201      	adds	r2, #1
 801c12a:	f000 827b 	beq.w	801c624 <_vfiprintf_r+0x8b8>
 801c12e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 801c132:	9205      	str	r2, [sp, #20]
 801c134:	ea54 0205 	orrs.w	r2, r4, r5
 801c138:	f040 827a 	bne.w	801c630 <_vfiprintf_r+0x8c4>
 801c13c:	9a01      	ldr	r2, [sp, #4]
 801c13e:	2a00      	cmp	r2, #0
 801c140:	f000 81b2 	beq.w	801c4a8 <_vfiprintf_r+0x73c>
 801c144:	2b01      	cmp	r3, #1
 801c146:	f040 8276 	bne.w	801c636 <_vfiprintf_r+0x8ca>
 801c14a:	e151      	b.n	801c3f0 <_vfiprintf_r+0x684>
 801c14c:	46a0      	mov	r8, r4
 801c14e:	f01a 0510 	ands.w	r5, sl, #16
 801c152:	f858 4b04 	ldr.w	r4, [r8], #4
 801c156:	d001      	beq.n	801c15c <_vfiprintf_r+0x3f0>
 801c158:	461d      	mov	r5, r3
 801c15a:	e7de      	b.n	801c11a <_vfiprintf_r+0x3ae>
 801c15c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801c160:	d001      	beq.n	801c166 <_vfiprintf_r+0x3fa>
 801c162:	b2a4      	uxth	r4, r4
 801c164:	e7d9      	b.n	801c11a <_vfiprintf_r+0x3ae>
 801c166:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801c16a:	d0d6      	beq.n	801c11a <_vfiprintf_r+0x3ae>
 801c16c:	b2e4      	uxtb	r4, r4
 801c16e:	e7f3      	b.n	801c158 <_vfiprintf_r+0x3ec>
 801c170:	46a0      	mov	r8, r4
 801c172:	f647 0330 	movw	r3, #30768	; 0x7830
 801c176:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 801c17a:	f858 4b04 	ldr.w	r4, [r8], #4
 801c17e:	4b9f      	ldr	r3, [pc, #636]	; (801c3fc <_vfiprintf_r+0x690>)
 801c180:	9306      	str	r3, [sp, #24]
 801c182:	2500      	movs	r5, #0
 801c184:	f04a 0a02 	orr.w	sl, sl, #2
 801c188:	2302      	movs	r3, #2
 801c18a:	e7c9      	b.n	801c120 <_vfiprintf_r+0x3b4>
 801c18c:	9b01      	ldr	r3, [sp, #4]
 801c18e:	46a0      	mov	r8, r4
 801c190:	2500      	movs	r5, #0
 801c192:	1c5c      	adds	r4, r3, #1
 801c194:	f858 bb04 	ldr.w	fp, [r8], #4
 801c198:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
 801c19c:	f000 80cf 	beq.w	801c33e <_vfiprintf_r+0x5d2>
 801c1a0:	461a      	mov	r2, r3
 801c1a2:	4629      	mov	r1, r5
 801c1a4:	4658      	mov	r0, fp
 801c1a6:	f7ec f9eb 	bl	8008580 <memchr>
 801c1aa:	2800      	cmp	r0, #0
 801c1ac:	f000 8191 	beq.w	801c4d2 <_vfiprintf_r+0x766>
 801c1b0:	eba0 030b 	sub.w	r3, r0, fp
 801c1b4:	9301      	str	r3, [sp, #4]
 801c1b6:	9b01      	ldr	r3, [sp, #4]
 801c1b8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 801c1bc:	42ab      	cmp	r3, r5
 801c1be:	bfb8      	it	lt
 801c1c0:	462b      	movlt	r3, r5
 801c1c2:	9305      	str	r3, [sp, #20]
 801c1c4:	b10a      	cbz	r2, 801c1ca <_vfiprintf_r+0x45e>
 801c1c6:	3301      	adds	r3, #1
 801c1c8:	9305      	str	r3, [sp, #20]
 801c1ca:	f01a 0302 	ands.w	r3, sl, #2
 801c1ce:	930a      	str	r3, [sp, #40]	; 0x28
 801c1d0:	bf1e      	ittt	ne
 801c1d2:	9b05      	ldrne	r3, [sp, #20]
 801c1d4:	3302      	addne	r3, #2
 801c1d6:	9305      	strne	r3, [sp, #20]
 801c1d8:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 801c1dc:	930b      	str	r3, [sp, #44]	; 0x2c
 801c1de:	d11f      	bne.n	801c220 <_vfiprintf_r+0x4b4>
 801c1e0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c1e4:	1a9c      	subs	r4, r3, r2
 801c1e6:	2c00      	cmp	r4, #0
 801c1e8:	dd1a      	ble.n	801c220 <_vfiprintf_r+0x4b4>
 801c1ea:	4b85      	ldr	r3, [pc, #532]	; (801c400 <_vfiprintf_r+0x694>)
 801c1ec:	6033      	str	r3, [r6, #0]
 801c1ee:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c1f2:	2c10      	cmp	r4, #16
 801c1f4:	f102 0201 	add.w	r2, r2, #1
 801c1f8:	f106 0008 	add.w	r0, r6, #8
 801c1fc:	f300 816b 	bgt.w	801c4d6 <_vfiprintf_r+0x76a>
 801c200:	6074      	str	r4, [r6, #4]
 801c202:	2a07      	cmp	r2, #7
 801c204:	440c      	add	r4, r1
 801c206:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 801c20a:	f340 8179 	ble.w	801c500 <_vfiprintf_r+0x794>
 801c20e:	aa10      	add	r2, sp, #64	; 0x40
 801c210:	4639      	mov	r1, r7
 801c212:	4648      	mov	r0, r9
 801c214:	f7ff fd78 	bl	801bd08 <__sprint_r>
 801c218:	2800      	cmp	r0, #0
 801c21a:	f040 81d5 	bne.w	801c5c8 <_vfiprintf_r+0x85c>
 801c21e:	ae13      	add	r6, sp, #76	; 0x4c
 801c220:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 801c224:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c228:	b160      	cbz	r0, 801c244 <_vfiprintf_r+0x4d8>
 801c22a:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
 801c22e:	3201      	adds	r2, #1
 801c230:	6030      	str	r0, [r6, #0]
 801c232:	2001      	movs	r0, #1
 801c234:	4401      	add	r1, r0
 801c236:	2a07      	cmp	r2, #7
 801c238:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c23c:	6070      	str	r0, [r6, #4]
 801c23e:	f300 8161 	bgt.w	801c504 <_vfiprintf_r+0x798>
 801c242:	3608      	adds	r6, #8
 801c244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c246:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c24a:	b15b      	cbz	r3, 801c264 <_vfiprintf_r+0x4f8>
 801c24c:	a80f      	add	r0, sp, #60	; 0x3c
 801c24e:	3201      	adds	r2, #1
 801c250:	6030      	str	r0, [r6, #0]
 801c252:	2002      	movs	r0, #2
 801c254:	4401      	add	r1, r0
 801c256:	2a07      	cmp	r2, #7
 801c258:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c25c:	6070      	str	r0, [r6, #4]
 801c25e:	f300 815a 	bgt.w	801c516 <_vfiprintf_r+0x7aa>
 801c262:	3608      	adds	r6, #8
 801c264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c266:	2b80      	cmp	r3, #128	; 0x80
 801c268:	d11f      	bne.n	801c2aa <_vfiprintf_r+0x53e>
 801c26a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c26e:	1a9c      	subs	r4, r3, r2
 801c270:	2c00      	cmp	r4, #0
 801c272:	dd1a      	ble.n	801c2aa <_vfiprintf_r+0x53e>
 801c274:	4b63      	ldr	r3, [pc, #396]	; (801c404 <_vfiprintf_r+0x698>)
 801c276:	6033      	str	r3, [r6, #0]
 801c278:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c27c:	2c10      	cmp	r4, #16
 801c27e:	f102 0201 	add.w	r2, r2, #1
 801c282:	f106 0008 	add.w	r0, r6, #8
 801c286:	f300 814f 	bgt.w	801c528 <_vfiprintf_r+0x7bc>
 801c28a:	6074      	str	r4, [r6, #4]
 801c28c:	2a07      	cmp	r2, #7
 801c28e:	440c      	add	r4, r1
 801c290:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 801c294:	f340 815d 	ble.w	801c552 <_vfiprintf_r+0x7e6>
 801c298:	aa10      	add	r2, sp, #64	; 0x40
 801c29a:	4639      	mov	r1, r7
 801c29c:	4648      	mov	r0, r9
 801c29e:	f7ff fd33 	bl	801bd08 <__sprint_r>
 801c2a2:	2800      	cmp	r0, #0
 801c2a4:	f040 8190 	bne.w	801c5c8 <_vfiprintf_r+0x85c>
 801c2a8:	ae13      	add	r6, sp, #76	; 0x4c
 801c2aa:	9b01      	ldr	r3, [sp, #4]
 801c2ac:	1aec      	subs	r4, r5, r3
 801c2ae:	2c00      	cmp	r4, #0
 801c2b0:	dd1b      	ble.n	801c2ea <_vfiprintf_r+0x57e>
 801c2b2:	4d54      	ldr	r5, [pc, #336]	; (801c404 <_vfiprintf_r+0x698>)
 801c2b4:	2310      	movs	r3, #16
 801c2b6:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c2ba:	2c10      	cmp	r4, #16
 801c2bc:	f102 0201 	add.w	r2, r2, #1
 801c2c0:	f106 0008 	add.w	r0, r6, #8
 801c2c4:	6035      	str	r5, [r6, #0]
 801c2c6:	f300 8146 	bgt.w	801c556 <_vfiprintf_r+0x7ea>
 801c2ca:	6074      	str	r4, [r6, #4]
 801c2cc:	2a07      	cmp	r2, #7
 801c2ce:	440c      	add	r4, r1
 801c2d0:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 801c2d4:	f340 8150 	ble.w	801c578 <_vfiprintf_r+0x80c>
 801c2d8:	aa10      	add	r2, sp, #64	; 0x40
 801c2da:	4639      	mov	r1, r7
 801c2dc:	4648      	mov	r0, r9
 801c2de:	f7ff fd13 	bl	801bd08 <__sprint_r>
 801c2e2:	2800      	cmp	r0, #0
 801c2e4:	f040 8170 	bne.w	801c5c8 <_vfiprintf_r+0x85c>
 801c2e8:	ae13      	add	r6, sp, #76	; 0x4c
 801c2ea:	9b01      	ldr	r3, [sp, #4]
 801c2ec:	9a01      	ldr	r2, [sp, #4]
 801c2ee:	6073      	str	r3, [r6, #4]
 801c2f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c2f2:	f8c6 b000 	str.w	fp, [r6]
 801c2f6:	4413      	add	r3, r2
 801c2f8:	9312      	str	r3, [sp, #72]	; 0x48
 801c2fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c2fc:	3301      	adds	r3, #1
 801c2fe:	2b07      	cmp	r3, #7
 801c300:	9311      	str	r3, [sp, #68]	; 0x44
 801c302:	f300 813b 	bgt.w	801c57c <_vfiprintf_r+0x810>
 801c306:	f106 0308 	add.w	r3, r6, #8
 801c30a:	f01a 0f04 	tst.w	sl, #4
 801c30e:	f040 813d 	bne.w	801c58c <_vfiprintf_r+0x820>
 801c312:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801c316:	9905      	ldr	r1, [sp, #20]
 801c318:	428a      	cmp	r2, r1
 801c31a:	bfac      	ite	ge
 801c31c:	189b      	addge	r3, r3, r2
 801c31e:	185b      	addlt	r3, r3, r1
 801c320:	9303      	str	r3, [sp, #12]
 801c322:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c324:	b13b      	cbz	r3, 801c336 <_vfiprintf_r+0x5ca>
 801c326:	aa10      	add	r2, sp, #64	; 0x40
 801c328:	4639      	mov	r1, r7
 801c32a:	4648      	mov	r0, r9
 801c32c:	f7ff fcec 	bl	801bd08 <__sprint_r>
 801c330:	2800      	cmp	r0, #0
 801c332:	f040 8149 	bne.w	801c5c8 <_vfiprintf_r+0x85c>
 801c336:	2300      	movs	r3, #0
 801c338:	9311      	str	r3, [sp, #68]	; 0x44
 801c33a:	ae13      	add	r6, sp, #76	; 0x4c
 801c33c:	e6ca      	b.n	801c0d4 <_vfiprintf_r+0x368>
 801c33e:	4658      	mov	r0, fp
 801c340:	f7ec f96e 	bl	8008620 <strlen>
 801c344:	9001      	str	r0, [sp, #4]
 801c346:	e736      	b.n	801c1b6 <_vfiprintf_r+0x44a>
 801c348:	f04a 0a10 	orr.w	sl, sl, #16
 801c34c:	f01a 0320 	ands.w	r3, sl, #32
 801c350:	d008      	beq.n	801c364 <_vfiprintf_r+0x5f8>
 801c352:	3407      	adds	r4, #7
 801c354:	f024 0307 	bic.w	r3, r4, #7
 801c358:	4698      	mov	r8, r3
 801c35a:	685d      	ldr	r5, [r3, #4]
 801c35c:	f858 4b08 	ldr.w	r4, [r8], #8
 801c360:	2301      	movs	r3, #1
 801c362:	e6dd      	b.n	801c120 <_vfiprintf_r+0x3b4>
 801c364:	46a0      	mov	r8, r4
 801c366:	f01a 0510 	ands.w	r5, sl, #16
 801c36a:	f858 4b04 	ldr.w	r4, [r8], #4
 801c36e:	d001      	beq.n	801c374 <_vfiprintf_r+0x608>
 801c370:	461d      	mov	r5, r3
 801c372:	e7f5      	b.n	801c360 <_vfiprintf_r+0x5f4>
 801c374:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801c378:	d001      	beq.n	801c37e <_vfiprintf_r+0x612>
 801c37a:	b2a4      	uxth	r4, r4
 801c37c:	e7f0      	b.n	801c360 <_vfiprintf_r+0x5f4>
 801c37e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801c382:	d0ed      	beq.n	801c360 <_vfiprintf_r+0x5f4>
 801c384:	b2e4      	uxtb	r4, r4
 801c386:	e7f3      	b.n	801c370 <_vfiprintf_r+0x604>
 801c388:	4a1f      	ldr	r2, [pc, #124]	; (801c408 <_vfiprintf_r+0x69c>)
 801c38a:	9206      	str	r2, [sp, #24]
 801c38c:	f01a 0220 	ands.w	r2, sl, #32
 801c390:	d018      	beq.n	801c3c4 <_vfiprintf_r+0x658>
 801c392:	3407      	adds	r4, #7
 801c394:	f024 0207 	bic.w	r2, r4, #7
 801c398:	4690      	mov	r8, r2
 801c39a:	6855      	ldr	r5, [r2, #4]
 801c39c:	f858 4b08 	ldr.w	r4, [r8], #8
 801c3a0:	f01a 0f01 	tst.w	sl, #1
 801c3a4:	d009      	beq.n	801c3ba <_vfiprintf_r+0x64e>
 801c3a6:	ea54 0205 	orrs.w	r2, r4, r5
 801c3aa:	bf1f      	itttt	ne
 801c3ac:	2230      	movne	r2, #48	; 0x30
 801c3ae:	f88d 203c 	strbne.w	r2, [sp, #60]	; 0x3c
 801c3b2:	f88d 303d 	strbne.w	r3, [sp, #61]	; 0x3d
 801c3b6:	f04a 0a02 	orrne.w	sl, sl, #2
 801c3ba:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801c3be:	e6e3      	b.n	801c188 <_vfiprintf_r+0x41c>
 801c3c0:	4a0e      	ldr	r2, [pc, #56]	; (801c3fc <_vfiprintf_r+0x690>)
 801c3c2:	e7e2      	b.n	801c38a <_vfiprintf_r+0x61e>
 801c3c4:	46a0      	mov	r8, r4
 801c3c6:	f01a 0510 	ands.w	r5, sl, #16
 801c3ca:	f858 4b04 	ldr.w	r4, [r8], #4
 801c3ce:	d001      	beq.n	801c3d4 <_vfiprintf_r+0x668>
 801c3d0:	4615      	mov	r5, r2
 801c3d2:	e7e5      	b.n	801c3a0 <_vfiprintf_r+0x634>
 801c3d4:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 801c3d8:	d001      	beq.n	801c3de <_vfiprintf_r+0x672>
 801c3da:	b2a4      	uxth	r4, r4
 801c3dc:	e7e0      	b.n	801c3a0 <_vfiprintf_r+0x634>
 801c3de:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801c3e2:	d0dd      	beq.n	801c3a0 <_vfiprintf_r+0x634>
 801c3e4:	b2e4      	uxtb	r4, r4
 801c3e6:	e7f3      	b.n	801c3d0 <_vfiprintf_r+0x664>
 801c3e8:	2c0a      	cmp	r4, #10
 801c3ea:	f175 0300 	sbcs.w	r3, r5, #0
 801c3ee:	d20d      	bcs.n	801c40c <_vfiprintf_r+0x6a0>
 801c3f0:	3430      	adds	r4, #48	; 0x30
 801c3f2:	f88d 40ef 	strb.w	r4, [sp, #239]	; 0xef
 801c3f6:	f10d 0bef 	add.w	fp, sp, #239	; 0xef
 801c3fa:	e138      	b.n	801c66e <_vfiprintf_r+0x902>
 801c3fc:	0802062d 	.word	0x0802062d
 801c400:	08020691 	.word	0x08020691
 801c404:	080206a1 	.word	0x080206a1
 801c408:	0802063e 	.word	0x0802063e
 801c40c:	ab3c      	add	r3, sp, #240	; 0xf0
 801c40e:	930a      	str	r3, [sp, #40]	; 0x28
 801c410:	9b05      	ldr	r3, [sp, #20]
 801c412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c416:	f04f 0a00 	mov.w	sl, #0
 801c41a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c41c:	220a      	movs	r2, #10
 801c41e:	2300      	movs	r3, #0
 801c420:	4620      	mov	r0, r4
 801c422:	4629      	mov	r1, r5
 801c424:	f7ec fee6 	bl	80091f4 <__aeabi_uldivmod>
 801c428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c42a:	3230      	adds	r2, #48	; 0x30
 801c42c:	f103 3bff 	add.w	fp, r3, #4294967295
 801c430:	f803 2c01 	strb.w	r2, [r3, #-1]
 801c434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c436:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c43a:	f10a 0a01 	add.w	sl, sl, #1
 801c43e:	b1cb      	cbz	r3, 801c474 <_vfiprintf_r+0x708>
 801c440:	9b07      	ldr	r3, [sp, #28]
 801c442:	781a      	ldrb	r2, [r3, #0]
 801c444:	4552      	cmp	r2, sl
 801c446:	d115      	bne.n	801c474 <_vfiprintf_r+0x708>
 801c448:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c44c:	d012      	beq.n	801c474 <_vfiprintf_r+0x708>
 801c44e:	2c0a      	cmp	r4, #10
 801c450:	f175 0200 	sbcs.w	r2, r5, #0
 801c454:	d30e      	bcc.n	801c474 <_vfiprintf_r+0x708>
 801c456:	9b08      	ldr	r3, [sp, #32]
 801c458:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c45a:	ebab 0b03 	sub.w	fp, fp, r3
 801c45e:	461a      	mov	r2, r3
 801c460:	4658      	mov	r0, fp
 801c462:	f000 fb26 	bl	801cab2 <strncpy>
 801c466:	9b07      	ldr	r3, [sp, #28]
 801c468:	785a      	ldrb	r2, [r3, #1]
 801c46a:	b16a      	cbz	r2, 801c488 <_vfiprintf_r+0x71c>
 801c46c:	3301      	adds	r3, #1
 801c46e:	9307      	str	r3, [sp, #28]
 801c470:	f04f 0a00 	mov.w	sl, #0
 801c474:	2c0a      	cmp	r4, #10
 801c476:	f175 0500 	sbcs.w	r5, r5, #0
 801c47a:	f0c0 80f8 	bcc.w	801c66e <_vfiprintf_r+0x902>
 801c47e:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 801c482:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c486:	e7c9      	b.n	801c41c <_vfiprintf_r+0x6b0>
 801c488:	4692      	mov	sl, r2
 801c48a:	e7f3      	b.n	801c474 <_vfiprintf_r+0x708>
 801c48c:	f004 020f 	and.w	r2, r4, #15
 801c490:	9b06      	ldr	r3, [sp, #24]
 801c492:	0924      	lsrs	r4, r4, #4
 801c494:	5c9a      	ldrb	r2, [r3, r2]
 801c496:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 801c49a:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801c49e:	092d      	lsrs	r5, r5, #4
 801c4a0:	ea54 0205 	orrs.w	r2, r4, r5
 801c4a4:	d1f2      	bne.n	801c48c <_vfiprintf_r+0x720>
 801c4a6:	e0e2      	b.n	801c66e <_vfiprintf_r+0x902>
 801c4a8:	b933      	cbnz	r3, 801c4b8 <_vfiprintf_r+0x74c>
 801c4aa:	f01a 0f01 	tst.w	sl, #1
 801c4ae:	d003      	beq.n	801c4b8 <_vfiprintf_r+0x74c>
 801c4b0:	2330      	movs	r3, #48	; 0x30
 801c4b2:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 801c4b6:	e79e      	b.n	801c3f6 <_vfiprintf_r+0x68a>
 801c4b8:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 801c4bc:	e0d7      	b.n	801c66e <_vfiprintf_r+0x902>
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	f000 80a3 	beq.w	801c60a <_vfiprintf_r+0x89e>
 801c4c4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 801c4c8:	2300      	movs	r3, #0
 801c4ca:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801c4ce:	46a0      	mov	r8, r4
 801c4d0:	e5c1      	b.n	801c056 <_vfiprintf_r+0x2ea>
 801c4d2:	4605      	mov	r5, r0
 801c4d4:	e66f      	b.n	801c1b6 <_vfiprintf_r+0x44a>
 801c4d6:	f04f 0c10 	mov.w	ip, #16
 801c4da:	4461      	add	r1, ip
 801c4dc:	2a07      	cmp	r2, #7
 801c4de:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c4e2:	f8c6 c004 	str.w	ip, [r6, #4]
 801c4e6:	dd08      	ble.n	801c4fa <_vfiprintf_r+0x78e>
 801c4e8:	aa10      	add	r2, sp, #64	; 0x40
 801c4ea:	4639      	mov	r1, r7
 801c4ec:	4648      	mov	r0, r9
 801c4ee:	f7ff fc0b 	bl	801bd08 <__sprint_r>
 801c4f2:	2800      	cmp	r0, #0
 801c4f4:	d168      	bne.n	801c5c8 <_vfiprintf_r+0x85c>
 801c4f6:	4b62      	ldr	r3, [pc, #392]	; (801c680 <_vfiprintf_r+0x914>)
 801c4f8:	a813      	add	r0, sp, #76	; 0x4c
 801c4fa:	3c10      	subs	r4, #16
 801c4fc:	4606      	mov	r6, r0
 801c4fe:	e675      	b.n	801c1ec <_vfiprintf_r+0x480>
 801c500:	4606      	mov	r6, r0
 801c502:	e68d      	b.n	801c220 <_vfiprintf_r+0x4b4>
 801c504:	aa10      	add	r2, sp, #64	; 0x40
 801c506:	4639      	mov	r1, r7
 801c508:	4648      	mov	r0, r9
 801c50a:	f7ff fbfd 	bl	801bd08 <__sprint_r>
 801c50e:	2800      	cmp	r0, #0
 801c510:	d15a      	bne.n	801c5c8 <_vfiprintf_r+0x85c>
 801c512:	ae13      	add	r6, sp, #76	; 0x4c
 801c514:	e696      	b.n	801c244 <_vfiprintf_r+0x4d8>
 801c516:	aa10      	add	r2, sp, #64	; 0x40
 801c518:	4639      	mov	r1, r7
 801c51a:	4648      	mov	r0, r9
 801c51c:	f7ff fbf4 	bl	801bd08 <__sprint_r>
 801c520:	2800      	cmp	r0, #0
 801c522:	d151      	bne.n	801c5c8 <_vfiprintf_r+0x85c>
 801c524:	ae13      	add	r6, sp, #76	; 0x4c
 801c526:	e69d      	b.n	801c264 <_vfiprintf_r+0x4f8>
 801c528:	f04f 0c10 	mov.w	ip, #16
 801c52c:	4461      	add	r1, ip
 801c52e:	2a07      	cmp	r2, #7
 801c530:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c534:	f8c6 c004 	str.w	ip, [r6, #4]
 801c538:	dd08      	ble.n	801c54c <_vfiprintf_r+0x7e0>
 801c53a:	aa10      	add	r2, sp, #64	; 0x40
 801c53c:	4639      	mov	r1, r7
 801c53e:	4648      	mov	r0, r9
 801c540:	f7ff fbe2 	bl	801bd08 <__sprint_r>
 801c544:	2800      	cmp	r0, #0
 801c546:	d13f      	bne.n	801c5c8 <_vfiprintf_r+0x85c>
 801c548:	4b4e      	ldr	r3, [pc, #312]	; (801c684 <_vfiprintf_r+0x918>)
 801c54a:	a813      	add	r0, sp, #76	; 0x4c
 801c54c:	3c10      	subs	r4, #16
 801c54e:	4606      	mov	r6, r0
 801c550:	e691      	b.n	801c276 <_vfiprintf_r+0x50a>
 801c552:	4606      	mov	r6, r0
 801c554:	e6a9      	b.n	801c2aa <_vfiprintf_r+0x53e>
 801c556:	3110      	adds	r1, #16
 801c558:	2a07      	cmp	r2, #7
 801c55a:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c55e:	6073      	str	r3, [r6, #4]
 801c560:	dd07      	ble.n	801c572 <_vfiprintf_r+0x806>
 801c562:	aa10      	add	r2, sp, #64	; 0x40
 801c564:	4639      	mov	r1, r7
 801c566:	4648      	mov	r0, r9
 801c568:	f7ff fbce 	bl	801bd08 <__sprint_r>
 801c56c:	bb60      	cbnz	r0, 801c5c8 <_vfiprintf_r+0x85c>
 801c56e:	a813      	add	r0, sp, #76	; 0x4c
 801c570:	2310      	movs	r3, #16
 801c572:	3c10      	subs	r4, #16
 801c574:	4606      	mov	r6, r0
 801c576:	e69e      	b.n	801c2b6 <_vfiprintf_r+0x54a>
 801c578:	4606      	mov	r6, r0
 801c57a:	e6b6      	b.n	801c2ea <_vfiprintf_r+0x57e>
 801c57c:	aa10      	add	r2, sp, #64	; 0x40
 801c57e:	4639      	mov	r1, r7
 801c580:	4648      	mov	r0, r9
 801c582:	f7ff fbc1 	bl	801bd08 <__sprint_r>
 801c586:	b9f8      	cbnz	r0, 801c5c8 <_vfiprintf_r+0x85c>
 801c588:	ab13      	add	r3, sp, #76	; 0x4c
 801c58a:	e6be      	b.n	801c30a <_vfiprintf_r+0x59e>
 801c58c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801c590:	1a54      	subs	r4, r2, r1
 801c592:	2c00      	cmp	r4, #0
 801c594:	f77f aebd 	ble.w	801c312 <_vfiprintf_r+0x5a6>
 801c598:	4d39      	ldr	r5, [pc, #228]	; (801c680 <_vfiprintf_r+0x914>)
 801c59a:	2610      	movs	r6, #16
 801c59c:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c5a0:	2c10      	cmp	r4, #16
 801c5a2:	f102 0201 	add.w	r2, r2, #1
 801c5a6:	601d      	str	r5, [r3, #0]
 801c5a8:	dc1d      	bgt.n	801c5e6 <_vfiprintf_r+0x87a>
 801c5aa:	605c      	str	r4, [r3, #4]
 801c5ac:	2a07      	cmp	r2, #7
 801c5ae:	440c      	add	r4, r1
 801c5b0:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 801c5b4:	f77f aead 	ble.w	801c312 <_vfiprintf_r+0x5a6>
 801c5b8:	aa10      	add	r2, sp, #64	; 0x40
 801c5ba:	4639      	mov	r1, r7
 801c5bc:	4648      	mov	r0, r9
 801c5be:	f7ff fba3 	bl	801bd08 <__sprint_r>
 801c5c2:	2800      	cmp	r0, #0
 801c5c4:	f43f aea5 	beq.w	801c312 <_vfiprintf_r+0x5a6>
 801c5c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c5ca:	07d9      	lsls	r1, r3, #31
 801c5cc:	d405      	bmi.n	801c5da <_vfiprintf_r+0x86e>
 801c5ce:	89bb      	ldrh	r3, [r7, #12]
 801c5d0:	059a      	lsls	r2, r3, #22
 801c5d2:	d402      	bmi.n	801c5da <_vfiprintf_r+0x86e>
 801c5d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801c5d6:	f7fc fa48 	bl	8018a6a <__retarget_lock_release_recursive>
 801c5da:	89bb      	ldrh	r3, [r7, #12]
 801c5dc:	065b      	lsls	r3, r3, #25
 801c5de:	f57f abf6 	bpl.w	801bdce <_vfiprintf_r+0x62>
 801c5e2:	f7ff bbf1 	b.w	801bdc8 <_vfiprintf_r+0x5c>
 801c5e6:	3110      	adds	r1, #16
 801c5e8:	2a07      	cmp	r2, #7
 801c5ea:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c5ee:	605e      	str	r6, [r3, #4]
 801c5f0:	dc02      	bgt.n	801c5f8 <_vfiprintf_r+0x88c>
 801c5f2:	3308      	adds	r3, #8
 801c5f4:	3c10      	subs	r4, #16
 801c5f6:	e7d1      	b.n	801c59c <_vfiprintf_r+0x830>
 801c5f8:	aa10      	add	r2, sp, #64	; 0x40
 801c5fa:	4639      	mov	r1, r7
 801c5fc:	4648      	mov	r0, r9
 801c5fe:	f7ff fb83 	bl	801bd08 <__sprint_r>
 801c602:	2800      	cmp	r0, #0
 801c604:	d1e0      	bne.n	801c5c8 <_vfiprintf_r+0x85c>
 801c606:	ab13      	add	r3, sp, #76	; 0x4c
 801c608:	e7f4      	b.n	801c5f4 <_vfiprintf_r+0x888>
 801c60a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c60c:	b913      	cbnz	r3, 801c614 <_vfiprintf_r+0x8a8>
 801c60e:	2300      	movs	r3, #0
 801c610:	9311      	str	r3, [sp, #68]	; 0x44
 801c612:	e7d9      	b.n	801c5c8 <_vfiprintf_r+0x85c>
 801c614:	aa10      	add	r2, sp, #64	; 0x40
 801c616:	4639      	mov	r1, r7
 801c618:	4648      	mov	r0, r9
 801c61a:	f7ff fb75 	bl	801bd08 <__sprint_r>
 801c61e:	2800      	cmp	r0, #0
 801c620:	d0f5      	beq.n	801c60e <_vfiprintf_r+0x8a2>
 801c622:	e7d1      	b.n	801c5c8 <_vfiprintf_r+0x85c>
 801c624:	ea54 0205 	orrs.w	r2, r4, r5
 801c628:	f8cd a014 	str.w	sl, [sp, #20]
 801c62c:	f43f ad8a 	beq.w	801c144 <_vfiprintf_r+0x3d8>
 801c630:	2b01      	cmp	r3, #1
 801c632:	f43f aed9 	beq.w	801c3e8 <_vfiprintf_r+0x67c>
 801c636:	2b02      	cmp	r3, #2
 801c638:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 801c63c:	f43f af26 	beq.w	801c48c <_vfiprintf_r+0x720>
 801c640:	f004 0207 	and.w	r2, r4, #7
 801c644:	08e4      	lsrs	r4, r4, #3
 801c646:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801c64a:	08ed      	lsrs	r5, r5, #3
 801c64c:	3230      	adds	r2, #48	; 0x30
 801c64e:	ea54 0005 	orrs.w	r0, r4, r5
 801c652:	4659      	mov	r1, fp
 801c654:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 801c658:	d1f2      	bne.n	801c640 <_vfiprintf_r+0x8d4>
 801c65a:	9b05      	ldr	r3, [sp, #20]
 801c65c:	07d8      	lsls	r0, r3, #31
 801c65e:	d506      	bpl.n	801c66e <_vfiprintf_r+0x902>
 801c660:	2a30      	cmp	r2, #48	; 0x30
 801c662:	d004      	beq.n	801c66e <_vfiprintf_r+0x902>
 801c664:	2230      	movs	r2, #48	; 0x30
 801c666:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801c66a:	f1a1 0b02 	sub.w	fp, r1, #2
 801c66e:	ab3c      	add	r3, sp, #240	; 0xf0
 801c670:	eba3 030b 	sub.w	r3, r3, fp
 801c674:	9d01      	ldr	r5, [sp, #4]
 801c676:	f8dd a014 	ldr.w	sl, [sp, #20]
 801c67a:	9301      	str	r3, [sp, #4]
 801c67c:	e59b      	b.n	801c1b6 <_vfiprintf_r+0x44a>
 801c67e:	bf00      	nop
 801c680:	08020691 	.word	0x08020691
 801c684:	080206a1 	.word	0x080206a1

0801c688 <__sbprintf>:
 801c688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c68a:	461f      	mov	r7, r3
 801c68c:	898b      	ldrh	r3, [r1, #12]
 801c68e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 801c692:	f023 0302 	bic.w	r3, r3, #2
 801c696:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c69a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801c69c:	9319      	str	r3, [sp, #100]	; 0x64
 801c69e:	89cb      	ldrh	r3, [r1, #14]
 801c6a0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c6a4:	69cb      	ldr	r3, [r1, #28]
 801c6a6:	9307      	str	r3, [sp, #28]
 801c6a8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801c6aa:	9309      	str	r3, [sp, #36]	; 0x24
 801c6ac:	ab1a      	add	r3, sp, #104	; 0x68
 801c6ae:	9300      	str	r3, [sp, #0]
 801c6b0:	9304      	str	r3, [sp, #16]
 801c6b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c6b6:	4615      	mov	r5, r2
 801c6b8:	4606      	mov	r6, r0
 801c6ba:	9302      	str	r3, [sp, #8]
 801c6bc:	9305      	str	r3, [sp, #20]
 801c6be:	a816      	add	r0, sp, #88	; 0x58
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	460c      	mov	r4, r1
 801c6c4:	9306      	str	r3, [sp, #24]
 801c6c6:	f7fc f9cd 	bl	8018a64 <__retarget_lock_init_recursive>
 801c6ca:	462a      	mov	r2, r5
 801c6cc:	463b      	mov	r3, r7
 801c6ce:	4669      	mov	r1, sp
 801c6d0:	4630      	mov	r0, r6
 801c6d2:	f7ff fb4b 	bl	801bd6c <_vfiprintf_r>
 801c6d6:	1e05      	subs	r5, r0, #0
 801c6d8:	db07      	blt.n	801c6ea <__sbprintf+0x62>
 801c6da:	4669      	mov	r1, sp
 801c6dc:	4630      	mov	r0, r6
 801c6de:	f000 f8f5 	bl	801c8cc <_fflush_r>
 801c6e2:	2800      	cmp	r0, #0
 801c6e4:	bf18      	it	ne
 801c6e6:	f04f 35ff 	movne.w	r5, #4294967295
 801c6ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c6ee:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c6f0:	065b      	lsls	r3, r3, #25
 801c6f2:	bf42      	ittt	mi
 801c6f4:	89a3      	ldrhmi	r3, [r4, #12]
 801c6f6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801c6fa:	81a3      	strhmi	r3, [r4, #12]
 801c6fc:	f7fc f9b3 	bl	8018a66 <__retarget_lock_close_recursive>
 801c700:	4628      	mov	r0, r5
 801c702:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801c706:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c708 <_fclose_r>:
 801c708:	b570      	push	{r4, r5, r6, lr}
 801c70a:	4606      	mov	r6, r0
 801c70c:	460c      	mov	r4, r1
 801c70e:	b911      	cbnz	r1, 801c716 <_fclose_r+0xe>
 801c710:	2500      	movs	r5, #0
 801c712:	4628      	mov	r0, r5
 801c714:	bd70      	pop	{r4, r5, r6, pc}
 801c716:	b118      	cbz	r0, 801c720 <_fclose_r+0x18>
 801c718:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801c71a:	b90b      	cbnz	r3, 801c720 <_fclose_r+0x18>
 801c71c:	f7fb fdb6 	bl	801828c <__sinit>
 801c720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c722:	07d8      	lsls	r0, r3, #31
 801c724:	d405      	bmi.n	801c732 <_fclose_r+0x2a>
 801c726:	89a3      	ldrh	r3, [r4, #12]
 801c728:	0599      	lsls	r1, r3, #22
 801c72a:	d402      	bmi.n	801c732 <_fclose_r+0x2a>
 801c72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c72e:	f7fc f99b 	bl	8018a68 <__retarget_lock_acquire_recursive>
 801c732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c736:	b93b      	cbnz	r3, 801c748 <_fclose_r+0x40>
 801c738:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801c73a:	f015 0501 	ands.w	r5, r5, #1
 801c73e:	d1e7      	bne.n	801c710 <_fclose_r+0x8>
 801c740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c742:	f7fc f992 	bl	8018a6a <__retarget_lock_release_recursive>
 801c746:	e7e4      	b.n	801c712 <_fclose_r+0xa>
 801c748:	4621      	mov	r1, r4
 801c74a:	4630      	mov	r0, r6
 801c74c:	f000 f834 	bl	801c7b8 <__sflush_r>
 801c750:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801c752:	4605      	mov	r5, r0
 801c754:	b133      	cbz	r3, 801c764 <_fclose_r+0x5c>
 801c756:	69e1      	ldr	r1, [r4, #28]
 801c758:	4630      	mov	r0, r6
 801c75a:	4798      	blx	r3
 801c75c:	2800      	cmp	r0, #0
 801c75e:	bfb8      	it	lt
 801c760:	f04f 35ff 	movlt.w	r5, #4294967295
 801c764:	89a3      	ldrh	r3, [r4, #12]
 801c766:	061a      	lsls	r2, r3, #24
 801c768:	d503      	bpl.n	801c772 <_fclose_r+0x6a>
 801c76a:	6921      	ldr	r1, [r4, #16]
 801c76c:	4630      	mov	r0, r6
 801c76e:	f7fc f9ef 	bl	8018b50 <_free_r>
 801c772:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c774:	b141      	cbz	r1, 801c788 <_fclose_r+0x80>
 801c776:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801c77a:	4299      	cmp	r1, r3
 801c77c:	d002      	beq.n	801c784 <_fclose_r+0x7c>
 801c77e:	4630      	mov	r0, r6
 801c780:	f7fc f9e6 	bl	8018b50 <_free_r>
 801c784:	2300      	movs	r3, #0
 801c786:	6323      	str	r3, [r4, #48]	; 0x30
 801c788:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801c78a:	b121      	cbz	r1, 801c796 <_fclose_r+0x8e>
 801c78c:	4630      	mov	r0, r6
 801c78e:	f7fc f9df 	bl	8018b50 <_free_r>
 801c792:	2300      	movs	r3, #0
 801c794:	6463      	str	r3, [r4, #68]	; 0x44
 801c796:	f7fb fd6d 	bl	8018274 <__sfp_lock_acquire>
 801c79a:	2300      	movs	r3, #0
 801c79c:	81a3      	strh	r3, [r4, #12]
 801c79e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c7a0:	07db      	lsls	r3, r3, #31
 801c7a2:	d402      	bmi.n	801c7aa <_fclose_r+0xa2>
 801c7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7a6:	f7fc f960 	bl	8018a6a <__retarget_lock_release_recursive>
 801c7aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c7ac:	f7fc f95b 	bl	8018a66 <__retarget_lock_close_recursive>
 801c7b0:	f7fb fd66 	bl	8018280 <__sfp_lock_release>
 801c7b4:	e7ad      	b.n	801c712 <_fclose_r+0xa>
	...

0801c7b8 <__sflush_r>:
 801c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7ba:	898b      	ldrh	r3, [r1, #12]
 801c7bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c7c0:	4605      	mov	r5, r0
 801c7c2:	0718      	lsls	r0, r3, #28
 801c7c4:	460c      	mov	r4, r1
 801c7c6:	d45e      	bmi.n	801c886 <__sflush_r+0xce>
 801c7c8:	684b      	ldr	r3, [r1, #4]
 801c7ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	818a      	strh	r2, [r1, #12]
 801c7d2:	dc04      	bgt.n	801c7de <__sflush_r+0x26>
 801c7d4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	dc01      	bgt.n	801c7de <__sflush_r+0x26>
 801c7da:	2000      	movs	r0, #0
 801c7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c7e0:	2e00      	cmp	r6, #0
 801c7e2:	d0fa      	beq.n	801c7da <__sflush_r+0x22>
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c7ea:	682f      	ldr	r7, [r5, #0]
 801c7ec:	69e1      	ldr	r1, [r4, #28]
 801c7ee:	602b      	str	r3, [r5, #0]
 801c7f0:	d036      	beq.n	801c860 <__sflush_r+0xa8>
 801c7f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801c7f4:	89a3      	ldrh	r3, [r4, #12]
 801c7f6:	075a      	lsls	r2, r3, #29
 801c7f8:	d505      	bpl.n	801c806 <__sflush_r+0x4e>
 801c7fa:	6863      	ldr	r3, [r4, #4]
 801c7fc:	1ac0      	subs	r0, r0, r3
 801c7fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c800:	b10b      	cbz	r3, 801c806 <__sflush_r+0x4e>
 801c802:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c804:	1ac0      	subs	r0, r0, r3
 801c806:	2300      	movs	r3, #0
 801c808:	4602      	mov	r2, r0
 801c80a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c80c:	69e1      	ldr	r1, [r4, #28]
 801c80e:	4628      	mov	r0, r5
 801c810:	47b0      	blx	r6
 801c812:	1c43      	adds	r3, r0, #1
 801c814:	89a3      	ldrh	r3, [r4, #12]
 801c816:	d106      	bne.n	801c826 <__sflush_r+0x6e>
 801c818:	6829      	ldr	r1, [r5, #0]
 801c81a:	291d      	cmp	r1, #29
 801c81c:	d82f      	bhi.n	801c87e <__sflush_r+0xc6>
 801c81e:	4a2a      	ldr	r2, [pc, #168]	; (801c8c8 <__sflush_r+0x110>)
 801c820:	410a      	asrs	r2, r1
 801c822:	07d6      	lsls	r6, r2, #31
 801c824:	d42b      	bmi.n	801c87e <__sflush_r+0xc6>
 801c826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c82a:	b21b      	sxth	r3, r3
 801c82c:	2200      	movs	r2, #0
 801c82e:	6062      	str	r2, [r4, #4]
 801c830:	04d9      	lsls	r1, r3, #19
 801c832:	6922      	ldr	r2, [r4, #16]
 801c834:	81a3      	strh	r3, [r4, #12]
 801c836:	6022      	str	r2, [r4, #0]
 801c838:	d504      	bpl.n	801c844 <__sflush_r+0x8c>
 801c83a:	1c42      	adds	r2, r0, #1
 801c83c:	d101      	bne.n	801c842 <__sflush_r+0x8a>
 801c83e:	682b      	ldr	r3, [r5, #0]
 801c840:	b903      	cbnz	r3, 801c844 <__sflush_r+0x8c>
 801c842:	6520      	str	r0, [r4, #80]	; 0x50
 801c844:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c846:	602f      	str	r7, [r5, #0]
 801c848:	2900      	cmp	r1, #0
 801c84a:	d0c6      	beq.n	801c7da <__sflush_r+0x22>
 801c84c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801c850:	4299      	cmp	r1, r3
 801c852:	d002      	beq.n	801c85a <__sflush_r+0xa2>
 801c854:	4628      	mov	r0, r5
 801c856:	f7fc f97b 	bl	8018b50 <_free_r>
 801c85a:	2000      	movs	r0, #0
 801c85c:	6320      	str	r0, [r4, #48]	; 0x30
 801c85e:	e7bd      	b.n	801c7dc <__sflush_r+0x24>
 801c860:	2301      	movs	r3, #1
 801c862:	4628      	mov	r0, r5
 801c864:	47b0      	blx	r6
 801c866:	1c41      	adds	r1, r0, #1
 801c868:	d1c4      	bne.n	801c7f4 <__sflush_r+0x3c>
 801c86a:	682b      	ldr	r3, [r5, #0]
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d0c1      	beq.n	801c7f4 <__sflush_r+0x3c>
 801c870:	2b1d      	cmp	r3, #29
 801c872:	d001      	beq.n	801c878 <__sflush_r+0xc0>
 801c874:	2b16      	cmp	r3, #22
 801c876:	d101      	bne.n	801c87c <__sflush_r+0xc4>
 801c878:	602f      	str	r7, [r5, #0]
 801c87a:	e7ae      	b.n	801c7da <__sflush_r+0x22>
 801c87c:	89a3      	ldrh	r3, [r4, #12]
 801c87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c882:	81a3      	strh	r3, [r4, #12]
 801c884:	e7aa      	b.n	801c7dc <__sflush_r+0x24>
 801c886:	690f      	ldr	r7, [r1, #16]
 801c888:	2f00      	cmp	r7, #0
 801c88a:	d0a6      	beq.n	801c7da <__sflush_r+0x22>
 801c88c:	079b      	lsls	r3, r3, #30
 801c88e:	680e      	ldr	r6, [r1, #0]
 801c890:	bf08      	it	eq
 801c892:	694b      	ldreq	r3, [r1, #20]
 801c894:	600f      	str	r7, [r1, #0]
 801c896:	bf18      	it	ne
 801c898:	2300      	movne	r3, #0
 801c89a:	1bf6      	subs	r6, r6, r7
 801c89c:	608b      	str	r3, [r1, #8]
 801c89e:	2e00      	cmp	r6, #0
 801c8a0:	dd9b      	ble.n	801c7da <__sflush_r+0x22>
 801c8a2:	69e1      	ldr	r1, [r4, #28]
 801c8a4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 801c8a8:	4633      	mov	r3, r6
 801c8aa:	463a      	mov	r2, r7
 801c8ac:	4628      	mov	r0, r5
 801c8ae:	47e0      	blx	ip
 801c8b0:	2800      	cmp	r0, #0
 801c8b2:	dc06      	bgt.n	801c8c2 <__sflush_r+0x10a>
 801c8b4:	89a3      	ldrh	r3, [r4, #12]
 801c8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c8ba:	81a3      	strh	r3, [r4, #12]
 801c8bc:	f04f 30ff 	mov.w	r0, #4294967295
 801c8c0:	e78c      	b.n	801c7dc <__sflush_r+0x24>
 801c8c2:	4407      	add	r7, r0
 801c8c4:	1a36      	subs	r6, r6, r0
 801c8c6:	e7ea      	b.n	801c89e <__sflush_r+0xe6>
 801c8c8:	dfbffffe 	.word	0xdfbffffe

0801c8cc <_fflush_r>:
 801c8cc:	b538      	push	{r3, r4, r5, lr}
 801c8ce:	460c      	mov	r4, r1
 801c8d0:	4605      	mov	r5, r0
 801c8d2:	b118      	cbz	r0, 801c8dc <_fflush_r+0x10>
 801c8d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801c8d6:	b90b      	cbnz	r3, 801c8dc <_fflush_r+0x10>
 801c8d8:	f7fb fcd8 	bl	801828c <__sinit>
 801c8dc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801c8e0:	b1b8      	cbz	r0, 801c912 <_fflush_r+0x46>
 801c8e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c8e4:	07db      	lsls	r3, r3, #31
 801c8e6:	d404      	bmi.n	801c8f2 <_fflush_r+0x26>
 801c8e8:	0581      	lsls	r1, r0, #22
 801c8ea:	d402      	bmi.n	801c8f2 <_fflush_r+0x26>
 801c8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c8ee:	f7fc f8bb 	bl	8018a68 <__retarget_lock_acquire_recursive>
 801c8f2:	4628      	mov	r0, r5
 801c8f4:	4621      	mov	r1, r4
 801c8f6:	f7ff ff5f 	bl	801c7b8 <__sflush_r>
 801c8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c8fc:	07da      	lsls	r2, r3, #31
 801c8fe:	4605      	mov	r5, r0
 801c900:	d405      	bmi.n	801c90e <_fflush_r+0x42>
 801c902:	89a3      	ldrh	r3, [r4, #12]
 801c904:	059b      	lsls	r3, r3, #22
 801c906:	d402      	bmi.n	801c90e <_fflush_r+0x42>
 801c908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c90a:	f7fc f8ae 	bl	8018a6a <__retarget_lock_release_recursive>
 801c90e:	4628      	mov	r0, r5
 801c910:	bd38      	pop	{r3, r4, r5, pc}
 801c912:	4605      	mov	r5, r0
 801c914:	e7fb      	b.n	801c90e <_fflush_r+0x42>

0801c916 <__swhatbuf_r>:
 801c916:	b570      	push	{r4, r5, r6, lr}
 801c918:	460c      	mov	r4, r1
 801c91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c91e:	2900      	cmp	r1, #0
 801c920:	b096      	sub	sp, #88	; 0x58
 801c922:	4615      	mov	r5, r2
 801c924:	461e      	mov	r6, r3
 801c926:	da07      	bge.n	801c938 <__swhatbuf_r+0x22>
 801c928:	89a1      	ldrh	r1, [r4, #12]
 801c92a:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 801c92e:	d017      	beq.n	801c960 <__swhatbuf_r+0x4a>
 801c930:	2100      	movs	r1, #0
 801c932:	2340      	movs	r3, #64	; 0x40
 801c934:	4608      	mov	r0, r1
 801c936:	e00f      	b.n	801c958 <__swhatbuf_r+0x42>
 801c938:	466a      	mov	r2, sp
 801c93a:	f000 f8d7 	bl	801caec <_fstat_r>
 801c93e:	2800      	cmp	r0, #0
 801c940:	dbf2      	blt.n	801c928 <__swhatbuf_r+0x12>
 801c942:	9901      	ldr	r1, [sp, #4]
 801c944:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c948:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c94c:	4259      	negs	r1, r3
 801c94e:	4159      	adcs	r1, r3
 801c950:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801c954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c958:	6031      	str	r1, [r6, #0]
 801c95a:	602b      	str	r3, [r5, #0]
 801c95c:	b016      	add	sp, #88	; 0x58
 801c95e:	bd70      	pop	{r4, r5, r6, pc}
 801c960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c964:	e7e6      	b.n	801c934 <__swhatbuf_r+0x1e>

0801c966 <__smakebuf_r>:
 801c966:	898b      	ldrh	r3, [r1, #12]
 801c968:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c96a:	079d      	lsls	r5, r3, #30
 801c96c:	4606      	mov	r6, r0
 801c96e:	460c      	mov	r4, r1
 801c970:	d507      	bpl.n	801c982 <__smakebuf_r+0x1c>
 801c972:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801c976:	6023      	str	r3, [r4, #0]
 801c978:	6123      	str	r3, [r4, #16]
 801c97a:	2301      	movs	r3, #1
 801c97c:	6163      	str	r3, [r4, #20]
 801c97e:	b002      	add	sp, #8
 801c980:	bd70      	pop	{r4, r5, r6, pc}
 801c982:	ab01      	add	r3, sp, #4
 801c984:	466a      	mov	r2, sp
 801c986:	f7ff ffc6 	bl	801c916 <__swhatbuf_r>
 801c98a:	9900      	ldr	r1, [sp, #0]
 801c98c:	4605      	mov	r5, r0
 801c98e:	4630      	mov	r0, r6
 801c990:	f7fc f99e 	bl	8018cd0 <_malloc_r>
 801c994:	b948      	cbnz	r0, 801c9aa <__smakebuf_r+0x44>
 801c996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c99a:	059a      	lsls	r2, r3, #22
 801c99c:	d4ef      	bmi.n	801c97e <__smakebuf_r+0x18>
 801c99e:	f023 0303 	bic.w	r3, r3, #3
 801c9a2:	f043 0302 	orr.w	r3, r3, #2
 801c9a6:	81a3      	strh	r3, [r4, #12]
 801c9a8:	e7e3      	b.n	801c972 <__smakebuf_r+0xc>
 801c9aa:	89a3      	ldrh	r3, [r4, #12]
 801c9ac:	6020      	str	r0, [r4, #0]
 801c9ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c9b2:	81a3      	strh	r3, [r4, #12]
 801c9b4:	9b00      	ldr	r3, [sp, #0]
 801c9b6:	6163      	str	r3, [r4, #20]
 801c9b8:	9b01      	ldr	r3, [sp, #4]
 801c9ba:	6120      	str	r0, [r4, #16]
 801c9bc:	b15b      	cbz	r3, 801c9d6 <__smakebuf_r+0x70>
 801c9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c9c2:	4630      	mov	r0, r6
 801c9c4:	f000 f8a4 	bl	801cb10 <_isatty_r>
 801c9c8:	b128      	cbz	r0, 801c9d6 <__smakebuf_r+0x70>
 801c9ca:	89a3      	ldrh	r3, [r4, #12]
 801c9cc:	f023 0303 	bic.w	r3, r3, #3
 801c9d0:	f043 0301 	orr.w	r3, r3, #1
 801c9d4:	81a3      	strh	r3, [r4, #12]
 801c9d6:	89a3      	ldrh	r3, [r4, #12]
 801c9d8:	431d      	orrs	r5, r3
 801c9da:	81a5      	strh	r5, [r4, #12]
 801c9dc:	e7cf      	b.n	801c97e <__smakebuf_r+0x18>

0801c9de <__fputwc>:
 801c9de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c9e2:	4680      	mov	r8, r0
 801c9e4:	460e      	mov	r6, r1
 801c9e6:	4615      	mov	r5, r2
 801c9e8:	f000 f876 	bl	801cad8 <__locale_mb_cur_max>
 801c9ec:	2801      	cmp	r0, #1
 801c9ee:	4604      	mov	r4, r0
 801c9f0:	d11b      	bne.n	801ca2a <__fputwc+0x4c>
 801c9f2:	1e73      	subs	r3, r6, #1
 801c9f4:	2bfe      	cmp	r3, #254	; 0xfe
 801c9f6:	d818      	bhi.n	801ca2a <__fputwc+0x4c>
 801c9f8:	f88d 6004 	strb.w	r6, [sp, #4]
 801c9fc:	2700      	movs	r7, #0
 801c9fe:	f10d 0904 	add.w	r9, sp, #4
 801ca02:	42a7      	cmp	r7, r4
 801ca04:	d020      	beq.n	801ca48 <__fputwc+0x6a>
 801ca06:	68ab      	ldr	r3, [r5, #8]
 801ca08:	f817 1009 	ldrb.w	r1, [r7, r9]
 801ca0c:	3b01      	subs	r3, #1
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	60ab      	str	r3, [r5, #8]
 801ca12:	da04      	bge.n	801ca1e <__fputwc+0x40>
 801ca14:	69aa      	ldr	r2, [r5, #24]
 801ca16:	4293      	cmp	r3, r2
 801ca18:	db1a      	blt.n	801ca50 <__fputwc+0x72>
 801ca1a:	290a      	cmp	r1, #10
 801ca1c:	d018      	beq.n	801ca50 <__fputwc+0x72>
 801ca1e:	682b      	ldr	r3, [r5, #0]
 801ca20:	1c5a      	adds	r2, r3, #1
 801ca22:	602a      	str	r2, [r5, #0]
 801ca24:	7019      	strb	r1, [r3, #0]
 801ca26:	3701      	adds	r7, #1
 801ca28:	e7eb      	b.n	801ca02 <__fputwc+0x24>
 801ca2a:	4632      	mov	r2, r6
 801ca2c:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 801ca30:	a901      	add	r1, sp, #4
 801ca32:	4640      	mov	r0, r8
 801ca34:	f001 faba 	bl	801dfac <_wcrtomb_r>
 801ca38:	1c42      	adds	r2, r0, #1
 801ca3a:	4604      	mov	r4, r0
 801ca3c:	d1de      	bne.n	801c9fc <__fputwc+0x1e>
 801ca3e:	89ab      	ldrh	r3, [r5, #12]
 801ca40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ca44:	81ab      	strh	r3, [r5, #12]
 801ca46:	4606      	mov	r6, r0
 801ca48:	4630      	mov	r0, r6
 801ca4a:	b003      	add	sp, #12
 801ca4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ca50:	462a      	mov	r2, r5
 801ca52:	4640      	mov	r0, r8
 801ca54:	f001 fb3d 	bl	801e0d2 <__swbuf_r>
 801ca58:	1c43      	adds	r3, r0, #1
 801ca5a:	d1e4      	bne.n	801ca26 <__fputwc+0x48>
 801ca5c:	4606      	mov	r6, r0
 801ca5e:	e7f3      	b.n	801ca48 <__fputwc+0x6a>

0801ca60 <_fputwc_r>:
 801ca60:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801ca62:	07db      	lsls	r3, r3, #31
 801ca64:	b570      	push	{r4, r5, r6, lr}
 801ca66:	4605      	mov	r5, r0
 801ca68:	460e      	mov	r6, r1
 801ca6a:	4614      	mov	r4, r2
 801ca6c:	d405      	bmi.n	801ca7a <_fputwc_r+0x1a>
 801ca6e:	8993      	ldrh	r3, [r2, #12]
 801ca70:	0598      	lsls	r0, r3, #22
 801ca72:	d402      	bmi.n	801ca7a <_fputwc_r+0x1a>
 801ca74:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801ca76:	f7fb fff7 	bl	8018a68 <__retarget_lock_acquire_recursive>
 801ca7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca7e:	0499      	lsls	r1, r3, #18
 801ca80:	d406      	bmi.n	801ca90 <_fputwc_r+0x30>
 801ca82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ca86:	81a3      	strh	r3, [r4, #12]
 801ca88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ca8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ca8e:	6663      	str	r3, [r4, #100]	; 0x64
 801ca90:	4622      	mov	r2, r4
 801ca92:	4628      	mov	r0, r5
 801ca94:	4631      	mov	r1, r6
 801ca96:	f7ff ffa2 	bl	801c9de <__fputwc>
 801ca9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ca9c:	07da      	lsls	r2, r3, #31
 801ca9e:	4605      	mov	r5, r0
 801caa0:	d405      	bmi.n	801caae <_fputwc_r+0x4e>
 801caa2:	89a3      	ldrh	r3, [r4, #12]
 801caa4:	059b      	lsls	r3, r3, #22
 801caa6:	d402      	bmi.n	801caae <_fputwc_r+0x4e>
 801caa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801caaa:	f7fb ffde 	bl	8018a6a <__retarget_lock_release_recursive>
 801caae:	4628      	mov	r0, r5
 801cab0:	bd70      	pop	{r4, r5, r6, pc}

0801cab2 <strncpy>:
 801cab2:	b510      	push	{r4, lr}
 801cab4:	3901      	subs	r1, #1
 801cab6:	4603      	mov	r3, r0
 801cab8:	b132      	cbz	r2, 801cac8 <strncpy+0x16>
 801caba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801cabe:	f803 4b01 	strb.w	r4, [r3], #1
 801cac2:	3a01      	subs	r2, #1
 801cac4:	2c00      	cmp	r4, #0
 801cac6:	d1f7      	bne.n	801cab8 <strncpy+0x6>
 801cac8:	441a      	add	r2, r3
 801caca:	2100      	movs	r1, #0
 801cacc:	4293      	cmp	r3, r2
 801cace:	d100      	bne.n	801cad2 <strncpy+0x20>
 801cad0:	bd10      	pop	{r4, pc}
 801cad2:	f803 1b01 	strb.w	r1, [r3], #1
 801cad6:	e7f9      	b.n	801cacc <strncpy+0x1a>

0801cad8 <__locale_mb_cur_max>:
 801cad8:	4b01      	ldr	r3, [pc, #4]	; (801cae0 <__locale_mb_cur_max+0x8>)
 801cada:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801cade:	4770      	bx	lr
 801cae0:	200005e0 	.word	0x200005e0

0801cae4 <_localeconv_r>:
 801cae4:	4800      	ldr	r0, [pc, #0]	; (801cae8 <_localeconv_r+0x4>)
 801cae6:	4770      	bx	lr
 801cae8:	200006d0 	.word	0x200006d0

0801caec <_fstat_r>:
 801caec:	b538      	push	{r3, r4, r5, lr}
 801caee:	4d07      	ldr	r5, [pc, #28]	; (801cb0c <_fstat_r+0x20>)
 801caf0:	2300      	movs	r3, #0
 801caf2:	4604      	mov	r4, r0
 801caf4:	4608      	mov	r0, r1
 801caf6:	4611      	mov	r1, r2
 801caf8:	602b      	str	r3, [r5, #0]
 801cafa:	f7ed febe 	bl	800a87a <_fstat>
 801cafe:	1c43      	adds	r3, r0, #1
 801cb00:	d102      	bne.n	801cb08 <_fstat_r+0x1c>
 801cb02:	682b      	ldr	r3, [r5, #0]
 801cb04:	b103      	cbz	r3, 801cb08 <_fstat_r+0x1c>
 801cb06:	6023      	str	r3, [r4, #0]
 801cb08:	bd38      	pop	{r3, r4, r5, pc}
 801cb0a:	bf00      	nop
 801cb0c:	200056ac 	.word	0x200056ac

0801cb10 <_isatty_r>:
 801cb10:	b538      	push	{r3, r4, r5, lr}
 801cb12:	4d06      	ldr	r5, [pc, #24]	; (801cb2c <_isatty_r+0x1c>)
 801cb14:	2300      	movs	r3, #0
 801cb16:	4604      	mov	r4, r0
 801cb18:	4608      	mov	r0, r1
 801cb1a:	602b      	str	r3, [r5, #0]
 801cb1c:	f7ed febc 	bl	800a898 <_isatty>
 801cb20:	1c43      	adds	r3, r0, #1
 801cb22:	d102      	bne.n	801cb2a <_isatty_r+0x1a>
 801cb24:	682b      	ldr	r3, [r5, #0]
 801cb26:	b103      	cbz	r3, 801cb2a <_isatty_r+0x1a>
 801cb28:	6023      	str	r3, [r4, #0]
 801cb2a:	bd38      	pop	{r3, r4, r5, pc}
 801cb2c:	200056ac 	.word	0x200056ac

0801cb30 <_sbrk_r>:
 801cb30:	b538      	push	{r3, r4, r5, lr}
 801cb32:	4d06      	ldr	r5, [pc, #24]	; (801cb4c <_sbrk_r+0x1c>)
 801cb34:	2300      	movs	r3, #0
 801cb36:	4604      	mov	r4, r0
 801cb38:	4608      	mov	r0, r1
 801cb3a:	602b      	str	r3, [r5, #0]
 801cb3c:	f7ed fec2 	bl	800a8c4 <_sbrk>
 801cb40:	1c43      	adds	r3, r0, #1
 801cb42:	d102      	bne.n	801cb4a <_sbrk_r+0x1a>
 801cb44:	682b      	ldr	r3, [r5, #0]
 801cb46:	b103      	cbz	r3, 801cb4a <_sbrk_r+0x1a>
 801cb48:	6023      	str	r3, [r4, #0]
 801cb4a:	bd38      	pop	{r3, r4, r5, pc}
 801cb4c:	200056ac 	.word	0x200056ac

0801cb50 <__libc_fini_array>:
 801cb50:	b538      	push	{r3, r4, r5, lr}
 801cb52:	4d07      	ldr	r5, [pc, #28]	; (801cb70 <__libc_fini_array+0x20>)
 801cb54:	4c07      	ldr	r4, [pc, #28]	; (801cb74 <__libc_fini_array+0x24>)
 801cb56:	1b64      	subs	r4, r4, r5
 801cb58:	10a4      	asrs	r4, r4, #2
 801cb5a:	b91c      	cbnz	r4, 801cb64 <__libc_fini_array+0x14>
 801cb5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb60:	f002 babe 	b.w	801f0e0 <_fini>
 801cb64:	3c01      	subs	r4, #1
 801cb66:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801cb6a:	4798      	blx	r3
 801cb6c:	e7f5      	b.n	801cb5a <__libc_fini_array+0xa>
 801cb6e:	bf00      	nop
 801cb70:	08020908 	.word	0x08020908
 801cb74:	0802090c 	.word	0x0802090c

0801cb78 <sysconf>:
 801cb78:	2808      	cmp	r0, #8
 801cb7a:	b508      	push	{r3, lr}
 801cb7c:	d006      	beq.n	801cb8c <sysconf+0x14>
 801cb7e:	f7fb ff47 	bl	8018a10 <__errno>
 801cb82:	2316      	movs	r3, #22
 801cb84:	6003      	str	r3, [r0, #0]
 801cb86:	f04f 30ff 	mov.w	r0, #4294967295
 801cb8a:	bd08      	pop	{r3, pc}
 801cb8c:	2080      	movs	r0, #128	; 0x80
 801cb8e:	e7fc      	b.n	801cb8a <sysconf+0x12>

0801cb90 <frexp>:
 801cb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb92:	4617      	mov	r7, r2
 801cb94:	2200      	movs	r2, #0
 801cb96:	603a      	str	r2, [r7, #0]
 801cb98:	4a14      	ldr	r2, [pc, #80]	; (801cbec <frexp+0x5c>)
 801cb9a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801cb9e:	4296      	cmp	r6, r2
 801cba0:	4604      	mov	r4, r0
 801cba2:	460d      	mov	r5, r1
 801cba4:	460b      	mov	r3, r1
 801cba6:	dc1e      	bgt.n	801cbe6 <frexp+0x56>
 801cba8:	4602      	mov	r2, r0
 801cbaa:	4332      	orrs	r2, r6
 801cbac:	d01b      	beq.n	801cbe6 <frexp+0x56>
 801cbae:	4a10      	ldr	r2, [pc, #64]	; (801cbf0 <frexp+0x60>)
 801cbb0:	400a      	ands	r2, r1
 801cbb2:	b952      	cbnz	r2, 801cbca <frexp+0x3a>
 801cbb4:	4b0f      	ldr	r3, [pc, #60]	; (801cbf4 <frexp+0x64>)
 801cbb6:	2200      	movs	r2, #0
 801cbb8:	f7eb fef6 	bl	80089a8 <__aeabi_dmul>
 801cbbc:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801cbc0:	4604      	mov	r4, r0
 801cbc2:	460b      	mov	r3, r1
 801cbc4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801cbc8:	603a      	str	r2, [r7, #0]
 801cbca:	683a      	ldr	r2, [r7, #0]
 801cbcc:	1536      	asrs	r6, r6, #20
 801cbce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cbd2:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 801cbd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cbda:	4432      	add	r2, r6
 801cbdc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801cbe0:	603a      	str	r2, [r7, #0]
 801cbe2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801cbe6:	4620      	mov	r0, r4
 801cbe8:	4629      	mov	r1, r5
 801cbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cbec:	7fefffff 	.word	0x7fefffff
 801cbf0:	7ff00000 	.word	0x7ff00000
 801cbf4:	43500000 	.word	0x43500000

0801cbf8 <__register_exitproc>:
 801cbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbfc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801cc6c <__register_exitproc+0x74>
 801cc00:	4606      	mov	r6, r0
 801cc02:	f8da 0000 	ldr.w	r0, [sl]
 801cc06:	4698      	mov	r8, r3
 801cc08:	460f      	mov	r7, r1
 801cc0a:	4691      	mov	r9, r2
 801cc0c:	f7fb ff2c 	bl	8018a68 <__retarget_lock_acquire_recursive>
 801cc10:	4b17      	ldr	r3, [pc, #92]	; (801cc70 <__register_exitproc+0x78>)
 801cc12:	681c      	ldr	r4, [r3, #0]
 801cc14:	b90c      	cbnz	r4, 801cc1a <__register_exitproc+0x22>
 801cc16:	4c17      	ldr	r4, [pc, #92]	; (801cc74 <__register_exitproc+0x7c>)
 801cc18:	601c      	str	r4, [r3, #0]
 801cc1a:	6865      	ldr	r5, [r4, #4]
 801cc1c:	f8da 0000 	ldr.w	r0, [sl]
 801cc20:	2d1f      	cmp	r5, #31
 801cc22:	dd05      	ble.n	801cc30 <__register_exitproc+0x38>
 801cc24:	f7fb ff21 	bl	8018a6a <__retarget_lock_release_recursive>
 801cc28:	f04f 30ff 	mov.w	r0, #4294967295
 801cc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc30:	b19e      	cbz	r6, 801cc5a <__register_exitproc+0x62>
 801cc32:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801cc36:	2201      	movs	r2, #1
 801cc38:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801cc3c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801cc40:	40aa      	lsls	r2, r5
 801cc42:	4313      	orrs	r3, r2
 801cc44:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801cc48:	2e02      	cmp	r6, #2
 801cc4a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801cc4e:	bf02      	ittt	eq
 801cc50:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801cc54:	4313      	orreq	r3, r2
 801cc56:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801cc5a:	1c6b      	adds	r3, r5, #1
 801cc5c:	3502      	adds	r5, #2
 801cc5e:	6063      	str	r3, [r4, #4]
 801cc60:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801cc64:	f7fb ff01 	bl	8018a6a <__retarget_lock_release_recursive>
 801cc68:	2000      	movs	r0, #0
 801cc6a:	e7df      	b.n	801cc2c <__register_exitproc+0x34>
 801cc6c:	200001cc 	.word	0x200001cc
 801cc70:	200056b4 	.word	0x200056b4
 801cc74:	200056ec 	.word	0x200056ec

0801cc78 <quorem>:
 801cc78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc7c:	6903      	ldr	r3, [r0, #16]
 801cc7e:	690c      	ldr	r4, [r1, #16]
 801cc80:	42a3      	cmp	r3, r4
 801cc82:	4607      	mov	r7, r0
 801cc84:	db7b      	blt.n	801cd7e <quorem+0x106>
 801cc86:	3c01      	subs	r4, #1
 801cc88:	f101 0814 	add.w	r8, r1, #20
 801cc8c:	f100 0514 	add.w	r5, r0, #20
 801cc90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cc94:	9301      	str	r3, [sp, #4]
 801cc96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cc9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cc9e:	3301      	adds	r3, #1
 801cca0:	429a      	cmp	r2, r3
 801cca2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cca6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ccaa:	fbb2 f6f3 	udiv	r6, r2, r3
 801ccae:	d32e      	bcc.n	801cd0e <quorem+0x96>
 801ccb0:	f04f 0e00 	mov.w	lr, #0
 801ccb4:	4640      	mov	r0, r8
 801ccb6:	46ac      	mov	ip, r5
 801ccb8:	46f2      	mov	sl, lr
 801ccba:	f850 2b04 	ldr.w	r2, [r0], #4
 801ccbe:	b293      	uxth	r3, r2
 801ccc0:	fb06 e303 	mla	r3, r6, r3, lr
 801ccc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ccc8:	0c1a      	lsrs	r2, r3, #16
 801ccca:	b29b      	uxth	r3, r3
 801cccc:	fb06 220e 	mla	r2, r6, lr, r2
 801ccd0:	ebaa 0303 	sub.w	r3, sl, r3
 801ccd4:	f8dc a000 	ldr.w	sl, [ip]
 801ccd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ccdc:	b292      	uxth	r2, r2
 801ccde:	fa13 f38a 	uxtah	r3, r3, sl
 801cce2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801cce6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ccea:	b29b      	uxth	r3, r3
 801ccec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ccf0:	4581      	cmp	r9, r0
 801ccf2:	f84c 3b04 	str.w	r3, [ip], #4
 801ccf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ccfa:	d2de      	bcs.n	801ccba <quorem+0x42>
 801ccfc:	f855 300b 	ldr.w	r3, [r5, fp]
 801cd00:	b92b      	cbnz	r3, 801cd0e <quorem+0x96>
 801cd02:	9b01      	ldr	r3, [sp, #4]
 801cd04:	3b04      	subs	r3, #4
 801cd06:	429d      	cmp	r5, r3
 801cd08:	461a      	mov	r2, r3
 801cd0a:	d32c      	bcc.n	801cd66 <quorem+0xee>
 801cd0c:	613c      	str	r4, [r7, #16]
 801cd0e:	4638      	mov	r0, r7
 801cd10:	f001 f844 	bl	801dd9c <__mcmp>
 801cd14:	2800      	cmp	r0, #0
 801cd16:	db22      	blt.n	801cd5e <quorem+0xe6>
 801cd18:	3601      	adds	r6, #1
 801cd1a:	4629      	mov	r1, r5
 801cd1c:	2000      	movs	r0, #0
 801cd1e:	f858 2b04 	ldr.w	r2, [r8], #4
 801cd22:	f8d1 c000 	ldr.w	ip, [r1]
 801cd26:	b293      	uxth	r3, r2
 801cd28:	1ac3      	subs	r3, r0, r3
 801cd2a:	0c12      	lsrs	r2, r2, #16
 801cd2c:	fa13 f38c 	uxtah	r3, r3, ip
 801cd30:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801cd34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cd38:	b29b      	uxth	r3, r3
 801cd3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cd3e:	45c1      	cmp	r9, r8
 801cd40:	f841 3b04 	str.w	r3, [r1], #4
 801cd44:	ea4f 4022 	mov.w	r0, r2, asr #16
 801cd48:	d2e9      	bcs.n	801cd1e <quorem+0xa6>
 801cd4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cd4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cd52:	b922      	cbnz	r2, 801cd5e <quorem+0xe6>
 801cd54:	3b04      	subs	r3, #4
 801cd56:	429d      	cmp	r5, r3
 801cd58:	461a      	mov	r2, r3
 801cd5a:	d30a      	bcc.n	801cd72 <quorem+0xfa>
 801cd5c:	613c      	str	r4, [r7, #16]
 801cd5e:	4630      	mov	r0, r6
 801cd60:	b003      	add	sp, #12
 801cd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd66:	6812      	ldr	r2, [r2, #0]
 801cd68:	3b04      	subs	r3, #4
 801cd6a:	2a00      	cmp	r2, #0
 801cd6c:	d1ce      	bne.n	801cd0c <quorem+0x94>
 801cd6e:	3c01      	subs	r4, #1
 801cd70:	e7c9      	b.n	801cd06 <quorem+0x8e>
 801cd72:	6812      	ldr	r2, [r2, #0]
 801cd74:	3b04      	subs	r3, #4
 801cd76:	2a00      	cmp	r2, #0
 801cd78:	d1f0      	bne.n	801cd5c <quorem+0xe4>
 801cd7a:	3c01      	subs	r4, #1
 801cd7c:	e7eb      	b.n	801cd56 <quorem+0xde>
 801cd7e:	2000      	movs	r0, #0
 801cd80:	e7ee      	b.n	801cd60 <quorem+0xe8>
 801cd82:	0000      	movs	r0, r0
 801cd84:	0000      	movs	r0, r0
	...

0801cd88 <_dtoa_r>:
 801cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd8c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801cd8e:	b097      	sub	sp, #92	; 0x5c
 801cd90:	4681      	mov	r9, r0
 801cd92:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801cd94:	4614      	mov	r4, r2
 801cd96:	461d      	mov	r5, r3
 801cd98:	4692      	mov	sl, r2
 801cd9a:	469b      	mov	fp, r3
 801cd9c:	b149      	cbz	r1, 801cdb2 <_dtoa_r+0x2a>
 801cd9e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801cda0:	604a      	str	r2, [r1, #4]
 801cda2:	2301      	movs	r3, #1
 801cda4:	4093      	lsls	r3, r2
 801cda6:	608b      	str	r3, [r1, #8]
 801cda8:	f000 fdef 	bl	801d98a <_Bfree>
 801cdac:	2300      	movs	r3, #0
 801cdae:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 801cdb2:	1e2b      	subs	r3, r5, #0
 801cdb4:	bfaa      	itet	ge
 801cdb6:	2300      	movge	r3, #0
 801cdb8:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801cdbc:	6033      	strge	r3, [r6, #0]
 801cdbe:	4ba4      	ldr	r3, [pc, #656]	; (801d050 <_dtoa_r+0x2c8>)
 801cdc0:	f8cd b00c 	str.w	fp, [sp, #12]
 801cdc4:	bfbc      	itt	lt
 801cdc6:	2201      	movlt	r2, #1
 801cdc8:	6032      	strlt	r2, [r6, #0]
 801cdca:	ea33 030b 	bics.w	r3, r3, fp
 801cdce:	d119      	bne.n	801ce04 <_dtoa_r+0x7c>
 801cdd0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801cdd2:	f242 730f 	movw	r3, #9999	; 0x270f
 801cdd6:	6013      	str	r3, [r2, #0]
 801cdd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cddc:	4323      	orrs	r3, r4
 801cdde:	f000 8587 	beq.w	801d8f0 <_dtoa_r+0xb68>
 801cde2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cde4:	b90b      	cbnz	r3, 801cdea <_dtoa_r+0x62>
 801cde6:	4b9b      	ldr	r3, [pc, #620]	; (801d054 <_dtoa_r+0x2cc>)
 801cde8:	e021      	b.n	801ce2e <_dtoa_r+0xa6>
 801cdea:	4b9a      	ldr	r3, [pc, #616]	; (801d054 <_dtoa_r+0x2cc>)
 801cdec:	9304      	str	r3, [sp, #16]
 801cdee:	3303      	adds	r3, #3
 801cdf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cdf2:	6013      	str	r3, [r2, #0]
 801cdf4:	9804      	ldr	r0, [sp, #16]
 801cdf6:	b017      	add	sp, #92	; 0x5c
 801cdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdfc:	4b96      	ldr	r3, [pc, #600]	; (801d058 <_dtoa_r+0x2d0>)
 801cdfe:	9304      	str	r3, [sp, #16]
 801ce00:	3308      	adds	r3, #8
 801ce02:	e7f5      	b.n	801cdf0 <_dtoa_r+0x68>
 801ce04:	2200      	movs	r2, #0
 801ce06:	2300      	movs	r3, #0
 801ce08:	4650      	mov	r0, sl
 801ce0a:	4659      	mov	r1, fp
 801ce0c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 801ce10:	f7ec f832 	bl	8008e78 <__aeabi_dcmpeq>
 801ce14:	4607      	mov	r7, r0
 801ce16:	b160      	cbz	r0, 801ce32 <_dtoa_r+0xaa>
 801ce18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ce1a:	2301      	movs	r3, #1
 801ce1c:	6013      	str	r3, [r2, #0]
 801ce1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	f000 8562 	beq.w	801d8ea <_dtoa_r+0xb62>
 801ce26:	4b8d      	ldr	r3, [pc, #564]	; (801d05c <_dtoa_r+0x2d4>)
 801ce28:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ce2a:	6013      	str	r3, [r2, #0]
 801ce2c:	3b01      	subs	r3, #1
 801ce2e:	9304      	str	r3, [sp, #16]
 801ce30:	e7e0      	b.n	801cdf4 <_dtoa_r+0x6c>
 801ce32:	ab14      	add	r3, sp, #80	; 0x50
 801ce34:	9301      	str	r3, [sp, #4]
 801ce36:	ab15      	add	r3, sp, #84	; 0x54
 801ce38:	9300      	str	r3, [sp, #0]
 801ce3a:	4648      	mov	r0, r9
 801ce3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801ce40:	f001 f850 	bl	801dee4 <__d2b>
 801ce44:	9b03      	ldr	r3, [sp, #12]
 801ce46:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801ce4a:	4680      	mov	r8, r0
 801ce4c:	2e00      	cmp	r6, #0
 801ce4e:	f000 8081 	beq.w	801cf54 <_dtoa_r+0x1cc>
 801ce52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce54:	9713      	str	r7, [sp, #76]	; 0x4c
 801ce56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ce5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ce5e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801ce62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ce66:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 801ce6a:	4619      	mov	r1, r3
 801ce6c:	2200      	movs	r2, #0
 801ce6e:	4b7c      	ldr	r3, [pc, #496]	; (801d060 <_dtoa_r+0x2d8>)
 801ce70:	f7eb fbe2 	bl	8008638 <__aeabi_dsub>
 801ce74:	a370      	add	r3, pc, #448	; (adr r3, 801d038 <_dtoa_r+0x2b0>)
 801ce76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce7a:	f7eb fd95 	bl	80089a8 <__aeabi_dmul>
 801ce7e:	a370      	add	r3, pc, #448	; (adr r3, 801d040 <_dtoa_r+0x2b8>)
 801ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce84:	f7eb fbda 	bl	800863c <__adddf3>
 801ce88:	4604      	mov	r4, r0
 801ce8a:	4630      	mov	r0, r6
 801ce8c:	460d      	mov	r5, r1
 801ce8e:	f7eb fd21 	bl	80088d4 <__aeabi_i2d>
 801ce92:	a36d      	add	r3, pc, #436	; (adr r3, 801d048 <_dtoa_r+0x2c0>)
 801ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce98:	f7eb fd86 	bl	80089a8 <__aeabi_dmul>
 801ce9c:	4602      	mov	r2, r0
 801ce9e:	460b      	mov	r3, r1
 801cea0:	4620      	mov	r0, r4
 801cea2:	4629      	mov	r1, r5
 801cea4:	f7eb fbca 	bl	800863c <__adddf3>
 801cea8:	4604      	mov	r4, r0
 801ceaa:	460d      	mov	r5, r1
 801ceac:	f7ec f82c 	bl	8008f08 <__aeabi_d2iz>
 801ceb0:	2200      	movs	r2, #0
 801ceb2:	9003      	str	r0, [sp, #12]
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	4620      	mov	r0, r4
 801ceb8:	4629      	mov	r1, r5
 801ceba:	f7eb ffe7 	bl	8008e8c <__aeabi_dcmplt>
 801cebe:	b150      	cbz	r0, 801ced6 <_dtoa_r+0x14e>
 801cec0:	9803      	ldr	r0, [sp, #12]
 801cec2:	f7eb fd07 	bl	80088d4 <__aeabi_i2d>
 801cec6:	4622      	mov	r2, r4
 801cec8:	462b      	mov	r3, r5
 801ceca:	f7eb ffd5 	bl	8008e78 <__aeabi_dcmpeq>
 801cece:	b910      	cbnz	r0, 801ced6 <_dtoa_r+0x14e>
 801ced0:	9b03      	ldr	r3, [sp, #12]
 801ced2:	3b01      	subs	r3, #1
 801ced4:	9303      	str	r3, [sp, #12]
 801ced6:	9b03      	ldr	r3, [sp, #12]
 801ced8:	2b16      	cmp	r3, #22
 801ceda:	d859      	bhi.n	801cf90 <_dtoa_r+0x208>
 801cedc:	9a03      	ldr	r2, [sp, #12]
 801cede:	4b61      	ldr	r3, [pc, #388]	; (801d064 <_dtoa_r+0x2dc>)
 801cee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ceec:	f7eb ffce 	bl	8008e8c <__aeabi_dcmplt>
 801cef0:	2800      	cmp	r0, #0
 801cef2:	d04f      	beq.n	801cf94 <_dtoa_r+0x20c>
 801cef4:	9b03      	ldr	r3, [sp, #12]
 801cef6:	3b01      	subs	r3, #1
 801cef8:	9303      	str	r3, [sp, #12]
 801cefa:	2300      	movs	r3, #0
 801cefc:	9311      	str	r3, [sp, #68]	; 0x44
 801cefe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cf00:	1b9b      	subs	r3, r3, r6
 801cf02:	1e5a      	subs	r2, r3, #1
 801cf04:	bf45      	ittet	mi
 801cf06:	f1c3 0301 	rsbmi	r3, r3, #1
 801cf0a:	9306      	strmi	r3, [sp, #24]
 801cf0c:	2300      	movpl	r3, #0
 801cf0e:	2300      	movmi	r3, #0
 801cf10:	bf58      	it	pl
 801cf12:	9306      	strpl	r3, [sp, #24]
 801cf14:	9209      	str	r2, [sp, #36]	; 0x24
 801cf16:	bf48      	it	mi
 801cf18:	9309      	strmi	r3, [sp, #36]	; 0x24
 801cf1a:	9b03      	ldr	r3, [sp, #12]
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	db3b      	blt.n	801cf98 <_dtoa_r+0x210>
 801cf20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf22:	9a03      	ldr	r2, [sp, #12]
 801cf24:	9210      	str	r2, [sp, #64]	; 0x40
 801cf26:	4413      	add	r3, r2
 801cf28:	9309      	str	r3, [sp, #36]	; 0x24
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	930a      	str	r3, [sp, #40]	; 0x28
 801cf2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cf30:	2b09      	cmp	r3, #9
 801cf32:	d869      	bhi.n	801d008 <_dtoa_r+0x280>
 801cf34:	2b05      	cmp	r3, #5
 801cf36:	bfc4      	itt	gt
 801cf38:	3b04      	subgt	r3, #4
 801cf3a:	9320      	strgt	r3, [sp, #128]	; 0x80
 801cf3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cf3e:	f1a3 0302 	sub.w	r3, r3, #2
 801cf42:	bfcc      	ite	gt
 801cf44:	2400      	movgt	r4, #0
 801cf46:	2401      	movle	r4, #1
 801cf48:	2b03      	cmp	r3, #3
 801cf4a:	d868      	bhi.n	801d01e <_dtoa_r+0x296>
 801cf4c:	e8df f003 	tbb	[pc, r3]
 801cf50:	5a383a2d 	.word	0x5a383a2d
 801cf54:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 801cf58:	441e      	add	r6, r3
 801cf5a:	f206 4332 	addw	r3, r6, #1074	; 0x432
 801cf5e:	2b20      	cmp	r3, #32
 801cf60:	bfc1      	itttt	gt
 801cf62:	9a03      	ldrgt	r2, [sp, #12]
 801cf64:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cf68:	409a      	lslgt	r2, r3
 801cf6a:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
 801cf6e:	bfcb      	itete	gt
 801cf70:	fa24 f303 	lsrgt.w	r3, r4, r3
 801cf74:	f1c3 0320 	rsble	r3, r3, #32
 801cf78:	ea42 0003 	orrgt.w	r0, r2, r3
 801cf7c:	fa04 f003 	lslle.w	r0, r4, r3
 801cf80:	f7eb fc98 	bl	80088b4 <__aeabi_ui2d>
 801cf84:	2201      	movs	r2, #1
 801cf86:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801cf8a:	3e01      	subs	r6, #1
 801cf8c:	9213      	str	r2, [sp, #76]	; 0x4c
 801cf8e:	e76c      	b.n	801ce6a <_dtoa_r+0xe2>
 801cf90:	2301      	movs	r3, #1
 801cf92:	e7b3      	b.n	801cefc <_dtoa_r+0x174>
 801cf94:	9011      	str	r0, [sp, #68]	; 0x44
 801cf96:	e7b2      	b.n	801cefe <_dtoa_r+0x176>
 801cf98:	9b06      	ldr	r3, [sp, #24]
 801cf9a:	9a03      	ldr	r2, [sp, #12]
 801cf9c:	1a9b      	subs	r3, r3, r2
 801cf9e:	9306      	str	r3, [sp, #24]
 801cfa0:	4253      	negs	r3, r2
 801cfa2:	930a      	str	r3, [sp, #40]	; 0x28
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	9310      	str	r3, [sp, #64]	; 0x40
 801cfa8:	e7c1      	b.n	801cf2e <_dtoa_r+0x1a6>
 801cfaa:	2300      	movs	r3, #0
 801cfac:	930b      	str	r3, [sp, #44]	; 0x2c
 801cfae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	dc37      	bgt.n	801d024 <_dtoa_r+0x29c>
 801cfb4:	2301      	movs	r3, #1
 801cfb6:	9308      	str	r3, [sp, #32]
 801cfb8:	9305      	str	r3, [sp, #20]
 801cfba:	461a      	mov	r2, r3
 801cfbc:	9221      	str	r2, [sp, #132]	; 0x84
 801cfbe:	e00c      	b.n	801cfda <_dtoa_r+0x252>
 801cfc0:	2301      	movs	r3, #1
 801cfc2:	e7f3      	b.n	801cfac <_dtoa_r+0x224>
 801cfc4:	2300      	movs	r3, #0
 801cfc6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cfc8:	930b      	str	r3, [sp, #44]	; 0x2c
 801cfca:	9b03      	ldr	r3, [sp, #12]
 801cfcc:	4413      	add	r3, r2
 801cfce:	9308      	str	r3, [sp, #32]
 801cfd0:	3301      	adds	r3, #1
 801cfd2:	2b01      	cmp	r3, #1
 801cfd4:	9305      	str	r3, [sp, #20]
 801cfd6:	bfb8      	it	lt
 801cfd8:	2301      	movlt	r3, #1
 801cfda:	2100      	movs	r1, #0
 801cfdc:	2204      	movs	r2, #4
 801cfde:	f102 0014 	add.w	r0, r2, #20
 801cfe2:	4298      	cmp	r0, r3
 801cfe4:	d922      	bls.n	801d02c <_dtoa_r+0x2a4>
 801cfe6:	f8c9 103c 	str.w	r1, [r9, #60]	; 0x3c
 801cfea:	4648      	mov	r0, r9
 801cfec:	f000 fca8 	bl	801d940 <_Balloc>
 801cff0:	9004      	str	r0, [sp, #16]
 801cff2:	2800      	cmp	r0, #0
 801cff4:	d13c      	bne.n	801d070 <_dtoa_r+0x2e8>
 801cff6:	4b1c      	ldr	r3, [pc, #112]	; (801d068 <_dtoa_r+0x2e0>)
 801cff8:	4602      	mov	r2, r0
 801cffa:	f240 11af 	movw	r1, #431	; 0x1af
 801cffe:	481b      	ldr	r0, [pc, #108]	; (801d06c <_dtoa_r+0x2e4>)
 801d000:	f001 f8b0 	bl	801e164 <__assert_func>
 801d004:	2301      	movs	r3, #1
 801d006:	e7de      	b.n	801cfc6 <_dtoa_r+0x23e>
 801d008:	2401      	movs	r4, #1
 801d00a:	2300      	movs	r3, #0
 801d00c:	9320      	str	r3, [sp, #128]	; 0x80
 801d00e:	940b      	str	r4, [sp, #44]	; 0x2c
 801d010:	f04f 33ff 	mov.w	r3, #4294967295
 801d014:	9308      	str	r3, [sp, #32]
 801d016:	9305      	str	r3, [sp, #20]
 801d018:	2200      	movs	r2, #0
 801d01a:	2312      	movs	r3, #18
 801d01c:	e7ce      	b.n	801cfbc <_dtoa_r+0x234>
 801d01e:	2301      	movs	r3, #1
 801d020:	930b      	str	r3, [sp, #44]	; 0x2c
 801d022:	e7f5      	b.n	801d010 <_dtoa_r+0x288>
 801d024:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d026:	9308      	str	r3, [sp, #32]
 801d028:	9305      	str	r3, [sp, #20]
 801d02a:	e7d6      	b.n	801cfda <_dtoa_r+0x252>
 801d02c:	3101      	adds	r1, #1
 801d02e:	0052      	lsls	r2, r2, #1
 801d030:	e7d5      	b.n	801cfde <_dtoa_r+0x256>
 801d032:	bf00      	nop
 801d034:	f3af 8000 	nop.w
 801d038:	636f4361 	.word	0x636f4361
 801d03c:	3fd287a7 	.word	0x3fd287a7
 801d040:	8b60c8b3 	.word	0x8b60c8b3
 801d044:	3fc68a28 	.word	0x3fc68a28
 801d048:	509f79fb 	.word	0x509f79fb
 801d04c:	3fd34413 	.word	0x3fd34413
 801d050:	7ff00000 	.word	0x7ff00000
 801d054:	080206c4 	.word	0x080206c4
 801d058:	080206bb 	.word	0x080206bb
 801d05c:	08020650 	.word	0x08020650
 801d060:	3ff80000 	.word	0x3ff80000
 801d064:	080207b8 	.word	0x080207b8
 801d068:	080206c8 	.word	0x080206c8
 801d06c:	080206d9 	.word	0x080206d9
 801d070:	9b04      	ldr	r3, [sp, #16]
 801d072:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 801d076:	9b05      	ldr	r3, [sp, #20]
 801d078:	2b0e      	cmp	r3, #14
 801d07a:	f200 80a2 	bhi.w	801d1c2 <_dtoa_r+0x43a>
 801d07e:	2c00      	cmp	r4, #0
 801d080:	f000 809f 	beq.w	801d1c2 <_dtoa_r+0x43a>
 801d084:	9b03      	ldr	r3, [sp, #12]
 801d086:	2b00      	cmp	r3, #0
 801d088:	dd35      	ble.n	801d0f6 <_dtoa_r+0x36e>
 801d08a:	f003 020f 	and.w	r2, r3, #15
 801d08e:	4b96      	ldr	r3, [pc, #600]	; (801d2e8 <_dtoa_r+0x560>)
 801d090:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d094:	e9d3 4500 	ldrd	r4, r5, [r3]
 801d098:	9b03      	ldr	r3, [sp, #12]
 801d09a:	05d8      	lsls	r0, r3, #23
 801d09c:	ea4f 1623 	mov.w	r6, r3, asr #4
 801d0a0:	d517      	bpl.n	801d0d2 <_dtoa_r+0x34a>
 801d0a2:	4b92      	ldr	r3, [pc, #584]	; (801d2ec <_dtoa_r+0x564>)
 801d0a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d0a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d0ac:	f7eb fda6 	bl	8008bfc <__aeabi_ddiv>
 801d0b0:	f006 060f 	and.w	r6, r6, #15
 801d0b4:	4682      	mov	sl, r0
 801d0b6:	468b      	mov	fp, r1
 801d0b8:	2703      	movs	r7, #3
 801d0ba:	4b8c      	ldr	r3, [pc, #560]	; (801d2ec <_dtoa_r+0x564>)
 801d0bc:	930e      	str	r3, [sp, #56]	; 0x38
 801d0be:	b956      	cbnz	r6, 801d0d6 <_dtoa_r+0x34e>
 801d0c0:	4622      	mov	r2, r4
 801d0c2:	462b      	mov	r3, r5
 801d0c4:	4650      	mov	r0, sl
 801d0c6:	4659      	mov	r1, fp
 801d0c8:	f7eb fd98 	bl	8008bfc <__aeabi_ddiv>
 801d0cc:	4682      	mov	sl, r0
 801d0ce:	468b      	mov	fp, r1
 801d0d0:	e02a      	b.n	801d128 <_dtoa_r+0x3a0>
 801d0d2:	2702      	movs	r7, #2
 801d0d4:	e7f1      	b.n	801d0ba <_dtoa_r+0x332>
 801d0d6:	07f1      	lsls	r1, r6, #31
 801d0d8:	d509      	bpl.n	801d0ee <_dtoa_r+0x366>
 801d0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0dc:	4620      	mov	r0, r4
 801d0de:	4629      	mov	r1, r5
 801d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0e4:	f7eb fc60 	bl	80089a8 <__aeabi_dmul>
 801d0e8:	3701      	adds	r7, #1
 801d0ea:	4604      	mov	r4, r0
 801d0ec:	460d      	mov	r5, r1
 801d0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0f0:	1076      	asrs	r6, r6, #1
 801d0f2:	3308      	adds	r3, #8
 801d0f4:	e7e2      	b.n	801d0bc <_dtoa_r+0x334>
 801d0f6:	f000 809f 	beq.w	801d238 <_dtoa_r+0x4b0>
 801d0fa:	9b03      	ldr	r3, [sp, #12]
 801d0fc:	4d7b      	ldr	r5, [pc, #492]	; (801d2ec <_dtoa_r+0x564>)
 801d0fe:	425c      	negs	r4, r3
 801d100:	4b79      	ldr	r3, [pc, #484]	; (801d2e8 <_dtoa_r+0x560>)
 801d102:	f004 020f 	and.w	r2, r4, #15
 801d106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d10e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d112:	f7eb fc49 	bl	80089a8 <__aeabi_dmul>
 801d116:	1124      	asrs	r4, r4, #4
 801d118:	4682      	mov	sl, r0
 801d11a:	468b      	mov	fp, r1
 801d11c:	2300      	movs	r3, #0
 801d11e:	2702      	movs	r7, #2
 801d120:	2c00      	cmp	r4, #0
 801d122:	d17e      	bne.n	801d222 <_dtoa_r+0x49a>
 801d124:	2b00      	cmp	r3, #0
 801d126:	d1d1      	bne.n	801d0cc <_dtoa_r+0x344>
 801d128:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d12a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 801d12e:	2b00      	cmp	r3, #0
 801d130:	f000 8084 	beq.w	801d23c <_dtoa_r+0x4b4>
 801d134:	4b6e      	ldr	r3, [pc, #440]	; (801d2f0 <_dtoa_r+0x568>)
 801d136:	2200      	movs	r2, #0
 801d138:	4650      	mov	r0, sl
 801d13a:	4659      	mov	r1, fp
 801d13c:	f7eb fea6 	bl	8008e8c <__aeabi_dcmplt>
 801d140:	2800      	cmp	r0, #0
 801d142:	d07b      	beq.n	801d23c <_dtoa_r+0x4b4>
 801d144:	9b05      	ldr	r3, [sp, #20]
 801d146:	2b00      	cmp	r3, #0
 801d148:	d078      	beq.n	801d23c <_dtoa_r+0x4b4>
 801d14a:	9b08      	ldr	r3, [sp, #32]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	dd36      	ble.n	801d1be <_dtoa_r+0x436>
 801d150:	9b03      	ldr	r3, [sp, #12]
 801d152:	4650      	mov	r0, sl
 801d154:	4659      	mov	r1, fp
 801d156:	1e5d      	subs	r5, r3, #1
 801d158:	2200      	movs	r2, #0
 801d15a:	4b66      	ldr	r3, [pc, #408]	; (801d2f4 <_dtoa_r+0x56c>)
 801d15c:	f7eb fc24 	bl	80089a8 <__aeabi_dmul>
 801d160:	9c08      	ldr	r4, [sp, #32]
 801d162:	4682      	mov	sl, r0
 801d164:	468b      	mov	fp, r1
 801d166:	3701      	adds	r7, #1
 801d168:	4638      	mov	r0, r7
 801d16a:	f7eb fbb3 	bl	80088d4 <__aeabi_i2d>
 801d16e:	4652      	mov	r2, sl
 801d170:	465b      	mov	r3, fp
 801d172:	f7eb fc19 	bl	80089a8 <__aeabi_dmul>
 801d176:	4b60      	ldr	r3, [pc, #384]	; (801d2f8 <_dtoa_r+0x570>)
 801d178:	2200      	movs	r2, #0
 801d17a:	f7eb fa5f 	bl	800863c <__adddf3>
 801d17e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801d182:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d186:	960f      	str	r6, [sp, #60]	; 0x3c
 801d188:	2c00      	cmp	r4, #0
 801d18a:	d15a      	bne.n	801d242 <_dtoa_r+0x4ba>
 801d18c:	4b5b      	ldr	r3, [pc, #364]	; (801d2fc <_dtoa_r+0x574>)
 801d18e:	2200      	movs	r2, #0
 801d190:	4650      	mov	r0, sl
 801d192:	4659      	mov	r1, fp
 801d194:	f7eb fa50 	bl	8008638 <__aeabi_dsub>
 801d198:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d19a:	4633      	mov	r3, r6
 801d19c:	4682      	mov	sl, r0
 801d19e:	468b      	mov	fp, r1
 801d1a0:	f7eb fe92 	bl	8008ec8 <__aeabi_dcmpgt>
 801d1a4:	2800      	cmp	r0, #0
 801d1a6:	f040 8295 	bne.w	801d6d4 <_dtoa_r+0x94c>
 801d1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d1ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801d1b0:	4650      	mov	r0, sl
 801d1b2:	4659      	mov	r1, fp
 801d1b4:	f7eb fe6a 	bl	8008e8c <__aeabi_dcmplt>
 801d1b8:	2800      	cmp	r0, #0
 801d1ba:	f040 8289 	bne.w	801d6d0 <_dtoa_r+0x948>
 801d1be:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 801d1c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	f2c0 814e 	blt.w	801d466 <_dtoa_r+0x6de>
 801d1ca:	9a03      	ldr	r2, [sp, #12]
 801d1cc:	2a0e      	cmp	r2, #14
 801d1ce:	f300 814a 	bgt.w	801d466 <_dtoa_r+0x6de>
 801d1d2:	4b45      	ldr	r3, [pc, #276]	; (801d2e8 <_dtoa_r+0x560>)
 801d1d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d1d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d1dc:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801d1e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	f280 80d7 	bge.w	801d396 <_dtoa_r+0x60e>
 801d1e8:	9b05      	ldr	r3, [sp, #20]
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	f300 80d3 	bgt.w	801d396 <_dtoa_r+0x60e>
 801d1f0:	f040 826d 	bne.w	801d6ce <_dtoa_r+0x946>
 801d1f4:	4b41      	ldr	r3, [pc, #260]	; (801d2fc <_dtoa_r+0x574>)
 801d1f6:	2200      	movs	r2, #0
 801d1f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d1fc:	f7eb fbd4 	bl	80089a8 <__aeabi_dmul>
 801d200:	4652      	mov	r2, sl
 801d202:	465b      	mov	r3, fp
 801d204:	f7eb fe56 	bl	8008eb4 <__aeabi_dcmpge>
 801d208:	9c05      	ldr	r4, [sp, #20]
 801d20a:	4625      	mov	r5, r4
 801d20c:	2800      	cmp	r0, #0
 801d20e:	f040 8246 	bne.w	801d69e <_dtoa_r+0x916>
 801d212:	9e04      	ldr	r6, [sp, #16]
 801d214:	2331      	movs	r3, #49	; 0x31
 801d216:	f806 3b01 	strb.w	r3, [r6], #1
 801d21a:	9b03      	ldr	r3, [sp, #12]
 801d21c:	3301      	adds	r3, #1
 801d21e:	9303      	str	r3, [sp, #12]
 801d220:	e241      	b.n	801d6a6 <_dtoa_r+0x91e>
 801d222:	07e2      	lsls	r2, r4, #31
 801d224:	d505      	bpl.n	801d232 <_dtoa_r+0x4aa>
 801d226:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d22a:	f7eb fbbd 	bl	80089a8 <__aeabi_dmul>
 801d22e:	3701      	adds	r7, #1
 801d230:	2301      	movs	r3, #1
 801d232:	1064      	asrs	r4, r4, #1
 801d234:	3508      	adds	r5, #8
 801d236:	e773      	b.n	801d120 <_dtoa_r+0x398>
 801d238:	2702      	movs	r7, #2
 801d23a:	e775      	b.n	801d128 <_dtoa_r+0x3a0>
 801d23c:	9d03      	ldr	r5, [sp, #12]
 801d23e:	9c05      	ldr	r4, [sp, #20]
 801d240:	e792      	b.n	801d168 <_dtoa_r+0x3e0>
 801d242:	9904      	ldr	r1, [sp, #16]
 801d244:	4b28      	ldr	r3, [pc, #160]	; (801d2e8 <_dtoa_r+0x560>)
 801d246:	4421      	add	r1, r4
 801d248:	9112      	str	r1, [sp, #72]	; 0x48
 801d24a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d24c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d250:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 801d254:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d258:	2900      	cmp	r1, #0
 801d25a:	d053      	beq.n	801d304 <_dtoa_r+0x57c>
 801d25c:	4928      	ldr	r1, [pc, #160]	; (801d300 <_dtoa_r+0x578>)
 801d25e:	2000      	movs	r0, #0
 801d260:	f7eb fccc 	bl	8008bfc <__aeabi_ddiv>
 801d264:	4632      	mov	r2, r6
 801d266:	463b      	mov	r3, r7
 801d268:	f7eb f9e6 	bl	8008638 <__aeabi_dsub>
 801d26c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d270:	9e04      	ldr	r6, [sp, #16]
 801d272:	4659      	mov	r1, fp
 801d274:	4650      	mov	r0, sl
 801d276:	f7eb fe47 	bl	8008f08 <__aeabi_d2iz>
 801d27a:	4604      	mov	r4, r0
 801d27c:	f7eb fb2a 	bl	80088d4 <__aeabi_i2d>
 801d280:	4602      	mov	r2, r0
 801d282:	460b      	mov	r3, r1
 801d284:	4650      	mov	r0, sl
 801d286:	4659      	mov	r1, fp
 801d288:	f7eb f9d6 	bl	8008638 <__aeabi_dsub>
 801d28c:	3430      	adds	r4, #48	; 0x30
 801d28e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d292:	f806 4b01 	strb.w	r4, [r6], #1
 801d296:	4682      	mov	sl, r0
 801d298:	468b      	mov	fp, r1
 801d29a:	f7eb fdf7 	bl	8008e8c <__aeabi_dcmplt>
 801d29e:	2800      	cmp	r0, #0
 801d2a0:	d171      	bne.n	801d386 <_dtoa_r+0x5fe>
 801d2a2:	4652      	mov	r2, sl
 801d2a4:	465b      	mov	r3, fp
 801d2a6:	4912      	ldr	r1, [pc, #72]	; (801d2f0 <_dtoa_r+0x568>)
 801d2a8:	2000      	movs	r0, #0
 801d2aa:	f7eb f9c5 	bl	8008638 <__aeabi_dsub>
 801d2ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d2b2:	f7eb fdeb 	bl	8008e8c <__aeabi_dcmplt>
 801d2b6:	2800      	cmp	r0, #0
 801d2b8:	f040 80b7 	bne.w	801d42a <_dtoa_r+0x6a2>
 801d2bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d2be:	429e      	cmp	r6, r3
 801d2c0:	f43f af7d 	beq.w	801d1be <_dtoa_r+0x436>
 801d2c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d2c8:	4b0a      	ldr	r3, [pc, #40]	; (801d2f4 <_dtoa_r+0x56c>)
 801d2ca:	2200      	movs	r2, #0
 801d2cc:	f7eb fb6c 	bl	80089a8 <__aeabi_dmul>
 801d2d0:	4b08      	ldr	r3, [pc, #32]	; (801d2f4 <_dtoa_r+0x56c>)
 801d2d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d2d6:	2200      	movs	r2, #0
 801d2d8:	4650      	mov	r0, sl
 801d2da:	4659      	mov	r1, fp
 801d2dc:	f7eb fb64 	bl	80089a8 <__aeabi_dmul>
 801d2e0:	4682      	mov	sl, r0
 801d2e2:	468b      	mov	fp, r1
 801d2e4:	e7c5      	b.n	801d272 <_dtoa_r+0x4ea>
 801d2e6:	bf00      	nop
 801d2e8:	080207b8 	.word	0x080207b8
 801d2ec:	08020790 	.word	0x08020790
 801d2f0:	3ff00000 	.word	0x3ff00000
 801d2f4:	40240000 	.word	0x40240000
 801d2f8:	401c0000 	.word	0x401c0000
 801d2fc:	40140000 	.word	0x40140000
 801d300:	3fe00000 	.word	0x3fe00000
 801d304:	4630      	mov	r0, r6
 801d306:	4639      	mov	r1, r7
 801d308:	f7eb fb4e 	bl	80089a8 <__aeabi_dmul>
 801d30c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d310:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d312:	9e04      	ldr	r6, [sp, #16]
 801d314:	4659      	mov	r1, fp
 801d316:	4650      	mov	r0, sl
 801d318:	f7eb fdf6 	bl	8008f08 <__aeabi_d2iz>
 801d31c:	4604      	mov	r4, r0
 801d31e:	f7eb fad9 	bl	80088d4 <__aeabi_i2d>
 801d322:	3430      	adds	r4, #48	; 0x30
 801d324:	4602      	mov	r2, r0
 801d326:	460b      	mov	r3, r1
 801d328:	4650      	mov	r0, sl
 801d32a:	4659      	mov	r1, fp
 801d32c:	f7eb f984 	bl	8008638 <__aeabi_dsub>
 801d330:	f806 4b01 	strb.w	r4, [r6], #1
 801d334:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d336:	429e      	cmp	r6, r3
 801d338:	4682      	mov	sl, r0
 801d33a:	468b      	mov	fp, r1
 801d33c:	f04f 0200 	mov.w	r2, #0
 801d340:	d123      	bne.n	801d38a <_dtoa_r+0x602>
 801d342:	4bb0      	ldr	r3, [pc, #704]	; (801d604 <_dtoa_r+0x87c>)
 801d344:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d348:	f7eb f978 	bl	800863c <__adddf3>
 801d34c:	4602      	mov	r2, r0
 801d34e:	460b      	mov	r3, r1
 801d350:	4650      	mov	r0, sl
 801d352:	4659      	mov	r1, fp
 801d354:	f7eb fdb8 	bl	8008ec8 <__aeabi_dcmpgt>
 801d358:	2800      	cmp	r0, #0
 801d35a:	d166      	bne.n	801d42a <_dtoa_r+0x6a2>
 801d35c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d360:	49a8      	ldr	r1, [pc, #672]	; (801d604 <_dtoa_r+0x87c>)
 801d362:	2000      	movs	r0, #0
 801d364:	f7eb f968 	bl	8008638 <__aeabi_dsub>
 801d368:	4602      	mov	r2, r0
 801d36a:	460b      	mov	r3, r1
 801d36c:	4650      	mov	r0, sl
 801d36e:	4659      	mov	r1, fp
 801d370:	f7eb fd8c 	bl	8008e8c <__aeabi_dcmplt>
 801d374:	2800      	cmp	r0, #0
 801d376:	f43f af22 	beq.w	801d1be <_dtoa_r+0x436>
 801d37a:	463e      	mov	r6, r7
 801d37c:	3f01      	subs	r7, #1
 801d37e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d382:	2b30      	cmp	r3, #48	; 0x30
 801d384:	d0f9      	beq.n	801d37a <_dtoa_r+0x5f2>
 801d386:	9503      	str	r5, [sp, #12]
 801d388:	e03e      	b.n	801d408 <_dtoa_r+0x680>
 801d38a:	4b9f      	ldr	r3, [pc, #636]	; (801d608 <_dtoa_r+0x880>)
 801d38c:	f7eb fb0c 	bl	80089a8 <__aeabi_dmul>
 801d390:	4682      	mov	sl, r0
 801d392:	468b      	mov	fp, r1
 801d394:	e7be      	b.n	801d314 <_dtoa_r+0x58c>
 801d396:	465d      	mov	r5, fp
 801d398:	9e04      	ldr	r6, [sp, #16]
 801d39a:	f8df b26c 	ldr.w	fp, [pc, #620]	; 801d608 <_dtoa_r+0x880>
 801d39e:	4654      	mov	r4, sl
 801d3a0:	f04f 0a00 	mov.w	sl, #0
 801d3a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d3a8:	4620      	mov	r0, r4
 801d3aa:	4629      	mov	r1, r5
 801d3ac:	f7eb fc26 	bl	8008bfc <__aeabi_ddiv>
 801d3b0:	f7eb fdaa 	bl	8008f08 <__aeabi_d2iz>
 801d3b4:	4607      	mov	r7, r0
 801d3b6:	f7eb fa8d 	bl	80088d4 <__aeabi_i2d>
 801d3ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d3be:	f7eb faf3 	bl	80089a8 <__aeabi_dmul>
 801d3c2:	4602      	mov	r2, r0
 801d3c4:	460b      	mov	r3, r1
 801d3c6:	4620      	mov	r0, r4
 801d3c8:	4629      	mov	r1, r5
 801d3ca:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801d3ce:	f7eb f933 	bl	8008638 <__aeabi_dsub>
 801d3d2:	f806 4b01 	strb.w	r4, [r6], #1
 801d3d6:	9c04      	ldr	r4, [sp, #16]
 801d3d8:	9d05      	ldr	r5, [sp, #20]
 801d3da:	1b34      	subs	r4, r6, r4
 801d3dc:	42a5      	cmp	r5, r4
 801d3de:	4602      	mov	r2, r0
 801d3e0:	460b      	mov	r3, r1
 801d3e2:	d133      	bne.n	801d44c <_dtoa_r+0x6c4>
 801d3e4:	f7eb f92a 	bl	800863c <__adddf3>
 801d3e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d3ec:	4604      	mov	r4, r0
 801d3ee:	460d      	mov	r5, r1
 801d3f0:	f7eb fd6a 	bl	8008ec8 <__aeabi_dcmpgt>
 801d3f4:	b9c0      	cbnz	r0, 801d428 <_dtoa_r+0x6a0>
 801d3f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d3fa:	4620      	mov	r0, r4
 801d3fc:	4629      	mov	r1, r5
 801d3fe:	f7eb fd3b 	bl	8008e78 <__aeabi_dcmpeq>
 801d402:	b108      	cbz	r0, 801d408 <_dtoa_r+0x680>
 801d404:	07fb      	lsls	r3, r7, #31
 801d406:	d40f      	bmi.n	801d428 <_dtoa_r+0x6a0>
 801d408:	4641      	mov	r1, r8
 801d40a:	4648      	mov	r0, r9
 801d40c:	f000 fabd 	bl	801d98a <_Bfree>
 801d410:	2300      	movs	r3, #0
 801d412:	7033      	strb	r3, [r6, #0]
 801d414:	9b03      	ldr	r3, [sp, #12]
 801d416:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d418:	3301      	adds	r3, #1
 801d41a:	6013      	str	r3, [r2, #0]
 801d41c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d41e:	2b00      	cmp	r3, #0
 801d420:	f43f ace8 	beq.w	801cdf4 <_dtoa_r+0x6c>
 801d424:	601e      	str	r6, [r3, #0]
 801d426:	e4e5      	b.n	801cdf4 <_dtoa_r+0x6c>
 801d428:	9d03      	ldr	r5, [sp, #12]
 801d42a:	4633      	mov	r3, r6
 801d42c:	461e      	mov	r6, r3
 801d42e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d432:	2a39      	cmp	r2, #57	; 0x39
 801d434:	d106      	bne.n	801d444 <_dtoa_r+0x6bc>
 801d436:	9a04      	ldr	r2, [sp, #16]
 801d438:	429a      	cmp	r2, r3
 801d43a:	d1f7      	bne.n	801d42c <_dtoa_r+0x6a4>
 801d43c:	9904      	ldr	r1, [sp, #16]
 801d43e:	2230      	movs	r2, #48	; 0x30
 801d440:	3501      	adds	r5, #1
 801d442:	700a      	strb	r2, [r1, #0]
 801d444:	781a      	ldrb	r2, [r3, #0]
 801d446:	3201      	adds	r2, #1
 801d448:	701a      	strb	r2, [r3, #0]
 801d44a:	e79c      	b.n	801d386 <_dtoa_r+0x5fe>
 801d44c:	4652      	mov	r2, sl
 801d44e:	465b      	mov	r3, fp
 801d450:	f7eb faaa 	bl	80089a8 <__aeabi_dmul>
 801d454:	2200      	movs	r2, #0
 801d456:	2300      	movs	r3, #0
 801d458:	4604      	mov	r4, r0
 801d45a:	460d      	mov	r5, r1
 801d45c:	f7eb fd0c 	bl	8008e78 <__aeabi_dcmpeq>
 801d460:	2800      	cmp	r0, #0
 801d462:	d09f      	beq.n	801d3a4 <_dtoa_r+0x61c>
 801d464:	e7d0      	b.n	801d408 <_dtoa_r+0x680>
 801d466:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d468:	2a00      	cmp	r2, #0
 801d46a:	f000 80cf 	beq.w	801d60c <_dtoa_r+0x884>
 801d46e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d470:	2a01      	cmp	r2, #1
 801d472:	f300 80ad 	bgt.w	801d5d0 <_dtoa_r+0x848>
 801d476:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d478:	2a00      	cmp	r2, #0
 801d47a:	f000 80a5 	beq.w	801d5c8 <_dtoa_r+0x840>
 801d47e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d482:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d484:	9e06      	ldr	r6, [sp, #24]
 801d486:	9a06      	ldr	r2, [sp, #24]
 801d488:	441a      	add	r2, r3
 801d48a:	9206      	str	r2, [sp, #24]
 801d48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d48e:	2101      	movs	r1, #1
 801d490:	441a      	add	r2, r3
 801d492:	4648      	mov	r0, r9
 801d494:	9209      	str	r2, [sp, #36]	; 0x24
 801d496:	f000 fb15 	bl	801dac4 <__i2b>
 801d49a:	4605      	mov	r5, r0
 801d49c:	b166      	cbz	r6, 801d4b8 <_dtoa_r+0x730>
 801d49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	dd09      	ble.n	801d4b8 <_dtoa_r+0x730>
 801d4a4:	42b3      	cmp	r3, r6
 801d4a6:	9a06      	ldr	r2, [sp, #24]
 801d4a8:	bfa8      	it	ge
 801d4aa:	4633      	movge	r3, r6
 801d4ac:	1ad2      	subs	r2, r2, r3
 801d4ae:	9206      	str	r2, [sp, #24]
 801d4b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4b2:	1af6      	subs	r6, r6, r3
 801d4b4:	1ad3      	subs	r3, r2, r3
 801d4b6:	9309      	str	r3, [sp, #36]	; 0x24
 801d4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4ba:	b1f3      	cbz	r3, 801d4fa <_dtoa_r+0x772>
 801d4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	f000 80a8 	beq.w	801d614 <_dtoa_r+0x88c>
 801d4c4:	2c00      	cmp	r4, #0
 801d4c6:	dd10      	ble.n	801d4ea <_dtoa_r+0x762>
 801d4c8:	4629      	mov	r1, r5
 801d4ca:	4622      	mov	r2, r4
 801d4cc:	4648      	mov	r0, r9
 801d4ce:	f000 fbb9 	bl	801dc44 <__pow5mult>
 801d4d2:	4642      	mov	r2, r8
 801d4d4:	4601      	mov	r1, r0
 801d4d6:	4605      	mov	r5, r0
 801d4d8:	4648      	mov	r0, r9
 801d4da:	f000 fb09 	bl	801daf0 <__multiply>
 801d4de:	4641      	mov	r1, r8
 801d4e0:	4607      	mov	r7, r0
 801d4e2:	4648      	mov	r0, r9
 801d4e4:	f000 fa51 	bl	801d98a <_Bfree>
 801d4e8:	46b8      	mov	r8, r7
 801d4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4ec:	1b1a      	subs	r2, r3, r4
 801d4ee:	d004      	beq.n	801d4fa <_dtoa_r+0x772>
 801d4f0:	4641      	mov	r1, r8
 801d4f2:	4648      	mov	r0, r9
 801d4f4:	f000 fba6 	bl	801dc44 <__pow5mult>
 801d4f8:	4680      	mov	r8, r0
 801d4fa:	2101      	movs	r1, #1
 801d4fc:	4648      	mov	r0, r9
 801d4fe:	f000 fae1 	bl	801dac4 <__i2b>
 801d502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d504:	2b00      	cmp	r3, #0
 801d506:	4604      	mov	r4, r0
 801d508:	f340 8086 	ble.w	801d618 <_dtoa_r+0x890>
 801d50c:	461a      	mov	r2, r3
 801d50e:	4601      	mov	r1, r0
 801d510:	4648      	mov	r0, r9
 801d512:	f000 fb97 	bl	801dc44 <__pow5mult>
 801d516:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d518:	2b01      	cmp	r3, #1
 801d51a:	4604      	mov	r4, r0
 801d51c:	dd7f      	ble.n	801d61e <_dtoa_r+0x896>
 801d51e:	2700      	movs	r7, #0
 801d520:	6923      	ldr	r3, [r4, #16]
 801d522:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d526:	6918      	ldr	r0, [r3, #16]
 801d528:	f000 fa7e 	bl	801da28 <__hi0bits>
 801d52c:	f1c0 0020 	rsb	r0, r0, #32
 801d530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d532:	4418      	add	r0, r3
 801d534:	f010 001f 	ands.w	r0, r0, #31
 801d538:	f000 8098 	beq.w	801d66c <_dtoa_r+0x8e4>
 801d53c:	f1c0 0320 	rsb	r3, r0, #32
 801d540:	2b04      	cmp	r3, #4
 801d542:	f340 8088 	ble.w	801d656 <_dtoa_r+0x8ce>
 801d546:	9b06      	ldr	r3, [sp, #24]
 801d548:	f1c0 001c 	rsb	r0, r0, #28
 801d54c:	4403      	add	r3, r0
 801d54e:	9306      	str	r3, [sp, #24]
 801d550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d552:	4403      	add	r3, r0
 801d554:	4406      	add	r6, r0
 801d556:	9309      	str	r3, [sp, #36]	; 0x24
 801d558:	9b06      	ldr	r3, [sp, #24]
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	dd05      	ble.n	801d56a <_dtoa_r+0x7e2>
 801d55e:	4641      	mov	r1, r8
 801d560:	461a      	mov	r2, r3
 801d562:	4648      	mov	r0, r9
 801d564:	f000 fbae 	bl	801dcc4 <__lshift>
 801d568:	4680      	mov	r8, r0
 801d56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	dd05      	ble.n	801d57c <_dtoa_r+0x7f4>
 801d570:	4621      	mov	r1, r4
 801d572:	461a      	mov	r2, r3
 801d574:	4648      	mov	r0, r9
 801d576:	f000 fba5 	bl	801dcc4 <__lshift>
 801d57a:	4604      	mov	r4, r0
 801d57c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d076      	beq.n	801d670 <_dtoa_r+0x8e8>
 801d582:	4621      	mov	r1, r4
 801d584:	4640      	mov	r0, r8
 801d586:	f000 fc09 	bl	801dd9c <__mcmp>
 801d58a:	2800      	cmp	r0, #0
 801d58c:	da70      	bge.n	801d670 <_dtoa_r+0x8e8>
 801d58e:	9b03      	ldr	r3, [sp, #12]
 801d590:	3b01      	subs	r3, #1
 801d592:	9303      	str	r3, [sp, #12]
 801d594:	4641      	mov	r1, r8
 801d596:	2300      	movs	r3, #0
 801d598:	220a      	movs	r2, #10
 801d59a:	4648      	mov	r0, r9
 801d59c:	f000 f9fe 	bl	801d99c <__multadd>
 801d5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d5a2:	4680      	mov	r8, r0
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	f000 81aa 	beq.w	801d8fe <_dtoa_r+0xb76>
 801d5aa:	2300      	movs	r3, #0
 801d5ac:	4629      	mov	r1, r5
 801d5ae:	220a      	movs	r2, #10
 801d5b0:	4648      	mov	r0, r9
 801d5b2:	f000 f9f3 	bl	801d99c <__multadd>
 801d5b6:	9b08      	ldr	r3, [sp, #32]
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	4605      	mov	r5, r0
 801d5bc:	f300 8093 	bgt.w	801d6e6 <_dtoa_r+0x95e>
 801d5c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d5c2:	2b02      	cmp	r3, #2
 801d5c4:	dc5c      	bgt.n	801d680 <_dtoa_r+0x8f8>
 801d5c6:	e08e      	b.n	801d6e6 <_dtoa_r+0x95e>
 801d5c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d5ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d5ce:	e758      	b.n	801d482 <_dtoa_r+0x6fa>
 801d5d0:	9b05      	ldr	r3, [sp, #20]
 801d5d2:	1e5c      	subs	r4, r3, #1
 801d5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5d6:	42a3      	cmp	r3, r4
 801d5d8:	bfbf      	itttt	lt
 801d5da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801d5dc:	9a10      	ldrlt	r2, [sp, #64]	; 0x40
 801d5de:	940a      	strlt	r4, [sp, #40]	; 0x28
 801d5e0:	1ae3      	sublt	r3, r4, r3
 801d5e2:	bfb4      	ite	lt
 801d5e4:	18d2      	addlt	r2, r2, r3
 801d5e6:	1b1c      	subge	r4, r3, r4
 801d5e8:	9b05      	ldr	r3, [sp, #20]
 801d5ea:	bfbc      	itt	lt
 801d5ec:	9210      	strlt	r2, [sp, #64]	; 0x40
 801d5ee:	2400      	movlt	r4, #0
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	bfb7      	itett	lt
 801d5f4:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 801d5f8:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 801d5fc:	1a9e      	sublt	r6, r3, r2
 801d5fe:	2300      	movlt	r3, #0
 801d600:	e741      	b.n	801d486 <_dtoa_r+0x6fe>
 801d602:	bf00      	nop
 801d604:	3fe00000 	.word	0x3fe00000
 801d608:	40240000 	.word	0x40240000
 801d60c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d60e:	9e06      	ldr	r6, [sp, #24]
 801d610:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d612:	e743      	b.n	801d49c <_dtoa_r+0x714>
 801d614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d616:	e76b      	b.n	801d4f0 <_dtoa_r+0x768>
 801d618:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d61a:	2b01      	cmp	r3, #1
 801d61c:	dc17      	bgt.n	801d64e <_dtoa_r+0x8c6>
 801d61e:	f1ba 0f00 	cmp.w	sl, #0
 801d622:	d114      	bne.n	801d64e <_dtoa_r+0x8c6>
 801d624:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d628:	b99b      	cbnz	r3, 801d652 <_dtoa_r+0x8ca>
 801d62a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801d62e:	0d3f      	lsrs	r7, r7, #20
 801d630:	053f      	lsls	r7, r7, #20
 801d632:	b137      	cbz	r7, 801d642 <_dtoa_r+0x8ba>
 801d634:	9b06      	ldr	r3, [sp, #24]
 801d636:	3301      	adds	r3, #1
 801d638:	9306      	str	r3, [sp, #24]
 801d63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d63c:	3301      	adds	r3, #1
 801d63e:	9309      	str	r3, [sp, #36]	; 0x24
 801d640:	2701      	movs	r7, #1
 801d642:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d644:	2b00      	cmp	r3, #0
 801d646:	f47f af6b 	bne.w	801d520 <_dtoa_r+0x798>
 801d64a:	2001      	movs	r0, #1
 801d64c:	e770      	b.n	801d530 <_dtoa_r+0x7a8>
 801d64e:	2700      	movs	r7, #0
 801d650:	e7f7      	b.n	801d642 <_dtoa_r+0x8ba>
 801d652:	4657      	mov	r7, sl
 801d654:	e7f5      	b.n	801d642 <_dtoa_r+0x8ba>
 801d656:	f43f af7f 	beq.w	801d558 <_dtoa_r+0x7d0>
 801d65a:	9a06      	ldr	r2, [sp, #24]
 801d65c:	331c      	adds	r3, #28
 801d65e:	441a      	add	r2, r3
 801d660:	9206      	str	r2, [sp, #24]
 801d662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d664:	441a      	add	r2, r3
 801d666:	441e      	add	r6, r3
 801d668:	9209      	str	r2, [sp, #36]	; 0x24
 801d66a:	e775      	b.n	801d558 <_dtoa_r+0x7d0>
 801d66c:	4603      	mov	r3, r0
 801d66e:	e7f4      	b.n	801d65a <_dtoa_r+0x8d2>
 801d670:	9b05      	ldr	r3, [sp, #20]
 801d672:	2b00      	cmp	r3, #0
 801d674:	dc31      	bgt.n	801d6da <_dtoa_r+0x952>
 801d676:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d678:	2b02      	cmp	r3, #2
 801d67a:	dd2e      	ble.n	801d6da <_dtoa_r+0x952>
 801d67c:	9b05      	ldr	r3, [sp, #20]
 801d67e:	9308      	str	r3, [sp, #32]
 801d680:	9b08      	ldr	r3, [sp, #32]
 801d682:	b963      	cbnz	r3, 801d69e <_dtoa_r+0x916>
 801d684:	4621      	mov	r1, r4
 801d686:	2205      	movs	r2, #5
 801d688:	4648      	mov	r0, r9
 801d68a:	f000 f987 	bl	801d99c <__multadd>
 801d68e:	4601      	mov	r1, r0
 801d690:	4604      	mov	r4, r0
 801d692:	4640      	mov	r0, r8
 801d694:	f000 fb82 	bl	801dd9c <__mcmp>
 801d698:	2800      	cmp	r0, #0
 801d69a:	f73f adba 	bgt.w	801d212 <_dtoa_r+0x48a>
 801d69e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d6a0:	9e04      	ldr	r6, [sp, #16]
 801d6a2:	43db      	mvns	r3, r3
 801d6a4:	9303      	str	r3, [sp, #12]
 801d6a6:	2700      	movs	r7, #0
 801d6a8:	4621      	mov	r1, r4
 801d6aa:	4648      	mov	r0, r9
 801d6ac:	f000 f96d 	bl	801d98a <_Bfree>
 801d6b0:	2d00      	cmp	r5, #0
 801d6b2:	f43f aea9 	beq.w	801d408 <_dtoa_r+0x680>
 801d6b6:	b12f      	cbz	r7, 801d6c4 <_dtoa_r+0x93c>
 801d6b8:	42af      	cmp	r7, r5
 801d6ba:	d003      	beq.n	801d6c4 <_dtoa_r+0x93c>
 801d6bc:	4639      	mov	r1, r7
 801d6be:	4648      	mov	r0, r9
 801d6c0:	f000 f963 	bl	801d98a <_Bfree>
 801d6c4:	4629      	mov	r1, r5
 801d6c6:	4648      	mov	r0, r9
 801d6c8:	f000 f95f 	bl	801d98a <_Bfree>
 801d6cc:	e69c      	b.n	801d408 <_dtoa_r+0x680>
 801d6ce:	2400      	movs	r4, #0
 801d6d0:	4625      	mov	r5, r4
 801d6d2:	e7e4      	b.n	801d69e <_dtoa_r+0x916>
 801d6d4:	9503      	str	r5, [sp, #12]
 801d6d6:	4625      	mov	r5, r4
 801d6d8:	e59b      	b.n	801d212 <_dtoa_r+0x48a>
 801d6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	f000 80c4 	beq.w	801d86a <_dtoa_r+0xae2>
 801d6e2:	9b05      	ldr	r3, [sp, #20]
 801d6e4:	9308      	str	r3, [sp, #32]
 801d6e6:	2e00      	cmp	r6, #0
 801d6e8:	dd05      	ble.n	801d6f6 <_dtoa_r+0x96e>
 801d6ea:	4629      	mov	r1, r5
 801d6ec:	4632      	mov	r2, r6
 801d6ee:	4648      	mov	r0, r9
 801d6f0:	f000 fae8 	bl	801dcc4 <__lshift>
 801d6f4:	4605      	mov	r5, r0
 801d6f6:	2f00      	cmp	r7, #0
 801d6f8:	d058      	beq.n	801d7ac <_dtoa_r+0xa24>
 801d6fa:	6869      	ldr	r1, [r5, #4]
 801d6fc:	4648      	mov	r0, r9
 801d6fe:	f000 f91f 	bl	801d940 <_Balloc>
 801d702:	4606      	mov	r6, r0
 801d704:	b920      	cbnz	r0, 801d710 <_dtoa_r+0x988>
 801d706:	4b82      	ldr	r3, [pc, #520]	; (801d910 <_dtoa_r+0xb88>)
 801d708:	4602      	mov	r2, r0
 801d70a:	f240 21ef 	movw	r1, #751	; 0x2ef
 801d70e:	e476      	b.n	801cffe <_dtoa_r+0x276>
 801d710:	692a      	ldr	r2, [r5, #16]
 801d712:	3202      	adds	r2, #2
 801d714:	0092      	lsls	r2, r2, #2
 801d716:	f105 010c 	add.w	r1, r5, #12
 801d71a:	300c      	adds	r0, #12
 801d71c:	f7fb f9a6 	bl	8018a6c <memcpy>
 801d720:	2201      	movs	r2, #1
 801d722:	4631      	mov	r1, r6
 801d724:	4648      	mov	r0, r9
 801d726:	f000 facd 	bl	801dcc4 <__lshift>
 801d72a:	9b04      	ldr	r3, [sp, #16]
 801d72c:	9a04      	ldr	r2, [sp, #16]
 801d72e:	3301      	adds	r3, #1
 801d730:	9305      	str	r3, [sp, #20]
 801d732:	9b08      	ldr	r3, [sp, #32]
 801d734:	4413      	add	r3, r2
 801d736:	930a      	str	r3, [sp, #40]	; 0x28
 801d738:	f00a 0301 	and.w	r3, sl, #1
 801d73c:	462f      	mov	r7, r5
 801d73e:	9309      	str	r3, [sp, #36]	; 0x24
 801d740:	4605      	mov	r5, r0
 801d742:	9b05      	ldr	r3, [sp, #20]
 801d744:	4621      	mov	r1, r4
 801d746:	4640      	mov	r0, r8
 801d748:	f103 3bff 	add.w	fp, r3, #4294967295
 801d74c:	f7ff fa94 	bl	801cc78 <quorem>
 801d750:	4639      	mov	r1, r7
 801d752:	9006      	str	r0, [sp, #24]
 801d754:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801d758:	4640      	mov	r0, r8
 801d75a:	f000 fb1f 	bl	801dd9c <__mcmp>
 801d75e:	462a      	mov	r2, r5
 801d760:	9008      	str	r0, [sp, #32]
 801d762:	4621      	mov	r1, r4
 801d764:	4648      	mov	r0, r9
 801d766:	f000 fb35 	bl	801ddd4 <__mdiff>
 801d76a:	68c2      	ldr	r2, [r0, #12]
 801d76c:	4606      	mov	r6, r0
 801d76e:	b9fa      	cbnz	r2, 801d7b0 <_dtoa_r+0xa28>
 801d770:	4601      	mov	r1, r0
 801d772:	4640      	mov	r0, r8
 801d774:	f000 fb12 	bl	801dd9c <__mcmp>
 801d778:	4602      	mov	r2, r0
 801d77a:	4631      	mov	r1, r6
 801d77c:	4648      	mov	r0, r9
 801d77e:	920b      	str	r2, [sp, #44]	; 0x2c
 801d780:	f000 f903 	bl	801d98a <_Bfree>
 801d784:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d788:	9e05      	ldr	r6, [sp, #20]
 801d78a:	ea43 0102 	orr.w	r1, r3, r2
 801d78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d790:	4319      	orrs	r1, r3
 801d792:	d10f      	bne.n	801d7b4 <_dtoa_r+0xa2c>
 801d794:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d798:	d028      	beq.n	801d7ec <_dtoa_r+0xa64>
 801d79a:	9b08      	ldr	r3, [sp, #32]
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	dd02      	ble.n	801d7a6 <_dtoa_r+0xa1e>
 801d7a0:	9b06      	ldr	r3, [sp, #24]
 801d7a2:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801d7a6:	f88b a000 	strb.w	sl, [fp]
 801d7aa:	e77d      	b.n	801d6a8 <_dtoa_r+0x920>
 801d7ac:	4628      	mov	r0, r5
 801d7ae:	e7bc      	b.n	801d72a <_dtoa_r+0x9a2>
 801d7b0:	2201      	movs	r2, #1
 801d7b2:	e7e2      	b.n	801d77a <_dtoa_r+0x9f2>
 801d7b4:	9b08      	ldr	r3, [sp, #32]
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	db04      	blt.n	801d7c4 <_dtoa_r+0xa3c>
 801d7ba:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d7bc:	430b      	orrs	r3, r1
 801d7be:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d7c0:	430b      	orrs	r3, r1
 801d7c2:	d120      	bne.n	801d806 <_dtoa_r+0xa7e>
 801d7c4:	2a00      	cmp	r2, #0
 801d7c6:	ddee      	ble.n	801d7a6 <_dtoa_r+0xa1e>
 801d7c8:	4641      	mov	r1, r8
 801d7ca:	2201      	movs	r2, #1
 801d7cc:	4648      	mov	r0, r9
 801d7ce:	f000 fa79 	bl	801dcc4 <__lshift>
 801d7d2:	4621      	mov	r1, r4
 801d7d4:	4680      	mov	r8, r0
 801d7d6:	f000 fae1 	bl	801dd9c <__mcmp>
 801d7da:	2800      	cmp	r0, #0
 801d7dc:	dc03      	bgt.n	801d7e6 <_dtoa_r+0xa5e>
 801d7de:	d1e2      	bne.n	801d7a6 <_dtoa_r+0xa1e>
 801d7e0:	f01a 0f01 	tst.w	sl, #1
 801d7e4:	d0df      	beq.n	801d7a6 <_dtoa_r+0xa1e>
 801d7e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d7ea:	d1d9      	bne.n	801d7a0 <_dtoa_r+0xa18>
 801d7ec:	2339      	movs	r3, #57	; 0x39
 801d7ee:	f88b 3000 	strb.w	r3, [fp]
 801d7f2:	4633      	mov	r3, r6
 801d7f4:	461e      	mov	r6, r3
 801d7f6:	3b01      	subs	r3, #1
 801d7f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d7fc:	2a39      	cmp	r2, #57	; 0x39
 801d7fe:	d06b      	beq.n	801d8d8 <_dtoa_r+0xb50>
 801d800:	3201      	adds	r2, #1
 801d802:	701a      	strb	r2, [r3, #0]
 801d804:	e750      	b.n	801d6a8 <_dtoa_r+0x920>
 801d806:	2a00      	cmp	r2, #0
 801d808:	dd07      	ble.n	801d81a <_dtoa_r+0xa92>
 801d80a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801d80e:	d0ed      	beq.n	801d7ec <_dtoa_r+0xa64>
 801d810:	f10a 0301 	add.w	r3, sl, #1
 801d814:	f88b 3000 	strb.w	r3, [fp]
 801d818:	e746      	b.n	801d6a8 <_dtoa_r+0x920>
 801d81a:	9b05      	ldr	r3, [sp, #20]
 801d81c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d81e:	f803 ac01 	strb.w	sl, [r3, #-1]
 801d822:	4293      	cmp	r3, r2
 801d824:	d042      	beq.n	801d8ac <_dtoa_r+0xb24>
 801d826:	4641      	mov	r1, r8
 801d828:	2300      	movs	r3, #0
 801d82a:	220a      	movs	r2, #10
 801d82c:	4648      	mov	r0, r9
 801d82e:	f000 f8b5 	bl	801d99c <__multadd>
 801d832:	42af      	cmp	r7, r5
 801d834:	4680      	mov	r8, r0
 801d836:	f04f 0300 	mov.w	r3, #0
 801d83a:	f04f 020a 	mov.w	r2, #10
 801d83e:	4639      	mov	r1, r7
 801d840:	4648      	mov	r0, r9
 801d842:	d107      	bne.n	801d854 <_dtoa_r+0xacc>
 801d844:	f000 f8aa 	bl	801d99c <__multadd>
 801d848:	4607      	mov	r7, r0
 801d84a:	4605      	mov	r5, r0
 801d84c:	9b05      	ldr	r3, [sp, #20]
 801d84e:	3301      	adds	r3, #1
 801d850:	9305      	str	r3, [sp, #20]
 801d852:	e776      	b.n	801d742 <_dtoa_r+0x9ba>
 801d854:	f000 f8a2 	bl	801d99c <__multadd>
 801d858:	4629      	mov	r1, r5
 801d85a:	4607      	mov	r7, r0
 801d85c:	2300      	movs	r3, #0
 801d85e:	220a      	movs	r2, #10
 801d860:	4648      	mov	r0, r9
 801d862:	f000 f89b 	bl	801d99c <__multadd>
 801d866:	4605      	mov	r5, r0
 801d868:	e7f0      	b.n	801d84c <_dtoa_r+0xac4>
 801d86a:	9b05      	ldr	r3, [sp, #20]
 801d86c:	9308      	str	r3, [sp, #32]
 801d86e:	9e04      	ldr	r6, [sp, #16]
 801d870:	4621      	mov	r1, r4
 801d872:	4640      	mov	r0, r8
 801d874:	f7ff fa00 	bl	801cc78 <quorem>
 801d878:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801d87c:	9b04      	ldr	r3, [sp, #16]
 801d87e:	f806 ab01 	strb.w	sl, [r6], #1
 801d882:	1af2      	subs	r2, r6, r3
 801d884:	9b08      	ldr	r3, [sp, #32]
 801d886:	4293      	cmp	r3, r2
 801d888:	dd07      	ble.n	801d89a <_dtoa_r+0xb12>
 801d88a:	4641      	mov	r1, r8
 801d88c:	2300      	movs	r3, #0
 801d88e:	220a      	movs	r2, #10
 801d890:	4648      	mov	r0, r9
 801d892:	f000 f883 	bl	801d99c <__multadd>
 801d896:	4680      	mov	r8, r0
 801d898:	e7ea      	b.n	801d870 <_dtoa_r+0xae8>
 801d89a:	9b08      	ldr	r3, [sp, #32]
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	bfc8      	it	gt
 801d8a0:	461e      	movgt	r6, r3
 801d8a2:	9b04      	ldr	r3, [sp, #16]
 801d8a4:	bfd8      	it	le
 801d8a6:	2601      	movle	r6, #1
 801d8a8:	441e      	add	r6, r3
 801d8aa:	2700      	movs	r7, #0
 801d8ac:	4641      	mov	r1, r8
 801d8ae:	2201      	movs	r2, #1
 801d8b0:	4648      	mov	r0, r9
 801d8b2:	f000 fa07 	bl	801dcc4 <__lshift>
 801d8b6:	4621      	mov	r1, r4
 801d8b8:	4680      	mov	r8, r0
 801d8ba:	f000 fa6f 	bl	801dd9c <__mcmp>
 801d8be:	2800      	cmp	r0, #0
 801d8c0:	dc97      	bgt.n	801d7f2 <_dtoa_r+0xa6a>
 801d8c2:	d102      	bne.n	801d8ca <_dtoa_r+0xb42>
 801d8c4:	f01a 0f01 	tst.w	sl, #1
 801d8c8:	d193      	bne.n	801d7f2 <_dtoa_r+0xa6a>
 801d8ca:	4633      	mov	r3, r6
 801d8cc:	461e      	mov	r6, r3
 801d8ce:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d8d2:	2a30      	cmp	r2, #48	; 0x30
 801d8d4:	d0fa      	beq.n	801d8cc <_dtoa_r+0xb44>
 801d8d6:	e6e7      	b.n	801d6a8 <_dtoa_r+0x920>
 801d8d8:	9a04      	ldr	r2, [sp, #16]
 801d8da:	429a      	cmp	r2, r3
 801d8dc:	d18a      	bne.n	801d7f4 <_dtoa_r+0xa6c>
 801d8de:	9b03      	ldr	r3, [sp, #12]
 801d8e0:	3301      	adds	r3, #1
 801d8e2:	9303      	str	r3, [sp, #12]
 801d8e4:	2331      	movs	r3, #49	; 0x31
 801d8e6:	7013      	strb	r3, [r2, #0]
 801d8e8:	e6de      	b.n	801d6a8 <_dtoa_r+0x920>
 801d8ea:	4b0a      	ldr	r3, [pc, #40]	; (801d914 <_dtoa_r+0xb8c>)
 801d8ec:	f7ff ba9f 	b.w	801ce2e <_dtoa_r+0xa6>
 801d8f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	f47f aa82 	bne.w	801cdfc <_dtoa_r+0x74>
 801d8f8:	4b07      	ldr	r3, [pc, #28]	; (801d918 <_dtoa_r+0xb90>)
 801d8fa:	f7ff ba98 	b.w	801ce2e <_dtoa_r+0xa6>
 801d8fe:	9b08      	ldr	r3, [sp, #32]
 801d900:	2b00      	cmp	r3, #0
 801d902:	dcb4      	bgt.n	801d86e <_dtoa_r+0xae6>
 801d904:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d906:	2b02      	cmp	r3, #2
 801d908:	f73f aeba 	bgt.w	801d680 <_dtoa_r+0x8f8>
 801d90c:	e7af      	b.n	801d86e <_dtoa_r+0xae6>
 801d90e:	bf00      	nop
 801d910:	080206c8 	.word	0x080206c8
 801d914:	0802064f 	.word	0x0802064f
 801d918:	080206bb 	.word	0x080206bb

0801d91c <__ascii_mbtowc>:
 801d91c:	b082      	sub	sp, #8
 801d91e:	b901      	cbnz	r1, 801d922 <__ascii_mbtowc+0x6>
 801d920:	a901      	add	r1, sp, #4
 801d922:	b142      	cbz	r2, 801d936 <__ascii_mbtowc+0x1a>
 801d924:	b14b      	cbz	r3, 801d93a <__ascii_mbtowc+0x1e>
 801d926:	7813      	ldrb	r3, [r2, #0]
 801d928:	600b      	str	r3, [r1, #0]
 801d92a:	7812      	ldrb	r2, [r2, #0]
 801d92c:	1e10      	subs	r0, r2, #0
 801d92e:	bf18      	it	ne
 801d930:	2001      	movne	r0, #1
 801d932:	b002      	add	sp, #8
 801d934:	4770      	bx	lr
 801d936:	4610      	mov	r0, r2
 801d938:	e7fb      	b.n	801d932 <__ascii_mbtowc+0x16>
 801d93a:	f06f 0001 	mvn.w	r0, #1
 801d93e:	e7f8      	b.n	801d932 <__ascii_mbtowc+0x16>

0801d940 <_Balloc>:
 801d940:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801d942:	b570      	push	{r4, r5, r6, lr}
 801d944:	4605      	mov	r5, r0
 801d946:	460c      	mov	r4, r1
 801d948:	b17b      	cbz	r3, 801d96a <_Balloc+0x2a>
 801d94a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801d94c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d950:	b9a0      	cbnz	r0, 801d97c <_Balloc+0x3c>
 801d952:	2101      	movs	r1, #1
 801d954:	fa01 f604 	lsl.w	r6, r1, r4
 801d958:	1d72      	adds	r2, r6, #5
 801d95a:	0092      	lsls	r2, r2, #2
 801d95c:	4628      	mov	r0, r5
 801d95e:	f000 fc1f 	bl	801e1a0 <_calloc_r>
 801d962:	b148      	cbz	r0, 801d978 <_Balloc+0x38>
 801d964:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801d968:	e00b      	b.n	801d982 <_Balloc+0x42>
 801d96a:	2221      	movs	r2, #33	; 0x21
 801d96c:	2104      	movs	r1, #4
 801d96e:	f000 fc17 	bl	801e1a0 <_calloc_r>
 801d972:	6468      	str	r0, [r5, #68]	; 0x44
 801d974:	2800      	cmp	r0, #0
 801d976:	d1e8      	bne.n	801d94a <_Balloc+0xa>
 801d978:	2000      	movs	r0, #0
 801d97a:	bd70      	pop	{r4, r5, r6, pc}
 801d97c:	6802      	ldr	r2, [r0, #0]
 801d97e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801d982:	2300      	movs	r3, #0
 801d984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d988:	e7f7      	b.n	801d97a <_Balloc+0x3a>

0801d98a <_Bfree>:
 801d98a:	b131      	cbz	r1, 801d99a <_Bfree+0x10>
 801d98c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801d98e:	684a      	ldr	r2, [r1, #4]
 801d990:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d994:	6008      	str	r0, [r1, #0]
 801d996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801d99a:	4770      	bx	lr

0801d99c <__multadd>:
 801d99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9a0:	690d      	ldr	r5, [r1, #16]
 801d9a2:	4607      	mov	r7, r0
 801d9a4:	460c      	mov	r4, r1
 801d9a6:	461e      	mov	r6, r3
 801d9a8:	f101 0c14 	add.w	ip, r1, #20
 801d9ac:	2000      	movs	r0, #0
 801d9ae:	f8dc 3000 	ldr.w	r3, [ip]
 801d9b2:	b299      	uxth	r1, r3
 801d9b4:	fb02 6101 	mla	r1, r2, r1, r6
 801d9b8:	0c1e      	lsrs	r6, r3, #16
 801d9ba:	0c0b      	lsrs	r3, r1, #16
 801d9bc:	fb02 3306 	mla	r3, r2, r6, r3
 801d9c0:	b289      	uxth	r1, r1
 801d9c2:	3001      	adds	r0, #1
 801d9c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d9c8:	4285      	cmp	r5, r0
 801d9ca:	f84c 1b04 	str.w	r1, [ip], #4
 801d9ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d9d2:	dcec      	bgt.n	801d9ae <__multadd+0x12>
 801d9d4:	b30e      	cbz	r6, 801da1a <__multadd+0x7e>
 801d9d6:	68a3      	ldr	r3, [r4, #8]
 801d9d8:	42ab      	cmp	r3, r5
 801d9da:	dc19      	bgt.n	801da10 <__multadd+0x74>
 801d9dc:	6861      	ldr	r1, [r4, #4]
 801d9de:	4638      	mov	r0, r7
 801d9e0:	3101      	adds	r1, #1
 801d9e2:	f7ff ffad 	bl	801d940 <_Balloc>
 801d9e6:	4680      	mov	r8, r0
 801d9e8:	b928      	cbnz	r0, 801d9f6 <__multadd+0x5a>
 801d9ea:	4602      	mov	r2, r0
 801d9ec:	4b0c      	ldr	r3, [pc, #48]	; (801da20 <__multadd+0x84>)
 801d9ee:	480d      	ldr	r0, [pc, #52]	; (801da24 <__multadd+0x88>)
 801d9f0:	21ba      	movs	r1, #186	; 0xba
 801d9f2:	f000 fbb7 	bl	801e164 <__assert_func>
 801d9f6:	6922      	ldr	r2, [r4, #16]
 801d9f8:	3202      	adds	r2, #2
 801d9fa:	f104 010c 	add.w	r1, r4, #12
 801d9fe:	0092      	lsls	r2, r2, #2
 801da00:	300c      	adds	r0, #12
 801da02:	f7fb f833 	bl	8018a6c <memcpy>
 801da06:	4621      	mov	r1, r4
 801da08:	4638      	mov	r0, r7
 801da0a:	f7ff ffbe 	bl	801d98a <_Bfree>
 801da0e:	4644      	mov	r4, r8
 801da10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801da14:	3501      	adds	r5, #1
 801da16:	615e      	str	r6, [r3, #20]
 801da18:	6125      	str	r5, [r4, #16]
 801da1a:	4620      	mov	r0, r4
 801da1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da20:	080206c8 	.word	0x080206c8
 801da24:	08020731 	.word	0x08020731

0801da28 <__hi0bits>:
 801da28:	0c02      	lsrs	r2, r0, #16
 801da2a:	0412      	lsls	r2, r2, #16
 801da2c:	4603      	mov	r3, r0
 801da2e:	b9ca      	cbnz	r2, 801da64 <__hi0bits+0x3c>
 801da30:	0403      	lsls	r3, r0, #16
 801da32:	2010      	movs	r0, #16
 801da34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801da38:	bf04      	itt	eq
 801da3a:	021b      	lsleq	r3, r3, #8
 801da3c:	3008      	addeq	r0, #8
 801da3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801da42:	bf04      	itt	eq
 801da44:	011b      	lsleq	r3, r3, #4
 801da46:	3004      	addeq	r0, #4
 801da48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801da4c:	bf04      	itt	eq
 801da4e:	009b      	lsleq	r3, r3, #2
 801da50:	3002      	addeq	r0, #2
 801da52:	2b00      	cmp	r3, #0
 801da54:	db05      	blt.n	801da62 <__hi0bits+0x3a>
 801da56:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801da5a:	f100 0001 	add.w	r0, r0, #1
 801da5e:	bf08      	it	eq
 801da60:	2020      	moveq	r0, #32
 801da62:	4770      	bx	lr
 801da64:	2000      	movs	r0, #0
 801da66:	e7e5      	b.n	801da34 <__hi0bits+0xc>

0801da68 <__lo0bits>:
 801da68:	6803      	ldr	r3, [r0, #0]
 801da6a:	4602      	mov	r2, r0
 801da6c:	f013 0007 	ands.w	r0, r3, #7
 801da70:	d00b      	beq.n	801da8a <__lo0bits+0x22>
 801da72:	07d9      	lsls	r1, r3, #31
 801da74:	d421      	bmi.n	801daba <__lo0bits+0x52>
 801da76:	0798      	lsls	r0, r3, #30
 801da78:	bf49      	itett	mi
 801da7a:	085b      	lsrmi	r3, r3, #1
 801da7c:	089b      	lsrpl	r3, r3, #2
 801da7e:	2001      	movmi	r0, #1
 801da80:	6013      	strmi	r3, [r2, #0]
 801da82:	bf5c      	itt	pl
 801da84:	6013      	strpl	r3, [r2, #0]
 801da86:	2002      	movpl	r0, #2
 801da88:	4770      	bx	lr
 801da8a:	b299      	uxth	r1, r3
 801da8c:	b909      	cbnz	r1, 801da92 <__lo0bits+0x2a>
 801da8e:	0c1b      	lsrs	r3, r3, #16
 801da90:	2010      	movs	r0, #16
 801da92:	b2d9      	uxtb	r1, r3
 801da94:	b909      	cbnz	r1, 801da9a <__lo0bits+0x32>
 801da96:	3008      	adds	r0, #8
 801da98:	0a1b      	lsrs	r3, r3, #8
 801da9a:	0719      	lsls	r1, r3, #28
 801da9c:	bf04      	itt	eq
 801da9e:	091b      	lsreq	r3, r3, #4
 801daa0:	3004      	addeq	r0, #4
 801daa2:	0799      	lsls	r1, r3, #30
 801daa4:	bf04      	itt	eq
 801daa6:	089b      	lsreq	r3, r3, #2
 801daa8:	3002      	addeq	r0, #2
 801daaa:	07d9      	lsls	r1, r3, #31
 801daac:	d403      	bmi.n	801dab6 <__lo0bits+0x4e>
 801daae:	085b      	lsrs	r3, r3, #1
 801dab0:	f100 0001 	add.w	r0, r0, #1
 801dab4:	d003      	beq.n	801dabe <__lo0bits+0x56>
 801dab6:	6013      	str	r3, [r2, #0]
 801dab8:	4770      	bx	lr
 801daba:	2000      	movs	r0, #0
 801dabc:	4770      	bx	lr
 801dabe:	2020      	movs	r0, #32
 801dac0:	4770      	bx	lr
	...

0801dac4 <__i2b>:
 801dac4:	b510      	push	{r4, lr}
 801dac6:	460c      	mov	r4, r1
 801dac8:	2101      	movs	r1, #1
 801daca:	f7ff ff39 	bl	801d940 <_Balloc>
 801dace:	4602      	mov	r2, r0
 801dad0:	b928      	cbnz	r0, 801dade <__i2b+0x1a>
 801dad2:	4b05      	ldr	r3, [pc, #20]	; (801dae8 <__i2b+0x24>)
 801dad4:	4805      	ldr	r0, [pc, #20]	; (801daec <__i2b+0x28>)
 801dad6:	f240 1145 	movw	r1, #325	; 0x145
 801dada:	f000 fb43 	bl	801e164 <__assert_func>
 801dade:	2301      	movs	r3, #1
 801dae0:	6144      	str	r4, [r0, #20]
 801dae2:	6103      	str	r3, [r0, #16]
 801dae4:	bd10      	pop	{r4, pc}
 801dae6:	bf00      	nop
 801dae8:	080206c8 	.word	0x080206c8
 801daec:	08020731 	.word	0x08020731

0801daf0 <__multiply>:
 801daf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daf4:	4691      	mov	r9, r2
 801daf6:	690a      	ldr	r2, [r1, #16]
 801daf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801dafc:	429a      	cmp	r2, r3
 801dafe:	bfb8      	it	lt
 801db00:	460b      	movlt	r3, r1
 801db02:	460c      	mov	r4, r1
 801db04:	bfbc      	itt	lt
 801db06:	464c      	movlt	r4, r9
 801db08:	4699      	movlt	r9, r3
 801db0a:	6927      	ldr	r7, [r4, #16]
 801db0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801db10:	68a3      	ldr	r3, [r4, #8]
 801db12:	6861      	ldr	r1, [r4, #4]
 801db14:	eb07 060a 	add.w	r6, r7, sl
 801db18:	42b3      	cmp	r3, r6
 801db1a:	b085      	sub	sp, #20
 801db1c:	bfb8      	it	lt
 801db1e:	3101      	addlt	r1, #1
 801db20:	f7ff ff0e 	bl	801d940 <_Balloc>
 801db24:	b930      	cbnz	r0, 801db34 <__multiply+0x44>
 801db26:	4602      	mov	r2, r0
 801db28:	4b44      	ldr	r3, [pc, #272]	; (801dc3c <__multiply+0x14c>)
 801db2a:	4845      	ldr	r0, [pc, #276]	; (801dc40 <__multiply+0x150>)
 801db2c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801db30:	f000 fb18 	bl	801e164 <__assert_func>
 801db34:	f100 0514 	add.w	r5, r0, #20
 801db38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801db3c:	462b      	mov	r3, r5
 801db3e:	2200      	movs	r2, #0
 801db40:	4543      	cmp	r3, r8
 801db42:	d321      	bcc.n	801db88 <__multiply+0x98>
 801db44:	f104 0314 	add.w	r3, r4, #20
 801db48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801db4c:	f109 0314 	add.w	r3, r9, #20
 801db50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801db54:	9202      	str	r2, [sp, #8]
 801db56:	1b3a      	subs	r2, r7, r4
 801db58:	3a15      	subs	r2, #21
 801db5a:	f022 0203 	bic.w	r2, r2, #3
 801db5e:	3204      	adds	r2, #4
 801db60:	f104 0115 	add.w	r1, r4, #21
 801db64:	428f      	cmp	r7, r1
 801db66:	bf38      	it	cc
 801db68:	2204      	movcc	r2, #4
 801db6a:	9201      	str	r2, [sp, #4]
 801db6c:	9a02      	ldr	r2, [sp, #8]
 801db6e:	9303      	str	r3, [sp, #12]
 801db70:	429a      	cmp	r2, r3
 801db72:	d80c      	bhi.n	801db8e <__multiply+0x9e>
 801db74:	2e00      	cmp	r6, #0
 801db76:	dd03      	ble.n	801db80 <__multiply+0x90>
 801db78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d05a      	beq.n	801dc36 <__multiply+0x146>
 801db80:	6106      	str	r6, [r0, #16]
 801db82:	b005      	add	sp, #20
 801db84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db88:	f843 2b04 	str.w	r2, [r3], #4
 801db8c:	e7d8      	b.n	801db40 <__multiply+0x50>
 801db8e:	f8b3 a000 	ldrh.w	sl, [r3]
 801db92:	f1ba 0f00 	cmp.w	sl, #0
 801db96:	d023      	beq.n	801dbe0 <__multiply+0xf0>
 801db98:	f104 0e14 	add.w	lr, r4, #20
 801db9c:	46a9      	mov	r9, r5
 801db9e:	f04f 0c00 	mov.w	ip, #0
 801dba2:	f85e 2b04 	ldr.w	r2, [lr], #4
 801dba6:	f8d9 1000 	ldr.w	r1, [r9]
 801dbaa:	fa1f fb82 	uxth.w	fp, r2
 801dbae:	b289      	uxth	r1, r1
 801dbb0:	fb0a 110b 	mla	r1, sl, fp, r1
 801dbb4:	4461      	add	r1, ip
 801dbb6:	f8d9 c000 	ldr.w	ip, [r9]
 801dbba:	0c12      	lsrs	r2, r2, #16
 801dbbc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801dbc0:	fb0a c202 	mla	r2, sl, r2, ip
 801dbc4:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801dbc8:	b289      	uxth	r1, r1
 801dbca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801dbce:	4577      	cmp	r7, lr
 801dbd0:	f849 1b04 	str.w	r1, [r9], #4
 801dbd4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801dbd8:	d8e3      	bhi.n	801dba2 <__multiply+0xb2>
 801dbda:	9a01      	ldr	r2, [sp, #4]
 801dbdc:	f845 c002 	str.w	ip, [r5, r2]
 801dbe0:	9a03      	ldr	r2, [sp, #12]
 801dbe2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801dbe6:	3304      	adds	r3, #4
 801dbe8:	f1b9 0f00 	cmp.w	r9, #0
 801dbec:	d021      	beq.n	801dc32 <__multiply+0x142>
 801dbee:	6829      	ldr	r1, [r5, #0]
 801dbf0:	f104 0c14 	add.w	ip, r4, #20
 801dbf4:	46ae      	mov	lr, r5
 801dbf6:	f04f 0a00 	mov.w	sl, #0
 801dbfa:	f8bc b000 	ldrh.w	fp, [ip]
 801dbfe:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801dc02:	fb09 220b 	mla	r2, r9, fp, r2
 801dc06:	4452      	add	r2, sl
 801dc08:	b289      	uxth	r1, r1
 801dc0a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801dc0e:	f84e 1b04 	str.w	r1, [lr], #4
 801dc12:	f85c 1b04 	ldr.w	r1, [ip], #4
 801dc16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801dc1a:	f8be 1000 	ldrh.w	r1, [lr]
 801dc1e:	fb09 110a 	mla	r1, r9, sl, r1
 801dc22:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801dc26:	4567      	cmp	r7, ip
 801dc28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801dc2c:	d8e5      	bhi.n	801dbfa <__multiply+0x10a>
 801dc2e:	9a01      	ldr	r2, [sp, #4]
 801dc30:	50a9      	str	r1, [r5, r2]
 801dc32:	3504      	adds	r5, #4
 801dc34:	e79a      	b.n	801db6c <__multiply+0x7c>
 801dc36:	3e01      	subs	r6, #1
 801dc38:	e79c      	b.n	801db74 <__multiply+0x84>
 801dc3a:	bf00      	nop
 801dc3c:	080206c8 	.word	0x080206c8
 801dc40:	08020731 	.word	0x08020731

0801dc44 <__pow5mult>:
 801dc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc48:	4615      	mov	r5, r2
 801dc4a:	f012 0203 	ands.w	r2, r2, #3
 801dc4e:	4606      	mov	r6, r0
 801dc50:	460f      	mov	r7, r1
 801dc52:	d007      	beq.n	801dc64 <__pow5mult+0x20>
 801dc54:	4c1a      	ldr	r4, [pc, #104]	; (801dcc0 <__pow5mult+0x7c>)
 801dc56:	3a01      	subs	r2, #1
 801dc58:	2300      	movs	r3, #0
 801dc5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dc5e:	f7ff fe9d 	bl	801d99c <__multadd>
 801dc62:	4607      	mov	r7, r0
 801dc64:	10ad      	asrs	r5, r5, #2
 801dc66:	d027      	beq.n	801dcb8 <__pow5mult+0x74>
 801dc68:	6c34      	ldr	r4, [r6, #64]	; 0x40
 801dc6a:	b944      	cbnz	r4, 801dc7e <__pow5mult+0x3a>
 801dc6c:	f240 2171 	movw	r1, #625	; 0x271
 801dc70:	4630      	mov	r0, r6
 801dc72:	f7ff ff27 	bl	801dac4 <__i2b>
 801dc76:	2300      	movs	r3, #0
 801dc78:	6430      	str	r0, [r6, #64]	; 0x40
 801dc7a:	4604      	mov	r4, r0
 801dc7c:	6003      	str	r3, [r0, #0]
 801dc7e:	f04f 0900 	mov.w	r9, #0
 801dc82:	07eb      	lsls	r3, r5, #31
 801dc84:	d50a      	bpl.n	801dc9c <__pow5mult+0x58>
 801dc86:	4639      	mov	r1, r7
 801dc88:	4622      	mov	r2, r4
 801dc8a:	4630      	mov	r0, r6
 801dc8c:	f7ff ff30 	bl	801daf0 <__multiply>
 801dc90:	4639      	mov	r1, r7
 801dc92:	4680      	mov	r8, r0
 801dc94:	4630      	mov	r0, r6
 801dc96:	f7ff fe78 	bl	801d98a <_Bfree>
 801dc9a:	4647      	mov	r7, r8
 801dc9c:	106d      	asrs	r5, r5, #1
 801dc9e:	d00b      	beq.n	801dcb8 <__pow5mult+0x74>
 801dca0:	6820      	ldr	r0, [r4, #0]
 801dca2:	b938      	cbnz	r0, 801dcb4 <__pow5mult+0x70>
 801dca4:	4622      	mov	r2, r4
 801dca6:	4621      	mov	r1, r4
 801dca8:	4630      	mov	r0, r6
 801dcaa:	f7ff ff21 	bl	801daf0 <__multiply>
 801dcae:	6020      	str	r0, [r4, #0]
 801dcb0:	f8c0 9000 	str.w	r9, [r0]
 801dcb4:	4604      	mov	r4, r0
 801dcb6:	e7e4      	b.n	801dc82 <__pow5mult+0x3e>
 801dcb8:	4638      	mov	r0, r7
 801dcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dcbe:	bf00      	nop
 801dcc0:	08020880 	.word	0x08020880

0801dcc4 <__lshift>:
 801dcc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcc8:	460c      	mov	r4, r1
 801dcca:	6849      	ldr	r1, [r1, #4]
 801dccc:	6923      	ldr	r3, [r4, #16]
 801dcce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dcd2:	68a3      	ldr	r3, [r4, #8]
 801dcd4:	4607      	mov	r7, r0
 801dcd6:	4691      	mov	r9, r2
 801dcd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dcdc:	f108 0601 	add.w	r6, r8, #1
 801dce0:	42b3      	cmp	r3, r6
 801dce2:	db0b      	blt.n	801dcfc <__lshift+0x38>
 801dce4:	4638      	mov	r0, r7
 801dce6:	f7ff fe2b 	bl	801d940 <_Balloc>
 801dcea:	4605      	mov	r5, r0
 801dcec:	b948      	cbnz	r0, 801dd02 <__lshift+0x3e>
 801dcee:	4602      	mov	r2, r0
 801dcf0:	4b28      	ldr	r3, [pc, #160]	; (801dd94 <__lshift+0xd0>)
 801dcf2:	4829      	ldr	r0, [pc, #164]	; (801dd98 <__lshift+0xd4>)
 801dcf4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801dcf8:	f000 fa34 	bl	801e164 <__assert_func>
 801dcfc:	3101      	adds	r1, #1
 801dcfe:	005b      	lsls	r3, r3, #1
 801dd00:	e7ee      	b.n	801dce0 <__lshift+0x1c>
 801dd02:	2300      	movs	r3, #0
 801dd04:	f100 0114 	add.w	r1, r0, #20
 801dd08:	f100 0210 	add.w	r2, r0, #16
 801dd0c:	4618      	mov	r0, r3
 801dd0e:	4553      	cmp	r3, sl
 801dd10:	db33      	blt.n	801dd7a <__lshift+0xb6>
 801dd12:	6920      	ldr	r0, [r4, #16]
 801dd14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801dd18:	f104 0314 	add.w	r3, r4, #20
 801dd1c:	f019 091f 	ands.w	r9, r9, #31
 801dd20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dd24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801dd28:	d02b      	beq.n	801dd82 <__lshift+0xbe>
 801dd2a:	f1c9 0e20 	rsb	lr, r9, #32
 801dd2e:	468a      	mov	sl, r1
 801dd30:	2200      	movs	r2, #0
 801dd32:	6818      	ldr	r0, [r3, #0]
 801dd34:	fa00 f009 	lsl.w	r0, r0, r9
 801dd38:	4310      	orrs	r0, r2
 801dd3a:	f84a 0b04 	str.w	r0, [sl], #4
 801dd3e:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd42:	459c      	cmp	ip, r3
 801dd44:	fa22 f20e 	lsr.w	r2, r2, lr
 801dd48:	d8f3      	bhi.n	801dd32 <__lshift+0x6e>
 801dd4a:	ebac 0304 	sub.w	r3, ip, r4
 801dd4e:	3b15      	subs	r3, #21
 801dd50:	f023 0303 	bic.w	r3, r3, #3
 801dd54:	3304      	adds	r3, #4
 801dd56:	f104 0015 	add.w	r0, r4, #21
 801dd5a:	4584      	cmp	ip, r0
 801dd5c:	bf38      	it	cc
 801dd5e:	2304      	movcc	r3, #4
 801dd60:	50ca      	str	r2, [r1, r3]
 801dd62:	b10a      	cbz	r2, 801dd68 <__lshift+0xa4>
 801dd64:	f108 0602 	add.w	r6, r8, #2
 801dd68:	3e01      	subs	r6, #1
 801dd6a:	4638      	mov	r0, r7
 801dd6c:	612e      	str	r6, [r5, #16]
 801dd6e:	4621      	mov	r1, r4
 801dd70:	f7ff fe0b 	bl	801d98a <_Bfree>
 801dd74:	4628      	mov	r0, r5
 801dd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd7a:	f842 0f04 	str.w	r0, [r2, #4]!
 801dd7e:	3301      	adds	r3, #1
 801dd80:	e7c5      	b.n	801dd0e <__lshift+0x4a>
 801dd82:	3904      	subs	r1, #4
 801dd84:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd88:	f841 2f04 	str.w	r2, [r1, #4]!
 801dd8c:	459c      	cmp	ip, r3
 801dd8e:	d8f9      	bhi.n	801dd84 <__lshift+0xc0>
 801dd90:	e7ea      	b.n	801dd68 <__lshift+0xa4>
 801dd92:	bf00      	nop
 801dd94:	080206c8 	.word	0x080206c8
 801dd98:	08020731 	.word	0x08020731

0801dd9c <__mcmp>:
 801dd9c:	690a      	ldr	r2, [r1, #16]
 801dd9e:	4603      	mov	r3, r0
 801dda0:	6900      	ldr	r0, [r0, #16]
 801dda2:	1a80      	subs	r0, r0, r2
 801dda4:	b530      	push	{r4, r5, lr}
 801dda6:	d10d      	bne.n	801ddc4 <__mcmp+0x28>
 801dda8:	3314      	adds	r3, #20
 801ddaa:	3114      	adds	r1, #20
 801ddac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ddb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ddb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ddb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ddbc:	4295      	cmp	r5, r2
 801ddbe:	d002      	beq.n	801ddc6 <__mcmp+0x2a>
 801ddc0:	d304      	bcc.n	801ddcc <__mcmp+0x30>
 801ddc2:	2001      	movs	r0, #1
 801ddc4:	bd30      	pop	{r4, r5, pc}
 801ddc6:	42a3      	cmp	r3, r4
 801ddc8:	d3f4      	bcc.n	801ddb4 <__mcmp+0x18>
 801ddca:	e7fb      	b.n	801ddc4 <__mcmp+0x28>
 801ddcc:	f04f 30ff 	mov.w	r0, #4294967295
 801ddd0:	e7f8      	b.n	801ddc4 <__mcmp+0x28>
	...

0801ddd4 <__mdiff>:
 801ddd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddd8:	460d      	mov	r5, r1
 801ddda:	4607      	mov	r7, r0
 801dddc:	4611      	mov	r1, r2
 801ddde:	4628      	mov	r0, r5
 801dde0:	4614      	mov	r4, r2
 801dde2:	f7ff ffdb 	bl	801dd9c <__mcmp>
 801dde6:	1e06      	subs	r6, r0, #0
 801dde8:	d111      	bne.n	801de0e <__mdiff+0x3a>
 801ddea:	4631      	mov	r1, r6
 801ddec:	4638      	mov	r0, r7
 801ddee:	f7ff fda7 	bl	801d940 <_Balloc>
 801ddf2:	4602      	mov	r2, r0
 801ddf4:	b928      	cbnz	r0, 801de02 <__mdiff+0x2e>
 801ddf6:	4b39      	ldr	r3, [pc, #228]	; (801dedc <__mdiff+0x108>)
 801ddf8:	f240 2137 	movw	r1, #567	; 0x237
 801ddfc:	4838      	ldr	r0, [pc, #224]	; (801dee0 <__mdiff+0x10c>)
 801ddfe:	f000 f9b1 	bl	801e164 <__assert_func>
 801de02:	2301      	movs	r3, #1
 801de04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801de08:	4610      	mov	r0, r2
 801de0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de0e:	bfa4      	itt	ge
 801de10:	4623      	movge	r3, r4
 801de12:	462c      	movge	r4, r5
 801de14:	4638      	mov	r0, r7
 801de16:	6861      	ldr	r1, [r4, #4]
 801de18:	bfa6      	itte	ge
 801de1a:	461d      	movge	r5, r3
 801de1c:	2600      	movge	r6, #0
 801de1e:	2601      	movlt	r6, #1
 801de20:	f7ff fd8e 	bl	801d940 <_Balloc>
 801de24:	4602      	mov	r2, r0
 801de26:	b918      	cbnz	r0, 801de30 <__mdiff+0x5c>
 801de28:	4b2c      	ldr	r3, [pc, #176]	; (801dedc <__mdiff+0x108>)
 801de2a:	f240 2145 	movw	r1, #581	; 0x245
 801de2e:	e7e5      	b.n	801ddfc <__mdiff+0x28>
 801de30:	6927      	ldr	r7, [r4, #16]
 801de32:	60c6      	str	r6, [r0, #12]
 801de34:	692e      	ldr	r6, [r5, #16]
 801de36:	f104 0014 	add.w	r0, r4, #20
 801de3a:	f105 0914 	add.w	r9, r5, #20
 801de3e:	f102 0e14 	add.w	lr, r2, #20
 801de42:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 801de46:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801de4a:	3410      	adds	r4, #16
 801de4c:	46f2      	mov	sl, lr
 801de4e:	2100      	movs	r1, #0
 801de50:	f859 3b04 	ldr.w	r3, [r9], #4
 801de54:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801de58:	fa11 f88b 	uxtah	r8, r1, fp
 801de5c:	b299      	uxth	r1, r3
 801de5e:	0c1b      	lsrs	r3, r3, #16
 801de60:	eba8 0801 	sub.w	r8, r8, r1
 801de64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801de68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801de6c:	fa1f f888 	uxth.w	r8, r8
 801de70:	1419      	asrs	r1, r3, #16
 801de72:	454e      	cmp	r6, r9
 801de74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801de78:	f84a 3b04 	str.w	r3, [sl], #4
 801de7c:	d8e8      	bhi.n	801de50 <__mdiff+0x7c>
 801de7e:	1b73      	subs	r3, r6, r5
 801de80:	3b15      	subs	r3, #21
 801de82:	f023 0303 	bic.w	r3, r3, #3
 801de86:	3304      	adds	r3, #4
 801de88:	3515      	adds	r5, #21
 801de8a:	42ae      	cmp	r6, r5
 801de8c:	bf38      	it	cc
 801de8e:	2304      	movcc	r3, #4
 801de90:	4418      	add	r0, r3
 801de92:	4473      	add	r3, lr
 801de94:	469e      	mov	lr, r3
 801de96:	4606      	mov	r6, r0
 801de98:	4566      	cmp	r6, ip
 801de9a:	d30e      	bcc.n	801deba <__mdiff+0xe6>
 801de9c:	f10c 0103 	add.w	r1, ip, #3
 801dea0:	1a09      	subs	r1, r1, r0
 801dea2:	f021 0103 	bic.w	r1, r1, #3
 801dea6:	3803      	subs	r0, #3
 801dea8:	4584      	cmp	ip, r0
 801deaa:	bf38      	it	cc
 801deac:	2100      	movcc	r1, #0
 801deae:	440b      	add	r3, r1
 801deb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801deb4:	b179      	cbz	r1, 801ded6 <__mdiff+0x102>
 801deb6:	6117      	str	r7, [r2, #16]
 801deb8:	e7a6      	b.n	801de08 <__mdiff+0x34>
 801deba:	f856 8b04 	ldr.w	r8, [r6], #4
 801debe:	fa11 f488 	uxtah	r4, r1, r8
 801dec2:	1425      	asrs	r5, r4, #16
 801dec4:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 801dec8:	b2a4      	uxth	r4, r4
 801deca:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801dece:	f84e 4b04 	str.w	r4, [lr], #4
 801ded2:	1429      	asrs	r1, r5, #16
 801ded4:	e7e0      	b.n	801de98 <__mdiff+0xc4>
 801ded6:	3f01      	subs	r7, #1
 801ded8:	e7ea      	b.n	801deb0 <__mdiff+0xdc>
 801deda:	bf00      	nop
 801dedc:	080206c8 	.word	0x080206c8
 801dee0:	08020731 	.word	0x08020731

0801dee4 <__d2b>:
 801dee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dee6:	2101      	movs	r1, #1
 801dee8:	9e08      	ldr	r6, [sp, #32]
 801deea:	4617      	mov	r7, r2
 801deec:	461c      	mov	r4, r3
 801deee:	f7ff fd27 	bl	801d940 <_Balloc>
 801def2:	4605      	mov	r5, r0
 801def4:	b930      	cbnz	r0, 801df04 <__d2b+0x20>
 801def6:	4602      	mov	r2, r0
 801def8:	4b23      	ldr	r3, [pc, #140]	; (801df88 <__d2b+0xa4>)
 801defa:	4824      	ldr	r0, [pc, #144]	; (801df8c <__d2b+0xa8>)
 801defc:	f240 310f 	movw	r1, #783	; 0x30f
 801df00:	f000 f930 	bl	801e164 <__assert_func>
 801df04:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801df08:	f3c4 540a 	ubfx	r4, r4, #20, #11
 801df0c:	bb24      	cbnz	r4, 801df58 <__d2b+0x74>
 801df0e:	2f00      	cmp	r7, #0
 801df10:	9301      	str	r3, [sp, #4]
 801df12:	d026      	beq.n	801df62 <__d2b+0x7e>
 801df14:	4668      	mov	r0, sp
 801df16:	9700      	str	r7, [sp, #0]
 801df18:	f7ff fda6 	bl	801da68 <__lo0bits>
 801df1c:	e9dd 1200 	ldrd	r1, r2, [sp]
 801df20:	b1e8      	cbz	r0, 801df5e <__d2b+0x7a>
 801df22:	f1c0 0320 	rsb	r3, r0, #32
 801df26:	fa02 f303 	lsl.w	r3, r2, r3
 801df2a:	430b      	orrs	r3, r1
 801df2c:	40c2      	lsrs	r2, r0
 801df2e:	616b      	str	r3, [r5, #20]
 801df30:	9201      	str	r2, [sp, #4]
 801df32:	9b01      	ldr	r3, [sp, #4]
 801df34:	61ab      	str	r3, [r5, #24]
 801df36:	2b00      	cmp	r3, #0
 801df38:	bf14      	ite	ne
 801df3a:	2102      	movne	r1, #2
 801df3c:	2101      	moveq	r1, #1
 801df3e:	6129      	str	r1, [r5, #16]
 801df40:	b1bc      	cbz	r4, 801df72 <__d2b+0x8e>
 801df42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801df46:	4404      	add	r4, r0
 801df48:	6034      	str	r4, [r6, #0]
 801df4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801df4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df50:	6018      	str	r0, [r3, #0]
 801df52:	4628      	mov	r0, r5
 801df54:	b003      	add	sp, #12
 801df56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801df5c:	e7d7      	b.n	801df0e <__d2b+0x2a>
 801df5e:	6169      	str	r1, [r5, #20]
 801df60:	e7e7      	b.n	801df32 <__d2b+0x4e>
 801df62:	a801      	add	r0, sp, #4
 801df64:	f7ff fd80 	bl	801da68 <__lo0bits>
 801df68:	9b01      	ldr	r3, [sp, #4]
 801df6a:	616b      	str	r3, [r5, #20]
 801df6c:	3020      	adds	r0, #32
 801df6e:	2101      	movs	r1, #1
 801df70:	e7e5      	b.n	801df3e <__d2b+0x5a>
 801df72:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 801df76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801df7a:	6030      	str	r0, [r6, #0]
 801df7c:	6918      	ldr	r0, [r3, #16]
 801df7e:	f7ff fd53 	bl	801da28 <__hi0bits>
 801df82:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801df86:	e7e2      	b.n	801df4e <__d2b+0x6a>
 801df88:	080206c8 	.word	0x080206c8
 801df8c:	08020731 	.word	0x08020731

0801df90 <__ascii_wctomb>:
 801df90:	4603      	mov	r3, r0
 801df92:	4608      	mov	r0, r1
 801df94:	b141      	cbz	r1, 801dfa8 <__ascii_wctomb+0x18>
 801df96:	2aff      	cmp	r2, #255	; 0xff
 801df98:	d904      	bls.n	801dfa4 <__ascii_wctomb+0x14>
 801df9a:	228a      	movs	r2, #138	; 0x8a
 801df9c:	601a      	str	r2, [r3, #0]
 801df9e:	f04f 30ff 	mov.w	r0, #4294967295
 801dfa2:	4770      	bx	lr
 801dfa4:	700a      	strb	r2, [r1, #0]
 801dfa6:	2001      	movs	r0, #1
 801dfa8:	4770      	bx	lr
	...

0801dfac <_wcrtomb_r>:
 801dfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfae:	4c09      	ldr	r4, [pc, #36]	; (801dfd4 <_wcrtomb_r+0x28>)
 801dfb0:	b085      	sub	sp, #20
 801dfb2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 801dfb6:	4605      	mov	r5, r0
 801dfb8:	461e      	mov	r6, r3
 801dfba:	b909      	cbnz	r1, 801dfc0 <_wcrtomb_r+0x14>
 801dfbc:	460a      	mov	r2, r1
 801dfbe:	a901      	add	r1, sp, #4
 801dfc0:	47b8      	blx	r7
 801dfc2:	1c43      	adds	r3, r0, #1
 801dfc4:	bf01      	itttt	eq
 801dfc6:	2300      	moveq	r3, #0
 801dfc8:	6033      	streq	r3, [r6, #0]
 801dfca:	238a      	moveq	r3, #138	; 0x8a
 801dfcc:	602b      	streq	r3, [r5, #0]
 801dfce:	b005      	add	sp, #20
 801dfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfd2:	bf00      	nop
 801dfd4:	200005e0 	.word	0x200005e0

0801dfd8 <__ssprint_r>:
 801dfd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfdc:	6813      	ldr	r3, [r2, #0]
 801dfde:	9301      	str	r3, [sp, #4]
 801dfe0:	6893      	ldr	r3, [r2, #8]
 801dfe2:	4680      	mov	r8, r0
 801dfe4:	460c      	mov	r4, r1
 801dfe6:	4617      	mov	r7, r2
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	d157      	bne.n	801e09c <__ssprint_r+0xc4>
 801dfec:	2000      	movs	r0, #0
 801dfee:	2300      	movs	r3, #0
 801dff0:	607b      	str	r3, [r7, #4]
 801dff2:	b003      	add	sp, #12
 801dff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dff8:	9b01      	ldr	r3, [sp, #4]
 801dffa:	e9d3 ab00 	ldrd	sl, fp, [r3]
 801dffe:	3308      	adds	r3, #8
 801e000:	9301      	str	r3, [sp, #4]
 801e002:	68a6      	ldr	r6, [r4, #8]
 801e004:	6820      	ldr	r0, [r4, #0]
 801e006:	f1bb 0f00 	cmp.w	fp, #0
 801e00a:	d0f5      	beq.n	801dff8 <__ssprint_r+0x20>
 801e00c:	45b3      	cmp	fp, r6
 801e00e:	d32d      	bcc.n	801e06c <__ssprint_r+0x94>
 801e010:	89a2      	ldrh	r2, [r4, #12]
 801e012:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e016:	d029      	beq.n	801e06c <__ssprint_r+0x94>
 801e018:	6921      	ldr	r1, [r4, #16]
 801e01a:	6965      	ldr	r5, [r4, #20]
 801e01c:	eba0 0901 	sub.w	r9, r0, r1
 801e020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e028:	f109 0001 	add.w	r0, r9, #1
 801e02c:	106d      	asrs	r5, r5, #1
 801e02e:	4458      	add	r0, fp
 801e030:	4285      	cmp	r5, r0
 801e032:	bf38      	it	cc
 801e034:	4605      	movcc	r5, r0
 801e036:	0553      	lsls	r3, r2, #21
 801e038:	d534      	bpl.n	801e0a4 <__ssprint_r+0xcc>
 801e03a:	4629      	mov	r1, r5
 801e03c:	4640      	mov	r0, r8
 801e03e:	f7fa fe47 	bl	8018cd0 <_malloc_r>
 801e042:	4606      	mov	r6, r0
 801e044:	2800      	cmp	r0, #0
 801e046:	d038      	beq.n	801e0ba <__ssprint_r+0xe2>
 801e048:	464a      	mov	r2, r9
 801e04a:	6921      	ldr	r1, [r4, #16]
 801e04c:	f7fa fd0e 	bl	8018a6c <memcpy>
 801e050:	89a2      	ldrh	r2, [r4, #12]
 801e052:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801e056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801e05a:	81a2      	strh	r2, [r4, #12]
 801e05c:	6126      	str	r6, [r4, #16]
 801e05e:	6165      	str	r5, [r4, #20]
 801e060:	444e      	add	r6, r9
 801e062:	eba5 0509 	sub.w	r5, r5, r9
 801e066:	6026      	str	r6, [r4, #0]
 801e068:	60a5      	str	r5, [r4, #8]
 801e06a:	465e      	mov	r6, fp
 801e06c:	455e      	cmp	r6, fp
 801e06e:	bf28      	it	cs
 801e070:	465e      	movcs	r6, fp
 801e072:	4632      	mov	r2, r6
 801e074:	4651      	mov	r1, sl
 801e076:	6820      	ldr	r0, [r4, #0]
 801e078:	f7fa fbf2 	bl	8018860 <memmove>
 801e07c:	68a2      	ldr	r2, [r4, #8]
 801e07e:	1b92      	subs	r2, r2, r6
 801e080:	60a2      	str	r2, [r4, #8]
 801e082:	6822      	ldr	r2, [r4, #0]
 801e084:	4432      	add	r2, r6
 801e086:	6022      	str	r2, [r4, #0]
 801e088:	68ba      	ldr	r2, [r7, #8]
 801e08a:	eba2 030b 	sub.w	r3, r2, fp
 801e08e:	44da      	add	sl, fp
 801e090:	60bb      	str	r3, [r7, #8]
 801e092:	2b00      	cmp	r3, #0
 801e094:	d0aa      	beq.n	801dfec <__ssprint_r+0x14>
 801e096:	f04f 0b00 	mov.w	fp, #0
 801e09a:	e7b2      	b.n	801e002 <__ssprint_r+0x2a>
 801e09c:	f04f 0a00 	mov.w	sl, #0
 801e0a0:	46d3      	mov	fp, sl
 801e0a2:	e7ae      	b.n	801e002 <__ssprint_r+0x2a>
 801e0a4:	462a      	mov	r2, r5
 801e0a6:	4640      	mov	r0, r8
 801e0a8:	f7fb f858 	bl	801915c <_realloc_r>
 801e0ac:	4606      	mov	r6, r0
 801e0ae:	2800      	cmp	r0, #0
 801e0b0:	d1d4      	bne.n	801e05c <__ssprint_r+0x84>
 801e0b2:	6921      	ldr	r1, [r4, #16]
 801e0b4:	4640      	mov	r0, r8
 801e0b6:	f7fa fd4b 	bl	8018b50 <_free_r>
 801e0ba:	230c      	movs	r3, #12
 801e0bc:	f8c8 3000 	str.w	r3, [r8]
 801e0c0:	89a3      	ldrh	r3, [r4, #12]
 801e0c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e0c6:	81a3      	strh	r3, [r4, #12]
 801e0c8:	2300      	movs	r3, #0
 801e0ca:	60bb      	str	r3, [r7, #8]
 801e0cc:	f04f 30ff 	mov.w	r0, #4294967295
 801e0d0:	e78d      	b.n	801dfee <__ssprint_r+0x16>

0801e0d2 <__swbuf_r>:
 801e0d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0d4:	460e      	mov	r6, r1
 801e0d6:	4614      	mov	r4, r2
 801e0d8:	4605      	mov	r5, r0
 801e0da:	b118      	cbz	r0, 801e0e4 <__swbuf_r+0x12>
 801e0dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801e0de:	b90b      	cbnz	r3, 801e0e4 <__swbuf_r+0x12>
 801e0e0:	f7fa f8d4 	bl	801828c <__sinit>
 801e0e4:	69a3      	ldr	r3, [r4, #24]
 801e0e6:	60a3      	str	r3, [r4, #8]
 801e0e8:	89a3      	ldrh	r3, [r4, #12]
 801e0ea:	0719      	lsls	r1, r3, #28
 801e0ec:	d529      	bpl.n	801e142 <__swbuf_r+0x70>
 801e0ee:	6923      	ldr	r3, [r4, #16]
 801e0f0:	b33b      	cbz	r3, 801e142 <__swbuf_r+0x70>
 801e0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0f6:	b2f6      	uxtb	r6, r6
 801e0f8:	049a      	lsls	r2, r3, #18
 801e0fa:	4637      	mov	r7, r6
 801e0fc:	d52a      	bpl.n	801e154 <__swbuf_r+0x82>
 801e0fe:	6823      	ldr	r3, [r4, #0]
 801e100:	6922      	ldr	r2, [r4, #16]
 801e102:	1a98      	subs	r0, r3, r2
 801e104:	6963      	ldr	r3, [r4, #20]
 801e106:	4283      	cmp	r3, r0
 801e108:	dc04      	bgt.n	801e114 <__swbuf_r+0x42>
 801e10a:	4621      	mov	r1, r4
 801e10c:	4628      	mov	r0, r5
 801e10e:	f7fe fbdd 	bl	801c8cc <_fflush_r>
 801e112:	b9e0      	cbnz	r0, 801e14e <__swbuf_r+0x7c>
 801e114:	68a3      	ldr	r3, [r4, #8]
 801e116:	3b01      	subs	r3, #1
 801e118:	60a3      	str	r3, [r4, #8]
 801e11a:	6823      	ldr	r3, [r4, #0]
 801e11c:	1c5a      	adds	r2, r3, #1
 801e11e:	6022      	str	r2, [r4, #0]
 801e120:	701e      	strb	r6, [r3, #0]
 801e122:	6962      	ldr	r2, [r4, #20]
 801e124:	1c43      	adds	r3, r0, #1
 801e126:	429a      	cmp	r2, r3
 801e128:	d004      	beq.n	801e134 <__swbuf_r+0x62>
 801e12a:	89a3      	ldrh	r3, [r4, #12]
 801e12c:	07db      	lsls	r3, r3, #31
 801e12e:	d506      	bpl.n	801e13e <__swbuf_r+0x6c>
 801e130:	2e0a      	cmp	r6, #10
 801e132:	d104      	bne.n	801e13e <__swbuf_r+0x6c>
 801e134:	4621      	mov	r1, r4
 801e136:	4628      	mov	r0, r5
 801e138:	f7fe fbc8 	bl	801c8cc <_fflush_r>
 801e13c:	b938      	cbnz	r0, 801e14e <__swbuf_r+0x7c>
 801e13e:	4638      	mov	r0, r7
 801e140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e142:	4621      	mov	r1, r4
 801e144:	4628      	mov	r0, r5
 801e146:	f7fa fb23 	bl	8018790 <__swsetup_r>
 801e14a:	2800      	cmp	r0, #0
 801e14c:	d0d1      	beq.n	801e0f2 <__swbuf_r+0x20>
 801e14e:	f04f 37ff 	mov.w	r7, #4294967295
 801e152:	e7f4      	b.n	801e13e <__swbuf_r+0x6c>
 801e154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e158:	81a3      	strh	r3, [r4, #12]
 801e15a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e15c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801e160:	6663      	str	r3, [r4, #100]	; 0x64
 801e162:	e7cc      	b.n	801e0fe <__swbuf_r+0x2c>

0801e164 <__assert_func>:
 801e164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e166:	4614      	mov	r4, r2
 801e168:	461a      	mov	r2, r3
 801e16a:	4b09      	ldr	r3, [pc, #36]	; (801e190 <__assert_func+0x2c>)
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	4605      	mov	r5, r0
 801e170:	68d8      	ldr	r0, [r3, #12]
 801e172:	b14c      	cbz	r4, 801e188 <__assert_func+0x24>
 801e174:	4b07      	ldr	r3, [pc, #28]	; (801e194 <__assert_func+0x30>)
 801e176:	9100      	str	r1, [sp, #0]
 801e178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e17c:	4906      	ldr	r1, [pc, #24]	; (801e198 <__assert_func+0x34>)
 801e17e:	462b      	mov	r3, r5
 801e180:	f000 f844 	bl	801e20c <fiprintf>
 801e184:	f000 f854 	bl	801e230 <abort>
 801e188:	4b04      	ldr	r3, [pc, #16]	; (801e19c <__assert_func+0x38>)
 801e18a:	461c      	mov	r4, r3
 801e18c:	e7f3      	b.n	801e176 <__assert_func+0x12>
 801e18e:	bf00      	nop
 801e190:	200001c8 	.word	0x200001c8
 801e194:	0802088c 	.word	0x0802088c
 801e198:	08020899 	.word	0x08020899
 801e19c:	080208c7 	.word	0x080208c7

0801e1a0 <_calloc_r>:
 801e1a0:	b538      	push	{r3, r4, r5, lr}
 801e1a2:	fba1 1502 	umull	r1, r5, r1, r2
 801e1a6:	b92d      	cbnz	r5, 801e1b4 <_calloc_r+0x14>
 801e1a8:	f7fa fd92 	bl	8018cd0 <_malloc_r>
 801e1ac:	4604      	mov	r4, r0
 801e1ae:	b938      	cbnz	r0, 801e1c0 <_calloc_r+0x20>
 801e1b0:	4620      	mov	r0, r4
 801e1b2:	bd38      	pop	{r3, r4, r5, pc}
 801e1b4:	f7fa fc2c 	bl	8018a10 <__errno>
 801e1b8:	230c      	movs	r3, #12
 801e1ba:	6003      	str	r3, [r0, #0]
 801e1bc:	2400      	movs	r4, #0
 801e1be:	e7f7      	b.n	801e1b0 <_calloc_r+0x10>
 801e1c0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e1c4:	f022 0203 	bic.w	r2, r2, #3
 801e1c8:	3a04      	subs	r2, #4
 801e1ca:	2a24      	cmp	r2, #36	; 0x24
 801e1cc:	d819      	bhi.n	801e202 <_calloc_r+0x62>
 801e1ce:	2a13      	cmp	r2, #19
 801e1d0:	d915      	bls.n	801e1fe <_calloc_r+0x5e>
 801e1d2:	2a1b      	cmp	r2, #27
 801e1d4:	e9c0 5500 	strd	r5, r5, [r0]
 801e1d8:	d806      	bhi.n	801e1e8 <_calloc_r+0x48>
 801e1da:	f100 0308 	add.w	r3, r0, #8
 801e1de:	2200      	movs	r2, #0
 801e1e0:	e9c3 2200 	strd	r2, r2, [r3]
 801e1e4:	609a      	str	r2, [r3, #8]
 801e1e6:	e7e3      	b.n	801e1b0 <_calloc_r+0x10>
 801e1e8:	2a24      	cmp	r2, #36	; 0x24
 801e1ea:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801e1ee:	bf11      	iteee	ne
 801e1f0:	f100 0310 	addne.w	r3, r0, #16
 801e1f4:	6105      	streq	r5, [r0, #16]
 801e1f6:	f100 0318 	addeq.w	r3, r0, #24
 801e1fa:	6145      	streq	r5, [r0, #20]
 801e1fc:	e7ef      	b.n	801e1de <_calloc_r+0x3e>
 801e1fe:	4603      	mov	r3, r0
 801e200:	e7ed      	b.n	801e1de <_calloc_r+0x3e>
 801e202:	4629      	mov	r1, r5
 801e204:	f7fa fb46 	bl	8018894 <memset>
 801e208:	e7d2      	b.n	801e1b0 <_calloc_r+0x10>
	...

0801e20c <fiprintf>:
 801e20c:	b40e      	push	{r1, r2, r3}
 801e20e:	b503      	push	{r0, r1, lr}
 801e210:	4601      	mov	r1, r0
 801e212:	ab03      	add	r3, sp, #12
 801e214:	4805      	ldr	r0, [pc, #20]	; (801e22c <fiprintf+0x20>)
 801e216:	f853 2b04 	ldr.w	r2, [r3], #4
 801e21a:	6800      	ldr	r0, [r0, #0]
 801e21c:	9301      	str	r3, [sp, #4]
 801e21e:	f7fd fda5 	bl	801bd6c <_vfiprintf_r>
 801e222:	b002      	add	sp, #8
 801e224:	f85d eb04 	ldr.w	lr, [sp], #4
 801e228:	b003      	add	sp, #12
 801e22a:	4770      	bx	lr
 801e22c:	200001c8 	.word	0x200001c8

0801e230 <abort>:
 801e230:	b508      	push	{r3, lr}
 801e232:	2006      	movs	r0, #6
 801e234:	f000 f82c 	bl	801e290 <raise>
 801e238:	2001      	movs	r0, #1
 801e23a:	f7ec fad0 	bl	800a7de <_exit>

0801e23e <_raise_r>:
 801e23e:	291f      	cmp	r1, #31
 801e240:	b538      	push	{r3, r4, r5, lr}
 801e242:	4604      	mov	r4, r0
 801e244:	460d      	mov	r5, r1
 801e246:	d904      	bls.n	801e252 <_raise_r+0x14>
 801e248:	2316      	movs	r3, #22
 801e24a:	6003      	str	r3, [r0, #0]
 801e24c:	f04f 30ff 	mov.w	r0, #4294967295
 801e250:	bd38      	pop	{r3, r4, r5, pc}
 801e252:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 801e256:	b112      	cbz	r2, 801e25e <_raise_r+0x20>
 801e258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e25c:	b94b      	cbnz	r3, 801e272 <_raise_r+0x34>
 801e25e:	4620      	mov	r0, r4
 801e260:	f000 f830 	bl	801e2c4 <_getpid_r>
 801e264:	462a      	mov	r2, r5
 801e266:	4601      	mov	r1, r0
 801e268:	4620      	mov	r0, r4
 801e26a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e26e:	f000 b817 	b.w	801e2a0 <_kill_r>
 801e272:	2b01      	cmp	r3, #1
 801e274:	d00a      	beq.n	801e28c <_raise_r+0x4e>
 801e276:	1c59      	adds	r1, r3, #1
 801e278:	d103      	bne.n	801e282 <_raise_r+0x44>
 801e27a:	2316      	movs	r3, #22
 801e27c:	6003      	str	r3, [r0, #0]
 801e27e:	2001      	movs	r0, #1
 801e280:	e7e6      	b.n	801e250 <_raise_r+0x12>
 801e282:	2400      	movs	r4, #0
 801e284:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e288:	4628      	mov	r0, r5
 801e28a:	4798      	blx	r3
 801e28c:	2000      	movs	r0, #0
 801e28e:	e7df      	b.n	801e250 <_raise_r+0x12>

0801e290 <raise>:
 801e290:	4b02      	ldr	r3, [pc, #8]	; (801e29c <raise+0xc>)
 801e292:	4601      	mov	r1, r0
 801e294:	6818      	ldr	r0, [r3, #0]
 801e296:	f7ff bfd2 	b.w	801e23e <_raise_r>
 801e29a:	bf00      	nop
 801e29c:	200001c8 	.word	0x200001c8

0801e2a0 <_kill_r>:
 801e2a0:	b538      	push	{r3, r4, r5, lr}
 801e2a2:	4d07      	ldr	r5, [pc, #28]	; (801e2c0 <_kill_r+0x20>)
 801e2a4:	2300      	movs	r3, #0
 801e2a6:	4604      	mov	r4, r0
 801e2a8:	4608      	mov	r0, r1
 801e2aa:	4611      	mov	r1, r2
 801e2ac:	602b      	str	r3, [r5, #0]
 801e2ae:	f7ec fa86 	bl	800a7be <_kill>
 801e2b2:	1c43      	adds	r3, r0, #1
 801e2b4:	d102      	bne.n	801e2bc <_kill_r+0x1c>
 801e2b6:	682b      	ldr	r3, [r5, #0]
 801e2b8:	b103      	cbz	r3, 801e2bc <_kill_r+0x1c>
 801e2ba:	6023      	str	r3, [r4, #0]
 801e2bc:	bd38      	pop	{r3, r4, r5, pc}
 801e2be:	bf00      	nop
 801e2c0:	200056ac 	.word	0x200056ac

0801e2c4 <_getpid_r>:
 801e2c4:	f7ec ba74 	b.w	800a7b0 <_getpid>

0801e2c8 <pow>:
 801e2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2cc:	4614      	mov	r4, r2
 801e2ce:	461d      	mov	r5, r3
 801e2d0:	4680      	mov	r8, r0
 801e2d2:	4689      	mov	r9, r1
 801e2d4:	f000 f868 	bl	801e3a8 <__ieee754_pow>
 801e2d8:	4622      	mov	r2, r4
 801e2da:	4606      	mov	r6, r0
 801e2dc:	460f      	mov	r7, r1
 801e2de:	462b      	mov	r3, r5
 801e2e0:	4620      	mov	r0, r4
 801e2e2:	4629      	mov	r1, r5
 801e2e4:	f7ea fdfa 	bl	8008edc <__aeabi_dcmpun>
 801e2e8:	bbc8      	cbnz	r0, 801e35e <pow+0x96>
 801e2ea:	2200      	movs	r2, #0
 801e2ec:	2300      	movs	r3, #0
 801e2ee:	4640      	mov	r0, r8
 801e2f0:	4649      	mov	r1, r9
 801e2f2:	f7ea fdc1 	bl	8008e78 <__aeabi_dcmpeq>
 801e2f6:	b1b8      	cbz	r0, 801e328 <pow+0x60>
 801e2f8:	2200      	movs	r2, #0
 801e2fa:	2300      	movs	r3, #0
 801e2fc:	4620      	mov	r0, r4
 801e2fe:	4629      	mov	r1, r5
 801e300:	f7ea fdba 	bl	8008e78 <__aeabi_dcmpeq>
 801e304:	2800      	cmp	r0, #0
 801e306:	d141      	bne.n	801e38c <pow+0xc4>
 801e308:	4620      	mov	r0, r4
 801e30a:	4629      	mov	r1, r5
 801e30c:	f000 f844 	bl	801e398 <finite>
 801e310:	b328      	cbz	r0, 801e35e <pow+0x96>
 801e312:	2200      	movs	r2, #0
 801e314:	2300      	movs	r3, #0
 801e316:	4620      	mov	r0, r4
 801e318:	4629      	mov	r1, r5
 801e31a:	f7ea fdb7 	bl	8008e8c <__aeabi_dcmplt>
 801e31e:	b1f0      	cbz	r0, 801e35e <pow+0x96>
 801e320:	f7fa fb76 	bl	8018a10 <__errno>
 801e324:	2322      	movs	r3, #34	; 0x22
 801e326:	e019      	b.n	801e35c <pow+0x94>
 801e328:	4630      	mov	r0, r6
 801e32a:	4639      	mov	r1, r7
 801e32c:	f000 f834 	bl	801e398 <finite>
 801e330:	b9c8      	cbnz	r0, 801e366 <pow+0x9e>
 801e332:	4640      	mov	r0, r8
 801e334:	4649      	mov	r1, r9
 801e336:	f000 f82f 	bl	801e398 <finite>
 801e33a:	b1a0      	cbz	r0, 801e366 <pow+0x9e>
 801e33c:	4620      	mov	r0, r4
 801e33e:	4629      	mov	r1, r5
 801e340:	f000 f82a 	bl	801e398 <finite>
 801e344:	b178      	cbz	r0, 801e366 <pow+0x9e>
 801e346:	4632      	mov	r2, r6
 801e348:	463b      	mov	r3, r7
 801e34a:	4630      	mov	r0, r6
 801e34c:	4639      	mov	r1, r7
 801e34e:	f7ea fdc5 	bl	8008edc <__aeabi_dcmpun>
 801e352:	2800      	cmp	r0, #0
 801e354:	d0e4      	beq.n	801e320 <pow+0x58>
 801e356:	f7fa fb5b 	bl	8018a10 <__errno>
 801e35a:	2321      	movs	r3, #33	; 0x21
 801e35c:	6003      	str	r3, [r0, #0]
 801e35e:	4630      	mov	r0, r6
 801e360:	4639      	mov	r1, r7
 801e362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e366:	2200      	movs	r2, #0
 801e368:	2300      	movs	r3, #0
 801e36a:	4630      	mov	r0, r6
 801e36c:	4639      	mov	r1, r7
 801e36e:	f7ea fd83 	bl	8008e78 <__aeabi_dcmpeq>
 801e372:	2800      	cmp	r0, #0
 801e374:	d0f3      	beq.n	801e35e <pow+0x96>
 801e376:	4640      	mov	r0, r8
 801e378:	4649      	mov	r1, r9
 801e37a:	f000 f80d 	bl	801e398 <finite>
 801e37e:	2800      	cmp	r0, #0
 801e380:	d0ed      	beq.n	801e35e <pow+0x96>
 801e382:	4620      	mov	r0, r4
 801e384:	4629      	mov	r1, r5
 801e386:	f000 f807 	bl	801e398 <finite>
 801e38a:	e7c8      	b.n	801e31e <pow+0x56>
 801e38c:	4f01      	ldr	r7, [pc, #4]	; (801e394 <pow+0xcc>)
 801e38e:	2600      	movs	r6, #0
 801e390:	e7e5      	b.n	801e35e <pow+0x96>
 801e392:	bf00      	nop
 801e394:	3ff00000 	.word	0x3ff00000

0801e398 <finite>:
 801e398:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 801e39c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801e3a0:	0fc0      	lsrs	r0, r0, #31
 801e3a2:	4770      	bx	lr
 801e3a4:	0000      	movs	r0, r0
	...

0801e3a8 <__ieee754_pow>:
 801e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3ac:	b093      	sub	sp, #76	; 0x4c
 801e3ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e3b2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 801e3b6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801e3ba:	4689      	mov	r9, r1
 801e3bc:	ea56 0102 	orrs.w	r1, r6, r2
 801e3c0:	4680      	mov	r8, r0
 801e3c2:	d111      	bne.n	801e3e8 <__ieee754_pow+0x40>
 801e3c4:	1803      	adds	r3, r0, r0
 801e3c6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 801e3ca:	4152      	adcs	r2, r2
 801e3cc:	4299      	cmp	r1, r3
 801e3ce:	4b82      	ldr	r3, [pc, #520]	; (801e5d8 <__ieee754_pow+0x230>)
 801e3d0:	4193      	sbcs	r3, r2
 801e3d2:	f080 84b5 	bcs.w	801ed40 <__ieee754_pow+0x998>
 801e3d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e3da:	4640      	mov	r0, r8
 801e3dc:	4649      	mov	r1, r9
 801e3de:	f7ea f92d 	bl	800863c <__adddf3>
 801e3e2:	4683      	mov	fp, r0
 801e3e4:	468c      	mov	ip, r1
 801e3e6:	e06f      	b.n	801e4c8 <__ieee754_pow+0x120>
 801e3e8:	4b7c      	ldr	r3, [pc, #496]	; (801e5dc <__ieee754_pow+0x234>)
 801e3ea:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 801e3ee:	429c      	cmp	r4, r3
 801e3f0:	464d      	mov	r5, r9
 801e3f2:	4682      	mov	sl, r0
 801e3f4:	dc06      	bgt.n	801e404 <__ieee754_pow+0x5c>
 801e3f6:	d101      	bne.n	801e3fc <__ieee754_pow+0x54>
 801e3f8:	2800      	cmp	r0, #0
 801e3fa:	d1ec      	bne.n	801e3d6 <__ieee754_pow+0x2e>
 801e3fc:	429e      	cmp	r6, r3
 801e3fe:	dc01      	bgt.n	801e404 <__ieee754_pow+0x5c>
 801e400:	d10f      	bne.n	801e422 <__ieee754_pow+0x7a>
 801e402:	b172      	cbz	r2, 801e422 <__ieee754_pow+0x7a>
 801e404:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801e408:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801e40c:	ea55 050a 	orrs.w	r5, r5, sl
 801e410:	d1e1      	bne.n	801e3d6 <__ieee754_pow+0x2e>
 801e412:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801e416:	18db      	adds	r3, r3, r3
 801e418:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801e41c:	4152      	adcs	r2, r2
 801e41e:	429d      	cmp	r5, r3
 801e420:	e7d5      	b.n	801e3ce <__ieee754_pow+0x26>
 801e422:	2d00      	cmp	r5, #0
 801e424:	da39      	bge.n	801e49a <__ieee754_pow+0xf2>
 801e426:	4b6e      	ldr	r3, [pc, #440]	; (801e5e0 <__ieee754_pow+0x238>)
 801e428:	429e      	cmp	r6, r3
 801e42a:	dc52      	bgt.n	801e4d2 <__ieee754_pow+0x12a>
 801e42c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e430:	429e      	cmp	r6, r3
 801e432:	f340 8498 	ble.w	801ed66 <__ieee754_pow+0x9be>
 801e436:	1533      	asrs	r3, r6, #20
 801e438:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e43c:	2b14      	cmp	r3, #20
 801e43e:	dd0f      	ble.n	801e460 <__ieee754_pow+0xb8>
 801e440:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e444:	fa22 f103 	lsr.w	r1, r2, r3
 801e448:	fa01 f303 	lsl.w	r3, r1, r3
 801e44c:	4293      	cmp	r3, r2
 801e44e:	f040 848a 	bne.w	801ed66 <__ieee754_pow+0x9be>
 801e452:	f001 0101 	and.w	r1, r1, #1
 801e456:	f1c1 0302 	rsb	r3, r1, #2
 801e45a:	9300      	str	r3, [sp, #0]
 801e45c:	b182      	cbz	r2, 801e480 <__ieee754_pow+0xd8>
 801e45e:	e05d      	b.n	801e51c <__ieee754_pow+0x174>
 801e460:	2a00      	cmp	r2, #0
 801e462:	d159      	bne.n	801e518 <__ieee754_pow+0x170>
 801e464:	f1c3 0314 	rsb	r3, r3, #20
 801e468:	fa46 f103 	asr.w	r1, r6, r3
 801e46c:	fa01 f303 	lsl.w	r3, r1, r3
 801e470:	42b3      	cmp	r3, r6
 801e472:	f040 8475 	bne.w	801ed60 <__ieee754_pow+0x9b8>
 801e476:	f001 0101 	and.w	r1, r1, #1
 801e47a:	f1c1 0302 	rsb	r3, r1, #2
 801e47e:	9300      	str	r3, [sp, #0]
 801e480:	4b58      	ldr	r3, [pc, #352]	; (801e5e4 <__ieee754_pow+0x23c>)
 801e482:	429e      	cmp	r6, r3
 801e484:	d132      	bne.n	801e4ec <__ieee754_pow+0x144>
 801e486:	2f00      	cmp	r7, #0
 801e488:	f280 8466 	bge.w	801ed58 <__ieee754_pow+0x9b0>
 801e48c:	4955      	ldr	r1, [pc, #340]	; (801e5e4 <__ieee754_pow+0x23c>)
 801e48e:	4642      	mov	r2, r8
 801e490:	464b      	mov	r3, r9
 801e492:	2000      	movs	r0, #0
 801e494:	f7ea fbb2 	bl	8008bfc <__aeabi_ddiv>
 801e498:	e7a3      	b.n	801e3e2 <__ieee754_pow+0x3a>
 801e49a:	2300      	movs	r3, #0
 801e49c:	9300      	str	r3, [sp, #0]
 801e49e:	2a00      	cmp	r2, #0
 801e4a0:	d13c      	bne.n	801e51c <__ieee754_pow+0x174>
 801e4a2:	4b4e      	ldr	r3, [pc, #312]	; (801e5dc <__ieee754_pow+0x234>)
 801e4a4:	429e      	cmp	r6, r3
 801e4a6:	d1eb      	bne.n	801e480 <__ieee754_pow+0xd8>
 801e4a8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e4ac:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e4b0:	ea53 030a 	orrs.w	r3, r3, sl
 801e4b4:	f000 8444 	beq.w	801ed40 <__ieee754_pow+0x998>
 801e4b8:	4b4b      	ldr	r3, [pc, #300]	; (801e5e8 <__ieee754_pow+0x240>)
 801e4ba:	429c      	cmp	r4, r3
 801e4bc:	dd0b      	ble.n	801e4d6 <__ieee754_pow+0x12e>
 801e4be:	2f00      	cmp	r7, #0
 801e4c0:	f2c0 8444 	blt.w	801ed4c <__ieee754_pow+0x9a4>
 801e4c4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 801e4c8:	4658      	mov	r0, fp
 801e4ca:	4661      	mov	r1, ip
 801e4cc:	b013      	add	sp, #76	; 0x4c
 801e4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4d2:	2302      	movs	r3, #2
 801e4d4:	e7e2      	b.n	801e49c <__ieee754_pow+0xf4>
 801e4d6:	2f00      	cmp	r7, #0
 801e4d8:	f04f 0b00 	mov.w	fp, #0
 801e4dc:	f04f 0c00 	mov.w	ip, #0
 801e4e0:	daf2      	bge.n	801e4c8 <__ieee754_pow+0x120>
 801e4e2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801e4e6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 801e4ea:	e7ed      	b.n	801e4c8 <__ieee754_pow+0x120>
 801e4ec:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801e4f0:	d106      	bne.n	801e500 <__ieee754_pow+0x158>
 801e4f2:	4642      	mov	r2, r8
 801e4f4:	464b      	mov	r3, r9
 801e4f6:	4640      	mov	r0, r8
 801e4f8:	4649      	mov	r1, r9
 801e4fa:	f7ea fa55 	bl	80089a8 <__aeabi_dmul>
 801e4fe:	e770      	b.n	801e3e2 <__ieee754_pow+0x3a>
 801e500:	4b3a      	ldr	r3, [pc, #232]	; (801e5ec <__ieee754_pow+0x244>)
 801e502:	429f      	cmp	r7, r3
 801e504:	d10a      	bne.n	801e51c <__ieee754_pow+0x174>
 801e506:	2d00      	cmp	r5, #0
 801e508:	db08      	blt.n	801e51c <__ieee754_pow+0x174>
 801e50a:	4640      	mov	r0, r8
 801e50c:	4649      	mov	r1, r9
 801e50e:	b013      	add	sp, #76	; 0x4c
 801e510:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e514:	f000 bd06 	b.w	801ef24 <__ieee754_sqrt>
 801e518:	2300      	movs	r3, #0
 801e51a:	9300      	str	r3, [sp, #0]
 801e51c:	4640      	mov	r0, r8
 801e51e:	4649      	mov	r1, r9
 801e520:	f000 fc54 	bl	801edcc <fabs>
 801e524:	4683      	mov	fp, r0
 801e526:	468c      	mov	ip, r1
 801e528:	f1ba 0f00 	cmp.w	sl, #0
 801e52c:	d128      	bne.n	801e580 <__ieee754_pow+0x1d8>
 801e52e:	b124      	cbz	r4, 801e53a <__ieee754_pow+0x192>
 801e530:	4b2c      	ldr	r3, [pc, #176]	; (801e5e4 <__ieee754_pow+0x23c>)
 801e532:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801e536:	429a      	cmp	r2, r3
 801e538:	d122      	bne.n	801e580 <__ieee754_pow+0x1d8>
 801e53a:	2f00      	cmp	r7, #0
 801e53c:	da07      	bge.n	801e54e <__ieee754_pow+0x1a6>
 801e53e:	465a      	mov	r2, fp
 801e540:	4663      	mov	r3, ip
 801e542:	4928      	ldr	r1, [pc, #160]	; (801e5e4 <__ieee754_pow+0x23c>)
 801e544:	2000      	movs	r0, #0
 801e546:	f7ea fb59 	bl	8008bfc <__aeabi_ddiv>
 801e54a:	4683      	mov	fp, r0
 801e54c:	468c      	mov	ip, r1
 801e54e:	2d00      	cmp	r5, #0
 801e550:	daba      	bge.n	801e4c8 <__ieee754_pow+0x120>
 801e552:	9b00      	ldr	r3, [sp, #0]
 801e554:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e558:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e55c:	431c      	orrs	r4, r3
 801e55e:	d108      	bne.n	801e572 <__ieee754_pow+0x1ca>
 801e560:	465a      	mov	r2, fp
 801e562:	4663      	mov	r3, ip
 801e564:	4658      	mov	r0, fp
 801e566:	4661      	mov	r1, ip
 801e568:	f7ea f866 	bl	8008638 <__aeabi_dsub>
 801e56c:	4602      	mov	r2, r0
 801e56e:	460b      	mov	r3, r1
 801e570:	e790      	b.n	801e494 <__ieee754_pow+0xec>
 801e572:	9b00      	ldr	r3, [sp, #0]
 801e574:	2b01      	cmp	r3, #1
 801e576:	d1a7      	bne.n	801e4c8 <__ieee754_pow+0x120>
 801e578:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 801e57c:	469c      	mov	ip, r3
 801e57e:	e7a3      	b.n	801e4c8 <__ieee754_pow+0x120>
 801e580:	0feb      	lsrs	r3, r5, #31
 801e582:	3b01      	subs	r3, #1
 801e584:	930c      	str	r3, [sp, #48]	; 0x30
 801e586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e588:	9b00      	ldr	r3, [sp, #0]
 801e58a:	4313      	orrs	r3, r2
 801e58c:	d104      	bne.n	801e598 <__ieee754_pow+0x1f0>
 801e58e:	4642      	mov	r2, r8
 801e590:	464b      	mov	r3, r9
 801e592:	4640      	mov	r0, r8
 801e594:	4649      	mov	r1, r9
 801e596:	e7e7      	b.n	801e568 <__ieee754_pow+0x1c0>
 801e598:	4b15      	ldr	r3, [pc, #84]	; (801e5f0 <__ieee754_pow+0x248>)
 801e59a:	429e      	cmp	r6, r3
 801e59c:	f340 80f2 	ble.w	801e784 <__ieee754_pow+0x3dc>
 801e5a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e5a4:	429e      	cmp	r6, r3
 801e5a6:	4b10      	ldr	r3, [pc, #64]	; (801e5e8 <__ieee754_pow+0x240>)
 801e5a8:	dd09      	ble.n	801e5be <__ieee754_pow+0x216>
 801e5aa:	429c      	cmp	r4, r3
 801e5ac:	dc0c      	bgt.n	801e5c8 <__ieee754_pow+0x220>
 801e5ae:	2f00      	cmp	r7, #0
 801e5b0:	da0c      	bge.n	801e5cc <__ieee754_pow+0x224>
 801e5b2:	2000      	movs	r0, #0
 801e5b4:	b013      	add	sp, #76	; 0x4c
 801e5b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ba:	f000 bcae 	b.w	801ef1a <__math_oflow>
 801e5be:	429c      	cmp	r4, r3
 801e5c0:	dbf5      	blt.n	801e5ae <__ieee754_pow+0x206>
 801e5c2:	4b08      	ldr	r3, [pc, #32]	; (801e5e4 <__ieee754_pow+0x23c>)
 801e5c4:	429c      	cmp	r4, r3
 801e5c6:	dd15      	ble.n	801e5f4 <__ieee754_pow+0x24c>
 801e5c8:	2f00      	cmp	r7, #0
 801e5ca:	dcf2      	bgt.n	801e5b2 <__ieee754_pow+0x20a>
 801e5cc:	2000      	movs	r0, #0
 801e5ce:	b013      	add	sp, #76	; 0x4c
 801e5d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5d4:	f000 bc9c 	b.w	801ef10 <__math_uflow>
 801e5d8:	fff00000 	.word	0xfff00000
 801e5dc:	7ff00000 	.word	0x7ff00000
 801e5e0:	433fffff 	.word	0x433fffff
 801e5e4:	3ff00000 	.word	0x3ff00000
 801e5e8:	3fefffff 	.word	0x3fefffff
 801e5ec:	3fe00000 	.word	0x3fe00000
 801e5f0:	41e00000 	.word	0x41e00000
 801e5f4:	4661      	mov	r1, ip
 801e5f6:	4b5e      	ldr	r3, [pc, #376]	; (801e770 <__ieee754_pow+0x3c8>)
 801e5f8:	2200      	movs	r2, #0
 801e5fa:	4658      	mov	r0, fp
 801e5fc:	f7ea f81c 	bl	8008638 <__aeabi_dsub>
 801e600:	a353      	add	r3, pc, #332	; (adr r3, 801e750 <__ieee754_pow+0x3a8>)
 801e602:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e606:	4604      	mov	r4, r0
 801e608:	460d      	mov	r5, r1
 801e60a:	f7ea f9cd 	bl	80089a8 <__aeabi_dmul>
 801e60e:	a352      	add	r3, pc, #328	; (adr r3, 801e758 <__ieee754_pow+0x3b0>)
 801e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e614:	4606      	mov	r6, r0
 801e616:	460f      	mov	r7, r1
 801e618:	4620      	mov	r0, r4
 801e61a:	4629      	mov	r1, r5
 801e61c:	f7ea f9c4 	bl	80089a8 <__aeabi_dmul>
 801e620:	4b54      	ldr	r3, [pc, #336]	; (801e774 <__ieee754_pow+0x3cc>)
 801e622:	4682      	mov	sl, r0
 801e624:	468b      	mov	fp, r1
 801e626:	2200      	movs	r2, #0
 801e628:	4620      	mov	r0, r4
 801e62a:	4629      	mov	r1, r5
 801e62c:	f7ea f9bc 	bl	80089a8 <__aeabi_dmul>
 801e630:	4602      	mov	r2, r0
 801e632:	460b      	mov	r3, r1
 801e634:	a14a      	add	r1, pc, #296	; (adr r1, 801e760 <__ieee754_pow+0x3b8>)
 801e636:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e63a:	f7e9 fffd 	bl	8008638 <__aeabi_dsub>
 801e63e:	4622      	mov	r2, r4
 801e640:	462b      	mov	r3, r5
 801e642:	f7ea f9b1 	bl	80089a8 <__aeabi_dmul>
 801e646:	4602      	mov	r2, r0
 801e648:	460b      	mov	r3, r1
 801e64a:	2000      	movs	r0, #0
 801e64c:	494a      	ldr	r1, [pc, #296]	; (801e778 <__ieee754_pow+0x3d0>)
 801e64e:	f7e9 fff3 	bl	8008638 <__aeabi_dsub>
 801e652:	4622      	mov	r2, r4
 801e654:	462b      	mov	r3, r5
 801e656:	4680      	mov	r8, r0
 801e658:	4689      	mov	r9, r1
 801e65a:	4620      	mov	r0, r4
 801e65c:	4629      	mov	r1, r5
 801e65e:	f7ea f9a3 	bl	80089a8 <__aeabi_dmul>
 801e662:	4602      	mov	r2, r0
 801e664:	460b      	mov	r3, r1
 801e666:	4640      	mov	r0, r8
 801e668:	4649      	mov	r1, r9
 801e66a:	f7ea f99d 	bl	80089a8 <__aeabi_dmul>
 801e66e:	a33e      	add	r3, pc, #248	; (adr r3, 801e768 <__ieee754_pow+0x3c0>)
 801e670:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e674:	f7ea f998 	bl	80089a8 <__aeabi_dmul>
 801e678:	4602      	mov	r2, r0
 801e67a:	460b      	mov	r3, r1
 801e67c:	4650      	mov	r0, sl
 801e67e:	4659      	mov	r1, fp
 801e680:	f7e9 ffda 	bl	8008638 <__aeabi_dsub>
 801e684:	4602      	mov	r2, r0
 801e686:	460b      	mov	r3, r1
 801e688:	4604      	mov	r4, r0
 801e68a:	460d      	mov	r5, r1
 801e68c:	4630      	mov	r0, r6
 801e68e:	4639      	mov	r1, r7
 801e690:	f7e9 ffd4 	bl	800863c <__adddf3>
 801e694:	2000      	movs	r0, #0
 801e696:	4632      	mov	r2, r6
 801e698:	463b      	mov	r3, r7
 801e69a:	4682      	mov	sl, r0
 801e69c:	468b      	mov	fp, r1
 801e69e:	f7e9 ffcb 	bl	8008638 <__aeabi_dsub>
 801e6a2:	4602      	mov	r2, r0
 801e6a4:	460b      	mov	r3, r1
 801e6a6:	4620      	mov	r0, r4
 801e6a8:	4629      	mov	r1, r5
 801e6aa:	f7e9 ffc5 	bl	8008638 <__aeabi_dsub>
 801e6ae:	9b00      	ldr	r3, [sp, #0]
 801e6b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e6b2:	3b01      	subs	r3, #1
 801e6b4:	4313      	orrs	r3, r2
 801e6b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e6ba:	bf0c      	ite	eq
 801e6bc:	4b2f      	ldreq	r3, [pc, #188]	; (801e77c <__ieee754_pow+0x3d4>)
 801e6be:	4b2c      	ldrne	r3, [pc, #176]	; (801e770 <__ieee754_pow+0x3c8>)
 801e6c0:	2600      	movs	r6, #0
 801e6c2:	2200      	movs	r2, #0
 801e6c4:	e9cd 2300 	strd	r2, r3, [sp]
 801e6c8:	4604      	mov	r4, r0
 801e6ca:	460d      	mov	r5, r1
 801e6cc:	4632      	mov	r2, r6
 801e6ce:	463b      	mov	r3, r7
 801e6d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e6d4:	f7e9 ffb0 	bl	8008638 <__aeabi_dsub>
 801e6d8:	4652      	mov	r2, sl
 801e6da:	465b      	mov	r3, fp
 801e6dc:	f7ea f964 	bl	80089a8 <__aeabi_dmul>
 801e6e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e6e4:	4680      	mov	r8, r0
 801e6e6:	4689      	mov	r9, r1
 801e6e8:	4620      	mov	r0, r4
 801e6ea:	4629      	mov	r1, r5
 801e6ec:	f7ea f95c 	bl	80089a8 <__aeabi_dmul>
 801e6f0:	4602      	mov	r2, r0
 801e6f2:	460b      	mov	r3, r1
 801e6f4:	4640      	mov	r0, r8
 801e6f6:	4649      	mov	r1, r9
 801e6f8:	f7e9 ffa0 	bl	800863c <__adddf3>
 801e6fc:	4632      	mov	r2, r6
 801e6fe:	463b      	mov	r3, r7
 801e700:	4680      	mov	r8, r0
 801e702:	4689      	mov	r9, r1
 801e704:	4650      	mov	r0, sl
 801e706:	4659      	mov	r1, fp
 801e708:	f7ea f94e 	bl	80089a8 <__aeabi_dmul>
 801e70c:	460b      	mov	r3, r1
 801e70e:	4604      	mov	r4, r0
 801e710:	460d      	mov	r5, r1
 801e712:	4602      	mov	r2, r0
 801e714:	4649      	mov	r1, r9
 801e716:	4640      	mov	r0, r8
 801e718:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801e71c:	f7e9 ff8e 	bl	800863c <__adddf3>
 801e720:	4b17      	ldr	r3, [pc, #92]	; (801e780 <__ieee754_pow+0x3d8>)
 801e722:	4299      	cmp	r1, r3
 801e724:	4682      	mov	sl, r0
 801e726:	460f      	mov	r7, r1
 801e728:	460e      	mov	r6, r1
 801e72a:	f340 82e4 	ble.w	801ecf6 <__ieee754_pow+0x94e>
 801e72e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e732:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e736:	4303      	orrs	r3, r0
 801e738:	f000 81e0 	beq.w	801eafc <__ieee754_pow+0x754>
 801e73c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e740:	2200      	movs	r2, #0
 801e742:	2300      	movs	r3, #0
 801e744:	f7ea fba2 	bl	8008e8c <__aeabi_dcmplt>
 801e748:	3800      	subs	r0, #0
 801e74a:	bf18      	it	ne
 801e74c:	2001      	movne	r0, #1
 801e74e:	e731      	b.n	801e5b4 <__ieee754_pow+0x20c>
 801e750:	60000000 	.word	0x60000000
 801e754:	3ff71547 	.word	0x3ff71547
 801e758:	f85ddf44 	.word	0xf85ddf44
 801e75c:	3e54ae0b 	.word	0x3e54ae0b
 801e760:	55555555 	.word	0x55555555
 801e764:	3fd55555 	.word	0x3fd55555
 801e768:	652b82fe 	.word	0x652b82fe
 801e76c:	3ff71547 	.word	0x3ff71547
 801e770:	3ff00000 	.word	0x3ff00000
 801e774:	3fd00000 	.word	0x3fd00000
 801e778:	3fe00000 	.word	0x3fe00000
 801e77c:	bff00000 	.word	0xbff00000
 801e780:	408fffff 	.word	0x408fffff
 801e784:	4bd4      	ldr	r3, [pc, #848]	; (801ead8 <__ieee754_pow+0x730>)
 801e786:	402b      	ands	r3, r5
 801e788:	2200      	movs	r2, #0
 801e78a:	b943      	cbnz	r3, 801e79e <__ieee754_pow+0x3f6>
 801e78c:	4658      	mov	r0, fp
 801e78e:	4bd3      	ldr	r3, [pc, #844]	; (801eadc <__ieee754_pow+0x734>)
 801e790:	4661      	mov	r1, ip
 801e792:	f7ea f909 	bl	80089a8 <__aeabi_dmul>
 801e796:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e79a:	4683      	mov	fp, r0
 801e79c:	460c      	mov	r4, r1
 801e79e:	1523      	asrs	r3, r4, #20
 801e7a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e7a4:	4413      	add	r3, r2
 801e7a6:	930b      	str	r3, [sp, #44]	; 0x2c
 801e7a8:	4bcd      	ldr	r3, [pc, #820]	; (801eae0 <__ieee754_pow+0x738>)
 801e7aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e7ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e7b2:	429c      	cmp	r4, r3
 801e7b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e7b8:	dd08      	ble.n	801e7cc <__ieee754_pow+0x424>
 801e7ba:	4bca      	ldr	r3, [pc, #808]	; (801eae4 <__ieee754_pow+0x73c>)
 801e7bc:	429c      	cmp	r4, r3
 801e7be:	f340 8164 	ble.w	801ea8a <__ieee754_pow+0x6e2>
 801e7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7c4:	3301      	adds	r3, #1
 801e7c6:	930b      	str	r3, [sp, #44]	; 0x2c
 801e7c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e7cc:	2600      	movs	r6, #0
 801e7ce:	00f3      	lsls	r3, r6, #3
 801e7d0:	930d      	str	r3, [sp, #52]	; 0x34
 801e7d2:	4bc5      	ldr	r3, [pc, #788]	; (801eae8 <__ieee754_pow+0x740>)
 801e7d4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801e7d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e7dc:	4658      	mov	r0, fp
 801e7de:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801e7e2:	461a      	mov	r2, r3
 801e7e4:	4629      	mov	r1, r5
 801e7e6:	4623      	mov	r3, r4
 801e7e8:	f7e9 ff26 	bl	8008638 <__aeabi_dsub>
 801e7ec:	46da      	mov	sl, fp
 801e7ee:	4652      	mov	r2, sl
 801e7f0:	462b      	mov	r3, r5
 801e7f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801e7f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801e7fa:	f7e9 ff1f 	bl	800863c <__adddf3>
 801e7fe:	4602      	mov	r2, r0
 801e800:	460b      	mov	r3, r1
 801e802:	2000      	movs	r0, #0
 801e804:	49b9      	ldr	r1, [pc, #740]	; (801eaec <__ieee754_pow+0x744>)
 801e806:	f7ea f9f9 	bl	8008bfc <__aeabi_ddiv>
 801e80a:	4602      	mov	r2, r0
 801e80c:	460b      	mov	r3, r1
 801e80e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801e812:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e816:	f7ea f8c7 	bl	80089a8 <__aeabi_dmul>
 801e81a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e81e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801e822:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801e826:	2300      	movs	r3, #0
 801e828:	9304      	str	r3, [sp, #16]
 801e82a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801e82e:	46ab      	mov	fp, r5
 801e830:	106d      	asrs	r5, r5, #1
 801e832:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e836:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e83a:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 801e83e:	2200      	movs	r2, #0
 801e840:	4640      	mov	r0, r8
 801e842:	4649      	mov	r1, r9
 801e844:	4614      	mov	r4, r2
 801e846:	461d      	mov	r5, r3
 801e848:	f7ea f8ae 	bl	80089a8 <__aeabi_dmul>
 801e84c:	4602      	mov	r2, r0
 801e84e:	460b      	mov	r3, r1
 801e850:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e854:	f7e9 fef0 	bl	8008638 <__aeabi_dsub>
 801e858:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e85c:	4606      	mov	r6, r0
 801e85e:	460f      	mov	r7, r1
 801e860:	4620      	mov	r0, r4
 801e862:	4629      	mov	r1, r5
 801e864:	f7e9 fee8 	bl	8008638 <__aeabi_dsub>
 801e868:	4602      	mov	r2, r0
 801e86a:	460b      	mov	r3, r1
 801e86c:	4650      	mov	r0, sl
 801e86e:	4659      	mov	r1, fp
 801e870:	f7e9 fee2 	bl	8008638 <__aeabi_dsub>
 801e874:	4642      	mov	r2, r8
 801e876:	464b      	mov	r3, r9
 801e878:	f7ea f896 	bl	80089a8 <__aeabi_dmul>
 801e87c:	4602      	mov	r2, r0
 801e87e:	460b      	mov	r3, r1
 801e880:	4630      	mov	r0, r6
 801e882:	4639      	mov	r1, r7
 801e884:	f7e9 fed8 	bl	8008638 <__aeabi_dsub>
 801e888:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e88c:	f7ea f88c 	bl	80089a8 <__aeabi_dmul>
 801e890:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e894:	4682      	mov	sl, r0
 801e896:	468b      	mov	fp, r1
 801e898:	4610      	mov	r0, r2
 801e89a:	4619      	mov	r1, r3
 801e89c:	f7ea f884 	bl	80089a8 <__aeabi_dmul>
 801e8a0:	a37b      	add	r3, pc, #492	; (adr r3, 801ea90 <__ieee754_pow+0x6e8>)
 801e8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8a6:	4604      	mov	r4, r0
 801e8a8:	460d      	mov	r5, r1
 801e8aa:	f7ea f87d 	bl	80089a8 <__aeabi_dmul>
 801e8ae:	a37a      	add	r3, pc, #488	; (adr r3, 801ea98 <__ieee754_pow+0x6f0>)
 801e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8b4:	f7e9 fec2 	bl	800863c <__adddf3>
 801e8b8:	4622      	mov	r2, r4
 801e8ba:	462b      	mov	r3, r5
 801e8bc:	f7ea f874 	bl	80089a8 <__aeabi_dmul>
 801e8c0:	a377      	add	r3, pc, #476	; (adr r3, 801eaa0 <__ieee754_pow+0x6f8>)
 801e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8c6:	f7e9 feb9 	bl	800863c <__adddf3>
 801e8ca:	4622      	mov	r2, r4
 801e8cc:	462b      	mov	r3, r5
 801e8ce:	f7ea f86b 	bl	80089a8 <__aeabi_dmul>
 801e8d2:	a375      	add	r3, pc, #468	; (adr r3, 801eaa8 <__ieee754_pow+0x700>)
 801e8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8d8:	f7e9 feb0 	bl	800863c <__adddf3>
 801e8dc:	4622      	mov	r2, r4
 801e8de:	462b      	mov	r3, r5
 801e8e0:	f7ea f862 	bl	80089a8 <__aeabi_dmul>
 801e8e4:	a372      	add	r3, pc, #456	; (adr r3, 801eab0 <__ieee754_pow+0x708>)
 801e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ea:	f7e9 fea7 	bl	800863c <__adddf3>
 801e8ee:	4622      	mov	r2, r4
 801e8f0:	462b      	mov	r3, r5
 801e8f2:	f7ea f859 	bl	80089a8 <__aeabi_dmul>
 801e8f6:	a370      	add	r3, pc, #448	; (adr r3, 801eab8 <__ieee754_pow+0x710>)
 801e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8fc:	f7e9 fe9e 	bl	800863c <__adddf3>
 801e900:	4622      	mov	r2, r4
 801e902:	4606      	mov	r6, r0
 801e904:	460f      	mov	r7, r1
 801e906:	462b      	mov	r3, r5
 801e908:	4620      	mov	r0, r4
 801e90a:	4629      	mov	r1, r5
 801e90c:	f7ea f84c 	bl	80089a8 <__aeabi_dmul>
 801e910:	4602      	mov	r2, r0
 801e912:	460b      	mov	r3, r1
 801e914:	4630      	mov	r0, r6
 801e916:	4639      	mov	r1, r7
 801e918:	f7ea f846 	bl	80089a8 <__aeabi_dmul>
 801e91c:	4642      	mov	r2, r8
 801e91e:	4604      	mov	r4, r0
 801e920:	460d      	mov	r5, r1
 801e922:	464b      	mov	r3, r9
 801e924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e928:	f7e9 fe88 	bl	800863c <__adddf3>
 801e92c:	4652      	mov	r2, sl
 801e92e:	465b      	mov	r3, fp
 801e930:	f7ea f83a 	bl	80089a8 <__aeabi_dmul>
 801e934:	4622      	mov	r2, r4
 801e936:	462b      	mov	r3, r5
 801e938:	f7e9 fe80 	bl	800863c <__adddf3>
 801e93c:	4642      	mov	r2, r8
 801e93e:	4606      	mov	r6, r0
 801e940:	460f      	mov	r7, r1
 801e942:	464b      	mov	r3, r9
 801e944:	4640      	mov	r0, r8
 801e946:	4649      	mov	r1, r9
 801e948:	f7ea f82e 	bl	80089a8 <__aeabi_dmul>
 801e94c:	4602      	mov	r2, r0
 801e94e:	460b      	mov	r3, r1
 801e950:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e954:	4b66      	ldr	r3, [pc, #408]	; (801eaf0 <__ieee754_pow+0x748>)
 801e956:	2200      	movs	r2, #0
 801e958:	f7e9 fe70 	bl	800863c <__adddf3>
 801e95c:	4632      	mov	r2, r6
 801e95e:	463b      	mov	r3, r7
 801e960:	f7e9 fe6c 	bl	800863c <__adddf3>
 801e964:	2400      	movs	r4, #0
 801e966:	460d      	mov	r5, r1
 801e968:	4622      	mov	r2, r4
 801e96a:	460b      	mov	r3, r1
 801e96c:	4640      	mov	r0, r8
 801e96e:	4649      	mov	r1, r9
 801e970:	f7ea f81a 	bl	80089a8 <__aeabi_dmul>
 801e974:	4b5e      	ldr	r3, [pc, #376]	; (801eaf0 <__ieee754_pow+0x748>)
 801e976:	4680      	mov	r8, r0
 801e978:	4689      	mov	r9, r1
 801e97a:	2200      	movs	r2, #0
 801e97c:	4620      	mov	r0, r4
 801e97e:	4629      	mov	r1, r5
 801e980:	f7e9 fe5a 	bl	8008638 <__aeabi_dsub>
 801e984:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e988:	f7e9 fe56 	bl	8008638 <__aeabi_dsub>
 801e98c:	4602      	mov	r2, r0
 801e98e:	460b      	mov	r3, r1
 801e990:	4630      	mov	r0, r6
 801e992:	4639      	mov	r1, r7
 801e994:	f7e9 fe50 	bl	8008638 <__aeabi_dsub>
 801e998:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e99c:	f7ea f804 	bl	80089a8 <__aeabi_dmul>
 801e9a0:	4622      	mov	r2, r4
 801e9a2:	4606      	mov	r6, r0
 801e9a4:	460f      	mov	r7, r1
 801e9a6:	462b      	mov	r3, r5
 801e9a8:	4650      	mov	r0, sl
 801e9aa:	4659      	mov	r1, fp
 801e9ac:	f7e9 fffc 	bl	80089a8 <__aeabi_dmul>
 801e9b0:	4602      	mov	r2, r0
 801e9b2:	460b      	mov	r3, r1
 801e9b4:	4630      	mov	r0, r6
 801e9b6:	4639      	mov	r1, r7
 801e9b8:	f7e9 fe40 	bl	800863c <__adddf3>
 801e9bc:	4606      	mov	r6, r0
 801e9be:	460f      	mov	r7, r1
 801e9c0:	4602      	mov	r2, r0
 801e9c2:	460b      	mov	r3, r1
 801e9c4:	4640      	mov	r0, r8
 801e9c6:	4649      	mov	r1, r9
 801e9c8:	f7e9 fe38 	bl	800863c <__adddf3>
 801e9cc:	2400      	movs	r4, #0
 801e9ce:	a33c      	add	r3, pc, #240	; (adr r3, 801eac0 <__ieee754_pow+0x718>)
 801e9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9d4:	4620      	mov	r0, r4
 801e9d6:	460d      	mov	r5, r1
 801e9d8:	f7e9 ffe6 	bl	80089a8 <__aeabi_dmul>
 801e9dc:	4642      	mov	r2, r8
 801e9de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e9e2:	464b      	mov	r3, r9
 801e9e4:	4620      	mov	r0, r4
 801e9e6:	4629      	mov	r1, r5
 801e9e8:	f7e9 fe26 	bl	8008638 <__aeabi_dsub>
 801e9ec:	4602      	mov	r2, r0
 801e9ee:	460b      	mov	r3, r1
 801e9f0:	4630      	mov	r0, r6
 801e9f2:	4639      	mov	r1, r7
 801e9f4:	f7e9 fe20 	bl	8008638 <__aeabi_dsub>
 801e9f8:	a333      	add	r3, pc, #204	; (adr r3, 801eac8 <__ieee754_pow+0x720>)
 801e9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9fe:	f7e9 ffd3 	bl	80089a8 <__aeabi_dmul>
 801ea02:	a333      	add	r3, pc, #204	; (adr r3, 801ead0 <__ieee754_pow+0x728>)
 801ea04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea08:	4606      	mov	r6, r0
 801ea0a:	460f      	mov	r7, r1
 801ea0c:	4620      	mov	r0, r4
 801ea0e:	4629      	mov	r1, r5
 801ea10:	f7e9 ffca 	bl	80089a8 <__aeabi_dmul>
 801ea14:	4602      	mov	r2, r0
 801ea16:	460b      	mov	r3, r1
 801ea18:	4630      	mov	r0, r6
 801ea1a:	4639      	mov	r1, r7
 801ea1c:	f7e9 fe0e 	bl	800863c <__adddf3>
 801ea20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ea22:	4b34      	ldr	r3, [pc, #208]	; (801eaf4 <__ieee754_pow+0x74c>)
 801ea24:	4413      	add	r3, r2
 801ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea2a:	f7e9 fe07 	bl	800863c <__adddf3>
 801ea2e:	4680      	mov	r8, r0
 801ea30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ea32:	4689      	mov	r9, r1
 801ea34:	f7e9 ff4e 	bl	80088d4 <__aeabi_i2d>
 801ea38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ea3a:	4b2f      	ldr	r3, [pc, #188]	; (801eaf8 <__ieee754_pow+0x750>)
 801ea3c:	4413      	add	r3, r2
 801ea3e:	e9d3 6700 	ldrd	r6, r7, [r3]
 801ea42:	4604      	mov	r4, r0
 801ea44:	460d      	mov	r5, r1
 801ea46:	4642      	mov	r2, r8
 801ea48:	464b      	mov	r3, r9
 801ea4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ea4e:	f7e9 fdf5 	bl	800863c <__adddf3>
 801ea52:	4632      	mov	r2, r6
 801ea54:	463b      	mov	r3, r7
 801ea56:	f7e9 fdf1 	bl	800863c <__adddf3>
 801ea5a:	4622      	mov	r2, r4
 801ea5c:	462b      	mov	r3, r5
 801ea5e:	f7e9 fded 	bl	800863c <__adddf3>
 801ea62:	2000      	movs	r0, #0
 801ea64:	4622      	mov	r2, r4
 801ea66:	462b      	mov	r3, r5
 801ea68:	4682      	mov	sl, r0
 801ea6a:	468b      	mov	fp, r1
 801ea6c:	f7e9 fde4 	bl	8008638 <__aeabi_dsub>
 801ea70:	4632      	mov	r2, r6
 801ea72:	463b      	mov	r3, r7
 801ea74:	f7e9 fde0 	bl	8008638 <__aeabi_dsub>
 801ea78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ea7c:	f7e9 fddc 	bl	8008638 <__aeabi_dsub>
 801ea80:	4602      	mov	r2, r0
 801ea82:	460b      	mov	r3, r1
 801ea84:	4640      	mov	r0, r8
 801ea86:	4649      	mov	r1, r9
 801ea88:	e60f      	b.n	801e6aa <__ieee754_pow+0x302>
 801ea8a:	2601      	movs	r6, #1
 801ea8c:	e69f      	b.n	801e7ce <__ieee754_pow+0x426>
 801ea8e:	bf00      	nop
 801ea90:	4a454eef 	.word	0x4a454eef
 801ea94:	3fca7e28 	.word	0x3fca7e28
 801ea98:	93c9db65 	.word	0x93c9db65
 801ea9c:	3fcd864a 	.word	0x3fcd864a
 801eaa0:	a91d4101 	.word	0xa91d4101
 801eaa4:	3fd17460 	.word	0x3fd17460
 801eaa8:	518f264d 	.word	0x518f264d
 801eaac:	3fd55555 	.word	0x3fd55555
 801eab0:	db6fabff 	.word	0xdb6fabff
 801eab4:	3fdb6db6 	.word	0x3fdb6db6
 801eab8:	33333303 	.word	0x33333303
 801eabc:	3fe33333 	.word	0x3fe33333
 801eac0:	e0000000 	.word	0xe0000000
 801eac4:	3feec709 	.word	0x3feec709
 801eac8:	dc3a03fd 	.word	0xdc3a03fd
 801eacc:	3feec709 	.word	0x3feec709
 801ead0:	145b01f5 	.word	0x145b01f5
 801ead4:	be3e2fe0 	.word	0xbe3e2fe0
 801ead8:	7ff00000 	.word	0x7ff00000
 801eadc:	43400000 	.word	0x43400000
 801eae0:	0003988e 	.word	0x0003988e
 801eae4:	000bb679 	.word	0x000bb679
 801eae8:	080208c8 	.word	0x080208c8
 801eaec:	3ff00000 	.word	0x3ff00000
 801eaf0:	40080000 	.word	0x40080000
 801eaf4:	080208e8 	.word	0x080208e8
 801eaf8:	080208d8 	.word	0x080208d8
 801eafc:	a39c      	add	r3, pc, #624	; (adr r3, 801ed70 <__ieee754_pow+0x9c8>)
 801eafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb02:	4640      	mov	r0, r8
 801eb04:	4649      	mov	r1, r9
 801eb06:	f7e9 fd99 	bl	800863c <__adddf3>
 801eb0a:	4622      	mov	r2, r4
 801eb0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801eb10:	462b      	mov	r3, r5
 801eb12:	4650      	mov	r0, sl
 801eb14:	4639      	mov	r1, r7
 801eb16:	f7e9 fd8f 	bl	8008638 <__aeabi_dsub>
 801eb1a:	4602      	mov	r2, r0
 801eb1c:	460b      	mov	r3, r1
 801eb1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801eb22:	f7ea f9d1 	bl	8008ec8 <__aeabi_dcmpgt>
 801eb26:	2800      	cmp	r0, #0
 801eb28:	f47f ae08 	bne.w	801e73c <__ieee754_pow+0x394>
 801eb2c:	4aa2      	ldr	r2, [pc, #648]	; (801edb8 <__ieee754_pow+0xa10>)
 801eb2e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 801eb32:	4293      	cmp	r3, r2
 801eb34:	f340 80ff 	ble.w	801ed36 <__ieee754_pow+0x98e>
 801eb38:	151b      	asrs	r3, r3, #20
 801eb3a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801eb3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801eb42:	fa4a fa03 	asr.w	sl, sl, r3
 801eb46:	44b2      	add	sl, r6
 801eb48:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801eb4c:	489b      	ldr	r0, [pc, #620]	; (801edbc <__ieee754_pow+0xa14>)
 801eb4e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801eb52:	4108      	asrs	r0, r1
 801eb54:	ea00 030a 	and.w	r3, r0, sl
 801eb58:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801eb5c:	f1c1 0114 	rsb	r1, r1, #20
 801eb60:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801eb64:	fa4a fa01 	asr.w	sl, sl, r1
 801eb68:	2e00      	cmp	r6, #0
 801eb6a:	f04f 0200 	mov.w	r2, #0
 801eb6e:	4620      	mov	r0, r4
 801eb70:	4629      	mov	r1, r5
 801eb72:	bfb8      	it	lt
 801eb74:	f1ca 0a00 	rsblt	sl, sl, #0
 801eb78:	f7e9 fd5e 	bl	8008638 <__aeabi_dsub>
 801eb7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eb80:	4642      	mov	r2, r8
 801eb82:	464b      	mov	r3, r9
 801eb84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb88:	f7e9 fd58 	bl	800863c <__adddf3>
 801eb8c:	2400      	movs	r4, #0
 801eb8e:	a37a      	add	r3, pc, #488	; (adr r3, 801ed78 <__ieee754_pow+0x9d0>)
 801eb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb94:	4620      	mov	r0, r4
 801eb96:	460d      	mov	r5, r1
 801eb98:	f7e9 ff06 	bl	80089a8 <__aeabi_dmul>
 801eb9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801eba0:	4606      	mov	r6, r0
 801eba2:	460f      	mov	r7, r1
 801eba4:	4620      	mov	r0, r4
 801eba6:	4629      	mov	r1, r5
 801eba8:	f7e9 fd46 	bl	8008638 <__aeabi_dsub>
 801ebac:	4602      	mov	r2, r0
 801ebae:	460b      	mov	r3, r1
 801ebb0:	4640      	mov	r0, r8
 801ebb2:	4649      	mov	r1, r9
 801ebb4:	f7e9 fd40 	bl	8008638 <__aeabi_dsub>
 801ebb8:	a371      	add	r3, pc, #452	; (adr r3, 801ed80 <__ieee754_pow+0x9d8>)
 801ebba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebbe:	f7e9 fef3 	bl	80089a8 <__aeabi_dmul>
 801ebc2:	a371      	add	r3, pc, #452	; (adr r3, 801ed88 <__ieee754_pow+0x9e0>)
 801ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebc8:	4680      	mov	r8, r0
 801ebca:	4689      	mov	r9, r1
 801ebcc:	4620      	mov	r0, r4
 801ebce:	4629      	mov	r1, r5
 801ebd0:	f7e9 feea 	bl	80089a8 <__aeabi_dmul>
 801ebd4:	4602      	mov	r2, r0
 801ebd6:	460b      	mov	r3, r1
 801ebd8:	4640      	mov	r0, r8
 801ebda:	4649      	mov	r1, r9
 801ebdc:	f7e9 fd2e 	bl	800863c <__adddf3>
 801ebe0:	4604      	mov	r4, r0
 801ebe2:	460d      	mov	r5, r1
 801ebe4:	4602      	mov	r2, r0
 801ebe6:	460b      	mov	r3, r1
 801ebe8:	4630      	mov	r0, r6
 801ebea:	4639      	mov	r1, r7
 801ebec:	f7e9 fd26 	bl	800863c <__adddf3>
 801ebf0:	4632      	mov	r2, r6
 801ebf2:	463b      	mov	r3, r7
 801ebf4:	4680      	mov	r8, r0
 801ebf6:	4689      	mov	r9, r1
 801ebf8:	f7e9 fd1e 	bl	8008638 <__aeabi_dsub>
 801ebfc:	4602      	mov	r2, r0
 801ebfe:	460b      	mov	r3, r1
 801ec00:	4620      	mov	r0, r4
 801ec02:	4629      	mov	r1, r5
 801ec04:	f7e9 fd18 	bl	8008638 <__aeabi_dsub>
 801ec08:	4642      	mov	r2, r8
 801ec0a:	4606      	mov	r6, r0
 801ec0c:	460f      	mov	r7, r1
 801ec0e:	464b      	mov	r3, r9
 801ec10:	4640      	mov	r0, r8
 801ec12:	4649      	mov	r1, r9
 801ec14:	f7e9 fec8 	bl	80089a8 <__aeabi_dmul>
 801ec18:	a35d      	add	r3, pc, #372	; (adr r3, 801ed90 <__ieee754_pow+0x9e8>)
 801ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec1e:	4604      	mov	r4, r0
 801ec20:	460d      	mov	r5, r1
 801ec22:	f7e9 fec1 	bl	80089a8 <__aeabi_dmul>
 801ec26:	a35c      	add	r3, pc, #368	; (adr r3, 801ed98 <__ieee754_pow+0x9f0>)
 801ec28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec2c:	f7e9 fd04 	bl	8008638 <__aeabi_dsub>
 801ec30:	4622      	mov	r2, r4
 801ec32:	462b      	mov	r3, r5
 801ec34:	f7e9 feb8 	bl	80089a8 <__aeabi_dmul>
 801ec38:	a359      	add	r3, pc, #356	; (adr r3, 801eda0 <__ieee754_pow+0x9f8>)
 801ec3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec3e:	f7e9 fcfd 	bl	800863c <__adddf3>
 801ec42:	4622      	mov	r2, r4
 801ec44:	462b      	mov	r3, r5
 801ec46:	f7e9 feaf 	bl	80089a8 <__aeabi_dmul>
 801ec4a:	a357      	add	r3, pc, #348	; (adr r3, 801eda8 <__ieee754_pow+0xa00>)
 801ec4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec50:	f7e9 fcf2 	bl	8008638 <__aeabi_dsub>
 801ec54:	4622      	mov	r2, r4
 801ec56:	462b      	mov	r3, r5
 801ec58:	f7e9 fea6 	bl	80089a8 <__aeabi_dmul>
 801ec5c:	a354      	add	r3, pc, #336	; (adr r3, 801edb0 <__ieee754_pow+0xa08>)
 801ec5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec62:	f7e9 fceb 	bl	800863c <__adddf3>
 801ec66:	4622      	mov	r2, r4
 801ec68:	462b      	mov	r3, r5
 801ec6a:	f7e9 fe9d 	bl	80089a8 <__aeabi_dmul>
 801ec6e:	4602      	mov	r2, r0
 801ec70:	460b      	mov	r3, r1
 801ec72:	4640      	mov	r0, r8
 801ec74:	4649      	mov	r1, r9
 801ec76:	f7e9 fcdf 	bl	8008638 <__aeabi_dsub>
 801ec7a:	4604      	mov	r4, r0
 801ec7c:	460d      	mov	r5, r1
 801ec7e:	4602      	mov	r2, r0
 801ec80:	460b      	mov	r3, r1
 801ec82:	4640      	mov	r0, r8
 801ec84:	4649      	mov	r1, r9
 801ec86:	f7e9 fe8f 	bl	80089a8 <__aeabi_dmul>
 801ec8a:	2200      	movs	r2, #0
 801ec8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ec94:	4620      	mov	r0, r4
 801ec96:	4629      	mov	r1, r5
 801ec98:	f7e9 fcce 	bl	8008638 <__aeabi_dsub>
 801ec9c:	4602      	mov	r2, r0
 801ec9e:	460b      	mov	r3, r1
 801eca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eca4:	f7e9 ffaa 	bl	8008bfc <__aeabi_ddiv>
 801eca8:	4632      	mov	r2, r6
 801ecaa:	4604      	mov	r4, r0
 801ecac:	460d      	mov	r5, r1
 801ecae:	463b      	mov	r3, r7
 801ecb0:	4640      	mov	r0, r8
 801ecb2:	4649      	mov	r1, r9
 801ecb4:	f7e9 fe78 	bl	80089a8 <__aeabi_dmul>
 801ecb8:	4632      	mov	r2, r6
 801ecba:	463b      	mov	r3, r7
 801ecbc:	f7e9 fcbe 	bl	800863c <__adddf3>
 801ecc0:	4602      	mov	r2, r0
 801ecc2:	460b      	mov	r3, r1
 801ecc4:	4620      	mov	r0, r4
 801ecc6:	4629      	mov	r1, r5
 801ecc8:	f7e9 fcb6 	bl	8008638 <__aeabi_dsub>
 801eccc:	4642      	mov	r2, r8
 801ecce:	464b      	mov	r3, r9
 801ecd0:	f7e9 fcb2 	bl	8008638 <__aeabi_dsub>
 801ecd4:	4602      	mov	r2, r0
 801ecd6:	460b      	mov	r3, r1
 801ecd8:	2000      	movs	r0, #0
 801ecda:	4939      	ldr	r1, [pc, #228]	; (801edc0 <__ieee754_pow+0xa18>)
 801ecdc:	f7e9 fcac 	bl	8008638 <__aeabi_dsub>
 801ece0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801ece4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ece8:	da28      	bge.n	801ed3c <__ieee754_pow+0x994>
 801ecea:	4652      	mov	r2, sl
 801ecec:	f000 f874 	bl	801edd8 <scalbn>
 801ecf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ecf4:	e401      	b.n	801e4fa <__ieee754_pow+0x152>
 801ecf6:	4b33      	ldr	r3, [pc, #204]	; (801edc4 <__ieee754_pow+0xa1c>)
 801ecf8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801ecfc:	429f      	cmp	r7, r3
 801ecfe:	f77f af15 	ble.w	801eb2c <__ieee754_pow+0x784>
 801ed02:	4b31      	ldr	r3, [pc, #196]	; (801edc8 <__ieee754_pow+0xa20>)
 801ed04:	440b      	add	r3, r1
 801ed06:	4303      	orrs	r3, r0
 801ed08:	d009      	beq.n	801ed1e <__ieee754_pow+0x976>
 801ed0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ed0e:	2200      	movs	r2, #0
 801ed10:	2300      	movs	r3, #0
 801ed12:	f7ea f8bb 	bl	8008e8c <__aeabi_dcmplt>
 801ed16:	3800      	subs	r0, #0
 801ed18:	bf18      	it	ne
 801ed1a:	2001      	movne	r0, #1
 801ed1c:	e457      	b.n	801e5ce <__ieee754_pow+0x226>
 801ed1e:	4622      	mov	r2, r4
 801ed20:	462b      	mov	r3, r5
 801ed22:	f7e9 fc89 	bl	8008638 <__aeabi_dsub>
 801ed26:	4642      	mov	r2, r8
 801ed28:	464b      	mov	r3, r9
 801ed2a:	f7ea f8c3 	bl	8008eb4 <__aeabi_dcmpge>
 801ed2e:	2800      	cmp	r0, #0
 801ed30:	f43f aefc 	beq.w	801eb2c <__ieee754_pow+0x784>
 801ed34:	e7e9      	b.n	801ed0a <__ieee754_pow+0x962>
 801ed36:	f04f 0a00 	mov.w	sl, #0
 801ed3a:	e721      	b.n	801eb80 <__ieee754_pow+0x7d8>
 801ed3c:	4621      	mov	r1, r4
 801ed3e:	e7d7      	b.n	801ecf0 <__ieee754_pow+0x948>
 801ed40:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801edc0 <__ieee754_pow+0xa18>
 801ed44:	f04f 0b00 	mov.w	fp, #0
 801ed48:	f7ff bbbe 	b.w	801e4c8 <__ieee754_pow+0x120>
 801ed4c:	f04f 0b00 	mov.w	fp, #0
 801ed50:	f04f 0c00 	mov.w	ip, #0
 801ed54:	f7ff bbb8 	b.w	801e4c8 <__ieee754_pow+0x120>
 801ed58:	4640      	mov	r0, r8
 801ed5a:	4649      	mov	r1, r9
 801ed5c:	f7ff bb41 	b.w	801e3e2 <__ieee754_pow+0x3a>
 801ed60:	9200      	str	r2, [sp, #0]
 801ed62:	f7ff bb8d 	b.w	801e480 <__ieee754_pow+0xd8>
 801ed66:	2300      	movs	r3, #0
 801ed68:	f7ff bb77 	b.w	801e45a <__ieee754_pow+0xb2>
 801ed6c:	f3af 8000 	nop.w
 801ed70:	652b82fe 	.word	0x652b82fe
 801ed74:	3c971547 	.word	0x3c971547
 801ed78:	00000000 	.word	0x00000000
 801ed7c:	3fe62e43 	.word	0x3fe62e43
 801ed80:	fefa39ef 	.word	0xfefa39ef
 801ed84:	3fe62e42 	.word	0x3fe62e42
 801ed88:	0ca86c39 	.word	0x0ca86c39
 801ed8c:	be205c61 	.word	0xbe205c61
 801ed90:	72bea4d0 	.word	0x72bea4d0
 801ed94:	3e663769 	.word	0x3e663769
 801ed98:	c5d26bf1 	.word	0xc5d26bf1
 801ed9c:	3ebbbd41 	.word	0x3ebbbd41
 801eda0:	af25de2c 	.word	0xaf25de2c
 801eda4:	3f11566a 	.word	0x3f11566a
 801eda8:	16bebd93 	.word	0x16bebd93
 801edac:	3f66c16c 	.word	0x3f66c16c
 801edb0:	5555553e 	.word	0x5555553e
 801edb4:	3fc55555 	.word	0x3fc55555
 801edb8:	3fe00000 	.word	0x3fe00000
 801edbc:	fff00000 	.word	0xfff00000
 801edc0:	3ff00000 	.word	0x3ff00000
 801edc4:	4090cbff 	.word	0x4090cbff
 801edc8:	3f6f3400 	.word	0x3f6f3400

0801edcc <fabs>:
 801edcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801edd0:	4619      	mov	r1, r3
 801edd2:	4770      	bx	lr
 801edd4:	0000      	movs	r0, r0
	...

0801edd8 <scalbn>:
 801edd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edda:	4616      	mov	r6, r2
 801eddc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ede0:	4604      	mov	r4, r0
 801ede2:	460d      	mov	r5, r1
 801ede4:	460b      	mov	r3, r1
 801ede6:	b992      	cbnz	r2, 801ee0e <scalbn+0x36>
 801ede8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801edec:	4303      	orrs	r3, r0
 801edee:	d03c      	beq.n	801ee6a <scalbn+0x92>
 801edf0:	4b31      	ldr	r3, [pc, #196]	; (801eeb8 <scalbn+0xe0>)
 801edf2:	2200      	movs	r2, #0
 801edf4:	f7e9 fdd8 	bl	80089a8 <__aeabi_dmul>
 801edf8:	4b30      	ldr	r3, [pc, #192]	; (801eebc <scalbn+0xe4>)
 801edfa:	429e      	cmp	r6, r3
 801edfc:	4604      	mov	r4, r0
 801edfe:	460d      	mov	r5, r1
 801ee00:	da0f      	bge.n	801ee22 <scalbn+0x4a>
 801ee02:	a329      	add	r3, pc, #164	; (adr r3, 801eea8 <scalbn+0xd0>)
 801ee04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee08:	f7e9 fdce 	bl	80089a8 <__aeabi_dmul>
 801ee0c:	e006      	b.n	801ee1c <scalbn+0x44>
 801ee0e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 801ee12:	42ba      	cmp	r2, r7
 801ee14:	d109      	bne.n	801ee2a <scalbn+0x52>
 801ee16:	4602      	mov	r2, r0
 801ee18:	f7e9 fc10 	bl	800863c <__adddf3>
 801ee1c:	4604      	mov	r4, r0
 801ee1e:	460d      	mov	r5, r1
 801ee20:	e023      	b.n	801ee6a <scalbn+0x92>
 801ee22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ee26:	460b      	mov	r3, r1
 801ee28:	3a36      	subs	r2, #54	; 0x36
 801ee2a:	f24c 3150 	movw	r1, #50000	; 0xc350
 801ee2e:	428e      	cmp	r6, r1
 801ee30:	dd0e      	ble.n	801ee50 <scalbn+0x78>
 801ee32:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 801ee36:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 801ee3a:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 801ee3e:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 801ee42:	a31b      	add	r3, pc, #108	; (adr r3, 801eeb0 <scalbn+0xd8>)
 801ee44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee48:	481d      	ldr	r0, [pc, #116]	; (801eec0 <scalbn+0xe8>)
 801ee4a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 801ee4e:	e7db      	b.n	801ee08 <scalbn+0x30>
 801ee50:	4432      	add	r2, r6
 801ee52:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ee56:	428a      	cmp	r2, r1
 801ee58:	dceb      	bgt.n	801ee32 <scalbn+0x5a>
 801ee5a:	2a00      	cmp	r2, #0
 801ee5c:	dd08      	ble.n	801ee70 <scalbn+0x98>
 801ee5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ee62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ee66:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ee6a:	4620      	mov	r0, r4
 801ee6c:	4629      	mov	r1, r5
 801ee6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee70:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ee74:	da0c      	bge.n	801ee90 <scalbn+0xb8>
 801ee76:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 801ee7a:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 801ee7e:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 801ee82:	a309      	add	r3, pc, #36	; (adr r3, 801eea8 <scalbn+0xd0>)
 801ee84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee88:	480e      	ldr	r0, [pc, #56]	; (801eec4 <scalbn+0xec>)
 801ee8a:	f041 011f 	orr.w	r1, r1, #31
 801ee8e:	e7bb      	b.n	801ee08 <scalbn+0x30>
 801ee90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ee94:	3236      	adds	r2, #54	; 0x36
 801ee96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ee9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ee9e:	4620      	mov	r0, r4
 801eea0:	4b09      	ldr	r3, [pc, #36]	; (801eec8 <scalbn+0xf0>)
 801eea2:	4629      	mov	r1, r5
 801eea4:	2200      	movs	r2, #0
 801eea6:	e7af      	b.n	801ee08 <scalbn+0x30>
 801eea8:	c2f8f359 	.word	0xc2f8f359
 801eeac:	01a56e1f 	.word	0x01a56e1f
 801eeb0:	8800759c 	.word	0x8800759c
 801eeb4:	7e37e43c 	.word	0x7e37e43c
 801eeb8:	43500000 	.word	0x43500000
 801eebc:	ffff3cb0 	.word	0xffff3cb0
 801eec0:	8800759c 	.word	0x8800759c
 801eec4:	c2f8f359 	.word	0xc2f8f359
 801eec8:	3c900000 	.word	0x3c900000

0801eecc <with_errno>:
 801eecc:	b570      	push	{r4, r5, r6, lr}
 801eece:	4604      	mov	r4, r0
 801eed0:	460d      	mov	r5, r1
 801eed2:	4616      	mov	r6, r2
 801eed4:	f7f9 fd9c 	bl	8018a10 <__errno>
 801eed8:	4629      	mov	r1, r5
 801eeda:	6006      	str	r6, [r0, #0]
 801eedc:	4620      	mov	r0, r4
 801eede:	bd70      	pop	{r4, r5, r6, pc}

0801eee0 <xflow>:
 801eee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eee2:	4615      	mov	r5, r2
 801eee4:	461c      	mov	r4, r3
 801eee6:	b180      	cbz	r0, 801ef0a <xflow+0x2a>
 801eee8:	4610      	mov	r0, r2
 801eeea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801eeee:	e9cd 0100 	strd	r0, r1, [sp]
 801eef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eef6:	4628      	mov	r0, r5
 801eef8:	4621      	mov	r1, r4
 801eefa:	f7e9 fd55 	bl	80089a8 <__aeabi_dmul>
 801eefe:	2222      	movs	r2, #34	; 0x22
 801ef00:	b003      	add	sp, #12
 801ef02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ef06:	f7ff bfe1 	b.w	801eecc <with_errno>
 801ef0a:	4610      	mov	r0, r2
 801ef0c:	4619      	mov	r1, r3
 801ef0e:	e7ee      	b.n	801eeee <xflow+0xe>

0801ef10 <__math_uflow>:
 801ef10:	2200      	movs	r2, #0
 801ef12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ef16:	f7ff bfe3 	b.w	801eee0 <xflow>

0801ef1a <__math_oflow>:
 801ef1a:	2200      	movs	r2, #0
 801ef1c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801ef20:	f7ff bfde 	b.w	801eee0 <xflow>

0801ef24 <__ieee754_sqrt>:
 801ef24:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 801f0c8 <__ieee754_sqrt+0x1a4>
 801ef28:	ea3c 0c01 	bics.w	ip, ip, r1
 801ef2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef30:	460a      	mov	r2, r1
 801ef32:	460b      	mov	r3, r1
 801ef34:	4606      	mov	r6, r0
 801ef36:	460d      	mov	r5, r1
 801ef38:	4604      	mov	r4, r0
 801ef3a:	d10e      	bne.n	801ef5a <__ieee754_sqrt+0x36>
 801ef3c:	4602      	mov	r2, r0
 801ef3e:	f7e9 fd33 	bl	80089a8 <__aeabi_dmul>
 801ef42:	4602      	mov	r2, r0
 801ef44:	460b      	mov	r3, r1
 801ef46:	4630      	mov	r0, r6
 801ef48:	4629      	mov	r1, r5
 801ef4a:	f7e9 fb77 	bl	800863c <__adddf3>
 801ef4e:	4606      	mov	r6, r0
 801ef50:	460d      	mov	r5, r1
 801ef52:	4630      	mov	r0, r6
 801ef54:	4629      	mov	r1, r5
 801ef56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef5a:	2900      	cmp	r1, #0
 801ef5c:	dc0d      	bgt.n	801ef7a <__ieee754_sqrt+0x56>
 801ef5e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801ef62:	ea5c 0c00 	orrs.w	ip, ip, r0
 801ef66:	d0f4      	beq.n	801ef52 <__ieee754_sqrt+0x2e>
 801ef68:	b139      	cbz	r1, 801ef7a <__ieee754_sqrt+0x56>
 801ef6a:	4602      	mov	r2, r0
 801ef6c:	f7e9 fb64 	bl	8008638 <__aeabi_dsub>
 801ef70:	4602      	mov	r2, r0
 801ef72:	460b      	mov	r3, r1
 801ef74:	f7e9 fe42 	bl	8008bfc <__aeabi_ddiv>
 801ef78:	e7e9      	b.n	801ef4e <__ieee754_sqrt+0x2a>
 801ef7a:	1512      	asrs	r2, r2, #20
 801ef7c:	f000 8089 	beq.w	801f092 <__ieee754_sqrt+0x16e>
 801ef80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ef84:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801ef88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ef8c:	07d2      	lsls	r2, r2, #31
 801ef8e:	bf5c      	itt	pl
 801ef90:	005b      	lslpl	r3, r3, #1
 801ef92:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 801ef96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ef9a:	bf58      	it	pl
 801ef9c:	0064      	lslpl	r4, r4, #1
 801ef9e:	2500      	movs	r5, #0
 801efa0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801efa4:	0062      	lsls	r2, r4, #1
 801efa6:	1076      	asrs	r6, r6, #1
 801efa8:	2016      	movs	r0, #22
 801efaa:	4629      	mov	r1, r5
 801efac:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 801efb0:	190f      	adds	r7, r1, r4
 801efb2:	429f      	cmp	r7, r3
 801efb4:	bfde      	ittt	le
 801efb6:	1bdb      	suble	r3, r3, r7
 801efb8:	1939      	addle	r1, r7, r4
 801efba:	192d      	addle	r5, r5, r4
 801efbc:	005b      	lsls	r3, r3, #1
 801efbe:	3801      	subs	r0, #1
 801efc0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801efc4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801efc8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801efcc:	d1f0      	bne.n	801efb0 <__ieee754_sqrt+0x8c>
 801efce:	4604      	mov	r4, r0
 801efd0:	2720      	movs	r7, #32
 801efd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801efd6:	428b      	cmp	r3, r1
 801efd8:	eb0c 0e00 	add.w	lr, ip, r0
 801efdc:	dc02      	bgt.n	801efe4 <__ieee754_sqrt+0xc0>
 801efde:	d113      	bne.n	801f008 <__ieee754_sqrt+0xe4>
 801efe0:	4596      	cmp	lr, r2
 801efe2:	d811      	bhi.n	801f008 <__ieee754_sqrt+0xe4>
 801efe4:	f1be 0f00 	cmp.w	lr, #0
 801efe8:	eb0e 000c 	add.w	r0, lr, ip
 801efec:	da56      	bge.n	801f09c <__ieee754_sqrt+0x178>
 801efee:	2800      	cmp	r0, #0
 801eff0:	db54      	blt.n	801f09c <__ieee754_sqrt+0x178>
 801eff2:	f101 0801 	add.w	r8, r1, #1
 801eff6:	1a5b      	subs	r3, r3, r1
 801eff8:	4596      	cmp	lr, r2
 801effa:	bf88      	it	hi
 801effc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801f000:	eba2 020e 	sub.w	r2, r2, lr
 801f004:	4464      	add	r4, ip
 801f006:	4641      	mov	r1, r8
 801f008:	005b      	lsls	r3, r3, #1
 801f00a:	3f01      	subs	r7, #1
 801f00c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801f010:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f014:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f018:	d1dd      	bne.n	801efd6 <__ieee754_sqrt+0xb2>
 801f01a:	4313      	orrs	r3, r2
 801f01c:	d01b      	beq.n	801f056 <__ieee754_sqrt+0x132>
 801f01e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801f0cc <__ieee754_sqrt+0x1a8>
 801f022:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801f0d0 <__ieee754_sqrt+0x1ac>
 801f026:	e9da 0100 	ldrd	r0, r1, [sl]
 801f02a:	e9db 2300 	ldrd	r2, r3, [fp]
 801f02e:	f7e9 fb03 	bl	8008638 <__aeabi_dsub>
 801f032:	e9da 8900 	ldrd	r8, r9, [sl]
 801f036:	4602      	mov	r2, r0
 801f038:	460b      	mov	r3, r1
 801f03a:	4640      	mov	r0, r8
 801f03c:	4649      	mov	r1, r9
 801f03e:	f7e9 ff2f 	bl	8008ea0 <__aeabi_dcmple>
 801f042:	b140      	cbz	r0, 801f056 <__ieee754_sqrt+0x132>
 801f044:	f1b4 3fff 	cmp.w	r4, #4294967295
 801f048:	e9da 0100 	ldrd	r0, r1, [sl]
 801f04c:	e9db 2300 	ldrd	r2, r3, [fp]
 801f050:	d126      	bne.n	801f0a0 <__ieee754_sqrt+0x17c>
 801f052:	3501      	adds	r5, #1
 801f054:	463c      	mov	r4, r7
 801f056:	106b      	asrs	r3, r5, #1
 801f058:	0864      	lsrs	r4, r4, #1
 801f05a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801f05e:	07ea      	lsls	r2, r5, #31
 801f060:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801f064:	bf48      	it	mi
 801f066:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 801f06a:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 801f06e:	4620      	mov	r0, r4
 801f070:	e76d      	b.n	801ef4e <__ieee754_sqrt+0x2a>
 801f072:	0ae3      	lsrs	r3, r4, #11
 801f074:	3915      	subs	r1, #21
 801f076:	0564      	lsls	r4, r4, #21
 801f078:	2b00      	cmp	r3, #0
 801f07a:	d0fa      	beq.n	801f072 <__ieee754_sqrt+0x14e>
 801f07c:	02d8      	lsls	r0, r3, #11
 801f07e:	d50a      	bpl.n	801f096 <__ieee754_sqrt+0x172>
 801f080:	f1c2 0020 	rsb	r0, r2, #32
 801f084:	fa24 f000 	lsr.w	r0, r4, r0
 801f088:	1e55      	subs	r5, r2, #1
 801f08a:	4094      	lsls	r4, r2
 801f08c:	4303      	orrs	r3, r0
 801f08e:	1b4a      	subs	r2, r1, r5
 801f090:	e776      	b.n	801ef80 <__ieee754_sqrt+0x5c>
 801f092:	4611      	mov	r1, r2
 801f094:	e7f0      	b.n	801f078 <__ieee754_sqrt+0x154>
 801f096:	005b      	lsls	r3, r3, #1
 801f098:	3201      	adds	r2, #1
 801f09a:	e7ef      	b.n	801f07c <__ieee754_sqrt+0x158>
 801f09c:	4688      	mov	r8, r1
 801f09e:	e7aa      	b.n	801eff6 <__ieee754_sqrt+0xd2>
 801f0a0:	f7e9 facc 	bl	800863c <__adddf3>
 801f0a4:	e9da 8900 	ldrd	r8, r9, [sl]
 801f0a8:	4602      	mov	r2, r0
 801f0aa:	460b      	mov	r3, r1
 801f0ac:	4640      	mov	r0, r8
 801f0ae:	4649      	mov	r1, r9
 801f0b0:	f7e9 feec 	bl	8008e8c <__aeabi_dcmplt>
 801f0b4:	b120      	cbz	r0, 801f0c0 <__ieee754_sqrt+0x19c>
 801f0b6:	1ca1      	adds	r1, r4, #2
 801f0b8:	bf08      	it	eq
 801f0ba:	3501      	addeq	r5, #1
 801f0bc:	3402      	adds	r4, #2
 801f0be:	e7ca      	b.n	801f056 <__ieee754_sqrt+0x132>
 801f0c0:	3401      	adds	r4, #1
 801f0c2:	f024 0401 	bic.w	r4, r4, #1
 801f0c6:	e7c6      	b.n	801f056 <__ieee754_sqrt+0x132>
 801f0c8:	7ff00000 	.word	0x7ff00000
 801f0cc:	20000750 	.word	0x20000750
 801f0d0:	20000758 	.word	0x20000758

0801f0d4 <_init>:
 801f0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0d6:	bf00      	nop
 801f0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0da:	bc08      	pop	{r3}
 801f0dc:	469e      	mov	lr, r3
 801f0de:	4770      	bx	lr

0801f0e0 <_fini>:
 801f0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0e2:	bf00      	nop
 801f0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0e6:	bc08      	pop	{r3}
 801f0e8:	469e      	mov	lr, r3
 801f0ea:	4770      	bx	lr

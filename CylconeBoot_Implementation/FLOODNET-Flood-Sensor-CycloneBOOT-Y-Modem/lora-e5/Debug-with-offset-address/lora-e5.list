
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08008400  08008400  00008400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b84  08008540  08008540  00008540  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001818  0801f0c8  0801f0c8  0001f0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080208e0  080208e0  00030a48  2**0
                  CONTENTS
  4 .ARM          00000008  080208e0  080208e0  000208e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080208e8  080208e8  00030a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080208e8  080208e8  000208e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080208f0  080208f0  000208f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009c8  20000080  080208f4  00030080  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000545c  20000a48  080212bc  00030a48  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005ea4  080212bc  00035ea4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f499  00000000  00000000  00030a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008936  00000000  00000000  0006ff0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d10  00000000  00000000  00078848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000029c8  00000000  00000000  0007b558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268da  00000000  00000000  0007df20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042af7  00000000  00000000  000a47fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d486d  00000000  00000000  000e72f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bbb5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d2fc  00000000  00000000  001bbbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008540 <__do_global_dtors_aux>:
 8008540:	b510      	push	{r4, lr}
 8008542:	4c05      	ldr	r4, [pc, #20]	; (8008558 <__do_global_dtors_aux+0x18>)
 8008544:	7823      	ldrb	r3, [r4, #0]
 8008546:	b933      	cbnz	r3, 8008556 <__do_global_dtors_aux+0x16>
 8008548:	4b04      	ldr	r3, [pc, #16]	; (800855c <__do_global_dtors_aux+0x1c>)
 800854a:	b113      	cbz	r3, 8008552 <__do_global_dtors_aux+0x12>
 800854c:	4804      	ldr	r0, [pc, #16]	; (8008560 <__do_global_dtors_aux+0x20>)
 800854e:	f3af 8000 	nop.w
 8008552:	2301      	movs	r3, #1
 8008554:	7023      	strb	r3, [r4, #0]
 8008556:	bd10      	pop	{r4, pc}
 8008558:	20000a48 	.word	0x20000a48
 800855c:	00000000 	.word	0x00000000
 8008560:	0801f0ac 	.word	0x0801f0ac

08008564 <frame_dummy>:
 8008564:	b508      	push	{r3, lr}
 8008566:	4b03      	ldr	r3, [pc, #12]	; (8008574 <frame_dummy+0x10>)
 8008568:	b11b      	cbz	r3, 8008572 <frame_dummy+0xe>
 800856a:	4903      	ldr	r1, [pc, #12]	; (8008578 <frame_dummy+0x14>)
 800856c:	4803      	ldr	r0, [pc, #12]	; (800857c <frame_dummy+0x18>)
 800856e:	f3af 8000 	nop.w
 8008572:	bd08      	pop	{r3, pc}
 8008574:	00000000 	.word	0x00000000
 8008578:	20000a4c 	.word	0x20000a4c
 800857c:	0801f0ac 	.word	0x0801f0ac

08008580 <memchr>:
 8008580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008584:	2a10      	cmp	r2, #16
 8008586:	db2b      	blt.n	80085e0 <memchr+0x60>
 8008588:	f010 0f07 	tst.w	r0, #7
 800858c:	d008      	beq.n	80085a0 <memchr+0x20>
 800858e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008592:	3a01      	subs	r2, #1
 8008594:	428b      	cmp	r3, r1
 8008596:	d02d      	beq.n	80085f4 <memchr+0x74>
 8008598:	f010 0f07 	tst.w	r0, #7
 800859c:	b342      	cbz	r2, 80085f0 <memchr+0x70>
 800859e:	d1f6      	bne.n	800858e <memchr+0xe>
 80085a0:	b4f0      	push	{r4, r5, r6, r7}
 80085a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80085a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80085aa:	f022 0407 	bic.w	r4, r2, #7
 80085ae:	f07f 0700 	mvns.w	r7, #0
 80085b2:	2300      	movs	r3, #0
 80085b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80085b8:	3c08      	subs	r4, #8
 80085ba:	ea85 0501 	eor.w	r5, r5, r1
 80085be:	ea86 0601 	eor.w	r6, r6, r1
 80085c2:	fa85 f547 	uadd8	r5, r5, r7
 80085c6:	faa3 f587 	sel	r5, r3, r7
 80085ca:	fa86 f647 	uadd8	r6, r6, r7
 80085ce:	faa5 f687 	sel	r6, r5, r7
 80085d2:	b98e      	cbnz	r6, 80085f8 <memchr+0x78>
 80085d4:	d1ee      	bne.n	80085b4 <memchr+0x34>
 80085d6:	bcf0      	pop	{r4, r5, r6, r7}
 80085d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80085dc:	f002 0207 	and.w	r2, r2, #7
 80085e0:	b132      	cbz	r2, 80085f0 <memchr+0x70>
 80085e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80085e6:	3a01      	subs	r2, #1
 80085e8:	ea83 0301 	eor.w	r3, r3, r1
 80085ec:	b113      	cbz	r3, 80085f4 <memchr+0x74>
 80085ee:	d1f8      	bne.n	80085e2 <memchr+0x62>
 80085f0:	2000      	movs	r0, #0
 80085f2:	4770      	bx	lr
 80085f4:	3801      	subs	r0, #1
 80085f6:	4770      	bx	lr
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	bf06      	itte	eq
 80085fc:	4635      	moveq	r5, r6
 80085fe:	3803      	subeq	r0, #3
 8008600:	3807      	subne	r0, #7
 8008602:	f015 0f01 	tst.w	r5, #1
 8008606:	d107      	bne.n	8008618 <memchr+0x98>
 8008608:	3001      	adds	r0, #1
 800860a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800860e:	bf02      	ittt	eq
 8008610:	3001      	addeq	r0, #1
 8008612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008616:	3001      	addeq	r0, #1
 8008618:	bcf0      	pop	{r4, r5, r6, r7}
 800861a:	3801      	subs	r0, #1
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop

08008620 <strlen>:
 8008620:	4603      	mov	r3, r0
 8008622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008626:	2a00      	cmp	r2, #0
 8008628:	d1fb      	bne.n	8008622 <strlen+0x2>
 800862a:	1a18      	subs	r0, r3, r0
 800862c:	3801      	subs	r0, #1
 800862e:	4770      	bx	lr

08008630 <__aeabi_drsub>:
 8008630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008634:	e002      	b.n	800863c <__adddf3>
 8008636:	bf00      	nop

08008638 <__aeabi_dsub>:
 8008638:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800863c <__adddf3>:
 800863c:	b530      	push	{r4, r5, lr}
 800863e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008642:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008646:	ea94 0f05 	teq	r4, r5
 800864a:	bf08      	it	eq
 800864c:	ea90 0f02 	teqeq	r0, r2
 8008650:	bf1f      	itttt	ne
 8008652:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008656:	ea55 0c02 	orrsne.w	ip, r5, r2
 800865a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800865e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008662:	f000 80e2 	beq.w	800882a <__adddf3+0x1ee>
 8008666:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800866a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800866e:	bfb8      	it	lt
 8008670:	426d      	neglt	r5, r5
 8008672:	dd0c      	ble.n	800868e <__adddf3+0x52>
 8008674:	442c      	add	r4, r5
 8008676:	ea80 0202 	eor.w	r2, r0, r2
 800867a:	ea81 0303 	eor.w	r3, r1, r3
 800867e:	ea82 0000 	eor.w	r0, r2, r0
 8008682:	ea83 0101 	eor.w	r1, r3, r1
 8008686:	ea80 0202 	eor.w	r2, r0, r2
 800868a:	ea81 0303 	eor.w	r3, r1, r3
 800868e:	2d36      	cmp	r5, #54	; 0x36
 8008690:	bf88      	it	hi
 8008692:	bd30      	pophi	{r4, r5, pc}
 8008694:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008698:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800869c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80086a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80086a4:	d002      	beq.n	80086ac <__adddf3+0x70>
 80086a6:	4240      	negs	r0, r0
 80086a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80086ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80086b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80086b8:	d002      	beq.n	80086c0 <__adddf3+0x84>
 80086ba:	4252      	negs	r2, r2
 80086bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80086c0:	ea94 0f05 	teq	r4, r5
 80086c4:	f000 80a7 	beq.w	8008816 <__adddf3+0x1da>
 80086c8:	f1a4 0401 	sub.w	r4, r4, #1
 80086cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80086d0:	db0d      	blt.n	80086ee <__adddf3+0xb2>
 80086d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80086d6:	fa22 f205 	lsr.w	r2, r2, r5
 80086da:	1880      	adds	r0, r0, r2
 80086dc:	f141 0100 	adc.w	r1, r1, #0
 80086e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80086e4:	1880      	adds	r0, r0, r2
 80086e6:	fa43 f305 	asr.w	r3, r3, r5
 80086ea:	4159      	adcs	r1, r3
 80086ec:	e00e      	b.n	800870c <__adddf3+0xd0>
 80086ee:	f1a5 0520 	sub.w	r5, r5, #32
 80086f2:	f10e 0e20 	add.w	lr, lr, #32
 80086f6:	2a01      	cmp	r2, #1
 80086f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80086fc:	bf28      	it	cs
 80086fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008702:	fa43 f305 	asr.w	r3, r3, r5
 8008706:	18c0      	adds	r0, r0, r3
 8008708:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800870c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008710:	d507      	bpl.n	8008722 <__adddf3+0xe6>
 8008712:	f04f 0e00 	mov.w	lr, #0
 8008716:	f1dc 0c00 	rsbs	ip, ip, #0
 800871a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800871e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008722:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008726:	d31b      	bcc.n	8008760 <__adddf3+0x124>
 8008728:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800872c:	d30c      	bcc.n	8008748 <__adddf3+0x10c>
 800872e:	0849      	lsrs	r1, r1, #1
 8008730:	ea5f 0030 	movs.w	r0, r0, rrx
 8008734:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008738:	f104 0401 	add.w	r4, r4, #1
 800873c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008740:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008744:	f080 809a 	bcs.w	800887c <__adddf3+0x240>
 8008748:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800874c:	bf08      	it	eq
 800874e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008752:	f150 0000 	adcs.w	r0, r0, #0
 8008756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800875a:	ea41 0105 	orr.w	r1, r1, r5
 800875e:	bd30      	pop	{r4, r5, pc}
 8008760:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008764:	4140      	adcs	r0, r0
 8008766:	eb41 0101 	adc.w	r1, r1, r1
 800876a:	3c01      	subs	r4, #1
 800876c:	bf28      	it	cs
 800876e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008772:	d2e9      	bcs.n	8008748 <__adddf3+0x10c>
 8008774:	f091 0f00 	teq	r1, #0
 8008778:	bf04      	itt	eq
 800877a:	4601      	moveq	r1, r0
 800877c:	2000      	moveq	r0, #0
 800877e:	fab1 f381 	clz	r3, r1
 8008782:	bf08      	it	eq
 8008784:	3320      	addeq	r3, #32
 8008786:	f1a3 030b 	sub.w	r3, r3, #11
 800878a:	f1b3 0220 	subs.w	r2, r3, #32
 800878e:	da0c      	bge.n	80087aa <__adddf3+0x16e>
 8008790:	320c      	adds	r2, #12
 8008792:	dd08      	ble.n	80087a6 <__adddf3+0x16a>
 8008794:	f102 0c14 	add.w	ip, r2, #20
 8008798:	f1c2 020c 	rsb	r2, r2, #12
 800879c:	fa01 f00c 	lsl.w	r0, r1, ip
 80087a0:	fa21 f102 	lsr.w	r1, r1, r2
 80087a4:	e00c      	b.n	80087c0 <__adddf3+0x184>
 80087a6:	f102 0214 	add.w	r2, r2, #20
 80087aa:	bfd8      	it	le
 80087ac:	f1c2 0c20 	rsble	ip, r2, #32
 80087b0:	fa01 f102 	lsl.w	r1, r1, r2
 80087b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80087b8:	bfdc      	itt	le
 80087ba:	ea41 010c 	orrle.w	r1, r1, ip
 80087be:	4090      	lslle	r0, r2
 80087c0:	1ae4      	subs	r4, r4, r3
 80087c2:	bfa2      	ittt	ge
 80087c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80087c8:	4329      	orrge	r1, r5
 80087ca:	bd30      	popge	{r4, r5, pc}
 80087cc:	ea6f 0404 	mvn.w	r4, r4
 80087d0:	3c1f      	subs	r4, #31
 80087d2:	da1c      	bge.n	800880e <__adddf3+0x1d2>
 80087d4:	340c      	adds	r4, #12
 80087d6:	dc0e      	bgt.n	80087f6 <__adddf3+0x1ba>
 80087d8:	f104 0414 	add.w	r4, r4, #20
 80087dc:	f1c4 0220 	rsb	r2, r4, #32
 80087e0:	fa20 f004 	lsr.w	r0, r0, r4
 80087e4:	fa01 f302 	lsl.w	r3, r1, r2
 80087e8:	ea40 0003 	orr.w	r0, r0, r3
 80087ec:	fa21 f304 	lsr.w	r3, r1, r4
 80087f0:	ea45 0103 	orr.w	r1, r5, r3
 80087f4:	bd30      	pop	{r4, r5, pc}
 80087f6:	f1c4 040c 	rsb	r4, r4, #12
 80087fa:	f1c4 0220 	rsb	r2, r4, #32
 80087fe:	fa20 f002 	lsr.w	r0, r0, r2
 8008802:	fa01 f304 	lsl.w	r3, r1, r4
 8008806:	ea40 0003 	orr.w	r0, r0, r3
 800880a:	4629      	mov	r1, r5
 800880c:	bd30      	pop	{r4, r5, pc}
 800880e:	fa21 f004 	lsr.w	r0, r1, r4
 8008812:	4629      	mov	r1, r5
 8008814:	bd30      	pop	{r4, r5, pc}
 8008816:	f094 0f00 	teq	r4, #0
 800881a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800881e:	bf06      	itte	eq
 8008820:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008824:	3401      	addeq	r4, #1
 8008826:	3d01      	subne	r5, #1
 8008828:	e74e      	b.n	80086c8 <__adddf3+0x8c>
 800882a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800882e:	bf18      	it	ne
 8008830:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008834:	d029      	beq.n	800888a <__adddf3+0x24e>
 8008836:	ea94 0f05 	teq	r4, r5
 800883a:	bf08      	it	eq
 800883c:	ea90 0f02 	teqeq	r0, r2
 8008840:	d005      	beq.n	800884e <__adddf3+0x212>
 8008842:	ea54 0c00 	orrs.w	ip, r4, r0
 8008846:	bf04      	itt	eq
 8008848:	4619      	moveq	r1, r3
 800884a:	4610      	moveq	r0, r2
 800884c:	bd30      	pop	{r4, r5, pc}
 800884e:	ea91 0f03 	teq	r1, r3
 8008852:	bf1e      	ittt	ne
 8008854:	2100      	movne	r1, #0
 8008856:	2000      	movne	r0, #0
 8008858:	bd30      	popne	{r4, r5, pc}
 800885a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800885e:	d105      	bne.n	800886c <__adddf3+0x230>
 8008860:	0040      	lsls	r0, r0, #1
 8008862:	4149      	adcs	r1, r1
 8008864:	bf28      	it	cs
 8008866:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800886a:	bd30      	pop	{r4, r5, pc}
 800886c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008870:	bf3c      	itt	cc
 8008872:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008876:	bd30      	popcc	{r4, r5, pc}
 8008878:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800887c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008884:	f04f 0000 	mov.w	r0, #0
 8008888:	bd30      	pop	{r4, r5, pc}
 800888a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800888e:	bf1a      	itte	ne
 8008890:	4619      	movne	r1, r3
 8008892:	4610      	movne	r0, r2
 8008894:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008898:	bf1c      	itt	ne
 800889a:	460b      	movne	r3, r1
 800889c:	4602      	movne	r2, r0
 800889e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80088a2:	bf06      	itte	eq
 80088a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80088a8:	ea91 0f03 	teqeq	r1, r3
 80088ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80088b0:	bd30      	pop	{r4, r5, pc}
 80088b2:	bf00      	nop

080088b4 <__aeabi_ui2d>:
 80088b4:	f090 0f00 	teq	r0, #0
 80088b8:	bf04      	itt	eq
 80088ba:	2100      	moveq	r1, #0
 80088bc:	4770      	bxeq	lr
 80088be:	b530      	push	{r4, r5, lr}
 80088c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80088c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80088c8:	f04f 0500 	mov.w	r5, #0
 80088cc:	f04f 0100 	mov.w	r1, #0
 80088d0:	e750      	b.n	8008774 <__adddf3+0x138>
 80088d2:	bf00      	nop

080088d4 <__aeabi_i2d>:
 80088d4:	f090 0f00 	teq	r0, #0
 80088d8:	bf04      	itt	eq
 80088da:	2100      	moveq	r1, #0
 80088dc:	4770      	bxeq	lr
 80088de:	b530      	push	{r4, r5, lr}
 80088e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80088e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80088e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80088ec:	bf48      	it	mi
 80088ee:	4240      	negmi	r0, r0
 80088f0:	f04f 0100 	mov.w	r1, #0
 80088f4:	e73e      	b.n	8008774 <__adddf3+0x138>
 80088f6:	bf00      	nop

080088f8 <__aeabi_f2d>:
 80088f8:	0042      	lsls	r2, r0, #1
 80088fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80088fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8008902:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008906:	bf1f      	itttt	ne
 8008908:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800890c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008910:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008914:	4770      	bxne	lr
 8008916:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800891a:	bf08      	it	eq
 800891c:	4770      	bxeq	lr
 800891e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008922:	bf04      	itt	eq
 8008924:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008928:	4770      	bxeq	lr
 800892a:	b530      	push	{r4, r5, lr}
 800892c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008930:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008934:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008938:	e71c      	b.n	8008774 <__adddf3+0x138>
 800893a:	bf00      	nop

0800893c <__aeabi_ul2d>:
 800893c:	ea50 0201 	orrs.w	r2, r0, r1
 8008940:	bf08      	it	eq
 8008942:	4770      	bxeq	lr
 8008944:	b530      	push	{r4, r5, lr}
 8008946:	f04f 0500 	mov.w	r5, #0
 800894a:	e00a      	b.n	8008962 <__aeabi_l2d+0x16>

0800894c <__aeabi_l2d>:
 800894c:	ea50 0201 	orrs.w	r2, r0, r1
 8008950:	bf08      	it	eq
 8008952:	4770      	bxeq	lr
 8008954:	b530      	push	{r4, r5, lr}
 8008956:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800895a:	d502      	bpl.n	8008962 <__aeabi_l2d+0x16>
 800895c:	4240      	negs	r0, r0
 800895e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008962:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008966:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800896a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800896e:	f43f aed8 	beq.w	8008722 <__adddf3+0xe6>
 8008972:	f04f 0203 	mov.w	r2, #3
 8008976:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800897a:	bf18      	it	ne
 800897c:	3203      	addne	r2, #3
 800897e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008982:	bf18      	it	ne
 8008984:	3203      	addne	r2, #3
 8008986:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800898a:	f1c2 0320 	rsb	r3, r2, #32
 800898e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008992:	fa20 f002 	lsr.w	r0, r0, r2
 8008996:	fa01 fe03 	lsl.w	lr, r1, r3
 800899a:	ea40 000e 	orr.w	r0, r0, lr
 800899e:	fa21 f102 	lsr.w	r1, r1, r2
 80089a2:	4414      	add	r4, r2
 80089a4:	e6bd      	b.n	8008722 <__adddf3+0xe6>
 80089a6:	bf00      	nop

080089a8 <__aeabi_dmul>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80089ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80089b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80089b6:	bf1d      	ittte	ne
 80089b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80089bc:	ea94 0f0c 	teqne	r4, ip
 80089c0:	ea95 0f0c 	teqne	r5, ip
 80089c4:	f000 f8de 	bleq	8008b84 <__aeabi_dmul+0x1dc>
 80089c8:	442c      	add	r4, r5
 80089ca:	ea81 0603 	eor.w	r6, r1, r3
 80089ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80089d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80089d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80089da:	bf18      	it	ne
 80089dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80089e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089e8:	d038      	beq.n	8008a5c <__aeabi_dmul+0xb4>
 80089ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80089ee:	f04f 0500 	mov.w	r5, #0
 80089f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80089f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80089fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80089fe:	f04f 0600 	mov.w	r6, #0
 8008a02:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008a06:	f09c 0f00 	teq	ip, #0
 8008a0a:	bf18      	it	ne
 8008a0c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008a10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008a14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008a18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008a1c:	d204      	bcs.n	8008a28 <__aeabi_dmul+0x80>
 8008a1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008a22:	416d      	adcs	r5, r5
 8008a24:	eb46 0606 	adc.w	r6, r6, r6
 8008a28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008a2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008a30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008a34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008a38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008a3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008a40:	bf88      	it	hi
 8008a42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008a46:	d81e      	bhi.n	8008a86 <__aeabi_dmul+0xde>
 8008a48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008a4c:	bf08      	it	eq
 8008a4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008a52:	f150 0000 	adcs.w	r0, r0, #0
 8008a56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008a60:	ea46 0101 	orr.w	r1, r6, r1
 8008a64:	ea40 0002 	orr.w	r0, r0, r2
 8008a68:	ea81 0103 	eor.w	r1, r1, r3
 8008a6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008a70:	bfc2      	ittt	gt
 8008a72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a7a:	bd70      	popgt	{r4, r5, r6, pc}
 8008a7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a80:	f04f 0e00 	mov.w	lr, #0
 8008a84:	3c01      	subs	r4, #1
 8008a86:	f300 80ab 	bgt.w	8008be0 <__aeabi_dmul+0x238>
 8008a8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008a8e:	bfde      	ittt	le
 8008a90:	2000      	movle	r0, #0
 8008a92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008a96:	bd70      	pople	{r4, r5, r6, pc}
 8008a98:	f1c4 0400 	rsb	r4, r4, #0
 8008a9c:	3c20      	subs	r4, #32
 8008a9e:	da35      	bge.n	8008b0c <__aeabi_dmul+0x164>
 8008aa0:	340c      	adds	r4, #12
 8008aa2:	dc1b      	bgt.n	8008adc <__aeabi_dmul+0x134>
 8008aa4:	f104 0414 	add.w	r4, r4, #20
 8008aa8:	f1c4 0520 	rsb	r5, r4, #32
 8008aac:	fa00 f305 	lsl.w	r3, r0, r5
 8008ab0:	fa20 f004 	lsr.w	r0, r0, r4
 8008ab4:	fa01 f205 	lsl.w	r2, r1, r5
 8008ab8:	ea40 0002 	orr.w	r0, r0, r2
 8008abc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008ac0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ac4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008ac8:	fa21 f604 	lsr.w	r6, r1, r4
 8008acc:	eb42 0106 	adc.w	r1, r2, r6
 8008ad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008ad4:	bf08      	it	eq
 8008ad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	f1c4 040c 	rsb	r4, r4, #12
 8008ae0:	f1c4 0520 	rsb	r5, r4, #32
 8008ae4:	fa00 f304 	lsl.w	r3, r0, r4
 8008ae8:	fa20 f005 	lsr.w	r0, r0, r5
 8008aec:	fa01 f204 	lsl.w	r2, r1, r4
 8008af0:	ea40 0002 	orr.w	r0, r0, r2
 8008af4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008af8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008afc:	f141 0100 	adc.w	r1, r1, #0
 8008b00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008b04:	bf08      	it	eq
 8008b06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	f1c4 0520 	rsb	r5, r4, #32
 8008b10:	fa00 f205 	lsl.w	r2, r0, r5
 8008b14:	ea4e 0e02 	orr.w	lr, lr, r2
 8008b18:	fa20 f304 	lsr.w	r3, r0, r4
 8008b1c:	fa01 f205 	lsl.w	r2, r1, r5
 8008b20:	ea43 0302 	orr.w	r3, r3, r2
 8008b24:	fa21 f004 	lsr.w	r0, r1, r4
 8008b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008b2c:	fa21 f204 	lsr.w	r2, r1, r4
 8008b30:	ea20 0002 	bic.w	r0, r0, r2
 8008b34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008b3c:	bf08      	it	eq
 8008b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	f094 0f00 	teq	r4, #0
 8008b48:	d10f      	bne.n	8008b6a <__aeabi_dmul+0x1c2>
 8008b4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008b4e:	0040      	lsls	r0, r0, #1
 8008b50:	eb41 0101 	adc.w	r1, r1, r1
 8008b54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008b58:	bf08      	it	eq
 8008b5a:	3c01      	subeq	r4, #1
 8008b5c:	d0f7      	beq.n	8008b4e <__aeabi_dmul+0x1a6>
 8008b5e:	ea41 0106 	orr.w	r1, r1, r6
 8008b62:	f095 0f00 	teq	r5, #0
 8008b66:	bf18      	it	ne
 8008b68:	4770      	bxne	lr
 8008b6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008b6e:	0052      	lsls	r2, r2, #1
 8008b70:	eb43 0303 	adc.w	r3, r3, r3
 8008b74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008b78:	bf08      	it	eq
 8008b7a:	3d01      	subeq	r5, #1
 8008b7c:	d0f7      	beq.n	8008b6e <__aeabi_dmul+0x1c6>
 8008b7e:	ea43 0306 	orr.w	r3, r3, r6
 8008b82:	4770      	bx	lr
 8008b84:	ea94 0f0c 	teq	r4, ip
 8008b88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008b8c:	bf18      	it	ne
 8008b8e:	ea95 0f0c 	teqne	r5, ip
 8008b92:	d00c      	beq.n	8008bae <__aeabi_dmul+0x206>
 8008b94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008b98:	bf18      	it	ne
 8008b9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008b9e:	d1d1      	bne.n	8008b44 <__aeabi_dmul+0x19c>
 8008ba0:	ea81 0103 	eor.w	r1, r1, r3
 8008ba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008ba8:	f04f 0000 	mov.w	r0, #0
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008bb2:	bf06      	itte	eq
 8008bb4:	4610      	moveq	r0, r2
 8008bb6:	4619      	moveq	r1, r3
 8008bb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008bbc:	d019      	beq.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bbe:	ea94 0f0c 	teq	r4, ip
 8008bc2:	d102      	bne.n	8008bca <__aeabi_dmul+0x222>
 8008bc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008bc8:	d113      	bne.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bca:	ea95 0f0c 	teq	r5, ip
 8008bce:	d105      	bne.n	8008bdc <__aeabi_dmul+0x234>
 8008bd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008bd4:	bf1c      	itt	ne
 8008bd6:	4610      	movne	r0, r2
 8008bd8:	4619      	movne	r1, r3
 8008bda:	d10a      	bne.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bdc:	ea81 0103 	eor.w	r1, r1, r3
 8008be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008be4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008be8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bec:	f04f 0000 	mov.w	r0, #0
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
 8008bf2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008bf6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}

08008bfc <__aeabi_ddiv>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008c02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008c06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008c0a:	bf1d      	ittte	ne
 8008c0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008c10:	ea94 0f0c 	teqne	r4, ip
 8008c14:	ea95 0f0c 	teqne	r5, ip
 8008c18:	f000 f8a7 	bleq	8008d6a <__aeabi_ddiv+0x16e>
 8008c1c:	eba4 0405 	sub.w	r4, r4, r5
 8008c20:	ea81 0e03 	eor.w	lr, r1, r3
 8008c24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008c28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008c2c:	f000 8088 	beq.w	8008d40 <__aeabi_ddiv+0x144>
 8008c30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008c34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008c38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008c3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008c40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008c44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008c48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008c4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008c50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008c54:	429d      	cmp	r5, r3
 8008c56:	bf08      	it	eq
 8008c58:	4296      	cmpeq	r6, r2
 8008c5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008c5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008c62:	d202      	bcs.n	8008c6a <__aeabi_ddiv+0x6e>
 8008c64:	085b      	lsrs	r3, r3, #1
 8008c66:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c6a:	1ab6      	subs	r6, r6, r2
 8008c6c:	eb65 0503 	sbc.w	r5, r5, r3
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008c7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008c7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c86:	bf22      	ittt	cs
 8008c88:	1ab6      	subcs	r6, r6, r2
 8008c8a:	4675      	movcs	r5, lr
 8008c8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c96:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c9e:	bf22      	ittt	cs
 8008ca0:	1ab6      	subcs	r6, r6, r2
 8008ca2:	4675      	movcs	r5, lr
 8008ca4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	ea4f 0232 	mov.w	r2, r2, rrx
 8008cae:	ebb6 0e02 	subs.w	lr, r6, r2
 8008cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008cb6:	bf22      	ittt	cs
 8008cb8:	1ab6      	subcs	r6, r6, r2
 8008cba:	4675      	movcs	r5, lr
 8008cbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8008cc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8008cca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008cce:	bf22      	ittt	cs
 8008cd0:	1ab6      	subcs	r6, r6, r2
 8008cd2:	4675      	movcs	r5, lr
 8008cd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008cd8:	ea55 0e06 	orrs.w	lr, r5, r6
 8008cdc:	d018      	beq.n	8008d10 <__aeabi_ddiv+0x114>
 8008cde:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008ce2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008ce6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008cea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008cee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008cf2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008cf6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008cfa:	d1c0      	bne.n	8008c7e <__aeabi_ddiv+0x82>
 8008cfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d00:	d10b      	bne.n	8008d1a <__aeabi_ddiv+0x11e>
 8008d02:	ea41 0100 	orr.w	r1, r1, r0
 8008d06:	f04f 0000 	mov.w	r0, #0
 8008d0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008d0e:	e7b6      	b.n	8008c7e <__aeabi_ddiv+0x82>
 8008d10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d14:	bf04      	itt	eq
 8008d16:	4301      	orreq	r1, r0
 8008d18:	2000      	moveq	r0, #0
 8008d1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008d1e:	bf88      	it	hi
 8008d20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008d24:	f63f aeaf 	bhi.w	8008a86 <__aeabi_dmul+0xde>
 8008d28:	ebb5 0c03 	subs.w	ip, r5, r3
 8008d2c:	bf04      	itt	eq
 8008d2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008d32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008d36:	f150 0000 	adcs.w	r0, r0, #0
 8008d3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008d44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008d48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008d4c:	bfc2      	ittt	gt
 8008d4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008d52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008d56:	bd70      	popgt	{r4, r5, r6, pc}
 8008d58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008d5c:	f04f 0e00 	mov.w	lr, #0
 8008d60:	3c01      	subs	r4, #1
 8008d62:	e690      	b.n	8008a86 <__aeabi_dmul+0xde>
 8008d64:	ea45 0e06 	orr.w	lr, r5, r6
 8008d68:	e68d      	b.n	8008a86 <__aeabi_dmul+0xde>
 8008d6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008d6e:	ea94 0f0c 	teq	r4, ip
 8008d72:	bf08      	it	eq
 8008d74:	ea95 0f0c 	teqeq	r5, ip
 8008d78:	f43f af3b 	beq.w	8008bf2 <__aeabi_dmul+0x24a>
 8008d7c:	ea94 0f0c 	teq	r4, ip
 8008d80:	d10a      	bne.n	8008d98 <__aeabi_ddiv+0x19c>
 8008d82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008d86:	f47f af34 	bne.w	8008bf2 <__aeabi_dmul+0x24a>
 8008d8a:	ea95 0f0c 	teq	r5, ip
 8008d8e:	f47f af25 	bne.w	8008bdc <__aeabi_dmul+0x234>
 8008d92:	4610      	mov	r0, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	e72c      	b.n	8008bf2 <__aeabi_dmul+0x24a>
 8008d98:	ea95 0f0c 	teq	r5, ip
 8008d9c:	d106      	bne.n	8008dac <__aeabi_ddiv+0x1b0>
 8008d9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008da2:	f43f aefd 	beq.w	8008ba0 <__aeabi_dmul+0x1f8>
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	e722      	b.n	8008bf2 <__aeabi_dmul+0x24a>
 8008dac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008db0:	bf18      	it	ne
 8008db2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008db6:	f47f aec5 	bne.w	8008b44 <__aeabi_dmul+0x19c>
 8008dba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008dbe:	f47f af0d 	bne.w	8008bdc <__aeabi_dmul+0x234>
 8008dc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008dc6:	f47f aeeb 	bne.w	8008ba0 <__aeabi_dmul+0x1f8>
 8008dca:	e712      	b.n	8008bf2 <__aeabi_dmul+0x24a>

08008dcc <__gedf2>:
 8008dcc:	f04f 3cff 	mov.w	ip, #4294967295
 8008dd0:	e006      	b.n	8008de0 <__cmpdf2+0x4>
 8008dd2:	bf00      	nop

08008dd4 <__ledf2>:
 8008dd4:	f04f 0c01 	mov.w	ip, #1
 8008dd8:	e002      	b.n	8008de0 <__cmpdf2+0x4>
 8008dda:	bf00      	nop

08008ddc <__cmpdf2>:
 8008ddc:	f04f 0c01 	mov.w	ip, #1
 8008de0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008de4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008de8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008dec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008df0:	bf18      	it	ne
 8008df2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008df6:	d01b      	beq.n	8008e30 <__cmpdf2+0x54>
 8008df8:	b001      	add	sp, #4
 8008dfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008dfe:	bf0c      	ite	eq
 8008e00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008e04:	ea91 0f03 	teqne	r1, r3
 8008e08:	bf02      	ittt	eq
 8008e0a:	ea90 0f02 	teqeq	r0, r2
 8008e0e:	2000      	moveq	r0, #0
 8008e10:	4770      	bxeq	lr
 8008e12:	f110 0f00 	cmn.w	r0, #0
 8008e16:	ea91 0f03 	teq	r1, r3
 8008e1a:	bf58      	it	pl
 8008e1c:	4299      	cmppl	r1, r3
 8008e1e:	bf08      	it	eq
 8008e20:	4290      	cmpeq	r0, r2
 8008e22:	bf2c      	ite	cs
 8008e24:	17d8      	asrcs	r0, r3, #31
 8008e26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008e2a:	f040 0001 	orr.w	r0, r0, #1
 8008e2e:	4770      	bx	lr
 8008e30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008e34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008e38:	d102      	bne.n	8008e40 <__cmpdf2+0x64>
 8008e3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008e3e:	d107      	bne.n	8008e50 <__cmpdf2+0x74>
 8008e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008e48:	d1d6      	bne.n	8008df8 <__cmpdf2+0x1c>
 8008e4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008e4e:	d0d3      	beq.n	8008df8 <__cmpdf2+0x1c>
 8008e50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop

08008e58 <__aeabi_cdrcmple>:
 8008e58:	4684      	mov	ip, r0
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4662      	mov	r2, ip
 8008e5e:	468c      	mov	ip, r1
 8008e60:	4619      	mov	r1, r3
 8008e62:	4663      	mov	r3, ip
 8008e64:	e000      	b.n	8008e68 <__aeabi_cdcmpeq>
 8008e66:	bf00      	nop

08008e68 <__aeabi_cdcmpeq>:
 8008e68:	b501      	push	{r0, lr}
 8008e6a:	f7ff ffb7 	bl	8008ddc <__cmpdf2>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	bf48      	it	mi
 8008e72:	f110 0f00 	cmnmi.w	r0, #0
 8008e76:	bd01      	pop	{r0, pc}

08008e78 <__aeabi_dcmpeq>:
 8008e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e7c:	f7ff fff4 	bl	8008e68 <__aeabi_cdcmpeq>
 8008e80:	bf0c      	ite	eq
 8008e82:	2001      	moveq	r0, #1
 8008e84:	2000      	movne	r0, #0
 8008e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e8a:	bf00      	nop

08008e8c <__aeabi_dcmplt>:
 8008e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e90:	f7ff ffea 	bl	8008e68 <__aeabi_cdcmpeq>
 8008e94:	bf34      	ite	cc
 8008e96:	2001      	movcc	r0, #1
 8008e98:	2000      	movcs	r0, #0
 8008e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e9e:	bf00      	nop

08008ea0 <__aeabi_dcmple>:
 8008ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ea4:	f7ff ffe0 	bl	8008e68 <__aeabi_cdcmpeq>
 8008ea8:	bf94      	ite	ls
 8008eaa:	2001      	movls	r0, #1
 8008eac:	2000      	movhi	r0, #0
 8008eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8008eb2:	bf00      	nop

08008eb4 <__aeabi_dcmpge>:
 8008eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008eb8:	f7ff ffce 	bl	8008e58 <__aeabi_cdrcmple>
 8008ebc:	bf94      	ite	ls
 8008ebe:	2001      	movls	r0, #1
 8008ec0:	2000      	movhi	r0, #0
 8008ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008ec6:	bf00      	nop

08008ec8 <__aeabi_dcmpgt>:
 8008ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ecc:	f7ff ffc4 	bl	8008e58 <__aeabi_cdrcmple>
 8008ed0:	bf34      	ite	cc
 8008ed2:	2001      	movcc	r0, #1
 8008ed4:	2000      	movcs	r0, #0
 8008ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008eda:	bf00      	nop

08008edc <__aeabi_dcmpun>:
 8008edc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ee0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ee4:	d102      	bne.n	8008eec <__aeabi_dcmpun+0x10>
 8008ee6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008eea:	d10a      	bne.n	8008f02 <__aeabi_dcmpun+0x26>
 8008eec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ef0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ef4:	d102      	bne.n	8008efc <__aeabi_dcmpun+0x20>
 8008ef6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008efa:	d102      	bne.n	8008f02 <__aeabi_dcmpun+0x26>
 8008efc:	f04f 0000 	mov.w	r0, #0
 8008f00:	4770      	bx	lr
 8008f02:	f04f 0001 	mov.w	r0, #1
 8008f06:	4770      	bx	lr

08008f08 <__aeabi_d2iz>:
 8008f08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008f0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008f10:	d215      	bcs.n	8008f3e <__aeabi_d2iz+0x36>
 8008f12:	d511      	bpl.n	8008f38 <__aeabi_d2iz+0x30>
 8008f14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008f18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008f1c:	d912      	bls.n	8008f44 <__aeabi_d2iz+0x3c>
 8008f1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008f2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008f2e:	fa23 f002 	lsr.w	r0, r3, r2
 8008f32:	bf18      	it	ne
 8008f34:	4240      	negne	r0, r0
 8008f36:	4770      	bx	lr
 8008f38:	f04f 0000 	mov.w	r0, #0
 8008f3c:	4770      	bx	lr
 8008f3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008f42:	d105      	bne.n	8008f50 <__aeabi_d2iz+0x48>
 8008f44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008f48:	bf08      	it	eq
 8008f4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008f4e:	4770      	bx	lr
 8008f50:	f04f 0000 	mov.w	r0, #0
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop

08008f58 <__aeabi_d2uiz>:
 8008f58:	004a      	lsls	r2, r1, #1
 8008f5a:	d211      	bcs.n	8008f80 <__aeabi_d2uiz+0x28>
 8008f5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008f60:	d211      	bcs.n	8008f86 <__aeabi_d2uiz+0x2e>
 8008f62:	d50d      	bpl.n	8008f80 <__aeabi_d2uiz+0x28>
 8008f64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008f68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008f6c:	d40e      	bmi.n	8008f8c <__aeabi_d2uiz+0x34>
 8008f6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008f7a:	fa23 f002 	lsr.w	r0, r3, r2
 8008f7e:	4770      	bx	lr
 8008f80:	f04f 0000 	mov.w	r0, #0
 8008f84:	4770      	bx	lr
 8008f86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008f8a:	d102      	bne.n	8008f92 <__aeabi_d2uiz+0x3a>
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	4770      	bx	lr
 8008f92:	f04f 0000 	mov.w	r0, #0
 8008f96:	4770      	bx	lr

08008f98 <__aeabi_frsub>:
 8008f98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8008f9c:	e002      	b.n	8008fa4 <__addsf3>
 8008f9e:	bf00      	nop

08008fa0 <__aeabi_fsub>:
 8008fa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08008fa4 <__addsf3>:
 8008fa4:	0042      	lsls	r2, r0, #1
 8008fa6:	bf1f      	itttt	ne
 8008fa8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8008fac:	ea92 0f03 	teqne	r2, r3
 8008fb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8008fb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008fb8:	d06a      	beq.n	8009090 <__addsf3+0xec>
 8008fba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008fbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8008fc2:	bfc1      	itttt	gt
 8008fc4:	18d2      	addgt	r2, r2, r3
 8008fc6:	4041      	eorgt	r1, r0
 8008fc8:	4048      	eorgt	r0, r1
 8008fca:	4041      	eorgt	r1, r0
 8008fcc:	bfb8      	it	lt
 8008fce:	425b      	neglt	r3, r3
 8008fd0:	2b19      	cmp	r3, #25
 8008fd2:	bf88      	it	hi
 8008fd4:	4770      	bxhi	lr
 8008fd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8008fda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008fde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008fe2:	bf18      	it	ne
 8008fe4:	4240      	negne	r0, r0
 8008fe6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008fea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008fee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8008ff2:	bf18      	it	ne
 8008ff4:	4249      	negne	r1, r1
 8008ff6:	ea92 0f03 	teq	r2, r3
 8008ffa:	d03f      	beq.n	800907c <__addsf3+0xd8>
 8008ffc:	f1a2 0201 	sub.w	r2, r2, #1
 8009000:	fa41 fc03 	asr.w	ip, r1, r3
 8009004:	eb10 000c 	adds.w	r0, r0, ip
 8009008:	f1c3 0320 	rsb	r3, r3, #32
 800900c:	fa01 f103 	lsl.w	r1, r1, r3
 8009010:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8009014:	d502      	bpl.n	800901c <__addsf3+0x78>
 8009016:	4249      	negs	r1, r1
 8009018:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800901c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8009020:	d313      	bcc.n	800904a <__addsf3+0xa6>
 8009022:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009026:	d306      	bcc.n	8009036 <__addsf3+0x92>
 8009028:	0840      	lsrs	r0, r0, #1
 800902a:	ea4f 0131 	mov.w	r1, r1, rrx
 800902e:	f102 0201 	add.w	r2, r2, #1
 8009032:	2afe      	cmp	r2, #254	; 0xfe
 8009034:	d251      	bcs.n	80090da <__addsf3+0x136>
 8009036:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800903a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800903e:	bf08      	it	eq
 8009040:	f020 0001 	biceq.w	r0, r0, #1
 8009044:	ea40 0003 	orr.w	r0, r0, r3
 8009048:	4770      	bx	lr
 800904a:	0049      	lsls	r1, r1, #1
 800904c:	eb40 0000 	adc.w	r0, r0, r0
 8009050:	3a01      	subs	r2, #1
 8009052:	bf28      	it	cs
 8009054:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8009058:	d2ed      	bcs.n	8009036 <__addsf3+0x92>
 800905a:	fab0 fc80 	clz	ip, r0
 800905e:	f1ac 0c08 	sub.w	ip, ip, #8
 8009062:	ebb2 020c 	subs.w	r2, r2, ip
 8009066:	fa00 f00c 	lsl.w	r0, r0, ip
 800906a:	bfaa      	itet	ge
 800906c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8009070:	4252      	neglt	r2, r2
 8009072:	4318      	orrge	r0, r3
 8009074:	bfbc      	itt	lt
 8009076:	40d0      	lsrlt	r0, r2
 8009078:	4318      	orrlt	r0, r3
 800907a:	4770      	bx	lr
 800907c:	f092 0f00 	teq	r2, #0
 8009080:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8009084:	bf06      	itte	eq
 8009086:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800908a:	3201      	addeq	r2, #1
 800908c:	3b01      	subne	r3, #1
 800908e:	e7b5      	b.n	8008ffc <__addsf3+0x58>
 8009090:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8009094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8009098:	bf18      	it	ne
 800909a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800909e:	d021      	beq.n	80090e4 <__addsf3+0x140>
 80090a0:	ea92 0f03 	teq	r2, r3
 80090a4:	d004      	beq.n	80090b0 <__addsf3+0x10c>
 80090a6:	f092 0f00 	teq	r2, #0
 80090aa:	bf08      	it	eq
 80090ac:	4608      	moveq	r0, r1
 80090ae:	4770      	bx	lr
 80090b0:	ea90 0f01 	teq	r0, r1
 80090b4:	bf1c      	itt	ne
 80090b6:	2000      	movne	r0, #0
 80090b8:	4770      	bxne	lr
 80090ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80090be:	d104      	bne.n	80090ca <__addsf3+0x126>
 80090c0:	0040      	lsls	r0, r0, #1
 80090c2:	bf28      	it	cs
 80090c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80090c8:	4770      	bx	lr
 80090ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80090ce:	bf3c      	itt	cc
 80090d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80090d4:	4770      	bxcc	lr
 80090d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80090da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80090de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80090e2:	4770      	bx	lr
 80090e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80090e8:	bf16      	itet	ne
 80090ea:	4608      	movne	r0, r1
 80090ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80090f0:	4601      	movne	r1, r0
 80090f2:	0242      	lsls	r2, r0, #9
 80090f4:	bf06      	itte	eq
 80090f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80090fa:	ea90 0f01 	teqeq	r0, r1
 80090fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8009102:	4770      	bx	lr

08009104 <__aeabi_ui2f>:
 8009104:	f04f 0300 	mov.w	r3, #0
 8009108:	e004      	b.n	8009114 <__aeabi_i2f+0x8>
 800910a:	bf00      	nop

0800910c <__aeabi_i2f>:
 800910c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8009110:	bf48      	it	mi
 8009112:	4240      	negmi	r0, r0
 8009114:	ea5f 0c00 	movs.w	ip, r0
 8009118:	bf08      	it	eq
 800911a:	4770      	bxeq	lr
 800911c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8009120:	4601      	mov	r1, r0
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	e01c      	b.n	8009162 <__aeabi_l2f+0x2a>

08009128 <__aeabi_ul2f>:
 8009128:	ea50 0201 	orrs.w	r2, r0, r1
 800912c:	bf08      	it	eq
 800912e:	4770      	bxeq	lr
 8009130:	f04f 0300 	mov.w	r3, #0
 8009134:	e00a      	b.n	800914c <__aeabi_l2f+0x14>
 8009136:	bf00      	nop

08009138 <__aeabi_l2f>:
 8009138:	ea50 0201 	orrs.w	r2, r0, r1
 800913c:	bf08      	it	eq
 800913e:	4770      	bxeq	lr
 8009140:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8009144:	d502      	bpl.n	800914c <__aeabi_l2f+0x14>
 8009146:	4240      	negs	r0, r0
 8009148:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800914c:	ea5f 0c01 	movs.w	ip, r1
 8009150:	bf02      	ittt	eq
 8009152:	4684      	moveq	ip, r0
 8009154:	4601      	moveq	r1, r0
 8009156:	2000      	moveq	r0, #0
 8009158:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800915c:	bf08      	it	eq
 800915e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8009162:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009166:	fabc f28c 	clz	r2, ip
 800916a:	3a08      	subs	r2, #8
 800916c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8009170:	db10      	blt.n	8009194 <__aeabi_l2f+0x5c>
 8009172:	fa01 fc02 	lsl.w	ip, r1, r2
 8009176:	4463      	add	r3, ip
 8009178:	fa00 fc02 	lsl.w	ip, r0, r2
 800917c:	f1c2 0220 	rsb	r2, r2, #32
 8009180:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8009184:	fa20 f202 	lsr.w	r2, r0, r2
 8009188:	eb43 0002 	adc.w	r0, r3, r2
 800918c:	bf08      	it	eq
 800918e:	f020 0001 	biceq.w	r0, r0, #1
 8009192:	4770      	bx	lr
 8009194:	f102 0220 	add.w	r2, r2, #32
 8009198:	fa01 fc02 	lsl.w	ip, r1, r2
 800919c:	f1c2 0220 	rsb	r2, r2, #32
 80091a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80091a4:	fa21 f202 	lsr.w	r2, r1, r2
 80091a8:	eb43 0002 	adc.w	r0, r3, r2
 80091ac:	bf08      	it	eq
 80091ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80091b2:	4770      	bx	lr

080091b4 <__aeabi_f2uiz>:
 80091b4:	0042      	lsls	r2, r0, #1
 80091b6:	d20e      	bcs.n	80091d6 <__aeabi_f2uiz+0x22>
 80091b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80091bc:	d30b      	bcc.n	80091d6 <__aeabi_f2uiz+0x22>
 80091be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80091c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80091c6:	d409      	bmi.n	80091dc <__aeabi_f2uiz+0x28>
 80091c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80091cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091d0:	fa23 f002 	lsr.w	r0, r3, r2
 80091d4:	4770      	bx	lr
 80091d6:	f04f 0000 	mov.w	r0, #0
 80091da:	4770      	bx	lr
 80091dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80091e0:	d101      	bne.n	80091e6 <__aeabi_f2uiz+0x32>
 80091e2:	0242      	lsls	r2, r0, #9
 80091e4:	d102      	bne.n	80091ec <__aeabi_f2uiz+0x38>
 80091e6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ea:	4770      	bx	lr
 80091ec:	f04f 0000 	mov.w	r0, #0
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop

080091f4 <__aeabi_uldivmod>:
 80091f4:	b953      	cbnz	r3, 800920c <__aeabi_uldivmod+0x18>
 80091f6:	b94a      	cbnz	r2, 800920c <__aeabi_uldivmod+0x18>
 80091f8:	2900      	cmp	r1, #0
 80091fa:	bf08      	it	eq
 80091fc:	2800      	cmpeq	r0, #0
 80091fe:	bf1c      	itt	ne
 8009200:	f04f 31ff 	movne.w	r1, #4294967295
 8009204:	f04f 30ff 	movne.w	r0, #4294967295
 8009208:	f000 b974 	b.w	80094f4 <__aeabi_idiv0>
 800920c:	f1ad 0c08 	sub.w	ip, sp, #8
 8009210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8009214:	f000 f806 	bl	8009224 <__udivmoddi4>
 8009218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800921c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009220:	b004      	add	sp, #16
 8009222:	4770      	bx	lr

08009224 <__udivmoddi4>:
 8009224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009228:	9e08      	ldr	r6, [sp, #32]
 800922a:	460d      	mov	r5, r1
 800922c:	4604      	mov	r4, r0
 800922e:	4688      	mov	r8, r1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d14d      	bne.n	80092d0 <__udivmoddi4+0xac>
 8009234:	428a      	cmp	r2, r1
 8009236:	4694      	mov	ip, r2
 8009238:	d968      	bls.n	800930c <__udivmoddi4+0xe8>
 800923a:	fab2 f282 	clz	r2, r2
 800923e:	b152      	cbz	r2, 8009256 <__udivmoddi4+0x32>
 8009240:	fa01 f302 	lsl.w	r3, r1, r2
 8009244:	f1c2 0120 	rsb	r1, r2, #32
 8009248:	fa20 f101 	lsr.w	r1, r0, r1
 800924c:	fa0c fc02 	lsl.w	ip, ip, r2
 8009250:	ea41 0803 	orr.w	r8, r1, r3
 8009254:	4094      	lsls	r4, r2
 8009256:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800925a:	0c21      	lsrs	r1, r4, #16
 800925c:	fbb8 fef5 	udiv	lr, r8, r5
 8009260:	fa1f f78c 	uxth.w	r7, ip
 8009264:	fb05 831e 	mls	r3, r5, lr, r8
 8009268:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800926c:	fb0e f107 	mul.w	r1, lr, r7
 8009270:	4299      	cmp	r1, r3
 8009272:	d90b      	bls.n	800928c <__udivmoddi4+0x68>
 8009274:	eb1c 0303 	adds.w	r3, ip, r3
 8009278:	f10e 30ff 	add.w	r0, lr, #4294967295
 800927c:	f080 811e 	bcs.w	80094bc <__udivmoddi4+0x298>
 8009280:	4299      	cmp	r1, r3
 8009282:	f240 811b 	bls.w	80094bc <__udivmoddi4+0x298>
 8009286:	f1ae 0e02 	sub.w	lr, lr, #2
 800928a:	4463      	add	r3, ip
 800928c:	1a5b      	subs	r3, r3, r1
 800928e:	b2a4      	uxth	r4, r4
 8009290:	fbb3 f0f5 	udiv	r0, r3, r5
 8009294:	fb05 3310 	mls	r3, r5, r0, r3
 8009298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800929c:	fb00 f707 	mul.w	r7, r0, r7
 80092a0:	42a7      	cmp	r7, r4
 80092a2:	d90a      	bls.n	80092ba <__udivmoddi4+0x96>
 80092a4:	eb1c 0404 	adds.w	r4, ip, r4
 80092a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092ac:	f080 8108 	bcs.w	80094c0 <__udivmoddi4+0x29c>
 80092b0:	42a7      	cmp	r7, r4
 80092b2:	f240 8105 	bls.w	80094c0 <__udivmoddi4+0x29c>
 80092b6:	4464      	add	r4, ip
 80092b8:	3802      	subs	r0, #2
 80092ba:	1be4      	subs	r4, r4, r7
 80092bc:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80092c0:	2100      	movs	r1, #0
 80092c2:	b11e      	cbz	r6, 80092cc <__udivmoddi4+0xa8>
 80092c4:	40d4      	lsrs	r4, r2
 80092c6:	2300      	movs	r3, #0
 80092c8:	e9c6 4300 	strd	r4, r3, [r6]
 80092cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d0:	428b      	cmp	r3, r1
 80092d2:	d908      	bls.n	80092e6 <__udivmoddi4+0xc2>
 80092d4:	2e00      	cmp	r6, #0
 80092d6:	f000 80ee 	beq.w	80094b6 <__udivmoddi4+0x292>
 80092da:	2100      	movs	r1, #0
 80092dc:	e9c6 0500 	strd	r0, r5, [r6]
 80092e0:	4608      	mov	r0, r1
 80092e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e6:	fab3 f183 	clz	r1, r3
 80092ea:	2900      	cmp	r1, #0
 80092ec:	d14a      	bne.n	8009384 <__udivmoddi4+0x160>
 80092ee:	42ab      	cmp	r3, r5
 80092f0:	d302      	bcc.n	80092f8 <__udivmoddi4+0xd4>
 80092f2:	4282      	cmp	r2, r0
 80092f4:	f200 80f9 	bhi.w	80094ea <__udivmoddi4+0x2c6>
 80092f8:	1a84      	subs	r4, r0, r2
 80092fa:	eb65 0303 	sbc.w	r3, r5, r3
 80092fe:	2001      	movs	r0, #1
 8009300:	4698      	mov	r8, r3
 8009302:	2e00      	cmp	r6, #0
 8009304:	d0e2      	beq.n	80092cc <__udivmoddi4+0xa8>
 8009306:	e9c6 4800 	strd	r4, r8, [r6]
 800930a:	e7df      	b.n	80092cc <__udivmoddi4+0xa8>
 800930c:	b902      	cbnz	r2, 8009310 <__udivmoddi4+0xec>
 800930e:	deff      	udf	#255	; 0xff
 8009310:	fab2 f282 	clz	r2, r2
 8009314:	2a00      	cmp	r2, #0
 8009316:	f040 8091 	bne.w	800943c <__udivmoddi4+0x218>
 800931a:	eba1 050c 	sub.w	r5, r1, ip
 800931e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009322:	fa1f fe8c 	uxth.w	lr, ip
 8009326:	2101      	movs	r1, #1
 8009328:	fbb5 f3f7 	udiv	r3, r5, r7
 800932c:	fb07 5013 	mls	r0, r7, r3, r5
 8009330:	0c25      	lsrs	r5, r4, #16
 8009332:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8009336:	fb0e f003 	mul.w	r0, lr, r3
 800933a:	42a8      	cmp	r0, r5
 800933c:	d908      	bls.n	8009350 <__udivmoddi4+0x12c>
 800933e:	eb1c 0505 	adds.w	r5, ip, r5
 8009342:	f103 38ff 	add.w	r8, r3, #4294967295
 8009346:	d202      	bcs.n	800934e <__udivmoddi4+0x12a>
 8009348:	42a8      	cmp	r0, r5
 800934a:	f200 80cb 	bhi.w	80094e4 <__udivmoddi4+0x2c0>
 800934e:	4643      	mov	r3, r8
 8009350:	1a2d      	subs	r5, r5, r0
 8009352:	b2a4      	uxth	r4, r4
 8009354:	fbb5 f0f7 	udiv	r0, r5, r7
 8009358:	fb07 5510 	mls	r5, r7, r0, r5
 800935c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009360:	fb0e fe00 	mul.w	lr, lr, r0
 8009364:	45a6      	cmp	lr, r4
 8009366:	d908      	bls.n	800937a <__udivmoddi4+0x156>
 8009368:	eb1c 0404 	adds.w	r4, ip, r4
 800936c:	f100 35ff 	add.w	r5, r0, #4294967295
 8009370:	d202      	bcs.n	8009378 <__udivmoddi4+0x154>
 8009372:	45a6      	cmp	lr, r4
 8009374:	f200 80bb 	bhi.w	80094ee <__udivmoddi4+0x2ca>
 8009378:	4628      	mov	r0, r5
 800937a:	eba4 040e 	sub.w	r4, r4, lr
 800937e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8009382:	e79e      	b.n	80092c2 <__udivmoddi4+0x9e>
 8009384:	f1c1 0720 	rsb	r7, r1, #32
 8009388:	408b      	lsls	r3, r1
 800938a:	fa22 fc07 	lsr.w	ip, r2, r7
 800938e:	ea4c 0c03 	orr.w	ip, ip, r3
 8009392:	fa20 f407 	lsr.w	r4, r0, r7
 8009396:	fa05 f301 	lsl.w	r3, r5, r1
 800939a:	431c      	orrs	r4, r3
 800939c:	40fd      	lsrs	r5, r7
 800939e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80093a2:	fa00 f301 	lsl.w	r3, r0, r1
 80093a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80093aa:	0c20      	lsrs	r0, r4, #16
 80093ac:	fa1f fe8c 	uxth.w	lr, ip
 80093b0:	fb09 5518 	mls	r5, r9, r8, r5
 80093b4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80093b8:	fb08 f00e 	mul.w	r0, r8, lr
 80093bc:	42a8      	cmp	r0, r5
 80093be:	fa02 f201 	lsl.w	r2, r2, r1
 80093c2:	d90b      	bls.n	80093dc <__udivmoddi4+0x1b8>
 80093c4:	eb1c 0505 	adds.w	r5, ip, r5
 80093c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80093cc:	f080 8088 	bcs.w	80094e0 <__udivmoddi4+0x2bc>
 80093d0:	42a8      	cmp	r0, r5
 80093d2:	f240 8085 	bls.w	80094e0 <__udivmoddi4+0x2bc>
 80093d6:	f1a8 0802 	sub.w	r8, r8, #2
 80093da:	4465      	add	r5, ip
 80093dc:	1a2d      	subs	r5, r5, r0
 80093de:	b2a4      	uxth	r4, r4
 80093e0:	fbb5 f0f9 	udiv	r0, r5, r9
 80093e4:	fb09 5510 	mls	r5, r9, r0, r5
 80093e8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80093ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80093f0:	45ae      	cmp	lr, r5
 80093f2:	d908      	bls.n	8009406 <__udivmoddi4+0x1e2>
 80093f4:	eb1c 0505 	adds.w	r5, ip, r5
 80093f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80093fc:	d26c      	bcs.n	80094d8 <__udivmoddi4+0x2b4>
 80093fe:	45ae      	cmp	lr, r5
 8009400:	d96a      	bls.n	80094d8 <__udivmoddi4+0x2b4>
 8009402:	3802      	subs	r0, #2
 8009404:	4465      	add	r5, ip
 8009406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800940a:	fba0 9402 	umull	r9, r4, r0, r2
 800940e:	eba5 050e 	sub.w	r5, r5, lr
 8009412:	42a5      	cmp	r5, r4
 8009414:	46c8      	mov	r8, r9
 8009416:	46a6      	mov	lr, r4
 8009418:	d356      	bcc.n	80094c8 <__udivmoddi4+0x2a4>
 800941a:	d053      	beq.n	80094c4 <__udivmoddi4+0x2a0>
 800941c:	b15e      	cbz	r6, 8009436 <__udivmoddi4+0x212>
 800941e:	ebb3 0208 	subs.w	r2, r3, r8
 8009422:	eb65 050e 	sbc.w	r5, r5, lr
 8009426:	fa05 f707 	lsl.w	r7, r5, r7
 800942a:	fa22 f301 	lsr.w	r3, r2, r1
 800942e:	40cd      	lsrs	r5, r1
 8009430:	431f      	orrs	r7, r3
 8009432:	e9c6 7500 	strd	r7, r5, [r6]
 8009436:	2100      	movs	r1, #0
 8009438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943c:	f1c2 0320 	rsb	r3, r2, #32
 8009440:	fa20 f103 	lsr.w	r1, r0, r3
 8009444:	fa0c fc02 	lsl.w	ip, ip, r2
 8009448:	fa25 f303 	lsr.w	r3, r5, r3
 800944c:	4095      	lsls	r5, r2
 800944e:	430d      	orrs	r5, r1
 8009450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009454:	fa1f fe8c 	uxth.w	lr, ip
 8009458:	fbb3 f1f7 	udiv	r1, r3, r7
 800945c:	fb07 3011 	mls	r0, r7, r1, r3
 8009460:	0c2b      	lsrs	r3, r5, #16
 8009462:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009466:	fb01 f00e 	mul.w	r0, r1, lr
 800946a:	4298      	cmp	r0, r3
 800946c:	fa04 f402 	lsl.w	r4, r4, r2
 8009470:	d908      	bls.n	8009484 <__udivmoddi4+0x260>
 8009472:	eb1c 0303 	adds.w	r3, ip, r3
 8009476:	f101 38ff 	add.w	r8, r1, #4294967295
 800947a:	d22f      	bcs.n	80094dc <__udivmoddi4+0x2b8>
 800947c:	4298      	cmp	r0, r3
 800947e:	d92d      	bls.n	80094dc <__udivmoddi4+0x2b8>
 8009480:	3902      	subs	r1, #2
 8009482:	4463      	add	r3, ip
 8009484:	1a1b      	subs	r3, r3, r0
 8009486:	b2ad      	uxth	r5, r5
 8009488:	fbb3 f0f7 	udiv	r0, r3, r7
 800948c:	fb07 3310 	mls	r3, r7, r0, r3
 8009490:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8009494:	fb00 f30e 	mul.w	r3, r0, lr
 8009498:	42ab      	cmp	r3, r5
 800949a:	d908      	bls.n	80094ae <__udivmoddi4+0x28a>
 800949c:	eb1c 0505 	adds.w	r5, ip, r5
 80094a0:	f100 38ff 	add.w	r8, r0, #4294967295
 80094a4:	d216      	bcs.n	80094d4 <__udivmoddi4+0x2b0>
 80094a6:	42ab      	cmp	r3, r5
 80094a8:	d914      	bls.n	80094d4 <__udivmoddi4+0x2b0>
 80094aa:	3802      	subs	r0, #2
 80094ac:	4465      	add	r5, ip
 80094ae:	1aed      	subs	r5, r5, r3
 80094b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80094b4:	e738      	b.n	8009328 <__udivmoddi4+0x104>
 80094b6:	4631      	mov	r1, r6
 80094b8:	4630      	mov	r0, r6
 80094ba:	e707      	b.n	80092cc <__udivmoddi4+0xa8>
 80094bc:	4686      	mov	lr, r0
 80094be:	e6e5      	b.n	800928c <__udivmoddi4+0x68>
 80094c0:	4618      	mov	r0, r3
 80094c2:	e6fa      	b.n	80092ba <__udivmoddi4+0x96>
 80094c4:	454b      	cmp	r3, r9
 80094c6:	d2a9      	bcs.n	800941c <__udivmoddi4+0x1f8>
 80094c8:	ebb9 0802 	subs.w	r8, r9, r2
 80094cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80094d0:	3801      	subs	r0, #1
 80094d2:	e7a3      	b.n	800941c <__udivmoddi4+0x1f8>
 80094d4:	4640      	mov	r0, r8
 80094d6:	e7ea      	b.n	80094ae <__udivmoddi4+0x28a>
 80094d8:	4620      	mov	r0, r4
 80094da:	e794      	b.n	8009406 <__udivmoddi4+0x1e2>
 80094dc:	4641      	mov	r1, r8
 80094de:	e7d1      	b.n	8009484 <__udivmoddi4+0x260>
 80094e0:	46d0      	mov	r8, sl
 80094e2:	e77b      	b.n	80093dc <__udivmoddi4+0x1b8>
 80094e4:	3b02      	subs	r3, #2
 80094e6:	4465      	add	r5, ip
 80094e8:	e732      	b.n	8009350 <__udivmoddi4+0x12c>
 80094ea:	4608      	mov	r0, r1
 80094ec:	e709      	b.n	8009302 <__udivmoddi4+0xde>
 80094ee:	4464      	add	r4, ip
 80094f0:	3802      	subs	r0, #2
 80094f2:	e742      	b.n	800937a <__udivmoddi4+0x156>

080094f4 <__aeabi_idiv0>:
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop

080094f8 <osDelayTask>:
 * @brief Delay routine
 * @param[in] delay Amount of time for which the calling task should block
 **/

void osDelayTask(systime_t delay)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
   //Delay the task for the specified duration
   vTaskDelay(OS_MS_TO_SYSTICKS(delay));
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f00d f86b 	bl	80165dc <vTaskDelay>
}
 8009506:	bf00      	nop
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009512:	f00d fd11 	bl	8016f38 <xTaskGetSchedulerState>
 8009516:	4603      	mov	r3, r0
 8009518:	2b01      	cmp	r3, #1
 800951a:	d001      	beq.n	8009520 <osSuspendAllTasks+0x12>
   {
      //Suspend all tasks
      vTaskSuspendAll();
 800951c:	f00d f902 	bl	8016724 <vTaskSuspendAll>
   }
}
 8009520:	bf00      	nop
 8009522:	bd80      	pop	{r7, pc}

08009524 <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009528:	f00d fd06 	bl	8016f38 <xTaskGetSchedulerState>
 800952c:	4603      	mov	r3, r0
 800952e:	2b01      	cmp	r3, #1
 8009530:	d001      	beq.n	8009536 <osResumeAllTasks+0x12>
   {
      //Resume all tasks
      xTaskResumeAll();
 8009532:	f00d f905 	bl	8016740 <xTaskResumeAll>
   }
}
 8009536:	bf00      	nop
 8009538:	bd80      	pop	{r7, pc}

0800953a <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = pvPortMalloc(size);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f00e fc52 	bl	8017dec <pvPortMalloc>
 8009548:	60f8      	str	r0, [r7, #12]
   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 800954a:	68fb      	ldr	r3, [r7, #12]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

__weak_func void osFreeMem(void *p)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      vPortFree(p);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f00e fd0c 	bl	8017f80 <vPortFree>
   }
}
 8009568:	bf00      	nop
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8009574:	bf00      	nop
 8009576:	46bd      	mov	sp, r7
 8009578:	bc80      	pop	{r7}
 800957a:	4770      	bx	lr

0800957c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4a06      	ldr	r2, [pc, #24]	; (80095a4 <vApplicationGetIdleTaskMemory+0x28>)
 800958c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	4a05      	ldr	r2, [pc, #20]	; (80095a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2280      	movs	r2, #128	; 0x80
 8009598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800959a:	bf00      	nop
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	bc80      	pop	{r7}
 80095a2:	4770      	bx	lr
 80095a4:	20000a68 	.word	0x20000a68
 80095a8:	20000ee8 	.word	0x20000ee8

080095ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4a07      	ldr	r2, [pc, #28]	; (80095d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80095bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	4a06      	ldr	r2, [pc, #24]	; (80095dc <vApplicationGetTimerTaskMemory+0x30>)
 80095c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80095cc:	bf00      	nop
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bc80      	pop	{r7}
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	200010e8 	.word	0x200010e8
 80095dc:	20001568 	.word	0x20001568

080095e0 <vApplicationStackOverflowHook>:
 * @brief FreeRTOS stackoverflow detection callback
 **/

void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    signed char *pcTaskName )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
	fprintf(stderr, "Stack overflow in task '%s'!\r\n", pcTaskName);
 80095ea:	4b09      	ldr	r3, [pc, #36]	; (8009610 <vApplicationStackOverflowHook+0x30>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	4908      	ldr	r1, [pc, #32]	; (8009614 <vApplicationStackOverflowHook+0x34>)
 80095f4:	4618      	mov	r0, r3
 80095f6:	f00e fddd 	bl	80181b4 <fprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800960c:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	while(1);
 800960e:	e7fe      	b.n	800960e <vApplicationStackOverflowHook+0x2e>
 8009610:	20000098 	.word	0x20000098
 8009614:	0801f0c8 	.word	0x0801f0c8

08009618 <vApplicationMallocFailedHook>:
/**
 * @brief FreeRTOS memory allocation failed detection callback
 **/

void vApplicationMallocFailedHook( void )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
	fprintf(stderr, "OS memory allocation failed!\r\n");
 800961e:	4b09      	ldr	r3, [pc, #36]	; (8009644 <vApplicationMallocFailedHook+0x2c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	221e      	movs	r2, #30
 8009626:	2101      	movs	r1, #1
 8009628:	4807      	ldr	r0, [pc, #28]	; (8009648 <vApplicationMallocFailedHook+0x30>)
 800962a:	f00e ff67 	bl	80184fc <fwrite>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	607b      	str	r3, [r7, #4]
}
 8009640:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	while(1);
 8009642:	e7fe      	b.n	8009642 <vApplicationMallocFailedHook+0x2a>
 8009644:	20000098 	.word	0x20000098
 8009648:	0801f0e8 	.word	0x0801f0e8

0800964c <Int2Str>:
 * @param  intnum: The integer to be converted
 * @retval None
 **/

void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 8009656:	4b25      	ldr	r3, [pc, #148]	; (80096ec <Int2Str+0xa0>)
 8009658:	613b      	str	r3, [r7, #16]
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	2300      	movs	r3, #0
 8009660:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 8009662:	2300      	movs	r3, #0
 8009664:	617b      	str	r3, [r7, #20]
 8009666:	e038      	b.n	80096da <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009670:	b2da      	uxtb	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	1c59      	adds	r1, r3, #1
 8009676:	60f9      	str	r1, [r7, #12]
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	440b      	add	r3, r1
 800967c:	3230      	adds	r2, #48	; 0x30
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	693a      	ldr	r2, [r7, #16]
 8009686:	fbb3 f2f2 	udiv	r2, r3, r2
 800968a:	6939      	ldr	r1, [r7, #16]
 800968c:	fb01 f202 	mul.w	r2, r1, r2
 8009690:	1a9b      	subs	r3, r3, r2
 8009692:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	4a16      	ldr	r2, [pc, #88]	; (80096f0 <Int2Str+0xa4>)
 8009698:	fba2 2303 	umull	r2, r3, r2, r3
 800969c:	08db      	lsrs	r3, r3, #3
 800969e:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	4413      	add	r3, r2
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2b30      	cmp	r3, #48	; 0x30
 80096ac:	bf0c      	ite	eq
 80096ae:	2301      	moveq	r3, #1
 80096b0:	2300      	movne	r3, #0
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bf0c      	ite	eq
 80096ba:	2301      	moveq	r3, #1
 80096bc:	2300      	movne	r3, #0
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	4013      	ands	r3, r2
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <Int2Str+0x82>
    {
      pos = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	e002      	b.n	80096d4 <Int2Str+0x88>
    }
    else
    {
      status++;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	3301      	adds	r3, #1
 80096d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	3301      	adds	r3, #1
 80096d8:	617b      	str	r3, [r7, #20]
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b09      	cmp	r3, #9
 80096de:	d9c3      	bls.n	8009668 <Int2Str+0x1c>
    }
  }
}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	371c      	adds	r7, #28
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr
 80096ec:	3b9aca00 	.word	0x3b9aca00
 80096f0:	cccccccd 	.word	0xcccccccd

080096f4 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]
 8009702:	2300      	movs	r3, #0
 8009704:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	2b30      	cmp	r3, #48	; 0x30
 8009710:	f040 80d7 	bne.w	80098c2 <Str2Int+0x1ce>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3301      	adds	r3, #1
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b78      	cmp	r3, #120	; 0x78
 800971c:	d005      	beq.n	800972a <Str2Int+0x36>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	3301      	adds	r3, #1
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b58      	cmp	r3, #88	; 0x58
 8009726:	f040 80cc 	bne.w	80098c2 <Str2Int+0x1ce>
  {
    i = 2;
 800972a:	2302      	movs	r3, #2
 800972c:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800972e:	e057      	b.n	80097e0 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	4413      	add	r3, r2
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b40      	cmp	r3, #64	; 0x40
 800973a:	d905      	bls.n	8009748 <Str2Int+0x54>
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	4413      	add	r3, r2
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b46      	cmp	r3, #70	; 0x46
 8009746:	d917      	bls.n	8009778 <Str2Int+0x84>
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	4413      	add	r3, r2
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b60      	cmp	r3, #96	; 0x60
 8009752:	d905      	bls.n	8009760 <Str2Int+0x6c>
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	4413      	add	r3, r2
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b66      	cmp	r3, #102	; 0x66
 800975e:	d90b      	bls.n	8009778 <Str2Int+0x84>
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	4413      	add	r3, r2
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b2f      	cmp	r3, #47	; 0x2f
 800976a:	d936      	bls.n	80097da <Str2Int+0xe6>
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	4413      	add	r3, r2
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b39      	cmp	r3, #57	; 0x39
 8009776:	d830      	bhi.n	80097da <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	011b      	lsls	r3, r3, #4
 800977c:	6879      	ldr	r1, [r7, #4]
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	440a      	add	r2, r1
 8009782:	7812      	ldrb	r2, [r2, #0]
 8009784:	2a2f      	cmp	r2, #47	; 0x2f
 8009786:	d90b      	bls.n	80097a0 <Str2Int+0xac>
 8009788:	6879      	ldr	r1, [r7, #4]
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	440a      	add	r2, r1
 800978e:	7812      	ldrb	r2, [r2, #0]
 8009790:	2a39      	cmp	r2, #57	; 0x39
 8009792:	d805      	bhi.n	80097a0 <Str2Int+0xac>
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	440a      	add	r2, r1
 800979a:	7812      	ldrb	r2, [r2, #0]
 800979c:	3a30      	subs	r2, #48	; 0x30
 800979e:	e016      	b.n	80097ce <Str2Int+0xda>
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	440a      	add	r2, r1
 80097a6:	7812      	ldrb	r2, [r2, #0]
 80097a8:	2a40      	cmp	r2, #64	; 0x40
 80097aa:	d90b      	bls.n	80097c4 <Str2Int+0xd0>
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	440a      	add	r2, r1
 80097b2:	7812      	ldrb	r2, [r2, #0]
 80097b4:	2a46      	cmp	r2, #70	; 0x46
 80097b6:	d805      	bhi.n	80097c4 <Str2Int+0xd0>
 80097b8:	6879      	ldr	r1, [r7, #4]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	440a      	add	r2, r1
 80097be:	7812      	ldrb	r2, [r2, #0]
 80097c0:	3a37      	subs	r2, #55	; 0x37
 80097c2:	e004      	b.n	80097ce <Str2Int+0xda>
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	440a      	add	r2, r1
 80097ca:	7812      	ldrb	r2, [r2, #0]
 80097cc:	3a57      	subs	r2, #87	; 0x57
 80097ce:	4413      	add	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	3301      	adds	r3, #1
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	e002      	b.n	80097e0 <Str2Int+0xec>
        res = 0;
 80097da:	2300      	movs	r3, #0
 80097dc:	613b      	str	r3, [r7, #16]
        break;
 80097de:	e008      	b.n	80097f2 <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b0a      	cmp	r3, #10
 80097e4:	d805      	bhi.n	80097f2 <Str2Int+0xfe>
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	4413      	add	r3, r2
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d19e      	bne.n	8009730 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	4413      	add	r3, r2
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d167      	bne.n	80098ce <Str2Int+0x1da>
    {
      *p_intnum = val;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	601a      	str	r2, [r3, #0]
      res = 1;
 8009804:	2301      	movs	r3, #1
 8009806:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8009808:	e061      	b.n	80098ce <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	4413      	add	r3, r2
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d105      	bne.n	8009822 <Str2Int+0x12e>
      {
        *p_intnum = val;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 800981c:	2301      	movs	r3, #1
 800981e:	613b      	str	r3, [r7, #16]
 8009820:	e04c      	b.n	80098bc <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	4413      	add	r3, r2
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b6b      	cmp	r3, #107	; 0x6b
 800982c:	d005      	beq.n	800983a <Str2Int+0x146>
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	4413      	add	r3, r2
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2b4b      	cmp	r3, #75	; 0x4b
 8009838:	d10b      	bne.n	8009852 <Str2Int+0x15e>
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d008      	beq.n	8009852 <Str2Int+0x15e>
      {
        val = val << 10;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	029b      	lsls	r3, r3, #10
 8009844:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	601a      	str	r2, [r3, #0]
        res = 1;
 800984c:	2301      	movs	r3, #1
 800984e:	613b      	str	r3, [r7, #16]
 8009850:	e034      	b.n	80098bc <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	4413      	add	r3, r2
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b6d      	cmp	r3, #109	; 0x6d
 800985c:	d005      	beq.n	800986a <Str2Int+0x176>
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	4413      	add	r3, r2
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	2b4d      	cmp	r3, #77	; 0x4d
 8009868:	d10b      	bne.n	8009882 <Str2Int+0x18e>
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d008      	beq.n	8009882 <Str2Int+0x18e>
      {
        val = val << 20;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	051b      	lsls	r3, r3, #20
 8009874:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	601a      	str	r2, [r3, #0]
        res = 1;
 800987c:	2301      	movs	r3, #1
 800987e:	613b      	str	r3, [r7, #16]
 8009880:	e01c      	b.n	80098bc <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	4413      	add	r3, r2
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	2b2f      	cmp	r3, #47	; 0x2f
 800988c:	d913      	bls.n	80098b6 <Str2Int+0x1c2>
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	4413      	add	r3, r2
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	2b39      	cmp	r3, #57	; 0x39
 8009898:	d80d      	bhi.n	80098b6 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	4613      	mov	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	4413      	add	r3, r2
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	4619      	mov	r1, r3
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	4413      	add	r3, r2
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	440b      	add	r3, r1
 80098b0:	3b30      	subs	r3, #48	; 0x30
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e002      	b.n	80098bc <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	613b      	str	r3, [r7, #16]
        break;
 80098ba:	e008      	b.n	80098ce <Str2Int+0x1da>
      }
      i++;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	3301      	adds	r3, #1
 80098c0:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2b0a      	cmp	r3, #10
 80098c6:	d802      	bhi.n	80098ce <Str2Int+0x1da>
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d19d      	bne.n	800980a <Str2Int+0x116>
    }
  }

  return res;
 80098ce:	693b      	ldr	r3, [r7, #16]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	371c      	adds	r7, #28
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bc80      	pop	{r7}
 80098d8:	4770      	bx	lr
	...

080098dc <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 80098e8:	e002      	b.n	80098f0 <Serial_PutString+0x14>
  {
    length++;
 80098ea:	89fb      	ldrh	r3, [r7, #14]
 80098ec:	3301      	adds	r3, #1
 80098ee:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 80098f0:	89fb      	ldrh	r3, [r7, #14]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	4413      	add	r3, r2
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1f6      	bne.n	80098ea <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 80098fc:	89fa      	ldrh	r2, [r7, #14]
 80098fe:	2364      	movs	r3, #100	; 0x64
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	4803      	ldr	r0, [pc, #12]	; (8009910 <Serial_PutString+0x34>)
 8009904:	f008 fd32 	bl	801236c <HAL_UART_Transmit>
}
 8009908:	bf00      	nop
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20001c58 	.word	0x20001c58

08009914 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 800991e:	4b0a      	ldr	r3, [pc, #40]	; (8009948 <Serial_PutByte+0x34>)
 8009920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009924:	2ba0      	cmp	r3, #160	; 0xa0
 8009926:	d103      	bne.n	8009930 <Serial_PutByte+0x1c>
  {
    UartHandle.gState = HAL_UART_STATE_READY;
 8009928:	4b07      	ldr	r3, [pc, #28]	; (8009948 <Serial_PutByte+0x34>)
 800992a:	2220      	movs	r2, #32
 800992c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 8009930:	1df9      	adds	r1, r7, #7
 8009932:	2364      	movs	r3, #100	; 0x64
 8009934:	2201      	movs	r2, #1
 8009936:	4804      	ldr	r0, [pc, #16]	; (8009948 <Serial_PutByte+0x34>)
 8009938:	f008 fd18 	bl	801236c <HAL_UART_Transmit>
 800993c:	4603      	mov	r3, r0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20001c58 	.word	0x20001c58

0800994c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8009954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800995a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4313      	orrs	r3, r2
 8009962:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8009964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4013      	ands	r3, r2
 800996e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009970:	68fb      	ldr	r3, [r7, #12]
}
 8009972:	bf00      	nop
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	bc80      	pop	{r7}
 800997a:	4770      	bx	lr

0800997c <updateDevice>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool updateDevice()
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
	uint8_t c;
	bool status = false;
 8009982:	2300      	movs	r3, #0
 8009984:	71fb      	strb	r3, [r7, #7]
	bool bootReady = false;
 8009986:	2300      	movs	r3, #0
 8009988:	71bb      	strb	r3, [r7, #6]
	serialPutStr("E5 POR\n");
 800998a:	4816      	ldr	r0, [pc, #88]	; (80099e4 <updateDevice+0x68>)
 800998c:	f00b f98c 	bl	8014ca8 <serialPutStr>
    do
    {
    	if(HAL_UART_Receive(&huart2, &c, 1, 100) == HAL_OK)
 8009990:	1d79      	adds	r1, r7, #5
 8009992:	2364      	movs	r3, #100	; 0x64
 8009994:	2201      	movs	r2, #1
 8009996:	4814      	ldr	r0, [pc, #80]	; (80099e8 <updateDevice+0x6c>)
 8009998:	f008 fd6e 	bl	8012478 <HAL_UART_Receive>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d113      	bne.n	80099ca <updateDevice+0x4e>
		{
    		switch(c)
 80099a2:	797b      	ldrb	r3, [r7, #5]
 80099a4:	2b61      	cmp	r3, #97	; 0x61
 80099a6:	d002      	beq.n	80099ae <updateDevice+0x32>
 80099a8:	2b62      	cmp	r3, #98	; 0x62
 80099aa:	d005      	beq.n	80099b8 <updateDevice+0x3c>
 80099ac:	e009      	b.n	80099c2 <updateDevice+0x46>
    		{
    		case 'a':
    			status = true;
 80099ae:	2301      	movs	r3, #1
 80099b0:	71fb      	strb	r3, [r7, #7]
    			bootReady = true;
 80099b2:	2301      	movs	r3, #1
 80099b4:	71bb      	strb	r3, [r7, #6]
    			break;
 80099b6:	e009      	b.n	80099cc <updateDevice+0x50>

    		case 'b':
    			status = false;
 80099b8:	2300      	movs	r3, #0
 80099ba:	71fb      	strb	r3, [r7, #7]
    			bootReady = true;
 80099bc:	2301      	movs	r3, #1
 80099be:	71bb      	strb	r3, [r7, #6]
    			break;
 80099c0:	e004      	b.n	80099cc <updateDevice+0x50>
    		default:
    			serialPutStr("Unknown Command\n");
 80099c2:	480a      	ldr	r0, [pc, #40]	; (80099ec <updateDevice+0x70>)
 80099c4:	f00b f970 	bl	8014ca8 <serialPutStr>
    			break;
 80099c8:	e000      	b.n	80099cc <updateDevice+0x50>
    		}
		}
 80099ca:	bf00      	nop
    }while(!bootReady);
 80099cc:	79bb      	ldrb	r3, [r7, #6]
 80099ce:	f083 0301 	eor.w	r3, r3, #1
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1db      	bne.n	8009990 <updateDevice+0x14>

	return status;
 80099d8:	79fb      	ldrb	r3, [r7, #7]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	0801f130 	.word	0x0801f130
 80099e8:	20001ab4 	.word	0x20001ab4
 80099ec:	0801f138 	.word	0x0801f138

080099f0 <__io_putchar>:

int __io_putchar(int ch)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	uint8_t c;

	c = (uint8_t)ch;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	73fb      	strb	r3, [r7, #15]

	if(HAL_UART_Transmit(&huart2, &c, 1, 100) == HAL_OK)
 80099fe:	f107 010f 	add.w	r1, r7, #15
 8009a02:	2364      	movs	r3, #100	; 0x64
 8009a04:	2201      	movs	r2, #1
 8009a06:	4807      	ldr	r0, [pc, #28]	; (8009a24 <__io_putchar+0x34>)
 8009a08:	f008 fcb0 	bl	801236c <HAL_UART_Transmit>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <__io_putchar+0x26>
		return ch;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	e001      	b.n	8009a1a <__io_putchar+0x2a>
	else
		return -1;
 8009a16:	f04f 33ff 	mov.w	r3, #4294967295
	return -1;
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20001ab4 	.word	0x20001ab4

08009a28 <ledTaskHandler>:
/**
 * @brief Led task routine (for debug purpose)
 **/

void ledTaskHandler(void const * argument)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8009a30:	2201      	movs	r2, #1
 8009a32:	2140      	movs	r1, #64	; 0x40
 8009a34:	4807      	ldr	r0, [pc, #28]	; (8009a54 <ledTaskHandler+0x2c>)
 8009a36:	f005 f8b7 	bl	800eba8 <HAL_GPIO_WritePin>
		osDelay(100);
 8009a3a:	2064      	movs	r0, #100	; 0x64
 8009a3c:	f00b fab5 	bl	8014faa <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8009a40:	2200      	movs	r2, #0
 8009a42:	2140      	movs	r1, #64	; 0x40
 8009a44:	4803      	ldr	r0, [pc, #12]	; (8009a54 <ledTaskHandler+0x2c>)
 8009a46:	f005 f8af 	bl	800eba8 <HAL_GPIO_WritePin>
		osDelay(900);
 8009a4a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8009a4e:	f00b faac 	bl	8014faa <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8009a52:	e7ed      	b.n	8009a30 <ledTaskHandler+0x8>
 8009a54:	48000400 	.word	0x48000400

08009a58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8009a58:	b5b0      	push	{r4, r5, r7, lr}
 8009a5a:	b0a4      	sub	sp, #144	; 0x90
 8009a5c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009a5e:	f003 fa35 	bl	800cecc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8009a62:	f000 f8b7 	bl	8009bd4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8009a66:	f000 fb09 	bl	800a07c <MX_GPIO_Init>
	MX_ADC_Init();
 8009a6a:	f000 f90f 	bl	8009c8c <MX_ADC_Init>
	MX_LPUART1_UART_Init();
 8009a6e:	f000 f99b 	bl	8009da8 <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 8009a72:	f000 f9e3 	bl	8009e3c <MX_USART2_UART_Init>
	MX_RTC_Init();
 8009a76:	f000 fa2d 	bl	8009ed4 <MX_RTC_Init>
	MX_SPI2_Init();
 8009a7a:	f000 fac1 	bl	800a000 <MX_SPI2_Init>
	MX_I2C2_Init();
 8009a7e:	f000 f953 	bl	8009d28 <MX_I2C2_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UartMutex */
	osMutexDef(UartMutex);
 8009a82:	2300      	movs	r3, #0
 8009a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8009a8e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009a92:	4618      	mov	r0, r3
 8009a94:	f00b fa9d 	bl	8014fd2 <osMutexCreate>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	4a41      	ldr	r2, [pc, #260]	; (8009ba0 <main+0x148>)
 8009a9c:	6013      	str	r3, [r2, #0]

	/* definition and creation of SpiMutex */
	osMutexDef(SpiMutex);
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 8009aaa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f00b fa8f 	bl	8014fd2 <osMutexCreate>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	4a3b      	ldr	r2, [pc, #236]	; (8009ba4 <main+0x14c>)
 8009ab8:	6013      	str	r3, [r2, #0]

	/* definition and creation of I2cMutex */
	osMutexDef(I2cMutex);
 8009aba:	2300      	movs	r3, #0
 8009abc:	67bb      	str	r3, [r7, #120]	; 0x78
 8009abe:	2300      	movs	r3, #0
 8009ac0:	67fb      	str	r3, [r7, #124]	; 0x7c
	I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 8009ac2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f00b fa83 	bl	8014fd2 <osMutexCreate>
 8009acc:	4603      	mov	r3, r0
 8009ace:	4a36      	ldr	r2, [pc, #216]	; (8009ba8 <main+0x150>)
 8009ad0:	6013      	str	r3, [r2, #0]

	/* definition and creation of RtcMutex */
	osMutexDef(RtcMutex);
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	677b      	str	r3, [r7, #116]	; 0x74
	RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 8009ada:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f00b fa77 	bl	8014fd2 <osMutexCreate>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	4a31      	ldr	r2, [pc, #196]	; (8009bac <main+0x154>)
 8009ae8:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */

	// definition and creation of iapMutex */
	osMutexDef(iapMutex);
 8009aea:	2300      	movs	r3, #0
 8009aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8009aee:	2300      	movs	r3, #0
 8009af0:	66fb      	str	r3, [r7, #108]	; 0x6c
	iapMutexHandle = osMutexCreate(osMutex(iapMutex));
 8009af2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009af6:	4618      	mov	r0, r3
 8009af8:	f00b fa6b 	bl	8014fd2 <osMutexCreate>
 8009afc:	4603      	mov	r3, r0
 8009afe:	4a2c      	ldr	r2, [pc, #176]	; (8009bb0 <main+0x158>)
 8009b00:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of xQueue1 */
	osMessageQDef(xQueue1, 100, uint16_t);
 8009b02:	4b2c      	ldr	r3, [pc, #176]	; (8009bb4 <main+0x15c>)
 8009b04:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009b08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 8009b0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b12:	2100      	movs	r1, #0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f00b faf9 	bl	801510c <osMessageCreate>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	4a26      	ldr	r2, [pc, #152]	; (8009bb8 <main+0x160>)
 8009b1e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	// definition and creation of uartUserTask

	if(updateDevice())
 8009b20:	f7ff ff2c 	bl	800997c <updateDevice>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d026      	beq.n	8009b78 <main+0x120>
	{
		osThreadDef(uartUserTask, uartUserTaskHandler, osPriorityNormal, 0, 500);
 8009b2a:	4b24      	ldr	r3, [pc, #144]	; (8009bbc <main+0x164>)
 8009b2c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009b30:	461d      	mov	r5, r3
 8009b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		uartUserTaskHandle = osThreadCreate(osThread(uartUserTask), NULL);
 8009b3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009b42:	2100      	movs	r1, #0
 8009b44:	4618      	mov	r0, r3
 8009b46:	f00b f9e4 	bl	8014f12 <osThreadCreate>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	4a1c      	ldr	r2, [pc, #112]	; (8009bc0 <main+0x168>)
 8009b4e:	6013      	str	r3, [r2, #0]

		// definition and creation of ledTask
		osThreadDef(ledTask, ledTaskHandler, osPriorityNormal, 0, 128);
 8009b50:	4b1c      	ldr	r3, [pc, #112]	; (8009bc4 <main+0x16c>)
 8009b52:	f107 0420 	add.w	r4, r7, #32
 8009b56:	461d      	mov	r5, r3
 8009b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8009b64:	f107 0320 	add.w	r3, r7, #32
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f00b f9d1 	bl	8014f12 <osThreadCreate>
 8009b70:	4603      	mov	r3, r0
 8009b72:	4a15      	ldr	r2, [pc, #84]	; (8009bc8 <main+0x170>)
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	e010      	b.n	8009b9a <main+0x142>
	}
	else
	{
		osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 500);
 8009b78:	4b14      	ldr	r3, [pc, #80]	; (8009bcc <main+0x174>)
 8009b7a:	1d3c      	adds	r4, r7, #4
 8009b7c:	461d      	mov	r5, r3
 8009b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 8009b8a:	1d3b      	adds	r3, r7, #4
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f00b f9bf 	bl	8014f12 <osThreadCreate>
 8009b94:	4603      	mov	r3, r0
 8009b96:	4a0e      	ldr	r2, [pc, #56]	; (8009bd0 <main+0x178>)
 8009b98:	6013      	str	r3, [r2, #0]


	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8009b9a:	f00b f9b3 	bl	8014f04 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8009b9e:	e7fe      	b.n	8009b9e <main+0x146>
 8009ba0:	20001bec 	.word	0x20001bec
 8009ba4:	20001bf0 	.word	0x20001bf0
 8009ba8:	20001bf4 	.word	0x20001bf4
 8009bac:	20001bf8 	.word	0x20001bf8
 8009bb0:	20001bfc 	.word	0x20001bfc
 8009bb4:	0801f164 	.word	0x0801f164
 8009bb8:	20001be8 	.word	0x20001be8
 8009bbc:	0801f174 	.word	0x0801f174
 8009bc0:	20001c04 	.word	0x20001c04
 8009bc4:	0801f190 	.word	0x0801f190
 8009bc8:	20001c00 	.word	0x20001c00
 8009bcc:	0801f1ac 	.word	0x0801f1ac
 8009bd0:	20001be4 	.word	0x20001be4

08009bd4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b09a      	sub	sp, #104	; 0x68
 8009bd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009bda:	f107 0320 	add.w	r3, r7, #32
 8009bde:	2248      	movs	r2, #72	; 0x48
 8009be0:	2100      	movs	r1, #0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f00e ff34 	bl	8018a50 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009be8:	f107 0308 	add.w	r3, r7, #8
 8009bec:	2200      	movs	r2, #0
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	605a      	str	r2, [r3, #4]
 8009bf2:	609a      	str	r2, [r3, #8]
 8009bf4:	60da      	str	r2, [r3, #12]
 8009bf6:	611a      	str	r2, [r3, #16]
 8009bf8:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009bfa:	4b23      	ldr	r3, [pc, #140]	; (8009c88 <SystemClock_Config+0xb4>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009c02:	4a21      	ldr	r2, [pc, #132]	; (8009c88 <SystemClock_Config+0xb4>)
 8009c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	4b1f      	ldr	r3, [pc, #124]	; (8009c88 <SystemClock_Config+0xb4>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c12:	607b      	str	r3, [r7, #4]
 8009c14:	687b      	ldr	r3, [r7, #4]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8009c16:	232a      	movs	r3, #42	; 0x2a
 8009c18:	623b      	str	r3, [r7, #32]
			|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c1e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009c20:	2301      	movs	r3, #1
 8009c22:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009c24:	2340      	movs	r3, #64	; 0x40
 8009c26:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8009c2c:	23b0      	movs	r3, #176	; 0xb0
 8009c2e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8009c30:	2300      	movs	r3, #0
 8009c32:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009c34:	2301      	movs	r3, #1
 8009c36:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c3c:	f107 0320 	add.w	r3, r7, #32
 8009c40:	4618      	mov	r0, r3
 8009c42:	f005 fb97 	bl	800f374 <HAL_RCC_OscConfig>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d001      	beq.n	8009c50 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 8009c4c:	f000 fab2 	bl	800a1b4 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8009c50:	234f      	movs	r3, #79	; 0x4f
 8009c52:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8009c54:	2300      	movs	r3, #0
 8009c56:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8009c64:	2300      	movs	r3, #0
 8009c66:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009c68:	f107 0308 	add.w	r3, r7, #8
 8009c6c:	2102      	movs	r1, #2
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f005 ff02 	bl	800fa78 <HAL_RCC_ClockConfig>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8009c7a:	f000 fa9b 	bl	800a1b4 <Error_Handler>
	}
}
 8009c7e:	bf00      	nop
 8009c80:	3768      	adds	r7, #104	; 0x68
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	58000400 	.word	0x58000400

08009c8c <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC;
 8009c90:	4b23      	ldr	r3, [pc, #140]	; (8009d20 <MX_ADC_Init+0x94>)
 8009c92:	4a24      	ldr	r2, [pc, #144]	; (8009d24 <MX_ADC_Init+0x98>)
 8009c94:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8009c96:	4b22      	ldr	r3, [pc, #136]	; (8009d20 <MX_ADC_Init+0x94>)
 8009c98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009c9c:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8009c9e:	4b20      	ldr	r3, [pc, #128]	; (8009d20 <MX_ADC_Init+0x94>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009ca4:	4b1e      	ldr	r3, [pc, #120]	; (8009d20 <MX_ADC_Init+0x94>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009caa:	4b1d      	ldr	r3, [pc, #116]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009cb0:	4b1b      	ldr	r3, [pc, #108]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cb2:	2204      	movs	r2, #4
 8009cb4:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8009cb6:	4b1a      	ldr	r3, [pc, #104]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8009cbc:	4b18      	ldr	r3, [pc, #96]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8009cc2:	4b17      	ldr	r3, [pc, #92]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	769a      	strb	r2, [r3, #26]
	hadc.Init.NbrOfConversion = 1;
 8009cc8:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cca:	2201      	movs	r2, #1
 8009ccc:	61da      	str	r2, [r3, #28]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8009cce:	4b14      	ldr	r3, [pc, #80]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009cd6:	4b12      	ldr	r3, [pc, #72]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009cdc:	4b10      	ldr	r3, [pc, #64]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 8009ce2:	4b0f      	ldr	r3, [pc, #60]	; (8009d20 <MX_ADC_Init+0x94>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009cea:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8009cf0:	4b0b      	ldr	r3, [pc, #44]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8009cf6:	4b0a      	ldr	r3, [pc, #40]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.OversamplingMode = DISABLE;
 8009cfc:	4b08      	ldr	r3, [pc, #32]	; (8009d20 <MX_ADC_Init+0x94>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8009d04:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <MX_ADC_Init+0x94>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8009d0a:	4805      	ldr	r0, [pc, #20]	; (8009d20 <MX_ADC_Init+0x94>)
 8009d0c:	f003 face 	bl	800d2ac <HAL_ADC_Init>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <MX_ADC_Init+0x8e>
	{
		Error_Handler();
 8009d16:	f000 fa4d 	bl	800a1b4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8009d1a:	bf00      	nop
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20001968 	.word	0x20001968
 8009d24:	40012400 	.word	0x40012400

08009d28 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8009d2c:	4b1b      	ldr	r3, [pc, #108]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d2e:	4a1c      	ldr	r2, [pc, #112]	; (8009da0 <MX_I2C2_Init+0x78>)
 8009d30:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8009d32:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d34:	4a1b      	ldr	r2, [pc, #108]	; (8009da4 <MX_I2C2_Init+0x7c>)
 8009d36:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8009d38:	4b18      	ldr	r3, [pc, #96]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d3e:	4b17      	ldr	r3, [pc, #92]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009d44:	4b15      	ldr	r3, [pc, #84]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8009d4a:	4b14      	ldr	r3, [pc, #80]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009d50:	4b12      	ldr	r3, [pc, #72]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009d56:	4b11      	ldr	r3, [pc, #68]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009d5c:	4b0f      	ldr	r3, [pc, #60]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d5e:	2200      	movs	r2, #0
 8009d60:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009d62:	480e      	ldr	r0, [pc, #56]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d64:	f004 ff37 	bl	800ebd6 <HAL_I2C_Init>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8009d6e:	f000 fa21 	bl	800a1b4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009d72:	2100      	movs	r1, #0
 8009d74:	4809      	ldr	r0, [pc, #36]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d76:	f004 ffbd 	bl	800ecf4 <HAL_I2CEx_ConfigAnalogFilter>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8009d80:	f000 fa18 	bl	800a1b4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009d84:	2100      	movs	r1, #0
 8009d86:	4805      	ldr	r0, [pc, #20]	; (8009d9c <MX_I2C2_Init+0x74>)
 8009d88:	f004 fffe 	bl	800ed88 <HAL_I2CEx_ConfigDigitalFilter>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8009d92:	f000 fa0f 	bl	800a1b4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8009d96:	bf00      	nop
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	200019cc 	.word	0x200019cc
 8009da0:	40005800 	.word	0x40005800
 8009da4:	20303e5d 	.word	0x20303e5d

08009da8 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8009dac:	4b21      	ldr	r3, [pc, #132]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009dae:	4a22      	ldr	r2, [pc, #136]	; (8009e38 <MX_LPUART1_UART_Init+0x90>)
 8009db0:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
 8009db2:	4b20      	ldr	r3, [pc, #128]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009db4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009db8:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009dba:	4b1e      	ldr	r3, [pc, #120]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009dc0:	4b1c      	ldr	r3, [pc, #112]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009dc6:	4b1b      	ldr	r3, [pc, #108]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_RX;
 8009dcc:	4b19      	ldr	r3, [pc, #100]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009dce:	2204      	movs	r2, #4
 8009dd0:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009dd2:	4b18      	ldr	r3, [pc, #96]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009dd8:	4b16      	ldr	r3, [pc, #88]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009dde:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009de0:	2200      	movs	r2, #0
 8009de2:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009de4:	4b13      	ldr	r3, [pc, #76]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8009dea:	4812      	ldr	r0, [pc, #72]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009dec:	f008 fa66 	bl	80122bc <HAL_HalfDuplex_Init>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d001      	beq.n	8009dfa <MX_LPUART1_UART_Init+0x52>
	{
		Error_Handler();
 8009df6:	f000 f9dd 	bl	800a1b4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	480d      	ldr	r0, [pc, #52]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009dfe:	f00a faee 	bl	80143de <HAL_UARTEx_SetTxFifoThreshold>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <MX_LPUART1_UART_Init+0x64>
	{
		Error_Handler();
 8009e08:	f000 f9d4 	bl	800a1b4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4809      	ldr	r0, [pc, #36]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009e10:	f00a fb23 	bl	801445a <HAL_UARTEx_SetRxFifoThreshold>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d001      	beq.n	8009e1e <MX_LPUART1_UART_Init+0x76>
	{
		Error_Handler();
 8009e1a:	f000 f9cb 	bl	800a1b4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8009e1e:	4805      	ldr	r0, [pc, #20]	; (8009e34 <MX_LPUART1_UART_Init+0x8c>)
 8009e20:	f00a faa5 	bl	801436e <HAL_UARTEx_DisableFifoMode>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <MX_LPUART1_UART_Init+0x86>
	{
		Error_Handler();
 8009e2a:	f000 f9c3 	bl	800a1b4 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8009e2e:	bf00      	nop
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20001a20 	.word	0x20001a20
 8009e38:	40008000 	.word	0x40008000

08009e3c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8009e40:	4b22      	ldr	r3, [pc, #136]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e42:	4a23      	ldr	r2, [pc, #140]	; (8009ed0 <MX_USART2_UART_Init+0x94>)
 8009e44:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8009e46:	4b21      	ldr	r3, [pc, #132]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009e4c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009e4e:	4b1f      	ldr	r3, [pc, #124]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8009e54:	4b1d      	ldr	r3, [pc, #116]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8009e5a:	4b1c      	ldr	r3, [pc, #112]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8009e60:	4b1a      	ldr	r3, [pc, #104]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e62:	220c      	movs	r2, #12
 8009e64:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e66:	4b19      	ldr	r3, [pc, #100]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e6c:	4b17      	ldr	r3, [pc, #92]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009e72:	4b16      	ldr	r3, [pc, #88]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009e78:	4b14      	ldr	r3, [pc, #80]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009e7e:	4b13      	ldr	r3, [pc, #76]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8009e84:	4811      	ldr	r0, [pc, #68]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e86:	f008 f9c9 	bl	801221c <HAL_UART_Init>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8009e90:	f000 f990 	bl	800a1b4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e94:	2100      	movs	r1, #0
 8009e96:	480d      	ldr	r0, [pc, #52]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009e98:	f00a faa1 	bl	80143de <HAL_UARTEx_SetTxFifoThreshold>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d001      	beq.n	8009ea6 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8009ea2:	f000 f987 	bl	800a1b4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	4808      	ldr	r0, [pc, #32]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009eaa:	f00a fad6 	bl	801445a <HAL_UARTEx_SetRxFifoThreshold>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8009eb4:	f000 f97e 	bl	800a1b4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009eb8:	4804      	ldr	r0, [pc, #16]	; (8009ecc <MX_USART2_UART_Init+0x90>)
 8009eba:	f00a fa58 	bl	801436e <HAL_UARTEx_DisableFifoMode>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8009ec4:	f000 f976 	bl	800a1b4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8009ec8:	bf00      	nop
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	20001ab4 	.word	0x20001ab4
 8009ed0:	40004400 	.word	0x40004400

08009ed4 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b092      	sub	sp, #72	; 0x48
 8009ed8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8009eda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	605a      	str	r2, [r3, #4]
 8009ee4:	609a      	str	r2, [r3, #8]
 8009ee6:	60da      	str	r2, [r3, #12]
 8009ee8:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8009eea:	2300      	movs	r3, #0
 8009eec:	633b      	str	r3, [r7, #48]	; 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 8009eee:	1d3b      	adds	r3, r7, #4
 8009ef0:	222c      	movs	r2, #44	; 0x2c
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f00e fdab 	bl	8018a50 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8009efa:	4b3f      	ldr	r3, [pc, #252]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009efc:	4a3f      	ldr	r2, [pc, #252]	; (8009ffc <MX_RTC_Init+0x128>)
 8009efe:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009f00:	4b3d      	ldr	r3, [pc, #244]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8009f06:	4b3c      	ldr	r3, [pc, #240]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f08:	227f      	movs	r2, #127	; 0x7f
 8009f0a:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8009f0c:	4b3a      	ldr	r3, [pc, #232]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f0e:	22ff      	movs	r2, #255	; 0xff
 8009f10:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009f12:	4b39      	ldr	r3, [pc, #228]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009f18:	4b37      	ldr	r3, [pc, #220]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009f1e:	4b36      	ldr	r3, [pc, #216]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009f24:	4b34      	ldr	r3, [pc, #208]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009f2a:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8009f2c:	4b32      	ldr	r3, [pc, #200]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f2e:	2200      	movs	r2, #0
 8009f30:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8009f32:	4b31      	ldr	r3, [pc, #196]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009f38:	482f      	ldr	r0, [pc, #188]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f3a:	f006 fa97 	bl	801046c <HAL_RTC_Init>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <MX_RTC_Init+0x74>
	{
		Error_Handler();
 8009f44:	f000 f936 	bl	800a1b4 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	sTime.Minutes = 0x0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	sTime.Seconds = 0x0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009f62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f66:	2201      	movs	r2, #1
 8009f68:	4619      	mov	r1, r3
 8009f6a:	4823      	ldr	r0, [pc, #140]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f6c:	f006 fb00 	bl	8010570 <HAL_RTC_SetTime>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <MX_RTC_Init+0xa6>
	{
		Error_Handler();
 8009f76:	f000 f91d 	bl	800a1b4 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 8009f80:	2301      	movs	r3, #1
 8009f82:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sDate.Date = 0x1;
 8009f86:	2301      	movs	r3, #1
 8009f88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sDate.Year = 0x0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f96:	2201      	movs	r2, #1
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4817      	ldr	r0, [pc, #92]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009f9c:	f006 fb84 	bl	80106a8 <HAL_RTC_SetDate>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d001      	beq.n	8009faa <MX_RTC_Init+0xd6>
	{
		Error_Handler();
 8009fa6:	f000 f905 	bl	800a1b4 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x0;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8009fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009fda:	1d3b      	adds	r3, r7, #4
 8009fdc:	2201      	movs	r2, #1
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4805      	ldr	r0, [pc, #20]	; (8009ff8 <MX_RTC_Init+0x124>)
 8009fe2:	f006 fbe7 	bl	80107b4 <HAL_RTC_SetAlarm>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <MX_RTC_Init+0x11c>
	{
		Error_Handler();
 8009fec:	f000 f8e2 	bl	800a1b4 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8009ff0:	bf00      	nop
 8009ff2:	3748      	adds	r7, #72	; 0x48
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	20001b48 	.word	0x20001b48
 8009ffc:	40002800 	.word	0x40002800

0800a000 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800a004:	4b1b      	ldr	r3, [pc, #108]	; (800a074 <MX_SPI2_Init+0x74>)
 800a006:	4a1c      	ldr	r2, [pc, #112]	; (800a078 <MX_SPI2_Init+0x78>)
 800a008:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800a00a:	4b1a      	ldr	r3, [pc, #104]	; (800a074 <MX_SPI2_Init+0x74>)
 800a00c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a010:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a012:	4b18      	ldr	r3, [pc, #96]	; (800a074 <MX_SPI2_Init+0x74>)
 800a014:	2200      	movs	r2, #0
 800a016:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a018:	4b16      	ldr	r3, [pc, #88]	; (800a074 <MX_SPI2_Init+0x74>)
 800a01a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a01e:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a020:	4b14      	ldr	r3, [pc, #80]	; (800a074 <MX_SPI2_Init+0x74>)
 800a022:	2200      	movs	r2, #0
 800a024:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a026:	4b13      	ldr	r3, [pc, #76]	; (800a074 <MX_SPI2_Init+0x74>)
 800a028:	2200      	movs	r2, #0
 800a02a:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800a02c:	4b11      	ldr	r3, [pc, #68]	; (800a074 <MX_SPI2_Init+0x74>)
 800a02e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a032:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a034:	4b0f      	ldr	r3, [pc, #60]	; (800a074 <MX_SPI2_Init+0x74>)
 800a036:	2200      	movs	r2, #0
 800a038:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a03a:	4b0e      	ldr	r3, [pc, #56]	; (800a074 <MX_SPI2_Init+0x74>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a040:	4b0c      	ldr	r3, [pc, #48]	; (800a074 <MX_SPI2_Init+0x74>)
 800a042:	2200      	movs	r2, #0
 800a044:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a046:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <MX_SPI2_Init+0x74>)
 800a048:	2200      	movs	r2, #0
 800a04a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800a04c:	4b09      	ldr	r3, [pc, #36]	; (800a074 <MX_SPI2_Init+0x74>)
 800a04e:	2207      	movs	r2, #7
 800a050:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a052:	4b08      	ldr	r3, [pc, #32]	; (800a074 <MX_SPI2_Init+0x74>)
 800a054:	2200      	movs	r2, #0
 800a056:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a058:	4b06      	ldr	r3, [pc, #24]	; (800a074 <MX_SPI2_Init+0x74>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a05e:	4805      	ldr	r0, [pc, #20]	; (800a074 <MX_SPI2_Init+0x74>)
 800a060:	f006 fd61 	bl	8010b26 <HAL_SPI_Init>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d001      	beq.n	800a06e <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 800a06a:	f000 f8a3 	bl	800a1b4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800a06e:	bf00      	nop
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20001b80 	.word	0x20001b80
 800a078:	40003800 	.word	0x40003800

0800a07c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a082:	1d3b      	adds	r3, r7, #4
 800a084:	2200      	movs	r2, #0
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	605a      	str	r2, [r3, #4]
 800a08a:	609a      	str	r2, [r3, #8]
 800a08c:	60da      	str	r2, [r3, #12]
 800a08e:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a090:	2001      	movs	r0, #1
 800a092:	f7ff fc5b 	bl	800994c <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a096:	2002      	movs	r0, #2
 800a098:	f7ff fc58 	bl	800994c <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800a09c:	2004      	movs	r0, #4
 800a09e:	f7ff fc55 	bl	800994c <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800a0a8:	481e      	ldr	r0, [pc, #120]	; (800a124 <MX_GPIO_Init+0xa8>)
 800a0aa:	f004 fd7d 	bl	800eba8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f240 2101 	movw	r1, #513	; 0x201
 800a0b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0b8:	f004 fd76 	bl	800eba8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 800a0bc:	2200      	movs	r2, #0
 800a0be:	2102      	movs	r1, #2
 800a0c0:	4819      	ldr	r0, [pc, #100]	; (800a128 <MX_GPIO_Init+0xac>)
 800a0c2:	f004 fd71 	bl	800eba8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ADC_SW_Pin FLASH_CS_Pin MB_OC_Pin LED_Pin */
	GPIO_InitStruct.Pin = ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin|LED_Pin;
 800a0c6:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 800a0ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0d8:	1d3b      	adds	r3, r7, #4
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4811      	ldr	r0, [pc, #68]	; (800a124 <MX_GPIO_Init+0xa8>)
 800a0de:	f004 fb35 	bl	800e74c <HAL_GPIO_Init>

	/*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
	GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 800a0e2:	f240 2301 	movw	r3, #513	; 0x201
 800a0e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0f4:	1d3b      	adds	r3, r7, #4
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0fc:	f004 fb26 	bl	800e74c <HAL_GPIO_Init>

	/*Configure GPIO pin : MB_CTL_Pin */
	GPIO_InitStruct.Pin = MB_CTL_Pin;
 800a100:	2302      	movs	r3, #2
 800a102:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a104:	2301      	movs	r3, #1
 800a106:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a108:	2300      	movs	r3, #0
 800a10a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a10c:	2300      	movs	r3, #0
 800a10e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 800a110:	1d3b      	adds	r3, r7, #4
 800a112:	4619      	mov	r1, r3
 800a114:	4804      	ldr	r0, [pc, #16]	; (800a128 <MX_GPIO_Init+0xac>)
 800a116:	f004 fb19 	bl	800e74c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800a11a:	bf00      	nop
 800a11c:	3718      	adds	r7, #24
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	48000400 	.word	0x48000400
 800a128:	48000800 	.word	0x48000800

0800a12c <Get_AdcHandle>:
	osDelay(Delay);
}


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0
	return &hadc;
 800a130:	4b02      	ldr	r3, [pc, #8]	; (800a13c <Get_AdcHandle+0x10>)
}
 800a132:	4618      	mov	r0, r3
 800a134:	46bd      	mov	sp, r7
 800a136:	bc80      	pop	{r7}
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	20001968 	.word	0x20001968

0800a140 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
	return &huart2;
 800a144:	4b02      	ldr	r3, [pc, #8]	; (800a150 <Get_DebugHandle+0x10>)
}
 800a146:	4618      	mov	r0, r3
 800a148:	46bd      	mov	sp, r7
 800a14a:	bc80      	pop	{r7}
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	20001ab4 	.word	0x20001ab4

0800a154 <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 800a154:	b480      	push	{r7}
 800a156:	af00      	add	r7, sp, #0
	return &hlpuart1;;
 800a158:	4b02      	ldr	r3, [pc, #8]	; (800a164 <Get_SonarHandle+0x10>)
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bc80      	pop	{r7}
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20001a20 	.word	0x20001a20

0800a168 <Get_SpiHandle>:
{
	return &hrtc;
}

SPI_HandleTypeDef   *Get_SpiHandle(void)
{
 800a168:	b480      	push	{r7}
 800a16a:	af00      	add	r7, sp, #0
	return &hspi2;
 800a16c:	4b02      	ldr	r3, [pc, #8]	; (800a178 <Get_SpiHandle+0x10>)
}
 800a16e:	4618      	mov	r0, r3
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	20001b80 	.word	0x20001b80

0800a17c <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
	return xQueue1Handle;;
 800a180:	4b02      	ldr	r3, [pc, #8]	; (800a18c <Get_TerminalQueueHandle+0x10>)
 800a182:	681b      	ldr	r3, [r3, #0]
}
 800a184:	4618      	mov	r0, r3
 800a186:	46bd      	mov	sp, r7
 800a188:	bc80      	pop	{r7}
 800a18a:	4770      	bx	lr
 800a18c:	20001be8 	.word	0x20001be8

0800a190 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a04      	ldr	r2, [pc, #16]	; (800a1b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d101      	bne.n	800a1a6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800a1a2:	f002 feb3 	bl	800cf0c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	40012c00 	.word	0x40012c00

0800a1b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a1b8:	b672      	cpsid	i
}
 800a1ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800a1bc:	e7fe      	b.n	800a1bc <Error_Handler+0x8>

0800a1be <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800a1c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a1d6:	bf00      	nop
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bc80      	pop	{r7}
 800a1dc:	4770      	bx	lr

0800a1de <LL_AHB2_GRP1_EnableClock>:
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b085      	sub	sp, #20
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a1e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a1f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4013      	ands	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a202:	68fb      	ldr	r3, [r7, #12]
}
 800a204:	bf00      	nop
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	bc80      	pop	{r7}
 800a20c:	4770      	bx	lr

0800a20e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a20e:	b480      	push	{r7}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a21a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a21c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4313      	orrs	r3, r2
 800a224:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a22a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4013      	ands	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a232:	68fb      	ldr	r3, [r7, #12]
}
 800a234:	bf00      	nop
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	bc80      	pop	{r7}
 800a23c:	4770      	bx	lr

0800a23e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800a23e:	b480      	push	{r7}
 800a240:	b085      	sub	sp, #20
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800a246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a24a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a24c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4313      	orrs	r3, r2
 800a254:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800a256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a25a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4013      	ands	r3, r2
 800a260:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a262:	68fb      	ldr	r3, [r7, #12]
}
 800a264:	bf00      	nop
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	bc80      	pop	{r7}
 800a26c:	4770      	bx	lr

0800a26e <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800a26e:	b480      	push	{r7}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800a276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a27a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	43db      	mvns	r3, r3
 800a280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a284:	4013      	ands	r3, r2
 800a286:	658b      	str	r3, [r1, #88]	; 0x58
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr

0800a292 <LL_APB1_GRP2_DisableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_DisableClock(uint32_t Periphs)
{
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800a29a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a29e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	43db      	mvns	r3, r3
 800a2a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bc80      	pop	{r7}
 800a2b4:	4770      	bx	lr

0800a2b6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a2be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a2c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a2ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a2da:	68fb      	ldr	r3, [r7, #12]
}
 800a2dc:	bf00      	nop
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bc80      	pop	{r7}
 800a2e4:	4770      	bx	lr

0800a2e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	210f      	movs	r1, #15
 800a2ee:	f06f 0001 	mvn.w	r0, #1
 800a2f2:	f003 ff1e 	bl	800e132 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a2f6:	bf00      	nop
 800a2f8:	bd80      	pop	{r7, pc}
	...

0800a2fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b088      	sub	sp, #32
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a304:	f107 030c 	add.w	r3, r7, #12
 800a308:	2200      	movs	r2, #0
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	605a      	str	r2, [r3, #4]
 800a30e:	609a      	str	r2, [r3, #8]
 800a310:	60da      	str	r2, [r3, #12]
 800a312:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a0c      	ldr	r2, [pc, #48]	; (800a34c <HAL_ADC_MspInit+0x50>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d112      	bne.n	800a344 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800a31e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a322:	f7ff ffc8 	bl	800a2b6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a326:	2002      	movs	r0, #2
 800a328:	f7ff ff59 	bl	800a1de <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a32c:	2308      	movs	r3, #8
 800a32e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a330:	2303      	movs	r3, #3
 800a332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a334:	2300      	movs	r3, #0
 800a336:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a338:	f107 030c 	add.w	r3, r7, #12
 800a33c:	4619      	mov	r1, r3
 800a33e:	4804      	ldr	r0, [pc, #16]	; (800a350 <HAL_ADC_MspInit+0x54>)
 800a340:	f004 fa04 	bl	800e74c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 800a344:	bf00      	nop
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	40012400 	.word	0x40012400
 800a350:	48000400 	.word	0x48000400

0800a354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b096      	sub	sp, #88	; 0x58
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a35c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a360:	2200      	movs	r2, #0
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	605a      	str	r2, [r3, #4]
 800a366:	609a      	str	r2, [r3, #8]
 800a368:	60da      	str	r2, [r3, #12]
 800a36a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a36c:	f107 030c 	add.w	r3, r7, #12
 800a370:	2238      	movs	r2, #56	; 0x38
 800a372:	2100      	movs	r1, #0
 800a374:	4618      	mov	r0, r3
 800a376:	f00e fb6b 	bl	8018a50 <memset>
  if(hi2c->Instance==I2C2)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a21      	ldr	r2, [pc, #132]	; (800a404 <HAL_I2C_MspInit+0xb0>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d13b      	bne.n	800a3fc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a384:	2380      	movs	r3, #128	; 0x80
 800a386:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a388:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a38e:	f107 030c 	add.w	r3, r7, #12
 800a392:	4618      	mov	r0, r3
 800a394:	f005 ff50 	bl	8010238 <HAL_RCCEx_PeriphCLKConfig>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800a39e:	f7ff ff09 	bl	800a1b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	f7ff ff1b 	bl	800a1de <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3a8:	2002      	movs	r0, #2
 800a3aa:	f7ff ff18 	bl	800a1de <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a3ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a3b4:	2312      	movs	r3, #18
 800a3b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a3ce:	f004 f9bd 	bl	800e74c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a3d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3d6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a3d8:	2312      	movs	r3, #18
 800a3da:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a3e4:	2304      	movs	r3, #4
 800a3e6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4806      	ldr	r0, [pc, #24]	; (800a408 <HAL_I2C_MspInit+0xb4>)
 800a3f0:	f004 f9ac 	bl	800e74c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a3f4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a3f8:	f7ff ff09 	bl	800a20e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800a3fc:	bf00      	nop
 800a3fe:	3758      	adds	r7, #88	; 0x58
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	40005800 	.word	0x40005800
 800a408:	48000400 	.word	0x48000400

0800a40c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b096      	sub	sp, #88	; 0x58
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a414:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a418:	2200      	movs	r2, #0
 800a41a:	601a      	str	r2, [r3, #0]
 800a41c:	605a      	str	r2, [r3, #4]
 800a41e:	609a      	str	r2, [r3, #8]
 800a420:	60da      	str	r2, [r3, #12]
 800a422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a424:	f107 030c 	add.w	r3, r7, #12
 800a428:	2238      	movs	r2, #56	; 0x38
 800a42a:	2100      	movs	r1, #0
 800a42c:	4618      	mov	r0, r3
 800a42e:	f00e fb0f 	bl	8018a50 <memset>
  if(huart->Instance==LPUART1)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a30      	ldr	r2, [pc, #192]	; (800a4f8 <HAL_UART_MspInit+0xec>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d125      	bne.n	800a488 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a43c:	2320      	movs	r3, #32
 800a43e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800a440:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a444:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a446:	f107 030c 	add.w	r3, r7, #12
 800a44a:	4618      	mov	r0, r3
 800a44c:	f005 fef4 	bl	8010238 <HAL_RCCEx_PeriphCLKConfig>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a456:	f7ff fead 	bl	800a1b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a45a:	2001      	movs	r0, #1
 800a45c:	f7ff feef 	bl	800a23e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a460:	2004      	movs	r0, #4
 800a462:	f7ff febc 	bl	800a1de <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 800a466:	2301      	movs	r3, #1
 800a468:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a46a:	2312      	movs	r3, #18
 800a46c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a46e:	2301      	movs	r3, #1
 800a470:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a472:	2300      	movs	r3, #0
 800a474:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a476:	2308      	movs	r3, #8
 800a478:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a47a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a47e:	4619      	mov	r1, r3
 800a480:	481e      	ldr	r0, [pc, #120]	; (800a4fc <HAL_UART_MspInit+0xf0>)
 800a482:	f004 f963 	bl	800e74c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a486:	e033      	b.n	800a4f0 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a1c      	ldr	r2, [pc, #112]	; (800a500 <HAL_UART_MspInit+0xf4>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d12e      	bne.n	800a4f0 <HAL_UART_MspInit+0xe4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a492:	2302      	movs	r3, #2
 800a494:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a496:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800a49a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a49c:	f107 030c 	add.w	r3, r7, #12
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f005 fec9 	bl	8010238 <HAL_RCCEx_PeriphCLKConfig>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 800a4ac:	f7ff fe82 	bl	800a1b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a4b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a4b4:	f7ff feab 	bl	800a20e <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	f7ff fe90 	bl	800a1de <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800a4be:	230c      	movs	r3, #12
 800a4c0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a4ce:	2307      	movs	r3, #7
 800a4d0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a4dc:	f004 f936 	bl	800e74c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2105      	movs	r1, #5
 800a4e4:	2025      	movs	r0, #37	; 0x25
 800a4e6:	f003 fe24 	bl	800e132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a4ea:	2025      	movs	r0, #37	; 0x25
 800a4ec:	f003 fe3b 	bl	800e166 <HAL_NVIC_EnableIRQ>
}
 800a4f0:	bf00      	nop
 800a4f2:	3758      	adds	r7, #88	; 0x58
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	40008000 	.word	0x40008000
 800a4fc:	48000800 	.word	0x48000800
 800a500:	40004400 	.word	0x40004400

0800a504 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a0f      	ldr	r2, [pc, #60]	; (800a550 <HAL_UART_MspDeInit+0x4c>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d107      	bne.n	800a526 <HAL_UART_MspDeInit+0x22>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800a516:	2001      	movs	r0, #1
 800a518:	f7ff febb 	bl	800a292 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 800a51c:	2102      	movs	r1, #2
 800a51e:	480d      	ldr	r0, [pc, #52]	; (800a554 <HAL_UART_MspDeInit+0x50>)
 800a520:	f004 fa74 	bl	800ea0c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800a524:	e010      	b.n	800a548 <HAL_UART_MspDeInit+0x44>
  else if(huart->Instance==USART2)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a0b      	ldr	r2, [pc, #44]	; (800a558 <HAL_UART_MspDeInit+0x54>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d10b      	bne.n	800a548 <HAL_UART_MspDeInit+0x44>
    __HAL_RCC_USART2_CLK_DISABLE();
 800a530:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a534:	f7ff fe9b 	bl	800a26e <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 800a538:	210c      	movs	r1, #12
 800a53a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a53e:	f004 fa65 	bl	800ea0c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800a542:	2025      	movs	r0, #37	; 0x25
 800a544:	f003 fe1d 	bl	800e182 <HAL_NVIC_DisableIRQ>
}
 800a548:	bf00      	nop
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	40008000 	.word	0x40008000
 800a554:	48000800 	.word	0x48000800
 800a558:	40004400 	.word	0x40004400

0800a55c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b090      	sub	sp, #64	; 0x40
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a564:	f107 0308 	add.w	r3, r7, #8
 800a568:	2238      	movs	r2, #56	; 0x38
 800a56a:	2100      	movs	r1, #0
 800a56c:	4618      	mov	r0, r3
 800a56e:	f00e fa6f 	bl	8018a50 <memset>
  if(hrtc->Instance==RTC)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a0e      	ldr	r2, [pc, #56]	; (800a5b0 <HAL_RTC_MspInit+0x54>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d115      	bne.n	800a5a8 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a57c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a580:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a582:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a586:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a588:	f107 0308 	add.w	r3, r7, #8
 800a58c:	4618      	mov	r0, r3
 800a58e:	f005 fe53 	bl	8010238 <HAL_RCCEx_PeriphCLKConfig>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a598:	f7ff fe0c 	bl	800a1b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a59c:	f7ff fe0f 	bl	800a1be <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a5a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a5a4:	f7ff fe33 	bl	800a20e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a5a8:	bf00      	nop
 800a5aa:	3740      	adds	r7, #64	; 0x40
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	40002800 	.word	0x40002800

0800a5b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b096      	sub	sp, #88	; 0x58
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	605a      	str	r2, [r3, #4]
 800a5c6:	609a      	str	r2, [r3, #8]
 800a5c8:	60da      	str	r2, [r3, #12]
 800a5ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a5cc:	f107 030c 	add.w	r3, r7, #12
 800a5d0:	2238      	movs	r2, #56	; 0x38
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f00e fa3b 	bl	8018a50 <memset>
  if(hspi->Instance==SPI2)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a21      	ldr	r2, [pc, #132]	; (800a664 <HAL_SPI_MspInit+0xb0>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d13b      	bne.n	800a65c <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800a5e4:	2310      	movs	r3, #16
 800a5e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 800a5e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ec:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5ee:	f107 030c 	add.w	r3, r7, #12
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f005 fe20 	bl	8010238 <HAL_RCCEx_PeriphCLKConfig>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800a5fe:	f7ff fdd9 	bl	800a1b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a602:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a606:	f7ff fe02 	bl	800a20e <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a60a:	2002      	movs	r0, #2
 800a60c:	f7ff fde7 	bl	800a1de <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a610:	2001      	movs	r0, #1
 800a612:	f7ff fde4 	bl	800a1de <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800a616:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800a61a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a61c:	2302      	movs	r3, #2
 800a61e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a620:	2301      	movs	r3, #1
 800a622:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a624:	2300      	movs	r3, #0
 800a626:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a628:	2305      	movs	r3, #5
 800a62a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a62c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a630:	4619      	mov	r1, r3
 800a632:	480d      	ldr	r0, [pc, #52]	; (800a668 <HAL_SPI_MspInit+0xb4>)
 800a634:	f004 f88a 	bl	800e74c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a63e:	2302      	movs	r3, #2
 800a640:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a642:	2301      	movs	r3, #1
 800a644:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a646:	2300      	movs	r3, #0
 800a648:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a64a:	2305      	movs	r3, #5
 800a64c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a64e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a652:	4619      	mov	r1, r3
 800a654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a658:	f004 f878 	bl	800e74c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a65c:	bf00      	nop
 800a65e:	3758      	adds	r7, #88	; 0x58
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	40003800 	.word	0x40003800
 800a668:	48000400 	.word	0x48000400

0800a66c <LL_APB2_GRP1_EnableClock>:
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800a674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a678:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a67a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4313      	orrs	r3, r2
 800a682:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a688:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4013      	ands	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a690:	68fb      	ldr	r3, [r7, #12]
}
 800a692:	bf00      	nop
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	bc80      	pop	{r7}
 800a69a:	4770      	bx	lr

0800a69c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08c      	sub	sp, #48	; 0x30
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a6b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a6b6:	f7ff ffd9 	bl	800a66c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a6ba:	f107 0208 	add.w	r2, r7, #8
 800a6be:	f107 030c 	add.w	r3, r7, #12
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f005 fbd3 	bl	800fe70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800a6ca:	f005 fbbf 	bl	800fe4c <HAL_RCC_GetPCLK2Freq>
 800a6ce:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	4a21      	ldr	r2, [pc, #132]	; (800a758 <HAL_InitTick+0xbc>)
 800a6d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d8:	0c9b      	lsrs	r3, r3, #18
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a6de:	4b1f      	ldr	r3, [pc, #124]	; (800a75c <HAL_InitTick+0xc0>)
 800a6e0:	4a1f      	ldr	r2, [pc, #124]	; (800a760 <HAL_InitTick+0xc4>)
 800a6e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800a6e4:	4b1d      	ldr	r3, [pc, #116]	; (800a75c <HAL_InitTick+0xc0>)
 800a6e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a6ea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a6ec:	4a1b      	ldr	r2, [pc, #108]	; (800a75c <HAL_InitTick+0xc0>)
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a6f2:	4b1a      	ldr	r3, [pc, #104]	; (800a75c <HAL_InitTick+0xc0>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a6f8:	4b18      	ldr	r3, [pc, #96]	; (800a75c <HAL_InitTick+0xc0>)
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800a6fe:	4817      	ldr	r0, [pc, #92]	; (800a75c <HAL_InitTick+0xc0>)
 800a700:	f007 fafe 	bl	8011d00 <HAL_TIM_Base_Init>
 800a704:	4603      	mov	r3, r0
 800a706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800a70a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d11b      	bne.n	800a74a <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800a712:	4812      	ldr	r0, [pc, #72]	; (800a75c <HAL_InitTick+0xc0>)
 800a714:	f007 fb54 	bl	8011dc0 <HAL_TIM_Base_Start_IT>
 800a718:	4603      	mov	r3, r0
 800a71a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800a71e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a722:	2b00      	cmp	r3, #0
 800a724:	d111      	bne.n	800a74a <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a726:	2018      	movs	r0, #24
 800a728:	f003 fd1d 	bl	800e166 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b0f      	cmp	r3, #15
 800a730:	d808      	bhi.n	800a744 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800a732:	2200      	movs	r2, #0
 800a734:	6879      	ldr	r1, [r7, #4]
 800a736:	2018      	movs	r0, #24
 800a738:	f003 fcfb 	bl	800e132 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a73c:	4a09      	ldr	r2, [pc, #36]	; (800a764 <HAL_InitTick+0xc8>)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6013      	str	r3, [r2, #0]
 800a742:	e002      	b.n	800a74a <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800a74a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3730      	adds	r7, #48	; 0x30
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	431bde83 	.word	0x431bde83
 800a75c:	20001c08 	.word	0x20001c08
 800a760:	40012c00 	.word	0x40012c00
 800a764:	20000088 	.word	0x20000088

0800a768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a768:	b480      	push	{r7}
 800a76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a76c:	e7fe      	b.n	800a76c <NMI_Handler+0x4>

0800a76e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a76e:	b480      	push	{r7}
 800a770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a772:	e7fe      	b.n	800a772 <HardFault_Handler+0x4>

0800a774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a774:	b480      	push	{r7}
 800a776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a778:	e7fe      	b.n	800a778 <MemManage_Handler+0x4>

0800a77a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a77a:	b480      	push	{r7}
 800a77c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a77e:	e7fe      	b.n	800a77e <BusFault_Handler+0x4>

0800a780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a784:	e7fe      	b.n	800a784 <UsageFault_Handler+0x4>

0800a786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a786:	b480      	push	{r7}
 800a788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a78a:	bf00      	nop
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bc80      	pop	{r7}
 800a790:	4770      	bx	lr
	...

0800a794 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a798:	4802      	ldr	r0, [pc, #8]	; (800a7a4 <TIM1_UP_IRQHandler+0x10>)
 800a79a:	f007 fb5d 	bl	8011e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a79e:	bf00      	nop
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20001c08 	.word	0x20001c08

0800a7a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a7ac:	4802      	ldr	r0, [pc, #8]	; (800a7b8 <USART2_IRQHandler+0x10>)
 800a7ae:	f007 ff73 	bl	8012698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a7b2:	bf00      	nop
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20001ab4 	.word	0x20001ab4

0800a7bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
  return 1;
 800a7c0:	2301      	movs	r3, #1
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bc80      	pop	{r7}
 800a7c8:	4770      	bx	lr

0800a7ca <_kill>:

int _kill(int pid, int sig)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a7d4:	f00d fce8 	bl	80181a8 <__errno>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2216      	movs	r2, #22
 800a7dc:	601a      	str	r2, [r3, #0]
  return -1;
 800a7de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <_exit>:

void _exit (int status)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a7f2:	f04f 31ff 	mov.w	r1, #4294967295
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff ffe7 	bl	800a7ca <_kill>
  while (1) {}    /* Make sure we hang here */
 800a7fc:	e7fe      	b.n	800a7fc <_exit+0x12>

0800a7fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a80a:	2300      	movs	r3, #0
 800a80c:	617b      	str	r3, [r7, #20]
 800a80e:	e00a      	b.n	800a826 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a810:	f3af 8000 	nop.w
 800a814:	4601      	mov	r1, r0
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	60ba      	str	r2, [r7, #8]
 800a81c:	b2ca      	uxtb	r2, r1
 800a81e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	3301      	adds	r3, #1
 800a824:	617b      	str	r3, [r7, #20]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	dbf0      	blt.n	800a810 <_read+0x12>
  }

  return len;
 800a82e:	687b      	ldr	r3, [r7, #4]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a844:	2300      	movs	r3, #0
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	e009      	b.n	800a85e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	1c5a      	adds	r2, r3, #1
 800a84e:	60ba      	str	r2, [r7, #8]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff f8cc 	bl	80099f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	3301      	adds	r3, #1
 800a85c:	617b      	str	r3, [r7, #20]
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	429a      	cmp	r2, r3
 800a864:	dbf1      	blt.n	800a84a <_write+0x12>
  }
  return len;
 800a866:	687b      	ldr	r3, [r7, #4]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <_close>:

int _close(int file)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	bc80      	pop	{r7}
 800a884:	4770      	bx	lr

0800a886 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a886:	b480      	push	{r7}
 800a888:	b083      	sub	sp, #12
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a896:	605a      	str	r2, [r3, #4]
  return 0;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bc80      	pop	{r7}
 800a8a2:	4770      	bx	lr

0800a8a4 <_isatty>:

int _isatty(int file)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a8ac:	2301      	movs	r3, #1
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bc80      	pop	{r7}
 800a8b6:	4770      	bx	lr

0800a8b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3714      	adds	r7, #20
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bc80      	pop	{r7}
 800a8ce:	4770      	bx	lr

0800a8d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a8d8:	4a14      	ldr	r2, [pc, #80]	; (800a92c <_sbrk+0x5c>)
 800a8da:	4b15      	ldr	r3, [pc, #84]	; (800a930 <_sbrk+0x60>)
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a8e4:	4b13      	ldr	r3, [pc, #76]	; (800a934 <_sbrk+0x64>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d102      	bne.n	800a8f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a8ec:	4b11      	ldr	r3, [pc, #68]	; (800a934 <_sbrk+0x64>)
 800a8ee:	4a12      	ldr	r2, [pc, #72]	; (800a938 <_sbrk+0x68>)
 800a8f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a8f2:	4b10      	ldr	r3, [pc, #64]	; (800a934 <_sbrk+0x64>)
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d207      	bcs.n	800a910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a900:	f00d fc52 	bl	80181a8 <__errno>
 800a904:	4603      	mov	r3, r0
 800a906:	220c      	movs	r2, #12
 800a908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a90a:	f04f 33ff 	mov.w	r3, #4294967295
 800a90e:	e009      	b.n	800a924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a910:	4b08      	ldr	r3, [pc, #32]	; (800a934 <_sbrk+0x64>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a916:	4b07      	ldr	r3, [pc, #28]	; (800a934 <_sbrk+0x64>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4413      	add	r3, r2
 800a91e:	4a05      	ldr	r2, [pc, #20]	; (800a934 <_sbrk+0x64>)
 800a920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a922:	68fb      	ldr	r3, [r7, #12]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3718      	adds	r7, #24
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	20010000 	.word	0x20010000
 800a930:	00000400 	.word	0x00000400
 800a934:	20001c54 	.word	0x20001c54
 800a938:	20005ea8 	.word	0x20005ea8

0800a93c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800a940:	4b03      	ldr	r3, [pc, #12]	; (800a950 <SystemInit+0x14>)
 800a942:	4a04      	ldr	r2, [pc, #16]	; (800a954 <SystemInit+0x18>)
 800a944:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800a946:	bf00      	nop
 800a948:	46bd      	mov	sp, r7
 800a94a:	bc80      	pop	{r7}
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	e000ed00 	.word	0xe000ed00
 800a954:	08008400 	.word	0x08008400

0800a958 <LL_AHB2_GRP1_EnableClock>:
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4013      	ands	r3, r2
 800a97a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a97c:	68fb      	ldr	r3, [r7, #12]
}
 800a97e:	bf00      	nop
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	bc80      	pop	{r7}
 800a986:	4770      	bx	lr

0800a988 <LL_APB1_GRP1_EnableClock>:
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a994:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a9a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
}
 800a9ae:	bf00      	nop
 800a9b0:	3714      	adds	r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bc80      	pop	{r7}
 800a9b6:	4770      	bx	lr

0800a9b8 <uartUserDownload>:
/**
 * @brief Download a file via serial port
 **/

void uartUserDownload(void)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
   uint8_t number[11] = {0};
 800a9be:	2300      	movs	r3, #0
 800a9c0:	60bb      	str	r3, [r7, #8]
 800a9c2:	f107 030c 	add.w	r3, r7, #12
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	601a      	str	r2, [r3, #0]
 800a9ca:	f8c3 2003 	str.w	r2, [r3, #3]
   uint32_t size = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	607b      	str	r3, [r7, #4]
   COM_StatusTypeDef result;

   cboot_error_t cboot_error;

   //Get exclusive access
   osMutexWait(iapMutexHandle, osWaitForever);
 800a9d2:	4b6b      	ldr	r3, [pc, #428]	; (800ab80 <uartUserDownload+0x1c8>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f04f 31ff 	mov.w	r1, #4294967295
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f00a fb12 	bl	8015004 <osMutexWait>

   //Suspend scheduler
   osThreadSuspendAll();
 800a9e0:	f00a fbbc 	bl	801515c <osThreadSuspendAll>

#if 1
   //Debug message
   TRACE_INFO("\r\n");
 800a9e4:	f7fe fd93 	bl	800950e <osSuspendAllTasks>
 800a9e8:	4b66      	ldr	r3, [pc, #408]	; (800ab84 <uartUserDownload+0x1cc>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	4865      	ldr	r0, [pc, #404]	; (800ab88 <uartUserDownload+0x1d0>)
 800a9f4:	f00d fd82 	bl	80184fc <fwrite>
 800a9f8:	f7fe fd94 	bl	8009524 <osResumeAllTasks>
   TRACE_INFO("Starting firmware update...\r\n");
 800a9fc:	f7fe fd87 	bl	800950e <osSuspendAllTasks>
 800aa00:	4b60      	ldr	r3, [pc, #384]	; (800ab84 <uartUserDownload+0x1cc>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	221d      	movs	r2, #29
 800aa08:	2101      	movs	r1, #1
 800aa0a:	4860      	ldr	r0, [pc, #384]	; (800ab8c <uartUserDownload+0x1d4>)
 800aa0c:	f00d fd76 	bl	80184fc <fwrite>
 800aa10:	f7fe fd88 	bl	8009524 <osResumeAllTasks>



   //Get default IAP settings
   iapGetDefaultSettings(&iapSettings);
 800aa14:	485e      	ldr	r0, [pc, #376]	; (800ab90 <uartUserDownload+0x1d8>)
 800aa16:	f000 fcb5 	bl	800b384 <iapGetDefaultSettings>
   iapSettings.imageInCrypto.cipherMode                     = IAP_SETTING_CIPHER_MODE;
   iapSettings.imageInCrypto.cipherKey                      = IAP_SETTING_CIPHER_KEY;
   iapSettings.imageInCrypto.cipherKeyLen                   = IAP_SETTING_CIHPER_KEY_LEN;
#else
   //User IAP settings configuration
   iapSettings.imageInCrypto.verifySettings.verifyMethod    = IAP_VERIFY_METHOD;
 800aa1a:	4b5d      	ldr	r3, [pc, #372]	; (800ab90 <uartUserDownload+0x1d8>)
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	721a      	strb	r2, [r3, #8]
   iapSettings.imageInCrypto.verifySettings.integrityAlgo   = IAP_SETTING_INTEGRITY_ALGO;
 800aa20:	4b5b      	ldr	r3, [pc, #364]	; (800ab90 <uartUserDownload+0x1d8>)
 800aa22:	4a5c      	ldr	r2, [pc, #368]	; (800ab94 <uartUserDownload+0x1dc>)
 800aa24:	60da      	str	r2, [r3, #12]
#endif
   //User IAP primary(internal flash) memory driver
   iapSettings.primaryFlashDriver             = IAP_SETTING_PRM_MEM_DRIVER;
 800aa26:	4b5a      	ldr	r3, [pc, #360]	; (800ab90 <uartUserDownload+0x1d8>)
 800aa28:	4a5b      	ldr	r2, [pc, #364]	; (800ab98 <uartUserDownload+0x1e0>)
 800aa2a:	605a      	str	r2, [r3, #4]
   //User IAP secondary(external flash) memory driver
   iapSettings.secondaryFlashDriver           = IAP_SETTING_SRD_MEM_DRIVER;
 800aa2c:	4b58      	ldr	r3, [pc, #352]	; (800ab90 <uartUserDownload+0x1d8>)
 800aa2e:	4a5b      	ldr	r2, [pc, #364]	; (800ab9c <uartUserDownload+0x1e4>)
 800aa30:	611a      	str	r2, [r3, #16]

   //User IAP first secondary memory slot configuration
   iapSettings.addrSlot1                       = IAP_SETTING_SRD_MEM_SLOT_1_ADDR;
 800aa32:	4b57      	ldr	r3, [pc, #348]	; (800ab90 <uartUserDownload+0x1d8>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	839a      	strh	r2, [r3, #28]
   iapSettings.sizeSlot1                       = IAP_SETTING_SRD_MEM_SLOT_1_SIZE;
 800aa38:	4b55      	ldr	r3, [pc, #340]	; (800ab90 <uartUserDownload+0x1d8>)
 800aa3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800aa3e:	621a      	str	r2, [r3, #32]
#if defined(APP_DEMO_3)
   iapSettings.appVersion = 0x00030000;
#elif defined(APP_DEMO_2)
   iapSettings.appVersion = 0x00020000;
#else
   iapSettings.appVersion = 0x00010000;
 800aa40:	4b53      	ldr	r3, [pc, #332]	; (800ab90 <uartUserDownload+0x1d8>)
 800aa42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aa46:	601a      	str	r2, [r3, #0]
#endif

   //Initialize IAP Application context
   cboot_error = iapInit(&iapContext, &iapSettings);
 800aa48:	4951      	ldr	r1, [pc, #324]	; (800ab90 <uartUserDownload+0x1d8>)
 800aa4a:	4855      	ldr	r0, [pc, #340]	; (800aba0 <uartUserDownload+0x1e8>)
 800aa4c:	f000 fcaa 	bl	800b3a4 <iapInit>
 800aa50:	4603      	mov	r3, r0
 800aa52:	82fb      	strh	r3, [r7, #22]
   //Is any error?
   if(cboot_error != CBOOT_NO_ERROR)
 800aa54:	8afb      	ldrh	r3, [r7, #22]
 800aa56:	f240 224b 	movw	r2, #587	; 0x24b
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00c      	beq.n	800aa78 <uartUserDownload+0xc0>
   {
      //Debug message
      TRACE_ERROR("Failed to initialize IAP!\r\n");
 800aa5e:	f7fe fd56 	bl	800950e <osSuspendAllTasks>
 800aa62:	4b48      	ldr	r3, [pc, #288]	; (800ab84 <uartUserDownload+0x1cc>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	221b      	movs	r2, #27
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	484d      	ldr	r0, [pc, #308]	; (800aba4 <uartUserDownload+0x1ec>)
 800aa6e:	f00d fd45 	bl	80184fc <fwrite>
 800aa72:	f7fe fd57 	bl	8009524 <osResumeAllTasks>
 800aa76:	e078      	b.n	800ab6a <uartUserDownload+0x1b2>
   }
   else
#endif
   {
      Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\r\n");
 800aa78:	484b      	ldr	r0, [pc, #300]	; (800aba8 <uartUserDownload+0x1f0>)
 800aa7a:	f7fe ff2f 	bl	80098dc <Serial_PutString>
      result = Ymodem_Receive( &size );
 800aa7e:	1d3b      	adds	r3, r7, #4
 800aa80:	4618      	mov	r0, r3
 800aa82:	f000 fad3 	bl	800b02c <Ymodem_Receive>
 800aa86:	4603      	mov	r3, r0
 800aa88:	757b      	strb	r3, [r7, #21]
      if (result == COM_OK)
 800aa8a:	7d7b      	ldrb	r3, [r7, #21]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d154      	bne.n	800ab3a <uartUserDownload+0x182>
      {
         Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 800aa90:	4846      	ldr	r0, [pc, #280]	; (800abac <uartUserDownload+0x1f4>)
 800aa92:	f7fe ff23 	bl	80098dc <Serial_PutString>
         Serial_PutString(aFileName);
 800aa96:	4846      	ldr	r0, [pc, #280]	; (800abb0 <uartUserDownload+0x1f8>)
 800aa98:	f7fe ff20 	bl	80098dc <Serial_PutString>
         Int2Str(number, size);
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	f107 0308 	add.w	r3, r7, #8
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fe fdd1 	bl	800964c <Int2Str>
         Serial_PutString((uint8_t *)"\r\n Size: ");
 800aaaa:	4842      	ldr	r0, [pc, #264]	; (800abb4 <uartUserDownload+0x1fc>)
 800aaac:	f7fe ff16 	bl	80098dc <Serial_PutString>
         Serial_PutString(number);
 800aab0:	f107 0308 	add.w	r3, r7, #8
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fe ff11 	bl	80098dc <Serial_PutString>
         Serial_PutString((uint8_t *)" Bytes\r\n");
 800aaba:	483f      	ldr	r0, [pc, #252]	; (800abb8 <uartUserDownload+0x200>)
 800aabc:	f7fe ff0e 	bl	80098dc <Serial_PutString>
         Serial_PutString((uint8_t *)"-------------------\r\n");
 800aac0:	483e      	ldr	r0, [pc, #248]	; (800abbc <uartUserDownload+0x204>)
 800aac2:	f7fe ff0b 	bl	80098dc <Serial_PutString>
#if 1
         cboot_error = iapFinalize(&iapContext);
 800aac6:	4836      	ldr	r0, [pc, #216]	; (800aba0 <uartUserDownload+0x1e8>)
 800aac8:	f000 fd72 	bl	800b5b0 <iapFinalize>
 800aacc:	4603      	mov	r3, r0
 800aace:	82fb      	strh	r3, [r7, #22]
         if(cboot_error != CBOOT_NO_ERROR)
 800aad0:	8afb      	ldrh	r3, [r7, #22]
 800aad2:	f240 224b 	movw	r2, #587	; 0x24b
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d00c      	beq.n	800aaf4 <uartUserDownload+0x13c>
         {
            //Debug message
            TRACE_ERROR("Failed to finalize firmware update!\r\n");
 800aada:	f7fe fd18 	bl	800950e <osSuspendAllTasks>
 800aade:	4b29      	ldr	r3, [pc, #164]	; (800ab84 <uartUserDownload+0x1cc>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	2225      	movs	r2, #37	; 0x25
 800aae6:	2101      	movs	r1, #1
 800aae8:	4835      	ldr	r0, [pc, #212]	; (800abc0 <uartUserDownload+0x208>)
 800aaea:	f00d fd07 	bl	80184fc <fwrite>
 800aaee:	f7fe fd19 	bl	8009524 <osResumeAllTasks>
 800aaf2:	e03a      	b.n	800ab6a <uartUserDownload+0x1b2>
         }
         else
         {
        	//DEbug message
        	TRACE_INFO("Update image successfully processed. Rebooting to finalize update...\r\n");
 800aaf4:	f7fe fd0b 	bl	800950e <osSuspendAllTasks>
 800aaf8:	4b22      	ldr	r3, [pc, #136]	; (800ab84 <uartUserDownload+0x1cc>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	2246      	movs	r2, #70	; 0x46
 800ab00:	2101      	movs	r1, #1
 800ab02:	4830      	ldr	r0, [pc, #192]	; (800abc4 <uartUserDownload+0x20c>)
 800ab04:	f00d fcfa 	bl	80184fc <fwrite>
 800ab08:	f7fe fd0c 	bl	8009524 <osResumeAllTasks>

            cboot_error = iapReboot(&iapContext);
 800ab0c:	4824      	ldr	r0, [pc, #144]	; (800aba0 <uartUserDownload+0x1e8>)
 800ab0e:	f000 fdb5 	bl	800b67c <iapReboot>
 800ab12:	4603      	mov	r3, r0
 800ab14:	82fb      	strh	r3, [r7, #22]
            if(cboot_error != CBOOT_NO_ERROR)
 800ab16:	8afb      	ldrh	r3, [r7, #22]
 800ab18:	f240 224b 	movw	r2, #587	; 0x24b
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d024      	beq.n	800ab6a <uartUserDownload+0x1b2>
            {
               //Debug message
               TRACE_ERROR("Failed to reboot!\r\n");
 800ab20:	f7fe fcf5 	bl	800950e <osSuspendAllTasks>
 800ab24:	4b17      	ldr	r3, [pc, #92]	; (800ab84 <uartUserDownload+0x1cc>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	2213      	movs	r2, #19
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	4826      	ldr	r0, [pc, #152]	; (800abc8 <uartUserDownload+0x210>)
 800ab30:	f00d fce4 	bl	80184fc <fwrite>
 800ab34:	f7fe fcf6 	bl	8009524 <osResumeAllTasks>
 800ab38:	e017      	b.n	800ab6a <uartUserDownload+0x1b2>
            }
         }
#endif
      }
      else if (result == COM_LIMIT)
 800ab3a:	7d7b      	ldrb	r3, [r7, #21]
 800ab3c:	2b05      	cmp	r3, #5
 800ab3e:	d103      	bne.n	800ab48 <uartUserDownload+0x190>
      {
         Serial_PutString((uint8_t *)"\r\n\r\nThe image size is higher than the allowed space memory!\r\n");
 800ab40:	4822      	ldr	r0, [pc, #136]	; (800abcc <uartUserDownload+0x214>)
 800ab42:	f7fe fecb 	bl	80098dc <Serial_PutString>
 800ab46:	e010      	b.n	800ab6a <uartUserDownload+0x1b2>
      }
      else if (result == COM_DATA)
 800ab48:	7d7b      	ldrb	r3, [r7, #21]
 800ab4a:	2b04      	cmp	r3, #4
 800ab4c:	d103      	bne.n	800ab56 <uartUserDownload+0x19e>
      {
         Serial_PutString((uint8_t *)"\r\n\r\nVerification failed!\r\n");
 800ab4e:	4820      	ldr	r0, [pc, #128]	; (800abd0 <uartUserDownload+0x218>)
 800ab50:	f7fe fec4 	bl	80098dc <Serial_PutString>
 800ab54:	e009      	b.n	800ab6a <uartUserDownload+0x1b2>
      }
      else if (result == COM_ABORT)
 800ab56:	7d7b      	ldrb	r3, [r7, #21]
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d103      	bne.n	800ab64 <uartUserDownload+0x1ac>
      {
         Serial_PutString((uint8_t *)"\r\n\nAborted by user.\r\n");
 800ab5c:	481d      	ldr	r0, [pc, #116]	; (800abd4 <uartUserDownload+0x21c>)
 800ab5e:	f7fe febd 	bl	80098dc <Serial_PutString>
 800ab62:	e002      	b.n	800ab6a <uartUserDownload+0x1b2>
      }
      else
      {
         Serial_PutString((uint8_t *)"\r\nFailed to receive the file!\r\n");
 800ab64:	481c      	ldr	r0, [pc, #112]	; (800abd8 <uartUserDownload+0x220>)
 800ab66:	f7fe feb9 	bl	80098dc <Serial_PutString>
      }
   }

   //Suspend scheduler
   osThreadResumeAll();
 800ab6a:	f00a fafe 	bl	801516a <osThreadResumeAll>

   //Release exclusive access
   osMutexRelease(iapMutexHandle);
 800ab6e:	4b04      	ldr	r3, [pc, #16]	; (800ab80 <uartUserDownload+0x1c8>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f00a fa94 	bl	80150a0 <osMutexRelease>
}
 800ab78:	bf00      	nop
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20001bfc 	.word	0x20001bfc
 800ab84:	20000098 	.word	0x20000098
 800ab88:	0801f1c8 	.word	0x0801f1c8
 800ab8c:	0801f1cc 	.word	0x0801f1cc
 800ab90:	200024f0 	.word	0x200024f0
 800ab94:	0801fda4 	.word	0x0801fda4
 800ab98:	0801fe14 	.word	0x0801fe14
 800ab9c:	0801fe68 	.word	0x0801fe68
 800aba0:	20001cec 	.word	0x20001cec
 800aba4:	0801f1ec 	.word	0x0801f1ec
 800aba8:	0801f208 	.word	0x0801f208
 800abac:	0801f244 	.word	0x0801f244
 800abb0:	20002514 	.word	0x20002514
 800abb4:	0801f298 	.word	0x0801f298
 800abb8:	0801f2a4 	.word	0x0801f2a4
 800abbc:	0801f2b0 	.word	0x0801f2b0
 800abc0:	0801f2c8 	.word	0x0801f2c8
 800abc4:	0801f2f0 	.word	0x0801f2f0
 800abc8:	0801f338 	.word	0x0801f338
 800abcc:	0801f34c 	.word	0x0801f34c
 800abd0:	0801f38c 	.word	0x0801f38c
 800abd4:	0801f3a8 	.word	0x0801f3a8
 800abd8:	0801f3c0 	.word	0x0801f3c0

0800abdc <Ymodem_Receive_UserCallback>:
 * @param[in] length Length of the received data
 * @retuen Error code
 **/

cboot_error_t Ymodem_Receive_UserCallback(uint8_t *data, size_t length)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
   cboot_error_t cboot_error;

   //Write received bytes in flash
   cboot_error = iapUpdate(&iapContext, data, length);
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	480d      	ldr	r0, [pc, #52]	; (800ac20 <Ymodem_Receive_UserCallback+0x44>)
 800abec:	f000 fc60 	bl	800b4b0 <iapUpdate>
 800abf0:	4603      	mov	r3, r0
 800abf2:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(cboot_error != CBOOT_NO_ERROR)
 800abf4:	89fb      	ldrh	r3, [r7, #14]
 800abf6:	f240 224b 	movw	r2, #587	; 0x24b
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d00b      	beq.n	800ac16 <Ymodem_Receive_UserCallback+0x3a>
   {
      //Debug message
      TRACE_ERROR("Failed to update firmware!\r\n");
 800abfe:	f7fe fc86 	bl	800950e <osSuspendAllTasks>
 800ac02:	4b08      	ldr	r3, [pc, #32]	; (800ac24 <Ymodem_Receive_UserCallback+0x48>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	221c      	movs	r2, #28
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	4806      	ldr	r0, [pc, #24]	; (800ac28 <Ymodem_Receive_UserCallback+0x4c>)
 800ac0e:	f00d fc75 	bl	80184fc <fwrite>
 800ac12:	f7fe fc87 	bl	8009524 <osResumeAllTasks>
   }

   //Status code
   return cboot_error;
 800ac16:	89fb      	ldrh	r3, [r7, #14]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	20001cec 	.word	0x20001cec
 800ac24:	20000098 	.word	0x20000098
 800ac28:	0801f3e0 	.word	0x0801f3e0

0800ac2c <uartUserInit>:
/**
 * @brief Initialize user uart
 **/

void uartUserInit(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0

   //
   // Setup UART against MX_UART_Init(). May not be needed if we keep MX_UART_Init().
   //

   HAL_UART_MspDeInit(Get_DebugHandle());
 800ac32:	f7ff fa85 	bl	800a140 <Get_DebugHandle>
 800ac36:	4603      	mov	r3, r0
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7ff fc63 	bl	800a504 <HAL_UART_MspDeInit>

   //Enable GPIOA clock
   __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac3e:	2001      	movs	r0, #1
 800ac40:	f7ff fe8a 	bl	800a958 <LL_AHB2_GRP1_EnableClock>
   //Enable USART2 clock
   __HAL_RCC_USART2_CLK_ENABLE();
 800ac44:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ac48:	f7ff fe9e 	bl	800a988 <LL_APB1_GRP1_EnableClock>

   //Configure USART2_TX (PA2)
   GPIO_InitStructure.Pin = GPIO_PIN_2;
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	607b      	str	r3, [r7, #4]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800ac50:	2302      	movs	r3, #2
 800ac52:	60bb      	str	r3, [r7, #8]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 800ac54:	2300      	movs	r3, #0
 800ac56:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 800ac5c:	2307      	movs	r3, #7
 800ac5e:	617b      	str	r3, [r7, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800ac60:	1d3b      	adds	r3, r7, #4
 800ac62:	4619      	mov	r1, r3
 800ac64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac68:	f003 fd70 	bl	800e74c <HAL_GPIO_Init>

   //Configure USART2_RX (PA3)
   GPIO_InitStructure.Pin = GPIO_PIN_3;
 800ac6c:	2308      	movs	r3, #8
 800ac6e:	607b      	str	r3, [r7, #4]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800ac70:	2302      	movs	r3, #2
 800ac72:	60bb      	str	r3, [r7, #8]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 800ac74:	2300      	movs	r3, #0
 800ac76:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 800ac7c:	2307      	movs	r3, #7
 800ac7e:	617b      	str	r3, [r7, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800ac80:	1d3b      	adds	r3, r7, #4
 800ac82:	4619      	mov	r1, r3
 800ac84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ac88:	f003 fd60 	bl	800e74c <HAL_GPIO_Init>

   UartHandle.Instance = USART2;
 800ac8c:	4b0e      	ldr	r3, [pc, #56]	; (800acc8 <uartUserInit+0x9c>)
 800ac8e:	4a0f      	ldr	r2, [pc, #60]	; (800accc <uartUserInit+0xa0>)
 800ac90:	601a      	str	r2, [r3, #0]
   UartHandle.Init.BaudRate = 115200;
 800ac92:	4b0d      	ldr	r3, [pc, #52]	; (800acc8 <uartUserInit+0x9c>)
 800ac94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ac98:	605a      	str	r2, [r3, #4]
   UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800ac9a:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <uartUserInit+0x9c>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	609a      	str	r2, [r3, #8]
   UartHandle.Init.StopBits = UART_STOPBITS_1;
 800aca0:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <uartUserInit+0x9c>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	60da      	str	r2, [r3, #12]
   UartHandle.Init.Parity = UART_PARITY_NONE;
 800aca6:	4b08      	ldr	r3, [pc, #32]	; (800acc8 <uartUserInit+0x9c>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	611a      	str	r2, [r3, #16]
   UartHandle.Init.Mode = UART_MODE_TX_RX;
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <uartUserInit+0x9c>)
 800acae:	220c      	movs	r2, #12
 800acb0:	615a      	str	r2, [r3, #20]
   UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800acb2:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <uartUserInit+0x9c>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	619a      	str	r2, [r3, #24]
   HAL_UART_Init(&UartHandle);
 800acb8:	4803      	ldr	r0, [pc, #12]	; (800acc8 <uartUserInit+0x9c>)
 800acba:	f007 faaf 	bl	801221c <HAL_UART_Init>
}
 800acbe:	bf00      	nop
 800acc0:	3718      	adds	r7, #24
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20001c58 	.word	0x20001c58
 800accc:	40004400 	.word	0x40004400

0800acd0 <uartUserTaskHandler>:
/**
 * @brief Uart user task routine
 **/

void uartUserTaskHandler(void *param)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
   uint8_t key = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	737b      	strb	r3, [r7, #13]
   uint8_t state = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	73fb      	strb	r3, [r7, #15]
   HAL_StatusTypeDef status;

   //Init uart
   uartUserInit();
 800ace0:	f7ff ffa4 	bl	800ac2c <uartUserInit>

   while(1)
   {
      if(state == 0)
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d11a      	bne.n	800ad20 <uartUserTaskHandler+0x50>
      {
         Serial_PutString((uint8_t*) "\r\n");
 800acea:	482d      	ldr	r0, [pc, #180]	; (800ada0 <uartUserTaskHandler+0xd0>)
 800acec:	f7fe fdf6 	bl	80098dc <Serial_PutString>
         Serial_PutString((uint8_t*) "=======================\r\n");
 800acf0:	482c      	ldr	r0, [pc, #176]	; (800ada4 <uartUserTaskHandler+0xd4>)
 800acf2:	f7fe fdf3 	bl	80098dc <Serial_PutString>
         Serial_PutString((uint8_t*) "= Y-MODEM update menu =\r\n");
 800acf6:	482c      	ldr	r0, [pc, #176]	; (800ada8 <uartUserTaskHandler+0xd8>)
 800acf8:	f7fe fdf0 	bl	80098dc <Serial_PutString>
         Serial_PutString((uint8_t*) "=======================\r\n");
 800acfc:	4829      	ldr	r0, [pc, #164]	; (800ada4 <uartUserTaskHandler+0xd4>)
 800acfe:	f7fe fded 	bl	80098dc <Serial_PutString>
         Serial_PutString((uint8_t*) "Choices:\r\n");
 800ad02:	482a      	ldr	r0, [pc, #168]	; (800adac <uartUserTaskHandler+0xdc>)
 800ad04:	f7fe fdea 	bl	80098dc <Serial_PutString>
         Serial_PutString((uint8_t*) "  1 -> Download update image\r\n");
 800ad08:	4829      	ldr	r0, [pc, #164]	; (800adb0 <uartUserTaskHandler+0xe0>)
 800ad0a:	f7fe fde7 	bl	80098dc <Serial_PutString>
         Serial_PutString((uint8_t*) "  2 -> Get current application version\r\n");
 800ad0e:	4829      	ldr	r0, [pc, #164]	; (800adb4 <uartUserTaskHandler+0xe4>)
 800ad10:	f7fe fde4 	bl	80098dc <Serial_PutString>
         Serial_PutString((uint8_t*) "\r\n");
 800ad14:	4822      	ldr	r0, [pc, #136]	; (800ada0 <uartUserTaskHandler+0xd0>)
 800ad16:	f7fe fde1 	bl	80098dc <Serial_PutString>

         //Change state
         state = 1;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	73fb      	strb	r3, [r7, #15]
 800ad1e:	e03b      	b.n	800ad98 <uartUserTaskHandler+0xc8>
      }
      else if(state == 1)
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d138      	bne.n	800ad98 <uartUserTaskHandler+0xc8>
      {
         /* Clean the input path */
         __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800ad26:	4b24      	ldr	r3, [pc, #144]	; (800adb8 <uartUserTaskHandler+0xe8>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	699a      	ldr	r2, [r3, #24]
 800ad2c:	4b22      	ldr	r3, [pc, #136]	; (800adb8 <uartUserTaskHandler+0xe8>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f042 0208 	orr.w	r2, r2, #8
 800ad34:	619a      	str	r2, [r3, #24]
 800ad36:	4b20      	ldr	r3, [pc, #128]	; (800adb8 <uartUserTaskHandler+0xe8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	699a      	ldr	r2, [r3, #24]
 800ad3c:	4b1e      	ldr	r3, [pc, #120]	; (800adb8 <uartUserTaskHandler+0xe8>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f042 0210 	orr.w	r2, r2, #16
 800ad44:	619a      	str	r2, [r3, #24]

         /* Receive key */
         status = HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 800ad46:	f107 010d 	add.w	r1, r7, #13
 800ad4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4e:	2201      	movs	r2, #1
 800ad50:	4819      	ldr	r0, [pc, #100]	; (800adb8 <uartUserTaskHandler+0xe8>)
 800ad52:	f007 fb91 	bl	8012478 <HAL_UART_Receive>
 800ad56:	4603      	mov	r3, r0
 800ad58:	73bb      	strb	r3, [r7, #14]

         if(status == HAL_OK)
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d11b      	bne.n	800ad98 <uartUserTaskHandler+0xc8>
         {
            switch(key)
 800ad60:	7b7b      	ldrb	r3, [r7, #13]
 800ad62:	2b31      	cmp	r3, #49	; 0x31
 800ad64:	d002      	beq.n	800ad6c <uartUserTaskHandler+0x9c>
 800ad66:	2b32      	cmp	r3, #50	; 0x32
 800ad68:	d006      	beq.n	800ad78 <uartUserTaskHandler+0xa8>
 800ad6a:	e009      	b.n	800ad80 <uartUserTaskHandler+0xb0>
            {
               case '1':
                  Serial_PutString((uint8_t*) "Downloading update image...\r\n");
 800ad6c:	4813      	ldr	r0, [pc, #76]	; (800adbc <uartUserTaskHandler+0xec>)
 800ad6e:	f7fe fdb5 	bl	80098dc <Serial_PutString>
                  //Start downloading file
                  uartUserDownload();
 800ad72:	f7ff fe21 	bl	800a9b8 <uartUserDownload>
                  break;
 800ad76:	e00a      	b.n	800ad8e <uartUserTaskHandler+0xbe>

               case '2':
#if defined(APP_DEMO_V1)
                  Serial_PutString((uint8_t*) "v1.0.0\r\n");
 800ad78:	4811      	ldr	r0, [pc, #68]	; (800adc0 <uartUserTaskHandler+0xf0>)
 800ad7a:	f7fe fdaf 	bl	80098dc <Serial_PutString>
#elif defined(APP_DEMO_V2)
                  Serial_PutString((uint8_t*) "v2.0.0\r\n");
#else
                  Serial_PutString((uint8_t*) "v3.0.0\r\n");
#endif
                  break;
 800ad7e:	e006      	b.n	800ad8e <uartUserTaskHandler+0xbe>

               default:
                  Serial_PutString((uint8_t*) "Unknown number!\r\n");
 800ad80:	4810      	ldr	r0, [pc, #64]	; (800adc4 <uartUserTaskHandler+0xf4>)
 800ad82:	f7fe fdab 	bl	80098dc <Serial_PutString>
                  Serial_PutString((uint8_t*) "Number should be 1 or 2!\r\n");
 800ad86:	4810      	ldr	r0, [pc, #64]	; (800adc8 <uartUserTaskHandler+0xf8>)
 800ad88:	f7fe fda8 	bl	80098dc <Serial_PutString>
                  break;
 800ad8c:	bf00      	nop
            }
            Serial_PutString((uint8_t*) "\r\n");
 800ad8e:	4804      	ldr	r0, [pc, #16]	; (800ada0 <uartUserTaskHandler+0xd0>)
 800ad90:	f7fe fda4 	bl	80098dc <Serial_PutString>

            //Change state
            state = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	73fb      	strb	r3, [r7, #15]
      {
         //For sanity
      }

      //Os delay
      osDelayTask(200);
 800ad98:	20c8      	movs	r0, #200	; 0xc8
 800ad9a:	f7fe fbad 	bl	80094f8 <osDelayTask>
      if(state == 0)
 800ad9e:	e7a1      	b.n	800ace4 <uartUserTaskHandler+0x14>
 800ada0:	0801f1c8 	.word	0x0801f1c8
 800ada4:	0801f400 	.word	0x0801f400
 800ada8:	0801f41c 	.word	0x0801f41c
 800adac:	0801f438 	.word	0x0801f438
 800adb0:	0801f444 	.word	0x0801f444
 800adb4:	0801f464 	.word	0x0801f464
 800adb8:	20001c58 	.word	0x20001c58
 800adbc:	0801f490 	.word	0x0801f490
 800adc0:	0801f4b0 	.word	0x0801f4b0
 800adc4:	0801f4bc 	.word	0x0801f4bc
 800adc8:	0801f4d0 	.word	0x0801f4d0

0800adcc <ReceivePacket>:
 * @return HAL_OK: normally return
 *         HAL_BUSY: abort by user
 **/

static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 800add8:	2300      	movs	r3, #0
 800adda:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2200      	movs	r2, #0
 800ade0:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 800ade2:	f107 0113 	add.w	r1, r7, #19
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	485d      	ldr	r0, [pc, #372]	; (800af60 <ReceivePacket+0x194>)
 800adec:	f007 fb44 	bl	8012478 <HAL_UART_Receive>
 800adf0:	4603      	mov	r3, r0
 800adf2:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 800adf4:	7efb      	ldrb	r3, [r7, #27]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f040 80aa 	bne.w	800af50 <ReceivePacket+0x184>
  {
    switch (char1)
 800adfc:	7cfb      	ldrb	r3, [r7, #19]
 800adfe:	2b61      	cmp	r3, #97	; 0x61
 800ae00:	d059      	beq.n	800aeb6 <ReceivePacket+0xea>
 800ae02:	2b61      	cmp	r3, #97	; 0x61
 800ae04:	dc5a      	bgt.n	800aebc <ReceivePacket+0xf0>
 800ae06:	2b18      	cmp	r3, #24
 800ae08:	dc38      	bgt.n	800ae7c <ReceivePacket+0xb0>
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	dd56      	ble.n	800aebc <ReceivePacket+0xf0>
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	2b17      	cmp	r3, #23
 800ae12:	d853      	bhi.n	800aebc <ReceivePacket+0xf0>
 800ae14:	a201      	add	r2, pc, #4	; (adr r2, 800ae1c <ReceivePacket+0x50>)
 800ae16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1a:	bf00      	nop
 800ae1c:	0800ae83 	.word	0x0800ae83
 800ae20:	0800ae89 	.word	0x0800ae89
 800ae24:	0800aebd 	.word	0x0800aebd
 800ae28:	0800aec3 	.word	0x0800aec3
 800ae2c:	0800aebd 	.word	0x0800aebd
 800ae30:	0800aebd 	.word	0x0800aebd
 800ae34:	0800aebd 	.word	0x0800aebd
 800ae38:	0800aebd 	.word	0x0800aebd
 800ae3c:	0800aebd 	.word	0x0800aebd
 800ae40:	0800aebd 	.word	0x0800aebd
 800ae44:	0800aebd 	.word	0x0800aebd
 800ae48:	0800aebd 	.word	0x0800aebd
 800ae4c:	0800aebd 	.word	0x0800aebd
 800ae50:	0800aebd 	.word	0x0800aebd
 800ae54:	0800aebd 	.word	0x0800aebd
 800ae58:	0800aebd 	.word	0x0800aebd
 800ae5c:	0800aebd 	.word	0x0800aebd
 800ae60:	0800aebd 	.word	0x0800aebd
 800ae64:	0800aebd 	.word	0x0800aebd
 800ae68:	0800aebd 	.word	0x0800aebd
 800ae6c:	0800aebd 	.word	0x0800aebd
 800ae70:	0800aebd 	.word	0x0800aebd
 800ae74:	0800aebd 	.word	0x0800aebd
 800ae78:	0800ae91 	.word	0x0800ae91
 800ae7c:	2b41      	cmp	r3, #65	; 0x41
 800ae7e:	d01a      	beq.n	800aeb6 <ReceivePacket+0xea>
 800ae80:	e01c      	b.n	800aebc <ReceivePacket+0xf0>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 800ae82:	2380      	movs	r3, #128	; 0x80
 800ae84:	61fb      	str	r3, [r7, #28]
        break;
 800ae86:	e01d      	b.n	800aec4 <ReceivePacket+0xf8>
      case STX:
        packet_size = PACKET_1K_SIZE;
 800ae88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae8c:	61fb      	str	r3, [r7, #28]
        break;
 800ae8e:	e019      	b.n	800aec4 <ReceivePacket+0xf8>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 800ae90:	f107 0113 	add.w	r1, r7, #19
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	4831      	ldr	r0, [pc, #196]	; (800af60 <ReceivePacket+0x194>)
 800ae9a:	f007 faed 	bl	8012478 <HAL_UART_Receive>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d105      	bne.n	800aeb0 <ReceivePacket+0xe4>
 800aea4:	7cfb      	ldrb	r3, [r7, #19]
 800aea6:	2b18      	cmp	r3, #24
 800aea8:	d102      	bne.n	800aeb0 <ReceivePacket+0xe4>
        {
          packet_size = 2;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 800aeae:	e009      	b.n	800aec4 <ReceivePacket+0xf8>
          status = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	76fb      	strb	r3, [r7, #27]
        break;
 800aeb4:	e006      	b.n	800aec4 <ReceivePacket+0xf8>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	76fb      	strb	r3, [r7, #27]
        break;
 800aeba:	e003      	b.n	800aec4 <ReceivePacket+0xf8>
      default:
        status = HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	76fb      	strb	r3, [r7, #27]
        break;
 800aec0:	e000      	b.n	800aec4 <ReceivePacket+0xf8>
        break;
 800aec2:	bf00      	nop
    }
    *p_data = char1;
 800aec4:	7cfa      	ldrb	r2, [r7, #19]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	2b7f      	cmp	r3, #127	; 0x7f
 800aece:	d93f      	bls.n	800af50 <ReceivePacket+0x184>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	1c99      	adds	r1, r3, #2
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	3304      	adds	r3, #4
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4820      	ldr	r0, [pc, #128]	; (800af60 <ReceivePacket+0x194>)
 800aee0:	f007 faca 	bl	8012478 <HAL_UART_Receive>
 800aee4:	4603      	mov	r3, r0
 800aee6:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 800aee8:	7efb      	ldrb	r3, [r7, #27]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d12e      	bne.n	800af4c <ReceivePacket+0x180>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	3302      	adds	r3, #2
 800aef2:	781a      	ldrb	r2, [r3, #0]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3303      	adds	r3, #3
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	43db      	mvns	r3, r3
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	429a      	cmp	r2, r3
 800af00:	d004      	beq.n	800af0c <ReceivePacket+0x140>
        {
          packet_size = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	76fb      	strb	r3, [r7, #27]
 800af0a:	e021      	b.n	800af50 <ReceivePacket+0x184>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	3304      	adds	r3, #4
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4413      	add	r3, r2
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	021b      	lsls	r3, r3, #8
 800af18:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	3305      	adds	r3, #5
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	4413      	add	r3, r2
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	461a      	mov	r2, r3
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	4413      	add	r3, r2
 800af2a:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	3304      	adds	r3, #4
 800af30:	69f9      	ldr	r1, [r7, #28]
 800af32:	4618      	mov	r0, r3
 800af34:	f000 f849 	bl	800afca <Cal_CRC16>
 800af38:	4603      	mov	r3, r0
 800af3a:	461a      	mov	r2, r3
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	4293      	cmp	r3, r2
 800af40:	d006      	beq.n	800af50 <ReceivePacket+0x184>
          {
            packet_size = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	76fb      	strb	r3, [r7, #27]
 800af4a:	e001      	b.n	800af50 <ReceivePacket+0x184>
          }
        }
      }
      else
      {
        packet_size = 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	69fa      	ldr	r2, [r7, #28]
 800af54:	601a      	str	r2, [r3, #0]
  return status;
 800af56:	7efb      	ldrb	r3, [r7, #27]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3720      	adds	r7, #32
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20001c58 	.word	0x20001c58

0800af64 <UpdateCRC16>:
 * @param[in] input byte
 * @return None
 **/

uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	4603      	mov	r3, r0
 800af6c:	460a      	mov	r2, r1
 800af6e:	80fb      	strh	r3, [r7, #6]
 800af70:	4613      	mov	r3, r2
 800af72:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 800af78:	797b      	ldrb	r3, [r7, #5]
 800af7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af7e:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af92:	2b00      	cmp	r3, #0
 800af94:	d002      	beq.n	800af9c <UpdateCRC16+0x38>
      ++crc;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	3301      	adds	r3, #1
 800af9a:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d005      	beq.n	800afb2 <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800afac:	f083 0301 	eor.w	r3, r3, #1
 800afb0:	60fb      	str	r3, [r7, #12]
  }

  while(!(in & 0x10000));
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0e1      	beq.n	800af80 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	b29b      	uxth	r3, r3
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bc80      	pop	{r7}
 800afc8:	4770      	bx	lr

0800afca <Cal_CRC16>:
 * @param[in] length
 * @return None
 **/

uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b084      	sub	sp, #16
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	4413      	add	r3, r2
 800afde:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 800afe0:	e00a      	b.n	800aff8 <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	b298      	uxth	r0, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	1c5a      	adds	r2, r3, #1
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	4619      	mov	r1, r3
 800aff0:	f7ff ffb8 	bl	800af64 <UpdateCRC16>
 800aff4:	4603      	mov	r3, r0
 800aff6:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	429a      	cmp	r2, r3
 800affe:	d3f0      	bcc.n	800afe2 <Cal_CRC16+0x18>

  crc = UpdateCRC16(crc, 0);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	b29b      	uxth	r3, r3
 800b004:	2100      	movs	r1, #0
 800b006:	4618      	mov	r0, r3
 800b008:	f7ff ffac 	bl	800af64 <UpdateCRC16>
 800b00c:	4603      	mov	r3, r0
 800b00e:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	b29b      	uxth	r3, r3
 800b014:	2100      	movs	r1, #0
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff ffa4 	bl	800af64 <UpdateCRC16>
 800b01c:	4603      	mov	r3, r0
 800b01e:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	b29b      	uxth	r3, r3
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <Ymodem_Receive>:
 * @param[out] p_size The size of the file.
 * @return COM_StatusTypeDef result of reception/programming
 **/

COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b092      	sub	sp, #72	; 0x48
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0, packets_received = 0, bytes_received = 0;
 800b034:	2300      	movs	r3, #0
 800b036:	643b      	str	r3, [r7, #64]	; 0x40
 800b038:	2300      	movs	r3, #0
 800b03a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b03c:	2300      	movs	r3, #0
 800b03e:	637b      	str	r3, [r7, #52]	; 0x34
 800b040:	2300      	movs	r3, #0
 800b042:	633b      	str	r3, [r7, #48]	; 0x30
 800b044:	2300      	movs	r3, #0
 800b046:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t filesize;
  uint8_t *file_ptr, *data_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH];
  COM_StatusTypeDef result = COM_OK;
 800b048:	2300      	movs	r3, #0
 800b04a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  while ((session_done == 0) && (result == COM_OK))
 800b04e:	e0ea      	b.n	800b226 <Ymodem_Receive+0x1fa>
  {
    packets_received = 0;
 800b050:	2300      	movs	r3, #0
 800b052:	633b      	str	r3, [r7, #48]	; 0x30
    file_done = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 800b058:	e0dd      	b.n	800b216 <Ymodem_Receive+0x1ea>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 800b05a:	f107 031c 	add.w	r3, r7, #28
 800b05e:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b062:	4619      	mov	r1, r3
 800b064:	4877      	ldr	r0, [pc, #476]	; (800b244 <Ymodem_Receive+0x218>)
 800b066:	f7ff feb1 	bl	800adcc <ReceivePacket>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <Ymodem_Receive+0x4c>
 800b070:	2b02      	cmp	r3, #2
 800b072:	f000 80b2 	beq.w	800b1da <Ymodem_Receive+0x1ae>
 800b076:	e0ba      	b.n	800b1ee <Ymodem_Receive+0x1c2>
      {
        case HAL_OK:
          errors = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d008      	beq.n	800b094 <Ymodem_Receive+0x68>
 800b082:	2b02      	cmp	r3, #2
 800b084:	d10c      	bne.n	800b0a0 <Ymodem_Receive+0x74>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 800b086:	2006      	movs	r0, #6
 800b088:	f7fe fc44 	bl	8009914 <Serial_PutByte>
              result = COM_ABORT;
 800b08c:	2302      	movs	r3, #2
 800b08e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              break;
 800b092:	e0a1      	b.n	800b1d8 <Ymodem_Receive+0x1ac>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 800b094:	2006      	movs	r0, #6
 800b096:	f7fe fc3d 	bl	8009914 <Serial_PutByte>
              file_done = 1;
 800b09a:	2301      	movs	r3, #1
 800b09c:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 800b09e:	e09b      	b.n	800b1d8 <Ymodem_Receive+0x1ac>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != (0xFFU & packets_received))
 800b0a0:	4b68      	ldr	r3, [pc, #416]	; (800b244 <Ymodem_Receive+0x218>)
 800b0a2:	789b      	ldrb	r3, [r3, #2]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d003      	beq.n	800b0b6 <Ymodem_Receive+0x8a>
              {
                Serial_PutByte(NAK);
 800b0ae:	2015      	movs	r0, #21
 800b0b0:	f7fe fc30 	bl	8009914 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 800b0b4:	e08f      	b.n	800b1d6 <Ymodem_Receive+0x1aa>
                if (packets_received == 0)
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d158      	bne.n	800b16e <Ymodem_Receive+0x142>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 800b0bc:	4b61      	ldr	r3, [pc, #388]	; (800b244 <Ymodem_Receive+0x218>)
 800b0be:	791b      	ldrb	r3, [r3, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d04c      	beq.n	800b15e <Ymodem_Receive+0x132>
                    i = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 800b0c8:	4b5f      	ldr	r3, [pc, #380]	; (800b248 <Ymodem_Receive+0x21c>)
 800b0ca:	62bb      	str	r3, [r7, #40]	; 0x28
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800b0cc:	e008      	b.n	800b0e0 <Ymodem_Receive+0xb4>
                      aFileName[i++] = *file_ptr++;
 800b0ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0d0:	1c53      	adds	r3, r2, #1
 800b0d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d6:	1c59      	adds	r1, r3, #1
 800b0d8:	6479      	str	r1, [r7, #68]	; 0x44
 800b0da:	7811      	ldrb	r1, [r2, #0]
 800b0dc:	4a5b      	ldr	r2, [pc, #364]	; (800b24c <Ymodem_Receive+0x220>)
 800b0de:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <Ymodem_Receive+0xc2>
 800b0e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0ea:	2b3f      	cmp	r3, #63	; 0x3f
 800b0ec:	d9ef      	bls.n	800b0ce <Ymodem_Receive+0xa2>
                    aFileName[i++] = '\0';
 800b0ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0f0:	1c5a      	adds	r2, r3, #1
 800b0f2:	647a      	str	r2, [r7, #68]	; 0x44
 800b0f4:	4a55      	ldr	r2, [pc, #340]	; (800b24c <Ymodem_Receive+0x220>)
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	3301      	adds	r3, #1
 800b102:	62bb      	str	r3, [r7, #40]	; 0x28
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800b104:	e00a      	b.n	800b11c <Ymodem_Receive+0xf0>
                      file_size[i++] = *file_ptr++;
 800b106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b108:	1c53      	adds	r3, r2, #1
 800b10a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b10e:	1c59      	adds	r1, r3, #1
 800b110:	6479      	str	r1, [r7, #68]	; 0x44
 800b112:	7812      	ldrb	r2, [r2, #0]
 800b114:	3348      	adds	r3, #72	; 0x48
 800b116:	443b      	add	r3, r7
 800b118:	f803 2c40 	strb.w	r2, [r3, #-64]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b20      	cmp	r3, #32
 800b122:	d002      	beq.n	800b12a <Ymodem_Receive+0xfe>
 800b124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b126:	2b0f      	cmp	r3, #15
 800b128:	d9ed      	bls.n	800b106 <Ymodem_Receive+0xda>
                    file_size[i++] = '\0';
 800b12a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b12c:	1c5a      	adds	r2, r3, #1
 800b12e:	647a      	str	r2, [r7, #68]	; 0x44
 800b130:	3348      	adds	r3, #72	; 0x48
 800b132:	443b      	add	r3, r7
 800b134:	2200      	movs	r2, #0
 800b136:	f803 2c40 	strb.w	r2, [r3, #-64]
                    Str2Int(file_size, &filesize);
 800b13a:	f107 0218 	add.w	r2, r7, #24
 800b13e:	f107 0308 	add.w	r3, r7, #8
 800b142:	4611      	mov	r1, r2
 800b144:	4618      	mov	r0, r3
 800b146:	f7fe fad5 	bl	80096f4 <Str2Int>
                    *p_size = filesize;
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 800b150:	2006      	movs	r0, #6
 800b152:	f7fe fbdf 	bl	8009914 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 800b156:	2043      	movs	r0, #67	; 0x43
 800b158:	f7fe fbdc 	bl	8009914 <Serial_PutByte>
 800b15c:	e036      	b.n	800b1cc <Ymodem_Receive+0x1a0>
                    Serial_PutByte(ACK);
 800b15e:	2006      	movs	r0, #6
 800b160:	f7fe fbd8 	bl	8009914 <Serial_PutByte>
                    file_done = 1;
 800b164:	2301      	movs	r3, #1
 800b166:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 800b168:	2301      	movs	r3, #1
 800b16a:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 800b16c:	e034      	b.n	800b1d8 <Ymodem_Receive+0x1ac>
                   data_ptr = (uint8_t*)&aPacketData[PACKET_DATA_INDEX];
 800b16e:	4b36      	ldr	r3, [pc, #216]	; (800b248 <Ymodem_Receive+0x21c>)
 800b170:	623b      	str	r3, [r7, #32]
                   if((filesize - bytes_received) < 1024)
 800b172:	69ba      	ldr	r2, [r7, #24]
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b17c:	d20a      	bcs.n	800b194 <Ymodem_Receive+0x168>
                      while(data_ptr[packet_length-1] == '\x1A')
 800b17e:	e002      	b.n	800b186 <Ymodem_Receive+0x15a>
                         packet_length--;
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	3b01      	subs	r3, #1
 800b184:	61fb      	str	r3, [r7, #28]
                      while(data_ptr[packet_length-1] == '\x1A')
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	3b01      	subs	r3, #1
 800b18a:	6a3a      	ldr	r2, [r7, #32]
 800b18c:	4413      	add	r3, r2
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2b1a      	cmp	r3, #26
 800b192:	d0f5      	beq.n	800b180 <Ymodem_Receive+0x154>
                   bytes_received += packet_length;
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b198:	4413      	add	r3, r2
 800b19a:	62fb      	str	r3, [r7, #44]	; 0x2c
                   if(Ymodem_Receive_UserCallback(data_ptr, packet_length) == CBOOT_NO_ERROR)
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6a38      	ldr	r0, [r7, #32]
 800b1a2:	f7ff fd1b 	bl	800abdc <Ymodem_Receive_UserCallback>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	f240 234b 	movw	r3, #587	; 0x24b
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d103      	bne.n	800b1ba <Ymodem_Receive+0x18e>
                      Serial_PutByte(ACK);
 800b1b2:	2006      	movs	r0, #6
 800b1b4:	f7fe fbae 	bl	8009914 <Serial_PutByte>
 800b1b8:	e008      	b.n	800b1cc <Ymodem_Receive+0x1a0>
                    Serial_PutByte(CA);
 800b1ba:	2018      	movs	r0, #24
 800b1bc:	f7fe fbaa 	bl	8009914 <Serial_PutByte>
                    Serial_PutByte(CA);
 800b1c0:	2018      	movs	r0, #24
 800b1c2:	f7fe fba7 	bl	8009914 <Serial_PutByte>
                    result = COM_DATA;
 800b1c6:	2304      	movs	r3, #4
 800b1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                packets_received ++;
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	633b      	str	r3, [r7, #48]	; 0x30
                session_begin = 1;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b1d6:	bf00      	nop
          }
          break;
 800b1d8:	e01d      	b.n	800b216 <Ymodem_Receive+0x1ea>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 800b1da:	2018      	movs	r0, #24
 800b1dc:	f7fe fb9a 	bl	8009914 <Serial_PutByte>
          Serial_PutByte(CA);
 800b1e0:	2018      	movs	r0, #24
 800b1e2:	f7fe fb97 	bl	8009914 <Serial_PutByte>
          result = COM_ABORT;
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b1ec:	e013      	b.n	800b216 <Ymodem_Receive+0x1ea>
        default:
          if (session_begin > 0)
 800b1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <Ymodem_Receive+0x1ce>
          {
            errors ++;
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	2b05      	cmp	r3, #5
 800b1fe:	d906      	bls.n	800b20e <Ymodem_Receive+0x1e2>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 800b200:	2018      	movs	r0, #24
 800b202:	f7fe fb87 	bl	8009914 <Serial_PutByte>
            Serial_PutByte(CA);
 800b206:	2018      	movs	r0, #24
 800b208:	f7fe fb84 	bl	8009914 <Serial_PutByte>
 800b20c:	e002      	b.n	800b214 <Ymodem_Receive+0x1e8>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 800b20e:	2043      	movs	r0, #67	; 0x43
 800b210:	f7fe fb80 	bl	8009914 <Serial_PutByte>
          }
          break;
 800b214:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 800b216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d104      	bne.n	800b226 <Ymodem_Receive+0x1fa>
 800b21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b220:	2b00      	cmp	r3, #0
 800b222:	f43f af1a 	beq.w	800b05a <Ymodem_Receive+0x2e>
  while ((session_done == 0) && (result == COM_OK))
 800b226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d104      	bne.n	800b236 <Ymodem_Receive+0x20a>
 800b22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b230:	2b00      	cmp	r3, #0
 800b232:	f43f af0d 	beq.w	800b050 <Ymodem_Receive+0x24>
      }
    }
  }
  return result;
 800b236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3748      	adds	r7, #72	; 0x48
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20002554 	.word	0x20002554
 800b248:	20002558 	.word	0x20002558
 800b24c:	20002514 	.word	0x20002514

0800b250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b250:	480d      	ldr	r0, [pc, #52]	; (800b288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800b252:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b254:	f7ff fb72 	bl	800a93c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b258:	480c      	ldr	r0, [pc, #48]	; (800b28c <LoopForever+0x6>)
  ldr r1, =_edata
 800b25a:	490d      	ldr	r1, [pc, #52]	; (800b290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b25c:	4a0d      	ldr	r2, [pc, #52]	; (800b294 <LoopForever+0xe>)
  movs r3, #0
 800b25e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b260:	e002      	b.n	800b268 <LoopCopyDataInit>

0800b262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b266:	3304      	adds	r3, #4

0800b268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b26a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b26c:	d3f9      	bcc.n	800b262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b26e:	4a0a      	ldr	r2, [pc, #40]	; (800b298 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b270:	4c0a      	ldr	r4, [pc, #40]	; (800b29c <LoopForever+0x16>)
  movs r3, #0
 800b272:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b274:	e001      	b.n	800b27a <LoopFillZerobss>

0800b276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b278:	3204      	adds	r2, #4

0800b27a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b27a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b27c:	d3fb      	bcc.n	800b276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800b27e:	f00d f94b 	bl	8018518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b282:	f7fe fbe9 	bl	8009a58 <main>

0800b286 <LoopForever>:

LoopForever:
    b LoopForever
 800b286:	e7fe      	b.n	800b286 <LoopForever>
  ldr   r0, =_estack
 800b288:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b28c:	20000080 	.word	0x20000080
  ldr r1, =_edata
 800b290:	20000a48 	.word	0x20000a48
  ldr r2, =_sidata
 800b294:	080208f4 	.word	0x080208f4
  ldr r2, =_sbss
 800b298:	20000a48 	.word	0x20000a48
  ldr r4, =_ebss
 800b29c:	20005ea4 	.word	0x20005ea4

0800b2a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b2a0:	e7fe      	b.n	800b2a0 <ADC_IRQHandler>

0800b2a2 <crc32Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

error_t crc32Compute(const void *data, size_t length, uint8_t *digest)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b086      	sub	sp, #24
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	607a      	str	r2, [r7, #4]
   //Allocate a memory buffer to hold the CRC32 context
   Crc32Context *context = cryptoAllocMem(sizeof(Crc32Context));
 800b2ae:	2004      	movs	r0, #4
 800b2b0:	f7fe f943 	bl	800953a <osAllocMem>
 800b2b4:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(context == NULL)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <crc32Compute+0x1e>
      return ERROR_OUT_OF_MEMORY;
 800b2bc:	2364      	movs	r3, #100	; 0x64
 800b2be:	e00f      	b.n	800b2e0 <crc32Compute+0x3e>

   //Initialize the CRC32 context
   crc32Init(context);
 800b2c0:	6978      	ldr	r0, [r7, #20]
 800b2c2:	f000 f811 	bl	800b2e8 <crc32Init>
   //Digest the message
   crc32Update(context, data, length);
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	68f9      	ldr	r1, [r7, #12]
 800b2ca:	6978      	ldr	r0, [r7, #20]
 800b2cc:	f000 f81a 	bl	800b304 <crc32Update>
   //Finalize the CRC32 message digest
   crc32Final(context, digest);
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	6978      	ldr	r0, [r7, #20]
 800b2d4:	f000 f844 	bl	800b360 <crc32Final>

   //Free previously allocated memory
   cryptoFreeMem(context);
 800b2d8:	6978      	ldr	r0, [r7, #20]
 800b2da:	f7fe f93b 	bl	8009554 <osFreeMem>
   //Successful processing
   return NO_ERROR;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <crc32Init>:
 * @brief Initialize CRC32 message digest context
 * @param[in] context Pointer to the CRC32 context to initialize
 **/

void crc32Init(Crc32Context *context)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
   //CRC (digest) preset value
   context->digest = 0xFFFFFFFF;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f6:	601a      	str	r2, [r3, #0]
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bc80      	pop	{r7}
 800b300:	4770      	bx	lr
	...

0800b304 <crc32Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void crc32Update(Crc32Context *context, const void *data, size_t length)
{
 800b304:	b480      	push	{r7}
 800b306:	b089      	sub	sp, #36	; 0x24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
   size_t i;
   const uint8_t *p;
   uint32_t crc;

   //Restaure last crc
   crc = (uint32_t)context->digest;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	61bb      	str	r3, [r7, #24]

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	617b      	str	r3, [r7, #20]

   //Process the incoming data
   for(i = 0; i < length; i++)
 800b31a:	2300      	movs	r3, #0
 800b31c:	61fb      	str	r3, [r7, #28]
 800b31e:	e010      	b.n	800b342 <crc32Update+0x3e>
   {
      //The message is processed byte by byte
      crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ p[i]];
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	0a1a      	lsrs	r2, r3, #8
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	b2db      	uxtb	r3, r3
 800b328:	6978      	ldr	r0, [r7, #20]
 800b32a:	69f9      	ldr	r1, [r7, #28]
 800b32c:	4401      	add	r1, r0
 800b32e:	7809      	ldrb	r1, [r1, #0]
 800b330:	404b      	eors	r3, r1
 800b332:	490a      	ldr	r1, [pc, #40]	; (800b35c <crc32Update+0x58>)
 800b334:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b338:	4053      	eors	r3, r2
 800b33a:	61bb      	str	r3, [r7, #24]
   for(i = 0; i < length; i++)
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	3301      	adds	r3, #1
 800b340:	61fb      	str	r3, [r7, #28]
 800b342:	69fa      	ldr	r2, [r7, #28]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	429a      	cmp	r2, r3
 800b348:	d3ea      	bcc.n	800b320 <crc32Update+0x1c>
   }

   //Save updated crc
   context->digest = crc;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	601a      	str	r2, [r3, #0]
}
 800b350:	bf00      	nop
 800b352:	3724      	adds	r7, #36	; 0x24
 800b354:	46bd      	mov	sp, r7
 800b356:	bc80      	pop	{r7}
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	0801f9a4 	.word	0x0801f9a4

0800b360 <crc32Final>:
 * @param[in] context Pointer to the CRC32 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

void crc32Final(Crc32Context *context, uint8_t *digest)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
   //Copy the resulting digest
   if(digest != NULL)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d004      	beq.n	800b37a <crc32Final+0x1a>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	461a      	mov	r2, r3
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	601a      	str	r2, [r3, #0]
}
 800b37a:	bf00      	nop
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	bc80      	pop	{r7}
 800b382:	4770      	bx	lr

0800b384 <iapGetDefaultSettings>:
* @brief Initialize settings with default values
* @param[in,out] settings Structure that contains IAP settings
**/

void iapGetDefaultSettings(IapSettings *settings)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
   //Clear image output crypto settings structure
   memset(settings, 0x00, sizeof(IapSettings));
 800b38c:	2224      	movs	r2, #36	; 0x24
 800b38e:	2100      	movs	r1, #0
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f00d fb5d 	bl	8018a50 <memset>

#if (VERIFY_INTEGRITY_SUPPORT == ENABLED || IAP_SINGLE_BANK_SUPPORT == ENABLED)
   //IAP integrity setting
   settings->imageInCrypto.verifySettings.integrityAlgo = NULL;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	60da      	str	r2, [r3, #12]
   settings->imageInCrypto.cipherAlgo = NULL;
   settings->imageInCrypto.cipherMode = CIPHER_MODE_NULL;
   settings->imageInCrypto.cipherKey = NULL;
   settings->imageInCrypto.cipherKeyLen = 0;
#endif
}
 800b39c:	bf00      	nop
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <iapInit>:
 * @param[in,out] context Pointer to the IAP Application context to be initialized
 * @return Status code
 **/

cboot_error_t iapInit(IapContext *context, const IapSettings *settings)
{
 800b3a4:	b5b0      	push	{r4, r5, r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   uint16_t newImgIdx;
#endif

   //Check Parameters validity
   if(context == NULL || settings == NULL)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d002      	beq.n	800b3ba <iapInit+0x16>
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d102      	bne.n	800b3c0 <iapInit+0x1c>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800b3ba:	f240 234d 	movw	r3, #589	; 0x24d
 800b3be:	e073      	b.n	800b4a8 <iapInit+0x104>

   //Debug message
   TRACE_INFO("Initializing IAP...\r\n");

   //Clear the IAP context
   memset(context, 0, sizeof(IapContext));
 800b3c0:	f640 0204 	movw	r2, #2052	; 0x804
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f00d fb42 	bl	8018a50 <memset>

    //Save user settings
   context->settings = *settings;
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	4614      	mov	r4, r2
 800b3d2:	461d      	mov	r5, r3
 800b3d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b3da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	6023      	str	r3, [r4, #0]

   //Initialize primary (internal flash) memory driver
   error = iapInitPrimaryMemory(&context->settings,context);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 f9b4 	bl	800b752 <iapInitPrimaryMemory>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b3ee:	89fb      	ldrh	r3, [r7, #14]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <iapInit+0x56>
      return CBOOT_ERROR_FAILURE;
 800b3f4:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b3f8:	e056      	b.n	800b4a8 <iapInit+0x104>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   //Initialize secondary (external) memory driver
   error = iapInitSecondaryMemory(&context->settings,context);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6879      	ldr	r1, [r7, #4]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f000 fa03 	bl	800b80a <iapInitSecondaryMemory>
 800b404:	4603      	mov	r3, r0
 800b406:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b408:	89fb      	ldrh	r3, [r7, #14]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d002      	beq.n	800b414 <iapInit+0x70>
      return CBOOT_ERROR_FAILURE;
 800b40e:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b412:	e049      	b.n	800b4a8 <iapInit+0x104>
#endif

   //Initialize image input context (will process received update image)
   error = iapInitInputImage(&context->settings,context);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6879      	ldr	r1, [r7, #4]
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 fa55 	bl	800b8c8 <iapInitInputImage>
 800b41e:	4603      	mov	r3, r0
 800b420:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b422:	89fb      	ldrh	r3, [r7, #14]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <iapInit+0x8a>
      return CBOOT_ERROR_FAILURE;
 800b428:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b42c:	e03c      	b.n	800b4a8 <iapInit+0x104>

   //Initialize image output context (will process the output binary or image)
   error = iapInitOutputImage(&context->settings,context);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6879      	ldr	r1, [r7, #4]
 800b432:	4618      	mov	r0, r3
 800b434:	f000 fab6 	bl	800b9a4 <iapInitOutputImage>
 800b438:	4603      	mov	r3, r0
 800b43a:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b43c:	89fb      	ldrh	r3, [r7, #14]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <iapInit+0xa4>
      return CBOOT_ERROR_FAILURE;
 800b442:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b446:	e02f      	b.n	800b4a8 <iapInit+0x104>

#if IAP_SINGLE_BANK_SUPPORT == ENABLED
   // Set index of output image
   error = iapCalculateOutputImageIdx(context, &newImgIdx);
 800b448:	f107 030c 	add.w	r3, r7, #12
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f93d 	bl	800b6ce <iapCalculateOutputImageIdx>
 800b454:	4603      	mov	r3, r0
 800b456:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b458:	89fb      	ldrh	r3, [r7, #14]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <iapInit+0xc0>
      return CBOOT_ERROR_FAILURE;
 800b45e:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b462:	e021      	b.n	800b4a8 <iapInit+0x104>

   context->imageOutput.imgIdx = newImgIdx;
 800b464:	89ba      	ldrh	r2, [r7, #12]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8a3 2430 	strh.w	r2, [r3, #1072]	; 0x430
#endif

   //Get slot to store output update image
   error = iapGetUpdateSlot(context, &context->imageOutput.slotInfo);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f957 	bl	800b728 <iapGetUpdateSlot>
 800b47a:	4603      	mov	r3, r0
 800b47c:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b47e:	89fb      	ldrh	r3, [r7, #14]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <iapInit+0xe6>
      return CBOOT_ERROR_FAILURE;
 800b484:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b488:	e00e      	b.n	800b4a8 <iapInit+0x104>

   //Get external flash memory start address
   context->imageOutput.firmwareAddr = context->imageOutput.slotInfo->addr;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438

   //Initialize memory position to flash bank start addresse
   context->imageOutput.pos = context->imageOutput.firmwareAddr;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 2438 	ldr.w	r2, [r3, #1080]	; 0x438
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

   //Successful process
   return CBOOT_NO_ERROR;
 800b4a4:	f240 234b 	movw	r3, #587	; 0x24b
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bdb0      	pop	{r4, r5, r7, pc}

0800b4b0 <iapUpdate>:
 * @param[in] length Length of the firmware chunck of data to be written
 * @return Status code
 **/

cboot_error_t iapUpdate(IapContext *context, const void *data, size_t length)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b088      	sub	sp, #32
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
   error_t error;
   uint_t n;
   uint8_t *pData;

   //Check parameters validity
   if (context == NULL || data == NULL || length == 0)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d005      	beq.n	800b4ce <iapUpdate+0x1e>
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <iapUpdate+0x1e>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d102      	bne.n	800b4d4 <iapUpdate+0x24>
      return CBOOT_ERROR_INVALID_PARAMETERS;//ERROR_INVALID_PARAMETER;
 800b4ce:	f240 234d 	movw	r3, #589	; 0x24d
 800b4d2:	e065      	b.n	800b5a0 <iapUpdate+0xf0>

   //Initialize variables
   n = 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	617b      	str	r3, [r7, #20]
   error = NO_ERROR;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	83fb      	strh	r3, [r7, #30]

   //Point to the beginning of the data
   pData = (uint8_t*)data;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	61bb      	str	r3, [r7, #24]

   //Process the incoming data
   while(length > 0)
 800b4e0:	e053      	b.n	800b58a <iapUpdate+0xda>
   {
      //Still room in buffer?
      if(context->imageInput.bufferLen < sizeof(context->imageInput.buffer))
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b4e8:	2b7f      	cmp	r3, #127	; 0x7f
 800b4ea:	d83e      	bhi.n	800b56a <iapUpdate+0xba>
      {
         //Fill buffer with input data
         n = MIN(length, sizeof(context->imageInput.buffer) - context->imageInput.bufferLen);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b4f2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	bf28      	it	cs
 800b4fc:	4613      	movcs	r3, r2
 800b4fe:	617b      	str	r3, [r7, #20]
         memcpy(context->imageInput.bufferPos, pData, n);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	69b9      	ldr	r1, [r7, #24]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f00d fa78 	bl	8018a00 <memcpy>

         //Update buffer position and length
         context->imageInput.bufferPos += n;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	441a      	add	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
         context->imageInput.bufferLen += n;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	441a      	add	r2, r3
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

         //Update input data postion and length
         pData += n;
 800b530:	69ba      	ldr	r2, [r7, #24]
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	4413      	add	r3, r2
 800b536:	61bb      	str	r3, [r7, #24]
         length -= n;
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	607b      	str	r3, [r7, #4]

         //Process received image input data
         error = iapProcessInputImage(&context->imageInput);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	335c      	adds	r3, #92	; 0x5c
 800b544:	4618      	mov	r0, r3
 800b546:	f000 fb8b 	bl	800bc60 <iapProcessInputImage>
 800b54a:	4603      	mov	r3, r0
 800b54c:	83fb      	strh	r3, [r7, #30]
         //Is any error?
         if(error)
 800b54e:	8bfb      	ldrh	r3, [r7, #30]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d01a      	beq.n	800b58a <iapUpdate+0xda>
         {
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
            //Erase output image slot first bytes to make sure bootloader doesn't
            //consider it as a new valid update image if a reboot occurs
            context->secondaryMem.driver->erase(
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b558:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 800b560:	6812      	ldr	r2, [r2, #0]
 800b562:	2140      	movs	r1, #64	; 0x40
 800b564:	4610      	mov	r0, r2
 800b566:	4798      	blx	r3
#endif
            break;
 800b568:	e012      	b.n	800b590 <iapUpdate+0xe0>
         }
      }
      else
      {
         //Debug message
         TRACE_ERROR("Buffer would overflow!\r\n");
 800b56a:	f7fd ffd0 	bl	800950e <osSuspendAllTasks>
 800b56e:	4b0e      	ldr	r3, [pc, #56]	; (800b5a8 <iapUpdate+0xf8>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	2218      	movs	r2, #24
 800b576:	2101      	movs	r1, #1
 800b578:	480c      	ldr	r0, [pc, #48]	; (800b5ac <iapUpdate+0xfc>)
 800b57a:	f00c ffbf 	bl	80184fc <fwrite>
 800b57e:	f7fd ffd1 	bl	8009524 <osResumeAllTasks>
         error = ERROR_BUFFER_OVERFLOW;
 800b582:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800b586:	83fb      	strh	r3, [r7, #30]
         break;
 800b588:	e002      	b.n	800b590 <iapUpdate+0xe0>
   while(length > 0)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1a8      	bne.n	800b4e2 <iapUpdate+0x32>
      }
   }

   //Return error code
   if(error) {
 800b590:	8bfb      	ldrh	r3, [r7, #30]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d002      	beq.n	800b59c <iapUpdate+0xec>
      return CBOOT_ERROR_FAILURE;
 800b596:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b59a:	e001      	b.n	800b5a0 <iapUpdate+0xf0>
   } else {
      return CBOOT_NO_ERROR;
 800b59c:	f240 234b 	movw	r3, #587	; 0x24b
   }
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3720      	adds	r7, #32
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	20000098 	.word	0x20000098
 800b5ac:	0801f4fc 	.word	0x0801f4fc

0800b5b0 <iapFinalize>:
 * @param[in,out] context Pointer to the IAP application context
 * @return Error code
 **/

cboot_error_t iapFinalize(IapContext* context)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
   IAP_EXT_MEM_ENCRYPTION_SUPPORT == ENABLED)
   BootMailBox bMsg;
#endif

   //Check parameters validity
   if (context == NULL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d102      	bne.n	800b5c4 <iapFinalize+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800b5be:	f240 234d 	movw	r3, #589	; 0x24d
 800b5c2:	e051      	b.n	800b668 <iapFinalize+0xb8>

   //Debug message
   TRACE_INFO("Finalizing firmware update...\r\n");

   //Ready to verify firmware image validity?
   if (context->imageInput.state == IAP_STATE_VALIDATE_APP)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b5ca:	2b04      	cmp	r3, #4
 800b5cc:	d134      	bne.n	800b638 <iapFinalize+0x88>
   {
      //Verify firmware image validity (could integrity tag or
      //authentification tag or signature)
      error = verifyConfirm(&context->imageInput.verifyContext, context->imageInput.checkData, context->imageInput.checkDataLen);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f503 7108 	add.w	r1, r3, #544	; 0x220
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	f001 fab1 	bl	800cb48 <verifyConfirm>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if (error)
 800b5ea:	89fb      	ldrh	r3, [r7, #14]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d01c      	beq.n	800b62a <iapFinalize+0x7a>
      {
         //Debug message
         TRACE_ERROR("Firmware image is invalid!\r\n");
 800b5f0:	f7fd ff8d 	bl	800950e <osSuspendAllTasks>
 800b5f4:	4b1e      	ldr	r3, [pc, #120]	; (800b670 <iapFinalize+0xc0>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	221c      	movs	r2, #28
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	481d      	ldr	r0, [pc, #116]	; (800b674 <iapFinalize+0xc4>)
 800b600:	f00c ff7c 	bl	80184fc <fwrite>
 800b604:	f7fd ff8e 	bl	8009524 <osResumeAllTasks>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
            //Erase output image slot first bytes to make sure bootloader doesn't
            //consider it as a new valid update image if a reboot occurs
            context->secondaryMem.driver->erase(
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60c:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 800b614:	6812      	ldr	r2, [r2, #0]
 800b616:	2140      	movs	r1, #64	; 0x40
 800b618:	4610      	mov	r0, r2
 800b61a:	4798      	blx	r3
#endif

         //Return to IAP idle state
         context->imageInput.state = IAP_STATE_IDLE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
         //Return error code
         return CBOOT_ERROR_INVALID_IMAGE_APP;
 800b624:	f44f 7315 	mov.w	r3, #596	; 0x254
 800b628:	e01e      	b.n	800b668 <iapFinalize+0xb8>
         if(error)
            return CBOOT_ERROR_FAILURE;
      }
#endif
      //Change IAP state
      context->imageInput.state = IAP_STATE_APP_REBOOT;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2205      	movs	r2, #5
 800b62e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return CBOOT_ERROR_IMAGE_NOT_READY;
   }

   //Successful process
   return CBOOT_NO_ERROR;
 800b632:	f240 234b 	movw	r3, #587	; 0x24b
 800b636:	e017      	b.n	800b668 <iapFinalize+0xb8>
      TRACE_ERROR("Firmware image is not ready for verification!\r\n");
 800b638:	f7fd ff69 	bl	800950e <osSuspendAllTasks>
 800b63c:	4b0c      	ldr	r3, [pc, #48]	; (800b670 <iapFinalize+0xc0>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	222f      	movs	r2, #47	; 0x2f
 800b644:	2101      	movs	r1, #1
 800b646:	480c      	ldr	r0, [pc, #48]	; (800b678 <iapFinalize+0xc8>)
 800b648:	f00c ff58 	bl	80184fc <fwrite>
 800b64c:	f7fd ff6a 	bl	8009524 <osResumeAllTasks>
            context->secondaryMem.driver->erase(
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b654:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 800b65c:	6812      	ldr	r2, [r2, #0]
 800b65e:	2140      	movs	r1, #64	; 0x40
 800b660:	4610      	mov	r0, r2
 800b662:	4798      	blx	r3
      return CBOOT_ERROR_IMAGE_NOT_READY;
 800b664:	f240 2355 	movw	r3, #597	; 0x255
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000098 	.word	0x20000098
 800b674:	0801f518 	.word	0x0801f518
 800b678:	0801f538 	.word	0x0801f538

0800b67c <iapReboot>:
 * @param[in] context Pointer to the IAP context
 * @return Error code.
 **/

cboot_error_t iapReboot(IapContext* context)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]

   //Debug message
   TRACE_INFO("Rebooting device to finalize update...\r\n");

   //Check parameter validity
   if (context == NULL)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d102      	bne.n	800b690 <iapReboot+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800b68a:	f240 234d 	movw	r3, #589	; 0x24d
 800b68e:	e01a      	b.n	800b6c6 <iapReboot+0x4a>

   if (context->imageInput.state == IAP_STATE_APP_REBOOT)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b696:	2b05      	cmp	r3, #5
 800b698:	d113      	bne.n	800b6c2 <iapReboot+0x46>
   {
      //Get flash info
      error = context->primaryMem.driver->getInfo(&memInfo);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	f107 0208 	add.w	r2, r7, #8
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	4798      	blx	r3
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800b6ac:	89fb      	ldrh	r3, [r7, #14]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d002      	beq.n	800b6b8 <iapReboot+0x3c>
         return CBOOT_ERROR_FAILURE;
 800b6b2:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b6b6:	e006      	b.n	800b6c6 <iapReboot+0x4a>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Reboot system to complete firmware update procedure
      mcuSystemReset();
 800b6b8:	f001 f9a0 	bl	800c9fc <mcuSystemReset>
      //Wrong state
      return CBOOT_ERROR_INVALID_STATE;
   }

   //Successful process
   return CBOOT_NO_ERROR;
 800b6bc:	f240 234b 	movw	r3, #587	; 0x24b
 800b6c0:	e001      	b.n	800b6c6 <iapReboot+0x4a>
      return CBOOT_ERROR_INVALID_STATE;
 800b6c2:	f240 2356 	movw	r3, #598	; 0x256
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <iapCalculateOutputImageIdx>:
 * @param[out] imgIdx Calculated value of the output image index.
 * @return Error code.
 **/

error_t iapCalculateOutputImageIdx(IapContext *context, uint16_t *imgIdx)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b094      	sub	sp, #80	; 0x50
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	6039      	str	r1, [r7, #0]
   ImageHeader imgHeader;
   uint32_t curIdx;
   error_t error;

   //Check paramter validity
   if(context == NULL || imgIdx == NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d002      	beq.n	800b6e4 <iapCalculateOutputImageIdx+0x16>
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d101      	bne.n	800b6e8 <iapCalculateOutputImageIdx+0x1a>
      return ERROR_INVALID_PARAMETER;
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	e01b      	b.n	800b720 <iapCalculateOutputImageIdx+0x52>

   //Get image header from primary flash memory first slot
   error = iapGetImageHeaderFromSlot(&context->primaryMem.slots[0], &imgHeader);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3328      	adds	r3, #40	; 0x28
 800b6ec:	f107 0208 	add.w	r2, r7, #8
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 fa76 	bl	800bbe4 <iapGetImageHeaderFromSlot>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   //Is any error?
   if(error)
 800b6fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b702:	2b00      	cmp	r3, #0
 800b704:	d002      	beq.n	800b70c <iapCalculateOutputImageIdx+0x3e>
      return error;
 800b706:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b70a:	e009      	b.n	800b720 <iapCalculateOutputImageIdx+0x52>

   //Get image index from header
   curIdx = imgHeader.imgIndex;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	64bb      	str	r3, [r7, #72]	; 0x48
   //Save incremented image index
   *imgIdx = ++curIdx;
 800b710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b712:	3301      	adds	r3, #1
 800b714:	64bb      	str	r3, [r7, #72]	; 0x48
 800b716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b718:	b29a      	uxth	r2, r3
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	801a      	strh	r2, [r3, #0]

   //Successful process
   return NO_ERROR;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3750      	adds	r7, #80	; 0x50
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <iapGetUpdateSlot>:
 * @param[out] slot Pointer to the slot that will be used to hold output image.
 * @return
 **/

error_t iapGetUpdateSlot(IapContext *context, SlotDesc **slot)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
   SlotDesc *tempSlot;
   ImageHeader header;
#endif

   //Check parameters validity
   if(context == NULL)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d101      	bne.n	800b73c <iapGetUpdateSlot+0x14>
      return ERROR_INVALID_PARAMETER;
 800b738:	2302      	movs	r3, #2
 800b73a:	e005      	b.n	800b748 <iapGetUpdateSlot+0x20>
   //Select the second slot of primary flash memory that match the second flash bank
   *slot = (SlotDesc*)&context->primaryMem.slots[1];
#else
#if (IAP_FALLBACK_SUPPORT == DISABLED)
   //In single bank mode without fallback support only one
   *slot = (SlotDesc*)&context->secondaryMem.slots[0];
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	601a      	str	r2, [r3, #0]
   }
#endif
#endif

   //Successful process
   return NO_ERROR;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bc80      	pop	{r7}
 800b750:	4770      	bx	lr

0800b752 <iapInitPrimaryMemory>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitPrimaryMemory(IapSettings *settings, IapContext *context)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b086      	sub	sp, #24
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	6039      	str	r1, [r7, #0]
   uint32_t nextSector;
#endif
   error_t error;

   //Check parameters validity
   if(context == NULL || settings == NULL)
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <iapInitPrimaryMemory+0x16>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d101      	bne.n	800b76c <iapInitPrimaryMemory+0x1a>
      return ERROR_INVALID_PARAMETER;
 800b768:	2302      	movs	r3, #2
 800b76a:	e04a      	b.n	800b802 <iapInitPrimaryMemory+0xb0>

   //Check primary flash memory driver is valid
   if(settings->primaryFlashDriver == NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <iapInitPrimaryMemory+0x26>
      return ERROR_INVALID_PARAMETER;
 800b774:	2302      	movs	r3, #2
 800b776:	e044      	b.n	800b802 <iapInitPrimaryMemory+0xb0>

   //Save primary flash memory driver
   context->primaryMem.driver = (FlashDriver*)settings->primaryFlashDriver;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	625a      	str	r2, [r3, #36]	; 0x24

   //Point to the memory driver
   flashDriver = (FlashDriver*)context->primaryMem.driver;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b784:	617b      	str	r3, [r7, #20]

   //Initialize primary (internal) memory flash driver
   error = flashDriver->init();
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4798      	blx	r3
 800b78c:	4603      	mov	r3, r0
 800b78e:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b790:	8a7b      	ldrh	r3, [r7, #18]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <iapInitPrimaryMemory+0x48>
      return error;
 800b796:	8a7b      	ldrh	r3, [r7, #18]
 800b798:	e033      	b.n	800b802 <iapInitPrimaryMemory+0xb0>

   //Get memory driver informations
   error = flashDriver->getInfo(&memInfo);
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f107 020c 	add.w	r2, r7, #12
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	4798      	blx	r3
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b7aa:	8a7b      	ldrh	r3, [r7, #18]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <iapInitPrimaryMemory+0x62>
      return error;
 800b7b0:	8a7b      	ldrh	r3, [r7, #18]
 800b7b2:	e026      	b.n	800b802 <iapInitPrimaryMemory+0xb0>
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
   //Debug message
   TRACE_DEBUG("Primary flash addr = 0x%08lX | Bootloader size = 0x%08X\r\n", (unsigned long) memInfo->flashAddr, BOOTLOADER_SIZE);

   // Get the address of the next sector available after the bootloader
   error = context->primaryMem.driver->getNextSectorAddr(memInfo->flashAddr + BOOTLOADER_SIZE, &nextSector);
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b8:	69db      	ldr	r3, [r3, #28]
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	68d2      	ldr	r2, [r2, #12]
 800b7be:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b7c2:	f107 0108 	add.w	r1, r7, #8
 800b7c6:	4610      	mov	r0, r2
 800b7c8:	4798      	blx	r3
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b7ce:	8a7b      	ldrh	r3, [r7, #18]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <iapInitPrimaryMemory+0x86>
      return error;
 800b7d4:	8a7b      	ldrh	r3, [r7, #18]
 800b7d6:	e014      	b.n	800b802 <iapInitPrimaryMemory+0xb0>
   //Debug message
   TRACE_DEBUG("Primary slot 1 addr = 0x%08lX\r\n", (unsigned long) nextSector);

   //Set primary flash memory slot which hold current running application
   //This slot is located after the bootloader at the beginning of the next available flash sector
   context->primaryMem.slots[0].addr = nextSector;
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	629a      	str	r2, [r3, #40]	; 0x28
   context->primaryMem.slots[0].size = (memInfo->flashAddr + memInfo->flashSize) - (nextSector + settings->sizeSlot1);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68da      	ldr	r2, [r3, #12]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	441a      	add	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a19      	ldr	r1, [r3, #32]
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	440b      	add	r3, r1
 800b7f0:	1ad2      	subs	r2, r2, r3
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	62da      	str	r2, [r3, #44]	; 0x2c
   context->primaryMem.slots[0].flash =  (FlashDesc*)&context->primaryMem;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	631a      	str	r2, [r3, #48]	; 0x30
   context->primaryMem.slots[1].size = memInfo->bankSize;
   context->primaryMem.slots[1].flash = (FlashDesc*)&context->primaryMem;
#endif

   //Succesful process
   return NO_ERROR;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3718      	adds	r7, #24
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <iapInitSecondaryMemory>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitSecondaryMemory(IapSettings *settings, IapContext *context)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b086      	sub	sp, #24
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	6039      	str	r1, [r7, #0]
   FlashDriver *flashDriver;
   const FlashInfo *memInfo;
   bool_t ret;

   //Check parameters validity
   if(context == NULL || settings == NULL)
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <iapInitSecondaryMemory+0x16>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <iapInitSecondaryMemory+0x1a>
      return ERROR_INVALID_PARAMETER;
 800b820:	2302      	movs	r3, #2
 800b822:	e04d      	b.n	800b8c0 <iapInitSecondaryMemory+0xb6>

   //Check secondary flash memory driver is valid
   if(settings->secondaryFlashDriver == NULL)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <iapInitSecondaryMemory+0x26>
      return ERROR_INVALID_PARAMETER;
 800b82c:	2302      	movs	r3, #2
 800b82e:	e047      	b.n	800b8c0 <iapInitSecondaryMemory+0xb6>

   //Save secondary flash memory driver
   context->secondaryMem.driver = (FlashDriver*)settings->secondaryFlashDriver;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	691a      	ldr	r2, [r3, #16]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	641a      	str	r2, [r3, #64]	; 0x40

   //Point to the secondary flash memory driver
   flashDriver = (FlashDriver*)context->secondaryMem.driver;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83c:	617b      	str	r3, [r7, #20]

   //Initialize secondary flash memory driver
   error = flashDriver->init();
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4798      	blx	r3
 800b844:	4603      	mov	r3, r0
 800b846:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b848:	8a7b      	ldrh	r3, [r7, #18]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <iapInitSecondaryMemory+0x48>
      return error;
 800b84e:	8a7b      	ldrh	r3, [r7, #18]
 800b850:	e036      	b.n	800b8c0 <iapInitSecondaryMemory+0xb6>

   //Get secondary flash memory driver informations
   error = flashDriver->getInfo(&memInfo);
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	f107 0208 	add.w	r2, r7, #8
 800b85a:	4610      	mov	r0, r2
 800b85c:	4798      	blx	r3
 800b85e:	4603      	mov	r3, r0
 800b860:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b862:	8a7b      	ldrh	r3, [r7, #18]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d001      	beq.n	800b86c <iapInitSecondaryMemory+0x62>
      return error;
 800b868:	8a7b      	ldrh	r3, [r7, #18]
 800b86a:	e029      	b.n	800b8c0 <iapInitSecondaryMemory+0xb6>
   //Debug message
   TRACE_DEBUG("Secondary flash addr = 0x%08lX\r\n", (unsigned long) memInfo->flashAddr);
   TRACE_DEBUG("Secondary slot 1 addr = 0x%08lX\r\n", (unsigned long) settings->addrSlot1);

   //Check if user slot 1 address match a secondary flash memory sector address
   ret = flashDriver->isSectorAddr(settings->addrSlot1);
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	8b92      	ldrh	r2, [r2, #28]
 800b874:	4610      	mov	r0, r2
 800b876:	4798      	blx	r3
 800b878:	60f8      	str	r0, [r7, #12]
   if(!ret)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <iapInitSecondaryMemory+0x7a>
      return ERROR_INVALID_VALUE;
 800b880:	23f1      	movs	r3, #241	; 0xf1
 800b882:	e01d      	b.n	800b8c0 <iapInitSecondaryMemory+0xb6>

   //Check if user slot 1 fits in secondary flash memory
   if(settings->addrSlot1 + settings->sizeSlot1 > memInfo->flashAddr + memInfo->flashSize)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	8b9b      	ldrh	r3, [r3, #28]
 800b888:	461a      	mov	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	441a      	add	r2, r3
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	68d9      	ldr	r1, [r3, #12]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	440b      	add	r3, r1
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d901      	bls.n	800b8a2 <iapInitSecondaryMemory+0x98>
      return ERROR_FAILURE;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e00e      	b.n	800b8c0 <iapInitSecondaryMemory+0xb6>

   //Set secondary flash memory slot 1 which will hold the new encrypted update image
   //If fallback support is enabled the slot 1 could also hold the
   //backup encrypted image of the current running application
   context->secondaryMem.slots[0].addr = settings->addrSlot1;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	8b9b      	ldrh	r3, [r3, #28]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	645a      	str	r2, [r3, #68]	; 0x44
   context->secondaryMem.slots[0].size = settings->sizeSlot1;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6a1a      	ldr	r2, [r3, #32]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	649a      	str	r2, [r3, #72]	; 0x48
   context->secondaryMem.slots[0].flash = (FlashDesc*)&context->secondaryMem;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	64da      	str	r2, [r3, #76]	; 0x4c
   context->secondaryMem.slots[1].flash = (FlashDriver*)&context->secondaryMem;
#endif
#endif

   //Succesful process
   return NO_ERROR;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <iapInitInputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitInputImage(IapSettings *settings, IapContext *context)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
   error_t error;
   ImageContext *imageIn;

   //Initialize status code
   error = NO_ERROR;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	81fb      	strh	r3, [r7, #14]

   //Check parameters validity
   if(context == NULL || settings == NULL)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <iapInitInputImage+0x1a>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <iapInitInputImage+0x1e>
      return ERROR_INVALID_PARAMETER;
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	e055      	b.n	800b992 <iapInitInputImage+0xca>

   //Check image verification method settings
   if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	7a1b      	ldrb	r3, [r3, #8]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d105      	bne.n	800b8fa <iapInitInputImage+0x32>
   {
#if VERIFY_INTEGRITY_SUPPORT == ENABLED
      //Check image integrity verification settings
      if(settings->imageInCrypto.verifySettings.integrityAlgo == NULL)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d11b      	bne.n	800b92e <iapInitInputImage+0x66>
         return ERROR_INVALID_PARAMETER;
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	e04b      	b.n	800b992 <iapInitInputImage+0xca>
#else
      //Image integrity verification support is not activated
      return ERROR_INVALID_PARAMETER;
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	7a1b      	ldrb	r3, [r3, #8]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d101      	bne.n	800b906 <iapInitInputImage+0x3e>
      //Force authentication algorythm to HMAC
      if(settings->imageInCrypto.verifySettings.authAlgo != VERIFY_AUTH_HMAC)
         return ERROR_UNSUPPORTED_ALGO;
#else
      //Image authentication verification support is not activated
      return ERROR_INVALID_PARAMETER;
 800b902:	2302      	movs	r3, #2
 800b904:	e045      	b.n	800b992 <iapInitInputImage+0xca>
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	7a1b      	ldrb	r3, [r3, #8]
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d101      	bne.n	800b912 <iapInitInputImage+0x4a>
      if(settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_RSA &&
         settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_ECDSA)
         return ERROR_UNSUPPORTED_SIGNATURE_ALGO;
#else
      //Image signature verification support is not activated
      return ERROR_INVALID_PARAMETER;
 800b90e:	2302      	movs	r3, #2
 800b910:	e03f      	b.n	800b992 <iapInitInputImage+0xca>
#endif
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image verification mode not supported!\r\n");
 800b912:	f7fd fdfc 	bl	800950e <osSuspendAllTasks>
 800b916:	4b21      	ldr	r3, [pc, #132]	; (800b99c <iapInitInputImage+0xd4>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	2228      	movs	r2, #40	; 0x28
 800b91e:	2101      	movs	r1, #1
 800b920:	481f      	ldr	r0, [pc, #124]	; (800b9a0 <iapInitInputImage+0xd8>)
 800b922:	f00c fdeb 	bl	80184fc <fwrite>
 800b926:	f7fd fdfd 	bl	8009524 <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800b92a:	2367      	movs	r3, #103	; 0x67
 800b92c:	e031      	b.n	800b992 <iapInitInputImage+0xca>
   if(settings->imageInCrypto.cipherMode != CIPHER_MODE_CBC)
      return ERROR_UNSUPPORTED_CIPHER_MODE;
#endif

   //Point to the input image context
   imageIn = (ImageContext*)&context->imageInput;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	335c      	adds	r3, #92	; 0x5c
 800b932:	60bb      	str	r3, [r7, #8]

   //Clear input image context
   memset(imageIn, 0x00, sizeof(ImageContext));
 800b934:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 800b938:	2100      	movs	r1, #0
 800b93a:	68b8      	ldr	r0, [r7, #8]
 800b93c:	f00d f888 	bl	8018a50 <memset>

   //Set pointer to IAP context
   imageIn->iapContext = (IapContext*)context;
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	605a      	str	r2, [r3, #4]
   //Initialize buffer position to buffer start addresse
   imageIn->bufferPos = imageIn->buffer;
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	f103 0219 	add.w	r2, r3, #25
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   //Initialize check data position to check data start addresse
   imageIn->checkDataPos = imageIn->checkData;
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

   //Initialize image input process state
   imageIn->state = IAP_STATE_RECV_APP_HEADER;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	2201      	movs	r2, #1
 800b962:	761a      	strb	r2, [r3, #24]
         return error;
   }
#endif

   //Initialize verification module
   error = verifyInit(&imageIn->verifyContext, &settings->imageInCrypto.verifySettings);
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	3308      	adds	r3, #8
 800b96e:	4619      	mov	r1, r3
 800b970:	4610      	mov	r0, r2
 800b972:	f001 f847 	bl	800ca04 <verifyInit>
 800b976:	4603      	mov	r3, r0
 800b978:	81fb      	strh	r3, [r7, #14]
   //Is any error ?
   if (error)
 800b97a:	89fb      	ldrh	r3, [r7, #14]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d001      	beq.n	800b984 <iapInitInputImage+0xbc>
      return error;
 800b980:	89fb      	ldrh	r3, [r7, #14]
 800b982:	e006      	b.n	800b992 <iapInitInputImage+0xca>

   //Get exepecting image check data size
   imageIn->checkDataSize = imageIn->verifyContext.checkDataSize;
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

   //Successful process
   return NO_ERROR;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20000098 	.word	0x20000098
 800b9a0:	0801f568 	.word	0x0801f568

0800b9a4 <iapInitOutputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitOutputImage(IapSettings *settings, IapContext *context)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
   error_t error;
   ImageContext *imageOut;
   VerifySettings verifySettings;

   //Initialize status code
   error = NO_ERROR;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	82fb      	strh	r3, [r7, #22]

   //Initialize verify settings structure
   memset(&verifySettings, 0, sizeof(VerifySettings));
 800b9b2:	f107 0308 	add.w	r3, r7, #8
 800b9b6:	2208      	movs	r2, #8
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f00d f848 	bl	8018a50 <memset>

   //Check parameters validty
   if(context == NULL || settings == NULL)
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <iapInitOutputImage+0x28>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d101      	bne.n	800b9d0 <iapInitOutputImage+0x2c>
      return ERROR_INVALID_PARAMETER;
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	e02f      	b.n	800ba30 <iapInitOutputImage+0x8c>

   //Point to the output image context
   imageOut = (ImageContext*)&context->imageOutput;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800b9d6:	613b      	str	r3, [r7, #16]

   //Clear output image context
   memset(imageOut, 0x00, sizeof(ImageContext));
 800b9d8:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 800b9dc:	2100      	movs	r1, #0
 800b9de:	6938      	ldr	r0, [r7, #16]
 800b9e0:	f00d f836 	bl	8018a50 <memset>

   //Set pointer to IAP context
   imageOut->iapContext = (IapContext*)context;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	605a      	str	r2, [r3, #4]
   //Initialize buffer position to buffer start addresse
   imageOut->bufferPos = imageOut->buffer;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f103 0219 	add.w	r2, r3, #25
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

   //Initialize image output process state
   imageOut->state = 0;
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	761a      	strb	r2, [r3, #24]
   if (error)
      return error;
#endif

   //Initialize check data position to check data start addresse
   imageOut->checkDataPos = imageOut->checkData;
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

   //Set verification module settings
   verifySettings.verifyMethod = VERIFY_METHOD_INTEGRITY;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	723b      	strb	r3, [r7, #8]
   verifySettings.integrityAlgo = CRC32_HASH_ALGO;
 800ba0c:	4b0a      	ldr	r3, [pc, #40]	; (800ba38 <iapInitOutputImage+0x94>)
 800ba0e:	60fb      	str	r3, [r7, #12]

   //Initialize verification module
   error = verifyInit(&imageOut->verifyContext, &verifySettings);
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	33a4      	adds	r3, #164	; 0xa4
 800ba14:	f107 0208 	add.w	r2, r7, #8
 800ba18:	4611      	mov	r1, r2
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 fff2 	bl	800ca04 <verifyInit>
 800ba20:	4603      	mov	r3, r0
 800ba22:	82fb      	strh	r3, [r7, #22]
   //Is any error ?
   if (error)
 800ba24:	8afb      	ldrh	r3, [r7, #22]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <iapInitOutputImage+0x8a>
      return error;
 800ba2a:	8afb      	ldrh	r3, [r7, #22]
 800ba2c:	e000      	b.n	800ba30 <iapInitOutputImage+0x8c>
#endif

   //Return status code
   return error;
 800ba2e:	8afb      	ldrh	r3, [r7, #22]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3718      	adds	r7, #24
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	0801fda4 	.word	0x0801fda4

0800ba3c <iapWrite>:
 * @param[in] length Length of the firmware data bloc to be written
 * @return Error code
 **/

error_t iapWrite(ImageContext *context, const uint8_t *data, size_t length, uint8_t flag)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b08a      	sub	sp, #40	; 0x28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
 800ba48:	70fb      	strb	r3, [r7, #3]
   size_t writeBlockSize;
   const FlashInfo *memInfo;
   const FlashDriver *flashDriver;

   //Check parameters validity
   if(context == NULL || data == NULL || length == 0)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d005      	beq.n	800ba5c <iapWrite+0x20>
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <iapWrite+0x20>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <iapWrite+0x24>
      return ERROR_INVALID_PARAMETER;
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	e0b2      	b.n	800bbc6 <iapWrite+0x18a>

   //Get memory driver
   flashDriver = ((FlashDesc*)context->slotInfo->flash)->driver;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	627b      	str	r3, [r7, #36]	; 0x24

   //Get memory driver informations
   error = flashDriver->getInfo(&memInfo);
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	f107 0214 	add.w	r2, r7, #20
 800ba74:	4610      	mov	r0, r2
 800ba76:	4798      	blx	r3
 800ba78:	4603      	mov	r3, r0
 800ba7a:	847b      	strh	r3, [r7, #34]	; 0x22
   //Is any error?
   if(error)
 800ba7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d001      	beq.n	800ba86 <iapWrite+0x4a>
      return error;
 800ba82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba84:	e09f      	b.n	800bbc6 <iapWrite+0x18a>

   //Get memory driver write block size
   writeBlockSize = memInfo->writeSize;
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	61fb      	str	r3, [r7, #28]

   //Temporary data flush required?
   if(flag == 2)
 800ba8c:	78fb      	ldrb	r3, [r7, #3]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d15c      	bne.n	800bb4c <iapWrite+0x110>
   {
      //Reset temporary buffer data
      memset(tempBuffer, 0x00, sizeof(tempBuffer));
 800ba92:	2240      	movs	r2, #64	; 0x40
 800ba94:	2100      	movs	r1, #0
 800ba96:	484e      	ldr	r0, [pc, #312]	; (800bbd0 <iapWrite+0x194>)
 800ba98:	f00c ffda 	bl	8018a50 <memset>
      //Reset temporary buffer position
      tempBufferPos = tempBuffer;
 800ba9c:	4b4d      	ldr	r3, [pc, #308]	; (800bbd4 <iapWrite+0x198>)
 800ba9e:	4a4c      	ldr	r2, [pc, #304]	; (800bbd0 <iapWrite+0x194>)
 800baa0:	601a      	str	r2, [r3, #0]
      //Reset temporary buffer length
      tempBufferLen = 0;
 800baa2:	4b4d      	ldr	r3, [pc, #308]	; (800bbd8 <iapWrite+0x19c>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	601a      	str	r2, [r3, #0]
   }

   //Process incomming data
   while(length > 0)
 800baa8:	e050      	b.n	800bb4c <iapWrite+0x110>
   {
      //Fill temporary buffer to reach allowed flash memory write block size
      n = MIN(length, writeBlockSize - tempBufferLen);
 800baaa:	4b4b      	ldr	r3, [pc, #300]	; (800bbd8 <iapWrite+0x19c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	69fa      	ldr	r2, [r7, #28]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	4293      	cmp	r3, r2
 800bab6:	bf28      	it	cs
 800bab8:	4613      	movcs	r3, r2
 800baba:	61bb      	str	r3, [r7, #24]

      //Fill buffer
      memcpy(tempBufferPos, data, n);
 800babc:	4b45      	ldr	r3, [pc, #276]	; (800bbd4 <iapWrite+0x198>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	69ba      	ldr	r2, [r7, #24]
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	4618      	mov	r0, r3
 800bac6:	f00c ff9b 	bl	8018a00 <memcpy>
      //Update temporary buffer position
      tempBufferPos += n;
 800baca:	4b42      	ldr	r3, [pc, #264]	; (800bbd4 <iapWrite+0x198>)
 800bacc:	681a      	ldr	r2, [r3, #0]
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	4413      	add	r3, r2
 800bad2:	4a40      	ldr	r2, [pc, #256]	; (800bbd4 <iapWrite+0x198>)
 800bad4:	6013      	str	r3, [r2, #0]
      //Update temporary buffer length
      tempBufferLen += n;
 800bad6:	4b40      	ldr	r3, [pc, #256]	; (800bbd8 <iapWrite+0x19c>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	4413      	add	r3, r2
 800bade:	4a3e      	ldr	r2, [pc, #248]	; (800bbd8 <iapWrite+0x19c>)
 800bae0:	6013      	str	r3, [r2, #0]
      //Advance data pointer
      data += n;
 800bae2:	68ba      	ldr	r2, [r7, #8]
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	4413      	add	r3, r2
 800bae8:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	607b      	str	r3, [r7, #4]

      //Enought data to be write?
      if(tempBufferLen == writeBlockSize)
 800baf2:	4b39      	ldr	r3, [pc, #228]	; (800bbd8 <iapWrite+0x19c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	69fa      	ldr	r2, [r7, #28]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d127      	bne.n	800bb4c <iapWrite+0x110>
      {
         //Write image data into memory
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
     error = context->iapContext->secondaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	6910      	ldr	r0, [r2, #16]
 800bb08:	69fa      	ldr	r2, [r7, #28]
 800bb0a:	4931      	ldr	r1, [pc, #196]	; (800bbd0 <iapWrite+0x194>)
 800bb0c:	4798      	blx	r3
 800bb0e:	4603      	mov	r3, r0
 800bb10:	847b      	strh	r3, [r7, #34]	; 0x22
#elif IAP_DUAL_BANK_SUPPORT == ENABLED
     error = context->iapContext->primaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
#endif
         //Is any error?
         if(error)
 800bb12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00d      	beq.n	800bb34 <iapWrite+0xf8>
         {
            //Debug message
            TRACE_ERROR("Failed to write image data into external flash memory!\r\n");
 800bb18:	f7fd fcf9 	bl	800950e <osSuspendAllTasks>
 800bb1c:	4b2f      	ldr	r3, [pc, #188]	; (800bbdc <iapWrite+0x1a0>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	2238      	movs	r2, #56	; 0x38
 800bb24:	2101      	movs	r1, #1
 800bb26:	482e      	ldr	r0, [pc, #184]	; (800bbe0 <iapWrite+0x1a4>)
 800bb28:	f00c fce8 	bl	80184fc <fwrite>
 800bb2c:	f7fd fcfa 	bl	8009524 <osResumeAllTasks>
            return error;
 800bb30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb32:	e048      	b.n	800bbc6 <iapWrite+0x18a>
         }

         //Advance memory write address
         context->pos += writeBlockSize;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	691a      	ldr	r2, [r3, #16]
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	441a      	add	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	611a      	str	r2, [r3, #16]
         //Reset temporary buffer position
         tempBufferPos = tempBuffer;
 800bb40:	4b24      	ldr	r3, [pc, #144]	; (800bbd4 <iapWrite+0x198>)
 800bb42:	4a23      	ldr	r2, [pc, #140]	; (800bbd0 <iapWrite+0x194>)
 800bb44:	601a      	str	r2, [r3, #0]
         //Reset temporary buffer length
         tempBufferLen = 0;
 800bb46:	4b24      	ldr	r3, [pc, #144]	; (800bbd8 <iapWrite+0x19c>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	601a      	str	r2, [r3, #0]
   while(length > 0)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1ab      	bne.n	800baaa <iapWrite+0x6e>
      }
   }

   //Temporary data write required?
   if(tempBufferLen != 0 && flag == 1)
 800bb52:	4b21      	ldr	r3, [pc, #132]	; (800bbd8 <iapWrite+0x19c>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d034      	beq.n	800bbc4 <iapWrite+0x188>
 800bb5a:	78fb      	ldrb	r3, [r7, #3]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d131      	bne.n	800bbc4 <iapWrite+0x188>
   {
      //Complete buffer with padding to reach minimum allowed write block size
      memset(tempBufferPos, 0x00, writeBlockSize - tempBufferLen);
 800bb60:	4b1c      	ldr	r3, [pc, #112]	; (800bbd4 <iapWrite+0x198>)
 800bb62:	6818      	ldr	r0, [r3, #0]
 800bb64:	4b1c      	ldr	r3, [pc, #112]	; (800bbd8 <iapWrite+0x19c>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	69fa      	ldr	r2, [r7, #28]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	2100      	movs	r1, #0
 800bb70:	f00c ff6e 	bl	8018a50 <memset>

      //Write image data into memory
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
      error = context->iapContext->secondaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	6910      	ldr	r0, [r2, #16]
 800bb80:	69fa      	ldr	r2, [r7, #28]
 800bb82:	4913      	ldr	r1, [pc, #76]	; (800bbd0 <iapWrite+0x194>)
 800bb84:	4798      	blx	r3
 800bb86:	4603      	mov	r3, r0
 800bb88:	847b      	strh	r3, [r7, #34]	; 0x22
#elif IAP_DUAL_BANK_SUPPORT == ENABLED
      error = context->iapContext->primaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
#endif
      //Is any error?
      if(error)
 800bb8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00d      	beq.n	800bbac <iapWrite+0x170>
      {
         //Debug message
         TRACE_ERROR("Failed to write image data into external flash memory!\r\n");
 800bb90:	f7fd fcbd 	bl	800950e <osSuspendAllTasks>
 800bb94:	4b11      	ldr	r3, [pc, #68]	; (800bbdc <iapWrite+0x1a0>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	2238      	movs	r2, #56	; 0x38
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	4810      	ldr	r0, [pc, #64]	; (800bbe0 <iapWrite+0x1a4>)
 800bba0:	f00c fcac 	bl	80184fc <fwrite>
 800bba4:	f7fd fcbe 	bl	8009524 <osResumeAllTasks>
         return error;
 800bba8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbaa:	e00c      	b.n	800bbc6 <iapWrite+0x18a>
      }

      //Advance memory write address
      context->pos += writeBlockSize;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	691a      	ldr	r2, [r3, #16]
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	441a      	add	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	611a      	str	r2, [r3, #16]
      //Reset temporary buffer position
      tempBufferPos = tempBuffer;
 800bbb8:	4b06      	ldr	r3, [pc, #24]	; (800bbd4 <iapWrite+0x198>)
 800bbba:	4a05      	ldr	r2, [pc, #20]	; (800bbd0 <iapWrite+0x194>)
 800bbbc:	601a      	str	r2, [r3, #0]
      //Reset temporary buffer length
      tempBufferLen = 0;
 800bbbe:	4b06      	ldr	r3, [pc, #24]	; (800bbd8 <iapWrite+0x19c>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	601a      	str	r2, [r3, #0]
   }

   //Successful process
   return NO_ERROR;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3728      	adds	r7, #40	; 0x28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	2000295c 	.word	0x2000295c
 800bbd4:	20000084 	.word	0x20000084
 800bbd8:	2000299c 	.word	0x2000299c
 800bbdc:	20000098 	.word	0x20000098
 800bbe0:	0801f594 	.word	0x0801f594

0800bbe4 <iapGetImageHeaderFromSlot>:
 * @param[out] header Pointer to store the extracted image header.
 * @return Error code.
 **/

error_t iapGetImageHeaderFromSlot(SlotDesc *slot, ImageHeader *header)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b096      	sub	sp, #88	; 0x58
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
   FlashDriver *flashDriver;
   ImageHeader *imgHeader;
   uint8_t buffer[sizeof(ImageHeader)];

   //Check parameter validity
   if(slot == NULL || header == NULL)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <iapGetImageHeaderFromSlot+0x16>
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <iapGetImageHeaderFromSlot+0x1a>
      return ERROR_INVALID_PARAMETER;
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e02c      	b.n	800bc58 <iapGetImageHeaderFromSlot+0x74>

   //Point to the slot memory driver
   flashDriver = (FlashDriver*)((FlashDesc*)slot->flash)->driver;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	657b      	str	r3, [r7, #84]	; 0x54

   //Read first slot 64 bytes
   error = flashDriver->read(slot->addr, buffer, sizeof(ImageHeader));
 800bc06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	6810      	ldr	r0, [r2, #0]
 800bc0e:	f107 010c 	add.w	r1, r7, #12
 800bc12:	2240      	movs	r2, #64	; 0x40
 800bc14:	4798      	blx	r3
 800bc16:	4603      	mov	r3, r0
 800bc18:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   //Is any error?
   if(error)
 800bc1c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <iapGetImageHeaderFromSlot+0x44>
      return ERROR_FAILURE;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e017      	b.n	800bc58 <iapGetImageHeaderFromSlot+0x74>

   //Get image header from above buffer
   error = imageGetHeader(buffer, sizeof(ImageHeader), &imgHeader);
 800bc28:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800bc2c:	f107 030c 	add.w	r3, r7, #12
 800bc30:	2140      	movs	r1, #64	; 0x40
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 fba0 	bl	800c378 <imageGetHeader>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   //Is any error?
   if(error)
 800bc3e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <iapGetImageHeaderFromSlot+0x66>
      return ERROR_INVALID_HEADER;
 800bc46:	23d4      	movs	r3, #212	; 0xd4
 800bc48:	e006      	b.n	800bc58 <iapGetImageHeaderFromSlot+0x74>

   //Save image header
   memcpy(header, imgHeader, sizeof(ImageHeader));
 800bc4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc4c:	2240      	movs	r2, #64	; 0x40
 800bc4e:	4619      	mov	r1, r3
 800bc50:	6838      	ldr	r0, [r7, #0]
 800bc52:	f00c fed5 	bl	8018a00 <memcpy>

   //Successful process
   return NO_ERROR;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3758      	adds	r7, #88	; 0x58
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <iapProcessInputImage>:
 * @param[in,out] context Pointer to the Input image context
 * @return Status code
 **/

error_t iapProcessInputImage(ImageContext *context)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
   error_t error;

   //IAP receiving image header state?
   if(context->state == IAP_STATE_RECV_APP_HEADER)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	7e1b      	ldrb	r3, [r3, #24]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d109      	bne.n	800bc84 <iapProcessInputImage+0x24>
   {
      //Process image header
      error = iapProcessAppHeader(context);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f967 	bl	800bf44 <iapProcessAppHeader>
 800bc76:	4603      	mov	r3, r0
 800bc78:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800bc7a:	89fb      	ldrh	r3, [r7, #14]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d020      	beq.n	800bcc2 <iapProcessInputImage+0x62>
         return error;
 800bc80:	89fb      	ldrh	r3, [r7, #14]
 800bc82:	e01f      	b.n	800bcc4 <iapProcessInputImage+0x64>
   }
   //IAP receiving image data state?
   else if(context->state == IAP_STATE_RECV_APP_DATA)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	7e1b      	ldrb	r3, [r3, #24]
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d109      	bne.n	800bca0 <iapProcessInputImage+0x40>
   {
      //Process image data
      error = iapProcessAppData(context);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fa1b 	bl	800c0c8 <iapProcessAppData>
 800bc92:	4603      	mov	r3, r0
 800bc94:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800bc96:	89fb      	ldrh	r3, [r7, #14]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d012      	beq.n	800bcc2 <iapProcessInputImage+0x62>
         return error;
 800bc9c:	89fb      	ldrh	r3, [r7, #14]
 800bc9e:	e011      	b.n	800bcc4 <iapProcessInputImage+0x64>
   }
   //IAP receiving image check data state?
   else if(context->state == IAP_STATE_RECV_APP_CHECK)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	7e1b      	ldrb	r3, [r3, #24]
 800bca4:	2b03      	cmp	r3, #3
 800bca6:	d109      	bne.n	800bcbc <iapProcessInputImage+0x5c>
   {
      //Process image check data
      error = iapProcessAppCheck(context);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 fabf 	bl	800c22c <iapProcessAppCheck>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800bcb2:	89fb      	ldrh	r3, [r7, #14]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d004      	beq.n	800bcc2 <iapProcessInputImage+0x62>
         return error;
 800bcb8:	89fb      	ldrh	r3, [r7, #14]
 800bcba:	e003      	b.n	800bcc4 <iapProcessInputImage+0x64>
   }
   else
   {
      //Wrong state
      error = ERROR_WRONG_STATE;
 800bcbc:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bcc0:	81fb      	strh	r3, [r7, #14]
   }

   //Successful process
   return NO_ERROR;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <iapProcessOutputImageSingleBank>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

error_t iapProcessOutputImageSingleBank(ImageContext *context, uint8_t *data, size_t length)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b088      	sub	sp, #32
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
   error_t error;
   size_t n;
   ImageHeader *imgHeader;

   //Check parameters validity
   if(context == NULL || data == NULL || length == 0)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d006      	beq.n	800bcec <iapProcessOutputImageSingleBank+0x20>
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d003      	beq.n	800bcec <iapProcessOutputImageSingleBank+0x20>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f040 8111 	bne.w	800bf0e <iapProcessOutputImageSingleBank+0x242>
      return ERROR_INVALID_PARAMETER;
 800bcec:	2302      	movs	r3, #2
 800bcee:	e113      	b.n	800bf18 <iapProcessOutputImageSingleBank+0x24c>

   //Process the incoming data
   while(length > 0)
   {
      //The buffer can hold at most it size
      n = MIN(length, sizeof(context->buffer) - context->bufferLen);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bcf6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	bf28      	it	cs
 800bd00:	4613      	movcs	r3, r2
 800bd02:	61fb      	str	r3, [r7, #28]

      //Copy the data to the buffer
      memcpy(context->bufferPos, data, n);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd0a:	69fa      	ldr	r2, [r7, #28]
 800bd0c:	68b9      	ldr	r1, [r7, #8]
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f00c fe76 	bl	8018a00 <memcpy>

      //Advance the data pointer
      data += n;
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	4413      	add	r3, r2
 800bd1a:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	607b      	str	r3, [r7, #4]
      //Update buffer data length
      context->bufferLen += n;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	441a      	add	r2, r3
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      //Update buffer data free position
      context->bufferPos += n;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	441a      	add	r2, r3
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      //Format new Header
      if(context->state == 0)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	7e1b      	ldrb	r3, [r3, #24]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d14f      	bne.n	800bdec <iapProcessOutputImageSingleBank+0x120>
      {
         //Point to image header
         imgHeader = (ImageHeader*)context->buffer;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3319      	adds	r3, #25
 800bd50:	617b      	str	r3, [r7, #20]

         //Debug message
         TRACE_DEBUG_ARRAY("HEADER: ", (uint8_t*)imgHeader, sizeof(ImageHeader));

         //Set new header image index
         imgHeader->imgIndex = context->imgIdx;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	605a      	str	r2, [r3, #4]

         //Save original image data size
         context->firmwareLength = imgHeader->dataSize;
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	60da      	str	r2, [r3, #12]
         if(imgHeader->dataSize % context->cipherEngine.ivLen != 0)
            imgHeader->dataSize += context->cipherEngine.ivLen - (imgHeader->dataSize % context->cipherEngine.ivLen);
#endif

         //Compute new image header crc
         CRC32_HASH_ALGO->compute((uint8_t*)imgHeader, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&imgHeader->headCrc);
 800bd66:	4b6e      	ldr	r3, [pc, #440]	; (800bf20 <iapProcessOutputImageSingleBank+0x254>)
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	697a      	ldr	r2, [r7, #20]
 800bd6c:	323c      	adds	r2, #60	; 0x3c
 800bd6e:	213c      	movs	r1, #60	; 0x3c
 800bd70:	6978      	ldr	r0, [r7, #20]
 800bd72:	4798      	blx	r3

         //Update application check computation tag (could be integrity tag or
         //authentification tag or hash signature tag)
         error = verifyProcess(&context->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	333c      	adds	r3, #60	; 0x3c
 800bd7e:	2204      	movs	r2, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	f000 fe99 	bl	800cab8 <verifyProcess>
 800bd86:	4603      	mov	r3, r0
 800bd88:	837b      	strh	r3, [r7, #26]
         //Is any error?
         if(error)
 800bd8a:	8b7b      	ldrh	r3, [r7, #26]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d001      	beq.n	800bd94 <iapProcessOutputImageSingleBank+0xc8>
            return error;
 800bd90:	8b7b      	ldrh	r3, [r7, #26]
 800bd92:	e0c1      	b.n	800bf18 <iapProcessOutputImageSingleBank+0x24c>

         //Set external memory start write address (selected slot start address)
         context->firmwareAddr = context->slotInfo->addr;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	609a      	str	r2, [r3, #8]
         context->pos = context->firmwareAddr;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	611a      	str	r2, [r3, #16]

         //Write new image header (with flush)
         error = iapWrite(context, (uint8_t*)imgHeader, sizeof(ImageHeader), 2);
 800bda8:	2302      	movs	r3, #2
 800bdaa:	2240      	movs	r2, #64	; 0x40
 800bdac:	6979      	ldr	r1, [r7, #20]
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f7ff fe44 	bl	800ba3c <iapWrite>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	837b      	strh	r3, [r7, #26]
         if(error)
 800bdb8:	8b7b      	ldrh	r3, [r7, #26]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <iapProcessOutputImageSingleBank+0xf6>
            return error;
 800bdbe:	8b7b      	ldrh	r3, [r7, #26]
 800bdc0:	e0aa      	b.n	800bf18 <iapProcessOutputImageSingleBank+0x24c>
         if(error)
            return error;
#endif

         //Reset buffer position
         context->bufferPos = context->buffer;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f103 0219 	add.w	r2, r3, #25
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         //Reset buffer data
         memset(context->buffer, 0x00, sizeof(context->buffer));
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	3319      	adds	r3, #25
 800bdd2:	2280      	movs	r2, #128	; 0x80
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f00c fe3a 	bl	8018a50 <memset>
         //Reset buffer data length
         context->bufferLen = 0;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

         //Change state
         context->state = 1;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2201      	movs	r2, #1
 800bde8:	761a      	strb	r2, [r3, #24]
 800bdea:	e090      	b.n	800bf0e <iapProcessOutputImageSingleBank+0x242>
      }
      //Encrypt data
      else
      {
         //Reached end of image firmware binary section?
         if(context->written + context->bufferLen == context->firmwareLength)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	695a      	ldr	r2, [r3, #20]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bdf6:	441a      	add	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d149      	bne.n	800be94 <iapProcessOutputImageSingleBank+0x1c8>
            error = iapWrite(context, context->buffer, context->bufferLen, 1);
            if(error)
               return error;
#else
            //Update image check data computation tag (crc tag)
            error = verifyProcess(&context->verifyContext, context->buffer, context->bufferLen);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f103 0119 	add.w	r1, r3, #25
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be12:	461a      	mov	r2, r3
 800be14:	f000 fe50 	bl	800cab8 <verifyProcess>
 800be18:	4603      	mov	r3, r0
 800be1a:	837b      	strh	r3, [r7, #26]
            if(error)
 800be1c:	8b7b      	ldrh	r3, [r7, #26]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <iapProcessOutputImageSingleBank+0x15a>
               return error;
 800be22:	8b7b      	ldrh	r3, [r7, #26]
 800be24:	e078      	b.n	800bf18 <iapProcessOutputImageSingleBank+0x24c>

            //Write image data block into memory
            error = iapWrite(context, context->buffer, context->bufferLen, 0);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f103 0119 	add.w	r1, r3, #25
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800be32:	2300      	movs	r3, #0
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f7ff fe01 	bl	800ba3c <iapWrite>
 800be3a:	4603      	mov	r3, r0
 800be3c:	837b      	strh	r3, [r7, #26]
            if(error)
 800be3e:	8b7b      	ldrh	r3, [r7, #26]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d001      	beq.n	800be48 <iapProcessOutputImageSingleBank+0x17c>
               return error;
 800be44:	8b7b      	ldrh	r3, [r7, #26]
 800be46:	e067      	b.n	800bf18 <iapProcessOutputImageSingleBank+0x24c>
#endif

            //Update written data
            context->written += n;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	695a      	ldr	r2, [r3, #20]
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	441a      	add	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	615a      	str	r2, [r3, #20]

            //Finalize image check data computation tag (crc tag)
            error = verifyGenerateCheckData(&context->verifyContext, context->buffer,
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f103 0119 	add.w	r1, r3, #25
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	33a0      	adds	r3, #160	; 0xa0
 800be6a:	f000 fec7 	bl	800cbfc <verifyGenerateCheckData>
 800be6e:	4603      	mov	r3, r0
 800be70:	837b      	strh	r3, [r7, #26]
               context->verifyContext.imageCheckDigestSize, &context->bufferLen);

            //Write new image check data tag (crc tag)
            error = iapWrite(context, context->buffer, context->bufferLen, 1);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f103 0119 	add.w	r1, r3, #25
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800be7e:	2301      	movs	r3, #1
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f7ff fddb 	bl	800ba3c <iapWrite>
 800be86:	4603      	mov	r3, r0
 800be88:	837b      	strh	r3, [r7, #26]
            if(error)
 800be8a:	8b7b      	ldrh	r3, [r7, #26]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d03e      	beq.n	800bf0e <iapProcessOutputImageSingleBank+0x242>
               return error;
 800be90:	8b7b      	ldrh	r3, [r7, #26]
 800be92:	e041      	b.n	800bf18 <iapProcessOutputImageSingleBank+0x24c>
            memcpy(context->buffer, context->bufferPos, context->bufferLen);
            //Reset buffer position
            context->bufferPos = context->buffer + context->bufferLen;
#else
            //Update image check data computation tag (crc tag)
            error = verifyProcess(&context->verifyContext, context->buffer, context->bufferLen);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f103 0119 	add.w	r1, r3, #25
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bea6:	461a      	mov	r2, r3
 800bea8:	f000 fe06 	bl	800cab8 <verifyProcess>
 800beac:	4603      	mov	r3, r0
 800beae:	837b      	strh	r3, [r7, #26]
            if(error)
 800beb0:	8b7b      	ldrh	r3, [r7, #26]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d001      	beq.n	800beba <iapProcessOutputImageSingleBank+0x1ee>
               return error;
 800beb6:	8b7b      	ldrh	r3, [r7, #26]
 800beb8:	e02e      	b.n	800bf18 <iapProcessOutputImageSingleBank+0x24c>

            //Write encrypted image data into memory
            error = iapWrite(context, context->buffer, context->bufferLen, 0);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f103 0119 	add.w	r1, r3, #25
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bec6:	2300      	movs	r3, #0
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f7ff fdb7 	bl	800ba3c <iapWrite>
 800bece:	4603      	mov	r3, r0
 800bed0:	837b      	strh	r3, [r7, #26]
            if(error)
 800bed2:	8b7b      	ldrh	r3, [r7, #26]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d001      	beq.n	800bedc <iapProcessOutputImageSingleBank+0x210>
               return error;
 800bed8:	8b7b      	ldrh	r3, [r7, #26]
 800beda:	e01d      	b.n	800bf18 <iapProcessOutputImageSingleBank+0x24c>

            //Update context buffer length
            context->written += context->bufferLen;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	695a      	ldr	r2, [r3, #20]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bee6:	441a      	add	r2, r3
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	615a      	str	r2, [r3, #20]

            //Update buffer data length
            context->bufferLen = 0;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            //Reset buffer position
            context->bufferPos = context->buffer;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f103 0219 	add.w	r2, r3, #25
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            //Reset buffer
            memset(context->buffer, 0, sizeof(context->buffer));
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	3319      	adds	r3, #25
 800bf04:	2280      	movs	r2, #128	; 0x80
 800bf06:	2100      	movs	r1, #0
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f00c fda1 	bl	8018a50 <memset>
   while(length > 0)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	f47f aeed 	bne.w	800bcf0 <iapProcessOutputImageSingleBank+0x24>
         }
      }
   }

   //Successful process
   return NO_ERROR;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3720      	adds	r7, #32
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	0801fda4 	.word	0x0801fda4

0800bf24 <iapProcessOutputImage>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

error_t iapProcessOutputImage(ImageContext *context, uint8_t *data, size_t length)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   return iapProcessOutputImageSingleBank(context, data, length);
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f7ff fec9 	bl	800bccc <iapProcessOutputImageSingleBank>
 800bf3a:	4603      	mov	r3, r0
#else
   return iapProcessOutputImageDualBank(context, data, length);
#endif
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <iapProcessAppHeader>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppHeader(ImageContext *context)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b088      	sub	sp, #32
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
   const FlashInfo *memInfo;
   ImageContext *outputImg;
   uint_t n;

   //Check parameter validity
   if (context == NULL)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <iapProcessAppHeader+0x12>
      return ERROR_INVALID_PARAMETER;
 800bf52:	2302      	movs	r3, #2
 800bf54:	e0ad      	b.n	800c0b2 <iapProcessAppHeader+0x16e>

   //Initialize variable
   imgHeader = NULL;
 800bf56:	2300      	movs	r3, #0
 800bf58:	613b      	str	r3, [r7, #16]
   n = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	61fb      	str	r3, [r7, #28]

   //Is buffer full enough to contains IAP image header?
   if (context->bufferLen >= sizeof(ImageHeader))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf64:	2b3f      	cmp	r3, #63	; 0x3f
 800bf66:	f240 80a3 	bls.w	800c0b0 <iapProcessAppHeader+0x16c>
   {
      //Debug message
      TRACE_DEBUG("Processing firmware image header...\r\n");

      //Get input image header
      error = imageGetHeader(context->buffer, context->bufferLen, &imgHeader);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f103 0019 	add.w	r0, r3, #25
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf76:	f107 0210 	add.w	r2, r7, #16
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	f000 f9fc 	bl	800c378 <imageGetHeader>
 800bf80:	4603      	mov	r3, r0
 800bf82:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800bf84:	8b7b      	ldrh	r3, [r7, #26]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d001      	beq.n	800bf8e <iapProcessAppHeader+0x4a>
      {
         //Debug message
         TRACE_INFO("Input image header is invalid!\r\n");
         //Forward error
         return error;
 800bf8a:	8b7b      	ldrh	r3, [r7, #26]
 800bf8c:	e091      	b.n	800c0b2 <iapProcessAppHeader+0x16e>
         return ERROR_FAILURE;
     }
#endif

      //Check header image type
      if(imgHeader->imgType != IMAGE_TYPE_APP)
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	7a1b      	ldrb	r3, [r3, #8]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00d      	beq.n	800bfb2 <iapProcessAppHeader+0x6e>
      {
         //Debug message
         TRACE_ERROR("Invalid header image type!\r\n");
 800bf96:	f7fd faba 	bl	800950e <osSuspendAllTasks>
 800bf9a:	4b48      	ldr	r3, [pc, #288]	; (800c0bc <iapProcessAppHeader+0x178>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	221c      	movs	r2, #28
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	4846      	ldr	r0, [pc, #280]	; (800c0c0 <iapProcessAppHeader+0x17c>)
 800bfa6:	f00c faa9 	bl	80184fc <fwrite>
 800bfaa:	f7fd fabb 	bl	8009524 <osResumeAllTasks>
         return ERROR_FAILURE;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e07f      	b.n	800c0b2 <iapProcessAppHeader+0x16e>
      }

      //Get memory driver infos
      error = context->iapContext->primaryMem.driver->getInfo(&memInfo);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	f107 020c 	add.w	r2, r7, #12
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	4798      	blx	r3
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800bfc6:	8b7b      	ldrh	r3, [r7, #26]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <iapProcessAppHeader+0x8c>
         return error;
 800bfcc:	8b7b      	ldrh	r3, [r7, #26]
 800bfce:	e070      	b.n	800c0b2 <iapProcessAppHeader+0x16e>

      //Point to output image context
      outputImg = (ImageContext*)&context->iapContext->imageOutput;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800bfd8:	617b      	str	r3, [r7, #20]

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Would firmware overcome the external flash memory slot size?
      if (imgHeader->dataSize + sizeof(ImageHeader) + outputImg->verifyContext.verifySettings.integrityAlgo->digestSize > outputImg->slotInfo->size)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	4413      	add	r3, r2
 800bfea:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d90e      	bls.n	800c018 <iapProcessAppHeader+0xd4>
      //Would firmware overcome the flash bank 2 size?
      if (imgHeader->dataSize > context->iapContext->imageOutput.slotInfo->size)
#endif
      {
         //Debug message
         TRACE_ERROR("Image is bigger than the flash memory slot!\r\n");
 800bffa:	f7fd fa88 	bl	800950e <osSuspendAllTasks>
 800bffe:	4b2f      	ldr	r3, [pc, #188]	; (800c0bc <iapProcessAppHeader+0x178>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	222d      	movs	r2, #45	; 0x2d
 800c006:	2101      	movs	r1, #1
 800c008:	482e      	ldr	r0, [pc, #184]	; (800c0c4 <iapProcessAppHeader+0x180>)
 800c00a:	f00c fa77 	bl	80184fc <fwrite>
 800c00e:	f7fd fa89 	bl	8009524 <osResumeAllTasks>
         //Forward error
         return ERROR_BUFFER_OVERFLOW;
 800c012:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800c016:	e04c      	b.n	800c0b2 <iapProcessAppHeader+0x16e>
      }

      //Save application firmware length
      context->firmwareLength = imgHeader->dataSize;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	60da      	str	r2, [r3, #12]
      outputImg->firmwareLength = imgHeader->dataSize;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	60da      	str	r2, [r3, #12]

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Process parsed image input header for later output image generation
      error = iapProcessOutputImage(&context->iapContext->imageOutput, (uint8_t*)imgHeader, sizeof(ImageHeader));
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c034:	6939      	ldr	r1, [r7, #16]
 800c036:	2240      	movs	r2, #64	; 0x40
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff ff73 	bl	800bf24 <iapProcessOutputImage>
 800c03e:	4603      	mov	r3, r0
 800c040:	837b      	strh	r3, [r7, #26]
      if(error)
 800c042:	8b7b      	ldrh	r3, [r7, #26]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <iapProcessAppHeader+0x108>
         return error;
 800c048:	8b7b      	ldrh	r3, [r7, #26]
 800c04a:	e032      	b.n	800c0b2 <iapProcessAppHeader+0x16e>
#endif

      //Update application check computation tag (could be integrity tag or
      //authentification tag or hash signature tag)
      error = verifyProcess(&context->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	333c      	adds	r3, #60	; 0x3c
 800c056:	2204      	movs	r2, #4
 800c058:	4619      	mov	r1, r3
 800c05a:	f000 fd2d 	bl	800cab8 <verifyProcess>
 800c05e:	4603      	mov	r3, r0
 800c060:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800c062:	8b7b      	ldrh	r3, [r7, #26]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <iapProcessAppHeader+0x128>
         return error;
 800c068:	8b7b      	ldrh	r3, [r7, #26]
 800c06a:	e022      	b.n	800c0b2 <iapProcessAppHeader+0x16e>


      //Remove header from buffer
      n = context->bufferLen - sizeof(ImageHeader);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c072:	3b40      	subs	r3, #64	; 0x40
 800c074:	61fb      	str	r3, [r7, #28]
      memcpy(context->buffer, context->buffer + sizeof(ImageHeader), n);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f103 0019 	add.w	r0, r3, #25
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	3319      	adds	r3, #25
 800c080:	3340      	adds	r3, #64	; 0x40
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	4619      	mov	r1, r3
 800c086:	f00c fcbb 	bl	8018a00 <memcpy>
      context->bufferPos -= sizeof(ImageHeader);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c090:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      context->bufferLen -= sizeof(ImageHeader);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0a0:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

      //Change IAP state
      context->state = IAP_STATE_RECV_APP_DATA;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	761a      	strb	r2, [r3, #24]
   }

   //Successful process
   return NO_ERROR;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3720      	adds	r7, #32
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000098 	.word	0x20000098
 800c0c0:	0801f5d0 	.word	0x0801f5d0
 800c0c4:	0801f5f0 	.word	0x0801f5f0

0800c0c8 <iapProcessAppData>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppData(ImageContext *context)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
   error_t error;
   uint_t dataLength;
   static ImageContext *imgOutput;

   //Check parameter validity
   if (context == NULL)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d101      	bne.n	800c0da <iapProcessAppData+0x12>
      return ERROR_INVALID_PARAMETER;
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	e0a2      	b.n	800c220 <iapProcessAppData+0x158>

   //Point to image output context
   imgOutput = (ImageContext*) &context->iapContext->imageOutput;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c0e2:	4a51      	ldr	r2, [pc, #324]	; (800c228 <iapProcessAppData+0x160>)
 800c0e4:	6013      	str	r3, [r2, #0]
   //Receiving image firmware data?
   if(1)
   {
#endif
      //Is buffer full or full enought to contain last application data?
      if ((context->bufferLen == sizeof(context->buffer)) ||
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0ec:	2b80      	cmp	r3, #128	; 0x80
 800c0ee:	d00a      	beq.n	800c106 <iapProcessAppData+0x3e>
         (context->written + context->bufferLen >= context->firmwareLength))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	695a      	ldr	r2, [r3, #20]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0fa:	441a      	add	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	68db      	ldr	r3, [r3, #12]
      if ((context->bufferLen == sizeof(context->buffer)) ||
 800c100:	429a      	cmp	r2, r3
 800c102:	f0c0 808c 	bcc.w	800c21e <iapProcessAppData+0x156>
      {
         //We must not process more data than the firmware length
         dataLength = MIN(context->bufferLen, context->firmwareLength - context->written);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68da      	ldr	r2, [r3, #12]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c116:	4293      	cmp	r3, r2
 800c118:	bf28      	it	cs
 800c11a:	4613      	movcs	r3, r2
 800c11c:	60fb      	str	r3, [r7, #12]

         //Update application check computation tag (could be integrity tag or
         //authentification tag or hash signature tag)
         error = verifyProcess(&context->verifyContext, context->buffer, dataLength);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3319      	adds	r3, #25
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	4619      	mov	r1, r3
 800c12c:	f000 fcc4 	bl	800cab8 <verifyProcess>
 800c130:	4603      	mov	r3, r0
 800c132:	817b      	strh	r3, [r7, #10]
         //Is any error?
         if (error)
 800c134:	897b      	ldrh	r3, [r7, #10]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d001      	beq.n	800c13e <iapProcessAppData+0x76>
            return error;
 800c13a:	897b      	ldrh	r3, [r7, #10]
 800c13c:	e070      	b.n	800c220 <iapProcessAppData+0x158>
               return error;
         }
#endif

         //Process output image data
         error = iapProcessOutputImage(imgOutput, context->buffer, dataLength);
 800c13e:	4b3a      	ldr	r3, [pc, #232]	; (800c228 <iapProcessAppData+0x160>)
 800c140:	6818      	ldr	r0, [r3, #0]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	3319      	adds	r3, #25
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	4619      	mov	r1, r3
 800c14a:	f7ff feeb 	bl	800bf24 <iapProcessOutputImage>
 800c14e:	4603      	mov	r3, r0
 800c150:	817b      	strh	r3, [r7, #10]
         //Is any error?
         if(error)
 800c152:	897b      	ldrh	r3, [r7, #10]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d001      	beq.n	800c15c <iapProcessAppData+0x94>
            return error;
 800c158:	897b      	ldrh	r3, [r7, #10]
 800c15a:	e061      	b.n	800c220 <iapProcessAppData+0x158>

         context->written += dataLength;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	695a      	ldr	r2, [r3, #20]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	441a      	add	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	615a      	str	r2, [r3, #20]

         //Is buffer contains remaining data?
         if (context->bufferLen != dataLength)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	429a      	cmp	r2, r3
 800c172:	d02b      	beq.n	800c1cc <iapProcessAppData+0x104>
         {
            //Discard already processed data
            memset(context->buffer, 0, dataLength);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	3319      	adds	r3, #25
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	2100      	movs	r1, #0
 800c17c:	4618      	mov	r0, r3
 800c17e:	f00c fc67 	bl	8018a50 <memset>

            //Put remaining data at buffer start
            memcpy(context->buffer, context->buffer + dataLength,
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f103 0019 	add.w	r0, r3, #25
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f103 0219 	add.w	r2, r3, #25
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	18d1      	adds	r1, r2, r3
               context->bufferLen - dataLength);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
            memcpy(context->buffer, context->buffer + dataLength,
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	461a      	mov	r2, r3
 800c19e:	f00c fc2f 	bl	8018a00 <memcpy>
            //Update buffer position and length
            context->bufferPos = context->buffer + (context->bufferLen - dataLength);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f103 0219 	add.w	r2, r3, #25
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	1acb      	subs	r3, r1, r3
 800c1b2:	441a      	add	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            context->bufferLen = context->bufferLen - dataLength;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	1ad2      	subs	r2, r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800c1ca:	e010      	b.n	800c1ee <iapProcessAppData+0x126>
         }
         else
         {
            //Reset buffer
            memset(context->buffer, 0, sizeof(context->buffer));
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	3319      	adds	r3, #25
 800c1d0:	2280      	movs	r2, #128	; 0x80
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f00c fc3b 	bl	8018a50 <memset>
            context->bufferPos = context->buffer;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f103 0219 	add.w	r2, r3, #25
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            context->bufferLen = 0;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         }

         //Is application data all received?
         if (context->written == context->firmwareLength)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	695a      	ldr	r2, [r3, #20]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d111      	bne.n	800c21e <iapProcessAppData+0x156>
         {
            //Change IAP state
            context->state = IAP_STATE_RECV_APP_CHECK;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	761a      	strb	r2, [r3, #24]

            //Still data to process?
            if (context->bufferLen > 0)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d009      	beq.n	800c21e <iapProcessAppData+0x156>
            {
               //Process IAP check app data
               error = iapProcessAppCheck(context);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 f80e 	bl	800c22c <iapProcessAppCheck>
 800c210:	4603      	mov	r3, r0
 800c212:	817b      	strh	r3, [r7, #10]
               //Is any error?
               if (error)
 800c214:	897b      	ldrh	r3, [r7, #10]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d001      	beq.n	800c21e <iapProcessAppData+0x156>
                  return error;
 800c21a:	897b      	ldrh	r3, [r7, #10]
 800c21c:	e000      	b.n	800c220 <iapProcessAppData+0x158>
         }
      }
   }

   //Successfull process
   return NO_ERROR;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	200029a0 	.word	0x200029a0

0800c22c <iapProcessAppCheck>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppCheck(ImageContext *context)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
   //Check parameter validity
   if (context == NULL)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d101      	bne.n	800c23e <iapProcessAppCheck+0x12>
      return ERROR_INVALID_PARAMETER;
 800c23a:	2302      	movs	r3, #2
 800c23c:	e058      	b.n	800c2f0 <iapProcessAppCheck+0xc4>

   //Is buffer full enough to contains IAP image check data?
   //(could be integrity/authentification tag or signature)
   if (context->checkDataLen + context->bufferLen <= context->checkDataSize)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c24a:	441a      	add	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c252:	429a      	cmp	r2, r3
 800c254:	d83c      	bhi.n	800c2d0 <iapProcessAppCheck+0xa4>
   {
      //Save image check data block
      memcpy(context->checkDataPos, context->buffer, context->bufferLen);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f103 0119 	add.w	r1, r3, #25
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c268:	461a      	mov	r2, r3
 800c26a:	f00c fbc9 	bl	8018a00 <memcpy>
      context->checkDataPos += context->bufferLen;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c27a:	441a      	add	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      context->checkDataLen += context->bufferLen;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c28e:	441a      	add	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

      //Reset buffer
      memset(context->buffer, 0, sizeof(context->buffer));
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	3319      	adds	r3, #25
 800c29a:	2280      	movs	r2, #128	; 0x80
 800c29c:	2100      	movs	r1, #0
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f00c fbd6 	bl	8018a50 <memset>
      context->bufferPos = context->buffer;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f103 0219 	add.w	r2, r3, #25
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      context->bufferLen = 0;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

      //Is image check data fully received?
      if (context->checkDataLen == context->checkDataSize)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d112      	bne.n	800c2ee <iapProcessAppCheck+0xc2>
      {
         //Change IAP state
         context->state = IAP_STATE_VALIDATE_APP;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2204      	movs	r2, #4
 800c2cc:	761a      	strb	r2, [r3, #24]
 800c2ce:	e00e      	b.n	800c2ee <iapProcessAppCheck+0xc2>
      }
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image check data is bigger than expected!\r\n");
 800c2d0:	f7fd f91d 	bl	800950e <osSuspendAllTasks>
 800c2d4:	4b08      	ldr	r3, [pc, #32]	; (800c2f8 <iapProcessAppCheck+0xcc>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	222b      	movs	r2, #43	; 0x2b
 800c2dc:	2101      	movs	r1, #1
 800c2de:	4807      	ldr	r0, [pc, #28]	; (800c2fc <iapProcessAppCheck+0xd0>)
 800c2e0:	f00c f90c 	bl	80184fc <fwrite>
 800c2e4:	f7fd f91e 	bl	8009524 <osResumeAllTasks>
      return ERROR_BUFFER_OVERFLOW;
 800c2e8:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800c2ec:	e000      	b.n	800c2f0 <iapProcessAppCheck+0xc4>
   }

   //Successful process
   return NO_ERROR;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	20000098 	.word	0x20000098
 800c2fc:	0801f620 	.word	0x0801f620

0800c300 <imageCheckHeader>:
 * @param[in] header Pointeur to the internal image header to be checked
 * @return Status code
 **/

error_t imageCheckHeader(ImageHeader *header)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
   error_t error;
   uint32_t computedCrc;

   //Check parameter vailidty
   if(header == NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d101      	bne.n	800c312 <imageCheckHeader+0x12>
      return ERROR_INVALID_PARAMETER;
 800c30e:	2302      	movs	r3, #2
 800c310:	e028      	b.n	800c364 <imageCheckHeader+0x64>

   //Compute image header crc
   error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&computedCrc);
 800c312:	4b16      	ldr	r3, [pc, #88]	; (800c36c <imageCheckHeader+0x6c>)
 800c314:	6a1b      	ldr	r3, [r3, #32]
 800c316:	f107 0208 	add.w	r2, r7, #8
 800c31a:	213c      	movs	r1, #60	; 0x3c
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	4798      	blx	r3
 800c320:	4603      	mov	r3, r0
 800c322:	81fb      	strh	r3, [r7, #14]
   if(error)
 800c324:	89fb      	ldrh	r3, [r7, #14]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00d      	beq.n	800c346 <imageCheckHeader+0x46>
   {
      //Debug message
      TRACE_ERROR("Failed to compute image header crc!\r\n");
 800c32a:	f7fd f8f0 	bl	800950e <osSuspendAllTasks>
 800c32e:	4b10      	ldr	r3, [pc, #64]	; (800c370 <imageCheckHeader+0x70>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	2225      	movs	r2, #37	; 0x25
 800c336:	2101      	movs	r1, #1
 800c338:	480e      	ldr	r0, [pc, #56]	; (800c374 <imageCheckHeader+0x74>)
 800c33a:	f00c f8df 	bl	80184fc <fwrite>
 800c33e:	f7fd f8f1 	bl	8009524 <osResumeAllTasks>
      return error;
 800c342:	89fb      	ldrh	r3, [r7, #14]
 800c344:	e00e      	b.n	800c364 <imageCheckHeader+0x64>
   }

   //Check image header integrity
   if(header->headCrc != computedCrc)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d001      	beq.n	800c354 <imageCheckHeader+0x54>
      return ERROR_INVALID_HEADER;
 800c350:	23d4      	movs	r3, #212	; 0xd4
 800c352:	e007      	b.n	800c364 <imageCheckHeader+0x64>

   //Check image header version
   if(header->headVers != IMAGE_HEADER_VERSION)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c35c:	d001      	beq.n	800c362 <imageCheckHeader+0x62>
      return ERROR_INVALID_VERSION;
 800c35e:	23f3      	movs	r3, #243	; 0xf3
 800c360:	e000      	b.n	800c364 <imageCheckHeader+0x64>

   //Successful process
   return NO_ERROR;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	0801fda4 	.word	0x0801fda4
 800c370:	20000098 	.word	0x20000098
 800c374:	0801f64c 	.word	0x0801f64c

0800c378 <imageGetHeader>:
 * @param[out] header Pointeur to the header structure to be returned
 * @return Status code
 **/

error_t imageGetHeader(uint8_t *buffer, size_t bufferLen, ImageHeader **header)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
   error_t error;
   ImageHeader *tempHeader;

   //Check parameters validity
   if(buffer == NULL || bufferLen == 0)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d002      	beq.n	800c390 <imageGetHeader+0x18>
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d101      	bne.n	800c394 <imageGetHeader+0x1c>
      return ERROR_INVALID_PARAMETER;
 800c390:	2302      	movs	r3, #2
 800c392:	e014      	b.n	800c3be <imageGetHeader+0x46>

   if(bufferLen < sizeof(ImageHeader))
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b3f      	cmp	r3, #63	; 0x3f
 800c398:	d801      	bhi.n	800c39e <imageGetHeader+0x26>
      return ERROR_INVALID_LENGTH;
 800c39a:	23ec      	movs	r3, #236	; 0xec
 800c39c:	e00f      	b.n	800c3be <imageGetHeader+0x46>

   //Point to the image header
   tempHeader = (ImageHeader *)buffer;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	617b      	str	r3, [r7, #20]

   //Check image header
   error = imageCheckHeader(tempHeader);
 800c3a2:	6978      	ldr	r0, [r7, #20]
 800c3a4:	f7ff ffac 	bl	800c300 <imageCheckHeader>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800c3ac:	8a7b      	ldrh	r3, [r7, #18]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <imageGetHeader+0x3e>
      return error;
 800c3b2:	8a7b      	ldrh	r3, [r7, #18]
 800c3b4:	e003      	b.n	800c3be <imageGetHeader+0x46>

   //Save image header
   *header = (ImageHeader*) tempHeader;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	601a      	str	r2, [r3, #0]

   //Successful process
   return NO_ERROR;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3718      	adds	r7, #24
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
	...

0800c3c8 <stm32wlxxFlashDriverInit>:
 * @brief Initialize Flash Memory.
 * @return Error code
 **/

error_t stm32wlxxFlashDriverInit(void)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
   //Debug message
   TRACE_INFO("Initializing %s memory...\r\n", STM32WLxx_FLASH_NAME);

   //Wait for last flash operation on flash
   FLASH_WaitForLastOperation(50);
 800c3cc:	2032      	movs	r0, #50	; 0x32
 800c3ce:	f002 f823 	bl	800e418 <FLASH_WaitForLastOperation>
   //Clear all flash error flags
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800c3d2:	4b06      	ldr	r3, [pc, #24]	; (800c3ec <stm32wlxxFlashDriverInit+0x24>)
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	4a05      	ldr	r2, [pc, #20]	; (800c3ec <stm32wlxxFlashDriverInit+0x24>)
 800c3d8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c3dc:	6193      	str	r3, [r2, #24]
 800c3de:	4b03      	ldr	r3, [pc, #12]	; (800c3ec <stm32wlxxFlashDriverInit+0x24>)
 800c3e0:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800c3e4:	611a      	str	r2, [r3, #16]

   //Successfull process
   return NO_ERROR;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	58004000 	.word	0x58004000

0800c3f0 <stm32wlxxFlashDriverGetInfo>:
 * @param[in,out] info Pointeur to the Memory information structure to be returned
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetInfo(const FlashInfo **info)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
   //Set Memory information pointeur
   *info = (const FlashInfo*) &stm32wlxxFlashDriverInfo;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4a04      	ldr	r2, [pc, #16]	; (800c40c <stm32wlxxFlashDriverGetInfo+0x1c>)
 800c3fc:	601a      	str	r2, [r3, #0]

   //Successfull process
   return NO_ERROR;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	4618      	mov	r0, r3
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	bc80      	pop	{r7}
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	0801fde4 	.word	0x0801fde4

0800c410 <stm32wlxxFlashDriverGetStatus>:
 * @param[in,out] status Pointeur to the Memory status to be returned
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetStatus(FlashStatus *status)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
   uint32_t flag;

   //Check parameter vailidity
   if(status == NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <stm32wlxxFlashDriverGetStatus+0x12>
      return ERROR_INVALID_PARAMETER;
 800c41e:	2302      	movs	r3, #2
 800c420:	e027      	b.n	800c472 <stm32wlxxFlashDriverGetStatus+0x62>

   do
   {
      //Get Flash Memory error flags status
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS);
 800c422:	4b16      	ldr	r3, [pc, #88]	; (800c47c <stm32wlxxFlashDriverGetStatus+0x6c>)
 800c424:	699a      	ldr	r2, [r3, #24]
 800c426:	4b16      	ldr	r3, [pc, #88]	; (800c480 <stm32wlxxFlashDriverGetStatus+0x70>)
 800c428:	4013      	ands	r3, r2
 800c42a:	4a15      	ldr	r2, [pc, #84]	; (800c480 <stm32wlxxFlashDriverGetStatus+0x70>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	bf0c      	ite	eq
 800c430:	2301      	moveq	r3, #1
 800c432:	2300      	movne	r3, #0
 800c434:	b2db      	uxtb	r3, r3
 800c436:	60fb      	str	r3, [r7, #12]
      //Is any error flag set?
      if(flag != RESET)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d003      	beq.n	800c446 <stm32wlxxFlashDriverGetStatus+0x36>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_ERR;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2202      	movs	r2, #2
 800c442:	701a      	strb	r2, [r3, #0]
         break;
 800c444:	e014      	b.n	800c470 <stm32wlxxFlashDriverGetStatus+0x60>
      }

      //Get Flash Memory busy flags
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 800c446:	4b0d      	ldr	r3, [pc, #52]	; (800c47c <stm32wlxxFlashDriverGetStatus+0x6c>)
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c452:	bf0c      	ite	eq
 800c454:	2301      	moveq	r3, #1
 800c456:	2300      	movne	r3, #0
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	60fb      	str	r3, [r7, #12]
      //Is busy flag set?
      if(flag != RESET)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d003      	beq.n	800c46a <stm32wlxxFlashDriverGetStatus+0x5a>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_BUSY;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2201      	movs	r2, #1
 800c466:	701a      	strb	r2, [r3, #0]
         break;
 800c468:	e002      	b.n	800c470 <stm32wlxxFlashDriverGetStatus+0x60>
      }

      //Set Flash memory status
      *status = FLASH_STATUS_OK;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	701a      	strb	r2, [r3, #0]
   }while(0);

   //Successfull process
   return NO_ERROR;
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3714      	adds	r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	bc80      	pop	{r7}
 800c47a:	4770      	bx	lr
 800c47c:	58004000 	.word	0x58004000
 800c480:	c000c3fa 	.word	0xc000c3fa

0800c484 <stm32wlxxFlashDriverWrite>:
 * @param[in] length Number of data bytes to write in
 * @return Error code
 **/

error_t stm32wlxxFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b08a      	sub	sp, #40	; 0x28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
   const uint8_t *p;
   uint8_t word[STM32WLxx_FLASH_WRITE_SIZE];
   size_t n;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c490:	4b30      	ldr	r3, [pc, #192]	; (800c554 <stm32wlxxFlashDriverWrite+0xd0>)
 800c492:	623b      	str	r3, [r7, #32]

   //Check address validity
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c49a:	d308      	bcc.n	800c4ae <stm32wlxxFlashDriverWrite+0x2a>
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	6a3b      	ldr	r3, [r7, #32]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d204      	bcs.n	800c4ae <stm32wlxxFlashDriverWrite+0x2a>
      (address % sizeof(uint32_t) != 0))
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <stm32wlxxFlashDriverWrite+0x2e>
      return ERROR_INVALID_PARAMETER;
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	e04c      	b.n	800c54c <stm32wlxxFlashDriverWrite+0xc8>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d005      	beq.n	800c4c4 <stm32wlxxFlashDriverWrite+0x40>
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4413      	add	r3, r2
 800c4be:	6a3a      	ldr	r2, [r7, #32]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d201      	bcs.n	800c4c8 <stm32wlxxFlashDriverWrite+0x44>
      return ERROR_INVALID_PARAMETER;
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	e041      	b.n	800c54c <stm32wlxxFlashDriverWrite+0xc8>
   TRACE_INFO("Writing data (%d bytes) at 0x%08X\r\n", length, address);
   TRACE_DEBUG_ARRAY("WRITE DATA: ", data, length);


   //Cast data pointer
   p = (const uint8_t*) data;
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	627b      	str	r3, [r7, #36]	; 0x24

   //Perform write operation
   while(length > 0)
 800c4cc:	e03a      	b.n	800c544 <stm32wlxxFlashDriverWrite+0xc0>
   {
      //Prevent to write more than allowed flash write bytes at a time
      n = MIN(sizeof(word), length);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b08      	cmp	r3, #8
 800c4d2:	bf28      	it	cs
 800c4d4:	2308      	movcs	r3, #8
 800c4d6:	61fb      	str	r3, [r7, #28]

      //Check if remaining bytes is less than required flash write size
      if(n < sizeof(word))
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	2b07      	cmp	r3, #7
 800c4dc:	d806      	bhi.n	800c4ec <stm32wlxxFlashDriverWrite+0x68>
         memset(word, 0, sizeof(word));
 800c4de:	f107 0310 	add.w	r3, r7, #16
 800c4e2:	2208      	movs	r2, #8
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f00c fab2 	bl	8018a50 <memset>

      //Copy n bytes
      memcpy(word, p, n);
 800c4ec:	f107 0310 	add.w	r3, r7, #16
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f00c fa83 	bl	8018a00 <memcpy>

      //Program 32-bit word in flash memory
      error = stm32wlxxFlashDriverWriteWord(address, (uint32_t)word);
 800c4fa:	f107 0310 	add.w	r3, r7, #16
 800c4fe:	4619      	mov	r1, r3
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f000 f9b7 	bl	800c874 <stm32wlxxFlashDriverWriteWord>
 800c506:	4603      	mov	r3, r0
 800c508:	837b      	strh	r3, [r7, #26]
      if(error)
 800c50a:	8b7b      	ldrh	r3, [r7, #26]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00d      	beq.n	800c52c <stm32wlxxFlashDriverWrite+0xa8>
      {
         TRACE_ERROR("Failed to write in flash memory!\r\n");
 800c510:	f7fc fffd 	bl	800950e <osSuspendAllTasks>
 800c514:	4b10      	ldr	r3, [pc, #64]	; (800c558 <stm32wlxxFlashDriverWrite+0xd4>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	2222      	movs	r2, #34	; 0x22
 800c51c:	2101      	movs	r1, #1
 800c51e:	480f      	ldr	r0, [pc, #60]	; (800c55c <stm32wlxxFlashDriverWrite+0xd8>)
 800c520:	f00b ffec 	bl	80184fc <fwrite>
 800c524:	f7fc fffe 	bl	8009524 <osResumeAllTasks>
         return error;
 800c528:	8b7b      	ldrh	r3, [r7, #26]
 800c52a:	e00f      	b.n	800c54c <stm32wlxxFlashDriverWrite+0xc8>
      }

      //Advance data pointer
      p += n;
 800c52c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	4413      	add	r3, r2
 800c532:	627b      	str	r3, [r7, #36]	; 0x24
      //Increment word address
      address += n;
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	4413      	add	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]
      //Remaining bytes to be written
      length -= n;
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	607b      	str	r3, [r7, #4]
   while(length > 0)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1c1      	bne.n	800c4ce <stm32wlxxFlashDriverWrite+0x4a>
   }

   //Successful process
   return NO_ERROR;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3728      	adds	r7, #40	; 0x28
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	08040000 	.word	0x08040000
 800c558:	20000098 	.word	0x20000098
 800c55c:	0801f690 	.word	0x0801f690

0800c560 <stm32wlxxFlashDriverRead>:
 * @param[in] length Number of data bytes to read out
 * @return Error code
 **/

error_t stm32wlxxFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 800c560:	b480      	push	{r7}
 800c562:	b087      	sub	sp, #28
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t topAddress;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c56c:	4b17      	ldr	r3, [pc, #92]	; (800c5cc <stm32wlxxFlashDriverRead+0x6c>)
 800c56e:	613b      	str	r3, [r7, #16]

   //Check address validity
   if(address < STM32WLxx_FLASH_ADDR || address >= topAddress)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c576:	d303      	bcc.n	800c580 <stm32wlxxFlashDriverRead+0x20>
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d301      	bcc.n	800c584 <stm32wlxxFlashDriverRead+0x24>
      return ERROR_INVALID_PARAMETER;
 800c580:	2302      	movs	r3, #2
 800c582:	e01e      	b.n	800c5c2 <stm32wlxxFlashDriverRead+0x62>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d005      	beq.n	800c596 <stm32wlxxFlashDriverRead+0x36>
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4413      	add	r3, r2
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	429a      	cmp	r2, r3
 800c594:	d201      	bcs.n	800c59a <stm32wlxxFlashDriverRead+0x3a>
      return ERROR_INVALID_PARAMETER;
 800c596:	2302      	movs	r3, #2
 800c598:	e013      	b.n	800c5c2 <stm32wlxxFlashDriverRead+0x62>

   //Perform read operation
   for(i = 0; i < length; i++)
 800c59a:	2300      	movs	r3, #0
 800c59c:	617b      	str	r3, [r7, #20]
 800c59e:	e00b      	b.n	800c5b8 <stm32wlxxFlashDriverRead+0x58>
   {
      *((uint8_t *)data + i) = *(uint8_t*)address;
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	68b9      	ldr	r1, [r7, #8]
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	440b      	add	r3, r1
 800c5a8:	7812      	ldrb	r2, [r2, #0]
 800c5aa:	701a      	strb	r2, [r3, #0]
      address++;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < length; i++)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	617b      	str	r3, [r7, #20]
 800c5b8:	697a      	ldr	r2, [r7, #20]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d3ef      	bcc.n	800c5a0 <stm32wlxxFlashDriverRead+0x40>
   }

   //Successfull process
   return NO_ERROR;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	371c      	adds	r7, #28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bc80      	pop	{r7}
 800c5ca:	4770      	bx	lr
 800c5cc:	08040000 	.word	0x08040000

0800c5d0 <stm32wlxxFlashDriverErase>:
 * @param[in] address Address in Memory to start erasing from
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 **/
error_t stm32wlxxFlashDriverErase(uint32_t address, size_t length)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   int_t firstSectorNumber;
   uint32_t lastSectorAddr;
   int_t lastSectorNumber;

   error = NO_ERROR;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	837b      	strh	r3, [r7, #26]

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c5de:	4b29      	ldr	r3, [pc, #164]	; (800c684 <stm32wlxxFlashDriverErase+0xb4>)
 800c5e0:	617b      	str	r3, [r7, #20]

   //Check address validity
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5e8:	d308      	bcc.n	800c5fc <stm32wlxxFlashDriverErase+0x2c>
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d204      	bcs.n	800c5fc <stm32wlxxFlashDriverErase+0x2c>
      (address % sizeof(uint32_t) != 0))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d001      	beq.n	800c600 <stm32wlxxFlashDriverErase+0x30>
      return ERROR_INVALID_PARAMETER;
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	e03c      	b.n	800c67a <stm32wlxxFlashDriverErase+0xaa>

   //Check parameters validity (is data in flash)
   if((length == 0) || (address + length > topAddress))
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d005      	beq.n	800c612 <stm32wlxxFlashDriverErase+0x42>
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	4413      	add	r3, r2
 800c60c:	697a      	ldr	r2, [r7, #20]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d201      	bcs.n	800c616 <stm32wlxxFlashDriverErase+0x46>
      return ERROR_INVALID_PARAMETER;
 800c612:	2302      	movs	r3, #2
 800c614:	e031      	b.n	800c67a <stm32wlxxFlashDriverErase+0xaa>

   //Get the number of the first sector to erase
   firstSectorNumber = stm32wlxxFlashGetSector(address);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 f9a0 	bl	800c95c <stm32wlxxFlashGetSector>
 800c61c:	6138      	str	r0, [r7, #16]

   if(address + length == topAddress)
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	4413      	add	r3, r2
 800c624:	697a      	ldr	r2, [r7, #20]
 800c626:	429a      	cmp	r2, r3
 800c628:	d102      	bne.n	800c630 <stm32wlxxFlashDriverErase+0x60>
   {
      //Set last sector number as the flash sector total number
      lastSectorNumber = STM32WLxx_FLASH_SECTOR_NUMBER;
 800c62a:	2380      	movs	r3, #128	; 0x80
 800c62c:	61fb      	str	r3, [r7, #28]
 800c62e:	e014      	b.n	800c65a <stm32wlxxFlashDriverErase+0x8a>
   }
   else
   {
      //Get the address of the boundary sector (not to be erased)
      error = stm32wlxxFlashDriverGetNextSector(address+length, &lastSectorAddr);
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	4413      	add	r3, r2
 800c636:	f107 020c 	add.w	r2, r7, #12
 800c63a:	4611      	mov	r1, r2
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 f823 	bl	800c688 <stm32wlxxFlashDriverGetNextSector>
 800c642:	4603      	mov	r3, r0
 800c644:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800c646:	8b7b      	ldrh	r3, [r7, #26]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <stm32wlxxFlashDriverErase+0x80>
         return error;
 800c64c:	8b7b      	ldrh	r3, [r7, #26]
 800c64e:	e014      	b.n	800c67a <stm32wlxxFlashDriverErase+0xaa>

      //The last sector to erase is the last flash bank 1 sector
      lastSectorNumber = stm32wlxxFlashGetSector(lastSectorAddr);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	4618      	mov	r0, r3
 800c654:	f000 f982 	bl	800c95c <stm32wlxxFlashGetSector>
 800c658:	61f8      	str	r0, [r7, #28]
   }

   //Erase sectors of the flash bank 1 (the only one flash bank)
   error = stm32wlxxFlashDriverEraseSector(STM32WLxx_FLASH_BANK1_ID, firstSectorNumber, lastSectorNumber-firstSectorNumber);
 800c65a:	6939      	ldr	r1, [r7, #16]
 800c65c:	69fa      	ldr	r2, [r7, #28]
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	461a      	mov	r2, r3
 800c664:	2001      	movs	r0, #1
 800c666:	f000 f88d 	bl	800c784 <stm32wlxxFlashDriverEraseSector>
 800c66a:	4603      	mov	r3, r0
 800c66c:	837b      	strh	r3, [r7, #26]
   //Is any error?
   if(error)
 800c66e:	8b7b      	ldrh	r3, [r7, #26]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <stm32wlxxFlashDriverErase+0xa8>
      return error;
 800c674:	8b7b      	ldrh	r3, [r7, #26]
 800c676:	e000      	b.n	800c67a <stm32wlxxFlashDriverErase+0xaa>

   //Successful process
   return NO_ERROR;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3720      	adds	r7, #32
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	08040000 	.word	0x08040000

0800c688 <stm32wlxxFlashDriverGetNextSector>:
 * @brief Get address of the neighbouring sector
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetNextSector(uint32_t address, uint32_t *sectorAddr)
{
 800c688:	b480      	push	{r7}
 800c68a:	b089      	sub	sp, #36	; 0x24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t j;
   SectorsGroup *sg;
   uint32_t sAddr = 0xFFFFFFFF;
 800c692:	f04f 33ff 	mov.w	r3, #4294967295
 800c696:	617b      	str	r3, [r7, #20]
   uint32_t lastSectorAddr;

   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 800c698:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      (sectorsList[SECTORS_LIST_LEN-1].size * (sectorsList[SECTORS_LIST_LEN-1].nb - 1));
 800c69c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c6a0:	2380      	movs	r3, #128	; 0x80
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	fb01 f303 	mul.w	r3, r1, r3
   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 800c6a8:	4413      	add	r3, r2
 800c6aa:	613b      	str	r3, [r7, #16]

   //Check parameters validity
   if(address < STM32WLxx_FLASH_ADDR || address > lastSectorAddr || sectorAddr == NULL)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6b2:	d306      	bcc.n	800c6c2 <stm32wlxxFlashDriverGetNextSector+0x3a>
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d802      	bhi.n	800c6c2 <stm32wlxxFlashDriverGetNextSector+0x3a>
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d101      	bne.n	800c6c6 <stm32wlxxFlashDriverGetNextSector+0x3e>
      return ERROR_INVALID_PARAMETER;
 800c6c2:	2302      	movs	r3, #2
 800c6c4:	e044      	b.n	800c750 <stm32wlxxFlashDriverGetNextSector+0xc8>

   //Loop through sectors list
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	61fb      	str	r3, [r7, #28]
 800c6ca:	e036      	b.n	800c73a <stm32wlxxFlashDriverGetNextSector+0xb2>
   {
      //Point to the current sectors group
      sg = (SectorsGroup *) &sectorsList[i];
 800c6cc:	69fa      	ldr	r2, [r7, #28]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	4413      	add	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4a21      	ldr	r2, [pc, #132]	; (800c75c <stm32wlxxFlashDriverGetNextSector+0xd4>)
 800c6d8:	4413      	add	r3, r2
 800c6da:	60fb      	str	r3, [r7, #12]

      //Is address in current sector group
      if(address <= sg->addr + sg->size*sg->nb)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	68f9      	ldr	r1, [r7, #12]
 800c6e6:	6889      	ldr	r1, [r1, #8]
 800c6e8:	fb01 f303 	mul.w	r3, r1, r3
 800c6ec:	4413      	add	r3, r2
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d81f      	bhi.n	800c734 <stm32wlxxFlashDriverGetNextSector+0xac>
      {
         //Loop through sectors group list
         for(j = 0; j < sg->nb; j++)
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	61bb      	str	r3, [r7, #24]
 800c6f8:	e017      	b.n	800c72a <stm32wlxxFlashDriverGetNextSector+0xa2>
         {
            //Is address located in current sector?
            if(address <= sg->addr + j*sg->size)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	69b9      	ldr	r1, [r7, #24]
 800c704:	fb01 f303 	mul.w	r3, r1, r3
 800c708:	4413      	add	r3, r2
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d809      	bhi.n	800c724 <stm32wlxxFlashDriverGetNextSector+0x9c>
            {
               //Set next sector address
               sAddr = sg->addr + j*sg->size;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	69b9      	ldr	r1, [r7, #24]
 800c71a:	fb01 f303 	mul.w	r3, r1, r3
 800c71e:	4413      	add	r3, r2
 800c720:	617b      	str	r3, [r7, #20]
               break;
 800c722:	e007      	b.n	800c734 <stm32wlxxFlashDriverGetNextSector+0xac>
         for(j = 0; j < sg->nb; j++)
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	3301      	adds	r3, #1
 800c728:	61bb      	str	r3, [r7, #24]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	69ba      	ldr	r2, [r7, #24]
 800c730:	429a      	cmp	r2, r3
 800c732:	d3e2      	bcc.n	800c6fa <stm32wlxxFlashDriverGetNextSector+0x72>
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	3301      	adds	r3, #1
 800c738:	61fb      	str	r3, [r7, #28]
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d103      	bne.n	800c748 <stm32wlxxFlashDriverGetNextSector+0xc0>
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c746:	d0c1      	beq.n	800c6cc <stm32wlxxFlashDriverGetNextSector+0x44>
         }
      }
   }

   //Save next sector addr
   *sectorAddr = sAddr;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	601a      	str	r2, [r3, #0]

   //Succesfull process
   return NO_ERROR;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3724      	adds	r7, #36	; 0x24
 800c754:	46bd      	mov	sp, r7
 800c756:	bc80      	pop	{r7}
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	0801fdd8 	.word	0x0801fdd8

0800c760 <stm32wlxxFlashDriverIsSectorAddr>:
 * @brief Determine if a given address is contained within a sector
 * @return boolean
 **/

bool_t stm32wlxxFlashDriverIsSectorAddr(uint32_t address)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
   int_t sector;

   //Get Flash memory sector number
   sector = stm32wlxxFlashGetSector(address);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f8f7 	bl	800c95c <stm32wlxxFlashGetSector>
 800c76e:	60f8      	str	r0, [r7, #12]

   //Is given address match a sector start address?
   if(sector >= 0)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2b00      	cmp	r3, #0
 800c774:	db01      	blt.n	800c77a <stm32wlxxFlashDriverIsSectorAddr+0x1a>
      return TRUE;
 800c776:	2301      	movs	r3, #1
 800c778:	e000      	b.n	800c77c <stm32wlxxFlashDriverIsSectorAddr+0x1c>
   else
      return FALSE;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <stm32wlxxFlashDriverEraseSector>:
 * @param[in] nbSectors Number of Flash memory sector to be erased
 * @return Error code
 **/

error_t stm32wlxxFlashDriverEraseSector(uint32_t bankID, uint32_t firstSector, size_t nbSectors)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b08a      	sub	sp, #40	; 0x28
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint32_t sectorError;

   //Check parameter validity
   if((firstSector >= STM32WLxx_FLASH_SECTOR_NUMBER) || (nbSectors == 0) ||
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	2b7f      	cmp	r3, #127	; 0x7f
 800c794:	d80b      	bhi.n	800c7ae <stm32wlxxFlashDriverEraseSector+0x2a>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d008      	beq.n	800c7ae <stm32wlxxFlashDriverEraseSector+0x2a>
      ((firstSector + nbSectors - 1) >= STM32WLxx_FLASH_SECTOR_NUMBER) ||
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	3b01      	subs	r3, #1
   if((firstSector >= STM32WLxx_FLASH_SECTOR_NUMBER) || (nbSectors == 0) ||
 800c7a4:	2b7f      	cmp	r3, #127	; 0x7f
 800c7a6:	d802      	bhi.n	800c7ae <stm32wlxxFlashDriverEraseSector+0x2a>
      ((firstSector + nbSectors - 1) >= STM32WLxx_FLASH_SECTOR_NUMBER) ||
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d001      	beq.n	800c7b2 <stm32wlxxFlashDriverEraseSector+0x2e>
      (bankID != STM32WLxx_FLASH_BANK1_ID))
      return ERROR_INVALID_PARAMETER;
 800c7ae:	2302      	movs	r3, #2
 800c7b0:	e054      	b.n	800c85c <stm32wlxxFlashDriverEraseSector+0xd8>

   //Start of exception handling block
   do
   {
      //Allow access to Flash control registers and user False
      status = HAL_FLASH_Unlock();
 800c7b2:	f001 fdf5 	bl	800e3a0 <HAL_FLASH_Unlock>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      //Is any error?
      if (status != HAL_OK)
 800c7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00c      	beq.n	800c7de <stm32wlxxFlashDriverEraseSector+0x5a>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 800c7c4:	f7fc fea3 	bl	800950e <osSuspendAllTasks>
 800c7c8:	4b26      	ldr	r3, [pc, #152]	; (800c864 <stm32wlxxFlashDriverEraseSector+0xe0>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	2227      	movs	r2, #39	; 0x27
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	4825      	ldr	r0, [pc, #148]	; (800c868 <stm32wlxxFlashDriverEraseSector+0xe4>)
 800c7d4:	f00b fe92 	bl	80184fc <fwrite>
 800c7d8:	f7fc fea4 	bl	8009524 <osResumeAllTasks>
         break;
 800c7dc:	e036      	b.n	800c84c <stm32wlxxFlashDriverEraseSector+0xc8>
      }

      //Set flash erase settings
      EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 800c7de:	2302      	movs	r3, #2
 800c7e0:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.Page       = firstSector;
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	61fb      	str	r3, [r7, #28]
      EraseInitStruct.NbPages    = nbSectors;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	623b      	str	r3, [r7, #32]

      //Wait for the last flash operation
      FLASH_WaitForLastOperation((uint32_t)5000U);
 800c7ea:	f241 3088 	movw	r0, #5000	; 0x1388
 800c7ee:	f001 fe13 	bl	800e418 <FLASH_WaitForLastOperation>

      //Erase the specified Flash sector(s)
      status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 800c7f2:	f107 0214 	add.w	r2, r7, #20
 800c7f6:	f107 0318 	add.w	r3, r7, #24
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f001 fed1 	bl	800e5a4 <HAL_FLASHEx_Erase>
 800c802:	4603      	mov	r3, r0
 800c804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      //Is any error?
      if(status != HAL_OK)
 800c808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00b      	beq.n	800c828 <stm32wlxxFlashDriverEraseSector+0xa4>
      {
         //Debug message
         TRACE_ERROR("Failed to erase flash sector(s) %ld, error = 0x%08lX!\r\n", firstSector, sectorError);
 800c810:	f7fc fe7d 	bl	800950e <osSuspendAllTasks>
 800c814:	4b13      	ldr	r3, [pc, #76]	; (800c864 <stm32wlxxFlashDriverEraseSector+0xe0>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68d8      	ldr	r0, [r3, #12]
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	68ba      	ldr	r2, [r7, #8]
 800c81e:	4913      	ldr	r1, [pc, #76]	; (800c86c <stm32wlxxFlashDriverEraseSector+0xe8>)
 800c820:	f00b fcc8 	bl	80181b4 <fprintf>
 800c824:	f7fc fe7e 	bl	8009524 <osResumeAllTasks>
      }

      //Disable the Flash option control register access (recommended to protect
      //the option Bytes against possible unwanted operations)
      if(HAL_FLASH_Lock() != HAL_OK)
 800c828:	f001 fddc 	bl	800e3e4 <HAL_FLASH_Lock>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00c      	beq.n	800c84c <stm32wlxxFlashDriverEraseSector+0xc8>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 800c832:	f7fc fe6c 	bl	800950e <osSuspendAllTasks>
 800c836:	4b0b      	ldr	r3, [pc, #44]	; (800c864 <stm32wlxxFlashDriverEraseSector+0xe0>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	2225      	movs	r2, #37	; 0x25
 800c83e:	2101      	movs	r1, #1
 800c840:	480b      	ldr	r0, [pc, #44]	; (800c870 <stm32wlxxFlashDriverEraseSector+0xec>)
 800c842:	f00b fe5b 	bl	80184fc <fwrite>
 800c846:	f7fc fe6d 	bl	8009524 <osResumeAllTasks>
         break;
 800c84a:	bf00      	nop
      }
   }while(0);

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 800c84c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c850:	2b00      	cmp	r3, #0
 800c852:	d101      	bne.n	800c858 <stm32wlxxFlashDriverEraseSector+0xd4>
 800c854:	2300      	movs	r3, #0
 800c856:	e001      	b.n	800c85c <stm32wlxxFlashDriverEraseSector+0xd8>
 800c858:	f240 2309 	movw	r3, #521	; 0x209
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3728      	adds	r7, #40	; 0x28
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	20000098 	.word	0x20000098
 800c868:	0801f6b4 	.word	0x0801f6b4
 800c86c:	0801f6dc 	.word	0x0801f6dc
 800c870:	0801f714 	.word	0x0801f714

0800c874 <stm32wlxxFlashDriverWriteWord>:
 * @param[in] word 32-bit word to write in Flash memory
 * @return Error code
 **/

error_t stm32wlxxFlashDriverWriteWord(uint32_t address, uint32_t word)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08a      	sub	sp, #40	; 0x28
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c87e:	4b33      	ldr	r3, [pc, #204]	; (800c94c <stm32wlxxFlashDriverWriteWord+0xd8>)
 800c880:	623b      	str	r3, [r7, #32]

   //Check parameters validity (is data in flash)
   if((address + sizeof(uint32_t) >= topAddress) ||
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	3304      	adds	r3, #4
 800c886:	6a3a      	ldr	r2, [r7, #32]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d904      	bls.n	800c896 <stm32wlxxFlashDriverWriteWord+0x22>
      (address % sizeof(uint32_t) != 0))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f003 0303 	and.w	r3, r3, #3
   if((address + sizeof(uint32_t) >= topAddress) ||
 800c892:	2b00      	cmp	r3, #0
 800c894:	d001      	beq.n	800c89a <stm32wlxxFlashDriverWriteWord+0x26>
      return ERROR_INVALID_PARAMETER;
 800c896:	2302      	movs	r3, #2
 800c898:	e053      	b.n	800c942 <stm32wlxxFlashDriverWriteWord+0xce>

   //Unlock FLASH
   HAL_FLASH_Unlock();
 800c89a:	f001 fd81 	bl	800e3a0 <HAL_FLASH_Unlock>

   do
   {
      //Get flash sector number according to the given wirte address
      // (-1 if it doesn't match a flash sector start address)
      flashSector = stm32wlxxFlashGetSector(address);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f85c 	bl	800c95c <stm32wlxxFlashGetSector>
 800c8a4:	61f8      	str	r0, [r7, #28]

      //Is write address match a flash sector start address?
      if(flashSector >= 0)
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	db25      	blt.n	800c8f8 <stm32wlxxFlashDriverWriteWord+0x84>
      {
         //Set flash erase settings
         EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	60fb      	str	r3, [r7, #12]
         EraseInitStruct.Page       = flashSector;
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	613b      	str	r3, [r7, #16]
         EraseInitStruct.NbPages    = 1;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	617b      	str	r3, [r7, #20]

         //Wait for the last flash operation
         FLASH_WaitForLastOperation((uint32_t)5000U);
 800c8b8:	f241 3088 	movw	r0, #5000	; 0x1388
 800c8bc:	f001 fdac 	bl	800e418 <FLASH_WaitForLastOperation>

         //Erase the sector
         status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 800c8c0:	f107 0218 	add.w	r2, r7, #24
 800c8c4:	f107 030c 	add.w	r3, r7, #12
 800c8c8:	4611      	mov	r1, r2
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f001 fe6a 	bl	800e5a4 <HAL_FLASHEx_Erase>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         if(status != HAL_OK)
 800c8d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d00c      	beq.n	800c8f8 <stm32wlxxFlashDriverWriteWord+0x84>
         {
            //Debug message
            TRACE_ERROR("Flash erase failed!\r\n");
 800c8de:	f7fc fe16 	bl	800950e <osSuspendAllTasks>
 800c8e2:	4b1b      	ldr	r3, [pc, #108]	; (800c950 <stm32wlxxFlashDriverWriteWord+0xdc>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	2215      	movs	r2, #21
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	4819      	ldr	r0, [pc, #100]	; (800c954 <stm32wlxxFlashDriverWriteWord+0xe0>)
 800c8ee:	f00b fe05 	bl	80184fc <fwrite>
 800c8f2:	f7fc fe17 	bl	8009524 <osResumeAllTasks>
            break;
 800c8f6:	e01a      	b.n	800c92e <stm32wlxxFlashDriverWriteWord+0xba>

      //Write word (64bits) into flash
      // Becareful !!!
      // - If FLASH_TYPEPROGRAM_DOUBLEWORD type program -> Data parameter MUST be the 64bits data value
      // - If FLASH_TYPEPROGRAM_FAST type program -> Data parameter MUST be the the address of data
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *((uint64_t*)word));
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	6879      	ldr	r1, [r7, #4]
 800c900:	2001      	movs	r0, #1
 800c902:	f001 fd09 	bl	800e318 <HAL_FLASH_Program>
 800c906:	4603      	mov	r3, r0
 800c908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if(status != HAL_OK)
 800c90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00c      	beq.n	800c92e <stm32wlxxFlashDriverWriteWord+0xba>
      {
         //Debug message
         TRACE_ERROR("Flash program failed!\r\n");
 800c914:	f7fc fdfb 	bl	800950e <osSuspendAllTasks>
 800c918:	4b0d      	ldr	r3, [pc, #52]	; (800c950 <stm32wlxxFlashDriverWriteWord+0xdc>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	2217      	movs	r2, #23
 800c920:	2101      	movs	r1, #1
 800c922:	480d      	ldr	r0, [pc, #52]	; (800c958 <stm32wlxxFlashDriverWriteWord+0xe4>)
 800c924:	f00b fdea 	bl	80184fc <fwrite>
 800c928:	f7fc fdfc 	bl	8009524 <osResumeAllTasks>
         break;
 800c92c:	bf00      	nop
      }
   }while(0);

   //Lock FLASH
   HAL_FLASH_Lock();
 800c92e:	f001 fd59 	bl	800e3e4 <HAL_FLASH_Lock>

   //Return error code
   return (status != HAL_OK)? ERROR_FAILURE : NO_ERROR;
 800c932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c936:	2b00      	cmp	r3, #0
 800c938:	bf14      	ite	ne
 800c93a:	2301      	movne	r3, #1
 800c93c:	2300      	moveq	r3, #0
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	b29b      	uxth	r3, r3
}
 800c942:	4618      	mov	r0, r3
 800c944:	3728      	adds	r7, #40	; 0x28
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	08040000 	.word	0x08040000
 800c950:	20000098 	.word	0x20000098
 800c954:	0801f73c 	.word	0x0801f73c
 800c958:	0801f754 	.word	0x0801f754

0800c95c <stm32wlxxFlashGetSector>:
 * @param[in] address Given Flash Memory address
 * @return Sector number or -1
 **/

int_t stm32wlxxFlashGetSector(uint32_t address)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b087      	sub	sp, #28
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
    uint_t j;
    int_t sector;
    SectorsGroup* sGroup;

    //Initialize sector number
    sector = -1;
 800c964:	f04f 33ff 	mov.w	r3, #4294967295
 800c968:	60fb      	str	r3, [r7, #12]

    //Loop through flash sector group list
    for(i = 0; i < SECTORS_LIST_LEN; i++)
 800c96a:	2300      	movs	r3, #0
 800c96c:	617b      	str	r3, [r7, #20]
 800c96e:	e024      	b.n	800c9ba <stm32wlxxFlashGetSector+0x5e>
    {
        //Point to the current sector group
        sGroup = (SectorsGroup*) &sectorsList[i];
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	4613      	mov	r3, r2
 800c974:	005b      	lsls	r3, r3, #1
 800c976:	4413      	add	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	4a14      	ldr	r2, [pc, #80]	; (800c9cc <stm32wlxxFlashGetSector+0x70>)
 800c97c:	4413      	add	r3, r2
 800c97e:	60bb      	str	r3, [r7, #8]

        //Loop through sector group sectors list
        for(j = 0; j < sGroup->nb; j++)
 800c980:	2300      	movs	r3, #0
 800c982:	613b      	str	r3, [r7, #16]
 800c984:	e011      	b.n	800c9aa <stm32wlxxFlashGetSector+0x4e>
        {
            //Is current sector address matches given address?
            if(sGroup->addr + sGroup->size*j == address)
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	6939      	ldr	r1, [r7, #16]
 800c990:	fb01 f303 	mul.w	r3, r1, r3
 800c994:	4413      	add	r3, r2
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d103      	bne.n	800c9a4 <stm32wlxxFlashGetSector+0x48>
            {
                sector = j;
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	60fb      	str	r3, [r7, #12]
                return sector;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	e00e      	b.n	800c9c2 <stm32wlxxFlashGetSector+0x66>
        for(j = 0; j < sGroup->nb; j++)
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	613b      	str	r3, [r7, #16]
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	693a      	ldr	r2, [r7, #16]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d3e8      	bcc.n	800c986 <stm32wlxxFlashGetSector+0x2a>
    for(i = 0; i < SECTORS_LIST_LEN; i++)
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	617b      	str	r3, [r7, #20]
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d0d7      	beq.n	800c970 <stm32wlxxFlashGetSector+0x14>
            }
        }
    }

    return sector;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	371c      	adds	r7, #28
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bc80      	pop	{r7}
 800c9ca:	4770      	bx	lr
 800c9cc:	0801fdd8 	.word	0x0801fdd8

0800c9d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c9d4:	f3bf 8f4f 	dsb	sy
}
 800c9d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c9da:	4b06      	ldr	r3, [pc, #24]	; (800c9f4 <__NVIC_SystemReset+0x24>)
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c9e2:	4904      	ldr	r1, [pc, #16]	; (800c9f4 <__NVIC_SystemReset+0x24>)
 800c9e4:	4b04      	ldr	r3, [pc, #16]	; (800c9f8 <__NVIC_SystemReset+0x28>)
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c9ea:	f3bf 8f4f 	dsb	sy
}
 800c9ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c9f0:	bf00      	nop
 800c9f2:	e7fd      	b.n	800c9f0 <__NVIC_SystemReset+0x20>
 800c9f4:	e000ed00 	.word	0xe000ed00
 800c9f8:	05fa0004 	.word	0x05fa0004

0800c9fc <mcuSystemReset>:
/**
 * @brief Reset MCU system
 **/

void mcuSystemReset(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
   NVIC_SystemReset();
 800ca00:	f7ff ffe6 	bl	800c9d0 <__NVIC_SystemReset>

0800ca04 <verifyInit>:
 * @param[in] settings Image Verification specific settings
 * @return
 **/

error_t verifyInit(VerifyContext *context, VerifySettings *settings)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
   //Check parameters
   if (context == NULL || settings == NULL)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <verifyInit+0x16>
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <verifyInit+0x1a>
      return ERROR_INVALID_PARAMETER;
 800ca1a:	2302      	movs	r3, #2
 800ca1c:	e043      	b.n	800caa6 <verifyInit+0xa2>

   //Save verify settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2208      	movs	r2, #8
 800ca22:	6839      	ldr	r1, [r7, #0]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f00b ffeb 	bl	8018a00 <memcpy>

   //Save verification module user settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2208      	movs	r2, #8
 800ca2e:	6839      	ldr	r1, [r7, #0]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f00b ffe5 	bl	8018a00 <memcpy>

   //Initialize verification context for integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d11a      	bne.n	800ca74 <verifyInit+0x70>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d014      	beq.n	800ca70 <verifyInit+0x6c>
      {
         //Initialize integrity algo context
         context->verifySettings.integrityAlgo->init(context->checkContext);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	3208      	adds	r2, #8
 800ca50:	4610      	mov	r0, r2
 800ca52:	4798      	blx	r3

         //Set image check digest size
         context->imageCheckDigestSize = context->verifySettings.integrityAlgo->digestSize;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	695a      	ldr	r2, [r3, #20]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

         //Set check data (integrity tag) size
         context->checkDataSize = context->imageCheckDigestSize;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

         //Successful process
         return NO_ERROR;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	e01a      	b.n	800caa6 <verifyInit+0xa2>
      }
      else
      {
         return ERROR_INVALID_PARAMETER;
 800ca70:	2302      	movs	r3, #2
 800ca72:	e018      	b.n	800caa6 <verifyInit+0xa2>
#else
      return ERROR_INVALID_PARAMETER;
#endif
   }
   //Initialize verification context for authentication method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d101      	bne.n	800ca80 <verifyInit+0x7c>
   {
#if (VERIFY_AUTHENTICATION_SUPPORT == ENABLED)
      //Initialize authentication algorithm
      return authInit(context);
#else
      return ERROR_INVALID_PARAMETER;
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	e012      	b.n	800caa6 <verifyInit+0xa2>
#endif
   }
   //Initialize verification context for signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	2b02      	cmp	r3, #2
 800ca86:	d101      	bne.n	800ca8c <verifyInit+0x88>
   {
#if (VERIFY_SIGNATURE_SUPPORT == ENABLED)
      //Initialize signature algorithm
      return signInit(context);
#else
      return ERROR_INVALID_PARAMETER;
 800ca88:	2302      	movs	r3, #2
 800ca8a:	e00c      	b.n	800caa6 <verifyInit+0xa2>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 800ca8c:	f7fc fd3f 	bl	800950e <osSuspendAllTasks>
 800ca90:	4b07      	ldr	r3, [pc, #28]	; (800cab0 <verifyInit+0xac>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	2222      	movs	r2, #34	; 0x22
 800ca98:	2101      	movs	r1, #1
 800ca9a:	4806      	ldr	r0, [pc, #24]	; (800cab4 <verifyInit+0xb0>)
 800ca9c:	f00b fd2e 	bl	80184fc <fwrite>
 800caa0:	f7fc fd40 	bl	8009524 <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800caa4:	2367      	movs	r3, #103	; 0x67
   }
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	20000098 	.word	0x20000098
 800cab4:	0801f76c 	.word	0x0801f76c

0800cab8 <verifyProcess>:
 * @param[in] length Length og the image data block
 * @return Error code
 **/

error_t verifyProcess(VerifyContext *context, uint8_t *data, size_t length)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
   //Check parameters
   if (context == NULL || (data == NULL || length == 0))
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d005      	beq.n	800cad6 <verifyProcess+0x1e>
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <verifyProcess+0x1e>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d101      	bne.n	800cada <verifyProcess+0x22>
      return ERROR_INVALID_PARAMETER;
 800cad6:	2302      	movs	r3, #2
 800cad8:	e02d      	b.n	800cb36 <verifyProcess+0x7e>

   //Process image data block integrity hash tag calculation
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d110      	bne.n	800cb04 <verifyProcess+0x4c>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00a      	beq.n	800cb00 <verifyProcess+0x48>
      {
         //Update integrity hash tag
         context->verifySettings.integrityAlgo->update(context->checkContext, data, length);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	f102 0008 	add.w	r0, r2, #8
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	68b9      	ldr	r1, [r7, #8]
 800cafa:	4798      	blx	r3
      TRACE_ERROR("Verification mode not supported!\r\n");
      return ERROR_NOT_IMPLEMENTED;
   }

   //Successful process
   return NO_ERROR;
 800cafc:	2300      	movs	r3, #0
 800cafe:	e01a      	b.n	800cb36 <verifyProcess+0x7e>
         return ERROR_INVALID_PARAMETER;
 800cb00:	2302      	movs	r3, #2
 800cb02:	e018      	b.n	800cb36 <verifyProcess+0x7e>
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d101      	bne.n	800cb10 <verifyProcess+0x58>
      return ERROR_INVALID_PARAMETER;
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	e012      	b.n	800cb36 <verifyProcess+0x7e>
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d101      	bne.n	800cb1c <verifyProcess+0x64>
      return ERROR_INVALID_PARAMETER;
 800cb18:	2302      	movs	r3, #2
 800cb1a:	e00c      	b.n	800cb36 <verifyProcess+0x7e>
      TRACE_ERROR("Verification mode not supported!\r\n");
 800cb1c:	f7fc fcf7 	bl	800950e <osSuspendAllTasks>
 800cb20:	4b07      	ldr	r3, [pc, #28]	; (800cb40 <verifyProcess+0x88>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	2222      	movs	r2, #34	; 0x22
 800cb28:	2101      	movs	r1, #1
 800cb2a:	4806      	ldr	r0, [pc, #24]	; (800cb44 <verifyProcess+0x8c>)
 800cb2c:	f00b fce6 	bl	80184fc <fwrite>
 800cb30:	f7fc fcf8 	bl	8009524 <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800cb34:	2367      	movs	r3, #103	; 0x67
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	20000098 	.word	0x20000098
 800cb44:	0801f76c 	.word	0x0801f76c

0800cb48 <verifyConfirm>:
 * @param[in] verifyDataLength Length of the image check data
 * @return Error code
 **/

error_t verifyConfirm(VerifyContext *context, uint8_t *verifyData, size_t verifyDataLength)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
   error_t error;

   //Initialize error code
   error = NO_ERROR;
 800cb54:	2300      	movs	r3, #0
 800cb56:	82fb      	strh	r3, [r7, #22]

   //Check parameters
   if (context == NULL || verifyData == NULL || verifyDataLength == 0)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d005      	beq.n	800cb6a <verifyConfirm+0x22>
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d002      	beq.n	800cb6a <verifyConfirm+0x22>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d101      	bne.n	800cb6e <verifyConfirm+0x26>
      return ERROR_INVALID_PARAMETER;
 800cb6a:	2302      	movs	r3, #2
 800cb6c:	e03e      	b.n	800cbec <verifyConfirm+0xa4>

   //Check image check data using integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d11f      	bne.n	800cbb6 <verifyConfirm+0x6e>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d019      	beq.n	800cbb2 <verifyConfirm+0x6a>
      {
         //Finalize interity tag computation
         context->verifySettings.integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	f102 0008 	add.w	r0, r2, #8
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	32dc      	adds	r2, #220	; 0xdc
 800cb8e:	4611      	mov	r1, r2
 800cb90:	4798      	blx	r3
         TRACE_DEBUG("Computed integrity tag (%d bytes)\r\n", context->imageCheckDigestSize);
         TRACE_DEBUG_ARRAY("  ", context->imageCheckDigest, context->imageCheckDigestSize);
         TRACE_DEBUG("\r\n");

         //Compare computed integrity digest with the one received in the image
         if (osMemcmp(verifyData, context->imageCheckDigest, context->imageCheckDigestSize) != 0)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cb9e:	461a      	mov	r2, r3
 800cba0:	68b8      	ldr	r0, [r7, #8]
 800cba2:	f00b ff1d 	bl	80189e0 <memcmp>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d01e      	beq.n	800cbea <verifyConfirm+0xa2>
         {
            //Debug message
            TRACE_INFO("Firmware integrity tag is not valid!\r\n");
            error = ERROR_ABORTED;
 800cbac:	230f      	movs	r3, #15
 800cbae:	82fb      	strh	r3, [r7, #22]
 800cbb0:	e01b      	b.n	800cbea <verifyConfirm+0xa2>
         }
      }
      else
      {
         return ERROR_INVALID_PARAMETER;
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	e01a      	b.n	800cbec <verifyConfirm+0xa4>
#else
      return ERROR_INVALID_PARAMETER;
#endif
   }
   //Check image check data using authentification method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d101      	bne.n	800cbc2 <verifyConfirm+0x7a>
      else
      {
         return ERROR_INVALID_PARAMETER;
      }
#else
      return ERROR_INVALID_PARAMETER;
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	e014      	b.n	800cbec <verifyConfirm+0xa4>
#endif
   }
   //Check image check data using signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d101      	bne.n	800cbce <verifyConfirm+0x86>
      else
      {
         return ERROR_INVALID_PARAMETER;
      }
#else
      return ERROR_INVALID_PARAMETER;
 800cbca:	2302      	movs	r3, #2
 800cbcc:	e00e      	b.n	800cbec <verifyConfirm+0xa4>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 800cbce:	f7fc fc9e 	bl	800950e <osSuspendAllTasks>
 800cbd2:	4b08      	ldr	r3, [pc, #32]	; (800cbf4 <verifyConfirm+0xac>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	2222      	movs	r2, #34	; 0x22
 800cbda:	2101      	movs	r1, #1
 800cbdc:	4806      	ldr	r0, [pc, #24]	; (800cbf8 <verifyConfirm+0xb0>)
 800cbde:	f00b fc8d 	bl	80184fc <fwrite>
 800cbe2:	f7fc fc9f 	bl	8009524 <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800cbe6:	2367      	movs	r3, #103	; 0x67
 800cbe8:	e000      	b.n	800cbec <verifyConfirm+0xa4>
   }

   //Successful process
   return error;
 800cbea:	8afb      	ldrh	r3, [r7, #22]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3718      	adds	r7, #24
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	20000098 	.word	0x20000098
 800cbf8:	0801f76c 	.word	0x0801f76c

0800cbfc <verifyGenerateCheckData>:
 * @param[out] checkDataLength Length of the image check data buffer tag
 * @return Error code
 **/

error_t verifyGenerateCheckData(VerifyContext *context, uint8_t *checkData, size_t checkDataSize, size_t *checkDataLength)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b086      	sub	sp, #24
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	60f8      	str	r0, [r7, #12]
 800cc04:	60b9      	str	r1, [r7, #8]
 800cc06:	607a      	str	r2, [r7, #4]
 800cc08:	603b      	str	r3, [r7, #0]
   VerifySettings *settings;

   //Check parameters
   if (context == NULL || checkData == NULL || checkDataLength == NULL)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d005      	beq.n	800cc1c <verifyGenerateCheckData+0x20>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d002      	beq.n	800cc1c <verifyGenerateCheckData+0x20>
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d101      	bne.n	800cc20 <verifyGenerateCheckData+0x24>
      return ERROR_INVALID_PARAMETER;
 800cc1c:	2302      	movs	r3, #2
 800cc1e:	e03c      	b.n	800cc9a <verifyGenerateCheckData+0x9e>

   //Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	617b      	str	r3, [r7, #20]

   //Generate image check integrity tag
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d129      	bne.n	800cc80 <verifyGenerateCheckData+0x84>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d023      	beq.n	800cc7c <verifyGenerateCheckData+0x80>
      {
         //Finalize interity tag check computation
         settings->integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	f102 0008 	add.w	r0, r2, #8
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	32dc      	adds	r2, #220	; 0xdc
 800cc44:	4611      	mov	r1, r2
 800cc46:	4798      	blx	r3

         if(checkDataSize >= context->imageCheckDigestSize)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d310      	bcc.n	800cc76 <verifyGenerateCheckData+0x7a>
         {
            //Save interity tag check data length
            *checkDataLength = context->imageCheckDigestSize;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	601a      	str	r2, [r3, #0]
            //Save interity tag check data
            memcpy(checkData, context->imageCheckDigest, context->imageCheckDigestSize);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	68b8      	ldr	r0, [r7, #8]
 800cc6e:	f00b fec7 	bl	8018a00 <memcpy>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
      return ERROR_ABORTED;
   }

   //Successfull process
   return NO_ERROR;
 800cc72:	2300      	movs	r3, #0
 800cc74:	e011      	b.n	800cc9a <verifyGenerateCheckData+0x9e>
            return ERROR_BUFFER_OVERFLOW;
 800cc76:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800cc7a:	e00e      	b.n	800cc9a <verifyGenerateCheckData+0x9e>
         return ERROR_INVALID_PARAMETER;
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	e00c      	b.n	800cc9a <verifyGenerateCheckData+0x9e>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
 800cc80:	f7fc fc45 	bl	800950e <osSuspendAllTasks>
 800cc84:	4b07      	ldr	r3, [pc, #28]	; (800cca4 <verifyGenerateCheckData+0xa8>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	2238      	movs	r2, #56	; 0x38
 800cc8c:	2101      	movs	r1, #1
 800cc8e:	4806      	ldr	r0, [pc, #24]	; (800cca8 <verifyGenerateCheckData+0xac>)
 800cc90:	f00b fc34 	bl	80184fc <fwrite>
 800cc94:	f7fc fc46 	bl	8009524 <osResumeAllTasks>
      return ERROR_ABORTED;
 800cc98:	230f      	movs	r3, #15
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	20000098 	.word	0x20000098
 800cca8:	0801f790 	.word	0x0801f790

0800ccac <w25q80dvFlashDriverInit>:
 * @brief Initialize Flash Memory.
 * @return Error code
 **/

error_t w25q80dvFlashDriverInit(void)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
	bool_t status;

   //Debug message
   TRACE_INFO("Initializing %s memory...\r\n", W25Q80DV_NAME);

   status = Flash__Init();
 800ccb2:	f007 fd95 	bl	80147e0 <Flash__Init>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	607b      	str	r3, [r7, #4]
   if(!status)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <w25q80dvFlashDriverInit+0x18>
   {
      TRACE_ERROR("Failed to initialize SPI External Flash!\r\n");
      return ERROR_FAILURE;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e000      	b.n	800ccc6 <w25q80dvFlashDriverInit+0x1a>
   }

   //Successfull process
   return NO_ERROR;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
	...

0800ccd0 <w25q80dvFlashDriverGetInfo>:
 * @param[in,out] info Pointeur to the Memory information structure to be returned
 * @return Error code
 **/

error_t w25q80dvFlashDriverGetInfo(const FlashInfo **info)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
   //Set Memory information pointeur
   *info = (const FlashInfo*) &w25q80dvFlashDriverInfo;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a04      	ldr	r2, [pc, #16]	; (800ccec <w25q80dvFlashDriverGetInfo+0x1c>)
 800ccdc:	601a      	str	r2, [r3, #0]

   //Successfull process
   return NO_ERROR;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bc80      	pop	{r7}
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	0801fe38 	.word	0x0801fe38

0800ccf0 <w25q80dvFlashDriverGetStatus>:
 * @param[in,out] status Pointeur to the Memory status to be returned
 * @return Error code
 **/

error_t w25q80dvFlashDriverGetStatus(FlashStatus *status)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
   uint16_t statusReg;

   //Check parameter vailidity
   if(status == NULL)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <w25q80dvFlashDriverGetStatus+0x12>
      return ERROR_INVALID_PARAMETER;
 800ccfe:	2302      	movs	r3, #2
 800cd00:	e010      	b.n	800cd24 <w25q80dvFlashDriverGetStatus+0x34>

   //TODO: Get SPI Flash Memory error flags status

   //Read w25q80dv status register 1 & 2
   statusReg = Flash__ReadDeviceStatus();
 800cd02:	f007 fe00 	bl	8014906 <Flash__ReadDeviceStatus>
 800cd06:	4603      	mov	r3, r0
 800cd08:	81fb      	strh	r3, [r7, #14]

   if(statusReg & STATUS_REG_BUSY)
 800cd0a:	89fb      	ldrh	r3, [r7, #14]
 800cd0c:	f003 0301 	and.w	r3, r3, #1
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d003      	beq.n	800cd1c <w25q80dvFlashDriverGetStatus+0x2c>
   {
	   //Set Flash memory status
	   *status = FLASH_STATUS_BUSY;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2201      	movs	r2, #1
 800cd18:	701a      	strb	r2, [r3, #0]
 800cd1a:	e002      	b.n	800cd22 <w25q80dvFlashDriverGetStatus+0x32>
   }
   else
   {
	   //Set Flash memory status
	   *status = FLASH_STATUS_OK;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	701a      	strb	r2, [r3, #0]
   }

   //Successfull process
   return NO_ERROR;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <w25q80dvFlashDriverWrite>:
 * @param[in] length Number of data bytes to write in
 * @return Error code
 **/

error_t w25q80dvFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b088      	sub	sp, #32
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
   const uint8_t *p;
   uint8_t word[4];
   size_t n;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 800cd38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cd3c:	61bb      	str	r3, [r7, #24]

   //Check address validity
   if((address < W25Q80DV_ADDR || address >= topAddress) ||
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d204      	bcs.n	800cd50 <w25q80dvFlashDriverWrite+0x24>
      (address % sizeof(uint32_t) != 0))
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f003 0303 	and.w	r3, r3, #3
   if((address < W25Q80DV_ADDR || address >= topAddress) ||
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d001      	beq.n	800cd54 <w25q80dvFlashDriverWrite+0x28>
      return ERROR_INVALID_PARAMETER;
 800cd50:	2302      	movs	r3, #2
 800cd52:	e042      	b.n	800cdda <w25q80dvFlashDriverWrite+0xae>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d005      	beq.n	800cd66 <w25q80dvFlashDriverWrite+0x3a>
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4413      	add	r3, r2
 800cd60:	69ba      	ldr	r2, [r7, #24]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d201      	bcs.n	800cd6a <w25q80dvFlashDriverWrite+0x3e>
      return ERROR_INVALID_PARAMETER;
 800cd66:	2302      	movs	r3, #2
 800cd68:	e037      	b.n	800cdda <w25q80dvFlashDriverWrite+0xae>

   //Cast data pointer
   p = (const uint8_t*) data;
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	61fb      	str	r3, [r7, #28]

   //Perform write operation
   while(length > 0)
 800cd6e:	e030      	b.n	800cdd2 <w25q80dvFlashDriverWrite+0xa6>
   {
      //Prevent to write more than 4 bytes at a time
      n = MIN(sizeof(word), length);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b04      	cmp	r3, #4
 800cd74:	bf28      	it	cs
 800cd76:	2304      	movcs	r3, #4
 800cd78:	617b      	str	r3, [r7, #20]

      //Check if remaining bytes is less than 4 (32bits word)
      if(n < sizeof(uint32_t))
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	2b03      	cmp	r3, #3
 800cd7e:	d806      	bhi.n	800cd8e <w25q80dvFlashDriverWrite+0x62>
         memset(word, 0, sizeof(word));
 800cd80:	f107 0310 	add.w	r3, r7, #16
 800cd84:	2204      	movs	r2, #4
 800cd86:	2100      	movs	r1, #0
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f00b fe61 	bl	8018a50 <memset>

      //Copy n bytes
      memcpy(word, p, n);
 800cd8e:	f107 0310 	add.w	r3, r7, #16
 800cd92:	697a      	ldr	r2, [r7, #20]
 800cd94:	69f9      	ldr	r1, [r7, #28]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f00b fe32 	bl	8018a00 <memcpy>

      //Is address match sector start address?
      if(address % W25Q80DV_SUBSECTORS_SIZE == 0)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d102      	bne.n	800cdac <w25q80dvFlashDriverWrite+0x80>
      {
         //Erases the specified block
    	 Flash__SectorErase4k(address);
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f007 fe62 	bl	8014a70 <Flash__SectorErase4k>
      }

      //Program 32-bit word in flash memory
      Flash__PageProgram(address, word, sizeof(uint32_t));
 800cdac:	f107 0310 	add.w	r3, r7, #16
 800cdb0:	2204      	movs	r2, #4
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f007 fe0e 	bl	80149d6 <Flash__PageProgram>

      //Advance data pointer
      p += n;
 800cdba:	69fa      	ldr	r2, [r7, #28]
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	61fb      	str	r3, [r7, #28]
      //Increment word address
      address += n;
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	60fb      	str	r3, [r7, #12]
      //Remaining bytes to be written
      length -= n;
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	607b      	str	r3, [r7, #4]
   while(length > 0)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1cb      	bne.n	800cd70 <w25q80dvFlashDriverWrite+0x44>
   }

   //Successful process
   return NO_ERROR;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3720      	adds	r7, #32
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <w25q80dvFlashDriverRead>:
 * @param[in] length Number of data bytes to read out
 * @return Error code
 **/

error_t w25q80dvFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b086      	sub	sp, #24
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	60f8      	str	r0, [r7, #12]
 800cdea:	60b9      	str	r1, [r7, #8]
 800cdec:	607a      	str	r2, [r7, #4]
   uint32_t topAddress;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 800cdee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cdf2:	617b      	str	r3, [r7, #20]

   //Check address validity
   if(address < W25Q80DV_ADDR || address >= topAddress)
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d301      	bcc.n	800ce00 <w25q80dvFlashDriverRead+0x1e>
      return ERROR_INVALID_PARAMETER;
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	e010      	b.n	800ce22 <w25q80dvFlashDriverRead+0x40>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d005      	beq.n	800ce12 <w25q80dvFlashDriverRead+0x30>
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4413      	add	r3, r2
 800ce0c:	697a      	ldr	r2, [r7, #20]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d201      	bcs.n	800ce16 <w25q80dvFlashDriverRead+0x34>
      return ERROR_INVALID_PARAMETER;
 800ce12:	2302      	movs	r3, #2
 800ce14:	e005      	b.n	800ce22 <w25q80dvFlashDriverRead+0x40>

   //Perform read operation
   Flash__ReadBuffer(address, data, length);
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	68b9      	ldr	r1, [r7, #8]
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f007 fd8b 	bl	8014936 <Flash__ReadBuffer>

   //Successfull process
   return NO_ERROR;
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3718      	adds	r7, #24
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <w25q80dvFlashDriverErase>:
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 **/

error_t w25q80dvFlashDriverErase(uint32_t address, size_t length)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b084      	sub	sp, #16
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 800ce34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ce38:	60fb      	str	r3, [r7, #12]

   //Check address validity
   if(address < W25Q80DV_ADDR || address >= topAddress)
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d301      	bcc.n	800ce46 <w25q80dvFlashDriverErase+0x1c>
      return ERROR_INVALID_PARAMETER;
 800ce42:	2302      	movs	r3, #2
 800ce44:	e02d      	b.n	800cea2 <w25q80dvFlashDriverErase+0x78>

   //Check parameters validity (is data in flash)
   if(address + length > topAddress)
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d201      	bcs.n	800ce56 <w25q80dvFlashDriverErase+0x2c>
      return ERROR_INVALID_PARAMETER;
 800ce52:	2302      	movs	r3, #2
 800ce54:	e025      	b.n	800cea2 <w25q80dvFlashDriverErase+0x78>

   //Be sure address match a memory flash subsector start address
   if(address % W25Q80DV_SUBSECTORS_SIZE != 0)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d01c      	beq.n	800ce9a <w25q80dvFlashDriverErase+0x70>
   {
      length += address % W25Q80DV_SUBSECTORS_SIZE;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce66:	683a      	ldr	r2, [r7, #0]
 800ce68:	4413      	add	r3, r2
 800ce6a:	603b      	str	r3, [r7, #0]
      address -= address % W25Q80DV_SUBSECTORS_SIZE;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ce72:	f023 030f 	bic.w	r3, r3, #15
 800ce76:	607b      	str	r3, [r7, #4]
   }

   //Perform erase operation
   while(length > 0)
 800ce78:	e00f      	b.n	800ce9a <w25q80dvFlashDriverErase+0x70>
   {
      //Erases the specified block
	  Flash__SectorErase4k(address);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f007 fdf8 	bl	8014a70 <Flash__SectorErase4k>

      //Increment word address
      address += W25Q80DV_SUBSECTORS_SIZE;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce86:	607b      	str	r3, [r7, #4]
      //Remaining bytes to be erased
      length -= MIN(length, W25Q80DV_SUBSECTORS_SIZE);
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce8e:	bf28      	it	cs
 800ce90:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800ce94:	683a      	ldr	r2, [r7, #0]
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	603b      	str	r3, [r7, #0]
   while(length > 0)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1ec      	bne.n	800ce7a <w25q80dvFlashDriverErase+0x50>
   }

   //Successful process
   return NO_ERROR;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <w25q80dvFlashDriverIsSectorAddr>:
 * @brief Determine if a given address match a sector tart address
 * @return boolean
 **/

bool_t w25q80dvFlashDriverIsSectorAddr(uint32_t address)
{
 800ceaa:	b480      	push	{r7}
 800ceac:	b083      	sub	sp, #12
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
   //Is given address match a sector start address?
   if((address % W25Q80DV_SUBSECTORS_SIZE) == 0)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <w25q80dvFlashDriverIsSectorAddr+0x16>
      return TRUE;
 800cebc:	2301      	movs	r3, #1
 800cebe:	e000      	b.n	800cec2 <w25q80dvFlashDriverIsSectorAddr+0x18>
   else
      return FALSE;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	370c      	adds	r7, #12
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bc80      	pop	{r7}
 800ceca:	4770      	bx	lr

0800cecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ced2:	2300      	movs	r3, #0
 800ced4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ced6:	2003      	movs	r0, #3
 800ced8:	f001 f920 	bl	800e11c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cedc:	f002 ff90 	bl	800fe00 <HAL_RCC_GetHCLKFreq>
 800cee0:	4603      	mov	r3, r0
 800cee2:	4a09      	ldr	r2, [pc, #36]	; (800cf08 <HAL_Init+0x3c>)
 800cee4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cee6:	200f      	movs	r0, #15
 800cee8:	f7fd fbd8 	bl	800a69c <HAL_InitTick>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d002      	beq.n	800cef8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	71fb      	strb	r3, [r7, #7]
 800cef6:	e001      	b.n	800cefc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800cef8:	f7fd f9f5 	bl	800a2e6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800cefc:	79fb      	ldrb	r3, [r7, #7]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	20000080 	.word	0x20000080

0800cf0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800cf10:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <HAL_IncTick+0x1c>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	461a      	mov	r2, r3
 800cf16:	4b05      	ldr	r3, [pc, #20]	; (800cf2c <HAL_IncTick+0x20>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	4a03      	ldr	r2, [pc, #12]	; (800cf2c <HAL_IncTick+0x20>)
 800cf1e:	6013      	str	r3, [r2, #0]
}
 800cf20:	bf00      	nop
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bc80      	pop	{r7}
 800cf26:	4770      	bx	lr
 800cf28:	2000008c 	.word	0x2000008c
 800cf2c:	200029a4 	.word	0x200029a4

0800cf30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cf30:	b480      	push	{r7}
 800cf32:	af00      	add	r7, sp, #0
  return uwTick;
 800cf34:	4b02      	ldr	r3, [pc, #8]	; (800cf40 <HAL_GetTick+0x10>)
 800cf36:	681b      	ldr	r3, [r3, #0]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bc80      	pop	{r7}
 800cf3e:	4770      	bx	lr
 800cf40:	200029a4 	.word	0x200029a4

0800cf44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cf4c:	f7ff fff0 	bl	800cf30 <HAL_GetTick>
 800cf50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf5c:	d005      	beq.n	800cf6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cf5e:	4b0a      	ldr	r3, [pc, #40]	; (800cf88 <HAL_Delay+0x44>)
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	4413      	add	r3, r2
 800cf68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800cf6a:	bf00      	nop
 800cf6c:	f7ff ffe0 	bl	800cf30 <HAL_GetTick>
 800cf70:	4602      	mov	r2, r0
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d8f7      	bhi.n	800cf6c <HAL_Delay+0x28>
  {
  }
}
 800cf7c:	bf00      	nop
 800cf7e:	bf00      	nop
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	2000008c 	.word	0x2000008c

0800cf8c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800cf90:	4b02      	ldr	r3, [pc, #8]	; (800cf9c <HAL_GetUIDw0+0x10>)
 800cf92:	681b      	ldr	r3, [r3, #0]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bc80      	pop	{r7}
 800cf9a:	4770      	bx	lr
 800cf9c:	1fff7590 	.word	0x1fff7590

0800cfa0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800cfa4:	4b02      	ldr	r3, [pc, #8]	; (800cfb0 <HAL_GetUIDw1+0x10>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bc80      	pop	{r7}
 800cfae:	4770      	bx	lr
 800cfb0:	1fff7594 	.word	0x1fff7594

0800cfb4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800cfb8:	4b02      	ldr	r3, [pc, #8]	; (800cfc4 <HAL_GetUIDw2+0x10>)
 800cfba:	681b      	ldr	r3, [r3, #0]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bc80      	pop	{r7}
 800cfc2:	4770      	bx	lr
 800cfc4:	1fff7598 	.word	0x1fff7598

0800cfc8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	431a      	orrs	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	601a      	str	r2, [r3, #0]
}
 800cfe2:	bf00      	nop
 800cfe4:	370c      	adds	r7, #12
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bc80      	pop	{r7}
 800cfea:	4770      	bx	lr

0800cfec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	bc80      	pop	{r7}
 800d004:	4770      	bx	lr

0800d006 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800d006:	b480      	push	{r7}
 800d008:	b085      	sub	sp, #20
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	695a      	ldr	r2, [r3, #20]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	f003 0304 	and.w	r3, r3, #4
 800d01c:	2107      	movs	r1, #7
 800d01e:	fa01 f303 	lsl.w	r3, r1, r3
 800d022:	43db      	mvns	r3, r3
 800d024:	401a      	ands	r2, r3
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	f003 0304 	and.w	r3, r3, #4
 800d02c:	6879      	ldr	r1, [r7, #4]
 800d02e:	fa01 f303 	lsl.w	r3, r1, r3
 800d032:	431a      	orrs	r2, r3
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800d038:	bf00      	nop
 800d03a:	3714      	adds	r7, #20
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bc80      	pop	{r7}
 800d040:	4770      	bx	lr

0800d042 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800d042:	b480      	push	{r7}
 800d044:	b083      	sub	sp, #12
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	695a      	ldr	r2, [r3, #20]
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	f003 0304 	and.w	r3, r3, #4
 800d056:	2107      	movs	r1, #7
 800d058:	fa01 f303 	lsl.w	r3, r1, r3
 800d05c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800d064:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d068:	4618      	mov	r0, r3
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bc80      	pop	{r7}
 800d070:	4770      	bx	lr

0800d072 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800d072:	b480      	push	{r7}
 800d074:	b083      	sub	sp, #12
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800d086:	2301      	movs	r3, #1
 800d088:	e000      	b.n	800d08c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	bc80      	pop	{r7}
 800d094:	4770      	bx	lr

0800d096 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800d096:	b480      	push	{r7}
 800d098:	b085      	sub	sp, #20
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	60f8      	str	r0, [r7, #12]
 800d09e:	60b9      	str	r1, [r7, #8]
 800d0a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	f003 031f 	and.w	r3, r3, #31
 800d0ac:	210f      	movs	r1, #15
 800d0ae:	fa01 f303 	lsl.w	r3, r1, r3
 800d0b2:	43db      	mvns	r3, r3
 800d0b4:	401a      	ands	r2, r3
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	0e9b      	lsrs	r3, r3, #26
 800d0ba:	f003 010f 	and.w	r1, r3, #15
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	f003 031f 	and.w	r3, r3, #31
 800d0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800d0c8:	431a      	orrs	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800d0ce:	bf00      	nop
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bc80      	pop	{r7}
 800d0d6:	4770      	bx	lr

0800d0d8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d0ec:	431a      	orrs	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d0f2:	bf00      	nop
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bc80      	pop	{r7}
 800d0fa:	4770      	bx	lr

0800d0fc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d110:	43db      	mvns	r3, r3
 800d112:	401a      	ands	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d118:	bf00      	nop
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bc80      	pop	{r7}
 800d120:	4770      	bx	lr

0800d122 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800d122:	b480      	push	{r7}
 800d124:	b085      	sub	sp, #20
 800d126:	af00      	add	r7, sp, #0
 800d128:	60f8      	str	r0, [r7, #12]
 800d12a:	60b9      	str	r1, [r7, #8]
 800d12c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	695a      	ldr	r2, [r3, #20]
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	021b      	lsls	r3, r3, #8
 800d136:	43db      	mvns	r3, r3
 800d138:	401a      	ands	r2, r3
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	0219      	lsls	r1, r3, #8
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	400b      	ands	r3, r1
 800d142:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800d146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d14a:	431a      	orrs	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800d150:	bf00      	nop
 800d152:	3714      	adds	r7, #20
 800d154:	46bd      	mov	sp, r7
 800d156:	bc80      	pop	{r7}
 800d158:	4770      	bx	lr

0800d15a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800d15a:	b480      	push	{r7}
 800d15c:	b083      	sub	sp, #12
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800d16a:	f023 0317 	bic.w	r3, r3, #23
 800d16e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800d176:	bf00      	nop
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bc80      	pop	{r7}
 800d17e:	4770      	bx	lr

0800d180 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d194:	d101      	bne.n	800d19a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800d196:	2301      	movs	r3, #1
 800d198:	e000      	b.n	800d19c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800d19a:	2300      	movs	r3, #0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bc80      	pop	{r7}
 800d1a4:	4770      	bx	lr

0800d1a6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800d1a6:	b480      	push	{r7}
 800d1a8:	b083      	sub	sp, #12
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1b6:	f023 0317 	bic.w	r3, r3, #23
 800d1ba:	f043 0201 	orr.w	r2, r3, #1
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800d1c2:	bf00      	nop
 800d1c4:	370c      	adds	r7, #12
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bc80      	pop	{r7}
 800d1ca:	4770      	bx	lr

0800d1cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1dc:	f023 0317 	bic.w	r3, r3, #23
 800d1e0:	f043 0202 	orr.w	r2, r3, #2
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800d1e8:	bf00      	nop
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bc80      	pop	{r7}
 800d1f0:	4770      	bx	lr

0800d1f2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800d1f2:	b480      	push	{r7}
 800d1f4:	b083      	sub	sp, #12
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	f003 0301 	and.w	r3, r3, #1
 800d202:	2b01      	cmp	r3, #1
 800d204:	d101      	bne.n	800d20a <LL_ADC_IsEnabled+0x18>
 800d206:	2301      	movs	r3, #1
 800d208:	e000      	b.n	800d20c <LL_ADC_IsEnabled+0x1a>
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	370c      	adds	r7, #12
 800d210:	46bd      	mov	sp, r7
 800d212:	bc80      	pop	{r7}
 800d214:	4770      	bx	lr

0800d216 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800d216:	b480      	push	{r7}
 800d218:	b083      	sub	sp, #12
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	f003 0302 	and.w	r3, r3, #2
 800d226:	2b02      	cmp	r3, #2
 800d228:	d101      	bne.n	800d22e <LL_ADC_IsDisableOngoing+0x18>
 800d22a:	2301      	movs	r3, #1
 800d22c:	e000      	b.n	800d230 <LL_ADC_IsDisableOngoing+0x1a>
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	bc80      	pop	{r7}
 800d238:	4770      	bx	lr

0800d23a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800d23a:	b480      	push	{r7}
 800d23c:	b083      	sub	sp, #12
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d24a:	f023 0317 	bic.w	r3, r3, #23
 800d24e:	f043 0204 	orr.w	r2, r3, #4
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bc80      	pop	{r7}
 800d25e:	4770      	bx	lr

0800d260 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d270:	f023 0317 	bic.w	r3, r3, #23
 800d274:	f043 0210 	orr.w	r2, r3, #16
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800d27c:	bf00      	nop
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	bc80      	pop	{r7}
 800d284:	4770      	bx	lr

0800d286 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800d286:	b480      	push	{r7}
 800d288:	b083      	sub	sp, #12
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	f003 0304 	and.w	r3, r3, #4
 800d296:	2b04      	cmp	r3, #4
 800d298:	d101      	bne.n	800d29e <LL_ADC_REG_IsConversionOngoing+0x18>
 800d29a:	2301      	movs	r3, #1
 800d29c:	e000      	b.n	800d2a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800d29e:	2300      	movs	r3, #0
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bc80      	pop	{r7}
 800d2a8:	4770      	bx	lr
	...

0800d2ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b088      	sub	sp, #32
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d101      	bne.n	800d2ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e17e      	b.n	800d5cc <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d109      	bne.n	800d2f0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7fd f80d 	bl	800a2fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7ff ff43 	bl	800d180 <LL_ADC_IsInternalRegulatorEnabled>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d115      	bne.n	800d32c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4618      	mov	r0, r3
 800d306:	f7ff ff28 	bl	800d15a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d30a:	4b9e      	ldr	r3, [pc, #632]	; (800d584 <HAL_ADC_Init+0x2d8>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	099b      	lsrs	r3, r3, #6
 800d310:	4a9d      	ldr	r2, [pc, #628]	; (800d588 <HAL_ADC_Init+0x2dc>)
 800d312:	fba2 2303 	umull	r2, r3, r2, r3
 800d316:	099b      	lsrs	r3, r3, #6
 800d318:	3301      	adds	r3, #1
 800d31a:	005b      	lsls	r3, r3, #1
 800d31c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800d31e:	e002      	b.n	800d326 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	3b01      	subs	r3, #1
 800d324:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1f9      	bne.n	800d320 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4618      	mov	r0, r3
 800d332:	f7ff ff25 	bl	800d180 <LL_ADC_IsInternalRegulatorEnabled>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d10d      	bne.n	800d358 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d340:	f043 0210 	orr.w	r2, r3, #16
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d34c:	f043 0201 	orr.w	r2, r3, #1
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800d354:	2301      	movs	r3, #1
 800d356:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff ff92 	bl	800d286 <LL_ADC_REG_IsConversionOngoing>
 800d362:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d368:	f003 0310 	and.w	r3, r3, #16
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	f040 8124 	bne.w	800d5ba <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	2b00      	cmp	r3, #0
 800d376:	f040 8120 	bne.w	800d5ba <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d37e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800d382:	f043 0202 	orr.w	r2, r3, #2
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4618      	mov	r0, r3
 800d390:	f7ff ff2f 	bl	800d1f2 <LL_ADC_IsEnabled>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	f040 80a7 	bne.w	800d4ea <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	7e1b      	ldrb	r3, [r3, #24]
 800d3a4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800d3a6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	7e5b      	ldrb	r3, [r3, #25]
 800d3ac:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800d3ae:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	7e9b      	ldrb	r3, [r3, #26]
 800d3b4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800d3b6:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d3bc:	2a00      	cmp	r2, #0
 800d3be:	d002      	beq.n	800d3c6 <HAL_ADC_Init+0x11a>
 800d3c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d3c4:	e000      	b.n	800d3c8 <HAL_ADC_Init+0x11c>
 800d3c6:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800d3c8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800d3ce:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	691b      	ldr	r3, [r3, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	da04      	bge.n	800d3e2 <HAL_ADC_Init+0x136>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3e0:	e001      	b.n	800d3e6 <HAL_ADC_Init+0x13a>
 800d3e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800d3e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d3ee:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800d3f0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800d3f2:	69ba      	ldr	r2, [r7, #24]
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d114      	bne.n	800d42c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	7e9b      	ldrb	r3, [r3, #26]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d104      	bne.n	800d414 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d410:	61bb      	str	r3, [r7, #24]
 800d412:	e00b      	b.n	800d42c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d418:	f043 0220 	orr.w	r2, r3, #32
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d424:	f043 0201 	orr.w	r2, r3, #1
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d430:	2b00      	cmp	r3, #0
 800d432:	d009      	beq.n	800d448 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d438:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800d440:	4313      	orrs	r3, r2
 800d442:	69ba      	ldr	r2, [r7, #24]
 800d444:	4313      	orrs	r3, r2
 800d446:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800d452:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	6812      	ldr	r2, [r2, #0]
 800d45a:	69b9      	ldr	r1, [r7, #24]
 800d45c:	430b      	orrs	r3, r1
 800d45e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d46c:	4313      	orrs	r3, r2
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	4313      	orrs	r3, r2
 800d472:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d111      	bne.n	800d4a2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d48a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800d490:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800d496:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	4313      	orrs	r3, r2
 800d49c:	f043 0301 	orr.w	r3, r3, #1
 800d4a0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	691a      	ldr	r2, [r3, #16]
 800d4a8:	4b38      	ldr	r3, [pc, #224]	; (800d58c <HAL_ADC_Init+0x2e0>)
 800d4aa:	4013      	ands	r3, r2
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	6812      	ldr	r2, [r2, #0]
 800d4b0:	6979      	ldr	r1, [r7, #20]
 800d4b2:	430b      	orrs	r3, r1
 800d4b4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800d4be:	d014      	beq.n	800d4ea <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800d4c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4c8:	d00f      	beq.n	800d4ea <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800d4ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4d2:	d00a      	beq.n	800d4ea <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800d4d4:	4b2e      	ldr	r3, [pc, #184]	; (800d590 <HAL_ADC_Init+0x2e4>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800d4e4:	492a      	ldr	r1, [pc, #168]	; (800d590 <HAL_ADC_Init+0x2e4>)
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6818      	ldr	r0, [r3, #0]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	2100      	movs	r1, #0
 800d4f6:	f7ff fd86 	bl	800d006 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6818      	ldr	r0, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d502:	461a      	mov	r2, r3
 800d504:	4923      	ldr	r1, [pc, #140]	; (800d594 <HAL_ADC_Init+0x2e8>)
 800d506:	f7ff fd7e 	bl	800d006 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d108      	bne.n	800d524 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f062 020f 	orn	r2, r2, #15
 800d520:	629a      	str	r2, [r3, #40]	; 0x28
 800d522:	e017      	b.n	800d554 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	691b      	ldr	r3, [r3, #16]
 800d528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d52c:	d112      	bne.n	800d554 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	69db      	ldr	r3, [r3, #28]
 800d538:	3b01      	subs	r3, #1
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	f003 031c 	and.w	r3, r3, #28
 800d540:	f06f 020f 	mvn.w	r2, #15
 800d544:	fa02 f103 	lsl.w	r1, r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	430a      	orrs	r2, r1
 800d552:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2100      	movs	r1, #0
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff fd71 	bl	800d042 <LL_ADC_GetSamplingTimeCommonChannels>
 800d560:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d566:	429a      	cmp	r2, r3
 800d568:	d116      	bne.n	800d598 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d574:	f023 0303 	bic.w	r3, r3, #3
 800d578:	f043 0201 	orr.w	r2, r3, #1
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d580:	e023      	b.n	800d5ca <HAL_ADC_Init+0x31e>
 800d582:	bf00      	nop
 800d584:	20000080 	.word	0x20000080
 800d588:	053e2d63 	.word	0x053e2d63
 800d58c:	1ffffc02 	.word	0x1ffffc02
 800d590:	40012708 	.word	0x40012708
 800d594:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d59c:	f023 0312 	bic.w	r3, r3, #18
 800d5a0:	f043 0210 	orr.w	r2, r3, #16
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5ac:	f043 0201 	orr.w	r2, r3, #1
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d5b8:	e007      	b.n	800d5ca <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5be:	f043 0210 	orr.w	r2, r3, #16
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800d5ca:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3720      	adds	r7, #32
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff fe50 	bl	800d286 <LL_ADC_REG_IsConversionOngoing>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d132      	bne.n	800d652 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d101      	bne.n	800d5fa <HAL_ADC_Start+0x26>
 800d5f6:	2302      	movs	r3, #2
 800d5f8:	e02e      	b.n	800d658 <HAL_ADC_Start+0x84>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fa8a 	bl	800db1c <ADC_Enable>
 800d608:	4603      	mov	r3, r0
 800d60a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d11a      	bne.n	800d648 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d616:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d61a:	f023 0301 	bic.w	r3, r3, #1
 800d61e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	221c      	movs	r2, #28
 800d632:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff fdfa 	bl	800d23a <LL_ADC_REG_StartConversion>
 800d646:	e006      	b.n	800d656 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800d650:	e001      	b.n	800d656 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800d652:	2302      	movs	r3, #2
 800d654:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800d656:	7bfb      	ldrb	r3, [r7, #15]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d101      	bne.n	800d676 <HAL_ADC_Stop+0x16>
 800d672:	2302      	movs	r3, #2
 800d674:	e022      	b.n	800d6bc <HAL_ADC_Stop+0x5c>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fa07 	bl	800da92 <ADC_ConversionStop>
 800d684:	4603      	mov	r3, r0
 800d686:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800d688:	7bfb      	ldrb	r3, [r7, #15]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d111      	bne.n	800d6b2 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 faca 	bl	800dc28 <ADC_Disable>
 800d694:	4603      	mov	r3, r0
 800d696:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800d698:	7bfb      	ldrb	r3, [r7, #15]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d109      	bne.n	800d6b2 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6a6:	f023 0301 	bic.w	r3, r3, #1
 800d6aa:	f043 0201 	orr.w	r2, r3, #1
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800d6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	695b      	ldr	r3, [r3, #20]
 800d6d2:	2b08      	cmp	r3, #8
 800d6d4:	d102      	bne.n	800d6dc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800d6d6:	2308      	movs	r3, #8
 800d6d8:	60fb      	str	r3, [r7, #12]
 800d6da:	e010      	b.n	800d6fe <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	f003 0301 	and.w	r3, r3, #1
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d007      	beq.n	800d6fa <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6ee:	f043 0220 	orr.w	r2, r3, #32
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e077      	b.n	800d7ea <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800d6fa:	2304      	movs	r3, #4
 800d6fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800d6fe:	f7ff fc17 	bl	800cf30 <HAL_GetTick>
 800d702:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800d704:	e021      	b.n	800d74a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70c:	d01d      	beq.n	800d74a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800d70e:	f7ff fc0f 	bl	800cf30 <HAL_GetTick>
 800d712:	4602      	mov	r2, r0
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	1ad3      	subs	r3, r2, r3
 800d718:	683a      	ldr	r2, [r7, #0]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d302      	bcc.n	800d724 <HAL_ADC_PollForConversion+0x60>
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d112      	bne.n	800d74a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	4013      	ands	r3, r2
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10b      	bne.n	800d74a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d736:	f043 0204 	orr.w	r2, r3, #4
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800d746:	2303      	movs	r3, #3
 800d748:	e04f      	b.n	800d7ea <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	4013      	ands	r3, r2
 800d754:	2b00      	cmp	r3, #0
 800d756:	d0d6      	beq.n	800d706 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d75c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4618      	mov	r0, r3
 800d76a:	f7ff fc82 	bl	800d072 <LL_ADC_REG_IsTriggerSourceSWStart>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d031      	beq.n	800d7d8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	7e9b      	ldrb	r3, [r3, #26]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d12d      	bne.n	800d7d8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f003 0308 	and.w	r3, r3, #8
 800d786:	2b08      	cmp	r3, #8
 800d788:	d126      	bne.n	800d7d8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4618      	mov	r0, r3
 800d790:	f7ff fd79 	bl	800d286 <LL_ADC_REG_IsConversionOngoing>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d112      	bne.n	800d7c0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	685a      	ldr	r2, [r3, #4]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f022 020c 	bic.w	r2, r2, #12
 800d7a8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7b2:	f023 0301 	bic.w	r3, r3, #1
 800d7b6:	f043 0201 	orr.w	r2, r3, #1
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	659a      	str	r2, [r3, #88]	; 0x58
 800d7be:	e00b      	b.n	800d7d8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7c4:	f043 0220 	orr.w	r2, r3, #32
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7d0:	f043 0201 	orr.w	r2, r3, #1
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7e1b      	ldrb	r3, [r3, #24]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d103      	bne.n	800d7e8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	220c      	movs	r2, #12
 800d7e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800d7f2:	b480      	push	{r7}
 800d7f4:	b083      	sub	sp, #12
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	bc80      	pop	{r7}
 800d808:	4770      	bx	lr
	...

0800d80c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b088      	sub	sp, #32
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d816:	2300      	movs	r3, #0
 800d818:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800d81a:	2300      	movs	r3, #0
 800d81c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	691b      	ldr	r3, [r3, #16]
 800d822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d101      	bne.n	800d834 <HAL_ADC_ConfigChannel+0x28>
 800d830:	2302      	movs	r3, #2
 800d832:	e110      	b.n	800da56 <HAL_ADC_ConfigChannel+0x24a>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4618      	mov	r0, r3
 800d842:	f7ff fd20 	bl	800d286 <LL_ADC_REG_IsConversionOngoing>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f040 80f7 	bne.w	800da3c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	2b02      	cmp	r3, #2
 800d854:	f000 80b1 	beq.w	800d9ba <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d860:	d004      	beq.n	800d86c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d866:	4a7e      	ldr	r2, [pc, #504]	; (800da60 <HAL_ADC_ConfigChannel+0x254>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d108      	bne.n	800d87e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4619      	mov	r1, r3
 800d876:	4610      	mov	r0, r2
 800d878:	f7ff fc2e 	bl	800d0d8 <LL_ADC_REG_SetSequencerChAdd>
 800d87c:	e041      	b.n	800d902 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	f003 031f 	and.w	r3, r3, #31
 800d88a:	210f      	movs	r1, #15
 800d88c:	fa01 f303 	lsl.w	r3, r1, r3
 800d890:	43db      	mvns	r3, r3
 800d892:	401a      	ands	r2, r3
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d105      	bne.n	800d8ac <HAL_ADC_ConfigChannel+0xa0>
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	0e9b      	lsrs	r3, r3, #26
 800d8a6:	f003 031f 	and.w	r3, r3, #31
 800d8aa:	e011      	b.n	800d8d0 <HAL_ADC_ConfigChannel+0xc4>
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	fa93 f3a3 	rbit	r3, r3
 800d8b8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d101      	bne.n	800d8c8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800d8c4:	2320      	movs	r3, #32
 800d8c6:	e003      	b.n	800d8d0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	fab3 f383 	clz	r3, r3
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	6839      	ldr	r1, [r7, #0]
 800d8d2:	6849      	ldr	r1, [r1, #4]
 800d8d4:	f001 011f 	and.w	r1, r1, #31
 800d8d8:	408b      	lsls	r3, r1
 800d8da:	431a      	orrs	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	089b      	lsrs	r3, r3, #2
 800d8e6:	1c5a      	adds	r2, r3, #1
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	69db      	ldr	r3, [r3, #28]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d808      	bhi.n	800d902 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6818      	ldr	r0, [r3, #0]
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	6859      	ldr	r1, [r3, #4]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	f7ff fbca 	bl	800d096 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6818      	ldr	r0, [r3, #0]
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	6819      	ldr	r1, [r3, #0]
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	461a      	mov	r2, r3
 800d910:	f7ff fc07 	bl	800d122 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f280 8097 	bge.w	800da4c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d91e:	4851      	ldr	r0, [pc, #324]	; (800da64 <HAL_ADC_ConfigChannel+0x258>)
 800d920:	f7ff fb64 	bl	800cfec <LL_ADC_GetCommonPathInternalCh>
 800d924:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a4f      	ldr	r2, [pc, #316]	; (800da68 <HAL_ADC_ConfigChannel+0x25c>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d120      	bne.n	800d972 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d936:	2b00      	cmp	r3, #0
 800d938:	d11b      	bne.n	800d972 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d940:	4619      	mov	r1, r3
 800d942:	4848      	ldr	r0, [pc, #288]	; (800da64 <HAL_ADC_ConfigChannel+0x258>)
 800d944:	f7ff fb40 	bl	800cfc8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d948:	4b48      	ldr	r3, [pc, #288]	; (800da6c <HAL_ADC_ConfigChannel+0x260>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	099b      	lsrs	r3, r3, #6
 800d94e:	4a48      	ldr	r2, [pc, #288]	; (800da70 <HAL_ADC_ConfigChannel+0x264>)
 800d950:	fba2 2303 	umull	r2, r3, r2, r3
 800d954:	099b      	lsrs	r3, r3, #6
 800d956:	1c5a      	adds	r2, r3, #1
 800d958:	4613      	mov	r3, r2
 800d95a:	005b      	lsls	r3, r3, #1
 800d95c:	4413      	add	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800d962:	e002      	b.n	800d96a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	3b01      	subs	r3, #1
 800d968:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1f9      	bne.n	800d964 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d970:	e06c      	b.n	800da4c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a3f      	ldr	r2, [pc, #252]	; (800da74 <HAL_ADC_ConfigChannel+0x268>)
 800d978:	4293      	cmp	r3, r2
 800d97a:	d10c      	bne.n	800d996 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d982:	2b00      	cmp	r3, #0
 800d984:	d107      	bne.n	800d996 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d98c:	4619      	mov	r1, r3
 800d98e:	4835      	ldr	r0, [pc, #212]	; (800da64 <HAL_ADC_ConfigChannel+0x258>)
 800d990:	f7ff fb1a 	bl	800cfc8 <LL_ADC_SetCommonPathInternalCh>
 800d994:	e05a      	b.n	800da4c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a37      	ldr	r2, [pc, #220]	; (800da78 <HAL_ADC_ConfigChannel+0x26c>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d155      	bne.n	800da4c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d150      	bne.n	800da4c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	482c      	ldr	r0, [pc, #176]	; (800da64 <HAL_ADC_ConfigChannel+0x258>)
 800d9b4:	f7ff fb08 	bl	800cfc8 <LL_ADC_SetCommonPathInternalCh>
 800d9b8:	e048      	b.n	800da4c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9c2:	d004      	beq.n	800d9ce <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d9c8:	4a25      	ldr	r2, [pc, #148]	; (800da60 <HAL_ADC_ConfigChannel+0x254>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d107      	bne.n	800d9de <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	4610      	mov	r0, r2
 800d9da:	f7ff fb8f 	bl	800d0fc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	da32      	bge.n	800da4c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d9e6:	481f      	ldr	r0, [pc, #124]	; (800da64 <HAL_ADC_ConfigChannel+0x258>)
 800d9e8:	f7ff fb00 	bl	800cfec <LL_ADC_GetCommonPathInternalCh>
 800d9ec:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a1d      	ldr	r2, [pc, #116]	; (800da68 <HAL_ADC_ConfigChannel+0x25c>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d107      	bne.n	800da08 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d9fe:	4619      	mov	r1, r3
 800da00:	4818      	ldr	r0, [pc, #96]	; (800da64 <HAL_ADC_ConfigChannel+0x258>)
 800da02:	f7ff fae1 	bl	800cfc8 <LL_ADC_SetCommonPathInternalCh>
 800da06:	e021      	b.n	800da4c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a19      	ldr	r2, [pc, #100]	; (800da74 <HAL_ADC_ConfigChannel+0x268>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d107      	bne.n	800da22 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da18:	4619      	mov	r1, r3
 800da1a:	4812      	ldr	r0, [pc, #72]	; (800da64 <HAL_ADC_ConfigChannel+0x258>)
 800da1c:	f7ff fad4 	bl	800cfc8 <LL_ADC_SetCommonPathInternalCh>
 800da20:	e014      	b.n	800da4c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4a14      	ldr	r2, [pc, #80]	; (800da78 <HAL_ADC_ConfigChannel+0x26c>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d10f      	bne.n	800da4c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800da32:	4619      	mov	r1, r3
 800da34:	480b      	ldr	r0, [pc, #44]	; (800da64 <HAL_ADC_ConfigChannel+0x258>)
 800da36:	f7ff fac7 	bl	800cfc8 <LL_ADC_SetCommonPathInternalCh>
 800da3a:	e007      	b.n	800da4c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da40:	f043 0220 	orr.w	r2, r3, #32
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800da48:	2301      	movs	r3, #1
 800da4a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800da54:	7ffb      	ldrb	r3, [r7, #31]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3720      	adds	r7, #32
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	80000004 	.word	0x80000004
 800da64:	40012708 	.word	0x40012708
 800da68:	b0001000 	.word	0xb0001000
 800da6c:	20000080 	.word	0x20000080
 800da70:	053e2d63 	.word	0x053e2d63
 800da74:	b8004000 	.word	0xb8004000
 800da78:	b4002000 	.word	0xb4002000

0800da7c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800da88:	4618      	mov	r0, r3
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bc80      	pop	{r7}
 800da90:	4770      	bx	lr

0800da92 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b084      	sub	sp, #16
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7ff fbf1 	bl	800d286 <LL_ADC_REG_IsConversionOngoing>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d033      	beq.n	800db12 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4618      	mov	r0, r3
 800dab0:	f7ff fbb1 	bl	800d216 <LL_ADC_IsDisableOngoing>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d104      	bne.n	800dac4 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7ff fbce 	bl	800d260 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800dac4:	f7ff fa34 	bl	800cf30 <HAL_GetTick>
 800dac8:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800daca:	e01b      	b.n	800db04 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800dacc:	f7ff fa30 	bl	800cf30 <HAL_GetTick>
 800dad0:	4602      	mov	r2, r0
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	1ad3      	subs	r3, r2, r3
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	d914      	bls.n	800db04 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	f003 0304 	and.w	r3, r3, #4
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00d      	beq.n	800db04 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daec:	f043 0210 	orr.w	r2, r3, #16
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daf8:	f043 0201 	orr.w	r2, r3, #1
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	e007      	b.n	800db14 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	f003 0304 	and.w	r3, r3, #4
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1dc      	bne.n	800dacc <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800db12:	2300      	movs	r3, #0
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800db24:	2300      	movs	r3, #0
 800db26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7ff fb60 	bl	800d1f2 <LL_ADC_IsEnabled>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d169      	bne.n	800dc0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	689a      	ldr	r2, [r3, #8]
 800db3e:	4b36      	ldr	r3, [pc, #216]	; (800dc18 <ADC_Enable+0xfc>)
 800db40:	4013      	ands	r3, r2
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00d      	beq.n	800db62 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db4a:	f043 0210 	orr.w	r2, r3, #16
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db56:	f043 0201 	orr.w	r2, r3, #1
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800db5e:	2301      	movs	r3, #1
 800db60:	e055      	b.n	800dc0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff fb1d 	bl	800d1a6 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800db6c:	482b      	ldr	r0, [pc, #172]	; (800dc1c <ADC_Enable+0x100>)
 800db6e:	f7ff fa3d 	bl	800cfec <LL_ADC_GetCommonPathInternalCh>
 800db72:	4603      	mov	r3, r0
 800db74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00f      	beq.n	800db9c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800db7c:	4b28      	ldr	r3, [pc, #160]	; (800dc20 <ADC_Enable+0x104>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	099b      	lsrs	r3, r3, #6
 800db82:	4a28      	ldr	r2, [pc, #160]	; (800dc24 <ADC_Enable+0x108>)
 800db84:	fba2 2303 	umull	r2, r3, r2, r3
 800db88:	099b      	lsrs	r3, r3, #6
 800db8a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800db8c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800db8e:	e002      	b.n	800db96 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	3b01      	subs	r3, #1
 800db94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1f9      	bne.n	800db90 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	7e5b      	ldrb	r3, [r3, #25]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d033      	beq.n	800dc0c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800dba4:	f7ff f9c4 	bl	800cf30 <HAL_GetTick>
 800dba8:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dbaa:	e028      	b.n	800dbfe <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7ff fb1e 	bl	800d1f2 <LL_ADC_IsEnabled>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d104      	bne.n	800dbc6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7ff faf0 	bl	800d1a6 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800dbc6:	f7ff f9b3 	bl	800cf30 <HAL_GetTick>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	1ad3      	subs	r3, r2, r3
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	d914      	bls.n	800dbfe <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f003 0301 	and.w	r3, r3, #1
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d00d      	beq.n	800dbfe <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbe6:	f043 0210 	orr.w	r2, r3, #16
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbf2:	f043 0201 	orr.w	r2, r3, #1
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e007      	b.n	800dc0e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 0301 	and.w	r3, r3, #1
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d1cf      	bne.n	800dbac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	80000017 	.word	0x80000017
 800dc1c:	40012708 	.word	0x40012708
 800dc20:	20000080 	.word	0x20000080
 800dc24:	053e2d63 	.word	0x053e2d63

0800dc28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7ff faee 	bl	800d216 <LL_ADC_IsDisableOngoing>
 800dc3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff fad6 	bl	800d1f2 <LL_ADC_IsEnabled>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d047      	beq.n	800dcdc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d144      	bne.n	800dcdc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	f003 0305 	and.w	r3, r3, #5
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d10c      	bne.n	800dc7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4618      	mov	r0, r3
 800dc66:	f7ff fab1 	bl	800d1cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2203      	movs	r2, #3
 800dc70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800dc72:	f7ff f95d 	bl	800cf30 <HAL_GetTick>
 800dc76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dc78:	e029      	b.n	800dcce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc7e:	f043 0210 	orr.w	r2, r3, #16
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc8a:	f043 0201 	orr.w	r2, r3, #1
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e023      	b.n	800dcde <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800dc96:	f7ff f94b 	bl	800cf30 <HAL_GetTick>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	2b02      	cmp	r3, #2
 800dca2:	d914      	bls.n	800dcce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	f003 0301 	and.w	r3, r3, #1
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d00d      	beq.n	800dcce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcb6:	f043 0210 	orr.w	r2, r3, #16
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcc2:	f043 0201 	orr.w	r2, r3, #1
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800dcca:	2301      	movs	r3, #1
 800dccc:	e007      	b.n	800dcde <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	f003 0301 	and.w	r3, r3, #1
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1dc      	bne.n	800dc96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <LL_ADC_SetCalibrationFactor>:
{
 800dce6:	b480      	push	{r7}
 800dce8:	b083      	sub	sp, #12
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dcf6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	431a      	orrs	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 800dd04:	bf00      	nop
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bc80      	pop	{r7}
 800dd0c:	4770      	bx	lr

0800dd0e <LL_ADC_GetCalibrationFactor>:
{
 800dd0e:	b480      	push	{r7}
 800dd10:	b083      	sub	sp, #12
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dd1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bc80      	pop	{r7}
 800dd28:	4770      	bx	lr

0800dd2a <LL_ADC_Enable>:
{
 800dd2a:	b480      	push	{r7}
 800dd2c:	b083      	sub	sp, #12
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd3a:	f023 0317 	bic.w	r3, r3, #23
 800dd3e:	f043 0201 	orr.w	r2, r3, #1
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	609a      	str	r2, [r3, #8]
}
 800dd46:	bf00      	nop
 800dd48:	370c      	adds	r7, #12
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bc80      	pop	{r7}
 800dd4e:	4770      	bx	lr

0800dd50 <LL_ADC_Disable>:
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd60:	f023 0317 	bic.w	r3, r3, #23
 800dd64:	f043 0202 	orr.w	r2, r3, #2
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	609a      	str	r2, [r3, #8]
}
 800dd6c:	bf00      	nop
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bc80      	pop	{r7}
 800dd74:	4770      	bx	lr

0800dd76 <LL_ADC_IsEnabled>:
{
 800dd76:	b480      	push	{r7}
 800dd78:	b083      	sub	sp, #12
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	f003 0301 	and.w	r3, r3, #1
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d101      	bne.n	800dd8e <LL_ADC_IsEnabled+0x18>
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	e000      	b.n	800dd90 <LL_ADC_IsEnabled+0x1a>
 800dd8e:	2300      	movs	r3, #0
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bc80      	pop	{r7}
 800dd98:	4770      	bx	lr

0800dd9a <LL_ADC_StartCalibration>:
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	b083      	sub	sp, #12
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddaa:	f023 0317 	bic.w	r3, r3, #23
 800ddae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	609a      	str	r2, [r3, #8]
}
 800ddb6:	bf00      	nop
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bc80      	pop	{r7}
 800ddbe:	4770      	bx	lr

0800ddc0 <LL_ADC_IsCalibrationOnGoing>:
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	689b      	ldr	r3, [r3, #8]
 800ddcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddd4:	d101      	bne.n	800ddda <LL_ADC_IsCalibrationOnGoing+0x1a>
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e000      	b.n	800dddc <LL_ADC_IsCalibrationOnGoing+0x1c>
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bc80      	pop	{r7}
 800dde4:	4770      	bx	lr

0800dde6 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b088      	sub	sp, #32
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d101      	bne.n	800de04 <HAL_ADCEx_Calibration_Start+0x1e>
 800de00:	2302      	movs	r3, #2
 800de02:	e0b9      	b.n	800df78 <HAL_ADCEx_Calibration_Start+0x192>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f7ff ff0b 	bl	800dc28 <ADC_Disable>
 800de12:	4603      	mov	r3, r0
 800de14:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7ff ffab 	bl	800dd76 <LL_ADC_IsEnabled>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	f040 809d 	bne.w	800df62 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800de30:	f043 0202 	orr.w	r2, r3, #2
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68da      	ldr	r2, [r3, #12]
 800de3e:	f248 0303 	movw	r3, #32771	; 0x8003
 800de42:	4013      	ands	r3, r2
 800de44:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	6812      	ldr	r2, [r2, #0]
 800de50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de54:	f023 0303 	bic.w	r3, r3, #3
 800de58:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800de5a:	2300      	movs	r3, #0
 800de5c:	61fb      	str	r3, [r7, #28]
 800de5e:	e02e      	b.n	800debe <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4618      	mov	r0, r3
 800de66:	f7ff ff98 	bl	800dd9a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800de6a:	e014      	b.n	800de96 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	3301      	adds	r3, #1
 800de70:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800de78:	d30d      	bcc.n	800de96 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de7e:	f023 0312 	bic.w	r3, r3, #18
 800de82:	f043 0210 	orr.w	r2, r3, #16
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e070      	b.n	800df78 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7ff ff90 	bl	800ddc0 <LL_ADC_IsCalibrationOnGoing>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1e2      	bne.n	800de6c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	4618      	mov	r0, r3
 800deac:	f7ff ff2f 	bl	800dd0e <LL_ADC_GetCalibrationFactor>
 800deb0:	4602      	mov	r2, r0
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	4413      	add	r3, r2
 800deb6:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	3301      	adds	r3, #1
 800debc:	61fb      	str	r3, [r7, #28]
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	2b07      	cmp	r3, #7
 800dec2:	d9cd      	bls.n	800de60 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800dec4:	69ba      	ldr	r2, [r7, #24]
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	fbb2 f3f3 	udiv	r3, r2, r3
 800decc:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7ff ff29 	bl	800dd2a <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	69b9      	ldr	r1, [r7, #24]
 800dede:	4618      	mov	r0, r3
 800dee0:	f7ff ff01 	bl	800dce6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4618      	mov	r0, r3
 800deea:	f7ff ff31 	bl	800dd50 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800deee:	f7ff f81f 	bl	800cf30 <HAL_GetTick>
 800def2:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800def4:	e01c      	b.n	800df30 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800def6:	f7ff f81b 	bl	800cf30 <HAL_GetTick>
 800defa:	4602      	mov	r2, r0
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	1ad3      	subs	r3, r2, r3
 800df00:	2b02      	cmp	r3, #2
 800df02:	d915      	bls.n	800df30 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4618      	mov	r0, r3
 800df0a:	f7ff ff34 	bl	800dd76 <LL_ADC_IsEnabled>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00d      	beq.n	800df30 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df18:	f043 0210 	orr.w	r2, r3, #16
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df24:	f043 0201 	orr.w	r2, r3, #1
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800df2c:	2301      	movs	r3, #1
 800df2e:	e023      	b.n	800df78 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4618      	mov	r0, r3
 800df36:	f7ff ff1e 	bl	800dd76 <LL_ADC_IsEnabled>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1da      	bne.n	800def6 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68d9      	ldr	r1, [r3, #12]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	693a      	ldr	r2, [r7, #16]
 800df4c:	430a      	orrs	r2, r1
 800df4e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df54:	f023 0303 	bic.w	r3, r3, #3
 800df58:	f043 0201 	orr.w	r2, r3, #1
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	659a      	str	r2, [r3, #88]	; 0x58
 800df60:	e005      	b.n	800df6e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df66:	f043 0210 	orr.w	r2, r3, #16
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800df76:	7dfb      	ldrb	r3, [r7, #23]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3720      	adds	r7, #32
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <__NVIC_SetPriorityGrouping>:
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f003 0307 	and.w	r3, r3, #7
 800df8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800df90:	4b0c      	ldr	r3, [pc, #48]	; (800dfc4 <__NVIC_SetPriorityGrouping+0x44>)
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800df9c:	4013      	ands	r3, r2
 800df9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800dfa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dfac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dfb2:	4a04      	ldr	r2, [pc, #16]	; (800dfc4 <__NVIC_SetPriorityGrouping+0x44>)
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	60d3      	str	r3, [r2, #12]
}
 800dfb8:	bf00      	nop
 800dfba:	3714      	adds	r7, #20
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bc80      	pop	{r7}
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	e000ed00 	.word	0xe000ed00

0800dfc8 <__NVIC_GetPriorityGrouping>:
{
 800dfc8:	b480      	push	{r7}
 800dfca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dfcc:	4b04      	ldr	r3, [pc, #16]	; (800dfe0 <__NVIC_GetPriorityGrouping+0x18>)
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	0a1b      	lsrs	r3, r3, #8
 800dfd2:	f003 0307 	and.w	r3, r3, #7
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bc80      	pop	{r7}
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	e000ed00 	.word	0xe000ed00

0800dfe4 <__NVIC_EnableIRQ>:
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dfee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	db0b      	blt.n	800e00e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dff6:	79fb      	ldrb	r3, [r7, #7]
 800dff8:	f003 021f 	and.w	r2, r3, #31
 800dffc:	4906      	ldr	r1, [pc, #24]	; (800e018 <__NVIC_EnableIRQ+0x34>)
 800dffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e002:	095b      	lsrs	r3, r3, #5
 800e004:	2001      	movs	r0, #1
 800e006:	fa00 f202 	lsl.w	r2, r0, r2
 800e00a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e00e:	bf00      	nop
 800e010:	370c      	adds	r7, #12
 800e012:	46bd      	mov	sp, r7
 800e014:	bc80      	pop	{r7}
 800e016:	4770      	bx	lr
 800e018:	e000e100 	.word	0xe000e100

0800e01c <__NVIC_DisableIRQ>:
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	db12      	blt.n	800e054 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e02e:	79fb      	ldrb	r3, [r7, #7]
 800e030:	f003 021f 	and.w	r2, r3, #31
 800e034:	490a      	ldr	r1, [pc, #40]	; (800e060 <__NVIC_DisableIRQ+0x44>)
 800e036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e03a:	095b      	lsrs	r3, r3, #5
 800e03c:	2001      	movs	r0, #1
 800e03e:	fa00 f202 	lsl.w	r2, r0, r2
 800e042:	3320      	adds	r3, #32
 800e044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800e048:	f3bf 8f4f 	dsb	sy
}
 800e04c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e04e:	f3bf 8f6f 	isb	sy
}
 800e052:	bf00      	nop
}
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	bc80      	pop	{r7}
 800e05c:	4770      	bx	lr
 800e05e:	bf00      	nop
 800e060:	e000e100 	.word	0xe000e100

0800e064 <__NVIC_SetPriority>:
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	4603      	mov	r3, r0
 800e06c:	6039      	str	r1, [r7, #0]
 800e06e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e074:	2b00      	cmp	r3, #0
 800e076:	db0a      	blt.n	800e08e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	490c      	ldr	r1, [pc, #48]	; (800e0b0 <__NVIC_SetPriority+0x4c>)
 800e07e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e082:	0112      	lsls	r2, r2, #4
 800e084:	b2d2      	uxtb	r2, r2
 800e086:	440b      	add	r3, r1
 800e088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e08c:	e00a      	b.n	800e0a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	b2da      	uxtb	r2, r3
 800e092:	4908      	ldr	r1, [pc, #32]	; (800e0b4 <__NVIC_SetPriority+0x50>)
 800e094:	79fb      	ldrb	r3, [r7, #7]
 800e096:	f003 030f 	and.w	r3, r3, #15
 800e09a:	3b04      	subs	r3, #4
 800e09c:	0112      	lsls	r2, r2, #4
 800e09e:	b2d2      	uxtb	r2, r2
 800e0a0:	440b      	add	r3, r1
 800e0a2:	761a      	strb	r2, [r3, #24]
}
 800e0a4:	bf00      	nop
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bc80      	pop	{r7}
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	e000e100 	.word	0xe000e100
 800e0b4:	e000ed00 	.word	0xe000ed00

0800e0b8 <NVIC_EncodePriority>:
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b089      	sub	sp, #36	; 0x24
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f003 0307 	and.w	r3, r3, #7
 800e0ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	f1c3 0307 	rsb	r3, r3, #7
 800e0d2:	2b04      	cmp	r3, #4
 800e0d4:	bf28      	it	cs
 800e0d6:	2304      	movcs	r3, #4
 800e0d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	3304      	adds	r3, #4
 800e0de:	2b06      	cmp	r3, #6
 800e0e0:	d902      	bls.n	800e0e8 <NVIC_EncodePriority+0x30>
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	3b03      	subs	r3, #3
 800e0e6:	e000      	b.n	800e0ea <NVIC_EncodePriority+0x32>
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e0f6:	43da      	mvns	r2, r3
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	401a      	ands	r2, r3
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e100:	f04f 31ff 	mov.w	r1, #4294967295
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	fa01 f303 	lsl.w	r3, r1, r3
 800e10a:	43d9      	mvns	r1, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e110:	4313      	orrs	r3, r2
}
 800e112:	4618      	mov	r0, r3
 800e114:	3724      	adds	r7, #36	; 0x24
 800e116:	46bd      	mov	sp, r7
 800e118:	bc80      	pop	{r7}
 800e11a:	4770      	bx	lr

0800e11c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f7ff ff2b 	bl	800df80 <__NVIC_SetPriorityGrouping>
}
 800e12a:	bf00      	nop
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b086      	sub	sp, #24
 800e136:	af00      	add	r7, sp, #0
 800e138:	4603      	mov	r3, r0
 800e13a:	60b9      	str	r1, [r7, #8]
 800e13c:	607a      	str	r2, [r7, #4]
 800e13e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800e140:	f7ff ff42 	bl	800dfc8 <__NVIC_GetPriorityGrouping>
 800e144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	68b9      	ldr	r1, [r7, #8]
 800e14a:	6978      	ldr	r0, [r7, #20]
 800e14c:	f7ff ffb4 	bl	800e0b8 <NVIC_EncodePriority>
 800e150:	4602      	mov	r2, r0
 800e152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e156:	4611      	mov	r1, r2
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff ff83 	bl	800e064 <__NVIC_SetPriority>
}
 800e15e:	bf00      	nop
 800e160:	3718      	adds	r7, #24
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}

0800e166 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e166:	b580      	push	{r7, lr}
 800e168:	b082      	sub	sp, #8
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	4603      	mov	r3, r0
 800e16e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff ff35 	bl	800dfe4 <__NVIC_EnableIRQ>
}
 800e17a:	bf00      	nop
 800e17c:	3708      	adds	r7, #8
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800e182:	b580      	push	{r7, lr}
 800e184:	b082      	sub	sp, #8
 800e186:	af00      	add	r7, sp, #0
 800e188:	4603      	mov	r3, r0
 800e18a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800e18c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e190:	4618      	mov	r0, r3
 800e192:	f7ff ff43 	bl	800e01c <__NVIC_DisableIRQ>
}
 800e196:	bf00      	nop
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e19e:	b480      	push	{r7}
 800e1a0:	b083      	sub	sp, #12
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d101      	bne.n	800e1b0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	e04f      	b.n	800e250 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b02      	cmp	r3, #2
 800e1ba:	d008      	beq.n	800e1ce <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2204      	movs	r2, #4
 800e1c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e040      	b.n	800e250 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f022 020e 	bic.w	r2, r2, #14
 800e1dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e1ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f022 0201 	bic.w	r2, r2, #1
 800e1fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e202:	f003 021c 	and.w	r2, r3, #28
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e20a:	2101      	movs	r1, #1
 800e20c:	fa01 f202 	lsl.w	r2, r1, r2
 800e210:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e21a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00c      	beq.n	800e23e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e22e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e232:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e23c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2200      	movs	r2, #0
 800e24a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	370c      	adds	r7, #12
 800e254:	46bd      	mov	sp, r7
 800e256:	bc80      	pop	{r7}
 800e258:	4770      	bx	lr

0800e25a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b084      	sub	sp, #16
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e262:	2300      	movs	r3, #0
 800e264:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	2b02      	cmp	r3, #2
 800e270:	d005      	beq.n	800e27e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2204      	movs	r2, #4
 800e276:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800e278:	2301      	movs	r3, #1
 800e27a:	73fb      	strb	r3, [r7, #15]
 800e27c:	e047      	b.n	800e30e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f022 020e 	bic.w	r2, r2, #14
 800e28c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f022 0201 	bic.w	r2, r2, #1
 800e29c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e2ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2b2:	f003 021c 	and.w	r2, r3, #28
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ba:	2101      	movs	r1, #1
 800e2bc:	fa01 f202 	lsl.w	r2, r1, r2
 800e2c0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e2ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00c      	beq.n	800e2ee <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e2e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e2ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e302:	2b00      	cmp	r3, #0
 800e304:	d003      	beq.n	800e30e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	4798      	blx	r3
    }
  }
  return status;
 800e30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b086      	sub	sp, #24
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e326:	4b1c      	ldr	r3, [pc, #112]	; (800e398 <HAL_FLASH_Program+0x80>)
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d101      	bne.n	800e332 <HAL_FLASH_Program+0x1a>
 800e32e:	2302      	movs	r3, #2
 800e330:	e02d      	b.n	800e38e <HAL_FLASH_Program+0x76>
 800e332:	4b19      	ldr	r3, [pc, #100]	; (800e398 <HAL_FLASH_Program+0x80>)
 800e334:	2201      	movs	r2, #1
 800e336:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e338:	4b17      	ldr	r3, [pc, #92]	; (800e398 <HAL_FLASH_Program+0x80>)
 800e33a:	2200      	movs	r2, #0
 800e33c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e33e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e342:	f000 f869 	bl	800e418 <FLASH_WaitForLastOperation>
 800e346:	4603      	mov	r3, r0
 800e348:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d11a      	bne.n	800e386 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2b01      	cmp	r3, #1
 800e354:	d105      	bne.n	800e362 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800e356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e35a:	68b8      	ldr	r0, [r7, #8]
 800e35c:	f000 f8be 	bl	800e4dc <FLASH_Program_DoubleWord>
 800e360:	e004      	b.n	800e36c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	4619      	mov	r1, r3
 800e366:	68b8      	ldr	r0, [r7, #8]
 800e368:	f000 f8de 	bl	800e528 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e36c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e370:	f000 f852 	bl	800e418 <FLASH_WaitForLastOperation>
 800e374:	4603      	mov	r3, r0
 800e376:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800e378:	4b08      	ldr	r3, [pc, #32]	; (800e39c <HAL_FLASH_Program+0x84>)
 800e37a:	695a      	ldr	r2, [r3, #20]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	43db      	mvns	r3, r3
 800e380:	4906      	ldr	r1, [pc, #24]	; (800e39c <HAL_FLASH_Program+0x84>)
 800e382:	4013      	ands	r3, r2
 800e384:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e386:	4b04      	ldr	r3, [pc, #16]	; (800e398 <HAL_FLASH_Program+0x80>)
 800e388:	2200      	movs	r2, #0
 800e38a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800e38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3718      	adds	r7, #24
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	200029a8 	.word	0x200029a8
 800e39c:	58004000 	.word	0x58004000

0800e3a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e3aa:	4b0b      	ldr	r3, [pc, #44]	; (800e3d8 <HAL_FLASH_Unlock+0x38>)
 800e3ac:	695b      	ldr	r3, [r3, #20]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	da0b      	bge.n	800e3ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e3b2:	4b09      	ldr	r3, [pc, #36]	; (800e3d8 <HAL_FLASH_Unlock+0x38>)
 800e3b4:	4a09      	ldr	r2, [pc, #36]	; (800e3dc <HAL_FLASH_Unlock+0x3c>)
 800e3b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e3b8:	4b07      	ldr	r3, [pc, #28]	; (800e3d8 <HAL_FLASH_Unlock+0x38>)
 800e3ba:	4a09      	ldr	r2, [pc, #36]	; (800e3e0 <HAL_FLASH_Unlock+0x40>)
 800e3bc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e3be:	4b06      	ldr	r3, [pc, #24]	; (800e3d8 <HAL_FLASH_Unlock+0x38>)
 800e3c0:	695b      	ldr	r3, [r3, #20]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	da01      	bge.n	800e3ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e3ca:	79fb      	ldrb	r3, [r7, #7]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	370c      	adds	r7, #12
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bc80      	pop	{r7}
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	58004000 	.word	0x58004000
 800e3dc:	45670123 	.word	0x45670123
 800e3e0:	cdef89ab 	.word	0xcdef89ab

0800e3e4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800e3ee:	4b09      	ldr	r3, [pc, #36]	; (800e414 <HAL_FLASH_Lock+0x30>)
 800e3f0:	695b      	ldr	r3, [r3, #20]
 800e3f2:	4a08      	ldr	r2, [pc, #32]	; (800e414 <HAL_FLASH_Lock+0x30>)
 800e3f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e3f8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800e3fa:	4b06      	ldr	r3, [pc, #24]	; (800e414 <HAL_FLASH_Lock+0x30>)
 800e3fc:	695b      	ldr	r3, [r3, #20]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	db01      	blt.n	800e406 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800e402:	2301      	movs	r3, #1
 800e404:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e406:	79fb      	ldrb	r3, [r7, #7]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bc80      	pop	{r7}
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	58004000 	.word	0x58004000

0800e418 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800e420:	f7fe fd86 	bl	800cf30 <HAL_GetTick>
 800e424:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e426:	e009      	b.n	800e43c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e428:	f7fe fd82 	bl	800cf30 <HAL_GetTick>
 800e42c:	4602      	mov	r2, r0
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	1ad3      	subs	r3, r2, r3
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	429a      	cmp	r2, r3
 800e436:	d801      	bhi.n	800e43c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800e438:	2303      	movs	r3, #3
 800e43a:	e047      	b.n	800e4cc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e43c:	4b25      	ldr	r3, [pc, #148]	; (800e4d4 <FLASH_WaitForLastOperation+0xbc>)
 800e43e:	691b      	ldr	r3, [r3, #16]
 800e440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e448:	d0ee      	beq.n	800e428 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800e44a:	4b22      	ldr	r3, [pc, #136]	; (800e4d4 <FLASH_WaitForLastOperation+0xbc>)
 800e44c:	691b      	ldr	r3, [r3, #16]
 800e44e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	f003 0301 	and.w	r3, r3, #1
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e45a:	4b1e      	ldr	r3, [pc, #120]	; (800e4d4 <FLASH_WaitForLastOperation+0xbc>)
 800e45c:	2201      	movs	r2, #1
 800e45e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800e466:	4013      	ands	r3, r2
 800e468:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e470:	2b00      	cmp	r3, #0
 800e472:	d007      	beq.n	800e484 <FLASH_WaitForLastOperation+0x6c>
 800e474:	4b17      	ldr	r3, [pc, #92]	; (800e4d4 <FLASH_WaitForLastOperation+0xbc>)
 800e476:	699a      	ldr	r2, [r3, #24]
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e47e:	4915      	ldr	r1, [pc, #84]	; (800e4d4 <FLASH_WaitForLastOperation+0xbc>)
 800e480:	4313      	orrs	r3, r2
 800e482:	618b      	str	r3, [r1, #24]
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d004      	beq.n	800e498 <FLASH_WaitForLastOperation+0x80>
 800e48e:	4a11      	ldr	r2, [pc, #68]	; (800e4d4 <FLASH_WaitForLastOperation+0xbc>)
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e496:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00e      	beq.n	800e4bc <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800e49e:	4a0e      	ldr	r2, [pc, #56]	; (800e4d8 <FLASH_WaitForLastOperation+0xc0>)
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e011      	b.n	800e4cc <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e4a8:	f7fe fd42 	bl	800cf30 <HAL_GetTick>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	1ad3      	subs	r3, r2, r3
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d801      	bhi.n	800e4bc <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 800e4b8:	2303      	movs	r3, #3
 800e4ba:	e007      	b.n	800e4cc <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800e4bc:	4b05      	ldr	r3, [pc, #20]	; (800e4d4 <FLASH_WaitForLastOperation+0xbc>)
 800e4be:	691b      	ldr	r3, [r3, #16]
 800e4c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e4c8:	d0ee      	beq.n	800e4a8 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	58004000 	.word	0x58004000
 800e4d8:	200029a8 	.word	0x200029a8

0800e4dc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800e4e8:	4b0e      	ldr	r3, [pc, #56]	; (800e524 <FLASH_Program_DoubleWord+0x48>)
 800e4ea:	695b      	ldr	r3, [r3, #20]
 800e4ec:	4a0d      	ldr	r2, [pc, #52]	; (800e524 <FLASH_Program_DoubleWord+0x48>)
 800e4ee:	f043 0301 	orr.w	r3, r3, #1
 800e4f2:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800e4fa:	f3bf 8f6f 	isb	sy
}
 800e4fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800e500:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e504:	f04f 0200 	mov.w	r2, #0
 800e508:	f04f 0300 	mov.w	r3, #0
 800e50c:	000a      	movs	r2, r1
 800e50e:	2300      	movs	r3, #0
 800e510:	68f9      	ldr	r1, [r7, #12]
 800e512:	3104      	adds	r1, #4
 800e514:	4613      	mov	r3, r2
 800e516:	600b      	str	r3, [r1, #0]
}
 800e518:	bf00      	nop
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bc80      	pop	{r7}
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	58004000 	.word	0x58004000

0800e528 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800e528:	b480      	push	{r7}
 800e52a:	b089      	sub	sp, #36	; 0x24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800e532:	2340      	movs	r3, #64	; 0x40
 800e534:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800e53e:	4b18      	ldr	r3, [pc, #96]	; (800e5a0 <FLASH_Program_Fast+0x78>)
 800e540:	695b      	ldr	r3, [r3, #20]
 800e542:	4a17      	ldr	r2, [pc, #92]	; (800e5a0 <FLASH_Program_Fast+0x78>)
 800e544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e548:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e54a:	f3ef 8310 	mrs	r3, PRIMASK
 800e54e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e550:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800e552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e554:	b672      	cpsid	i
}
 800e556:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	3304      	adds	r3, #4
 800e564:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	3304      	adds	r3, #4
 800e56a:	617b      	str	r3, [r7, #20]
    row_index--;
 800e56c:	7ffb      	ldrb	r3, [r7, #31]
 800e56e:	3b01      	subs	r3, #1
 800e570:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800e572:	7ffb      	ldrb	r3, [r7, #31]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1ef      	bne.n	800e558 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800e578:	bf00      	nop
 800e57a:	4b09      	ldr	r3, [pc, #36]	; (800e5a0 <FLASH_Program_Fast+0x78>)
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e586:	d0f8      	beq.n	800e57a <FLASH_Program_Fast+0x52>
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	f383 8810 	msr	PRIMASK, r3
}
 800e592:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800e594:	bf00      	nop
 800e596:	3724      	adds	r7, #36	; 0x24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bc80      	pop	{r7}
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	58004000 	.word	0x58004000

0800e5a4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e5ae:	4b28      	ldr	r3, [pc, #160]	; (800e650 <HAL_FLASHEx_Erase+0xac>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d101      	bne.n	800e5ba <HAL_FLASHEx_Erase+0x16>
 800e5b6:	2302      	movs	r3, #2
 800e5b8:	e046      	b.n	800e648 <HAL_FLASHEx_Erase+0xa4>
 800e5ba:	4b25      	ldr	r3, [pc, #148]	; (800e650 <HAL_FLASHEx_Erase+0xac>)
 800e5bc:	2201      	movs	r2, #1
 800e5be:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e5c0:	4b23      	ldr	r3, [pc, #140]	; (800e650 <HAL_FLASHEx_Erase+0xac>)
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e5c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e5ca:	f7ff ff25 	bl	800e418 <FLASH_WaitForLastOperation>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e5d2:	7bfb      	ldrb	r3, [r7, #15]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d133      	bne.n	800e640 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b04      	cmp	r3, #4
 800e5de:	d108      	bne.n	800e5f2 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 800e5e0:	f000 f838 	bl	800e654 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e5e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e5e8:	f7ff ff16 	bl	800e418 <FLASH_WaitForLastOperation>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	73fb      	strb	r3, [r7, #15]
 800e5f0:	e024      	b.n	800e63c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	60bb      	str	r3, [r7, #8]
 800e600:	e012      	b.n	800e628 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800e602:	68b8      	ldr	r0, [r7, #8]
 800e604:	f000 f836 	bl	800e674 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e60c:	f7ff ff04 	bl	800e418 <FLASH_WaitForLastOperation>
 800e610:	4603      	mov	r3, r0
 800e612:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800e614:	7bfb      	ldrb	r3, [r7, #15]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d003      	beq.n	800e622 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	601a      	str	r2, [r3, #0]
          break;
 800e620:	e00a      	b.n	800e638 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	3301      	adds	r3, #1
 800e626:	60bb      	str	r3, [r7, #8]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685a      	ldr	r2, [r3, #4]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	4413      	add	r3, r2
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	429a      	cmp	r2, r3
 800e636:	d3e4      	bcc.n	800e602 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800e638:	f000 f878 	bl	800e72c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e63c:	f000 f832 	bl	800e6a4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e640:	4b03      	ldr	r3, [pc, #12]	; (800e650 <HAL_FLASHEx_Erase+0xac>)
 800e642:	2200      	movs	r2, #0
 800e644:	701a      	strb	r2, [r3, #0]

  return status;
 800e646:	7bfb      	ldrb	r3, [r7, #15]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	200029a8 	.word	0x200029a8

0800e654 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800e654:	b480      	push	{r7}
 800e656:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800e658:	4b05      	ldr	r3, [pc, #20]	; (800e670 <FLASH_MassErase+0x1c>)
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	4a04      	ldr	r2, [pc, #16]	; (800e670 <FLASH_MassErase+0x1c>)
 800e65e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e662:	f043 0304 	orr.w	r3, r3, #4
 800e666:	6153      	str	r3, [r2, #20]
#endif
}
 800e668:	bf00      	nop
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bc80      	pop	{r7}
 800e66e:	4770      	bx	lr
 800e670:	58004000 	.word	0x58004000

0800e674 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800e67c:	4b08      	ldr	r3, [pc, #32]	; (800e6a0 <FLASH_PageErase+0x2c>)
 800e67e:	695b      	ldr	r3, [r3, #20]
 800e680:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	00db      	lsls	r3, r3, #3
 800e688:	4313      	orrs	r3, r2
 800e68a:	4a05      	ldr	r2, [pc, #20]	; (800e6a0 <FLASH_PageErase+0x2c>)
 800e68c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e690:	f043 0302 	orr.w	r3, r3, #2
 800e694:	6153      	str	r3, [r2, #20]
#endif
}
 800e696:	bf00      	nop
 800e698:	370c      	adds	r7, #12
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bc80      	pop	{r7}
 800e69e:	4770      	bx	lr
 800e6a0:	58004000 	.word	0x58004000

0800e6a4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800e6a8:	4b1f      	ldr	r3, [pc, #124]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6b0:	2b01      	cmp	r3, #1
 800e6b2:	d117      	bne.n	800e6e4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e6b4:	4b1c      	ldr	r3, [pc, #112]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a1b      	ldr	r2, [pc, #108]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e6be:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e6c0:	4b19      	ldr	r3, [pc, #100]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a18      	ldr	r2, [pc, #96]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e6ca:	6013      	str	r3, [r2, #0]
 800e6cc:	4b16      	ldr	r3, [pc, #88]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a15      	ldr	r2, [pc, #84]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e6d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e6d8:	4b13      	ldr	r3, [pc, #76]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4a12      	ldr	r2, [pc, #72]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e6e2:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800e6e4:	4b10      	ldr	r3, [pc, #64]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d117      	bne.n	800e720 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e6f0:	4b0d      	ldr	r3, [pc, #52]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a0c      	ldr	r2, [pc, #48]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e6fa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e6fc:	4b0a      	ldr	r3, [pc, #40]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a09      	ldr	r2, [pc, #36]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e706:	6013      	str	r3, [r2, #0]
 800e708:	4b07      	ldr	r3, [pc, #28]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a06      	ldr	r2, [pc, #24]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e70e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e712:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e714:	4b04      	ldr	r3, [pc, #16]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a03      	ldr	r2, [pc, #12]	; (800e728 <FLASH_FlushCaches+0x84>)
 800e71a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e71e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800e720:	bf00      	nop
 800e722:	46bd      	mov	sp, r7
 800e724:	bc80      	pop	{r7}
 800e726:	4770      	bx	lr
 800e728:	58004000 	.word	0x58004000

0800e72c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800e72c:	b480      	push	{r7}
 800e72e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800e730:	4b05      	ldr	r3, [pc, #20]	; (800e748 <FLASH_AcknowledgePageErase+0x1c>)
 800e732:	695b      	ldr	r3, [r3, #20]
 800e734:	4a04      	ldr	r2, [pc, #16]	; (800e748 <FLASH_AcknowledgePageErase+0x1c>)
 800e736:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800e73a:	f023 0302 	bic.w	r3, r3, #2
 800e73e:	6153      	str	r3, [r2, #20]
#endif
}
 800e740:	bf00      	nop
 800e742:	46bd      	mov	sp, r7
 800e744:	bc80      	pop	{r7}
 800e746:	4770      	bx	lr
 800e748:	58004000 	.word	0x58004000

0800e74c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b087      	sub	sp, #28
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e756:	2300      	movs	r3, #0
 800e758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e75a:	e140      	b.n	800e9de <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	2101      	movs	r1, #1
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	fa01 f303 	lsl.w	r3, r1, r3
 800e768:	4013      	ands	r3, r2
 800e76a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 8132 	beq.w	800e9d8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	f003 0303 	and.w	r3, r3, #3
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d005      	beq.n	800e78c <HAL_GPIO_Init+0x40>
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	f003 0303 	and.w	r3, r3, #3
 800e788:	2b02      	cmp	r3, #2
 800e78a:	d130      	bne.n	800e7ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	689b      	ldr	r3, [r3, #8]
 800e790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	2203      	movs	r2, #3
 800e798:	fa02 f303 	lsl.w	r3, r2, r3
 800e79c:	43db      	mvns	r3, r3
 800e79e:	693a      	ldr	r2, [r7, #16]
 800e7a0:	4013      	ands	r3, r2
 800e7a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	68da      	ldr	r2, [r3, #12]
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	005b      	lsls	r3, r3, #1
 800e7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800e7b0:	693a      	ldr	r2, [r7, #16]
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	693a      	ldr	r2, [r7, #16]
 800e7ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ca:	43db      	mvns	r3, r3
 800e7cc:	693a      	ldr	r2, [r7, #16]
 800e7ce:	4013      	ands	r3, r2
 800e7d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	091b      	lsrs	r3, r3, #4
 800e7d8:	f003 0201 	and.w	r2, r3, #1
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e2:	693a      	ldr	r2, [r7, #16]
 800e7e4:	4313      	orrs	r3, r2
 800e7e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	693a      	ldr	r2, [r7, #16]
 800e7ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	f003 0303 	and.w	r3, r3, #3
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d017      	beq.n	800e82a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	005b      	lsls	r3, r3, #1
 800e804:	2203      	movs	r2, #3
 800e806:	fa02 f303 	lsl.w	r3, r2, r3
 800e80a:	43db      	mvns	r3, r3
 800e80c:	693a      	ldr	r2, [r7, #16]
 800e80e:	4013      	ands	r3, r2
 800e810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	689a      	ldr	r2, [r3, #8]
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	005b      	lsls	r3, r3, #1
 800e81a:	fa02 f303 	lsl.w	r3, r2, r3
 800e81e:	693a      	ldr	r2, [r7, #16]
 800e820:	4313      	orrs	r3, r2
 800e822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	f003 0303 	and.w	r3, r3, #3
 800e832:	2b02      	cmp	r3, #2
 800e834:	d123      	bne.n	800e87e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	08da      	lsrs	r2, r3, #3
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	3208      	adds	r2, #8
 800e83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	f003 0307 	and.w	r3, r3, #7
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	220f      	movs	r2, #15
 800e84e:	fa02 f303 	lsl.w	r3, r2, r3
 800e852:	43db      	mvns	r3, r3
 800e854:	693a      	ldr	r2, [r7, #16]
 800e856:	4013      	ands	r3, r2
 800e858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	691a      	ldr	r2, [r3, #16]
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	f003 0307 	and.w	r3, r3, #7
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	fa02 f303 	lsl.w	r3, r2, r3
 800e86a:	693a      	ldr	r2, [r7, #16]
 800e86c:	4313      	orrs	r3, r2
 800e86e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	08da      	lsrs	r2, r3, #3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	3208      	adds	r2, #8
 800e878:	6939      	ldr	r1, [r7, #16]
 800e87a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	2203      	movs	r2, #3
 800e88a:	fa02 f303 	lsl.w	r3, r2, r3
 800e88e:	43db      	mvns	r3, r3
 800e890:	693a      	ldr	r2, [r7, #16]
 800e892:	4013      	ands	r3, r2
 800e894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	f003 0203 	and.w	r2, r3, #3
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	005b      	lsls	r3, r3, #1
 800e8a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e8a6:	693a      	ldr	r2, [r7, #16]
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	693a      	ldr	r2, [r7, #16]
 800e8b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f000 808c 	beq.w	800e9d8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800e8c0:	4a4e      	ldr	r2, [pc, #312]	; (800e9fc <HAL_GPIO_Init+0x2b0>)
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	089b      	lsrs	r3, r3, #2
 800e8c6:	3302      	adds	r3, #2
 800e8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	f003 0303 	and.w	r3, r3, #3
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	2207      	movs	r2, #7
 800e8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8dc:	43db      	mvns	r3, r3
 800e8de:	693a      	ldr	r2, [r7, #16]
 800e8e0:	4013      	ands	r3, r2
 800e8e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e8ea:	d00d      	beq.n	800e908 <HAL_GPIO_Init+0x1bc>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4a44      	ldr	r2, [pc, #272]	; (800ea00 <HAL_GPIO_Init+0x2b4>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d007      	beq.n	800e904 <HAL_GPIO_Init+0x1b8>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	4a43      	ldr	r2, [pc, #268]	; (800ea04 <HAL_GPIO_Init+0x2b8>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d101      	bne.n	800e900 <HAL_GPIO_Init+0x1b4>
 800e8fc:	2302      	movs	r3, #2
 800e8fe:	e004      	b.n	800e90a <HAL_GPIO_Init+0x1be>
 800e900:	2307      	movs	r3, #7
 800e902:	e002      	b.n	800e90a <HAL_GPIO_Init+0x1be>
 800e904:	2301      	movs	r3, #1
 800e906:	e000      	b.n	800e90a <HAL_GPIO_Init+0x1be>
 800e908:	2300      	movs	r3, #0
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	f002 0203 	and.w	r2, r2, #3
 800e910:	0092      	lsls	r2, r2, #2
 800e912:	4093      	lsls	r3, r2
 800e914:	693a      	ldr	r2, [r7, #16]
 800e916:	4313      	orrs	r3, r2
 800e918:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e91a:	4938      	ldr	r1, [pc, #224]	; (800e9fc <HAL_GPIO_Init+0x2b0>)
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	089b      	lsrs	r3, r3, #2
 800e920:	3302      	adds	r3, #2
 800e922:	693a      	ldr	r2, [r7, #16]
 800e924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e928:	4b37      	ldr	r3, [pc, #220]	; (800ea08 <HAL_GPIO_Init+0x2bc>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	43db      	mvns	r3, r3
 800e932:	693a      	ldr	r2, [r7, #16]
 800e934:	4013      	ands	r3, r2
 800e936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e940:	2b00      	cmp	r3, #0
 800e942:	d003      	beq.n	800e94c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800e944:	693a      	ldr	r2, [r7, #16]
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	4313      	orrs	r3, r2
 800e94a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e94c:	4a2e      	ldr	r2, [pc, #184]	; (800ea08 <HAL_GPIO_Init+0x2bc>)
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e952:	4b2d      	ldr	r3, [pc, #180]	; (800ea08 <HAL_GPIO_Init+0x2bc>)
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	43db      	mvns	r3, r3
 800e95c:	693a      	ldr	r2, [r7, #16]
 800e95e:	4013      	ands	r3, r2
 800e960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d003      	beq.n	800e976 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800e96e:	693a      	ldr	r2, [r7, #16]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	4313      	orrs	r3, r2
 800e974:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e976:	4a24      	ldr	r2, [pc, #144]	; (800ea08 <HAL_GPIO_Init+0x2bc>)
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800e97c:	4b22      	ldr	r3, [pc, #136]	; (800ea08 <HAL_GPIO_Init+0x2bc>)
 800e97e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e982:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	43db      	mvns	r3, r3
 800e988:	693a      	ldr	r2, [r7, #16]
 800e98a:	4013      	ands	r3, r2
 800e98c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e996:	2b00      	cmp	r3, #0
 800e998:	d003      	beq.n	800e9a2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800e99a:	693a      	ldr	r2, [r7, #16]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800e9a2:	4a19      	ldr	r2, [pc, #100]	; (800ea08 <HAL_GPIO_Init+0x2bc>)
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800e9aa:	4b17      	ldr	r3, [pc, #92]	; (800ea08 <HAL_GPIO_Init+0x2bc>)
 800e9ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9b0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	43db      	mvns	r3, r3
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	4013      	ands	r3, r2
 800e9ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d003      	beq.n	800e9d0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800e9c8:	693a      	ldr	r2, [r7, #16]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800e9d0:	4a0d      	ldr	r2, [pc, #52]	; (800ea08 <HAL_GPIO_Init+0x2bc>)
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	f47f aeb7 	bne.w	800e75c <HAL_GPIO_Init+0x10>
  }
}
 800e9ee:	bf00      	nop
 800e9f0:	bf00      	nop
 800e9f2:	371c      	adds	r7, #28
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bc80      	pop	{r7}
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	40010000 	.word	0x40010000
 800ea00:	48000400 	.word	0x48000400
 800ea04:	48000800 	.word	0x48000800
 800ea08:	58000800 	.word	0x58000800

0800ea0c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b087      	sub	sp, #28
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ea16:	2300      	movs	r3, #0
 800ea18:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800ea1a:	e0af      	b.n	800eb7c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	fa02 f303 	lsl.w	r3, r2, r3
 800ea24:	683a      	ldr	r2, [r7, #0]
 800ea26:	4013      	ands	r3, r2
 800ea28:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	f000 80a2 	beq.w	800eb76 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800ea32:	4a59      	ldr	r2, [pc, #356]	; (800eb98 <HAL_GPIO_DeInit+0x18c>)
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	089b      	lsrs	r3, r3, #2
 800ea38:	3302      	adds	r3, #2
 800ea3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea3e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	f003 0303 	and.w	r3, r3, #3
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	2207      	movs	r2, #7
 800ea4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	4013      	ands	r3, r2
 800ea52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ea5a:	d00d      	beq.n	800ea78 <HAL_GPIO_DeInit+0x6c>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a4f      	ldr	r2, [pc, #316]	; (800eb9c <HAL_GPIO_DeInit+0x190>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d007      	beq.n	800ea74 <HAL_GPIO_DeInit+0x68>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a4e      	ldr	r2, [pc, #312]	; (800eba0 <HAL_GPIO_DeInit+0x194>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d101      	bne.n	800ea70 <HAL_GPIO_DeInit+0x64>
 800ea6c:	2302      	movs	r3, #2
 800ea6e:	e004      	b.n	800ea7a <HAL_GPIO_DeInit+0x6e>
 800ea70:	2307      	movs	r3, #7
 800ea72:	e002      	b.n	800ea7a <HAL_GPIO_DeInit+0x6e>
 800ea74:	2301      	movs	r3, #1
 800ea76:	e000      	b.n	800ea7a <HAL_GPIO_DeInit+0x6e>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	697a      	ldr	r2, [r7, #20]
 800ea7c:	f002 0203 	and.w	r2, r2, #3
 800ea80:	0092      	lsls	r2, r2, #2
 800ea82:	4093      	lsls	r3, r2
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d136      	bne.n	800eaf8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800ea8a:	4b46      	ldr	r3, [pc, #280]	; (800eba4 <HAL_GPIO_DeInit+0x198>)
 800ea8c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	43db      	mvns	r3, r3
 800ea94:	4943      	ldr	r1, [pc, #268]	; (800eba4 <HAL_GPIO_DeInit+0x198>)
 800ea96:	4013      	ands	r3, r2
 800ea98:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800ea9c:	4b41      	ldr	r3, [pc, #260]	; (800eba4 <HAL_GPIO_DeInit+0x198>)
 800ea9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	43db      	mvns	r3, r3
 800eaa6:	493f      	ldr	r1, [pc, #252]	; (800eba4 <HAL_GPIO_DeInit+0x198>)
 800eaa8:	4013      	ands	r3, r2
 800eaaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800eaae:	4b3d      	ldr	r3, [pc, #244]	; (800eba4 <HAL_GPIO_DeInit+0x198>)
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	43db      	mvns	r3, r3
 800eab6:	493b      	ldr	r1, [pc, #236]	; (800eba4 <HAL_GPIO_DeInit+0x198>)
 800eab8:	4013      	ands	r3, r2
 800eaba:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800eabc:	4b39      	ldr	r3, [pc, #228]	; (800eba4 <HAL_GPIO_DeInit+0x198>)
 800eabe:	685a      	ldr	r2, [r3, #4]
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	43db      	mvns	r3, r3
 800eac4:	4937      	ldr	r1, [pc, #220]	; (800eba4 <HAL_GPIO_DeInit+0x198>)
 800eac6:	4013      	ands	r3, r2
 800eac8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	f003 0303 	and.w	r3, r3, #3
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	2207      	movs	r2, #7
 800ead4:	fa02 f303 	lsl.w	r3, r2, r3
 800ead8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800eada:	4a2f      	ldr	r2, [pc, #188]	; (800eb98 <HAL_GPIO_DeInit+0x18c>)
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	089b      	lsrs	r3, r3, #2
 800eae0:	3302      	adds	r3, #2
 800eae2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	43da      	mvns	r2, r3
 800eaea:	482b      	ldr	r0, [pc, #172]	; (800eb98 <HAL_GPIO_DeInit+0x18c>)
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	089b      	lsrs	r3, r3, #2
 800eaf0:	400a      	ands	r2, r1
 800eaf2:	3302      	adds	r3, #2
 800eaf4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	005b      	lsls	r3, r3, #1
 800eb00:	2103      	movs	r1, #3
 800eb02:	fa01 f303 	lsl.w	r3, r1, r3
 800eb06:	431a      	orrs	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	08da      	lsrs	r2, r3, #3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	3208      	adds	r2, #8
 800eb14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	f003 0307 	and.w	r3, r3, #7
 800eb1e:	009b      	lsls	r3, r3, #2
 800eb20:	220f      	movs	r2, #15
 800eb22:	fa02 f303 	lsl.w	r3, r2, r3
 800eb26:	43db      	mvns	r3, r3
 800eb28:	697a      	ldr	r2, [r7, #20]
 800eb2a:	08d2      	lsrs	r2, r2, #3
 800eb2c:	4019      	ands	r1, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3208      	adds	r2, #8
 800eb32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	689a      	ldr	r2, [r3, #8]
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	005b      	lsls	r3, r3, #1
 800eb3e:	2103      	movs	r1, #3
 800eb40:	fa01 f303 	lsl.w	r3, r1, r3
 800eb44:	43db      	mvns	r3, r3
 800eb46:	401a      	ands	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	685a      	ldr	r2, [r3, #4]
 800eb50:	2101      	movs	r1, #1
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	fa01 f303 	lsl.w	r3, r1, r3
 800eb58:	43db      	mvns	r3, r3
 800eb5a:	401a      	ands	r2, r3
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	68da      	ldr	r2, [r3, #12]
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	2103      	movs	r1, #3
 800eb6a:	fa01 f303 	lsl.w	r3, r1, r3
 800eb6e:	43db      	mvns	r3, r3
 800eb70:	401a      	ands	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	60da      	str	r2, [r3, #12]
    }

    position++;
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800eb7c:	683a      	ldr	r2, [r7, #0]
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	fa22 f303 	lsr.w	r3, r2, r3
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f47f af49 	bne.w	800ea1c <HAL_GPIO_DeInit+0x10>
  }
}
 800eb8a:	bf00      	nop
 800eb8c:	bf00      	nop
 800eb8e:	371c      	adds	r7, #28
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bc80      	pop	{r7}
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	40010000 	.word	0x40010000
 800eb9c:	48000400 	.word	0x48000400
 800eba0:	48000800 	.word	0x48000800
 800eba4:	58000800 	.word	0x58000800

0800eba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	807b      	strh	r3, [r7, #2]
 800ebb4:	4613      	mov	r3, r2
 800ebb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ebb8:	787b      	ldrb	r3, [r7, #1]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d003      	beq.n	800ebc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ebbe:	887a      	ldrh	r2, [r7, #2]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ebc4:	e002      	b.n	800ebcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ebc6:	887a      	ldrh	r2, [r7, #2]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ebcc:	bf00      	nop
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bc80      	pop	{r7}
 800ebd4:	4770      	bx	lr

0800ebd6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b082      	sub	sp, #8
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d101      	bne.n	800ebe8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	e081      	b.n	800ecec <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d106      	bne.n	800ec02 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7fb fba9 	bl	800a354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2224      	movs	r2, #36	; 0x24
 800ec06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	f022 0201 	bic.w	r2, r2, #1
 800ec18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685a      	ldr	r2, [r3, #4]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ec26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	689a      	ldr	r2, [r3, #8]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d107      	bne.n	800ec50 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	689a      	ldr	r2, [r3, #8]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec4c:	609a      	str	r2, [r3, #8]
 800ec4e:	e006      	b.n	800ec5e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	689a      	ldr	r2, [r3, #8]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ec5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	d104      	bne.n	800ec70 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	6812      	ldr	r2, [r2, #0]
 800ec7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ec7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec82:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68da      	ldr	r2, [r3, #12]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	691a      	ldr	r2, [r3, #16]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	695b      	ldr	r3, [r3, #20]
 800ec9c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	699b      	ldr	r3, [r3, #24]
 800eca4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	430a      	orrs	r2, r1
 800ecac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	69d9      	ldr	r1, [r3, #28]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6a1a      	ldr	r2, [r3, #32]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	430a      	orrs	r2, r1
 800ecbc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f042 0201 	orr.w	r2, r2, #1
 800eccc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2220      	movs	r2, #32
 800ecd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	2b20      	cmp	r3, #32
 800ed08:	d138      	bne.n	800ed7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d101      	bne.n	800ed18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ed14:	2302      	movs	r3, #2
 800ed16:	e032      	b.n	800ed7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2224      	movs	r2, #36	; 0x24
 800ed24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f022 0201 	bic.w	r2, r2, #1
 800ed36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ed46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	6819      	ldr	r1, [r3, #0]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	683a      	ldr	r2, [r7, #0]
 800ed54:	430a      	orrs	r2, r1
 800ed56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f042 0201 	orr.w	r2, r2, #1
 800ed66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2220      	movs	r2, #32
 800ed6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	e000      	b.n	800ed7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ed7c:	2302      	movs	r3, #2
  }
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	370c      	adds	r7, #12
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bc80      	pop	{r7}
 800ed86:	4770      	bx	lr

0800ed88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b085      	sub	sp, #20
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	2b20      	cmp	r3, #32
 800ed9c:	d139      	bne.n	800ee12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d101      	bne.n	800edac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800eda8:	2302      	movs	r3, #2
 800edaa:	e033      	b.n	800ee14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2224      	movs	r2, #36	; 0x24
 800edb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f022 0201 	bic.w	r2, r2, #1
 800edca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800edda:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	021b      	lsls	r3, r3, #8
 800ede0:	68fa      	ldr	r2, [r7, #12]
 800ede2:	4313      	orrs	r3, r2
 800ede4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f042 0201 	orr.w	r2, r2, #1
 800edfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2220      	movs	r2, #32
 800ee02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e000      	b.n	800ee14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ee12:	2302      	movs	r3, #2
  }
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3714      	adds	r7, #20
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bc80      	pop	{r7}
 800ee1c:	4770      	bx	lr
	...

0800ee20 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ee20:	b480      	push	{r7}
 800ee22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ee24:	4b04      	ldr	r3, [pc, #16]	; (800ee38 <HAL_PWR_EnableBkUpAccess+0x18>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a03      	ldr	r2, [pc, #12]	; (800ee38 <HAL_PWR_EnableBkUpAccess+0x18>)
 800ee2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee2e:	6013      	str	r3, [r2, #0]
}
 800ee30:	bf00      	nop
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bc80      	pop	{r7}
 800ee36:	4770      	bx	lr
 800ee38:	58000400 	.word	0x58000400

0800ee3c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800ee40:	4b03      	ldr	r3, [pc, #12]	; (800ee50 <HAL_PWREx_GetVoltageRange+0x14>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	bc80      	pop	{r7}
 800ee4e:	4770      	bx	lr
 800ee50:	58000400 	.word	0x58000400

0800ee54 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800ee54:	b480      	push	{r7}
 800ee56:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800ee58:	4b06      	ldr	r3, [pc, #24]	; (800ee74 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee64:	d101      	bne.n	800ee6a <LL_PWR_IsEnabledBkUpAccess+0x16>
 800ee66:	2301      	movs	r3, #1
 800ee68:	e000      	b.n	800ee6c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800ee6a:	2300      	movs	r3, #0
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bc80      	pop	{r7}
 800ee72:	4770      	bx	lr
 800ee74:	58000400 	.word	0x58000400

0800ee78 <LL_RCC_HSE_EnableTcxo>:
{
 800ee78:	b480      	push	{r7}
 800ee7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800ee7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ee86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ee8a:	6013      	str	r3, [r2, #0]
}
 800ee8c:	bf00      	nop
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bc80      	pop	{r7}
 800ee92:	4770      	bx	lr

0800ee94 <LL_RCC_HSE_DisableTcxo>:
{
 800ee94:	b480      	push	{r7}
 800ee96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800ee98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eea2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eea6:	6013      	str	r3, [r2, #0]
}
 800eea8:	bf00      	nop
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bc80      	pop	{r7}
 800eeae:	4770      	bx	lr

0800eeb0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800eeb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eec2:	d101      	bne.n	800eec8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800eec4:	2301      	movs	r3, #1
 800eec6:	e000      	b.n	800eeca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800eec8:	2300      	movs	r3, #0
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	46bd      	mov	sp, r7
 800eece:	bc80      	pop	{r7}
 800eed0:	4770      	bx	lr

0800eed2 <LL_RCC_HSE_Enable>:
{
 800eed2:	b480      	push	{r7}
 800eed4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800eed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eee4:	6013      	str	r3, [r2, #0]
}
 800eee6:	bf00      	nop
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bc80      	pop	{r7}
 800eeec:	4770      	bx	lr

0800eeee <LL_RCC_HSE_Disable>:
{
 800eeee:	b480      	push	{r7}
 800eef0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800eef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eefc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef00:	6013      	str	r3, [r2, #0]
}
 800ef02:	bf00      	nop
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bc80      	pop	{r7}
 800ef08:	4770      	bx	lr

0800ef0a <LL_RCC_HSE_IsReady>:
{
 800ef0a:	b480      	push	{r7}
 800ef0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ef0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef1c:	d101      	bne.n	800ef22 <LL_RCC_HSE_IsReady+0x18>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e000      	b.n	800ef24 <LL_RCC_HSE_IsReady+0x1a>
 800ef22:	2300      	movs	r3, #0
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bc80      	pop	{r7}
 800ef2a:	4770      	bx	lr

0800ef2c <LL_RCC_HSI_Enable>:
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800ef30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef3e:	6013      	str	r3, [r2, #0]
}
 800ef40:	bf00      	nop
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bc80      	pop	{r7}
 800ef46:	4770      	bx	lr

0800ef48 <LL_RCC_HSI_Disable>:
{
 800ef48:	b480      	push	{r7}
 800ef4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800ef4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef5a:	6013      	str	r3, [r2, #0]
}
 800ef5c:	bf00      	nop
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bc80      	pop	{r7}
 800ef62:	4770      	bx	lr

0800ef64 <LL_RCC_HSI_IsReady>:
{
 800ef64:	b480      	push	{r7}
 800ef66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800ef68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef76:	d101      	bne.n	800ef7c <LL_RCC_HSI_IsReady+0x18>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	e000      	b.n	800ef7e <LL_RCC_HSI_IsReady+0x1a>
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bc80      	pop	{r7}
 800ef84:	4770      	bx	lr

0800ef86 <LL_RCC_HSI_SetCalibTrimming>:
{
 800ef86:	b480      	push	{r7}
 800ef88:	b083      	sub	sp, #12
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800ef8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	061b      	lsls	r3, r3, #24
 800ef9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800efa0:	4313      	orrs	r3, r2
 800efa2:	604b      	str	r3, [r1, #4]
}
 800efa4:	bf00      	nop
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bc80      	pop	{r7}
 800efac:	4770      	bx	lr

0800efae <LL_RCC_LSE_IsReady>:
{
 800efae:	b480      	push	{r7}
 800efb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800efb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efba:	f003 0302 	and.w	r3, r3, #2
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d101      	bne.n	800efc6 <LL_RCC_LSE_IsReady+0x18>
 800efc2:	2301      	movs	r3, #1
 800efc4:	e000      	b.n	800efc8 <LL_RCC_LSE_IsReady+0x1a>
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	46bd      	mov	sp, r7
 800efcc:	bc80      	pop	{r7}
 800efce:	4770      	bx	lr

0800efd0 <LL_RCC_LSI_Enable>:
{
 800efd0:	b480      	push	{r7}
 800efd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800efd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800efdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800efe0:	f043 0301 	orr.w	r3, r3, #1
 800efe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800efe8:	bf00      	nop
 800efea:	46bd      	mov	sp, r7
 800efec:	bc80      	pop	{r7}
 800efee:	4770      	bx	lr

0800eff0 <LL_RCC_LSI_Disable>:
{
 800eff0:	b480      	push	{r7}
 800eff2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800eff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800effc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f000:	f023 0301 	bic.w	r3, r3, #1
 800f004:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800f008:	bf00      	nop
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bc80      	pop	{r7}
 800f00e:	4770      	bx	lr

0800f010 <LL_RCC_LSI_IsReady>:
{
 800f010:	b480      	push	{r7}
 800f012:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800f014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f01c:	f003 0302 	and.w	r3, r3, #2
 800f020:	2b02      	cmp	r3, #2
 800f022:	d101      	bne.n	800f028 <LL_RCC_LSI_IsReady+0x18>
 800f024:	2301      	movs	r3, #1
 800f026:	e000      	b.n	800f02a <LL_RCC_LSI_IsReady+0x1a>
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bc80      	pop	{r7}
 800f030:	4770      	bx	lr

0800f032 <LL_RCC_MSI_Enable>:
{
 800f032:	b480      	push	{r7}
 800f034:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800f036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f040:	f043 0301 	orr.w	r3, r3, #1
 800f044:	6013      	str	r3, [r2, #0]
}
 800f046:	bf00      	nop
 800f048:	46bd      	mov	sp, r7
 800f04a:	bc80      	pop	{r7}
 800f04c:	4770      	bx	lr

0800f04e <LL_RCC_MSI_Disable>:
{
 800f04e:	b480      	push	{r7}
 800f050:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800f052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f05c:	f023 0301 	bic.w	r3, r3, #1
 800f060:	6013      	str	r3, [r2, #0]
}
 800f062:	bf00      	nop
 800f064:	46bd      	mov	sp, r7
 800f066:	bc80      	pop	{r7}
 800f068:	4770      	bx	lr

0800f06a <LL_RCC_MSI_IsReady>:
{
 800f06a:	b480      	push	{r7}
 800f06c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800f06e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f003 0302 	and.w	r3, r3, #2
 800f078:	2b02      	cmp	r3, #2
 800f07a:	d101      	bne.n	800f080 <LL_RCC_MSI_IsReady+0x16>
 800f07c:	2301      	movs	r3, #1
 800f07e:	e000      	b.n	800f082 <LL_RCC_MSI_IsReady+0x18>
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	46bd      	mov	sp, r7
 800f086:	bc80      	pop	{r7}
 800f088:	4770      	bx	lr

0800f08a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800f08a:	b480      	push	{r7}
 800f08c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800f08e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f003 0308 	and.w	r3, r3, #8
 800f098:	2b08      	cmp	r3, #8
 800f09a:	d101      	bne.n	800f0a0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800f09c:	2301      	movs	r3, #1
 800f09e:	e000      	b.n	800f0a2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800f0a0:	2300      	movs	r3, #0
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bc80      	pop	{r7}
 800f0a8:	4770      	bx	lr

0800f0aa <LL_RCC_MSI_GetRange>:
{
 800f0aa:	b480      	push	{r7}
 800f0ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800f0ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bc80      	pop	{r7}
 800f0be:	4770      	bx	lr

0800f0c0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800f0c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f0cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bc80      	pop	{r7}
 800f0d6:	4770      	bx	lr

0800f0d8 <LL_RCC_MSI_SetCalibTrimming>:
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b083      	sub	sp, #12
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800f0e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	021b      	lsls	r3, r3, #8
 800f0ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	604b      	str	r3, [r1, #4]
}
 800f0f6:	bf00      	nop
 800f0f8:	370c      	adds	r7, #12
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bc80      	pop	{r7}
 800f0fe:	4770      	bx	lr

0800f100 <LL_RCC_SetSysClkSource>:
{
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800f108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f10c:	689b      	ldr	r3, [r3, #8]
 800f10e:	f023 0203 	bic.w	r2, r3, #3
 800f112:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	4313      	orrs	r3, r2
 800f11a:	608b      	str	r3, [r1, #8]
}
 800f11c:	bf00      	nop
 800f11e:	370c      	adds	r7, #12
 800f120:	46bd      	mov	sp, r7
 800f122:	bc80      	pop	{r7}
 800f124:	4770      	bx	lr

0800f126 <LL_RCC_GetSysClkSource>:
{
 800f126:	b480      	push	{r7}
 800f128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f12a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	f003 030c 	and.w	r3, r3, #12
}
 800f134:	4618      	mov	r0, r3
 800f136:	46bd      	mov	sp, r7
 800f138:	bc80      	pop	{r7}
 800f13a:	4770      	bx	lr

0800f13c <LL_RCC_SetAHBPrescaler>:
{
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800f144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f148:	689b      	ldr	r3, [r3, #8]
 800f14a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f14e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4313      	orrs	r3, r2
 800f156:	608b      	str	r3, [r1, #8]
}
 800f158:	bf00      	nop
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bc80      	pop	{r7}
 800f160:	4770      	bx	lr

0800f162 <LL_RCC_SetAHB3Prescaler>:
{
 800f162:	b480      	push	{r7}
 800f164:	b083      	sub	sp, #12
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800f16a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f16e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f172:	f023 020f 	bic.w	r2, r3, #15
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	091b      	lsrs	r3, r3, #4
 800f17a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f17e:	4313      	orrs	r3, r2
 800f180:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800f184:	bf00      	nop
 800f186:	370c      	adds	r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	bc80      	pop	{r7}
 800f18c:	4770      	bx	lr

0800f18e <LL_RCC_SetAPB1Prescaler>:
{
 800f18e:	b480      	push	{r7}
 800f190:	b083      	sub	sp, #12
 800f192:	af00      	add	r7, sp, #0
 800f194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800f196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f1a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	608b      	str	r3, [r1, #8]
}
 800f1aa:	bf00      	nop
 800f1ac:	370c      	adds	r7, #12
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bc80      	pop	{r7}
 800f1b2:	4770      	bx	lr

0800f1b4 <LL_RCC_SetAPB2Prescaler>:
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800f1bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f1c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	608b      	str	r3, [r1, #8]
}
 800f1d0:	bf00      	nop
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bc80      	pop	{r7}
 800f1d8:	4770      	bx	lr

0800f1da <LL_RCC_GetAHBPrescaler>:
{
 800f1da:	b480      	push	{r7}
 800f1dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800f1de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bc80      	pop	{r7}
 800f1ee:	4770      	bx	lr

0800f1f0 <LL_RCC_GetAHB3Prescaler>:
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800f1f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f1fc:	011b      	lsls	r3, r3, #4
 800f1fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f202:	4618      	mov	r0, r3
 800f204:	46bd      	mov	sp, r7
 800f206:	bc80      	pop	{r7}
 800f208:	4770      	bx	lr

0800f20a <LL_RCC_GetAPB1Prescaler>:
{
 800f20a:	b480      	push	{r7}
 800f20c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800f20e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800f218:	4618      	mov	r0, r3
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bc80      	pop	{r7}
 800f21e:	4770      	bx	lr

0800f220 <LL_RCC_GetAPB2Prescaler>:
{
 800f220:	b480      	push	{r7}
 800f222:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800f224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800f22e:	4618      	mov	r0, r3
 800f230:	46bd      	mov	sp, r7
 800f232:	bc80      	pop	{r7}
 800f234:	4770      	bx	lr

0800f236 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800f236:	b480      	push	{r7}
 800f238:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800f23a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f248:	6013      	str	r3, [r2, #0]
}
 800f24a:	bf00      	nop
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bc80      	pop	{r7}
 800f250:	4770      	bx	lr

0800f252 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800f252:	b480      	push	{r7}
 800f254:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800f256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f264:	6013      	str	r3, [r2, #0]
}
 800f266:	bf00      	nop
 800f268:	46bd      	mov	sp, r7
 800f26a:	bc80      	pop	{r7}
 800f26c:	4770      	bx	lr

0800f26e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800f26e:	b480      	push	{r7}
 800f270:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800f272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f27c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f280:	d101      	bne.n	800f286 <LL_RCC_PLL_IsReady+0x18>
 800f282:	2301      	movs	r3, #1
 800f284:	e000      	b.n	800f288 <LL_RCC_PLL_IsReady+0x1a>
 800f286:	2300      	movs	r3, #0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bc80      	pop	{r7}
 800f28e:	4770      	bx	lr

0800f290 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800f290:	b480      	push	{r7}
 800f292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800f294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	0a1b      	lsrs	r3, r3, #8
 800f29c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bc80      	pop	{r7}
 800f2a6:	4770      	bx	lr

0800f2a8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800f2ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bc80      	pop	{r7}
 800f2bc:	4770      	bx	lr

0800f2be <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800f2be:	b480      	push	{r7}
 800f2c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800f2c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bc80      	pop	{r7}
 800f2d2:	4770      	bx	lr

0800f2d4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800f2d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2dc:	68db      	ldr	r3, [r3, #12]
 800f2de:	f003 0303 	and.w	r3, r3, #3
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bc80      	pop	{r7}
 800f2e8:	4770      	bx	lr

0800f2ea <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800f2ea:	b480      	push	{r7}
 800f2ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800f2ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2fc:	d101      	bne.n	800f302 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800f2fe:	2301      	movs	r3, #1
 800f300:	e000      	b.n	800f304 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800f302:	2300      	movs	r3, #0
}
 800f304:	4618      	mov	r0, r3
 800f306:	46bd      	mov	sp, r7
 800f308:	bc80      	pop	{r7}
 800f30a:	4770      	bx	lr

0800f30c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800f30c:	b480      	push	{r7}
 800f30e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800f310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f314:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f320:	d101      	bne.n	800f326 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800f322:	2301      	movs	r3, #1
 800f324:	e000      	b.n	800f328 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800f326:	2300      	movs	r3, #0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bc80      	pop	{r7}
 800f32e:	4770      	bx	lr

0800f330 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800f330:	b480      	push	{r7}
 800f332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800f334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f338:	689b      	ldr	r3, [r3, #8]
 800f33a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f33e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f342:	d101      	bne.n	800f348 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800f344:	2301      	movs	r3, #1
 800f346:	e000      	b.n	800f34a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800f348:	2300      	movs	r3, #0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bc80      	pop	{r7}
 800f350:	4770      	bx	lr

0800f352 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800f352:	b480      	push	{r7}
 800f354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800f356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f360:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f364:	d101      	bne.n	800f36a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800f366:	2301      	movs	r3, #1
 800f368:	e000      	b.n	800f36c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	46bd      	mov	sp, r7
 800f370:	bc80      	pop	{r7}
 800f372:	4770      	bx	lr

0800f374 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b088      	sub	sp, #32
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d101      	bne.n	800f386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f382:	2301      	movs	r3, #1
 800f384:	e36f      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f386:	f7ff fece 	bl	800f126 <LL_RCC_GetSysClkSource>
 800f38a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f38c:	f7ff ffa2 	bl	800f2d4 <LL_RCC_PLL_GetMainSource>
 800f390:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f003 0320 	and.w	r3, r3, #32
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f000 80c4 	beq.w	800f528 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d005      	beq.n	800f3b2 <HAL_RCC_OscConfig+0x3e>
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	2b0c      	cmp	r3, #12
 800f3aa:	d176      	bne.n	800f49a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f3ac:	69bb      	ldr	r3, [r7, #24]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d173      	bne.n	800f49a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a1b      	ldr	r3, [r3, #32]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d101      	bne.n	800f3be <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	e353      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f3c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f003 0308 	and.w	r3, r3, #8
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d005      	beq.n	800f3dc <HAL_RCC_OscConfig+0x68>
 800f3d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3da:	e006      	b.n	800f3ea <HAL_RCC_OscConfig+0x76>
 800f3dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f3e4:	091b      	lsrs	r3, r3, #4
 800f3e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d222      	bcs.n	800f434 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f000 fd7a 	bl	800feec <RCC_SetFlashLatencyFromMSIRange>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d001      	beq.n	800f402 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800f3fe:	2301      	movs	r3, #1
 800f400:	e331      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f40c:	f043 0308 	orr.w	r3, r3, #8
 800f410:	6013      	str	r3, [r2, #0]
 800f412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f424:	4313      	orrs	r3, r2
 800f426:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7ff fe53 	bl	800f0d8 <LL_RCC_MSI_SetCalibTrimming>
 800f432:	e021      	b.n	800f478 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f43e:	f043 0308 	orr.w	r3, r3, #8
 800f442:	6013      	str	r3, [r2, #0]
 800f444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f456:	4313      	orrs	r3, r2
 800f458:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45e:	4618      	mov	r0, r3
 800f460:	f7ff fe3a 	bl	800f0d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f468:	4618      	mov	r0, r3
 800f46a:	f000 fd3f 	bl	800feec <RCC_SetFlashLatencyFromMSIRange>
 800f46e:	4603      	mov	r3, r0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800f474:	2301      	movs	r3, #1
 800f476:	e2f6      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f478:	f000 fcc2 	bl	800fe00 <HAL_RCC_GetHCLKFreq>
 800f47c:	4603      	mov	r3, r0
 800f47e:	4aa7      	ldr	r2, [pc, #668]	; (800f71c <HAL_RCC_OscConfig+0x3a8>)
 800f480:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800f482:	4ba7      	ldr	r3, [pc, #668]	; (800f720 <HAL_RCC_OscConfig+0x3ac>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4618      	mov	r0, r3
 800f488:	f7fb f908 	bl	800a69c <HAL_InitTick>
 800f48c:	4603      	mov	r3, r0
 800f48e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800f490:	7cfb      	ldrb	r3, [r7, #19]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d047      	beq.n	800f526 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800f496:	7cfb      	ldrb	r3, [r7, #19]
 800f498:	e2e5      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6a1b      	ldr	r3, [r3, #32]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d02c      	beq.n	800f4fc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f4a2:	f7ff fdc6 	bl	800f032 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f4a6:	f7fd fd43 	bl	800cf30 <HAL_GetTick>
 800f4aa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800f4ac:	e008      	b.n	800f4c0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f4ae:	f7fd fd3f 	bl	800cf30 <HAL_GetTick>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	1ad3      	subs	r3, r2, r3
 800f4b8:	2b02      	cmp	r3, #2
 800f4ba:	d901      	bls.n	800f4c0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800f4bc:	2303      	movs	r3, #3
 800f4be:	e2d2      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800f4c0:	f7ff fdd3 	bl	800f06a <LL_RCC_MSI_IsReady>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d0f1      	beq.n	800f4ae <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f4ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f4d4:	f043 0308 	orr.w	r3, r3, #8
 800f4d8:	6013      	str	r3, [r2, #0]
 800f4da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7ff fdef 	bl	800f0d8 <LL_RCC_MSI_SetCalibTrimming>
 800f4fa:	e015      	b.n	800f528 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f4fc:	f7ff fda7 	bl	800f04e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f500:	f7fd fd16 	bl	800cf30 <HAL_GetTick>
 800f504:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800f506:	e008      	b.n	800f51a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f508:	f7fd fd12 	bl	800cf30 <HAL_GetTick>
 800f50c:	4602      	mov	r2, r0
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	1ad3      	subs	r3, r2, r3
 800f512:	2b02      	cmp	r3, #2
 800f514:	d901      	bls.n	800f51a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800f516:	2303      	movs	r3, #3
 800f518:	e2a5      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800f51a:	f7ff fda6 	bl	800f06a <LL_RCC_MSI_IsReady>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d1f1      	bne.n	800f508 <HAL_RCC_OscConfig+0x194>
 800f524:	e000      	b.n	800f528 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f526:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	d058      	beq.n	800f5e6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	2b08      	cmp	r3, #8
 800f538:	d005      	beq.n	800f546 <HAL_RCC_OscConfig+0x1d2>
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	2b0c      	cmp	r3, #12
 800f53e:	d108      	bne.n	800f552 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f540:	69bb      	ldr	r3, [r7, #24]
 800f542:	2b03      	cmp	r3, #3
 800f544:	d105      	bne.n	800f552 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	685b      	ldr	r3, [r3, #4]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d14b      	bne.n	800f5e6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	e289      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800f552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f564:	4313      	orrs	r3, r2
 800f566:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f570:	d102      	bne.n	800f578 <HAL_RCC_OscConfig+0x204>
 800f572:	f7ff fcae 	bl	800eed2 <LL_RCC_HSE_Enable>
 800f576:	e00d      	b.n	800f594 <HAL_RCC_OscConfig+0x220>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800f580:	d104      	bne.n	800f58c <HAL_RCC_OscConfig+0x218>
 800f582:	f7ff fc79 	bl	800ee78 <LL_RCC_HSE_EnableTcxo>
 800f586:	f7ff fca4 	bl	800eed2 <LL_RCC_HSE_Enable>
 800f58a:	e003      	b.n	800f594 <HAL_RCC_OscConfig+0x220>
 800f58c:	f7ff fcaf 	bl	800eeee <LL_RCC_HSE_Disable>
 800f590:	f7ff fc80 	bl	800ee94 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d012      	beq.n	800f5c2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f59c:	f7fd fcc8 	bl	800cf30 <HAL_GetTick>
 800f5a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800f5a2:	e008      	b.n	800f5b6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f5a4:	f7fd fcc4 	bl	800cf30 <HAL_GetTick>
 800f5a8:	4602      	mov	r2, r0
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	1ad3      	subs	r3, r2, r3
 800f5ae:	2b64      	cmp	r3, #100	; 0x64
 800f5b0:	d901      	bls.n	800f5b6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800f5b2:	2303      	movs	r3, #3
 800f5b4:	e257      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800f5b6:	f7ff fca8 	bl	800ef0a <LL_RCC_HSE_IsReady>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d0f1      	beq.n	800f5a4 <HAL_RCC_OscConfig+0x230>
 800f5c0:	e011      	b.n	800f5e6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f5c2:	f7fd fcb5 	bl	800cf30 <HAL_GetTick>
 800f5c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800f5c8:	e008      	b.n	800f5dc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f5ca:	f7fd fcb1 	bl	800cf30 <HAL_GetTick>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	1ad3      	subs	r3, r2, r3
 800f5d4:	2b64      	cmp	r3, #100	; 0x64
 800f5d6:	d901      	bls.n	800f5dc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800f5d8:	2303      	movs	r3, #3
 800f5da:	e244      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800f5dc:	f7ff fc95 	bl	800ef0a <LL_RCC_HSE_IsReady>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d1f1      	bne.n	800f5ca <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f003 0302 	and.w	r3, r3, #2
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d046      	beq.n	800f680 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	2b04      	cmp	r3, #4
 800f5f6:	d005      	beq.n	800f604 <HAL_RCC_OscConfig+0x290>
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	2b0c      	cmp	r3, #12
 800f5fc:	d10e      	bne.n	800f61c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	2b02      	cmp	r3, #2
 800f602:	d10b      	bne.n	800f61c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	691b      	ldr	r3, [r3, #16]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d101      	bne.n	800f610 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800f60c:	2301      	movs	r3, #1
 800f60e:	e22a      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	695b      	ldr	r3, [r3, #20]
 800f614:	4618      	mov	r0, r3
 800f616:	f7ff fcb6 	bl	800ef86 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f61a:	e031      	b.n	800f680 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	691b      	ldr	r3, [r3, #16]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d019      	beq.n	800f658 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f624:	f7ff fc82 	bl	800ef2c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f628:	f7fd fc82 	bl	800cf30 <HAL_GetTick>
 800f62c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800f62e:	e008      	b.n	800f642 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f630:	f7fd fc7e 	bl	800cf30 <HAL_GetTick>
 800f634:	4602      	mov	r2, r0
 800f636:	697b      	ldr	r3, [r7, #20]
 800f638:	1ad3      	subs	r3, r2, r3
 800f63a:	2b02      	cmp	r3, #2
 800f63c:	d901      	bls.n	800f642 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800f63e:	2303      	movs	r3, #3
 800f640:	e211      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800f642:	f7ff fc8f 	bl	800ef64 <LL_RCC_HSI_IsReady>
 800f646:	4603      	mov	r3, r0
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d0f1      	beq.n	800f630 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	695b      	ldr	r3, [r3, #20]
 800f650:	4618      	mov	r0, r3
 800f652:	f7ff fc98 	bl	800ef86 <LL_RCC_HSI_SetCalibTrimming>
 800f656:	e013      	b.n	800f680 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f658:	f7ff fc76 	bl	800ef48 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f65c:	f7fd fc68 	bl	800cf30 <HAL_GetTick>
 800f660:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800f662:	e008      	b.n	800f676 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f664:	f7fd fc64 	bl	800cf30 <HAL_GetTick>
 800f668:	4602      	mov	r2, r0
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	1ad3      	subs	r3, r2, r3
 800f66e:	2b02      	cmp	r3, #2
 800f670:	d901      	bls.n	800f676 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800f672:	2303      	movs	r3, #3
 800f674:	e1f7      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800f676:	f7ff fc75 	bl	800ef64 <LL_RCC_HSI_IsReady>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d1f1      	bne.n	800f664 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f003 0308 	and.w	r3, r3, #8
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d06e      	beq.n	800f76a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	699b      	ldr	r3, [r3, #24]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d056      	beq.n	800f742 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800f694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f69c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	69da      	ldr	r2, [r3, #28]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f003 0310 	and.w	r3, r3, #16
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d031      	beq.n	800f710 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f003 0302 	and.w	r3, r3, #2
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d006      	beq.n	800f6c4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d101      	bne.n	800f6c4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	e1d0      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f003 0301 	and.w	r3, r3, #1
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d013      	beq.n	800f6f6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800f6ce:	f7ff fc8f 	bl	800eff0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f6d2:	f7fd fc2d 	bl	800cf30 <HAL_GetTick>
 800f6d6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800f6d8:	e008      	b.n	800f6ec <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f6da:	f7fd fc29 	bl	800cf30 <HAL_GetTick>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	2b11      	cmp	r3, #17
 800f6e6:	d901      	bls.n	800f6ec <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	e1bc      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800f6ec:	f7ff fc90 	bl	800f010 <LL_RCC_LSI_IsReady>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1f1      	bne.n	800f6da <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800f6f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f6fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6fe:	f023 0210 	bic.w	r2, r3, #16
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	69db      	ldr	r3, [r3, #28]
 800f706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f70a:	4313      	orrs	r3, r2
 800f70c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f710:	f7ff fc5e 	bl	800efd0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f714:	f7fd fc0c 	bl	800cf30 <HAL_GetTick>
 800f718:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800f71a:	e00c      	b.n	800f736 <HAL_RCC_OscConfig+0x3c2>
 800f71c:	20000080 	.word	0x20000080
 800f720:	20000088 	.word	0x20000088
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f724:	f7fd fc04 	bl	800cf30 <HAL_GetTick>
 800f728:	4602      	mov	r2, r0
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	2b11      	cmp	r3, #17
 800f730:	d901      	bls.n	800f736 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800f732:	2303      	movs	r3, #3
 800f734:	e197      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800f736:	f7ff fc6b 	bl	800f010 <LL_RCC_LSI_IsReady>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d0f1      	beq.n	800f724 <HAL_RCC_OscConfig+0x3b0>
 800f740:	e013      	b.n	800f76a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f742:	f7ff fc55 	bl	800eff0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f746:	f7fd fbf3 	bl	800cf30 <HAL_GetTick>
 800f74a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800f74c:	e008      	b.n	800f760 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f74e:	f7fd fbef 	bl	800cf30 <HAL_GetTick>
 800f752:	4602      	mov	r2, r0
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	2b11      	cmp	r3, #17
 800f75a:	d901      	bls.n	800f760 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800f75c:	2303      	movs	r3, #3
 800f75e:	e182      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800f760:	f7ff fc56 	bl	800f010 <LL_RCC_LSI_IsReady>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d1f1      	bne.n	800f74e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	f003 0304 	and.w	r3, r3, #4
 800f772:	2b00      	cmp	r3, #0
 800f774:	f000 80d8 	beq.w	800f928 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800f778:	f7ff fb6c 	bl	800ee54 <LL_PWR_IsEnabledBkUpAccess>
 800f77c:	4603      	mov	r3, r0
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d113      	bne.n	800f7aa <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f782:	f7ff fb4d 	bl	800ee20 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f786:	f7fd fbd3 	bl	800cf30 <HAL_GetTick>
 800f78a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800f78c:	e008      	b.n	800f7a0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f78e:	f7fd fbcf 	bl	800cf30 <HAL_GetTick>
 800f792:	4602      	mov	r2, r0
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	1ad3      	subs	r3, r2, r3
 800f798:	2b02      	cmp	r3, #2
 800f79a:	d901      	bls.n	800f7a0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800f79c:	2303      	movs	r3, #3
 800f79e:	e162      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800f7a0:	f7ff fb58 	bl	800ee54 <LL_PWR_IsEnabledBkUpAccess>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d0f1      	beq.n	800f78e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d07b      	beq.n	800f8aa <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	2b85      	cmp	r3, #133	; 0x85
 800f7b8:	d003      	beq.n	800f7c2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	2b05      	cmp	r3, #5
 800f7c0:	d109      	bne.n	800f7d6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f7c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f7ce:	f043 0304 	orr.w	r3, r3, #4
 800f7d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f7d6:	f7fd fbab 	bl	800cf30 <HAL_GetTick>
 800f7da:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f7dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f7e8:	f043 0301 	orr.w	r3, r3, #1
 800f7ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800f7f0:	e00a      	b.n	800f808 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f7f2:	f7fd fb9d 	bl	800cf30 <HAL_GetTick>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f800:	4293      	cmp	r3, r2
 800f802:	d901      	bls.n	800f808 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800f804:	2303      	movs	r3, #3
 800f806:	e12e      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800f808:	f7ff fbd1 	bl	800efae <LL_RCC_LSE_IsReady>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d0ef      	beq.n	800f7f2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	2b81      	cmp	r3, #129	; 0x81
 800f818:	d003      	beq.n	800f822 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	2b85      	cmp	r3, #133	; 0x85
 800f820:	d121      	bne.n	800f866 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f822:	f7fd fb85 	bl	800cf30 <HAL_GetTick>
 800f826:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800f828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f82c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800f83c:	e00a      	b.n	800f854 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f83e:	f7fd fb77 	bl	800cf30 <HAL_GetTick>
 800f842:	4602      	mov	r2, r0
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	1ad3      	subs	r3, r2, r3
 800f848:	f241 3288 	movw	r2, #5000	; 0x1388
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d901      	bls.n	800f854 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800f850:	2303      	movs	r3, #3
 800f852:	e108      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800f854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f85c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f860:	2b00      	cmp	r3, #0
 800f862:	d0ec      	beq.n	800f83e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800f864:	e060      	b.n	800f928 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f866:	f7fd fb63 	bl	800cf30 <HAL_GetTick>
 800f86a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800f86c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f87c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f880:	e00a      	b.n	800f898 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f882:	f7fd fb55 	bl	800cf30 <HAL_GetTick>
 800f886:	4602      	mov	r2, r0
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f890:	4293      	cmp	r3, r2
 800f892:	d901      	bls.n	800f898 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800f894:	2303      	movs	r3, #3
 800f896:	e0e6      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f89c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1ec      	bne.n	800f882 <HAL_RCC_OscConfig+0x50e>
 800f8a8:	e03e      	b.n	800f928 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f8aa:	f7fd fb41 	bl	800cf30 <HAL_GetTick>
 800f8ae:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800f8b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f8bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f8c4:	e00a      	b.n	800f8dc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8c6:	f7fd fb33 	bl	800cf30 <HAL_GetTick>
 800f8ca:	4602      	mov	r2, r0
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	1ad3      	subs	r3, r2, r3
 800f8d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d901      	bls.n	800f8dc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800f8d8:	2303      	movs	r3, #3
 800f8da:	e0c4      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f8dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d1ec      	bne.n	800f8c6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f8ec:	f7fd fb20 	bl	800cf30 <HAL_GetTick>
 800f8f0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f8f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f8fe:	f023 0301 	bic.w	r3, r3, #1
 800f902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800f906:	e00a      	b.n	800f91e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f908:	f7fd fb12 	bl	800cf30 <HAL_GetTick>
 800f90c:	4602      	mov	r2, r0
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	f241 3288 	movw	r2, #5000	; 0x1388
 800f916:	4293      	cmp	r3, r2
 800f918:	d901      	bls.n	800f91e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800f91a:	2303      	movs	r3, #3
 800f91c:	e0a3      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800f91e:	f7ff fb46 	bl	800efae <LL_RCC_LSE_IsReady>
 800f922:	4603      	mov	r3, r0
 800f924:	2b00      	cmp	r3, #0
 800f926:	d1ef      	bne.n	800f908 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f000 8099 	beq.w	800fa64 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	2b0c      	cmp	r3, #12
 800f936:	d06c      	beq.n	800fa12 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d14b      	bne.n	800f9d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f940:	f7ff fc87 	bl	800f252 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f944:	f7fd faf4 	bl	800cf30 <HAL_GetTick>
 800f948:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800f94a:	e008      	b.n	800f95e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f94c:	f7fd faf0 	bl	800cf30 <HAL_GetTick>
 800f950:	4602      	mov	r2, r0
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	2b0a      	cmp	r3, #10
 800f958:	d901      	bls.n	800f95e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800f95a:	2303      	movs	r3, #3
 800f95c:	e083      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800f95e:	f7ff fc86 	bl	800f26e <LL_RCC_PLL_IsReady>
 800f962:	4603      	mov	r3, r0
 800f964:	2b00      	cmp	r3, #0
 800f966:	d1f1      	bne.n	800f94c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f96c:	68da      	ldr	r2, [r3, #12]
 800f96e:	4b40      	ldr	r3, [pc, #256]	; (800fa70 <HAL_RCC_OscConfig+0x6fc>)
 800f970:	4013      	ands	r3, r2
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f97a:	4311      	orrs	r1, r2
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f980:	0212      	lsls	r2, r2, #8
 800f982:	4311      	orrs	r1, r2
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f988:	4311      	orrs	r1, r2
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f98e:	4311      	orrs	r1, r2
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f994:	430a      	orrs	r2, r1
 800f996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f99a:	4313      	orrs	r3, r2
 800f99c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f99e:	f7ff fc4a 	bl	800f236 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f9a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f9a6:	68db      	ldr	r3, [r3, #12]
 800f9a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f9ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9b2:	f7fd fabd 	bl	800cf30 <HAL_GetTick>
 800f9b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800f9b8:	e008      	b.n	800f9cc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9ba:	f7fd fab9 	bl	800cf30 <HAL_GetTick>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	1ad3      	subs	r3, r2, r3
 800f9c4:	2b0a      	cmp	r3, #10
 800f9c6:	d901      	bls.n	800f9cc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800f9c8:	2303      	movs	r3, #3
 800f9ca:	e04c      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800f9cc:	f7ff fc4f 	bl	800f26e <LL_RCC_PLL_IsReady>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d0f1      	beq.n	800f9ba <HAL_RCC_OscConfig+0x646>
 800f9d6:	e045      	b.n	800fa64 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f9d8:	f7ff fc3b 	bl	800f252 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9dc:	f7fd faa8 	bl	800cf30 <HAL_GetTick>
 800f9e0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800f9e2:	e008      	b.n	800f9f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9e4:	f7fd faa4 	bl	800cf30 <HAL_GetTick>
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	1ad3      	subs	r3, r2, r3
 800f9ee:	2b0a      	cmp	r3, #10
 800f9f0:	d901      	bls.n	800f9f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800f9f2:	2303      	movs	r3, #3
 800f9f4:	e037      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800f9f6:	f7ff fc3a 	bl	800f26e <LL_RCC_PLL_IsReady>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d1f1      	bne.n	800f9e4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800fa00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fa04:	68da      	ldr	r2, [r3, #12]
 800fa06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fa0a:	4b1a      	ldr	r3, [pc, #104]	; (800fa74 <HAL_RCC_OscConfig+0x700>)
 800fa0c:	4013      	ands	r3, r2
 800fa0e:	60cb      	str	r3, [r1, #12]
 800fa10:	e028      	b.n	800fa64 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d101      	bne.n	800fa1e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	e023      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800fa1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	f003 0203 	and.w	r2, r3, #3
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d115      	bne.n	800fa60 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d10e      	bne.n	800fa60 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa4c:	021b      	lsls	r3, r3, #8
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d106      	bne.n	800fa60 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d001      	beq.n	800fa64 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800fa60:	2301      	movs	r3, #1
 800fa62:	e000      	b.n	800fa66 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800fa64:	2300      	movs	r3, #0
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3720      	adds	r7, #32
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	11c1808c 	.word	0x11c1808c
 800fa74:	eefefffc 	.word	0xeefefffc

0800fa78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d101      	bne.n	800fa8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e10f      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fa8c:	4b89      	ldr	r3, [pc, #548]	; (800fcb4 <HAL_RCC_ClockConfig+0x23c>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f003 0307 	and.w	r3, r3, #7
 800fa94:	683a      	ldr	r2, [r7, #0]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d91b      	bls.n	800fad2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa9a:	4b86      	ldr	r3, [pc, #536]	; (800fcb4 <HAL_RCC_ClockConfig+0x23c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f023 0207 	bic.w	r2, r3, #7
 800faa2:	4984      	ldr	r1, [pc, #528]	; (800fcb4 <HAL_RCC_ClockConfig+0x23c>)
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	4313      	orrs	r3, r2
 800faa8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800faaa:	f7fd fa41 	bl	800cf30 <HAL_GetTick>
 800faae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fab0:	e008      	b.n	800fac4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800fab2:	f7fd fa3d 	bl	800cf30 <HAL_GetTick>
 800fab6:	4602      	mov	r2, r0
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	1ad3      	subs	r3, r2, r3
 800fabc:	2b02      	cmp	r3, #2
 800fabe:	d901      	bls.n	800fac4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800fac0:	2303      	movs	r3, #3
 800fac2:	e0f3      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fac4:	4b7b      	ldr	r3, [pc, #492]	; (800fcb4 <HAL_RCC_ClockConfig+0x23c>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f003 0307 	and.w	r3, r3, #7
 800facc:	683a      	ldr	r2, [r7, #0]
 800face:	429a      	cmp	r2, r3
 800fad0:	d1ef      	bne.n	800fab2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f003 0302 	and.w	r3, r3, #2
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d016      	beq.n	800fb0c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	689b      	ldr	r3, [r3, #8]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7ff fb2a 	bl	800f13c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fae8:	f7fd fa22 	bl	800cf30 <HAL_GetTick>
 800faec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800faee:	e008      	b.n	800fb02 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800faf0:	f7fd fa1e 	bl	800cf30 <HAL_GetTick>
 800faf4:	4602      	mov	r2, r0
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	1ad3      	subs	r3, r2, r3
 800fafa:	2b02      	cmp	r3, #2
 800fafc:	d901      	bls.n	800fb02 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800fafe:	2303      	movs	r3, #3
 800fb00:	e0d4      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800fb02:	f7ff fbf2 	bl	800f2ea <LL_RCC_IsActiveFlag_HPRE>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d0f1      	beq.n	800faf0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d016      	beq.n	800fb46 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	695b      	ldr	r3, [r3, #20]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7ff fb20 	bl	800f162 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fb22:	f7fd fa05 	bl	800cf30 <HAL_GetTick>
 800fb26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800fb28:	e008      	b.n	800fb3c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fb2a:	f7fd fa01 	bl	800cf30 <HAL_GetTick>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	1ad3      	subs	r3, r2, r3
 800fb34:	2b02      	cmp	r3, #2
 800fb36:	d901      	bls.n	800fb3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800fb38:	2303      	movs	r3, #3
 800fb3a:	e0b7      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800fb3c:	f7ff fbe6 	bl	800f30c <LL_RCC_IsActiveFlag_SHDHPRE>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d0f1      	beq.n	800fb2a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f003 0304 	and.w	r3, r3, #4
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d016      	beq.n	800fb80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7ff fb19 	bl	800f18e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fb5c:	f7fd f9e8 	bl	800cf30 <HAL_GetTick>
 800fb60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800fb62:	e008      	b.n	800fb76 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fb64:	f7fd f9e4 	bl	800cf30 <HAL_GetTick>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	1ad3      	subs	r3, r2, r3
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	d901      	bls.n	800fb76 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800fb72:	2303      	movs	r3, #3
 800fb74:	e09a      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800fb76:	f7ff fbdb 	bl	800f330 <LL_RCC_IsActiveFlag_PPRE1>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d0f1      	beq.n	800fb64 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f003 0308 	and.w	r3, r3, #8
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d017      	beq.n	800fbbc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	00db      	lsls	r3, r3, #3
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7ff fb0e 	bl	800f1b4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fb98:	f7fd f9ca 	bl	800cf30 <HAL_GetTick>
 800fb9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800fb9e:	e008      	b.n	800fbb2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fba0:	f7fd f9c6 	bl	800cf30 <HAL_GetTick>
 800fba4:	4602      	mov	r2, r0
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	1ad3      	subs	r3, r2, r3
 800fbaa:	2b02      	cmp	r3, #2
 800fbac:	d901      	bls.n	800fbb2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800fbae:	2303      	movs	r3, #3
 800fbb0:	e07c      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800fbb2:	f7ff fbce 	bl	800f352 <LL_RCC_IsActiveFlag_PPRE2>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d0f1      	beq.n	800fba0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f003 0301 	and.w	r3, r3, #1
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d043      	beq.n	800fc50 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	d106      	bne.n	800fbde <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800fbd0:	f7ff f99b 	bl	800ef0a <LL_RCC_HSE_IsReady>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d11e      	bne.n	800fc18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e066      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	2b03      	cmp	r3, #3
 800fbe4:	d106      	bne.n	800fbf4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800fbe6:	f7ff fb42 	bl	800f26e <LL_RCC_PLL_IsReady>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d113      	bne.n	800fc18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	e05b      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	685b      	ldr	r3, [r3, #4]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d106      	bne.n	800fc0a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800fbfc:	f7ff fa35 	bl	800f06a <LL_RCC_MSI_IsReady>
 800fc00:	4603      	mov	r3, r0
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d108      	bne.n	800fc18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fc06:	2301      	movs	r3, #1
 800fc08:	e050      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800fc0a:	f7ff f9ab 	bl	800ef64 <LL_RCC_HSI_IsReady>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d101      	bne.n	800fc18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fc14:	2301      	movs	r3, #1
 800fc16:	e049      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7ff fa6f 	bl	800f100 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fc22:	f7fd f985 	bl	800cf30 <HAL_GetTick>
 800fc26:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fc28:	e00a      	b.n	800fc40 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fc2a:	f7fd f981 	bl	800cf30 <HAL_GetTick>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	1ad3      	subs	r3, r2, r3
 800fc34:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d901      	bls.n	800fc40 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800fc3c:	2303      	movs	r3, #3
 800fc3e:	e035      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fc40:	f7ff fa71 	bl	800f126 <LL_RCC_GetSysClkSource>
 800fc44:	4602      	mov	r2, r0
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	009b      	lsls	r3, r3, #2
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d1ec      	bne.n	800fc2a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fc50:	4b18      	ldr	r3, [pc, #96]	; (800fcb4 <HAL_RCC_ClockConfig+0x23c>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f003 0307 	and.w	r3, r3, #7
 800fc58:	683a      	ldr	r2, [r7, #0]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d21b      	bcs.n	800fc96 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fc5e:	4b15      	ldr	r3, [pc, #84]	; (800fcb4 <HAL_RCC_ClockConfig+0x23c>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f023 0207 	bic.w	r2, r3, #7
 800fc66:	4913      	ldr	r1, [pc, #76]	; (800fcb4 <HAL_RCC_ClockConfig+0x23c>)
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	4313      	orrs	r3, r2
 800fc6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fc6e:	f7fd f95f 	bl	800cf30 <HAL_GetTick>
 800fc72:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc74:	e008      	b.n	800fc88 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800fc76:	f7fd f95b 	bl	800cf30 <HAL_GetTick>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	1ad3      	subs	r3, r2, r3
 800fc80:	2b02      	cmp	r3, #2
 800fc82:	d901      	bls.n	800fc88 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800fc84:	2303      	movs	r3, #3
 800fc86:	e011      	b.n	800fcac <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fc88:	4b0a      	ldr	r3, [pc, #40]	; (800fcb4 <HAL_RCC_ClockConfig+0x23c>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f003 0307 	and.w	r3, r3, #7
 800fc90:	683a      	ldr	r2, [r7, #0]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d1ef      	bne.n	800fc76 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800fc96:	f000 f8b3 	bl	800fe00 <HAL_RCC_GetHCLKFreq>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	4a06      	ldr	r2, [pc, #24]	; (800fcb8 <HAL_RCC_ClockConfig+0x240>)
 800fc9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800fca0:	4b06      	ldr	r3, [pc, #24]	; (800fcbc <HAL_RCC_ClockConfig+0x244>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7fa fcf9 	bl	800a69c <HAL_InitTick>
 800fcaa:	4603      	mov	r3, r0
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3710      	adds	r7, #16
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	58004000 	.word	0x58004000
 800fcb8:	20000080 	.word	0x20000080
 800fcbc:	20000088 	.word	0x20000088

0800fcc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fcc0:	b590      	push	{r4, r7, lr}
 800fcc2:	b087      	sub	sp, #28
 800fcc4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800fcca:	2300      	movs	r3, #0
 800fccc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fcce:	f7ff fa2a 	bl	800f126 <LL_RCC_GetSysClkSource>
 800fcd2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fcd4:	f7ff fafe 	bl	800f2d4 <LL_RCC_PLL_GetMainSource>
 800fcd8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d005      	beq.n	800fcec <HAL_RCC_GetSysClockFreq+0x2c>
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	2b0c      	cmp	r3, #12
 800fce4:	d139      	bne.n	800fd5a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d136      	bne.n	800fd5a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800fcec:	f7ff f9cd 	bl	800f08a <LL_RCC_MSI_IsEnabledRangeSelect>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d115      	bne.n	800fd22 <HAL_RCC_GetSysClockFreq+0x62>
 800fcf6:	f7ff f9c8 	bl	800f08a <LL_RCC_MSI_IsEnabledRangeSelect>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d106      	bne.n	800fd0e <HAL_RCC_GetSysClockFreq+0x4e>
 800fd00:	f7ff f9d3 	bl	800f0aa <LL_RCC_MSI_GetRange>
 800fd04:	4603      	mov	r3, r0
 800fd06:	0a1b      	lsrs	r3, r3, #8
 800fd08:	f003 030f 	and.w	r3, r3, #15
 800fd0c:	e005      	b.n	800fd1a <HAL_RCC_GetSysClockFreq+0x5a>
 800fd0e:	f7ff f9d7 	bl	800f0c0 <LL_RCC_MSI_GetRangeAfterStandby>
 800fd12:	4603      	mov	r3, r0
 800fd14:	0a1b      	lsrs	r3, r3, #8
 800fd16:	f003 030f 	and.w	r3, r3, #15
 800fd1a:	4a36      	ldr	r2, [pc, #216]	; (800fdf4 <HAL_RCC_GetSysClockFreq+0x134>)
 800fd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd20:	e014      	b.n	800fd4c <HAL_RCC_GetSysClockFreq+0x8c>
 800fd22:	f7ff f9b2 	bl	800f08a <LL_RCC_MSI_IsEnabledRangeSelect>
 800fd26:	4603      	mov	r3, r0
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d106      	bne.n	800fd3a <HAL_RCC_GetSysClockFreq+0x7a>
 800fd2c:	f7ff f9bd 	bl	800f0aa <LL_RCC_MSI_GetRange>
 800fd30:	4603      	mov	r3, r0
 800fd32:	091b      	lsrs	r3, r3, #4
 800fd34:	f003 030f 	and.w	r3, r3, #15
 800fd38:	e005      	b.n	800fd46 <HAL_RCC_GetSysClockFreq+0x86>
 800fd3a:	f7ff f9c1 	bl	800f0c0 <LL_RCC_MSI_GetRangeAfterStandby>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	091b      	lsrs	r3, r3, #4
 800fd42:	f003 030f 	and.w	r3, r3, #15
 800fd46:	4a2b      	ldr	r2, [pc, #172]	; (800fdf4 <HAL_RCC_GetSysClockFreq+0x134>)
 800fd48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd4c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d115      	bne.n	800fd80 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800fd58:	e012      	b.n	800fd80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	2b04      	cmp	r3, #4
 800fd5e:	d102      	bne.n	800fd66 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800fd60:	4b25      	ldr	r3, [pc, #148]	; (800fdf8 <HAL_RCC_GetSysClockFreq+0x138>)
 800fd62:	617b      	str	r3, [r7, #20]
 800fd64:	e00c      	b.n	800fd80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	2b08      	cmp	r3, #8
 800fd6a:	d109      	bne.n	800fd80 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800fd6c:	f7ff f8a0 	bl	800eeb0 <LL_RCC_HSE_IsEnabledDiv2>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d102      	bne.n	800fd7c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800fd76:	4b20      	ldr	r3, [pc, #128]	; (800fdf8 <HAL_RCC_GetSysClockFreq+0x138>)
 800fd78:	617b      	str	r3, [r7, #20]
 800fd7a:	e001      	b.n	800fd80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800fd7c:	4b1f      	ldr	r3, [pc, #124]	; (800fdfc <HAL_RCC_GetSysClockFreq+0x13c>)
 800fd7e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fd80:	f7ff f9d1 	bl	800f126 <LL_RCC_GetSysClkSource>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b0c      	cmp	r3, #12
 800fd88:	d12f      	bne.n	800fdea <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800fd8a:	f7ff faa3 	bl	800f2d4 <LL_RCC_PLL_GetMainSource>
 800fd8e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2b02      	cmp	r3, #2
 800fd94:	d003      	beq.n	800fd9e <HAL_RCC_GetSysClockFreq+0xde>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2b03      	cmp	r3, #3
 800fd9a:	d003      	beq.n	800fda4 <HAL_RCC_GetSysClockFreq+0xe4>
 800fd9c:	e00d      	b.n	800fdba <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800fd9e:	4b16      	ldr	r3, [pc, #88]	; (800fdf8 <HAL_RCC_GetSysClockFreq+0x138>)
 800fda0:	60fb      	str	r3, [r7, #12]
        break;
 800fda2:	e00d      	b.n	800fdc0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800fda4:	f7ff f884 	bl	800eeb0 <LL_RCC_HSE_IsEnabledDiv2>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	d102      	bne.n	800fdb4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800fdae:	4b12      	ldr	r3, [pc, #72]	; (800fdf8 <HAL_RCC_GetSysClockFreq+0x138>)
 800fdb0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800fdb2:	e005      	b.n	800fdc0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800fdb4:	4b11      	ldr	r3, [pc, #68]	; (800fdfc <HAL_RCC_GetSysClockFreq+0x13c>)
 800fdb6:	60fb      	str	r3, [r7, #12]
        break;
 800fdb8:	e002      	b.n	800fdc0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	60fb      	str	r3, [r7, #12]
        break;
 800fdbe:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800fdc0:	f7ff fa66 	bl	800f290 <LL_RCC_PLL_GetN>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	fb03 f402 	mul.w	r4, r3, r2
 800fdcc:	f7ff fa77 	bl	800f2be <LL_RCC_PLL_GetDivider>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	091b      	lsrs	r3, r3, #4
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	fbb4 f4f3 	udiv	r4, r4, r3
 800fdda:	f7ff fa65 	bl	800f2a8 <LL_RCC_PLL_GetR>
 800fdde:	4603      	mov	r3, r0
 800fde0:	0f5b      	lsrs	r3, r3, #29
 800fde2:	3301      	adds	r3, #1
 800fde4:	fbb4 f3f3 	udiv	r3, r4, r3
 800fde8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800fdea:	697b      	ldr	r3, [r7, #20]
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	371c      	adds	r7, #28
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd90      	pop	{r4, r7, pc}
 800fdf4:	0801f964 	.word	0x0801f964
 800fdf8:	00f42400 	.word	0x00f42400
 800fdfc:	01e84800 	.word	0x01e84800

0800fe00 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fe00:	b598      	push	{r3, r4, r7, lr}
 800fe02:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800fe04:	f7ff ff5c 	bl	800fcc0 <HAL_RCC_GetSysClockFreq>
 800fe08:	4604      	mov	r4, r0
 800fe0a:	f7ff f9e6 	bl	800f1da <LL_RCC_GetAHBPrescaler>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	091b      	lsrs	r3, r3, #4
 800fe12:	f003 030f 	and.w	r3, r3, #15
 800fe16:	4a03      	ldr	r2, [pc, #12]	; (800fe24 <HAL_RCC_GetHCLKFreq+0x24>)
 800fe18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe1c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	bd98      	pop	{r3, r4, r7, pc}
 800fe24:	0801f904 	.word	0x0801f904

0800fe28 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fe28:	b598      	push	{r3, r4, r7, lr}
 800fe2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800fe2c:	f7ff ffe8 	bl	800fe00 <HAL_RCC_GetHCLKFreq>
 800fe30:	4604      	mov	r4, r0
 800fe32:	f7ff f9ea 	bl	800f20a <LL_RCC_GetAPB1Prescaler>
 800fe36:	4603      	mov	r3, r0
 800fe38:	0a1b      	lsrs	r3, r3, #8
 800fe3a:	4a03      	ldr	r2, [pc, #12]	; (800fe48 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fe3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe40:	fa24 f303 	lsr.w	r3, r4, r3
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	bd98      	pop	{r3, r4, r7, pc}
 800fe48:	0801f944 	.word	0x0801f944

0800fe4c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fe4c:	b598      	push	{r3, r4, r7, lr}
 800fe4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800fe50:	f7ff ffd6 	bl	800fe00 <HAL_RCC_GetHCLKFreq>
 800fe54:	4604      	mov	r4, r0
 800fe56:	f7ff f9e3 	bl	800f220 <LL_RCC_GetAPB2Prescaler>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	0adb      	lsrs	r3, r3, #11
 800fe5e:	4a03      	ldr	r2, [pc, #12]	; (800fe6c <HAL_RCC_GetPCLK2Freq+0x20>)
 800fe60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe64:	fa24 f303 	lsr.w	r3, r4, r3
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	bd98      	pop	{r3, r4, r7, pc}
 800fe6c:	0801f944 	.word	0x0801f944

0800fe70 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b085      	sub	sp, #20
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d02d      	beq.n	800fedc <HAL_RCC_GetClockConfig+0x6c>
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d02a      	beq.n	800fedc <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	224f      	movs	r2, #79	; 0x4f
 800fe8a:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 800fe8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fe90:	689b      	ldr	r3, [r3, #8]
 800fe92:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	f003 020c 	and.w	r2, r3, #12
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 800febc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fec0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800fec4:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	011b      	lsls	r3, r3, #4
 800feca:	b2da      	uxtb	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 800fed0:	4b05      	ldr	r3, [pc, #20]	; (800fee8 <HAL_RCC_GetClockConfig+0x78>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f003 0207 	and.w	r2, r3, #7
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	601a      	str	r2, [r3, #0]
  }
}
 800fedc:	bf00      	nop
 800fede:	3714      	adds	r7, #20
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bc80      	pop	{r7}
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	58004000 	.word	0x58004000

0800feec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800feec:	b590      	push	{r4, r7, lr}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	091b      	lsrs	r3, r3, #4
 800fef8:	f003 030f 	and.w	r3, r3, #15
 800fefc:	4a10      	ldr	r2, [pc, #64]	; (800ff40 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800fefe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff02:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800ff04:	f7ff f974 	bl	800f1f0 <LL_RCC_GetAHB3Prescaler>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	091b      	lsrs	r3, r3, #4
 800ff0c:	f003 030f 	and.w	r3, r3, #15
 800ff10:	4a0c      	ldr	r2, [pc, #48]	; (800ff44 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800ff12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff16:	68fa      	ldr	r2, [r7, #12]
 800ff18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff1c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	4a09      	ldr	r2, [pc, #36]	; (800ff48 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800ff22:	fba2 2303 	umull	r2, r3, r2, r3
 800ff26:	0c9c      	lsrs	r4, r3, #18
 800ff28:	f7fe ff88 	bl	800ee3c <HAL_PWREx_GetVoltageRange>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	4619      	mov	r1, r3
 800ff30:	4620      	mov	r0, r4
 800ff32:	f000 f80b 	bl	800ff4c <RCC_SetFlashLatency>
 800ff36:	4603      	mov	r3, r0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3714      	adds	r7, #20
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd90      	pop	{r4, r7, pc}
 800ff40:	0801f964 	.word	0x0801f964
 800ff44:	0801f904 	.word	0x0801f904
 800ff48:	431bde83 	.word	0x431bde83

0800ff4c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b08e      	sub	sp, #56	; 0x38
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800ff56:	4a3a      	ldr	r2, [pc, #232]	; (8010040 <RCC_SetFlashLatency+0xf4>)
 800ff58:	f107 0320 	add.w	r3, r7, #32
 800ff5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff60:	6018      	str	r0, [r3, #0]
 800ff62:	3304      	adds	r3, #4
 800ff64:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800ff66:	4a37      	ldr	r2, [pc, #220]	; (8010044 <RCC_SetFlashLatency+0xf8>)
 800ff68:	f107 0318 	add.w	r3, r7, #24
 800ff6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff70:	6018      	str	r0, [r3, #0]
 800ff72:	3304      	adds	r3, #4
 800ff74:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800ff76:	4a34      	ldr	r2, [pc, #208]	; (8010048 <RCC_SetFlashLatency+0xfc>)
 800ff78:	f107 030c 	add.w	r3, r7, #12
 800ff7c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ff82:	2300      	movs	r3, #0
 800ff84:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff8c:	d11b      	bne.n	800ffc6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ff8e:	2300      	movs	r3, #0
 800ff90:	633b      	str	r3, [r7, #48]	; 0x30
 800ff92:	e014      	b.n	800ffbe <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800ff94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff96:	005b      	lsls	r3, r3, #1
 800ff98:	3338      	adds	r3, #56	; 0x38
 800ff9a:	443b      	add	r3, r7
 800ff9c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d807      	bhi.n	800ffb8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ffa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	3338      	adds	r3, #56	; 0x38
 800ffae:	443b      	add	r3, r7
 800ffb0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ffb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffb6:	e021      	b.n	800fffc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ffb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffba:	3301      	adds	r3, #1
 800ffbc:	633b      	str	r3, [r7, #48]	; 0x30
 800ffbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc0:	2b02      	cmp	r3, #2
 800ffc2:	d9e7      	bls.n	800ff94 <RCC_SetFlashLatency+0x48>
 800ffc4:	e01a      	b.n	800fffc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffca:	e014      	b.n	800fff6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800ffcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffce:	005b      	lsls	r3, r3, #1
 800ffd0:	3338      	adds	r3, #56	; 0x38
 800ffd2:	443b      	add	r3, r7
 800ffd4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800ffd8:	461a      	mov	r2, r3
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	d807      	bhi.n	800fff0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ffe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe2:	009b      	lsls	r3, r3, #2
 800ffe4:	3338      	adds	r3, #56	; 0x38
 800ffe6:	443b      	add	r3, r7
 800ffe8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ffec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ffee:	e005      	b.n	800fffc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800fff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff2:	3301      	adds	r3, #1
 800fff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff8:	2b02      	cmp	r3, #2
 800fffa:	d9e7      	bls.n	800ffcc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800fffc:	4b13      	ldr	r3, [pc, #76]	; (801004c <RCC_SetFlashLatency+0x100>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f023 0207 	bic.w	r2, r3, #7
 8010004:	4911      	ldr	r1, [pc, #68]	; (801004c <RCC_SetFlashLatency+0x100>)
 8010006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010008:	4313      	orrs	r3, r2
 801000a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801000c:	f7fc ff90 	bl	800cf30 <HAL_GetTick>
 8010010:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8010012:	e008      	b.n	8010026 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8010014:	f7fc ff8c 	bl	800cf30 <HAL_GetTick>
 8010018:	4602      	mov	r2, r0
 801001a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801001c:	1ad3      	subs	r3, r2, r3
 801001e:	2b02      	cmp	r3, #2
 8010020:	d901      	bls.n	8010026 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8010022:	2303      	movs	r3, #3
 8010024:	e007      	b.n	8010036 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8010026:	4b09      	ldr	r3, [pc, #36]	; (801004c <RCC_SetFlashLatency+0x100>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f003 0307 	and.w	r3, r3, #7
 801002e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010030:	429a      	cmp	r2, r3
 8010032:	d1ef      	bne.n	8010014 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3738      	adds	r7, #56	; 0x38
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	0801f7f0 	.word	0x0801f7f0
 8010044:	0801f7f8 	.word	0x0801f7f8
 8010048:	0801f800 	.word	0x0801f800
 801004c:	58004000 	.word	0x58004000

08010050 <LL_RCC_LSE_IsReady>:
{
 8010050:	b480      	push	{r7}
 8010052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8010054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801005c:	f003 0302 	and.w	r3, r3, #2
 8010060:	2b02      	cmp	r3, #2
 8010062:	d101      	bne.n	8010068 <LL_RCC_LSE_IsReady+0x18>
 8010064:	2301      	movs	r3, #1
 8010066:	e000      	b.n	801006a <LL_RCC_LSE_IsReady+0x1a>
 8010068:	2300      	movs	r3, #0
}
 801006a:	4618      	mov	r0, r3
 801006c:	46bd      	mov	sp, r7
 801006e:	bc80      	pop	{r7}
 8010070:	4770      	bx	lr

08010072 <LL_RCC_SetUSARTClockSource>:
{
 8010072:	b480      	push	{r7}
 8010074:	b083      	sub	sp, #12
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 801007a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801007e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	0c1b      	lsrs	r3, r3, #16
 8010086:	43db      	mvns	r3, r3
 8010088:	401a      	ands	r2, r3
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	b29b      	uxth	r3, r3
 801008e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010092:	4313      	orrs	r3, r2
 8010094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8010098:	bf00      	nop
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	bc80      	pop	{r7}
 80100a0:	4770      	bx	lr

080100a2 <LL_RCC_SetI2SClockSource>:
{
 80100a2:	b480      	push	{r7}
 80100a4:	b083      	sub	sp, #12
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80100aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4313      	orrs	r3, r2
 80100be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80100c2:	bf00      	nop
 80100c4:	370c      	adds	r7, #12
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bc80      	pop	{r7}
 80100ca:	4770      	bx	lr

080100cc <LL_RCC_SetLPUARTClockSource>:
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80100d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80100e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	4313      	orrs	r3, r2
 80100e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80100ec:	bf00      	nop
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bc80      	pop	{r7}
 80100f4:	4770      	bx	lr

080100f6 <LL_RCC_SetI2CClockSource>:
{
 80100f6:	b480      	push	{r7}
 80100f8:	b083      	sub	sp, #12
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80100fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010102:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	091b      	lsrs	r3, r3, #4
 801010a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801010e:	43db      	mvns	r3, r3
 8010110:	401a      	ands	r2, r3
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	011b      	lsls	r3, r3, #4
 8010116:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 801011a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801011e:	4313      	orrs	r3, r2
 8010120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8010124:	bf00      	nop
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	bc80      	pop	{r7}
 801012c:	4770      	bx	lr

0801012e <LL_RCC_SetLPTIMClockSource>:
{
 801012e:	b480      	push	{r7}
 8010130:	b083      	sub	sp, #12
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8010136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801013a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	0c1b      	lsrs	r3, r3, #16
 8010142:	041b      	lsls	r3, r3, #16
 8010144:	43db      	mvns	r3, r3
 8010146:	401a      	ands	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	041b      	lsls	r3, r3, #16
 801014c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010150:	4313      	orrs	r3, r2
 8010152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8010156:	bf00      	nop
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	bc80      	pop	{r7}
 801015e:	4770      	bx	lr

08010160 <LL_RCC_SetRNGClockSource>:
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8010168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801016c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010170:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8010174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	4313      	orrs	r3, r2
 801017c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8010180:	bf00      	nop
 8010182:	370c      	adds	r7, #12
 8010184:	46bd      	mov	sp, r7
 8010186:	bc80      	pop	{r7}
 8010188:	4770      	bx	lr

0801018a <LL_RCC_SetADCClockSource>:
{
 801018a:	b480      	push	{r7}
 801018c:	b083      	sub	sp, #12
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8010192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801019a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801019e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4313      	orrs	r3, r2
 80101a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80101aa:	bf00      	nop
 80101ac:	370c      	adds	r7, #12
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bc80      	pop	{r7}
 80101b2:	4770      	bx	lr

080101b4 <LL_RCC_SetRTCClockSource>:
{
 80101b4:	b480      	push	{r7}
 80101b6:	b083      	sub	sp, #12
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80101bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80101c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4313      	orrs	r3, r2
 80101d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80101d4:	bf00      	nop
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	bc80      	pop	{r7}
 80101dc:	4770      	bx	lr

080101de <LL_RCC_GetRTCClockSource>:
{
 80101de:	b480      	push	{r7}
 80101e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80101e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bc80      	pop	{r7}
 80101f4:	4770      	bx	lr

080101f6 <LL_RCC_ForceBackupDomainReset>:
{
 80101f6:	b480      	push	{r7}
 80101f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80101fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801020a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801020e:	bf00      	nop
 8010210:	46bd      	mov	sp, r7
 8010212:	bc80      	pop	{r7}
 8010214:	4770      	bx	lr

08010216 <LL_RCC_ReleaseBackupDomainReset>:
{
 8010216:	b480      	push	{r7}
 8010218:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 801021a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801021e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801022a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 801022e:	bf00      	nop
 8010230:	46bd      	mov	sp, r7
 8010232:	bc80      	pop	{r7}
 8010234:	4770      	bx	lr
	...

08010238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b086      	sub	sp, #24
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8010240:	2300      	movs	r3, #0
 8010242:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8010244:	2300      	movs	r3, #0
 8010246:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8010248:	2300      	movs	r3, #0
 801024a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010254:	2b00      	cmp	r3, #0
 8010256:	d058      	beq.n	801030a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8010258:	f7fe fde2 	bl	800ee20 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801025c:	f7fc fe68 	bl	800cf30 <HAL_GetTick>
 8010260:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8010262:	e009      	b.n	8010278 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010264:	f7fc fe64 	bl	800cf30 <HAL_GetTick>
 8010268:	4602      	mov	r2, r0
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	1ad3      	subs	r3, r2, r3
 801026e:	2b02      	cmp	r3, #2
 8010270:	d902      	bls.n	8010278 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8010272:	2303      	movs	r3, #3
 8010274:	74fb      	strb	r3, [r7, #19]
        break;
 8010276:	e006      	b.n	8010286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8010278:	4b7b      	ldr	r3, [pc, #492]	; (8010468 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010284:	d1ee      	bne.n	8010264 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8010286:	7cfb      	ldrb	r3, [r7, #19]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d13c      	bne.n	8010306 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 801028c:	f7ff ffa7 	bl	80101de <LL_RCC_GetRTCClockSource>
 8010290:	4602      	mov	r2, r0
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010296:	429a      	cmp	r2, r3
 8010298:	d00f      	beq.n	80102ba <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801029a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801029e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80102a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80102a8:	f7ff ffa5 	bl	80101f6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80102ac:	f7ff ffb3 	bl	8010216 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80102b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	f003 0302 	and.w	r3, r3, #2
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d014      	beq.n	80102ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80102c4:	f7fc fe34 	bl	800cf30 <HAL_GetTick>
 80102c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80102ca:	e00b      	b.n	80102e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80102cc:	f7fc fe30 	bl	800cf30 <HAL_GetTick>
 80102d0:	4602      	mov	r2, r0
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	1ad3      	subs	r3, r2, r3
 80102d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80102da:	4293      	cmp	r3, r2
 80102dc:	d902      	bls.n	80102e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80102de:	2303      	movs	r3, #3
 80102e0:	74fb      	strb	r3, [r7, #19]
            break;
 80102e2:	e004      	b.n	80102ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80102e4:	f7ff feb4 	bl	8010050 <LL_RCC_LSE_IsReady>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d1ee      	bne.n	80102cc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80102ee:	7cfb      	ldrb	r3, [r7, #19]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d105      	bne.n	8010300 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7ff ff5b 	bl	80101b4 <LL_RCC_SetRTCClockSource>
 80102fe:	e004      	b.n	801030a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010300:	7cfb      	ldrb	r3, [r7, #19]
 8010302:	74bb      	strb	r3, [r7, #18]
 8010304:	e001      	b.n	801030a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010306:	7cfb      	ldrb	r3, [r7, #19]
 8010308:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	d004      	beq.n	8010320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff fea9 	bl	8010072 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f003 0302 	and.w	r3, r3, #2
 8010328:	2b00      	cmp	r3, #0
 801032a:	d004      	beq.n	8010336 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	4618      	mov	r0, r3
 8010332:	f7ff fe9e 	bl	8010072 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f003 0320 	and.w	r3, r3, #32
 801033e:	2b00      	cmp	r3, #0
 8010340:	d004      	beq.n	801034c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	691b      	ldr	r3, [r3, #16]
 8010346:	4618      	mov	r0, r3
 8010348:	f7ff fec0 	bl	80100cc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010354:	2b00      	cmp	r3, #0
 8010356:	d004      	beq.n	8010362 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6a1b      	ldr	r3, [r3, #32]
 801035c:	4618      	mov	r0, r3
 801035e:	f7ff fee6 	bl	801012e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801036a:	2b00      	cmp	r3, #0
 801036c:	d004      	beq.n	8010378 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010372:	4618      	mov	r0, r3
 8010374:	f7ff fedb 	bl	801012e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010380:	2b00      	cmp	r3, #0
 8010382:	d004      	beq.n	801038e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010388:	4618      	mov	r0, r3
 801038a:	f7ff fed0 	bl	801012e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010396:	2b00      	cmp	r3, #0
 8010398:	d004      	beq.n	80103a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	695b      	ldr	r3, [r3, #20]
 801039e:	4618      	mov	r0, r3
 80103a0:	f7ff fea9 	bl	80100f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d004      	beq.n	80103ba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	699b      	ldr	r3, [r3, #24]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff fe9e 	bl	80100f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d004      	beq.n	80103d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	69db      	ldr	r3, [r3, #28]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7ff fe93 	bl	80100f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f003 0310 	and.w	r3, r3, #16
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d011      	beq.n	8010400 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff fe5e 	bl	80100a2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103ee:	d107      	bne.n	8010400 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80103f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80103fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80103fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010408:	2b00      	cmp	r3, #0
 801040a:	d010      	beq.n	801042e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff fea5 	bl	8010160 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801041a:	2b00      	cmp	r3, #0
 801041c:	d107      	bne.n	801042e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 801041e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801042c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010436:	2b00      	cmp	r3, #0
 8010438:	d011      	beq.n	801045e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801043e:	4618      	mov	r0, r3
 8010440:	f7ff fea3 	bl	801018a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801044c:	d107      	bne.n	801045e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801044e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010452:	68db      	ldr	r3, [r3, #12]
 8010454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801045c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 801045e:	7cbb      	ldrb	r3, [r7, #18]
}
 8010460:	4618      	mov	r0, r3
 8010462:	3718      	adds	r7, #24
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	58000400 	.word	0x58000400

0801046c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010474:	2301      	movs	r3, #1
 8010476:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d071      	beq.n	8010562 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010484:	b2db      	uxtb	r3, r3
 8010486:	2b00      	cmp	r3, #0
 8010488:	d106      	bne.n	8010498 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2200      	movs	r2, #0
 801048e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f7fa f862 	bl	800a55c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2202      	movs	r2, #2
 801049c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80104a0:	4b32      	ldr	r3, [pc, #200]	; (801056c <HAL_RTC_Init+0x100>)
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	f003 0310 	and.w	r3, r3, #16
 80104a8:	2b10      	cmp	r3, #16
 80104aa:	d051      	beq.n	8010550 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80104ac:	4b2f      	ldr	r3, [pc, #188]	; (801056c <HAL_RTC_Init+0x100>)
 80104ae:	22ca      	movs	r2, #202	; 0xca
 80104b0:	625a      	str	r2, [r3, #36]	; 0x24
 80104b2:	4b2e      	ldr	r3, [pc, #184]	; (801056c <HAL_RTC_Init+0x100>)
 80104b4:	2253      	movs	r2, #83	; 0x53
 80104b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 faa3 	bl	8010a04 <RTC_EnterInitMode>
 80104be:	4603      	mov	r3, r0
 80104c0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80104c2:	7bfb      	ldrb	r3, [r7, #15]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d13f      	bne.n	8010548 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80104c8:	4b28      	ldr	r3, [pc, #160]	; (801056c <HAL_RTC_Init+0x100>)
 80104ca:	699b      	ldr	r3, [r3, #24]
 80104cc:	4a27      	ldr	r2, [pc, #156]	; (801056c <HAL_RTC_Init+0x100>)
 80104ce:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80104d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104d6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80104d8:	4b24      	ldr	r3, [pc, #144]	; (801056c <HAL_RTC_Init+0x100>)
 80104da:	699a      	ldr	r2, [r3, #24]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6859      	ldr	r1, [r3, #4]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	691b      	ldr	r3, [r3, #16]
 80104e4:	4319      	orrs	r1, r3
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	699b      	ldr	r3, [r3, #24]
 80104ea:	430b      	orrs	r3, r1
 80104ec:	491f      	ldr	r1, [pc, #124]	; (801056c <HAL_RTC_Init+0x100>)
 80104ee:	4313      	orrs	r3, r2
 80104f0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	68da      	ldr	r2, [r3, #12]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	041b      	lsls	r3, r3, #16
 80104fc:	491b      	ldr	r1, [pc, #108]	; (801056c <HAL_RTC_Init+0x100>)
 80104fe:	4313      	orrs	r3, r2
 8010500:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8010502:	4b1a      	ldr	r3, [pc, #104]	; (801056c <HAL_RTC_Init+0x100>)
 8010504:	68db      	ldr	r3, [r3, #12]
 8010506:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010512:	430b      	orrs	r3, r1
 8010514:	4915      	ldr	r1, [pc, #84]	; (801056c <HAL_RTC_Init+0x100>)
 8010516:	4313      	orrs	r3, r2
 8010518:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f000 faa6 	bl	8010a6c <RTC_ExitInitMode>
 8010520:	4603      	mov	r3, r0
 8010522:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8010524:	7bfb      	ldrb	r3, [r7, #15]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d10e      	bne.n	8010548 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 801052a:	4b10      	ldr	r3, [pc, #64]	; (801056c <HAL_RTC_Init+0x100>)
 801052c:	699b      	ldr	r3, [r3, #24]
 801052e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6a19      	ldr	r1, [r3, #32]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	69db      	ldr	r3, [r3, #28]
 801053a:	4319      	orrs	r1, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	695b      	ldr	r3, [r3, #20]
 8010540:	430b      	orrs	r3, r1
 8010542:	490a      	ldr	r1, [pc, #40]	; (801056c <HAL_RTC_Init+0x100>)
 8010544:	4313      	orrs	r3, r2
 8010546:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010548:	4b08      	ldr	r3, [pc, #32]	; (801056c <HAL_RTC_Init+0x100>)
 801054a:	22ff      	movs	r2, #255	; 0xff
 801054c:	625a      	str	r2, [r3, #36]	; 0x24
 801054e:	e001      	b.n	8010554 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8010550:	2300      	movs	r3, #0
 8010552:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8010554:	7bfb      	ldrb	r3, [r7, #15]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d103      	bne.n	8010562 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2201      	movs	r2, #1
 801055e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8010562:	7bfb      	ldrb	r3, [r7, #15]
}
 8010564:	4618      	mov	r0, r3
 8010566:	3710      	adds	r7, #16
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	40002800 	.word	0x40002800

08010570 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010570:	b590      	push	{r4, r7, lr}
 8010572:	b087      	sub	sp, #28
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010582:	2b01      	cmp	r3, #1
 8010584:	d101      	bne.n	801058a <HAL_RTC_SetTime+0x1a>
 8010586:	2302      	movs	r3, #2
 8010588:	e088      	b.n	801069c <HAL_RTC_SetTime+0x12c>
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	2201      	movs	r2, #1
 801058e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2202      	movs	r2, #2
 8010596:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801059a:	4b42      	ldr	r3, [pc, #264]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 801059c:	22ca      	movs	r2, #202	; 0xca
 801059e:	625a      	str	r2, [r3, #36]	; 0x24
 80105a0:	4b40      	ldr	r3, [pc, #256]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 80105a2:	2253      	movs	r2, #83	; 0x53
 80105a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80105a6:	68f8      	ldr	r0, [r7, #12]
 80105a8:	f000 fa2c 	bl	8010a04 <RTC_EnterInitMode>
 80105ac:	4603      	mov	r3, r0
 80105ae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80105b0:	7cfb      	ldrb	r3, [r7, #19]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d15e      	bne.n	8010674 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80105b6:	4b3b      	ldr	r3, [pc, #236]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80105be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105c2:	d057      	beq.n	8010674 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d125      	bne.n	8010616 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80105ca:	4b36      	ldr	r3, [pc, #216]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 80105cc:	699b      	ldr	r3, [r3, #24]
 80105ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d102      	bne.n	80105dc <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	2200      	movs	r2, #0
 80105da:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	4618      	mov	r0, r3
 80105e2:	f000 fa81 	bl	8010ae8 <RTC_ByteToBcd2>
 80105e6:	4603      	mov	r3, r0
 80105e8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	785b      	ldrb	r3, [r3, #1]
 80105ee:	4618      	mov	r0, r3
 80105f0:	f000 fa7a 	bl	8010ae8 <RTC_ByteToBcd2>
 80105f4:	4603      	mov	r3, r0
 80105f6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80105f8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	789b      	ldrb	r3, [r3, #2]
 80105fe:	4618      	mov	r0, r3
 8010600:	f000 fa72 	bl	8010ae8 <RTC_ByteToBcd2>
 8010604:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010606:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	78db      	ldrb	r3, [r3, #3]
 801060e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010610:	4313      	orrs	r3, r2
 8010612:	617b      	str	r3, [r7, #20]
 8010614:	e017      	b.n	8010646 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8010616:	4b23      	ldr	r3, [pc, #140]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 8010618:	699b      	ldr	r3, [r3, #24]
 801061a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801061e:	2b00      	cmp	r3, #0
 8010620:	d102      	bne.n	8010628 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	2200      	movs	r2, #0
 8010626:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	785b      	ldrb	r3, [r3, #1]
 8010632:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010634:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010636:	68ba      	ldr	r2, [r7, #8]
 8010638:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801063a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	78db      	ldrb	r3, [r3, #3]
 8010640:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010642:	4313      	orrs	r3, r2
 8010644:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8010646:	4a17      	ldr	r2, [pc, #92]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801064e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010652:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8010654:	4b13      	ldr	r3, [pc, #76]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 8010656:	699b      	ldr	r3, [r3, #24]
 8010658:	4a12      	ldr	r2, [pc, #72]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 801065a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801065e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8010660:	4b10      	ldr	r3, [pc, #64]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 8010662:	699a      	ldr	r2, [r3, #24]
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	68d9      	ldr	r1, [r3, #12]
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	691b      	ldr	r3, [r3, #16]
 801066c:	430b      	orrs	r3, r1
 801066e:	490d      	ldr	r1, [pc, #52]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 8010670:	4313      	orrs	r3, r2
 8010672:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	f000 f9f9 	bl	8010a6c <RTC_ExitInitMode>
 801067a:	4603      	mov	r3, r0
 801067c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801067e:	4b09      	ldr	r3, [pc, #36]	; (80106a4 <HAL_RTC_SetTime+0x134>)
 8010680:	22ff      	movs	r2, #255	; 0xff
 8010682:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8010684:	7cfb      	ldrb	r3, [r7, #19]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d103      	bne.n	8010692 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2201      	movs	r2, #1
 801068e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2200      	movs	r2, #0
 8010696:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 801069a:	7cfb      	ldrb	r3, [r7, #19]
}
 801069c:	4618      	mov	r0, r3
 801069e:	371c      	adds	r7, #28
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd90      	pop	{r4, r7, pc}
 80106a4:	40002800 	.word	0x40002800

080106a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80106a8:	b590      	push	{r4, r7, lr}
 80106aa:	b087      	sub	sp, #28
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d101      	bne.n	80106c2 <HAL_RTC_SetDate+0x1a>
 80106be:	2302      	movs	r3, #2
 80106c0:	e071      	b.n	80107a6 <HAL_RTC_SetDate+0xfe>
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2201      	movs	r2, #1
 80106c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2202      	movs	r2, #2
 80106ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d10e      	bne.n	80106f6 <HAL_RTC_SetDate+0x4e>
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	785b      	ldrb	r3, [r3, #1]
 80106dc:	f003 0310 	and.w	r3, r3, #16
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d008      	beq.n	80106f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	785b      	ldrb	r3, [r3, #1]
 80106e8:	f023 0310 	bic.w	r3, r3, #16
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	330a      	adds	r3, #10
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d11c      	bne.n	8010736 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	78db      	ldrb	r3, [r3, #3]
 8010700:	4618      	mov	r0, r3
 8010702:	f000 f9f1 	bl	8010ae8 <RTC_ByteToBcd2>
 8010706:	4603      	mov	r3, r0
 8010708:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	785b      	ldrb	r3, [r3, #1]
 801070e:	4618      	mov	r0, r3
 8010710:	f000 f9ea 	bl	8010ae8 <RTC_ByteToBcd2>
 8010714:	4603      	mov	r3, r0
 8010716:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010718:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	789b      	ldrb	r3, [r3, #2]
 801071e:	4618      	mov	r0, r3
 8010720:	f000 f9e2 	bl	8010ae8 <RTC_ByteToBcd2>
 8010724:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010726:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010730:	4313      	orrs	r3, r2
 8010732:	617b      	str	r3, [r7, #20]
 8010734:	e00e      	b.n	8010754 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	78db      	ldrb	r3, [r3, #3]
 801073a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	785b      	ldrb	r3, [r3, #1]
 8010740:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010742:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8010744:	68ba      	ldr	r2, [r7, #8]
 8010746:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8010748:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	781b      	ldrb	r3, [r3, #0]
 801074e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8010750:	4313      	orrs	r3, r2
 8010752:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010754:	4b16      	ldr	r3, [pc, #88]	; (80107b0 <HAL_RTC_SetDate+0x108>)
 8010756:	22ca      	movs	r2, #202	; 0xca
 8010758:	625a      	str	r2, [r3, #36]	; 0x24
 801075a:	4b15      	ldr	r3, [pc, #84]	; (80107b0 <HAL_RTC_SetDate+0x108>)
 801075c:	2253      	movs	r2, #83	; 0x53
 801075e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010760:	68f8      	ldr	r0, [r7, #12]
 8010762:	f000 f94f 	bl	8010a04 <RTC_EnterInitMode>
 8010766:	4603      	mov	r3, r0
 8010768:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801076a:	7cfb      	ldrb	r3, [r7, #19]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d10b      	bne.n	8010788 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8010770:	4a0f      	ldr	r2, [pc, #60]	; (80107b0 <HAL_RTC_SetDate+0x108>)
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010778:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801077c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801077e:	68f8      	ldr	r0, [r7, #12]
 8010780:	f000 f974 	bl	8010a6c <RTC_ExitInitMode>
 8010784:	4603      	mov	r3, r0
 8010786:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010788:	4b09      	ldr	r3, [pc, #36]	; (80107b0 <HAL_RTC_SetDate+0x108>)
 801078a:	22ff      	movs	r2, #255	; 0xff
 801078c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801078e:	7cfb      	ldrb	r3, [r7, #19]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d103      	bne.n	801079c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2201      	movs	r2, #1
 8010798:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2200      	movs	r2, #0
 80107a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80107a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	371c      	adds	r7, #28
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd90      	pop	{r4, r7, pc}
 80107ae:	bf00      	nop
 80107b0:	40002800 	.word	0x40002800

080107b4 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80107b4:	b590      	push	{r4, r7, lr}
 80107b6:	b087      	sub	sp, #28
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80107c0:	2300      	movs	r3, #0
 80107c2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80107ca:	2b01      	cmp	r3, #1
 80107cc:	d101      	bne.n	80107d2 <HAL_RTC_SetAlarm+0x1e>
 80107ce:	2302      	movs	r3, #2
 80107d0:	e0eb      	b.n	80109aa <HAL_RTC_SetAlarm+0x1f6>
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2201      	movs	r2, #1
 80107d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2202      	movs	r2, #2
 80107de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80107e2:	4b74      	ldr	r3, [pc, #464]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80107ea:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107f2:	d06a      	beq.n	80108ca <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d13a      	bne.n	8010870 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80107fa:	4b6e      	ldr	r3, [pc, #440]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 80107fc:	699b      	ldr	r3, [r3, #24]
 80107fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010802:	2b00      	cmp	r3, #0
 8010804:	d102      	bne.n	801080c <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	2200      	movs	r2, #0
 801080a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	695b      	ldr	r3, [r3, #20]
 8010810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	4618      	mov	r0, r3
 801081a:	f000 f965 	bl	8010ae8 <RTC_ByteToBcd2>
 801081e:	4603      	mov	r3, r0
 8010820:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	785b      	ldrb	r3, [r3, #1]
 8010826:	4618      	mov	r0, r3
 8010828:	f000 f95e 	bl	8010ae8 <RTC_ByteToBcd2>
 801082c:	4603      	mov	r3, r0
 801082e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010830:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	789b      	ldrb	r3, [r3, #2]
 8010836:	4618      	mov	r0, r3
 8010838:	f000 f956 	bl	8010ae8 <RTC_ByteToBcd2>
 801083c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801083e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	78db      	ldrb	r3, [r3, #3]
 8010846:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010848:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010852:	4618      	mov	r0, r3
 8010854:	f000 f948 	bl	8010ae8 <RTC_ByteToBcd2>
 8010858:	4603      	mov	r3, r0
 801085a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 801085c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010864:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801086a:	4313      	orrs	r3, r2
 801086c:	617b      	str	r3, [r7, #20]
 801086e:	e02c      	b.n	80108ca <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	695b      	ldr	r3, [r3, #20]
 8010874:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8010878:	d00d      	beq.n	8010896 <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	695b      	ldr	r3, [r3, #20]
 801087e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010882:	d008      	beq.n	8010896 <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8010884:	4b4b      	ldr	r3, [pc, #300]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 8010886:	699b      	ldr	r3, [r3, #24]
 8010888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801088c:	2b00      	cmp	r3, #0
 801088e:	d102      	bne.n	8010896 <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	2200      	movs	r2, #0
 8010894:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	785b      	ldrb	r3, [r3, #1]
 80108a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80108a2:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80108a4:	68ba      	ldr	r2, [r7, #8]
 80108a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80108a8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	78db      	ldrb	r3, [r3, #3]
 80108ae:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80108b0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80108b8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80108ba:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80108c0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80108c6:	4313      	orrs	r3, r2
 80108c8:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80108ca:	4b3a      	ldr	r3, [pc, #232]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 80108cc:	22ca      	movs	r2, #202	; 0xca
 80108ce:	625a      	str	r2, [r3, #36]	; 0x24
 80108d0:	4b38      	ldr	r3, [pc, #224]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 80108d2:	2253      	movs	r2, #83	; 0x53
 80108d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108de:	d12c      	bne.n	801093a <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 80108e0:	4b34      	ldr	r3, [pc, #208]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 80108e2:	699b      	ldr	r3, [r3, #24]
 80108e4:	4a33      	ldr	r2, [pc, #204]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 80108e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80108ea:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80108ec:	4b31      	ldr	r3, [pc, #196]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 80108ee:	2201      	movs	r2, #1
 80108f0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108f8:	d107      	bne.n	801090a <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	699a      	ldr	r2, [r3, #24]
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	69db      	ldr	r3, [r3, #28]
 8010902:	492c      	ldr	r1, [pc, #176]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 8010904:	4313      	orrs	r3, r2
 8010906:	644b      	str	r3, [r1, #68]	; 0x44
 8010908:	e006      	b.n	8010918 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 801090a:	4a2a      	ldr	r2, [pc, #168]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8010910:	4a28      	ldr	r2, [pc, #160]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	699b      	ldr	r3, [r3, #24]
 8010916:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8010918:	4a26      	ldr	r2, [pc, #152]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010924:	f043 0201 	orr.w	r2, r3, #1
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 801092c:	4b21      	ldr	r3, [pc, #132]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 801092e:	699b      	ldr	r3, [r3, #24]
 8010930:	4a20      	ldr	r2, [pc, #128]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 8010932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010936:	6193      	str	r3, [r2, #24]
 8010938:	e02b      	b.n	8010992 <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 801093a:	4b1e      	ldr	r3, [pc, #120]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	4a1d      	ldr	r2, [pc, #116]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 8010940:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8010944:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8010946:	4b1b      	ldr	r3, [pc, #108]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 8010948:	2202      	movs	r2, #2
 801094a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010952:	d107      	bne.n	8010964 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8010954:	68bb      	ldr	r3, [r7, #8]
 8010956:	699a      	ldr	r2, [r3, #24]
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	69db      	ldr	r3, [r3, #28]
 801095c:	4915      	ldr	r1, [pc, #84]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 801095e:	4313      	orrs	r3, r2
 8010960:	64cb      	str	r3, [r1, #76]	; 0x4c
 8010962:	e006      	b.n	8010972 <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8010964:	4a13      	ldr	r2, [pc, #76]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 801096a:	4a12      	ldr	r2, [pc, #72]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	699b      	ldr	r3, [r3, #24]
 8010970:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8010972:	4a10      	ldr	r2, [pc, #64]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801097e:	f043 0202 	orr.w	r2, r3, #2
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 8010986:	4b0b      	ldr	r3, [pc, #44]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 8010988:	699b      	ldr	r3, [r3, #24]
 801098a:	4a0a      	ldr	r2, [pc, #40]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 801098c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010990:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010992:	4b08      	ldr	r3, [pc, #32]	; (80109b4 <HAL_RTC_SetAlarm+0x200>)
 8010994:	22ff      	movs	r2, #255	; 0xff
 8010996:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2201      	movs	r2, #1
 801099c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2200      	movs	r2, #0
 80109a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80109a8:	2300      	movs	r3, #0
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	371c      	adds	r7, #28
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd90      	pop	{r4, r7, pc}
 80109b2:	bf00      	nop
 80109b4:	40002800 	.word	0x40002800

080109b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80109c0:	4b0f      	ldr	r3, [pc, #60]	; (8010a00 <HAL_RTC_WaitForSynchro+0x48>)
 80109c2:	68db      	ldr	r3, [r3, #12]
 80109c4:	4a0e      	ldr	r2, [pc, #56]	; (8010a00 <HAL_RTC_WaitForSynchro+0x48>)
 80109c6:	f023 0320 	bic.w	r3, r3, #32
 80109ca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80109cc:	f7fc fab0 	bl	800cf30 <HAL_GetTick>
 80109d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80109d2:	e009      	b.n	80109e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80109d4:	f7fc faac 	bl	800cf30 <HAL_GetTick>
 80109d8:	4602      	mov	r2, r0
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80109e2:	d901      	bls.n	80109e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80109e4:	2303      	movs	r3, #3
 80109e6:	e006      	b.n	80109f6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80109e8:	4b05      	ldr	r3, [pc, #20]	; (8010a00 <HAL_RTC_WaitForSynchro+0x48>)
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	f003 0320 	and.w	r3, r3, #32
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d0ef      	beq.n	80109d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80109f4:	2300      	movs	r3, #0
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	40002800 	.word	0x40002800

08010a04 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8010a10:	4b15      	ldr	r3, [pc, #84]	; (8010a68 <RTC_EnterInitMode+0x64>)
 8010a12:	68db      	ldr	r3, [r3, #12]
 8010a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d120      	bne.n	8010a5e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010a1c:	4b12      	ldr	r3, [pc, #72]	; (8010a68 <RTC_EnterInitMode+0x64>)
 8010a1e:	68db      	ldr	r3, [r3, #12]
 8010a20:	4a11      	ldr	r2, [pc, #68]	; (8010a68 <RTC_EnterInitMode+0x64>)
 8010a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a26:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8010a28:	f7fc fa82 	bl	800cf30 <HAL_GetTick>
 8010a2c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010a2e:	e00d      	b.n	8010a4c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010a30:	f7fc fa7e 	bl	800cf30 <HAL_GetTick>
 8010a34:	4602      	mov	r2, r0
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	1ad3      	subs	r3, r2, r3
 8010a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010a3e:	d905      	bls.n	8010a4c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8010a40:	2303      	movs	r3, #3
 8010a42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2203      	movs	r2, #3
 8010a48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010a4c:	4b06      	ldr	r3, [pc, #24]	; (8010a68 <RTC_EnterInitMode+0x64>)
 8010a4e:	68db      	ldr	r3, [r3, #12]
 8010a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d102      	bne.n	8010a5e <RTC_EnterInitMode+0x5a>
 8010a58:	7bfb      	ldrb	r3, [r7, #15]
 8010a5a:	2b03      	cmp	r3, #3
 8010a5c:	d1e8      	bne.n	8010a30 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8010a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3710      	adds	r7, #16
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	40002800 	.word	0x40002800

08010a6c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010a74:	2300      	movs	r3, #0
 8010a76:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010a78:	4b1a      	ldr	r3, [pc, #104]	; (8010ae4 <RTC_ExitInitMode+0x78>)
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	4a19      	ldr	r2, [pc, #100]	; (8010ae4 <RTC_ExitInitMode+0x78>)
 8010a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a82:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010a84:	4b17      	ldr	r3, [pc, #92]	; (8010ae4 <RTC_ExitInitMode+0x78>)
 8010a86:	699b      	ldr	r3, [r3, #24]
 8010a88:	f003 0320 	and.w	r3, r3, #32
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d10c      	bne.n	8010aaa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7ff ff91 	bl	80109b8 <HAL_RTC_WaitForSynchro>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d01e      	beq.n	8010ada <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2203      	movs	r2, #3
 8010aa0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8010aa4:	2303      	movs	r3, #3
 8010aa6:	73fb      	strb	r3, [r7, #15]
 8010aa8:	e017      	b.n	8010ada <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010aaa:	4b0e      	ldr	r3, [pc, #56]	; (8010ae4 <RTC_ExitInitMode+0x78>)
 8010aac:	699b      	ldr	r3, [r3, #24]
 8010aae:	4a0d      	ldr	r2, [pc, #52]	; (8010ae4 <RTC_ExitInitMode+0x78>)
 8010ab0:	f023 0320 	bic.w	r3, r3, #32
 8010ab4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f7ff ff7e 	bl	80109b8 <HAL_RTC_WaitForSynchro>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d005      	beq.n	8010ace <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2203      	movs	r2, #3
 8010ac6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8010aca:	2303      	movs	r3, #3
 8010acc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010ace:	4b05      	ldr	r3, [pc, #20]	; (8010ae4 <RTC_ExitInitMode+0x78>)
 8010ad0:	699b      	ldr	r3, [r3, #24]
 8010ad2:	4a04      	ldr	r2, [pc, #16]	; (8010ae4 <RTC_ExitInitMode+0x78>)
 8010ad4:	f043 0320 	orr.w	r3, r3, #32
 8010ad8:	6193      	str	r3, [r2, #24]
  }

  return status;
 8010ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3710      	adds	r7, #16
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	40002800 	.word	0x40002800

08010ae8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	4603      	mov	r3, r0
 8010af0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010af2:	2300      	movs	r3, #0
 8010af4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8010af6:	79fb      	ldrb	r3, [r7, #7]
 8010af8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8010afa:	e005      	b.n	8010b08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	3301      	adds	r3, #1
 8010b00:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8010b02:	7afb      	ldrb	r3, [r7, #11]
 8010b04:	3b0a      	subs	r3, #10
 8010b06:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8010b08:	7afb      	ldrb	r3, [r7, #11]
 8010b0a:	2b09      	cmp	r3, #9
 8010b0c:	d8f6      	bhi.n	8010afc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	011b      	lsls	r3, r3, #4
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	7afb      	ldrb	r3, [r7, #11]
 8010b18:	4313      	orrs	r3, r2
 8010b1a:	b2db      	uxtb	r3, r3
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3714      	adds	r7, #20
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bc80      	pop	{r7}
 8010b24:	4770      	bx	lr

08010b26 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010b26:	b580      	push	{r7, lr}
 8010b28:	b084      	sub	sp, #16
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d101      	bne.n	8010b38 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010b34:	2301      	movs	r3, #1
 8010b36:	e0c6      	b.n	8010cc6 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d108      	bne.n	8010b52 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010b48:	d009      	beq.n	8010b5e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	61da      	str	r2, [r3, #28]
 8010b50:	e005      	b.n	8010b5e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2200      	movs	r2, #0
 8010b56:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010b64:	b2db      	uxtb	r3, r3
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d106      	bne.n	8010b78 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f7f9 fd1e 	bl	800a5b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2202      	movs	r2, #2
 8010b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	681a      	ldr	r2, [r3, #0]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010b8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	68db      	ldr	r3, [r3, #12]
 8010b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010b98:	d902      	bls.n	8010ba0 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	60fb      	str	r3, [r7, #12]
 8010b9e:	e002      	b.n	8010ba6 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ba4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	68db      	ldr	r3, [r3, #12]
 8010baa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8010bae:	d007      	beq.n	8010bc0 <HAL_SPI_Init+0x9a>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010bb8:	d002      	beq.n	8010bc0 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	689b      	ldr	r3, [r3, #8]
 8010bcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010bd0:	431a      	orrs	r2, r3
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	691b      	ldr	r3, [r3, #16]
 8010bd6:	f003 0302 	and.w	r3, r3, #2
 8010bda:	431a      	orrs	r2, r3
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	695b      	ldr	r3, [r3, #20]
 8010be0:	f003 0301 	and.w	r3, r3, #1
 8010be4:	431a      	orrs	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	699b      	ldr	r3, [r3, #24]
 8010bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010bee:	431a      	orrs	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	69db      	ldr	r3, [r3, #28]
 8010bf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010bf8:	431a      	orrs	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6a1b      	ldr	r3, [r3, #32]
 8010bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c02:	ea42 0103 	orr.w	r1, r2, r3
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	430a      	orrs	r2, r1
 8010c14:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c1e:	d11b      	bne.n	8010c58 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d10b      	bne.n	8010c40 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	68db      	ldr	r3, [r3, #12]
 8010c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010c30:	d903      	bls.n	8010c3a <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2202      	movs	r2, #2
 8010c36:	631a      	str	r2, [r3, #48]	; 0x30
 8010c38:	e002      	b.n	8010c40 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c44:	2b02      	cmp	r3, #2
 8010c46:	d107      	bne.n	8010c58 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010c56:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	699b      	ldr	r3, [r3, #24]
 8010c5c:	0c1b      	lsrs	r3, r3, #16
 8010c5e:	f003 0204 	and.w	r2, r3, #4
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c66:	f003 0310 	and.w	r3, r3, #16
 8010c6a:	431a      	orrs	r2, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c70:	f003 0308 	and.w	r3, r3, #8
 8010c74:	431a      	orrs	r2, r3
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8010c7e:	ea42 0103 	orr.w	r1, r2, r3
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	430a      	orrs	r2, r1
 8010c8e:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c98:	d105      	bne.n	8010ca6 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	b292      	uxth	r2, r2
 8010ca4:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	69da      	ldr	r2, [r3, #28]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010cb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2201      	movs	r2, #1
 8010cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8010cc4:	2300      	movs	r3, #0
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3710      	adds	r7, #16
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b088      	sub	sp, #32
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	60f8      	str	r0, [r7, #12]
 8010cd6:	60b9      	str	r1, [r7, #8]
 8010cd8:	603b      	str	r3, [r7, #0]
 8010cda:	4613      	mov	r3, r2
 8010cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010ce8:	2b01      	cmp	r3, #1
 8010cea:	d101      	bne.n	8010cf0 <HAL_SPI_Transmit+0x22>
 8010cec:	2302      	movs	r3, #2
 8010cee:	e17a      	b.n	8010fe6 <HAL_SPI_Transmit+0x318>
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010cf8:	f7fc f91a 	bl	800cf30 <HAL_GetTick>
 8010cfc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010cfe:	88fb      	ldrh	r3, [r7, #6]
 8010d00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d002      	beq.n	8010d14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010d0e:	2302      	movs	r3, #2
 8010d10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010d12:	e15f      	b.n	8010fd4 <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d002      	beq.n	8010d20 <HAL_SPI_Transmit+0x52>
 8010d1a:	88fb      	ldrh	r3, [r7, #6]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d102      	bne.n	8010d26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010d20:	2301      	movs	r3, #1
 8010d22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010d24:	e156      	b.n	8010fd4 <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2203      	movs	r2, #3
 8010d2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2200      	movs	r2, #0
 8010d32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	68ba      	ldr	r2, [r7, #8]
 8010d38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	88fa      	ldrh	r2, [r7, #6]
 8010d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	88fa      	ldrh	r2, [r7, #6]
 8010d44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2200      	movs	r2, #0
 8010d58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2200      	movs	r2, #0
 8010d66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	689b      	ldr	r3, [r3, #8]
 8010d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d70:	d10f      	bne.n	8010d92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	681a      	ldr	r2, [r3, #0]
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010d90:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d9a:	d10f      	bne.n	8010dbc <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010daa:	601a      	str	r2, [r3, #0]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010dba:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010dc6:	2b40      	cmp	r3, #64	; 0x40
 8010dc8:	d007      	beq.n	8010dda <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010dd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	68db      	ldr	r3, [r3, #12]
 8010dde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010de2:	d94b      	bls.n	8010e7c <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <HAL_SPI_Transmit+0x124>
 8010dec:	8afb      	ldrh	r3, [r7, #22]
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d13e      	bne.n	8010e70 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df6:	881a      	ldrh	r2, [r3, #0]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e02:	1c9a      	adds	r2, r3, #2
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	b29a      	uxth	r2, r3
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010e16:	e02b      	b.n	8010e70 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	689b      	ldr	r3, [r3, #8]
 8010e1e:	f003 0302 	and.w	r3, r3, #2
 8010e22:	2b02      	cmp	r3, #2
 8010e24:	d112      	bne.n	8010e4c <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e2a:	881a      	ldrh	r2, [r3, #0]
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e36:	1c9a      	adds	r2, r3, #2
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	3b01      	subs	r3, #1
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010e4a:	e011      	b.n	8010e70 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e4c:	f7fc f870 	bl	800cf30 <HAL_GetTick>
 8010e50:	4602      	mov	r2, r0
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	1ad3      	subs	r3, r2, r3
 8010e56:	683a      	ldr	r2, [r7, #0]
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d803      	bhi.n	8010e64 <HAL_SPI_Transmit+0x196>
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e62:	d102      	bne.n	8010e6a <HAL_SPI_Transmit+0x19c>
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d102      	bne.n	8010e70 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010e6e:	e0b1      	b.n	8010fd4 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d1ce      	bne.n	8010e18 <HAL_SPI_Transmit+0x14a>
 8010e7a:	e07c      	b.n	8010f76 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <HAL_SPI_Transmit+0x1bc>
 8010e84:	8afb      	ldrh	r3, [r7, #22]
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d170      	bne.n	8010f6c <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	d912      	bls.n	8010eba <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e98:	881a      	ldrh	r2, [r3, #0]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ea4:	1c9a      	adds	r2, r3, #2
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	3b02      	subs	r3, #2
 8010eb2:	b29a      	uxth	r2, r3
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010eb8:	e058      	b.n	8010f6c <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	330c      	adds	r3, #12
 8010ec4:	7812      	ldrb	r2, [r2, #0]
 8010ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ecc:	1c5a      	adds	r2, r3, #1
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	3b01      	subs	r3, #1
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8010ee0:	e044      	b.n	8010f6c <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	689b      	ldr	r3, [r3, #8]
 8010ee8:	f003 0302 	and.w	r3, r3, #2
 8010eec:	2b02      	cmp	r3, #2
 8010eee:	d12b      	bne.n	8010f48 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	2b01      	cmp	r3, #1
 8010ef8:	d912      	bls.n	8010f20 <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010efe:	881a      	ldrh	r2, [r3, #0]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f0a:	1c9a      	adds	r2, r3, #2
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	3b02      	subs	r3, #2
 8010f18:	b29a      	uxth	r2, r3
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010f1e:	e025      	b.n	8010f6c <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	330c      	adds	r3, #12
 8010f2a:	7812      	ldrb	r2, [r2, #0]
 8010f2c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f32:	1c5a      	adds	r2, r3, #1
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	3b01      	subs	r3, #1
 8010f40:	b29a      	uxth	r2, r3
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010f46:	e011      	b.n	8010f6c <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f48:	f7fb fff2 	bl	800cf30 <HAL_GetTick>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	69bb      	ldr	r3, [r7, #24]
 8010f50:	1ad3      	subs	r3, r2, r3
 8010f52:	683a      	ldr	r2, [r7, #0]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d803      	bhi.n	8010f60 <HAL_SPI_Transmit+0x292>
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f5e:	d102      	bne.n	8010f66 <HAL_SPI_Transmit+0x298>
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d102      	bne.n	8010f6c <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8010f66:	2303      	movs	r3, #3
 8010f68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010f6a:	e033      	b.n	8010fd4 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d1b5      	bne.n	8010ee2 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010f7e:	d107      	bne.n	8010f90 <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	681a      	ldr	r2, [r3, #0]
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010f8e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010f90:	69ba      	ldr	r2, [r7, #24]
 8010f92:	6839      	ldr	r1, [r7, #0]
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f000 fe6d 	bl	8011c74 <SPI_EndRxTxTransaction>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d002      	beq.n	8010fa6 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2220      	movs	r2, #32
 8010fa4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	689b      	ldr	r3, [r3, #8]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d10a      	bne.n	8010fc4 <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010fae:	2300      	movs	r3, #0
 8010fb0:	613b      	str	r3, [r7, #16]
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	613b      	str	r3, [r7, #16]
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	689b      	ldr	r3, [r3, #8]
 8010fc0:	613b      	str	r3, [r7, #16]
 8010fc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d002      	beq.n	8010fd2 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8010fcc:	2301      	movs	r3, #1
 8010fce:	77fb      	strb	r3, [r7, #31]
 8010fd0:	e000      	b.n	8010fd4 <HAL_SPI_Transmit+0x306>
  }

error:
 8010fd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3720      	adds	r7, #32
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}

08010fee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b08c      	sub	sp, #48	; 0x30
 8010ff2:	af02      	add	r7, sp, #8
 8010ff4:	60f8      	str	r0, [r7, #12]
 8010ff6:	60b9      	str	r1, [r7, #8]
 8010ff8:	603b      	str	r3, [r7, #0]
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8010ffe:	2300      	movs	r3, #0
 8011000:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011002:	2300      	movs	r3, #0
 8011004:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011006:	2300      	movs	r3, #0
 8011008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011014:	d112      	bne.n	801103c <HAL_SPI_Receive+0x4e>
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	689b      	ldr	r3, [r3, #8]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d10e      	bne.n	801103c <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2204      	movs	r2, #4
 8011022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011026:	88fa      	ldrh	r2, [r7, #6]
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	9300      	str	r3, [sp, #0]
 801102c:	4613      	mov	r3, r2
 801102e:	68ba      	ldr	r2, [r7, #8]
 8011030:	68b9      	ldr	r1, [r7, #8]
 8011032:	68f8      	ldr	r0, [r7, #12]
 8011034:	f000 f9c4 	bl	80113c0 <HAL_SPI_TransmitReceive>
 8011038:	4603      	mov	r3, r0
 801103a:	e1bd      	b.n	80113b8 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011042:	2b01      	cmp	r3, #1
 8011044:	d101      	bne.n	801104a <HAL_SPI_Receive+0x5c>
 8011046:	2302      	movs	r3, #2
 8011048:	e1b6      	b.n	80113b8 <HAL_SPI_Receive+0x3ca>
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2201      	movs	r2, #1
 801104e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011052:	f7fb ff6d 	bl	800cf30 <HAL_GetTick>
 8011056:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801105e:	b2db      	uxtb	r3, r3
 8011060:	2b01      	cmp	r3, #1
 8011062:	d003      	beq.n	801106c <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 8011064:	2302      	movs	r3, #2
 8011066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 801106a:	e19b      	b.n	80113a4 <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d002      	beq.n	8011078 <HAL_SPI_Receive+0x8a>
 8011072:	88fb      	ldrh	r3, [r7, #6]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d103      	bne.n	8011080 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8011078:	2301      	movs	r3, #1
 801107a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 801107e:	e191      	b.n	80113a4 <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2204      	movs	r2, #4
 8011084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2200      	movs	r2, #0
 801108c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	68ba      	ldr	r2, [r7, #8]
 8011092:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	88fa      	ldrh	r2, [r7, #6]
 8011098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	88fa      	ldrh	r2, [r7, #6]
 80110a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2200      	movs	r2, #0
 80110a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2200      	movs	r2, #0
 80110ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2200      	movs	r2, #0
 80110b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	2200      	movs	r2, #0
 80110ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2200      	movs	r2, #0
 80110c0:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80110ca:	d118      	bne.n	80110fe <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	681a      	ldr	r2, [r3, #0]
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80110da:	601a      	str	r2, [r3, #0]
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80110ea:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	3b01      	subs	r3, #1
 80110f6:	b29a      	uxth	r2, r3
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	68db      	ldr	r3, [r3, #12]
 8011102:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011106:	d908      	bls.n	801111a <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	685a      	ldr	r2, [r3, #4]
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011116:	605a      	str	r2, [r3, #4]
 8011118:	e007      	b.n	801112a <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	685a      	ldr	r2, [r3, #4]
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011128:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	689b      	ldr	r3, [r3, #8]
 801112e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011132:	d10f      	bne.n	8011154 <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011142:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011152:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801115e:	2b40      	cmp	r3, #64	; 0x40
 8011160:	d007      	beq.n	8011172 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011170:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801117a:	d869      	bhi.n	8011250 <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801117c:	e031      	b.n	80111e2 <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	689b      	ldr	r3, [r3, #8]
 8011184:	f003 0301 	and.w	r3, r3, #1
 8011188:	2b01      	cmp	r3, #1
 801118a:	d117      	bne.n	80111bc <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	f103 020c 	add.w	r2, r3, #12
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011198:	7812      	ldrb	r2, [r2, #0]
 801119a:	b2d2      	uxtb	r2, r2
 801119c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111a2:	1c5a      	adds	r2, r3, #1
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	3b01      	subs	r3, #1
 80111b2:	b29a      	uxth	r2, r3
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80111ba:	e012      	b.n	80111e2 <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80111bc:	f7fb feb8 	bl	800cf30 <HAL_GetTick>
 80111c0:	4602      	mov	r2, r0
 80111c2:	6a3b      	ldr	r3, [r7, #32]
 80111c4:	1ad3      	subs	r3, r2, r3
 80111c6:	683a      	ldr	r2, [r7, #0]
 80111c8:	429a      	cmp	r2, r3
 80111ca:	d803      	bhi.n	80111d4 <HAL_SPI_Receive+0x1e6>
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d2:	d102      	bne.n	80111da <HAL_SPI_Receive+0x1ec>
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d103      	bne.n	80111e2 <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 80111da:	2303      	movs	r3, #3
 80111dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80111e0:	e0e0      	b.n	80113a4 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d1c7      	bne.n	801117e <HAL_SPI_Receive+0x190>
 80111ee:	e035      	b.n	801125c <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	689b      	ldr	r3, [r3, #8]
 80111f6:	f003 0301 	and.w	r3, r3, #1
 80111fa:	2b01      	cmp	r3, #1
 80111fc:	d115      	bne.n	801122a <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	68da      	ldr	r2, [r3, #12]
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011208:	b292      	uxth	r2, r2
 801120a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011210:	1c9a      	adds	r2, r3, #2
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801121c:	b29b      	uxth	r3, r3
 801121e:	3b01      	subs	r3, #1
 8011220:	b29a      	uxth	r2, r3
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8011228:	e012      	b.n	8011250 <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801122a:	f7fb fe81 	bl	800cf30 <HAL_GetTick>
 801122e:	4602      	mov	r2, r0
 8011230:	6a3b      	ldr	r3, [r7, #32]
 8011232:	1ad3      	subs	r3, r2, r3
 8011234:	683a      	ldr	r2, [r7, #0]
 8011236:	429a      	cmp	r2, r3
 8011238:	d803      	bhi.n	8011242 <HAL_SPI_Receive+0x254>
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011240:	d102      	bne.n	8011248 <HAL_SPI_Receive+0x25a>
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d103      	bne.n	8011250 <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8011248:	2303      	movs	r3, #3
 801124a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 801124e:	e0a9      	b.n	80113a4 <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011256:	b29b      	uxth	r3, r3
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1c9      	bne.n	80111f0 <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011264:	d178      	bne.n	8011358 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011274:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8011276:	6a3b      	ldr	r3, [r7, #32]
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	2201      	movs	r2, #1
 801127e:	2101      	movs	r1, #1
 8011280:	68f8      	ldr	r0, [r7, #12]
 8011282:	f000 fb81 	bl	8011988 <SPI_WaitFlagStateUntilTimeout>
 8011286:	4603      	mov	r3, r0
 8011288:	2b00      	cmp	r3, #0
 801128a:	d003      	beq.n	8011294 <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 801128c:	2303      	movs	r3, #3
 801128e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8011292:	e087      	b.n	80113a4 <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	68db      	ldr	r3, [r3, #12]
 8011298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801129c:	d907      	bls.n	80112ae <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	68da      	ldr	r2, [r3, #12]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112a8:	b292      	uxth	r2, r2
 80112aa:	801a      	strh	r2, [r3, #0]
 80112ac:	e008      	b.n	80112c0 <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	f103 020c 	add.w	r2, r3, #12
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112ba:	7812      	ldrb	r2, [r2, #0]
 80112bc:	b2d2      	uxtb	r2, r2
 80112be:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80112c0:	6a3b      	ldr	r3, [r7, #32]
 80112c2:	9300      	str	r3, [sp, #0]
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	2201      	movs	r2, #1
 80112c8:	2101      	movs	r1, #1
 80112ca:	68f8      	ldr	r0, [r7, #12]
 80112cc:	f000 fb5c 	bl	8011988 <SPI_WaitFlagStateUntilTimeout>
 80112d0:	4603      	mov	r3, r0
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d009      	beq.n	80112ea <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80112da:	f043 0202 	orr.w	r2, r3, #2
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80112e2:	2303      	movs	r3, #3
 80112e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80112e8:	e05c      	b.n	80113a4 <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80112f2:	d105      	bne.n	8011300 <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80112fc:	69bb      	ldr	r3, [r7, #24]
 80112fe:	e02b      	b.n	8011358 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	330c      	adds	r3, #12
 8011306:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	b2db      	uxtb	r3, r3
 801130e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011310:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801131a:	d11d      	bne.n	8011358 <HAL_SPI_Receive+0x36a>
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011320:	2b02      	cmp	r3, #2
 8011322:	d119      	bne.n	8011358 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8011324:	6a3b      	ldr	r3, [r7, #32]
 8011326:	9300      	str	r3, [sp, #0]
 8011328:	683b      	ldr	r3, [r7, #0]
 801132a:	2201      	movs	r2, #1
 801132c:	2101      	movs	r1, #1
 801132e:	68f8      	ldr	r0, [r7, #12]
 8011330:	f000 fb2a 	bl	8011988 <SPI_WaitFlagStateUntilTimeout>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d009      	beq.n	801134e <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801133e:	f043 0202 	orr.w	r2, r3, #2
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8011346:	2303      	movs	r3, #3
 8011348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 801134c:	e02a      	b.n	80113a4 <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 801134e:	69fb      	ldr	r3, [r7, #28]
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	b2db      	uxtb	r3, r3
 8011354:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8011356:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011358:	6a3a      	ldr	r2, [r7, #32]
 801135a:	6839      	ldr	r1, [r7, #0]
 801135c:	68f8      	ldr	r0, [r7, #12]
 801135e:	f000 fc31 	bl	8011bc4 <SPI_EndRxTransaction>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2220      	movs	r2, #32
 801136c:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	689b      	ldr	r3, [r3, #8]
 8011374:	f003 0310 	and.w	r3, r3, #16
 8011378:	2b10      	cmp	r3, #16
 801137a:	d10a      	bne.n	8011392 <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011380:	f043 0202 	orr.w	r2, r3, #2
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8011390:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011396:	2b00      	cmp	r3, #0
 8011398:	d003      	beq.n	80113a2 <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 801139a:	2301      	movs	r3, #1
 801139c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80113a0:	e000      	b.n	80113a4 <HAL_SPI_Receive+0x3b6>
  }

error :
 80113a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2201      	movs	r2, #1
 80113a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80113b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3728      	adds	r7, #40	; 0x28
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b092      	sub	sp, #72	; 0x48
 80113c4:	af02      	add	r7, sp, #8
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
 80113cc:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80113ce:	2300      	movs	r3, #0
 80113d0:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80113d2:	2300      	movs	r3, #0
 80113d4:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80113d6:	2301      	movs	r3, #1
 80113d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80113da:	2300      	movs	r3, #0
 80113dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80113e6:	2b01      	cmp	r3, #1
 80113e8:	d101      	bne.n	80113ee <HAL_SPI_TransmitReceive+0x2e>
 80113ea:	2302      	movs	r3, #2
 80113ec:	e2c8      	b.n	8011980 <HAL_SPI_TransmitReceive+0x5c0>
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2201      	movs	r2, #1
 80113f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80113f6:	f7fb fd9b 	bl	800cf30 <HAL_GetTick>
 80113fa:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 801140c:	887b      	ldrh	r3, [r7, #2]
 801140e:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8011410:	887b      	ldrh	r3, [r7, #2]
 8011412:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	685b      	ldr	r3, [r3, #4]
 8011422:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011428:	2b01      	cmp	r3, #1
 801142a:	d00f      	beq.n	801144c <HAL_SPI_TransmitReceive+0x8c>
 801142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011432:	d107      	bne.n	8011444 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	689b      	ldr	r3, [r3, #8]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d103      	bne.n	8011444 <HAL_SPI_TransmitReceive+0x84>
 801143c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011440:	2b04      	cmp	r3, #4
 8011442:	d003      	beq.n	801144c <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8011444:	2302      	movs	r3, #2
 8011446:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 801144a:	e28f      	b.n	801196c <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d005      	beq.n	801145e <HAL_SPI_TransmitReceive+0x9e>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d002      	beq.n	801145e <HAL_SPI_TransmitReceive+0x9e>
 8011458:	887b      	ldrh	r3, [r7, #2]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d103      	bne.n	8011466 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 801145e:	2301      	movs	r3, #1
 8011460:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8011464:	e282      	b.n	801196c <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801146c:	b2db      	uxtb	r3, r3
 801146e:	2b04      	cmp	r3, #4
 8011470:	d003      	beq.n	801147a <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	2205      	movs	r2, #5
 8011476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	2200      	movs	r2, #0
 801147e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	887a      	ldrh	r2, [r7, #2]
 801148a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	887a      	ldrh	r2, [r7, #2]
 8011492:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	68ba      	ldr	r2, [r7, #8]
 801149a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	887a      	ldrh	r2, [r7, #2]
 80114a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	887a      	ldrh	r2, [r7, #2]
 80114a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2200      	movs	r2, #0
 80114ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2200      	movs	r2, #0
 80114b2:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80114bc:	d10f      	bne.n	80114de <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80114cc:	601a      	str	r2, [r3, #0]
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	681a      	ldr	r2, [r3, #0]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80114dc:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80114e6:	d802      	bhi.n	80114ee <HAL_SPI_TransmitReceive+0x12e>
 80114e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80114ea:	2b01      	cmp	r3, #1
 80114ec:	d908      	bls.n	8011500 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	685a      	ldr	r2, [r3, #4]
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80114fc:	605a      	str	r2, [r3, #4]
 80114fe:	e007      	b.n	8011510 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	685a      	ldr	r2, [r3, #4]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801150e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801151a:	2b40      	cmp	r3, #64	; 0x40
 801151c:	d007      	beq.n	801152e <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801152c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011536:	f240 80a4 	bls.w	8011682 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d003      	beq.n	801154a <HAL_SPI_TransmitReceive+0x18a>
 8011542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011544:	2b01      	cmp	r3, #1
 8011546:	f040 808e 	bne.w	8011666 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801154e:	881a      	ldrh	r2, [r3, #0]
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801155a:	1c9a      	adds	r2, r3, #2
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011564:	b29b      	uxth	r3, r3
 8011566:	3b01      	subs	r3, #1
 8011568:	b29a      	uxth	r2, r3
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801156e:	e07a      	b.n	8011666 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	689b      	ldr	r3, [r3, #8]
 8011576:	f003 0302 	and.w	r3, r3, #2
 801157a:	2b02      	cmp	r3, #2
 801157c:	d13f      	bne.n	80115fe <HAL_SPI_TransmitReceive+0x23e>
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011582:	b29b      	uxth	r3, r3
 8011584:	2b00      	cmp	r3, #0
 8011586:	d03a      	beq.n	80115fe <HAL_SPI_TransmitReceive+0x23e>
 8011588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801158a:	2b01      	cmp	r3, #1
 801158c:	d137      	bne.n	80115fe <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011592:	881a      	ldrh	r2, [r3, #0]
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801159e:	1c9a      	adds	r2, r3, #2
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	3b01      	subs	r3, #1
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80115b2:	2300      	movs	r3, #0
 80115b4:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d11e      	bne.n	80115fe <HAL_SPI_TransmitReceive+0x23e>
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115c8:	d119      	bne.n	80115fe <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80115ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115cc:	f003 0304 	and.w	r3, r3, #4
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d10c      	bne.n	80115ee <HAL_SPI_TransmitReceive+0x22e>
 80115d4:	6a3b      	ldr	r3, [r7, #32]
 80115d6:	f003 0308 	and.w	r3, r3, #8
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d007      	beq.n	80115ee <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80115ec:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80115fc:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	689b      	ldr	r3, [r3, #8]
 8011604:	f003 0301 	and.w	r3, r3, #1
 8011608:	2b01      	cmp	r3, #1
 801160a:	d11c      	bne.n	8011646 <HAL_SPI_TransmitReceive+0x286>
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011612:	b29b      	uxth	r3, r3
 8011614:	2b00      	cmp	r3, #0
 8011616:	d016      	beq.n	8011646 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	68da      	ldr	r2, [r3, #12]
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011622:	b292      	uxth	r2, r2
 8011624:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801162a:	1c9a      	adds	r2, r3, #2
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011636:	b29b      	uxth	r3, r3
 8011638:	3b01      	subs	r3, #1
 801163a:	b29a      	uxth	r2, r3
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011642:	2301      	movs	r3, #1
 8011644:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011646:	f7fb fc73 	bl	800cf30 <HAL_GetTick>
 801164a:	4602      	mov	r2, r0
 801164c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011652:	429a      	cmp	r2, r3
 8011654:	d807      	bhi.n	8011666 <HAL_SPI_TransmitReceive+0x2a6>
 8011656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801165c:	d003      	beq.n	8011666 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 801165e:	2303      	movs	r3, #3
 8011660:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8011664:	e182      	b.n	801196c <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801166a:	b29b      	uxth	r3, r3
 801166c:	2b00      	cmp	r3, #0
 801166e:	f47f af7f 	bne.w	8011570 <HAL_SPI_TransmitReceive+0x1b0>
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011678:	b29b      	uxth	r3, r3
 801167a:	2b00      	cmp	r3, #0
 801167c:	f47f af78 	bne.w	8011570 <HAL_SPI_TransmitReceive+0x1b0>
 8011680:	e103      	b.n	801188a <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d003      	beq.n	8011692 <HAL_SPI_TransmitReceive+0x2d2>
 801168a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801168c:	2b01      	cmp	r3, #1
 801168e:	f040 80ef 	bne.w	8011870 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011696:	b29b      	uxth	r3, r3
 8011698:	2b01      	cmp	r3, #1
 801169a:	d912      	bls.n	80116c2 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116a0:	881a      	ldrh	r2, [r3, #0]
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116ac:	1c9a      	adds	r2, r3, #2
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	3b02      	subs	r3, #2
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80116c0:	e0d6      	b.n	8011870 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	330c      	adds	r3, #12
 80116cc:	7812      	ldrb	r2, [r2, #0]
 80116ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116d4:	1c5a      	adds	r2, r3, #1
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80116de:	b29b      	uxth	r3, r3
 80116e0:	3b01      	subs	r3, #1
 80116e2:	b29a      	uxth	r2, r3
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80116e8:	e0c2      	b.n	8011870 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	689b      	ldr	r3, [r3, #8]
 80116f0:	f003 0302 	and.w	r3, r3, #2
 80116f4:	2b02      	cmp	r3, #2
 80116f6:	d158      	bne.n	80117aa <HAL_SPI_TransmitReceive+0x3ea>
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d053      	beq.n	80117aa <HAL_SPI_TransmitReceive+0x3ea>
 8011702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011704:	2b01      	cmp	r3, #1
 8011706:	d150      	bne.n	80117aa <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801170c:	b29b      	uxth	r3, r3
 801170e:	2b01      	cmp	r3, #1
 8011710:	d912      	bls.n	8011738 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011716:	881a      	ldrh	r2, [r3, #0]
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011722:	1c9a      	adds	r2, r3, #2
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801172c:	b29b      	uxth	r3, r3
 801172e:	3b02      	subs	r3, #2
 8011730:	b29a      	uxth	r2, r3
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011736:	e012      	b.n	801175e <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	330c      	adds	r3, #12
 8011742:	7812      	ldrb	r2, [r2, #0]
 8011744:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801174a:	1c5a      	adds	r2, r3, #1
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011754:	b29b      	uxth	r3, r3
 8011756:	3b01      	subs	r3, #1
 8011758:	b29a      	uxth	r2, r3
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801175e:	2300      	movs	r3, #0
 8011760:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011766:	b29b      	uxth	r3, r3
 8011768:	2b00      	cmp	r3, #0
 801176a:	d11e      	bne.n	80117aa <HAL_SPI_TransmitReceive+0x3ea>
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011774:	d119      	bne.n	80117aa <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8011776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011778:	f003 0304 	and.w	r3, r3, #4
 801177c:	2b00      	cmp	r3, #0
 801177e:	d10c      	bne.n	801179a <HAL_SPI_TransmitReceive+0x3da>
 8011780:	6a3b      	ldr	r3, [r7, #32]
 8011782:	f003 0308 	and.w	r3, r3, #8
 8011786:	2b00      	cmp	r3, #0
 8011788:	d007      	beq.n	801179a <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	681a      	ldr	r2, [r3, #0]
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011798:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	681a      	ldr	r2, [r3, #0]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80117a8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	f003 0301 	and.w	r3, r3, #1
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d148      	bne.n	801184a <HAL_SPI_TransmitReceive+0x48a>
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80117be:	b29b      	uxth	r3, r3
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d042      	beq.n	801184a <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d923      	bls.n	8011818 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	68da      	ldr	r2, [r3, #12]
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117da:	b292      	uxth	r2, r2
 80117dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117e2:	1c9a      	adds	r2, r3, #2
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	3b02      	subs	r3, #2
 80117f2:	b29a      	uxth	r2, r3
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011800:	b29b      	uxth	r3, r3
 8011802:	2b01      	cmp	r3, #1
 8011804:	d81f      	bhi.n	8011846 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	685a      	ldr	r2, [r3, #4]
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011814:	605a      	str	r2, [r3, #4]
 8011816:	e016      	b.n	8011846 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	f103 020c 	add.w	r2, r3, #12
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011824:	7812      	ldrb	r2, [r2, #0]
 8011826:	b2d2      	uxtb	r2, r2
 8011828:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801182e:	1c5a      	adds	r2, r3, #1
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801183a:	b29b      	uxth	r3, r3
 801183c:	3b01      	subs	r3, #1
 801183e:	b29a      	uxth	r2, r3
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011846:	2301      	movs	r3, #1
 8011848:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801184a:	f7fb fb71 	bl	800cf30 <HAL_GetTick>
 801184e:	4602      	mov	r2, r0
 8011850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011852:	1ad3      	subs	r3, r2, r3
 8011854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011856:	429a      	cmp	r2, r3
 8011858:	d803      	bhi.n	8011862 <HAL_SPI_TransmitReceive+0x4a2>
 801185a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011860:	d102      	bne.n	8011868 <HAL_SPI_TransmitReceive+0x4a8>
 8011862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011864:	2b00      	cmp	r3, #0
 8011866:	d103      	bne.n	8011870 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8011868:	2303      	movs	r3, #3
 801186a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 801186e:	e07d      	b.n	801196c <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011874:	b29b      	uxth	r3, r3
 8011876:	2b00      	cmp	r3, #0
 8011878:	f47f af37 	bne.w	80116ea <HAL_SPI_TransmitReceive+0x32a>
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011882:	b29b      	uxth	r3, r3
 8011884:	2b00      	cmp	r3, #0
 8011886:	f47f af30 	bne.w	80116ea <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801188e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011892:	d146      	bne.n	8011922 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8011894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011896:	9300      	str	r3, [sp, #0]
 8011898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801189a:	2201      	movs	r2, #1
 801189c:	2101      	movs	r1, #1
 801189e:	68f8      	ldr	r0, [r7, #12]
 80118a0:	f000 f872 	bl	8011988 <SPI_WaitFlagStateUntilTimeout>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d009      	beq.n	80118be <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80118ae:	f043 0202 	orr.w	r2, r3, #2
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 80118b6:	2303      	movs	r3, #3
 80118b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 80118bc:	e056      	b.n	801196c <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80118c6:	d105      	bne.n	80118d4 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	68db      	ldr	r3, [r3, #12]
 80118ce:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80118d0:	69bb      	ldr	r3, [r7, #24]
 80118d2:	e026      	b.n	8011922 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	330c      	adds	r3, #12
 80118da:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	b2db      	uxtb	r3, r3
 80118e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80118e4:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d119      	bne.n	8011922 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80118ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f0:	9300      	str	r3, [sp, #0]
 80118f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118f4:	2201      	movs	r2, #1
 80118f6:	2101      	movs	r1, #1
 80118f8:	68f8      	ldr	r0, [r7, #12]
 80118fa:	f000 f845 	bl	8011988 <SPI_WaitFlagStateUntilTimeout>
 80118fe:	4603      	mov	r3, r0
 8011900:	2b00      	cmp	r3, #0
 8011902:	d009      	beq.n	8011918 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011908:	f043 0202 	orr.w	r2, r3, #2
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8011910:	2303      	movs	r3, #3
 8011912:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8011916:	e029      	b.n	801196c <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	b2db      	uxtb	r3, r3
 801191e:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8011920:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	f003 0310 	and.w	r3, r3, #16
 801192c:	2b10      	cmp	r3, #16
 801192e:	d10d      	bne.n	801194c <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011934:	f043 0202 	orr.w	r2, r3, #2
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8011944:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8011946:	2301      	movs	r3, #1
 8011948:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801194c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801194e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f000 f98f 	bl	8011c74 <SPI_EndRxTxTransaction>
 8011956:	4603      	mov	r3, r0
 8011958:	2b00      	cmp	r3, #0
 801195a:	d006      	beq.n	801196a <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 801195c:	2301      	movs	r3, #1
 801195e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2220      	movs	r2, #32
 8011966:	661a      	str	r2, [r3, #96]	; 0x60
 8011968:	e000      	b.n	801196c <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 801196a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2201      	movs	r2, #1
 8011970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	2200      	movs	r2, #0
 8011978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801197c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8011980:	4618      	mov	r0, r3
 8011982:	3740      	adds	r7, #64	; 0x40
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}

08011988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b088      	sub	sp, #32
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	603b      	str	r3, [r7, #0]
 8011994:	4613      	mov	r3, r2
 8011996:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011998:	f7fb faca 	bl	800cf30 <HAL_GetTick>
 801199c:	4602      	mov	r2, r0
 801199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a0:	1a9b      	subs	r3, r3, r2
 80119a2:	683a      	ldr	r2, [r7, #0]
 80119a4:	4413      	add	r3, r2
 80119a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80119a8:	f7fb fac2 	bl	800cf30 <HAL_GetTick>
 80119ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80119ae:	4b39      	ldr	r3, [pc, #228]	; (8011a94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	015b      	lsls	r3, r3, #5
 80119b4:	0d1b      	lsrs	r3, r3, #20
 80119b6:	69fa      	ldr	r2, [r7, #28]
 80119b8:	fb02 f303 	mul.w	r3, r2, r3
 80119bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80119be:	e054      	b.n	8011a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119c6:	d050      	beq.n	8011a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80119c8:	f7fb fab2 	bl	800cf30 <HAL_GetTick>
 80119cc:	4602      	mov	r2, r0
 80119ce:	69bb      	ldr	r3, [r7, #24]
 80119d0:	1ad3      	subs	r3, r2, r3
 80119d2:	69fa      	ldr	r2, [r7, #28]
 80119d4:	429a      	cmp	r2, r3
 80119d6:	d902      	bls.n	80119de <SPI_WaitFlagStateUntilTimeout+0x56>
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d13d      	bne.n	8011a5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	685a      	ldr	r2, [r3, #4]
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80119ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80119f6:	d111      	bne.n	8011a1c <SPI_WaitFlagStateUntilTimeout+0x94>
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	689b      	ldr	r3, [r3, #8]
 80119fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a00:	d004      	beq.n	8011a0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	689b      	ldr	r3, [r3, #8]
 8011a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a0a:	d107      	bne.n	8011a1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	681a      	ldr	r2, [r3, #0]
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011a1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a24:	d10f      	bne.n	8011a46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011a34:	601a      	str	r2, [r3, #0]
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011a44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	2201      	movs	r2, #1
 8011a4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	2200      	movs	r2, #0
 8011a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8011a56:	2303      	movs	r3, #3
 8011a58:	e017      	b.n	8011a8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d101      	bne.n	8011a64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011a60:	2300      	movs	r3, #0
 8011a62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	3b01      	subs	r3, #1
 8011a68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	689a      	ldr	r2, [r3, #8]
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	4013      	ands	r3, r2
 8011a74:	68ba      	ldr	r2, [r7, #8]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	bf0c      	ite	eq
 8011a7a:	2301      	moveq	r3, #1
 8011a7c:	2300      	movne	r3, #0
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	461a      	mov	r2, r3
 8011a82:	79fb      	ldrb	r3, [r7, #7]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d19b      	bne.n	80119c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011a88:	2300      	movs	r3, #0
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3720      	adds	r7, #32
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	20000080 	.word	0x20000080

08011a98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b08a      	sub	sp, #40	; 0x28
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	607a      	str	r2, [r7, #4]
 8011aa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011aaa:	f7fb fa41 	bl	800cf30 <HAL_GetTick>
 8011aae:	4602      	mov	r2, r0
 8011ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab2:	1a9b      	subs	r3, r3, r2
 8011ab4:	683a      	ldr	r2, [r7, #0]
 8011ab6:	4413      	add	r3, r2
 8011ab8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8011aba:	f7fb fa39 	bl	800cf30 <HAL_GetTick>
 8011abe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	330c      	adds	r3, #12
 8011ac6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011ac8:	4b3d      	ldr	r3, [pc, #244]	; (8011bc0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	4613      	mov	r3, r2
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4413      	add	r3, r2
 8011ad2:	00da      	lsls	r2, r3, #3
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	0d1b      	lsrs	r3, r3, #20
 8011ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ada:	fb02 f303 	mul.w	r3, r2, r3
 8011ade:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011ae0:	e060      	b.n	8011ba4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011ae8:	d107      	bne.n	8011afa <SPI_WaitFifoStateUntilTimeout+0x62>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d104      	bne.n	8011afa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011af8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b00:	d050      	beq.n	8011ba4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011b02:	f7fb fa15 	bl	800cf30 <HAL_GetTick>
 8011b06:	4602      	mov	r2, r0
 8011b08:	6a3b      	ldr	r3, [r7, #32]
 8011b0a:	1ad3      	subs	r3, r2, r3
 8011b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d902      	bls.n	8011b18 <SPI_WaitFifoStateUntilTimeout+0x80>
 8011b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d13d      	bne.n	8011b94 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	685a      	ldr	r2, [r3, #4]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011b26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011b30:	d111      	bne.n	8011b56 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	689b      	ldr	r3, [r3, #8]
 8011b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b3a:	d004      	beq.n	8011b46 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	689b      	ldr	r3, [r3, #8]
 8011b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b44:	d107      	bne.n	8011b56 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011b54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011b5e:	d10f      	bne.n	8011b80 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	681a      	ldr	r2, [r3, #0]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011b6e:	601a      	str	r2, [r3, #0]
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011b7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	2201      	movs	r2, #1
 8011b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8011b90:	2303      	movs	r3, #3
 8011b92:	e010      	b.n	8011bb6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011b94:	69bb      	ldr	r3, [r7, #24]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d101      	bne.n	8011b9e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8011b9e:	69bb      	ldr	r3, [r7, #24]
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	689a      	ldr	r2, [r3, #8]
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	4013      	ands	r3, r2
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d196      	bne.n	8011ae2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8011bb4:	2300      	movs	r3, #0
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3728      	adds	r7, #40	; 0x28
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	20000080 	.word	0x20000080

08011bc4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b086      	sub	sp, #24
 8011bc8:	af02      	add	r7, sp, #8
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	60b9      	str	r1, [r7, #8]
 8011bce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011bd8:	d111      	bne.n	8011bfe <SPI_EndRxTransaction+0x3a>
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011be2:	d004      	beq.n	8011bee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	689b      	ldr	r3, [r3, #8]
 8011be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011bec:	d107      	bne.n	8011bfe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	681a      	ldr	r2, [r3, #0]
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011bfc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	9300      	str	r3, [sp, #0]
 8011c02:	68bb      	ldr	r3, [r7, #8]
 8011c04:	2200      	movs	r2, #0
 8011c06:	2180      	movs	r1, #128	; 0x80
 8011c08:	68f8      	ldr	r0, [r7, #12]
 8011c0a:	f7ff febd 	bl	8011988 <SPI_WaitFlagStateUntilTimeout>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d007      	beq.n	8011c24 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c18:	f043 0220 	orr.w	r2, r3, #32
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011c20:	2303      	movs	r3, #3
 8011c22:	e023      	b.n	8011c6c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011c2c:	d11d      	bne.n	8011c6a <SPI_EndRxTransaction+0xa6>
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	689b      	ldr	r3, [r3, #8]
 8011c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c36:	d004      	beq.n	8011c42 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	689b      	ldr	r3, [r3, #8]
 8011c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c40:	d113      	bne.n	8011c6a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	9300      	str	r3, [sp, #0]
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011c4e:	68f8      	ldr	r0, [r7, #12]
 8011c50:	f7ff ff22 	bl	8011a98 <SPI_WaitFifoStateUntilTimeout>
 8011c54:	4603      	mov	r3, r0
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d007      	beq.n	8011c6a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c5e:	f043 0220 	orr.w	r2, r3, #32
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8011c66:	2303      	movs	r3, #3
 8011c68:	e000      	b.n	8011c6c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8011c6a:	2300      	movs	r3, #0
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3710      	adds	r7, #16
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b086      	sub	sp, #24
 8011c78:	af02      	add	r7, sp, #8
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	9300      	str	r3, [sp, #0]
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	2200      	movs	r2, #0
 8011c88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8011c8c:	68f8      	ldr	r0, [r7, #12]
 8011c8e:	f7ff ff03 	bl	8011a98 <SPI_WaitFifoStateUntilTimeout>
 8011c92:	4603      	mov	r3, r0
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d007      	beq.n	8011ca8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c9c:	f043 0220 	orr.w	r2, r3, #32
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011ca4:	2303      	movs	r3, #3
 8011ca6:	e027      	b.n	8011cf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	9300      	str	r3, [sp, #0]
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	2180      	movs	r1, #128	; 0x80
 8011cb2:	68f8      	ldr	r0, [r7, #12]
 8011cb4:	f7ff fe68 	bl	8011988 <SPI_WaitFlagStateUntilTimeout>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d007      	beq.n	8011cce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cc2:	f043 0220 	orr.w	r2, r3, #32
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011cca:	2303      	movs	r3, #3
 8011ccc:	e014      	b.n	8011cf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	9300      	str	r3, [sp, #0]
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011cda:	68f8      	ldr	r0, [r7, #12]
 8011cdc:	f7ff fedc 	bl	8011a98 <SPI_WaitFifoStateUntilTimeout>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d007      	beq.n	8011cf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cea:	f043 0220 	orr.w	r2, r3, #32
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011cf2:	2303      	movs	r3, #3
 8011cf4:	e000      	b.n	8011cf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011cf6:	2300      	movs	r3, #0
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3710      	adds	r7, #16
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d101      	bne.n	8011d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011d0e:	2301      	movs	r3, #1
 8011d10:	e049      	b.n	8011da6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d106      	bne.n	8011d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2200      	movs	r2, #0
 8011d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011d26:	6878      	ldr	r0, [r7, #4]
 8011d28:	f000 f841 	bl	8011dae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2202      	movs	r2, #2
 8011d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	3304      	adds	r3, #4
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	4610      	mov	r0, r2
 8011d40:	f000 f9ce 	bl	80120e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2201      	movs	r2, #1
 8011d48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2201      	movs	r2, #1
 8011d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	2201      	movs	r2, #1
 8011d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2201      	movs	r2, #1
 8011d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2201      	movs	r2, #1
 8011d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2201      	movs	r2, #1
 8011d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2201      	movs	r2, #1
 8011d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2201      	movs	r2, #1
 8011d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2201      	movs	r2, #1
 8011d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2201      	movs	r2, #1
 8011d98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2201      	movs	r2, #1
 8011da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011da4:	2300      	movs	r3, #0
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3708      	adds	r7, #8
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}

08011dae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8011dae:	b480      	push	{r7}
 8011db0:	b083      	sub	sp, #12
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011db6:	bf00      	nop
 8011db8:	370c      	adds	r7, #12
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bc80      	pop	{r7}
 8011dbe:	4770      	bx	lr

08011dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b085      	sub	sp, #20
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d001      	beq.n	8011dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	e036      	b.n	8011e46 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2202      	movs	r2, #2
 8011ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	68da      	ldr	r2, [r3, #12]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f042 0201 	orr.w	r2, r2, #1
 8011dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	4a16      	ldr	r2, [pc, #88]	; (8011e50 <HAL_TIM_Base_Start_IT+0x90>)
 8011df6:	4293      	cmp	r3, r2
 8011df8:	d004      	beq.n	8011e04 <HAL_TIM_Base_Start_IT+0x44>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e02:	d115      	bne.n	8011e30 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	689a      	ldr	r2, [r3, #8]
 8011e0a:	4b12      	ldr	r3, [pc, #72]	; (8011e54 <HAL_TIM_Base_Start_IT+0x94>)
 8011e0c:	4013      	ands	r3, r2
 8011e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	2b06      	cmp	r3, #6
 8011e14:	d015      	beq.n	8011e42 <HAL_TIM_Base_Start_IT+0x82>
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e1c:	d011      	beq.n	8011e42 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	681a      	ldr	r2, [r3, #0]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f042 0201 	orr.w	r2, r2, #1
 8011e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e2e:	e008      	b.n	8011e42 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	681a      	ldr	r2, [r3, #0]
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f042 0201 	orr.w	r2, r2, #1
 8011e3e:	601a      	str	r2, [r3, #0]
 8011e40:	e000      	b.n	8011e44 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3714      	adds	r7, #20
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bc80      	pop	{r7}
 8011e4e:	4770      	bx	lr
 8011e50:	40012c00 	.word	0x40012c00
 8011e54:	00010007 	.word	0x00010007

08011e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	691b      	ldr	r3, [r3, #16]
 8011e66:	f003 0302 	and.w	r3, r3, #2
 8011e6a:	2b02      	cmp	r3, #2
 8011e6c:	d122      	bne.n	8011eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	f003 0302 	and.w	r3, r3, #2
 8011e78:	2b02      	cmp	r3, #2
 8011e7a:	d11b      	bne.n	8011eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f06f 0202 	mvn.w	r2, #2
 8011e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2201      	movs	r2, #1
 8011e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	699b      	ldr	r3, [r3, #24]
 8011e92:	f003 0303 	and.w	r3, r3, #3
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d003      	beq.n	8011ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 f904 	bl	80120a8 <HAL_TIM_IC_CaptureCallback>
 8011ea0:	e005      	b.n	8011eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f000 f8f7 	bl	8012096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 f906 	bl	80120ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	691b      	ldr	r3, [r3, #16]
 8011eba:	f003 0304 	and.w	r3, r3, #4
 8011ebe:	2b04      	cmp	r3, #4
 8011ec0:	d122      	bne.n	8011f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	68db      	ldr	r3, [r3, #12]
 8011ec8:	f003 0304 	and.w	r3, r3, #4
 8011ecc:	2b04      	cmp	r3, #4
 8011ece:	d11b      	bne.n	8011f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f06f 0204 	mvn.w	r2, #4
 8011ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2202      	movs	r2, #2
 8011ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	699b      	ldr	r3, [r3, #24]
 8011ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d003      	beq.n	8011ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f000 f8da 	bl	80120a8 <HAL_TIM_IC_CaptureCallback>
 8011ef4:	e005      	b.n	8011f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f000 f8cd 	bl	8012096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f000 f8dc 	bl	80120ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	2200      	movs	r2, #0
 8011f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	691b      	ldr	r3, [r3, #16]
 8011f0e:	f003 0308 	and.w	r3, r3, #8
 8011f12:	2b08      	cmp	r3, #8
 8011f14:	d122      	bne.n	8011f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	68db      	ldr	r3, [r3, #12]
 8011f1c:	f003 0308 	and.w	r3, r3, #8
 8011f20:	2b08      	cmp	r3, #8
 8011f22:	d11b      	bne.n	8011f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	f06f 0208 	mvn.w	r2, #8
 8011f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2204      	movs	r2, #4
 8011f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	69db      	ldr	r3, [r3, #28]
 8011f3a:	f003 0303 	and.w	r3, r3, #3
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d003      	beq.n	8011f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 f8b0 	bl	80120a8 <HAL_TIM_IC_CaptureCallback>
 8011f48:	e005      	b.n	8011f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f000 f8a3 	bl	8012096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f000 f8b2 	bl	80120ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	691b      	ldr	r3, [r3, #16]
 8011f62:	f003 0310 	and.w	r3, r3, #16
 8011f66:	2b10      	cmp	r3, #16
 8011f68:	d122      	bne.n	8011fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	68db      	ldr	r3, [r3, #12]
 8011f70:	f003 0310 	and.w	r3, r3, #16
 8011f74:	2b10      	cmp	r3, #16
 8011f76:	d11b      	bne.n	8011fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f06f 0210 	mvn.w	r2, #16
 8011f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2208      	movs	r2, #8
 8011f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	69db      	ldr	r3, [r3, #28]
 8011f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d003      	beq.n	8011f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 f886 	bl	80120a8 <HAL_TIM_IC_CaptureCallback>
 8011f9c:	e005      	b.n	8011faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f000 f879 	bl	8012096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f000 f888 	bl	80120ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2200      	movs	r2, #0
 8011fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	f003 0301 	and.w	r3, r3, #1
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d10e      	bne.n	8011fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	f003 0301 	and.w	r3, r3, #1
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d107      	bne.n	8011fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	f06f 0201 	mvn.w	r2, #1
 8011fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f7f8 f8da 	bl	800a190 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fe6:	2b80      	cmp	r3, #128	; 0x80
 8011fe8:	d10e      	bne.n	8012008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ff4:	2b80      	cmp	r3, #128	; 0x80
 8011ff6:	d107      	bne.n	8012008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 f8d7 	bl	80121b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	691b      	ldr	r3, [r3, #16]
 801200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012016:	d10e      	bne.n	8012036 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	68db      	ldr	r3, [r3, #12]
 801201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012022:	2b80      	cmp	r3, #128	; 0x80
 8012024:	d107      	bne.n	8012036 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801202e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 f8c9 	bl	80121c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	691b      	ldr	r3, [r3, #16]
 801203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012040:	2b40      	cmp	r3, #64	; 0x40
 8012042:	d10e      	bne.n	8012062 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	68db      	ldr	r3, [r3, #12]
 801204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801204e:	2b40      	cmp	r3, #64	; 0x40
 8012050:	d107      	bne.n	8012062 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801205a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 f835 	bl	80120cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	691b      	ldr	r3, [r3, #16]
 8012068:	f003 0320 	and.w	r3, r3, #32
 801206c:	2b20      	cmp	r3, #32
 801206e:	d10e      	bne.n	801208e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	68db      	ldr	r3, [r3, #12]
 8012076:	f003 0320 	and.w	r3, r3, #32
 801207a:	2b20      	cmp	r3, #32
 801207c:	d107      	bne.n	801208e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f06f 0220 	mvn.w	r2, #32
 8012086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f000 f88b 	bl	80121a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801208e:	bf00      	nop
 8012090:	3708      	adds	r7, #8
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}

08012096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012096:	b480      	push	{r7}
 8012098:	b083      	sub	sp, #12
 801209a:	af00      	add	r7, sp, #0
 801209c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801209e:	bf00      	nop
 80120a0:	370c      	adds	r7, #12
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bc80      	pop	{r7}
 80120a6:	4770      	bx	lr

080120a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80120b0:	bf00      	nop
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bc80      	pop	{r7}
 80120b8:	4770      	bx	lr

080120ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80120ba:	b480      	push	{r7}
 80120bc:	b083      	sub	sp, #12
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80120c2:	bf00      	nop
 80120c4:	370c      	adds	r7, #12
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bc80      	pop	{r7}
 80120ca:	4770      	bx	lr

080120cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80120d4:	bf00      	nop
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	bc80      	pop	{r7}
 80120dc:	4770      	bx	lr
	...

080120e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80120e0:	b480      	push	{r7}
 80120e2:	b085      	sub	sp, #20
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	4a29      	ldr	r2, [pc, #164]	; (8012198 <TIM_Base_SetConfig+0xb8>)
 80120f4:	4293      	cmp	r3, r2
 80120f6:	d003      	beq.n	8012100 <TIM_Base_SetConfig+0x20>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80120fe:	d108      	bne.n	8012112 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	68fa      	ldr	r2, [r7, #12]
 801210e:	4313      	orrs	r3, r2
 8012110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4a20      	ldr	r2, [pc, #128]	; (8012198 <TIM_Base_SetConfig+0xb8>)
 8012116:	4293      	cmp	r3, r2
 8012118:	d00b      	beq.n	8012132 <TIM_Base_SetConfig+0x52>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012120:	d007      	beq.n	8012132 <TIM_Base_SetConfig+0x52>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	4a1d      	ldr	r2, [pc, #116]	; (801219c <TIM_Base_SetConfig+0xbc>)
 8012126:	4293      	cmp	r3, r2
 8012128:	d003      	beq.n	8012132 <TIM_Base_SetConfig+0x52>
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	4a1c      	ldr	r2, [pc, #112]	; (80121a0 <TIM_Base_SetConfig+0xc0>)
 801212e:	4293      	cmp	r3, r2
 8012130:	d108      	bne.n	8012144 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801213a:	683b      	ldr	r3, [r7, #0]
 801213c:	68db      	ldr	r3, [r3, #12]
 801213e:	68fa      	ldr	r2, [r7, #12]
 8012140:	4313      	orrs	r3, r2
 8012142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	695b      	ldr	r3, [r3, #20]
 801214e:	4313      	orrs	r3, r2
 8012150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	68fa      	ldr	r2, [r7, #12]
 8012156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	689a      	ldr	r2, [r3, #8]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	4a0b      	ldr	r2, [pc, #44]	; (8012198 <TIM_Base_SetConfig+0xb8>)
 801216c:	4293      	cmp	r3, r2
 801216e:	d007      	beq.n	8012180 <TIM_Base_SetConfig+0xa0>
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	4a0a      	ldr	r2, [pc, #40]	; (801219c <TIM_Base_SetConfig+0xbc>)
 8012174:	4293      	cmp	r3, r2
 8012176:	d003      	beq.n	8012180 <TIM_Base_SetConfig+0xa0>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	4a09      	ldr	r2, [pc, #36]	; (80121a0 <TIM_Base_SetConfig+0xc0>)
 801217c:	4293      	cmp	r3, r2
 801217e:	d103      	bne.n	8012188 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	691a      	ldr	r2, [r3, #16]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2201      	movs	r2, #1
 801218c:	615a      	str	r2, [r3, #20]
}
 801218e:	bf00      	nop
 8012190:	3714      	adds	r7, #20
 8012192:	46bd      	mov	sp, r7
 8012194:	bc80      	pop	{r7}
 8012196:	4770      	bx	lr
 8012198:	40012c00 	.word	0x40012c00
 801219c:	40014400 	.word	0x40014400
 80121a0:	40014800 	.word	0x40014800

080121a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80121a4:	b480      	push	{r7}
 80121a6:	b083      	sub	sp, #12
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80121ac:	bf00      	nop
 80121ae:	370c      	adds	r7, #12
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bc80      	pop	{r7}
 80121b4:	4770      	bx	lr

080121b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80121b6:	b480      	push	{r7}
 80121b8:	b083      	sub	sp, #12
 80121ba:	af00      	add	r7, sp, #0
 80121bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80121be:	bf00      	nop
 80121c0:	370c      	adds	r7, #12
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bc80      	pop	{r7}
 80121c6:	4770      	bx	lr

080121c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b083      	sub	sp, #12
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80121d0:	bf00      	nop
 80121d2:	370c      	adds	r7, #12
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bc80      	pop	{r7}
 80121d8:	4770      	bx	lr

080121da <LL_RCC_GetUSARTClockSource>:
{
 80121da:	b480      	push	{r7}
 80121dc:	b083      	sub	sp, #12
 80121de:	af00      	add	r7, sp, #0
 80121e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80121e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80121e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	401a      	ands	r2, r3
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	041b      	lsls	r3, r3, #16
 80121f2:	4313      	orrs	r3, r2
}
 80121f4:	4618      	mov	r0, r3
 80121f6:	370c      	adds	r7, #12
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bc80      	pop	{r7}
 80121fc:	4770      	bx	lr

080121fe <LL_RCC_GetLPUARTClockSource>:
{
 80121fe:	b480      	push	{r7}
 8012200:	b083      	sub	sp, #12
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8012206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801220a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	4013      	ands	r3, r2
}
 8012212:	4618      	mov	r0, r3
 8012214:	370c      	adds	r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	bc80      	pop	{r7}
 801221a:	4770      	bx	lr

0801221c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b082      	sub	sp, #8
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d101      	bne.n	801222e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801222a:	2301      	movs	r3, #1
 801222c:	e042      	b.n	80122b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012234:	2b00      	cmp	r3, #0
 8012236:	d106      	bne.n	8012246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2200      	movs	r2, #0
 801223c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f7f8 f8e3 	bl	800a40c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2224      	movs	r2, #36	; 0x24
 801224a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	f022 0201 	bic.w	r2, r2, #1
 801225c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f000 fd5c 	bl	8012d1c <UART_SetConfig>
 8012264:	4603      	mov	r3, r0
 8012266:	2b01      	cmp	r3, #1
 8012268:	d101      	bne.n	801226e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801226a:	2301      	movs	r3, #1
 801226c:	e022      	b.n	80122b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012272:	2b00      	cmp	r3, #0
 8012274:	d002      	beq.n	801227c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f000 ffc4 	bl	8013204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	685a      	ldr	r2, [r3, #4]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801228a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	689a      	ldr	r2, [r3, #8]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801229a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f042 0201 	orr.w	r2, r2, #1
 80122aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f001 f84a 	bl	8013346 <UART_CheckIdleState>
 80122b2:	4603      	mov	r3, r0
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3708      	adds	r7, #8
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b082      	sub	sp, #8
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d101      	bne.n	80122ce <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80122ca:	2301      	movs	r3, #1
 80122cc:	e04a      	b.n	8012364 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d106      	bne.n	80122e6 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2200      	movs	r2, #0
 80122dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7f8 f893 	bl	800a40c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2224      	movs	r2, #36	; 0x24
 80122ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	681a      	ldr	r2, [r3, #0]
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	f022 0201 	bic.w	r2, r2, #1
 80122fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 fd0c 	bl	8012d1c <UART_SetConfig>
 8012304:	4603      	mov	r3, r0
 8012306:	2b01      	cmp	r3, #1
 8012308:	d101      	bne.n	801230e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 801230a:	2301      	movs	r3, #1
 801230c:	e02a      	b.n	8012364 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012312:	2b00      	cmp	r3, #0
 8012314:	d002      	beq.n	801231c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 ff74 	bl	8013204 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	685a      	ldr	r2, [r3, #4]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801232a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	689a      	ldr	r2, [r3, #8]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 801233a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	689a      	ldr	r2, [r3, #8]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f042 0208 	orr.w	r2, r2, #8
 801234a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	f042 0201 	orr.w	r2, r2, #1
 801235a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f000 fff2 	bl	8013346 <UART_CheckIdleState>
 8012362:	4603      	mov	r3, r0
}
 8012364:	4618      	mov	r0, r3
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b08a      	sub	sp, #40	; 0x28
 8012370:	af02      	add	r7, sp, #8
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	603b      	str	r3, [r7, #0]
 8012378:	4613      	mov	r3, r2
 801237a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012382:	2b20      	cmp	r3, #32
 8012384:	d173      	bne.n	801246e <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d002      	beq.n	8012392 <HAL_UART_Transmit+0x26>
 801238c:	88fb      	ldrh	r3, [r7, #6]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d101      	bne.n	8012396 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012392:	2301      	movs	r3, #1
 8012394:	e06c      	b.n	8012470 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2200      	movs	r2, #0
 801239a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2221      	movs	r2, #33	; 0x21
 80123a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80123a6:	f7fa fdc3 	bl	800cf30 <HAL_GetTick>
 80123aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	88fa      	ldrh	r2, [r7, #6]
 80123b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	88fa      	ldrh	r2, [r7, #6]
 80123b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	689b      	ldr	r3, [r3, #8]
 80123c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123c4:	d108      	bne.n	80123d8 <HAL_UART_Transmit+0x6c>
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	691b      	ldr	r3, [r3, #16]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d104      	bne.n	80123d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80123ce:	2300      	movs	r3, #0
 80123d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	61bb      	str	r3, [r7, #24]
 80123d6:	e003      	b.n	80123e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80123dc:	2300      	movs	r3, #0
 80123de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80123e0:	e02c      	b.n	801243c <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	9300      	str	r3, [sp, #0]
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	2200      	movs	r2, #0
 80123ea:	2180      	movs	r1, #128	; 0x80
 80123ec:	68f8      	ldr	r0, [r7, #12]
 80123ee:	f000 fff8 	bl	80133e2 <UART_WaitOnFlagUntilTimeout>
 80123f2:	4603      	mov	r3, r0
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d001      	beq.n	80123fc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80123f8:	2303      	movs	r3, #3
 80123fa:	e039      	b.n	8012470 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80123fc:	69fb      	ldr	r3, [r7, #28]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d10b      	bne.n	801241a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012402:	69bb      	ldr	r3, [r7, #24]
 8012404:	881b      	ldrh	r3, [r3, #0]
 8012406:	461a      	mov	r2, r3
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012410:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012412:	69bb      	ldr	r3, [r7, #24]
 8012414:	3302      	adds	r3, #2
 8012416:	61bb      	str	r3, [r7, #24]
 8012418:	e007      	b.n	801242a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	781a      	ldrb	r2, [r3, #0]
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	3301      	adds	r3, #1
 8012428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012430:	b29b      	uxth	r3, r3
 8012432:	3b01      	subs	r3, #1
 8012434:	b29a      	uxth	r2, r3
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012442:	b29b      	uxth	r3, r3
 8012444:	2b00      	cmp	r3, #0
 8012446:	d1cc      	bne.n	80123e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	9300      	str	r3, [sp, #0]
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	2200      	movs	r2, #0
 8012450:	2140      	movs	r1, #64	; 0x40
 8012452:	68f8      	ldr	r0, [r7, #12]
 8012454:	f000 ffc5 	bl	80133e2 <UART_WaitOnFlagUntilTimeout>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d001      	beq.n	8012462 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 801245e:	2303      	movs	r3, #3
 8012460:	e006      	b.n	8012470 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	2220      	movs	r2, #32
 8012466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801246a:	2300      	movs	r3, #0
 801246c:	e000      	b.n	8012470 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 801246e:	2302      	movs	r3, #2
  }
}
 8012470:	4618      	mov	r0, r3
 8012472:	3720      	adds	r7, #32
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}

08012478 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b08a      	sub	sp, #40	; 0x28
 801247c:	af02      	add	r7, sp, #8
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	603b      	str	r3, [r7, #0]
 8012484:	4613      	mov	r3, r2
 8012486:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801248e:	2b20      	cmp	r3, #32
 8012490:	f040 80b1 	bne.w	80125f6 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d002      	beq.n	80124a0 <HAL_UART_Receive+0x28>
 801249a:	88fb      	ldrh	r3, [r7, #6]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d101      	bne.n	80124a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80124a0:	2301      	movs	r3, #1
 80124a2:	e0a9      	b.n	80125f8 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2200      	movs	r2, #0
 80124a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	2222      	movs	r2, #34	; 0x22
 80124b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2200      	movs	r2, #0
 80124b8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80124ba:	f7fa fd39 	bl	800cf30 <HAL_GetTick>
 80124be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	88fa      	ldrh	r2, [r7, #6]
 80124c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	88fa      	ldrh	r2, [r7, #6]
 80124cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	689b      	ldr	r3, [r3, #8]
 80124d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80124d8:	d10e      	bne.n	80124f8 <HAL_UART_Receive+0x80>
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	691b      	ldr	r3, [r3, #16]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d105      	bne.n	80124ee <HAL_UART_Receive+0x76>
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80124e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80124ec:	e02d      	b.n	801254a <HAL_UART_Receive+0xd2>
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	22ff      	movs	r2, #255	; 0xff
 80124f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80124f6:	e028      	b.n	801254a <HAL_UART_Receive+0xd2>
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d10d      	bne.n	801251c <HAL_UART_Receive+0xa4>
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	691b      	ldr	r3, [r3, #16]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d104      	bne.n	8012512 <HAL_UART_Receive+0x9a>
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	22ff      	movs	r2, #255	; 0xff
 801250c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012510:	e01b      	b.n	801254a <HAL_UART_Receive+0xd2>
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	227f      	movs	r2, #127	; 0x7f
 8012516:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801251a:	e016      	b.n	801254a <HAL_UART_Receive+0xd2>
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	689b      	ldr	r3, [r3, #8]
 8012520:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012524:	d10d      	bne.n	8012542 <HAL_UART_Receive+0xca>
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	691b      	ldr	r3, [r3, #16]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d104      	bne.n	8012538 <HAL_UART_Receive+0xc0>
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	227f      	movs	r2, #127	; 0x7f
 8012532:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012536:	e008      	b.n	801254a <HAL_UART_Receive+0xd2>
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	223f      	movs	r2, #63	; 0x3f
 801253c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012540:	e003      	b.n	801254a <HAL_UART_Receive+0xd2>
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	2200      	movs	r2, #0
 8012546:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012550:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	689b      	ldr	r3, [r3, #8]
 8012556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801255a:	d108      	bne.n	801256e <HAL_UART_Receive+0xf6>
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	691b      	ldr	r3, [r3, #16]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d104      	bne.n	801256e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8012564:	2300      	movs	r3, #0
 8012566:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	61bb      	str	r3, [r7, #24]
 801256c:	e003      	b.n	8012576 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012572:	2300      	movs	r3, #0
 8012574:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8012576:	e032      	b.n	80125de <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	9300      	str	r3, [sp, #0]
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	2200      	movs	r2, #0
 8012580:	2120      	movs	r1, #32
 8012582:	68f8      	ldr	r0, [r7, #12]
 8012584:	f000 ff2d 	bl	80133e2 <UART_WaitOnFlagUntilTimeout>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d001      	beq.n	8012592 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 801258e:	2303      	movs	r3, #3
 8012590:	e032      	b.n	80125f8 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d10c      	bne.n	80125b2 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801259e:	b29a      	uxth	r2, r3
 80125a0:	8a7b      	ldrh	r3, [r7, #18]
 80125a2:	4013      	ands	r3, r2
 80125a4:	b29a      	uxth	r2, r3
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80125aa:	69bb      	ldr	r3, [r7, #24]
 80125ac:	3302      	adds	r3, #2
 80125ae:	61bb      	str	r3, [r7, #24]
 80125b0:	e00c      	b.n	80125cc <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125b8:	b2da      	uxtb	r2, r3
 80125ba:	8a7b      	ldrh	r3, [r7, #18]
 80125bc:	b2db      	uxtb	r3, r3
 80125be:	4013      	ands	r3, r2
 80125c0:	b2da      	uxtb	r2, r3
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80125c6:	69fb      	ldr	r3, [r7, #28]
 80125c8:	3301      	adds	r3, #1
 80125ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	3b01      	subs	r3, #1
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d1c6      	bne.n	8012578 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	2220      	movs	r2, #32
 80125ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80125f2:	2300      	movs	r3, #0
 80125f4:	e000      	b.n	80125f8 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80125f6:	2302      	movs	r3, #2
  }
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3720      	adds	r7, #32
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b08a      	sub	sp, #40	; 0x28
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	4613      	mov	r3, r2
 801260c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012614:	2b20      	cmp	r3, #32
 8012616:	d137      	bne.n	8012688 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d002      	beq.n	8012624 <HAL_UART_Receive_IT+0x24>
 801261e:	88fb      	ldrh	r3, [r7, #6]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d101      	bne.n	8012628 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8012624:	2301      	movs	r3, #1
 8012626:	e030      	b.n	801268a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2200      	movs	r2, #0
 801262c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	4a18      	ldr	r2, [pc, #96]	; (8012694 <HAL_UART_Receive_IT+0x94>)
 8012634:	4293      	cmp	r3, r2
 8012636:	d01f      	beq.n	8012678 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012642:	2b00      	cmp	r3, #0
 8012644:	d018      	beq.n	8012678 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	e853 3f00 	ldrex	r3, [r3]
 8012652:	613b      	str	r3, [r7, #16]
   return(result);
 8012654:	693b      	ldr	r3, [r7, #16]
 8012656:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801265a:	627b      	str	r3, [r7, #36]	; 0x24
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	461a      	mov	r2, r3
 8012662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012664:	623b      	str	r3, [r7, #32]
 8012666:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012668:	69f9      	ldr	r1, [r7, #28]
 801266a:	6a3a      	ldr	r2, [r7, #32]
 801266c:	e841 2300 	strex	r3, r2, [r1]
 8012670:	61bb      	str	r3, [r7, #24]
   return(result);
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d1e6      	bne.n	8012646 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012678:	88fb      	ldrh	r3, [r7, #6]
 801267a:	461a      	mov	r2, r3
 801267c:	68b9      	ldr	r1, [r7, #8]
 801267e:	68f8      	ldr	r0, [r7, #12]
 8012680:	f000 ff78 	bl	8013574 <UART_Start_Receive_IT>
 8012684:	4603      	mov	r3, r0
 8012686:	e000      	b.n	801268a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012688:	2302      	movs	r3, #2
  }
}
 801268a:	4618      	mov	r0, r3
 801268c:	3728      	adds	r7, #40	; 0x28
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	40008000 	.word	0x40008000

08012698 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b0ba      	sub	sp, #232	; 0xe8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	69db      	ldr	r3, [r3, #28]
 80126a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	689b      	ldr	r3, [r3, #8]
 80126ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80126be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80126c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80126c6:	4013      	ands	r3, r2
 80126c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80126cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d11b      	bne.n	801270c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80126d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80126d8:	f003 0320 	and.w	r3, r3, #32
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d015      	beq.n	801270c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80126e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126e4:	f003 0320 	and.w	r3, r3, #32
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d105      	bne.n	80126f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80126ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d009      	beq.n	801270c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	f000 82e3 	beq.w	8012cc8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	4798      	blx	r3
      }
      return;
 801270a:	e2dd      	b.n	8012cc8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801270c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012710:	2b00      	cmp	r3, #0
 8012712:	f000 8123 	beq.w	801295c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012716:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801271a:	4b8d      	ldr	r3, [pc, #564]	; (8012950 <HAL_UART_IRQHandler+0x2b8>)
 801271c:	4013      	ands	r3, r2
 801271e:	2b00      	cmp	r3, #0
 8012720:	d106      	bne.n	8012730 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012722:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012726:	4b8b      	ldr	r3, [pc, #556]	; (8012954 <HAL_UART_IRQHandler+0x2bc>)
 8012728:	4013      	ands	r3, r2
 801272a:	2b00      	cmp	r3, #0
 801272c:	f000 8116 	beq.w	801295c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012734:	f003 0301 	and.w	r3, r3, #1
 8012738:	2b00      	cmp	r3, #0
 801273a:	d011      	beq.n	8012760 <HAL_UART_IRQHandler+0xc8>
 801273c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012744:	2b00      	cmp	r3, #0
 8012746:	d00b      	beq.n	8012760 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	2201      	movs	r2, #1
 801274e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012756:	f043 0201 	orr.w	r2, r3, #1
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012764:	f003 0302 	and.w	r3, r3, #2
 8012768:	2b00      	cmp	r3, #0
 801276a:	d011      	beq.n	8012790 <HAL_UART_IRQHandler+0xf8>
 801276c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012770:	f003 0301 	and.w	r3, r3, #1
 8012774:	2b00      	cmp	r3, #0
 8012776:	d00b      	beq.n	8012790 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2202      	movs	r2, #2
 801277e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012786:	f043 0204 	orr.w	r2, r3, #4
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012794:	f003 0304 	and.w	r3, r3, #4
 8012798:	2b00      	cmp	r3, #0
 801279a:	d011      	beq.n	80127c0 <HAL_UART_IRQHandler+0x128>
 801279c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80127a0:	f003 0301 	and.w	r3, r3, #1
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d00b      	beq.n	80127c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2204      	movs	r2, #4
 80127ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127b6:	f043 0202 	orr.w	r2, r3, #2
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80127c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127c4:	f003 0308 	and.w	r3, r3, #8
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d017      	beq.n	80127fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80127cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127d0:	f003 0320 	and.w	r3, r3, #32
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d105      	bne.n	80127e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80127d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80127dc:	4b5c      	ldr	r3, [pc, #368]	; (8012950 <HAL_UART_IRQHandler+0x2b8>)
 80127de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d00b      	beq.n	80127fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	2208      	movs	r2, #8
 80127ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127f2:	f043 0208 	orr.w	r2, r3, #8
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80127fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012804:	2b00      	cmp	r3, #0
 8012806:	d012      	beq.n	801282e <HAL_UART_IRQHandler+0x196>
 8012808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801280c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012810:	2b00      	cmp	r3, #0
 8012812:	d00c      	beq.n	801282e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801281c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012824:	f043 0220 	orr.w	r2, r3, #32
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012834:	2b00      	cmp	r3, #0
 8012836:	f000 8249 	beq.w	8012ccc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801283a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801283e:	f003 0320 	and.w	r3, r3, #32
 8012842:	2b00      	cmp	r3, #0
 8012844:	d013      	beq.n	801286e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801284a:	f003 0320 	and.w	r3, r3, #32
 801284e:	2b00      	cmp	r3, #0
 8012850:	d105      	bne.n	801285e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801285a:	2b00      	cmp	r3, #0
 801285c:	d007      	beq.n	801286e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012862:	2b00      	cmp	r3, #0
 8012864:	d003      	beq.n	801286e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012874:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	689b      	ldr	r3, [r3, #8]
 801287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012882:	2b40      	cmp	r3, #64	; 0x40
 8012884:	d005      	beq.n	8012892 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801288a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801288e:	2b00      	cmp	r3, #0
 8012890:	d054      	beq.n	801293c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f000 ff8e 	bl	80137b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	689b      	ldr	r3, [r3, #8]
 801289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128a2:	2b40      	cmp	r3, #64	; 0x40
 80128a4:	d146      	bne.n	8012934 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	3308      	adds	r3, #8
 80128ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128b4:	e853 3f00 	ldrex	r3, [r3]
 80128b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80128bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80128c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	3308      	adds	r3, #8
 80128ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80128d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80128d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80128de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80128e2:	e841 2300 	strex	r3, r2, [r1]
 80128e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80128ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d1d9      	bne.n	80128a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d017      	beq.n	801292c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012902:	4a15      	ldr	r2, [pc, #84]	; (8012958 <HAL_UART_IRQHandler+0x2c0>)
 8012904:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801290c:	4618      	mov	r0, r3
 801290e:	f7fb fca4 	bl	800e25a <HAL_DMA_Abort_IT>
 8012912:	4603      	mov	r3, r0
 8012914:	2b00      	cmp	r3, #0
 8012916:	d019      	beq.n	801294c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012920:	687a      	ldr	r2, [r7, #4]
 8012922:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012926:	4610      	mov	r0, r2
 8012928:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801292a:	e00f      	b.n	801294c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f000 f9e0 	bl	8012cf2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012932:	e00b      	b.n	801294c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f000 f9dc 	bl	8012cf2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801293a:	e007      	b.n	801294c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f000 f9d8 	bl	8012cf2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801294a:	e1bf      	b.n	8012ccc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801294c:	bf00      	nop
    return;
 801294e:	e1bd      	b.n	8012ccc <HAL_UART_IRQHandler+0x634>
 8012950:	10000001 	.word	0x10000001
 8012954:	04000120 	.word	0x04000120
 8012958:	0801387f 	.word	0x0801387f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012960:	2b01      	cmp	r3, #1
 8012962:	f040 8153 	bne.w	8012c0c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801296a:	f003 0310 	and.w	r3, r3, #16
 801296e:	2b00      	cmp	r3, #0
 8012970:	f000 814c 	beq.w	8012c0c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012978:	f003 0310 	and.w	r3, r3, #16
 801297c:	2b00      	cmp	r3, #0
 801297e:	f000 8145 	beq.w	8012c0c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2210      	movs	r2, #16
 8012988:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012994:	2b40      	cmp	r3, #64	; 0x40
 8012996:	f040 80bb 	bne.w	8012b10 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80129a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	f000 818f 	beq.w	8012cd0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80129bc:	429a      	cmp	r2, r3
 80129be:	f080 8187 	bcs.w	8012cd0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80129c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f003 0320 	and.w	r3, r3, #32
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f040 8087 	bne.w	8012aee <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80129ec:	e853 3f00 	ldrex	r3, [r3]
 80129f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80129f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80129f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80129fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	461a      	mov	r2, r3
 8012a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012a0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012a16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012a1a:	e841 2300 	strex	r3, r2, [r1]
 8012a1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d1da      	bne.n	80129e0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	3308      	adds	r3, #8
 8012a30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a34:	e853 3f00 	ldrex	r3, [r3]
 8012a38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a3c:	f023 0301 	bic.w	r3, r3, #1
 8012a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	3308      	adds	r3, #8
 8012a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012a4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012a52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012a56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012a5a:	e841 2300 	strex	r3, r2, [r1]
 8012a5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d1e1      	bne.n	8012a2a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	3308      	adds	r3, #8
 8012a6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a70:	e853 3f00 	ldrex	r3, [r3]
 8012a74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	3308      	adds	r3, #8
 8012a86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012a8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012a8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012a90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012a92:	e841 2300 	strex	r3, r2, [r1]
 8012a96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d1e3      	bne.n	8012a66 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	2220      	movs	r2, #32
 8012aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ab4:	e853 3f00 	ldrex	r3, [r3]
 8012ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012abc:	f023 0310 	bic.w	r3, r3, #16
 8012ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	461a      	mov	r2, r3
 8012aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ace:	65bb      	str	r3, [r7, #88]	; 0x58
 8012ad0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ad2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012ad4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012ad6:	e841 2300 	strex	r3, r2, [r1]
 8012ada:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d1e4      	bne.n	8012aac <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7fb fb58 	bl	800e19e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2202      	movs	r2, #2
 8012af2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	1ad3      	subs	r3, r2, r3
 8012b04:	b29b      	uxth	r3, r3
 8012b06:	4619      	mov	r1, r3
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f000 f8fb 	bl	8012d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012b0e:	e0df      	b.n	8012cd0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	1ad3      	subs	r3, r2, r3
 8012b20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b2a:	b29b      	uxth	r3, r3
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f000 80d1 	beq.w	8012cd4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8012b32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f000 80cc 	beq.w	8012cd4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b44:	e853 3f00 	ldrex	r3, [r3]
 8012b48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012b50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	461a      	mov	r2, r3
 8012b5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8012b60:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b66:	e841 2300 	strex	r3, r2, [r1]
 8012b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d1e4      	bne.n	8012b3c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	3308      	adds	r3, #8
 8012b78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7c:	e853 3f00 	ldrex	r3, [r3]
 8012b80:	623b      	str	r3, [r7, #32]
   return(result);
 8012b82:	6a3b      	ldr	r3, [r7, #32]
 8012b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012b88:	f023 0301 	bic.w	r3, r3, #1
 8012b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	3308      	adds	r3, #8
 8012b96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012b9a:	633a      	str	r2, [r7, #48]	; 0x30
 8012b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ba2:	e841 2300 	strex	r3, r2, [r1]
 8012ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d1e1      	bne.n	8012b72 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2220      	movs	r2, #32
 8012bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	e853 3f00 	ldrex	r3, [r3]
 8012bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	f023 0310 	bic.w	r3, r3, #16
 8012bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	461a      	mov	r2, r3
 8012be0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012be4:	61fb      	str	r3, [r7, #28]
 8012be6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012be8:	69b9      	ldr	r1, [r7, #24]
 8012bea:	69fa      	ldr	r2, [r7, #28]
 8012bec:	e841 2300 	strex	r3, r2, [r1]
 8012bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d1e4      	bne.n	8012bc2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2202      	movs	r2, #2
 8012bfc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012bfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012c02:	4619      	mov	r1, r3
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f000 f87d 	bl	8012d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012c0a:	e063      	b.n	8012cd4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d00e      	beq.n	8012c36 <HAL_UART_IRQHandler+0x59e>
 8012c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d008      	beq.n	8012c36 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012c2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f001 fb82 	bl	8014338 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c34:	e051      	b.n	8012cda <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d014      	beq.n	8012c6c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d105      	bne.n	8012c5a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d008      	beq.n	8012c6c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d03a      	beq.n	8012cd8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	4798      	blx	r3
    }
    return;
 8012c6a:	e035      	b.n	8012cd8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d009      	beq.n	8012c8c <HAL_UART_IRQHandler+0x5f4>
 8012c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d003      	beq.n	8012c8c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	f000 fe10 	bl	80138aa <UART_EndTransmit_IT>
    return;
 8012c8a:	e026      	b.n	8012cda <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d009      	beq.n	8012cac <HAL_UART_IRQHandler+0x614>
 8012c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d003      	beq.n	8012cac <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f001 fb59 	bl	801435c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012caa:	e016      	b.n	8012cda <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d010      	beq.n	8012cda <HAL_UART_IRQHandler+0x642>
 8012cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	da0c      	bge.n	8012cda <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f001 fb42 	bl	801434a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012cc6:	e008      	b.n	8012cda <HAL_UART_IRQHandler+0x642>
      return;
 8012cc8:	bf00      	nop
 8012cca:	e006      	b.n	8012cda <HAL_UART_IRQHandler+0x642>
    return;
 8012ccc:	bf00      	nop
 8012cce:	e004      	b.n	8012cda <HAL_UART_IRQHandler+0x642>
      return;
 8012cd0:	bf00      	nop
 8012cd2:	e002      	b.n	8012cda <HAL_UART_IRQHandler+0x642>
      return;
 8012cd4:	bf00      	nop
 8012cd6:	e000      	b.n	8012cda <HAL_UART_IRQHandler+0x642>
    return;
 8012cd8:	bf00      	nop
  }
}
 8012cda:	37e8      	adds	r7, #232	; 0xe8
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012ce8:	bf00      	nop
 8012cea:	370c      	adds	r7, #12
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bc80      	pop	{r7}
 8012cf0:	4770      	bx	lr

08012cf2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012cf2:	b480      	push	{r7}
 8012cf4:	b083      	sub	sp, #12
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012cfa:	bf00      	nop
 8012cfc:	370c      	adds	r7, #12
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bc80      	pop	{r7}
 8012d02:	4770      	bx	lr

08012d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	460b      	mov	r3, r1
 8012d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012d10:	bf00      	nop
 8012d12:	370c      	adds	r7, #12
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bc80      	pop	{r7}
 8012d18:	4770      	bx	lr
	...

08012d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012d20:	b08c      	sub	sp, #48	; 0x30
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012d26:	2300      	movs	r3, #0
 8012d28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	689a      	ldr	r2, [r3, #8]
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	691b      	ldr	r3, [r3, #16]
 8012d34:	431a      	orrs	r2, r3
 8012d36:	697b      	ldr	r3, [r7, #20]
 8012d38:	695b      	ldr	r3, [r3, #20]
 8012d3a:	431a      	orrs	r2, r3
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	69db      	ldr	r3, [r3, #28]
 8012d40:	4313      	orrs	r3, r2
 8012d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	4b94      	ldr	r3, [pc, #592]	; (8012f9c <UART_SetConfig+0x280>)
 8012d4c:	4013      	ands	r3, r2
 8012d4e:	697a      	ldr	r2, [r7, #20]
 8012d50:	6812      	ldr	r2, [r2, #0]
 8012d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d54:	430b      	orrs	r3, r1
 8012d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	68da      	ldr	r2, [r3, #12]
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	430a      	orrs	r2, r1
 8012d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	699b      	ldr	r3, [r3, #24]
 8012d72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012d74:	697b      	ldr	r3, [r7, #20]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	4a89      	ldr	r2, [pc, #548]	; (8012fa0 <UART_SetConfig+0x284>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d004      	beq.n	8012d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	6a1b      	ldr	r3, [r3, #32]
 8012d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d84:	4313      	orrs	r3, r2
 8012d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	689b      	ldr	r3, [r3, #8]
 8012d8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8012d92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8012d96:	697a      	ldr	r2, [r7, #20]
 8012d98:	6812      	ldr	r2, [r2, #0]
 8012d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d9c:	430b      	orrs	r3, r1
 8012d9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012da6:	f023 010f 	bic.w	r1, r3, #15
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012dae:	697b      	ldr	r3, [r7, #20]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	430a      	orrs	r2, r1
 8012db4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4a7a      	ldr	r2, [pc, #488]	; (8012fa4 <UART_SetConfig+0x288>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d127      	bne.n	8012e10 <UART_SetConfig+0xf4>
 8012dc0:	2003      	movs	r0, #3
 8012dc2:	f7ff fa0a 	bl	80121da <LL_RCC_GetUSARTClockSource>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8012dcc:	2b03      	cmp	r3, #3
 8012dce:	d81b      	bhi.n	8012e08 <UART_SetConfig+0xec>
 8012dd0:	a201      	add	r2, pc, #4	; (adr r2, 8012dd8 <UART_SetConfig+0xbc>)
 8012dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dd6:	bf00      	nop
 8012dd8:	08012de9 	.word	0x08012de9
 8012ddc:	08012df9 	.word	0x08012df9
 8012de0:	08012df1 	.word	0x08012df1
 8012de4:	08012e01 	.word	0x08012e01
 8012de8:	2301      	movs	r3, #1
 8012dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012dee:	e080      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012df0:	2302      	movs	r3, #2
 8012df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012df6:	e07c      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012df8:	2304      	movs	r3, #4
 8012dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012dfe:	e078      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012e00:	2308      	movs	r3, #8
 8012e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e06:	e074      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012e08:	2310      	movs	r3, #16
 8012e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e0e:	e070      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a64      	ldr	r2, [pc, #400]	; (8012fa8 <UART_SetConfig+0x28c>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d138      	bne.n	8012e8c <UART_SetConfig+0x170>
 8012e1a:	200c      	movs	r0, #12
 8012e1c:	f7ff f9dd 	bl	80121da <LL_RCC_GetUSARTClockSource>
 8012e20:	4603      	mov	r3, r0
 8012e22:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8012e26:	2b0c      	cmp	r3, #12
 8012e28:	d82c      	bhi.n	8012e84 <UART_SetConfig+0x168>
 8012e2a:	a201      	add	r2, pc, #4	; (adr r2, 8012e30 <UART_SetConfig+0x114>)
 8012e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e30:	08012e65 	.word	0x08012e65
 8012e34:	08012e85 	.word	0x08012e85
 8012e38:	08012e85 	.word	0x08012e85
 8012e3c:	08012e85 	.word	0x08012e85
 8012e40:	08012e75 	.word	0x08012e75
 8012e44:	08012e85 	.word	0x08012e85
 8012e48:	08012e85 	.word	0x08012e85
 8012e4c:	08012e85 	.word	0x08012e85
 8012e50:	08012e6d 	.word	0x08012e6d
 8012e54:	08012e85 	.word	0x08012e85
 8012e58:	08012e85 	.word	0x08012e85
 8012e5c:	08012e85 	.word	0x08012e85
 8012e60:	08012e7d 	.word	0x08012e7d
 8012e64:	2300      	movs	r3, #0
 8012e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e6a:	e042      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012e6c:	2302      	movs	r3, #2
 8012e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e72:	e03e      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012e74:	2304      	movs	r3, #4
 8012e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e7a:	e03a      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012e7c:	2308      	movs	r3, #8
 8012e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e82:	e036      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012e84:	2310      	movs	r3, #16
 8012e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e8a:	e032      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012e8c:	697b      	ldr	r3, [r7, #20]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	4a43      	ldr	r2, [pc, #268]	; (8012fa0 <UART_SetConfig+0x284>)
 8012e92:	4293      	cmp	r3, r2
 8012e94:	d12a      	bne.n	8012eec <UART_SetConfig+0x1d0>
 8012e96:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012e9a:	f7ff f9b0 	bl	80121fe <LL_RCC_GetLPUARTClockSource>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012ea4:	d01a      	beq.n	8012edc <UART_SetConfig+0x1c0>
 8012ea6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012eaa:	d81b      	bhi.n	8012ee4 <UART_SetConfig+0x1c8>
 8012eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012eb0:	d00c      	beq.n	8012ecc <UART_SetConfig+0x1b0>
 8012eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012eb6:	d815      	bhi.n	8012ee4 <UART_SetConfig+0x1c8>
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d003      	beq.n	8012ec4 <UART_SetConfig+0x1a8>
 8012ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ec0:	d008      	beq.n	8012ed4 <UART_SetConfig+0x1b8>
 8012ec2:	e00f      	b.n	8012ee4 <UART_SetConfig+0x1c8>
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012eca:	e012      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012ecc:	2302      	movs	r3, #2
 8012ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012ed2:	e00e      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012ed4:	2304      	movs	r3, #4
 8012ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012eda:	e00a      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012edc:	2308      	movs	r3, #8
 8012ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012ee2:	e006      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012ee4:	2310      	movs	r3, #16
 8012ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012eea:	e002      	b.n	8012ef2 <UART_SetConfig+0x1d6>
 8012eec:	2310      	movs	r3, #16
 8012eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012ef2:	697b      	ldr	r3, [r7, #20]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	4a2a      	ldr	r2, [pc, #168]	; (8012fa0 <UART_SetConfig+0x284>)
 8012ef8:	4293      	cmp	r3, r2
 8012efa:	f040 80a4 	bne.w	8013046 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012efe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012f02:	2b08      	cmp	r3, #8
 8012f04:	d823      	bhi.n	8012f4e <UART_SetConfig+0x232>
 8012f06:	a201      	add	r2, pc, #4	; (adr r2, 8012f0c <UART_SetConfig+0x1f0>)
 8012f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f0c:	08012f31 	.word	0x08012f31
 8012f10:	08012f4f 	.word	0x08012f4f
 8012f14:	08012f39 	.word	0x08012f39
 8012f18:	08012f4f 	.word	0x08012f4f
 8012f1c:	08012f3f 	.word	0x08012f3f
 8012f20:	08012f4f 	.word	0x08012f4f
 8012f24:	08012f4f 	.word	0x08012f4f
 8012f28:	08012f4f 	.word	0x08012f4f
 8012f2c:	08012f47 	.word	0x08012f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012f30:	f7fc ff7a 	bl	800fe28 <HAL_RCC_GetPCLK1Freq>
 8012f34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012f36:	e010      	b.n	8012f5a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012f38:	4b1c      	ldr	r3, [pc, #112]	; (8012fac <UART_SetConfig+0x290>)
 8012f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012f3c:	e00d      	b.n	8012f5a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012f3e:	f7fc febf 	bl	800fcc0 <HAL_RCC_GetSysClockFreq>
 8012f42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012f44:	e009      	b.n	8012f5a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012f4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012f4c:	e005      	b.n	8012f5a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8012f52:	2301      	movs	r3, #1
 8012f54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8012f58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	f000 8137 	beq.w	80131d0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012f62:	697b      	ldr	r3, [r7, #20]
 8012f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f66:	4a12      	ldr	r2, [pc, #72]	; (8012fb0 <UART_SetConfig+0x294>)
 8012f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012f6c:	461a      	mov	r2, r3
 8012f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	685a      	ldr	r2, [r3, #4]
 8012f7a:	4613      	mov	r3, r2
 8012f7c:	005b      	lsls	r3, r3, #1
 8012f7e:	4413      	add	r3, r2
 8012f80:	69ba      	ldr	r2, [r7, #24]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d305      	bcc.n	8012f92 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012f8c:	69ba      	ldr	r2, [r7, #24]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d910      	bls.n	8012fb4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8012f92:	2301      	movs	r3, #1
 8012f94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012f98:	e11a      	b.n	80131d0 <UART_SetConfig+0x4b4>
 8012f9a:	bf00      	nop
 8012f9c:	cfff69f3 	.word	0xcfff69f3
 8012fa0:	40008000 	.word	0x40008000
 8012fa4:	40013800 	.word	0x40013800
 8012fa8:	40004400 	.word	0x40004400
 8012fac:	00f42400 	.word	0x00f42400
 8012fb0:	0801fe8c 	.word	0x0801fe8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	60bb      	str	r3, [r7, #8]
 8012fba:	60fa      	str	r2, [r7, #12]
 8012fbc:	697b      	ldr	r3, [r7, #20]
 8012fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc0:	4a8e      	ldr	r2, [pc, #568]	; (80131fc <UART_SetConfig+0x4e0>)
 8012fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012fc6:	b29b      	uxth	r3, r3
 8012fc8:	2200      	movs	r2, #0
 8012fca:	603b      	str	r3, [r7, #0]
 8012fcc:	607a      	str	r2, [r7, #4]
 8012fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012fd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012fd6:	f7f6 f90d 	bl	80091f4 <__aeabi_uldivmod>
 8012fda:	4602      	mov	r2, r0
 8012fdc:	460b      	mov	r3, r1
 8012fde:	4610      	mov	r0, r2
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	f04f 0200 	mov.w	r2, #0
 8012fe6:	f04f 0300 	mov.w	r3, #0
 8012fea:	020b      	lsls	r3, r1, #8
 8012fec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012ff0:	0202      	lsls	r2, r0, #8
 8012ff2:	6979      	ldr	r1, [r7, #20]
 8012ff4:	6849      	ldr	r1, [r1, #4]
 8012ff6:	0849      	lsrs	r1, r1, #1
 8012ff8:	2000      	movs	r0, #0
 8012ffa:	460c      	mov	r4, r1
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	eb12 0804 	adds.w	r8, r2, r4
 8013002:	eb43 0905 	adc.w	r9, r3, r5
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	685b      	ldr	r3, [r3, #4]
 801300a:	2200      	movs	r2, #0
 801300c:	469a      	mov	sl, r3
 801300e:	4693      	mov	fp, r2
 8013010:	4652      	mov	r2, sl
 8013012:	465b      	mov	r3, fp
 8013014:	4640      	mov	r0, r8
 8013016:	4649      	mov	r1, r9
 8013018:	f7f6 f8ec 	bl	80091f4 <__aeabi_uldivmod>
 801301c:	4602      	mov	r2, r0
 801301e:	460b      	mov	r3, r1
 8013020:	4613      	mov	r3, r2
 8013022:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013024:	6a3b      	ldr	r3, [r7, #32]
 8013026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801302a:	d308      	bcc.n	801303e <UART_SetConfig+0x322>
 801302c:	6a3b      	ldr	r3, [r7, #32]
 801302e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013032:	d204      	bcs.n	801303e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	6a3a      	ldr	r2, [r7, #32]
 801303a:	60da      	str	r2, [r3, #12]
 801303c:	e0c8      	b.n	80131d0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 801303e:	2301      	movs	r3, #1
 8013040:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8013044:	e0c4      	b.n	80131d0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	69db      	ldr	r3, [r3, #28]
 801304a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801304e:	d167      	bne.n	8013120 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8013050:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013054:	2b08      	cmp	r3, #8
 8013056:	d828      	bhi.n	80130aa <UART_SetConfig+0x38e>
 8013058:	a201      	add	r2, pc, #4	; (adr r2, 8013060 <UART_SetConfig+0x344>)
 801305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801305e:	bf00      	nop
 8013060:	08013085 	.word	0x08013085
 8013064:	0801308d 	.word	0x0801308d
 8013068:	08013095 	.word	0x08013095
 801306c:	080130ab 	.word	0x080130ab
 8013070:	0801309b 	.word	0x0801309b
 8013074:	080130ab 	.word	0x080130ab
 8013078:	080130ab 	.word	0x080130ab
 801307c:	080130ab 	.word	0x080130ab
 8013080:	080130a3 	.word	0x080130a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013084:	f7fc fed0 	bl	800fe28 <HAL_RCC_GetPCLK1Freq>
 8013088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801308a:	e014      	b.n	80130b6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801308c:	f7fc fede 	bl	800fe4c <HAL_RCC_GetPCLK2Freq>
 8013090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013092:	e010      	b.n	80130b6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013094:	4b5a      	ldr	r3, [pc, #360]	; (8013200 <UART_SetConfig+0x4e4>)
 8013096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013098:	e00d      	b.n	80130b6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801309a:	f7fc fe11 	bl	800fcc0 <HAL_RCC_GetSysClockFreq>
 801309e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80130a0:	e009      	b.n	80130b6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80130a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80130a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80130a8:	e005      	b.n	80130b6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80130aa:	2300      	movs	r3, #0
 80130ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80130ae:	2301      	movs	r3, #1
 80130b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80130b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80130b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f000 8089 	beq.w	80131d0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c2:	4a4e      	ldr	r2, [pc, #312]	; (80131fc <UART_SetConfig+0x4e0>)
 80130c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80130c8:	461a      	mov	r2, r3
 80130ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80130d0:	005a      	lsls	r2, r3, #1
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	085b      	lsrs	r3, r3, #1
 80130d8:	441a      	add	r2, r3
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	fbb2 f3f3 	udiv	r3, r2, r3
 80130e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80130e4:	6a3b      	ldr	r3, [r7, #32]
 80130e6:	2b0f      	cmp	r3, #15
 80130e8:	d916      	bls.n	8013118 <UART_SetConfig+0x3fc>
 80130ea:	6a3b      	ldr	r3, [r7, #32]
 80130ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80130f0:	d212      	bcs.n	8013118 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80130f2:	6a3b      	ldr	r3, [r7, #32]
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	f023 030f 	bic.w	r3, r3, #15
 80130fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80130fc:	6a3b      	ldr	r3, [r7, #32]
 80130fe:	085b      	lsrs	r3, r3, #1
 8013100:	b29b      	uxth	r3, r3
 8013102:	f003 0307 	and.w	r3, r3, #7
 8013106:	b29a      	uxth	r2, r3
 8013108:	8bfb      	ldrh	r3, [r7, #30]
 801310a:	4313      	orrs	r3, r2
 801310c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	8bfa      	ldrh	r2, [r7, #30]
 8013114:	60da      	str	r2, [r3, #12]
 8013116:	e05b      	b.n	80131d0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8013118:	2301      	movs	r3, #1
 801311a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801311e:	e057      	b.n	80131d0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013124:	2b08      	cmp	r3, #8
 8013126:	d828      	bhi.n	801317a <UART_SetConfig+0x45e>
 8013128:	a201      	add	r2, pc, #4	; (adr r2, 8013130 <UART_SetConfig+0x414>)
 801312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801312e:	bf00      	nop
 8013130:	08013155 	.word	0x08013155
 8013134:	0801315d 	.word	0x0801315d
 8013138:	08013165 	.word	0x08013165
 801313c:	0801317b 	.word	0x0801317b
 8013140:	0801316b 	.word	0x0801316b
 8013144:	0801317b 	.word	0x0801317b
 8013148:	0801317b 	.word	0x0801317b
 801314c:	0801317b 	.word	0x0801317b
 8013150:	08013173 	.word	0x08013173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013154:	f7fc fe68 	bl	800fe28 <HAL_RCC_GetPCLK1Freq>
 8013158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801315a:	e014      	b.n	8013186 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801315c:	f7fc fe76 	bl	800fe4c <HAL_RCC_GetPCLK2Freq>
 8013160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013162:	e010      	b.n	8013186 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013164:	4b26      	ldr	r3, [pc, #152]	; (8013200 <UART_SetConfig+0x4e4>)
 8013166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013168:	e00d      	b.n	8013186 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801316a:	f7fc fda9 	bl	800fcc0 <HAL_RCC_GetSysClockFreq>
 801316e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013170:	e009      	b.n	8013186 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013178:	e005      	b.n	8013186 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 801317a:	2300      	movs	r3, #0
 801317c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801317e:	2301      	movs	r3, #1
 8013180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8013184:	bf00      	nop
    }

    if (pclk != 0U)
 8013186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013188:	2b00      	cmp	r3, #0
 801318a:	d021      	beq.n	80131d0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013190:	4a1a      	ldr	r2, [pc, #104]	; (80131fc <UART_SetConfig+0x4e0>)
 8013192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013196:	461a      	mov	r2, r3
 8013198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319a:	fbb3 f2f2 	udiv	r2, r3, r2
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	085b      	lsrs	r3, r3, #1
 80131a4:	441a      	add	r2, r3
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	685b      	ldr	r3, [r3, #4]
 80131aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80131ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80131b0:	6a3b      	ldr	r3, [r7, #32]
 80131b2:	2b0f      	cmp	r3, #15
 80131b4:	d909      	bls.n	80131ca <UART_SetConfig+0x4ae>
 80131b6:	6a3b      	ldr	r3, [r7, #32]
 80131b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80131bc:	d205      	bcs.n	80131ca <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80131be:	6a3b      	ldr	r3, [r7, #32]
 80131c0:	b29a      	uxth	r2, r3
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	60da      	str	r2, [r3, #12]
 80131c8:	e002      	b.n	80131d0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80131ca:	2301      	movs	r3, #1
 80131cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	2201      	movs	r2, #1
 80131d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	2201      	movs	r2, #1
 80131dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	2200      	movs	r2, #0
 80131e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	2200      	movs	r2, #0
 80131ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80131ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	3730      	adds	r7, #48	; 0x30
 80131f4:	46bd      	mov	sp, r7
 80131f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80131fa:	bf00      	nop
 80131fc:	0801fe8c 	.word	0x0801fe8c
 8013200:	00f42400 	.word	0x00f42400

08013204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013204:	b480      	push	{r7}
 8013206:	b083      	sub	sp, #12
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013210:	f003 0301 	and.w	r3, r3, #1
 8013214:	2b00      	cmp	r3, #0
 8013216:	d00a      	beq.n	801322e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	430a      	orrs	r2, r1
 801322c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013232:	f003 0302 	and.w	r3, r3, #2
 8013236:	2b00      	cmp	r3, #0
 8013238:	d00a      	beq.n	8013250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	685b      	ldr	r3, [r3, #4]
 8013240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	430a      	orrs	r2, r1
 801324e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013254:	f003 0304 	and.w	r3, r3, #4
 8013258:	2b00      	cmp	r3, #0
 801325a:	d00a      	beq.n	8013272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	430a      	orrs	r2, r1
 8013270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013276:	f003 0308 	and.w	r3, r3, #8
 801327a:	2b00      	cmp	r3, #0
 801327c:	d00a      	beq.n	8013294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	685b      	ldr	r3, [r3, #4]
 8013284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	430a      	orrs	r2, r1
 8013292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013298:	f003 0310 	and.w	r3, r3, #16
 801329c:	2b00      	cmp	r3, #0
 801329e:	d00a      	beq.n	80132b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	689b      	ldr	r3, [r3, #8]
 80132a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	430a      	orrs	r2, r1
 80132b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132ba:	f003 0320 	and.w	r3, r3, #32
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d00a      	beq.n	80132d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	689b      	ldr	r3, [r3, #8]
 80132c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	430a      	orrs	r2, r1
 80132d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d01a      	beq.n	801331a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	430a      	orrs	r2, r1
 80132f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013302:	d10a      	bne.n	801331a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	430a      	orrs	r2, r1
 8013318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013322:	2b00      	cmp	r3, #0
 8013324:	d00a      	beq.n	801333c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	685b      	ldr	r3, [r3, #4]
 801332c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	430a      	orrs	r2, r1
 801333a:	605a      	str	r2, [r3, #4]
  }
}
 801333c:	bf00      	nop
 801333e:	370c      	adds	r7, #12
 8013340:	46bd      	mov	sp, r7
 8013342:	bc80      	pop	{r7}
 8013344:	4770      	bx	lr

08013346 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013346:	b580      	push	{r7, lr}
 8013348:	b086      	sub	sp, #24
 801334a:	af02      	add	r7, sp, #8
 801334c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2200      	movs	r2, #0
 8013352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013356:	f7f9 fdeb 	bl	800cf30 <HAL_GetTick>
 801335a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	f003 0308 	and.w	r3, r3, #8
 8013366:	2b08      	cmp	r3, #8
 8013368:	d10e      	bne.n	8013388 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801336a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801336e:	9300      	str	r3, [sp, #0]
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	2200      	movs	r2, #0
 8013374:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f000 f832 	bl	80133e2 <UART_WaitOnFlagUntilTimeout>
 801337e:	4603      	mov	r3, r0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d001      	beq.n	8013388 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013384:	2303      	movs	r3, #3
 8013386:	e028      	b.n	80133da <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	f003 0304 	and.w	r3, r3, #4
 8013392:	2b04      	cmp	r3, #4
 8013394:	d10e      	bne.n	80133b4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013396:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801339a:	9300      	str	r3, [sp, #0]
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	2200      	movs	r2, #0
 80133a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f000 f81c 	bl	80133e2 <UART_WaitOnFlagUntilTimeout>
 80133aa:	4603      	mov	r3, r0
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d001      	beq.n	80133b4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80133b0:	2303      	movs	r3, #3
 80133b2:	e012      	b.n	80133da <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2220      	movs	r2, #32
 80133b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2220      	movs	r2, #32
 80133c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2200      	movs	r2, #0
 80133c8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	2200      	movs	r2, #0
 80133ce:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	2200      	movs	r2, #0
 80133d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80133d8:	2300      	movs	r3, #0
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3710      	adds	r7, #16
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b09c      	sub	sp, #112	; 0x70
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	60f8      	str	r0, [r7, #12]
 80133ea:	60b9      	str	r1, [r7, #8]
 80133ec:	603b      	str	r3, [r7, #0]
 80133ee:	4613      	mov	r3, r2
 80133f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80133f2:	e0a9      	b.n	8013548 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80133f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80133f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133fa:	f000 80a5 	beq.w	8013548 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80133fe:	f7f9 fd97 	bl	800cf30 <HAL_GetTick>
 8013402:	4602      	mov	r2, r0
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	1ad3      	subs	r3, r2, r3
 8013408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801340a:	429a      	cmp	r2, r3
 801340c:	d302      	bcc.n	8013414 <UART_WaitOnFlagUntilTimeout+0x32>
 801340e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013410:	2b00      	cmp	r3, #0
 8013412:	d140      	bne.n	8013496 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801341a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801341c:	e853 3f00 	ldrex	r3, [r3]
 8013420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013428:	667b      	str	r3, [r7, #100]	; 0x64
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	461a      	mov	r2, r3
 8013430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013434:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801343a:	e841 2300 	strex	r3, r2, [r1]
 801343e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013442:	2b00      	cmp	r3, #0
 8013444:	d1e6      	bne.n	8013414 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	3308      	adds	r3, #8
 801344c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801344e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013450:	e853 3f00 	ldrex	r3, [r3]
 8013454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013458:	f023 0301 	bic.w	r3, r3, #1
 801345c:	663b      	str	r3, [r7, #96]	; 0x60
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	3308      	adds	r3, #8
 8013464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013466:	64ba      	str	r2, [r7, #72]	; 0x48
 8013468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801346a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801346c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801346e:	e841 2300 	strex	r3, r2, [r1]
 8013472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013476:	2b00      	cmp	r3, #0
 8013478:	d1e5      	bne.n	8013446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	2220      	movs	r2, #32
 801347e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	2220      	movs	r2, #32
 8013486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	2200      	movs	r2, #0
 801348e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8013492:	2303      	movs	r3, #3
 8013494:	e069      	b.n	801356a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f003 0304 	and.w	r3, r3, #4
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d051      	beq.n	8013548 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	69db      	ldr	r3, [r3, #28]
 80134aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80134ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80134b2:	d149      	bne.n	8013548 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80134bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c6:	e853 3f00 	ldrex	r3, [r3]
 80134ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80134cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80134d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	461a      	mov	r2, r3
 80134da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134dc:	637b      	str	r3, [r7, #52]	; 0x34
 80134de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80134e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134e4:	e841 2300 	strex	r3, r2, [r1]
 80134e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80134ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d1e6      	bne.n	80134be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	3308      	adds	r3, #8
 80134f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	e853 3f00 	ldrex	r3, [r3]
 80134fe:	613b      	str	r3, [r7, #16]
   return(result);
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	f023 0301 	bic.w	r3, r3, #1
 8013506:	66bb      	str	r3, [r7, #104]	; 0x68
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	3308      	adds	r3, #8
 801350e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013510:	623a      	str	r2, [r7, #32]
 8013512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013514:	69f9      	ldr	r1, [r7, #28]
 8013516:	6a3a      	ldr	r2, [r7, #32]
 8013518:	e841 2300 	strex	r3, r2, [r1]
 801351c:	61bb      	str	r3, [r7, #24]
   return(result);
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d1e5      	bne.n	80134f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2220      	movs	r2, #32
 8013528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	2220      	movs	r2, #32
 8013530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2220      	movs	r2, #32
 8013538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	2200      	movs	r2, #0
 8013540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013544:	2303      	movs	r3, #3
 8013546:	e010      	b.n	801356a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	69da      	ldr	r2, [r3, #28]
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	4013      	ands	r3, r2
 8013552:	68ba      	ldr	r2, [r7, #8]
 8013554:	429a      	cmp	r2, r3
 8013556:	bf0c      	ite	eq
 8013558:	2301      	moveq	r3, #1
 801355a:	2300      	movne	r3, #0
 801355c:	b2db      	uxtb	r3, r3
 801355e:	461a      	mov	r2, r3
 8013560:	79fb      	ldrb	r3, [r7, #7]
 8013562:	429a      	cmp	r2, r3
 8013564:	f43f af46 	beq.w	80133f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013568:	2300      	movs	r3, #0
}
 801356a:	4618      	mov	r0, r3
 801356c:	3770      	adds	r7, #112	; 0x70
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}
	...

08013574 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013574:	b480      	push	{r7}
 8013576:	b0a3      	sub	sp, #140	; 0x8c
 8013578:	af00      	add	r7, sp, #0
 801357a:	60f8      	str	r0, [r7, #12]
 801357c:	60b9      	str	r1, [r7, #8]
 801357e:	4613      	mov	r3, r2
 8013580:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	68ba      	ldr	r2, [r7, #8]
 8013586:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	88fa      	ldrh	r2, [r7, #6]
 801358c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	88fa      	ldrh	r2, [r7, #6]
 8013594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	2200      	movs	r2, #0
 801359c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80135a6:	d10e      	bne.n	80135c6 <UART_Start_Receive_IT+0x52>
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	691b      	ldr	r3, [r3, #16]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d105      	bne.n	80135bc <UART_Start_Receive_IT+0x48>
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80135b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80135ba:	e02d      	b.n	8013618 <UART_Start_Receive_IT+0xa4>
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	22ff      	movs	r2, #255	; 0xff
 80135c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80135c4:	e028      	b.n	8013618 <UART_Start_Receive_IT+0xa4>
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	689b      	ldr	r3, [r3, #8]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d10d      	bne.n	80135ea <UART_Start_Receive_IT+0x76>
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	691b      	ldr	r3, [r3, #16]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d104      	bne.n	80135e0 <UART_Start_Receive_IT+0x6c>
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	22ff      	movs	r2, #255	; 0xff
 80135da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80135de:	e01b      	b.n	8013618 <UART_Start_Receive_IT+0xa4>
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	227f      	movs	r2, #127	; 0x7f
 80135e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80135e8:	e016      	b.n	8013618 <UART_Start_Receive_IT+0xa4>
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	689b      	ldr	r3, [r3, #8]
 80135ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80135f2:	d10d      	bne.n	8013610 <UART_Start_Receive_IT+0x9c>
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	691b      	ldr	r3, [r3, #16]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d104      	bne.n	8013606 <UART_Start_Receive_IT+0x92>
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	227f      	movs	r2, #127	; 0x7f
 8013600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013604:	e008      	b.n	8013618 <UART_Start_Receive_IT+0xa4>
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	223f      	movs	r2, #63	; 0x3f
 801360a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801360e:	e003      	b.n	8013618 <UART_Start_Receive_IT+0xa4>
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	2200      	movs	r2, #0
 8013614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	2200      	movs	r2, #0
 801361c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2222      	movs	r2, #34	; 0x22
 8013624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	3308      	adds	r3, #8
 801362e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013632:	e853 3f00 	ldrex	r3, [r3]
 8013636:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801363a:	f043 0301 	orr.w	r3, r3, #1
 801363e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	3308      	adds	r3, #8
 8013648:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801364c:	673a      	str	r2, [r7, #112]	; 0x70
 801364e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013650:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013652:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013654:	e841 2300 	strex	r3, r2, [r1]
 8013658:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801365a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801365c:	2b00      	cmp	r3, #0
 801365e:	d1e3      	bne.n	8013628 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013668:	d14f      	bne.n	801370a <UART_Start_Receive_IT+0x196>
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013670:	88fa      	ldrh	r2, [r7, #6]
 8013672:	429a      	cmp	r2, r3
 8013674:	d349      	bcc.n	801370a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801367e:	d107      	bne.n	8013690 <UART_Start_Receive_IT+0x11c>
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	691b      	ldr	r3, [r3, #16]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d103      	bne.n	8013690 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	4a46      	ldr	r2, [pc, #280]	; (80137a4 <UART_Start_Receive_IT+0x230>)
 801368c:	675a      	str	r2, [r3, #116]	; 0x74
 801368e:	e002      	b.n	8013696 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	4a45      	ldr	r2, [pc, #276]	; (80137a8 <UART_Start_Receive_IT+0x234>)
 8013694:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	691b      	ldr	r3, [r3, #16]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d01a      	beq.n	80136d4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136a6:	e853 3f00 	ldrex	r3, [r3]
 80136aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80136ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80136b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	461a      	mov	r2, r3
 80136bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80136c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80136c2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80136c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80136c8:	e841 2300 	strex	r3, r2, [r1]
 80136cc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80136ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d1e4      	bne.n	801369e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	3308      	adds	r3, #8
 80136da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136de:	e853 3f00 	ldrex	r3, [r3]
 80136e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80136e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	3308      	adds	r3, #8
 80136f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80136f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80136f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80136fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80136fc:	e841 2300 	strex	r3, r2, [r1]
 8013700:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013704:	2b00      	cmp	r3, #0
 8013706:	d1e5      	bne.n	80136d4 <UART_Start_Receive_IT+0x160>
 8013708:	e046      	b.n	8013798 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	689b      	ldr	r3, [r3, #8]
 801370e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013712:	d107      	bne.n	8013724 <UART_Start_Receive_IT+0x1b0>
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	691b      	ldr	r3, [r3, #16]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d103      	bne.n	8013724 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	4a23      	ldr	r2, [pc, #140]	; (80137ac <UART_Start_Receive_IT+0x238>)
 8013720:	675a      	str	r2, [r3, #116]	; 0x74
 8013722:	e002      	b.n	801372a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	4a22      	ldr	r2, [pc, #136]	; (80137b0 <UART_Start_Receive_IT+0x23c>)
 8013728:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	691b      	ldr	r3, [r3, #16]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d019      	beq.n	8013766 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801373a:	e853 3f00 	ldrex	r3, [r3]
 801373e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013742:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8013746:	677b      	str	r3, [r7, #116]	; 0x74
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	461a      	mov	r2, r3
 801374e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013750:	637b      	str	r3, [r7, #52]	; 0x34
 8013752:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013758:	e841 2300 	strex	r3, r2, [r1]
 801375c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013760:	2b00      	cmp	r3, #0
 8013762:	d1e6      	bne.n	8013732 <UART_Start_Receive_IT+0x1be>
 8013764:	e018      	b.n	8013798 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	e853 3f00 	ldrex	r3, [r3]
 8013772:	613b      	str	r3, [r7, #16]
   return(result);
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	f043 0320 	orr.w	r3, r3, #32
 801377a:	67bb      	str	r3, [r7, #120]	; 0x78
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	461a      	mov	r2, r3
 8013782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013784:	623b      	str	r3, [r7, #32]
 8013786:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013788:	69f9      	ldr	r1, [r7, #28]
 801378a:	6a3a      	ldr	r2, [r7, #32]
 801378c:	e841 2300 	strex	r3, r2, [r1]
 8013790:	61bb      	str	r3, [r7, #24]
   return(result);
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d1e6      	bne.n	8013766 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8013798:	2300      	movs	r3, #0
}
 801379a:	4618      	mov	r0, r3
 801379c:	378c      	adds	r7, #140	; 0x8c
 801379e:	46bd      	mov	sp, r7
 80137a0:	bc80      	pop	{r7}
 80137a2:	4770      	bx	lr
 80137a4:	08013fd1 	.word	0x08013fd1
 80137a8:	08013c71 	.word	0x08013c71
 80137ac:	08013ab9 	.word	0x08013ab9
 80137b0:	08013901 	.word	0x08013901

080137b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80137b4:	b480      	push	{r7}
 80137b6:	b095      	sub	sp, #84	; 0x54
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137c4:	e853 3f00 	ldrex	r3, [r3]
 80137c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80137ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80137d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	461a      	mov	r2, r3
 80137d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137da:	643b      	str	r3, [r7, #64]	; 0x40
 80137dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80137e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137e2:	e841 2300 	strex	r3, r2, [r1]
 80137e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80137e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d1e6      	bne.n	80137bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	3308      	adds	r3, #8
 80137f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137f6:	6a3b      	ldr	r3, [r7, #32]
 80137f8:	e853 3f00 	ldrex	r3, [r3]
 80137fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013804:	f023 0301 	bic.w	r3, r3, #1
 8013808:	64bb      	str	r3, [r7, #72]	; 0x48
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	3308      	adds	r3, #8
 8013810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013814:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801381a:	e841 2300 	strex	r3, r2, [r1]
 801381e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013822:	2b00      	cmp	r3, #0
 8013824:	d1e3      	bne.n	80137ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801382a:	2b01      	cmp	r3, #1
 801382c:	d118      	bne.n	8013860 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	e853 3f00 	ldrex	r3, [r3]
 801383a:	60bb      	str	r3, [r7, #8]
   return(result);
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	f023 0310 	bic.w	r3, r3, #16
 8013842:	647b      	str	r3, [r7, #68]	; 0x44
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	461a      	mov	r2, r3
 801384a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801384c:	61bb      	str	r3, [r7, #24]
 801384e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013850:	6979      	ldr	r1, [r7, #20]
 8013852:	69ba      	ldr	r2, [r7, #24]
 8013854:	e841 2300 	strex	r3, r2, [r1]
 8013858:	613b      	str	r3, [r7, #16]
   return(result);
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d1e6      	bne.n	801382e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2220      	movs	r2, #32
 8013864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2200      	movs	r2, #0
 801386c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2200      	movs	r2, #0
 8013872:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013874:	bf00      	nop
 8013876:	3754      	adds	r7, #84	; 0x54
 8013878:	46bd      	mov	sp, r7
 801387a:	bc80      	pop	{r7}
 801387c:	4770      	bx	lr

0801387e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801387e:	b580      	push	{r7, lr}
 8013880:	b084      	sub	sp, #16
 8013882:	af00      	add	r7, sp, #0
 8013884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801388a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	2200      	movs	r2, #0
 8013890:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2200      	movs	r2, #0
 8013898:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801389c:	68f8      	ldr	r0, [r7, #12]
 801389e:	f7ff fa28 	bl	8012cf2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80138a2:	bf00      	nop
 80138a4:	3710      	adds	r7, #16
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}

080138aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80138aa:	b580      	push	{r7, lr}
 80138ac:	b088      	sub	sp, #32
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	e853 3f00 	ldrex	r3, [r3]
 80138be:	60bb      	str	r3, [r7, #8]
   return(result);
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80138c6:	61fb      	str	r3, [r7, #28]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	461a      	mov	r2, r3
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	61bb      	str	r3, [r7, #24]
 80138d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138d4:	6979      	ldr	r1, [r7, #20]
 80138d6:	69ba      	ldr	r2, [r7, #24]
 80138d8:	e841 2300 	strex	r3, r2, [r1]
 80138dc:	613b      	str	r3, [r7, #16]
   return(result);
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d1e6      	bne.n	80138b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	2220      	movs	r2, #32
 80138e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2200      	movs	r2, #0
 80138f0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f7ff f9f4 	bl	8012ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80138f8:	bf00      	nop
 80138fa:	3720      	adds	r7, #32
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b09c      	sub	sp, #112	; 0x70
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801390e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013918:	2b22      	cmp	r3, #34	; 0x22
 801391a:	f040 80be 	bne.w	8013a9a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013924:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013928:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801392c:	b2d9      	uxtb	r1, r3
 801392e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013932:	b2da      	uxtb	r2, r3
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013938:	400a      	ands	r2, r1
 801393a:	b2d2      	uxtb	r2, r2
 801393c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013942:	1c5a      	adds	r2, r3, #1
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801394e:	b29b      	uxth	r3, r3
 8013950:	3b01      	subs	r3, #1
 8013952:	b29a      	uxth	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013960:	b29b      	uxth	r3, r3
 8013962:	2b00      	cmp	r3, #0
 8013964:	f040 80a1 	bne.w	8013aaa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801396e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013970:	e853 3f00 	ldrex	r3, [r3]
 8013974:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801397c:	66bb      	str	r3, [r7, #104]	; 0x68
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	461a      	mov	r2, r3
 8013984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013986:	65bb      	str	r3, [r7, #88]	; 0x58
 8013988:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801398a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801398c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801398e:	e841 2300 	strex	r3, r2, [r1]
 8013992:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013996:	2b00      	cmp	r3, #0
 8013998:	d1e6      	bne.n	8013968 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	3308      	adds	r3, #8
 80139a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a4:	e853 3f00 	ldrex	r3, [r3]
 80139a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80139aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ac:	f023 0301 	bic.w	r3, r3, #1
 80139b0:	667b      	str	r3, [r7, #100]	; 0x64
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	3308      	adds	r3, #8
 80139b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80139ba:	647a      	str	r2, [r7, #68]	; 0x44
 80139bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80139c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139c2:	e841 2300 	strex	r3, r2, [r1]
 80139c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80139c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d1e5      	bne.n	801399a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2220      	movs	r2, #32
 80139d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2200      	movs	r2, #0
 80139da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2200      	movs	r2, #0
 80139e0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	4a33      	ldr	r2, [pc, #204]	; (8013ab4 <UART_RxISR_8BIT+0x1b4>)
 80139e8:	4293      	cmp	r3, r2
 80139ea:	d01f      	beq.n	8013a2c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d018      	beq.n	8013a2c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a02:	e853 3f00 	ldrex	r3, [r3]
 8013a06:	623b      	str	r3, [r7, #32]
   return(result);
 8013a08:	6a3b      	ldr	r3, [r7, #32]
 8013a0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	461a      	mov	r2, r3
 8013a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a18:	633b      	str	r3, [r7, #48]	; 0x30
 8013a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a20:	e841 2300 	strex	r3, r2, [r1]
 8013a24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d1e6      	bne.n	80139fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	d12e      	bne.n	8013a92 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2200      	movs	r2, #0
 8013a38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	e853 3f00 	ldrex	r3, [r3]
 8013a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	f023 0310 	bic.w	r3, r3, #16
 8013a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	461a      	mov	r2, r3
 8013a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a58:	61fb      	str	r3, [r7, #28]
 8013a5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a5c:	69b9      	ldr	r1, [r7, #24]
 8013a5e:	69fa      	ldr	r2, [r7, #28]
 8013a60:	e841 2300 	strex	r3, r2, [r1]
 8013a64:	617b      	str	r3, [r7, #20]
   return(result);
 8013a66:	697b      	ldr	r3, [r7, #20]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d1e6      	bne.n	8013a3a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	69db      	ldr	r3, [r3, #28]
 8013a72:	f003 0310 	and.w	r3, r3, #16
 8013a76:	2b10      	cmp	r3, #16
 8013a78:	d103      	bne.n	8013a82 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2210      	movs	r2, #16
 8013a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013a88:	4619      	mov	r1, r3
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f7ff f93a 	bl	8012d04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013a90:	e00b      	b.n	8013aaa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f001 f9e6 	bl	8014e64 <HAL_UART_RxCpltCallback>
}
 8013a98:	e007      	b.n	8013aaa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	699a      	ldr	r2, [r3, #24]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	f042 0208 	orr.w	r2, r2, #8
 8013aa8:	619a      	str	r2, [r3, #24]
}
 8013aaa:	bf00      	nop
 8013aac:	3770      	adds	r7, #112	; 0x70
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	40008000 	.word	0x40008000

08013ab8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b09c      	sub	sp, #112	; 0x70
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ac6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ad0:	2b22      	cmp	r3, #34	; 0x22
 8013ad2:	f040 80be 	bne.w	8013c52 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013adc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ae4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8013ae6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8013aea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013aee:	4013      	ands	r3, r2
 8013af0:	b29a      	uxth	r2, r3
 8013af2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013af4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013afa:	1c9a      	adds	r2, r3, #2
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	3b01      	subs	r3, #1
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	f040 80a1 	bne.w	8013c62 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b28:	e853 3f00 	ldrex	r3, [r3]
 8013b2c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013b34:	667b      	str	r3, [r7, #100]	; 0x64
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	461a      	mov	r2, r3
 8013b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8013b40:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013b46:	e841 2300 	strex	r3, r2, [r1]
 8013b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d1e6      	bne.n	8013b20 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	3308      	adds	r3, #8
 8013b58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b5c:	e853 3f00 	ldrex	r3, [r3]
 8013b60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b64:	f023 0301 	bic.w	r3, r3, #1
 8013b68:	663b      	str	r3, [r7, #96]	; 0x60
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	3308      	adds	r3, #8
 8013b70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013b72:	643a      	str	r2, [r7, #64]	; 0x40
 8013b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b7a:	e841 2300 	strex	r3, r2, [r1]
 8013b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d1e5      	bne.n	8013b52 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2220      	movs	r2, #32
 8013b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2200      	movs	r2, #0
 8013b92:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2200      	movs	r2, #0
 8013b98:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	4a33      	ldr	r2, [pc, #204]	; (8013c6c <UART_RxISR_16BIT+0x1b4>)
 8013ba0:	4293      	cmp	r3, r2
 8013ba2:	d01f      	beq.n	8013be4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d018      	beq.n	8013be4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb8:	6a3b      	ldr	r3, [r7, #32]
 8013bba:	e853 3f00 	ldrex	r3, [r3]
 8013bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8013bc0:	69fb      	ldr	r3, [r7, #28]
 8013bc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	461a      	mov	r2, r3
 8013bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013bd2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bd8:	e841 2300 	strex	r3, r2, [r1]
 8013bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d1e6      	bne.n	8013bb2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013be8:	2b01      	cmp	r3, #1
 8013bea:	d12e      	bne.n	8013c4a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2200      	movs	r2, #0
 8013bf0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	e853 3f00 	ldrex	r3, [r3]
 8013bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	f023 0310 	bic.w	r3, r3, #16
 8013c06:	65bb      	str	r3, [r7, #88]	; 0x58
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	461a      	mov	r2, r3
 8013c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c10:	61bb      	str	r3, [r7, #24]
 8013c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c14:	6979      	ldr	r1, [r7, #20]
 8013c16:	69ba      	ldr	r2, [r7, #24]
 8013c18:	e841 2300 	strex	r3, r2, [r1]
 8013c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d1e6      	bne.n	8013bf2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	69db      	ldr	r3, [r3, #28]
 8013c2a:	f003 0310 	and.w	r3, r3, #16
 8013c2e:	2b10      	cmp	r3, #16
 8013c30:	d103      	bne.n	8013c3a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2210      	movs	r2, #16
 8013c38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c40:	4619      	mov	r1, r3
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f7ff f85e 	bl	8012d04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013c48:	e00b      	b.n	8013c62 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f001 f90a 	bl	8014e64 <HAL_UART_RxCpltCallback>
}
 8013c50:	e007      	b.n	8013c62 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	699a      	ldr	r2, [r3, #24]
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	f042 0208 	orr.w	r2, r2, #8
 8013c60:	619a      	str	r2, [r3, #24]
}
 8013c62:	bf00      	nop
 8013c64:	3770      	adds	r7, #112	; 0x70
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}
 8013c6a:	bf00      	nop
 8013c6c:	40008000 	.word	0x40008000

08013c70 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b0ac      	sub	sp, #176	; 0xb0
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c7e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	69db      	ldr	r3, [r3, #28]
 8013c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	689b      	ldr	r3, [r3, #8]
 8013c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ca6:	2b22      	cmp	r3, #34	; 0x22
 8013ca8:	f040 8182 	bne.w	8013fb0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013cb2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013cb6:	e125      	b.n	8013f04 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cbe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013cc2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8013cc6:	b2d9      	uxtb	r1, r3
 8013cc8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8013ccc:	b2da      	uxtb	r2, r3
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cd2:	400a      	ands	r2, r1
 8013cd4:	b2d2      	uxtb	r2, r2
 8013cd6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cdc:	1c5a      	adds	r2, r3, #1
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013ce8:	b29b      	uxth	r3, r3
 8013cea:	3b01      	subs	r3, #1
 8013cec:	b29a      	uxth	r2, r3
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	69db      	ldr	r3, [r3, #28]
 8013cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d02:	f003 0307 	and.w	r3, r3, #7
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d053      	beq.n	8013db2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d0e:	f003 0301 	and.w	r3, r3, #1
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d011      	beq.n	8013d3a <UART_RxISR_8BIT_FIFOEN+0xca>
 8013d16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d00b      	beq.n	8013d3a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	2201      	movs	r2, #1
 8013d28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d30:	f043 0201 	orr.w	r2, r3, #1
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d3e:	f003 0302 	and.w	r3, r3, #2
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d011      	beq.n	8013d6a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8013d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013d4a:	f003 0301 	and.w	r3, r3, #1
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d00b      	beq.n	8013d6a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	2202      	movs	r2, #2
 8013d58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d60:	f043 0204 	orr.w	r2, r3, #4
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013d6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d6e:	f003 0304 	and.w	r3, r3, #4
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d011      	beq.n	8013d9a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8013d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013d7a:	f003 0301 	and.w	r3, r3, #1
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d00b      	beq.n	8013d9a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	2204      	movs	r2, #4
 8013d88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d90:	f043 0202 	orr.w	r2, r3, #2
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d006      	beq.n	8013db2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f7fe ffa4 	bl	8012cf2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2200      	movs	r2, #0
 8013dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	f040 80a2 	bne.w	8013f04 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013dc8:	e853 3f00 	ldrex	r3, [r3]
 8013dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8013dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	461a      	mov	r2, r3
 8013dde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013de2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013de4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013de6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013de8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013dea:	e841 2300 	strex	r3, r2, [r1]
 8013dee:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8013df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d1e4      	bne.n	8013dc0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	3308      	adds	r3, #8
 8013dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013e00:	e853 3f00 	ldrex	r3, [r3]
 8013e04:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8013e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013e0c:	f023 0301 	bic.w	r3, r3, #1
 8013e10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	3308      	adds	r3, #8
 8013e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013e1e:	66ba      	str	r2, [r7, #104]	; 0x68
 8013e20:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013e24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013e26:	e841 2300 	strex	r3, r2, [r1]
 8013e2a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013e2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d1e1      	bne.n	8013df6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2220      	movs	r2, #32
 8013e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2200      	movs	r2, #0
 8013e44:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	4a5f      	ldr	r2, [pc, #380]	; (8013fc8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8013e4c:	4293      	cmp	r3, r2
 8013e4e:	d021      	beq.n	8013e94 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d01a      	beq.n	8013e94 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e66:	e853 3f00 	ldrex	r3, [r3]
 8013e6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013e80:	657b      	str	r3, [r7, #84]	; 0x54
 8013e82:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013e88:	e841 2300 	strex	r3, r2, [r1]
 8013e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d1e4      	bne.n	8013e5e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	d130      	bne.n	8013efe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013eaa:	e853 3f00 	ldrex	r3, [r3]
 8013eae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb2:	f023 0310 	bic.w	r3, r3, #16
 8013eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	461a      	mov	r2, r3
 8013ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8013ec6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ec8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013eca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013ecc:	e841 2300 	strex	r3, r2, [r1]
 8013ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d1e4      	bne.n	8013ea2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	69db      	ldr	r3, [r3, #28]
 8013ede:	f003 0310 	and.w	r3, r3, #16
 8013ee2:	2b10      	cmp	r3, #16
 8013ee4:	d103      	bne.n	8013eee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2210      	movs	r2, #16
 8013eec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013ef4:	4619      	mov	r1, r3
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f7fe ff04 	bl	8012d04 <HAL_UARTEx_RxEventCallback>
 8013efc:	e002      	b.n	8013f04 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f000 ffb0 	bl	8014e64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013f04:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d006      	beq.n	8013f1a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8013f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f10:	f003 0320 	and.w	r3, r3, #32
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f47f aecf 	bne.w	8013cb8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013f24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d049      	beq.n	8013fc0 <UART_RxISR_8BIT_FIFOEN+0x350>
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013f32:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8013f36:	429a      	cmp	r2, r3
 8013f38:	d242      	bcs.n	8013fc0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	3308      	adds	r3, #8
 8013f40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f42:	6a3b      	ldr	r3, [r7, #32]
 8013f44:	e853 3f00 	ldrex	r3, [r3]
 8013f48:	61fb      	str	r3, [r7, #28]
   return(result);
 8013f4a:	69fb      	ldr	r3, [r7, #28]
 8013f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	3308      	adds	r3, #8
 8013f5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013f60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f66:	e841 2300 	strex	r3, r2, [r1]
 8013f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d1e3      	bne.n	8013f3a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	4a15      	ldr	r2, [pc, #84]	; (8013fcc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8013f76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	e853 3f00 	ldrex	r3, [r3]
 8013f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	f043 0320 	orr.w	r3, r3, #32
 8013f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	461a      	mov	r2, r3
 8013f96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013f9a:	61bb      	str	r3, [r7, #24]
 8013f9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f9e:	6979      	ldr	r1, [r7, #20]
 8013fa0:	69ba      	ldr	r2, [r7, #24]
 8013fa2:	e841 2300 	strex	r3, r2, [r1]
 8013fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d1e4      	bne.n	8013f78 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013fae:	e007      	b.n	8013fc0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	699a      	ldr	r2, [r3, #24]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	f042 0208 	orr.w	r2, r2, #8
 8013fbe:	619a      	str	r2, [r3, #24]
}
 8013fc0:	bf00      	nop
 8013fc2:	37b0      	adds	r7, #176	; 0xb0
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	40008000 	.word	0x40008000
 8013fcc:	08013901 	.word	0x08013901

08013fd0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b0ae      	sub	sp, #184	; 0xb8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fde:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	69db      	ldr	r3, [r3, #28]
 8013fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	689b      	ldr	r3, [r3, #8]
 8013ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014006:	2b22      	cmp	r3, #34	; 0x22
 8014008:	f040 8186 	bne.w	8014318 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014012:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014016:	e129      	b.n	801426c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801401e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801402a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801402e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8014032:	4013      	ands	r3, r2
 8014034:	b29a      	uxth	r2, r3
 8014036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801403a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014040:	1c9a      	adds	r2, r3, #2
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801404c:	b29b      	uxth	r3, r3
 801404e:	3b01      	subs	r3, #1
 8014050:	b29a      	uxth	r2, r3
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	69db      	ldr	r3, [r3, #28]
 801405e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014066:	f003 0307 	and.w	r3, r3, #7
 801406a:	2b00      	cmp	r3, #0
 801406c:	d053      	beq.n	8014116 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801406e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014072:	f003 0301 	and.w	r3, r3, #1
 8014076:	2b00      	cmp	r3, #0
 8014078:	d011      	beq.n	801409e <UART_RxISR_16BIT_FIFOEN+0xce>
 801407a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014082:	2b00      	cmp	r3, #0
 8014084:	d00b      	beq.n	801409e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2201      	movs	r2, #1
 801408c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014094:	f043 0201 	orr.w	r2, r3, #1
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801409e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80140a2:	f003 0302 	and.w	r3, r3, #2
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d011      	beq.n	80140ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 80140aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80140ae:	f003 0301 	and.w	r3, r3, #1
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d00b      	beq.n	80140ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	2202      	movs	r2, #2
 80140bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140c4:	f043 0204 	orr.w	r2, r3, #4
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80140ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80140d2:	f003 0304 	and.w	r3, r3, #4
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d011      	beq.n	80140fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 80140da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80140de:	f003 0301 	and.w	r3, r3, #1
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d00b      	beq.n	80140fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	2204      	movs	r2, #4
 80140ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140f4:	f043 0202 	orr.w	r2, r3, #2
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014104:	2b00      	cmp	r3, #0
 8014106:	d006      	beq.n	8014116 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7fe fdf2 	bl	8012cf2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2200      	movs	r2, #0
 8014112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801411c:	b29b      	uxth	r3, r3
 801411e:	2b00      	cmp	r3, #0
 8014120:	f040 80a4 	bne.w	801426c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801412a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801412c:	e853 3f00 	ldrex	r3, [r3]
 8014130:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	461a      	mov	r2, r3
 8014142:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014146:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801414a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801414c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801414e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014152:	e841 2300 	strex	r3, r2, [r1]
 8014156:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801415a:	2b00      	cmp	r3, #0
 801415c:	d1e2      	bne.n	8014124 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	3308      	adds	r3, #8
 8014164:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014168:	e853 3f00 	ldrex	r3, [r3]
 801416c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801416e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014174:	f023 0301 	bic.w	r3, r3, #1
 8014178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	3308      	adds	r3, #8
 8014182:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8014186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801418a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801418c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801418e:	e841 2300 	strex	r3, r2, [r1]
 8014192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014196:	2b00      	cmp	r3, #0
 8014198:	d1e1      	bne.n	801415e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	2220      	movs	r2, #32
 801419e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2200      	movs	r2, #0
 80141a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2200      	movs	r2, #0
 80141ac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	4a5f      	ldr	r2, [pc, #380]	; (8014330 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80141b4:	4293      	cmp	r3, r2
 80141b6:	d021      	beq.n	80141fc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d01a      	beq.n	80141fc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141ce:	e853 3f00 	ldrex	r3, [r3]
 80141d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80141d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80141da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	461a      	mov	r2, r3
 80141e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80141e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80141ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80141ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80141f0:	e841 2300 	strex	r3, r2, [r1]
 80141f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80141f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d1e4      	bne.n	80141c6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014200:	2b01      	cmp	r3, #1
 8014202:	d130      	bne.n	8014266 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2200      	movs	r2, #0
 8014208:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014212:	e853 3f00 	ldrex	r3, [r3]
 8014216:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801421a:	f023 0310 	bic.w	r3, r3, #16
 801421e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	461a      	mov	r2, r3
 8014228:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801422c:	647b      	str	r3, [r7, #68]	; 0x44
 801422e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014234:	e841 2300 	strex	r3, r2, [r1]
 8014238:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801423a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801423c:	2b00      	cmp	r3, #0
 801423e:	d1e4      	bne.n	801420a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	69db      	ldr	r3, [r3, #28]
 8014246:	f003 0310 	and.w	r3, r3, #16
 801424a:	2b10      	cmp	r3, #16
 801424c:	d103      	bne.n	8014256 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	2210      	movs	r2, #16
 8014254:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801425c:	4619      	mov	r1, r3
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f7fe fd50 	bl	8012d04 <HAL_UARTEx_RxEventCallback>
 8014264:	e002      	b.n	801426c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f000 fdfc 	bl	8014e64 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801426c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014270:	2b00      	cmp	r3, #0
 8014272:	d006      	beq.n	8014282 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8014274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014278:	f003 0320 	and.w	r3, r3, #32
 801427c:	2b00      	cmp	r3, #0
 801427e:	f47f aecb 	bne.w	8014018 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014288:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801428c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8014290:	2b00      	cmp	r3, #0
 8014292:	d049      	beq.n	8014328 <UART_RxISR_16BIT_FIFOEN+0x358>
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801429a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801429e:	429a      	cmp	r2, r3
 80142a0:	d242      	bcs.n	8014328 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	3308      	adds	r3, #8
 80142a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ac:	e853 3f00 	ldrex	r3, [r3]
 80142b0:	623b      	str	r3, [r7, #32]
   return(result);
 80142b2:	6a3b      	ldr	r3, [r7, #32]
 80142b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80142b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	3308      	adds	r3, #8
 80142c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80142c6:	633a      	str	r2, [r7, #48]	; 0x30
 80142c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80142cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142ce:	e841 2300 	strex	r3, r2, [r1]
 80142d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80142d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d1e3      	bne.n	80142a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	4a15      	ldr	r2, [pc, #84]	; (8014334 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80142de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142e6:	693b      	ldr	r3, [r7, #16]
 80142e8:	e853 3f00 	ldrex	r3, [r3]
 80142ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	f043 0320 	orr.w	r3, r3, #32
 80142f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	461a      	mov	r2, r3
 80142fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014302:	61fb      	str	r3, [r7, #28]
 8014304:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014306:	69b9      	ldr	r1, [r7, #24]
 8014308:	69fa      	ldr	r2, [r7, #28]
 801430a:	e841 2300 	strex	r3, r2, [r1]
 801430e:	617b      	str	r3, [r7, #20]
   return(result);
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d1e4      	bne.n	80142e0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014316:	e007      	b.n	8014328 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	699a      	ldr	r2, [r3, #24]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	f042 0208 	orr.w	r2, r2, #8
 8014326:	619a      	str	r2, [r3, #24]
}
 8014328:	bf00      	nop
 801432a:	37b8      	adds	r7, #184	; 0xb8
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}
 8014330:	40008000 	.word	0x40008000
 8014334:	08013ab9 	.word	0x08013ab9

08014338 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014338:	b480      	push	{r7}
 801433a:	b083      	sub	sp, #12
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014340:	bf00      	nop
 8014342:	370c      	adds	r7, #12
 8014344:	46bd      	mov	sp, r7
 8014346:	bc80      	pop	{r7}
 8014348:	4770      	bx	lr

0801434a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801434a:	b480      	push	{r7}
 801434c:	b083      	sub	sp, #12
 801434e:	af00      	add	r7, sp, #0
 8014350:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014352:	bf00      	nop
 8014354:	370c      	adds	r7, #12
 8014356:	46bd      	mov	sp, r7
 8014358:	bc80      	pop	{r7}
 801435a:	4770      	bx	lr

0801435c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801435c:	b480      	push	{r7}
 801435e:	b083      	sub	sp, #12
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014364:	bf00      	nop
 8014366:	370c      	adds	r7, #12
 8014368:	46bd      	mov	sp, r7
 801436a:	bc80      	pop	{r7}
 801436c:	4770      	bx	lr

0801436e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801436e:	b480      	push	{r7}
 8014370:	b085      	sub	sp, #20
 8014372:	af00      	add	r7, sp, #0
 8014374:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801437c:	2b01      	cmp	r3, #1
 801437e:	d101      	bne.n	8014384 <HAL_UARTEx_DisableFifoMode+0x16>
 8014380:	2302      	movs	r3, #2
 8014382:	e027      	b.n	80143d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2201      	movs	r2, #1
 8014388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2224      	movs	r2, #36	; 0x24
 8014390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	681a      	ldr	r2, [r3, #0]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	f022 0201 	bic.w	r2, r2, #1
 80143aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80143b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2200      	movs	r2, #0
 80143b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	68fa      	ldr	r2, [r7, #12]
 80143c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	2220      	movs	r2, #32
 80143c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	2200      	movs	r2, #0
 80143ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80143d2:	2300      	movs	r3, #0
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3714      	adds	r7, #20
 80143d8:	46bd      	mov	sp, r7
 80143da:	bc80      	pop	{r7}
 80143dc:	4770      	bx	lr

080143de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80143de:	b580      	push	{r7, lr}
 80143e0:	b084      	sub	sp, #16
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	6078      	str	r0, [r7, #4]
 80143e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80143ee:	2b01      	cmp	r3, #1
 80143f0:	d101      	bne.n	80143f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80143f2:	2302      	movs	r3, #2
 80143f4:	e02d      	b.n	8014452 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2201      	movs	r2, #1
 80143fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2224      	movs	r2, #36	; 0x24
 8014402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	681a      	ldr	r2, [r3, #0]
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	f022 0201 	bic.w	r2, r2, #1
 801441c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	689b      	ldr	r3, [r3, #8]
 8014424:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	683a      	ldr	r2, [r7, #0]
 801442e:	430a      	orrs	r2, r1
 8014430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f000 f850 	bl	80144d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	68fa      	ldr	r2, [r7, #12]
 801443e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2220      	movs	r2, #32
 8014444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2200      	movs	r2, #0
 801444c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014450:	2300      	movs	r3, #0
}
 8014452:	4618      	mov	r0, r3
 8014454:	3710      	adds	r7, #16
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}

0801445a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801445a:	b580      	push	{r7, lr}
 801445c:	b084      	sub	sp, #16
 801445e:	af00      	add	r7, sp, #0
 8014460:	6078      	str	r0, [r7, #4]
 8014462:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801446a:	2b01      	cmp	r3, #1
 801446c:	d101      	bne.n	8014472 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801446e:	2302      	movs	r3, #2
 8014470:	e02d      	b.n	80144ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2201      	movs	r2, #1
 8014476:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2224      	movs	r2, #36	; 0x24
 801447e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	681a      	ldr	r2, [r3, #0]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	f022 0201 	bic.w	r2, r2, #1
 8014498:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	689b      	ldr	r3, [r3, #8]
 80144a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	683a      	ldr	r2, [r7, #0]
 80144aa:	430a      	orrs	r2, r1
 80144ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f000 f812 	bl	80144d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	68fa      	ldr	r2, [r7, #12]
 80144ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2220      	movs	r2, #32
 80144c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2200      	movs	r2, #0
 80144c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3710      	adds	r7, #16
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
	...

080144d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80144d8:	b480      	push	{r7}
 80144da:	b085      	sub	sp, #20
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d108      	bne.n	80144fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	2201      	movs	r2, #1
 80144ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2201      	movs	r2, #1
 80144f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80144f8:	e031      	b.n	801455e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80144fa:	2308      	movs	r3, #8
 80144fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80144fe:	2308      	movs	r3, #8
 8014500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	689b      	ldr	r3, [r3, #8]
 8014508:	0e5b      	lsrs	r3, r3, #25
 801450a:	b2db      	uxtb	r3, r3
 801450c:	f003 0307 	and.w	r3, r3, #7
 8014510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	689b      	ldr	r3, [r3, #8]
 8014518:	0f5b      	lsrs	r3, r3, #29
 801451a:	b2db      	uxtb	r3, r3
 801451c:	f003 0307 	and.w	r3, r3, #7
 8014520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014522:	7bbb      	ldrb	r3, [r7, #14]
 8014524:	7b3a      	ldrb	r2, [r7, #12]
 8014526:	4910      	ldr	r1, [pc, #64]	; (8014568 <UARTEx_SetNbDataToProcess+0x90>)
 8014528:	5c8a      	ldrb	r2, [r1, r2]
 801452a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801452e:	7b3a      	ldrb	r2, [r7, #12]
 8014530:	490e      	ldr	r1, [pc, #56]	; (801456c <UARTEx_SetNbDataToProcess+0x94>)
 8014532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014534:	fb93 f3f2 	sdiv	r3, r3, r2
 8014538:	b29a      	uxth	r2, r3
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014540:	7bfb      	ldrb	r3, [r7, #15]
 8014542:	7b7a      	ldrb	r2, [r7, #13]
 8014544:	4908      	ldr	r1, [pc, #32]	; (8014568 <UARTEx_SetNbDataToProcess+0x90>)
 8014546:	5c8a      	ldrb	r2, [r1, r2]
 8014548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801454c:	7b7a      	ldrb	r2, [r7, #13]
 801454e:	4907      	ldr	r1, [pc, #28]	; (801456c <UARTEx_SetNbDataToProcess+0x94>)
 8014550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014552:	fb93 f3f2 	sdiv	r3, r3, r2
 8014556:	b29a      	uxth	r2, r3
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801455e:	bf00      	nop
 8014560:	3714      	adds	r7, #20
 8014562:	46bd      	mov	sp, r7
 8014564:	bc80      	pop	{r7}
 8014566:	4770      	bx	lr
 8014568:	0801fea4 	.word	0x0801fea4
 801456c:	0801feac 	.word	0x0801feac

08014570 <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b086      	sub	sp, #24
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 8014578:	f7f5 fdd8 	bl	800a12c <Get_AdcHandle>
 801457c:	4603      	mov	r3, r0
 801457e:	4618      	mov	r0, r3
 8014580:	f7f9 fc31 	bl	800dde6 <HAL_ADCEx_Calibration_Start>
 8014584:	4603      	mov	r3, r0
 8014586:	2b00      	cmp	r3, #0
 8014588:	d001      	beq.n	801458e <ReadADCChannel+0x1e>
	    Error_Handler();
 801458a:	f7f5 fe13 	bl	800a1b4 <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 801458e:	f107 0308 	add.w	r3, r7, #8
 8014592:	2200      	movs	r2, #0
 8014594:	601a      	str	r2, [r3, #0]
 8014596:	605a      	str	r2, [r3, #4]
 8014598:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 801459e:	2300      	movs	r3, #0
 80145a0:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80145a2:	2300      	movs	r3, #0
 80145a4:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 80145a6:	f7f5 fdc1 	bl	800a12c <Get_AdcHandle>
 80145aa:	4602      	mov	r2, r0
 80145ac:	f107 0308 	add.w	r3, r7, #8
 80145b0:	4619      	mov	r1, r3
 80145b2:	4610      	mov	r0, r2
 80145b4:	f7f9 f92a 	bl	800d80c <HAL_ADC_ConfigChannel>
 80145b8:	4603      	mov	r3, r0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d001      	beq.n	80145c2 <ReadADCChannel+0x52>
		Error_Handler();
 80145be:	f7f5 fdf9 	bl	800a1b4 <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 80145c2:	f7f5 fdb3 	bl	800a12c <Get_AdcHandle>
 80145c6:	4603      	mov	r3, r0
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7f9 f803 	bl	800d5d4 <HAL_ADC_Start>
 80145ce:	4603      	mov	r3, r0
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d001      	beq.n	80145d8 <ReadADCChannel+0x68>
		Error_Handler();
 80145d4:	f7f5 fdee 	bl	800a1b4 <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 80145d8:	f7f5 fda8 	bl	800a12c <Get_AdcHandle>
 80145dc:	4603      	mov	r3, r0
 80145de:	f04f 31ff 	mov.w	r1, #4294967295
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7f9 f86e 	bl	800d6c4 <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 80145e8:	f7f5 fda0 	bl	800a12c <Get_AdcHandle>
 80145ec:	4603      	mov	r3, r0
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7f9 f836 	bl	800d660 <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 80145f4:	f7f5 fd9a 	bl	800a12c <Get_AdcHandle>
 80145f8:	4603      	mov	r3, r0
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7f9 fa3e 	bl	800da7c <HAL_ADC_GetState>
 8014600:	4603      	mov	r3, r0
 8014602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801460a:	d107      	bne.n	801461c <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 801460c:	f7f5 fd8e 	bl	800a12c <Get_AdcHandle>
 8014610:	4603      	mov	r3, r0
 8014612:	4618      	mov	r0, r3
 8014614:	f7f9 f8ed 	bl	800d7f2 <HAL_ADC_GetValue>
 8014618:	4603      	mov	r3, r0
 801461a:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 801461c:	8afb      	ldrh	r3, [r7, #22]
}
 801461e:	4618      	mov	r0, r3
 8014620:	3718      	adds	r7, #24
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}
	...

08014628 <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 801462c:	2200      	movs	r2, #0
 801462e:	2180      	movs	r1, #128	; 0x80
 8014630:	480a      	ldr	r0, [pc, #40]	; (801465c <AdcRead_VBatt+0x34>)
 8014632:	f7fa fab9 	bl	800eba8 <HAL_GPIO_WritePin>
	adcResult = ReadADCChannel(ADC_CHANNEL_2); // * 3.3 * 23) / (4096 * 13);
 8014636:	480a      	ldr	r0, [pc, #40]	; (8014660 <AdcRead_VBatt+0x38>)
 8014638:	f7ff ff9a 	bl	8014570 <ReadADCChannel>
 801463c:	4603      	mov	r3, r0
 801463e:	4618      	mov	r0, r3
 8014640:	f7f4 fd60 	bl	8009104 <__aeabi_ui2f>
 8014644:	4603      	mov	r3, r0
 8014646:	4a07      	ldr	r2, [pc, #28]	; (8014664 <AdcRead_VBatt+0x3c>)
 8014648:	6013      	str	r3, [r2, #0]
	return adcResult;
 801464a:	4b06      	ldr	r3, [pc, #24]	; (8014664 <AdcRead_VBatt+0x3c>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	4618      	mov	r0, r3
 8014650:	f7f4 fdb0 	bl	80091b4 <__aeabi_f2uiz>
 8014654:	4603      	mov	r3, r0
 8014656:	b29b      	uxth	r3, r3
}
 8014658:	4618      	mov	r0, r3
 801465a:	bd80      	pop	{r7, pc}
 801465c:	48000400 	.word	0x48000400
 8014660:	08000004 	.word	0x08000004
 8014664:	200029c0 	.word	0x200029c0

08014668 <commandReadDeviceId>:

char DataBuffer[200];
char *Version = "4.0";

void commandReadDeviceId(char *data)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b096      	sub	sp, #88	; 0x58
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 8014670:	2300      	movs	r3, #0
 8014672:	61bb      	str	r3, [r7, #24]
 8014674:	f107 031c 	add.w	r3, r7, #28
 8014678:	2200      	movs	r2, #0
 801467a:	601a      	str	r2, [r3, #0]
 801467c:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 801467e:	f7f8 fc85 	bl	800cf8c <HAL_GetUIDw0>
 8014682:	4603      	mov	r3, r0
 8014684:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 8014686:	f7f8 fc8b 	bl	800cfa0 <HAL_GetUIDw1>
 801468a:	4603      	mov	r3, r0
 801468c:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 801468e:	f7f8 fc91 	bl	800cfb4 <HAL_GetUIDw2>
 8014692:	4603      	mov	r3, r0
 8014694:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 8014696:	f107 0318 	add.w	r3, r7, #24
 801469a:	220c      	movs	r2, #12
 801469c:	2100      	movs	r1, #0
 801469e:	4618      	mov	r0, r3
 80146a0:	f004 f9d6 	bl	8018a50 <memset>
 80146a4:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 80146a6:	61bb      	str	r3, [r7, #24]
 80146a8:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 80146aa:	61fb      	str	r3, [r7, #28]
 80146ac:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 80146ae:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 80146b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80146b4:	4a1e      	ldr	r2, [pc, #120]	; (8014730 <commandReadDeviceId+0xc8>)
 80146b6:	2132      	movs	r1, #50	; 0x32
 80146b8:	4618      	mov	r0, r3
 80146ba:	f004 fbe3 	bl	8018e84 <snprintf>
  serialPutStr(DeviceId);
 80146be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80146c2:	4618      	mov	r0, r3
 80146c4:	f000 faf0 	bl	8014ca8 <serialPutStr>
  for(i=0; i<12; i++)
 80146c8:	2300      	movs	r3, #0
 80146ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80146ce:	e026      	b.n	801471e <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 80146d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146d4:	2b0a      	cmp	r3, #10
 80146d6:	d80c      	bhi.n	80146f2 <commandReadDeviceId+0x8a>
 80146d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146dc:	3358      	adds	r3, #88	; 0x58
 80146de:	443b      	add	r3, r7
 80146e0:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80146e4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80146e8:	4a12      	ldr	r2, [pc, #72]	; (8014734 <commandReadDeviceId+0xcc>)
 80146ea:	2132      	movs	r1, #50	; 0x32
 80146ec:	f004 fbca 	bl	8018e84 <snprintf>
 80146f0:	e00b      	b.n	801470a <commandReadDeviceId+0xa2>
 80146f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146f6:	3358      	adds	r3, #88	; 0x58
 80146f8:	443b      	add	r3, r7
 80146fa:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80146fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014702:	4a0d      	ldr	r2, [pc, #52]	; (8014738 <commandReadDeviceId+0xd0>)
 8014704:	2132      	movs	r1, #50	; 0x32
 8014706:	f004 fbbd 	bl	8018e84 <snprintf>
    serialPutStr(DeviceId);
 801470a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801470e:	4618      	mov	r0, r3
 8014710:	f000 faca 	bl	8014ca8 <serialPutStr>
  for(i=0; i<12; i++)
 8014714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014718:	3301      	adds	r3, #1
 801471a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801471e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014722:	2b0b      	cmp	r3, #11
 8014724:	d9d4      	bls.n	80146d0 <commandReadDeviceId+0x68>
  }
}
 8014726:	bf00      	nop
 8014728:	bf00      	nop
 801472a:	3758      	adds	r7, #88	; 0x58
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	0801f810 	.word	0x0801f810
 8014734:	0801f820 	.word	0x0801f820
 8014738:	0801f824 	.word	0x0801f824

0801473c <commandReadDeviceBattery>:

void commandReadDeviceBattery(char *data)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 8014744:	4808      	ldr	r0, [pc, #32]	; (8014768 <commandReadDeviceBattery+0x2c>)
 8014746:	f000 faaf 	bl	8014ca8 <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %d\n",AdcRead_VBatt());
 801474a:	f7ff ff6d 	bl	8014628 <AdcRead_VBatt>
 801474e:	4603      	mov	r3, r0
 8014750:	461a      	mov	r2, r3
 8014752:	4906      	ldr	r1, [pc, #24]	; (801476c <commandReadDeviceBattery+0x30>)
 8014754:	4806      	ldr	r0, [pc, #24]	; (8014770 <commandReadDeviceBattery+0x34>)
 8014756:	f004 fbc9 	bl	8018eec <sprintf>
	 serialPutStr(DataBuffer);
 801475a:	4805      	ldr	r0, [pc, #20]	; (8014770 <commandReadDeviceBattery+0x34>)
 801475c:	f000 faa4 	bl	8014ca8 <serialPutStr>
}
 8014760:	bf00      	nop
 8014762:	3708      	adds	r7, #8
 8014764:	46bd      	mov	sp, r7
 8014766:	bd80      	pop	{r7, pc}
 8014768:	0801f828 	.word	0x0801f828
 801476c:	0801f834 	.word	0x0801f834
 8014770:	200029c4 	.word	0x200029c4

08014774 <commandGetDistance>:


char sonarBuffer[100];
void commandGetDistance(char *data)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b082      	sub	sp, #8
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 801477c:	2201      	movs	r2, #1
 801477e:	2101      	movs	r1, #1
 8014780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014784:	f7fa fa10 	bl	800eba8 <HAL_GPIO_WritePin>
	sprintf(sonarBuffer,"OK,DISTREAD %d\n",getSonarDistance());
 8014788:	f000 f9a4 	bl	8014ad4 <getSonarDistance>
 801478c:	4603      	mov	r3, r0
 801478e:	461a      	mov	r2, r3
 8014790:	4905      	ldr	r1, [pc, #20]	; (80147a8 <commandGetDistance+0x34>)
 8014792:	4806      	ldr	r0, [pc, #24]	; (80147ac <commandGetDistance+0x38>)
 8014794:	f004 fbaa 	bl	8018eec <sprintf>
	serialPutStr(sonarBuffer);
 8014798:	4804      	ldr	r0, [pc, #16]	; (80147ac <commandGetDistance+0x38>)
 801479a:	f000 fa85 	bl	8014ca8 <serialPutStr>
}
 801479e:	bf00      	nop
 80147a0:	3708      	adds	r7, #8
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	0801f844 	.word	0x0801f844
 80147ac:	20002a8c 	.word	0x20002a8c

080147b0 <commandGetVersion>:

void commandGetVersion(char *data)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b082      	sub	sp, #8
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]

	sprintf(DataBuffer,"OK,VERSION %s\n",Version);
 80147b8:	4b06      	ldr	r3, [pc, #24]	; (80147d4 <commandGetVersion+0x24>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	461a      	mov	r2, r3
 80147be:	4906      	ldr	r1, [pc, #24]	; (80147d8 <commandGetVersion+0x28>)
 80147c0:	4806      	ldr	r0, [pc, #24]	; (80147dc <commandGetVersion+0x2c>)
 80147c2:	f004 fb93 	bl	8018eec <sprintf>
	serialPutStr(DataBuffer);
 80147c6:	4805      	ldr	r0, [pc, #20]	; (80147dc <commandGetVersion+0x2c>)
 80147c8:	f000 fa6e 	bl	8014ca8 <serialPutStr>
}
 80147cc:	bf00      	nop
 80147ce:	3708      	adds	r7, #8
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}
 80147d4:	20000090 	.word	0x20000090
 80147d8:	0801f854 	.word	0x0801f854
 80147dc:	200029c4 	.word	0x200029c4

080147e0 <Flash__Init>:
/**
 * @brief Flash Init routine
 **/

bool Flash__Init(void)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b082      	sub	sp, #8
 80147e4:	af00      	add	r7, sp, #0
	uint32_t jedecId;

	HAL_Delay(100);
 80147e6:	2064      	movs	r0, #100	; 0x64
 80147e8:	f7f8 fbac 	bl	800cf44 <HAL_Delay>
	//Assert Spi CS pin
	Spi1_AssertCs();
 80147ec:	f000 fa12 	bl	8014c14 <Spi1_AssertCs>
	HAL_Delay(100);
 80147f0:	2064      	movs	r0, #100	; 0x64
 80147f2:	f7f8 fba7 	bl	800cf44 <HAL_Delay>

	Flash__GetJEDEC_ID(&jedecId);
 80147f6:	1d3b      	adds	r3, r7, #4
 80147f8:	4618      	mov	r0, r3
 80147fa:	f000 f835 	bl	8014868 <Flash__GetJEDEC_ID>

	if(jedecId != WINBOND_JEDEC_ID)
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	4a04      	ldr	r2, [pc, #16]	; (8014814 <Flash__Init+0x34>)
 8014802:	4293      	cmp	r3, r2
 8014804:	d001      	beq.n	801480a <Flash__Init+0x2a>
	{
		return false;
 8014806:	2300      	movs	r3, #0
 8014808:	e000      	b.n	801480c <Flash__Init+0x2c>
	}
	else
	{
		return true;
 801480a:	2301      	movs	r3, #1
	}
}
 801480c:	4618      	mov	r0, r3
 801480e:	3708      	adds	r7, #8
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}
 8014814:	00ef4014 	.word	0x00ef4014

08014818 <Flash__SpiWrite>:
/**
 * @brief Flash Spi write routine
 **/

void Flash__SpiWrite(unsigned char data)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	4603      	mov	r3, r0
 8014820:	71fb      	strb	r3, [r7, #7]
	Spi1_Transmit(&data, sizeof(data));
 8014822:	1dfb      	adds	r3, r7, #7
 8014824:	2101      	movs	r1, #1
 8014826:	4618      	mov	r0, r3
 8014828:	f000 fa0c 	bl	8014c44 <Spi1_Transmit>
}
 801482c:	bf00      	nop
 801482e:	3708      	adds	r7, #8
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <Flash__SpiRead>:
/**
 * @brief Flash Spi read routine
 **/

unsigned char Flash__SpiRead(void)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
	unsigned char ret = 0x00;
 801483a:	2300      	movs	r3, #0
 801483c:	71fb      	strb	r3, [r7, #7]
	Spi1_Receive(&ret, sizeof(ret));
 801483e:	1dfb      	adds	r3, r7, #7
 8014840:	2101      	movs	r1, #1
 8014842:	4618      	mov	r0, r3
 8014844:	f000 fa17 	bl	8014c76 <Spi1_Receive>
	return ret;
 8014848:	79fb      	ldrb	r3, [r7, #7]
}
 801484a:	4618      	mov	r0, r3
 801484c:	3708      	adds	r7, #8
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}

08014852 <Flash__WriteEnable>:
/**
 * @brief Flash Write Enable routine
 **/

void Flash__WriteEnable(void)
{
 8014852:	b580      	push	{r7, lr}
 8014854:	af00      	add	r7, sp, #0
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014856:	f000 f9e9 	bl	8014c2c <Spi1_DeassertCs>
	//Send Write Enable Command
	Flash__SpiWrite(CMD_WREN);
 801485a:	2006      	movs	r0, #6
 801485c:	f7ff ffdc 	bl	8014818 <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014860:	f000 f9d8 	bl	8014c14 <Spi1_AssertCs>
}
 8014864:	bf00      	nop
 8014866:	bd80      	pop	{r7, pc}

08014868 <Flash__GetJEDEC_ID>:
 *
 * @param[out] jdecId Flash JEDEC id to be read
 **/

void Flash__GetJEDEC_ID(uint32_t *jdecId)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b084      	sub	sp, #16
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
	uint8_t read_buff[3];

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014870:	f000 f9dc 	bl	8014c2c <Spi1_DeassertCs>
	//Send Read JEDEC ID Command
	Flash__SpiWrite(CMD_JEDEC_ID);
 8014874:	209f      	movs	r0, #159	; 0x9f
 8014876:	f7ff ffcf 	bl	8014818 <Flash__SpiWrite>
	read_buff[0] = Flash__SpiRead();
 801487a:	f7ff ffdb 	bl	8014834 <Flash__SpiRead>
 801487e:	4603      	mov	r3, r0
 8014880:	733b      	strb	r3, [r7, #12]
	read_buff[1] = Flash__SpiRead();
 8014882:	f7ff ffd7 	bl	8014834 <Flash__SpiRead>
 8014886:	4603      	mov	r3, r0
 8014888:	737b      	strb	r3, [r7, #13]
	read_buff[2] = Flash__SpiRead();
 801488a:	f7ff ffd3 	bl	8014834 <Flash__SpiRead>
 801488e:	4603      	mov	r3, r0
 8014890:	73bb      	strb	r3, [r7, #14]
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014892:	f000 f9bf 	bl	8014c14 <Spi1_AssertCs>

	//Format JEDEC ID
	*jdecId = (read_buff[0] << 16) | (read_buff[1] << 8) | read_buff[2];
 8014896:	7b3b      	ldrb	r3, [r7, #12]
 8014898:	041a      	lsls	r2, r3, #16
 801489a:	7b7b      	ldrb	r3, [r7, #13]
 801489c:	021b      	lsls	r3, r3, #8
 801489e:	4313      	orrs	r3, r2
 80148a0:	7bba      	ldrb	r2, [r7, #14]
 80148a2:	4313      	orrs	r3, r2
 80148a4:	461a      	mov	r2, r3
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	601a      	str	r2, [r3, #0]
}
 80148aa:	bf00      	nop
 80148ac:	3710      	adds	r7, #16
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}

080148b2 <Flash__ReadDeviceStatus1>:
/**
 * @brief Flash read device status register 1 routine
 **/

uint8_t Flash__ReadDeviceStatus1(void)
{
 80148b2:	b580      	push	{r7, lr}
 80148b4:	b082      	sub	sp, #8
 80148b6:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80148b8:	2300      	movs	r3, #0
 80148ba:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80148bc:	f000 f9b6 	bl	8014c2c <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);
 80148c0:	2005      	movs	r0, #5
 80148c2:	f7ff ffa9 	bl	8014818 <Flash__SpiWrite>
	data = Flash__SpiRead();                     // dummy
 80148c6:	f7ff ffb5 	bl	8014834 <Flash__SpiRead>
 80148ca:	4603      	mov	r3, r0
 80148cc:	71fb      	strb	r3, [r7, #7]
	//Assert Spi CS pin
	Spi1_AssertCs();
 80148ce:	f000 f9a1 	bl	8014c14 <Spi1_AssertCs>

	return (data);
 80148d2:	79fb      	ldrb	r3, [r7, #7]
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3708      	adds	r7, #8
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <Flash__ReadDeviceStatus2>:
/**
 * @brief Flash read device status register 2 routine
 **/

uint8_t Flash__ReadDeviceStatus2(void)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80148e2:	2300      	movs	r3, #0
 80148e4:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80148e6:	f000 f9a1 	bl	8014c2c <Spi1_DeassertCs>
	//Send Read Status Register 2 Command
	Flash__SpiWrite(CMD_RDSR2);
 80148ea:	2035      	movs	r0, #53	; 0x35
 80148ec:	f7ff ff94 	bl	8014818 <Flash__SpiWrite>
	data = Flash__SpiRead();                     // dummy
 80148f0:	f7ff ffa0 	bl	8014834 <Flash__SpiRead>
 80148f4:	4603      	mov	r3, r0
 80148f6:	71fb      	strb	r3, [r7, #7]
	//Assert Spi CS pin
	Spi1_AssertCs();
 80148f8:	f000 f98c 	bl	8014c14 <Spi1_AssertCs>

	return (data);
 80148fc:	79fb      	ldrb	r3, [r7, #7]
}
 80148fe:	4618      	mov	r0, r3
 8014900:	3708      	adds	r7, #8
 8014902:	46bd      	mov	sp, r7
 8014904:	bd80      	pop	{r7, pc}

08014906 <Flash__ReadDeviceStatus>:
/**
 * @brief Flash read device status routine
 **/

uint16_t Flash__ReadDeviceStatus(void)
{
 8014906:	b590      	push	{r4, r7, lr}
 8014908:	b083      	sub	sp, #12
 801490a:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 801490c:	2300      	movs	r3, #0
 801490e:	80fb      	strh	r3, [r7, #6]

	data = Flash__ReadDeviceStatus2();
 8014910:	f7ff ffe4 	bl	80148dc <Flash__ReadDeviceStatus2>
 8014914:	4603      	mov	r3, r0
 8014916:	80fb      	strh	r3, [r7, #6]
	data = (data << 8) | Flash__ReadDeviceStatus1();
 8014918:	88fb      	ldrh	r3, [r7, #6]
 801491a:	021b      	lsls	r3, r3, #8
 801491c:	b21c      	sxth	r4, r3
 801491e:	f7ff ffc8 	bl	80148b2 <Flash__ReadDeviceStatus1>
 8014922:	4603      	mov	r3, r0
 8014924:	b21b      	sxth	r3, r3
 8014926:	4323      	orrs	r3, r4
 8014928:	b21b      	sxth	r3, r3
 801492a:	80fb      	strh	r3, [r7, #6]

	return (data);
 801492c:	88fb      	ldrh	r3, [r7, #6]
}
 801492e:	4618      	mov	r0, r3
 8014930:	370c      	adds	r7, #12
 8014932:	46bd      	mov	sp, r7
 8014934:	bd90      	pop	{r4, r7, pc}

08014936 <Flash__ReadBuffer>:
 * @param[in] pBuffer Pointer to the buffer that receives the data read
 * @param[in] Length Number of bytes to read
 **/

bool Flash__ReadBuffer(uint32_t addr, uint8_t *pBuffer, uint32_t length)
{
 8014936:	b590      	push	{r4, r7, lr}
 8014938:	b087      	sub	sp, #28
 801493a:	af00      	add	r7, sp, #0
 801493c:	60f8      	str	r0, [r7, #12]
 801493e:	60b9      	str	r1, [r7, #8]
 8014940:	607a      	str	r2, [r7, #4]
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014942:	f000 f973 	bl	8014c2c <Spi1_DeassertCs>
#if WINBOND_USE_FAST_READ
	//Send Fast Read Command
	Flash__SpiWrite(CMD_READ_HS);               // send 0Bh
 8014946:	200b      	movs	r0, #11
 8014948:	f7ff ff66 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 16) & 0xFF);       // Send ReadAddr high nibble
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	0c1b      	lsrs	r3, r3, #16
 8014950:	b2db      	uxtb	r3, r3
 8014952:	4618      	mov	r0, r3
 8014954:	f7ff ff60 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 8) & 0xFF); 		// Send ReadAddr middle nibble address byte to read from
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	0a1b      	lsrs	r3, r3, #8
 801495c:	b2db      	uxtb	r3, r3
 801495e:	4618      	mov	r0, r3
 8014960:	f7ff ff5a 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite(addr & 0xFF); 				// Send ReadAddr low nibble address byte to read from
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	b2db      	uxtb	r3, r3
 8014968:	4618      	mov	r0, r3
 801496a:	f7ff ff55 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite(DUMMY);						// Dummy eight clocks
 801496e:	20ff      	movs	r0, #255	; 0xff
 8014970:	f7ff ff52 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 16) & 0xFF);       // Send ReadAddr high nibble
	Flash__SpiWrite((addr >> 8) & 0xFF); 		// Send ReadAddr middle nibble address byte to read from
	Flash__SpiWrite(addr & 0xFF); 				// Send ReadAddr low nibble address byte to read from
#endif
	//Read bytes
	for (uint32_t i = 0; i < length; ++i) {
 8014974:	2300      	movs	r3, #0
 8014976:	617b      	str	r3, [r7, #20]
 8014978:	e009      	b.n	801498e <Flash__ReadBuffer+0x58>
		pBuffer[i] = Flash__SpiRead();
 801497a:	68ba      	ldr	r2, [r7, #8]
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	18d4      	adds	r4, r2, r3
 8014980:	f7ff ff58 	bl	8014834 <Flash__SpiRead>
 8014984:	4603      	mov	r3, r0
 8014986:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < length; ++i) {
 8014988:	697b      	ldr	r3, [r7, #20]
 801498a:	3301      	adds	r3, #1
 801498c:	617b      	str	r3, [r7, #20]
 801498e:	697a      	ldr	r2, [r7, #20]
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	429a      	cmp	r2, r3
 8014994:	d3f1      	bcc.n	801497a <Flash__ReadBuffer+0x44>
	}
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014996:	f000 f93d 	bl	8014c14 <Spi1_AssertCs>

	return true;
 801499a:	2301      	movs	r3, #1
}
 801499c:	4618      	mov	r0, r3
 801499e:	371c      	adds	r7, #28
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd90      	pop	{r4, r7, pc}

080149a4 <flashWaitWhileBusy>:
 * Polls the status of the write in progress (WIP) bit of the status register
 * until the write operation is completed
 **/

void flashWaitWhileBusy(void)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
	uint8_t flash_status = 0;
 80149aa:	2300      	movs	r3, #0
 80149ac:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80149ae:	f000 f93d 	bl	8014c2c <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);   //Send RDSR command
 80149b2:	2005      	movs	r0, #5
 80149b4:	f7ff ff30 	bl	8014818 <Flash__SpiWrite>
	/*Loop whiles memory is busy with a write cycle */
	do { /* Send dummy bytes to clock out data from flash */
		flash_status = Flash__SpiRead();
 80149b8:	f7ff ff3c 	bl	8014834 <Flash__SpiRead>
 80149bc:	4603      	mov	r3, r0
 80149be:	71fb      	strb	r3, [r7, #7]
	} while (flash_status & 0x01); /* Write in progress */
 80149c0:	79fb      	ldrb	r3, [r7, #7]
 80149c2:	f003 0301 	and.w	r3, r3, #1
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d1f6      	bne.n	80149b8 <flashWaitWhileBusy+0x14>
	//Assert Spi CS pin
	Spi1_AssertCs();
 80149ca:	f000 f923 	bl	8014c14 <Spi1_AssertCs>
}
 80149ce:	bf00      	nop
 80149d0:	3708      	adds	r7, #8
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}

080149d6 <Flash__PageProgram>:
 * @param[in] write_buffer Pointer to buffer containing the date to be written to flash
 * @param[in] length Number of bytes to be written
 **/

void Flash__PageProgram(uint32_t addr, uint8_t *write_buffer, uint16_t length)
{
 80149d6:	b580      	push	{r7, lr}
 80149d8:	b084      	sub	sp, #16
 80149da:	af00      	add	r7, sp, #0
 80149dc:	60f8      	str	r0, [r7, #12]
 80149de:	60b9      	str	r1, [r7, #8]
 80149e0:	4613      	mov	r3, r2
 80149e2:	80fb      	strh	r3, [r7, #6]
	//Wait for last operation to end
	flashWaitWhileBusy();
 80149e4:	f7ff ffde 	bl	80149a4 <flashWaitWhileBusy>
	//Enable write operation
	Flash__WriteEnable();
 80149e8:	f7ff ff33 	bl	8014852 <Flash__WriteEnable>

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80149ec:	f000 f91e 	bl	8014c2c <Spi1_DeassertCs>
	// Send Page Program Command
	Flash__SpiWrite(CMD_PAGEPROG);
 80149f0:	2002      	movs	r0, #2
 80149f2:	f7ff ff11 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	0c1b      	lsrs	r3, r3, #16
 80149fa:	b2db      	uxtb	r3, r3
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7ff ff0b 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	0a1b      	lsrs	r3, r3, #8
 8014a06:	b2db      	uxtb	r3, r3
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f7ff ff05 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	b2db      	uxtb	r3, r3
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7ff ff00 	bl	8014818 <Flash__SpiWrite>


	// Check if the address match the beginning of a page
	if(addr & 0xFF)
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d009      	beq.n	8014a34 <Flash__PageProgram+0x5e>
	{
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE - (addr % SPI_FLASH_PERWRITEPAGESIZE));
 8014a20:	88fa      	ldrh	r2, [r7, #6]
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	b2db      	uxtb	r3, r3
 8014a26:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014a2a:	4293      	cmp	r3, r2
 8014a2c:	bf28      	it	cs
 8014a2e:	4613      	movcs	r3, r2
 8014a30:	80fb      	strh	r3, [r7, #6]
 8014a32:	e00f      	b.n	8014a54 <Flash__PageProgram+0x7e>
	}
	else
	{
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE);
 8014a34:	88fb      	ldrh	r3, [r7, #6]
 8014a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a3a:	bf28      	it	cs
 8014a3c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8014a40:	80fb      	strh	r3, [r7, #6]
	}

	/* while there is data to be written on the FLASH */
	while (length--) {
 8014a42:	e007      	b.n	8014a54 <Flash__PageProgram+0x7e>
		/* Send the current byte */
		Flash__SpiWrite(*write_buffer);
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f7ff fee5 	bl	8014818 <Flash__SpiWrite>
		/* Point on the next byte to be written */
		write_buffer++;
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	3301      	adds	r3, #1
 8014a52:	60bb      	str	r3, [r7, #8]
	while (length--) {
 8014a54:	88fb      	ldrh	r3, [r7, #6]
 8014a56:	1e5a      	subs	r2, r3, #1
 8014a58:	80fa      	strh	r2, [r7, #6]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d1f2      	bne.n	8014a44 <Flash__PageProgram+0x6e>
	}
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014a5e:	f000 f8d9 	bl	8014c14 <Spi1_AssertCs>

	// Wait for page program operation to end
	flashWaitWhileBusy();
 8014a62:	f7ff ff9f 	bl	80149a4 <flashWaitWhileBusy>
}
 8014a66:	bf00      	nop
 8014a68:	3710      	adds	r7, #16
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}
	...

08014a70 <Flash__SectorErase4k>:
 * @brief Flash 4kB Sector Erase routine
 * @param[in] addr Address of the sector to be erased
 **/

void Flash__SectorErase4k(uint32_t addr)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b082      	sub	sp, #8
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
	// Wait for last operation to end
	flashWaitWhileBusy();
 8014a78:	f7ff ff94 	bl	80149a4 <flashWaitWhileBusy>
	// Enable write operation
	Flash__WriteEnable();
 8014a7c:	f7ff fee9 	bl	8014852 <Flash__WriteEnable>

	//Make sure it is a 4k sector address
	if(addr & 0xFFF)
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d003      	beq.n	8014a92 <Flash__SectorErase4k+0x22>
	{
		addr = addr & 0x00FFF000;
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	4b10      	ldr	r3, [pc, #64]	; (8014ad0 <Flash__SectorErase4k+0x60>)
 8014a8e:	4013      	ands	r3, r2
 8014a90:	607b      	str	r3, [r7, #4]
	}

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014a92:	f000 f8cb 	bl	8014c2c <Spi1_DeassertCs>
	//Send Sector Erase Command
	Flash__SpiWrite(CMD_ERASE_SECTOR);
 8014a96:	2020      	movs	r0, #32
 8014a98:	f7ff febe 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	0c1b      	lsrs	r3, r3, #16
 8014aa0:	b2db      	uxtb	r3, r3
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7ff feb8 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	0a1b      	lsrs	r3, r3, #8
 8014aac:	b2db      	uxtb	r3, r3
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7ff feb2 	bl	8014818 <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	b2db      	uxtb	r3, r3
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7ff fead 	bl	8014818 <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014abe:	f000 f8a9 	bl	8014c14 <Spi1_AssertCs>

	// Wait for sector erase 4k operation to end
	flashWaitWhileBusy();
 8014ac2:	f7ff ff6f 	bl	80149a4 <flashWaitWhileBusy>
}
 8014ac6:	bf00      	nop
 8014ac8:	3708      	adds	r7, #8
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	00fff000 	.word	0x00fff000

08014ad4 <getSonarDistance>:
 */

#include "Maxbotix.h"


uint16_t getSonarDistance(void){
 8014ad4:	b5b0      	push	{r4, r5, r7, lr}
 8014ad6:	b086      	sub	sp, #24
 8014ad8:	af00      	add	r7, sp, #0
	  unsigned char RxBuffer[4];
	  bool newData = false;
 8014ada:	2300      	movs	r3, #0
 8014adc:	75fb      	strb	r3, [r7, #23]
	  uint16_t dist_mm = 0;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	82bb      	strh	r3, [r7, #20]
	  unsigned char rx;
	  uint8_t tries = 0;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	74fb      	strb	r3, [r7, #19]

	  HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 8014ae6:	2201      	movs	r2, #1
 8014ae8:	2101      	movs	r1, #1
 8014aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014aee:	f7fa f85b 	bl	800eba8 <HAL_GPIO_WritePin>
	  do {
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_SET);
 8014af2:	2201      	movs	r2, #1
 8014af4:	2102      	movs	r1, #2
 8014af6:	4844      	ldr	r0, [pc, #272]	; (8014c08 <getSonarDistance+0x134>)
 8014af8:	f7fa f856 	bl	800eba8 <HAL_GPIO_WritePin>
	    HAL_Delay(1); // todo: implement HAL_Delay_Microseconds()
 8014afc:	2001      	movs	r0, #1
 8014afe:	f7f8 fa21 	bl	800cf44 <HAL_Delay>
	    HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8014b02:	2200      	movs	r2, #0
 8014b04:	2102      	movs	r1, #2
 8014b06:	4840      	ldr	r0, [pc, #256]	; (8014c08 <getSonarDistance+0x134>)
 8014b08:	f7fa f84e 	bl	800eba8 <HAL_GPIO_WritePin>
	    if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&rx, 1, 20) == HAL_OK) {
 8014b0c:	f7f5 fb22 	bl	800a154 <Get_SonarHandle>
 8014b10:	1df9      	adds	r1, r7, #7
 8014b12:	2314      	movs	r3, #20
 8014b14:	2201      	movs	r2, #1
 8014b16:	f7fd fcaf 	bl	8012478 <HAL_UART_Receive>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d160      	bne.n	8014be2 <getSonarDistance+0x10e>
	      if ((char)rx == 'R') {
 8014b20:	79fb      	ldrb	r3, [r7, #7]
 8014b22:	2b52      	cmp	r3, #82	; 0x52
 8014b24:	d15a      	bne.n	8014bdc <getSonarDistance+0x108>
	        if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t *)&RxBuffer, 4, 20) == HAL_OK) {
 8014b26:	f7f5 fb15 	bl	800a154 <Get_SonarHandle>
 8014b2a:	f107 0108 	add.w	r1, r7, #8
 8014b2e:	2314      	movs	r3, #20
 8014b30:	2204      	movs	r2, #4
 8014b32:	f7fd fca1 	bl	8012478 <HAL_UART_Receive>
 8014b36:	4603      	mov	r3, r0
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d155      	bne.n	8014be8 <getSonarDistance+0x114>
	          if (isdigit(RxBuffer[3])) {
 8014b3c:	7afb      	ldrb	r3, [r7, #11]
 8014b3e:	3301      	adds	r3, #1
 8014b40:	4a32      	ldr	r2, [pc, #200]	; (8014c0c <getSonarDistance+0x138>)
 8014b42:	4413      	add	r3, r2
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	f003 0304 	and.w	r3, r3, #4
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d001      	beq.n	8014b52 <getSonarDistance+0x7e>
	            newData = true;
 8014b4e:	2301      	movs	r3, #1
 8014b50:	75fb      	strb	r3, [r7, #23]
	          }
	          if (newData) {
 8014b52:	7dfb      	ldrb	r3, [r7, #23]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d047      	beq.n	8014be8 <getSonarDistance+0x114>
	            for (int i = 0; i < 4; i++)
 8014b58:	2300      	movs	r3, #0
 8014b5a:	60fb      	str	r3, [r7, #12]
 8014b5c:	e035      	b.n	8014bca <getSonarDistance+0xf6>
	              dist_mm += (RxBuffer[3 - i] - '0') * pow(10, i);
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	f1c3 0303 	rsb	r3, r3, #3
 8014b64:	3318      	adds	r3, #24
 8014b66:	443b      	add	r3, r7
 8014b68:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8014b6c:	3b30      	subs	r3, #48	; 0x30
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7f3 feb0 	bl	80088d4 <__aeabi_i2d>
 8014b74:	4604      	mov	r4, r0
 8014b76:	460d      	mov	r5, r1
 8014b78:	68f8      	ldr	r0, [r7, #12]
 8014b7a:	f7f3 feab 	bl	80088d4 <__aeabi_i2d>
 8014b7e:	4602      	mov	r2, r0
 8014b80:	460b      	mov	r3, r1
 8014b82:	f04f 0000 	mov.w	r0, #0
 8014b86:	4922      	ldr	r1, [pc, #136]	; (8014c10 <getSonarDistance+0x13c>)
 8014b88:	f009 fbac 	bl	801e2e4 <pow>
 8014b8c:	4602      	mov	r2, r0
 8014b8e:	460b      	mov	r3, r1
 8014b90:	4620      	mov	r0, r4
 8014b92:	4629      	mov	r1, r5
 8014b94:	f7f3 ff08 	bl	80089a8 <__aeabi_dmul>
 8014b98:	4602      	mov	r2, r0
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	4614      	mov	r4, r2
 8014b9e:	461d      	mov	r5, r3
 8014ba0:	8abb      	ldrh	r3, [r7, #20]
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7f3 fe96 	bl	80088d4 <__aeabi_i2d>
 8014ba8:	4602      	mov	r2, r0
 8014baa:	460b      	mov	r3, r1
 8014bac:	4620      	mov	r0, r4
 8014bae:	4629      	mov	r1, r5
 8014bb0:	f7f3 fd44 	bl	800863c <__adddf3>
 8014bb4:	4602      	mov	r2, r0
 8014bb6:	460b      	mov	r3, r1
 8014bb8:	4610      	mov	r0, r2
 8014bba:	4619      	mov	r1, r3
 8014bbc:	f7f4 f9cc 	bl	8008f58 <__aeabi_d2uiz>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	82bb      	strh	r3, [r7, #20]
	            for (int i = 0; i < 4; i++)
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	60fb      	str	r3, [r7, #12]
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	2b03      	cmp	r3, #3
 8014bce:	ddc6      	ble.n	8014b5e <getSonarDistance+0x8a>
	            if (dist_mm==0)
 8014bd0:	8abb      	ldrh	r3, [r7, #20]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d108      	bne.n	8014be8 <getSonarDistance+0x114>
	            	newData = false;
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	75fb      	strb	r3, [r7, #23]
 8014bda:	e005      	b.n	8014be8 <getSonarDistance+0x114>
	          }
	        }
	      } else {
	        newData = false;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	75fb      	strb	r3, [r7, #23]
 8014be0:	e002      	b.n	8014be8 <getSonarDistance+0x114>
	      }
	    } else {
	      tries++;
 8014be2:	7cfb      	ldrb	r3, [r7, #19]
 8014be4:	3301      	adds	r3, #1
 8014be6:	74fb      	strb	r3, [r7, #19]
	    }
	  } while (newData == false && tries < MAX_SONAR_TRIES - 1);
 8014be8:	7dfb      	ldrb	r3, [r7, #23]
 8014bea:	f083 0301 	eor.w	r3, r3, #1
 8014bee:	b2db      	uxtb	r3, r3
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d003      	beq.n	8014bfc <getSonarDistance+0x128>
 8014bf4:	7cfb      	ldrb	r3, [r7, #19]
 8014bf6:	2b03      	cmp	r3, #3
 8014bf8:	f67f af7b 	bls.w	8014af2 <getSonarDistance+0x1e>
	  return dist_mm;
 8014bfc:	8abb      	ldrh	r3, [r7, #20]
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3718      	adds	r7, #24
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bdb0      	pop	{r4, r5, r7, pc}
 8014c06:	bf00      	nop
 8014c08:	48000800 	.word	0x48000800
 8014c0c:	080204f4 	.word	0x080204f4
 8014c10:	40240000 	.word	0x40240000

08014c14 <Spi1_AssertCs>:
 */

#include "Spi.h"

void Spi1_AssertCs(void)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	af00      	add	r7, sp, #0
	//Assert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8014c18:	2201      	movs	r2, #1
 8014c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014c1e:	4802      	ldr	r0, [pc, #8]	; (8014c28 <Spi1_AssertCs+0x14>)
 8014c20:	f7f9 ffc2 	bl	800eba8 <HAL_GPIO_WritePin>
}
 8014c24:	bf00      	nop
 8014c26:	bd80      	pop	{r7, pc}
 8014c28:	48000400 	.word	0x48000400

08014c2c <Spi1_DeassertCs>:

void Spi1_DeassertCs(void)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	af00      	add	r7, sp, #0
	//Deassert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8014c30:	2200      	movs	r2, #0
 8014c32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014c36:	4802      	ldr	r0, [pc, #8]	; (8014c40 <Spi1_DeassertCs+0x14>)
 8014c38:	f7f9 ffb6 	bl	800eba8 <HAL_GPIO_WritePin>
}
 8014c3c:	bf00      	nop
 8014c3e:	bd80      	pop	{r7, pc}
 8014c40:	48000400 	.word	0x48000400

08014c44 <Spi1_Transmit>:

bool Spi1_Transmit(uint8_t *buff, uint16_t size)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	460b      	mov	r3, r1
 8014c4e:	807b      	strh	r3, [r7, #2]
  bool status = false;
 8014c50:	2300      	movs	r3, #0
 8014c52:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Transmit(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8014c54:	f7f5 fa88 	bl	800a168 <Get_SpiHandle>
 8014c58:	887a      	ldrh	r2, [r7, #2]
 8014c5a:	2364      	movs	r3, #100	; 0x64
 8014c5c:	6879      	ldr	r1, [r7, #4]
 8014c5e:	f7fc f836 	bl	8010cce <HAL_SPI_Transmit>
 8014c62:	4603      	mov	r3, r0
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d101      	bne.n	8014c6c <Spi1_Transmit+0x28>
  {
    status  = true;
 8014c68:	2301      	movs	r3, #1
 8014c6a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8014c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3710      	adds	r7, #16
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}

08014c76 <Spi1_Receive>:


bool Spi1_Receive(uint8_t *buff, uint16_t size)
{
 8014c76:	b580      	push	{r7, lr}
 8014c78:	b084      	sub	sp, #16
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	6078      	str	r0, [r7, #4]
 8014c7e:	460b      	mov	r3, r1
 8014c80:	807b      	strh	r3, [r7, #2]
  bool status = false;
 8014c82:	2300      	movs	r3, #0
 8014c84:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Receive(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8014c86:	f7f5 fa6f 	bl	800a168 <Get_SpiHandle>
 8014c8a:	887a      	ldrh	r2, [r7, #2]
 8014c8c:	2364      	movs	r3, #100	; 0x64
 8014c8e:	6879      	ldr	r1, [r7, #4]
 8014c90:	f7fc f9ad 	bl	8010fee <HAL_SPI_Receive>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d101      	bne.n	8014c9e <Spi1_Receive+0x28>
  {
    status = true;
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3710      	adds	r7, #16
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}

08014ca8 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8014ca8:	b590      	push	{r4, r7, lr}
 8014caa:	b083      	sub	sp, #12
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8014cb0:	f7f5 fa46 	bl	800a140 <Get_DebugHandle>
 8014cb4:	4604      	mov	r4, r0
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f7f3 fcb2 	bl	8008620 <strlen>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	b29a      	uxth	r2, r3
 8014cc0:	230a      	movs	r3, #10
 8014cc2:	6879      	ldr	r1, [r7, #4]
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	f7fd fb51 	bl	801236c <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 8014cca:	bf00      	nop
 8014ccc:	370c      	adds	r7, #12
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd90      	pop	{r4, r7, pc}
	...

08014cd4 <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b084      	sub	sp, #16
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 8014cdc:	2300      	movs	r3, #0
 8014cde:	60fb      	str	r3, [r7, #12]
	char tRxedChar;



	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8014ce0:	f7f5 fa2e 	bl	800a140 <Get_DebugHandle>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	2201      	movs	r2, #1
 8014ce8:	4911      	ldr	r1, [pc, #68]	; (8014d30 <terminalTaskHandler+0x5c>)
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7fd fc88 	bl	8012600 <HAL_UART_Receive_IT>
	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 8014cf0:	4810      	ldr	r0, [pc, #64]	; (8014d34 <terminalTaskHandler+0x60>)
 8014cf2:	f7ff ffd9 	bl	8014ca8 <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8014cf6:	f7f5 fa41 	bl	800a17c <Get_TerminalQueueHandle>
 8014cfa:	f107 030b 	add.w	r3, r7, #11
 8014cfe:	220a      	movs	r2, #10
 8014d00:	4619      	mov	r1, r3
 8014d02:	f000 fe9d 	bl	8015a40 <xQueueReceive>
 8014d06:	4603      	mov	r3, r0
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d00c      	beq.n	8014d26 <terminalTaskHandler+0x52>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 8014d0c:	7afb      	ldrb	r3, [r7, #11]
 8014d0e:	4618      	mov	r0, r3
 8014d10:	f000 f814 	bl	8014d3c <CommandLineBuildCommand>
 8014d14:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d004      	beq.n	8014d26 <terminalTaskHandler+0x52>
			{
				CommandLineProcessCommand(gCommandBuffer);
 8014d1c:	4806      	ldr	r0, [pc, #24]	; (8014d38 <terminalTaskHandler+0x64>)
 8014d1e:	f000 f855 	bl	8014dcc <CommandLineProcessCommand>
				tCommandReady = 0;
 8014d22:	2300      	movs	r3, #0
 8014d24:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 8014d26:	2001      	movs	r0, #1
 8014d28:	f000 f93f 	bl	8014faa <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8014d2c:	e7e3      	b.n	8014cf6 <terminalTaskHandler+0x22>
 8014d2e:	bf00      	nop
 8014d30:	20002af4 	.word	0x20002af4
 8014d34:	0801f8b0 	.word	0x0801f8b0
 8014d38:	20002af8 	.word	0x20002af8

08014d3c <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	4603      	mov	r3, r0
 8014d44:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 8014d46:	79fb      	ldrb	r3, [r7, #7]
 8014d48:	2b0a      	cmp	r3, #10
 8014d4a:	d005      	beq.n	8014d58 <CommandLineBuildCommand+0x1c>
 8014d4c:	79fb      	ldrb	r3, [r7, #7]
 8014d4e:	2b20      	cmp	r3, #32
 8014d50:	d002      	beq.n	8014d58 <CommandLineBuildCommand+0x1c>
 8014d52:	79fb      	ldrb	r3, [r7, #7]
 8014d54:	2b09      	cmp	r3, #9
 8014d56:	d101      	bne.n	8014d5c <CommandLineBuildCommand+0x20>
	{
		return false;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	e02d      	b.n	8014db8 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8014d5c:	79fb      	ldrb	r3, [r7, #7]
 8014d5e:	2b0d      	cmp	r3, #13
 8014d60:	d10a      	bne.n	8014d78 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 8014d62:	4b18      	ldr	r3, [pc, #96]	; (8014dc4 <CommandLineBuildCommand+0x88>)
 8014d64:	881b      	ldrh	r3, [r3, #0]
 8014d66:	461a      	mov	r2, r3
 8014d68:	4b17      	ldr	r3, [pc, #92]	; (8014dc8 <CommandLineBuildCommand+0x8c>)
 8014d6a:	2100      	movs	r1, #0
 8014d6c:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 8014d6e:	4b15      	ldr	r3, [pc, #84]	; (8014dc4 <CommandLineBuildCommand+0x88>)
 8014d70:	2200      	movs	r2, #0
 8014d72:	801a      	strh	r2, [r3, #0]
		return true;
 8014d74:	2301      	movs	r3, #1
 8014d76:	e01f      	b.n	8014db8 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8014d78:	79fb      	ldrb	r3, [r7, #7]
 8014d7a:	2b60      	cmp	r3, #96	; 0x60
 8014d7c:	d906      	bls.n	8014d8c <CommandLineBuildCommand+0x50>
 8014d7e:	79fb      	ldrb	r3, [r7, #7]
 8014d80:	2b7a      	cmp	r3, #122	; 0x7a
 8014d82:	d803      	bhi.n	8014d8c <CommandLineBuildCommand+0x50>
 8014d84:	79fb      	ldrb	r3, [r7, #7]
 8014d86:	3b20      	subs	r3, #32
 8014d88:	b2db      	uxtb	r3, r3
 8014d8a:	e000      	b.n	8014d8e <CommandLineBuildCommand+0x52>
 8014d8c:	79fb      	ldrb	r3, [r7, #7]
 8014d8e:	4a0d      	ldr	r2, [pc, #52]	; (8014dc4 <CommandLineBuildCommand+0x88>)
 8014d90:	8812      	ldrh	r2, [r2, #0]
 8014d92:	4611      	mov	r1, r2
 8014d94:	4a0c      	ldr	r2, [pc, #48]	; (8014dc8 <CommandLineBuildCommand+0x8c>)
 8014d96:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8014d98:	4b0a      	ldr	r3, [pc, #40]	; (8014dc4 <CommandLineBuildCommand+0x88>)
 8014d9a:	881b      	ldrh	r3, [r3, #0]
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	b29a      	uxth	r2, r3
 8014da0:	4b08      	ldr	r3, [pc, #32]	; (8014dc4 <CommandLineBuildCommand+0x88>)
 8014da2:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 8014da4:	4b07      	ldr	r3, [pc, #28]	; (8014dc4 <CommandLineBuildCommand+0x88>)
 8014da6:	881b      	ldrh	r3, [r3, #0]
 8014da8:	2b77      	cmp	r3, #119	; 0x77
 8014daa:	d904      	bls.n	8014db6 <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 8014dac:	4b05      	ldr	r3, [pc, #20]	; (8014dc4 <CommandLineBuildCommand+0x88>)
 8014dae:	2200      	movs	r2, #0
 8014db0:	801a      	strh	r2, [r3, #0]
		return true;
 8014db2:	2301      	movs	r3, #1
 8014db4:	e000      	b.n	8014db8 <CommandLineBuildCommand+0x7c>
	}

	return false;
 8014db6:	2300      	movs	r3, #0

}
 8014db8:	4618      	mov	r0, r3
 8014dba:	370c      	adds	r7, #12
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bc80      	pop	{r7}
 8014dc0:	4770      	bx	lr
 8014dc2:	bf00      	nop
 8014dc4:	20002bdc 	.word	0x20002bdc
 8014dc8:	20002af8 	.word	0x20002af8

08014dcc <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 8014dcc:	b590      	push	{r4, r7, lr}
 8014dce:	b087      	sub	sp, #28
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 8014dd8:	491e      	ldr	r1, [pc, #120]	; (8014e54 <CommandLineProcessCommand+0x88>)
 8014dda:	2000      	movs	r0, #0
 8014ddc:	f004 f8ba 	bl	8018f54 <strtok>
 8014de0:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8014de2:	2300      	movs	r3, #0
 8014de4:	617b      	str	r3, [r7, #20]
 8014de6:	e020      	b.n	8014e2a <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 8014de8:	4a1b      	ldr	r2, [pc, #108]	; (8014e58 <CommandLineProcessCommand+0x8c>)
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8014df0:	4a19      	ldr	r2, [pc, #100]	; (8014e58 <CommandLineProcessCommand+0x8c>)
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f7f3 fc11 	bl	8008620 <strlen>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	461a      	mov	r2, r3
 8014e02:	6879      	ldr	r1, [r7, #4]
 8014e04:	4620      	mov	r0, r4
 8014e06:	f004 f891 	bl	8018f2c <strncmp>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d109      	bne.n	8014e24 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 8014e10:	2301      	movs	r3, #1
 8014e12:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 8014e14:	4a10      	ldr	r2, [pc, #64]	; (8014e58 <CommandLineProcessCommand+0x8c>)
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	00db      	lsls	r3, r3, #3
 8014e1a:	4413      	add	r3, r2
 8014e1c:	685b      	ldr	r3, [r3, #4]
 8014e1e:	68f8      	ldr	r0, [r7, #12]
 8014e20:	4798      	blx	r3
			break;
 8014e22:	e008      	b.n	8014e36 <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	3301      	adds	r3, #1
 8014e28:	617b      	str	r3, [r7, #20]
 8014e2a:	4a0b      	ldr	r2, [pc, #44]	; (8014e58 <CommandLineProcessCommand+0x8c>)
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d1d8      	bne.n	8014de8 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message. */
	if (CommandFound==false)
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d107      	bne.n	8014e4c <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 8014e3c:	4a07      	ldr	r2, [pc, #28]	; (8014e5c <CommandLineProcessCommand+0x90>)
 8014e3e:	2164      	movs	r1, #100	; 0x64
 8014e40:	4807      	ldr	r0, [pc, #28]	; (8014e60 <CommandLineProcessCommand+0x94>)
 8014e42:	f004 f81f 	bl	8018e84 <snprintf>
		serialPutStr(TerminalMsgBuffer);
 8014e46:	4806      	ldr	r0, [pc, #24]	; (8014e60 <CommandLineProcessCommand+0x94>)
 8014e48:	f7ff ff2e 	bl	8014ca8 <serialPutStr>
	}
}
 8014e4c:	bf00      	nop
 8014e4e:	371c      	adds	r7, #28
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd90      	pop	{r4, r7, pc}
 8014e54:	0801f8cc 	.word	0x0801f8cc
 8014e58:	0801feb4 	.word	0x0801feb4
 8014e5c:	0801f8d0 	.word	0x0801f8d0
 8014e60:	20002b74 	.word	0x20002b74

08014e64 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	4a0c      	ldr	r2, [pc, #48]	; (8014ea4 <HAL_UART_RxCpltCallback+0x40>)
 8014e72:	4293      	cmp	r3, r2
 8014e74:	d112      	bne.n	8014e9c <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8014e76:	f7f5 f963 	bl	800a140 <Get_DebugHandle>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	490a      	ldr	r1, [pc, #40]	; (8014ea8 <HAL_UART_RxCpltCallback+0x44>)
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7fd fbbd 	bl	8012600 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 8014e86:	4b08      	ldr	r3, [pc, #32]	; (8014ea8 <HAL_UART_RxCpltCallback+0x44>)
 8014e88:	781a      	ldrb	r2, [r3, #0]
 8014e8a:	4b08      	ldr	r3, [pc, #32]	; (8014eac <HAL_UART_RxCpltCallback+0x48>)
 8014e8c:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 8014e8e:	f7f5 f975 	bl	800a17c <Get_TerminalQueueHandle>
 8014e92:	2300      	movs	r3, #0
 8014e94:	4a06      	ldr	r2, [pc, #24]	; (8014eb0 <HAL_UART_RxCpltCallback+0x4c>)
 8014e96:	4905      	ldr	r1, [pc, #20]	; (8014eac <HAL_UART_RxCpltCallback+0x48>)
 8014e98:	f000 fcac 	bl	80157f4 <xQueueGenericSendFromISR>
	}
}
 8014e9c:	bf00      	nop
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	40004400 	.word	0x40004400
 8014ea8:	20002af4 	.word	0x20002af4
 8014eac:	20002af0 	.word	0x20002af0
 8014eb0:	20002bd8 	.word	0x20002bd8

08014eb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014eb4:	b480      	push	{r7}
 8014eb6:	b085      	sub	sp, #20
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	4603      	mov	r3, r0
 8014ebc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014ec6:	2b84      	cmp	r3, #132	; 0x84
 8014ec8:	d005      	beq.n	8014ed6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014eca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	4413      	add	r3, r2
 8014ed2:	3303      	adds	r3, #3
 8014ed4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
}
 8014ed8:	4618      	mov	r0, r3
 8014eda:	3714      	adds	r7, #20
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bc80      	pop	{r7}
 8014ee0:	4770      	bx	lr

08014ee2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014ee2:	b480      	push	{r7}
 8014ee4:	b083      	sub	sp, #12
 8014ee6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ee8:	f3ef 8305 	mrs	r3, IPSR
 8014eec:	607b      	str	r3, [r7, #4]
  return(result);
 8014eee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	bf14      	ite	ne
 8014ef4:	2301      	movne	r3, #1
 8014ef6:	2300      	moveq	r3, #0
 8014ef8:	b2db      	uxtb	r3, r3
}
 8014efa:	4618      	mov	r0, r3
 8014efc:	370c      	adds	r7, #12
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bc80      	pop	{r7}
 8014f02:	4770      	bx	lr

08014f04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014f08:	f001 fb9c 	bl	8016644 <vTaskStartScheduler>
  
  return osOK;
 8014f0c:	2300      	movs	r3, #0
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	bd80      	pop	{r7, pc}

08014f12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014f12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f14:	b089      	sub	sp, #36	; 0x24
 8014f16:	af04      	add	r7, sp, #16
 8014f18:	6078      	str	r0, [r7, #4]
 8014f1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	695b      	ldr	r3, [r3, #20]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d020      	beq.n	8014f66 <osThreadCreate+0x54>
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	699b      	ldr	r3, [r3, #24]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d01c      	beq.n	8014f66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	685c      	ldr	r4, [r3, #4]
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681d      	ldr	r5, [r3, #0]
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	691e      	ldr	r6, [r3, #16]
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f7ff ffb8 	bl	8014eb4 <makeFreeRtosPriority>
 8014f44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	695b      	ldr	r3, [r3, #20]
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f4e:	9202      	str	r2, [sp, #8]
 8014f50:	9301      	str	r3, [sp, #4]
 8014f52:	9100      	str	r1, [sp, #0]
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	4632      	mov	r2, r6
 8014f58:	4629      	mov	r1, r5
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	f001 f960 	bl	8016220 <xTaskCreateStatic>
 8014f60:	4603      	mov	r3, r0
 8014f62:	60fb      	str	r3, [r7, #12]
 8014f64:	e01c      	b.n	8014fa0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	685c      	ldr	r4, [r3, #4]
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f72:	b29e      	uxth	r6, r3
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7ff ff9a 	bl	8014eb4 <makeFreeRtosPriority>
 8014f80:	4602      	mov	r2, r0
 8014f82:	f107 030c 	add.w	r3, r7, #12
 8014f86:	9301      	str	r3, [sp, #4]
 8014f88:	9200      	str	r2, [sp, #0]
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	4632      	mov	r2, r6
 8014f8e:	4629      	mov	r1, r5
 8014f90:	4620      	mov	r0, r4
 8014f92:	f001 f9a4 	bl	80162de <xTaskCreate>
 8014f96:	4603      	mov	r3, r0
 8014f98:	2b01      	cmp	r3, #1
 8014f9a:	d001      	beq.n	8014fa0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	e000      	b.n	8014fa2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3714      	adds	r7, #20
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014faa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014faa:	b580      	push	{r7, lr}
 8014fac:	b084      	sub	sp, #16
 8014fae:	af00      	add	r7, sp, #0
 8014fb0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d001      	beq.n	8014fc0 <osDelay+0x16>
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	e000      	b.n	8014fc2 <osDelay+0x18>
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f001 fb0a 	bl	80165dc <vTaskDelay>
  
  return osOK;
 8014fc8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3710      	adds	r7, #16
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}

08014fd2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8014fd2:	b580      	push	{r7, lr}
 8014fd4:	b082      	sub	sp, #8
 8014fd6:	af00      	add	r7, sp, #0
 8014fd8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d007      	beq.n	8014ff2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	4619      	mov	r1, r3
 8014fe8:	2001      	movs	r0, #1
 8014fea:	f000 faea 	bl	80155c2 <xQueueCreateMutexStatic>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	e003      	b.n	8014ffa <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8014ff2:	2001      	movs	r0, #1
 8014ff4:	f000 facd 	bl	8015592 <xQueueCreateMutex>
 8014ff8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	3708      	adds	r7, #8
 8014ffe:	46bd      	mov	sp, r7
 8015000:	bd80      	pop	{r7, pc}
	...

08015004 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
 801500c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801500e:	2300      	movs	r3, #0
 8015010:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d101      	bne.n	801501c <osMutexWait+0x18>
    return osErrorParameter;
 8015018:	2380      	movs	r3, #128	; 0x80
 801501a:	e03a      	b.n	8015092 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 801501c:	2300      	movs	r3, #0
 801501e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015026:	d103      	bne.n	8015030 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8015028:	f04f 33ff 	mov.w	r3, #4294967295
 801502c:	60fb      	str	r3, [r7, #12]
 801502e:	e009      	b.n	8015044 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d006      	beq.n	8015044 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d101      	bne.n	8015044 <osMutexWait+0x40>
      ticks = 1;
 8015040:	2301      	movs	r3, #1
 8015042:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8015044:	f7ff ff4d 	bl	8014ee2 <inHandlerMode>
 8015048:	4603      	mov	r3, r0
 801504a:	2b00      	cmp	r3, #0
 801504c:	d017      	beq.n	801507e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 801504e:	f107 0308 	add.w	r3, r7, #8
 8015052:	461a      	mov	r2, r3
 8015054:	2100      	movs	r1, #0
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f000 fede 	bl	8015e18 <xQueueReceiveFromISR>
 801505c:	4603      	mov	r3, r0
 801505e:	2b01      	cmp	r3, #1
 8015060:	d001      	beq.n	8015066 <osMutexWait+0x62>
      return osErrorOS;
 8015062:	23ff      	movs	r3, #255	; 0xff
 8015064:	e015      	b.n	8015092 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8015066:	68bb      	ldr	r3, [r7, #8]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d011      	beq.n	8015090 <osMutexWait+0x8c>
 801506c:	4b0b      	ldr	r3, [pc, #44]	; (801509c <osMutexWait+0x98>)
 801506e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015072:	601a      	str	r2, [r3, #0]
 8015074:	f3bf 8f4f 	dsb	sy
 8015078:	f3bf 8f6f 	isb	sy
 801507c:	e008      	b.n	8015090 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801507e:	68f9      	ldr	r1, [r7, #12]
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f000 fdbd 	bl	8015c00 <xQueueSemaphoreTake>
 8015086:	4603      	mov	r3, r0
 8015088:	2b01      	cmp	r3, #1
 801508a:	d001      	beq.n	8015090 <osMutexWait+0x8c>
    return osErrorOS;
 801508c:	23ff      	movs	r3, #255	; 0xff
 801508e:	e000      	b.n	8015092 <osMutexWait+0x8e>
  }
  
  return osOK;
 8015090:	2300      	movs	r3, #0
}
 8015092:	4618      	mov	r0, r3
 8015094:	3710      	adds	r7, #16
 8015096:	46bd      	mov	sp, r7
 8015098:	bd80      	pop	{r7, pc}
 801509a:	bf00      	nop
 801509c:	e000ed04 	.word	0xe000ed04

080150a0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b084      	sub	sp, #16
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80150a8:	2300      	movs	r3, #0
 80150aa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80150ac:	2300      	movs	r3, #0
 80150ae:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80150b0:	f7ff ff17 	bl	8014ee2 <inHandlerMode>
 80150b4:	4603      	mov	r3, r0
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d016      	beq.n	80150e8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80150ba:	f107 0308 	add.w	r3, r7, #8
 80150be:	4619      	mov	r1, r3
 80150c0:	6878      	ldr	r0, [r7, #4]
 80150c2:	f000 fc2f 	bl	8015924 <xQueueGiveFromISR>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b01      	cmp	r3, #1
 80150ca:	d001      	beq.n	80150d0 <osMutexRelease+0x30>
      return osErrorOS;
 80150cc:	23ff      	movs	r3, #255	; 0xff
 80150ce:	e017      	b.n	8015100 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80150d0:	68bb      	ldr	r3, [r7, #8]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d013      	beq.n	80150fe <osMutexRelease+0x5e>
 80150d6:	4b0c      	ldr	r3, [pc, #48]	; (8015108 <osMutexRelease+0x68>)
 80150d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150dc:	601a      	str	r2, [r3, #0]
 80150de:	f3bf 8f4f 	dsb	sy
 80150e2:	f3bf 8f6f 	isb	sy
 80150e6:	e00a      	b.n	80150fe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80150e8:	2300      	movs	r3, #0
 80150ea:	2200      	movs	r2, #0
 80150ec:	2100      	movs	r1, #0
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f000 fa82 	bl	80155f8 <xQueueGenericSend>
 80150f4:	4603      	mov	r3, r0
 80150f6:	2b01      	cmp	r3, #1
 80150f8:	d001      	beq.n	80150fe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80150fa:	23ff      	movs	r3, #255	; 0xff
 80150fc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80150fe:	68fb      	ldr	r3, [r7, #12]
}
 8015100:	4618      	mov	r0, r3
 8015102:	3710      	adds	r7, #16
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}
 8015108:	e000ed04 	.word	0xe000ed04

0801510c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801510c:	b590      	push	{r4, r7, lr}
 801510e:	b085      	sub	sp, #20
 8015110:	af02      	add	r7, sp, #8
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	689b      	ldr	r3, [r3, #8]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d011      	beq.n	8015142 <osMessageCreate+0x36>
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	68db      	ldr	r3, [r3, #12]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d00d      	beq.n	8015142 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	6818      	ldr	r0, [r3, #0]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6859      	ldr	r1, [r3, #4]
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	689a      	ldr	r2, [r3, #8]
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	68db      	ldr	r3, [r3, #12]
 8015136:	2400      	movs	r4, #0
 8015138:	9400      	str	r4, [sp, #0]
 801513a:	f000 f939 	bl	80153b0 <xQueueGenericCreateStatic>
 801513e:	4603      	mov	r3, r0
 8015140:	e008      	b.n	8015154 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	6818      	ldr	r0, [r3, #0]
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	685b      	ldr	r3, [r3, #4]
 801514a:	2200      	movs	r2, #0
 801514c:	4619      	mov	r1, r3
 801514e:	f000 f9a7 	bl	80154a0 <xQueueGenericCreate>
 8015152:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8015154:	4618      	mov	r0, r3
 8015156:	370c      	adds	r7, #12
 8015158:	46bd      	mov	sp, r7
 801515a:	bd90      	pop	{r4, r7, pc}

0801515c <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 8015160:	f001 fae0 	bl	8016724 <vTaskSuspendAll>
  
  return osOK;
 8015164:	2300      	movs	r3, #0
}
 8015166:	4618      	mov	r0, r3
 8015168:	bd80      	pop	{r7, pc}

0801516a <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 801516a:	b580      	push	{r7, lr}
 801516c:	af00      	add	r7, sp, #0
  if (xTaskResumeAll() == pdTRUE)
 801516e:	f001 fae7 	bl	8016740 <xTaskResumeAll>
 8015172:	4603      	mov	r3, r0
 8015174:	2b01      	cmp	r3, #1
 8015176:	d101      	bne.n	801517c <osThreadResumeAll+0x12>
    return osOK;
 8015178:	2300      	movs	r3, #0
 801517a:	e000      	b.n	801517e <osThreadResumeAll+0x14>
  else
    return osErrorOS;
 801517c:	23ff      	movs	r3, #255	; 0xff
  
}
 801517e:	4618      	mov	r0, r3
 8015180:	bd80      	pop	{r7, pc}

08015182 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015182:	b480      	push	{r7}
 8015184:	b083      	sub	sp, #12
 8015186:	af00      	add	r7, sp, #0
 8015188:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	f103 0208 	add.w	r2, r3, #8
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f04f 32ff 	mov.w	r2, #4294967295
 801519a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	f103 0208 	add.w	r2, r3, #8
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	f103 0208 	add.w	r2, r3, #8
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2200      	movs	r2, #0
 80151b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80151b6:	bf00      	nop
 80151b8:	370c      	adds	r7, #12
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bc80      	pop	{r7}
 80151be:	4770      	bx	lr

080151c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80151c0:	b480      	push	{r7}
 80151c2:	b083      	sub	sp, #12
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2200      	movs	r2, #0
 80151cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80151ce:	bf00      	nop
 80151d0:	370c      	adds	r7, #12
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bc80      	pop	{r7}
 80151d6:	4770      	bx	lr

080151d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80151d8:	b480      	push	{r7}
 80151da:	b085      	sub	sp, #20
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
 80151e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	685b      	ldr	r3, [r3, #4]
 80151e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	68fa      	ldr	r2, [r7, #12]
 80151ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	689a      	ldr	r2, [r3, #8]
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	689b      	ldr	r3, [r3, #8]
 80151fa:	683a      	ldr	r2, [r7, #0]
 80151fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	683a      	ldr	r2, [r7, #0]
 8015202:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	687a      	ldr	r2, [r7, #4]
 8015208:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	1c5a      	adds	r2, r3, #1
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	601a      	str	r2, [r3, #0]
}
 8015214:	bf00      	nop
 8015216:	3714      	adds	r7, #20
 8015218:	46bd      	mov	sp, r7
 801521a:	bc80      	pop	{r7}
 801521c:	4770      	bx	lr

0801521e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801521e:	b480      	push	{r7}
 8015220:	b085      	sub	sp, #20
 8015222:	af00      	add	r7, sp, #0
 8015224:	6078      	str	r0, [r7, #4]
 8015226:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801522e:	68bb      	ldr	r3, [r7, #8]
 8015230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015234:	d103      	bne.n	801523e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	691b      	ldr	r3, [r3, #16]
 801523a:	60fb      	str	r3, [r7, #12]
 801523c:	e00c      	b.n	8015258 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	3308      	adds	r3, #8
 8015242:	60fb      	str	r3, [r7, #12]
 8015244:	e002      	b.n	801524c <vListInsert+0x2e>
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	60fb      	str	r3, [r7, #12]
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	68ba      	ldr	r2, [r7, #8]
 8015254:	429a      	cmp	r2, r3
 8015256:	d2f6      	bcs.n	8015246 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	685a      	ldr	r2, [r3, #4]
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	685b      	ldr	r3, [r3, #4]
 8015264:	683a      	ldr	r2, [r7, #0]
 8015266:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	68fa      	ldr	r2, [r7, #12]
 801526c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	683a      	ldr	r2, [r7, #0]
 8015272:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	687a      	ldr	r2, [r7, #4]
 8015278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	1c5a      	adds	r2, r3, #1
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	601a      	str	r2, [r3, #0]
}
 8015284:	bf00      	nop
 8015286:	3714      	adds	r7, #20
 8015288:	46bd      	mov	sp, r7
 801528a:	bc80      	pop	{r7}
 801528c:	4770      	bx	lr

0801528e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801528e:	b480      	push	{r7}
 8015290:	b085      	sub	sp, #20
 8015292:	af00      	add	r7, sp, #0
 8015294:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	691b      	ldr	r3, [r3, #16]
 801529a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	685b      	ldr	r3, [r3, #4]
 80152a0:	687a      	ldr	r2, [r7, #4]
 80152a2:	6892      	ldr	r2, [r2, #8]
 80152a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	689b      	ldr	r3, [r3, #8]
 80152aa:	687a      	ldr	r2, [r7, #4]
 80152ac:	6852      	ldr	r2, [r2, #4]
 80152ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	685b      	ldr	r3, [r3, #4]
 80152b4:	687a      	ldr	r2, [r7, #4]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d103      	bne.n	80152c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	689a      	ldr	r2, [r3, #8]
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2200      	movs	r2, #0
 80152c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	1e5a      	subs	r2, r3, #1
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	681b      	ldr	r3, [r3, #0]
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3714      	adds	r7, #20
 80152da:	46bd      	mov	sp, r7
 80152dc:	bc80      	pop	{r7}
 80152de:	4770      	bx	lr

080152e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b084      	sub	sp, #16
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
 80152e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d10a      	bne.n	801530a <xQueueGenericReset+0x2a>
	__asm volatile
 80152f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f8:	f383 8811 	msr	BASEPRI, r3
 80152fc:	f3bf 8f6f 	isb	sy
 8015300:	f3bf 8f4f 	dsb	sy
 8015304:	60bb      	str	r3, [r7, #8]
}
 8015306:	bf00      	nop
 8015308:	e7fe      	b.n	8015308 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801530a:	f002 fc6f 	bl	8017bec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	681a      	ldr	r2, [r3, #0]
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015316:	68f9      	ldr	r1, [r7, #12]
 8015318:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801531a:	fb01 f303 	mul.w	r3, r1, r3
 801531e:	441a      	add	r2, r3
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	2200      	movs	r2, #0
 8015328:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	681a      	ldr	r2, [r3, #0]
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	681a      	ldr	r2, [r3, #0]
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801533a:	3b01      	subs	r3, #1
 801533c:	68f9      	ldr	r1, [r7, #12]
 801533e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015340:	fb01 f303 	mul.w	r3, r1, r3
 8015344:	441a      	add	r2, r3
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	22ff      	movs	r2, #255	; 0xff
 801534e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	22ff      	movs	r2, #255	; 0xff
 8015356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d114      	bne.n	801538a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	691b      	ldr	r3, [r3, #16]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d01a      	beq.n	801539e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	3310      	adds	r3, #16
 801536c:	4618      	mov	r0, r3
 801536e:	f001 fc21 	bl	8016bb4 <xTaskRemoveFromEventList>
 8015372:	4603      	mov	r3, r0
 8015374:	2b00      	cmp	r3, #0
 8015376:	d012      	beq.n	801539e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015378:	4b0c      	ldr	r3, [pc, #48]	; (80153ac <xQueueGenericReset+0xcc>)
 801537a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801537e:	601a      	str	r2, [r3, #0]
 8015380:	f3bf 8f4f 	dsb	sy
 8015384:	f3bf 8f6f 	isb	sy
 8015388:	e009      	b.n	801539e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	3310      	adds	r3, #16
 801538e:	4618      	mov	r0, r3
 8015390:	f7ff fef7 	bl	8015182 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	3324      	adds	r3, #36	; 0x24
 8015398:	4618      	mov	r0, r3
 801539a:	f7ff fef2 	bl	8015182 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801539e:	f002 fc55 	bl	8017c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80153a2:	2301      	movs	r3, #1
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3710      	adds	r7, #16
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}
 80153ac:	e000ed04 	.word	0xe000ed04

080153b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b08e      	sub	sp, #56	; 0x38
 80153b4:	af02      	add	r7, sp, #8
 80153b6:	60f8      	str	r0, [r7, #12]
 80153b8:	60b9      	str	r1, [r7, #8]
 80153ba:	607a      	str	r2, [r7, #4]
 80153bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d10a      	bne.n	80153da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80153c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c8:	f383 8811 	msr	BASEPRI, r3
 80153cc:	f3bf 8f6f 	isb	sy
 80153d0:	f3bf 8f4f 	dsb	sy
 80153d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80153d6:	bf00      	nop
 80153d8:	e7fe      	b.n	80153d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d10a      	bne.n	80153f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80153e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e4:	f383 8811 	msr	BASEPRI, r3
 80153e8:	f3bf 8f6f 	isb	sy
 80153ec:	f3bf 8f4f 	dsb	sy
 80153f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80153f2:	bf00      	nop
 80153f4:	e7fe      	b.n	80153f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d002      	beq.n	8015402 <xQueueGenericCreateStatic+0x52>
 80153fc:	68bb      	ldr	r3, [r7, #8]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d001      	beq.n	8015406 <xQueueGenericCreateStatic+0x56>
 8015402:	2301      	movs	r3, #1
 8015404:	e000      	b.n	8015408 <xQueueGenericCreateStatic+0x58>
 8015406:	2300      	movs	r3, #0
 8015408:	2b00      	cmp	r3, #0
 801540a:	d10a      	bne.n	8015422 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015410:	f383 8811 	msr	BASEPRI, r3
 8015414:	f3bf 8f6f 	isb	sy
 8015418:	f3bf 8f4f 	dsb	sy
 801541c:	623b      	str	r3, [r7, #32]
}
 801541e:	bf00      	nop
 8015420:	e7fe      	b.n	8015420 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d102      	bne.n	801542e <xQueueGenericCreateStatic+0x7e>
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d101      	bne.n	8015432 <xQueueGenericCreateStatic+0x82>
 801542e:	2301      	movs	r3, #1
 8015430:	e000      	b.n	8015434 <xQueueGenericCreateStatic+0x84>
 8015432:	2300      	movs	r3, #0
 8015434:	2b00      	cmp	r3, #0
 8015436:	d10a      	bne.n	801544e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801543c:	f383 8811 	msr	BASEPRI, r3
 8015440:	f3bf 8f6f 	isb	sy
 8015444:	f3bf 8f4f 	dsb	sy
 8015448:	61fb      	str	r3, [r7, #28]
}
 801544a:	bf00      	nop
 801544c:	e7fe      	b.n	801544c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801544e:	2348      	movs	r3, #72	; 0x48
 8015450:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	2b48      	cmp	r3, #72	; 0x48
 8015456:	d00a      	beq.n	801546e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801545c:	f383 8811 	msr	BASEPRI, r3
 8015460:	f3bf 8f6f 	isb	sy
 8015464:	f3bf 8f4f 	dsb	sy
 8015468:	61bb      	str	r3, [r7, #24]
}
 801546a:	bf00      	nop
 801546c:	e7fe      	b.n	801546c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801546e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015476:	2b00      	cmp	r3, #0
 8015478:	d00d      	beq.n	8015496 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801547c:	2201      	movs	r2, #1
 801547e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015482:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015488:	9300      	str	r3, [sp, #0]
 801548a:	4613      	mov	r3, r2
 801548c:	687a      	ldr	r2, [r7, #4]
 801548e:	68b9      	ldr	r1, [r7, #8]
 8015490:	68f8      	ldr	r0, [r7, #12]
 8015492:	f000 f845 	bl	8015520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015498:	4618      	mov	r0, r3
 801549a:	3730      	adds	r7, #48	; 0x30
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}

080154a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b08a      	sub	sp, #40	; 0x28
 80154a4:	af02      	add	r7, sp, #8
 80154a6:	60f8      	str	r0, [r7, #12]
 80154a8:	60b9      	str	r1, [r7, #8]
 80154aa:	4613      	mov	r3, r2
 80154ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d10a      	bne.n	80154ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80154b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b8:	f383 8811 	msr	BASEPRI, r3
 80154bc:	f3bf 8f6f 	isb	sy
 80154c0:	f3bf 8f4f 	dsb	sy
 80154c4:	613b      	str	r3, [r7, #16]
}
 80154c6:	bf00      	nop
 80154c8:	e7fe      	b.n	80154c8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80154ca:	68bb      	ldr	r3, [r7, #8]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d102      	bne.n	80154d6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80154d0:	2300      	movs	r3, #0
 80154d2:	61fb      	str	r3, [r7, #28]
 80154d4:	e004      	b.n	80154e0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	68ba      	ldr	r2, [r7, #8]
 80154da:	fb02 f303 	mul.w	r3, r2, r3
 80154de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80154e0:	69fb      	ldr	r3, [r7, #28]
 80154e2:	3348      	adds	r3, #72	; 0x48
 80154e4:	4618      	mov	r0, r3
 80154e6:	f002 fc81 	bl	8017dec <pvPortMalloc>
 80154ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80154ec:	69bb      	ldr	r3, [r7, #24]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d011      	beq.n	8015516 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80154f2:	69bb      	ldr	r3, [r7, #24]
 80154f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80154f6:	697b      	ldr	r3, [r7, #20]
 80154f8:	3348      	adds	r3, #72	; 0x48
 80154fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80154fc:	69bb      	ldr	r3, [r7, #24]
 80154fe:	2200      	movs	r2, #0
 8015500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015504:	79fa      	ldrb	r2, [r7, #7]
 8015506:	69bb      	ldr	r3, [r7, #24]
 8015508:	9300      	str	r3, [sp, #0]
 801550a:	4613      	mov	r3, r2
 801550c:	697a      	ldr	r2, [r7, #20]
 801550e:	68b9      	ldr	r1, [r7, #8]
 8015510:	68f8      	ldr	r0, [r7, #12]
 8015512:	f000 f805 	bl	8015520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015516:	69bb      	ldr	r3, [r7, #24]
	}
 8015518:	4618      	mov	r0, r3
 801551a:	3720      	adds	r7, #32
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}

08015520 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b084      	sub	sp, #16
 8015524:	af00      	add	r7, sp, #0
 8015526:	60f8      	str	r0, [r7, #12]
 8015528:	60b9      	str	r1, [r7, #8]
 801552a:	607a      	str	r2, [r7, #4]
 801552c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d103      	bne.n	801553c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015534:	69bb      	ldr	r3, [r7, #24]
 8015536:	69ba      	ldr	r2, [r7, #24]
 8015538:	601a      	str	r2, [r3, #0]
 801553a:	e002      	b.n	8015542 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801553c:	69bb      	ldr	r3, [r7, #24]
 801553e:	687a      	ldr	r2, [r7, #4]
 8015540:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015542:	69bb      	ldr	r3, [r7, #24]
 8015544:	68fa      	ldr	r2, [r7, #12]
 8015546:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015548:	69bb      	ldr	r3, [r7, #24]
 801554a:	68ba      	ldr	r2, [r7, #8]
 801554c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801554e:	2101      	movs	r1, #1
 8015550:	69b8      	ldr	r0, [r7, #24]
 8015552:	f7ff fec5 	bl	80152e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015556:	bf00      	nop
 8015558:	3710      	adds	r7, #16
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}

0801555e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801555e:	b580      	push	{r7, lr}
 8015560:	b082      	sub	sp, #8
 8015562:	af00      	add	r7, sp, #0
 8015564:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d00e      	beq.n	801558a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2200      	movs	r2, #0
 8015570:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	2200      	movs	r2, #0
 8015576:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2200      	movs	r2, #0
 801557c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801557e:	2300      	movs	r3, #0
 8015580:	2200      	movs	r2, #0
 8015582:	2100      	movs	r1, #0
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f000 f837 	bl	80155f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801558a:	bf00      	nop
 801558c:	3708      	adds	r7, #8
 801558e:	46bd      	mov	sp, r7
 8015590:	bd80      	pop	{r7, pc}

08015592 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015592:	b580      	push	{r7, lr}
 8015594:	b086      	sub	sp, #24
 8015596:	af00      	add	r7, sp, #0
 8015598:	4603      	mov	r3, r0
 801559a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801559c:	2301      	movs	r3, #1
 801559e:	617b      	str	r3, [r7, #20]
 80155a0:	2300      	movs	r3, #0
 80155a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80155a4:	79fb      	ldrb	r3, [r7, #7]
 80155a6:	461a      	mov	r2, r3
 80155a8:	6939      	ldr	r1, [r7, #16]
 80155aa:	6978      	ldr	r0, [r7, #20]
 80155ac:	f7ff ff78 	bl	80154a0 <xQueueGenericCreate>
 80155b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80155b2:	68f8      	ldr	r0, [r7, #12]
 80155b4:	f7ff ffd3 	bl	801555e <prvInitialiseMutex>

		return xNewQueue;
 80155b8:	68fb      	ldr	r3, [r7, #12]
	}
 80155ba:	4618      	mov	r0, r3
 80155bc:	3718      	adds	r7, #24
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80155c2:	b580      	push	{r7, lr}
 80155c4:	b088      	sub	sp, #32
 80155c6:	af02      	add	r7, sp, #8
 80155c8:	4603      	mov	r3, r0
 80155ca:	6039      	str	r1, [r7, #0]
 80155cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80155ce:	2301      	movs	r3, #1
 80155d0:	617b      	str	r3, [r7, #20]
 80155d2:	2300      	movs	r3, #0
 80155d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80155d6:	79fb      	ldrb	r3, [r7, #7]
 80155d8:	9300      	str	r3, [sp, #0]
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	2200      	movs	r2, #0
 80155de:	6939      	ldr	r1, [r7, #16]
 80155e0:	6978      	ldr	r0, [r7, #20]
 80155e2:	f7ff fee5 	bl	80153b0 <xQueueGenericCreateStatic>
 80155e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80155e8:	68f8      	ldr	r0, [r7, #12]
 80155ea:	f7ff ffb8 	bl	801555e <prvInitialiseMutex>

		return xNewQueue;
 80155ee:	68fb      	ldr	r3, [r7, #12]
	}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3718      	adds	r7, #24
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b08e      	sub	sp, #56	; 0x38
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	60f8      	str	r0, [r7, #12]
 8015600:	60b9      	str	r1, [r7, #8]
 8015602:	607a      	str	r2, [r7, #4]
 8015604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015606:	2300      	movs	r3, #0
 8015608:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015610:	2b00      	cmp	r3, #0
 8015612:	d10a      	bne.n	801562a <xQueueGenericSend+0x32>
	__asm volatile
 8015614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015618:	f383 8811 	msr	BASEPRI, r3
 801561c:	f3bf 8f6f 	isb	sy
 8015620:	f3bf 8f4f 	dsb	sy
 8015624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015626:	bf00      	nop
 8015628:	e7fe      	b.n	8015628 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d103      	bne.n	8015638 <xQueueGenericSend+0x40>
 8015630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015634:	2b00      	cmp	r3, #0
 8015636:	d101      	bne.n	801563c <xQueueGenericSend+0x44>
 8015638:	2301      	movs	r3, #1
 801563a:	e000      	b.n	801563e <xQueueGenericSend+0x46>
 801563c:	2300      	movs	r3, #0
 801563e:	2b00      	cmp	r3, #0
 8015640:	d10a      	bne.n	8015658 <xQueueGenericSend+0x60>
	__asm volatile
 8015642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015646:	f383 8811 	msr	BASEPRI, r3
 801564a:	f3bf 8f6f 	isb	sy
 801564e:	f3bf 8f4f 	dsb	sy
 8015652:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015654:	bf00      	nop
 8015656:	e7fe      	b.n	8015656 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	2b02      	cmp	r3, #2
 801565c:	d103      	bne.n	8015666 <xQueueGenericSend+0x6e>
 801565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015662:	2b01      	cmp	r3, #1
 8015664:	d101      	bne.n	801566a <xQueueGenericSend+0x72>
 8015666:	2301      	movs	r3, #1
 8015668:	e000      	b.n	801566c <xQueueGenericSend+0x74>
 801566a:	2300      	movs	r3, #0
 801566c:	2b00      	cmp	r3, #0
 801566e:	d10a      	bne.n	8015686 <xQueueGenericSend+0x8e>
	__asm volatile
 8015670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015674:	f383 8811 	msr	BASEPRI, r3
 8015678:	f3bf 8f6f 	isb	sy
 801567c:	f3bf 8f4f 	dsb	sy
 8015680:	623b      	str	r3, [r7, #32]
}
 8015682:	bf00      	nop
 8015684:	e7fe      	b.n	8015684 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015686:	f001 fc57 	bl	8016f38 <xTaskGetSchedulerState>
 801568a:	4603      	mov	r3, r0
 801568c:	2b00      	cmp	r3, #0
 801568e:	d102      	bne.n	8015696 <xQueueGenericSend+0x9e>
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d101      	bne.n	801569a <xQueueGenericSend+0xa2>
 8015696:	2301      	movs	r3, #1
 8015698:	e000      	b.n	801569c <xQueueGenericSend+0xa4>
 801569a:	2300      	movs	r3, #0
 801569c:	2b00      	cmp	r3, #0
 801569e:	d10a      	bne.n	80156b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80156a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156a4:	f383 8811 	msr	BASEPRI, r3
 80156a8:	f3bf 8f6f 	isb	sy
 80156ac:	f3bf 8f4f 	dsb	sy
 80156b0:	61fb      	str	r3, [r7, #28]
}
 80156b2:	bf00      	nop
 80156b4:	e7fe      	b.n	80156b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80156b6:	f002 fa99 	bl	8017bec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80156ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80156be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d302      	bcc.n	80156cc <xQueueGenericSend+0xd4>
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	2b02      	cmp	r3, #2
 80156ca:	d129      	bne.n	8015720 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80156cc:	683a      	ldr	r2, [r7, #0]
 80156ce:	68b9      	ldr	r1, [r7, #8]
 80156d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156d2:	f000 fc38 	bl	8015f46 <prvCopyDataToQueue>
 80156d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80156d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d010      	beq.n	8015702 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80156e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e2:	3324      	adds	r3, #36	; 0x24
 80156e4:	4618      	mov	r0, r3
 80156e6:	f001 fa65 	bl	8016bb4 <xTaskRemoveFromEventList>
 80156ea:	4603      	mov	r3, r0
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d013      	beq.n	8015718 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80156f0:	4b3f      	ldr	r3, [pc, #252]	; (80157f0 <xQueueGenericSend+0x1f8>)
 80156f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156f6:	601a      	str	r2, [r3, #0]
 80156f8:	f3bf 8f4f 	dsb	sy
 80156fc:	f3bf 8f6f 	isb	sy
 8015700:	e00a      	b.n	8015718 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015704:	2b00      	cmp	r3, #0
 8015706:	d007      	beq.n	8015718 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015708:	4b39      	ldr	r3, [pc, #228]	; (80157f0 <xQueueGenericSend+0x1f8>)
 801570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801570e:	601a      	str	r2, [r3, #0]
 8015710:	f3bf 8f4f 	dsb	sy
 8015714:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015718:	f002 fa98 	bl	8017c4c <vPortExitCritical>
				return pdPASS;
 801571c:	2301      	movs	r3, #1
 801571e:	e063      	b.n	80157e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d103      	bne.n	801572e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015726:	f002 fa91 	bl	8017c4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801572a:	2300      	movs	r3, #0
 801572c:	e05c      	b.n	80157e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015730:	2b00      	cmp	r3, #0
 8015732:	d106      	bne.n	8015742 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015734:	f107 0314 	add.w	r3, r7, #20
 8015738:	4618      	mov	r0, r3
 801573a:	f001 fa9d 	bl	8016c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801573e:	2301      	movs	r3, #1
 8015740:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015742:	f002 fa83 	bl	8017c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015746:	f000 ffed 	bl	8016724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801574a:	f002 fa4f 	bl	8017bec <vPortEnterCritical>
 801574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015754:	b25b      	sxtb	r3, r3
 8015756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801575a:	d103      	bne.n	8015764 <xQueueGenericSend+0x16c>
 801575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575e:	2200      	movs	r2, #0
 8015760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801576a:	b25b      	sxtb	r3, r3
 801576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015770:	d103      	bne.n	801577a <xQueueGenericSend+0x182>
 8015772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015774:	2200      	movs	r2, #0
 8015776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801577a:	f002 fa67 	bl	8017c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801577e:	1d3a      	adds	r2, r7, #4
 8015780:	f107 0314 	add.w	r3, r7, #20
 8015784:	4611      	mov	r1, r2
 8015786:	4618      	mov	r0, r3
 8015788:	f001 fa8c 	bl	8016ca4 <xTaskCheckForTimeOut>
 801578c:	4603      	mov	r3, r0
 801578e:	2b00      	cmp	r3, #0
 8015790:	d124      	bne.n	80157dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015794:	f000 fccf 	bl	8016136 <prvIsQueueFull>
 8015798:	4603      	mov	r3, r0
 801579a:	2b00      	cmp	r3, #0
 801579c:	d018      	beq.n	80157d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157a0:	3310      	adds	r3, #16
 80157a2:	687a      	ldr	r2, [r7, #4]
 80157a4:	4611      	mov	r1, r2
 80157a6:	4618      	mov	r0, r3
 80157a8:	f001 f9b4 	bl	8016b14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80157ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157ae:	f000 fc5a 	bl	8016066 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80157b2:	f000 ffc5 	bl	8016740 <xTaskResumeAll>
 80157b6:	4603      	mov	r3, r0
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	f47f af7c 	bne.w	80156b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80157be:	4b0c      	ldr	r3, [pc, #48]	; (80157f0 <xQueueGenericSend+0x1f8>)
 80157c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157c4:	601a      	str	r2, [r3, #0]
 80157c6:	f3bf 8f4f 	dsb	sy
 80157ca:	f3bf 8f6f 	isb	sy
 80157ce:	e772      	b.n	80156b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80157d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157d2:	f000 fc48 	bl	8016066 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80157d6:	f000 ffb3 	bl	8016740 <xTaskResumeAll>
 80157da:	e76c      	b.n	80156b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80157dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157de:	f000 fc42 	bl	8016066 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80157e2:	f000 ffad 	bl	8016740 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80157e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3738      	adds	r7, #56	; 0x38
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	e000ed04 	.word	0xe000ed04

080157f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b08e      	sub	sp, #56	; 0x38
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	60f8      	str	r0, [r7, #12]
 80157fc:	60b9      	str	r1, [r7, #8]
 80157fe:	607a      	str	r2, [r7, #4]
 8015800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015808:	2b00      	cmp	r3, #0
 801580a:	d10a      	bne.n	8015822 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015810:	f383 8811 	msr	BASEPRI, r3
 8015814:	f3bf 8f6f 	isb	sy
 8015818:	f3bf 8f4f 	dsb	sy
 801581c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801581e:	bf00      	nop
 8015820:	e7fe      	b.n	8015820 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d103      	bne.n	8015830 <xQueueGenericSendFromISR+0x3c>
 8015828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801582c:	2b00      	cmp	r3, #0
 801582e:	d101      	bne.n	8015834 <xQueueGenericSendFromISR+0x40>
 8015830:	2301      	movs	r3, #1
 8015832:	e000      	b.n	8015836 <xQueueGenericSendFromISR+0x42>
 8015834:	2300      	movs	r3, #0
 8015836:	2b00      	cmp	r3, #0
 8015838:	d10a      	bne.n	8015850 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801583e:	f383 8811 	msr	BASEPRI, r3
 8015842:	f3bf 8f6f 	isb	sy
 8015846:	f3bf 8f4f 	dsb	sy
 801584a:	623b      	str	r3, [r7, #32]
}
 801584c:	bf00      	nop
 801584e:	e7fe      	b.n	801584e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015850:	683b      	ldr	r3, [r7, #0]
 8015852:	2b02      	cmp	r3, #2
 8015854:	d103      	bne.n	801585e <xQueueGenericSendFromISR+0x6a>
 8015856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801585a:	2b01      	cmp	r3, #1
 801585c:	d101      	bne.n	8015862 <xQueueGenericSendFromISR+0x6e>
 801585e:	2301      	movs	r3, #1
 8015860:	e000      	b.n	8015864 <xQueueGenericSendFromISR+0x70>
 8015862:	2300      	movs	r3, #0
 8015864:	2b00      	cmp	r3, #0
 8015866:	d10a      	bne.n	801587e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801586c:	f383 8811 	msr	BASEPRI, r3
 8015870:	f3bf 8f6f 	isb	sy
 8015874:	f3bf 8f4f 	dsb	sy
 8015878:	61fb      	str	r3, [r7, #28]
}
 801587a:	bf00      	nop
 801587c:	e7fe      	b.n	801587c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801587e:	f002 fa77 	bl	8017d70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015882:	f3ef 8211 	mrs	r2, BASEPRI
 8015886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801588a:	f383 8811 	msr	BASEPRI, r3
 801588e:	f3bf 8f6f 	isb	sy
 8015892:	f3bf 8f4f 	dsb	sy
 8015896:	61ba      	str	r2, [r7, #24]
 8015898:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801589a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801589c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80158a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d302      	bcc.n	80158b0 <xQueueGenericSendFromISR+0xbc>
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	2b02      	cmp	r3, #2
 80158ae:	d12c      	bne.n	801590a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80158b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80158b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80158ba:	683a      	ldr	r2, [r7, #0]
 80158bc:	68b9      	ldr	r1, [r7, #8]
 80158be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158c0:	f000 fb41 	bl	8015f46 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80158c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80158c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158cc:	d112      	bne.n	80158f4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d016      	beq.n	8015904 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d8:	3324      	adds	r3, #36	; 0x24
 80158da:	4618      	mov	r0, r3
 80158dc:	f001 f96a 	bl	8016bb4 <xTaskRemoveFromEventList>
 80158e0:	4603      	mov	r3, r0
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d00e      	beq.n	8015904 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d00b      	beq.n	8015904 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2201      	movs	r2, #1
 80158f0:	601a      	str	r2, [r3, #0]
 80158f2:	e007      	b.n	8015904 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80158f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80158f8:	3301      	adds	r3, #1
 80158fa:	b2db      	uxtb	r3, r3
 80158fc:	b25a      	sxtb	r2, r3
 80158fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015904:	2301      	movs	r3, #1
 8015906:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015908:	e001      	b.n	801590e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801590a:	2300      	movs	r3, #0
 801590c:	637b      	str	r3, [r7, #52]	; 0x34
 801590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015910:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015912:	693b      	ldr	r3, [r7, #16]
 8015914:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015918:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801591c:	4618      	mov	r0, r3
 801591e:	3738      	adds	r7, #56	; 0x38
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b08e      	sub	sp, #56	; 0x38
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015934:	2b00      	cmp	r3, #0
 8015936:	d10a      	bne.n	801594e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801593c:	f383 8811 	msr	BASEPRI, r3
 8015940:	f3bf 8f6f 	isb	sy
 8015944:	f3bf 8f4f 	dsb	sy
 8015948:	623b      	str	r3, [r7, #32]
}
 801594a:	bf00      	nop
 801594c:	e7fe      	b.n	801594c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015952:	2b00      	cmp	r3, #0
 8015954:	d00a      	beq.n	801596c <xQueueGiveFromISR+0x48>
	__asm volatile
 8015956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801595a:	f383 8811 	msr	BASEPRI, r3
 801595e:	f3bf 8f6f 	isb	sy
 8015962:	f3bf 8f4f 	dsb	sy
 8015966:	61fb      	str	r3, [r7, #28]
}
 8015968:	bf00      	nop
 801596a:	e7fe      	b.n	801596a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d103      	bne.n	801597c <xQueueGiveFromISR+0x58>
 8015974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015976:	689b      	ldr	r3, [r3, #8]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d101      	bne.n	8015980 <xQueueGiveFromISR+0x5c>
 801597c:	2301      	movs	r3, #1
 801597e:	e000      	b.n	8015982 <xQueueGiveFromISR+0x5e>
 8015980:	2300      	movs	r3, #0
 8015982:	2b00      	cmp	r3, #0
 8015984:	d10a      	bne.n	801599c <xQueueGiveFromISR+0x78>
	__asm volatile
 8015986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801598a:	f383 8811 	msr	BASEPRI, r3
 801598e:	f3bf 8f6f 	isb	sy
 8015992:	f3bf 8f4f 	dsb	sy
 8015996:	61bb      	str	r3, [r7, #24]
}
 8015998:	bf00      	nop
 801599a:	e7fe      	b.n	801599a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801599c:	f002 f9e8 	bl	8017d70 <vPortValidateInterruptPriority>
	__asm volatile
 80159a0:	f3ef 8211 	mrs	r2, BASEPRI
 80159a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a8:	f383 8811 	msr	BASEPRI, r3
 80159ac:	f3bf 8f6f 	isb	sy
 80159b0:	f3bf 8f4f 	dsb	sy
 80159b4:	617a      	str	r2, [r7, #20]
 80159b6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80159b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80159ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80159bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80159c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80159c8:	429a      	cmp	r2, r3
 80159ca:	d22b      	bcs.n	8015a24 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80159cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80159d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80159d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d8:	1c5a      	adds	r2, r3, #1
 80159da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80159de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80159e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159e6:	d112      	bne.n	8015a0e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80159e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d016      	beq.n	8015a1e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80159f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f2:	3324      	adds	r3, #36	; 0x24
 80159f4:	4618      	mov	r0, r3
 80159f6:	f001 f8dd 	bl	8016bb4 <xTaskRemoveFromEventList>
 80159fa:	4603      	mov	r3, r0
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d00e      	beq.n	8015a1e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d00b      	beq.n	8015a1e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	2201      	movs	r2, #1
 8015a0a:	601a      	str	r2, [r3, #0]
 8015a0c:	e007      	b.n	8015a1e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a12:	3301      	adds	r3, #1
 8015a14:	b2db      	uxtb	r3, r3
 8015a16:	b25a      	sxtb	r2, r3
 8015a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015a1e:	2301      	movs	r3, #1
 8015a20:	637b      	str	r3, [r7, #52]	; 0x34
 8015a22:	e001      	b.n	8015a28 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015a24:	2300      	movs	r3, #0
 8015a26:	637b      	str	r3, [r7, #52]	; 0x34
 8015a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	f383 8811 	msr	BASEPRI, r3
}
 8015a32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015a36:	4618      	mov	r0, r3
 8015a38:	3738      	adds	r7, #56	; 0x38
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bd80      	pop	{r7, pc}
	...

08015a40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b08c      	sub	sp, #48	; 0x30
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	60f8      	str	r0, [r7, #12]
 8015a48:	60b9      	str	r1, [r7, #8]
 8015a4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d10a      	bne.n	8015a70 <xQueueReceive+0x30>
	__asm volatile
 8015a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a5e:	f383 8811 	msr	BASEPRI, r3
 8015a62:	f3bf 8f6f 	isb	sy
 8015a66:	f3bf 8f4f 	dsb	sy
 8015a6a:	623b      	str	r3, [r7, #32]
}
 8015a6c:	bf00      	nop
 8015a6e:	e7fe      	b.n	8015a6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d103      	bne.n	8015a7e <xQueueReceive+0x3e>
 8015a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d101      	bne.n	8015a82 <xQueueReceive+0x42>
 8015a7e:	2301      	movs	r3, #1
 8015a80:	e000      	b.n	8015a84 <xQueueReceive+0x44>
 8015a82:	2300      	movs	r3, #0
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d10a      	bne.n	8015a9e <xQueueReceive+0x5e>
	__asm volatile
 8015a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a8c:	f383 8811 	msr	BASEPRI, r3
 8015a90:	f3bf 8f6f 	isb	sy
 8015a94:	f3bf 8f4f 	dsb	sy
 8015a98:	61fb      	str	r3, [r7, #28]
}
 8015a9a:	bf00      	nop
 8015a9c:	e7fe      	b.n	8015a9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a9e:	f001 fa4b 	bl	8016f38 <xTaskGetSchedulerState>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d102      	bne.n	8015aae <xQueueReceive+0x6e>
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d101      	bne.n	8015ab2 <xQueueReceive+0x72>
 8015aae:	2301      	movs	r3, #1
 8015ab0:	e000      	b.n	8015ab4 <xQueueReceive+0x74>
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d10a      	bne.n	8015ace <xQueueReceive+0x8e>
	__asm volatile
 8015ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015abc:	f383 8811 	msr	BASEPRI, r3
 8015ac0:	f3bf 8f6f 	isb	sy
 8015ac4:	f3bf 8f4f 	dsb	sy
 8015ac8:	61bb      	str	r3, [r7, #24]
}
 8015aca:	bf00      	nop
 8015acc:	e7fe      	b.n	8015acc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015ace:	f002 f88d 	bl	8017bec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ad6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d01f      	beq.n	8015b1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015ade:	68b9      	ldr	r1, [r7, #8]
 8015ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ae2:	f000 fa9a 	bl	801601a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ae8:	1e5a      	subs	r2, r3, #1
 8015aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af0:	691b      	ldr	r3, [r3, #16]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d00f      	beq.n	8015b16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015af8:	3310      	adds	r3, #16
 8015afa:	4618      	mov	r0, r3
 8015afc:	f001 f85a 	bl	8016bb4 <xTaskRemoveFromEventList>
 8015b00:	4603      	mov	r3, r0
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d007      	beq.n	8015b16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015b06:	4b3d      	ldr	r3, [pc, #244]	; (8015bfc <xQueueReceive+0x1bc>)
 8015b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b0c:	601a      	str	r2, [r3, #0]
 8015b0e:	f3bf 8f4f 	dsb	sy
 8015b12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015b16:	f002 f899 	bl	8017c4c <vPortExitCritical>
				return pdPASS;
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	e069      	b.n	8015bf2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d103      	bne.n	8015b2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015b24:	f002 f892 	bl	8017c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	e062      	b.n	8015bf2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d106      	bne.n	8015b40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015b32:	f107 0310 	add.w	r3, r7, #16
 8015b36:	4618      	mov	r0, r3
 8015b38:	f001 f89e 	bl	8016c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015b40:	f002 f884 	bl	8017c4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015b44:	f000 fdee 	bl	8016724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b48:	f002 f850 	bl	8017bec <vPortEnterCritical>
 8015b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b52:	b25b      	sxtb	r3, r3
 8015b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b58:	d103      	bne.n	8015b62 <xQueueReceive+0x122>
 8015b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b68:	b25b      	sxtb	r3, r3
 8015b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b6e:	d103      	bne.n	8015b78 <xQueueReceive+0x138>
 8015b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b72:	2200      	movs	r2, #0
 8015b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015b78:	f002 f868 	bl	8017c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b7c:	1d3a      	adds	r2, r7, #4
 8015b7e:	f107 0310 	add.w	r3, r7, #16
 8015b82:	4611      	mov	r1, r2
 8015b84:	4618      	mov	r0, r3
 8015b86:	f001 f88d 	bl	8016ca4 <xTaskCheckForTimeOut>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d123      	bne.n	8015bd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b92:	f000 faba 	bl	801610a <prvIsQueueEmpty>
 8015b96:	4603      	mov	r3, r0
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d017      	beq.n	8015bcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b9e:	3324      	adds	r3, #36	; 0x24
 8015ba0:	687a      	ldr	r2, [r7, #4]
 8015ba2:	4611      	mov	r1, r2
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f000 ffb5 	bl	8016b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bac:	f000 fa5b 	bl	8016066 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015bb0:	f000 fdc6 	bl	8016740 <xTaskResumeAll>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d189      	bne.n	8015ace <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8015bba:	4b10      	ldr	r3, [pc, #64]	; (8015bfc <xQueueReceive+0x1bc>)
 8015bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015bc0:	601a      	str	r2, [r3, #0]
 8015bc2:	f3bf 8f4f 	dsb	sy
 8015bc6:	f3bf 8f6f 	isb	sy
 8015bca:	e780      	b.n	8015ace <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bce:	f000 fa4a 	bl	8016066 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015bd2:	f000 fdb5 	bl	8016740 <xTaskResumeAll>
 8015bd6:	e77a      	b.n	8015ace <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bda:	f000 fa44 	bl	8016066 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015bde:	f000 fdaf 	bl	8016740 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015be4:	f000 fa91 	bl	801610a <prvIsQueueEmpty>
 8015be8:	4603      	mov	r3, r0
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	f43f af6f 	beq.w	8015ace <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015bf0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3730      	adds	r7, #48	; 0x30
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	e000ed04 	.word	0xe000ed04

08015c00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b08e      	sub	sp, #56	; 0x38
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015c12:	2300      	movs	r3, #0
 8015c14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d10a      	bne.n	8015c32 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c20:	f383 8811 	msr	BASEPRI, r3
 8015c24:	f3bf 8f6f 	isb	sy
 8015c28:	f3bf 8f4f 	dsb	sy
 8015c2c:	623b      	str	r3, [r7, #32]
}
 8015c2e:	bf00      	nop
 8015c30:	e7fe      	b.n	8015c30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d00a      	beq.n	8015c50 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8015c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c3e:	f383 8811 	msr	BASEPRI, r3
 8015c42:	f3bf 8f6f 	isb	sy
 8015c46:	f3bf 8f4f 	dsb	sy
 8015c4a:	61fb      	str	r3, [r7, #28]
}
 8015c4c:	bf00      	nop
 8015c4e:	e7fe      	b.n	8015c4e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015c50:	f001 f972 	bl	8016f38 <xTaskGetSchedulerState>
 8015c54:	4603      	mov	r3, r0
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d102      	bne.n	8015c60 <xQueueSemaphoreTake+0x60>
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d101      	bne.n	8015c64 <xQueueSemaphoreTake+0x64>
 8015c60:	2301      	movs	r3, #1
 8015c62:	e000      	b.n	8015c66 <xQueueSemaphoreTake+0x66>
 8015c64:	2300      	movs	r3, #0
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d10a      	bne.n	8015c80 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8015c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c6e:	f383 8811 	msr	BASEPRI, r3
 8015c72:	f3bf 8f6f 	isb	sy
 8015c76:	f3bf 8f4f 	dsb	sy
 8015c7a:	61bb      	str	r3, [r7, #24]
}
 8015c7c:	bf00      	nop
 8015c7e:	e7fe      	b.n	8015c7e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015c80:	f001 ffb4 	bl	8017bec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c88:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d024      	beq.n	8015cda <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c92:	1e5a      	subs	r2, r3, #1
 8015c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d104      	bne.n	8015caa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015ca0:	f001 fb08 	bl	80172b4 <pvTaskIncrementMutexHeldCount>
 8015ca4:	4602      	mov	r2, r0
 8015ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ca8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cac:	691b      	ldr	r3, [r3, #16]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d00f      	beq.n	8015cd2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb4:	3310      	adds	r3, #16
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f000 ff7c 	bl	8016bb4 <xTaskRemoveFromEventList>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d007      	beq.n	8015cd2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015cc2:	4b54      	ldr	r3, [pc, #336]	; (8015e14 <xQueueSemaphoreTake+0x214>)
 8015cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cc8:	601a      	str	r2, [r3, #0]
 8015cca:	f3bf 8f4f 	dsb	sy
 8015cce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015cd2:	f001 ffbb 	bl	8017c4c <vPortExitCritical>
				return pdPASS;
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	e097      	b.n	8015e0a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015cda:	683b      	ldr	r3, [r7, #0]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d111      	bne.n	8015d04 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d00a      	beq.n	8015cfc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8015ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cea:	f383 8811 	msr	BASEPRI, r3
 8015cee:	f3bf 8f6f 	isb	sy
 8015cf2:	f3bf 8f4f 	dsb	sy
 8015cf6:	617b      	str	r3, [r7, #20]
}
 8015cf8:	bf00      	nop
 8015cfa:	e7fe      	b.n	8015cfa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015cfc:	f001 ffa6 	bl	8017c4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015d00:	2300      	movs	r3, #0
 8015d02:	e082      	b.n	8015e0a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d106      	bne.n	8015d18 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015d0a:	f107 030c 	add.w	r3, r7, #12
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f000 ffb2 	bl	8016c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015d14:	2301      	movs	r3, #1
 8015d16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015d18:	f001 ff98 	bl	8017c4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015d1c:	f000 fd02 	bl	8016724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015d20:	f001 ff64 	bl	8017bec <vPortEnterCritical>
 8015d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015d2a:	b25b      	sxtb	r3, r3
 8015d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d30:	d103      	bne.n	8015d3a <xQueueSemaphoreTake+0x13a>
 8015d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d34:	2200      	movs	r2, #0
 8015d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015d40:	b25b      	sxtb	r3, r3
 8015d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d46:	d103      	bne.n	8015d50 <xQueueSemaphoreTake+0x150>
 8015d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015d50:	f001 ff7c 	bl	8017c4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015d54:	463a      	mov	r2, r7
 8015d56:	f107 030c 	add.w	r3, r7, #12
 8015d5a:	4611      	mov	r1, r2
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f000 ffa1 	bl	8016ca4 <xTaskCheckForTimeOut>
 8015d62:	4603      	mov	r3, r0
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d132      	bne.n	8015dce <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015d68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d6a:	f000 f9ce 	bl	801610a <prvIsQueueEmpty>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d026      	beq.n	8015dc2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d109      	bne.n	8015d90 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8015d7c:	f001 ff36 	bl	8017bec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d82:	689b      	ldr	r3, [r3, #8]
 8015d84:	4618      	mov	r0, r3
 8015d86:	f001 f8f5 	bl	8016f74 <xTaskPriorityInherit>
 8015d8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015d8c:	f001 ff5e 	bl	8017c4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d92:	3324      	adds	r3, #36	; 0x24
 8015d94:	683a      	ldr	r2, [r7, #0]
 8015d96:	4611      	mov	r1, r2
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f000 febb 	bl	8016b14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015da0:	f000 f961 	bl	8016066 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015da4:	f000 fccc 	bl	8016740 <xTaskResumeAll>
 8015da8:	4603      	mov	r3, r0
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	f47f af68 	bne.w	8015c80 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015db0:	4b18      	ldr	r3, [pc, #96]	; (8015e14 <xQueueSemaphoreTake+0x214>)
 8015db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015db6:	601a      	str	r2, [r3, #0]
 8015db8:	f3bf 8f4f 	dsb	sy
 8015dbc:	f3bf 8f6f 	isb	sy
 8015dc0:	e75e      	b.n	8015c80 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015dc4:	f000 f94f 	bl	8016066 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015dc8:	f000 fcba 	bl	8016740 <xTaskResumeAll>
 8015dcc:	e758      	b.n	8015c80 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015dce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015dd0:	f000 f949 	bl	8016066 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015dd4:	f000 fcb4 	bl	8016740 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015dda:	f000 f996 	bl	801610a <prvIsQueueEmpty>
 8015dde:	4603      	mov	r3, r0
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	f43f af4d 	beq.w	8015c80 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d00d      	beq.n	8015e08 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015dec:	f001 fefe 	bl	8017bec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015df2:	f000 f891 	bl	8015f18 <prvGetDisinheritPriorityAfterTimeout>
 8015df6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dfa:	689b      	ldr	r3, [r3, #8]
 8015dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015dfe:	4618      	mov	r0, r3
 8015e00:	f001 f9be 	bl	8017180 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015e04:	f001 ff22 	bl	8017c4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015e08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3738      	adds	r7, #56	; 0x38
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	bf00      	nop
 8015e14:	e000ed04 	.word	0xe000ed04

08015e18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b08e      	sub	sp, #56	; 0x38
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	60f8      	str	r0, [r7, #12]
 8015e20:	60b9      	str	r1, [r7, #8]
 8015e22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d10a      	bne.n	8015e44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e32:	f383 8811 	msr	BASEPRI, r3
 8015e36:	f3bf 8f6f 	isb	sy
 8015e3a:	f3bf 8f4f 	dsb	sy
 8015e3e:	623b      	str	r3, [r7, #32]
}
 8015e40:	bf00      	nop
 8015e42:	e7fe      	b.n	8015e42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d103      	bne.n	8015e52 <xQueueReceiveFromISR+0x3a>
 8015e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d101      	bne.n	8015e56 <xQueueReceiveFromISR+0x3e>
 8015e52:	2301      	movs	r3, #1
 8015e54:	e000      	b.n	8015e58 <xQueueReceiveFromISR+0x40>
 8015e56:	2300      	movs	r3, #0
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d10a      	bne.n	8015e72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8015e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e60:	f383 8811 	msr	BASEPRI, r3
 8015e64:	f3bf 8f6f 	isb	sy
 8015e68:	f3bf 8f4f 	dsb	sy
 8015e6c:	61fb      	str	r3, [r7, #28]
}
 8015e6e:	bf00      	nop
 8015e70:	e7fe      	b.n	8015e70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015e72:	f001 ff7d 	bl	8017d70 <vPortValidateInterruptPriority>
	__asm volatile
 8015e76:	f3ef 8211 	mrs	r2, BASEPRI
 8015e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e7e:	f383 8811 	msr	BASEPRI, r3
 8015e82:	f3bf 8f6f 	isb	sy
 8015e86:	f3bf 8f4f 	dsb	sy
 8015e8a:	61ba      	str	r2, [r7, #24]
 8015e8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015e8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015e90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d02f      	beq.n	8015efe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015ea8:	68b9      	ldr	r1, [r7, #8]
 8015eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015eac:	f000 f8b5 	bl	801601a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb2:	1e5a      	subs	r2, r3, #1
 8015eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015eb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ec0:	d112      	bne.n	8015ee8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec4:	691b      	ldr	r3, [r3, #16]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d016      	beq.n	8015ef8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ecc:	3310      	adds	r3, #16
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f000 fe70 	bl	8016bb4 <xTaskRemoveFromEventList>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d00e      	beq.n	8015ef8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d00b      	beq.n	8015ef8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2201      	movs	r2, #1
 8015ee4:	601a      	str	r2, [r3, #0]
 8015ee6:	e007      	b.n	8015ef8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015eec:	3301      	adds	r3, #1
 8015eee:	b2db      	uxtb	r3, r3
 8015ef0:	b25a      	sxtb	r2, r3
 8015ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015ef8:	2301      	movs	r3, #1
 8015efa:	637b      	str	r3, [r7, #52]	; 0x34
 8015efc:	e001      	b.n	8015f02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015efe:	2300      	movs	r3, #0
 8015f00:	637b      	str	r3, [r7, #52]	; 0x34
 8015f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015f06:	693b      	ldr	r3, [r7, #16]
 8015f08:	f383 8811 	msr	BASEPRI, r3
}
 8015f0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3738      	adds	r7, #56	; 0x38
 8015f14:	46bd      	mov	sp, r7
 8015f16:	bd80      	pop	{r7, pc}

08015f18 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015f18:	b480      	push	{r7}
 8015f1a:	b085      	sub	sp, #20
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d006      	beq.n	8015f36 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	f1c3 0307 	rsb	r3, r3, #7
 8015f32:	60fb      	str	r3, [r7, #12]
 8015f34:	e001      	b.n	8015f3a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015f36:	2300      	movs	r3, #0
 8015f38:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015f3a:	68fb      	ldr	r3, [r7, #12]
	}
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	3714      	adds	r7, #20
 8015f40:	46bd      	mov	sp, r7
 8015f42:	bc80      	pop	{r7}
 8015f44:	4770      	bx	lr

08015f46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015f46:	b580      	push	{r7, lr}
 8015f48:	b086      	sub	sp, #24
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	60f8      	str	r0, [r7, #12]
 8015f4e:	60b9      	str	r1, [r7, #8]
 8015f50:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015f52:	2300      	movs	r3, #0
 8015f54:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f5a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d10d      	bne.n	8015f80 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d14d      	bne.n	8016008 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	689b      	ldr	r3, [r3, #8]
 8015f70:	4618      	mov	r0, r3
 8015f72:	f001 f87f 	bl	8017074 <xTaskPriorityDisinherit>
 8015f76:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	609a      	str	r2, [r3, #8]
 8015f7e:	e043      	b.n	8016008 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d119      	bne.n	8015fba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	6858      	ldr	r0, [r3, #4]
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f8e:	461a      	mov	r2, r3
 8015f90:	68b9      	ldr	r1, [r7, #8]
 8015f92:	f002 fd35 	bl	8018a00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	685a      	ldr	r2, [r3, #4]
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f9e:	441a      	add	r2, r3
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	685a      	ldr	r2, [r3, #4]
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	689b      	ldr	r3, [r3, #8]
 8015fac:	429a      	cmp	r2, r3
 8015fae:	d32b      	bcc.n	8016008 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	681a      	ldr	r2, [r3, #0]
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	605a      	str	r2, [r3, #4]
 8015fb8:	e026      	b.n	8016008 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	68d8      	ldr	r0, [r3, #12]
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fc2:	461a      	mov	r2, r3
 8015fc4:	68b9      	ldr	r1, [r7, #8]
 8015fc6:	f002 fd1b 	bl	8018a00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	68da      	ldr	r2, [r3, #12]
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fd2:	425b      	negs	r3, r3
 8015fd4:	441a      	add	r2, r3
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	68da      	ldr	r2, [r3, #12]
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d207      	bcs.n	8015ff6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	689a      	ldr	r2, [r3, #8]
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fee:	425b      	negs	r3, r3
 8015ff0:	441a      	add	r2, r3
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	2b02      	cmp	r3, #2
 8015ffa:	d105      	bne.n	8016008 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ffc:	693b      	ldr	r3, [r7, #16]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d002      	beq.n	8016008 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016002:	693b      	ldr	r3, [r7, #16]
 8016004:	3b01      	subs	r3, #1
 8016006:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	1c5a      	adds	r2, r3, #1
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016010:	697b      	ldr	r3, [r7, #20]
}
 8016012:	4618      	mov	r0, r3
 8016014:	3718      	adds	r7, #24
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}

0801601a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801601a:	b580      	push	{r7, lr}
 801601c:	b082      	sub	sp, #8
 801601e:	af00      	add	r7, sp, #0
 8016020:	6078      	str	r0, [r7, #4]
 8016022:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016028:	2b00      	cmp	r3, #0
 801602a:	d018      	beq.n	801605e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	68da      	ldr	r2, [r3, #12]
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016034:	441a      	add	r2, r3
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	68da      	ldr	r2, [r3, #12]
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	689b      	ldr	r3, [r3, #8]
 8016042:	429a      	cmp	r2, r3
 8016044:	d303      	bcc.n	801604e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	681a      	ldr	r2, [r3, #0]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	68d9      	ldr	r1, [r3, #12]
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016056:	461a      	mov	r2, r3
 8016058:	6838      	ldr	r0, [r7, #0]
 801605a:	f002 fcd1 	bl	8018a00 <memcpy>
	}
}
 801605e:	bf00      	nop
 8016060:	3708      	adds	r7, #8
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}

08016066 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016066:	b580      	push	{r7, lr}
 8016068:	b084      	sub	sp, #16
 801606a:	af00      	add	r7, sp, #0
 801606c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801606e:	f001 fdbd 	bl	8017bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016078:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801607a:	e011      	b.n	80160a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016080:	2b00      	cmp	r3, #0
 8016082:	d012      	beq.n	80160aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	3324      	adds	r3, #36	; 0x24
 8016088:	4618      	mov	r0, r3
 801608a:	f000 fd93 	bl	8016bb4 <xTaskRemoveFromEventList>
 801608e:	4603      	mov	r3, r0
 8016090:	2b00      	cmp	r3, #0
 8016092:	d001      	beq.n	8016098 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016094:	f000 fe68 	bl	8016d68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016098:	7bfb      	ldrb	r3, [r7, #15]
 801609a:	3b01      	subs	r3, #1
 801609c:	b2db      	uxtb	r3, r3
 801609e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80160a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	dce9      	bgt.n	801607c <prvUnlockQueue+0x16>
 80160a8:	e000      	b.n	80160ac <prvUnlockQueue+0x46>
					break;
 80160aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	22ff      	movs	r2, #255	; 0xff
 80160b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80160b4:	f001 fdca 	bl	8017c4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80160b8:	f001 fd98 	bl	8017bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80160c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80160c4:	e011      	b.n	80160ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	691b      	ldr	r3, [r3, #16]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d012      	beq.n	80160f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	3310      	adds	r3, #16
 80160d2:	4618      	mov	r0, r3
 80160d4:	f000 fd6e 	bl	8016bb4 <xTaskRemoveFromEventList>
 80160d8:	4603      	mov	r3, r0
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d001      	beq.n	80160e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80160de:	f000 fe43 	bl	8016d68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80160e2:	7bbb      	ldrb	r3, [r7, #14]
 80160e4:	3b01      	subs	r3, #1
 80160e6:	b2db      	uxtb	r3, r3
 80160e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80160ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	dce9      	bgt.n	80160c6 <prvUnlockQueue+0x60>
 80160f2:	e000      	b.n	80160f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80160f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	22ff      	movs	r2, #255	; 0xff
 80160fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80160fe:	f001 fda5 	bl	8017c4c <vPortExitCritical>
}
 8016102:	bf00      	nop
 8016104:	3710      	adds	r7, #16
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}

0801610a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801610a:	b580      	push	{r7, lr}
 801610c:	b084      	sub	sp, #16
 801610e:	af00      	add	r7, sp, #0
 8016110:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016112:	f001 fd6b 	bl	8017bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801611a:	2b00      	cmp	r3, #0
 801611c:	d102      	bne.n	8016124 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801611e:	2301      	movs	r3, #1
 8016120:	60fb      	str	r3, [r7, #12]
 8016122:	e001      	b.n	8016128 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016124:	2300      	movs	r3, #0
 8016126:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016128:	f001 fd90 	bl	8017c4c <vPortExitCritical>

	return xReturn;
 801612c:	68fb      	ldr	r3, [r7, #12]
}
 801612e:	4618      	mov	r0, r3
 8016130:	3710      	adds	r7, #16
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}

08016136 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016136:	b580      	push	{r7, lr}
 8016138:	b084      	sub	sp, #16
 801613a:	af00      	add	r7, sp, #0
 801613c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801613e:	f001 fd55 	bl	8017bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801614a:	429a      	cmp	r2, r3
 801614c:	d102      	bne.n	8016154 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801614e:	2301      	movs	r3, #1
 8016150:	60fb      	str	r3, [r7, #12]
 8016152:	e001      	b.n	8016158 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016154:	2300      	movs	r3, #0
 8016156:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016158:	f001 fd78 	bl	8017c4c <vPortExitCritical>

	return xReturn;
 801615c:	68fb      	ldr	r3, [r7, #12]
}
 801615e:	4618      	mov	r0, r3
 8016160:	3710      	adds	r7, #16
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
	...

08016168 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016168:	b480      	push	{r7}
 801616a:	b085      	sub	sp, #20
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
 8016170:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016172:	2300      	movs	r3, #0
 8016174:	60fb      	str	r3, [r7, #12]
 8016176:	e014      	b.n	80161a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016178:	4a0e      	ldr	r2, [pc, #56]	; (80161b4 <vQueueAddToRegistry+0x4c>)
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d10b      	bne.n	801619c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016184:	490b      	ldr	r1, [pc, #44]	; (80161b4 <vQueueAddToRegistry+0x4c>)
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	683a      	ldr	r2, [r7, #0]
 801618a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801618e:	4a09      	ldr	r2, [pc, #36]	; (80161b4 <vQueueAddToRegistry+0x4c>)
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	00db      	lsls	r3, r3, #3
 8016194:	4413      	add	r3, r2
 8016196:	687a      	ldr	r2, [r7, #4]
 8016198:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801619a:	e006      	b.n	80161aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	3301      	adds	r3, #1
 80161a0:	60fb      	str	r3, [r7, #12]
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	2b07      	cmp	r3, #7
 80161a6:	d9e7      	bls.n	8016178 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80161a8:	bf00      	nop
 80161aa:	bf00      	nop
 80161ac:	3714      	adds	r7, #20
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bc80      	pop	{r7}
 80161b2:	4770      	bx	lr
 80161b4:	20002be0 	.word	0x20002be0

080161b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b086      	sub	sp, #24
 80161bc:	af00      	add	r7, sp, #0
 80161be:	60f8      	str	r0, [r7, #12]
 80161c0:	60b9      	str	r1, [r7, #8]
 80161c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80161c8:	f001 fd10 	bl	8017bec <vPortEnterCritical>
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161d2:	b25b      	sxtb	r3, r3
 80161d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161d8:	d103      	bne.n	80161e2 <vQueueWaitForMessageRestricted+0x2a>
 80161da:	697b      	ldr	r3, [r7, #20]
 80161dc:	2200      	movs	r2, #0
 80161de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80161e2:	697b      	ldr	r3, [r7, #20]
 80161e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161e8:	b25b      	sxtb	r3, r3
 80161ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161ee:	d103      	bne.n	80161f8 <vQueueWaitForMessageRestricted+0x40>
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	2200      	movs	r2, #0
 80161f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80161f8:	f001 fd28 	bl	8017c4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80161fc:	697b      	ldr	r3, [r7, #20]
 80161fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016200:	2b00      	cmp	r3, #0
 8016202:	d106      	bne.n	8016212 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016204:	697b      	ldr	r3, [r7, #20]
 8016206:	3324      	adds	r3, #36	; 0x24
 8016208:	687a      	ldr	r2, [r7, #4]
 801620a:	68b9      	ldr	r1, [r7, #8]
 801620c:	4618      	mov	r0, r3
 801620e:	f000 fca5 	bl	8016b5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016212:	6978      	ldr	r0, [r7, #20]
 8016214:	f7ff ff27 	bl	8016066 <prvUnlockQueue>
	}
 8016218:	bf00      	nop
 801621a:	3718      	adds	r7, #24
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016220:	b580      	push	{r7, lr}
 8016222:	b08e      	sub	sp, #56	; 0x38
 8016224:	af04      	add	r7, sp, #16
 8016226:	60f8      	str	r0, [r7, #12]
 8016228:	60b9      	str	r1, [r7, #8]
 801622a:	607a      	str	r2, [r7, #4]
 801622c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016230:	2b00      	cmp	r3, #0
 8016232:	d10a      	bne.n	801624a <xTaskCreateStatic+0x2a>
	__asm volatile
 8016234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016238:	f383 8811 	msr	BASEPRI, r3
 801623c:	f3bf 8f6f 	isb	sy
 8016240:	f3bf 8f4f 	dsb	sy
 8016244:	623b      	str	r3, [r7, #32]
}
 8016246:	bf00      	nop
 8016248:	e7fe      	b.n	8016248 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801624c:	2b00      	cmp	r3, #0
 801624e:	d10a      	bne.n	8016266 <xTaskCreateStatic+0x46>
	__asm volatile
 8016250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016254:	f383 8811 	msr	BASEPRI, r3
 8016258:	f3bf 8f6f 	isb	sy
 801625c:	f3bf 8f4f 	dsb	sy
 8016260:	61fb      	str	r3, [r7, #28]
}
 8016262:	bf00      	nop
 8016264:	e7fe      	b.n	8016264 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016266:	f44f 6390 	mov.w	r3, #1152	; 0x480
 801626a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801626c:	693b      	ldr	r3, [r7, #16]
 801626e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8016272:	d00a      	beq.n	801628a <xTaskCreateStatic+0x6a>
	__asm volatile
 8016274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016278:	f383 8811 	msr	BASEPRI, r3
 801627c:	f3bf 8f6f 	isb	sy
 8016280:	f3bf 8f4f 	dsb	sy
 8016284:	61bb      	str	r3, [r7, #24]
}
 8016286:	bf00      	nop
 8016288:	e7fe      	b.n	8016288 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801628a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801628e:	2b00      	cmp	r3, #0
 8016290:	d01e      	beq.n	80162d0 <xTaskCreateStatic+0xb0>
 8016292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016294:	2b00      	cmp	r3, #0
 8016296:	d01b      	beq.n	80162d0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801629a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80162a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80162a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a4:	2202      	movs	r2, #2
 80162a6:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80162aa:	2300      	movs	r3, #0
 80162ac:	9303      	str	r3, [sp, #12]
 80162ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b0:	9302      	str	r3, [sp, #8]
 80162b2:	f107 0314 	add.w	r3, r7, #20
 80162b6:	9301      	str	r3, [sp, #4]
 80162b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ba:	9300      	str	r3, [sp, #0]
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	68b9      	ldr	r1, [r7, #8]
 80162c2:	68f8      	ldr	r0, [r7, #12]
 80162c4:	f000 f851 	bl	801636a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80162c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162ca:	f000 f91d 	bl	8016508 <prvAddNewTaskToReadyList>
 80162ce:	e001      	b.n	80162d4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80162d0:	2300      	movs	r3, #0
 80162d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80162d4:	697b      	ldr	r3, [r7, #20]
	}
 80162d6:	4618      	mov	r0, r3
 80162d8:	3728      	adds	r7, #40	; 0x28
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}

080162de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80162de:	b580      	push	{r7, lr}
 80162e0:	b08c      	sub	sp, #48	; 0x30
 80162e2:	af04      	add	r7, sp, #16
 80162e4:	60f8      	str	r0, [r7, #12]
 80162e6:	60b9      	str	r1, [r7, #8]
 80162e8:	603b      	str	r3, [r7, #0]
 80162ea:	4613      	mov	r3, r2
 80162ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80162ee:	88fb      	ldrh	r3, [r7, #6]
 80162f0:	009b      	lsls	r3, r3, #2
 80162f2:	4618      	mov	r0, r3
 80162f4:	f001 fd7a 	bl	8017dec <pvPortMalloc>
 80162f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80162fa:	697b      	ldr	r3, [r7, #20]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d00f      	beq.n	8016320 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016300:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8016304:	f001 fd72 	bl	8017dec <pvPortMalloc>
 8016308:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d003      	beq.n	8016318 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016310:	69fb      	ldr	r3, [r7, #28]
 8016312:	697a      	ldr	r2, [r7, #20]
 8016314:	631a      	str	r2, [r3, #48]	; 0x30
 8016316:	e005      	b.n	8016324 <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016318:	6978      	ldr	r0, [r7, #20]
 801631a:	f001 fe31 	bl	8017f80 <vPortFree>
 801631e:	e001      	b.n	8016324 <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016320:	2300      	movs	r3, #0
 8016322:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016324:	69fb      	ldr	r3, [r7, #28]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d017      	beq.n	801635a <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	2200      	movs	r2, #0
 801632e:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016332:	88fa      	ldrh	r2, [r7, #6]
 8016334:	2300      	movs	r3, #0
 8016336:	9303      	str	r3, [sp, #12]
 8016338:	69fb      	ldr	r3, [r7, #28]
 801633a:	9302      	str	r3, [sp, #8]
 801633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633e:	9301      	str	r3, [sp, #4]
 8016340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016342:	9300      	str	r3, [sp, #0]
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	68b9      	ldr	r1, [r7, #8]
 8016348:	68f8      	ldr	r0, [r7, #12]
 801634a:	f000 f80e 	bl	801636a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801634e:	69f8      	ldr	r0, [r7, #28]
 8016350:	f000 f8da 	bl	8016508 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016354:	2301      	movs	r3, #1
 8016356:	61bb      	str	r3, [r7, #24]
 8016358:	e002      	b.n	8016360 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801635a:	f04f 33ff 	mov.w	r3, #4294967295
 801635e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016360:	69bb      	ldr	r3, [r7, #24]
	}
 8016362:	4618      	mov	r0, r3
 8016364:	3720      	adds	r7, #32
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}

0801636a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801636a:	b580      	push	{r7, lr}
 801636c:	b088      	sub	sp, #32
 801636e:	af00      	add	r7, sp, #0
 8016370:	60f8      	str	r0, [r7, #12]
 8016372:	60b9      	str	r1, [r7, #8]
 8016374:	607a      	str	r2, [r7, #4]
 8016376:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801637a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	009b      	lsls	r3, r3, #2
 8016380:	461a      	mov	r2, r3
 8016382:	21a5      	movs	r1, #165	; 0xa5
 8016384:	f002 fb64 	bl	8018a50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801638a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016392:	3b01      	subs	r3, #1
 8016394:	009b      	lsls	r3, r3, #2
 8016396:	4413      	add	r3, r2
 8016398:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801639a:	69bb      	ldr	r3, [r7, #24]
 801639c:	f023 0307 	bic.w	r3, r3, #7
 80163a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80163a2:	69bb      	ldr	r3, [r7, #24]
 80163a4:	f003 0307 	and.w	r3, r3, #7
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d00a      	beq.n	80163c2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80163ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163b0:	f383 8811 	msr	BASEPRI, r3
 80163b4:	f3bf 8f6f 	isb	sy
 80163b8:	f3bf 8f4f 	dsb	sy
 80163bc:	617b      	str	r3, [r7, #20]
}
 80163be:	bf00      	nop
 80163c0:	e7fe      	b.n	80163c0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80163c2:	68bb      	ldr	r3, [r7, #8]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d01f      	beq.n	8016408 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80163c8:	2300      	movs	r3, #0
 80163ca:	61fb      	str	r3, [r7, #28]
 80163cc:	e012      	b.n	80163f4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80163ce:	68ba      	ldr	r2, [r7, #8]
 80163d0:	69fb      	ldr	r3, [r7, #28]
 80163d2:	4413      	add	r3, r2
 80163d4:	7819      	ldrb	r1, [r3, #0]
 80163d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163d8:	69fb      	ldr	r3, [r7, #28]
 80163da:	4413      	add	r3, r2
 80163dc:	3334      	adds	r3, #52	; 0x34
 80163de:	460a      	mov	r2, r1
 80163e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80163e2:	68ba      	ldr	r2, [r7, #8]
 80163e4:	69fb      	ldr	r3, [r7, #28]
 80163e6:	4413      	add	r3, r2
 80163e8:	781b      	ldrb	r3, [r3, #0]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d006      	beq.n	80163fc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80163ee:	69fb      	ldr	r3, [r7, #28]
 80163f0:	3301      	adds	r3, #1
 80163f2:	61fb      	str	r3, [r7, #28]
 80163f4:	69fb      	ldr	r3, [r7, #28]
 80163f6:	2b0f      	cmp	r3, #15
 80163f8:	d9e9      	bls.n	80163ce <prvInitialiseNewTask+0x64>
 80163fa:	e000      	b.n	80163fe <prvInitialiseNewTask+0x94>
			{
				break;
 80163fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80163fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016400:	2200      	movs	r2, #0
 8016402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016406:	e003      	b.n	8016410 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801640a:	2200      	movs	r2, #0
 801640c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016412:	2b06      	cmp	r3, #6
 8016414:	d901      	bls.n	801641a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016416:	2306      	movs	r3, #6
 8016418:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801641c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801641e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016424:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016428:	2200      	movs	r2, #0
 801642a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801642e:	3304      	adds	r3, #4
 8016430:	4618      	mov	r0, r3
 8016432:	f7fe fec5 	bl	80151c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016438:	3318      	adds	r3, #24
 801643a:	4618      	mov	r0, r3
 801643c:	f7fe fec0 	bl	80151c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016444:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016448:	f1c3 0207 	rsb	r2, r3, #7
 801644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016454:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016458:	2200      	movs	r2, #0
 801645a:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016460:	2200      	movs	r2, #0
 8016462:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016468:	3350      	adds	r3, #80	; 0x50
 801646a:	f44f 6285 	mov.w	r2, #1064	; 0x428
 801646e:	2100      	movs	r1, #0
 8016470:	4618      	mov	r0, r3
 8016472:	f002 faed 	bl	8018a50 <memset>
 8016476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016478:	f503 724f 	add.w	r2, r3, #828	; 0x33c
 801647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801647e:	655a      	str	r2, [r3, #84]	; 0x54
 8016480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016482:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
 8016486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016488:	659a      	str	r2, [r3, #88]	; 0x58
 801648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801648c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8016490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016492:	65da      	str	r2, [r3, #92]	; 0x5c
 8016494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016496:	f04f 0201 	mov.w	r2, #1
 801649a:	f04f 0300 	mov.w	r3, #0
 801649e:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
 80164a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a4:	f243 320e 	movw	r2, #13070	; 0x330e
 80164a8:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 80164ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ae:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80164b2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 80164b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b8:	f241 2234 	movw	r2, #4660	; 0x1234
 80164bc:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80164c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c2:	f24e 626d 	movw	r2, #58989	; 0xe66d
 80164c6:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
 80164ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164cc:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 80164d0:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
 80164d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d6:	2205      	movs	r2, #5
 80164d8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
 80164dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164de:	220b      	movs	r2, #11
 80164e0:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80164e4:	683a      	ldr	r2, [r7, #0]
 80164e6:	68f9      	ldr	r1, [r7, #12]
 80164e8:	69b8      	ldr	r0, [r7, #24]
 80164ea:	f001 fa8d 	bl	8017a08 <pxPortInitialiseStack>
 80164ee:	4602      	mov	r2, r0
 80164f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80164f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d002      	beq.n	8016500 <prvInitialiseNewTask+0x196>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80164fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016500:	bf00      	nop
 8016502:	3720      	adds	r7, #32
 8016504:	46bd      	mov	sp, r7
 8016506:	bd80      	pop	{r7, pc}

08016508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016510:	f001 fb6c 	bl	8017bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016514:	4b2a      	ldr	r3, [pc, #168]	; (80165c0 <prvAddNewTaskToReadyList+0xb8>)
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	3301      	adds	r3, #1
 801651a:	4a29      	ldr	r2, [pc, #164]	; (80165c0 <prvAddNewTaskToReadyList+0xb8>)
 801651c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801651e:	4b29      	ldr	r3, [pc, #164]	; (80165c4 <prvAddNewTaskToReadyList+0xbc>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d109      	bne.n	801653a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016526:	4a27      	ldr	r2, [pc, #156]	; (80165c4 <prvAddNewTaskToReadyList+0xbc>)
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801652c:	4b24      	ldr	r3, [pc, #144]	; (80165c0 <prvAddNewTaskToReadyList+0xb8>)
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	2b01      	cmp	r3, #1
 8016532:	d110      	bne.n	8016556 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016534:	f000 fc3e 	bl	8016db4 <prvInitialiseTaskLists>
 8016538:	e00d      	b.n	8016556 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801653a:	4b23      	ldr	r3, [pc, #140]	; (80165c8 <prvAddNewTaskToReadyList+0xc0>)
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d109      	bne.n	8016556 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016542:	4b20      	ldr	r3, [pc, #128]	; (80165c4 <prvAddNewTaskToReadyList+0xbc>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801654c:	429a      	cmp	r2, r3
 801654e:	d802      	bhi.n	8016556 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016550:	4a1c      	ldr	r2, [pc, #112]	; (80165c4 <prvAddNewTaskToReadyList+0xbc>)
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016556:	4b1d      	ldr	r3, [pc, #116]	; (80165cc <prvAddNewTaskToReadyList+0xc4>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	3301      	adds	r3, #1
 801655c:	4a1b      	ldr	r2, [pc, #108]	; (80165cc <prvAddNewTaskToReadyList+0xc4>)
 801655e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016564:	2201      	movs	r2, #1
 8016566:	409a      	lsls	r2, r3
 8016568:	4b19      	ldr	r3, [pc, #100]	; (80165d0 <prvAddNewTaskToReadyList+0xc8>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	4313      	orrs	r3, r2
 801656e:	4a18      	ldr	r2, [pc, #96]	; (80165d0 <prvAddNewTaskToReadyList+0xc8>)
 8016570:	6013      	str	r3, [r2, #0]
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016576:	4613      	mov	r3, r2
 8016578:	009b      	lsls	r3, r3, #2
 801657a:	4413      	add	r3, r2
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	4a15      	ldr	r2, [pc, #84]	; (80165d4 <prvAddNewTaskToReadyList+0xcc>)
 8016580:	441a      	add	r2, r3
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	3304      	adds	r3, #4
 8016586:	4619      	mov	r1, r3
 8016588:	4610      	mov	r0, r2
 801658a:	f7fe fe25 	bl	80151d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801658e:	f001 fb5d 	bl	8017c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016592:	4b0d      	ldr	r3, [pc, #52]	; (80165c8 <prvAddNewTaskToReadyList+0xc0>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d00e      	beq.n	80165b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801659a:	4b0a      	ldr	r3, [pc, #40]	; (80165c4 <prvAddNewTaskToReadyList+0xbc>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165a4:	429a      	cmp	r2, r3
 80165a6:	d207      	bcs.n	80165b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80165a8:	4b0b      	ldr	r3, [pc, #44]	; (80165d8 <prvAddNewTaskToReadyList+0xd0>)
 80165aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165ae:	601a      	str	r2, [r3, #0]
 80165b0:	f3bf 8f4f 	dsb	sy
 80165b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80165b8:	bf00      	nop
 80165ba:	3708      	adds	r7, #8
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd80      	pop	{r7, pc}
 80165c0:	20002d20 	.word	0x20002d20
 80165c4:	20002c20 	.word	0x20002c20
 80165c8:	20002d2c 	.word	0x20002d2c
 80165cc:	20002d3c 	.word	0x20002d3c
 80165d0:	20002d28 	.word	0x20002d28
 80165d4:	20002c24 	.word	0x20002c24
 80165d8:	e000ed04 	.word	0xe000ed04

080165dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b084      	sub	sp, #16
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80165e4:	2300      	movs	r3, #0
 80165e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d017      	beq.n	801661e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80165ee:	4b13      	ldr	r3, [pc, #76]	; (801663c <vTaskDelay+0x60>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d00a      	beq.n	801660c <vTaskDelay+0x30>
	__asm volatile
 80165f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165fa:	f383 8811 	msr	BASEPRI, r3
 80165fe:	f3bf 8f6f 	isb	sy
 8016602:	f3bf 8f4f 	dsb	sy
 8016606:	60bb      	str	r3, [r7, #8]
}
 8016608:	bf00      	nop
 801660a:	e7fe      	b.n	801660a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801660c:	f000 f88a 	bl	8016724 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016610:	2100      	movs	r1, #0
 8016612:	6878      	ldr	r0, [r7, #4]
 8016614:	f000 fe62 	bl	80172dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016618:	f000 f892 	bl	8016740 <xTaskResumeAll>
 801661c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d107      	bne.n	8016634 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016624:	4b06      	ldr	r3, [pc, #24]	; (8016640 <vTaskDelay+0x64>)
 8016626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801662a:	601a      	str	r2, [r3, #0]
 801662c:	f3bf 8f4f 	dsb	sy
 8016630:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016634:	bf00      	nop
 8016636:	3710      	adds	r7, #16
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}
 801663c:	20002d48 	.word	0x20002d48
 8016640:	e000ed04 	.word	0xe000ed04

08016644 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b08a      	sub	sp, #40	; 0x28
 8016648:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801664a:	2300      	movs	r3, #0
 801664c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801664e:	2300      	movs	r3, #0
 8016650:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016652:	463a      	mov	r2, r7
 8016654:	1d39      	adds	r1, r7, #4
 8016656:	f107 0308 	add.w	r3, r7, #8
 801665a:	4618      	mov	r0, r3
 801665c:	f7f2 ff8e 	bl	800957c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016660:	6839      	ldr	r1, [r7, #0]
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	68ba      	ldr	r2, [r7, #8]
 8016666:	9202      	str	r2, [sp, #8]
 8016668:	9301      	str	r3, [sp, #4]
 801666a:	2300      	movs	r3, #0
 801666c:	9300      	str	r3, [sp, #0]
 801666e:	2300      	movs	r3, #0
 8016670:	460a      	mov	r2, r1
 8016672:	4924      	ldr	r1, [pc, #144]	; (8016704 <vTaskStartScheduler+0xc0>)
 8016674:	4824      	ldr	r0, [pc, #144]	; (8016708 <vTaskStartScheduler+0xc4>)
 8016676:	f7ff fdd3 	bl	8016220 <xTaskCreateStatic>
 801667a:	4603      	mov	r3, r0
 801667c:	4a23      	ldr	r2, [pc, #140]	; (801670c <vTaskStartScheduler+0xc8>)
 801667e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016680:	4b22      	ldr	r3, [pc, #136]	; (801670c <vTaskStartScheduler+0xc8>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d002      	beq.n	801668e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016688:	2301      	movs	r3, #1
 801668a:	617b      	str	r3, [r7, #20]
 801668c:	e001      	b.n	8016692 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801668e:	2300      	movs	r3, #0
 8016690:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016692:	697b      	ldr	r3, [r7, #20]
 8016694:	2b01      	cmp	r3, #1
 8016696:	d102      	bne.n	801669e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016698:	f000 fe86 	bl	80173a8 <xTimerCreateTimerTask>
 801669c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	2b01      	cmp	r3, #1
 80166a2:	d11b      	bne.n	80166dc <vTaskStartScheduler+0x98>
	__asm volatile
 80166a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166a8:	f383 8811 	msr	BASEPRI, r3
 80166ac:	f3bf 8f6f 	isb	sy
 80166b0:	f3bf 8f4f 	dsb	sy
 80166b4:	613b      	str	r3, [r7, #16]
}
 80166b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80166b8:	4b15      	ldr	r3, [pc, #84]	; (8016710 <vTaskStartScheduler+0xcc>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	3350      	adds	r3, #80	; 0x50
 80166be:	4a15      	ldr	r2, [pc, #84]	; (8016714 <vTaskStartScheduler+0xd0>)
 80166c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80166c2:	4b15      	ldr	r3, [pc, #84]	; (8016718 <vTaskStartScheduler+0xd4>)
 80166c4:	f04f 32ff 	mov.w	r2, #4294967295
 80166c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80166ca:	4b14      	ldr	r3, [pc, #80]	; (801671c <vTaskStartScheduler+0xd8>)
 80166cc:	2201      	movs	r2, #1
 80166ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80166d0:	4b13      	ldr	r3, [pc, #76]	; (8016720 <vTaskStartScheduler+0xdc>)
 80166d2:	2200      	movs	r2, #0
 80166d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80166d6:	f001 fa17 	bl	8017b08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80166da:	e00e      	b.n	80166fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80166dc:	697b      	ldr	r3, [r7, #20]
 80166de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166e2:	d10a      	bne.n	80166fa <vTaskStartScheduler+0xb6>
	__asm volatile
 80166e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166e8:	f383 8811 	msr	BASEPRI, r3
 80166ec:	f3bf 8f6f 	isb	sy
 80166f0:	f3bf 8f4f 	dsb	sy
 80166f4:	60fb      	str	r3, [r7, #12]
}
 80166f6:	bf00      	nop
 80166f8:	e7fe      	b.n	80166f8 <vTaskStartScheduler+0xb4>
}
 80166fa:	bf00      	nop
 80166fc:	3718      	adds	r7, #24
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	0801f8ec 	.word	0x0801f8ec
 8016708:	08016d81 	.word	0x08016d81
 801670c:	20002d44 	.word	0x20002d44
 8016710:	20002c20 	.word	0x20002c20
 8016714:	20000098 	.word	0x20000098
 8016718:	20002d40 	.word	0x20002d40
 801671c:	20002d2c 	.word	0x20002d2c
 8016720:	20002d24 	.word	0x20002d24

08016724 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016724:	b480      	push	{r7}
 8016726:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016728:	4b04      	ldr	r3, [pc, #16]	; (801673c <vTaskSuspendAll+0x18>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	3301      	adds	r3, #1
 801672e:	4a03      	ldr	r2, [pc, #12]	; (801673c <vTaskSuspendAll+0x18>)
 8016730:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8016732:	bf00      	nop
 8016734:	46bd      	mov	sp, r7
 8016736:	bc80      	pop	{r7}
 8016738:	4770      	bx	lr
 801673a:	bf00      	nop
 801673c:	20002d48 	.word	0x20002d48

08016740 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b084      	sub	sp, #16
 8016744:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016746:	2300      	movs	r3, #0
 8016748:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801674a:	2300      	movs	r3, #0
 801674c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801674e:	4b41      	ldr	r3, [pc, #260]	; (8016854 <xTaskResumeAll+0x114>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d10a      	bne.n	801676c <xTaskResumeAll+0x2c>
	__asm volatile
 8016756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801675a:	f383 8811 	msr	BASEPRI, r3
 801675e:	f3bf 8f6f 	isb	sy
 8016762:	f3bf 8f4f 	dsb	sy
 8016766:	603b      	str	r3, [r7, #0]
}
 8016768:	bf00      	nop
 801676a:	e7fe      	b.n	801676a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801676c:	f001 fa3e 	bl	8017bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016770:	4b38      	ldr	r3, [pc, #224]	; (8016854 <xTaskResumeAll+0x114>)
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	3b01      	subs	r3, #1
 8016776:	4a37      	ldr	r2, [pc, #220]	; (8016854 <xTaskResumeAll+0x114>)
 8016778:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801677a:	4b36      	ldr	r3, [pc, #216]	; (8016854 <xTaskResumeAll+0x114>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d161      	bne.n	8016846 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016782:	4b35      	ldr	r3, [pc, #212]	; (8016858 <xTaskResumeAll+0x118>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d05d      	beq.n	8016846 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801678a:	e02e      	b.n	80167ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801678c:	4b33      	ldr	r3, [pc, #204]	; (801685c <xTaskResumeAll+0x11c>)
 801678e:	68db      	ldr	r3, [r3, #12]
 8016790:	68db      	ldr	r3, [r3, #12]
 8016792:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	3318      	adds	r3, #24
 8016798:	4618      	mov	r0, r3
 801679a:	f7fe fd78 	bl	801528e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	3304      	adds	r3, #4
 80167a2:	4618      	mov	r0, r3
 80167a4:	f7fe fd73 	bl	801528e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167ac:	2201      	movs	r2, #1
 80167ae:	409a      	lsls	r2, r3
 80167b0:	4b2b      	ldr	r3, [pc, #172]	; (8016860 <xTaskResumeAll+0x120>)
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	4313      	orrs	r3, r2
 80167b6:	4a2a      	ldr	r2, [pc, #168]	; (8016860 <xTaskResumeAll+0x120>)
 80167b8:	6013      	str	r3, [r2, #0]
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167be:	4613      	mov	r3, r2
 80167c0:	009b      	lsls	r3, r3, #2
 80167c2:	4413      	add	r3, r2
 80167c4:	009b      	lsls	r3, r3, #2
 80167c6:	4a27      	ldr	r2, [pc, #156]	; (8016864 <xTaskResumeAll+0x124>)
 80167c8:	441a      	add	r2, r3
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	3304      	adds	r3, #4
 80167ce:	4619      	mov	r1, r3
 80167d0:	4610      	mov	r0, r2
 80167d2:	f7fe fd01 	bl	80151d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167da:	4b23      	ldr	r3, [pc, #140]	; (8016868 <xTaskResumeAll+0x128>)
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d302      	bcc.n	80167ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80167e4:	4b21      	ldr	r3, [pc, #132]	; (801686c <xTaskResumeAll+0x12c>)
 80167e6:	2201      	movs	r2, #1
 80167e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80167ea:	4b1c      	ldr	r3, [pc, #112]	; (801685c <xTaskResumeAll+0x11c>)
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d1cc      	bne.n	801678c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d001      	beq.n	80167fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80167f8:	f000 fb7e 	bl	8016ef8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80167fc:	4b1c      	ldr	r3, [pc, #112]	; (8016870 <xTaskResumeAll+0x130>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d010      	beq.n	801682a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016808:	f000 f844 	bl	8016894 <xTaskIncrementTick>
 801680c:	4603      	mov	r3, r0
 801680e:	2b00      	cmp	r3, #0
 8016810:	d002      	beq.n	8016818 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8016812:	4b16      	ldr	r3, [pc, #88]	; (801686c <xTaskResumeAll+0x12c>)
 8016814:	2201      	movs	r2, #1
 8016816:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	3b01      	subs	r3, #1
 801681c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d1f1      	bne.n	8016808 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8016824:	4b12      	ldr	r3, [pc, #72]	; (8016870 <xTaskResumeAll+0x130>)
 8016826:	2200      	movs	r2, #0
 8016828:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801682a:	4b10      	ldr	r3, [pc, #64]	; (801686c <xTaskResumeAll+0x12c>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d009      	beq.n	8016846 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016832:	2301      	movs	r3, #1
 8016834:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016836:	4b0f      	ldr	r3, [pc, #60]	; (8016874 <xTaskResumeAll+0x134>)
 8016838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801683c:	601a      	str	r2, [r3, #0]
 801683e:	f3bf 8f4f 	dsb	sy
 8016842:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016846:	f001 fa01 	bl	8017c4c <vPortExitCritical>

	return xAlreadyYielded;
 801684a:	68bb      	ldr	r3, [r7, #8]
}
 801684c:	4618      	mov	r0, r3
 801684e:	3710      	adds	r7, #16
 8016850:	46bd      	mov	sp, r7
 8016852:	bd80      	pop	{r7, pc}
 8016854:	20002d48 	.word	0x20002d48
 8016858:	20002d20 	.word	0x20002d20
 801685c:	20002ce0 	.word	0x20002ce0
 8016860:	20002d28 	.word	0x20002d28
 8016864:	20002c24 	.word	0x20002c24
 8016868:	20002c20 	.word	0x20002c20
 801686c:	20002d34 	.word	0x20002d34
 8016870:	20002d30 	.word	0x20002d30
 8016874:	e000ed04 	.word	0xe000ed04

08016878 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016878:	b480      	push	{r7}
 801687a:	b083      	sub	sp, #12
 801687c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801687e:	4b04      	ldr	r3, [pc, #16]	; (8016890 <xTaskGetTickCount+0x18>)
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016884:	687b      	ldr	r3, [r7, #4]
}
 8016886:	4618      	mov	r0, r3
 8016888:	370c      	adds	r7, #12
 801688a:	46bd      	mov	sp, r7
 801688c:	bc80      	pop	{r7}
 801688e:	4770      	bx	lr
 8016890:	20002d24 	.word	0x20002d24

08016894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b086      	sub	sp, #24
 8016898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801689a:	2300      	movs	r3, #0
 801689c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801689e:	4b4e      	ldr	r3, [pc, #312]	; (80169d8 <xTaskIncrementTick+0x144>)
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	f040 8088 	bne.w	80169b8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80168a8:	4b4c      	ldr	r3, [pc, #304]	; (80169dc <xTaskIncrementTick+0x148>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	3301      	adds	r3, #1
 80168ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80168b0:	4a4a      	ldr	r2, [pc, #296]	; (80169dc <xTaskIncrementTick+0x148>)
 80168b2:	693b      	ldr	r3, [r7, #16]
 80168b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d120      	bne.n	80168fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80168bc:	4b48      	ldr	r3, [pc, #288]	; (80169e0 <xTaskIncrementTick+0x14c>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d00a      	beq.n	80168dc <xTaskIncrementTick+0x48>
	__asm volatile
 80168c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ca:	f383 8811 	msr	BASEPRI, r3
 80168ce:	f3bf 8f6f 	isb	sy
 80168d2:	f3bf 8f4f 	dsb	sy
 80168d6:	603b      	str	r3, [r7, #0]
}
 80168d8:	bf00      	nop
 80168da:	e7fe      	b.n	80168da <xTaskIncrementTick+0x46>
 80168dc:	4b40      	ldr	r3, [pc, #256]	; (80169e0 <xTaskIncrementTick+0x14c>)
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	60fb      	str	r3, [r7, #12]
 80168e2:	4b40      	ldr	r3, [pc, #256]	; (80169e4 <xTaskIncrementTick+0x150>)
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	4a3e      	ldr	r2, [pc, #248]	; (80169e0 <xTaskIncrementTick+0x14c>)
 80168e8:	6013      	str	r3, [r2, #0]
 80168ea:	4a3e      	ldr	r2, [pc, #248]	; (80169e4 <xTaskIncrementTick+0x150>)
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	6013      	str	r3, [r2, #0]
 80168f0:	4b3d      	ldr	r3, [pc, #244]	; (80169e8 <xTaskIncrementTick+0x154>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	3301      	adds	r3, #1
 80168f6:	4a3c      	ldr	r2, [pc, #240]	; (80169e8 <xTaskIncrementTick+0x154>)
 80168f8:	6013      	str	r3, [r2, #0]
 80168fa:	f000 fafd 	bl	8016ef8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80168fe:	4b3b      	ldr	r3, [pc, #236]	; (80169ec <xTaskIncrementTick+0x158>)
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	693a      	ldr	r2, [r7, #16]
 8016904:	429a      	cmp	r2, r3
 8016906:	d348      	bcc.n	801699a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016908:	4b35      	ldr	r3, [pc, #212]	; (80169e0 <xTaskIncrementTick+0x14c>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d104      	bne.n	801691c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016912:	4b36      	ldr	r3, [pc, #216]	; (80169ec <xTaskIncrementTick+0x158>)
 8016914:	f04f 32ff 	mov.w	r2, #4294967295
 8016918:	601a      	str	r2, [r3, #0]
					break;
 801691a:	e03e      	b.n	801699a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801691c:	4b30      	ldr	r3, [pc, #192]	; (80169e0 <xTaskIncrementTick+0x14c>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	68db      	ldr	r3, [r3, #12]
 8016922:	68db      	ldr	r3, [r3, #12]
 8016924:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016926:	68bb      	ldr	r3, [r7, #8]
 8016928:	685b      	ldr	r3, [r3, #4]
 801692a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801692c:	693a      	ldr	r2, [r7, #16]
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	429a      	cmp	r2, r3
 8016932:	d203      	bcs.n	801693c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016934:	4a2d      	ldr	r2, [pc, #180]	; (80169ec <xTaskIncrementTick+0x158>)
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801693a:	e02e      	b.n	801699a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801693c:	68bb      	ldr	r3, [r7, #8]
 801693e:	3304      	adds	r3, #4
 8016940:	4618      	mov	r0, r3
 8016942:	f7fe fca4 	bl	801528e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016946:	68bb      	ldr	r3, [r7, #8]
 8016948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801694a:	2b00      	cmp	r3, #0
 801694c:	d004      	beq.n	8016958 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	3318      	adds	r3, #24
 8016952:	4618      	mov	r0, r3
 8016954:	f7fe fc9b 	bl	801528e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801695c:	2201      	movs	r2, #1
 801695e:	409a      	lsls	r2, r3
 8016960:	4b23      	ldr	r3, [pc, #140]	; (80169f0 <xTaskIncrementTick+0x15c>)
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	4313      	orrs	r3, r2
 8016966:	4a22      	ldr	r2, [pc, #136]	; (80169f0 <xTaskIncrementTick+0x15c>)
 8016968:	6013      	str	r3, [r2, #0]
 801696a:	68bb      	ldr	r3, [r7, #8]
 801696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801696e:	4613      	mov	r3, r2
 8016970:	009b      	lsls	r3, r3, #2
 8016972:	4413      	add	r3, r2
 8016974:	009b      	lsls	r3, r3, #2
 8016976:	4a1f      	ldr	r2, [pc, #124]	; (80169f4 <xTaskIncrementTick+0x160>)
 8016978:	441a      	add	r2, r3
 801697a:	68bb      	ldr	r3, [r7, #8]
 801697c:	3304      	adds	r3, #4
 801697e:	4619      	mov	r1, r3
 8016980:	4610      	mov	r0, r2
 8016982:	f7fe fc29 	bl	80151d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801698a:	4b1b      	ldr	r3, [pc, #108]	; (80169f8 <xTaskIncrementTick+0x164>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016990:	429a      	cmp	r2, r3
 8016992:	d3b9      	bcc.n	8016908 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016994:	2301      	movs	r3, #1
 8016996:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016998:	e7b6      	b.n	8016908 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801699a:	4b17      	ldr	r3, [pc, #92]	; (80169f8 <xTaskIncrementTick+0x164>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169a0:	4914      	ldr	r1, [pc, #80]	; (80169f4 <xTaskIncrementTick+0x160>)
 80169a2:	4613      	mov	r3, r2
 80169a4:	009b      	lsls	r3, r3, #2
 80169a6:	4413      	add	r3, r2
 80169a8:	009b      	lsls	r3, r3, #2
 80169aa:	440b      	add	r3, r1
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2b01      	cmp	r3, #1
 80169b0:	d907      	bls.n	80169c2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80169b2:	2301      	movs	r3, #1
 80169b4:	617b      	str	r3, [r7, #20]
 80169b6:	e004      	b.n	80169c2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80169b8:	4b10      	ldr	r3, [pc, #64]	; (80169fc <xTaskIncrementTick+0x168>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	3301      	adds	r3, #1
 80169be:	4a0f      	ldr	r2, [pc, #60]	; (80169fc <xTaskIncrementTick+0x168>)
 80169c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80169c2:	4b0f      	ldr	r3, [pc, #60]	; (8016a00 <xTaskIncrementTick+0x16c>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d001      	beq.n	80169ce <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80169ca:	2301      	movs	r3, #1
 80169cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80169ce:	697b      	ldr	r3, [r7, #20]
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	3718      	adds	r7, #24
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd80      	pop	{r7, pc}
 80169d8:	20002d48 	.word	0x20002d48
 80169dc:	20002d24 	.word	0x20002d24
 80169e0:	20002cd8 	.word	0x20002cd8
 80169e4:	20002cdc 	.word	0x20002cdc
 80169e8:	20002d38 	.word	0x20002d38
 80169ec:	20002d40 	.word	0x20002d40
 80169f0:	20002d28 	.word	0x20002d28
 80169f4:	20002c24 	.word	0x20002c24
 80169f8:	20002c20 	.word	0x20002c20
 80169fc:	20002d30 	.word	0x20002d30
 8016a00:	20002d34 	.word	0x20002d34

08016a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b088      	sub	sp, #32
 8016a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016a0a:	4b3c      	ldr	r3, [pc, #240]	; (8016afc <vTaskSwitchContext+0xf8>)
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d003      	beq.n	8016a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016a12:	4b3b      	ldr	r3, [pc, #236]	; (8016b00 <vTaskSwitchContext+0xfc>)
 8016a14:	2201      	movs	r2, #1
 8016a16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016a18:	e06b      	b.n	8016af2 <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8016a1a:	4b39      	ldr	r3, [pc, #228]	; (8016b00 <vTaskSwitchContext+0xfc>)
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016a20:	4b38      	ldr	r3, [pc, #224]	; (8016b04 <vTaskSwitchContext+0x100>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a26:	61fb      	str	r3, [r7, #28]
 8016a28:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8016a2c:	61bb      	str	r3, [r7, #24]
 8016a2e:	69fb      	ldr	r3, [r7, #28]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	69ba      	ldr	r2, [r7, #24]
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d111      	bne.n	8016a5c <vTaskSwitchContext+0x58>
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	3304      	adds	r3, #4
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	69ba      	ldr	r2, [r7, #24]
 8016a40:	429a      	cmp	r2, r3
 8016a42:	d10b      	bne.n	8016a5c <vTaskSwitchContext+0x58>
 8016a44:	69fb      	ldr	r3, [r7, #28]
 8016a46:	3308      	adds	r3, #8
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	69ba      	ldr	r2, [r7, #24]
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d105      	bne.n	8016a5c <vTaskSwitchContext+0x58>
 8016a50:	69fb      	ldr	r3, [r7, #28]
 8016a52:	330c      	adds	r3, #12
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	69ba      	ldr	r2, [r7, #24]
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d008      	beq.n	8016a6e <vTaskSwitchContext+0x6a>
 8016a5c:	4b29      	ldr	r3, [pc, #164]	; (8016b04 <vTaskSwitchContext+0x100>)
 8016a5e:	681a      	ldr	r2, [r3, #0]
 8016a60:	4b28      	ldr	r3, [pc, #160]	; (8016b04 <vTaskSwitchContext+0x100>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	3334      	adds	r3, #52	; 0x34
 8016a66:	4619      	mov	r1, r3
 8016a68:	4610      	mov	r0, r2
 8016a6a:	f7f2 fdb9 	bl	80095e0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a6e:	4b26      	ldr	r3, [pc, #152]	; (8016b08 <vTaskSwitchContext+0x104>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	fab3 f383 	clz	r3, r3
 8016a7a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016a7c:	7afb      	ldrb	r3, [r7, #11]
 8016a7e:	f1c3 031f 	rsb	r3, r3, #31
 8016a82:	617b      	str	r3, [r7, #20]
 8016a84:	4921      	ldr	r1, [pc, #132]	; (8016b0c <vTaskSwitchContext+0x108>)
 8016a86:	697a      	ldr	r2, [r7, #20]
 8016a88:	4613      	mov	r3, r2
 8016a8a:	009b      	lsls	r3, r3, #2
 8016a8c:	4413      	add	r3, r2
 8016a8e:	009b      	lsls	r3, r3, #2
 8016a90:	440b      	add	r3, r1
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d10a      	bne.n	8016aae <vTaskSwitchContext+0xaa>
	__asm volatile
 8016a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a9c:	f383 8811 	msr	BASEPRI, r3
 8016aa0:	f3bf 8f6f 	isb	sy
 8016aa4:	f3bf 8f4f 	dsb	sy
 8016aa8:	607b      	str	r3, [r7, #4]
}
 8016aaa:	bf00      	nop
 8016aac:	e7fe      	b.n	8016aac <vTaskSwitchContext+0xa8>
 8016aae:	697a      	ldr	r2, [r7, #20]
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	009b      	lsls	r3, r3, #2
 8016ab4:	4413      	add	r3, r2
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	4a14      	ldr	r2, [pc, #80]	; (8016b0c <vTaskSwitchContext+0x108>)
 8016aba:	4413      	add	r3, r2
 8016abc:	613b      	str	r3, [r7, #16]
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	685b      	ldr	r3, [r3, #4]
 8016ac2:	685a      	ldr	r2, [r3, #4]
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	605a      	str	r2, [r3, #4]
 8016ac8:	693b      	ldr	r3, [r7, #16]
 8016aca:	685a      	ldr	r2, [r3, #4]
 8016acc:	693b      	ldr	r3, [r7, #16]
 8016ace:	3308      	adds	r3, #8
 8016ad0:	429a      	cmp	r2, r3
 8016ad2:	d104      	bne.n	8016ade <vTaskSwitchContext+0xda>
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	685b      	ldr	r3, [r3, #4]
 8016ad8:	685a      	ldr	r2, [r3, #4]
 8016ada:	693b      	ldr	r3, [r7, #16]
 8016adc:	605a      	str	r2, [r3, #4]
 8016ade:	693b      	ldr	r3, [r7, #16]
 8016ae0:	685b      	ldr	r3, [r3, #4]
 8016ae2:	68db      	ldr	r3, [r3, #12]
 8016ae4:	4a07      	ldr	r2, [pc, #28]	; (8016b04 <vTaskSwitchContext+0x100>)
 8016ae6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016ae8:	4b06      	ldr	r3, [pc, #24]	; (8016b04 <vTaskSwitchContext+0x100>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	3350      	adds	r3, #80	; 0x50
 8016aee:	4a08      	ldr	r2, [pc, #32]	; (8016b10 <vTaskSwitchContext+0x10c>)
 8016af0:	6013      	str	r3, [r2, #0]
}
 8016af2:	bf00      	nop
 8016af4:	3720      	adds	r7, #32
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}
 8016afa:	bf00      	nop
 8016afc:	20002d48 	.word	0x20002d48
 8016b00:	20002d34 	.word	0x20002d34
 8016b04:	20002c20 	.word	0x20002c20
 8016b08:	20002d28 	.word	0x20002d28
 8016b0c:	20002c24 	.word	0x20002c24
 8016b10:	20000098 	.word	0x20000098

08016b14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b084      	sub	sp, #16
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d10a      	bne.n	8016b3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b28:	f383 8811 	msr	BASEPRI, r3
 8016b2c:	f3bf 8f6f 	isb	sy
 8016b30:	f3bf 8f4f 	dsb	sy
 8016b34:	60fb      	str	r3, [r7, #12]
}
 8016b36:	bf00      	nop
 8016b38:	e7fe      	b.n	8016b38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016b3a:	4b07      	ldr	r3, [pc, #28]	; (8016b58 <vTaskPlaceOnEventList+0x44>)
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	3318      	adds	r3, #24
 8016b40:	4619      	mov	r1, r3
 8016b42:	6878      	ldr	r0, [r7, #4]
 8016b44:	f7fe fb6b 	bl	801521e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016b48:	2101      	movs	r1, #1
 8016b4a:	6838      	ldr	r0, [r7, #0]
 8016b4c:	f000 fbc6 	bl	80172dc <prvAddCurrentTaskToDelayedList>
}
 8016b50:	bf00      	nop
 8016b52:	3710      	adds	r7, #16
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	20002c20 	.word	0x20002c20

08016b5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b086      	sub	sp, #24
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	60f8      	str	r0, [r7, #12]
 8016b64:	60b9      	str	r1, [r7, #8]
 8016b66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d10a      	bne.n	8016b84 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b72:	f383 8811 	msr	BASEPRI, r3
 8016b76:	f3bf 8f6f 	isb	sy
 8016b7a:	f3bf 8f4f 	dsb	sy
 8016b7e:	617b      	str	r3, [r7, #20]
}
 8016b80:	bf00      	nop
 8016b82:	e7fe      	b.n	8016b82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016b84:	4b0a      	ldr	r3, [pc, #40]	; (8016bb0 <vTaskPlaceOnEventListRestricted+0x54>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	3318      	adds	r3, #24
 8016b8a:	4619      	mov	r1, r3
 8016b8c:	68f8      	ldr	r0, [r7, #12]
 8016b8e:	f7fe fb23 	bl	80151d8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d002      	beq.n	8016b9e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016b98:	f04f 33ff 	mov.w	r3, #4294967295
 8016b9c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016b9e:	6879      	ldr	r1, [r7, #4]
 8016ba0:	68b8      	ldr	r0, [r7, #8]
 8016ba2:	f000 fb9b 	bl	80172dc <prvAddCurrentTaskToDelayedList>
	}
 8016ba6:	bf00      	nop
 8016ba8:	3718      	adds	r7, #24
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}
 8016bae:	bf00      	nop
 8016bb0:	20002c20 	.word	0x20002c20

08016bb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b086      	sub	sp, #24
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	68db      	ldr	r3, [r3, #12]
 8016bc0:	68db      	ldr	r3, [r3, #12]
 8016bc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d10a      	bne.n	8016be0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bce:	f383 8811 	msr	BASEPRI, r3
 8016bd2:	f3bf 8f6f 	isb	sy
 8016bd6:	f3bf 8f4f 	dsb	sy
 8016bda:	60fb      	str	r3, [r7, #12]
}
 8016bdc:	bf00      	nop
 8016bde:	e7fe      	b.n	8016bde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016be0:	693b      	ldr	r3, [r7, #16]
 8016be2:	3318      	adds	r3, #24
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7fe fb52 	bl	801528e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016bea:	4b1d      	ldr	r3, [pc, #116]	; (8016c60 <xTaskRemoveFromEventList+0xac>)
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d11c      	bne.n	8016c2c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	3304      	adds	r3, #4
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f7fe fb49 	bl	801528e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016bfc:	693b      	ldr	r3, [r7, #16]
 8016bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c00:	2201      	movs	r2, #1
 8016c02:	409a      	lsls	r2, r3
 8016c04:	4b17      	ldr	r3, [pc, #92]	; (8016c64 <xTaskRemoveFromEventList+0xb0>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	4313      	orrs	r3, r2
 8016c0a:	4a16      	ldr	r2, [pc, #88]	; (8016c64 <xTaskRemoveFromEventList+0xb0>)
 8016c0c:	6013      	str	r3, [r2, #0]
 8016c0e:	693b      	ldr	r3, [r7, #16]
 8016c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c12:	4613      	mov	r3, r2
 8016c14:	009b      	lsls	r3, r3, #2
 8016c16:	4413      	add	r3, r2
 8016c18:	009b      	lsls	r3, r3, #2
 8016c1a:	4a13      	ldr	r2, [pc, #76]	; (8016c68 <xTaskRemoveFromEventList+0xb4>)
 8016c1c:	441a      	add	r2, r3
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	3304      	adds	r3, #4
 8016c22:	4619      	mov	r1, r3
 8016c24:	4610      	mov	r0, r2
 8016c26:	f7fe fad7 	bl	80151d8 <vListInsertEnd>
 8016c2a:	e005      	b.n	8016c38 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016c2c:	693b      	ldr	r3, [r7, #16]
 8016c2e:	3318      	adds	r3, #24
 8016c30:	4619      	mov	r1, r3
 8016c32:	480e      	ldr	r0, [pc, #56]	; (8016c6c <xTaskRemoveFromEventList+0xb8>)
 8016c34:	f7fe fad0 	bl	80151d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016c38:	693b      	ldr	r3, [r7, #16]
 8016c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c3c:	4b0c      	ldr	r3, [pc, #48]	; (8016c70 <xTaskRemoveFromEventList+0xbc>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c42:	429a      	cmp	r2, r3
 8016c44:	d905      	bls.n	8016c52 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016c46:	2301      	movs	r3, #1
 8016c48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016c4a:	4b0a      	ldr	r3, [pc, #40]	; (8016c74 <xTaskRemoveFromEventList+0xc0>)
 8016c4c:	2201      	movs	r2, #1
 8016c4e:	601a      	str	r2, [r3, #0]
 8016c50:	e001      	b.n	8016c56 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8016c52:	2300      	movs	r3, #0
 8016c54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016c56:	697b      	ldr	r3, [r7, #20]
}
 8016c58:	4618      	mov	r0, r3
 8016c5a:	3718      	adds	r7, #24
 8016c5c:	46bd      	mov	sp, r7
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	20002d48 	.word	0x20002d48
 8016c64:	20002d28 	.word	0x20002d28
 8016c68:	20002c24 	.word	0x20002c24
 8016c6c:	20002ce0 	.word	0x20002ce0
 8016c70:	20002c20 	.word	0x20002c20
 8016c74:	20002d34 	.word	0x20002d34

08016c78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016c78:	b480      	push	{r7}
 8016c7a:	b083      	sub	sp, #12
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016c80:	4b06      	ldr	r3, [pc, #24]	; (8016c9c <vTaskInternalSetTimeOutState+0x24>)
 8016c82:	681a      	ldr	r2, [r3, #0]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016c88:	4b05      	ldr	r3, [pc, #20]	; (8016ca0 <vTaskInternalSetTimeOutState+0x28>)
 8016c8a:	681a      	ldr	r2, [r3, #0]
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	605a      	str	r2, [r3, #4]
}
 8016c90:	bf00      	nop
 8016c92:	370c      	adds	r7, #12
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bc80      	pop	{r7}
 8016c98:	4770      	bx	lr
 8016c9a:	bf00      	nop
 8016c9c:	20002d38 	.word	0x20002d38
 8016ca0:	20002d24 	.word	0x20002d24

08016ca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b088      	sub	sp, #32
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d10a      	bne.n	8016cca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb8:	f383 8811 	msr	BASEPRI, r3
 8016cbc:	f3bf 8f6f 	isb	sy
 8016cc0:	f3bf 8f4f 	dsb	sy
 8016cc4:	613b      	str	r3, [r7, #16]
}
 8016cc6:	bf00      	nop
 8016cc8:	e7fe      	b.n	8016cc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016cca:	683b      	ldr	r3, [r7, #0]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d10a      	bne.n	8016ce6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cd4:	f383 8811 	msr	BASEPRI, r3
 8016cd8:	f3bf 8f6f 	isb	sy
 8016cdc:	f3bf 8f4f 	dsb	sy
 8016ce0:	60fb      	str	r3, [r7, #12]
}
 8016ce2:	bf00      	nop
 8016ce4:	e7fe      	b.n	8016ce4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016ce6:	f000 ff81 	bl	8017bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016cea:	4b1d      	ldr	r3, [pc, #116]	; (8016d60 <xTaskCheckForTimeOut+0xbc>)
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	685b      	ldr	r3, [r3, #4]
 8016cf4:	69ba      	ldr	r2, [r7, #24]
 8016cf6:	1ad3      	subs	r3, r2, r3
 8016cf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016cfa:	683b      	ldr	r3, [r7, #0]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d02:	d102      	bne.n	8016d0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016d04:	2300      	movs	r3, #0
 8016d06:	61fb      	str	r3, [r7, #28]
 8016d08:	e023      	b.n	8016d52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	681a      	ldr	r2, [r3, #0]
 8016d0e:	4b15      	ldr	r3, [pc, #84]	; (8016d64 <xTaskCheckForTimeOut+0xc0>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	429a      	cmp	r2, r3
 8016d14:	d007      	beq.n	8016d26 <xTaskCheckForTimeOut+0x82>
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	69ba      	ldr	r2, [r7, #24]
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d302      	bcc.n	8016d26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016d20:	2301      	movs	r3, #1
 8016d22:	61fb      	str	r3, [r7, #28]
 8016d24:	e015      	b.n	8016d52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016d26:	683b      	ldr	r3, [r7, #0]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	697a      	ldr	r2, [r7, #20]
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d20b      	bcs.n	8016d48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016d30:	683b      	ldr	r3, [r7, #0]
 8016d32:	681a      	ldr	r2, [r3, #0]
 8016d34:	697b      	ldr	r3, [r7, #20]
 8016d36:	1ad2      	subs	r2, r2, r3
 8016d38:	683b      	ldr	r3, [r7, #0]
 8016d3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f7ff ff9b 	bl	8016c78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016d42:	2300      	movs	r3, #0
 8016d44:	61fb      	str	r3, [r7, #28]
 8016d46:	e004      	b.n	8016d52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016d4e:	2301      	movs	r3, #1
 8016d50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016d52:	f000 ff7b 	bl	8017c4c <vPortExitCritical>

	return xReturn;
 8016d56:	69fb      	ldr	r3, [r7, #28]
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	3720      	adds	r7, #32
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bd80      	pop	{r7, pc}
 8016d60:	20002d24 	.word	0x20002d24
 8016d64:	20002d38 	.word	0x20002d38

08016d68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016d68:	b480      	push	{r7}
 8016d6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016d6c:	4b03      	ldr	r3, [pc, #12]	; (8016d7c <vTaskMissedYield+0x14>)
 8016d6e:	2201      	movs	r2, #1
 8016d70:	601a      	str	r2, [r3, #0]
}
 8016d72:	bf00      	nop
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bc80      	pop	{r7}
 8016d78:	4770      	bx	lr
 8016d7a:	bf00      	nop
 8016d7c:	20002d34 	.word	0x20002d34

08016d80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b082      	sub	sp, #8
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016d88:	f000 f854 	bl	8016e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016d8c:	4b07      	ldr	r3, [pc, #28]	; (8016dac <prvIdleTask+0x2c>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	2b01      	cmp	r3, #1
 8016d92:	d907      	bls.n	8016da4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8016d94:	4b06      	ldr	r3, [pc, #24]	; (8016db0 <prvIdleTask+0x30>)
 8016d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d9a:	601a      	str	r2, [r3, #0]
 8016d9c:	f3bf 8f4f 	dsb	sy
 8016da0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016da4:	f7f2 fbe4 	bl	8009570 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016da8:	e7ee      	b.n	8016d88 <prvIdleTask+0x8>
 8016daa:	bf00      	nop
 8016dac:	20002c24 	.word	0x20002c24
 8016db0:	e000ed04 	.word	0xe000ed04

08016db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b082      	sub	sp, #8
 8016db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016dba:	2300      	movs	r3, #0
 8016dbc:	607b      	str	r3, [r7, #4]
 8016dbe:	e00c      	b.n	8016dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016dc0:	687a      	ldr	r2, [r7, #4]
 8016dc2:	4613      	mov	r3, r2
 8016dc4:	009b      	lsls	r3, r3, #2
 8016dc6:	4413      	add	r3, r2
 8016dc8:	009b      	lsls	r3, r3, #2
 8016dca:	4a12      	ldr	r2, [pc, #72]	; (8016e14 <prvInitialiseTaskLists+0x60>)
 8016dcc:	4413      	add	r3, r2
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7fe f9d7 	bl	8015182 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	3301      	adds	r3, #1
 8016dd8:	607b      	str	r3, [r7, #4]
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	2b06      	cmp	r3, #6
 8016dde:	d9ef      	bls.n	8016dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016de0:	480d      	ldr	r0, [pc, #52]	; (8016e18 <prvInitialiseTaskLists+0x64>)
 8016de2:	f7fe f9ce 	bl	8015182 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016de6:	480d      	ldr	r0, [pc, #52]	; (8016e1c <prvInitialiseTaskLists+0x68>)
 8016de8:	f7fe f9cb 	bl	8015182 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016dec:	480c      	ldr	r0, [pc, #48]	; (8016e20 <prvInitialiseTaskLists+0x6c>)
 8016dee:	f7fe f9c8 	bl	8015182 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016df2:	480c      	ldr	r0, [pc, #48]	; (8016e24 <prvInitialiseTaskLists+0x70>)
 8016df4:	f7fe f9c5 	bl	8015182 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016df8:	480b      	ldr	r0, [pc, #44]	; (8016e28 <prvInitialiseTaskLists+0x74>)
 8016dfa:	f7fe f9c2 	bl	8015182 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016dfe:	4b0b      	ldr	r3, [pc, #44]	; (8016e2c <prvInitialiseTaskLists+0x78>)
 8016e00:	4a05      	ldr	r2, [pc, #20]	; (8016e18 <prvInitialiseTaskLists+0x64>)
 8016e02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016e04:	4b0a      	ldr	r3, [pc, #40]	; (8016e30 <prvInitialiseTaskLists+0x7c>)
 8016e06:	4a05      	ldr	r2, [pc, #20]	; (8016e1c <prvInitialiseTaskLists+0x68>)
 8016e08:	601a      	str	r2, [r3, #0]
}
 8016e0a:	bf00      	nop
 8016e0c:	3708      	adds	r7, #8
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	20002c24 	.word	0x20002c24
 8016e18:	20002cb0 	.word	0x20002cb0
 8016e1c:	20002cc4 	.word	0x20002cc4
 8016e20:	20002ce0 	.word	0x20002ce0
 8016e24:	20002cf4 	.word	0x20002cf4
 8016e28:	20002d0c 	.word	0x20002d0c
 8016e2c:	20002cd8 	.word	0x20002cd8
 8016e30:	20002cdc 	.word	0x20002cdc

08016e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b082      	sub	sp, #8
 8016e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e3a:	e019      	b.n	8016e70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016e3c:	f000 fed6 	bl	8017bec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e40:	4b10      	ldr	r3, [pc, #64]	; (8016e84 <prvCheckTasksWaitingTermination+0x50>)
 8016e42:	68db      	ldr	r3, [r3, #12]
 8016e44:	68db      	ldr	r3, [r3, #12]
 8016e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	3304      	adds	r3, #4
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	f7fe fa1e 	bl	801528e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016e52:	4b0d      	ldr	r3, [pc, #52]	; (8016e88 <prvCheckTasksWaitingTermination+0x54>)
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	3b01      	subs	r3, #1
 8016e58:	4a0b      	ldr	r2, [pc, #44]	; (8016e88 <prvCheckTasksWaitingTermination+0x54>)
 8016e5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016e5c:	4b0b      	ldr	r3, [pc, #44]	; (8016e8c <prvCheckTasksWaitingTermination+0x58>)
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	3b01      	subs	r3, #1
 8016e62:	4a0a      	ldr	r2, [pc, #40]	; (8016e8c <prvCheckTasksWaitingTermination+0x58>)
 8016e64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016e66:	f000 fef1 	bl	8017c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016e6a:	6878      	ldr	r0, [r7, #4]
 8016e6c:	f000 f810 	bl	8016e90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e70:	4b06      	ldr	r3, [pc, #24]	; (8016e8c <prvCheckTasksWaitingTermination+0x58>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d1e1      	bne.n	8016e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016e78:	bf00      	nop
 8016e7a:	bf00      	nop
 8016e7c:	3708      	adds	r7, #8
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bd80      	pop	{r7, pc}
 8016e82:	bf00      	nop
 8016e84:	20002cf4 	.word	0x20002cf4
 8016e88:	20002d20 	.word	0x20002d20
 8016e8c:	20002d08 	.word	0x20002d08

08016e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b084      	sub	sp, #16
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	3350      	adds	r3, #80	; 0x50
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f001 ff9d 	bl	8018ddc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d108      	bne.n	8016ebe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f001 f865 	bl	8017f80 <vPortFree>
				vPortFree( pxTCB );
 8016eb6:	6878      	ldr	r0, [r7, #4]
 8016eb8:	f001 f862 	bl	8017f80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016ebc:	e018      	b.n	8016ef0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 8016ec4:	2b01      	cmp	r3, #1
 8016ec6:	d103      	bne.n	8016ed0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016ec8:	6878      	ldr	r0, [r7, #4]
 8016eca:	f001 f859 	bl	8017f80 <vPortFree>
	}
 8016ece:	e00f      	b.n	8016ef0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 8016ed6:	2b02      	cmp	r3, #2
 8016ed8:	d00a      	beq.n	8016ef0 <prvDeleteTCB+0x60>
	__asm volatile
 8016eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ede:	f383 8811 	msr	BASEPRI, r3
 8016ee2:	f3bf 8f6f 	isb	sy
 8016ee6:	f3bf 8f4f 	dsb	sy
 8016eea:	60fb      	str	r3, [r7, #12]
}
 8016eec:	bf00      	nop
 8016eee:	e7fe      	b.n	8016eee <prvDeleteTCB+0x5e>
	}
 8016ef0:	bf00      	nop
 8016ef2:	3710      	adds	r7, #16
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	bd80      	pop	{r7, pc}

08016ef8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016ef8:	b480      	push	{r7}
 8016efa:	b083      	sub	sp, #12
 8016efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016efe:	4b0c      	ldr	r3, [pc, #48]	; (8016f30 <prvResetNextTaskUnblockTime+0x38>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d104      	bne.n	8016f12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016f08:	4b0a      	ldr	r3, [pc, #40]	; (8016f34 <prvResetNextTaskUnblockTime+0x3c>)
 8016f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016f10:	e008      	b.n	8016f24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f12:	4b07      	ldr	r3, [pc, #28]	; (8016f30 <prvResetNextTaskUnblockTime+0x38>)
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	68db      	ldr	r3, [r3, #12]
 8016f18:	68db      	ldr	r3, [r3, #12]
 8016f1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	685b      	ldr	r3, [r3, #4]
 8016f20:	4a04      	ldr	r2, [pc, #16]	; (8016f34 <prvResetNextTaskUnblockTime+0x3c>)
 8016f22:	6013      	str	r3, [r2, #0]
}
 8016f24:	bf00      	nop
 8016f26:	370c      	adds	r7, #12
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bc80      	pop	{r7}
 8016f2c:	4770      	bx	lr
 8016f2e:	bf00      	nop
 8016f30:	20002cd8 	.word	0x20002cd8
 8016f34:	20002d40 	.word	0x20002d40

08016f38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016f38:	b480      	push	{r7}
 8016f3a:	b083      	sub	sp, #12
 8016f3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016f3e:	4b0b      	ldr	r3, [pc, #44]	; (8016f6c <xTaskGetSchedulerState+0x34>)
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d102      	bne.n	8016f4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016f46:	2301      	movs	r3, #1
 8016f48:	607b      	str	r3, [r7, #4]
 8016f4a:	e008      	b.n	8016f5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016f4c:	4b08      	ldr	r3, [pc, #32]	; (8016f70 <xTaskGetSchedulerState+0x38>)
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d102      	bne.n	8016f5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016f54:	2302      	movs	r3, #2
 8016f56:	607b      	str	r3, [r7, #4]
 8016f58:	e001      	b.n	8016f5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016f5e:	687b      	ldr	r3, [r7, #4]
	}
 8016f60:	4618      	mov	r0, r3
 8016f62:	370c      	adds	r7, #12
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bc80      	pop	{r7}
 8016f68:	4770      	bx	lr
 8016f6a:	bf00      	nop
 8016f6c:	20002d2c 	.word	0x20002d2c
 8016f70:	20002d48 	.word	0x20002d48

08016f74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b084      	sub	sp, #16
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016f80:	2300      	movs	r3, #0
 8016f82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d069      	beq.n	801705e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f8e:	4b36      	ldr	r3, [pc, #216]	; (8017068 <xTaskPriorityInherit+0xf4>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f94:	429a      	cmp	r2, r3
 8016f96:	d259      	bcs.n	801704c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016f98:	68bb      	ldr	r3, [r7, #8]
 8016f9a:	699b      	ldr	r3, [r3, #24]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	db06      	blt.n	8016fae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016fa0:	4b31      	ldr	r3, [pc, #196]	; (8017068 <xTaskPriorityInherit+0xf4>)
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fa6:	f1c3 0207 	rsb	r2, r3, #7
 8016faa:	68bb      	ldr	r3, [r7, #8]
 8016fac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016fae:	68bb      	ldr	r3, [r7, #8]
 8016fb0:	6959      	ldr	r1, [r3, #20]
 8016fb2:	68bb      	ldr	r3, [r7, #8]
 8016fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fb6:	4613      	mov	r3, r2
 8016fb8:	009b      	lsls	r3, r3, #2
 8016fba:	4413      	add	r3, r2
 8016fbc:	009b      	lsls	r3, r3, #2
 8016fbe:	4a2b      	ldr	r2, [pc, #172]	; (801706c <xTaskPriorityInherit+0xf8>)
 8016fc0:	4413      	add	r3, r2
 8016fc2:	4299      	cmp	r1, r3
 8016fc4:	d13a      	bne.n	801703c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	3304      	adds	r3, #4
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7fe f95f 	bl	801528e <uxListRemove>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d115      	bne.n	8017002 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8016fd6:	68bb      	ldr	r3, [r7, #8]
 8016fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fda:	4924      	ldr	r1, [pc, #144]	; (801706c <xTaskPriorityInherit+0xf8>)
 8016fdc:	4613      	mov	r3, r2
 8016fde:	009b      	lsls	r3, r3, #2
 8016fe0:	4413      	add	r3, r2
 8016fe2:	009b      	lsls	r3, r3, #2
 8016fe4:	440b      	add	r3, r1
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d10a      	bne.n	8017002 <xTaskPriorityInherit+0x8e>
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ff0:	2201      	movs	r2, #1
 8016ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8016ff6:	43da      	mvns	r2, r3
 8016ff8:	4b1d      	ldr	r3, [pc, #116]	; (8017070 <xTaskPriorityInherit+0xfc>)
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	4013      	ands	r3, r2
 8016ffe:	4a1c      	ldr	r2, [pc, #112]	; (8017070 <xTaskPriorityInherit+0xfc>)
 8017000:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017002:	4b19      	ldr	r3, [pc, #100]	; (8017068 <xTaskPriorityInherit+0xf4>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017010:	2201      	movs	r2, #1
 8017012:	409a      	lsls	r2, r3
 8017014:	4b16      	ldr	r3, [pc, #88]	; (8017070 <xTaskPriorityInherit+0xfc>)
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	4313      	orrs	r3, r2
 801701a:	4a15      	ldr	r2, [pc, #84]	; (8017070 <xTaskPriorityInherit+0xfc>)
 801701c:	6013      	str	r3, [r2, #0]
 801701e:	68bb      	ldr	r3, [r7, #8]
 8017020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017022:	4613      	mov	r3, r2
 8017024:	009b      	lsls	r3, r3, #2
 8017026:	4413      	add	r3, r2
 8017028:	009b      	lsls	r3, r3, #2
 801702a:	4a10      	ldr	r2, [pc, #64]	; (801706c <xTaskPriorityInherit+0xf8>)
 801702c:	441a      	add	r2, r3
 801702e:	68bb      	ldr	r3, [r7, #8]
 8017030:	3304      	adds	r3, #4
 8017032:	4619      	mov	r1, r3
 8017034:	4610      	mov	r0, r2
 8017036:	f7fe f8cf 	bl	80151d8 <vListInsertEnd>
 801703a:	e004      	b.n	8017046 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801703c:	4b0a      	ldr	r3, [pc, #40]	; (8017068 <xTaskPriorityInherit+0xf4>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017042:	68bb      	ldr	r3, [r7, #8]
 8017044:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017046:	2301      	movs	r3, #1
 8017048:	60fb      	str	r3, [r7, #12]
 801704a:	e008      	b.n	801705e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801704c:	68bb      	ldr	r3, [r7, #8]
 801704e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017050:	4b05      	ldr	r3, [pc, #20]	; (8017068 <xTaskPriorityInherit+0xf4>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017056:	429a      	cmp	r2, r3
 8017058:	d201      	bcs.n	801705e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801705a:	2301      	movs	r3, #1
 801705c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801705e:	68fb      	ldr	r3, [r7, #12]
	}
 8017060:	4618      	mov	r0, r3
 8017062:	3710      	adds	r7, #16
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}
 8017068:	20002c20 	.word	0x20002c20
 801706c:	20002c24 	.word	0x20002c24
 8017070:	20002d28 	.word	0x20002d28

08017074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017074:	b580      	push	{r7, lr}
 8017076:	b086      	sub	sp, #24
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017080:	2300      	movs	r3, #0
 8017082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d06e      	beq.n	8017168 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801708a:	4b3a      	ldr	r3, [pc, #232]	; (8017174 <xTaskPriorityDisinherit+0x100>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	693a      	ldr	r2, [r7, #16]
 8017090:	429a      	cmp	r2, r3
 8017092:	d00a      	beq.n	80170aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017098:	f383 8811 	msr	BASEPRI, r3
 801709c:	f3bf 8f6f 	isb	sy
 80170a0:	f3bf 8f4f 	dsb	sy
 80170a4:	60fb      	str	r3, [r7, #12]
}
 80170a6:	bf00      	nop
 80170a8:	e7fe      	b.n	80170a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80170aa:	693b      	ldr	r3, [r7, #16]
 80170ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d10a      	bne.n	80170c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80170b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170b6:	f383 8811 	msr	BASEPRI, r3
 80170ba:	f3bf 8f6f 	isb	sy
 80170be:	f3bf 8f4f 	dsb	sy
 80170c2:	60bb      	str	r3, [r7, #8]
}
 80170c4:	bf00      	nop
 80170c6:	e7fe      	b.n	80170c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80170c8:	693b      	ldr	r3, [r7, #16]
 80170ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170cc:	1e5a      	subs	r2, r3, #1
 80170ce:	693b      	ldr	r3, [r7, #16]
 80170d0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80170d2:	693b      	ldr	r3, [r7, #16]
 80170d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170d6:	693b      	ldr	r3, [r7, #16]
 80170d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170da:	429a      	cmp	r2, r3
 80170dc:	d044      	beq.n	8017168 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80170de:	693b      	ldr	r3, [r7, #16]
 80170e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d140      	bne.n	8017168 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80170e6:	693b      	ldr	r3, [r7, #16]
 80170e8:	3304      	adds	r3, #4
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7fe f8cf 	bl	801528e <uxListRemove>
 80170f0:	4603      	mov	r3, r0
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d115      	bne.n	8017122 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80170f6:	693b      	ldr	r3, [r7, #16]
 80170f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80170fa:	491f      	ldr	r1, [pc, #124]	; (8017178 <xTaskPriorityDisinherit+0x104>)
 80170fc:	4613      	mov	r3, r2
 80170fe:	009b      	lsls	r3, r3, #2
 8017100:	4413      	add	r3, r2
 8017102:	009b      	lsls	r3, r3, #2
 8017104:	440b      	add	r3, r1
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d10a      	bne.n	8017122 <xTaskPriorityDisinherit+0xae>
 801710c:	693b      	ldr	r3, [r7, #16]
 801710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017110:	2201      	movs	r2, #1
 8017112:	fa02 f303 	lsl.w	r3, r2, r3
 8017116:	43da      	mvns	r2, r3
 8017118:	4b18      	ldr	r3, [pc, #96]	; (801717c <xTaskPriorityDisinherit+0x108>)
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	4013      	ands	r3, r2
 801711e:	4a17      	ldr	r2, [pc, #92]	; (801717c <xTaskPriorityDisinherit+0x108>)
 8017120:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017122:	693b      	ldr	r3, [r7, #16]
 8017124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017126:	693b      	ldr	r3, [r7, #16]
 8017128:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801712e:	f1c3 0207 	rsb	r2, r3, #7
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017136:	693b      	ldr	r3, [r7, #16]
 8017138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801713a:	2201      	movs	r2, #1
 801713c:	409a      	lsls	r2, r3
 801713e:	4b0f      	ldr	r3, [pc, #60]	; (801717c <xTaskPriorityDisinherit+0x108>)
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	4313      	orrs	r3, r2
 8017144:	4a0d      	ldr	r2, [pc, #52]	; (801717c <xTaskPriorityDisinherit+0x108>)
 8017146:	6013      	str	r3, [r2, #0]
 8017148:	693b      	ldr	r3, [r7, #16]
 801714a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801714c:	4613      	mov	r3, r2
 801714e:	009b      	lsls	r3, r3, #2
 8017150:	4413      	add	r3, r2
 8017152:	009b      	lsls	r3, r3, #2
 8017154:	4a08      	ldr	r2, [pc, #32]	; (8017178 <xTaskPriorityDisinherit+0x104>)
 8017156:	441a      	add	r2, r3
 8017158:	693b      	ldr	r3, [r7, #16]
 801715a:	3304      	adds	r3, #4
 801715c:	4619      	mov	r1, r3
 801715e:	4610      	mov	r0, r2
 8017160:	f7fe f83a 	bl	80151d8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017164:	2301      	movs	r3, #1
 8017166:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017168:	697b      	ldr	r3, [r7, #20]
	}
 801716a:	4618      	mov	r0, r3
 801716c:	3718      	adds	r7, #24
 801716e:	46bd      	mov	sp, r7
 8017170:	bd80      	pop	{r7, pc}
 8017172:	bf00      	nop
 8017174:	20002c20 	.word	0x20002c20
 8017178:	20002c24 	.word	0x20002c24
 801717c:	20002d28 	.word	0x20002d28

08017180 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017180:	b580      	push	{r7, lr}
 8017182:	b088      	sub	sp, #32
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
 8017188:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801718e:	2301      	movs	r3, #1
 8017190:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	2b00      	cmp	r3, #0
 8017196:	f000 8083 	beq.w	80172a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801719a:	69bb      	ldr	r3, [r7, #24]
 801719c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d10a      	bne.n	80171b8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80171a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171a6:	f383 8811 	msr	BASEPRI, r3
 80171aa:	f3bf 8f6f 	isb	sy
 80171ae:	f3bf 8f4f 	dsb	sy
 80171b2:	60fb      	str	r3, [r7, #12]
}
 80171b4:	bf00      	nop
 80171b6:	e7fe      	b.n	80171b6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80171b8:	69bb      	ldr	r3, [r7, #24]
 80171ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171bc:	683a      	ldr	r2, [r7, #0]
 80171be:	429a      	cmp	r2, r3
 80171c0:	d902      	bls.n	80171c8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80171c2:	683b      	ldr	r3, [r7, #0]
 80171c4:	61fb      	str	r3, [r7, #28]
 80171c6:	e002      	b.n	80171ce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80171c8:	69bb      	ldr	r3, [r7, #24]
 80171ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171cc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80171ce:	69bb      	ldr	r3, [r7, #24]
 80171d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171d2:	69fa      	ldr	r2, [r7, #28]
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d063      	beq.n	80172a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80171d8:	69bb      	ldr	r3, [r7, #24]
 80171da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80171dc:	697a      	ldr	r2, [r7, #20]
 80171de:	429a      	cmp	r2, r3
 80171e0:	d15e      	bne.n	80172a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80171e2:	4b31      	ldr	r3, [pc, #196]	; (80172a8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	69ba      	ldr	r2, [r7, #24]
 80171e8:	429a      	cmp	r2, r3
 80171ea:	d10a      	bne.n	8017202 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80171ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171f0:	f383 8811 	msr	BASEPRI, r3
 80171f4:	f3bf 8f6f 	isb	sy
 80171f8:	f3bf 8f4f 	dsb	sy
 80171fc:	60bb      	str	r3, [r7, #8]
}
 80171fe:	bf00      	nop
 8017200:	e7fe      	b.n	8017200 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017202:	69bb      	ldr	r3, [r7, #24]
 8017204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017206:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017208:	69bb      	ldr	r3, [r7, #24]
 801720a:	69fa      	ldr	r2, [r7, #28]
 801720c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801720e:	69bb      	ldr	r3, [r7, #24]
 8017210:	699b      	ldr	r3, [r3, #24]
 8017212:	2b00      	cmp	r3, #0
 8017214:	db04      	blt.n	8017220 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017216:	69fb      	ldr	r3, [r7, #28]
 8017218:	f1c3 0207 	rsb	r2, r3, #7
 801721c:	69bb      	ldr	r3, [r7, #24]
 801721e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017220:	69bb      	ldr	r3, [r7, #24]
 8017222:	6959      	ldr	r1, [r3, #20]
 8017224:	693a      	ldr	r2, [r7, #16]
 8017226:	4613      	mov	r3, r2
 8017228:	009b      	lsls	r3, r3, #2
 801722a:	4413      	add	r3, r2
 801722c:	009b      	lsls	r3, r3, #2
 801722e:	4a1f      	ldr	r2, [pc, #124]	; (80172ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8017230:	4413      	add	r3, r2
 8017232:	4299      	cmp	r1, r3
 8017234:	d134      	bne.n	80172a0 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017236:	69bb      	ldr	r3, [r7, #24]
 8017238:	3304      	adds	r3, #4
 801723a:	4618      	mov	r0, r3
 801723c:	f7fe f827 	bl	801528e <uxListRemove>
 8017240:	4603      	mov	r3, r0
 8017242:	2b00      	cmp	r3, #0
 8017244:	d115      	bne.n	8017272 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017246:	69bb      	ldr	r3, [r7, #24]
 8017248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801724a:	4918      	ldr	r1, [pc, #96]	; (80172ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801724c:	4613      	mov	r3, r2
 801724e:	009b      	lsls	r3, r3, #2
 8017250:	4413      	add	r3, r2
 8017252:	009b      	lsls	r3, r3, #2
 8017254:	440b      	add	r3, r1
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d10a      	bne.n	8017272 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 801725c:	69bb      	ldr	r3, [r7, #24]
 801725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017260:	2201      	movs	r2, #1
 8017262:	fa02 f303 	lsl.w	r3, r2, r3
 8017266:	43da      	mvns	r2, r3
 8017268:	4b11      	ldr	r3, [pc, #68]	; (80172b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	4013      	ands	r3, r2
 801726e:	4a10      	ldr	r2, [pc, #64]	; (80172b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8017270:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017272:	69bb      	ldr	r3, [r7, #24]
 8017274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017276:	2201      	movs	r2, #1
 8017278:	409a      	lsls	r2, r3
 801727a:	4b0d      	ldr	r3, [pc, #52]	; (80172b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	4313      	orrs	r3, r2
 8017280:	4a0b      	ldr	r2, [pc, #44]	; (80172b0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8017282:	6013      	str	r3, [r2, #0]
 8017284:	69bb      	ldr	r3, [r7, #24]
 8017286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017288:	4613      	mov	r3, r2
 801728a:	009b      	lsls	r3, r3, #2
 801728c:	4413      	add	r3, r2
 801728e:	009b      	lsls	r3, r3, #2
 8017290:	4a06      	ldr	r2, [pc, #24]	; (80172ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8017292:	441a      	add	r2, r3
 8017294:	69bb      	ldr	r3, [r7, #24]
 8017296:	3304      	adds	r3, #4
 8017298:	4619      	mov	r1, r3
 801729a:	4610      	mov	r0, r2
 801729c:	f7fd ff9c 	bl	80151d8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80172a0:	bf00      	nop
 80172a2:	3720      	adds	r7, #32
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}
 80172a8:	20002c20 	.word	0x20002c20
 80172ac:	20002c24 	.word	0x20002c24
 80172b0:	20002d28 	.word	0x20002d28

080172b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80172b4:	b480      	push	{r7}
 80172b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80172b8:	4b07      	ldr	r3, [pc, #28]	; (80172d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d004      	beq.n	80172ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80172c0:	4b05      	ldr	r3, [pc, #20]	; (80172d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80172c6:	3201      	adds	r2, #1
 80172c8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80172ca:	4b03      	ldr	r3, [pc, #12]	; (80172d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80172cc:	681b      	ldr	r3, [r3, #0]
	}
 80172ce:	4618      	mov	r0, r3
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bc80      	pop	{r7}
 80172d4:	4770      	bx	lr
 80172d6:	bf00      	nop
 80172d8:	20002c20 	.word	0x20002c20

080172dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b084      	sub	sp, #16
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
 80172e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80172e6:	4b29      	ldr	r3, [pc, #164]	; (801738c <prvAddCurrentTaskToDelayedList+0xb0>)
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80172ec:	4b28      	ldr	r3, [pc, #160]	; (8017390 <prvAddCurrentTaskToDelayedList+0xb4>)
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	3304      	adds	r3, #4
 80172f2:	4618      	mov	r0, r3
 80172f4:	f7fd ffcb 	bl	801528e <uxListRemove>
 80172f8:	4603      	mov	r3, r0
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d10b      	bne.n	8017316 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80172fe:	4b24      	ldr	r3, [pc, #144]	; (8017390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017304:	2201      	movs	r2, #1
 8017306:	fa02 f303 	lsl.w	r3, r2, r3
 801730a:	43da      	mvns	r2, r3
 801730c:	4b21      	ldr	r3, [pc, #132]	; (8017394 <prvAddCurrentTaskToDelayedList+0xb8>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	4013      	ands	r3, r2
 8017312:	4a20      	ldr	r2, [pc, #128]	; (8017394 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017314:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801731c:	d10a      	bne.n	8017334 <prvAddCurrentTaskToDelayedList+0x58>
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d007      	beq.n	8017334 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017324:	4b1a      	ldr	r3, [pc, #104]	; (8017390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	3304      	adds	r3, #4
 801732a:	4619      	mov	r1, r3
 801732c:	481a      	ldr	r0, [pc, #104]	; (8017398 <prvAddCurrentTaskToDelayedList+0xbc>)
 801732e:	f7fd ff53 	bl	80151d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017332:	e026      	b.n	8017382 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017334:	68fa      	ldr	r2, [r7, #12]
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	4413      	add	r3, r2
 801733a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801733c:	4b14      	ldr	r3, [pc, #80]	; (8017390 <prvAddCurrentTaskToDelayedList+0xb4>)
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	68ba      	ldr	r2, [r7, #8]
 8017342:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017344:	68ba      	ldr	r2, [r7, #8]
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	429a      	cmp	r2, r3
 801734a:	d209      	bcs.n	8017360 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801734c:	4b13      	ldr	r3, [pc, #76]	; (801739c <prvAddCurrentTaskToDelayedList+0xc0>)
 801734e:	681a      	ldr	r2, [r3, #0]
 8017350:	4b0f      	ldr	r3, [pc, #60]	; (8017390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	3304      	adds	r3, #4
 8017356:	4619      	mov	r1, r3
 8017358:	4610      	mov	r0, r2
 801735a:	f7fd ff60 	bl	801521e <vListInsert>
}
 801735e:	e010      	b.n	8017382 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017360:	4b0f      	ldr	r3, [pc, #60]	; (80173a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8017362:	681a      	ldr	r2, [r3, #0]
 8017364:	4b0a      	ldr	r3, [pc, #40]	; (8017390 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	3304      	adds	r3, #4
 801736a:	4619      	mov	r1, r3
 801736c:	4610      	mov	r0, r2
 801736e:	f7fd ff56 	bl	801521e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017372:	4b0c      	ldr	r3, [pc, #48]	; (80173a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	68ba      	ldr	r2, [r7, #8]
 8017378:	429a      	cmp	r2, r3
 801737a:	d202      	bcs.n	8017382 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801737c:	4a09      	ldr	r2, [pc, #36]	; (80173a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801737e:	68bb      	ldr	r3, [r7, #8]
 8017380:	6013      	str	r3, [r2, #0]
}
 8017382:	bf00      	nop
 8017384:	3710      	adds	r7, #16
 8017386:	46bd      	mov	sp, r7
 8017388:	bd80      	pop	{r7, pc}
 801738a:	bf00      	nop
 801738c:	20002d24 	.word	0x20002d24
 8017390:	20002c20 	.word	0x20002c20
 8017394:	20002d28 	.word	0x20002d28
 8017398:	20002d0c 	.word	0x20002d0c
 801739c:	20002cdc 	.word	0x20002cdc
 80173a0:	20002cd8 	.word	0x20002cd8
 80173a4:	20002d40 	.word	0x20002d40

080173a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b08a      	sub	sp, #40	; 0x28
 80173ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80173ae:	2300      	movs	r3, #0
 80173b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80173b2:	f000 fae9 	bl	8017988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80173b6:	4b1c      	ldr	r3, [pc, #112]	; (8017428 <xTimerCreateTimerTask+0x80>)
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d021      	beq.n	8017402 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80173be:	2300      	movs	r3, #0
 80173c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80173c2:	2300      	movs	r3, #0
 80173c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80173c6:	1d3a      	adds	r2, r7, #4
 80173c8:	f107 0108 	add.w	r1, r7, #8
 80173cc:	f107 030c 	add.w	r3, r7, #12
 80173d0:	4618      	mov	r0, r3
 80173d2:	f7f2 f8eb 	bl	80095ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80173d6:	6879      	ldr	r1, [r7, #4]
 80173d8:	68bb      	ldr	r3, [r7, #8]
 80173da:	68fa      	ldr	r2, [r7, #12]
 80173dc:	9202      	str	r2, [sp, #8]
 80173de:	9301      	str	r3, [sp, #4]
 80173e0:	2302      	movs	r3, #2
 80173e2:	9300      	str	r3, [sp, #0]
 80173e4:	2300      	movs	r3, #0
 80173e6:	460a      	mov	r2, r1
 80173e8:	4910      	ldr	r1, [pc, #64]	; (801742c <xTimerCreateTimerTask+0x84>)
 80173ea:	4811      	ldr	r0, [pc, #68]	; (8017430 <xTimerCreateTimerTask+0x88>)
 80173ec:	f7fe ff18 	bl	8016220 <xTaskCreateStatic>
 80173f0:	4603      	mov	r3, r0
 80173f2:	4a10      	ldr	r2, [pc, #64]	; (8017434 <xTimerCreateTimerTask+0x8c>)
 80173f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80173f6:	4b0f      	ldr	r3, [pc, #60]	; (8017434 <xTimerCreateTimerTask+0x8c>)
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d001      	beq.n	8017402 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80173fe:	2301      	movs	r3, #1
 8017400:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d10a      	bne.n	801741e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801740c:	f383 8811 	msr	BASEPRI, r3
 8017410:	f3bf 8f6f 	isb	sy
 8017414:	f3bf 8f4f 	dsb	sy
 8017418:	613b      	str	r3, [r7, #16]
}
 801741a:	bf00      	nop
 801741c:	e7fe      	b.n	801741c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801741e:	697b      	ldr	r3, [r7, #20]
}
 8017420:	4618      	mov	r0, r3
 8017422:	3718      	adds	r7, #24
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}
 8017428:	20002d7c 	.word	0x20002d7c
 801742c:	0801f8f4 	.word	0x0801f8f4
 8017430:	0801756d 	.word	0x0801756d
 8017434:	20002d80 	.word	0x20002d80

08017438 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b08a      	sub	sp, #40	; 0x28
 801743c:	af00      	add	r7, sp, #0
 801743e:	60f8      	str	r0, [r7, #12]
 8017440:	60b9      	str	r1, [r7, #8]
 8017442:	607a      	str	r2, [r7, #4]
 8017444:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017446:	2300      	movs	r3, #0
 8017448:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d10a      	bne.n	8017466 <xTimerGenericCommand+0x2e>
	__asm volatile
 8017450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017454:	f383 8811 	msr	BASEPRI, r3
 8017458:	f3bf 8f6f 	isb	sy
 801745c:	f3bf 8f4f 	dsb	sy
 8017460:	623b      	str	r3, [r7, #32]
}
 8017462:	bf00      	nop
 8017464:	e7fe      	b.n	8017464 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017466:	4b1a      	ldr	r3, [pc, #104]	; (80174d0 <xTimerGenericCommand+0x98>)
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d02a      	beq.n	80174c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	2b05      	cmp	r3, #5
 801747e:	dc18      	bgt.n	80174b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017480:	f7ff fd5a 	bl	8016f38 <xTaskGetSchedulerState>
 8017484:	4603      	mov	r3, r0
 8017486:	2b02      	cmp	r3, #2
 8017488:	d109      	bne.n	801749e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801748a:	4b11      	ldr	r3, [pc, #68]	; (80174d0 <xTimerGenericCommand+0x98>)
 801748c:	6818      	ldr	r0, [r3, #0]
 801748e:	f107 0114 	add.w	r1, r7, #20
 8017492:	2300      	movs	r3, #0
 8017494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017496:	f7fe f8af 	bl	80155f8 <xQueueGenericSend>
 801749a:	6278      	str	r0, [r7, #36]	; 0x24
 801749c:	e012      	b.n	80174c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801749e:	4b0c      	ldr	r3, [pc, #48]	; (80174d0 <xTimerGenericCommand+0x98>)
 80174a0:	6818      	ldr	r0, [r3, #0]
 80174a2:	f107 0114 	add.w	r1, r7, #20
 80174a6:	2300      	movs	r3, #0
 80174a8:	2200      	movs	r2, #0
 80174aa:	f7fe f8a5 	bl	80155f8 <xQueueGenericSend>
 80174ae:	6278      	str	r0, [r7, #36]	; 0x24
 80174b0:	e008      	b.n	80174c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80174b2:	4b07      	ldr	r3, [pc, #28]	; (80174d0 <xTimerGenericCommand+0x98>)
 80174b4:	6818      	ldr	r0, [r3, #0]
 80174b6:	f107 0114 	add.w	r1, r7, #20
 80174ba:	2300      	movs	r3, #0
 80174bc:	683a      	ldr	r2, [r7, #0]
 80174be:	f7fe f999 	bl	80157f4 <xQueueGenericSendFromISR>
 80174c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80174c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	3728      	adds	r7, #40	; 0x28
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	bf00      	nop
 80174d0:	20002d7c 	.word	0x20002d7c

080174d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b088      	sub	sp, #32
 80174d8:	af02      	add	r7, sp, #8
 80174da:	6078      	str	r0, [r7, #4]
 80174dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80174de:	4b22      	ldr	r3, [pc, #136]	; (8017568 <prvProcessExpiredTimer+0x94>)
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	68db      	ldr	r3, [r3, #12]
 80174e4:	68db      	ldr	r3, [r3, #12]
 80174e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	3304      	adds	r3, #4
 80174ec:	4618      	mov	r0, r3
 80174ee:	f7fd fece 	bl	801528e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80174f8:	f003 0304 	and.w	r3, r3, #4
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d022      	beq.n	8017546 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017500:	697b      	ldr	r3, [r7, #20]
 8017502:	699a      	ldr	r2, [r3, #24]
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	18d1      	adds	r1, r2, r3
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	683a      	ldr	r2, [r7, #0]
 801750c:	6978      	ldr	r0, [r7, #20]
 801750e:	f000 f8cf 	bl	80176b0 <prvInsertTimerInActiveList>
 8017512:	4603      	mov	r3, r0
 8017514:	2b00      	cmp	r3, #0
 8017516:	d01f      	beq.n	8017558 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017518:	2300      	movs	r3, #0
 801751a:	9300      	str	r3, [sp, #0]
 801751c:	2300      	movs	r3, #0
 801751e:	687a      	ldr	r2, [r7, #4]
 8017520:	2100      	movs	r1, #0
 8017522:	6978      	ldr	r0, [r7, #20]
 8017524:	f7ff ff88 	bl	8017438 <xTimerGenericCommand>
 8017528:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801752a:	693b      	ldr	r3, [r7, #16]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d113      	bne.n	8017558 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017534:	f383 8811 	msr	BASEPRI, r3
 8017538:	f3bf 8f6f 	isb	sy
 801753c:	f3bf 8f4f 	dsb	sy
 8017540:	60fb      	str	r3, [r7, #12]
}
 8017542:	bf00      	nop
 8017544:	e7fe      	b.n	8017544 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017546:	697b      	ldr	r3, [r7, #20]
 8017548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801754c:	f023 0301 	bic.w	r3, r3, #1
 8017550:	b2da      	uxtb	r2, r3
 8017552:	697b      	ldr	r3, [r7, #20]
 8017554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017558:	697b      	ldr	r3, [r7, #20]
 801755a:	6a1b      	ldr	r3, [r3, #32]
 801755c:	6978      	ldr	r0, [r7, #20]
 801755e:	4798      	blx	r3
}
 8017560:	bf00      	nop
 8017562:	3718      	adds	r7, #24
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}
 8017568:	20002d74 	.word	0x20002d74

0801756c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b084      	sub	sp, #16
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017574:	f107 0308 	add.w	r3, r7, #8
 8017578:	4618      	mov	r0, r3
 801757a:	f000 f857 	bl	801762c <prvGetNextExpireTime>
 801757e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017580:	68bb      	ldr	r3, [r7, #8]
 8017582:	4619      	mov	r1, r3
 8017584:	68f8      	ldr	r0, [r7, #12]
 8017586:	f000 f803 	bl	8017590 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801758a:	f000 f8d3 	bl	8017734 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801758e:	e7f1      	b.n	8017574 <prvTimerTask+0x8>

08017590 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b084      	sub	sp, #16
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801759a:	f7ff f8c3 	bl	8016724 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801759e:	f107 0308 	add.w	r3, r7, #8
 80175a2:	4618      	mov	r0, r3
 80175a4:	f000 f864 	bl	8017670 <prvSampleTimeNow>
 80175a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80175aa:	68bb      	ldr	r3, [r7, #8]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d130      	bne.n	8017612 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d10a      	bne.n	80175cc <prvProcessTimerOrBlockTask+0x3c>
 80175b6:	687a      	ldr	r2, [r7, #4]
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	429a      	cmp	r2, r3
 80175bc:	d806      	bhi.n	80175cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80175be:	f7ff f8bf 	bl	8016740 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80175c2:	68f9      	ldr	r1, [r7, #12]
 80175c4:	6878      	ldr	r0, [r7, #4]
 80175c6:	f7ff ff85 	bl	80174d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80175ca:	e024      	b.n	8017616 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d008      	beq.n	80175e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80175d2:	4b13      	ldr	r3, [pc, #76]	; (8017620 <prvProcessTimerOrBlockTask+0x90>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d101      	bne.n	80175e0 <prvProcessTimerOrBlockTask+0x50>
 80175dc:	2301      	movs	r3, #1
 80175de:	e000      	b.n	80175e2 <prvProcessTimerOrBlockTask+0x52>
 80175e0:	2300      	movs	r3, #0
 80175e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80175e4:	4b0f      	ldr	r3, [pc, #60]	; (8017624 <prvProcessTimerOrBlockTask+0x94>)
 80175e6:	6818      	ldr	r0, [r3, #0]
 80175e8:	687a      	ldr	r2, [r7, #4]
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	1ad3      	subs	r3, r2, r3
 80175ee:	683a      	ldr	r2, [r7, #0]
 80175f0:	4619      	mov	r1, r3
 80175f2:	f7fe fde1 	bl	80161b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80175f6:	f7ff f8a3 	bl	8016740 <xTaskResumeAll>
 80175fa:	4603      	mov	r3, r0
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d10a      	bne.n	8017616 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017600:	4b09      	ldr	r3, [pc, #36]	; (8017628 <prvProcessTimerOrBlockTask+0x98>)
 8017602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017606:	601a      	str	r2, [r3, #0]
 8017608:	f3bf 8f4f 	dsb	sy
 801760c:	f3bf 8f6f 	isb	sy
}
 8017610:	e001      	b.n	8017616 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017612:	f7ff f895 	bl	8016740 <xTaskResumeAll>
}
 8017616:	bf00      	nop
 8017618:	3710      	adds	r7, #16
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop
 8017620:	20002d78 	.word	0x20002d78
 8017624:	20002d7c 	.word	0x20002d7c
 8017628:	e000ed04 	.word	0xe000ed04

0801762c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801762c:	b480      	push	{r7}
 801762e:	b085      	sub	sp, #20
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017634:	4b0d      	ldr	r3, [pc, #52]	; (801766c <prvGetNextExpireTime+0x40>)
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d101      	bne.n	8017642 <prvGetNextExpireTime+0x16>
 801763e:	2201      	movs	r2, #1
 8017640:	e000      	b.n	8017644 <prvGetNextExpireTime+0x18>
 8017642:	2200      	movs	r2, #0
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d105      	bne.n	801765c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017650:	4b06      	ldr	r3, [pc, #24]	; (801766c <prvGetNextExpireTime+0x40>)
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	68db      	ldr	r3, [r3, #12]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	60fb      	str	r3, [r7, #12]
 801765a:	e001      	b.n	8017660 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801765c:	2300      	movs	r3, #0
 801765e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017660:	68fb      	ldr	r3, [r7, #12]
}
 8017662:	4618      	mov	r0, r3
 8017664:	3714      	adds	r7, #20
 8017666:	46bd      	mov	sp, r7
 8017668:	bc80      	pop	{r7}
 801766a:	4770      	bx	lr
 801766c:	20002d74 	.word	0x20002d74

08017670 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b084      	sub	sp, #16
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017678:	f7ff f8fe 	bl	8016878 <xTaskGetTickCount>
 801767c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801767e:	4b0b      	ldr	r3, [pc, #44]	; (80176ac <prvSampleTimeNow+0x3c>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	68fa      	ldr	r2, [r7, #12]
 8017684:	429a      	cmp	r2, r3
 8017686:	d205      	bcs.n	8017694 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017688:	f000 f91a 	bl	80178c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2201      	movs	r2, #1
 8017690:	601a      	str	r2, [r3, #0]
 8017692:	e002      	b.n	801769a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	2200      	movs	r2, #0
 8017698:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801769a:	4a04      	ldr	r2, [pc, #16]	; (80176ac <prvSampleTimeNow+0x3c>)
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80176a0:	68fb      	ldr	r3, [r7, #12]
}
 80176a2:	4618      	mov	r0, r3
 80176a4:	3710      	adds	r7, #16
 80176a6:	46bd      	mov	sp, r7
 80176a8:	bd80      	pop	{r7, pc}
 80176aa:	bf00      	nop
 80176ac:	20002d84 	.word	0x20002d84

080176b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b086      	sub	sp, #24
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
 80176bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80176be:	2300      	movs	r3, #0
 80176c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	68ba      	ldr	r2, [r7, #8]
 80176c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	68fa      	ldr	r2, [r7, #12]
 80176cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80176ce:	68ba      	ldr	r2, [r7, #8]
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	429a      	cmp	r2, r3
 80176d4:	d812      	bhi.n	80176fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80176d6:	687a      	ldr	r2, [r7, #4]
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	1ad2      	subs	r2, r2, r3
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	699b      	ldr	r3, [r3, #24]
 80176e0:	429a      	cmp	r2, r3
 80176e2:	d302      	bcc.n	80176ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80176e4:	2301      	movs	r3, #1
 80176e6:	617b      	str	r3, [r7, #20]
 80176e8:	e01b      	b.n	8017722 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80176ea:	4b10      	ldr	r3, [pc, #64]	; (801772c <prvInsertTimerInActiveList+0x7c>)
 80176ec:	681a      	ldr	r2, [r3, #0]
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	3304      	adds	r3, #4
 80176f2:	4619      	mov	r1, r3
 80176f4:	4610      	mov	r0, r2
 80176f6:	f7fd fd92 	bl	801521e <vListInsert>
 80176fa:	e012      	b.n	8017722 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80176fc:	687a      	ldr	r2, [r7, #4]
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	429a      	cmp	r2, r3
 8017702:	d206      	bcs.n	8017712 <prvInsertTimerInActiveList+0x62>
 8017704:	68ba      	ldr	r2, [r7, #8]
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	429a      	cmp	r2, r3
 801770a:	d302      	bcc.n	8017712 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801770c:	2301      	movs	r3, #1
 801770e:	617b      	str	r3, [r7, #20]
 8017710:	e007      	b.n	8017722 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017712:	4b07      	ldr	r3, [pc, #28]	; (8017730 <prvInsertTimerInActiveList+0x80>)
 8017714:	681a      	ldr	r2, [r3, #0]
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	3304      	adds	r3, #4
 801771a:	4619      	mov	r1, r3
 801771c:	4610      	mov	r0, r2
 801771e:	f7fd fd7e 	bl	801521e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017722:	697b      	ldr	r3, [r7, #20]
}
 8017724:	4618      	mov	r0, r3
 8017726:	3718      	adds	r7, #24
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}
 801772c:	20002d78 	.word	0x20002d78
 8017730:	20002d74 	.word	0x20002d74

08017734 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017734:	b580      	push	{r7, lr}
 8017736:	b08c      	sub	sp, #48	; 0x30
 8017738:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801773a:	e0ae      	b.n	801789a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801773c:	68bb      	ldr	r3, [r7, #8]
 801773e:	2b00      	cmp	r3, #0
 8017740:	f2c0 80aa 	blt.w	8017898 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017744:	693b      	ldr	r3, [r7, #16]
 8017746:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801774a:	695b      	ldr	r3, [r3, #20]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d004      	beq.n	801775a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017752:	3304      	adds	r3, #4
 8017754:	4618      	mov	r0, r3
 8017756:	f7fd fd9a 	bl	801528e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801775a:	1d3b      	adds	r3, r7, #4
 801775c:	4618      	mov	r0, r3
 801775e:	f7ff ff87 	bl	8017670 <prvSampleTimeNow>
 8017762:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	2b09      	cmp	r3, #9
 8017768:	f200 8097 	bhi.w	801789a <prvProcessReceivedCommands+0x166>
 801776c:	a201      	add	r2, pc, #4	; (adr r2, 8017774 <prvProcessReceivedCommands+0x40>)
 801776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017772:	bf00      	nop
 8017774:	0801779d 	.word	0x0801779d
 8017778:	0801779d 	.word	0x0801779d
 801777c:	0801779d 	.word	0x0801779d
 8017780:	08017811 	.word	0x08017811
 8017784:	08017825 	.word	0x08017825
 8017788:	0801786f 	.word	0x0801786f
 801778c:	0801779d 	.word	0x0801779d
 8017790:	0801779d 	.word	0x0801779d
 8017794:	08017811 	.word	0x08017811
 8017798:	08017825 	.word	0x08017825
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801779e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80177a2:	f043 0301 	orr.w	r3, r3, #1
 80177a6:	b2da      	uxtb	r2, r3
 80177a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80177ae:	68fa      	ldr	r2, [r7, #12]
 80177b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b2:	699b      	ldr	r3, [r3, #24]
 80177b4:	18d1      	adds	r1, r2, r3
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	6a3a      	ldr	r2, [r7, #32]
 80177ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177bc:	f7ff ff78 	bl	80176b0 <prvInsertTimerInActiveList>
 80177c0:	4603      	mov	r3, r0
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d069      	beq.n	801789a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80177c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c8:	6a1b      	ldr	r3, [r3, #32]
 80177ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80177ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80177d4:	f003 0304 	and.w	r3, r3, #4
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d05e      	beq.n	801789a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80177dc:	68fa      	ldr	r2, [r7, #12]
 80177de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e0:	699b      	ldr	r3, [r3, #24]
 80177e2:	441a      	add	r2, r3
 80177e4:	2300      	movs	r3, #0
 80177e6:	9300      	str	r3, [sp, #0]
 80177e8:	2300      	movs	r3, #0
 80177ea:	2100      	movs	r1, #0
 80177ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80177ee:	f7ff fe23 	bl	8017438 <xTimerGenericCommand>
 80177f2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80177f4:	69fb      	ldr	r3, [r7, #28]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d14f      	bne.n	801789a <prvProcessReceivedCommands+0x166>
	__asm volatile
 80177fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177fe:	f383 8811 	msr	BASEPRI, r3
 8017802:	f3bf 8f6f 	isb	sy
 8017806:	f3bf 8f4f 	dsb	sy
 801780a:	61bb      	str	r3, [r7, #24]
}
 801780c:	bf00      	nop
 801780e:	e7fe      	b.n	801780e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017812:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017816:	f023 0301 	bic.w	r3, r3, #1
 801781a:	b2da      	uxtb	r2, r3
 801781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801781e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8017822:	e03a      	b.n	801789a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017826:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801782a:	f043 0301 	orr.w	r3, r3, #1
 801782e:	b2da      	uxtb	r2, r3
 8017830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017836:	68fa      	ldr	r2, [r7, #12]
 8017838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783e:	699b      	ldr	r3, [r3, #24]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d10a      	bne.n	801785a <prvProcessReceivedCommands+0x126>
	__asm volatile
 8017844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017848:	f383 8811 	msr	BASEPRI, r3
 801784c:	f3bf 8f6f 	isb	sy
 8017850:	f3bf 8f4f 	dsb	sy
 8017854:	617b      	str	r3, [r7, #20]
}
 8017856:	bf00      	nop
 8017858:	e7fe      	b.n	8017858 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801785c:	699a      	ldr	r2, [r3, #24]
 801785e:	6a3b      	ldr	r3, [r7, #32]
 8017860:	18d1      	adds	r1, r2, r3
 8017862:	6a3b      	ldr	r3, [r7, #32]
 8017864:	6a3a      	ldr	r2, [r7, #32]
 8017866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017868:	f7ff ff22 	bl	80176b0 <prvInsertTimerInActiveList>
					break;
 801786c:	e015      	b.n	801789a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017874:	f003 0302 	and.w	r3, r3, #2
 8017878:	2b00      	cmp	r3, #0
 801787a:	d103      	bne.n	8017884 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 801787c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801787e:	f000 fb7f 	bl	8017f80 <vPortFree>
 8017882:	e00a      	b.n	801789a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017886:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801788a:	f023 0301 	bic.w	r3, r3, #1
 801788e:	b2da      	uxtb	r2, r3
 8017890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017896:	e000      	b.n	801789a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017898:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801789a:	4b08      	ldr	r3, [pc, #32]	; (80178bc <prvProcessReceivedCommands+0x188>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	f107 0108 	add.w	r1, r7, #8
 80178a2:	2200      	movs	r2, #0
 80178a4:	4618      	mov	r0, r3
 80178a6:	f7fe f8cb 	bl	8015a40 <xQueueReceive>
 80178aa:	4603      	mov	r3, r0
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	f47f af45 	bne.w	801773c <prvProcessReceivedCommands+0x8>
	}
}
 80178b2:	bf00      	nop
 80178b4:	bf00      	nop
 80178b6:	3728      	adds	r7, #40	; 0x28
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}
 80178bc:	20002d7c 	.word	0x20002d7c

080178c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b088      	sub	sp, #32
 80178c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80178c6:	e048      	b.n	801795a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80178c8:	4b2d      	ldr	r3, [pc, #180]	; (8017980 <prvSwitchTimerLists+0xc0>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	68db      	ldr	r3, [r3, #12]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80178d2:	4b2b      	ldr	r3, [pc, #172]	; (8017980 <prvSwitchTimerLists+0xc0>)
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	68db      	ldr	r3, [r3, #12]
 80178d8:	68db      	ldr	r3, [r3, #12]
 80178da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	3304      	adds	r3, #4
 80178e0:	4618      	mov	r0, r3
 80178e2:	f7fd fcd4 	bl	801528e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	6a1b      	ldr	r3, [r3, #32]
 80178ea:	68f8      	ldr	r0, [r7, #12]
 80178ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80178f4:	f003 0304 	and.w	r3, r3, #4
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d02e      	beq.n	801795a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	699b      	ldr	r3, [r3, #24]
 8017900:	693a      	ldr	r2, [r7, #16]
 8017902:	4413      	add	r3, r2
 8017904:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017906:	68ba      	ldr	r2, [r7, #8]
 8017908:	693b      	ldr	r3, [r7, #16]
 801790a:	429a      	cmp	r2, r3
 801790c:	d90e      	bls.n	801792c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	68ba      	ldr	r2, [r7, #8]
 8017912:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	68fa      	ldr	r2, [r7, #12]
 8017918:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801791a:	4b19      	ldr	r3, [pc, #100]	; (8017980 <prvSwitchTimerLists+0xc0>)
 801791c:	681a      	ldr	r2, [r3, #0]
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	3304      	adds	r3, #4
 8017922:	4619      	mov	r1, r3
 8017924:	4610      	mov	r0, r2
 8017926:	f7fd fc7a 	bl	801521e <vListInsert>
 801792a:	e016      	b.n	801795a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801792c:	2300      	movs	r3, #0
 801792e:	9300      	str	r3, [sp, #0]
 8017930:	2300      	movs	r3, #0
 8017932:	693a      	ldr	r2, [r7, #16]
 8017934:	2100      	movs	r1, #0
 8017936:	68f8      	ldr	r0, [r7, #12]
 8017938:	f7ff fd7e 	bl	8017438 <xTimerGenericCommand>
 801793c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d10a      	bne.n	801795a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017948:	f383 8811 	msr	BASEPRI, r3
 801794c:	f3bf 8f6f 	isb	sy
 8017950:	f3bf 8f4f 	dsb	sy
 8017954:	603b      	str	r3, [r7, #0]
}
 8017956:	bf00      	nop
 8017958:	e7fe      	b.n	8017958 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801795a:	4b09      	ldr	r3, [pc, #36]	; (8017980 <prvSwitchTimerLists+0xc0>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d1b1      	bne.n	80178c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017964:	4b06      	ldr	r3, [pc, #24]	; (8017980 <prvSwitchTimerLists+0xc0>)
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801796a:	4b06      	ldr	r3, [pc, #24]	; (8017984 <prvSwitchTimerLists+0xc4>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	4a04      	ldr	r2, [pc, #16]	; (8017980 <prvSwitchTimerLists+0xc0>)
 8017970:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017972:	4a04      	ldr	r2, [pc, #16]	; (8017984 <prvSwitchTimerLists+0xc4>)
 8017974:	697b      	ldr	r3, [r7, #20]
 8017976:	6013      	str	r3, [r2, #0]
}
 8017978:	bf00      	nop
 801797a:	3718      	adds	r7, #24
 801797c:	46bd      	mov	sp, r7
 801797e:	bd80      	pop	{r7, pc}
 8017980:	20002d74 	.word	0x20002d74
 8017984:	20002d78 	.word	0x20002d78

08017988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b082      	sub	sp, #8
 801798c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801798e:	f000 f92d 	bl	8017bec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017992:	4b15      	ldr	r3, [pc, #84]	; (80179e8 <prvCheckForValidListAndQueue+0x60>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d120      	bne.n	80179dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801799a:	4814      	ldr	r0, [pc, #80]	; (80179ec <prvCheckForValidListAndQueue+0x64>)
 801799c:	f7fd fbf1 	bl	8015182 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80179a0:	4813      	ldr	r0, [pc, #76]	; (80179f0 <prvCheckForValidListAndQueue+0x68>)
 80179a2:	f7fd fbee 	bl	8015182 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80179a6:	4b13      	ldr	r3, [pc, #76]	; (80179f4 <prvCheckForValidListAndQueue+0x6c>)
 80179a8:	4a10      	ldr	r2, [pc, #64]	; (80179ec <prvCheckForValidListAndQueue+0x64>)
 80179aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80179ac:	4b12      	ldr	r3, [pc, #72]	; (80179f8 <prvCheckForValidListAndQueue+0x70>)
 80179ae:	4a10      	ldr	r2, [pc, #64]	; (80179f0 <prvCheckForValidListAndQueue+0x68>)
 80179b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80179b2:	2300      	movs	r3, #0
 80179b4:	9300      	str	r3, [sp, #0]
 80179b6:	4b11      	ldr	r3, [pc, #68]	; (80179fc <prvCheckForValidListAndQueue+0x74>)
 80179b8:	4a11      	ldr	r2, [pc, #68]	; (8017a00 <prvCheckForValidListAndQueue+0x78>)
 80179ba:	210c      	movs	r1, #12
 80179bc:	200a      	movs	r0, #10
 80179be:	f7fd fcf7 	bl	80153b0 <xQueueGenericCreateStatic>
 80179c2:	4603      	mov	r3, r0
 80179c4:	4a08      	ldr	r2, [pc, #32]	; (80179e8 <prvCheckForValidListAndQueue+0x60>)
 80179c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80179c8:	4b07      	ldr	r3, [pc, #28]	; (80179e8 <prvCheckForValidListAndQueue+0x60>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d005      	beq.n	80179dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80179d0:	4b05      	ldr	r3, [pc, #20]	; (80179e8 <prvCheckForValidListAndQueue+0x60>)
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	490b      	ldr	r1, [pc, #44]	; (8017a04 <prvCheckForValidListAndQueue+0x7c>)
 80179d6:	4618      	mov	r0, r3
 80179d8:	f7fe fbc6 	bl	8016168 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80179dc:	f000 f936 	bl	8017c4c <vPortExitCritical>
}
 80179e0:	bf00      	nop
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}
 80179e6:	bf00      	nop
 80179e8:	20002d7c 	.word	0x20002d7c
 80179ec:	20002d4c 	.word	0x20002d4c
 80179f0:	20002d60 	.word	0x20002d60
 80179f4:	20002d74 	.word	0x20002d74
 80179f8:	20002d78 	.word	0x20002d78
 80179fc:	20002e00 	.word	0x20002e00
 8017a00:	20002d88 	.word	0x20002d88
 8017a04:	0801f8fc 	.word	0x0801f8fc

08017a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017a08:	b480      	push	{r7}
 8017a0a:	b085      	sub	sp, #20
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	60f8      	str	r0, [r7, #12]
 8017a10:	60b9      	str	r1, [r7, #8]
 8017a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	3b04      	subs	r3, #4
 8017a18:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	3b04      	subs	r3, #4
 8017a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017a28:	68bb      	ldr	r3, [r7, #8]
 8017a2a:	f023 0201 	bic.w	r2, r3, #1
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	3b04      	subs	r3, #4
 8017a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017a38:	4a08      	ldr	r2, [pc, #32]	; (8017a5c <pxPortInitialiseStack+0x54>)
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	3b14      	subs	r3, #20
 8017a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017a44:	687a      	ldr	r2, [r7, #4]
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	3b20      	subs	r3, #32
 8017a4e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017a50:	68fb      	ldr	r3, [r7, #12]
}
 8017a52:	4618      	mov	r0, r3
 8017a54:	3714      	adds	r7, #20
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bc80      	pop	{r7}
 8017a5a:	4770      	bx	lr
 8017a5c:	08017a61 	.word	0x08017a61

08017a60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017a60:	b480      	push	{r7}
 8017a62:	b085      	sub	sp, #20
 8017a64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8017a66:	2300      	movs	r3, #0
 8017a68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017a6a:	4b12      	ldr	r3, [pc, #72]	; (8017ab4 <prvTaskExitError+0x54>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a72:	d00a      	beq.n	8017a8a <prvTaskExitError+0x2a>
	__asm volatile
 8017a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a78:	f383 8811 	msr	BASEPRI, r3
 8017a7c:	f3bf 8f6f 	isb	sy
 8017a80:	f3bf 8f4f 	dsb	sy
 8017a84:	60fb      	str	r3, [r7, #12]
}
 8017a86:	bf00      	nop
 8017a88:	e7fe      	b.n	8017a88 <prvTaskExitError+0x28>
	__asm volatile
 8017a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a8e:	f383 8811 	msr	BASEPRI, r3
 8017a92:	f3bf 8f6f 	isb	sy
 8017a96:	f3bf 8f4f 	dsb	sy
 8017a9a:	60bb      	str	r3, [r7, #8]
}
 8017a9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017a9e:	bf00      	nop
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d0fc      	beq.n	8017aa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017aa6:	bf00      	nop
 8017aa8:	bf00      	nop
 8017aaa:	3714      	adds	r7, #20
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bc80      	pop	{r7}
 8017ab0:	4770      	bx	lr
 8017ab2:	bf00      	nop
 8017ab4:	20000094 	.word	0x20000094
	...

08017ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017ac0:	4b07      	ldr	r3, [pc, #28]	; (8017ae0 <pxCurrentTCBConst2>)
 8017ac2:	6819      	ldr	r1, [r3, #0]
 8017ac4:	6808      	ldr	r0, [r1, #0]
 8017ac6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017aca:	f380 8809 	msr	PSP, r0
 8017ace:	f3bf 8f6f 	isb	sy
 8017ad2:	f04f 0000 	mov.w	r0, #0
 8017ad6:	f380 8811 	msr	BASEPRI, r0
 8017ada:	f04e 0e0d 	orr.w	lr, lr, #13
 8017ade:	4770      	bx	lr

08017ae0 <pxCurrentTCBConst2>:
 8017ae0:	20002c20 	.word	0x20002c20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017ae4:	bf00      	nop
 8017ae6:	bf00      	nop

08017ae8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8017ae8:	4806      	ldr	r0, [pc, #24]	; (8017b04 <prvPortStartFirstTask+0x1c>)
 8017aea:	6800      	ldr	r0, [r0, #0]
 8017aec:	6800      	ldr	r0, [r0, #0]
 8017aee:	f380 8808 	msr	MSP, r0
 8017af2:	b662      	cpsie	i
 8017af4:	b661      	cpsie	f
 8017af6:	f3bf 8f4f 	dsb	sy
 8017afa:	f3bf 8f6f 	isb	sy
 8017afe:	df00      	svc	0
 8017b00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017b02:	bf00      	nop
 8017b04:	e000ed08 	.word	0xe000ed08

08017b08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b084      	sub	sp, #16
 8017b0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017b0e:	4b32      	ldr	r3, [pc, #200]	; (8017bd8 <xPortStartScheduler+0xd0>)
 8017b10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	781b      	ldrb	r3, [r3, #0]
 8017b16:	b2db      	uxtb	r3, r3
 8017b18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	22ff      	movs	r2, #255	; 0xff
 8017b1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	781b      	ldrb	r3, [r3, #0]
 8017b24:	b2db      	uxtb	r3, r3
 8017b26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017b28:	78fb      	ldrb	r3, [r7, #3]
 8017b2a:	b2db      	uxtb	r3, r3
 8017b2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017b30:	b2da      	uxtb	r2, r3
 8017b32:	4b2a      	ldr	r3, [pc, #168]	; (8017bdc <xPortStartScheduler+0xd4>)
 8017b34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017b36:	4b2a      	ldr	r3, [pc, #168]	; (8017be0 <xPortStartScheduler+0xd8>)
 8017b38:	2207      	movs	r2, #7
 8017b3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017b3c:	e009      	b.n	8017b52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8017b3e:	4b28      	ldr	r3, [pc, #160]	; (8017be0 <xPortStartScheduler+0xd8>)
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	3b01      	subs	r3, #1
 8017b44:	4a26      	ldr	r2, [pc, #152]	; (8017be0 <xPortStartScheduler+0xd8>)
 8017b46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017b48:	78fb      	ldrb	r3, [r7, #3]
 8017b4a:	b2db      	uxtb	r3, r3
 8017b4c:	005b      	lsls	r3, r3, #1
 8017b4e:	b2db      	uxtb	r3, r3
 8017b50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017b52:	78fb      	ldrb	r3, [r7, #3]
 8017b54:	b2db      	uxtb	r3, r3
 8017b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017b5a:	2b80      	cmp	r3, #128	; 0x80
 8017b5c:	d0ef      	beq.n	8017b3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017b5e:	4b20      	ldr	r3, [pc, #128]	; (8017be0 <xPortStartScheduler+0xd8>)
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	f1c3 0307 	rsb	r3, r3, #7
 8017b66:	2b04      	cmp	r3, #4
 8017b68:	d00a      	beq.n	8017b80 <xPortStartScheduler+0x78>
	__asm volatile
 8017b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b6e:	f383 8811 	msr	BASEPRI, r3
 8017b72:	f3bf 8f6f 	isb	sy
 8017b76:	f3bf 8f4f 	dsb	sy
 8017b7a:	60bb      	str	r3, [r7, #8]
}
 8017b7c:	bf00      	nop
 8017b7e:	e7fe      	b.n	8017b7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017b80:	4b17      	ldr	r3, [pc, #92]	; (8017be0 <xPortStartScheduler+0xd8>)
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	021b      	lsls	r3, r3, #8
 8017b86:	4a16      	ldr	r2, [pc, #88]	; (8017be0 <xPortStartScheduler+0xd8>)
 8017b88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017b8a:	4b15      	ldr	r3, [pc, #84]	; (8017be0 <xPortStartScheduler+0xd8>)
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017b92:	4a13      	ldr	r2, [pc, #76]	; (8017be0 <xPortStartScheduler+0xd8>)
 8017b94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	b2da      	uxtb	r2, r3
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017b9e:	4b11      	ldr	r3, [pc, #68]	; (8017be4 <xPortStartScheduler+0xdc>)
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	4a10      	ldr	r2, [pc, #64]	; (8017be4 <xPortStartScheduler+0xdc>)
 8017ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017ba8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017baa:	4b0e      	ldr	r3, [pc, #56]	; (8017be4 <xPortStartScheduler+0xdc>)
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	4a0d      	ldr	r2, [pc, #52]	; (8017be4 <xPortStartScheduler+0xdc>)
 8017bb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017bb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017bb6:	f000 f8b9 	bl	8017d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017bba:	4b0b      	ldr	r3, [pc, #44]	; (8017be8 <xPortStartScheduler+0xe0>)
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017bc0:	f7ff ff92 	bl	8017ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017bc4:	f7fe ff1e 	bl	8016a04 <vTaskSwitchContext>
	prvTaskExitError();
 8017bc8:	f7ff ff4a 	bl	8017a60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017bcc:	2300      	movs	r3, #0
}
 8017bce:	4618      	mov	r0, r3
 8017bd0:	3710      	adds	r7, #16
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	bd80      	pop	{r7, pc}
 8017bd6:	bf00      	nop
 8017bd8:	e000e400 	.word	0xe000e400
 8017bdc:	20002e48 	.word	0x20002e48
 8017be0:	20002e4c 	.word	0x20002e4c
 8017be4:	e000ed20 	.word	0xe000ed20
 8017be8:	20000094 	.word	0x20000094

08017bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017bec:	b480      	push	{r7}
 8017bee:	b083      	sub	sp, #12
 8017bf0:	af00      	add	r7, sp, #0
	__asm volatile
 8017bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bf6:	f383 8811 	msr	BASEPRI, r3
 8017bfa:	f3bf 8f6f 	isb	sy
 8017bfe:	f3bf 8f4f 	dsb	sy
 8017c02:	607b      	str	r3, [r7, #4]
}
 8017c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017c06:	4b0f      	ldr	r3, [pc, #60]	; (8017c44 <vPortEnterCritical+0x58>)
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	3301      	adds	r3, #1
 8017c0c:	4a0d      	ldr	r2, [pc, #52]	; (8017c44 <vPortEnterCritical+0x58>)
 8017c0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017c10:	4b0c      	ldr	r3, [pc, #48]	; (8017c44 <vPortEnterCritical+0x58>)
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	2b01      	cmp	r3, #1
 8017c16:	d10f      	bne.n	8017c38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017c18:	4b0b      	ldr	r3, [pc, #44]	; (8017c48 <vPortEnterCritical+0x5c>)
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	b2db      	uxtb	r3, r3
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d00a      	beq.n	8017c38 <vPortEnterCritical+0x4c>
	__asm volatile
 8017c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c26:	f383 8811 	msr	BASEPRI, r3
 8017c2a:	f3bf 8f6f 	isb	sy
 8017c2e:	f3bf 8f4f 	dsb	sy
 8017c32:	603b      	str	r3, [r7, #0]
}
 8017c34:	bf00      	nop
 8017c36:	e7fe      	b.n	8017c36 <vPortEnterCritical+0x4a>
	}
}
 8017c38:	bf00      	nop
 8017c3a:	370c      	adds	r7, #12
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bc80      	pop	{r7}
 8017c40:	4770      	bx	lr
 8017c42:	bf00      	nop
 8017c44:	20000094 	.word	0x20000094
 8017c48:	e000ed04 	.word	0xe000ed04

08017c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017c4c:	b480      	push	{r7}
 8017c4e:	b083      	sub	sp, #12
 8017c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017c52:	4b11      	ldr	r3, [pc, #68]	; (8017c98 <vPortExitCritical+0x4c>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d10a      	bne.n	8017c70 <vPortExitCritical+0x24>
	__asm volatile
 8017c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c5e:	f383 8811 	msr	BASEPRI, r3
 8017c62:	f3bf 8f6f 	isb	sy
 8017c66:	f3bf 8f4f 	dsb	sy
 8017c6a:	607b      	str	r3, [r7, #4]
}
 8017c6c:	bf00      	nop
 8017c6e:	e7fe      	b.n	8017c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017c70:	4b09      	ldr	r3, [pc, #36]	; (8017c98 <vPortExitCritical+0x4c>)
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	3b01      	subs	r3, #1
 8017c76:	4a08      	ldr	r2, [pc, #32]	; (8017c98 <vPortExitCritical+0x4c>)
 8017c78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017c7a:	4b07      	ldr	r3, [pc, #28]	; (8017c98 <vPortExitCritical+0x4c>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d105      	bne.n	8017c8e <vPortExitCritical+0x42>
 8017c82:	2300      	movs	r3, #0
 8017c84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017c86:	683b      	ldr	r3, [r7, #0]
 8017c88:	f383 8811 	msr	BASEPRI, r3
}
 8017c8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017c8e:	bf00      	nop
 8017c90:	370c      	adds	r7, #12
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bc80      	pop	{r7}
 8017c96:	4770      	bx	lr
 8017c98:	20000094 	.word	0x20000094
 8017c9c:	00000000 	.word	0x00000000

08017ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017ca0:	f3ef 8009 	mrs	r0, PSP
 8017ca4:	f3bf 8f6f 	isb	sy
 8017ca8:	4b0d      	ldr	r3, [pc, #52]	; (8017ce0 <pxCurrentTCBConst>)
 8017caa:	681a      	ldr	r2, [r3, #0]
 8017cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017cb0:	6010      	str	r0, [r2, #0]
 8017cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8017cb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017cba:	f380 8811 	msr	BASEPRI, r0
 8017cbe:	f7fe fea1 	bl	8016a04 <vTaskSwitchContext>
 8017cc2:	f04f 0000 	mov.w	r0, #0
 8017cc6:	f380 8811 	msr	BASEPRI, r0
 8017cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017cce:	6819      	ldr	r1, [r3, #0]
 8017cd0:	6808      	ldr	r0, [r1, #0]
 8017cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017cd6:	f380 8809 	msr	PSP, r0
 8017cda:	f3bf 8f6f 	isb	sy
 8017cde:	4770      	bx	lr

08017ce0 <pxCurrentTCBConst>:
 8017ce0:	20002c20 	.word	0x20002c20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017ce4:	bf00      	nop
 8017ce6:	bf00      	nop

08017ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b082      	sub	sp, #8
 8017cec:	af00      	add	r7, sp, #0
	__asm volatile
 8017cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cf2:	f383 8811 	msr	BASEPRI, r3
 8017cf6:	f3bf 8f6f 	isb	sy
 8017cfa:	f3bf 8f4f 	dsb	sy
 8017cfe:	607b      	str	r3, [r7, #4]
}
 8017d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017d02:	f7fe fdc7 	bl	8016894 <xTaskIncrementTick>
 8017d06:	4603      	mov	r3, r0
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d003      	beq.n	8017d14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017d0c:	4b06      	ldr	r3, [pc, #24]	; (8017d28 <SysTick_Handler+0x40>)
 8017d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d12:	601a      	str	r2, [r3, #0]
 8017d14:	2300      	movs	r3, #0
 8017d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	f383 8811 	msr	BASEPRI, r3
}
 8017d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017d20:	bf00      	nop
 8017d22:	3708      	adds	r7, #8
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd80      	pop	{r7, pc}
 8017d28:	e000ed04 	.word	0xe000ed04

08017d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017d2c:	b480      	push	{r7}
 8017d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017d30:	4b0a      	ldr	r3, [pc, #40]	; (8017d5c <vPortSetupTimerInterrupt+0x30>)
 8017d32:	2200      	movs	r2, #0
 8017d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017d36:	4b0a      	ldr	r3, [pc, #40]	; (8017d60 <vPortSetupTimerInterrupt+0x34>)
 8017d38:	2200      	movs	r2, #0
 8017d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017d3c:	4b09      	ldr	r3, [pc, #36]	; (8017d64 <vPortSetupTimerInterrupt+0x38>)
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	4a09      	ldr	r2, [pc, #36]	; (8017d68 <vPortSetupTimerInterrupt+0x3c>)
 8017d42:	fba2 2303 	umull	r2, r3, r2, r3
 8017d46:	099b      	lsrs	r3, r3, #6
 8017d48:	4a08      	ldr	r2, [pc, #32]	; (8017d6c <vPortSetupTimerInterrupt+0x40>)
 8017d4a:	3b01      	subs	r3, #1
 8017d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017d4e:	4b03      	ldr	r3, [pc, #12]	; (8017d5c <vPortSetupTimerInterrupt+0x30>)
 8017d50:	2207      	movs	r2, #7
 8017d52:	601a      	str	r2, [r3, #0]
}
 8017d54:	bf00      	nop
 8017d56:	46bd      	mov	sp, r7
 8017d58:	bc80      	pop	{r7}
 8017d5a:	4770      	bx	lr
 8017d5c:	e000e010 	.word	0xe000e010
 8017d60:	e000e018 	.word	0xe000e018
 8017d64:	20000080 	.word	0x20000080
 8017d68:	10624dd3 	.word	0x10624dd3
 8017d6c:	e000e014 	.word	0xe000e014

08017d70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017d70:	b480      	push	{r7}
 8017d72:	b085      	sub	sp, #20
 8017d74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017d76:	f3ef 8305 	mrs	r3, IPSR
 8017d7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	2b0f      	cmp	r3, #15
 8017d80:	d914      	bls.n	8017dac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017d82:	4a16      	ldr	r2, [pc, #88]	; (8017ddc <vPortValidateInterruptPriority+0x6c>)
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	4413      	add	r3, r2
 8017d88:	781b      	ldrb	r3, [r3, #0]
 8017d8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017d8c:	4b14      	ldr	r3, [pc, #80]	; (8017de0 <vPortValidateInterruptPriority+0x70>)
 8017d8e:	781b      	ldrb	r3, [r3, #0]
 8017d90:	7afa      	ldrb	r2, [r7, #11]
 8017d92:	429a      	cmp	r2, r3
 8017d94:	d20a      	bcs.n	8017dac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d9a:	f383 8811 	msr	BASEPRI, r3
 8017d9e:	f3bf 8f6f 	isb	sy
 8017da2:	f3bf 8f4f 	dsb	sy
 8017da6:	607b      	str	r3, [r7, #4]
}
 8017da8:	bf00      	nop
 8017daa:	e7fe      	b.n	8017daa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017dac:	4b0d      	ldr	r3, [pc, #52]	; (8017de4 <vPortValidateInterruptPriority+0x74>)
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017db4:	4b0c      	ldr	r3, [pc, #48]	; (8017de8 <vPortValidateInterruptPriority+0x78>)
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	429a      	cmp	r2, r3
 8017dba:	d90a      	bls.n	8017dd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dc0:	f383 8811 	msr	BASEPRI, r3
 8017dc4:	f3bf 8f6f 	isb	sy
 8017dc8:	f3bf 8f4f 	dsb	sy
 8017dcc:	603b      	str	r3, [r7, #0]
}
 8017dce:	bf00      	nop
 8017dd0:	e7fe      	b.n	8017dd0 <vPortValidateInterruptPriority+0x60>
	}
 8017dd2:	bf00      	nop
 8017dd4:	3714      	adds	r7, #20
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bc80      	pop	{r7}
 8017dda:	4770      	bx	lr
 8017ddc:	e000e3f0 	.word	0xe000e3f0
 8017de0:	20002e48 	.word	0x20002e48
 8017de4:	e000ed0c 	.word	0xe000ed0c
 8017de8:	20002e4c 	.word	0x20002e4c

08017dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b08a      	sub	sp, #40	; 0x28
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017df4:	2300      	movs	r3, #0
 8017df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017df8:	f7fe fc94 	bl	8016724 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017dfc:	4b5b      	ldr	r3, [pc, #364]	; (8017f6c <pvPortMalloc+0x180>)
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d101      	bne.n	8017e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017e04:	f000 f916 	bl	8018034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017e08:	4b59      	ldr	r3, [pc, #356]	; (8017f70 <pvPortMalloc+0x184>)
 8017e0a:	681a      	ldr	r2, [r3, #0]
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	4013      	ands	r3, r2
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	f040 808e 	bne.w	8017f32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d01d      	beq.n	8017e58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017e1c:	2208      	movs	r2, #8
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	4413      	add	r3, r2
 8017e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	f003 0307 	and.w	r3, r3, #7
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d014      	beq.n	8017e58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f023 0307 	bic.w	r3, r3, #7
 8017e34:	3308      	adds	r3, #8
 8017e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f003 0307 	and.w	r3, r3, #7
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d00a      	beq.n	8017e58 <pvPortMalloc+0x6c>
	__asm volatile
 8017e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e46:	f383 8811 	msr	BASEPRI, r3
 8017e4a:	f3bf 8f6f 	isb	sy
 8017e4e:	f3bf 8f4f 	dsb	sy
 8017e52:	617b      	str	r3, [r7, #20]
}
 8017e54:	bf00      	nop
 8017e56:	e7fe      	b.n	8017e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d069      	beq.n	8017f32 <pvPortMalloc+0x146>
 8017e5e:	4b45      	ldr	r3, [pc, #276]	; (8017f74 <pvPortMalloc+0x188>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	687a      	ldr	r2, [r7, #4]
 8017e64:	429a      	cmp	r2, r3
 8017e66:	d864      	bhi.n	8017f32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017e68:	4b43      	ldr	r3, [pc, #268]	; (8017f78 <pvPortMalloc+0x18c>)
 8017e6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017e6c:	4b42      	ldr	r3, [pc, #264]	; (8017f78 <pvPortMalloc+0x18c>)
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017e72:	e004      	b.n	8017e7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e80:	685b      	ldr	r3, [r3, #4]
 8017e82:	687a      	ldr	r2, [r7, #4]
 8017e84:	429a      	cmp	r2, r3
 8017e86:	d903      	bls.n	8017e90 <pvPortMalloc+0xa4>
 8017e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d1f1      	bne.n	8017e74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017e90:	4b36      	ldr	r3, [pc, #216]	; (8017f6c <pvPortMalloc+0x180>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e96:	429a      	cmp	r2, r3
 8017e98:	d04b      	beq.n	8017f32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017e9a:	6a3b      	ldr	r3, [r7, #32]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	2208      	movs	r2, #8
 8017ea0:	4413      	add	r3, r2
 8017ea2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea6:	681a      	ldr	r2, [r3, #0]
 8017ea8:	6a3b      	ldr	r3, [r7, #32]
 8017eaa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eae:	685a      	ldr	r2, [r3, #4]
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	1ad2      	subs	r2, r2, r3
 8017eb4:	2308      	movs	r3, #8
 8017eb6:	005b      	lsls	r3, r3, #1
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	d91f      	bls.n	8017efc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	4413      	add	r3, r2
 8017ec2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017ec4:	69bb      	ldr	r3, [r7, #24]
 8017ec6:	f003 0307 	and.w	r3, r3, #7
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d00a      	beq.n	8017ee4 <pvPortMalloc+0xf8>
	__asm volatile
 8017ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ed2:	f383 8811 	msr	BASEPRI, r3
 8017ed6:	f3bf 8f6f 	isb	sy
 8017eda:	f3bf 8f4f 	dsb	sy
 8017ede:	613b      	str	r3, [r7, #16]
}
 8017ee0:	bf00      	nop
 8017ee2:	e7fe      	b.n	8017ee2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee6:	685a      	ldr	r2, [r3, #4]
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	1ad2      	subs	r2, r2, r3
 8017eec:	69bb      	ldr	r3, [r7, #24]
 8017eee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef2:	687a      	ldr	r2, [r7, #4]
 8017ef4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017ef6:	69b8      	ldr	r0, [r7, #24]
 8017ef8:	f000 f8fe 	bl	80180f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017efc:	4b1d      	ldr	r3, [pc, #116]	; (8017f74 <pvPortMalloc+0x188>)
 8017efe:	681a      	ldr	r2, [r3, #0]
 8017f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f02:	685b      	ldr	r3, [r3, #4]
 8017f04:	1ad3      	subs	r3, r2, r3
 8017f06:	4a1b      	ldr	r2, [pc, #108]	; (8017f74 <pvPortMalloc+0x188>)
 8017f08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017f0a:	4b1a      	ldr	r3, [pc, #104]	; (8017f74 <pvPortMalloc+0x188>)
 8017f0c:	681a      	ldr	r2, [r3, #0]
 8017f0e:	4b1b      	ldr	r3, [pc, #108]	; (8017f7c <pvPortMalloc+0x190>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	429a      	cmp	r2, r3
 8017f14:	d203      	bcs.n	8017f1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017f16:	4b17      	ldr	r3, [pc, #92]	; (8017f74 <pvPortMalloc+0x188>)
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	4a18      	ldr	r2, [pc, #96]	; (8017f7c <pvPortMalloc+0x190>)
 8017f1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f20:	685a      	ldr	r2, [r3, #4]
 8017f22:	4b13      	ldr	r3, [pc, #76]	; (8017f70 <pvPortMalloc+0x184>)
 8017f24:	681b      	ldr	r3, [r3, #0]
 8017f26:	431a      	orrs	r2, r3
 8017f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f2e:	2200      	movs	r2, #0
 8017f30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017f32:	f7fe fc05 	bl	8016740 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8017f36:	69fb      	ldr	r3, [r7, #28]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d101      	bne.n	8017f40 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8017f3c:	f7f1 fb6c 	bl	8009618 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017f40:	69fb      	ldr	r3, [r7, #28]
 8017f42:	f003 0307 	and.w	r3, r3, #7
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d00a      	beq.n	8017f60 <pvPortMalloc+0x174>
	__asm volatile
 8017f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f4e:	f383 8811 	msr	BASEPRI, r3
 8017f52:	f3bf 8f6f 	isb	sy
 8017f56:	f3bf 8f4f 	dsb	sy
 8017f5a:	60fb      	str	r3, [r7, #12]
}
 8017f5c:	bf00      	nop
 8017f5e:	e7fe      	b.n	8017f5e <pvPortMalloc+0x172>
	return pvReturn;
 8017f60:	69fb      	ldr	r3, [r7, #28]
}
 8017f62:	4618      	mov	r0, r3
 8017f64:	3728      	adds	r7, #40	; 0x28
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}
 8017f6a:	bf00      	nop
 8017f6c:	20005e58 	.word	0x20005e58
 8017f70:	20005e64 	.word	0x20005e64
 8017f74:	20005e5c 	.word	0x20005e5c
 8017f78:	20005e50 	.word	0x20005e50
 8017f7c:	20005e60 	.word	0x20005e60

08017f80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b086      	sub	sp, #24
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d048      	beq.n	8018024 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017f92:	2308      	movs	r3, #8
 8017f94:	425b      	negs	r3, r3
 8017f96:	697a      	ldr	r2, [r7, #20]
 8017f98:	4413      	add	r3, r2
 8017f9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017f9c:	697b      	ldr	r3, [r7, #20]
 8017f9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017fa0:	693b      	ldr	r3, [r7, #16]
 8017fa2:	685a      	ldr	r2, [r3, #4]
 8017fa4:	4b21      	ldr	r3, [pc, #132]	; (801802c <vPortFree+0xac>)
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	4013      	ands	r3, r2
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d10a      	bne.n	8017fc4 <vPortFree+0x44>
	__asm volatile
 8017fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fb2:	f383 8811 	msr	BASEPRI, r3
 8017fb6:	f3bf 8f6f 	isb	sy
 8017fba:	f3bf 8f4f 	dsb	sy
 8017fbe:	60fb      	str	r3, [r7, #12]
}
 8017fc0:	bf00      	nop
 8017fc2:	e7fe      	b.n	8017fc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017fc4:	693b      	ldr	r3, [r7, #16]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d00a      	beq.n	8017fe2 <vPortFree+0x62>
	__asm volatile
 8017fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd0:	f383 8811 	msr	BASEPRI, r3
 8017fd4:	f3bf 8f6f 	isb	sy
 8017fd8:	f3bf 8f4f 	dsb	sy
 8017fdc:	60bb      	str	r3, [r7, #8]
}
 8017fde:	bf00      	nop
 8017fe0:	e7fe      	b.n	8017fe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017fe2:	693b      	ldr	r3, [r7, #16]
 8017fe4:	685a      	ldr	r2, [r3, #4]
 8017fe6:	4b11      	ldr	r3, [pc, #68]	; (801802c <vPortFree+0xac>)
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	4013      	ands	r3, r2
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d019      	beq.n	8018024 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017ff0:	693b      	ldr	r3, [r7, #16]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d115      	bne.n	8018024 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017ff8:	693b      	ldr	r3, [r7, #16]
 8017ffa:	685a      	ldr	r2, [r3, #4]
 8017ffc:	4b0b      	ldr	r3, [pc, #44]	; (801802c <vPortFree+0xac>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	43db      	mvns	r3, r3
 8018002:	401a      	ands	r2, r3
 8018004:	693b      	ldr	r3, [r7, #16]
 8018006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018008:	f7fe fb8c 	bl	8016724 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801800c:	693b      	ldr	r3, [r7, #16]
 801800e:	685a      	ldr	r2, [r3, #4]
 8018010:	4b07      	ldr	r3, [pc, #28]	; (8018030 <vPortFree+0xb0>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	4413      	add	r3, r2
 8018016:	4a06      	ldr	r2, [pc, #24]	; (8018030 <vPortFree+0xb0>)
 8018018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801801a:	6938      	ldr	r0, [r7, #16]
 801801c:	f000 f86c 	bl	80180f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018020:	f7fe fb8e 	bl	8016740 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018024:	bf00      	nop
 8018026:	3718      	adds	r7, #24
 8018028:	46bd      	mov	sp, r7
 801802a:	bd80      	pop	{r7, pc}
 801802c:	20005e64 	.word	0x20005e64
 8018030:	20005e5c 	.word	0x20005e5c

08018034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018034:	b480      	push	{r7}
 8018036:	b085      	sub	sp, #20
 8018038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801803a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801803e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018040:	4b27      	ldr	r3, [pc, #156]	; (80180e0 <prvHeapInit+0xac>)
 8018042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	f003 0307 	and.w	r3, r3, #7
 801804a:	2b00      	cmp	r3, #0
 801804c:	d00c      	beq.n	8018068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	3307      	adds	r3, #7
 8018052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	f023 0307 	bic.w	r3, r3, #7
 801805a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801805c:	68ba      	ldr	r2, [r7, #8]
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	1ad3      	subs	r3, r2, r3
 8018062:	4a1f      	ldr	r2, [pc, #124]	; (80180e0 <prvHeapInit+0xac>)
 8018064:	4413      	add	r3, r2
 8018066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801806c:	4a1d      	ldr	r2, [pc, #116]	; (80180e4 <prvHeapInit+0xb0>)
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018072:	4b1c      	ldr	r3, [pc, #112]	; (80180e4 <prvHeapInit+0xb0>)
 8018074:	2200      	movs	r2, #0
 8018076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	68ba      	ldr	r2, [r7, #8]
 801807c:	4413      	add	r3, r2
 801807e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018080:	2208      	movs	r2, #8
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	1a9b      	subs	r3, r3, r2
 8018086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	f023 0307 	bic.w	r3, r3, #7
 801808e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	4a15      	ldr	r2, [pc, #84]	; (80180e8 <prvHeapInit+0xb4>)
 8018094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018096:	4b14      	ldr	r3, [pc, #80]	; (80180e8 <prvHeapInit+0xb4>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	2200      	movs	r2, #0
 801809c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801809e:	4b12      	ldr	r3, [pc, #72]	; (80180e8 <prvHeapInit+0xb4>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	2200      	movs	r2, #0
 80180a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	68fa      	ldr	r2, [r7, #12]
 80180ae:	1ad2      	subs	r2, r2, r3
 80180b0:	683b      	ldr	r3, [r7, #0]
 80180b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80180b4:	4b0c      	ldr	r3, [pc, #48]	; (80180e8 <prvHeapInit+0xb4>)
 80180b6:	681a      	ldr	r2, [r3, #0]
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80180bc:	683b      	ldr	r3, [r7, #0]
 80180be:	685b      	ldr	r3, [r3, #4]
 80180c0:	4a0a      	ldr	r2, [pc, #40]	; (80180ec <prvHeapInit+0xb8>)
 80180c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80180c4:	683b      	ldr	r3, [r7, #0]
 80180c6:	685b      	ldr	r3, [r3, #4]
 80180c8:	4a09      	ldr	r2, [pc, #36]	; (80180f0 <prvHeapInit+0xbc>)
 80180ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80180cc:	4b09      	ldr	r3, [pc, #36]	; (80180f4 <prvHeapInit+0xc0>)
 80180ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80180d2:	601a      	str	r2, [r3, #0]
}
 80180d4:	bf00      	nop
 80180d6:	3714      	adds	r7, #20
 80180d8:	46bd      	mov	sp, r7
 80180da:	bc80      	pop	{r7}
 80180dc:	4770      	bx	lr
 80180de:	bf00      	nop
 80180e0:	20002e50 	.word	0x20002e50
 80180e4:	20005e50 	.word	0x20005e50
 80180e8:	20005e58 	.word	0x20005e58
 80180ec:	20005e60 	.word	0x20005e60
 80180f0:	20005e5c 	.word	0x20005e5c
 80180f4:	20005e64 	.word	0x20005e64

080180f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80180f8:	b480      	push	{r7}
 80180fa:	b085      	sub	sp, #20
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018100:	4b27      	ldr	r3, [pc, #156]	; (80181a0 <prvInsertBlockIntoFreeList+0xa8>)
 8018102:	60fb      	str	r3, [r7, #12]
 8018104:	e002      	b.n	801810c <prvInsertBlockIntoFreeList+0x14>
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	60fb      	str	r3, [r7, #12]
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	687a      	ldr	r2, [r7, #4]
 8018112:	429a      	cmp	r2, r3
 8018114:	d8f7      	bhi.n	8018106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801811a:	68fb      	ldr	r3, [r7, #12]
 801811c:	685b      	ldr	r3, [r3, #4]
 801811e:	68ba      	ldr	r2, [r7, #8]
 8018120:	4413      	add	r3, r2
 8018122:	687a      	ldr	r2, [r7, #4]
 8018124:	429a      	cmp	r2, r3
 8018126:	d108      	bne.n	801813a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	685a      	ldr	r2, [r3, #4]
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	685b      	ldr	r3, [r3, #4]
 8018130:	441a      	add	r2, r3
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	685b      	ldr	r3, [r3, #4]
 8018142:	68ba      	ldr	r2, [r7, #8]
 8018144:	441a      	add	r2, r3
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	429a      	cmp	r2, r3
 801814c:	d118      	bne.n	8018180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	681a      	ldr	r2, [r3, #0]
 8018152:	4b14      	ldr	r3, [pc, #80]	; (80181a4 <prvInsertBlockIntoFreeList+0xac>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	429a      	cmp	r2, r3
 8018158:	d00d      	beq.n	8018176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	685a      	ldr	r2, [r3, #4]
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	685b      	ldr	r3, [r3, #4]
 8018164:	441a      	add	r2, r3
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	681a      	ldr	r2, [r3, #0]
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	601a      	str	r2, [r3, #0]
 8018174:	e008      	b.n	8018188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018176:	4b0b      	ldr	r3, [pc, #44]	; (80181a4 <prvInsertBlockIntoFreeList+0xac>)
 8018178:	681a      	ldr	r2, [r3, #0]
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	601a      	str	r2, [r3, #0]
 801817e:	e003      	b.n	8018188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	681a      	ldr	r2, [r3, #0]
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018188:	68fa      	ldr	r2, [r7, #12]
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	429a      	cmp	r2, r3
 801818e:	d002      	beq.n	8018196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	687a      	ldr	r2, [r7, #4]
 8018194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018196:	bf00      	nop
 8018198:	3714      	adds	r7, #20
 801819a:	46bd      	mov	sp, r7
 801819c:	bc80      	pop	{r7}
 801819e:	4770      	bx	lr
 80181a0:	20005e50 	.word	0x20005e50
 80181a4:	20005e58 	.word	0x20005e58

080181a8 <__errno>:
 80181a8:	4b01      	ldr	r3, [pc, #4]	; (80181b0 <__errno+0x8>)
 80181aa:	6818      	ldr	r0, [r3, #0]
 80181ac:	4770      	bx	lr
 80181ae:	bf00      	nop
 80181b0:	20000098 	.word	0x20000098

080181b4 <fprintf>:
 80181b4:	b40e      	push	{r1, r2, r3}
 80181b6:	b503      	push	{r0, r1, lr}
 80181b8:	4601      	mov	r1, r0
 80181ba:	ab03      	add	r3, sp, #12
 80181bc:	4805      	ldr	r0, [pc, #20]	; (80181d4 <fprintf+0x20>)
 80181be:	f853 2b04 	ldr.w	r2, [r3], #4
 80181c2:	6800      	ldr	r0, [r0, #0]
 80181c4:	9301      	str	r3, [sp, #4]
 80181c6:	f002 f8d9 	bl	801a37c <_vfprintf_r>
 80181ca:	b002      	add	sp, #8
 80181cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80181d0:	b003      	add	sp, #12
 80181d2:	4770      	bx	lr
 80181d4:	20000098 	.word	0x20000098

080181d8 <__sfvwrite_r>:
 80181d8:	6893      	ldr	r3, [r2, #8]
 80181da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181de:	4606      	mov	r6, r0
 80181e0:	460c      	mov	r4, r1
 80181e2:	4690      	mov	r8, r2
 80181e4:	b91b      	cbnz	r3, 80181ee <__sfvwrite_r+0x16>
 80181e6:	2000      	movs	r0, #0
 80181e8:	b003      	add	sp, #12
 80181ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ee:	898b      	ldrh	r3, [r1, #12]
 80181f0:	0718      	lsls	r0, r3, #28
 80181f2:	d550      	bpl.n	8018296 <__sfvwrite_r+0xbe>
 80181f4:	690b      	ldr	r3, [r1, #16]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d04d      	beq.n	8018296 <__sfvwrite_r+0xbe>
 80181fa:	89a3      	ldrh	r3, [r4, #12]
 80181fc:	f8d8 7000 	ldr.w	r7, [r8]
 8018200:	f013 0902 	ands.w	r9, r3, #2
 8018204:	d16b      	bne.n	80182de <__sfvwrite_r+0x106>
 8018206:	f013 0301 	ands.w	r3, r3, #1
 801820a:	f000 809b 	beq.w	8018344 <__sfvwrite_r+0x16c>
 801820e:	4648      	mov	r0, r9
 8018210:	46ca      	mov	sl, r9
 8018212:	46cb      	mov	fp, r9
 8018214:	f1bb 0f00 	cmp.w	fp, #0
 8018218:	f000 8102 	beq.w	8018420 <__sfvwrite_r+0x248>
 801821c:	b950      	cbnz	r0, 8018234 <__sfvwrite_r+0x5c>
 801821e:	465a      	mov	r2, fp
 8018220:	210a      	movs	r1, #10
 8018222:	4650      	mov	r0, sl
 8018224:	f7f0 f9ac 	bl	8008580 <memchr>
 8018228:	2800      	cmp	r0, #0
 801822a:	f000 80fe 	beq.w	801842a <__sfvwrite_r+0x252>
 801822e:	3001      	adds	r0, #1
 8018230:	eba0 090a 	sub.w	r9, r0, sl
 8018234:	6820      	ldr	r0, [r4, #0]
 8018236:	6921      	ldr	r1, [r4, #16]
 8018238:	6963      	ldr	r3, [r4, #20]
 801823a:	45d9      	cmp	r9, fp
 801823c:	464a      	mov	r2, r9
 801823e:	bf28      	it	cs
 8018240:	465a      	movcs	r2, fp
 8018242:	4288      	cmp	r0, r1
 8018244:	f240 80f4 	bls.w	8018430 <__sfvwrite_r+0x258>
 8018248:	68a5      	ldr	r5, [r4, #8]
 801824a:	441d      	add	r5, r3
 801824c:	42aa      	cmp	r2, r5
 801824e:	f340 80ef 	ble.w	8018430 <__sfvwrite_r+0x258>
 8018252:	4651      	mov	r1, sl
 8018254:	462a      	mov	r2, r5
 8018256:	f000 fbe1 	bl	8018a1c <memmove>
 801825a:	6823      	ldr	r3, [r4, #0]
 801825c:	442b      	add	r3, r5
 801825e:	6023      	str	r3, [r4, #0]
 8018260:	4621      	mov	r1, r4
 8018262:	4630      	mov	r0, r6
 8018264:	f004 fa18 	bl	801c698 <_fflush_r>
 8018268:	2800      	cmp	r0, #0
 801826a:	d166      	bne.n	801833a <__sfvwrite_r+0x162>
 801826c:	ebb9 0905 	subs.w	r9, r9, r5
 8018270:	f040 80f6 	bne.w	8018460 <__sfvwrite_r+0x288>
 8018274:	4621      	mov	r1, r4
 8018276:	4630      	mov	r0, r6
 8018278:	f004 fa0e 	bl	801c698 <_fflush_r>
 801827c:	2800      	cmp	r0, #0
 801827e:	d15c      	bne.n	801833a <__sfvwrite_r+0x162>
 8018280:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8018284:	44aa      	add	sl, r5
 8018286:	ebab 0b05 	sub.w	fp, fp, r5
 801828a:	1b55      	subs	r5, r2, r5
 801828c:	f8c8 5008 	str.w	r5, [r8, #8]
 8018290:	2d00      	cmp	r5, #0
 8018292:	d1bf      	bne.n	8018214 <__sfvwrite_r+0x3c>
 8018294:	e7a7      	b.n	80181e6 <__sfvwrite_r+0xe>
 8018296:	4621      	mov	r1, r4
 8018298:	4630      	mov	r0, r6
 801829a:	f003 facd 	bl	801b838 <__swsetup_r>
 801829e:	2800      	cmp	r0, #0
 80182a0:	d0ab      	beq.n	80181fa <__sfvwrite_r+0x22>
 80182a2:	f04f 30ff 	mov.w	r0, #4294967295
 80182a6:	e79f      	b.n	80181e8 <__sfvwrite_r+0x10>
 80182a8:	e9d7 b500 	ldrd	fp, r5, [r7]
 80182ac:	3708      	adds	r7, #8
 80182ae:	2d00      	cmp	r5, #0
 80182b0:	d0fa      	beq.n	80182a8 <__sfvwrite_r+0xd0>
 80182b2:	4555      	cmp	r5, sl
 80182b4:	462b      	mov	r3, r5
 80182b6:	69e1      	ldr	r1, [r4, #28]
 80182b8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 80182bc:	bf28      	it	cs
 80182be:	4653      	movcs	r3, sl
 80182c0:	465a      	mov	r2, fp
 80182c2:	4630      	mov	r0, r6
 80182c4:	47e0      	blx	ip
 80182c6:	2800      	cmp	r0, #0
 80182c8:	dd37      	ble.n	801833a <__sfvwrite_r+0x162>
 80182ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182ce:	4483      	add	fp, r0
 80182d0:	1a2d      	subs	r5, r5, r0
 80182d2:	1a18      	subs	r0, r3, r0
 80182d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80182d8:	2800      	cmp	r0, #0
 80182da:	d1e8      	bne.n	80182ae <__sfvwrite_r+0xd6>
 80182dc:	e783      	b.n	80181e6 <__sfvwrite_r+0xe>
 80182de:	f04f 0b00 	mov.w	fp, #0
 80182e2:	f8df a180 	ldr.w	sl, [pc, #384]	; 8018464 <__sfvwrite_r+0x28c>
 80182e6:	465d      	mov	r5, fp
 80182e8:	e7e1      	b.n	80182ae <__sfvwrite_r+0xd6>
 80182ea:	e9d7 9a00 	ldrd	r9, sl, [r7]
 80182ee:	3708      	adds	r7, #8
 80182f0:	f1ba 0f00 	cmp.w	sl, #0
 80182f4:	d0f9      	beq.n	80182ea <__sfvwrite_r+0x112>
 80182f6:	89a3      	ldrh	r3, [r4, #12]
 80182f8:	6820      	ldr	r0, [r4, #0]
 80182fa:	68a2      	ldr	r2, [r4, #8]
 80182fc:	0599      	lsls	r1, r3, #22
 80182fe:	d563      	bpl.n	80183c8 <__sfvwrite_r+0x1f0>
 8018300:	4552      	cmp	r2, sl
 8018302:	d836      	bhi.n	8018372 <__sfvwrite_r+0x19a>
 8018304:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8018308:	d033      	beq.n	8018372 <__sfvwrite_r+0x19a>
 801830a:	6921      	ldr	r1, [r4, #16]
 801830c:	6965      	ldr	r5, [r4, #20]
 801830e:	eba0 0b01 	sub.w	fp, r0, r1
 8018312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018316:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801831a:	f10b 0201 	add.w	r2, fp, #1
 801831e:	106d      	asrs	r5, r5, #1
 8018320:	4452      	add	r2, sl
 8018322:	4295      	cmp	r5, r2
 8018324:	bf38      	it	cc
 8018326:	4615      	movcc	r5, r2
 8018328:	055b      	lsls	r3, r3, #21
 801832a:	d53d      	bpl.n	80183a8 <__sfvwrite_r+0x1d0>
 801832c:	4629      	mov	r1, r5
 801832e:	4630      	mov	r0, r6
 8018330:	f000 f91a 	bl	8018568 <_malloc_r>
 8018334:	b948      	cbnz	r0, 801834a <__sfvwrite_r+0x172>
 8018336:	230c      	movs	r3, #12
 8018338:	6033      	str	r3, [r6, #0]
 801833a:	89a3      	ldrh	r3, [r4, #12]
 801833c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018340:	81a3      	strh	r3, [r4, #12]
 8018342:	e7ae      	b.n	80182a2 <__sfvwrite_r+0xca>
 8018344:	4699      	mov	r9, r3
 8018346:	469a      	mov	sl, r3
 8018348:	e7d2      	b.n	80182f0 <__sfvwrite_r+0x118>
 801834a:	465a      	mov	r2, fp
 801834c:	6921      	ldr	r1, [r4, #16]
 801834e:	9001      	str	r0, [sp, #4]
 8018350:	f000 fb56 	bl	8018a00 <memcpy>
 8018354:	89a2      	ldrh	r2, [r4, #12]
 8018356:	9b01      	ldr	r3, [sp, #4]
 8018358:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801835c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018360:	81a2      	strh	r2, [r4, #12]
 8018362:	6123      	str	r3, [r4, #16]
 8018364:	6165      	str	r5, [r4, #20]
 8018366:	445b      	add	r3, fp
 8018368:	eba5 050b 	sub.w	r5, r5, fp
 801836c:	6023      	str	r3, [r4, #0]
 801836e:	4652      	mov	r2, sl
 8018370:	60a5      	str	r5, [r4, #8]
 8018372:	4552      	cmp	r2, sl
 8018374:	bf28      	it	cs
 8018376:	4652      	movcs	r2, sl
 8018378:	6820      	ldr	r0, [r4, #0]
 801837a:	9201      	str	r2, [sp, #4]
 801837c:	4649      	mov	r1, r9
 801837e:	f000 fb4d 	bl	8018a1c <memmove>
 8018382:	68a3      	ldr	r3, [r4, #8]
 8018384:	9a01      	ldr	r2, [sp, #4]
 8018386:	1a9b      	subs	r3, r3, r2
 8018388:	60a3      	str	r3, [r4, #8]
 801838a:	6823      	ldr	r3, [r4, #0]
 801838c:	441a      	add	r2, r3
 801838e:	4655      	mov	r5, sl
 8018390:	6022      	str	r2, [r4, #0]
 8018392:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8018396:	44a9      	add	r9, r5
 8018398:	ebaa 0a05 	sub.w	sl, sl, r5
 801839c:	1b45      	subs	r5, r0, r5
 801839e:	f8c8 5008 	str.w	r5, [r8, #8]
 80183a2:	2d00      	cmp	r5, #0
 80183a4:	d1a4      	bne.n	80182f0 <__sfvwrite_r+0x118>
 80183a6:	e71e      	b.n	80181e6 <__sfvwrite_r+0xe>
 80183a8:	462a      	mov	r2, r5
 80183aa:	4630      	mov	r0, r6
 80183ac:	f000 fb64 	bl	8018a78 <_realloc_r>
 80183b0:	4603      	mov	r3, r0
 80183b2:	2800      	cmp	r0, #0
 80183b4:	d1d5      	bne.n	8018362 <__sfvwrite_r+0x18a>
 80183b6:	6921      	ldr	r1, [r4, #16]
 80183b8:	4630      	mov	r0, r6
 80183ba:	f004 fa69 	bl	801c890 <_free_r>
 80183be:	89a3      	ldrh	r3, [r4, #12]
 80183c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80183c4:	81a3      	strh	r3, [r4, #12]
 80183c6:	e7b6      	b.n	8018336 <__sfvwrite_r+0x15e>
 80183c8:	6923      	ldr	r3, [r4, #16]
 80183ca:	4283      	cmp	r3, r0
 80183cc:	d302      	bcc.n	80183d4 <__sfvwrite_r+0x1fc>
 80183ce:	6961      	ldr	r1, [r4, #20]
 80183d0:	4551      	cmp	r1, sl
 80183d2:	d915      	bls.n	8018400 <__sfvwrite_r+0x228>
 80183d4:	4552      	cmp	r2, sl
 80183d6:	bf28      	it	cs
 80183d8:	4652      	movcs	r2, sl
 80183da:	4649      	mov	r1, r9
 80183dc:	4615      	mov	r5, r2
 80183de:	f000 fb1d 	bl	8018a1c <memmove>
 80183e2:	68a3      	ldr	r3, [r4, #8]
 80183e4:	6822      	ldr	r2, [r4, #0]
 80183e6:	1b5b      	subs	r3, r3, r5
 80183e8:	442a      	add	r2, r5
 80183ea:	60a3      	str	r3, [r4, #8]
 80183ec:	6022      	str	r2, [r4, #0]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d1cf      	bne.n	8018392 <__sfvwrite_r+0x1ba>
 80183f2:	4621      	mov	r1, r4
 80183f4:	4630      	mov	r0, r6
 80183f6:	f004 f94f 	bl	801c698 <_fflush_r>
 80183fa:	2800      	cmp	r0, #0
 80183fc:	d0c9      	beq.n	8018392 <__sfvwrite_r+0x1ba>
 80183fe:	e79c      	b.n	801833a <__sfvwrite_r+0x162>
 8018400:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018404:	459a      	cmp	sl, r3
 8018406:	bf38      	it	cc
 8018408:	4653      	movcc	r3, sl
 801840a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801840c:	fb93 f3f1 	sdiv	r3, r3, r1
 8018410:	464a      	mov	r2, r9
 8018412:	434b      	muls	r3, r1
 8018414:	4630      	mov	r0, r6
 8018416:	69e1      	ldr	r1, [r4, #28]
 8018418:	47a8      	blx	r5
 801841a:	1e05      	subs	r5, r0, #0
 801841c:	dcb9      	bgt.n	8018392 <__sfvwrite_r+0x1ba>
 801841e:	e78c      	b.n	801833a <__sfvwrite_r+0x162>
 8018420:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8018424:	2000      	movs	r0, #0
 8018426:	3708      	adds	r7, #8
 8018428:	e6f4      	b.n	8018214 <__sfvwrite_r+0x3c>
 801842a:	f10b 0901 	add.w	r9, fp, #1
 801842e:	e701      	b.n	8018234 <__sfvwrite_r+0x5c>
 8018430:	4293      	cmp	r3, r2
 8018432:	dc08      	bgt.n	8018446 <__sfvwrite_r+0x26e>
 8018434:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018436:	69e1      	ldr	r1, [r4, #28]
 8018438:	4652      	mov	r2, sl
 801843a:	4630      	mov	r0, r6
 801843c:	47a8      	blx	r5
 801843e:	1e05      	subs	r5, r0, #0
 8018440:	f73f af14 	bgt.w	801826c <__sfvwrite_r+0x94>
 8018444:	e779      	b.n	801833a <__sfvwrite_r+0x162>
 8018446:	4651      	mov	r1, sl
 8018448:	9201      	str	r2, [sp, #4]
 801844a:	f000 fae7 	bl	8018a1c <memmove>
 801844e:	9a01      	ldr	r2, [sp, #4]
 8018450:	68a3      	ldr	r3, [r4, #8]
 8018452:	1a9b      	subs	r3, r3, r2
 8018454:	60a3      	str	r3, [r4, #8]
 8018456:	6823      	ldr	r3, [r4, #0]
 8018458:	4413      	add	r3, r2
 801845a:	6023      	str	r3, [r4, #0]
 801845c:	4615      	mov	r5, r2
 801845e:	e705      	b.n	801826c <__sfvwrite_r+0x94>
 8018460:	2001      	movs	r0, #1
 8018462:	e70d      	b.n	8018280 <__sfvwrite_r+0xa8>
 8018464:	7ffffc00 	.word	0x7ffffc00

08018468 <_fwrite_r>:
 8018468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801846c:	b086      	sub	sp, #24
 801846e:	fb02 f603 	mul.w	r6, r2, r3
 8018472:	461d      	mov	r5, r3
 8018474:	ab01      	add	r3, sp, #4
 8018476:	9303      	str	r3, [sp, #12]
 8018478:	2301      	movs	r3, #1
 801847a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801847c:	9101      	str	r1, [sp, #4]
 801847e:	4690      	mov	r8, r2
 8018480:	9602      	str	r6, [sp, #8]
 8018482:	9605      	str	r6, [sp, #20]
 8018484:	9304      	str	r3, [sp, #16]
 8018486:	4607      	mov	r7, r0
 8018488:	b118      	cbz	r0, 8018492 <_fwrite_r+0x2a>
 801848a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801848c:	b90b      	cbnz	r3, 8018492 <_fwrite_r+0x2a>
 801848e:	f004 f96f 	bl	801c770 <__sinit>
 8018492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018494:	07d8      	lsls	r0, r3, #31
 8018496:	d405      	bmi.n	80184a4 <_fwrite_r+0x3c>
 8018498:	89a3      	ldrh	r3, [r4, #12]
 801849a:	0599      	lsls	r1, r3, #22
 801849c:	d402      	bmi.n	80184a4 <_fwrite_r+0x3c>
 801849e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80184a0:	f000 f860 	bl	8018564 <__retarget_lock_acquire_recursive>
 80184a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184a8:	049a      	lsls	r2, r3, #18
 80184aa:	d406      	bmi.n	80184ba <_fwrite_r+0x52>
 80184ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80184b0:	81a3      	strh	r3, [r4, #12]
 80184b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80184b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80184b8:	6663      	str	r3, [r4, #100]	; 0x64
 80184ba:	aa03      	add	r2, sp, #12
 80184bc:	4621      	mov	r1, r4
 80184be:	4638      	mov	r0, r7
 80184c0:	f7ff fe8a 	bl	80181d8 <__sfvwrite_r>
 80184c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80184c6:	b958      	cbnz	r0, 80184e0 <_fwrite_r+0x78>
 80184c8:	07d8      	lsls	r0, r3, #31
 80184ca:	d405      	bmi.n	80184d8 <_fwrite_r+0x70>
 80184cc:	89a3      	ldrh	r3, [r4, #12]
 80184ce:	0599      	lsls	r1, r3, #22
 80184d0:	d402      	bmi.n	80184d8 <_fwrite_r+0x70>
 80184d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80184d4:	f000 f847 	bl	8018566 <__retarget_lock_release_recursive>
 80184d8:	4628      	mov	r0, r5
 80184da:	b006      	add	sp, #24
 80184dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184e0:	07da      	lsls	r2, r3, #31
 80184e2:	d405      	bmi.n	80184f0 <_fwrite_r+0x88>
 80184e4:	89a3      	ldrh	r3, [r4, #12]
 80184e6:	059b      	lsls	r3, r3, #22
 80184e8:	d402      	bmi.n	80184f0 <_fwrite_r+0x88>
 80184ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80184ec:	f000 f83b 	bl	8018566 <__retarget_lock_release_recursive>
 80184f0:	9d05      	ldr	r5, [sp, #20]
 80184f2:	1b75      	subs	r5, r6, r5
 80184f4:	fbb5 f5f8 	udiv	r5, r5, r8
 80184f8:	e7ee      	b.n	80184d8 <_fwrite_r+0x70>
	...

080184fc <fwrite>:
 80184fc:	b507      	push	{r0, r1, r2, lr}
 80184fe:	9300      	str	r3, [sp, #0]
 8018500:	4613      	mov	r3, r2
 8018502:	460a      	mov	r2, r1
 8018504:	4601      	mov	r1, r0
 8018506:	4803      	ldr	r0, [pc, #12]	; (8018514 <fwrite+0x18>)
 8018508:	6800      	ldr	r0, [r0, #0]
 801850a:	f7ff ffad 	bl	8018468 <_fwrite_r>
 801850e:	b003      	add	sp, #12
 8018510:	f85d fb04 	ldr.w	pc, [sp], #4
 8018514:	20000098 	.word	0x20000098

08018518 <__libc_init_array>:
 8018518:	b570      	push	{r4, r5, r6, lr}
 801851a:	4d0d      	ldr	r5, [pc, #52]	; (8018550 <__libc_init_array+0x38>)
 801851c:	4c0d      	ldr	r4, [pc, #52]	; (8018554 <__libc_init_array+0x3c>)
 801851e:	1b64      	subs	r4, r4, r5
 8018520:	10a4      	asrs	r4, r4, #2
 8018522:	2600      	movs	r6, #0
 8018524:	42a6      	cmp	r6, r4
 8018526:	d109      	bne.n	801853c <__libc_init_array+0x24>
 8018528:	4d0b      	ldr	r5, [pc, #44]	; (8018558 <__libc_init_array+0x40>)
 801852a:	4c0c      	ldr	r4, [pc, #48]	; (801855c <__libc_init_array+0x44>)
 801852c:	f006 fdbe 	bl	801f0ac <_init>
 8018530:	1b64      	subs	r4, r4, r5
 8018532:	10a4      	asrs	r4, r4, #2
 8018534:	2600      	movs	r6, #0
 8018536:	42a6      	cmp	r6, r4
 8018538:	d105      	bne.n	8018546 <__libc_init_array+0x2e>
 801853a:	bd70      	pop	{r4, r5, r6, pc}
 801853c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018540:	4798      	blx	r3
 8018542:	3601      	adds	r6, #1
 8018544:	e7ee      	b.n	8018524 <__libc_init_array+0xc>
 8018546:	f855 3b04 	ldr.w	r3, [r5], #4
 801854a:	4798      	blx	r3
 801854c:	3601      	adds	r6, #1
 801854e:	e7f2      	b.n	8018536 <__libc_init_array+0x1e>
 8018550:	080208e8 	.word	0x080208e8
 8018554:	080208e8 	.word	0x080208e8
 8018558:	080208e8 	.word	0x080208e8
 801855c:	080208f0 	.word	0x080208f0

08018560 <__retarget_lock_init_recursive>:
 8018560:	4770      	bx	lr

08018562 <__retarget_lock_close_recursive>:
 8018562:	4770      	bx	lr

08018564 <__retarget_lock_acquire_recursive>:
 8018564:	4770      	bx	lr

08018566 <__retarget_lock_release_recursive>:
 8018566:	4770      	bx	lr

08018568 <_malloc_r>:
 8018568:	f101 030b 	add.w	r3, r1, #11
 801856c:	2b16      	cmp	r3, #22
 801856e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018572:	4605      	mov	r5, r0
 8018574:	d906      	bls.n	8018584 <_malloc_r+0x1c>
 8018576:	f033 0707 	bics.w	r7, r3, #7
 801857a:	d504      	bpl.n	8018586 <_malloc_r+0x1e>
 801857c:	230c      	movs	r3, #12
 801857e:	602b      	str	r3, [r5, #0]
 8018580:	2400      	movs	r4, #0
 8018582:	e1a3      	b.n	80188cc <_malloc_r+0x364>
 8018584:	2710      	movs	r7, #16
 8018586:	42b9      	cmp	r1, r7
 8018588:	d8f8      	bhi.n	801857c <_malloc_r+0x14>
 801858a:	4628      	mov	r0, r5
 801858c:	f000 fa68 	bl	8018a60 <__malloc_lock>
 8018590:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8018594:	4eaf      	ldr	r6, [pc, #700]	; (8018854 <_malloc_r+0x2ec>)
 8018596:	d237      	bcs.n	8018608 <_malloc_r+0xa0>
 8018598:	f107 0208 	add.w	r2, r7, #8
 801859c:	4432      	add	r2, r6
 801859e:	f1a2 0108 	sub.w	r1, r2, #8
 80185a2:	6854      	ldr	r4, [r2, #4]
 80185a4:	428c      	cmp	r4, r1
 80185a6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80185aa:	d102      	bne.n	80185b2 <_malloc_r+0x4a>
 80185ac:	68d4      	ldr	r4, [r2, #12]
 80185ae:	42a2      	cmp	r2, r4
 80185b0:	d010      	beq.n	80185d4 <_malloc_r+0x6c>
 80185b2:	6863      	ldr	r3, [r4, #4]
 80185b4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80185b8:	f023 0303 	bic.w	r3, r3, #3
 80185bc:	60ca      	str	r2, [r1, #12]
 80185be:	4423      	add	r3, r4
 80185c0:	6091      	str	r1, [r2, #8]
 80185c2:	685a      	ldr	r2, [r3, #4]
 80185c4:	f042 0201 	orr.w	r2, r2, #1
 80185c8:	605a      	str	r2, [r3, #4]
 80185ca:	4628      	mov	r0, r5
 80185cc:	f000 fa4e 	bl	8018a6c <__malloc_unlock>
 80185d0:	3408      	adds	r4, #8
 80185d2:	e17b      	b.n	80188cc <_malloc_r+0x364>
 80185d4:	3302      	adds	r3, #2
 80185d6:	6934      	ldr	r4, [r6, #16]
 80185d8:	499f      	ldr	r1, [pc, #636]	; (8018858 <_malloc_r+0x2f0>)
 80185da:	428c      	cmp	r4, r1
 80185dc:	d077      	beq.n	80186ce <_malloc_r+0x166>
 80185de:	6862      	ldr	r2, [r4, #4]
 80185e0:	f022 0c03 	bic.w	ip, r2, #3
 80185e4:	ebac 0007 	sub.w	r0, ip, r7
 80185e8:	280f      	cmp	r0, #15
 80185ea:	dd48      	ble.n	801867e <_malloc_r+0x116>
 80185ec:	19e2      	adds	r2, r4, r7
 80185ee:	f040 0301 	orr.w	r3, r0, #1
 80185f2:	f047 0701 	orr.w	r7, r7, #1
 80185f6:	6067      	str	r7, [r4, #4]
 80185f8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80185fc:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8018600:	6053      	str	r3, [r2, #4]
 8018602:	f844 000c 	str.w	r0, [r4, ip]
 8018606:	e7e0      	b.n	80185ca <_malloc_r+0x62>
 8018608:	0a7b      	lsrs	r3, r7, #9
 801860a:	d02a      	beq.n	8018662 <_malloc_r+0xfa>
 801860c:	2b04      	cmp	r3, #4
 801860e:	d812      	bhi.n	8018636 <_malloc_r+0xce>
 8018610:	09bb      	lsrs	r3, r7, #6
 8018612:	3338      	adds	r3, #56	; 0x38
 8018614:	1c5a      	adds	r2, r3, #1
 8018616:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801861a:	f1a2 0c08 	sub.w	ip, r2, #8
 801861e:	6854      	ldr	r4, [r2, #4]
 8018620:	4564      	cmp	r4, ip
 8018622:	d006      	beq.n	8018632 <_malloc_r+0xca>
 8018624:	6862      	ldr	r2, [r4, #4]
 8018626:	f022 0203 	bic.w	r2, r2, #3
 801862a:	1bd0      	subs	r0, r2, r7
 801862c:	280f      	cmp	r0, #15
 801862e:	dd1c      	ble.n	801866a <_malloc_r+0x102>
 8018630:	3b01      	subs	r3, #1
 8018632:	3301      	adds	r3, #1
 8018634:	e7cf      	b.n	80185d6 <_malloc_r+0x6e>
 8018636:	2b14      	cmp	r3, #20
 8018638:	d801      	bhi.n	801863e <_malloc_r+0xd6>
 801863a:	335b      	adds	r3, #91	; 0x5b
 801863c:	e7ea      	b.n	8018614 <_malloc_r+0xac>
 801863e:	2b54      	cmp	r3, #84	; 0x54
 8018640:	d802      	bhi.n	8018648 <_malloc_r+0xe0>
 8018642:	0b3b      	lsrs	r3, r7, #12
 8018644:	336e      	adds	r3, #110	; 0x6e
 8018646:	e7e5      	b.n	8018614 <_malloc_r+0xac>
 8018648:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801864c:	d802      	bhi.n	8018654 <_malloc_r+0xec>
 801864e:	0bfb      	lsrs	r3, r7, #15
 8018650:	3377      	adds	r3, #119	; 0x77
 8018652:	e7df      	b.n	8018614 <_malloc_r+0xac>
 8018654:	f240 5254 	movw	r2, #1364	; 0x554
 8018658:	4293      	cmp	r3, r2
 801865a:	d804      	bhi.n	8018666 <_malloc_r+0xfe>
 801865c:	0cbb      	lsrs	r3, r7, #18
 801865e:	337c      	adds	r3, #124	; 0x7c
 8018660:	e7d8      	b.n	8018614 <_malloc_r+0xac>
 8018662:	233f      	movs	r3, #63	; 0x3f
 8018664:	e7d6      	b.n	8018614 <_malloc_r+0xac>
 8018666:	237e      	movs	r3, #126	; 0x7e
 8018668:	e7d4      	b.n	8018614 <_malloc_r+0xac>
 801866a:	2800      	cmp	r0, #0
 801866c:	68e1      	ldr	r1, [r4, #12]
 801866e:	db04      	blt.n	801867a <_malloc_r+0x112>
 8018670:	68a3      	ldr	r3, [r4, #8]
 8018672:	60d9      	str	r1, [r3, #12]
 8018674:	608b      	str	r3, [r1, #8]
 8018676:	18a3      	adds	r3, r4, r2
 8018678:	e7a3      	b.n	80185c2 <_malloc_r+0x5a>
 801867a:	460c      	mov	r4, r1
 801867c:	e7d0      	b.n	8018620 <_malloc_r+0xb8>
 801867e:	2800      	cmp	r0, #0
 8018680:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8018684:	db07      	blt.n	8018696 <_malloc_r+0x12e>
 8018686:	44a4      	add	ip, r4
 8018688:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801868c:	f043 0301 	orr.w	r3, r3, #1
 8018690:	f8cc 3004 	str.w	r3, [ip, #4]
 8018694:	e799      	b.n	80185ca <_malloc_r+0x62>
 8018696:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801869a:	6870      	ldr	r0, [r6, #4]
 801869c:	f080 8094 	bcs.w	80187c8 <_malloc_r+0x260>
 80186a0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80186a4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80186a8:	f04f 0c01 	mov.w	ip, #1
 80186ac:	3201      	adds	r2, #1
 80186ae:	fa0c fc0e 	lsl.w	ip, ip, lr
 80186b2:	ea4c 0000 	orr.w	r0, ip, r0
 80186b6:	6070      	str	r0, [r6, #4]
 80186b8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80186bc:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80186c0:	3808      	subs	r0, #8
 80186c2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80186c6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80186ca:	f8cc 400c 	str.w	r4, [ip, #12]
 80186ce:	2001      	movs	r0, #1
 80186d0:	109a      	asrs	r2, r3, #2
 80186d2:	fa00 f202 	lsl.w	r2, r0, r2
 80186d6:	6870      	ldr	r0, [r6, #4]
 80186d8:	4290      	cmp	r0, r2
 80186da:	d326      	bcc.n	801872a <_malloc_r+0x1c2>
 80186dc:	4210      	tst	r0, r2
 80186de:	d106      	bne.n	80186ee <_malloc_r+0x186>
 80186e0:	f023 0303 	bic.w	r3, r3, #3
 80186e4:	0052      	lsls	r2, r2, #1
 80186e6:	4210      	tst	r0, r2
 80186e8:	f103 0304 	add.w	r3, r3, #4
 80186ec:	d0fa      	beq.n	80186e4 <_malloc_r+0x17c>
 80186ee:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80186f2:	46c1      	mov	r9, r8
 80186f4:	469e      	mov	lr, r3
 80186f6:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80186fa:	454c      	cmp	r4, r9
 80186fc:	f040 80b8 	bne.w	8018870 <_malloc_r+0x308>
 8018700:	f10e 0e01 	add.w	lr, lr, #1
 8018704:	f01e 0f03 	tst.w	lr, #3
 8018708:	f109 0908 	add.w	r9, r9, #8
 801870c:	d1f3      	bne.n	80186f6 <_malloc_r+0x18e>
 801870e:	0798      	lsls	r0, r3, #30
 8018710:	f040 80e2 	bne.w	80188d8 <_malloc_r+0x370>
 8018714:	6873      	ldr	r3, [r6, #4]
 8018716:	ea23 0302 	bic.w	r3, r3, r2
 801871a:	6073      	str	r3, [r6, #4]
 801871c:	6870      	ldr	r0, [r6, #4]
 801871e:	0052      	lsls	r2, r2, #1
 8018720:	4290      	cmp	r0, r2
 8018722:	d302      	bcc.n	801872a <_malloc_r+0x1c2>
 8018724:	2a00      	cmp	r2, #0
 8018726:	f040 80e4 	bne.w	80188f2 <_malloc_r+0x38a>
 801872a:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801872e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8018732:	f023 0903 	bic.w	r9, r3, #3
 8018736:	45b9      	cmp	r9, r7
 8018738:	d304      	bcc.n	8018744 <_malloc_r+0x1dc>
 801873a:	eba9 0207 	sub.w	r2, r9, r7
 801873e:	2a0f      	cmp	r2, #15
 8018740:	f300 8142 	bgt.w	80189c8 <_malloc_r+0x460>
 8018744:	4b45      	ldr	r3, [pc, #276]	; (801885c <_malloc_r+0x2f4>)
 8018746:	6819      	ldr	r1, [r3, #0]
 8018748:	3110      	adds	r1, #16
 801874a:	4439      	add	r1, r7
 801874c:	2008      	movs	r0, #8
 801874e:	9101      	str	r1, [sp, #4]
 8018750:	f001 fe06 	bl	801a360 <sysconf>
 8018754:	4a42      	ldr	r2, [pc, #264]	; (8018860 <_malloc_r+0x2f8>)
 8018756:	9901      	ldr	r1, [sp, #4]
 8018758:	6813      	ldr	r3, [r2, #0]
 801875a:	3301      	adds	r3, #1
 801875c:	bf1f      	itttt	ne
 801875e:	f101 31ff 	addne.w	r1, r1, #4294967295
 8018762:	1809      	addne	r1, r1, r0
 8018764:	4243      	negne	r3, r0
 8018766:	4019      	andne	r1, r3
 8018768:	4680      	mov	r8, r0
 801876a:	4628      	mov	r0, r5
 801876c:	9101      	str	r1, [sp, #4]
 801876e:	f000 fb79 	bl	8018e64 <_sbrk_r>
 8018772:	1c42      	adds	r2, r0, #1
 8018774:	eb0a 0b09 	add.w	fp, sl, r9
 8018778:	4604      	mov	r4, r0
 801877a:	f000 80f8 	beq.w	801896e <_malloc_r+0x406>
 801877e:	4583      	cmp	fp, r0
 8018780:	9901      	ldr	r1, [sp, #4]
 8018782:	4a37      	ldr	r2, [pc, #220]	; (8018860 <_malloc_r+0x2f8>)
 8018784:	d902      	bls.n	801878c <_malloc_r+0x224>
 8018786:	45b2      	cmp	sl, r6
 8018788:	f040 80f1 	bne.w	801896e <_malloc_r+0x406>
 801878c:	4b35      	ldr	r3, [pc, #212]	; (8018864 <_malloc_r+0x2fc>)
 801878e:	6818      	ldr	r0, [r3, #0]
 8018790:	45a3      	cmp	fp, r4
 8018792:	4408      	add	r0, r1
 8018794:	6018      	str	r0, [r3, #0]
 8018796:	f108 3cff 	add.w	ip, r8, #4294967295
 801879a:	f040 80ac 	bne.w	80188f6 <_malloc_r+0x38e>
 801879e:	ea1b 0f0c 	tst.w	fp, ip
 80187a2:	f040 80a8 	bne.w	80188f6 <_malloc_r+0x38e>
 80187a6:	68b2      	ldr	r2, [r6, #8]
 80187a8:	4449      	add	r1, r9
 80187aa:	f041 0101 	orr.w	r1, r1, #1
 80187ae:	6051      	str	r1, [r2, #4]
 80187b0:	4a2d      	ldr	r2, [pc, #180]	; (8018868 <_malloc_r+0x300>)
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	6811      	ldr	r1, [r2, #0]
 80187b6:	428b      	cmp	r3, r1
 80187b8:	bf88      	it	hi
 80187ba:	6013      	strhi	r3, [r2, #0]
 80187bc:	4a2b      	ldr	r2, [pc, #172]	; (801886c <_malloc_r+0x304>)
 80187be:	6811      	ldr	r1, [r2, #0]
 80187c0:	428b      	cmp	r3, r1
 80187c2:	bf88      	it	hi
 80187c4:	6013      	strhi	r3, [r2, #0]
 80187c6:	e0d2      	b.n	801896e <_malloc_r+0x406>
 80187c8:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80187cc:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80187d0:	d218      	bcs.n	8018804 <_malloc_r+0x29c>
 80187d2:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80187d6:	3238      	adds	r2, #56	; 0x38
 80187d8:	f102 0e01 	add.w	lr, r2, #1
 80187dc:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80187e0:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80187e4:	45f0      	cmp	r8, lr
 80187e6:	d12b      	bne.n	8018840 <_malloc_r+0x2d8>
 80187e8:	1092      	asrs	r2, r2, #2
 80187ea:	f04f 0c01 	mov.w	ip, #1
 80187ee:	fa0c f202 	lsl.w	r2, ip, r2
 80187f2:	4310      	orrs	r0, r2
 80187f4:	6070      	str	r0, [r6, #4]
 80187f6:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80187fa:	f8c8 4008 	str.w	r4, [r8, #8]
 80187fe:	f8ce 400c 	str.w	r4, [lr, #12]
 8018802:	e764      	b.n	80186ce <_malloc_r+0x166>
 8018804:	2a14      	cmp	r2, #20
 8018806:	d801      	bhi.n	801880c <_malloc_r+0x2a4>
 8018808:	325b      	adds	r2, #91	; 0x5b
 801880a:	e7e5      	b.n	80187d8 <_malloc_r+0x270>
 801880c:	2a54      	cmp	r2, #84	; 0x54
 801880e:	d803      	bhi.n	8018818 <_malloc_r+0x2b0>
 8018810:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8018814:	326e      	adds	r2, #110	; 0x6e
 8018816:	e7df      	b.n	80187d8 <_malloc_r+0x270>
 8018818:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801881c:	d803      	bhi.n	8018826 <_malloc_r+0x2be>
 801881e:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8018822:	3277      	adds	r2, #119	; 0x77
 8018824:	e7d8      	b.n	80187d8 <_malloc_r+0x270>
 8018826:	f240 5e54 	movw	lr, #1364	; 0x554
 801882a:	4572      	cmp	r2, lr
 801882c:	bf9a      	itte	ls
 801882e:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8018832:	327c      	addls	r2, #124	; 0x7c
 8018834:	227e      	movhi	r2, #126	; 0x7e
 8018836:	e7cf      	b.n	80187d8 <_malloc_r+0x270>
 8018838:	f8de e008 	ldr.w	lr, [lr, #8]
 801883c:	45f0      	cmp	r8, lr
 801883e:	d005      	beq.n	801884c <_malloc_r+0x2e4>
 8018840:	f8de 2004 	ldr.w	r2, [lr, #4]
 8018844:	f022 0203 	bic.w	r2, r2, #3
 8018848:	4562      	cmp	r2, ip
 801884a:	d8f5      	bhi.n	8018838 <_malloc_r+0x2d0>
 801884c:	f8de 800c 	ldr.w	r8, [lr, #12]
 8018850:	e7d1      	b.n	80187f6 <_malloc_r+0x28e>
 8018852:	bf00      	nop
 8018854:	200004c8 	.word	0x200004c8
 8018858:	200004d0 	.word	0x200004d0
 801885c:	20005e9c 	.word	0x20005e9c
 8018860:	200008d0 	.word	0x200008d0
 8018864:	20005e6c 	.word	0x20005e6c
 8018868:	20005e94 	.word	0x20005e94
 801886c:	20005e98 	.word	0x20005e98
 8018870:	6860      	ldr	r0, [r4, #4]
 8018872:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8018876:	f020 0003 	bic.w	r0, r0, #3
 801887a:	eba0 0a07 	sub.w	sl, r0, r7
 801887e:	f1ba 0f0f 	cmp.w	sl, #15
 8018882:	dd12      	ble.n	80188aa <_malloc_r+0x342>
 8018884:	68a3      	ldr	r3, [r4, #8]
 8018886:	19e2      	adds	r2, r4, r7
 8018888:	f047 0701 	orr.w	r7, r7, #1
 801888c:	6067      	str	r7, [r4, #4]
 801888e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8018892:	f8cc 3008 	str.w	r3, [ip, #8]
 8018896:	f04a 0301 	orr.w	r3, sl, #1
 801889a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801889e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80188a2:	6053      	str	r3, [r2, #4]
 80188a4:	f844 a000 	str.w	sl, [r4, r0]
 80188a8:	e68f      	b.n	80185ca <_malloc_r+0x62>
 80188aa:	f1ba 0f00 	cmp.w	sl, #0
 80188ae:	db11      	blt.n	80188d4 <_malloc_r+0x36c>
 80188b0:	4420      	add	r0, r4
 80188b2:	6843      	ldr	r3, [r0, #4]
 80188b4:	f043 0301 	orr.w	r3, r3, #1
 80188b8:	6043      	str	r3, [r0, #4]
 80188ba:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80188be:	4628      	mov	r0, r5
 80188c0:	f8c3 c00c 	str.w	ip, [r3, #12]
 80188c4:	f8cc 3008 	str.w	r3, [ip, #8]
 80188c8:	f000 f8d0 	bl	8018a6c <__malloc_unlock>
 80188cc:	4620      	mov	r0, r4
 80188ce:	b003      	add	sp, #12
 80188d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188d4:	4664      	mov	r4, ip
 80188d6:	e710      	b.n	80186fa <_malloc_r+0x192>
 80188d8:	f858 0908 	ldr.w	r0, [r8], #-8
 80188dc:	4540      	cmp	r0, r8
 80188de:	f103 33ff 	add.w	r3, r3, #4294967295
 80188e2:	f43f af14 	beq.w	801870e <_malloc_r+0x1a6>
 80188e6:	e719      	b.n	801871c <_malloc_r+0x1b4>
 80188e8:	3304      	adds	r3, #4
 80188ea:	0052      	lsls	r2, r2, #1
 80188ec:	4210      	tst	r0, r2
 80188ee:	d0fb      	beq.n	80188e8 <_malloc_r+0x380>
 80188f0:	e6fd      	b.n	80186ee <_malloc_r+0x186>
 80188f2:	4673      	mov	r3, lr
 80188f4:	e7fa      	b.n	80188ec <_malloc_r+0x384>
 80188f6:	f8d2 e000 	ldr.w	lr, [r2]
 80188fa:	f1be 3fff 	cmp.w	lr, #4294967295
 80188fe:	bf1b      	ittet	ne
 8018900:	eba4 0b0b 	subne.w	fp, r4, fp
 8018904:	eb0b 0200 	addne.w	r2, fp, r0
 8018908:	6014      	streq	r4, [r2, #0]
 801890a:	601a      	strne	r2, [r3, #0]
 801890c:	f014 0b07 	ands.w	fp, r4, #7
 8018910:	bf1a      	itte	ne
 8018912:	f1cb 0008 	rsbne	r0, fp, #8
 8018916:	1824      	addne	r4, r4, r0
 8018918:	4658      	moveq	r0, fp
 801891a:	1862      	adds	r2, r4, r1
 801891c:	ea02 010c 	and.w	r1, r2, ip
 8018920:	4480      	add	r8, r0
 8018922:	eba8 0801 	sub.w	r8, r8, r1
 8018926:	ea08 080c 	and.w	r8, r8, ip
 801892a:	4641      	mov	r1, r8
 801892c:	4628      	mov	r0, r5
 801892e:	9201      	str	r2, [sp, #4]
 8018930:	f000 fa98 	bl	8018e64 <_sbrk_r>
 8018934:	1c43      	adds	r3, r0, #1
 8018936:	9a01      	ldr	r2, [sp, #4]
 8018938:	4b28      	ldr	r3, [pc, #160]	; (80189dc <_malloc_r+0x474>)
 801893a:	d107      	bne.n	801894c <_malloc_r+0x3e4>
 801893c:	f1bb 0f00 	cmp.w	fp, #0
 8018940:	d023      	beq.n	801898a <_malloc_r+0x422>
 8018942:	f1ab 0008 	sub.w	r0, fp, #8
 8018946:	4410      	add	r0, r2
 8018948:	f04f 0800 	mov.w	r8, #0
 801894c:	681a      	ldr	r2, [r3, #0]
 801894e:	60b4      	str	r4, [r6, #8]
 8018950:	1b00      	subs	r0, r0, r4
 8018952:	4440      	add	r0, r8
 8018954:	4442      	add	r2, r8
 8018956:	f040 0001 	orr.w	r0, r0, #1
 801895a:	45b2      	cmp	sl, r6
 801895c:	601a      	str	r2, [r3, #0]
 801895e:	6060      	str	r0, [r4, #4]
 8018960:	f43f af26 	beq.w	80187b0 <_malloc_r+0x248>
 8018964:	f1b9 0f0f 	cmp.w	r9, #15
 8018968:	d812      	bhi.n	8018990 <_malloc_r+0x428>
 801896a:	2301      	movs	r3, #1
 801896c:	6063      	str	r3, [r4, #4]
 801896e:	68b3      	ldr	r3, [r6, #8]
 8018970:	685b      	ldr	r3, [r3, #4]
 8018972:	f023 0303 	bic.w	r3, r3, #3
 8018976:	42bb      	cmp	r3, r7
 8018978:	eba3 0207 	sub.w	r2, r3, r7
 801897c:	d301      	bcc.n	8018982 <_malloc_r+0x41a>
 801897e:	2a0f      	cmp	r2, #15
 8018980:	dc22      	bgt.n	80189c8 <_malloc_r+0x460>
 8018982:	4628      	mov	r0, r5
 8018984:	f000 f872 	bl	8018a6c <__malloc_unlock>
 8018988:	e5fa      	b.n	8018580 <_malloc_r+0x18>
 801898a:	4610      	mov	r0, r2
 801898c:	46d8      	mov	r8, fp
 801898e:	e7dd      	b.n	801894c <_malloc_r+0x3e4>
 8018990:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018994:	f1a9 090c 	sub.w	r9, r9, #12
 8018998:	f029 0907 	bic.w	r9, r9, #7
 801899c:	f002 0201 	and.w	r2, r2, #1
 80189a0:	ea42 0209 	orr.w	r2, r2, r9
 80189a4:	f8ca 2004 	str.w	r2, [sl, #4]
 80189a8:	2105      	movs	r1, #5
 80189aa:	eb0a 0209 	add.w	r2, sl, r9
 80189ae:	f1b9 0f0f 	cmp.w	r9, #15
 80189b2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80189b6:	f67f aefb 	bls.w	80187b0 <_malloc_r+0x248>
 80189ba:	f10a 0108 	add.w	r1, sl, #8
 80189be:	4628      	mov	r0, r5
 80189c0:	f003 ff66 	bl	801c890 <_free_r>
 80189c4:	4b05      	ldr	r3, [pc, #20]	; (80189dc <_malloc_r+0x474>)
 80189c6:	e6f3      	b.n	80187b0 <_malloc_r+0x248>
 80189c8:	68b4      	ldr	r4, [r6, #8]
 80189ca:	f047 0301 	orr.w	r3, r7, #1
 80189ce:	4427      	add	r7, r4
 80189d0:	f042 0201 	orr.w	r2, r2, #1
 80189d4:	6063      	str	r3, [r4, #4]
 80189d6:	60b7      	str	r7, [r6, #8]
 80189d8:	607a      	str	r2, [r7, #4]
 80189da:	e5f6      	b.n	80185ca <_malloc_r+0x62>
 80189dc:	20005e6c 	.word	0x20005e6c

080189e0 <memcmp>:
 80189e0:	b510      	push	{r4, lr}
 80189e2:	3901      	subs	r1, #1
 80189e4:	4402      	add	r2, r0
 80189e6:	4290      	cmp	r0, r2
 80189e8:	d101      	bne.n	80189ee <memcmp+0xe>
 80189ea:	2000      	movs	r0, #0
 80189ec:	e005      	b.n	80189fa <memcmp+0x1a>
 80189ee:	7803      	ldrb	r3, [r0, #0]
 80189f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80189f4:	42a3      	cmp	r3, r4
 80189f6:	d001      	beq.n	80189fc <memcmp+0x1c>
 80189f8:	1b18      	subs	r0, r3, r4
 80189fa:	bd10      	pop	{r4, pc}
 80189fc:	3001      	adds	r0, #1
 80189fe:	e7f2      	b.n	80189e6 <memcmp+0x6>

08018a00 <memcpy>:
 8018a00:	440a      	add	r2, r1
 8018a02:	4291      	cmp	r1, r2
 8018a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8018a08:	d100      	bne.n	8018a0c <memcpy+0xc>
 8018a0a:	4770      	bx	lr
 8018a0c:	b510      	push	{r4, lr}
 8018a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a16:	4291      	cmp	r1, r2
 8018a18:	d1f9      	bne.n	8018a0e <memcpy+0xe>
 8018a1a:	bd10      	pop	{r4, pc}

08018a1c <memmove>:
 8018a1c:	4288      	cmp	r0, r1
 8018a1e:	b510      	push	{r4, lr}
 8018a20:	eb01 0402 	add.w	r4, r1, r2
 8018a24:	d902      	bls.n	8018a2c <memmove+0x10>
 8018a26:	4284      	cmp	r4, r0
 8018a28:	4623      	mov	r3, r4
 8018a2a:	d807      	bhi.n	8018a3c <memmove+0x20>
 8018a2c:	1e43      	subs	r3, r0, #1
 8018a2e:	42a1      	cmp	r1, r4
 8018a30:	d008      	beq.n	8018a44 <memmove+0x28>
 8018a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018a3a:	e7f8      	b.n	8018a2e <memmove+0x12>
 8018a3c:	4402      	add	r2, r0
 8018a3e:	4601      	mov	r1, r0
 8018a40:	428a      	cmp	r2, r1
 8018a42:	d100      	bne.n	8018a46 <memmove+0x2a>
 8018a44:	bd10      	pop	{r4, pc}
 8018a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018a4e:	e7f7      	b.n	8018a40 <memmove+0x24>

08018a50 <memset>:
 8018a50:	4402      	add	r2, r0
 8018a52:	4603      	mov	r3, r0
 8018a54:	4293      	cmp	r3, r2
 8018a56:	d100      	bne.n	8018a5a <memset+0xa>
 8018a58:	4770      	bx	lr
 8018a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8018a5e:	e7f9      	b.n	8018a54 <memset+0x4>

08018a60 <__malloc_lock>:
 8018a60:	4801      	ldr	r0, [pc, #4]	; (8018a68 <__malloc_lock+0x8>)
 8018a62:	f7ff bd7f 	b.w	8018564 <__retarget_lock_acquire_recursive>
 8018a66:	bf00      	nop
 8018a68:	20005e69 	.word	0x20005e69

08018a6c <__malloc_unlock>:
 8018a6c:	4801      	ldr	r0, [pc, #4]	; (8018a74 <__malloc_unlock+0x8>)
 8018a6e:	f7ff bd7a 	b.w	8018566 <__retarget_lock_release_recursive>
 8018a72:	bf00      	nop
 8018a74:	20005e69 	.word	0x20005e69

08018a78 <_realloc_r>:
 8018a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a7c:	460c      	mov	r4, r1
 8018a7e:	4681      	mov	r9, r0
 8018a80:	4611      	mov	r1, r2
 8018a82:	b924      	cbnz	r4, 8018a8e <_realloc_r+0x16>
 8018a84:	b003      	add	sp, #12
 8018a86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a8a:	f7ff bd6d 	b.w	8018568 <_malloc_r>
 8018a8e:	9201      	str	r2, [sp, #4]
 8018a90:	f7ff ffe6 	bl	8018a60 <__malloc_lock>
 8018a94:	9901      	ldr	r1, [sp, #4]
 8018a96:	f101 080b 	add.w	r8, r1, #11
 8018a9a:	f1b8 0f16 	cmp.w	r8, #22
 8018a9e:	d90b      	bls.n	8018ab8 <_realloc_r+0x40>
 8018aa0:	f038 0807 	bics.w	r8, r8, #7
 8018aa4:	d50a      	bpl.n	8018abc <_realloc_r+0x44>
 8018aa6:	230c      	movs	r3, #12
 8018aa8:	f8c9 3000 	str.w	r3, [r9]
 8018aac:	f04f 0b00 	mov.w	fp, #0
 8018ab0:	4658      	mov	r0, fp
 8018ab2:	b003      	add	sp, #12
 8018ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ab8:	f04f 0810 	mov.w	r8, #16
 8018abc:	4588      	cmp	r8, r1
 8018abe:	d3f2      	bcc.n	8018aa6 <_realloc_r+0x2e>
 8018ac0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8018ac4:	f025 0603 	bic.w	r6, r5, #3
 8018ac8:	45b0      	cmp	r8, r6
 8018aca:	f1a4 0a08 	sub.w	sl, r4, #8
 8018ace:	f340 816e 	ble.w	8018dae <_realloc_r+0x336>
 8018ad2:	4a9b      	ldr	r2, [pc, #620]	; (8018d40 <_realloc_r+0x2c8>)
 8018ad4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8018ad8:	eb0a 0306 	add.w	r3, sl, r6
 8018adc:	459c      	cmp	ip, r3
 8018ade:	685a      	ldr	r2, [r3, #4]
 8018ae0:	d005      	beq.n	8018aee <_realloc_r+0x76>
 8018ae2:	f022 0001 	bic.w	r0, r2, #1
 8018ae6:	4418      	add	r0, r3
 8018ae8:	6840      	ldr	r0, [r0, #4]
 8018aea:	07c7      	lsls	r7, r0, #31
 8018aec:	d427      	bmi.n	8018b3e <_realloc_r+0xc6>
 8018aee:	f022 0203 	bic.w	r2, r2, #3
 8018af2:	459c      	cmp	ip, r3
 8018af4:	eb06 0702 	add.w	r7, r6, r2
 8018af8:	d119      	bne.n	8018b2e <_realloc_r+0xb6>
 8018afa:	f108 0010 	add.w	r0, r8, #16
 8018afe:	42b8      	cmp	r0, r7
 8018b00:	dc1f      	bgt.n	8018b42 <_realloc_r+0xca>
 8018b02:	eb0a 0308 	add.w	r3, sl, r8
 8018b06:	4a8e      	ldr	r2, [pc, #568]	; (8018d40 <_realloc_r+0x2c8>)
 8018b08:	eba7 0708 	sub.w	r7, r7, r8
 8018b0c:	f047 0701 	orr.w	r7, r7, #1
 8018b10:	6093      	str	r3, [r2, #8]
 8018b12:	605f      	str	r7, [r3, #4]
 8018b14:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018b18:	f003 0301 	and.w	r3, r3, #1
 8018b1c:	ea43 0308 	orr.w	r3, r3, r8
 8018b20:	f844 3c04 	str.w	r3, [r4, #-4]
 8018b24:	4648      	mov	r0, r9
 8018b26:	f7ff ffa1 	bl	8018a6c <__malloc_unlock>
 8018b2a:	46a3      	mov	fp, r4
 8018b2c:	e7c0      	b.n	8018ab0 <_realloc_r+0x38>
 8018b2e:	45b8      	cmp	r8, r7
 8018b30:	dc07      	bgt.n	8018b42 <_realloc_r+0xca>
 8018b32:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8018b36:	60da      	str	r2, [r3, #12]
 8018b38:	6093      	str	r3, [r2, #8]
 8018b3a:	4655      	mov	r5, sl
 8018b3c:	e07f      	b.n	8018c3e <_realloc_r+0x1c6>
 8018b3e:	2200      	movs	r2, #0
 8018b40:	4613      	mov	r3, r2
 8018b42:	07e8      	lsls	r0, r5, #31
 8018b44:	f100 80e5 	bmi.w	8018d12 <_realloc_r+0x29a>
 8018b48:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8018b4c:	ebaa 0505 	sub.w	r5, sl, r5
 8018b50:	6868      	ldr	r0, [r5, #4]
 8018b52:	f020 0003 	bic.w	r0, r0, #3
 8018b56:	eb00 0b06 	add.w	fp, r0, r6
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	f000 80a5 	beq.w	8018caa <_realloc_r+0x232>
 8018b60:	459c      	cmp	ip, r3
 8018b62:	eb02 070b 	add.w	r7, r2, fp
 8018b66:	d14a      	bne.n	8018bfe <_realloc_r+0x186>
 8018b68:	f108 0310 	add.w	r3, r8, #16
 8018b6c:	42bb      	cmp	r3, r7
 8018b6e:	f300 809c 	bgt.w	8018caa <_realloc_r+0x232>
 8018b72:	46ab      	mov	fp, r5
 8018b74:	68eb      	ldr	r3, [r5, #12]
 8018b76:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8018b7a:	60d3      	str	r3, [r2, #12]
 8018b7c:	609a      	str	r2, [r3, #8]
 8018b7e:	1f32      	subs	r2, r6, #4
 8018b80:	2a24      	cmp	r2, #36	; 0x24
 8018b82:	d837      	bhi.n	8018bf4 <_realloc_r+0x17c>
 8018b84:	2a13      	cmp	r2, #19
 8018b86:	d933      	bls.n	8018bf0 <_realloc_r+0x178>
 8018b88:	6823      	ldr	r3, [r4, #0]
 8018b8a:	60ab      	str	r3, [r5, #8]
 8018b8c:	6863      	ldr	r3, [r4, #4]
 8018b8e:	60eb      	str	r3, [r5, #12]
 8018b90:	2a1b      	cmp	r2, #27
 8018b92:	d81b      	bhi.n	8018bcc <_realloc_r+0x154>
 8018b94:	3408      	adds	r4, #8
 8018b96:	f105 0310 	add.w	r3, r5, #16
 8018b9a:	6822      	ldr	r2, [r4, #0]
 8018b9c:	601a      	str	r2, [r3, #0]
 8018b9e:	6862      	ldr	r2, [r4, #4]
 8018ba0:	605a      	str	r2, [r3, #4]
 8018ba2:	68a2      	ldr	r2, [r4, #8]
 8018ba4:	609a      	str	r2, [r3, #8]
 8018ba6:	eb05 0308 	add.w	r3, r5, r8
 8018baa:	4a65      	ldr	r2, [pc, #404]	; (8018d40 <_realloc_r+0x2c8>)
 8018bac:	eba7 0708 	sub.w	r7, r7, r8
 8018bb0:	f047 0701 	orr.w	r7, r7, #1
 8018bb4:	6093      	str	r3, [r2, #8]
 8018bb6:	605f      	str	r7, [r3, #4]
 8018bb8:	686b      	ldr	r3, [r5, #4]
 8018bba:	f003 0301 	and.w	r3, r3, #1
 8018bbe:	ea43 0308 	orr.w	r3, r3, r8
 8018bc2:	606b      	str	r3, [r5, #4]
 8018bc4:	4648      	mov	r0, r9
 8018bc6:	f7ff ff51 	bl	8018a6c <__malloc_unlock>
 8018bca:	e771      	b.n	8018ab0 <_realloc_r+0x38>
 8018bcc:	68a3      	ldr	r3, [r4, #8]
 8018bce:	612b      	str	r3, [r5, #16]
 8018bd0:	68e3      	ldr	r3, [r4, #12]
 8018bd2:	616b      	str	r3, [r5, #20]
 8018bd4:	2a24      	cmp	r2, #36	; 0x24
 8018bd6:	bf01      	itttt	eq
 8018bd8:	6923      	ldreq	r3, [r4, #16]
 8018bda:	61ab      	streq	r3, [r5, #24]
 8018bdc:	6962      	ldreq	r2, [r4, #20]
 8018bde:	61ea      	streq	r2, [r5, #28]
 8018be0:	bf19      	ittee	ne
 8018be2:	3410      	addne	r4, #16
 8018be4:	f105 0318 	addne.w	r3, r5, #24
 8018be8:	f105 0320 	addeq.w	r3, r5, #32
 8018bec:	3418      	addeq	r4, #24
 8018bee:	e7d4      	b.n	8018b9a <_realloc_r+0x122>
 8018bf0:	465b      	mov	r3, fp
 8018bf2:	e7d2      	b.n	8018b9a <_realloc_r+0x122>
 8018bf4:	4621      	mov	r1, r4
 8018bf6:	4658      	mov	r0, fp
 8018bf8:	f7ff ff10 	bl	8018a1c <memmove>
 8018bfc:	e7d3      	b.n	8018ba6 <_realloc_r+0x12e>
 8018bfe:	45b8      	cmp	r8, r7
 8018c00:	dc53      	bgt.n	8018caa <_realloc_r+0x232>
 8018c02:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8018c06:	4628      	mov	r0, r5
 8018c08:	60da      	str	r2, [r3, #12]
 8018c0a:	6093      	str	r3, [r2, #8]
 8018c0c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8018c10:	68eb      	ldr	r3, [r5, #12]
 8018c12:	60d3      	str	r3, [r2, #12]
 8018c14:	609a      	str	r2, [r3, #8]
 8018c16:	1f32      	subs	r2, r6, #4
 8018c18:	2a24      	cmp	r2, #36	; 0x24
 8018c1a:	d842      	bhi.n	8018ca2 <_realloc_r+0x22a>
 8018c1c:	2a13      	cmp	r2, #19
 8018c1e:	d908      	bls.n	8018c32 <_realloc_r+0x1ba>
 8018c20:	6823      	ldr	r3, [r4, #0]
 8018c22:	60ab      	str	r3, [r5, #8]
 8018c24:	6863      	ldr	r3, [r4, #4]
 8018c26:	60eb      	str	r3, [r5, #12]
 8018c28:	2a1b      	cmp	r2, #27
 8018c2a:	d828      	bhi.n	8018c7e <_realloc_r+0x206>
 8018c2c:	3408      	adds	r4, #8
 8018c2e:	f105 0010 	add.w	r0, r5, #16
 8018c32:	6823      	ldr	r3, [r4, #0]
 8018c34:	6003      	str	r3, [r0, #0]
 8018c36:	6863      	ldr	r3, [r4, #4]
 8018c38:	6043      	str	r3, [r0, #4]
 8018c3a:	68a3      	ldr	r3, [r4, #8]
 8018c3c:	6083      	str	r3, [r0, #8]
 8018c3e:	686b      	ldr	r3, [r5, #4]
 8018c40:	eba7 0008 	sub.w	r0, r7, r8
 8018c44:	280f      	cmp	r0, #15
 8018c46:	f003 0301 	and.w	r3, r3, #1
 8018c4a:	eb05 0207 	add.w	r2, r5, r7
 8018c4e:	f240 80b0 	bls.w	8018db2 <_realloc_r+0x33a>
 8018c52:	eb05 0108 	add.w	r1, r5, r8
 8018c56:	ea48 0303 	orr.w	r3, r8, r3
 8018c5a:	f040 0001 	orr.w	r0, r0, #1
 8018c5e:	606b      	str	r3, [r5, #4]
 8018c60:	6048      	str	r0, [r1, #4]
 8018c62:	6853      	ldr	r3, [r2, #4]
 8018c64:	f043 0301 	orr.w	r3, r3, #1
 8018c68:	6053      	str	r3, [r2, #4]
 8018c6a:	3108      	adds	r1, #8
 8018c6c:	4648      	mov	r0, r9
 8018c6e:	f003 fe0f 	bl	801c890 <_free_r>
 8018c72:	4648      	mov	r0, r9
 8018c74:	f7ff fefa 	bl	8018a6c <__malloc_unlock>
 8018c78:	f105 0b08 	add.w	fp, r5, #8
 8018c7c:	e718      	b.n	8018ab0 <_realloc_r+0x38>
 8018c7e:	68a3      	ldr	r3, [r4, #8]
 8018c80:	612b      	str	r3, [r5, #16]
 8018c82:	68e3      	ldr	r3, [r4, #12]
 8018c84:	616b      	str	r3, [r5, #20]
 8018c86:	2a24      	cmp	r2, #36	; 0x24
 8018c88:	bf01      	itttt	eq
 8018c8a:	6923      	ldreq	r3, [r4, #16]
 8018c8c:	61ab      	streq	r3, [r5, #24]
 8018c8e:	6963      	ldreq	r3, [r4, #20]
 8018c90:	61eb      	streq	r3, [r5, #28]
 8018c92:	bf19      	ittee	ne
 8018c94:	3410      	addne	r4, #16
 8018c96:	f105 0018 	addne.w	r0, r5, #24
 8018c9a:	f105 0020 	addeq.w	r0, r5, #32
 8018c9e:	3418      	addeq	r4, #24
 8018ca0:	e7c7      	b.n	8018c32 <_realloc_r+0x1ba>
 8018ca2:	4621      	mov	r1, r4
 8018ca4:	f7ff feba 	bl	8018a1c <memmove>
 8018ca8:	e7c9      	b.n	8018c3e <_realloc_r+0x1c6>
 8018caa:	45d8      	cmp	r8, fp
 8018cac:	dc31      	bgt.n	8018d12 <_realloc_r+0x29a>
 8018cae:	4628      	mov	r0, r5
 8018cb0:	68eb      	ldr	r3, [r5, #12]
 8018cb2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8018cb6:	60d3      	str	r3, [r2, #12]
 8018cb8:	609a      	str	r2, [r3, #8]
 8018cba:	1f32      	subs	r2, r6, #4
 8018cbc:	2a24      	cmp	r2, #36	; 0x24
 8018cbe:	d824      	bhi.n	8018d0a <_realloc_r+0x292>
 8018cc0:	2a13      	cmp	r2, #19
 8018cc2:	d908      	bls.n	8018cd6 <_realloc_r+0x25e>
 8018cc4:	6823      	ldr	r3, [r4, #0]
 8018cc6:	60ab      	str	r3, [r5, #8]
 8018cc8:	6863      	ldr	r3, [r4, #4]
 8018cca:	60eb      	str	r3, [r5, #12]
 8018ccc:	2a1b      	cmp	r2, #27
 8018cce:	d80a      	bhi.n	8018ce6 <_realloc_r+0x26e>
 8018cd0:	3408      	adds	r4, #8
 8018cd2:	f105 0010 	add.w	r0, r5, #16
 8018cd6:	6823      	ldr	r3, [r4, #0]
 8018cd8:	6003      	str	r3, [r0, #0]
 8018cda:	6863      	ldr	r3, [r4, #4]
 8018cdc:	6043      	str	r3, [r0, #4]
 8018cde:	68a3      	ldr	r3, [r4, #8]
 8018ce0:	6083      	str	r3, [r0, #8]
 8018ce2:	465f      	mov	r7, fp
 8018ce4:	e7ab      	b.n	8018c3e <_realloc_r+0x1c6>
 8018ce6:	68a3      	ldr	r3, [r4, #8]
 8018ce8:	612b      	str	r3, [r5, #16]
 8018cea:	68e3      	ldr	r3, [r4, #12]
 8018cec:	616b      	str	r3, [r5, #20]
 8018cee:	2a24      	cmp	r2, #36	; 0x24
 8018cf0:	bf01      	itttt	eq
 8018cf2:	6923      	ldreq	r3, [r4, #16]
 8018cf4:	61ab      	streq	r3, [r5, #24]
 8018cf6:	6963      	ldreq	r3, [r4, #20]
 8018cf8:	61eb      	streq	r3, [r5, #28]
 8018cfa:	bf19      	ittee	ne
 8018cfc:	3410      	addne	r4, #16
 8018cfe:	f105 0018 	addne.w	r0, r5, #24
 8018d02:	f105 0020 	addeq.w	r0, r5, #32
 8018d06:	3418      	addeq	r4, #24
 8018d08:	e7e5      	b.n	8018cd6 <_realloc_r+0x25e>
 8018d0a:	4621      	mov	r1, r4
 8018d0c:	f7ff fe86 	bl	8018a1c <memmove>
 8018d10:	e7e7      	b.n	8018ce2 <_realloc_r+0x26a>
 8018d12:	4648      	mov	r0, r9
 8018d14:	f7ff fc28 	bl	8018568 <_malloc_r>
 8018d18:	4683      	mov	fp, r0
 8018d1a:	2800      	cmp	r0, #0
 8018d1c:	f43f af52 	beq.w	8018bc4 <_realloc_r+0x14c>
 8018d20:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018d24:	f023 0301 	bic.w	r3, r3, #1
 8018d28:	4453      	add	r3, sl
 8018d2a:	f1a0 0208 	sub.w	r2, r0, #8
 8018d2e:	4293      	cmp	r3, r2
 8018d30:	d108      	bne.n	8018d44 <_realloc_r+0x2cc>
 8018d32:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8018d36:	f027 0703 	bic.w	r7, r7, #3
 8018d3a:	4437      	add	r7, r6
 8018d3c:	e6fd      	b.n	8018b3a <_realloc_r+0xc2>
 8018d3e:	bf00      	nop
 8018d40:	200004c8 	.word	0x200004c8
 8018d44:	1f32      	subs	r2, r6, #4
 8018d46:	2a24      	cmp	r2, #36	; 0x24
 8018d48:	d82d      	bhi.n	8018da6 <_realloc_r+0x32e>
 8018d4a:	2a13      	cmp	r2, #19
 8018d4c:	d928      	bls.n	8018da0 <_realloc_r+0x328>
 8018d4e:	6823      	ldr	r3, [r4, #0]
 8018d50:	6003      	str	r3, [r0, #0]
 8018d52:	6863      	ldr	r3, [r4, #4]
 8018d54:	6043      	str	r3, [r0, #4]
 8018d56:	2a1b      	cmp	r2, #27
 8018d58:	d80e      	bhi.n	8018d78 <_realloc_r+0x300>
 8018d5a:	f104 0208 	add.w	r2, r4, #8
 8018d5e:	f100 0308 	add.w	r3, r0, #8
 8018d62:	6811      	ldr	r1, [r2, #0]
 8018d64:	6019      	str	r1, [r3, #0]
 8018d66:	6851      	ldr	r1, [r2, #4]
 8018d68:	6059      	str	r1, [r3, #4]
 8018d6a:	6892      	ldr	r2, [r2, #8]
 8018d6c:	609a      	str	r2, [r3, #8]
 8018d6e:	4621      	mov	r1, r4
 8018d70:	4648      	mov	r0, r9
 8018d72:	f003 fd8d 	bl	801c890 <_free_r>
 8018d76:	e725      	b.n	8018bc4 <_realloc_r+0x14c>
 8018d78:	68a3      	ldr	r3, [r4, #8]
 8018d7a:	6083      	str	r3, [r0, #8]
 8018d7c:	68e3      	ldr	r3, [r4, #12]
 8018d7e:	60c3      	str	r3, [r0, #12]
 8018d80:	2a24      	cmp	r2, #36	; 0x24
 8018d82:	bf01      	itttt	eq
 8018d84:	6923      	ldreq	r3, [r4, #16]
 8018d86:	6103      	streq	r3, [r0, #16]
 8018d88:	6961      	ldreq	r1, [r4, #20]
 8018d8a:	6141      	streq	r1, [r0, #20]
 8018d8c:	bf19      	ittee	ne
 8018d8e:	f104 0210 	addne.w	r2, r4, #16
 8018d92:	f100 0310 	addne.w	r3, r0, #16
 8018d96:	f104 0218 	addeq.w	r2, r4, #24
 8018d9a:	f100 0318 	addeq.w	r3, r0, #24
 8018d9e:	e7e0      	b.n	8018d62 <_realloc_r+0x2ea>
 8018da0:	4603      	mov	r3, r0
 8018da2:	4622      	mov	r2, r4
 8018da4:	e7dd      	b.n	8018d62 <_realloc_r+0x2ea>
 8018da6:	4621      	mov	r1, r4
 8018da8:	f7ff fe38 	bl	8018a1c <memmove>
 8018dac:	e7df      	b.n	8018d6e <_realloc_r+0x2f6>
 8018dae:	4637      	mov	r7, r6
 8018db0:	e6c3      	b.n	8018b3a <_realloc_r+0xc2>
 8018db2:	431f      	orrs	r7, r3
 8018db4:	606f      	str	r7, [r5, #4]
 8018db6:	6853      	ldr	r3, [r2, #4]
 8018db8:	f043 0301 	orr.w	r3, r3, #1
 8018dbc:	6053      	str	r3, [r2, #4]
 8018dbe:	e758      	b.n	8018c72 <_realloc_r+0x1fa>

08018dc0 <cleanup_glue>:
 8018dc0:	b538      	push	{r3, r4, r5, lr}
 8018dc2:	460c      	mov	r4, r1
 8018dc4:	6809      	ldr	r1, [r1, #0]
 8018dc6:	4605      	mov	r5, r0
 8018dc8:	b109      	cbz	r1, 8018dce <cleanup_glue+0xe>
 8018dca:	f7ff fff9 	bl	8018dc0 <cleanup_glue>
 8018dce:	4621      	mov	r1, r4
 8018dd0:	4628      	mov	r0, r5
 8018dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018dd6:	f003 bd5b 	b.w	801c890 <_free_r>
	...

08018ddc <_reclaim_reent>:
 8018ddc:	4b20      	ldr	r3, [pc, #128]	; (8018e60 <_reclaim_reent+0x84>)
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	4283      	cmp	r3, r0
 8018de2:	b570      	push	{r4, r5, r6, lr}
 8018de4:	4604      	mov	r4, r0
 8018de6:	d039      	beq.n	8018e5c <_reclaim_reent+0x80>
 8018de8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018dea:	bb33      	cbnz	r3, 8018e3a <_reclaim_reent+0x5e>
 8018dec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018dee:	b111      	cbz	r1, 8018df6 <_reclaim_reent+0x1a>
 8018df0:	4620      	mov	r0, r4
 8018df2:	f003 fd4d 	bl	801c890 <_free_r>
 8018df6:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
 8018dfa:	bb05      	cbnz	r5, 8018e3e <_reclaim_reent+0x62>
 8018dfc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8018dfe:	bb49      	cbnz	r1, 8018e54 <_reclaim_reent+0x78>
 8018e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018e02:	b35b      	cbz	r3, 8018e5c <_reclaim_reent+0x80>
 8018e04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018e06:	4620      	mov	r0, r4
 8018e08:	4798      	blx	r3
 8018e0a:	f8d4 12e0 	ldr.w	r1, [r4, #736]	; 0x2e0
 8018e0e:	b329      	cbz	r1, 8018e5c <_reclaim_reent+0x80>
 8018e10:	4620      	mov	r0, r4
 8018e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e16:	f7ff bfd3 	b.w	8018dc0 <cleanup_glue>
 8018e1a:	5949      	ldr	r1, [r1, r5]
 8018e1c:	b939      	cbnz	r1, 8018e2e <_reclaim_reent+0x52>
 8018e1e:	3504      	adds	r5, #4
 8018e20:	2d80      	cmp	r5, #128	; 0x80
 8018e22:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8018e24:	d1f9      	bne.n	8018e1a <_reclaim_reent+0x3e>
 8018e26:	4620      	mov	r0, r4
 8018e28:	f003 fd32 	bl	801c890 <_free_r>
 8018e2c:	e7de      	b.n	8018dec <_reclaim_reent+0x10>
 8018e2e:	680e      	ldr	r6, [r1, #0]
 8018e30:	4620      	mov	r0, r4
 8018e32:	f003 fd2d 	bl	801c890 <_free_r>
 8018e36:	4631      	mov	r1, r6
 8018e38:	e7f0      	b.n	8018e1c <_reclaim_reent+0x40>
 8018e3a:	2500      	movs	r5, #0
 8018e3c:	e7f0      	b.n	8018e20 <_reclaim_reent+0x44>
 8018e3e:	f504 76a6 	add.w	r6, r4, #332	; 0x14c
 8018e42:	42b5      	cmp	r5, r6
 8018e44:	d0da      	beq.n	8018dfc <_reclaim_reent+0x20>
 8018e46:	4629      	mov	r1, r5
 8018e48:	682d      	ldr	r5, [r5, #0]
 8018e4a:	4620      	mov	r0, r4
 8018e4c:	f003 fd20 	bl	801c890 <_free_r>
 8018e50:	42ae      	cmp	r6, r5
 8018e52:	e7f7      	b.n	8018e44 <_reclaim_reent+0x68>
 8018e54:	4620      	mov	r0, r4
 8018e56:	f003 fd1b 	bl	801c890 <_free_r>
 8018e5a:	e7d1      	b.n	8018e00 <_reclaim_reent+0x24>
 8018e5c:	bd70      	pop	{r4, r5, r6, pc}
 8018e5e:	bf00      	nop
 8018e60:	20000098 	.word	0x20000098

08018e64 <_sbrk_r>:
 8018e64:	b538      	push	{r3, r4, r5, lr}
 8018e66:	4d06      	ldr	r5, [pc, #24]	; (8018e80 <_sbrk_r+0x1c>)
 8018e68:	2300      	movs	r3, #0
 8018e6a:	4604      	mov	r4, r0
 8018e6c:	4608      	mov	r0, r1
 8018e6e:	602b      	str	r3, [r5, #0]
 8018e70:	f7f1 fd2e 	bl	800a8d0 <_sbrk>
 8018e74:	1c43      	adds	r3, r0, #1
 8018e76:	d102      	bne.n	8018e7e <_sbrk_r+0x1a>
 8018e78:	682b      	ldr	r3, [r5, #0]
 8018e7a:	b103      	cbz	r3, 8018e7e <_sbrk_r+0x1a>
 8018e7c:	6023      	str	r3, [r4, #0]
 8018e7e:	bd38      	pop	{r3, r4, r5, pc}
 8018e80:	20005ea0 	.word	0x20005ea0

08018e84 <snprintf>:
 8018e84:	b40c      	push	{r2, r3}
 8018e86:	b530      	push	{r4, r5, lr}
 8018e88:	4b17      	ldr	r3, [pc, #92]	; (8018ee8 <snprintf+0x64>)
 8018e8a:	1e0c      	subs	r4, r1, #0
 8018e8c:	681d      	ldr	r5, [r3, #0]
 8018e8e:	b09d      	sub	sp, #116	; 0x74
 8018e90:	da08      	bge.n	8018ea4 <snprintf+0x20>
 8018e92:	238b      	movs	r3, #139	; 0x8b
 8018e94:	602b      	str	r3, [r5, #0]
 8018e96:	f04f 30ff 	mov.w	r0, #4294967295
 8018e9a:	b01d      	add	sp, #116	; 0x74
 8018e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ea0:	b002      	add	sp, #8
 8018ea2:	4770      	bx	lr
 8018ea4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018ea8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018eac:	bf14      	ite	ne
 8018eae:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018eb2:	4623      	moveq	r3, r4
 8018eb4:	9304      	str	r3, [sp, #16]
 8018eb6:	9307      	str	r3, [sp, #28]
 8018eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ebc:	9002      	str	r0, [sp, #8]
 8018ebe:	9006      	str	r0, [sp, #24]
 8018ec0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018ec4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018ec6:	ab21      	add	r3, sp, #132	; 0x84
 8018ec8:	a902      	add	r1, sp, #8
 8018eca:	4628      	mov	r0, r5
 8018ecc:	9301      	str	r3, [sp, #4]
 8018ece:	f000 f871 	bl	8018fb4 <_svfprintf_r>
 8018ed2:	1c43      	adds	r3, r0, #1
 8018ed4:	bfbc      	itt	lt
 8018ed6:	238b      	movlt	r3, #139	; 0x8b
 8018ed8:	602b      	strlt	r3, [r5, #0]
 8018eda:	2c00      	cmp	r4, #0
 8018edc:	d0dd      	beq.n	8018e9a <snprintf+0x16>
 8018ede:	9b02      	ldr	r3, [sp, #8]
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	701a      	strb	r2, [r3, #0]
 8018ee4:	e7d9      	b.n	8018e9a <snprintf+0x16>
 8018ee6:	bf00      	nop
 8018ee8:	20000098 	.word	0x20000098

08018eec <sprintf>:
 8018eec:	b40e      	push	{r1, r2, r3}
 8018eee:	b500      	push	{lr}
 8018ef0:	b09c      	sub	sp, #112	; 0x70
 8018ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8018ef4:	9002      	str	r0, [sp, #8]
 8018ef6:	9006      	str	r0, [sp, #24]
 8018ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018efc:	4809      	ldr	r0, [pc, #36]	; (8018f24 <sprintf+0x38>)
 8018efe:	9107      	str	r1, [sp, #28]
 8018f00:	9104      	str	r1, [sp, #16]
 8018f02:	4909      	ldr	r1, [pc, #36]	; (8018f28 <sprintf+0x3c>)
 8018f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f08:	9105      	str	r1, [sp, #20]
 8018f0a:	6800      	ldr	r0, [r0, #0]
 8018f0c:	9301      	str	r3, [sp, #4]
 8018f0e:	a902      	add	r1, sp, #8
 8018f10:	f000 f850 	bl	8018fb4 <_svfprintf_r>
 8018f14:	9b02      	ldr	r3, [sp, #8]
 8018f16:	2200      	movs	r2, #0
 8018f18:	701a      	strb	r2, [r3, #0]
 8018f1a:	b01c      	add	sp, #112	; 0x70
 8018f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f20:	b003      	add	sp, #12
 8018f22:	4770      	bx	lr
 8018f24:	20000098 	.word	0x20000098
 8018f28:	ffff0208 	.word	0xffff0208

08018f2c <strncmp>:
 8018f2c:	b510      	push	{r4, lr}
 8018f2e:	4603      	mov	r3, r0
 8018f30:	b172      	cbz	r2, 8018f50 <strncmp+0x24>
 8018f32:	3901      	subs	r1, #1
 8018f34:	1884      	adds	r4, r0, r2
 8018f36:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018f3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018f3e:	4290      	cmp	r0, r2
 8018f40:	d101      	bne.n	8018f46 <strncmp+0x1a>
 8018f42:	42a3      	cmp	r3, r4
 8018f44:	d101      	bne.n	8018f4a <strncmp+0x1e>
 8018f46:	1a80      	subs	r0, r0, r2
 8018f48:	bd10      	pop	{r4, pc}
 8018f4a:	2800      	cmp	r0, #0
 8018f4c:	d1f3      	bne.n	8018f36 <strncmp+0xa>
 8018f4e:	e7fa      	b.n	8018f46 <strncmp+0x1a>
 8018f50:	4610      	mov	r0, r2
 8018f52:	e7f9      	b.n	8018f48 <strncmp+0x1c>

08018f54 <strtok>:
 8018f54:	4b02      	ldr	r3, [pc, #8]	; (8018f60 <strtok+0xc>)
 8018f56:	681a      	ldr	r2, [r3, #0]
 8018f58:	2301      	movs	r3, #1
 8018f5a:	325c      	adds	r2, #92	; 0x5c
 8018f5c:	f000 b802 	b.w	8018f64 <__strtok_r>
 8018f60:	20000098 	.word	0x20000098

08018f64 <__strtok_r>:
 8018f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f66:	b908      	cbnz	r0, 8018f6c <__strtok_r+0x8>
 8018f68:	6810      	ldr	r0, [r2, #0]
 8018f6a:	b188      	cbz	r0, 8018f90 <__strtok_r+0x2c>
 8018f6c:	4604      	mov	r4, r0
 8018f6e:	4620      	mov	r0, r4
 8018f70:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018f74:	460f      	mov	r7, r1
 8018f76:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018f7a:	b91e      	cbnz	r6, 8018f84 <__strtok_r+0x20>
 8018f7c:	b965      	cbnz	r5, 8018f98 <__strtok_r+0x34>
 8018f7e:	6015      	str	r5, [r2, #0]
 8018f80:	4628      	mov	r0, r5
 8018f82:	e005      	b.n	8018f90 <__strtok_r+0x2c>
 8018f84:	42b5      	cmp	r5, r6
 8018f86:	d1f6      	bne.n	8018f76 <__strtok_r+0x12>
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d1f0      	bne.n	8018f6e <__strtok_r+0xa>
 8018f8c:	6014      	str	r4, [r2, #0]
 8018f8e:	7003      	strb	r3, [r0, #0]
 8018f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f92:	461c      	mov	r4, r3
 8018f94:	e00c      	b.n	8018fb0 <__strtok_r+0x4c>
 8018f96:	b915      	cbnz	r5, 8018f9e <__strtok_r+0x3a>
 8018f98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018f9c:	460e      	mov	r6, r1
 8018f9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018fa2:	42ab      	cmp	r3, r5
 8018fa4:	d1f7      	bne.n	8018f96 <__strtok_r+0x32>
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d0f3      	beq.n	8018f92 <__strtok_r+0x2e>
 8018faa:	2300      	movs	r3, #0
 8018fac:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018fb0:	6014      	str	r4, [r2, #0]
 8018fb2:	e7ed      	b.n	8018f90 <__strtok_r+0x2c>

08018fb4 <_svfprintf_r>:
 8018fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb8:	b0d3      	sub	sp, #332	; 0x14c
 8018fba:	468b      	mov	fp, r1
 8018fbc:	4692      	mov	sl, r2
 8018fbe:	461e      	mov	r6, r3
 8018fc0:	4681      	mov	r9, r0
 8018fc2:	f003 fd45 	bl	801ca50 <_localeconv_r>
 8018fc6:	6803      	ldr	r3, [r0, #0]
 8018fc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8018fca:	4618      	mov	r0, r3
 8018fcc:	f7ef fb28 	bl	8008620 <strlen>
 8018fd0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8018fd4:	9012      	str	r0, [sp, #72]	; 0x48
 8018fd6:	0618      	lsls	r0, r3, #24
 8018fd8:	d518      	bpl.n	801900c <_svfprintf_r+0x58>
 8018fda:	f8db 3010 	ldr.w	r3, [fp, #16]
 8018fde:	b9ab      	cbnz	r3, 801900c <_svfprintf_r+0x58>
 8018fe0:	2140      	movs	r1, #64	; 0x40
 8018fe2:	4648      	mov	r0, r9
 8018fe4:	f7ff fac0 	bl	8018568 <_malloc_r>
 8018fe8:	f8cb 0000 	str.w	r0, [fp]
 8018fec:	f8cb 0010 	str.w	r0, [fp, #16]
 8018ff0:	b948      	cbnz	r0, 8019006 <_svfprintf_r+0x52>
 8018ff2:	230c      	movs	r3, #12
 8018ff4:	f8c9 3000 	str.w	r3, [r9]
 8018ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8018ffc:	930f      	str	r3, [sp, #60]	; 0x3c
 8018ffe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019000:	b053      	add	sp, #332	; 0x14c
 8019002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019006:	2340      	movs	r3, #64	; 0x40
 8019008:	f8cb 3014 	str.w	r3, [fp, #20]
 801900c:	2500      	movs	r5, #0
 801900e:	2200      	movs	r2, #0
 8019010:	2300      	movs	r3, #0
 8019012:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 8019016:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801901a:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 801901e:	ac29      	add	r4, sp, #164	; 0xa4
 8019020:	9426      	str	r4, [sp, #152]	; 0x98
 8019022:	9509      	str	r5, [sp, #36]	; 0x24
 8019024:	950d      	str	r5, [sp, #52]	; 0x34
 8019026:	9515      	str	r5, [sp, #84]	; 0x54
 8019028:	9518      	str	r5, [sp, #96]	; 0x60
 801902a:	950f      	str	r5, [sp, #60]	; 0x3c
 801902c:	4653      	mov	r3, sl
 801902e:	461d      	mov	r5, r3
 8019030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019034:	b10a      	cbz	r2, 801903a <_svfprintf_r+0x86>
 8019036:	2a25      	cmp	r2, #37	; 0x25
 8019038:	d1f9      	bne.n	801902e <_svfprintf_r+0x7a>
 801903a:	ebb5 070a 	subs.w	r7, r5, sl
 801903e:	d00d      	beq.n	801905c <_svfprintf_r+0xa8>
 8019040:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019042:	443b      	add	r3, r7
 8019044:	9328      	str	r3, [sp, #160]	; 0xa0
 8019046:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019048:	3301      	adds	r3, #1
 801904a:	2b07      	cmp	r3, #7
 801904c:	e9c4 a700 	strd	sl, r7, [r4]
 8019050:	9327      	str	r3, [sp, #156]	; 0x9c
 8019052:	dc79      	bgt.n	8019148 <_svfprintf_r+0x194>
 8019054:	3408      	adds	r4, #8
 8019056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019058:	443b      	add	r3, r7
 801905a:	930f      	str	r3, [sp, #60]	; 0x3c
 801905c:	782b      	ldrb	r3, [r5, #0]
 801905e:	2b00      	cmp	r3, #0
 8019060:	f001 813c 	beq.w	801a2dc <_svfprintf_r+0x1328>
 8019064:	2300      	movs	r3, #0
 8019066:	f04f 32ff 	mov.w	r2, #4294967295
 801906a:	9207      	str	r2, [sp, #28]
 801906c:	3501      	adds	r5, #1
 801906e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019072:	9313      	str	r3, [sp, #76]	; 0x4c
 8019074:	4698      	mov	r8, r3
 8019076:	270a      	movs	r7, #10
 8019078:	222b      	movs	r2, #43	; 0x2b
 801907a:	462b      	mov	r3, r5
 801907c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019080:	910a      	str	r1, [sp, #40]	; 0x28
 8019082:	930e      	str	r3, [sp, #56]	; 0x38
 8019084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019086:	3b20      	subs	r3, #32
 8019088:	2b5a      	cmp	r3, #90	; 0x5a
 801908a:	f200 85ae 	bhi.w	8019bea <_svfprintf_r+0xc36>
 801908e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8019092:	007e      	.short	0x007e
 8019094:	05ac05ac 	.word	0x05ac05ac
 8019098:	05ac0086 	.word	0x05ac0086
 801909c:	05ac05ac 	.word	0x05ac05ac
 80190a0:	05ac0065 	.word	0x05ac0065
 80190a4:	008905ac 	.word	0x008905ac
 80190a8:	05ac0093 	.word	0x05ac0093
 80190ac:	00960090 	.word	0x00960090
 80190b0:	00b305ac 	.word	0x00b305ac
 80190b4:	00b600b6 	.word	0x00b600b6
 80190b8:	00b600b6 	.word	0x00b600b6
 80190bc:	00b600b6 	.word	0x00b600b6
 80190c0:	00b600b6 	.word	0x00b600b6
 80190c4:	05ac00b6 	.word	0x05ac00b6
 80190c8:	05ac05ac 	.word	0x05ac05ac
 80190cc:	05ac05ac 	.word	0x05ac05ac
 80190d0:	05ac05ac 	.word	0x05ac05ac
 80190d4:	05ac0126 	.word	0x05ac0126
 80190d8:	00f600e3 	.word	0x00f600e3
 80190dc:	01260126 	.word	0x01260126
 80190e0:	05ac0126 	.word	0x05ac0126
 80190e4:	05ac05ac 	.word	0x05ac05ac
 80190e8:	00c605ac 	.word	0x00c605ac
 80190ec:	05ac05ac 	.word	0x05ac05ac
 80190f0:	05ac0484 	.word	0x05ac0484
 80190f4:	05ac05ac 	.word	0x05ac05ac
 80190f8:	05ac04cf 	.word	0x05ac04cf
 80190fc:	05ac04f0 	.word	0x05ac04f0
 8019100:	051205ac 	.word	0x051205ac
 8019104:	05ac05ac 	.word	0x05ac05ac
 8019108:	05ac05ac 	.word	0x05ac05ac
 801910c:	05ac05ac 	.word	0x05ac05ac
 8019110:	05ac05ac 	.word	0x05ac05ac
 8019114:	05ac0126 	.word	0x05ac0126
 8019118:	00f800e3 	.word	0x00f800e3
 801911c:	01260126 	.word	0x01260126
 8019120:	00c90126 	.word	0x00c90126
 8019124:	00dd00f8 	.word	0x00dd00f8
 8019128:	00d605ac 	.word	0x00d605ac
 801912c:	045f05ac 	.word	0x045f05ac
 8019130:	04bd0486 	.word	0x04bd0486
 8019134:	05ac00dd 	.word	0x05ac00dd
 8019138:	007c04cf 	.word	0x007c04cf
 801913c:	05ac04f2 	.word	0x05ac04f2
 8019140:	053105ac 	.word	0x053105ac
 8019144:	007c05ac 	.word	0x007c05ac
 8019148:	aa26      	add	r2, sp, #152	; 0x98
 801914a:	4659      	mov	r1, fp
 801914c:	4648      	mov	r0, r9
 801914e:	f004 f8a9 	bl	801d2a4 <__ssprint_r>
 8019152:	2800      	cmp	r0, #0
 8019154:	f040 812f 	bne.w	80193b6 <_svfprintf_r+0x402>
 8019158:	ac29      	add	r4, sp, #164	; 0xa4
 801915a:	e77c      	b.n	8019056 <_svfprintf_r+0xa2>
 801915c:	4648      	mov	r0, r9
 801915e:	f003 fc77 	bl	801ca50 <_localeconv_r>
 8019162:	6843      	ldr	r3, [r0, #4]
 8019164:	9318      	str	r3, [sp, #96]	; 0x60
 8019166:	4618      	mov	r0, r3
 8019168:	f7ef fa5a 	bl	8008620 <strlen>
 801916c:	9015      	str	r0, [sp, #84]	; 0x54
 801916e:	4648      	mov	r0, r9
 8019170:	f003 fc6e 	bl	801ca50 <_localeconv_r>
 8019174:	6883      	ldr	r3, [r0, #8]
 8019176:	930d      	str	r3, [sp, #52]	; 0x34
 8019178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801917a:	222b      	movs	r2, #43	; 0x2b
 801917c:	b12b      	cbz	r3, 801918a <_svfprintf_r+0x1d6>
 801917e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019180:	b11b      	cbz	r3, 801918a <_svfprintf_r+0x1d6>
 8019182:	781b      	ldrb	r3, [r3, #0]
 8019184:	b10b      	cbz	r3, 801918a <_svfprintf_r+0x1d6>
 8019186:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801918a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801918c:	e775      	b.n	801907a <_svfprintf_r+0xc6>
 801918e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8019192:	2b00      	cmp	r3, #0
 8019194:	d1f9      	bne.n	801918a <_svfprintf_r+0x1d6>
 8019196:	2320      	movs	r3, #32
 8019198:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801919c:	e7f5      	b.n	801918a <_svfprintf_r+0x1d6>
 801919e:	f048 0801 	orr.w	r8, r8, #1
 80191a2:	e7f2      	b.n	801918a <_svfprintf_r+0x1d6>
 80191a4:	f856 3b04 	ldr.w	r3, [r6], #4
 80191a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	daed      	bge.n	801918a <_svfprintf_r+0x1d6>
 80191ae:	425b      	negs	r3, r3
 80191b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80191b2:	f048 0804 	orr.w	r8, r8, #4
 80191b6:	e7e8      	b.n	801918a <_svfprintf_r+0x1d6>
 80191b8:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80191bc:	e7e5      	b.n	801918a <_svfprintf_r+0x1d6>
 80191be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80191c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80191c4:	930a      	str	r3, [sp, #40]	; 0x28
 80191c6:	2b2a      	cmp	r3, #42	; 0x2a
 80191c8:	d113      	bne.n	80191f2 <_svfprintf_r+0x23e>
 80191ca:	f856 0b04 	ldr.w	r0, [r6], #4
 80191ce:	950e      	str	r5, [sp, #56]	; 0x38
 80191d0:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 80191d4:	9307      	str	r3, [sp, #28]
 80191d6:	e7d8      	b.n	801918a <_svfprintf_r+0x1d6>
 80191d8:	9907      	ldr	r1, [sp, #28]
 80191da:	fb07 3301 	mla	r3, r7, r1, r3
 80191de:	9307      	str	r3, [sp, #28]
 80191e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80191e4:	930a      	str	r3, [sp, #40]	; 0x28
 80191e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191e8:	3b30      	subs	r3, #48	; 0x30
 80191ea:	2b09      	cmp	r3, #9
 80191ec:	d9f4      	bls.n	80191d8 <_svfprintf_r+0x224>
 80191ee:	950e      	str	r5, [sp, #56]	; 0x38
 80191f0:	e748      	b.n	8019084 <_svfprintf_r+0xd0>
 80191f2:	2300      	movs	r3, #0
 80191f4:	9307      	str	r3, [sp, #28]
 80191f6:	e7f6      	b.n	80191e6 <_svfprintf_r+0x232>
 80191f8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80191fc:	e7c5      	b.n	801918a <_svfprintf_r+0x1d6>
 80191fe:	2300      	movs	r3, #0
 8019200:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8019202:	9313      	str	r3, [sp, #76]	; 0x4c
 8019204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019206:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8019208:	3b30      	subs	r3, #48	; 0x30
 801920a:	fb07 3301 	mla	r3, r7, r1, r3
 801920e:	9313      	str	r3, [sp, #76]	; 0x4c
 8019210:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019214:	930a      	str	r3, [sp, #40]	; 0x28
 8019216:	3b30      	subs	r3, #48	; 0x30
 8019218:	2b09      	cmp	r3, #9
 801921a:	d9f3      	bls.n	8019204 <_svfprintf_r+0x250>
 801921c:	e7e7      	b.n	80191ee <_svfprintf_r+0x23a>
 801921e:	f048 0808 	orr.w	r8, r8, #8
 8019222:	e7b2      	b.n	801918a <_svfprintf_r+0x1d6>
 8019224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019226:	781b      	ldrb	r3, [r3, #0]
 8019228:	2b68      	cmp	r3, #104	; 0x68
 801922a:	bf01      	itttt	eq
 801922c:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 801922e:	3301      	addeq	r3, #1
 8019230:	930e      	streq	r3, [sp, #56]	; 0x38
 8019232:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8019236:	bf18      	it	ne
 8019238:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801923c:	e7a5      	b.n	801918a <_svfprintf_r+0x1d6>
 801923e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019240:	781b      	ldrb	r3, [r3, #0]
 8019242:	2b6c      	cmp	r3, #108	; 0x6c
 8019244:	d105      	bne.n	8019252 <_svfprintf_r+0x29e>
 8019246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019248:	3301      	adds	r3, #1
 801924a:	930e      	str	r3, [sp, #56]	; 0x38
 801924c:	f048 0820 	orr.w	r8, r8, #32
 8019250:	e79b      	b.n	801918a <_svfprintf_r+0x1d6>
 8019252:	f048 0810 	orr.w	r8, r8, #16
 8019256:	e798      	b.n	801918a <_svfprintf_r+0x1d6>
 8019258:	4632      	mov	r2, r6
 801925a:	2000      	movs	r0, #0
 801925c:	f852 3b04 	ldr.w	r3, [r2], #4
 8019260:	920b      	str	r2, [sp, #44]	; 0x2c
 8019262:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8019266:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 801926a:	2301      	movs	r3, #1
 801926c:	9008      	str	r0, [sp, #32]
 801926e:	9307      	str	r3, [sp, #28]
 8019270:	4607      	mov	r7, r0
 8019272:	4606      	mov	r6, r0
 8019274:	900c      	str	r0, [sp, #48]	; 0x30
 8019276:	4605      	mov	r5, r0
 8019278:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 801927c:	e1b0      	b.n	80195e0 <_svfprintf_r+0x62c>
 801927e:	f048 0810 	orr.w	r8, r8, #16
 8019282:	f018 0f20 	tst.w	r8, #32
 8019286:	d012      	beq.n	80192ae <_svfprintf_r+0x2fa>
 8019288:	1df3      	adds	r3, r6, #7
 801928a:	f023 0307 	bic.w	r3, r3, #7
 801928e:	461a      	mov	r2, r3
 8019290:	685f      	ldr	r7, [r3, #4]
 8019292:	f852 6b08 	ldr.w	r6, [r2], #8
 8019296:	920b      	str	r2, [sp, #44]	; 0x2c
 8019298:	2f00      	cmp	r7, #0
 801929a:	da06      	bge.n	80192aa <_svfprintf_r+0x2f6>
 801929c:	4276      	negs	r6, r6
 801929e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80192a2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80192a6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80192aa:	2301      	movs	r3, #1
 80192ac:	e388      	b.n	80199c0 <_svfprintf_r+0xa0c>
 80192ae:	4633      	mov	r3, r6
 80192b0:	f018 0f10 	tst.w	r8, #16
 80192b4:	f853 7b04 	ldr.w	r7, [r3], #4
 80192b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80192ba:	d002      	beq.n	80192c2 <_svfprintf_r+0x30e>
 80192bc:	463e      	mov	r6, r7
 80192be:	17ff      	asrs	r7, r7, #31
 80192c0:	e7ea      	b.n	8019298 <_svfprintf_r+0x2e4>
 80192c2:	f018 0f40 	tst.w	r8, #64	; 0x40
 80192c6:	d003      	beq.n	80192d0 <_svfprintf_r+0x31c>
 80192c8:	b23e      	sxth	r6, r7
 80192ca:	f347 37c0 	sbfx	r7, r7, #15, #1
 80192ce:	e7e3      	b.n	8019298 <_svfprintf_r+0x2e4>
 80192d0:	f418 7f00 	tst.w	r8, #512	; 0x200
 80192d4:	d0f2      	beq.n	80192bc <_svfprintf_r+0x308>
 80192d6:	b27e      	sxtb	r6, r7
 80192d8:	f347 17c0 	sbfx	r7, r7, #7, #1
 80192dc:	e7dc      	b.n	8019298 <_svfprintf_r+0x2e4>
 80192de:	3607      	adds	r6, #7
 80192e0:	f026 0307 	bic.w	r3, r6, #7
 80192e4:	4619      	mov	r1, r3
 80192e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80192ea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80192ee:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 80192f2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80192f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80192f8:	4b3b      	ldr	r3, [pc, #236]	; (80193e8 <_svfprintf_r+0x434>)
 80192fa:	f04f 32ff 	mov.w	r2, #4294967295
 80192fe:	4630      	mov	r0, r6
 8019300:	4629      	mov	r1, r5
 8019302:	f7ef fdeb 	bl	8008edc <__aeabi_dcmpun>
 8019306:	bb18      	cbnz	r0, 8019350 <_svfprintf_r+0x39c>
 8019308:	4b37      	ldr	r3, [pc, #220]	; (80193e8 <_svfprintf_r+0x434>)
 801930a:	f04f 32ff 	mov.w	r2, #4294967295
 801930e:	4630      	mov	r0, r6
 8019310:	4629      	mov	r1, r5
 8019312:	f7ef fdc5 	bl	8008ea0 <__aeabi_dcmple>
 8019316:	b9d8      	cbnz	r0, 8019350 <_svfprintf_r+0x39c>
 8019318:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801931c:	2200      	movs	r2, #0
 801931e:	2300      	movs	r3, #0
 8019320:	f7ef fdb4 	bl	8008e8c <__aeabi_dcmplt>
 8019324:	b110      	cbz	r0, 801932c <_svfprintf_r+0x378>
 8019326:	232d      	movs	r3, #45	; 0x2d
 8019328:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801932c:	4a2f      	ldr	r2, [pc, #188]	; (80193ec <_svfprintf_r+0x438>)
 801932e:	4830      	ldr	r0, [pc, #192]	; (80193f0 <_svfprintf_r+0x43c>)
 8019330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019332:	2100      	movs	r1, #0
 8019334:	2b47      	cmp	r3, #71	; 0x47
 8019336:	bfd4      	ite	le
 8019338:	4692      	movle	sl, r2
 801933a:	4682      	movgt	sl, r0
 801933c:	2303      	movs	r3, #3
 801933e:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8019342:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8019346:	2700      	movs	r7, #0
 8019348:	463e      	mov	r6, r7
 801934a:	463b      	mov	r3, r7
 801934c:	f001 b800 	b.w	801a350 <_svfprintf_r+0x139c>
 8019350:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019354:	4610      	mov	r0, r2
 8019356:	4619      	mov	r1, r3
 8019358:	f7ef fdc0 	bl	8008edc <__aeabi_dcmpun>
 801935c:	b140      	cbz	r0, 8019370 <_svfprintf_r+0x3bc>
 801935e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019360:	4a24      	ldr	r2, [pc, #144]	; (80193f4 <_svfprintf_r+0x440>)
 8019362:	4825      	ldr	r0, [pc, #148]	; (80193f8 <_svfprintf_r+0x444>)
 8019364:	2b00      	cmp	r3, #0
 8019366:	bfbc      	itt	lt
 8019368:	232d      	movlt	r3, #45	; 0x2d
 801936a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 801936e:	e7df      	b.n	8019330 <_svfprintf_r+0x37c>
 8019370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019372:	f023 0320 	bic.w	r3, r3, #32
 8019376:	2b41      	cmp	r3, #65	; 0x41
 8019378:	930c      	str	r3, [sp, #48]	; 0x30
 801937a:	d125      	bne.n	80193c8 <_svfprintf_r+0x414>
 801937c:	2330      	movs	r3, #48	; 0x30
 801937e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8019382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019384:	2b61      	cmp	r3, #97	; 0x61
 8019386:	bf0c      	ite	eq
 8019388:	2378      	moveq	r3, #120	; 0x78
 801938a:	2358      	movne	r3, #88	; 0x58
 801938c:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8019390:	9b07      	ldr	r3, [sp, #28]
 8019392:	2b63      	cmp	r3, #99	; 0x63
 8019394:	f048 0802 	orr.w	r8, r8, #2
 8019398:	dd30      	ble.n	80193fc <_svfprintf_r+0x448>
 801939a:	1c59      	adds	r1, r3, #1
 801939c:	4648      	mov	r0, r9
 801939e:	f7ff f8e3 	bl	8018568 <_malloc_r>
 80193a2:	4682      	mov	sl, r0
 80193a4:	2800      	cmp	r0, #0
 80193a6:	f040 81f9 	bne.w	801979c <_svfprintf_r+0x7e8>
 80193aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80193ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80193b2:	f8ab 300c 	strh.w	r3, [fp, #12]
 80193b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80193ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80193be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193c0:	bf18      	it	ne
 80193c2:	f04f 33ff 	movne.w	r3, #4294967295
 80193c6:	e619      	b.n	8018ffc <_svfprintf_r+0x48>
 80193c8:	9b07      	ldr	r3, [sp, #28]
 80193ca:	3301      	adds	r3, #1
 80193cc:	f000 81e8 	beq.w	80197a0 <_svfprintf_r+0x7ec>
 80193d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193d2:	2b47      	cmp	r3, #71	; 0x47
 80193d4:	f040 81e7 	bne.w	80197a6 <_svfprintf_r+0x7f2>
 80193d8:	9b07      	ldr	r3, [sp, #28]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	f040 81e3 	bne.w	80197a6 <_svfprintf_r+0x7f2>
 80193e0:	9308      	str	r3, [sp, #32]
 80193e2:	2301      	movs	r3, #1
 80193e4:	9307      	str	r3, [sp, #28]
 80193e6:	e00c      	b.n	8019402 <_svfprintf_r+0x44e>
 80193e8:	7fefffff 	.word	0x7fefffff
 80193ec:	080205fc 	.word	0x080205fc
 80193f0:	08020600 	.word	0x08020600
 80193f4:	08020604 	.word	0x08020604
 80193f8:	08020608 	.word	0x08020608
 80193fc:	9008      	str	r0, [sp, #32]
 80193fe:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 8019402:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8019406:	9314      	str	r3, [sp, #80]	; 0x50
 8019408:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 801940c:	1e1d      	subs	r5, r3, #0
 801940e:	bfb6      	itet	lt
 8019410:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8019414:	2300      	movge	r3, #0
 8019416:	232d      	movlt	r3, #45	; 0x2d
 8019418:	931c      	str	r3, [sp, #112]	; 0x70
 801941a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801941c:	2b41      	cmp	r3, #65	; 0x41
 801941e:	f040 81da 	bne.w	80197d6 <_svfprintf_r+0x822>
 8019422:	aa20      	add	r2, sp, #128	; 0x80
 8019424:	4638      	mov	r0, r7
 8019426:	4629      	mov	r1, r5
 8019428:	f003 feb2 	bl	801d190 <frexp>
 801942c:	2200      	movs	r2, #0
 801942e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019432:	f7ef fab9 	bl	80089a8 <__aeabi_dmul>
 8019436:	2200      	movs	r2, #0
 8019438:	2300      	movs	r3, #0
 801943a:	4606      	mov	r6, r0
 801943c:	460f      	mov	r7, r1
 801943e:	f7ef fd1b 	bl	8008e78 <__aeabi_dcmpeq>
 8019442:	b108      	cbz	r0, 8019448 <_svfprintf_r+0x494>
 8019444:	2301      	movs	r3, #1
 8019446:	9320      	str	r3, [sp, #128]	; 0x80
 8019448:	4bad      	ldr	r3, [pc, #692]	; (8019700 <_svfprintf_r+0x74c>)
 801944a:	4aae      	ldr	r2, [pc, #696]	; (8019704 <_svfprintf_r+0x750>)
 801944c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801944e:	2961      	cmp	r1, #97	; 0x61
 8019450:	bf18      	it	ne
 8019452:	461a      	movne	r2, r3
 8019454:	9b07      	ldr	r3, [sp, #28]
 8019456:	921b      	str	r2, [sp, #108]	; 0x6c
 8019458:	3b01      	subs	r3, #1
 801945a:	9309      	str	r3, [sp, #36]	; 0x24
 801945c:	4655      	mov	r5, sl
 801945e:	4baa      	ldr	r3, [pc, #680]	; (8019708 <_svfprintf_r+0x754>)
 8019460:	2200      	movs	r2, #0
 8019462:	4630      	mov	r0, r6
 8019464:	4639      	mov	r1, r7
 8019466:	f7ef fa9f 	bl	80089a8 <__aeabi_dmul>
 801946a:	460f      	mov	r7, r1
 801946c:	4606      	mov	r6, r0
 801946e:	f7ef fd4b 	bl	8008f08 <__aeabi_d2iz>
 8019472:	901d      	str	r0, [sp, #116]	; 0x74
 8019474:	f7ef fa2e 	bl	80088d4 <__aeabi_i2d>
 8019478:	4602      	mov	r2, r0
 801947a:	460b      	mov	r3, r1
 801947c:	4630      	mov	r0, r6
 801947e:	4639      	mov	r1, r7
 8019480:	f7ef f8da 	bl	8008638 <__aeabi_dsub>
 8019484:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019486:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019488:	5c9b      	ldrb	r3, [r3, r2]
 801948a:	f805 3b01 	strb.w	r3, [r5], #1
 801948e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019490:	9316      	str	r3, [sp, #88]	; 0x58
 8019492:	1c5a      	adds	r2, r3, #1
 8019494:	4606      	mov	r6, r0
 8019496:	460f      	mov	r7, r1
 8019498:	d007      	beq.n	80194aa <_svfprintf_r+0x4f6>
 801949a:	3b01      	subs	r3, #1
 801949c:	9309      	str	r3, [sp, #36]	; 0x24
 801949e:	2200      	movs	r2, #0
 80194a0:	2300      	movs	r3, #0
 80194a2:	f7ef fce9 	bl	8008e78 <__aeabi_dcmpeq>
 80194a6:	2800      	cmp	r0, #0
 80194a8:	d0d9      	beq.n	801945e <_svfprintf_r+0x4aa>
 80194aa:	4b98      	ldr	r3, [pc, #608]	; (801970c <_svfprintf_r+0x758>)
 80194ac:	2200      	movs	r2, #0
 80194ae:	4630      	mov	r0, r6
 80194b0:	4639      	mov	r1, r7
 80194b2:	f7ef fd09 	bl	8008ec8 <__aeabi_dcmpgt>
 80194b6:	b960      	cbnz	r0, 80194d2 <_svfprintf_r+0x51e>
 80194b8:	4b94      	ldr	r3, [pc, #592]	; (801970c <_svfprintf_r+0x758>)
 80194ba:	2200      	movs	r2, #0
 80194bc:	4630      	mov	r0, r6
 80194be:	4639      	mov	r1, r7
 80194c0:	f7ef fcda 	bl	8008e78 <__aeabi_dcmpeq>
 80194c4:	2800      	cmp	r0, #0
 80194c6:	f000 8181 	beq.w	80197cc <_svfprintf_r+0x818>
 80194ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80194cc:	07db      	lsls	r3, r3, #31
 80194ce:	f140 817d 	bpl.w	80197cc <_svfprintf_r+0x818>
 80194d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80194d4:	9524      	str	r5, [sp, #144]	; 0x90
 80194d6:	7bd9      	ldrb	r1, [r3, #15]
 80194d8:	2030      	movs	r0, #48	; 0x30
 80194da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80194dc:	1e53      	subs	r3, r2, #1
 80194de:	9324      	str	r3, [sp, #144]	; 0x90
 80194e0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80194e4:	428b      	cmp	r3, r1
 80194e6:	f000 8160 	beq.w	80197aa <_svfprintf_r+0x7f6>
 80194ea:	2b39      	cmp	r3, #57	; 0x39
 80194ec:	bf0b      	itete	eq
 80194ee:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 80194f0:	3301      	addne	r3, #1
 80194f2:	7a9b      	ldrbeq	r3, [r3, #10]
 80194f4:	b2db      	uxtbne	r3, r3
 80194f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80194fa:	eba5 030a 	sub.w	r3, r5, sl
 80194fe:	9309      	str	r3, [sp, #36]	; 0x24
 8019500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019502:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8019504:	2b47      	cmp	r3, #71	; 0x47
 8019506:	f040 81b3 	bne.w	8019870 <_svfprintf_r+0x8bc>
 801950a:	1cef      	adds	r7, r5, #3
 801950c:	db03      	blt.n	8019516 <_svfprintf_r+0x562>
 801950e:	9b07      	ldr	r3, [sp, #28]
 8019510:	42ab      	cmp	r3, r5
 8019512:	f280 81d8 	bge.w	80198c6 <_svfprintf_r+0x912>
 8019516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019518:	3b02      	subs	r3, #2
 801951a:	930a      	str	r3, [sp, #40]	; 0x28
 801951c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801951e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8019522:	f021 0120 	bic.w	r1, r1, #32
 8019526:	2941      	cmp	r1, #65	; 0x41
 8019528:	bf08      	it	eq
 801952a:	320f      	addeq	r2, #15
 801952c:	f105 33ff 	add.w	r3, r5, #4294967295
 8019530:	bf06      	itte	eq
 8019532:	b2d2      	uxtbeq	r2, r2
 8019534:	2101      	moveq	r1, #1
 8019536:	2100      	movne	r1, #0
 8019538:	2b00      	cmp	r3, #0
 801953a:	9320      	str	r3, [sp, #128]	; 0x80
 801953c:	bfb8      	it	lt
 801953e:	f1c5 0301 	rsblt	r3, r5, #1
 8019542:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8019546:	bfb4      	ite	lt
 8019548:	222d      	movlt	r2, #45	; 0x2d
 801954a:	222b      	movge	r2, #43	; 0x2b
 801954c:	2b09      	cmp	r3, #9
 801954e:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8019552:	f340 81a6 	ble.w	80198a2 <_svfprintf_r+0x8ee>
 8019556:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 801955a:	260a      	movs	r6, #10
 801955c:	4611      	mov	r1, r2
 801955e:	fb93 f5f6 	sdiv	r5, r3, r6
 8019562:	fb06 3015 	mls	r0, r6, r5, r3
 8019566:	3030      	adds	r0, #48	; 0x30
 8019568:	f801 0c01 	strb.w	r0, [r1, #-1]
 801956c:	4618      	mov	r0, r3
 801956e:	2863      	cmp	r0, #99	; 0x63
 8019570:	f102 32ff 	add.w	r2, r2, #4294967295
 8019574:	462b      	mov	r3, r5
 8019576:	dcf1      	bgt.n	801955c <_svfprintf_r+0x5a8>
 8019578:	3330      	adds	r3, #48	; 0x30
 801957a:	1e88      	subs	r0, r1, #2
 801957c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019580:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 8019584:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8019588:	4603      	mov	r3, r0
 801958a:	42ab      	cmp	r3, r5
 801958c:	f0c0 8184 	bcc.w	8019898 <_svfprintf_r+0x8e4>
 8019590:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 8019594:	1a52      	subs	r2, r2, r1
 8019596:	42a8      	cmp	r0, r5
 8019598:	bf88      	it	hi
 801959a:	2200      	movhi	r2, #0
 801959c:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 80195a0:	441a      	add	r2, r3
 80195a2:	ab22      	add	r3, sp, #136	; 0x88
 80195a4:	1ad3      	subs	r3, r2, r3
 80195a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80195a8:	9319      	str	r3, [sp, #100]	; 0x64
 80195aa:	2a01      	cmp	r2, #1
 80195ac:	4413      	add	r3, r2
 80195ae:	9307      	str	r3, [sp, #28]
 80195b0:	dc02      	bgt.n	80195b8 <_svfprintf_r+0x604>
 80195b2:	f018 0f01 	tst.w	r8, #1
 80195b6:	d003      	beq.n	80195c0 <_svfprintf_r+0x60c>
 80195b8:	9b07      	ldr	r3, [sp, #28]
 80195ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80195bc:	4413      	add	r3, r2
 80195be:	9307      	str	r3, [sp, #28]
 80195c0:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 80195c4:	2600      	movs	r6, #0
 80195c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80195ca:	9314      	str	r3, [sp, #80]	; 0x50
 80195cc:	960c      	str	r6, [sp, #48]	; 0x30
 80195ce:	4635      	mov	r5, r6
 80195d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80195d2:	b113      	cbz	r3, 80195da <_svfprintf_r+0x626>
 80195d4:	232d      	movs	r3, #45	; 0x2d
 80195d6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80195da:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80195de:	2700      	movs	r7, #0
 80195e0:	9b07      	ldr	r3, [sp, #28]
 80195e2:	42bb      	cmp	r3, r7
 80195e4:	bfb8      	it	lt
 80195e6:	463b      	movlt	r3, r7
 80195e8:	9314      	str	r3, [sp, #80]	; 0x50
 80195ea:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80195ee:	b113      	cbz	r3, 80195f6 <_svfprintf_r+0x642>
 80195f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80195f2:	3301      	adds	r3, #1
 80195f4:	9314      	str	r3, [sp, #80]	; 0x50
 80195f6:	f018 0302 	ands.w	r3, r8, #2
 80195fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80195fc:	bf1e      	ittt	ne
 80195fe:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 8019600:	3302      	addne	r3, #2
 8019602:	9314      	strne	r3, [sp, #80]	; 0x50
 8019604:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8019608:	931c      	str	r3, [sp, #112]	; 0x70
 801960a:	d122      	bne.n	8019652 <_svfprintf_r+0x69e>
 801960c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8019610:	1a9b      	subs	r3, r3, r2
 8019612:	2b00      	cmp	r3, #0
 8019614:	9316      	str	r3, [sp, #88]	; 0x58
 8019616:	dd1c      	ble.n	8019652 <_svfprintf_r+0x69e>
 8019618:	9816      	ldr	r0, [sp, #88]	; 0x58
 801961a:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801961e:	2810      	cmp	r0, #16
 8019620:	483b      	ldr	r0, [pc, #236]	; (8019710 <_svfprintf_r+0x75c>)
 8019622:	6020      	str	r0, [r4, #0]
 8019624:	f102 0201 	add.w	r2, r2, #1
 8019628:	f104 0108 	add.w	r1, r4, #8
 801962c:	f300 82ec 	bgt.w	8019c08 <_svfprintf_r+0xc54>
 8019630:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019632:	6060      	str	r0, [r4, #4]
 8019634:	4403      	add	r3, r0
 8019636:	2a07      	cmp	r2, #7
 8019638:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801963c:	f340 82f9 	ble.w	8019c32 <_svfprintf_r+0xc7e>
 8019640:	aa26      	add	r2, sp, #152	; 0x98
 8019642:	4659      	mov	r1, fp
 8019644:	4648      	mov	r0, r9
 8019646:	f003 fe2d 	bl	801d2a4 <__ssprint_r>
 801964a:	2800      	cmp	r0, #0
 801964c:	f040 8624 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019650:	ac29      	add	r4, sp, #164	; 0xa4
 8019652:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8019656:	b173      	cbz	r3, 8019676 <_svfprintf_r+0x6c2>
 8019658:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 801965c:	6023      	str	r3, [r4, #0]
 801965e:	2301      	movs	r3, #1
 8019660:	6063      	str	r3, [r4, #4]
 8019662:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019664:	3301      	adds	r3, #1
 8019666:	9328      	str	r3, [sp, #160]	; 0xa0
 8019668:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801966a:	3301      	adds	r3, #1
 801966c:	2b07      	cmp	r3, #7
 801966e:	9327      	str	r3, [sp, #156]	; 0x9c
 8019670:	f300 82e1 	bgt.w	8019c36 <_svfprintf_r+0xc82>
 8019674:	3408      	adds	r4, #8
 8019676:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019678:	b16b      	cbz	r3, 8019696 <_svfprintf_r+0x6e2>
 801967a:	ab1f      	add	r3, sp, #124	; 0x7c
 801967c:	6023      	str	r3, [r4, #0]
 801967e:	2302      	movs	r3, #2
 8019680:	6063      	str	r3, [r4, #4]
 8019682:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019684:	3302      	adds	r3, #2
 8019686:	9328      	str	r3, [sp, #160]	; 0xa0
 8019688:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801968a:	3301      	adds	r3, #1
 801968c:	2b07      	cmp	r3, #7
 801968e:	9327      	str	r3, [sp, #156]	; 0x9c
 8019690:	f300 82db 	bgt.w	8019c4a <_svfprintf_r+0xc96>
 8019694:	3408      	adds	r4, #8
 8019696:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019698:	2b80      	cmp	r3, #128	; 0x80
 801969a:	d122      	bne.n	80196e2 <_svfprintf_r+0x72e>
 801969c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 80196a0:	1a9b      	subs	r3, r3, r2
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	9316      	str	r3, [sp, #88]	; 0x58
 80196a6:	dd1c      	ble.n	80196e2 <_svfprintf_r+0x72e>
 80196a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80196aa:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80196ae:	2810      	cmp	r0, #16
 80196b0:	4818      	ldr	r0, [pc, #96]	; (8019714 <_svfprintf_r+0x760>)
 80196b2:	6020      	str	r0, [r4, #0]
 80196b4:	f102 0201 	add.w	r2, r2, #1
 80196b8:	f104 0108 	add.w	r1, r4, #8
 80196bc:	f300 82cf 	bgt.w	8019c5e <_svfprintf_r+0xcaa>
 80196c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80196c2:	6060      	str	r0, [r4, #4]
 80196c4:	4403      	add	r3, r0
 80196c6:	2a07      	cmp	r2, #7
 80196c8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80196cc:	f340 82dc 	ble.w	8019c88 <_svfprintf_r+0xcd4>
 80196d0:	aa26      	add	r2, sp, #152	; 0x98
 80196d2:	4659      	mov	r1, fp
 80196d4:	4648      	mov	r0, r9
 80196d6:	f003 fde5 	bl	801d2a4 <__ssprint_r>
 80196da:	2800      	cmp	r0, #0
 80196dc:	f040 85dc 	bne.w	801a298 <_svfprintf_r+0x12e4>
 80196e0:	ac29      	add	r4, sp, #164	; 0xa4
 80196e2:	9b07      	ldr	r3, [sp, #28]
 80196e4:	1aff      	subs	r7, r7, r3
 80196e6:	2f00      	cmp	r7, #0
 80196e8:	dd28      	ble.n	801973c <_svfprintf_r+0x788>
 80196ea:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80196ee:	4809      	ldr	r0, [pc, #36]	; (8019714 <_svfprintf_r+0x760>)
 80196f0:	6020      	str	r0, [r4, #0]
 80196f2:	2f10      	cmp	r7, #16
 80196f4:	f103 0301 	add.w	r3, r3, #1
 80196f8:	f104 0108 	add.w	r1, r4, #8
 80196fc:	e00c      	b.n	8019718 <_svfprintf_r+0x764>
 80196fe:	bf00      	nop
 8019700:	0802061d 	.word	0x0802061d
 8019704:	0802060c 	.word	0x0802060c
 8019708:	40300000 	.word	0x40300000
 801970c:	3fe00000 	.word	0x3fe00000
 8019710:	08020630 	.word	0x08020630
 8019714:	08020640 	.word	0x08020640
 8019718:	f300 82b8 	bgt.w	8019c8c <_svfprintf_r+0xcd8>
 801971c:	6067      	str	r7, [r4, #4]
 801971e:	2b07      	cmp	r3, #7
 8019720:	4417      	add	r7, r2
 8019722:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8019726:	f340 82c4 	ble.w	8019cb2 <_svfprintf_r+0xcfe>
 801972a:	aa26      	add	r2, sp, #152	; 0x98
 801972c:	4659      	mov	r1, fp
 801972e:	4648      	mov	r0, r9
 8019730:	f003 fdb8 	bl	801d2a4 <__ssprint_r>
 8019734:	2800      	cmp	r0, #0
 8019736:	f040 85af 	bne.w	801a298 <_svfprintf_r+0x12e4>
 801973a:	ac29      	add	r4, sp, #164	; 0xa4
 801973c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8019740:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8019742:	f040 82bd 	bne.w	8019cc0 <_svfprintf_r+0xd0c>
 8019746:	9b07      	ldr	r3, [sp, #28]
 8019748:	f8c4 a000 	str.w	sl, [r4]
 801974c:	441f      	add	r7, r3
 801974e:	6063      	str	r3, [r4, #4]
 8019750:	9728      	str	r7, [sp, #160]	; 0xa0
 8019752:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019754:	3301      	adds	r3, #1
 8019756:	2b07      	cmp	r3, #7
 8019758:	9327      	str	r3, [sp, #156]	; 0x9c
 801975a:	f300 82f6 	bgt.w	8019d4a <_svfprintf_r+0xd96>
 801975e:	3408      	adds	r4, #8
 8019760:	f018 0f04 	tst.w	r8, #4
 8019764:	f040 857a 	bne.w	801a25c <_svfprintf_r+0x12a8>
 8019768:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 801976c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801976e:	428a      	cmp	r2, r1
 8019770:	bfac      	ite	ge
 8019772:	189b      	addge	r3, r3, r2
 8019774:	185b      	addlt	r3, r3, r1
 8019776:	930f      	str	r3, [sp, #60]	; 0x3c
 8019778:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801977a:	b13b      	cbz	r3, 801978c <_svfprintf_r+0x7d8>
 801977c:	aa26      	add	r2, sp, #152	; 0x98
 801977e:	4659      	mov	r1, fp
 8019780:	4648      	mov	r0, r9
 8019782:	f003 fd8f 	bl	801d2a4 <__ssprint_r>
 8019786:	2800      	cmp	r0, #0
 8019788:	f040 8586 	bne.w	801a298 <_svfprintf_r+0x12e4>
 801978c:	2300      	movs	r3, #0
 801978e:	9327      	str	r3, [sp, #156]	; 0x9c
 8019790:	9b08      	ldr	r3, [sp, #32]
 8019792:	2b00      	cmp	r3, #0
 8019794:	f040 859c 	bne.w	801a2d0 <_svfprintf_r+0x131c>
 8019798:	ac29      	add	r4, sp, #164	; 0xa4
 801979a:	e0e4      	b.n	8019966 <_svfprintf_r+0x9b2>
 801979c:	9008      	str	r0, [sp, #32]
 801979e:	e630      	b.n	8019402 <_svfprintf_r+0x44e>
 80197a0:	9008      	str	r0, [sp, #32]
 80197a2:	2306      	movs	r3, #6
 80197a4:	e61e      	b.n	80193e4 <_svfprintf_r+0x430>
 80197a6:	9008      	str	r0, [sp, #32]
 80197a8:	e62b      	b.n	8019402 <_svfprintf_r+0x44e>
 80197aa:	f802 0c01 	strb.w	r0, [r2, #-1]
 80197ae:	e694      	b.n	80194da <_svfprintf_r+0x526>
 80197b0:	f803 0b01 	strb.w	r0, [r3], #1
 80197b4:	1aca      	subs	r2, r1, r3
 80197b6:	2a00      	cmp	r2, #0
 80197b8:	dafa      	bge.n	80197b0 <_svfprintf_r+0x7fc>
 80197ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80197bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80197be:	3201      	adds	r2, #1
 80197c0:	f103 0301 	add.w	r3, r3, #1
 80197c4:	bfb8      	it	lt
 80197c6:	2300      	movlt	r3, #0
 80197c8:	441d      	add	r5, r3
 80197ca:	e696      	b.n	80194fa <_svfprintf_r+0x546>
 80197cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80197ce:	462b      	mov	r3, r5
 80197d0:	18a9      	adds	r1, r5, r2
 80197d2:	2030      	movs	r0, #48	; 0x30
 80197d4:	e7ee      	b.n	80197b4 <_svfprintf_r+0x800>
 80197d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80197d8:	2b46      	cmp	r3, #70	; 0x46
 80197da:	d005      	beq.n	80197e8 <_svfprintf_r+0x834>
 80197dc:	2b45      	cmp	r3, #69	; 0x45
 80197de:	d11b      	bne.n	8019818 <_svfprintf_r+0x864>
 80197e0:	9b07      	ldr	r3, [sp, #28]
 80197e2:	1c5e      	adds	r6, r3, #1
 80197e4:	2302      	movs	r3, #2
 80197e6:	e001      	b.n	80197ec <_svfprintf_r+0x838>
 80197e8:	9e07      	ldr	r6, [sp, #28]
 80197ea:	2303      	movs	r3, #3
 80197ec:	aa24      	add	r2, sp, #144	; 0x90
 80197ee:	9204      	str	r2, [sp, #16]
 80197f0:	aa21      	add	r2, sp, #132	; 0x84
 80197f2:	9203      	str	r2, [sp, #12]
 80197f4:	aa20      	add	r2, sp, #128	; 0x80
 80197f6:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80197fa:	9300      	str	r3, [sp, #0]
 80197fc:	463a      	mov	r2, r7
 80197fe:	462b      	mov	r3, r5
 8019800:	4648      	mov	r0, r9
 8019802:	f002 f909 	bl	801ba18 <_dtoa_r>
 8019806:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019808:	2b47      	cmp	r3, #71	; 0x47
 801980a:	4682      	mov	sl, r0
 801980c:	d106      	bne.n	801981c <_svfprintf_r+0x868>
 801980e:	f018 0f01 	tst.w	r8, #1
 8019812:	d103      	bne.n	801981c <_svfprintf_r+0x868>
 8019814:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8019816:	e670      	b.n	80194fa <_svfprintf_r+0x546>
 8019818:	9e07      	ldr	r6, [sp, #28]
 801981a:	e7e3      	b.n	80197e4 <_svfprintf_r+0x830>
 801981c:	eb0a 0306 	add.w	r3, sl, r6
 8019820:	9309      	str	r3, [sp, #36]	; 0x24
 8019822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019824:	2b46      	cmp	r3, #70	; 0x46
 8019826:	d111      	bne.n	801984c <_svfprintf_r+0x898>
 8019828:	f89a 3000 	ldrb.w	r3, [sl]
 801982c:	2b30      	cmp	r3, #48	; 0x30
 801982e:	d109      	bne.n	8019844 <_svfprintf_r+0x890>
 8019830:	2200      	movs	r2, #0
 8019832:	2300      	movs	r3, #0
 8019834:	4638      	mov	r0, r7
 8019836:	4629      	mov	r1, r5
 8019838:	f7ef fb1e 	bl	8008e78 <__aeabi_dcmpeq>
 801983c:	b910      	cbnz	r0, 8019844 <_svfprintf_r+0x890>
 801983e:	f1c6 0601 	rsb	r6, r6, #1
 8019842:	9620      	str	r6, [sp, #128]	; 0x80
 8019844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019846:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019848:	441a      	add	r2, r3
 801984a:	9209      	str	r2, [sp, #36]	; 0x24
 801984c:	2200      	movs	r2, #0
 801984e:	2300      	movs	r3, #0
 8019850:	4638      	mov	r0, r7
 8019852:	4629      	mov	r1, r5
 8019854:	f7ef fb10 	bl	8008e78 <__aeabi_dcmpeq>
 8019858:	b108      	cbz	r0, 801985e <_svfprintf_r+0x8aa>
 801985a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801985c:	9324      	str	r3, [sp, #144]	; 0x90
 801985e:	2230      	movs	r2, #48	; 0x30
 8019860:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019862:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019864:	4299      	cmp	r1, r3
 8019866:	d9d5      	bls.n	8019814 <_svfprintf_r+0x860>
 8019868:	1c59      	adds	r1, r3, #1
 801986a:	9124      	str	r1, [sp, #144]	; 0x90
 801986c:	701a      	strb	r2, [r3, #0]
 801986e:	e7f7      	b.n	8019860 <_svfprintf_r+0x8ac>
 8019870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019872:	2b46      	cmp	r3, #70	; 0x46
 8019874:	f47f ae52 	bne.w	801951c <_svfprintf_r+0x568>
 8019878:	9a07      	ldr	r2, [sp, #28]
 801987a:	f008 0301 	and.w	r3, r8, #1
 801987e:	2d00      	cmp	r5, #0
 8019880:	ea43 0302 	orr.w	r3, r3, r2
 8019884:	dd1a      	ble.n	80198bc <_svfprintf_r+0x908>
 8019886:	2b00      	cmp	r3, #0
 8019888:	d034      	beq.n	80198f4 <_svfprintf_r+0x940>
 801988a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801988c:	18eb      	adds	r3, r5, r3
 801988e:	441a      	add	r2, r3
 8019890:	9207      	str	r2, [sp, #28]
 8019892:	2366      	movs	r3, #102	; 0x66
 8019894:	930a      	str	r3, [sp, #40]	; 0x28
 8019896:	e033      	b.n	8019900 <_svfprintf_r+0x94c>
 8019898:	f813 6b01 	ldrb.w	r6, [r3], #1
 801989c:	f802 6b01 	strb.w	r6, [r2], #1
 80198a0:	e673      	b.n	801958a <_svfprintf_r+0x5d6>
 80198a2:	b941      	cbnz	r1, 80198b6 <_svfprintf_r+0x902>
 80198a4:	2230      	movs	r2, #48	; 0x30
 80198a6:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 80198aa:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 80198ae:	3330      	adds	r3, #48	; 0x30
 80198b0:	f802 3b01 	strb.w	r3, [r2], #1
 80198b4:	e675      	b.n	80195a2 <_svfprintf_r+0x5ee>
 80198b6:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80198ba:	e7f8      	b.n	80198ae <_svfprintf_r+0x8fa>
 80198bc:	b1e3      	cbz	r3, 80198f8 <_svfprintf_r+0x944>
 80198be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80198c0:	9a07      	ldr	r2, [sp, #28]
 80198c2:	3301      	adds	r3, #1
 80198c4:	e7e3      	b.n	801988e <_svfprintf_r+0x8da>
 80198c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198c8:	429d      	cmp	r5, r3
 80198ca:	db07      	blt.n	80198dc <_svfprintf_r+0x928>
 80198cc:	f018 0f01 	tst.w	r8, #1
 80198d0:	d02b      	beq.n	801992a <_svfprintf_r+0x976>
 80198d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80198d4:	18eb      	adds	r3, r5, r3
 80198d6:	9307      	str	r3, [sp, #28]
 80198d8:	2367      	movs	r3, #103	; 0x67
 80198da:	e7db      	b.n	8019894 <_svfprintf_r+0x8e0>
 80198dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80198e0:	2d00      	cmp	r5, #0
 80198e2:	4413      	add	r3, r2
 80198e4:	9307      	str	r3, [sp, #28]
 80198e6:	dcf7      	bgt.n	80198d8 <_svfprintf_r+0x924>
 80198e8:	9a07      	ldr	r2, [sp, #28]
 80198ea:	f1c5 0301 	rsb	r3, r5, #1
 80198ee:	441a      	add	r2, r3
 80198f0:	9207      	str	r2, [sp, #28]
 80198f2:	e7f1      	b.n	80198d8 <_svfprintf_r+0x924>
 80198f4:	9507      	str	r5, [sp, #28]
 80198f6:	e7cc      	b.n	8019892 <_svfprintf_r+0x8de>
 80198f8:	2366      	movs	r3, #102	; 0x66
 80198fa:	930a      	str	r3, [sp, #40]	; 0x28
 80198fc:	2301      	movs	r3, #1
 80198fe:	9307      	str	r3, [sp, #28]
 8019900:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8019904:	930c      	str	r3, [sp, #48]	; 0x30
 8019906:	d021      	beq.n	801994c <_svfprintf_r+0x998>
 8019908:	2600      	movs	r6, #0
 801990a:	2d00      	cmp	r5, #0
 801990c:	960c      	str	r6, [sp, #48]	; 0x30
 801990e:	f77f ae5f 	ble.w	80195d0 <_svfprintf_r+0x61c>
 8019912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019914:	781b      	ldrb	r3, [r3, #0]
 8019916:	2bff      	cmp	r3, #255	; 0xff
 8019918:	d109      	bne.n	801992e <_svfprintf_r+0x97a>
 801991a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801991c:	9a07      	ldr	r2, [sp, #28]
 801991e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019920:	4433      	add	r3, r6
 8019922:	fb01 2303 	mla	r3, r1, r3, r2
 8019926:	9307      	str	r3, [sp, #28]
 8019928:	e652      	b.n	80195d0 <_svfprintf_r+0x61c>
 801992a:	9507      	str	r5, [sp, #28]
 801992c:	e7d4      	b.n	80198d8 <_svfprintf_r+0x924>
 801992e:	42ab      	cmp	r3, r5
 8019930:	daf3      	bge.n	801991a <_svfprintf_r+0x966>
 8019932:	1aed      	subs	r5, r5, r3
 8019934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019936:	785b      	ldrb	r3, [r3, #1]
 8019938:	b133      	cbz	r3, 8019948 <_svfprintf_r+0x994>
 801993a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801993c:	3301      	adds	r3, #1
 801993e:	930c      	str	r3, [sp, #48]	; 0x30
 8019940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019942:	3301      	adds	r3, #1
 8019944:	930d      	str	r3, [sp, #52]	; 0x34
 8019946:	e7e4      	b.n	8019912 <_svfprintf_r+0x95e>
 8019948:	3601      	adds	r6, #1
 801994a:	e7e2      	b.n	8019912 <_svfprintf_r+0x95e>
 801994c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801994e:	e63f      	b.n	80195d0 <_svfprintf_r+0x61c>
 8019950:	1d33      	adds	r3, r6, #4
 8019952:	f018 0f20 	tst.w	r8, #32
 8019956:	930b      	str	r3, [sp, #44]	; 0x2c
 8019958:	d00a      	beq.n	8019970 <_svfprintf_r+0x9bc>
 801995a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801995c:	6833      	ldr	r3, [r6, #0]
 801995e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019960:	17d2      	asrs	r2, r2, #31
 8019962:	e9c3 1200 	strd	r1, r2, [r3]
 8019966:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019968:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801996c:	f7ff bb5e 	b.w	801902c <_svfprintf_r+0x78>
 8019970:	f018 0f10 	tst.w	r8, #16
 8019974:	d003      	beq.n	801997e <_svfprintf_r+0x9ca>
 8019976:	6833      	ldr	r3, [r6, #0]
 8019978:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801997a:	601a      	str	r2, [r3, #0]
 801997c:	e7f3      	b.n	8019966 <_svfprintf_r+0x9b2>
 801997e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8019982:	d003      	beq.n	801998c <_svfprintf_r+0x9d8>
 8019984:	6833      	ldr	r3, [r6, #0]
 8019986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019988:	801a      	strh	r2, [r3, #0]
 801998a:	e7ec      	b.n	8019966 <_svfprintf_r+0x9b2>
 801998c:	f418 7f00 	tst.w	r8, #512	; 0x200
 8019990:	d0f1      	beq.n	8019976 <_svfprintf_r+0x9c2>
 8019992:	6833      	ldr	r3, [r6, #0]
 8019994:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019996:	701a      	strb	r2, [r3, #0]
 8019998:	e7e5      	b.n	8019966 <_svfprintf_r+0x9b2>
 801999a:	f048 0810 	orr.w	r8, r8, #16
 801999e:	f018 0320 	ands.w	r3, r8, #32
 80199a2:	d020      	beq.n	80199e6 <_svfprintf_r+0xa32>
 80199a4:	1df3      	adds	r3, r6, #7
 80199a6:	f023 0307 	bic.w	r3, r3, #7
 80199aa:	461a      	mov	r2, r3
 80199ac:	685f      	ldr	r7, [r3, #4]
 80199ae:	f852 6b08 	ldr.w	r6, [r2], #8
 80199b2:	920b      	str	r2, [sp, #44]	; 0x2c
 80199b4:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80199b8:	2300      	movs	r3, #0
 80199ba:	2200      	movs	r2, #0
 80199bc:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80199c0:	9a07      	ldr	r2, [sp, #28]
 80199c2:	3201      	adds	r2, #1
 80199c4:	f000 8495 	beq.w	801a2f2 <_svfprintf_r+0x133e>
 80199c8:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 80199cc:	9208      	str	r2, [sp, #32]
 80199ce:	ea56 0207 	orrs.w	r2, r6, r7
 80199d2:	f040 8494 	bne.w	801a2fe <_svfprintf_r+0x134a>
 80199d6:	9a07      	ldr	r2, [sp, #28]
 80199d8:	2a00      	cmp	r2, #0
 80199da:	f000 80fb 	beq.w	8019bd4 <_svfprintf_r+0xc20>
 80199de:	2b01      	cmp	r3, #1
 80199e0:	f040 8490 	bne.w	801a304 <_svfprintf_r+0x1350>
 80199e4:	e09f      	b.n	8019b26 <_svfprintf_r+0xb72>
 80199e6:	4632      	mov	r2, r6
 80199e8:	f018 0710 	ands.w	r7, r8, #16
 80199ec:	f852 6b04 	ldr.w	r6, [r2], #4
 80199f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80199f2:	d001      	beq.n	80199f8 <_svfprintf_r+0xa44>
 80199f4:	461f      	mov	r7, r3
 80199f6:	e7dd      	b.n	80199b4 <_svfprintf_r+0xa00>
 80199f8:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 80199fc:	d001      	beq.n	8019a02 <_svfprintf_r+0xa4e>
 80199fe:	b2b6      	uxth	r6, r6
 8019a00:	e7d8      	b.n	80199b4 <_svfprintf_r+0xa00>
 8019a02:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 8019a06:	d0d5      	beq.n	80199b4 <_svfprintf_r+0xa00>
 8019a08:	b2f6      	uxtb	r6, r6
 8019a0a:	e7f3      	b.n	80199f4 <_svfprintf_r+0xa40>
 8019a0c:	4633      	mov	r3, r6
 8019a0e:	2278      	movs	r2, #120	; 0x78
 8019a10:	f853 6b04 	ldr.w	r6, [r3], #4
 8019a14:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a16:	2330      	movs	r3, #48	; 0x30
 8019a18:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8019a1c:	4ba6      	ldr	r3, [pc, #664]	; (8019cb8 <_svfprintf_r+0xd04>)
 8019a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8019a20:	2700      	movs	r7, #0
 8019a22:	f048 0802 	orr.w	r8, r8, #2
 8019a26:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 8019a2a:	2302      	movs	r3, #2
 8019a2c:	920a      	str	r2, [sp, #40]	; 0x28
 8019a2e:	e7c4      	b.n	80199ba <_svfprintf_r+0xa06>
 8019a30:	4633      	mov	r3, r6
 8019a32:	2500      	movs	r5, #0
 8019a34:	f853 ab04 	ldr.w	sl, [r3], #4
 8019a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a3a:	9b07      	ldr	r3, [sp, #28]
 8019a3c:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8019a40:	1c58      	adds	r0, r3, #1
 8019a42:	d010      	beq.n	8019a66 <_svfprintf_r+0xab2>
 8019a44:	461a      	mov	r2, r3
 8019a46:	4629      	mov	r1, r5
 8019a48:	4650      	mov	r0, sl
 8019a4a:	f7ee fd99 	bl	8008580 <memchr>
 8019a4e:	9008      	str	r0, [sp, #32]
 8019a50:	2800      	cmp	r0, #0
 8019a52:	f000 80d6 	beq.w	8019c02 <_svfprintf_r+0xc4e>
 8019a56:	eba0 030a 	sub.w	r3, r0, sl
 8019a5a:	e9cd 3507 	strd	r3, r5, [sp, #28]
 8019a5e:	462f      	mov	r7, r5
 8019a60:	462e      	mov	r6, r5
 8019a62:	950c      	str	r5, [sp, #48]	; 0x30
 8019a64:	e5bc      	b.n	80195e0 <_svfprintf_r+0x62c>
 8019a66:	4650      	mov	r0, sl
 8019a68:	f7ee fdda 	bl	8008620 <strlen>
 8019a6c:	e9cd 0507 	strd	r0, r5, [sp, #28]
 8019a70:	e469      	b.n	8019346 <_svfprintf_r+0x392>
 8019a72:	f048 0810 	orr.w	r8, r8, #16
 8019a76:	f018 0320 	ands.w	r3, r8, #32
 8019a7a:	d009      	beq.n	8019a90 <_svfprintf_r+0xadc>
 8019a7c:	1df3      	adds	r3, r6, #7
 8019a7e:	f023 0307 	bic.w	r3, r3, #7
 8019a82:	461a      	mov	r2, r3
 8019a84:	685f      	ldr	r7, [r3, #4]
 8019a86:	f852 6b08 	ldr.w	r6, [r2], #8
 8019a8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8019a8c:	2301      	movs	r3, #1
 8019a8e:	e794      	b.n	80199ba <_svfprintf_r+0xa06>
 8019a90:	4632      	mov	r2, r6
 8019a92:	f018 0710 	ands.w	r7, r8, #16
 8019a96:	f852 6b04 	ldr.w	r6, [r2], #4
 8019a9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8019a9c:	d001      	beq.n	8019aa2 <_svfprintf_r+0xaee>
 8019a9e:	461f      	mov	r7, r3
 8019aa0:	e7f4      	b.n	8019a8c <_svfprintf_r+0xad8>
 8019aa2:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8019aa6:	d001      	beq.n	8019aac <_svfprintf_r+0xaf8>
 8019aa8:	b2b6      	uxth	r6, r6
 8019aaa:	e7ef      	b.n	8019a8c <_svfprintf_r+0xad8>
 8019aac:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 8019ab0:	d0ec      	beq.n	8019a8c <_svfprintf_r+0xad8>
 8019ab2:	b2f6      	uxtb	r6, r6
 8019ab4:	e7f3      	b.n	8019a9e <_svfprintf_r+0xaea>
 8019ab6:	4b81      	ldr	r3, [pc, #516]	; (8019cbc <_svfprintf_r+0xd08>)
 8019ab8:	931a      	str	r3, [sp, #104]	; 0x68
 8019aba:	f018 0320 	ands.w	r3, r8, #32
 8019abe:	d01b      	beq.n	8019af8 <_svfprintf_r+0xb44>
 8019ac0:	1df3      	adds	r3, r6, #7
 8019ac2:	f023 0307 	bic.w	r3, r3, #7
 8019ac6:	461a      	mov	r2, r3
 8019ac8:	685f      	ldr	r7, [r3, #4]
 8019aca:	f852 6b08 	ldr.w	r6, [r2], #8
 8019ace:	920b      	str	r2, [sp, #44]	; 0x2c
 8019ad0:	f018 0f01 	tst.w	r8, #1
 8019ad4:	d00a      	beq.n	8019aec <_svfprintf_r+0xb38>
 8019ad6:	ea56 0307 	orrs.w	r3, r6, r7
 8019ada:	d007      	beq.n	8019aec <_svfprintf_r+0xb38>
 8019adc:	2330      	movs	r3, #48	; 0x30
 8019ade:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8019ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ae4:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8019ae8:	f048 0802 	orr.w	r8, r8, #2
 8019aec:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8019af0:	2302      	movs	r3, #2
 8019af2:	e762      	b.n	80199ba <_svfprintf_r+0xa06>
 8019af4:	4b70      	ldr	r3, [pc, #448]	; (8019cb8 <_svfprintf_r+0xd04>)
 8019af6:	e7df      	b.n	8019ab8 <_svfprintf_r+0xb04>
 8019af8:	4632      	mov	r2, r6
 8019afa:	f018 0710 	ands.w	r7, r8, #16
 8019afe:	f852 6b04 	ldr.w	r6, [r2], #4
 8019b02:	920b      	str	r2, [sp, #44]	; 0x2c
 8019b04:	d001      	beq.n	8019b0a <_svfprintf_r+0xb56>
 8019b06:	461f      	mov	r7, r3
 8019b08:	e7e2      	b.n	8019ad0 <_svfprintf_r+0xb1c>
 8019b0a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8019b0e:	d001      	beq.n	8019b14 <_svfprintf_r+0xb60>
 8019b10:	b2b6      	uxth	r6, r6
 8019b12:	e7dd      	b.n	8019ad0 <_svfprintf_r+0xb1c>
 8019b14:	f418 7700 	ands.w	r7, r8, #512	; 0x200
 8019b18:	d0da      	beq.n	8019ad0 <_svfprintf_r+0xb1c>
 8019b1a:	b2f6      	uxtb	r6, r6
 8019b1c:	e7f3      	b.n	8019b06 <_svfprintf_r+0xb52>
 8019b1e:	2e0a      	cmp	r6, #10
 8019b20:	f177 0300 	sbcs.w	r3, r7, #0
 8019b24:	d206      	bcs.n	8019b34 <_svfprintf_r+0xb80>
 8019b26:	3630      	adds	r6, #48	; 0x30
 8019b28:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 8019b2c:	f20d 1a47 	addw	sl, sp, #327	; 0x147
 8019b30:	f000 bc04 	b.w	801a33c <_svfprintf_r+0x1388>
 8019b34:	2300      	movs	r3, #0
 8019b36:	9309      	str	r3, [sp, #36]	; 0x24
 8019b38:	9b08      	ldr	r3, [sp, #32]
 8019b3a:	ad52      	add	r5, sp, #328	; 0x148
 8019b3c:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 8019b40:	220a      	movs	r2, #10
 8019b42:	2300      	movs	r3, #0
 8019b44:	4630      	mov	r0, r6
 8019b46:	4639      	mov	r1, r7
 8019b48:	f7ef fb54 	bl	80091f4 <__aeabi_uldivmod>
 8019b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b4e:	3230      	adds	r2, #48	; 0x30
 8019b50:	3301      	adds	r3, #1
 8019b52:	f105 3aff 	add.w	sl, r5, #4294967295
 8019b56:	f805 2c01 	strb.w	r2, [r5, #-1]
 8019b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8019b5c:	f1b8 0f00 	cmp.w	r8, #0
 8019b60:	d019      	beq.n	8019b96 <_svfprintf_r+0xbe2>
 8019b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b66:	781b      	ldrb	r3, [r3, #0]
 8019b68:	429a      	cmp	r2, r3
 8019b6a:	d114      	bne.n	8019b96 <_svfprintf_r+0xbe2>
 8019b6c:	2aff      	cmp	r2, #255	; 0xff
 8019b6e:	d012      	beq.n	8019b96 <_svfprintf_r+0xbe2>
 8019b70:	2e0a      	cmp	r6, #10
 8019b72:	f177 0300 	sbcs.w	r3, r7, #0
 8019b76:	d30e      	bcc.n	8019b96 <_svfprintf_r+0xbe2>
 8019b78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019b7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019b7c:	ebaa 0a03 	sub.w	sl, sl, r3
 8019b80:	461a      	mov	r2, r3
 8019b82:	4650      	mov	r0, sl
 8019b84:	f003 fb7b 	bl	801d27e <strncpy>
 8019b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b8a:	785d      	ldrb	r5, [r3, #1]
 8019b8c:	b195      	cbz	r5, 8019bb4 <_svfprintf_r+0xc00>
 8019b8e:	3301      	adds	r3, #1
 8019b90:	930d      	str	r3, [sp, #52]	; 0x34
 8019b92:	2300      	movs	r3, #0
 8019b94:	9309      	str	r3, [sp, #36]	; 0x24
 8019b96:	2300      	movs	r3, #0
 8019b98:	220a      	movs	r2, #10
 8019b9a:	4630      	mov	r0, r6
 8019b9c:	4639      	mov	r1, r7
 8019b9e:	f7ef fb29 	bl	80091f4 <__aeabi_uldivmod>
 8019ba2:	2e0a      	cmp	r6, #10
 8019ba4:	f177 0300 	sbcs.w	r3, r7, #0
 8019ba8:	f0c0 83c8 	bcc.w	801a33c <_svfprintf_r+0x1388>
 8019bac:	4606      	mov	r6, r0
 8019bae:	460f      	mov	r7, r1
 8019bb0:	4655      	mov	r5, sl
 8019bb2:	e7c5      	b.n	8019b40 <_svfprintf_r+0xb8c>
 8019bb4:	9509      	str	r5, [sp, #36]	; 0x24
 8019bb6:	e7ee      	b.n	8019b96 <_svfprintf_r+0xbe2>
 8019bb8:	f006 030f 	and.w	r3, r6, #15
 8019bbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019bbe:	0936      	lsrs	r6, r6, #4
 8019bc0:	5cd3      	ldrb	r3, [r2, r3]
 8019bc2:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8019bc6:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8019bca:	093f      	lsrs	r7, r7, #4
 8019bcc:	ea56 0307 	orrs.w	r3, r6, r7
 8019bd0:	d1f2      	bne.n	8019bb8 <_svfprintf_r+0xc04>
 8019bd2:	e3b3      	b.n	801a33c <_svfprintf_r+0x1388>
 8019bd4:	b933      	cbnz	r3, 8019be4 <_svfprintf_r+0xc30>
 8019bd6:	f018 0f01 	tst.w	r8, #1
 8019bda:	d003      	beq.n	8019be4 <_svfprintf_r+0xc30>
 8019bdc:	2330      	movs	r3, #48	; 0x30
 8019bde:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 8019be2:	e7a3      	b.n	8019b2c <_svfprintf_r+0xb78>
 8019be4:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8019be8:	e3a8      	b.n	801a33c <_svfprintf_r+0x1388>
 8019bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	f000 8375 	beq.w	801a2dc <_svfprintf_r+0x1328>
 8019bf2:	2000      	movs	r0, #0
 8019bf4:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8019bf8:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8019bfc:	960b      	str	r6, [sp, #44]	; 0x2c
 8019bfe:	f7ff bb34 	b.w	801926a <_svfprintf_r+0x2b6>
 8019c02:	9f08      	ldr	r7, [sp, #32]
 8019c04:	f7ff bba0 	b.w	8019348 <_svfprintf_r+0x394>
 8019c08:	2010      	movs	r0, #16
 8019c0a:	4403      	add	r3, r0
 8019c0c:	2a07      	cmp	r2, #7
 8019c0e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019c12:	6060      	str	r0, [r4, #4]
 8019c14:	dd08      	ble.n	8019c28 <_svfprintf_r+0xc74>
 8019c16:	aa26      	add	r2, sp, #152	; 0x98
 8019c18:	4659      	mov	r1, fp
 8019c1a:	4648      	mov	r0, r9
 8019c1c:	f003 fb42 	bl	801d2a4 <__ssprint_r>
 8019c20:	2800      	cmp	r0, #0
 8019c22:	f040 8339 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019c26:	a929      	add	r1, sp, #164	; 0xa4
 8019c28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019c2a:	3b10      	subs	r3, #16
 8019c2c:	9316      	str	r3, [sp, #88]	; 0x58
 8019c2e:	460c      	mov	r4, r1
 8019c30:	e4f2      	b.n	8019618 <_svfprintf_r+0x664>
 8019c32:	460c      	mov	r4, r1
 8019c34:	e50d      	b.n	8019652 <_svfprintf_r+0x69e>
 8019c36:	aa26      	add	r2, sp, #152	; 0x98
 8019c38:	4659      	mov	r1, fp
 8019c3a:	4648      	mov	r0, r9
 8019c3c:	f003 fb32 	bl	801d2a4 <__ssprint_r>
 8019c40:	2800      	cmp	r0, #0
 8019c42:	f040 8329 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019c46:	ac29      	add	r4, sp, #164	; 0xa4
 8019c48:	e515      	b.n	8019676 <_svfprintf_r+0x6c2>
 8019c4a:	aa26      	add	r2, sp, #152	; 0x98
 8019c4c:	4659      	mov	r1, fp
 8019c4e:	4648      	mov	r0, r9
 8019c50:	f003 fb28 	bl	801d2a4 <__ssprint_r>
 8019c54:	2800      	cmp	r0, #0
 8019c56:	f040 831f 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019c5a:	ac29      	add	r4, sp, #164	; 0xa4
 8019c5c:	e51b      	b.n	8019696 <_svfprintf_r+0x6e2>
 8019c5e:	2010      	movs	r0, #16
 8019c60:	4403      	add	r3, r0
 8019c62:	2a07      	cmp	r2, #7
 8019c64:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019c68:	6060      	str	r0, [r4, #4]
 8019c6a:	dd08      	ble.n	8019c7e <_svfprintf_r+0xcca>
 8019c6c:	aa26      	add	r2, sp, #152	; 0x98
 8019c6e:	4659      	mov	r1, fp
 8019c70:	4648      	mov	r0, r9
 8019c72:	f003 fb17 	bl	801d2a4 <__ssprint_r>
 8019c76:	2800      	cmp	r0, #0
 8019c78:	f040 830e 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019c7c:	a929      	add	r1, sp, #164	; 0xa4
 8019c7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019c80:	3b10      	subs	r3, #16
 8019c82:	9316      	str	r3, [sp, #88]	; 0x58
 8019c84:	460c      	mov	r4, r1
 8019c86:	e50f      	b.n	80196a8 <_svfprintf_r+0x6f4>
 8019c88:	460c      	mov	r4, r1
 8019c8a:	e52a      	b.n	80196e2 <_svfprintf_r+0x72e>
 8019c8c:	2010      	movs	r0, #16
 8019c8e:	4402      	add	r2, r0
 8019c90:	2b07      	cmp	r3, #7
 8019c92:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8019c96:	6060      	str	r0, [r4, #4]
 8019c98:	dd08      	ble.n	8019cac <_svfprintf_r+0xcf8>
 8019c9a:	aa26      	add	r2, sp, #152	; 0x98
 8019c9c:	4659      	mov	r1, fp
 8019c9e:	4648      	mov	r0, r9
 8019ca0:	f003 fb00 	bl	801d2a4 <__ssprint_r>
 8019ca4:	2800      	cmp	r0, #0
 8019ca6:	f040 82f7 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019caa:	a929      	add	r1, sp, #164	; 0xa4
 8019cac:	3f10      	subs	r7, #16
 8019cae:	460c      	mov	r4, r1
 8019cb0:	e51b      	b.n	80196ea <_svfprintf_r+0x736>
 8019cb2:	460c      	mov	r4, r1
 8019cb4:	e542      	b.n	801973c <_svfprintf_r+0x788>
 8019cb6:	bf00      	nop
 8019cb8:	0802060c 	.word	0x0802060c
 8019cbc:	0802061d 	.word	0x0802061d
 8019cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cc2:	2b65      	cmp	r3, #101	; 0x65
 8019cc4:	f340 8230 	ble.w	801a128 <_svfprintf_r+0x1174>
 8019cc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019ccc:	2200      	movs	r2, #0
 8019cce:	2300      	movs	r3, #0
 8019cd0:	f7ef f8d2 	bl	8008e78 <__aeabi_dcmpeq>
 8019cd4:	2800      	cmp	r0, #0
 8019cd6:	d068      	beq.n	8019daa <_svfprintf_r+0xdf6>
 8019cd8:	4b6d      	ldr	r3, [pc, #436]	; (8019e90 <_svfprintf_r+0xedc>)
 8019cda:	6023      	str	r3, [r4, #0]
 8019cdc:	2301      	movs	r3, #1
 8019cde:	441f      	add	r7, r3
 8019ce0:	6063      	str	r3, [r4, #4]
 8019ce2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019ce4:	9728      	str	r7, [sp, #160]	; 0xa0
 8019ce6:	3301      	adds	r3, #1
 8019ce8:	2b07      	cmp	r3, #7
 8019cea:	9327      	str	r3, [sp, #156]	; 0x9c
 8019cec:	dc37      	bgt.n	8019d5e <_svfprintf_r+0xdaa>
 8019cee:	3408      	adds	r4, #8
 8019cf0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019cf4:	4293      	cmp	r3, r2
 8019cf6:	db03      	blt.n	8019d00 <_svfprintf_r+0xd4c>
 8019cf8:	f018 0f01 	tst.w	r8, #1
 8019cfc:	f43f ad30 	beq.w	8019760 <_svfprintf_r+0x7ac>
 8019d00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019d02:	6023      	str	r3, [r4, #0]
 8019d04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019d06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019d08:	6063      	str	r3, [r4, #4]
 8019d0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019d0c:	4413      	add	r3, r2
 8019d0e:	9328      	str	r3, [sp, #160]	; 0xa0
 8019d10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019d12:	3301      	adds	r3, #1
 8019d14:	2b07      	cmp	r3, #7
 8019d16:	9327      	str	r3, [sp, #156]	; 0x9c
 8019d18:	dc2b      	bgt.n	8019d72 <_svfprintf_r+0xdbe>
 8019d1a:	3408      	adds	r4, #8
 8019d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d1e:	1e5d      	subs	r5, r3, #1
 8019d20:	2d00      	cmp	r5, #0
 8019d22:	f77f ad1d 	ble.w	8019760 <_svfprintf_r+0x7ac>
 8019d26:	4e5b      	ldr	r6, [pc, #364]	; (8019e94 <_svfprintf_r+0xee0>)
 8019d28:	2710      	movs	r7, #16
 8019d2a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8019d2e:	2d10      	cmp	r5, #16
 8019d30:	f103 0301 	add.w	r3, r3, #1
 8019d34:	f104 0108 	add.w	r1, r4, #8
 8019d38:	6026      	str	r6, [r4, #0]
 8019d3a:	dc24      	bgt.n	8019d86 <_svfprintf_r+0xdd2>
 8019d3c:	6065      	str	r5, [r4, #4]
 8019d3e:	2b07      	cmp	r3, #7
 8019d40:	4415      	add	r5, r2
 8019d42:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8019d46:	f340 8286 	ble.w	801a256 <_svfprintf_r+0x12a2>
 8019d4a:	aa26      	add	r2, sp, #152	; 0x98
 8019d4c:	4659      	mov	r1, fp
 8019d4e:	4648      	mov	r0, r9
 8019d50:	f003 faa8 	bl	801d2a4 <__ssprint_r>
 8019d54:	2800      	cmp	r0, #0
 8019d56:	f040 829f 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019d5a:	ac29      	add	r4, sp, #164	; 0xa4
 8019d5c:	e500      	b.n	8019760 <_svfprintf_r+0x7ac>
 8019d5e:	aa26      	add	r2, sp, #152	; 0x98
 8019d60:	4659      	mov	r1, fp
 8019d62:	4648      	mov	r0, r9
 8019d64:	f003 fa9e 	bl	801d2a4 <__ssprint_r>
 8019d68:	2800      	cmp	r0, #0
 8019d6a:	f040 8295 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019d6e:	ac29      	add	r4, sp, #164	; 0xa4
 8019d70:	e7be      	b.n	8019cf0 <_svfprintf_r+0xd3c>
 8019d72:	aa26      	add	r2, sp, #152	; 0x98
 8019d74:	4659      	mov	r1, fp
 8019d76:	4648      	mov	r0, r9
 8019d78:	f003 fa94 	bl	801d2a4 <__ssprint_r>
 8019d7c:	2800      	cmp	r0, #0
 8019d7e:	f040 828b 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019d82:	ac29      	add	r4, sp, #164	; 0xa4
 8019d84:	e7ca      	b.n	8019d1c <_svfprintf_r+0xd68>
 8019d86:	3210      	adds	r2, #16
 8019d88:	2b07      	cmp	r3, #7
 8019d8a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8019d8e:	6067      	str	r7, [r4, #4]
 8019d90:	dd08      	ble.n	8019da4 <_svfprintf_r+0xdf0>
 8019d92:	aa26      	add	r2, sp, #152	; 0x98
 8019d94:	4659      	mov	r1, fp
 8019d96:	4648      	mov	r0, r9
 8019d98:	f003 fa84 	bl	801d2a4 <__ssprint_r>
 8019d9c:	2800      	cmp	r0, #0
 8019d9e:	f040 827b 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019da2:	a929      	add	r1, sp, #164	; 0xa4
 8019da4:	3d10      	subs	r5, #16
 8019da6:	460c      	mov	r4, r1
 8019da8:	e7bf      	b.n	8019d2a <_svfprintf_r+0xd76>
 8019daa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	dc73      	bgt.n	8019e98 <_svfprintf_r+0xee4>
 8019db0:	4b37      	ldr	r3, [pc, #220]	; (8019e90 <_svfprintf_r+0xedc>)
 8019db2:	6023      	str	r3, [r4, #0]
 8019db4:	2301      	movs	r3, #1
 8019db6:	441f      	add	r7, r3
 8019db8:	6063      	str	r3, [r4, #4]
 8019dba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019dbc:	9728      	str	r7, [sp, #160]	; 0xa0
 8019dbe:	3301      	adds	r3, #1
 8019dc0:	2b07      	cmp	r3, #7
 8019dc2:	9327      	str	r3, [sp, #156]	; 0x9c
 8019dc4:	dc3d      	bgt.n	8019e42 <_svfprintf_r+0xe8e>
 8019dc6:	3408      	adds	r4, #8
 8019dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019dca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019dcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019dce:	430a      	orrs	r2, r1
 8019dd0:	f008 0101 	and.w	r1, r8, #1
 8019dd4:	430a      	orrs	r2, r1
 8019dd6:	f43f acc3 	beq.w	8019760 <_svfprintf_r+0x7ac>
 8019dda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019ddc:	6022      	str	r2, [r4, #0]
 8019dde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019de0:	6062      	str	r2, [r4, #4]
 8019de2:	4413      	add	r3, r2
 8019de4:	9328      	str	r3, [sp, #160]	; 0xa0
 8019de6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019de8:	3301      	adds	r3, #1
 8019dea:	2b07      	cmp	r3, #7
 8019dec:	9327      	str	r3, [sp, #156]	; 0x9c
 8019dee:	dc32      	bgt.n	8019e56 <_svfprintf_r+0xea2>
 8019df0:	3408      	adds	r4, #8
 8019df2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8019df4:	2d00      	cmp	r5, #0
 8019df6:	da1b      	bge.n	8019e30 <_svfprintf_r+0xe7c>
 8019df8:	4e26      	ldr	r6, [pc, #152]	; (8019e94 <_svfprintf_r+0xee0>)
 8019dfa:	426d      	negs	r5, r5
 8019dfc:	4623      	mov	r3, r4
 8019dfe:	2710      	movs	r7, #16
 8019e00:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8019e04:	2d10      	cmp	r5, #16
 8019e06:	f102 0201 	add.w	r2, r2, #1
 8019e0a:	f104 0408 	add.w	r4, r4, #8
 8019e0e:	601e      	str	r6, [r3, #0]
 8019e10:	dc2b      	bgt.n	8019e6a <_svfprintf_r+0xeb6>
 8019e12:	605d      	str	r5, [r3, #4]
 8019e14:	2a07      	cmp	r2, #7
 8019e16:	440d      	add	r5, r1
 8019e18:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8019e1c:	dd08      	ble.n	8019e30 <_svfprintf_r+0xe7c>
 8019e1e:	aa26      	add	r2, sp, #152	; 0x98
 8019e20:	4659      	mov	r1, fp
 8019e22:	4648      	mov	r0, r9
 8019e24:	f003 fa3e 	bl	801d2a4 <__ssprint_r>
 8019e28:	2800      	cmp	r0, #0
 8019e2a:	f040 8235 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019e2e:	ac29      	add	r4, sp, #164	; 0xa4
 8019e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e34:	6063      	str	r3, [r4, #4]
 8019e36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019e38:	f8c4 a000 	str.w	sl, [r4]
 8019e3c:	4413      	add	r3, r2
 8019e3e:	9328      	str	r3, [sp, #160]	; 0xa0
 8019e40:	e487      	b.n	8019752 <_svfprintf_r+0x79e>
 8019e42:	aa26      	add	r2, sp, #152	; 0x98
 8019e44:	4659      	mov	r1, fp
 8019e46:	4648      	mov	r0, r9
 8019e48:	f003 fa2c 	bl	801d2a4 <__ssprint_r>
 8019e4c:	2800      	cmp	r0, #0
 8019e4e:	f040 8223 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019e52:	ac29      	add	r4, sp, #164	; 0xa4
 8019e54:	e7b8      	b.n	8019dc8 <_svfprintf_r+0xe14>
 8019e56:	aa26      	add	r2, sp, #152	; 0x98
 8019e58:	4659      	mov	r1, fp
 8019e5a:	4648      	mov	r0, r9
 8019e5c:	f003 fa22 	bl	801d2a4 <__ssprint_r>
 8019e60:	2800      	cmp	r0, #0
 8019e62:	f040 8219 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019e66:	ac29      	add	r4, sp, #164	; 0xa4
 8019e68:	e7c3      	b.n	8019df2 <_svfprintf_r+0xe3e>
 8019e6a:	3110      	adds	r1, #16
 8019e6c:	2a07      	cmp	r2, #7
 8019e6e:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8019e72:	605f      	str	r7, [r3, #4]
 8019e74:	dd08      	ble.n	8019e88 <_svfprintf_r+0xed4>
 8019e76:	aa26      	add	r2, sp, #152	; 0x98
 8019e78:	4659      	mov	r1, fp
 8019e7a:	4648      	mov	r0, r9
 8019e7c:	f003 fa12 	bl	801d2a4 <__ssprint_r>
 8019e80:	2800      	cmp	r0, #0
 8019e82:	f040 8209 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019e86:	ac29      	add	r4, sp, #164	; 0xa4
 8019e88:	3d10      	subs	r5, #16
 8019e8a:	4623      	mov	r3, r4
 8019e8c:	e7b8      	b.n	8019e00 <_svfprintf_r+0xe4c>
 8019e8e:	bf00      	nop
 8019e90:	0802062e 	.word	0x0802062e
 8019e94:	08020640 	.word	0x08020640
 8019e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e9a:	42ab      	cmp	r3, r5
 8019e9c:	bfa8      	it	ge
 8019e9e:	462b      	movge	r3, r5
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	9307      	str	r3, [sp, #28]
 8019ea4:	dd0a      	ble.n	8019ebc <_svfprintf_r+0xf08>
 8019ea6:	441f      	add	r7, r3
 8019ea8:	e9c4 a300 	strd	sl, r3, [r4]
 8019eac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019eae:	9728      	str	r7, [sp, #160]	; 0xa0
 8019eb0:	3301      	adds	r3, #1
 8019eb2:	2b07      	cmp	r3, #7
 8019eb4:	9327      	str	r3, [sp, #156]	; 0x9c
 8019eb6:	f300 8085 	bgt.w	8019fc4 <_svfprintf_r+0x1010>
 8019eba:	3408      	adds	r4, #8
 8019ebc:	9b07      	ldr	r3, [sp, #28]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	bfac      	ite	ge
 8019ec2:	1aef      	subge	r7, r5, r3
 8019ec4:	462f      	movlt	r7, r5
 8019ec6:	2f00      	cmp	r7, #0
 8019ec8:	dd19      	ble.n	8019efe <_svfprintf_r+0xf4a>
 8019eca:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8019ece:	4895      	ldr	r0, [pc, #596]	; (801a124 <_svfprintf_r+0x1170>)
 8019ed0:	6020      	str	r0, [r4, #0]
 8019ed2:	2f10      	cmp	r7, #16
 8019ed4:	f103 0301 	add.w	r3, r3, #1
 8019ed8:	f104 0108 	add.w	r1, r4, #8
 8019edc:	dc7c      	bgt.n	8019fd8 <_svfprintf_r+0x1024>
 8019ede:	6067      	str	r7, [r4, #4]
 8019ee0:	2b07      	cmp	r3, #7
 8019ee2:	4417      	add	r7, r2
 8019ee4:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8019ee8:	f340 8089 	ble.w	8019ffe <_svfprintf_r+0x104a>
 8019eec:	aa26      	add	r2, sp, #152	; 0x98
 8019eee:	4659      	mov	r1, fp
 8019ef0:	4648      	mov	r0, r9
 8019ef2:	f003 f9d7 	bl	801d2a4 <__ssprint_r>
 8019ef6:	2800      	cmp	r0, #0
 8019ef8:	f040 81ce 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019efc:	ac29      	add	r4, sp, #164	; 0xa4
 8019efe:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8019f02:	4455      	add	r5, sl
 8019f04:	d009      	beq.n	8019f1a <_svfprintf_r+0xf66>
 8019f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d17a      	bne.n	801a002 <_svfprintf_r+0x104e>
 8019f0c:	2e00      	cmp	r6, #0
 8019f0e:	d17a      	bne.n	801a006 <_svfprintf_r+0x1052>
 8019f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f12:	4453      	add	r3, sl
 8019f14:	429d      	cmp	r5, r3
 8019f16:	bf28      	it	cs
 8019f18:	461d      	movcs	r5, r3
 8019f1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8019f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f1e:	4293      	cmp	r3, r2
 8019f20:	db02      	blt.n	8019f28 <_svfprintf_r+0xf74>
 8019f22:	f018 0f01 	tst.w	r8, #1
 8019f26:	d00e      	beq.n	8019f46 <_svfprintf_r+0xf92>
 8019f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019f2a:	6023      	str	r3, [r4, #0]
 8019f2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019f2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019f30:	6063      	str	r3, [r4, #4]
 8019f32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f34:	4413      	add	r3, r2
 8019f36:	9328      	str	r3, [sp, #160]	; 0xa0
 8019f38:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019f3a:	3301      	adds	r3, #1
 8019f3c:	2b07      	cmp	r3, #7
 8019f3e:	9327      	str	r3, [sp, #156]	; 0x9c
 8019f40:	f300 80db 	bgt.w	801a0fa <_svfprintf_r+0x1146>
 8019f44:	3408      	adds	r4, #8
 8019f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f48:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8019f4a:	eb0a 0203 	add.w	r2, sl, r3
 8019f4e:	1b9e      	subs	r6, r3, r6
 8019f50:	1b52      	subs	r2, r2, r5
 8019f52:	4296      	cmp	r6, r2
 8019f54:	bfa8      	it	ge
 8019f56:	4616      	movge	r6, r2
 8019f58:	2e00      	cmp	r6, #0
 8019f5a:	dd0b      	ble.n	8019f74 <_svfprintf_r+0xfc0>
 8019f5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f5e:	4433      	add	r3, r6
 8019f60:	9328      	str	r3, [sp, #160]	; 0xa0
 8019f62:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019f64:	3301      	adds	r3, #1
 8019f66:	2b07      	cmp	r3, #7
 8019f68:	e9c4 5600 	strd	r5, r6, [r4]
 8019f6c:	9327      	str	r3, [sp, #156]	; 0x9c
 8019f6e:	f300 80ce 	bgt.w	801a10e <_svfprintf_r+0x115a>
 8019f72:	3408      	adds	r4, #8
 8019f74:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8019f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f78:	2e00      	cmp	r6, #0
 8019f7a:	eba3 0505 	sub.w	r5, r3, r5
 8019f7e:	bfa8      	it	ge
 8019f80:	1bad      	subge	r5, r5, r6
 8019f82:	2d00      	cmp	r5, #0
 8019f84:	f77f abec 	ble.w	8019760 <_svfprintf_r+0x7ac>
 8019f88:	4e66      	ldr	r6, [pc, #408]	; (801a124 <_svfprintf_r+0x1170>)
 8019f8a:	2710      	movs	r7, #16
 8019f8c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8019f90:	2d10      	cmp	r5, #16
 8019f92:	f103 0301 	add.w	r3, r3, #1
 8019f96:	f104 0108 	add.w	r1, r4, #8
 8019f9a:	6026      	str	r6, [r4, #0]
 8019f9c:	f77f aece 	ble.w	8019d3c <_svfprintf_r+0xd88>
 8019fa0:	3210      	adds	r2, #16
 8019fa2:	2b07      	cmp	r3, #7
 8019fa4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8019fa8:	6067      	str	r7, [r4, #4]
 8019faa:	dd08      	ble.n	8019fbe <_svfprintf_r+0x100a>
 8019fac:	aa26      	add	r2, sp, #152	; 0x98
 8019fae:	4659      	mov	r1, fp
 8019fb0:	4648      	mov	r0, r9
 8019fb2:	f003 f977 	bl	801d2a4 <__ssprint_r>
 8019fb6:	2800      	cmp	r0, #0
 8019fb8:	f040 816e 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019fbc:	a929      	add	r1, sp, #164	; 0xa4
 8019fbe:	3d10      	subs	r5, #16
 8019fc0:	460c      	mov	r4, r1
 8019fc2:	e7e3      	b.n	8019f8c <_svfprintf_r+0xfd8>
 8019fc4:	aa26      	add	r2, sp, #152	; 0x98
 8019fc6:	4659      	mov	r1, fp
 8019fc8:	4648      	mov	r0, r9
 8019fca:	f003 f96b 	bl	801d2a4 <__ssprint_r>
 8019fce:	2800      	cmp	r0, #0
 8019fd0:	f040 8162 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019fd4:	ac29      	add	r4, sp, #164	; 0xa4
 8019fd6:	e771      	b.n	8019ebc <_svfprintf_r+0xf08>
 8019fd8:	2010      	movs	r0, #16
 8019fda:	4402      	add	r2, r0
 8019fdc:	2b07      	cmp	r3, #7
 8019fde:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8019fe2:	6060      	str	r0, [r4, #4]
 8019fe4:	dd08      	ble.n	8019ff8 <_svfprintf_r+0x1044>
 8019fe6:	aa26      	add	r2, sp, #152	; 0x98
 8019fe8:	4659      	mov	r1, fp
 8019fea:	4648      	mov	r0, r9
 8019fec:	f003 f95a 	bl	801d2a4 <__ssprint_r>
 8019ff0:	2800      	cmp	r0, #0
 8019ff2:	f040 8151 	bne.w	801a298 <_svfprintf_r+0x12e4>
 8019ff6:	a929      	add	r1, sp, #164	; 0xa4
 8019ff8:	3f10      	subs	r7, #16
 8019ffa:	460c      	mov	r4, r1
 8019ffc:	e765      	b.n	8019eca <_svfprintf_r+0xf16>
 8019ffe:	460c      	mov	r4, r1
 801a000:	e77d      	b.n	8019efe <_svfprintf_r+0xf4a>
 801a002:	2e00      	cmp	r6, #0
 801a004:	d049      	beq.n	801a09a <_svfprintf_r+0x10e6>
 801a006:	3e01      	subs	r6, #1
 801a008:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a00a:	6023      	str	r3, [r4, #0]
 801a00c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a00e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a010:	6063      	str	r3, [r4, #4]
 801a012:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a014:	4413      	add	r3, r2
 801a016:	9328      	str	r3, [sp, #160]	; 0xa0
 801a018:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a01a:	3301      	adds	r3, #1
 801a01c:	2b07      	cmp	r3, #7
 801a01e:	9327      	str	r3, [sp, #156]	; 0x9c
 801a020:	dc42      	bgt.n	801a0a8 <_svfprintf_r+0x10f4>
 801a022:	3408      	adds	r4, #8
 801a024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a028:	4453      	add	r3, sl
 801a02a:	7812      	ldrb	r2, [r2, #0]
 801a02c:	1b5b      	subs	r3, r3, r5
 801a02e:	429a      	cmp	r2, r3
 801a030:	bfa8      	it	ge
 801a032:	461a      	movge	r2, r3
 801a034:	2a00      	cmp	r2, #0
 801a036:	9207      	str	r2, [sp, #28]
 801a038:	dd0a      	ble.n	801a050 <_svfprintf_r+0x109c>
 801a03a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a03c:	4413      	add	r3, r2
 801a03e:	9328      	str	r3, [sp, #160]	; 0xa0
 801a040:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a042:	3301      	adds	r3, #1
 801a044:	2b07      	cmp	r3, #7
 801a046:	e9c4 5200 	strd	r5, r2, [r4]
 801a04a:	9327      	str	r3, [sp, #156]	; 0x9c
 801a04c:	dc36      	bgt.n	801a0bc <_svfprintf_r+0x1108>
 801a04e:	3408      	adds	r4, #8
 801a050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a052:	781f      	ldrb	r7, [r3, #0]
 801a054:	9b07      	ldr	r3, [sp, #28]
 801a056:	2b00      	cmp	r3, #0
 801a058:	bfa8      	it	ge
 801a05a:	1aff      	subge	r7, r7, r3
 801a05c:	2f00      	cmp	r7, #0
 801a05e:	dd18      	ble.n	801a092 <_svfprintf_r+0x10de>
 801a060:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a064:	482f      	ldr	r0, [pc, #188]	; (801a124 <_svfprintf_r+0x1170>)
 801a066:	6020      	str	r0, [r4, #0]
 801a068:	2f10      	cmp	r7, #16
 801a06a:	f103 0301 	add.w	r3, r3, #1
 801a06e:	f104 0108 	add.w	r1, r4, #8
 801a072:	dc2d      	bgt.n	801a0d0 <_svfprintf_r+0x111c>
 801a074:	443a      	add	r2, r7
 801a076:	2b07      	cmp	r3, #7
 801a078:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a07c:	6067      	str	r7, [r4, #4]
 801a07e:	dd3a      	ble.n	801a0f6 <_svfprintf_r+0x1142>
 801a080:	aa26      	add	r2, sp, #152	; 0x98
 801a082:	4659      	mov	r1, fp
 801a084:	4648      	mov	r0, r9
 801a086:	f003 f90d 	bl	801d2a4 <__ssprint_r>
 801a08a:	2800      	cmp	r0, #0
 801a08c:	f040 8104 	bne.w	801a298 <_svfprintf_r+0x12e4>
 801a090:	ac29      	add	r4, sp, #164	; 0xa4
 801a092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a094:	781b      	ldrb	r3, [r3, #0]
 801a096:	441d      	add	r5, r3
 801a098:	e735      	b.n	8019f06 <_svfprintf_r+0xf52>
 801a09a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a09c:	3b01      	subs	r3, #1
 801a09e:	930d      	str	r3, [sp, #52]	; 0x34
 801a0a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a0a2:	3b01      	subs	r3, #1
 801a0a4:	930c      	str	r3, [sp, #48]	; 0x30
 801a0a6:	e7af      	b.n	801a008 <_svfprintf_r+0x1054>
 801a0a8:	aa26      	add	r2, sp, #152	; 0x98
 801a0aa:	4659      	mov	r1, fp
 801a0ac:	4648      	mov	r0, r9
 801a0ae:	f003 f8f9 	bl	801d2a4 <__ssprint_r>
 801a0b2:	2800      	cmp	r0, #0
 801a0b4:	f040 80f0 	bne.w	801a298 <_svfprintf_r+0x12e4>
 801a0b8:	ac29      	add	r4, sp, #164	; 0xa4
 801a0ba:	e7b3      	b.n	801a024 <_svfprintf_r+0x1070>
 801a0bc:	aa26      	add	r2, sp, #152	; 0x98
 801a0be:	4659      	mov	r1, fp
 801a0c0:	4648      	mov	r0, r9
 801a0c2:	f003 f8ef 	bl	801d2a4 <__ssprint_r>
 801a0c6:	2800      	cmp	r0, #0
 801a0c8:	f040 80e6 	bne.w	801a298 <_svfprintf_r+0x12e4>
 801a0cc:	ac29      	add	r4, sp, #164	; 0xa4
 801a0ce:	e7bf      	b.n	801a050 <_svfprintf_r+0x109c>
 801a0d0:	2010      	movs	r0, #16
 801a0d2:	4402      	add	r2, r0
 801a0d4:	2b07      	cmp	r3, #7
 801a0d6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a0da:	6060      	str	r0, [r4, #4]
 801a0dc:	dd08      	ble.n	801a0f0 <_svfprintf_r+0x113c>
 801a0de:	aa26      	add	r2, sp, #152	; 0x98
 801a0e0:	4659      	mov	r1, fp
 801a0e2:	4648      	mov	r0, r9
 801a0e4:	f003 f8de 	bl	801d2a4 <__ssprint_r>
 801a0e8:	2800      	cmp	r0, #0
 801a0ea:	f040 80d5 	bne.w	801a298 <_svfprintf_r+0x12e4>
 801a0ee:	a929      	add	r1, sp, #164	; 0xa4
 801a0f0:	3f10      	subs	r7, #16
 801a0f2:	460c      	mov	r4, r1
 801a0f4:	e7b4      	b.n	801a060 <_svfprintf_r+0x10ac>
 801a0f6:	460c      	mov	r4, r1
 801a0f8:	e7cb      	b.n	801a092 <_svfprintf_r+0x10de>
 801a0fa:	aa26      	add	r2, sp, #152	; 0x98
 801a0fc:	4659      	mov	r1, fp
 801a0fe:	4648      	mov	r0, r9
 801a100:	f003 f8d0 	bl	801d2a4 <__ssprint_r>
 801a104:	2800      	cmp	r0, #0
 801a106:	f040 80c7 	bne.w	801a298 <_svfprintf_r+0x12e4>
 801a10a:	ac29      	add	r4, sp, #164	; 0xa4
 801a10c:	e71b      	b.n	8019f46 <_svfprintf_r+0xf92>
 801a10e:	aa26      	add	r2, sp, #152	; 0x98
 801a110:	4659      	mov	r1, fp
 801a112:	4648      	mov	r0, r9
 801a114:	f003 f8c6 	bl	801d2a4 <__ssprint_r>
 801a118:	2800      	cmp	r0, #0
 801a11a:	f040 80bd 	bne.w	801a298 <_svfprintf_r+0x12e4>
 801a11e:	ac29      	add	r4, sp, #164	; 0xa4
 801a120:	e728      	b.n	8019f74 <_svfprintf_r+0xfc0>
 801a122:	bf00      	nop
 801a124:	08020640 	.word	0x08020640
 801a128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a12a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a12c:	2a01      	cmp	r2, #1
 801a12e:	f107 0701 	add.w	r7, r7, #1
 801a132:	f103 0301 	add.w	r3, r3, #1
 801a136:	f104 0508 	add.w	r5, r4, #8
 801a13a:	dc02      	bgt.n	801a142 <_svfprintf_r+0x118e>
 801a13c:	f018 0f01 	tst.w	r8, #1
 801a140:	d07e      	beq.n	801a240 <_svfprintf_r+0x128c>
 801a142:	2201      	movs	r2, #1
 801a144:	2b07      	cmp	r3, #7
 801a146:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801a14a:	f8c4 a000 	str.w	sl, [r4]
 801a14e:	6062      	str	r2, [r4, #4]
 801a150:	dd08      	ble.n	801a164 <_svfprintf_r+0x11b0>
 801a152:	aa26      	add	r2, sp, #152	; 0x98
 801a154:	4659      	mov	r1, fp
 801a156:	4648      	mov	r0, r9
 801a158:	f003 f8a4 	bl	801d2a4 <__ssprint_r>
 801a15c:	2800      	cmp	r0, #0
 801a15e:	f040 809b 	bne.w	801a298 <_svfprintf_r+0x12e4>
 801a162:	ad29      	add	r5, sp, #164	; 0xa4
 801a164:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a166:	602b      	str	r3, [r5, #0]
 801a168:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a16a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a16c:	606b      	str	r3, [r5, #4]
 801a16e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a170:	4413      	add	r3, r2
 801a172:	9328      	str	r3, [sp, #160]	; 0xa0
 801a174:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a176:	3301      	adds	r3, #1
 801a178:	2b07      	cmp	r3, #7
 801a17a:	9327      	str	r3, [sp, #156]	; 0x9c
 801a17c:	dc32      	bgt.n	801a1e4 <_svfprintf_r+0x1230>
 801a17e:	3508      	adds	r5, #8
 801a180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a182:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a186:	1e5c      	subs	r4, r3, #1
 801a188:	2200      	movs	r2, #0
 801a18a:	2300      	movs	r3, #0
 801a18c:	f7ee fe74 	bl	8008e78 <__aeabi_dcmpeq>
 801a190:	2800      	cmp	r0, #0
 801a192:	d130      	bne.n	801a1f6 <_svfprintf_r+0x1242>
 801a194:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801a196:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a19a:	3101      	adds	r1, #1
 801a19c:	3b01      	subs	r3, #1
 801a19e:	f10a 0001 	add.w	r0, sl, #1
 801a1a2:	4413      	add	r3, r2
 801a1a4:	2907      	cmp	r1, #7
 801a1a6:	e9c5 0400 	strd	r0, r4, [r5]
 801a1aa:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 801a1ae:	dd50      	ble.n	801a252 <_svfprintf_r+0x129e>
 801a1b0:	aa26      	add	r2, sp, #152	; 0x98
 801a1b2:	4659      	mov	r1, fp
 801a1b4:	4648      	mov	r0, r9
 801a1b6:	f003 f875 	bl	801d2a4 <__ssprint_r>
 801a1ba:	2800      	cmp	r0, #0
 801a1bc:	d16c      	bne.n	801a298 <_svfprintf_r+0x12e4>
 801a1be:	ad29      	add	r5, sp, #164	; 0xa4
 801a1c0:	ab22      	add	r3, sp, #136	; 0x88
 801a1c2:	602b      	str	r3, [r5, #0]
 801a1c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a1c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a1c8:	606b      	str	r3, [r5, #4]
 801a1ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a1cc:	4413      	add	r3, r2
 801a1ce:	9328      	str	r3, [sp, #160]	; 0xa0
 801a1d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a1d2:	3301      	adds	r3, #1
 801a1d4:	2b07      	cmp	r3, #7
 801a1d6:	9327      	str	r3, [sp, #156]	; 0x9c
 801a1d8:	f73f adb7 	bgt.w	8019d4a <_svfprintf_r+0xd96>
 801a1dc:	f105 0408 	add.w	r4, r5, #8
 801a1e0:	f7ff babe 	b.w	8019760 <_svfprintf_r+0x7ac>
 801a1e4:	aa26      	add	r2, sp, #152	; 0x98
 801a1e6:	4659      	mov	r1, fp
 801a1e8:	4648      	mov	r0, r9
 801a1ea:	f003 f85b 	bl	801d2a4 <__ssprint_r>
 801a1ee:	2800      	cmp	r0, #0
 801a1f0:	d152      	bne.n	801a298 <_svfprintf_r+0x12e4>
 801a1f2:	ad29      	add	r5, sp, #164	; 0xa4
 801a1f4:	e7c4      	b.n	801a180 <_svfprintf_r+0x11cc>
 801a1f6:	2c00      	cmp	r4, #0
 801a1f8:	dde2      	ble.n	801a1c0 <_svfprintf_r+0x120c>
 801a1fa:	4e57      	ldr	r6, [pc, #348]	; (801a358 <_svfprintf_r+0x13a4>)
 801a1fc:	2710      	movs	r7, #16
 801a1fe:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a202:	2c10      	cmp	r4, #16
 801a204:	f103 0301 	add.w	r3, r3, #1
 801a208:	f105 0108 	add.w	r1, r5, #8
 801a20c:	602e      	str	r6, [r5, #0]
 801a20e:	dc07      	bgt.n	801a220 <_svfprintf_r+0x126c>
 801a210:	606c      	str	r4, [r5, #4]
 801a212:	2b07      	cmp	r3, #7
 801a214:	4414      	add	r4, r2
 801a216:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 801a21a:	dcc9      	bgt.n	801a1b0 <_svfprintf_r+0x11fc>
 801a21c:	460d      	mov	r5, r1
 801a21e:	e7cf      	b.n	801a1c0 <_svfprintf_r+0x120c>
 801a220:	3210      	adds	r2, #16
 801a222:	2b07      	cmp	r3, #7
 801a224:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a228:	606f      	str	r7, [r5, #4]
 801a22a:	dd06      	ble.n	801a23a <_svfprintf_r+0x1286>
 801a22c:	aa26      	add	r2, sp, #152	; 0x98
 801a22e:	4659      	mov	r1, fp
 801a230:	4648      	mov	r0, r9
 801a232:	f003 f837 	bl	801d2a4 <__ssprint_r>
 801a236:	bb78      	cbnz	r0, 801a298 <_svfprintf_r+0x12e4>
 801a238:	a929      	add	r1, sp, #164	; 0xa4
 801a23a:	3c10      	subs	r4, #16
 801a23c:	460d      	mov	r5, r1
 801a23e:	e7de      	b.n	801a1fe <_svfprintf_r+0x124a>
 801a240:	2201      	movs	r2, #1
 801a242:	2b07      	cmp	r3, #7
 801a244:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801a248:	f8c4 a000 	str.w	sl, [r4]
 801a24c:	6062      	str	r2, [r4, #4]
 801a24e:	ddb7      	ble.n	801a1c0 <_svfprintf_r+0x120c>
 801a250:	e7ae      	b.n	801a1b0 <_svfprintf_r+0x11fc>
 801a252:	3508      	adds	r5, #8
 801a254:	e7b4      	b.n	801a1c0 <_svfprintf_r+0x120c>
 801a256:	460c      	mov	r4, r1
 801a258:	f7ff ba82 	b.w	8019760 <_svfprintf_r+0x7ac>
 801a25c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801a260:	1a9d      	subs	r5, r3, r2
 801a262:	2d00      	cmp	r5, #0
 801a264:	f77f aa80 	ble.w	8019768 <_svfprintf_r+0x7b4>
 801a268:	4e3c      	ldr	r6, [pc, #240]	; (801a35c <_svfprintf_r+0x13a8>)
 801a26a:	2710      	movs	r7, #16
 801a26c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a270:	2d10      	cmp	r5, #16
 801a272:	f103 0301 	add.w	r3, r3, #1
 801a276:	6026      	str	r6, [r4, #0]
 801a278:	dc18      	bgt.n	801a2ac <_svfprintf_r+0x12f8>
 801a27a:	6065      	str	r5, [r4, #4]
 801a27c:	2b07      	cmp	r3, #7
 801a27e:	4415      	add	r5, r2
 801a280:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801a284:	f77f aa70 	ble.w	8019768 <_svfprintf_r+0x7b4>
 801a288:	aa26      	add	r2, sp, #152	; 0x98
 801a28a:	4659      	mov	r1, fp
 801a28c:	4648      	mov	r0, r9
 801a28e:	f003 f809 	bl	801d2a4 <__ssprint_r>
 801a292:	2800      	cmp	r0, #0
 801a294:	f43f aa68 	beq.w	8019768 <_svfprintf_r+0x7b4>
 801a298:	9b08      	ldr	r3, [sp, #32]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	f43f a88b 	beq.w	80193b6 <_svfprintf_r+0x402>
 801a2a0:	4619      	mov	r1, r3
 801a2a2:	4648      	mov	r0, r9
 801a2a4:	f002 faf4 	bl	801c890 <_free_r>
 801a2a8:	f7ff b885 	b.w	80193b6 <_svfprintf_r+0x402>
 801a2ac:	3210      	adds	r2, #16
 801a2ae:	2b07      	cmp	r3, #7
 801a2b0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a2b4:	6067      	str	r7, [r4, #4]
 801a2b6:	dc02      	bgt.n	801a2be <_svfprintf_r+0x130a>
 801a2b8:	3408      	adds	r4, #8
 801a2ba:	3d10      	subs	r5, #16
 801a2bc:	e7d6      	b.n	801a26c <_svfprintf_r+0x12b8>
 801a2be:	aa26      	add	r2, sp, #152	; 0x98
 801a2c0:	4659      	mov	r1, fp
 801a2c2:	4648      	mov	r0, r9
 801a2c4:	f002 ffee 	bl	801d2a4 <__ssprint_r>
 801a2c8:	2800      	cmp	r0, #0
 801a2ca:	d1e5      	bne.n	801a298 <_svfprintf_r+0x12e4>
 801a2cc:	ac29      	add	r4, sp, #164	; 0xa4
 801a2ce:	e7f4      	b.n	801a2ba <_svfprintf_r+0x1306>
 801a2d0:	9908      	ldr	r1, [sp, #32]
 801a2d2:	4648      	mov	r0, r9
 801a2d4:	f002 fadc 	bl	801c890 <_free_r>
 801a2d8:	f7ff ba5e 	b.w	8019798 <_svfprintf_r+0x7e4>
 801a2dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	f43f a869 	beq.w	80193b6 <_svfprintf_r+0x402>
 801a2e4:	aa26      	add	r2, sp, #152	; 0x98
 801a2e6:	4659      	mov	r1, fp
 801a2e8:	4648      	mov	r0, r9
 801a2ea:	f002 ffdb 	bl	801d2a4 <__ssprint_r>
 801a2ee:	f7ff b862 	b.w	80193b6 <_svfprintf_r+0x402>
 801a2f2:	ea56 0207 	orrs.w	r2, r6, r7
 801a2f6:	f8cd 8020 	str.w	r8, [sp, #32]
 801a2fa:	f43f ab70 	beq.w	80199de <_svfprintf_r+0xa2a>
 801a2fe:	2b01      	cmp	r3, #1
 801a300:	f43f ac0d 	beq.w	8019b1e <_svfprintf_r+0xb6a>
 801a304:	2b02      	cmp	r3, #2
 801a306:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 801a30a:	f43f ac55 	beq.w	8019bb8 <_svfprintf_r+0xc04>
 801a30e:	f006 0307 	and.w	r3, r6, #7
 801a312:	08f6      	lsrs	r6, r6, #3
 801a314:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 801a318:	08ff      	lsrs	r7, r7, #3
 801a31a:	3330      	adds	r3, #48	; 0x30
 801a31c:	ea56 0107 	orrs.w	r1, r6, r7
 801a320:	4652      	mov	r2, sl
 801a322:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 801a326:	d1f2      	bne.n	801a30e <_svfprintf_r+0x135a>
 801a328:	9908      	ldr	r1, [sp, #32]
 801a32a:	07c9      	lsls	r1, r1, #31
 801a32c:	d506      	bpl.n	801a33c <_svfprintf_r+0x1388>
 801a32e:	2b30      	cmp	r3, #48	; 0x30
 801a330:	d004      	beq.n	801a33c <_svfprintf_r+0x1388>
 801a332:	2330      	movs	r3, #48	; 0x30
 801a334:	f80a 3c01 	strb.w	r3, [sl, #-1]
 801a338:	f1a2 0a02 	sub.w	sl, r2, #2
 801a33c:	ab52      	add	r3, sp, #328	; 0x148
 801a33e:	eba3 030a 	sub.w	r3, r3, sl
 801a342:	9f07      	ldr	r7, [sp, #28]
 801a344:	9307      	str	r3, [sp, #28]
 801a346:	2300      	movs	r3, #0
 801a348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a34c:	9308      	str	r3, [sp, #32]
 801a34e:	461e      	mov	r6, r3
 801a350:	930c      	str	r3, [sp, #48]	; 0x30
 801a352:	461d      	mov	r5, r3
 801a354:	f7ff b944 	b.w	80195e0 <_svfprintf_r+0x62c>
 801a358:	08020640 	.word	0x08020640
 801a35c:	08020630 	.word	0x08020630

0801a360 <sysconf>:
 801a360:	2808      	cmp	r0, #8
 801a362:	b508      	push	{r3, lr}
 801a364:	d006      	beq.n	801a374 <sysconf+0x14>
 801a366:	f7fd ff1f 	bl	80181a8 <__errno>
 801a36a:	2316      	movs	r3, #22
 801a36c:	6003      	str	r3, [r0, #0]
 801a36e:	f04f 30ff 	mov.w	r0, #4294967295
 801a372:	bd08      	pop	{r3, pc}
 801a374:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801a378:	e7fb      	b.n	801a372 <sysconf+0x12>
	...

0801a37c <_vfprintf_r>:
 801a37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a380:	b0d3      	sub	sp, #332	; 0x14c
 801a382:	468a      	mov	sl, r1
 801a384:	4691      	mov	r9, r2
 801a386:	461c      	mov	r4, r3
 801a388:	461e      	mov	r6, r3
 801a38a:	4680      	mov	r8, r0
 801a38c:	f002 fb60 	bl	801ca50 <_localeconv_r>
 801a390:	6803      	ldr	r3, [r0, #0]
 801a392:	9317      	str	r3, [sp, #92]	; 0x5c
 801a394:	4618      	mov	r0, r3
 801a396:	f7ee f943 	bl	8008620 <strlen>
 801a39a:	9012      	str	r0, [sp, #72]	; 0x48
 801a39c:	f1b8 0f00 	cmp.w	r8, #0
 801a3a0:	d005      	beq.n	801a3ae <_vfprintf_r+0x32>
 801a3a2:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801a3a6:	b913      	cbnz	r3, 801a3ae <_vfprintf_r+0x32>
 801a3a8:	4640      	mov	r0, r8
 801a3aa:	f002 f9e1 	bl	801c770 <__sinit>
 801a3ae:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801a3b2:	07d8      	lsls	r0, r3, #31
 801a3b4:	d407      	bmi.n	801a3c6 <_vfprintf_r+0x4a>
 801a3b6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a3ba:	0599      	lsls	r1, r3, #22
 801a3bc:	d403      	bmi.n	801a3c6 <_vfprintf_r+0x4a>
 801a3be:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801a3c2:	f7fe f8cf 	bl	8018564 <__retarget_lock_acquire_recursive>
 801a3c6:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801a3ca:	049a      	lsls	r2, r3, #18
 801a3cc:	d409      	bmi.n	801a3e2 <_vfprintf_r+0x66>
 801a3ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a3d2:	f8aa 300c 	strh.w	r3, [sl, #12]
 801a3d6:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801a3da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a3de:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 801a3e2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a3e6:	071b      	lsls	r3, r3, #28
 801a3e8:	d502      	bpl.n	801a3f0 <_vfprintf_r+0x74>
 801a3ea:	f8da 3010 	ldr.w	r3, [sl, #16]
 801a3ee:	b9c3      	cbnz	r3, 801a422 <_vfprintf_r+0xa6>
 801a3f0:	4651      	mov	r1, sl
 801a3f2:	4640      	mov	r0, r8
 801a3f4:	f001 fa20 	bl	801b838 <__swsetup_r>
 801a3f8:	b198      	cbz	r0, 801a422 <_vfprintf_r+0xa6>
 801a3fa:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801a3fe:	07df      	lsls	r7, r3, #31
 801a400:	d506      	bpl.n	801a410 <_vfprintf_r+0x94>
 801a402:	f04f 33ff 	mov.w	r3, #4294967295
 801a406:	9313      	str	r3, [sp, #76]	; 0x4c
 801a408:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a40a:	b053      	add	sp, #332	; 0x14c
 801a40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a410:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a414:	059e      	lsls	r6, r3, #22
 801a416:	d4f4      	bmi.n	801a402 <_vfprintf_r+0x86>
 801a418:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801a41c:	f7fe f8a3 	bl	8018566 <__retarget_lock_release_recursive>
 801a420:	e7ef      	b.n	801a402 <_vfprintf_r+0x86>
 801a422:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a426:	f003 021a 	and.w	r2, r3, #26
 801a42a:	2a0a      	cmp	r2, #10
 801a42c:	d116      	bne.n	801a45c <_vfprintf_r+0xe0>
 801a42e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 801a432:	2a00      	cmp	r2, #0
 801a434:	db12      	blt.n	801a45c <_vfprintf_r+0xe0>
 801a436:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 801a43a:	07d5      	lsls	r5, r2, #31
 801a43c:	d405      	bmi.n	801a44a <_vfprintf_r+0xce>
 801a43e:	0598      	lsls	r0, r3, #22
 801a440:	d403      	bmi.n	801a44a <_vfprintf_r+0xce>
 801a442:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801a446:	f7fe f88e 	bl	8018566 <__retarget_lock_release_recursive>
 801a44a:	4623      	mov	r3, r4
 801a44c:	464a      	mov	r2, r9
 801a44e:	4651      	mov	r1, sl
 801a450:	4640      	mov	r0, r8
 801a452:	b053      	add	sp, #332	; 0x14c
 801a454:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a458:	f001 b9ae 	b.w	801b7b8 <__sbprintf>
 801a45c:	2500      	movs	r5, #0
 801a45e:	2200      	movs	r2, #0
 801a460:	2300      	movs	r3, #0
 801a462:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 801a466:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801a46a:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 801a46e:	ac29      	add	r4, sp, #164	; 0xa4
 801a470:	9426      	str	r4, [sp, #152]	; 0x98
 801a472:	9509      	str	r5, [sp, #36]	; 0x24
 801a474:	950e      	str	r5, [sp, #56]	; 0x38
 801a476:	9516      	str	r5, [sp, #88]	; 0x58
 801a478:	9518      	str	r5, [sp, #96]	; 0x60
 801a47a:	9513      	str	r5, [sp, #76]	; 0x4c
 801a47c:	464b      	mov	r3, r9
 801a47e:	461d      	mov	r5, r3
 801a480:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a484:	b10a      	cbz	r2, 801a48a <_vfprintf_r+0x10e>
 801a486:	2a25      	cmp	r2, #37	; 0x25
 801a488:	d1f9      	bne.n	801a47e <_vfprintf_r+0x102>
 801a48a:	ebb5 0709 	subs.w	r7, r5, r9
 801a48e:	d00d      	beq.n	801a4ac <_vfprintf_r+0x130>
 801a490:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a492:	443b      	add	r3, r7
 801a494:	9328      	str	r3, [sp, #160]	; 0xa0
 801a496:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a498:	3301      	adds	r3, #1
 801a49a:	2b07      	cmp	r3, #7
 801a49c:	e9c4 9700 	strd	r9, r7, [r4]
 801a4a0:	9327      	str	r3, [sp, #156]	; 0x9c
 801a4a2:	dc79      	bgt.n	801a598 <_vfprintf_r+0x21c>
 801a4a4:	3408      	adds	r4, #8
 801a4a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a4a8:	443b      	add	r3, r7
 801a4aa:	9313      	str	r3, [sp, #76]	; 0x4c
 801a4ac:	782b      	ldrb	r3, [r5, #0]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	f001 813e 	beq.w	801b730 <_vfprintf_r+0x13b4>
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	f04f 32ff 	mov.w	r2, #4294967295
 801a4ba:	3501      	adds	r5, #1
 801a4bc:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a4c0:	9207      	str	r2, [sp, #28]
 801a4c2:	9314      	str	r3, [sp, #80]	; 0x50
 801a4c4:	469b      	mov	fp, r3
 801a4c6:	270a      	movs	r7, #10
 801a4c8:	212b      	movs	r1, #43	; 0x2b
 801a4ca:	462b      	mov	r3, r5
 801a4cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a4d0:	920a      	str	r2, [sp, #40]	; 0x28
 801a4d2:	930f      	str	r3, [sp, #60]	; 0x3c
 801a4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4d6:	3b20      	subs	r3, #32
 801a4d8:	2b5a      	cmp	r3, #90	; 0x5a
 801a4da:	f200 85b3 	bhi.w	801b044 <_vfprintf_r+0xcc8>
 801a4de:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a4e2:	007e      	.short	0x007e
 801a4e4:	05b105b1 	.word	0x05b105b1
 801a4e8:	05b10086 	.word	0x05b10086
 801a4ec:	05b105b1 	.word	0x05b105b1
 801a4f0:	05b10065 	.word	0x05b10065
 801a4f4:	008905b1 	.word	0x008905b1
 801a4f8:	05b10093 	.word	0x05b10093
 801a4fc:	00960090 	.word	0x00960090
 801a500:	00b205b1 	.word	0x00b205b1
 801a504:	00b500b5 	.word	0x00b500b5
 801a508:	00b500b5 	.word	0x00b500b5
 801a50c:	00b500b5 	.word	0x00b500b5
 801a510:	00b500b5 	.word	0x00b500b5
 801a514:	05b100b5 	.word	0x05b100b5
 801a518:	05b105b1 	.word	0x05b105b1
 801a51c:	05b105b1 	.word	0x05b105b1
 801a520:	05b105b1 	.word	0x05b105b1
 801a524:	05b10125 	.word	0x05b10125
 801a528:	00f500e2 	.word	0x00f500e2
 801a52c:	01250125 	.word	0x01250125
 801a530:	05b10125 	.word	0x05b10125
 801a534:	05b105b1 	.word	0x05b105b1
 801a538:	00c505b1 	.word	0x00c505b1
 801a53c:	05b105b1 	.word	0x05b105b1
 801a540:	05b1048b 	.word	0x05b1048b
 801a544:	05b105b1 	.word	0x05b105b1
 801a548:	05b104d5 	.word	0x05b104d5
 801a54c:	05b104f6 	.word	0x05b104f6
 801a550:	051805b1 	.word	0x051805b1
 801a554:	05b105b1 	.word	0x05b105b1
 801a558:	05b105b1 	.word	0x05b105b1
 801a55c:	05b105b1 	.word	0x05b105b1
 801a560:	05b105b1 	.word	0x05b105b1
 801a564:	05b10125 	.word	0x05b10125
 801a568:	00f700e2 	.word	0x00f700e2
 801a56c:	01250125 	.word	0x01250125
 801a570:	00c80125 	.word	0x00c80125
 801a574:	00dc00f7 	.word	0x00dc00f7
 801a578:	00d505b1 	.word	0x00d505b1
 801a57c:	046605b1 	.word	0x046605b1
 801a580:	04c3048d 	.word	0x04c3048d
 801a584:	05b100dc 	.word	0x05b100dc
 801a588:	007c04d5 	.word	0x007c04d5
 801a58c:	05b104f8 	.word	0x05b104f8
 801a590:	053705b1 	.word	0x053705b1
 801a594:	007c05b1 	.word	0x007c05b1
 801a598:	aa26      	add	r2, sp, #152	; 0x98
 801a59a:	4651      	mov	r1, sl
 801a59c:	4640      	mov	r0, r8
 801a59e:	f002 fefc 	bl	801d39a <__sprint_r>
 801a5a2:	2800      	cmp	r0, #0
 801a5a4:	f040 812d 	bne.w	801a802 <_vfprintf_r+0x486>
 801a5a8:	ac29      	add	r4, sp, #164	; 0xa4
 801a5aa:	e77c      	b.n	801a4a6 <_vfprintf_r+0x12a>
 801a5ac:	4640      	mov	r0, r8
 801a5ae:	f002 fa4f 	bl	801ca50 <_localeconv_r>
 801a5b2:	6843      	ldr	r3, [r0, #4]
 801a5b4:	9318      	str	r3, [sp, #96]	; 0x60
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	f7ee f832 	bl	8008620 <strlen>
 801a5bc:	9016      	str	r0, [sp, #88]	; 0x58
 801a5be:	4640      	mov	r0, r8
 801a5c0:	f002 fa46 	bl	801ca50 <_localeconv_r>
 801a5c4:	6883      	ldr	r3, [r0, #8]
 801a5c6:	930e      	str	r3, [sp, #56]	; 0x38
 801a5c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a5ca:	212b      	movs	r1, #43	; 0x2b
 801a5cc:	b12b      	cbz	r3, 801a5da <_vfprintf_r+0x25e>
 801a5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a5d0:	b11b      	cbz	r3, 801a5da <_vfprintf_r+0x25e>
 801a5d2:	781b      	ldrb	r3, [r3, #0]
 801a5d4:	b10b      	cbz	r3, 801a5da <_vfprintf_r+0x25e>
 801a5d6:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 801a5da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801a5dc:	e775      	b.n	801a4ca <_vfprintf_r+0x14e>
 801a5de:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d1f9      	bne.n	801a5da <_vfprintf_r+0x25e>
 801a5e6:	2320      	movs	r3, #32
 801a5e8:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a5ec:	e7f5      	b.n	801a5da <_vfprintf_r+0x25e>
 801a5ee:	f04b 0b01 	orr.w	fp, fp, #1
 801a5f2:	e7f2      	b.n	801a5da <_vfprintf_r+0x25e>
 801a5f4:	f856 3b04 	ldr.w	r3, [r6], #4
 801a5f8:	9314      	str	r3, [sp, #80]	; 0x50
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	daed      	bge.n	801a5da <_vfprintf_r+0x25e>
 801a5fe:	425b      	negs	r3, r3
 801a600:	9314      	str	r3, [sp, #80]	; 0x50
 801a602:	f04b 0b04 	orr.w	fp, fp, #4
 801a606:	e7e8      	b.n	801a5da <_vfprintf_r+0x25e>
 801a608:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 801a60c:	e7e5      	b.n	801a5da <_vfprintf_r+0x25e>
 801a60e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a610:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a614:	920a      	str	r2, [sp, #40]	; 0x28
 801a616:	2a2a      	cmp	r2, #42	; 0x2a
 801a618:	d112      	bne.n	801a640 <_vfprintf_r+0x2c4>
 801a61a:	f856 0b04 	ldr.w	r0, [r6], #4
 801a61e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a620:	ea40 72e0 	orr.w	r2, r0, r0, asr #31
 801a624:	9207      	str	r2, [sp, #28]
 801a626:	e7d8      	b.n	801a5da <_vfprintf_r+0x25e>
 801a628:	9807      	ldr	r0, [sp, #28]
 801a62a:	fb07 2200 	mla	r2, r7, r0, r2
 801a62e:	9207      	str	r2, [sp, #28]
 801a630:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a634:	920a      	str	r2, [sp, #40]	; 0x28
 801a636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a638:	3a30      	subs	r2, #48	; 0x30
 801a63a:	2a09      	cmp	r2, #9
 801a63c:	d9f4      	bls.n	801a628 <_vfprintf_r+0x2ac>
 801a63e:	e748      	b.n	801a4d2 <_vfprintf_r+0x156>
 801a640:	2200      	movs	r2, #0
 801a642:	9207      	str	r2, [sp, #28]
 801a644:	e7f7      	b.n	801a636 <_vfprintf_r+0x2ba>
 801a646:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 801a64a:	e7c6      	b.n	801a5da <_vfprintf_r+0x25e>
 801a64c:	2200      	movs	r2, #0
 801a64e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a650:	9214      	str	r2, [sp, #80]	; 0x50
 801a652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a654:	9814      	ldr	r0, [sp, #80]	; 0x50
 801a656:	3a30      	subs	r2, #48	; 0x30
 801a658:	fb07 2200 	mla	r2, r7, r0, r2
 801a65c:	9214      	str	r2, [sp, #80]	; 0x50
 801a65e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a662:	920a      	str	r2, [sp, #40]	; 0x28
 801a664:	3a30      	subs	r2, #48	; 0x30
 801a666:	2a09      	cmp	r2, #9
 801a668:	d9f3      	bls.n	801a652 <_vfprintf_r+0x2d6>
 801a66a:	e732      	b.n	801a4d2 <_vfprintf_r+0x156>
 801a66c:	f04b 0b08 	orr.w	fp, fp, #8
 801a670:	e7b3      	b.n	801a5da <_vfprintf_r+0x25e>
 801a672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a674:	781b      	ldrb	r3, [r3, #0]
 801a676:	2b68      	cmp	r3, #104	; 0x68
 801a678:	bf01      	itttt	eq
 801a67a:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
 801a67c:	3301      	addeq	r3, #1
 801a67e:	930f      	streq	r3, [sp, #60]	; 0x3c
 801a680:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 801a684:	bf18      	it	ne
 801a686:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 801a68a:	e7a6      	b.n	801a5da <_vfprintf_r+0x25e>
 801a68c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a68e:	781b      	ldrb	r3, [r3, #0]
 801a690:	2b6c      	cmp	r3, #108	; 0x6c
 801a692:	d105      	bne.n	801a6a0 <_vfprintf_r+0x324>
 801a694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a696:	3301      	adds	r3, #1
 801a698:	930f      	str	r3, [sp, #60]	; 0x3c
 801a69a:	f04b 0b20 	orr.w	fp, fp, #32
 801a69e:	e79c      	b.n	801a5da <_vfprintf_r+0x25e>
 801a6a0:	f04b 0b10 	orr.w	fp, fp, #16
 801a6a4:	e799      	b.n	801a5da <_vfprintf_r+0x25e>
 801a6a6:	4632      	mov	r2, r6
 801a6a8:	2000      	movs	r0, #0
 801a6aa:	f852 3b04 	ldr.w	r3, [r2], #4
 801a6ae:	920b      	str	r2, [sp, #44]	; 0x2c
 801a6b0:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801a6b4:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 801a6b8:	2301      	movs	r3, #1
 801a6ba:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 801a6be:	9008      	str	r0, [sp, #32]
 801a6c0:	9307      	str	r3, [sp, #28]
 801a6c2:	4606      	mov	r6, r0
 801a6c4:	4605      	mov	r5, r0
 801a6c6:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 801a6ca:	e1ba      	b.n	801aa42 <_vfprintf_r+0x6c6>
 801a6cc:	f04b 0b10 	orr.w	fp, fp, #16
 801a6d0:	f01b 0f20 	tst.w	fp, #32
 801a6d4:	d012      	beq.n	801a6fc <_vfprintf_r+0x380>
 801a6d6:	3607      	adds	r6, #7
 801a6d8:	f026 0307 	bic.w	r3, r6, #7
 801a6dc:	461a      	mov	r2, r3
 801a6de:	685d      	ldr	r5, [r3, #4]
 801a6e0:	f852 6b08 	ldr.w	r6, [r2], #8
 801a6e4:	920b      	str	r2, [sp, #44]	; 0x2c
 801a6e6:	2d00      	cmp	r5, #0
 801a6e8:	da06      	bge.n	801a6f8 <_vfprintf_r+0x37c>
 801a6ea:	4276      	negs	r6, r6
 801a6ec:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801a6f0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801a6f4:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a6f8:	2301      	movs	r3, #1
 801a6fa:	e390      	b.n	801ae1e <_vfprintf_r+0xaa2>
 801a6fc:	4633      	mov	r3, r6
 801a6fe:	f01b 0f10 	tst.w	fp, #16
 801a702:	f853 5b04 	ldr.w	r5, [r3], #4
 801a706:	930b      	str	r3, [sp, #44]	; 0x2c
 801a708:	d002      	beq.n	801a710 <_vfprintf_r+0x394>
 801a70a:	462e      	mov	r6, r5
 801a70c:	17ed      	asrs	r5, r5, #31
 801a70e:	e7ea      	b.n	801a6e6 <_vfprintf_r+0x36a>
 801a710:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801a714:	d003      	beq.n	801a71e <_vfprintf_r+0x3a2>
 801a716:	b22e      	sxth	r6, r5
 801a718:	f345 35c0 	sbfx	r5, r5, #15, #1
 801a71c:	e7e3      	b.n	801a6e6 <_vfprintf_r+0x36a>
 801a71e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801a722:	d0f2      	beq.n	801a70a <_vfprintf_r+0x38e>
 801a724:	b26e      	sxtb	r6, r5
 801a726:	f345 15c0 	sbfx	r5, r5, #7, #1
 801a72a:	e7dc      	b.n	801a6e6 <_vfprintf_r+0x36a>
 801a72c:	3607      	adds	r6, #7
 801a72e:	f026 0307 	bic.w	r3, r6, #7
 801a732:	4619      	mov	r1, r3
 801a734:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801a738:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801a73c:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 801a740:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801a744:	910b      	str	r1, [sp, #44]	; 0x2c
 801a746:	4b40      	ldr	r3, [pc, #256]	; (801a848 <_vfprintf_r+0x4cc>)
 801a748:	f04f 32ff 	mov.w	r2, #4294967295
 801a74c:	4630      	mov	r0, r6
 801a74e:	4629      	mov	r1, r5
 801a750:	f7ee fbc4 	bl	8008edc <__aeabi_dcmpun>
 801a754:	bb10      	cbnz	r0, 801a79c <_vfprintf_r+0x420>
 801a756:	4b3c      	ldr	r3, [pc, #240]	; (801a848 <_vfprintf_r+0x4cc>)
 801a758:	f04f 32ff 	mov.w	r2, #4294967295
 801a75c:	4630      	mov	r0, r6
 801a75e:	4629      	mov	r1, r5
 801a760:	f7ee fb9e 	bl	8008ea0 <__aeabi_dcmple>
 801a764:	b9d0      	cbnz	r0, 801a79c <_vfprintf_r+0x420>
 801a766:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a76a:	2200      	movs	r2, #0
 801a76c:	2300      	movs	r3, #0
 801a76e:	f7ee fb8d 	bl	8008e8c <__aeabi_dcmplt>
 801a772:	b110      	cbz	r0, 801a77a <_vfprintf_r+0x3fe>
 801a774:	232d      	movs	r3, #45	; 0x2d
 801a776:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a77a:	4a34      	ldr	r2, [pc, #208]	; (801a84c <_vfprintf_r+0x4d0>)
 801a77c:	4834      	ldr	r0, [pc, #208]	; (801a850 <_vfprintf_r+0x4d4>)
 801a77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a780:	2100      	movs	r1, #0
 801a782:	2b47      	cmp	r3, #71	; 0x47
 801a784:	bfd4      	ite	le
 801a786:	4691      	movle	r9, r2
 801a788:	4681      	movgt	r9, r0
 801a78a:	2303      	movs	r3, #3
 801a78c:	e9cd 3107 	strd	r3, r1, [sp, #28]
 801a790:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 801a794:	2600      	movs	r6, #0
 801a796:	4633      	mov	r3, r6
 801a798:	f001 b804 	b.w	801b7a4 <_vfprintf_r+0x1428>
 801a79c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a7a0:	4610      	mov	r0, r2
 801a7a2:	4619      	mov	r1, r3
 801a7a4:	f7ee fb9a 	bl	8008edc <__aeabi_dcmpun>
 801a7a8:	b140      	cbz	r0, 801a7bc <_vfprintf_r+0x440>
 801a7aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a7ac:	4a29      	ldr	r2, [pc, #164]	; (801a854 <_vfprintf_r+0x4d8>)
 801a7ae:	482a      	ldr	r0, [pc, #168]	; (801a858 <_vfprintf_r+0x4dc>)
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	bfbc      	itt	lt
 801a7b4:	232d      	movlt	r3, #45	; 0x2d
 801a7b6:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 801a7ba:	e7e0      	b.n	801a77e <_vfprintf_r+0x402>
 801a7bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a7be:	f023 0320 	bic.w	r3, r3, #32
 801a7c2:	2b41      	cmp	r3, #65	; 0x41
 801a7c4:	930c      	str	r3, [sp, #48]	; 0x30
 801a7c6:	d12e      	bne.n	801a826 <_vfprintf_r+0x4aa>
 801a7c8:	2330      	movs	r3, #48	; 0x30
 801a7ca:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801a7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a7d0:	2b61      	cmp	r3, #97	; 0x61
 801a7d2:	bf0c      	ite	eq
 801a7d4:	2378      	moveq	r3, #120	; 0x78
 801a7d6:	2358      	movne	r3, #88	; 0x58
 801a7d8:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801a7dc:	9b07      	ldr	r3, [sp, #28]
 801a7de:	2b63      	cmp	r3, #99	; 0x63
 801a7e0:	f04b 0b02 	orr.w	fp, fp, #2
 801a7e4:	dd3a      	ble.n	801a85c <_vfprintf_r+0x4e0>
 801a7e6:	1c59      	adds	r1, r3, #1
 801a7e8:	4640      	mov	r0, r8
 801a7ea:	f7fd febd 	bl	8018568 <_malloc_r>
 801a7ee:	4681      	mov	r9, r0
 801a7f0:	2800      	cmp	r0, #0
 801a7f2:	f040 81fd 	bne.w	801abf0 <_vfprintf_r+0x874>
 801a7f6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a7fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a7fe:	f8aa 300c 	strh.w	r3, [sl, #12]
 801a802:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801a806:	07d9      	lsls	r1, r3, #31
 801a808:	d407      	bmi.n	801a81a <_vfprintf_r+0x49e>
 801a80a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a80e:	059a      	lsls	r2, r3, #22
 801a810:	d403      	bmi.n	801a81a <_vfprintf_r+0x49e>
 801a812:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801a816:	f7fd fea6 	bl	8018566 <__retarget_lock_release_recursive>
 801a81a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801a81e:	065b      	lsls	r3, r3, #25
 801a820:	f57f adf2 	bpl.w	801a408 <_vfprintf_r+0x8c>
 801a824:	e5ed      	b.n	801a402 <_vfprintf_r+0x86>
 801a826:	9b07      	ldr	r3, [sp, #28]
 801a828:	3301      	adds	r3, #1
 801a82a:	f000 81e3 	beq.w	801abf4 <_vfprintf_r+0x878>
 801a82e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a830:	2b47      	cmp	r3, #71	; 0x47
 801a832:	f040 81e2 	bne.w	801abfa <_vfprintf_r+0x87e>
 801a836:	9b07      	ldr	r3, [sp, #28]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	f040 81de 	bne.w	801abfa <_vfprintf_r+0x87e>
 801a83e:	9308      	str	r3, [sp, #32]
 801a840:	2301      	movs	r3, #1
 801a842:	9307      	str	r3, [sp, #28]
 801a844:	e00d      	b.n	801a862 <_vfprintf_r+0x4e6>
 801a846:	bf00      	nop
 801a848:	7fefffff 	.word	0x7fefffff
 801a84c:	080205fc 	.word	0x080205fc
 801a850:	08020600 	.word	0x08020600
 801a854:	08020604 	.word	0x08020604
 801a858:	08020608 	.word	0x08020608
 801a85c:	9008      	str	r0, [sp, #32]
 801a85e:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 801a862:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 801a866:	9315      	str	r3, [sp, #84]	; 0x54
 801a868:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 801a86c:	1e1d      	subs	r5, r3, #0
 801a86e:	bfb6      	itet	lt
 801a870:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 801a874:	2300      	movge	r3, #0
 801a876:	232d      	movlt	r3, #45	; 0x2d
 801a878:	931c      	str	r3, [sp, #112]	; 0x70
 801a87a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a87c:	2b41      	cmp	r3, #65	; 0x41
 801a87e:	f040 81d4 	bne.w	801ac2a <_vfprintf_r+0x8ae>
 801a882:	aa20      	add	r2, sp, #128	; 0x80
 801a884:	4638      	mov	r0, r7
 801a886:	4629      	mov	r1, r5
 801a888:	f002 fc82 	bl	801d190 <frexp>
 801a88c:	2200      	movs	r2, #0
 801a88e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a892:	f7ee f889 	bl	80089a8 <__aeabi_dmul>
 801a896:	2200      	movs	r2, #0
 801a898:	2300      	movs	r3, #0
 801a89a:	4606      	mov	r6, r0
 801a89c:	460f      	mov	r7, r1
 801a89e:	f7ee faeb 	bl	8008e78 <__aeabi_dcmpeq>
 801a8a2:	b108      	cbz	r0, 801a8a8 <_vfprintf_r+0x52c>
 801a8a4:	2301      	movs	r3, #1
 801a8a6:	9320      	str	r3, [sp, #128]	; 0x80
 801a8a8:	4ba6      	ldr	r3, [pc, #664]	; (801ab44 <_vfprintf_r+0x7c8>)
 801a8aa:	4aa7      	ldr	r2, [pc, #668]	; (801ab48 <_vfprintf_r+0x7cc>)
 801a8ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a8ae:	2961      	cmp	r1, #97	; 0x61
 801a8b0:	bf18      	it	ne
 801a8b2:	461a      	movne	r2, r3
 801a8b4:	9b07      	ldr	r3, [sp, #28]
 801a8b6:	921b      	str	r2, [sp, #108]	; 0x6c
 801a8b8:	3b01      	subs	r3, #1
 801a8ba:	9309      	str	r3, [sp, #36]	; 0x24
 801a8bc:	464d      	mov	r5, r9
 801a8be:	4ba3      	ldr	r3, [pc, #652]	; (801ab4c <_vfprintf_r+0x7d0>)
 801a8c0:	2200      	movs	r2, #0
 801a8c2:	4630      	mov	r0, r6
 801a8c4:	4639      	mov	r1, r7
 801a8c6:	f7ee f86f 	bl	80089a8 <__aeabi_dmul>
 801a8ca:	460f      	mov	r7, r1
 801a8cc:	4606      	mov	r6, r0
 801a8ce:	f7ee fb1b 	bl	8008f08 <__aeabi_d2iz>
 801a8d2:	901d      	str	r0, [sp, #116]	; 0x74
 801a8d4:	f7ed fffe 	bl	80088d4 <__aeabi_i2d>
 801a8d8:	4602      	mov	r2, r0
 801a8da:	460b      	mov	r3, r1
 801a8dc:	4630      	mov	r0, r6
 801a8de:	4639      	mov	r1, r7
 801a8e0:	f7ed feaa 	bl	8008638 <__aeabi_dsub>
 801a8e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a8e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a8e8:	5c9b      	ldrb	r3, [r3, r2]
 801a8ea:	f805 3b01 	strb.w	r3, [r5], #1
 801a8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8f0:	930d      	str	r3, [sp, #52]	; 0x34
 801a8f2:	1c5a      	adds	r2, r3, #1
 801a8f4:	4606      	mov	r6, r0
 801a8f6:	460f      	mov	r7, r1
 801a8f8:	d007      	beq.n	801a90a <_vfprintf_r+0x58e>
 801a8fa:	3b01      	subs	r3, #1
 801a8fc:	9309      	str	r3, [sp, #36]	; 0x24
 801a8fe:	2200      	movs	r2, #0
 801a900:	2300      	movs	r3, #0
 801a902:	f7ee fab9 	bl	8008e78 <__aeabi_dcmpeq>
 801a906:	2800      	cmp	r0, #0
 801a908:	d0d9      	beq.n	801a8be <_vfprintf_r+0x542>
 801a90a:	4b91      	ldr	r3, [pc, #580]	; (801ab50 <_vfprintf_r+0x7d4>)
 801a90c:	2200      	movs	r2, #0
 801a90e:	4630      	mov	r0, r6
 801a910:	4639      	mov	r1, r7
 801a912:	f7ee fad9 	bl	8008ec8 <__aeabi_dcmpgt>
 801a916:	b960      	cbnz	r0, 801a932 <_vfprintf_r+0x5b6>
 801a918:	4b8d      	ldr	r3, [pc, #564]	; (801ab50 <_vfprintf_r+0x7d4>)
 801a91a:	2200      	movs	r2, #0
 801a91c:	4630      	mov	r0, r6
 801a91e:	4639      	mov	r1, r7
 801a920:	f7ee faaa 	bl	8008e78 <__aeabi_dcmpeq>
 801a924:	2800      	cmp	r0, #0
 801a926:	f000 817b 	beq.w	801ac20 <_vfprintf_r+0x8a4>
 801a92a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a92c:	07da      	lsls	r2, r3, #31
 801a92e:	f140 8177 	bpl.w	801ac20 <_vfprintf_r+0x8a4>
 801a932:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a934:	9524      	str	r5, [sp, #144]	; 0x90
 801a936:	7bd9      	ldrb	r1, [r3, #15]
 801a938:	2030      	movs	r0, #48	; 0x30
 801a93a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801a93c:	1e53      	subs	r3, r2, #1
 801a93e:	9324      	str	r3, [sp, #144]	; 0x90
 801a940:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801a944:	428b      	cmp	r3, r1
 801a946:	f000 815a 	beq.w	801abfe <_vfprintf_r+0x882>
 801a94a:	2b39      	cmp	r3, #57	; 0x39
 801a94c:	bf0b      	itete	eq
 801a94e:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 801a950:	3301      	addne	r3, #1
 801a952:	7a9b      	ldrbeq	r3, [r3, #10]
 801a954:	b2db      	uxtbne	r3, r3
 801a956:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a95a:	eba5 0309 	sub.w	r3, r5, r9
 801a95e:	9309      	str	r3, [sp, #36]	; 0x24
 801a960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a962:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a964:	2b47      	cmp	r3, #71	; 0x47
 801a966:	f040 81ad 	bne.w	801acc4 <_vfprintf_r+0x948>
 801a96a:	1ceb      	adds	r3, r5, #3
 801a96c:	db03      	blt.n	801a976 <_vfprintf_r+0x5fa>
 801a96e:	9b07      	ldr	r3, [sp, #28]
 801a970:	42ab      	cmp	r3, r5
 801a972:	f280 81d2 	bge.w	801ad1a <_vfprintf_r+0x99e>
 801a976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a978:	3b02      	subs	r3, #2
 801a97a:	930a      	str	r3, [sp, #40]	; 0x28
 801a97c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a97e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 801a982:	f021 0120 	bic.w	r1, r1, #32
 801a986:	2941      	cmp	r1, #65	; 0x41
 801a988:	bf08      	it	eq
 801a98a:	320f      	addeq	r2, #15
 801a98c:	f105 33ff 	add.w	r3, r5, #4294967295
 801a990:	bf06      	itte	eq
 801a992:	b2d2      	uxtbeq	r2, r2
 801a994:	2101      	moveq	r1, #1
 801a996:	2100      	movne	r1, #0
 801a998:	2b00      	cmp	r3, #0
 801a99a:	9320      	str	r3, [sp, #128]	; 0x80
 801a99c:	bfb8      	it	lt
 801a99e:	f1c5 0301 	rsblt	r3, r5, #1
 801a9a2:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 801a9a6:	bfb4      	ite	lt
 801a9a8:	222d      	movlt	r2, #45	; 0x2d
 801a9aa:	222b      	movge	r2, #43	; 0x2b
 801a9ac:	2b09      	cmp	r3, #9
 801a9ae:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 801a9b2:	f340 81a0 	ble.w	801acf6 <_vfprintf_r+0x97a>
 801a9b6:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 801a9ba:	260a      	movs	r6, #10
 801a9bc:	4611      	mov	r1, r2
 801a9be:	fb93 f5f6 	sdiv	r5, r3, r6
 801a9c2:	fb06 3015 	mls	r0, r6, r5, r3
 801a9c6:	3030      	adds	r0, #48	; 0x30
 801a9c8:	f801 0c01 	strb.w	r0, [r1, #-1]
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	2863      	cmp	r0, #99	; 0x63
 801a9d0:	f102 32ff 	add.w	r2, r2, #4294967295
 801a9d4:	462b      	mov	r3, r5
 801a9d6:	dcf1      	bgt.n	801a9bc <_vfprintf_r+0x640>
 801a9d8:	3330      	adds	r3, #48	; 0x30
 801a9da:	1e88      	subs	r0, r1, #2
 801a9dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a9e0:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 801a9e4:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801a9e8:	4603      	mov	r3, r0
 801a9ea:	42ab      	cmp	r3, r5
 801a9ec:	f0c0 817e 	bcc.w	801acec <_vfprintf_r+0x970>
 801a9f0:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 801a9f4:	1a52      	subs	r2, r2, r1
 801a9f6:	42a8      	cmp	r0, r5
 801a9f8:	bf88      	it	hi
 801a9fa:	2200      	movhi	r2, #0
 801a9fc:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 801aa00:	441a      	add	r2, r3
 801aa02:	ab22      	add	r3, sp, #136	; 0x88
 801aa04:	1ad3      	subs	r3, r2, r3
 801aa06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa08:	9319      	str	r3, [sp, #100]	; 0x64
 801aa0a:	2a01      	cmp	r2, #1
 801aa0c:	4413      	add	r3, r2
 801aa0e:	9307      	str	r3, [sp, #28]
 801aa10:	dc02      	bgt.n	801aa18 <_vfprintf_r+0x69c>
 801aa12:	f01b 0f01 	tst.w	fp, #1
 801aa16:	d003      	beq.n	801aa20 <_vfprintf_r+0x6a4>
 801aa18:	9b07      	ldr	r3, [sp, #28]
 801aa1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aa1c:	4413      	add	r3, r2
 801aa1e:	9307      	str	r3, [sp, #28]
 801aa20:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 801aa24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801aa28:	9315      	str	r3, [sp, #84]	; 0x54
 801aa2a:	2300      	movs	r3, #0
 801aa2c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 801aa30:	461d      	mov	r5, r3
 801aa32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801aa34:	b113      	cbz	r3, 801aa3c <_vfprintf_r+0x6c0>
 801aa36:	232d      	movs	r3, #45	; 0x2d
 801aa38:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801aa3c:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 801aa40:	2600      	movs	r6, #0
 801aa42:	9b07      	ldr	r3, [sp, #28]
 801aa44:	42b3      	cmp	r3, r6
 801aa46:	bfb8      	it	lt
 801aa48:	4633      	movlt	r3, r6
 801aa4a:	9315      	str	r3, [sp, #84]	; 0x54
 801aa4c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801aa50:	b113      	cbz	r3, 801aa58 <_vfprintf_r+0x6dc>
 801aa52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aa54:	3301      	adds	r3, #1
 801aa56:	9315      	str	r3, [sp, #84]	; 0x54
 801aa58:	f01b 0302 	ands.w	r3, fp, #2
 801aa5c:	931b      	str	r3, [sp, #108]	; 0x6c
 801aa5e:	bf1e      	ittt	ne
 801aa60:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 801aa62:	3302      	addne	r3, #2
 801aa64:	9315      	strne	r3, [sp, #84]	; 0x54
 801aa66:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 801aa6a:	931c      	str	r3, [sp, #112]	; 0x70
 801aa6c:	d11f      	bne.n	801aaae <_vfprintf_r+0x732>
 801aa6e:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 801aa72:	1a9f      	subs	r7, r3, r2
 801aa74:	2f00      	cmp	r7, #0
 801aa76:	dd1a      	ble.n	801aaae <_vfprintf_r+0x732>
 801aa78:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801aa7c:	4835      	ldr	r0, [pc, #212]	; (801ab54 <_vfprintf_r+0x7d8>)
 801aa7e:	6020      	str	r0, [r4, #0]
 801aa80:	2f10      	cmp	r7, #16
 801aa82:	f103 0301 	add.w	r3, r3, #1
 801aa86:	f104 0108 	add.w	r1, r4, #8
 801aa8a:	f300 82ea 	bgt.w	801b062 <_vfprintf_r+0xce6>
 801aa8e:	443a      	add	r2, r7
 801aa90:	2b07      	cmp	r3, #7
 801aa92:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801aa96:	6067      	str	r7, [r4, #4]
 801aa98:	f340 82f6 	ble.w	801b088 <_vfprintf_r+0xd0c>
 801aa9c:	aa26      	add	r2, sp, #152	; 0x98
 801aa9e:	4651      	mov	r1, sl
 801aaa0:	4640      	mov	r0, r8
 801aaa2:	f002 fc7a 	bl	801d39a <__sprint_r>
 801aaa6:	2800      	cmp	r0, #0
 801aaa8:	f040 8620 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801aaac:	ac29      	add	r4, sp, #164	; 0xa4
 801aaae:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801aab2:	b173      	cbz	r3, 801aad2 <_vfprintf_r+0x756>
 801aab4:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 801aab8:	6023      	str	r3, [r4, #0]
 801aaba:	2301      	movs	r3, #1
 801aabc:	6063      	str	r3, [r4, #4]
 801aabe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aac0:	3301      	adds	r3, #1
 801aac2:	9328      	str	r3, [sp, #160]	; 0xa0
 801aac4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801aac6:	3301      	adds	r3, #1
 801aac8:	2b07      	cmp	r3, #7
 801aaca:	9327      	str	r3, [sp, #156]	; 0x9c
 801aacc:	f300 82de 	bgt.w	801b08c <_vfprintf_r+0xd10>
 801aad0:	3408      	adds	r4, #8
 801aad2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aad4:	b16b      	cbz	r3, 801aaf2 <_vfprintf_r+0x776>
 801aad6:	ab1f      	add	r3, sp, #124	; 0x7c
 801aad8:	6023      	str	r3, [r4, #0]
 801aada:	2302      	movs	r3, #2
 801aadc:	6063      	str	r3, [r4, #4]
 801aade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aae0:	3302      	adds	r3, #2
 801aae2:	9328      	str	r3, [sp, #160]	; 0xa0
 801aae4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801aae6:	3301      	adds	r3, #1
 801aae8:	2b07      	cmp	r3, #7
 801aaea:	9327      	str	r3, [sp, #156]	; 0x9c
 801aaec:	f300 82d8 	bgt.w	801b0a0 <_vfprintf_r+0xd24>
 801aaf0:	3408      	adds	r4, #8
 801aaf2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801aaf4:	2b80      	cmp	r3, #128	; 0x80
 801aaf6:	d11f      	bne.n	801ab38 <_vfprintf_r+0x7bc>
 801aaf8:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 801aafc:	1a9f      	subs	r7, r3, r2
 801aafe:	2f00      	cmp	r7, #0
 801ab00:	dd1a      	ble.n	801ab38 <_vfprintf_r+0x7bc>
 801ab02:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801ab06:	4814      	ldr	r0, [pc, #80]	; (801ab58 <_vfprintf_r+0x7dc>)
 801ab08:	6020      	str	r0, [r4, #0]
 801ab0a:	2f10      	cmp	r7, #16
 801ab0c:	f103 0301 	add.w	r3, r3, #1
 801ab10:	f104 0108 	add.w	r1, r4, #8
 801ab14:	f300 82ce 	bgt.w	801b0b4 <_vfprintf_r+0xd38>
 801ab18:	6067      	str	r7, [r4, #4]
 801ab1a:	2b07      	cmp	r3, #7
 801ab1c:	4417      	add	r7, r2
 801ab1e:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801ab22:	f340 82da 	ble.w	801b0da <_vfprintf_r+0xd5e>
 801ab26:	aa26      	add	r2, sp, #152	; 0x98
 801ab28:	4651      	mov	r1, sl
 801ab2a:	4640      	mov	r0, r8
 801ab2c:	f002 fc35 	bl	801d39a <__sprint_r>
 801ab30:	2800      	cmp	r0, #0
 801ab32:	f040 85db 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801ab36:	ac29      	add	r4, sp, #164	; 0xa4
 801ab38:	9b07      	ldr	r3, [sp, #28]
 801ab3a:	1af6      	subs	r6, r6, r3
 801ab3c:	2e00      	cmp	r6, #0
 801ab3e:	dd27      	ble.n	801ab90 <_vfprintf_r+0x814>
 801ab40:	4f05      	ldr	r7, [pc, #20]	; (801ab58 <_vfprintf_r+0x7dc>)
 801ab42:	e00b      	b.n	801ab5c <_vfprintf_r+0x7e0>
 801ab44:	0802061d 	.word	0x0802061d
 801ab48:	0802060c 	.word	0x0802060c
 801ab4c:	40300000 	.word	0x40300000
 801ab50:	3fe00000 	.word	0x3fe00000
 801ab54:	08020650 	.word	0x08020650
 801ab58:	08020660 	.word	0x08020660
 801ab5c:	6027      	str	r7, [r4, #0]
 801ab5e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801ab62:	2e10      	cmp	r6, #16
 801ab64:	f103 0301 	add.w	r3, r3, #1
 801ab68:	f104 0108 	add.w	r1, r4, #8
 801ab6c:	f300 82b7 	bgt.w	801b0de <_vfprintf_r+0xd62>
 801ab70:	6066      	str	r6, [r4, #4]
 801ab72:	2b07      	cmp	r3, #7
 801ab74:	4416      	add	r6, r2
 801ab76:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 801ab7a:	f340 82c3 	ble.w	801b104 <_vfprintf_r+0xd88>
 801ab7e:	aa26      	add	r2, sp, #152	; 0x98
 801ab80:	4651      	mov	r1, sl
 801ab82:	4640      	mov	r0, r8
 801ab84:	f002 fc09 	bl	801d39a <__sprint_r>
 801ab88:	2800      	cmp	r0, #0
 801ab8a:	f040 85af 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801ab8e:	ac29      	add	r4, sp, #164	; 0xa4
 801ab90:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801ab94:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801ab96:	f040 82bb 	bne.w	801b110 <_vfprintf_r+0xd94>
 801ab9a:	9b07      	ldr	r3, [sp, #28]
 801ab9c:	f8c4 9000 	str.w	r9, [r4]
 801aba0:	441e      	add	r6, r3
 801aba2:	6063      	str	r3, [r4, #4]
 801aba4:	9628      	str	r6, [sp, #160]	; 0xa0
 801aba6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801aba8:	3301      	adds	r3, #1
 801abaa:	2b07      	cmp	r3, #7
 801abac:	9327      	str	r3, [sp, #156]	; 0x9c
 801abae:	f300 82f4 	bgt.w	801b19a <_vfprintf_r+0xe1e>
 801abb2:	3408      	adds	r4, #8
 801abb4:	f01b 0f04 	tst.w	fp, #4
 801abb8:	f040 857a 	bne.w	801b6b0 <_vfprintf_r+0x1334>
 801abbc:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801abc0:	9915      	ldr	r1, [sp, #84]	; 0x54
 801abc2:	428a      	cmp	r2, r1
 801abc4:	bfac      	ite	ge
 801abc6:	189b      	addge	r3, r3, r2
 801abc8:	185b      	addlt	r3, r3, r1
 801abca:	9313      	str	r3, [sp, #76]	; 0x4c
 801abcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801abce:	b13b      	cbz	r3, 801abe0 <_vfprintf_r+0x864>
 801abd0:	aa26      	add	r2, sp, #152	; 0x98
 801abd2:	4651      	mov	r1, sl
 801abd4:	4640      	mov	r0, r8
 801abd6:	f002 fbe0 	bl	801d39a <__sprint_r>
 801abda:	2800      	cmp	r0, #0
 801abdc:	f040 8586 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801abe0:	2300      	movs	r3, #0
 801abe2:	9327      	str	r3, [sp, #156]	; 0x9c
 801abe4:	9b08      	ldr	r3, [sp, #32]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	f040 859c 	bne.w	801b724 <_vfprintf_r+0x13a8>
 801abec:	ac29      	add	r4, sp, #164	; 0xa4
 801abee:	e0e9      	b.n	801adc4 <_vfprintf_r+0xa48>
 801abf0:	9008      	str	r0, [sp, #32]
 801abf2:	e636      	b.n	801a862 <_vfprintf_r+0x4e6>
 801abf4:	9008      	str	r0, [sp, #32]
 801abf6:	2306      	movs	r3, #6
 801abf8:	e623      	b.n	801a842 <_vfprintf_r+0x4c6>
 801abfa:	9008      	str	r0, [sp, #32]
 801abfc:	e631      	b.n	801a862 <_vfprintf_r+0x4e6>
 801abfe:	f802 0c01 	strb.w	r0, [r2, #-1]
 801ac02:	e69a      	b.n	801a93a <_vfprintf_r+0x5be>
 801ac04:	f803 0b01 	strb.w	r0, [r3], #1
 801ac08:	1aca      	subs	r2, r1, r3
 801ac0a:	2a00      	cmp	r2, #0
 801ac0c:	dafa      	bge.n	801ac04 <_vfprintf_r+0x888>
 801ac0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac12:	3201      	adds	r2, #1
 801ac14:	f103 0301 	add.w	r3, r3, #1
 801ac18:	bfb8      	it	lt
 801ac1a:	2300      	movlt	r3, #0
 801ac1c:	441d      	add	r5, r3
 801ac1e:	e69c      	b.n	801a95a <_vfprintf_r+0x5de>
 801ac20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac22:	462b      	mov	r3, r5
 801ac24:	18a9      	adds	r1, r5, r2
 801ac26:	2030      	movs	r0, #48	; 0x30
 801ac28:	e7ee      	b.n	801ac08 <_vfprintf_r+0x88c>
 801ac2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ac2c:	2b46      	cmp	r3, #70	; 0x46
 801ac2e:	d005      	beq.n	801ac3c <_vfprintf_r+0x8c0>
 801ac30:	2b45      	cmp	r3, #69	; 0x45
 801ac32:	d11b      	bne.n	801ac6c <_vfprintf_r+0x8f0>
 801ac34:	9b07      	ldr	r3, [sp, #28]
 801ac36:	1c5e      	adds	r6, r3, #1
 801ac38:	2302      	movs	r3, #2
 801ac3a:	e001      	b.n	801ac40 <_vfprintf_r+0x8c4>
 801ac3c:	9e07      	ldr	r6, [sp, #28]
 801ac3e:	2303      	movs	r3, #3
 801ac40:	aa24      	add	r2, sp, #144	; 0x90
 801ac42:	9204      	str	r2, [sp, #16]
 801ac44:	aa21      	add	r2, sp, #132	; 0x84
 801ac46:	9203      	str	r2, [sp, #12]
 801ac48:	aa20      	add	r2, sp, #128	; 0x80
 801ac4a:	e9cd 6201 	strd	r6, r2, [sp, #4]
 801ac4e:	9300      	str	r3, [sp, #0]
 801ac50:	463a      	mov	r2, r7
 801ac52:	462b      	mov	r3, r5
 801ac54:	4640      	mov	r0, r8
 801ac56:	f000 fedf 	bl	801ba18 <_dtoa_r>
 801ac5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ac5c:	2b47      	cmp	r3, #71	; 0x47
 801ac5e:	4681      	mov	r9, r0
 801ac60:	d106      	bne.n	801ac70 <_vfprintf_r+0x8f4>
 801ac62:	f01b 0f01 	tst.w	fp, #1
 801ac66:	d103      	bne.n	801ac70 <_vfprintf_r+0x8f4>
 801ac68:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801ac6a:	e676      	b.n	801a95a <_vfprintf_r+0x5de>
 801ac6c:	9e07      	ldr	r6, [sp, #28]
 801ac6e:	e7e3      	b.n	801ac38 <_vfprintf_r+0x8bc>
 801ac70:	eb09 0306 	add.w	r3, r9, r6
 801ac74:	9309      	str	r3, [sp, #36]	; 0x24
 801ac76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ac78:	2b46      	cmp	r3, #70	; 0x46
 801ac7a:	d111      	bne.n	801aca0 <_vfprintf_r+0x924>
 801ac7c:	f899 3000 	ldrb.w	r3, [r9]
 801ac80:	2b30      	cmp	r3, #48	; 0x30
 801ac82:	d109      	bne.n	801ac98 <_vfprintf_r+0x91c>
 801ac84:	2200      	movs	r2, #0
 801ac86:	2300      	movs	r3, #0
 801ac88:	4638      	mov	r0, r7
 801ac8a:	4629      	mov	r1, r5
 801ac8c:	f7ee f8f4 	bl	8008e78 <__aeabi_dcmpeq>
 801ac90:	b910      	cbnz	r0, 801ac98 <_vfprintf_r+0x91c>
 801ac92:	f1c6 0601 	rsb	r6, r6, #1
 801ac96:	9620      	str	r6, [sp, #128]	; 0x80
 801ac98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ac9c:	441a      	add	r2, r3
 801ac9e:	9209      	str	r2, [sp, #36]	; 0x24
 801aca0:	2200      	movs	r2, #0
 801aca2:	2300      	movs	r3, #0
 801aca4:	4638      	mov	r0, r7
 801aca6:	4629      	mov	r1, r5
 801aca8:	f7ee f8e6 	bl	8008e78 <__aeabi_dcmpeq>
 801acac:	b108      	cbz	r0, 801acb2 <_vfprintf_r+0x936>
 801acae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acb0:	9324      	str	r3, [sp, #144]	; 0x90
 801acb2:	2230      	movs	r2, #48	; 0x30
 801acb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801acb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801acb8:	4299      	cmp	r1, r3
 801acba:	d9d5      	bls.n	801ac68 <_vfprintf_r+0x8ec>
 801acbc:	1c59      	adds	r1, r3, #1
 801acbe:	9124      	str	r1, [sp, #144]	; 0x90
 801acc0:	701a      	strb	r2, [r3, #0]
 801acc2:	e7f7      	b.n	801acb4 <_vfprintf_r+0x938>
 801acc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801acc6:	2b46      	cmp	r3, #70	; 0x46
 801acc8:	f47f ae58 	bne.w	801a97c <_vfprintf_r+0x600>
 801accc:	9a07      	ldr	r2, [sp, #28]
 801acce:	f00b 0301 	and.w	r3, fp, #1
 801acd2:	2d00      	cmp	r5, #0
 801acd4:	ea43 0302 	orr.w	r3, r3, r2
 801acd8:	dd1a      	ble.n	801ad10 <_vfprintf_r+0x994>
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d034      	beq.n	801ad48 <_vfprintf_r+0x9cc>
 801acde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ace0:	18eb      	adds	r3, r5, r3
 801ace2:	441a      	add	r2, r3
 801ace4:	9207      	str	r2, [sp, #28]
 801ace6:	2366      	movs	r3, #102	; 0x66
 801ace8:	930a      	str	r3, [sp, #40]	; 0x28
 801acea:	e033      	b.n	801ad54 <_vfprintf_r+0x9d8>
 801acec:	f813 6b01 	ldrb.w	r6, [r3], #1
 801acf0:	f802 6b01 	strb.w	r6, [r2], #1
 801acf4:	e679      	b.n	801a9ea <_vfprintf_r+0x66e>
 801acf6:	b941      	cbnz	r1, 801ad0a <_vfprintf_r+0x98e>
 801acf8:	2230      	movs	r2, #48	; 0x30
 801acfa:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 801acfe:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 801ad02:	3330      	adds	r3, #48	; 0x30
 801ad04:	f802 3b01 	strb.w	r3, [r2], #1
 801ad08:	e67b      	b.n	801aa02 <_vfprintf_r+0x686>
 801ad0a:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801ad0e:	e7f8      	b.n	801ad02 <_vfprintf_r+0x986>
 801ad10:	b1e3      	cbz	r3, 801ad4c <_vfprintf_r+0x9d0>
 801ad12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ad14:	9a07      	ldr	r2, [sp, #28]
 801ad16:	3301      	adds	r3, #1
 801ad18:	e7e3      	b.n	801ace2 <_vfprintf_r+0x966>
 801ad1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad1c:	42ab      	cmp	r3, r5
 801ad1e:	dc07      	bgt.n	801ad30 <_vfprintf_r+0x9b4>
 801ad20:	f01b 0f01 	tst.w	fp, #1
 801ad24:	d02d      	beq.n	801ad82 <_vfprintf_r+0xa06>
 801ad26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ad28:	18eb      	adds	r3, r5, r3
 801ad2a:	9307      	str	r3, [sp, #28]
 801ad2c:	2367      	movs	r3, #103	; 0x67
 801ad2e:	e7db      	b.n	801ace8 <_vfprintf_r+0x96c>
 801ad30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ad34:	2d00      	cmp	r5, #0
 801ad36:	4413      	add	r3, r2
 801ad38:	9307      	str	r3, [sp, #28]
 801ad3a:	dcf7      	bgt.n	801ad2c <_vfprintf_r+0x9b0>
 801ad3c:	9a07      	ldr	r2, [sp, #28]
 801ad3e:	f1c5 0301 	rsb	r3, r5, #1
 801ad42:	441a      	add	r2, r3
 801ad44:	9207      	str	r2, [sp, #28]
 801ad46:	e7f1      	b.n	801ad2c <_vfprintf_r+0x9b0>
 801ad48:	9507      	str	r5, [sp, #28]
 801ad4a:	e7cc      	b.n	801ace6 <_vfprintf_r+0x96a>
 801ad4c:	2366      	movs	r3, #102	; 0x66
 801ad4e:	930a      	str	r3, [sp, #40]	; 0x28
 801ad50:	2301      	movs	r3, #1
 801ad52:	9307      	str	r3, [sp, #28]
 801ad54:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801ad58:	930d      	str	r3, [sp, #52]	; 0x34
 801ad5a:	d025      	beq.n	801ada8 <_vfprintf_r+0xa2c>
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	2d00      	cmp	r5, #0
 801ad60:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 801ad64:	f77f ae65 	ble.w	801aa32 <_vfprintf_r+0x6b6>
 801ad68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad6a:	781b      	ldrb	r3, [r3, #0]
 801ad6c:	2bff      	cmp	r3, #255	; 0xff
 801ad6e:	d10a      	bne.n	801ad86 <_vfprintf_r+0xa0a>
 801ad70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801ad74:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ad76:	4413      	add	r3, r2
 801ad78:	9a07      	ldr	r2, [sp, #28]
 801ad7a:	fb01 2303 	mla	r3, r1, r3, r2
 801ad7e:	9307      	str	r3, [sp, #28]
 801ad80:	e657      	b.n	801aa32 <_vfprintf_r+0x6b6>
 801ad82:	9507      	str	r5, [sp, #28]
 801ad84:	e7d2      	b.n	801ad2c <_vfprintf_r+0x9b0>
 801ad86:	42ab      	cmp	r3, r5
 801ad88:	daf2      	bge.n	801ad70 <_vfprintf_r+0x9f4>
 801ad8a:	1aed      	subs	r5, r5, r3
 801ad8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad8e:	785b      	ldrb	r3, [r3, #1]
 801ad90:	b133      	cbz	r3, 801ada0 <_vfprintf_r+0xa24>
 801ad92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad94:	3301      	adds	r3, #1
 801ad96:	930d      	str	r3, [sp, #52]	; 0x34
 801ad98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad9a:	3301      	adds	r3, #1
 801ad9c:	930e      	str	r3, [sp, #56]	; 0x38
 801ad9e:	e7e3      	b.n	801ad68 <_vfprintf_r+0x9ec>
 801ada0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ada2:	3301      	adds	r3, #1
 801ada4:	930c      	str	r3, [sp, #48]	; 0x30
 801ada6:	e7df      	b.n	801ad68 <_vfprintf_r+0x9ec>
 801ada8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801adaa:	930c      	str	r3, [sp, #48]	; 0x30
 801adac:	e641      	b.n	801aa32 <_vfprintf_r+0x6b6>
 801adae:	1d33      	adds	r3, r6, #4
 801adb0:	f01b 0f20 	tst.w	fp, #32
 801adb4:	930b      	str	r3, [sp, #44]	; 0x2c
 801adb6:	d00a      	beq.n	801adce <_vfprintf_r+0xa52>
 801adb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801adba:	6833      	ldr	r3, [r6, #0]
 801adbc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801adbe:	17d2      	asrs	r2, r2, #31
 801adc0:	e9c3 1200 	strd	r1, r2, [r3]
 801adc4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801adc6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 801adca:	f7ff bb57 	b.w	801a47c <_vfprintf_r+0x100>
 801adce:	f01b 0f10 	tst.w	fp, #16
 801add2:	d003      	beq.n	801addc <_vfprintf_r+0xa60>
 801add4:	6833      	ldr	r3, [r6, #0]
 801add6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801add8:	601a      	str	r2, [r3, #0]
 801adda:	e7f3      	b.n	801adc4 <_vfprintf_r+0xa48>
 801addc:	f01b 0f40 	tst.w	fp, #64	; 0x40
 801ade0:	d003      	beq.n	801adea <_vfprintf_r+0xa6e>
 801ade2:	6833      	ldr	r3, [r6, #0]
 801ade4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ade6:	801a      	strh	r2, [r3, #0]
 801ade8:	e7ec      	b.n	801adc4 <_vfprintf_r+0xa48>
 801adea:	f41b 7f00 	tst.w	fp, #512	; 0x200
 801adee:	d0f1      	beq.n	801add4 <_vfprintf_r+0xa58>
 801adf0:	6833      	ldr	r3, [r6, #0]
 801adf2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801adf4:	701a      	strb	r2, [r3, #0]
 801adf6:	e7e5      	b.n	801adc4 <_vfprintf_r+0xa48>
 801adf8:	f04b 0b10 	orr.w	fp, fp, #16
 801adfc:	f01b 0320 	ands.w	r3, fp, #32
 801ae00:	d01f      	beq.n	801ae42 <_vfprintf_r+0xac6>
 801ae02:	3607      	adds	r6, #7
 801ae04:	f026 0307 	bic.w	r3, r6, #7
 801ae08:	461a      	mov	r2, r3
 801ae0a:	685d      	ldr	r5, [r3, #4]
 801ae0c:	f852 6b08 	ldr.w	r6, [r2], #8
 801ae10:	920b      	str	r2, [sp, #44]	; 0x2c
 801ae12:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801ae16:	2300      	movs	r3, #0
 801ae18:	2200      	movs	r2, #0
 801ae1a:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801ae1e:	9a07      	ldr	r2, [sp, #28]
 801ae20:	3201      	adds	r2, #1
 801ae22:	f000 8494 	beq.w	801b74e <_vfprintf_r+0x13d2>
 801ae26:	ea56 0205 	orrs.w	r2, r6, r5
 801ae2a:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 801ae2e:	f040 8493 	bne.w	801b758 <_vfprintf_r+0x13dc>
 801ae32:	9a07      	ldr	r2, [sp, #28]
 801ae34:	2a00      	cmp	r2, #0
 801ae36:	f000 80fa 	beq.w	801b02e <_vfprintf_r+0xcb2>
 801ae3a:	2b01      	cmp	r3, #1
 801ae3c:	f040 848f 	bne.w	801b75e <_vfprintf_r+0x13e2>
 801ae40:	e09f      	b.n	801af82 <_vfprintf_r+0xc06>
 801ae42:	4632      	mov	r2, r6
 801ae44:	f01b 0510 	ands.w	r5, fp, #16
 801ae48:	f852 6b04 	ldr.w	r6, [r2], #4
 801ae4c:	920b      	str	r2, [sp, #44]	; 0x2c
 801ae4e:	d001      	beq.n	801ae54 <_vfprintf_r+0xad8>
 801ae50:	461d      	mov	r5, r3
 801ae52:	e7de      	b.n	801ae12 <_vfprintf_r+0xa96>
 801ae54:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801ae58:	d001      	beq.n	801ae5e <_vfprintf_r+0xae2>
 801ae5a:	b2b6      	uxth	r6, r6
 801ae5c:	e7d9      	b.n	801ae12 <_vfprintf_r+0xa96>
 801ae5e:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801ae62:	d0d6      	beq.n	801ae12 <_vfprintf_r+0xa96>
 801ae64:	b2f6      	uxtb	r6, r6
 801ae66:	e7f3      	b.n	801ae50 <_vfprintf_r+0xad4>
 801ae68:	4633      	mov	r3, r6
 801ae6a:	2278      	movs	r2, #120	; 0x78
 801ae6c:	f853 6b04 	ldr.w	r6, [r3], #4
 801ae70:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae72:	2330      	movs	r3, #48	; 0x30
 801ae74:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801ae78:	4ba3      	ldr	r3, [pc, #652]	; (801b108 <_vfprintf_r+0xd8c>)
 801ae7a:	931a      	str	r3, [sp, #104]	; 0x68
 801ae7c:	2500      	movs	r5, #0
 801ae7e:	f04b 0b02 	orr.w	fp, fp, #2
 801ae82:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 801ae86:	2302      	movs	r3, #2
 801ae88:	920a      	str	r2, [sp, #40]	; 0x28
 801ae8a:	e7c5      	b.n	801ae18 <_vfprintf_r+0xa9c>
 801ae8c:	4633      	mov	r3, r6
 801ae8e:	2500      	movs	r5, #0
 801ae90:	f853 9b04 	ldr.w	r9, [r3], #4
 801ae94:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae96:	9b07      	ldr	r3, [sp, #28]
 801ae98:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 801ae9c:	1c5e      	adds	r6, r3, #1
 801ae9e:	d010      	beq.n	801aec2 <_vfprintf_r+0xb46>
 801aea0:	461a      	mov	r2, r3
 801aea2:	4629      	mov	r1, r5
 801aea4:	4648      	mov	r0, r9
 801aea6:	f7ed fb6b 	bl	8008580 <memchr>
 801aeaa:	9008      	str	r0, [sp, #32]
 801aeac:	2800      	cmp	r0, #0
 801aeae:	f000 80d5 	beq.w	801b05c <_vfprintf_r+0xce0>
 801aeb2:	eba0 0309 	sub.w	r3, r0, r9
 801aeb6:	e9cd 3507 	strd	r3, r5, [sp, #28]
 801aeba:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 801aebe:	462e      	mov	r6, r5
 801aec0:	e5bf      	b.n	801aa42 <_vfprintf_r+0x6c6>
 801aec2:	4648      	mov	r0, r9
 801aec4:	f7ed fbac 	bl	8008620 <strlen>
 801aec8:	e9cd 0507 	strd	r0, r5, [sp, #28]
 801aecc:	e462      	b.n	801a794 <_vfprintf_r+0x418>
 801aece:	f04b 0b10 	orr.w	fp, fp, #16
 801aed2:	f01b 0320 	ands.w	r3, fp, #32
 801aed6:	d009      	beq.n	801aeec <_vfprintf_r+0xb70>
 801aed8:	3607      	adds	r6, #7
 801aeda:	f026 0307 	bic.w	r3, r6, #7
 801aede:	461a      	mov	r2, r3
 801aee0:	685d      	ldr	r5, [r3, #4]
 801aee2:	f852 6b08 	ldr.w	r6, [r2], #8
 801aee6:	920b      	str	r2, [sp, #44]	; 0x2c
 801aee8:	2301      	movs	r3, #1
 801aeea:	e795      	b.n	801ae18 <_vfprintf_r+0xa9c>
 801aeec:	4632      	mov	r2, r6
 801aeee:	f01b 0510 	ands.w	r5, fp, #16
 801aef2:	f852 6b04 	ldr.w	r6, [r2], #4
 801aef6:	920b      	str	r2, [sp, #44]	; 0x2c
 801aef8:	d001      	beq.n	801aefe <_vfprintf_r+0xb82>
 801aefa:	461d      	mov	r5, r3
 801aefc:	e7f4      	b.n	801aee8 <_vfprintf_r+0xb6c>
 801aefe:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801af02:	d001      	beq.n	801af08 <_vfprintf_r+0xb8c>
 801af04:	b2b6      	uxth	r6, r6
 801af06:	e7ef      	b.n	801aee8 <_vfprintf_r+0xb6c>
 801af08:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801af0c:	d0ec      	beq.n	801aee8 <_vfprintf_r+0xb6c>
 801af0e:	b2f6      	uxtb	r6, r6
 801af10:	e7f3      	b.n	801aefa <_vfprintf_r+0xb7e>
 801af12:	4b7e      	ldr	r3, [pc, #504]	; (801b10c <_vfprintf_r+0xd90>)
 801af14:	931a      	str	r3, [sp, #104]	; 0x68
 801af16:	f01b 0320 	ands.w	r3, fp, #32
 801af1a:	d01b      	beq.n	801af54 <_vfprintf_r+0xbd8>
 801af1c:	3607      	adds	r6, #7
 801af1e:	f026 0307 	bic.w	r3, r6, #7
 801af22:	461a      	mov	r2, r3
 801af24:	685d      	ldr	r5, [r3, #4]
 801af26:	f852 6b08 	ldr.w	r6, [r2], #8
 801af2a:	920b      	str	r2, [sp, #44]	; 0x2c
 801af2c:	f01b 0f01 	tst.w	fp, #1
 801af30:	d00a      	beq.n	801af48 <_vfprintf_r+0xbcc>
 801af32:	ea56 0305 	orrs.w	r3, r6, r5
 801af36:	d007      	beq.n	801af48 <_vfprintf_r+0xbcc>
 801af38:	2330      	movs	r3, #48	; 0x30
 801af3a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801af3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af40:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801af44:	f04b 0b02 	orr.w	fp, fp, #2
 801af48:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801af4c:	2302      	movs	r3, #2
 801af4e:	e763      	b.n	801ae18 <_vfprintf_r+0xa9c>
 801af50:	4b6d      	ldr	r3, [pc, #436]	; (801b108 <_vfprintf_r+0xd8c>)
 801af52:	e7df      	b.n	801af14 <_vfprintf_r+0xb98>
 801af54:	4632      	mov	r2, r6
 801af56:	f01b 0510 	ands.w	r5, fp, #16
 801af5a:	f852 6b04 	ldr.w	r6, [r2], #4
 801af5e:	920b      	str	r2, [sp, #44]	; 0x2c
 801af60:	d001      	beq.n	801af66 <_vfprintf_r+0xbea>
 801af62:	461d      	mov	r5, r3
 801af64:	e7e2      	b.n	801af2c <_vfprintf_r+0xbb0>
 801af66:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801af6a:	d001      	beq.n	801af70 <_vfprintf_r+0xbf4>
 801af6c:	b2b6      	uxth	r6, r6
 801af6e:	e7dd      	b.n	801af2c <_vfprintf_r+0xbb0>
 801af70:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 801af74:	d0da      	beq.n	801af2c <_vfprintf_r+0xbb0>
 801af76:	b2f6      	uxtb	r6, r6
 801af78:	e7f3      	b.n	801af62 <_vfprintf_r+0xbe6>
 801af7a:	2e0a      	cmp	r6, #10
 801af7c:	f175 0300 	sbcs.w	r3, r5, #0
 801af80:	d206      	bcs.n	801af90 <_vfprintf_r+0xc14>
 801af82:	3630      	adds	r6, #48	; 0x30
 801af84:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 801af88:	f20d 1947 	addw	r9, sp, #327	; 0x147
 801af8c:	f000 bc02 	b.w	801b794 <_vfprintf_r+0x1418>
 801af90:	2300      	movs	r3, #0
 801af92:	9309      	str	r3, [sp, #36]	; 0x24
 801af94:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 801af98:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801af9c:	9308      	str	r3, [sp, #32]
 801af9e:	220a      	movs	r2, #10
 801afa0:	2300      	movs	r3, #0
 801afa2:	4630      	mov	r0, r6
 801afa4:	4629      	mov	r1, r5
 801afa6:	f7ee f925 	bl	80091f4 <__aeabi_uldivmod>
 801afaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afac:	3301      	adds	r3, #1
 801afae:	9309      	str	r3, [sp, #36]	; 0x24
 801afb0:	9b08      	ldr	r3, [sp, #32]
 801afb2:	3230      	adds	r2, #48	; 0x30
 801afb4:	f10b 39ff 	add.w	r9, fp, #4294967295
 801afb8:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801afbc:	b1d3      	cbz	r3, 801aff4 <_vfprintf_r+0xc78>
 801afbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801afc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801afc2:	781b      	ldrb	r3, [r3, #0]
 801afc4:	429a      	cmp	r2, r3
 801afc6:	d115      	bne.n	801aff4 <_vfprintf_r+0xc78>
 801afc8:	2aff      	cmp	r2, #255	; 0xff
 801afca:	d013      	beq.n	801aff4 <_vfprintf_r+0xc78>
 801afcc:	2e0a      	cmp	r6, #10
 801afce:	f175 0300 	sbcs.w	r3, r5, #0
 801afd2:	d30f      	bcc.n	801aff4 <_vfprintf_r+0xc78>
 801afd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801afd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801afd8:	eba9 0903 	sub.w	r9, r9, r3
 801afdc:	461a      	mov	r2, r3
 801afde:	4648      	mov	r0, r9
 801afe0:	f002 f94d 	bl	801d27e <strncpy>
 801afe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801afe6:	785b      	ldrb	r3, [r3, #1]
 801afe8:	b11b      	cbz	r3, 801aff2 <_vfprintf_r+0xc76>
 801afea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801afec:	3301      	adds	r3, #1
 801afee:	930e      	str	r3, [sp, #56]	; 0x38
 801aff0:	2300      	movs	r3, #0
 801aff2:	9309      	str	r3, [sp, #36]	; 0x24
 801aff4:	2300      	movs	r3, #0
 801aff6:	220a      	movs	r2, #10
 801aff8:	4630      	mov	r0, r6
 801affa:	4629      	mov	r1, r5
 801affc:	f7ee f8fa 	bl	80091f4 <__aeabi_uldivmod>
 801b000:	2e0a      	cmp	r6, #10
 801b002:	f175 0300 	sbcs.w	r3, r5, #0
 801b006:	f0c0 83c5 	bcc.w	801b794 <_vfprintf_r+0x1418>
 801b00a:	4606      	mov	r6, r0
 801b00c:	460d      	mov	r5, r1
 801b00e:	46cb      	mov	fp, r9
 801b010:	e7c5      	b.n	801af9e <_vfprintf_r+0xc22>
 801b012:	f006 030f 	and.w	r3, r6, #15
 801b016:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b018:	0936      	lsrs	r6, r6, #4
 801b01a:	5cd3      	ldrb	r3, [r2, r3]
 801b01c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801b020:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 801b024:	092d      	lsrs	r5, r5, #4
 801b026:	ea56 0305 	orrs.w	r3, r6, r5
 801b02a:	d1f2      	bne.n	801b012 <_vfprintf_r+0xc96>
 801b02c:	e3b2      	b.n	801b794 <_vfprintf_r+0x1418>
 801b02e:	b933      	cbnz	r3, 801b03e <_vfprintf_r+0xcc2>
 801b030:	f01b 0f01 	tst.w	fp, #1
 801b034:	d003      	beq.n	801b03e <_vfprintf_r+0xcc2>
 801b036:	2330      	movs	r3, #48	; 0x30
 801b038:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 801b03c:	e7a4      	b.n	801af88 <_vfprintf_r+0xc0c>
 801b03e:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801b042:	e3a7      	b.n	801b794 <_vfprintf_r+0x1418>
 801b044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b046:	2b00      	cmp	r3, #0
 801b048:	f000 8372 	beq.w	801b730 <_vfprintf_r+0x13b4>
 801b04c:	2000      	movs	r0, #0
 801b04e:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801b052:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 801b056:	960b      	str	r6, [sp, #44]	; 0x2c
 801b058:	f7ff bb2e 	b.w	801a6b8 <_vfprintf_r+0x33c>
 801b05c:	9e08      	ldr	r6, [sp, #32]
 801b05e:	f7ff bb9a 	b.w	801a796 <_vfprintf_r+0x41a>
 801b062:	2010      	movs	r0, #16
 801b064:	4402      	add	r2, r0
 801b066:	2b07      	cmp	r3, #7
 801b068:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b06c:	6060      	str	r0, [r4, #4]
 801b06e:	dd08      	ble.n	801b082 <_vfprintf_r+0xd06>
 801b070:	aa26      	add	r2, sp, #152	; 0x98
 801b072:	4651      	mov	r1, sl
 801b074:	4640      	mov	r0, r8
 801b076:	f002 f990 	bl	801d39a <__sprint_r>
 801b07a:	2800      	cmp	r0, #0
 801b07c:	f040 8336 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b080:	a929      	add	r1, sp, #164	; 0xa4
 801b082:	3f10      	subs	r7, #16
 801b084:	460c      	mov	r4, r1
 801b086:	e4f7      	b.n	801aa78 <_vfprintf_r+0x6fc>
 801b088:	460c      	mov	r4, r1
 801b08a:	e510      	b.n	801aaae <_vfprintf_r+0x732>
 801b08c:	aa26      	add	r2, sp, #152	; 0x98
 801b08e:	4651      	mov	r1, sl
 801b090:	4640      	mov	r0, r8
 801b092:	f002 f982 	bl	801d39a <__sprint_r>
 801b096:	2800      	cmp	r0, #0
 801b098:	f040 8328 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b09c:	ac29      	add	r4, sp, #164	; 0xa4
 801b09e:	e518      	b.n	801aad2 <_vfprintf_r+0x756>
 801b0a0:	aa26      	add	r2, sp, #152	; 0x98
 801b0a2:	4651      	mov	r1, sl
 801b0a4:	4640      	mov	r0, r8
 801b0a6:	f002 f978 	bl	801d39a <__sprint_r>
 801b0aa:	2800      	cmp	r0, #0
 801b0ac:	f040 831e 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b0b0:	ac29      	add	r4, sp, #164	; 0xa4
 801b0b2:	e51e      	b.n	801aaf2 <_vfprintf_r+0x776>
 801b0b4:	2010      	movs	r0, #16
 801b0b6:	4402      	add	r2, r0
 801b0b8:	2b07      	cmp	r3, #7
 801b0ba:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b0be:	6060      	str	r0, [r4, #4]
 801b0c0:	dd08      	ble.n	801b0d4 <_vfprintf_r+0xd58>
 801b0c2:	aa26      	add	r2, sp, #152	; 0x98
 801b0c4:	4651      	mov	r1, sl
 801b0c6:	4640      	mov	r0, r8
 801b0c8:	f002 f967 	bl	801d39a <__sprint_r>
 801b0cc:	2800      	cmp	r0, #0
 801b0ce:	f040 830d 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b0d2:	a929      	add	r1, sp, #164	; 0xa4
 801b0d4:	3f10      	subs	r7, #16
 801b0d6:	460c      	mov	r4, r1
 801b0d8:	e513      	b.n	801ab02 <_vfprintf_r+0x786>
 801b0da:	460c      	mov	r4, r1
 801b0dc:	e52c      	b.n	801ab38 <_vfprintf_r+0x7bc>
 801b0de:	2010      	movs	r0, #16
 801b0e0:	4402      	add	r2, r0
 801b0e2:	2b07      	cmp	r3, #7
 801b0e4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b0e8:	6060      	str	r0, [r4, #4]
 801b0ea:	dd08      	ble.n	801b0fe <_vfprintf_r+0xd82>
 801b0ec:	aa26      	add	r2, sp, #152	; 0x98
 801b0ee:	4651      	mov	r1, sl
 801b0f0:	4640      	mov	r0, r8
 801b0f2:	f002 f952 	bl	801d39a <__sprint_r>
 801b0f6:	2800      	cmp	r0, #0
 801b0f8:	f040 82f8 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b0fc:	a929      	add	r1, sp, #164	; 0xa4
 801b0fe:	3e10      	subs	r6, #16
 801b100:	460c      	mov	r4, r1
 801b102:	e52b      	b.n	801ab5c <_vfprintf_r+0x7e0>
 801b104:	460c      	mov	r4, r1
 801b106:	e543      	b.n	801ab90 <_vfprintf_r+0x814>
 801b108:	0802060c 	.word	0x0802060c
 801b10c:	0802061d 	.word	0x0802061d
 801b110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b112:	2b65      	cmp	r3, #101	; 0x65
 801b114:	f340 8232 	ble.w	801b57c <_vfprintf_r+0x1200>
 801b118:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b11c:	2200      	movs	r2, #0
 801b11e:	2300      	movs	r3, #0
 801b120:	f7ed feaa 	bl	8008e78 <__aeabi_dcmpeq>
 801b124:	2800      	cmp	r0, #0
 801b126:	d068      	beq.n	801b1fa <_vfprintf_r+0xe7e>
 801b128:	4b6d      	ldr	r3, [pc, #436]	; (801b2e0 <_vfprintf_r+0xf64>)
 801b12a:	6023      	str	r3, [r4, #0]
 801b12c:	2301      	movs	r3, #1
 801b12e:	441e      	add	r6, r3
 801b130:	6063      	str	r3, [r4, #4]
 801b132:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b134:	9628      	str	r6, [sp, #160]	; 0xa0
 801b136:	3301      	adds	r3, #1
 801b138:	2b07      	cmp	r3, #7
 801b13a:	9327      	str	r3, [sp, #156]	; 0x9c
 801b13c:	dc37      	bgt.n	801b1ae <_vfprintf_r+0xe32>
 801b13e:	3408      	adds	r4, #8
 801b140:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b144:	4293      	cmp	r3, r2
 801b146:	db03      	blt.n	801b150 <_vfprintf_r+0xdd4>
 801b148:	f01b 0f01 	tst.w	fp, #1
 801b14c:	f43f ad32 	beq.w	801abb4 <_vfprintf_r+0x838>
 801b150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b152:	6023      	str	r3, [r4, #0]
 801b154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b156:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b158:	6063      	str	r3, [r4, #4]
 801b15a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b15c:	4413      	add	r3, r2
 801b15e:	9328      	str	r3, [sp, #160]	; 0xa0
 801b160:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b162:	3301      	adds	r3, #1
 801b164:	2b07      	cmp	r3, #7
 801b166:	9327      	str	r3, [sp, #156]	; 0x9c
 801b168:	dc2b      	bgt.n	801b1c2 <_vfprintf_r+0xe46>
 801b16a:	3408      	adds	r4, #8
 801b16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b16e:	1e5d      	subs	r5, r3, #1
 801b170:	2d00      	cmp	r5, #0
 801b172:	f77f ad1f 	ble.w	801abb4 <_vfprintf_r+0x838>
 801b176:	4e5b      	ldr	r6, [pc, #364]	; (801b2e4 <_vfprintf_r+0xf68>)
 801b178:	2710      	movs	r7, #16
 801b17a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b17e:	2d10      	cmp	r5, #16
 801b180:	f103 0301 	add.w	r3, r3, #1
 801b184:	f104 0108 	add.w	r1, r4, #8
 801b188:	6026      	str	r6, [r4, #0]
 801b18a:	dc24      	bgt.n	801b1d6 <_vfprintf_r+0xe5a>
 801b18c:	442a      	add	r2, r5
 801b18e:	6065      	str	r5, [r4, #4]
 801b190:	9228      	str	r2, [sp, #160]	; 0xa0
 801b192:	2b07      	cmp	r3, #7
 801b194:	9327      	str	r3, [sp, #156]	; 0x9c
 801b196:	f340 8288 	ble.w	801b6aa <_vfprintf_r+0x132e>
 801b19a:	aa26      	add	r2, sp, #152	; 0x98
 801b19c:	4651      	mov	r1, sl
 801b19e:	4640      	mov	r0, r8
 801b1a0:	f002 f8fb 	bl	801d39a <__sprint_r>
 801b1a4:	2800      	cmp	r0, #0
 801b1a6:	f040 82a1 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b1aa:	ac29      	add	r4, sp, #164	; 0xa4
 801b1ac:	e502      	b.n	801abb4 <_vfprintf_r+0x838>
 801b1ae:	aa26      	add	r2, sp, #152	; 0x98
 801b1b0:	4651      	mov	r1, sl
 801b1b2:	4640      	mov	r0, r8
 801b1b4:	f002 f8f1 	bl	801d39a <__sprint_r>
 801b1b8:	2800      	cmp	r0, #0
 801b1ba:	f040 8297 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b1be:	ac29      	add	r4, sp, #164	; 0xa4
 801b1c0:	e7be      	b.n	801b140 <_vfprintf_r+0xdc4>
 801b1c2:	aa26      	add	r2, sp, #152	; 0x98
 801b1c4:	4651      	mov	r1, sl
 801b1c6:	4640      	mov	r0, r8
 801b1c8:	f002 f8e7 	bl	801d39a <__sprint_r>
 801b1cc:	2800      	cmp	r0, #0
 801b1ce:	f040 828d 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b1d2:	ac29      	add	r4, sp, #164	; 0xa4
 801b1d4:	e7ca      	b.n	801b16c <_vfprintf_r+0xdf0>
 801b1d6:	3210      	adds	r2, #16
 801b1d8:	2b07      	cmp	r3, #7
 801b1da:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b1de:	6067      	str	r7, [r4, #4]
 801b1e0:	dd08      	ble.n	801b1f4 <_vfprintf_r+0xe78>
 801b1e2:	aa26      	add	r2, sp, #152	; 0x98
 801b1e4:	4651      	mov	r1, sl
 801b1e6:	4640      	mov	r0, r8
 801b1e8:	f002 f8d7 	bl	801d39a <__sprint_r>
 801b1ec:	2800      	cmp	r0, #0
 801b1ee:	f040 827d 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b1f2:	a929      	add	r1, sp, #164	; 0xa4
 801b1f4:	3d10      	subs	r5, #16
 801b1f6:	460c      	mov	r4, r1
 801b1f8:	e7bf      	b.n	801b17a <_vfprintf_r+0xdfe>
 801b1fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	dc73      	bgt.n	801b2e8 <_vfprintf_r+0xf6c>
 801b200:	4b37      	ldr	r3, [pc, #220]	; (801b2e0 <_vfprintf_r+0xf64>)
 801b202:	6023      	str	r3, [r4, #0]
 801b204:	2301      	movs	r3, #1
 801b206:	441e      	add	r6, r3
 801b208:	6063      	str	r3, [r4, #4]
 801b20a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b20c:	9628      	str	r6, [sp, #160]	; 0xa0
 801b20e:	3301      	adds	r3, #1
 801b210:	2b07      	cmp	r3, #7
 801b212:	9327      	str	r3, [sp, #156]	; 0x9c
 801b214:	dc3d      	bgt.n	801b292 <_vfprintf_r+0xf16>
 801b216:	3408      	adds	r4, #8
 801b218:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b21a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b21c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b21e:	430a      	orrs	r2, r1
 801b220:	f00b 0101 	and.w	r1, fp, #1
 801b224:	430a      	orrs	r2, r1
 801b226:	f43f acc5 	beq.w	801abb4 <_vfprintf_r+0x838>
 801b22a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b22c:	6022      	str	r2, [r4, #0]
 801b22e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b230:	6062      	str	r2, [r4, #4]
 801b232:	4413      	add	r3, r2
 801b234:	9328      	str	r3, [sp, #160]	; 0xa0
 801b236:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b238:	3301      	adds	r3, #1
 801b23a:	2b07      	cmp	r3, #7
 801b23c:	9327      	str	r3, [sp, #156]	; 0x9c
 801b23e:	dc32      	bgt.n	801b2a6 <_vfprintf_r+0xf2a>
 801b240:	3408      	adds	r4, #8
 801b242:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b244:	2d00      	cmp	r5, #0
 801b246:	da1b      	bge.n	801b280 <_vfprintf_r+0xf04>
 801b248:	4e26      	ldr	r6, [pc, #152]	; (801b2e4 <_vfprintf_r+0xf68>)
 801b24a:	426d      	negs	r5, r5
 801b24c:	4623      	mov	r3, r4
 801b24e:	2710      	movs	r7, #16
 801b250:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 801b254:	2d10      	cmp	r5, #16
 801b256:	f102 0201 	add.w	r2, r2, #1
 801b25a:	f104 0408 	add.w	r4, r4, #8
 801b25e:	601e      	str	r6, [r3, #0]
 801b260:	dc2b      	bgt.n	801b2ba <_vfprintf_r+0xf3e>
 801b262:	605d      	str	r5, [r3, #4]
 801b264:	2a07      	cmp	r2, #7
 801b266:	440d      	add	r5, r1
 801b268:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 801b26c:	dd08      	ble.n	801b280 <_vfprintf_r+0xf04>
 801b26e:	aa26      	add	r2, sp, #152	; 0x98
 801b270:	4651      	mov	r1, sl
 801b272:	4640      	mov	r0, r8
 801b274:	f002 f891 	bl	801d39a <__sprint_r>
 801b278:	2800      	cmp	r0, #0
 801b27a:	f040 8237 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b27e:	ac29      	add	r4, sp, #164	; 0xa4
 801b280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b284:	6063      	str	r3, [r4, #4]
 801b286:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b288:	f8c4 9000 	str.w	r9, [r4]
 801b28c:	4413      	add	r3, r2
 801b28e:	9328      	str	r3, [sp, #160]	; 0xa0
 801b290:	e489      	b.n	801aba6 <_vfprintf_r+0x82a>
 801b292:	aa26      	add	r2, sp, #152	; 0x98
 801b294:	4651      	mov	r1, sl
 801b296:	4640      	mov	r0, r8
 801b298:	f002 f87f 	bl	801d39a <__sprint_r>
 801b29c:	2800      	cmp	r0, #0
 801b29e:	f040 8225 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b2a2:	ac29      	add	r4, sp, #164	; 0xa4
 801b2a4:	e7b8      	b.n	801b218 <_vfprintf_r+0xe9c>
 801b2a6:	aa26      	add	r2, sp, #152	; 0x98
 801b2a8:	4651      	mov	r1, sl
 801b2aa:	4640      	mov	r0, r8
 801b2ac:	f002 f875 	bl	801d39a <__sprint_r>
 801b2b0:	2800      	cmp	r0, #0
 801b2b2:	f040 821b 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b2b6:	ac29      	add	r4, sp, #164	; 0xa4
 801b2b8:	e7c3      	b.n	801b242 <_vfprintf_r+0xec6>
 801b2ba:	3110      	adds	r1, #16
 801b2bc:	2a07      	cmp	r2, #7
 801b2be:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801b2c2:	605f      	str	r7, [r3, #4]
 801b2c4:	dd08      	ble.n	801b2d8 <_vfprintf_r+0xf5c>
 801b2c6:	aa26      	add	r2, sp, #152	; 0x98
 801b2c8:	4651      	mov	r1, sl
 801b2ca:	4640      	mov	r0, r8
 801b2cc:	f002 f865 	bl	801d39a <__sprint_r>
 801b2d0:	2800      	cmp	r0, #0
 801b2d2:	f040 820b 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b2d6:	ac29      	add	r4, sp, #164	; 0xa4
 801b2d8:	3d10      	subs	r5, #16
 801b2da:	4623      	mov	r3, r4
 801b2dc:	e7b8      	b.n	801b250 <_vfprintf_r+0xed4>
 801b2de:	bf00      	nop
 801b2e0:	0802062e 	.word	0x0802062e
 801b2e4:	08020660 	.word	0x08020660
 801b2e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b2ea:	42af      	cmp	r7, r5
 801b2ec:	bfa8      	it	ge
 801b2ee:	462f      	movge	r7, r5
 801b2f0:	2f00      	cmp	r7, #0
 801b2f2:	dd09      	ble.n	801b308 <_vfprintf_r+0xf8c>
 801b2f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b2f6:	3301      	adds	r3, #1
 801b2f8:	443e      	add	r6, r7
 801b2fa:	2b07      	cmp	r3, #7
 801b2fc:	e9c4 9700 	strd	r9, r7, [r4]
 801b300:	9628      	str	r6, [sp, #160]	; 0xa0
 801b302:	9327      	str	r3, [sp, #156]	; 0x9c
 801b304:	dc75      	bgt.n	801b3f2 <_vfprintf_r+0x1076>
 801b306:	3408      	adds	r4, #8
 801b308:	2f00      	cmp	r7, #0
 801b30a:	bfac      	ite	ge
 801b30c:	1bee      	subge	r6, r5, r7
 801b30e:	462e      	movlt	r6, r5
 801b310:	2e00      	cmp	r6, #0
 801b312:	dd18      	ble.n	801b346 <_vfprintf_r+0xfca>
 801b314:	4f98      	ldr	r7, [pc, #608]	; (801b578 <_vfprintf_r+0x11fc>)
 801b316:	6027      	str	r7, [r4, #0]
 801b318:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b31c:	2e10      	cmp	r6, #16
 801b31e:	f103 0301 	add.w	r3, r3, #1
 801b322:	f104 0108 	add.w	r1, r4, #8
 801b326:	dc6e      	bgt.n	801b406 <_vfprintf_r+0x108a>
 801b328:	6066      	str	r6, [r4, #4]
 801b32a:	2b07      	cmp	r3, #7
 801b32c:	4416      	add	r6, r2
 801b32e:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 801b332:	dd7b      	ble.n	801b42c <_vfprintf_r+0x10b0>
 801b334:	aa26      	add	r2, sp, #152	; 0x98
 801b336:	4651      	mov	r1, sl
 801b338:	4640      	mov	r0, r8
 801b33a:	f002 f82e 	bl	801d39a <__sprint_r>
 801b33e:	2800      	cmp	r0, #0
 801b340:	f040 81d4 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b344:	ac29      	add	r4, sp, #164	; 0xa4
 801b346:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 801b34a:	444d      	add	r5, r9
 801b34c:	d00a      	beq.n	801b364 <_vfprintf_r+0xfe8>
 801b34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b350:	2b00      	cmp	r3, #0
 801b352:	d16d      	bne.n	801b430 <_vfprintf_r+0x10b4>
 801b354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b356:	2b00      	cmp	r3, #0
 801b358:	d16d      	bne.n	801b436 <_vfprintf_r+0x10ba>
 801b35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b35c:	444b      	add	r3, r9
 801b35e:	429d      	cmp	r5, r3
 801b360:	bf28      	it	cs
 801b362:	461d      	movcs	r5, r3
 801b364:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b368:	4293      	cmp	r3, r2
 801b36a:	db02      	blt.n	801b372 <_vfprintf_r+0xff6>
 801b36c:	f01b 0f01 	tst.w	fp, #1
 801b370:	d00e      	beq.n	801b390 <_vfprintf_r+0x1014>
 801b372:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b374:	6023      	str	r3, [r4, #0]
 801b376:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b378:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b37a:	6063      	str	r3, [r4, #4]
 801b37c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b37e:	4413      	add	r3, r2
 801b380:	9328      	str	r3, [sp, #160]	; 0xa0
 801b382:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b384:	3301      	adds	r3, #1
 801b386:	2b07      	cmp	r3, #7
 801b388:	9327      	str	r3, [sp, #156]	; 0x9c
 801b38a:	f300 80cf 	bgt.w	801b52c <_vfprintf_r+0x11b0>
 801b38e:	3408      	adds	r4, #8
 801b390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b392:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801b394:	eb09 0203 	add.w	r2, r9, r3
 801b398:	1b9e      	subs	r6, r3, r6
 801b39a:	1b52      	subs	r2, r2, r5
 801b39c:	4296      	cmp	r6, r2
 801b39e:	bfa8      	it	ge
 801b3a0:	4616      	movge	r6, r2
 801b3a2:	2e00      	cmp	r6, #0
 801b3a4:	dd0b      	ble.n	801b3be <_vfprintf_r+0x1042>
 801b3a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b3a8:	4433      	add	r3, r6
 801b3aa:	9328      	str	r3, [sp, #160]	; 0xa0
 801b3ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b3ae:	3301      	adds	r3, #1
 801b3b0:	2b07      	cmp	r3, #7
 801b3b2:	e9c4 5600 	strd	r5, r6, [r4]
 801b3b6:	9327      	str	r3, [sp, #156]	; 0x9c
 801b3b8:	f300 80c2 	bgt.w	801b540 <_vfprintf_r+0x11c4>
 801b3bc:	3408      	adds	r4, #8
 801b3be:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b3c2:	2e00      	cmp	r6, #0
 801b3c4:	eba3 0505 	sub.w	r5, r3, r5
 801b3c8:	bfa8      	it	ge
 801b3ca:	1bad      	subge	r5, r5, r6
 801b3cc:	2d00      	cmp	r5, #0
 801b3ce:	f77f abf1 	ble.w	801abb4 <_vfprintf_r+0x838>
 801b3d2:	4e69      	ldr	r6, [pc, #420]	; (801b578 <_vfprintf_r+0x11fc>)
 801b3d4:	2710      	movs	r7, #16
 801b3d6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b3da:	2d10      	cmp	r5, #16
 801b3dc:	f103 0301 	add.w	r3, r3, #1
 801b3e0:	f104 0108 	add.w	r1, r4, #8
 801b3e4:	6026      	str	r6, [r4, #0]
 801b3e6:	f300 80b5 	bgt.w	801b554 <_vfprintf_r+0x11d8>
 801b3ea:	6065      	str	r5, [r4, #4]
 801b3ec:	4415      	add	r5, r2
 801b3ee:	9528      	str	r5, [sp, #160]	; 0xa0
 801b3f0:	e6cf      	b.n	801b192 <_vfprintf_r+0xe16>
 801b3f2:	aa26      	add	r2, sp, #152	; 0x98
 801b3f4:	4651      	mov	r1, sl
 801b3f6:	4640      	mov	r0, r8
 801b3f8:	f001 ffcf 	bl	801d39a <__sprint_r>
 801b3fc:	2800      	cmp	r0, #0
 801b3fe:	f040 8175 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b402:	ac29      	add	r4, sp, #164	; 0xa4
 801b404:	e780      	b.n	801b308 <_vfprintf_r+0xf8c>
 801b406:	2010      	movs	r0, #16
 801b408:	4402      	add	r2, r0
 801b40a:	2b07      	cmp	r3, #7
 801b40c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b410:	6060      	str	r0, [r4, #4]
 801b412:	dd08      	ble.n	801b426 <_vfprintf_r+0x10aa>
 801b414:	aa26      	add	r2, sp, #152	; 0x98
 801b416:	4651      	mov	r1, sl
 801b418:	4640      	mov	r0, r8
 801b41a:	f001 ffbe 	bl	801d39a <__sprint_r>
 801b41e:	2800      	cmp	r0, #0
 801b420:	f040 8164 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b424:	a929      	add	r1, sp, #164	; 0xa4
 801b426:	3e10      	subs	r6, #16
 801b428:	460c      	mov	r4, r1
 801b42a:	e774      	b.n	801b316 <_vfprintf_r+0xf9a>
 801b42c:	460c      	mov	r4, r1
 801b42e:	e78a      	b.n	801b346 <_vfprintf_r+0xfca>
 801b430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b432:	2b00      	cmp	r3, #0
 801b434:	d04a      	beq.n	801b4cc <_vfprintf_r+0x1150>
 801b436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b438:	3b01      	subs	r3, #1
 801b43a:	930c      	str	r3, [sp, #48]	; 0x30
 801b43c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b43e:	6023      	str	r3, [r4, #0]
 801b440:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b442:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b444:	6063      	str	r3, [r4, #4]
 801b446:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b448:	4413      	add	r3, r2
 801b44a:	9328      	str	r3, [sp, #160]	; 0xa0
 801b44c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b44e:	3301      	adds	r3, #1
 801b450:	2b07      	cmp	r3, #7
 801b452:	9327      	str	r3, [sp, #156]	; 0x9c
 801b454:	dc41      	bgt.n	801b4da <_vfprintf_r+0x115e>
 801b456:	3408      	adds	r4, #8
 801b458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b45c:	eb09 0703 	add.w	r7, r9, r3
 801b460:	1b7b      	subs	r3, r7, r5
 801b462:	7817      	ldrb	r7, [r2, #0]
 801b464:	429f      	cmp	r7, r3
 801b466:	bfa8      	it	ge
 801b468:	461f      	movge	r7, r3
 801b46a:	2f00      	cmp	r7, #0
 801b46c:	dd0a      	ble.n	801b484 <_vfprintf_r+0x1108>
 801b46e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b470:	443b      	add	r3, r7
 801b472:	9328      	str	r3, [sp, #160]	; 0xa0
 801b474:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b476:	3301      	adds	r3, #1
 801b478:	2b07      	cmp	r3, #7
 801b47a:	e9c4 5700 	strd	r5, r7, [r4]
 801b47e:	9327      	str	r3, [sp, #156]	; 0x9c
 801b480:	dc35      	bgt.n	801b4ee <_vfprintf_r+0x1172>
 801b482:	3408      	adds	r4, #8
 801b484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b486:	781e      	ldrb	r6, [r3, #0]
 801b488:	2f00      	cmp	r7, #0
 801b48a:	bfa8      	it	ge
 801b48c:	1bf6      	subge	r6, r6, r7
 801b48e:	2e00      	cmp	r6, #0
 801b490:	dd18      	ble.n	801b4c4 <_vfprintf_r+0x1148>
 801b492:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b496:	4838      	ldr	r0, [pc, #224]	; (801b578 <_vfprintf_r+0x11fc>)
 801b498:	6020      	str	r0, [r4, #0]
 801b49a:	2e10      	cmp	r6, #16
 801b49c:	f103 0301 	add.w	r3, r3, #1
 801b4a0:	f104 0108 	add.w	r1, r4, #8
 801b4a4:	dc2d      	bgt.n	801b502 <_vfprintf_r+0x1186>
 801b4a6:	6066      	str	r6, [r4, #4]
 801b4a8:	2b07      	cmp	r3, #7
 801b4aa:	4416      	add	r6, r2
 801b4ac:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 801b4b0:	dd3a      	ble.n	801b528 <_vfprintf_r+0x11ac>
 801b4b2:	aa26      	add	r2, sp, #152	; 0x98
 801b4b4:	4651      	mov	r1, sl
 801b4b6:	4640      	mov	r0, r8
 801b4b8:	f001 ff6f 	bl	801d39a <__sprint_r>
 801b4bc:	2800      	cmp	r0, #0
 801b4be:	f040 8115 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b4c2:	ac29      	add	r4, sp, #164	; 0xa4
 801b4c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b4c6:	781b      	ldrb	r3, [r3, #0]
 801b4c8:	441d      	add	r5, r3
 801b4ca:	e740      	b.n	801b34e <_vfprintf_r+0xfd2>
 801b4cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b4ce:	3b01      	subs	r3, #1
 801b4d0:	930e      	str	r3, [sp, #56]	; 0x38
 801b4d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b4d4:	3b01      	subs	r3, #1
 801b4d6:	930d      	str	r3, [sp, #52]	; 0x34
 801b4d8:	e7b0      	b.n	801b43c <_vfprintf_r+0x10c0>
 801b4da:	aa26      	add	r2, sp, #152	; 0x98
 801b4dc:	4651      	mov	r1, sl
 801b4de:	4640      	mov	r0, r8
 801b4e0:	f001 ff5b 	bl	801d39a <__sprint_r>
 801b4e4:	2800      	cmp	r0, #0
 801b4e6:	f040 8101 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b4ea:	ac29      	add	r4, sp, #164	; 0xa4
 801b4ec:	e7b4      	b.n	801b458 <_vfprintf_r+0x10dc>
 801b4ee:	aa26      	add	r2, sp, #152	; 0x98
 801b4f0:	4651      	mov	r1, sl
 801b4f2:	4640      	mov	r0, r8
 801b4f4:	f001 ff51 	bl	801d39a <__sprint_r>
 801b4f8:	2800      	cmp	r0, #0
 801b4fa:	f040 80f7 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b4fe:	ac29      	add	r4, sp, #164	; 0xa4
 801b500:	e7c0      	b.n	801b484 <_vfprintf_r+0x1108>
 801b502:	2010      	movs	r0, #16
 801b504:	4402      	add	r2, r0
 801b506:	2b07      	cmp	r3, #7
 801b508:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b50c:	6060      	str	r0, [r4, #4]
 801b50e:	dd08      	ble.n	801b522 <_vfprintf_r+0x11a6>
 801b510:	aa26      	add	r2, sp, #152	; 0x98
 801b512:	4651      	mov	r1, sl
 801b514:	4640      	mov	r0, r8
 801b516:	f001 ff40 	bl	801d39a <__sprint_r>
 801b51a:	2800      	cmp	r0, #0
 801b51c:	f040 80e6 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b520:	a929      	add	r1, sp, #164	; 0xa4
 801b522:	3e10      	subs	r6, #16
 801b524:	460c      	mov	r4, r1
 801b526:	e7b4      	b.n	801b492 <_vfprintf_r+0x1116>
 801b528:	460c      	mov	r4, r1
 801b52a:	e7cb      	b.n	801b4c4 <_vfprintf_r+0x1148>
 801b52c:	aa26      	add	r2, sp, #152	; 0x98
 801b52e:	4651      	mov	r1, sl
 801b530:	4640      	mov	r0, r8
 801b532:	f001 ff32 	bl	801d39a <__sprint_r>
 801b536:	2800      	cmp	r0, #0
 801b538:	f040 80d8 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b53c:	ac29      	add	r4, sp, #164	; 0xa4
 801b53e:	e727      	b.n	801b390 <_vfprintf_r+0x1014>
 801b540:	aa26      	add	r2, sp, #152	; 0x98
 801b542:	4651      	mov	r1, sl
 801b544:	4640      	mov	r0, r8
 801b546:	f001 ff28 	bl	801d39a <__sprint_r>
 801b54a:	2800      	cmp	r0, #0
 801b54c:	f040 80ce 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b550:	ac29      	add	r4, sp, #164	; 0xa4
 801b552:	e734      	b.n	801b3be <_vfprintf_r+0x1042>
 801b554:	3210      	adds	r2, #16
 801b556:	2b07      	cmp	r3, #7
 801b558:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b55c:	6067      	str	r7, [r4, #4]
 801b55e:	dd08      	ble.n	801b572 <_vfprintf_r+0x11f6>
 801b560:	aa26      	add	r2, sp, #152	; 0x98
 801b562:	4651      	mov	r1, sl
 801b564:	4640      	mov	r0, r8
 801b566:	f001 ff18 	bl	801d39a <__sprint_r>
 801b56a:	2800      	cmp	r0, #0
 801b56c:	f040 80be 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b570:	a929      	add	r1, sp, #164	; 0xa4
 801b572:	3d10      	subs	r5, #16
 801b574:	460c      	mov	r4, r1
 801b576:	e72e      	b.n	801b3d6 <_vfprintf_r+0x105a>
 801b578:	08020660 	.word	0x08020660
 801b57c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b57e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b580:	2a01      	cmp	r2, #1
 801b582:	f106 0601 	add.w	r6, r6, #1
 801b586:	f103 0301 	add.w	r3, r3, #1
 801b58a:	f104 0508 	add.w	r5, r4, #8
 801b58e:	dc02      	bgt.n	801b596 <_vfprintf_r+0x121a>
 801b590:	f01b 0f01 	tst.w	fp, #1
 801b594:	d07e      	beq.n	801b694 <_vfprintf_r+0x1318>
 801b596:	2201      	movs	r2, #1
 801b598:	2b07      	cmp	r3, #7
 801b59a:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 801b59e:	f8c4 9000 	str.w	r9, [r4]
 801b5a2:	6062      	str	r2, [r4, #4]
 801b5a4:	dd08      	ble.n	801b5b8 <_vfprintf_r+0x123c>
 801b5a6:	aa26      	add	r2, sp, #152	; 0x98
 801b5a8:	4651      	mov	r1, sl
 801b5aa:	4640      	mov	r0, r8
 801b5ac:	f001 fef5 	bl	801d39a <__sprint_r>
 801b5b0:	2800      	cmp	r0, #0
 801b5b2:	f040 809b 	bne.w	801b6ec <_vfprintf_r+0x1370>
 801b5b6:	ad29      	add	r5, sp, #164	; 0xa4
 801b5b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5ba:	602b      	str	r3, [r5, #0]
 801b5bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b5be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b5c0:	606b      	str	r3, [r5, #4]
 801b5c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5c4:	4413      	add	r3, r2
 801b5c6:	9328      	str	r3, [sp, #160]	; 0xa0
 801b5c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b5ca:	3301      	adds	r3, #1
 801b5cc:	2b07      	cmp	r3, #7
 801b5ce:	9327      	str	r3, [sp, #156]	; 0x9c
 801b5d0:	dc32      	bgt.n	801b638 <_vfprintf_r+0x12bc>
 801b5d2:	3508      	adds	r5, #8
 801b5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b5da:	1e5c      	subs	r4, r3, #1
 801b5dc:	2200      	movs	r2, #0
 801b5de:	2300      	movs	r3, #0
 801b5e0:	f7ed fc4a 	bl	8008e78 <__aeabi_dcmpeq>
 801b5e4:	2800      	cmp	r0, #0
 801b5e6:	d130      	bne.n	801b64a <_vfprintf_r+0x12ce>
 801b5e8:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801b5ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b5ee:	3101      	adds	r1, #1
 801b5f0:	3b01      	subs	r3, #1
 801b5f2:	f109 0001 	add.w	r0, r9, #1
 801b5f6:	4413      	add	r3, r2
 801b5f8:	2907      	cmp	r1, #7
 801b5fa:	e9c5 0400 	strd	r0, r4, [r5]
 801b5fe:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 801b602:	dd50      	ble.n	801b6a6 <_vfprintf_r+0x132a>
 801b604:	aa26      	add	r2, sp, #152	; 0x98
 801b606:	4651      	mov	r1, sl
 801b608:	4640      	mov	r0, r8
 801b60a:	f001 fec6 	bl	801d39a <__sprint_r>
 801b60e:	2800      	cmp	r0, #0
 801b610:	d16c      	bne.n	801b6ec <_vfprintf_r+0x1370>
 801b612:	ad29      	add	r5, sp, #164	; 0xa4
 801b614:	ab22      	add	r3, sp, #136	; 0x88
 801b616:	602b      	str	r3, [r5, #0]
 801b618:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b61a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b61c:	606b      	str	r3, [r5, #4]
 801b61e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b620:	4413      	add	r3, r2
 801b622:	9328      	str	r3, [sp, #160]	; 0xa0
 801b624:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b626:	3301      	adds	r3, #1
 801b628:	2b07      	cmp	r3, #7
 801b62a:	9327      	str	r3, [sp, #156]	; 0x9c
 801b62c:	f73f adb5 	bgt.w	801b19a <_vfprintf_r+0xe1e>
 801b630:	f105 0408 	add.w	r4, r5, #8
 801b634:	f7ff babe 	b.w	801abb4 <_vfprintf_r+0x838>
 801b638:	aa26      	add	r2, sp, #152	; 0x98
 801b63a:	4651      	mov	r1, sl
 801b63c:	4640      	mov	r0, r8
 801b63e:	f001 feac 	bl	801d39a <__sprint_r>
 801b642:	2800      	cmp	r0, #0
 801b644:	d152      	bne.n	801b6ec <_vfprintf_r+0x1370>
 801b646:	ad29      	add	r5, sp, #164	; 0xa4
 801b648:	e7c4      	b.n	801b5d4 <_vfprintf_r+0x1258>
 801b64a:	2c00      	cmp	r4, #0
 801b64c:	dde2      	ble.n	801b614 <_vfprintf_r+0x1298>
 801b64e:	4e58      	ldr	r6, [pc, #352]	; (801b7b0 <_vfprintf_r+0x1434>)
 801b650:	2710      	movs	r7, #16
 801b652:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b656:	2c10      	cmp	r4, #16
 801b658:	f103 0301 	add.w	r3, r3, #1
 801b65c:	f105 0108 	add.w	r1, r5, #8
 801b660:	602e      	str	r6, [r5, #0]
 801b662:	dc07      	bgt.n	801b674 <_vfprintf_r+0x12f8>
 801b664:	606c      	str	r4, [r5, #4]
 801b666:	2b07      	cmp	r3, #7
 801b668:	4414      	add	r4, r2
 801b66a:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 801b66e:	dcc9      	bgt.n	801b604 <_vfprintf_r+0x1288>
 801b670:	460d      	mov	r5, r1
 801b672:	e7cf      	b.n	801b614 <_vfprintf_r+0x1298>
 801b674:	3210      	adds	r2, #16
 801b676:	2b07      	cmp	r3, #7
 801b678:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b67c:	606f      	str	r7, [r5, #4]
 801b67e:	dd06      	ble.n	801b68e <_vfprintf_r+0x1312>
 801b680:	aa26      	add	r2, sp, #152	; 0x98
 801b682:	4651      	mov	r1, sl
 801b684:	4640      	mov	r0, r8
 801b686:	f001 fe88 	bl	801d39a <__sprint_r>
 801b68a:	bb78      	cbnz	r0, 801b6ec <_vfprintf_r+0x1370>
 801b68c:	a929      	add	r1, sp, #164	; 0xa4
 801b68e:	3c10      	subs	r4, #16
 801b690:	460d      	mov	r5, r1
 801b692:	e7de      	b.n	801b652 <_vfprintf_r+0x12d6>
 801b694:	2201      	movs	r2, #1
 801b696:	2b07      	cmp	r3, #7
 801b698:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 801b69c:	f8c4 9000 	str.w	r9, [r4]
 801b6a0:	6062      	str	r2, [r4, #4]
 801b6a2:	ddb7      	ble.n	801b614 <_vfprintf_r+0x1298>
 801b6a4:	e7ae      	b.n	801b604 <_vfprintf_r+0x1288>
 801b6a6:	3508      	adds	r5, #8
 801b6a8:	e7b4      	b.n	801b614 <_vfprintf_r+0x1298>
 801b6aa:	460c      	mov	r4, r1
 801b6ac:	f7ff ba82 	b.w	801abb4 <_vfprintf_r+0x838>
 801b6b0:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 801b6b4:	1a9d      	subs	r5, r3, r2
 801b6b6:	2d00      	cmp	r5, #0
 801b6b8:	f77f aa80 	ble.w	801abbc <_vfprintf_r+0x840>
 801b6bc:	4e3d      	ldr	r6, [pc, #244]	; (801b7b4 <_vfprintf_r+0x1438>)
 801b6be:	2710      	movs	r7, #16
 801b6c0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b6c4:	2d10      	cmp	r5, #16
 801b6c6:	f103 0301 	add.w	r3, r3, #1
 801b6ca:	6026      	str	r6, [r4, #0]
 801b6cc:	dc18      	bgt.n	801b700 <_vfprintf_r+0x1384>
 801b6ce:	6065      	str	r5, [r4, #4]
 801b6d0:	2b07      	cmp	r3, #7
 801b6d2:	4415      	add	r5, r2
 801b6d4:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801b6d8:	f77f aa70 	ble.w	801abbc <_vfprintf_r+0x840>
 801b6dc:	aa26      	add	r2, sp, #152	; 0x98
 801b6de:	4651      	mov	r1, sl
 801b6e0:	4640      	mov	r0, r8
 801b6e2:	f001 fe5a 	bl	801d39a <__sprint_r>
 801b6e6:	2800      	cmp	r0, #0
 801b6e8:	f43f aa68 	beq.w	801abbc <_vfprintf_r+0x840>
 801b6ec:	9b08      	ldr	r3, [sp, #32]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	f43f a887 	beq.w	801a802 <_vfprintf_r+0x486>
 801b6f4:	4619      	mov	r1, r3
 801b6f6:	4640      	mov	r0, r8
 801b6f8:	f001 f8ca 	bl	801c890 <_free_r>
 801b6fc:	f7ff b881 	b.w	801a802 <_vfprintf_r+0x486>
 801b700:	3210      	adds	r2, #16
 801b702:	2b07      	cmp	r3, #7
 801b704:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b708:	6067      	str	r7, [r4, #4]
 801b70a:	dc02      	bgt.n	801b712 <_vfprintf_r+0x1396>
 801b70c:	3408      	adds	r4, #8
 801b70e:	3d10      	subs	r5, #16
 801b710:	e7d6      	b.n	801b6c0 <_vfprintf_r+0x1344>
 801b712:	aa26      	add	r2, sp, #152	; 0x98
 801b714:	4651      	mov	r1, sl
 801b716:	4640      	mov	r0, r8
 801b718:	f001 fe3f 	bl	801d39a <__sprint_r>
 801b71c:	2800      	cmp	r0, #0
 801b71e:	d1e5      	bne.n	801b6ec <_vfprintf_r+0x1370>
 801b720:	ac29      	add	r4, sp, #164	; 0xa4
 801b722:	e7f4      	b.n	801b70e <_vfprintf_r+0x1392>
 801b724:	9908      	ldr	r1, [sp, #32]
 801b726:	4640      	mov	r0, r8
 801b728:	f001 f8b2 	bl	801c890 <_free_r>
 801b72c:	f7ff ba5e 	b.w	801abec <_vfprintf_r+0x870>
 801b730:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b732:	b91b      	cbnz	r3, 801b73c <_vfprintf_r+0x13c0>
 801b734:	2300      	movs	r3, #0
 801b736:	9327      	str	r3, [sp, #156]	; 0x9c
 801b738:	f7ff b863 	b.w	801a802 <_vfprintf_r+0x486>
 801b73c:	aa26      	add	r2, sp, #152	; 0x98
 801b73e:	4651      	mov	r1, sl
 801b740:	4640      	mov	r0, r8
 801b742:	f001 fe2a 	bl	801d39a <__sprint_r>
 801b746:	2800      	cmp	r0, #0
 801b748:	d0f4      	beq.n	801b734 <_vfprintf_r+0x13b8>
 801b74a:	f7ff b85a 	b.w	801a802 <_vfprintf_r+0x486>
 801b74e:	ea56 0205 	orrs.w	r2, r6, r5
 801b752:	465f      	mov	r7, fp
 801b754:	f43f ab71 	beq.w	801ae3a <_vfprintf_r+0xabe>
 801b758:	2b01      	cmp	r3, #1
 801b75a:	f43f ac0e 	beq.w	801af7a <_vfprintf_r+0xbfe>
 801b75e:	2b02      	cmp	r3, #2
 801b760:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801b764:	f43f ac55 	beq.w	801b012 <_vfprintf_r+0xc96>
 801b768:	f006 0307 	and.w	r3, r6, #7
 801b76c:	08f6      	lsrs	r6, r6, #3
 801b76e:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 801b772:	08ed      	lsrs	r5, r5, #3
 801b774:	3330      	adds	r3, #48	; 0x30
 801b776:	ea56 0105 	orrs.w	r1, r6, r5
 801b77a:	464a      	mov	r2, r9
 801b77c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801b780:	d1f2      	bne.n	801b768 <_vfprintf_r+0x13ec>
 801b782:	07f8      	lsls	r0, r7, #31
 801b784:	d506      	bpl.n	801b794 <_vfprintf_r+0x1418>
 801b786:	2b30      	cmp	r3, #48	; 0x30
 801b788:	d004      	beq.n	801b794 <_vfprintf_r+0x1418>
 801b78a:	2330      	movs	r3, #48	; 0x30
 801b78c:	f809 3c01 	strb.w	r3, [r9, #-1]
 801b790:	f1a2 0902 	sub.w	r9, r2, #2
 801b794:	ab52      	add	r3, sp, #328	; 0x148
 801b796:	eba3 0309 	sub.w	r3, r3, r9
 801b79a:	9e07      	ldr	r6, [sp, #28]
 801b79c:	9307      	str	r3, [sp, #28]
 801b79e:	2300      	movs	r3, #0
 801b7a0:	46bb      	mov	fp, r7
 801b7a2:	9308      	str	r3, [sp, #32]
 801b7a4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 801b7a8:	461d      	mov	r5, r3
 801b7aa:	f7ff b94a 	b.w	801aa42 <_vfprintf_r+0x6c6>
 801b7ae:	bf00      	nop
 801b7b0:	08020660 	.word	0x08020660
 801b7b4:	08020650 	.word	0x08020650

0801b7b8 <__sbprintf>:
 801b7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7ba:	461f      	mov	r7, r3
 801b7bc:	898b      	ldrh	r3, [r1, #12]
 801b7be:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 801b7c2:	f023 0302 	bic.w	r3, r3, #2
 801b7c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b7ca:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801b7cc:	9319      	str	r3, [sp, #100]	; 0x64
 801b7ce:	89cb      	ldrh	r3, [r1, #14]
 801b7d0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b7d4:	69cb      	ldr	r3, [r1, #28]
 801b7d6:	9307      	str	r3, [sp, #28]
 801b7d8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801b7da:	9309      	str	r3, [sp, #36]	; 0x24
 801b7dc:	ab1a      	add	r3, sp, #104	; 0x68
 801b7de:	9300      	str	r3, [sp, #0]
 801b7e0:	9304      	str	r3, [sp, #16]
 801b7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b7e6:	4615      	mov	r5, r2
 801b7e8:	4606      	mov	r6, r0
 801b7ea:	9302      	str	r3, [sp, #8]
 801b7ec:	9305      	str	r3, [sp, #20]
 801b7ee:	a816      	add	r0, sp, #88	; 0x58
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	460c      	mov	r4, r1
 801b7f4:	9306      	str	r3, [sp, #24]
 801b7f6:	f7fc feb3 	bl	8018560 <__retarget_lock_init_recursive>
 801b7fa:	462a      	mov	r2, r5
 801b7fc:	463b      	mov	r3, r7
 801b7fe:	4669      	mov	r1, sp
 801b800:	4630      	mov	r0, r6
 801b802:	f7fe fdbb 	bl	801a37c <_vfprintf_r>
 801b806:	1e05      	subs	r5, r0, #0
 801b808:	db07      	blt.n	801b81a <__sbprintf+0x62>
 801b80a:	4669      	mov	r1, sp
 801b80c:	4630      	mov	r0, r6
 801b80e:	f000 ff43 	bl	801c698 <_fflush_r>
 801b812:	2800      	cmp	r0, #0
 801b814:	bf18      	it	ne
 801b816:	f04f 35ff 	movne.w	r5, #4294967295
 801b81a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b81e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b820:	065b      	lsls	r3, r3, #25
 801b822:	bf42      	ittt	mi
 801b824:	89a3      	ldrhmi	r3, [r4, #12]
 801b826:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801b82a:	81a3      	strhmi	r3, [r4, #12]
 801b82c:	f7fc fe99 	bl	8018562 <__retarget_lock_close_recursive>
 801b830:	4628      	mov	r0, r5
 801b832:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801b836:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b838 <__swsetup_r>:
 801b838:	b538      	push	{r3, r4, r5, lr}
 801b83a:	4b2a      	ldr	r3, [pc, #168]	; (801b8e4 <__swsetup_r+0xac>)
 801b83c:	4605      	mov	r5, r0
 801b83e:	6818      	ldr	r0, [r3, #0]
 801b840:	460c      	mov	r4, r1
 801b842:	b118      	cbz	r0, 801b84c <__swsetup_r+0x14>
 801b844:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801b846:	b90b      	cbnz	r3, 801b84c <__swsetup_r+0x14>
 801b848:	f000 ff92 	bl	801c770 <__sinit>
 801b84c:	89a3      	ldrh	r3, [r4, #12]
 801b84e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b852:	0718      	lsls	r0, r3, #28
 801b854:	d422      	bmi.n	801b89c <__swsetup_r+0x64>
 801b856:	06d9      	lsls	r1, r3, #27
 801b858:	d407      	bmi.n	801b86a <__swsetup_r+0x32>
 801b85a:	2309      	movs	r3, #9
 801b85c:	602b      	str	r3, [r5, #0]
 801b85e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b862:	81a3      	strh	r3, [r4, #12]
 801b864:	f04f 30ff 	mov.w	r0, #4294967295
 801b868:	e034      	b.n	801b8d4 <__swsetup_r+0x9c>
 801b86a:	0758      	lsls	r0, r3, #29
 801b86c:	d512      	bpl.n	801b894 <__swsetup_r+0x5c>
 801b86e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b870:	b141      	cbz	r1, 801b884 <__swsetup_r+0x4c>
 801b872:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801b876:	4299      	cmp	r1, r3
 801b878:	d002      	beq.n	801b880 <__swsetup_r+0x48>
 801b87a:	4628      	mov	r0, r5
 801b87c:	f001 f808 	bl	801c890 <_free_r>
 801b880:	2300      	movs	r3, #0
 801b882:	6323      	str	r3, [r4, #48]	; 0x30
 801b884:	89a3      	ldrh	r3, [r4, #12]
 801b886:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b88a:	81a3      	strh	r3, [r4, #12]
 801b88c:	2300      	movs	r3, #0
 801b88e:	6063      	str	r3, [r4, #4]
 801b890:	6923      	ldr	r3, [r4, #16]
 801b892:	6023      	str	r3, [r4, #0]
 801b894:	89a3      	ldrh	r3, [r4, #12]
 801b896:	f043 0308 	orr.w	r3, r3, #8
 801b89a:	81a3      	strh	r3, [r4, #12]
 801b89c:	6923      	ldr	r3, [r4, #16]
 801b89e:	b94b      	cbnz	r3, 801b8b4 <__swsetup_r+0x7c>
 801b8a0:	89a3      	ldrh	r3, [r4, #12]
 801b8a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b8a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b8aa:	d003      	beq.n	801b8b4 <__swsetup_r+0x7c>
 801b8ac:	4621      	mov	r1, r4
 801b8ae:	4628      	mov	r0, r5
 801b8b0:	f001 f8fe 	bl	801cab0 <__smakebuf_r>
 801b8b4:	89a0      	ldrh	r0, [r4, #12]
 801b8b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b8ba:	f010 0301 	ands.w	r3, r0, #1
 801b8be:	d00a      	beq.n	801b8d6 <__swsetup_r+0x9e>
 801b8c0:	2300      	movs	r3, #0
 801b8c2:	60a3      	str	r3, [r4, #8]
 801b8c4:	6963      	ldr	r3, [r4, #20]
 801b8c6:	425b      	negs	r3, r3
 801b8c8:	61a3      	str	r3, [r4, #24]
 801b8ca:	6923      	ldr	r3, [r4, #16]
 801b8cc:	b943      	cbnz	r3, 801b8e0 <__swsetup_r+0xa8>
 801b8ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b8d2:	d1c4      	bne.n	801b85e <__swsetup_r+0x26>
 801b8d4:	bd38      	pop	{r3, r4, r5, pc}
 801b8d6:	0781      	lsls	r1, r0, #30
 801b8d8:	bf58      	it	pl
 801b8da:	6963      	ldrpl	r3, [r4, #20]
 801b8dc:	60a3      	str	r3, [r4, #8]
 801b8de:	e7f4      	b.n	801b8ca <__swsetup_r+0x92>
 801b8e0:	2000      	movs	r0, #0
 801b8e2:	e7f7      	b.n	801b8d4 <__swsetup_r+0x9c>
 801b8e4:	20000098 	.word	0x20000098

0801b8e8 <register_fini>:
 801b8e8:	4b02      	ldr	r3, [pc, #8]	; (801b8f4 <register_fini+0xc>)
 801b8ea:	b113      	cbz	r3, 801b8f2 <register_fini+0xa>
 801b8ec:	4802      	ldr	r0, [pc, #8]	; (801b8f8 <register_fini+0x10>)
 801b8ee:	f000 b805 	b.w	801b8fc <atexit>
 801b8f2:	4770      	bx	lr
 801b8f4:	00000000 	.word	0x00000000
 801b8f8:	0801c7c1 	.word	0x0801c7c1

0801b8fc <atexit>:
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	4601      	mov	r1, r0
 801b900:	461a      	mov	r2, r3
 801b902:	4618      	mov	r0, r3
 801b904:	f002 ba5c 	b.w	801ddc0 <__register_exitproc>

0801b908 <quorem>:
 801b908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b90c:	6903      	ldr	r3, [r0, #16]
 801b90e:	690c      	ldr	r4, [r1, #16]
 801b910:	42a3      	cmp	r3, r4
 801b912:	4607      	mov	r7, r0
 801b914:	db7d      	blt.n	801ba12 <quorem+0x10a>
 801b916:	3c01      	subs	r4, #1
 801b918:	f101 0814 	add.w	r8, r1, #20
 801b91c:	f100 0514 	add.w	r5, r0, #20
 801b920:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b924:	9301      	str	r3, [sp, #4]
 801b926:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b92a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b92e:	3301      	adds	r3, #1
 801b930:	429a      	cmp	r2, r3
 801b932:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b936:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b93a:	fbb2 f6f3 	udiv	r6, r2, r3
 801b93e:	d32e      	bcc.n	801b99e <quorem+0x96>
 801b940:	f04f 0e00 	mov.w	lr, #0
 801b944:	4640      	mov	r0, r8
 801b946:	46ac      	mov	ip, r5
 801b948:	46f2      	mov	sl, lr
 801b94a:	f850 2b04 	ldr.w	r2, [r0], #4
 801b94e:	b293      	uxth	r3, r2
 801b950:	fb06 e303 	mla	r3, r6, r3, lr
 801b954:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b958:	0c12      	lsrs	r2, r2, #16
 801b95a:	b29b      	uxth	r3, r3
 801b95c:	fb06 e202 	mla	r2, r6, r2, lr
 801b960:	ebaa 0303 	sub.w	r3, sl, r3
 801b964:	f8dc a000 	ldr.w	sl, [ip]
 801b968:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b96c:	b292      	uxth	r2, r2
 801b96e:	fa13 f38a 	uxtah	r3, r3, sl
 801b972:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b976:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b97a:	b29b      	uxth	r3, r3
 801b97c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b980:	4581      	cmp	r9, r0
 801b982:	f84c 3b04 	str.w	r3, [ip], #4
 801b986:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b98a:	d2de      	bcs.n	801b94a <quorem+0x42>
 801b98c:	f855 300b 	ldr.w	r3, [r5, fp]
 801b990:	b92b      	cbnz	r3, 801b99e <quorem+0x96>
 801b992:	9b01      	ldr	r3, [sp, #4]
 801b994:	3b04      	subs	r3, #4
 801b996:	429d      	cmp	r5, r3
 801b998:	461a      	mov	r2, r3
 801b99a:	d32e      	bcc.n	801b9fa <quorem+0xf2>
 801b99c:	613c      	str	r4, [r7, #16]
 801b99e:	4638      	mov	r0, r7
 801b9a0:	f001 faf6 	bl	801cf90 <__mcmp>
 801b9a4:	2800      	cmp	r0, #0
 801b9a6:	db24      	blt.n	801b9f2 <quorem+0xea>
 801b9a8:	3601      	adds	r6, #1
 801b9aa:	4628      	mov	r0, r5
 801b9ac:	f04f 0c00 	mov.w	ip, #0
 801b9b0:	f858 2b04 	ldr.w	r2, [r8], #4
 801b9b4:	f8d0 e000 	ldr.w	lr, [r0]
 801b9b8:	b293      	uxth	r3, r2
 801b9ba:	ebac 0303 	sub.w	r3, ip, r3
 801b9be:	0c12      	lsrs	r2, r2, #16
 801b9c0:	fa13 f38e 	uxtah	r3, r3, lr
 801b9c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b9c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b9cc:	b29b      	uxth	r3, r3
 801b9ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b9d2:	45c1      	cmp	r9, r8
 801b9d4:	f840 3b04 	str.w	r3, [r0], #4
 801b9d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b9dc:	d2e8      	bcs.n	801b9b0 <quorem+0xa8>
 801b9de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b9e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b9e6:	b922      	cbnz	r2, 801b9f2 <quorem+0xea>
 801b9e8:	3b04      	subs	r3, #4
 801b9ea:	429d      	cmp	r5, r3
 801b9ec:	461a      	mov	r2, r3
 801b9ee:	d30a      	bcc.n	801ba06 <quorem+0xfe>
 801b9f0:	613c      	str	r4, [r7, #16]
 801b9f2:	4630      	mov	r0, r6
 801b9f4:	b003      	add	sp, #12
 801b9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9fa:	6812      	ldr	r2, [r2, #0]
 801b9fc:	3b04      	subs	r3, #4
 801b9fe:	2a00      	cmp	r2, #0
 801ba00:	d1cc      	bne.n	801b99c <quorem+0x94>
 801ba02:	3c01      	subs	r4, #1
 801ba04:	e7c7      	b.n	801b996 <quorem+0x8e>
 801ba06:	6812      	ldr	r2, [r2, #0]
 801ba08:	3b04      	subs	r3, #4
 801ba0a:	2a00      	cmp	r2, #0
 801ba0c:	d1f0      	bne.n	801b9f0 <quorem+0xe8>
 801ba0e:	3c01      	subs	r4, #1
 801ba10:	e7eb      	b.n	801b9ea <quorem+0xe2>
 801ba12:	2000      	movs	r0, #0
 801ba14:	e7ee      	b.n	801b9f4 <quorem+0xec>
	...

0801ba18 <_dtoa_r>:
 801ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba1c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801ba1e:	b097      	sub	sp, #92	; 0x5c
 801ba20:	4681      	mov	r9, r0
 801ba22:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801ba24:	4614      	mov	r4, r2
 801ba26:	461d      	mov	r5, r3
 801ba28:	4692      	mov	sl, r2
 801ba2a:	469b      	mov	fp, r3
 801ba2c:	b149      	cbz	r1, 801ba42 <_dtoa_r+0x2a>
 801ba2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ba30:	604a      	str	r2, [r1, #4]
 801ba32:	2301      	movs	r3, #1
 801ba34:	4093      	lsls	r3, r2
 801ba36:	608b      	str	r3, [r1, #8]
 801ba38:	f001 f89f 	bl	801cb7a <_Bfree>
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 801ba42:	1e2b      	subs	r3, r5, #0
 801ba44:	bfaa      	itet	ge
 801ba46:	2300      	movge	r3, #0
 801ba48:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801ba4c:	6033      	strge	r3, [r6, #0]
 801ba4e:	4ba0      	ldr	r3, [pc, #640]	; (801bcd0 <_dtoa_r+0x2b8>)
 801ba50:	bfbc      	itt	lt
 801ba52:	2201      	movlt	r2, #1
 801ba54:	6032      	strlt	r2, [r6, #0]
 801ba56:	ea33 030b 	bics.w	r3, r3, fp
 801ba5a:	d119      	bne.n	801ba90 <_dtoa_r+0x78>
 801ba5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801ba5e:	f242 730f 	movw	r3, #9999	; 0x270f
 801ba62:	6013      	str	r3, [r2, #0]
 801ba64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ba68:	4323      	orrs	r3, r4
 801ba6a:	f000 8575 	beq.w	801c558 <_dtoa_r+0xb40>
 801ba6e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ba70:	b90b      	cbnz	r3, 801ba76 <_dtoa_r+0x5e>
 801ba72:	4b98      	ldr	r3, [pc, #608]	; (801bcd4 <_dtoa_r+0x2bc>)
 801ba74:	e020      	b.n	801bab8 <_dtoa_r+0xa0>
 801ba76:	4b97      	ldr	r3, [pc, #604]	; (801bcd4 <_dtoa_r+0x2bc>)
 801ba78:	9304      	str	r3, [sp, #16]
 801ba7a:	3303      	adds	r3, #3
 801ba7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801ba7e:	6013      	str	r3, [r2, #0]
 801ba80:	9804      	ldr	r0, [sp, #16]
 801ba82:	b017      	add	sp, #92	; 0x5c
 801ba84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba88:	4b93      	ldr	r3, [pc, #588]	; (801bcd8 <_dtoa_r+0x2c0>)
 801ba8a:	9304      	str	r3, [sp, #16]
 801ba8c:	3308      	adds	r3, #8
 801ba8e:	e7f5      	b.n	801ba7c <_dtoa_r+0x64>
 801ba90:	2200      	movs	r2, #0
 801ba92:	2300      	movs	r3, #0
 801ba94:	4650      	mov	r0, sl
 801ba96:	4659      	mov	r1, fp
 801ba98:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 801ba9c:	f7ed f9ec 	bl	8008e78 <__aeabi_dcmpeq>
 801baa0:	4607      	mov	r7, r0
 801baa2:	b158      	cbz	r0, 801babc <_dtoa_r+0xa4>
 801baa4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801baa6:	2301      	movs	r3, #1
 801baa8:	6013      	str	r3, [r2, #0]
 801baaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801baac:	2b00      	cmp	r3, #0
 801baae:	f000 8550 	beq.w	801c552 <_dtoa_r+0xb3a>
 801bab2:	488a      	ldr	r0, [pc, #552]	; (801bcdc <_dtoa_r+0x2c4>)
 801bab4:	6018      	str	r0, [r3, #0]
 801bab6:	1e43      	subs	r3, r0, #1
 801bab8:	9304      	str	r3, [sp, #16]
 801baba:	e7e1      	b.n	801ba80 <_dtoa_r+0x68>
 801babc:	ab14      	add	r3, sp, #80	; 0x50
 801babe:	9301      	str	r3, [sp, #4]
 801bac0:	ab15      	add	r3, sp, #84	; 0x54
 801bac2:	9300      	str	r3, [sp, #0]
 801bac4:	4648      	mov	r0, r9
 801bac6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801baca:	f001 fb05 	bl	801d0d8 <__d2b>
 801bace:	f3cb 560a 	ubfx	r6, fp, #20, #11
 801bad2:	9003      	str	r0, [sp, #12]
 801bad4:	2e00      	cmp	r6, #0
 801bad6:	d07b      	beq.n	801bbd0 <_dtoa_r+0x1b8>
 801bad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bada:	9713      	str	r7, [sp, #76]	; 0x4c
 801badc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bae4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801bae8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801baec:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 801baf0:	4b7b      	ldr	r3, [pc, #492]	; (801bce0 <_dtoa_r+0x2c8>)
 801baf2:	2200      	movs	r2, #0
 801baf4:	f7ec fda0 	bl	8008638 <__aeabi_dsub>
 801baf8:	a36f      	add	r3, pc, #444	; (adr r3, 801bcb8 <_dtoa_r+0x2a0>)
 801bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bafe:	f7ec ff53 	bl	80089a8 <__aeabi_dmul>
 801bb02:	a36f      	add	r3, pc, #444	; (adr r3, 801bcc0 <_dtoa_r+0x2a8>)
 801bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb08:	f7ec fd98 	bl	800863c <__adddf3>
 801bb0c:	4604      	mov	r4, r0
 801bb0e:	4630      	mov	r0, r6
 801bb10:	460d      	mov	r5, r1
 801bb12:	f7ec fedf 	bl	80088d4 <__aeabi_i2d>
 801bb16:	a36c      	add	r3, pc, #432	; (adr r3, 801bcc8 <_dtoa_r+0x2b0>)
 801bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb1c:	f7ec ff44 	bl	80089a8 <__aeabi_dmul>
 801bb20:	4602      	mov	r2, r0
 801bb22:	460b      	mov	r3, r1
 801bb24:	4620      	mov	r0, r4
 801bb26:	4629      	mov	r1, r5
 801bb28:	f7ec fd88 	bl	800863c <__adddf3>
 801bb2c:	4604      	mov	r4, r0
 801bb2e:	460d      	mov	r5, r1
 801bb30:	f7ed f9ea 	bl	8008f08 <__aeabi_d2iz>
 801bb34:	2200      	movs	r2, #0
 801bb36:	4680      	mov	r8, r0
 801bb38:	2300      	movs	r3, #0
 801bb3a:	4620      	mov	r0, r4
 801bb3c:	4629      	mov	r1, r5
 801bb3e:	f7ed f9a5 	bl	8008e8c <__aeabi_dcmplt>
 801bb42:	b148      	cbz	r0, 801bb58 <_dtoa_r+0x140>
 801bb44:	4640      	mov	r0, r8
 801bb46:	f7ec fec5 	bl	80088d4 <__aeabi_i2d>
 801bb4a:	4622      	mov	r2, r4
 801bb4c:	462b      	mov	r3, r5
 801bb4e:	f7ed f993 	bl	8008e78 <__aeabi_dcmpeq>
 801bb52:	b908      	cbnz	r0, 801bb58 <_dtoa_r+0x140>
 801bb54:	f108 38ff 	add.w	r8, r8, #4294967295
 801bb58:	f1b8 0f16 	cmp.w	r8, #22
 801bb5c:	d855      	bhi.n	801bc0a <_dtoa_r+0x1f2>
 801bb5e:	4b61      	ldr	r3, [pc, #388]	; (801bce4 <_dtoa_r+0x2cc>)
 801bb60:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bb6c:	f7ed f98e 	bl	8008e8c <__aeabi_dcmplt>
 801bb70:	2800      	cmp	r0, #0
 801bb72:	d04c      	beq.n	801bc0e <_dtoa_r+0x1f6>
 801bb74:	f108 38ff 	add.w	r8, r8, #4294967295
 801bb78:	2300      	movs	r3, #0
 801bb7a:	930f      	str	r3, [sp, #60]	; 0x3c
 801bb7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bb7e:	1b9e      	subs	r6, r3, r6
 801bb80:	1e73      	subs	r3, r6, #1
 801bb82:	9309      	str	r3, [sp, #36]	; 0x24
 801bb84:	bf45      	ittet	mi
 801bb86:	f1c6 0301 	rsbmi	r3, r6, #1
 801bb8a:	9306      	strmi	r3, [sp, #24]
 801bb8c:	2300      	movpl	r3, #0
 801bb8e:	2300      	movmi	r3, #0
 801bb90:	bf4c      	ite	mi
 801bb92:	9309      	strmi	r3, [sp, #36]	; 0x24
 801bb94:	9306      	strpl	r3, [sp, #24]
 801bb96:	f1b8 0f00 	cmp.w	r8, #0
 801bb9a:	db3a      	blt.n	801bc12 <_dtoa_r+0x1fa>
 801bb9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb9e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801bba2:	4443      	add	r3, r8
 801bba4:	9309      	str	r3, [sp, #36]	; 0x24
 801bba6:	2300      	movs	r3, #0
 801bba8:	930a      	str	r3, [sp, #40]	; 0x28
 801bbaa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bbac:	2b09      	cmp	r3, #9
 801bbae:	d86a      	bhi.n	801bc86 <_dtoa_r+0x26e>
 801bbb0:	2b05      	cmp	r3, #5
 801bbb2:	bfc4      	itt	gt
 801bbb4:	3b04      	subgt	r3, #4
 801bbb6:	9320      	strgt	r3, [sp, #128]	; 0x80
 801bbb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bbba:	f1a3 0302 	sub.w	r3, r3, #2
 801bbbe:	bfcc      	ite	gt
 801bbc0:	2400      	movgt	r4, #0
 801bbc2:	2401      	movle	r4, #1
 801bbc4:	2b03      	cmp	r3, #3
 801bbc6:	d869      	bhi.n	801bc9c <_dtoa_r+0x284>
 801bbc8:	e8df f003 	tbb	[pc, r3]
 801bbcc:	5b383a2d 	.word	0x5b383a2d
 801bbd0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 801bbd4:	441e      	add	r6, r3
 801bbd6:	f206 4332 	addw	r3, r6, #1074	; 0x432
 801bbda:	2b20      	cmp	r3, #32
 801bbdc:	bfc3      	ittte	gt
 801bbde:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bbe2:	f206 4012 	addwgt	r0, r6, #1042	; 0x412
 801bbe6:	fa0b f303 	lslgt.w	r3, fp, r3
 801bbea:	f1c3 0320 	rsble	r3, r3, #32
 801bbee:	bfc6      	itte	gt
 801bbf0:	fa24 f000 	lsrgt.w	r0, r4, r0
 801bbf4:	4318      	orrgt	r0, r3
 801bbf6:	fa04 f003 	lslle.w	r0, r4, r3
 801bbfa:	f7ec fe5b 	bl	80088b4 <__aeabi_ui2d>
 801bbfe:	2301      	movs	r3, #1
 801bc00:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801bc04:	3e01      	subs	r6, #1
 801bc06:	9313      	str	r3, [sp, #76]	; 0x4c
 801bc08:	e772      	b.n	801baf0 <_dtoa_r+0xd8>
 801bc0a:	2301      	movs	r3, #1
 801bc0c:	e7b5      	b.n	801bb7a <_dtoa_r+0x162>
 801bc0e:	900f      	str	r0, [sp, #60]	; 0x3c
 801bc10:	e7b4      	b.n	801bb7c <_dtoa_r+0x164>
 801bc12:	9b06      	ldr	r3, [sp, #24]
 801bc14:	eba3 0308 	sub.w	r3, r3, r8
 801bc18:	9306      	str	r3, [sp, #24]
 801bc1a:	f1c8 0300 	rsb	r3, r8, #0
 801bc1e:	930a      	str	r3, [sp, #40]	; 0x28
 801bc20:	2300      	movs	r3, #0
 801bc22:	930e      	str	r3, [sp, #56]	; 0x38
 801bc24:	e7c1      	b.n	801bbaa <_dtoa_r+0x192>
 801bc26:	2300      	movs	r3, #0
 801bc28:	930b      	str	r3, [sp, #44]	; 0x2c
 801bc2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	dc38      	bgt.n	801bca2 <_dtoa_r+0x28a>
 801bc30:	2301      	movs	r3, #1
 801bc32:	9308      	str	r3, [sp, #32]
 801bc34:	9305      	str	r3, [sp, #20]
 801bc36:	461a      	mov	r2, r3
 801bc38:	9221      	str	r2, [sp, #132]	; 0x84
 801bc3a:	e00b      	b.n	801bc54 <_dtoa_r+0x23c>
 801bc3c:	2301      	movs	r3, #1
 801bc3e:	e7f3      	b.n	801bc28 <_dtoa_r+0x210>
 801bc40:	2300      	movs	r3, #0
 801bc42:	930b      	str	r3, [sp, #44]	; 0x2c
 801bc44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc46:	4443      	add	r3, r8
 801bc48:	9308      	str	r3, [sp, #32]
 801bc4a:	3301      	adds	r3, #1
 801bc4c:	2b01      	cmp	r3, #1
 801bc4e:	9305      	str	r3, [sp, #20]
 801bc50:	bfb8      	it	lt
 801bc52:	2301      	movlt	r3, #1
 801bc54:	2200      	movs	r2, #0
 801bc56:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 801bc5a:	2204      	movs	r2, #4
 801bc5c:	f102 0014 	add.w	r0, r2, #20
 801bc60:	4298      	cmp	r0, r3
 801bc62:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 801bc66:	d920      	bls.n	801bcaa <_dtoa_r+0x292>
 801bc68:	4648      	mov	r0, r9
 801bc6a:	f000 ff61 	bl	801cb30 <_Balloc>
 801bc6e:	9004      	str	r0, [sp, #16]
 801bc70:	2800      	cmp	r0, #0
 801bc72:	d13d      	bne.n	801bcf0 <_dtoa_r+0x2d8>
 801bc74:	4b1c      	ldr	r3, [pc, #112]	; (801bce8 <_dtoa_r+0x2d0>)
 801bc76:	4602      	mov	r2, r0
 801bc78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801bc7c:	481b      	ldr	r0, [pc, #108]	; (801bcec <_dtoa_r+0x2d4>)
 801bc7e:	f002 f8e1 	bl	801de44 <__assert_func>
 801bc82:	2301      	movs	r3, #1
 801bc84:	e7dd      	b.n	801bc42 <_dtoa_r+0x22a>
 801bc86:	2401      	movs	r4, #1
 801bc88:	2300      	movs	r3, #0
 801bc8a:	9320      	str	r3, [sp, #128]	; 0x80
 801bc8c:	940b      	str	r4, [sp, #44]	; 0x2c
 801bc8e:	f04f 33ff 	mov.w	r3, #4294967295
 801bc92:	9308      	str	r3, [sp, #32]
 801bc94:	9305      	str	r3, [sp, #20]
 801bc96:	2200      	movs	r2, #0
 801bc98:	2312      	movs	r3, #18
 801bc9a:	e7cd      	b.n	801bc38 <_dtoa_r+0x220>
 801bc9c:	2301      	movs	r3, #1
 801bc9e:	930b      	str	r3, [sp, #44]	; 0x2c
 801bca0:	e7f5      	b.n	801bc8e <_dtoa_r+0x276>
 801bca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bca4:	9308      	str	r3, [sp, #32]
 801bca6:	9305      	str	r3, [sp, #20]
 801bca8:	e7d4      	b.n	801bc54 <_dtoa_r+0x23c>
 801bcaa:	3101      	adds	r1, #1
 801bcac:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 801bcb0:	0052      	lsls	r2, r2, #1
 801bcb2:	e7d3      	b.n	801bc5c <_dtoa_r+0x244>
 801bcb4:	f3af 8000 	nop.w
 801bcb8:	636f4361 	.word	0x636f4361
 801bcbc:	3fd287a7 	.word	0x3fd287a7
 801bcc0:	8b60c8b3 	.word	0x8b60c8b3
 801bcc4:	3fc68a28 	.word	0x3fc68a28
 801bcc8:	509f79fb 	.word	0x509f79fb
 801bccc:	3fd34413 	.word	0x3fd34413
 801bcd0:	7ff00000 	.word	0x7ff00000
 801bcd4:	08020670 	.word	0x08020670
 801bcd8:	08020674 	.word	0x08020674
 801bcdc:	0802062f 	.word	0x0802062f
 801bce0:	3ff80000 	.word	0x3ff80000
 801bce4:	08020770 	.word	0x08020770
 801bce8:	0802067d 	.word	0x0802067d
 801bcec:	0802068e 	.word	0x0802068e
 801bcf0:	9b04      	ldr	r3, [sp, #16]
 801bcf2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 801bcf6:	9b05      	ldr	r3, [sp, #20]
 801bcf8:	2b0e      	cmp	r3, #14
 801bcfa:	f200 80a1 	bhi.w	801be40 <_dtoa_r+0x428>
 801bcfe:	2c00      	cmp	r4, #0
 801bd00:	f000 809e 	beq.w	801be40 <_dtoa_r+0x428>
 801bd04:	f1b8 0f00 	cmp.w	r8, #0
 801bd08:	dd34      	ble.n	801bd74 <_dtoa_r+0x35c>
 801bd0a:	4a96      	ldr	r2, [pc, #600]	; (801bf64 <_dtoa_r+0x54c>)
 801bd0c:	f008 030f 	and.w	r3, r8, #15
 801bd10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bd14:	e9d3 3400 	ldrd	r3, r4, [r3]
 801bd18:	f418 7f80 	tst.w	r8, #256	; 0x100
 801bd1c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801bd20:	ea4f 1528 	mov.w	r5, r8, asr #4
 801bd24:	d016      	beq.n	801bd54 <_dtoa_r+0x33c>
 801bd26:	4b90      	ldr	r3, [pc, #576]	; (801bf68 <_dtoa_r+0x550>)
 801bd28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bd2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bd30:	f7ec ff64 	bl	8008bfc <__aeabi_ddiv>
 801bd34:	f005 050f 	and.w	r5, r5, #15
 801bd38:	4682      	mov	sl, r0
 801bd3a:	468b      	mov	fp, r1
 801bd3c:	2603      	movs	r6, #3
 801bd3e:	4c8a      	ldr	r4, [pc, #552]	; (801bf68 <_dtoa_r+0x550>)
 801bd40:	b955      	cbnz	r5, 801bd58 <_dtoa_r+0x340>
 801bd42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801bd46:	4650      	mov	r0, sl
 801bd48:	4659      	mov	r1, fp
 801bd4a:	f7ec ff57 	bl	8008bfc <__aeabi_ddiv>
 801bd4e:	4682      	mov	sl, r0
 801bd50:	468b      	mov	fp, r1
 801bd52:	e028      	b.n	801bda6 <_dtoa_r+0x38e>
 801bd54:	2602      	movs	r6, #2
 801bd56:	e7f2      	b.n	801bd3e <_dtoa_r+0x326>
 801bd58:	07e9      	lsls	r1, r5, #31
 801bd5a:	d508      	bpl.n	801bd6e <_dtoa_r+0x356>
 801bd5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801bd60:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bd64:	f7ec fe20 	bl	80089a8 <__aeabi_dmul>
 801bd68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801bd6c:	3601      	adds	r6, #1
 801bd6e:	106d      	asrs	r5, r5, #1
 801bd70:	3408      	adds	r4, #8
 801bd72:	e7e5      	b.n	801bd40 <_dtoa_r+0x328>
 801bd74:	f000 809e 	beq.w	801beb4 <_dtoa_r+0x49c>
 801bd78:	f1c8 0400 	rsb	r4, r8, #0
 801bd7c:	4b79      	ldr	r3, [pc, #484]	; (801bf64 <_dtoa_r+0x54c>)
 801bd7e:	4d7a      	ldr	r5, [pc, #488]	; (801bf68 <_dtoa_r+0x550>)
 801bd80:	f004 020f 	and.w	r2, r4, #15
 801bd84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801bd90:	f7ec fe0a 	bl	80089a8 <__aeabi_dmul>
 801bd94:	1124      	asrs	r4, r4, #4
 801bd96:	4682      	mov	sl, r0
 801bd98:	468b      	mov	fp, r1
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	2602      	movs	r6, #2
 801bd9e:	2c00      	cmp	r4, #0
 801bda0:	d17d      	bne.n	801be9e <_dtoa_r+0x486>
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d1d3      	bne.n	801bd4e <_dtoa_r+0x336>
 801bda6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	f000 8085 	beq.w	801beb8 <_dtoa_r+0x4a0>
 801bdae:	4b6f      	ldr	r3, [pc, #444]	; (801bf6c <_dtoa_r+0x554>)
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	4650      	mov	r0, sl
 801bdb4:	4659      	mov	r1, fp
 801bdb6:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 801bdba:	f7ed f867 	bl	8008e8c <__aeabi_dcmplt>
 801bdbe:	2800      	cmp	r0, #0
 801bdc0:	d07a      	beq.n	801beb8 <_dtoa_r+0x4a0>
 801bdc2:	9b05      	ldr	r3, [sp, #20]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d077      	beq.n	801beb8 <_dtoa_r+0x4a0>
 801bdc8:	9b08      	ldr	r3, [sp, #32]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	dd36      	ble.n	801be3c <_dtoa_r+0x424>
 801bdce:	4650      	mov	r0, sl
 801bdd0:	4659      	mov	r1, fp
 801bdd2:	4b67      	ldr	r3, [pc, #412]	; (801bf70 <_dtoa_r+0x558>)
 801bdd4:	2200      	movs	r2, #0
 801bdd6:	f7ec fde7 	bl	80089a8 <__aeabi_dmul>
 801bdda:	9c08      	ldr	r4, [sp, #32]
 801bddc:	f108 35ff 	add.w	r5, r8, #4294967295
 801bde0:	4682      	mov	sl, r0
 801bde2:	468b      	mov	fp, r1
 801bde4:	3601      	adds	r6, #1
 801bde6:	4630      	mov	r0, r6
 801bde8:	f7ec fd74 	bl	80088d4 <__aeabi_i2d>
 801bdec:	4652      	mov	r2, sl
 801bdee:	465b      	mov	r3, fp
 801bdf0:	f7ec fdda 	bl	80089a8 <__aeabi_dmul>
 801bdf4:	4b5f      	ldr	r3, [pc, #380]	; (801bf74 <_dtoa_r+0x55c>)
 801bdf6:	2200      	movs	r2, #0
 801bdf8:	f7ec fc20 	bl	800863c <__adddf3>
 801bdfc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801be00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801be04:	9611      	str	r6, [sp, #68]	; 0x44
 801be06:	2c00      	cmp	r4, #0
 801be08:	d159      	bne.n	801bebe <_dtoa_r+0x4a6>
 801be0a:	4b5b      	ldr	r3, [pc, #364]	; (801bf78 <_dtoa_r+0x560>)
 801be0c:	2200      	movs	r2, #0
 801be0e:	4650      	mov	r0, sl
 801be10:	4659      	mov	r1, fp
 801be12:	f7ec fc11 	bl	8008638 <__aeabi_dsub>
 801be16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801be18:	4633      	mov	r3, r6
 801be1a:	4682      	mov	sl, r0
 801be1c:	468b      	mov	fp, r1
 801be1e:	f7ed f853 	bl	8008ec8 <__aeabi_dcmpgt>
 801be22:	2800      	cmp	r0, #0
 801be24:	f040 828b 	bne.w	801c33e <_dtoa_r+0x926>
 801be28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801be2a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801be2e:	4650      	mov	r0, sl
 801be30:	4659      	mov	r1, fp
 801be32:	f7ed f82b 	bl	8008e8c <__aeabi_dcmplt>
 801be36:	2800      	cmp	r0, #0
 801be38:	f040 827f 	bne.w	801c33a <_dtoa_r+0x922>
 801be3c:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 801be40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801be42:	2b00      	cmp	r3, #0
 801be44:	f2c0 814d 	blt.w	801c0e2 <_dtoa_r+0x6ca>
 801be48:	f1b8 0f0e 	cmp.w	r8, #14
 801be4c:	f300 8149 	bgt.w	801c0e2 <_dtoa_r+0x6ca>
 801be50:	4b44      	ldr	r3, [pc, #272]	; (801bf64 <_dtoa_r+0x54c>)
 801be52:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801be56:	e9d3 3400 	ldrd	r3, r4, [r3]
 801be5a:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801be5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801be60:	2b00      	cmp	r3, #0
 801be62:	f280 80d6 	bge.w	801c012 <_dtoa_r+0x5fa>
 801be66:	9b05      	ldr	r3, [sp, #20]
 801be68:	2b00      	cmp	r3, #0
 801be6a:	f300 80d2 	bgt.w	801c012 <_dtoa_r+0x5fa>
 801be6e:	f040 8263 	bne.w	801c338 <_dtoa_r+0x920>
 801be72:	4b41      	ldr	r3, [pc, #260]	; (801bf78 <_dtoa_r+0x560>)
 801be74:	2200      	movs	r2, #0
 801be76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801be7a:	f7ec fd95 	bl	80089a8 <__aeabi_dmul>
 801be7e:	4652      	mov	r2, sl
 801be80:	465b      	mov	r3, fp
 801be82:	f7ed f817 	bl	8008eb4 <__aeabi_dcmpge>
 801be86:	9c05      	ldr	r4, [sp, #20]
 801be88:	4625      	mov	r5, r4
 801be8a:	2800      	cmp	r0, #0
 801be8c:	f040 823c 	bne.w	801c308 <_dtoa_r+0x8f0>
 801be90:	9e04      	ldr	r6, [sp, #16]
 801be92:	2331      	movs	r3, #49	; 0x31
 801be94:	f806 3b01 	strb.w	r3, [r6], #1
 801be98:	f108 0801 	add.w	r8, r8, #1
 801be9c:	e238      	b.n	801c310 <_dtoa_r+0x8f8>
 801be9e:	07e2      	lsls	r2, r4, #31
 801bea0:	d505      	bpl.n	801beae <_dtoa_r+0x496>
 801bea2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bea6:	f7ec fd7f 	bl	80089a8 <__aeabi_dmul>
 801beaa:	3601      	adds	r6, #1
 801beac:	2301      	movs	r3, #1
 801beae:	1064      	asrs	r4, r4, #1
 801beb0:	3508      	adds	r5, #8
 801beb2:	e774      	b.n	801bd9e <_dtoa_r+0x386>
 801beb4:	2602      	movs	r6, #2
 801beb6:	e776      	b.n	801bda6 <_dtoa_r+0x38e>
 801beb8:	9c05      	ldr	r4, [sp, #20]
 801beba:	4645      	mov	r5, r8
 801bebc:	e793      	b.n	801bde6 <_dtoa_r+0x3ce>
 801bebe:	9904      	ldr	r1, [sp, #16]
 801bec0:	4b28      	ldr	r3, [pc, #160]	; (801bf64 <_dtoa_r+0x54c>)
 801bec2:	4421      	add	r1, r4
 801bec4:	9112      	str	r1, [sp, #72]	; 0x48
 801bec6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bec8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801becc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801bed0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bed4:	2900      	cmp	r1, #0
 801bed6:	d053      	beq.n	801bf80 <_dtoa_r+0x568>
 801bed8:	4928      	ldr	r1, [pc, #160]	; (801bf7c <_dtoa_r+0x564>)
 801beda:	2000      	movs	r0, #0
 801bedc:	f7ec fe8e 	bl	8008bfc <__aeabi_ddiv>
 801bee0:	4632      	mov	r2, r6
 801bee2:	463b      	mov	r3, r7
 801bee4:	f7ec fba8 	bl	8008638 <__aeabi_dsub>
 801bee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801beec:	9e04      	ldr	r6, [sp, #16]
 801beee:	4659      	mov	r1, fp
 801bef0:	4650      	mov	r0, sl
 801bef2:	f7ed f809 	bl	8008f08 <__aeabi_d2iz>
 801bef6:	4604      	mov	r4, r0
 801bef8:	f7ec fcec 	bl	80088d4 <__aeabi_i2d>
 801befc:	4602      	mov	r2, r0
 801befe:	460b      	mov	r3, r1
 801bf00:	4650      	mov	r0, sl
 801bf02:	4659      	mov	r1, fp
 801bf04:	f7ec fb98 	bl	8008638 <__aeabi_dsub>
 801bf08:	3430      	adds	r4, #48	; 0x30
 801bf0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801bf0e:	f806 4b01 	strb.w	r4, [r6], #1
 801bf12:	4682      	mov	sl, r0
 801bf14:	468b      	mov	fp, r1
 801bf16:	f7ec ffb9 	bl	8008e8c <__aeabi_dcmplt>
 801bf1a:	2800      	cmp	r0, #0
 801bf1c:	d171      	bne.n	801c002 <_dtoa_r+0x5ea>
 801bf1e:	4652      	mov	r2, sl
 801bf20:	465b      	mov	r3, fp
 801bf22:	4912      	ldr	r1, [pc, #72]	; (801bf6c <_dtoa_r+0x554>)
 801bf24:	2000      	movs	r0, #0
 801bf26:	f7ec fb87 	bl	8008638 <__aeabi_dsub>
 801bf2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801bf2e:	f7ec ffad 	bl	8008e8c <__aeabi_dcmplt>
 801bf32:	2800      	cmp	r0, #0
 801bf34:	f040 80b7 	bne.w	801c0a6 <_dtoa_r+0x68e>
 801bf38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bf3a:	429e      	cmp	r6, r3
 801bf3c:	f43f af7e 	beq.w	801be3c <_dtoa_r+0x424>
 801bf40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801bf44:	4b0a      	ldr	r3, [pc, #40]	; (801bf70 <_dtoa_r+0x558>)
 801bf46:	2200      	movs	r2, #0
 801bf48:	f7ec fd2e 	bl	80089a8 <__aeabi_dmul>
 801bf4c:	4b08      	ldr	r3, [pc, #32]	; (801bf70 <_dtoa_r+0x558>)
 801bf4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801bf52:	2200      	movs	r2, #0
 801bf54:	4650      	mov	r0, sl
 801bf56:	4659      	mov	r1, fp
 801bf58:	f7ec fd26 	bl	80089a8 <__aeabi_dmul>
 801bf5c:	4682      	mov	sl, r0
 801bf5e:	468b      	mov	fp, r1
 801bf60:	e7c5      	b.n	801beee <_dtoa_r+0x4d6>
 801bf62:	bf00      	nop
 801bf64:	08020770 	.word	0x08020770
 801bf68:	08020748 	.word	0x08020748
 801bf6c:	3ff00000 	.word	0x3ff00000
 801bf70:	40240000 	.word	0x40240000
 801bf74:	401c0000 	.word	0x401c0000
 801bf78:	40140000 	.word	0x40140000
 801bf7c:	3fe00000 	.word	0x3fe00000
 801bf80:	4630      	mov	r0, r6
 801bf82:	4639      	mov	r1, r7
 801bf84:	f7ec fd10 	bl	80089a8 <__aeabi_dmul>
 801bf88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801bf8c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801bf8e:	9e04      	ldr	r6, [sp, #16]
 801bf90:	4659      	mov	r1, fp
 801bf92:	4650      	mov	r0, sl
 801bf94:	f7ec ffb8 	bl	8008f08 <__aeabi_d2iz>
 801bf98:	4604      	mov	r4, r0
 801bf9a:	f7ec fc9b 	bl	80088d4 <__aeabi_i2d>
 801bf9e:	3430      	adds	r4, #48	; 0x30
 801bfa0:	4602      	mov	r2, r0
 801bfa2:	460b      	mov	r3, r1
 801bfa4:	4650      	mov	r0, sl
 801bfa6:	4659      	mov	r1, fp
 801bfa8:	f7ec fb46 	bl	8008638 <__aeabi_dsub>
 801bfac:	f806 4b01 	strb.w	r4, [r6], #1
 801bfb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bfb2:	429e      	cmp	r6, r3
 801bfb4:	4682      	mov	sl, r0
 801bfb6:	468b      	mov	fp, r1
 801bfb8:	f04f 0200 	mov.w	r2, #0
 801bfbc:	d123      	bne.n	801c006 <_dtoa_r+0x5ee>
 801bfbe:	4bb0      	ldr	r3, [pc, #704]	; (801c280 <_dtoa_r+0x868>)
 801bfc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801bfc4:	f7ec fb3a 	bl	800863c <__adddf3>
 801bfc8:	4602      	mov	r2, r0
 801bfca:	460b      	mov	r3, r1
 801bfcc:	4650      	mov	r0, sl
 801bfce:	4659      	mov	r1, fp
 801bfd0:	f7ec ff7a 	bl	8008ec8 <__aeabi_dcmpgt>
 801bfd4:	2800      	cmp	r0, #0
 801bfd6:	d166      	bne.n	801c0a6 <_dtoa_r+0x68e>
 801bfd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801bfdc:	49a8      	ldr	r1, [pc, #672]	; (801c280 <_dtoa_r+0x868>)
 801bfde:	2000      	movs	r0, #0
 801bfe0:	f7ec fb2a 	bl	8008638 <__aeabi_dsub>
 801bfe4:	4602      	mov	r2, r0
 801bfe6:	460b      	mov	r3, r1
 801bfe8:	4650      	mov	r0, sl
 801bfea:	4659      	mov	r1, fp
 801bfec:	f7ec ff4e 	bl	8008e8c <__aeabi_dcmplt>
 801bff0:	2800      	cmp	r0, #0
 801bff2:	f43f af23 	beq.w	801be3c <_dtoa_r+0x424>
 801bff6:	463e      	mov	r6, r7
 801bff8:	3f01      	subs	r7, #1
 801bffa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bffe:	2b30      	cmp	r3, #48	; 0x30
 801c000:	d0f9      	beq.n	801bff6 <_dtoa_r+0x5de>
 801c002:	46a8      	mov	r8, r5
 801c004:	e03e      	b.n	801c084 <_dtoa_r+0x66c>
 801c006:	4b9f      	ldr	r3, [pc, #636]	; (801c284 <_dtoa_r+0x86c>)
 801c008:	f7ec fcce 	bl	80089a8 <__aeabi_dmul>
 801c00c:	4682      	mov	sl, r0
 801c00e:	468b      	mov	fp, r1
 801c010:	e7be      	b.n	801bf90 <_dtoa_r+0x578>
 801c012:	465d      	mov	r5, fp
 801c014:	9e04      	ldr	r6, [sp, #16]
 801c016:	f8df b26c 	ldr.w	fp, [pc, #620]	; 801c284 <_dtoa_r+0x86c>
 801c01a:	4654      	mov	r4, sl
 801c01c:	f04f 0a00 	mov.w	sl, #0
 801c020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c024:	4620      	mov	r0, r4
 801c026:	4629      	mov	r1, r5
 801c028:	f7ec fde8 	bl	8008bfc <__aeabi_ddiv>
 801c02c:	f7ec ff6c 	bl	8008f08 <__aeabi_d2iz>
 801c030:	4607      	mov	r7, r0
 801c032:	f7ec fc4f 	bl	80088d4 <__aeabi_i2d>
 801c036:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c03a:	f7ec fcb5 	bl	80089a8 <__aeabi_dmul>
 801c03e:	4602      	mov	r2, r0
 801c040:	460b      	mov	r3, r1
 801c042:	4620      	mov	r0, r4
 801c044:	4629      	mov	r1, r5
 801c046:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801c04a:	f7ec faf5 	bl	8008638 <__aeabi_dsub>
 801c04e:	f806 4b01 	strb.w	r4, [r6], #1
 801c052:	9c04      	ldr	r4, [sp, #16]
 801c054:	9d05      	ldr	r5, [sp, #20]
 801c056:	1b34      	subs	r4, r6, r4
 801c058:	42a5      	cmp	r5, r4
 801c05a:	4602      	mov	r2, r0
 801c05c:	460b      	mov	r3, r1
 801c05e:	d133      	bne.n	801c0c8 <_dtoa_r+0x6b0>
 801c060:	f7ec faec 	bl	800863c <__adddf3>
 801c064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c068:	4604      	mov	r4, r0
 801c06a:	460d      	mov	r5, r1
 801c06c:	f7ec ff2c 	bl	8008ec8 <__aeabi_dcmpgt>
 801c070:	b9c0      	cbnz	r0, 801c0a4 <_dtoa_r+0x68c>
 801c072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c076:	4620      	mov	r0, r4
 801c078:	4629      	mov	r1, r5
 801c07a:	f7ec fefd 	bl	8008e78 <__aeabi_dcmpeq>
 801c07e:	b108      	cbz	r0, 801c084 <_dtoa_r+0x66c>
 801c080:	07fb      	lsls	r3, r7, #31
 801c082:	d40f      	bmi.n	801c0a4 <_dtoa_r+0x68c>
 801c084:	4648      	mov	r0, r9
 801c086:	9903      	ldr	r1, [sp, #12]
 801c088:	f000 fd77 	bl	801cb7a <_Bfree>
 801c08c:	2300      	movs	r3, #0
 801c08e:	7033      	strb	r3, [r6, #0]
 801c090:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c092:	f108 0001 	add.w	r0, r8, #1
 801c096:	6018      	str	r0, [r3, #0]
 801c098:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	f43f acf0 	beq.w	801ba80 <_dtoa_r+0x68>
 801c0a0:	601e      	str	r6, [r3, #0]
 801c0a2:	e4ed      	b.n	801ba80 <_dtoa_r+0x68>
 801c0a4:	4645      	mov	r5, r8
 801c0a6:	4633      	mov	r3, r6
 801c0a8:	461e      	mov	r6, r3
 801c0aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c0ae:	2a39      	cmp	r2, #57	; 0x39
 801c0b0:	d106      	bne.n	801c0c0 <_dtoa_r+0x6a8>
 801c0b2:	9a04      	ldr	r2, [sp, #16]
 801c0b4:	429a      	cmp	r2, r3
 801c0b6:	d1f7      	bne.n	801c0a8 <_dtoa_r+0x690>
 801c0b8:	9904      	ldr	r1, [sp, #16]
 801c0ba:	2230      	movs	r2, #48	; 0x30
 801c0bc:	3501      	adds	r5, #1
 801c0be:	700a      	strb	r2, [r1, #0]
 801c0c0:	781a      	ldrb	r2, [r3, #0]
 801c0c2:	3201      	adds	r2, #1
 801c0c4:	701a      	strb	r2, [r3, #0]
 801c0c6:	e79c      	b.n	801c002 <_dtoa_r+0x5ea>
 801c0c8:	4652      	mov	r2, sl
 801c0ca:	465b      	mov	r3, fp
 801c0cc:	f7ec fc6c 	bl	80089a8 <__aeabi_dmul>
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	2300      	movs	r3, #0
 801c0d4:	4604      	mov	r4, r0
 801c0d6:	460d      	mov	r5, r1
 801c0d8:	f7ec fece 	bl	8008e78 <__aeabi_dcmpeq>
 801c0dc:	2800      	cmp	r0, #0
 801c0de:	d09f      	beq.n	801c020 <_dtoa_r+0x608>
 801c0e0:	e7d0      	b.n	801c084 <_dtoa_r+0x66c>
 801c0e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c0e4:	2a00      	cmp	r2, #0
 801c0e6:	f000 80cf 	beq.w	801c288 <_dtoa_r+0x870>
 801c0ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c0ec:	2a01      	cmp	r2, #1
 801c0ee:	f300 80ad 	bgt.w	801c24c <_dtoa_r+0x834>
 801c0f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c0f4:	2a00      	cmp	r2, #0
 801c0f6:	f000 80a5 	beq.w	801c244 <_dtoa_r+0x82c>
 801c0fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c0fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c100:	9e06      	ldr	r6, [sp, #24]
 801c102:	9a06      	ldr	r2, [sp, #24]
 801c104:	441a      	add	r2, r3
 801c106:	9206      	str	r2, [sp, #24]
 801c108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c10a:	2101      	movs	r1, #1
 801c10c:	441a      	add	r2, r3
 801c10e:	4648      	mov	r0, r9
 801c110:	9209      	str	r2, [sp, #36]	; 0x24
 801c112:	f000 fdcf 	bl	801ccb4 <__i2b>
 801c116:	4605      	mov	r5, r0
 801c118:	2e00      	cmp	r6, #0
 801c11a:	dd0c      	ble.n	801c136 <_dtoa_r+0x71e>
 801c11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c11e:	2b00      	cmp	r3, #0
 801c120:	dd09      	ble.n	801c136 <_dtoa_r+0x71e>
 801c122:	42b3      	cmp	r3, r6
 801c124:	9a06      	ldr	r2, [sp, #24]
 801c126:	bfa8      	it	ge
 801c128:	4633      	movge	r3, r6
 801c12a:	1ad2      	subs	r2, r2, r3
 801c12c:	9206      	str	r2, [sp, #24]
 801c12e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c130:	1af6      	subs	r6, r6, r3
 801c132:	1ad3      	subs	r3, r2, r3
 801c134:	9309      	str	r3, [sp, #36]	; 0x24
 801c136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c138:	b1f3      	cbz	r3, 801c178 <_dtoa_r+0x760>
 801c13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	f000 80a7 	beq.w	801c290 <_dtoa_r+0x878>
 801c142:	2c00      	cmp	r4, #0
 801c144:	dd10      	ble.n	801c168 <_dtoa_r+0x750>
 801c146:	4629      	mov	r1, r5
 801c148:	4622      	mov	r2, r4
 801c14a:	4648      	mov	r0, r9
 801c14c:	f000 fe70 	bl	801ce30 <__pow5mult>
 801c150:	9a03      	ldr	r2, [sp, #12]
 801c152:	4601      	mov	r1, r0
 801c154:	4605      	mov	r5, r0
 801c156:	4648      	mov	r0, r9
 801c158:	f000 fdc2 	bl	801cce0 <__multiply>
 801c15c:	9903      	ldr	r1, [sp, #12]
 801c15e:	4607      	mov	r7, r0
 801c160:	4648      	mov	r0, r9
 801c162:	f000 fd0a 	bl	801cb7a <_Bfree>
 801c166:	9703      	str	r7, [sp, #12]
 801c168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c16a:	1b1a      	subs	r2, r3, r4
 801c16c:	d004      	beq.n	801c178 <_dtoa_r+0x760>
 801c16e:	9903      	ldr	r1, [sp, #12]
 801c170:	4648      	mov	r0, r9
 801c172:	f000 fe5d 	bl	801ce30 <__pow5mult>
 801c176:	9003      	str	r0, [sp, #12]
 801c178:	2101      	movs	r1, #1
 801c17a:	4648      	mov	r0, r9
 801c17c:	f000 fd9a 	bl	801ccb4 <__i2b>
 801c180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c182:	2b00      	cmp	r3, #0
 801c184:	4604      	mov	r4, r0
 801c186:	f340 8085 	ble.w	801c294 <_dtoa_r+0x87c>
 801c18a:	461a      	mov	r2, r3
 801c18c:	4601      	mov	r1, r0
 801c18e:	4648      	mov	r0, r9
 801c190:	f000 fe4e 	bl	801ce30 <__pow5mult>
 801c194:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c196:	2b01      	cmp	r3, #1
 801c198:	4604      	mov	r4, r0
 801c19a:	dd7e      	ble.n	801c29a <_dtoa_r+0x882>
 801c19c:	2700      	movs	r7, #0
 801c19e:	6923      	ldr	r3, [r4, #16]
 801c1a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c1a4:	6918      	ldr	r0, [r3, #16]
 801c1a6:	f000 fd37 	bl	801cc18 <__hi0bits>
 801c1aa:	f1c0 0020 	rsb	r0, r0, #32
 801c1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1b0:	4418      	add	r0, r3
 801c1b2:	f010 001f 	ands.w	r0, r0, #31
 801c1b6:	f000 808e 	beq.w	801c2d6 <_dtoa_r+0x8be>
 801c1ba:	f1c0 0320 	rsb	r3, r0, #32
 801c1be:	2b04      	cmp	r3, #4
 801c1c0:	f340 8087 	ble.w	801c2d2 <_dtoa_r+0x8ba>
 801c1c4:	f1c0 001c 	rsb	r0, r0, #28
 801c1c8:	9b06      	ldr	r3, [sp, #24]
 801c1ca:	4403      	add	r3, r0
 801c1cc:	9306      	str	r3, [sp, #24]
 801c1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1d0:	4403      	add	r3, r0
 801c1d2:	4406      	add	r6, r0
 801c1d4:	9309      	str	r3, [sp, #36]	; 0x24
 801c1d6:	9b06      	ldr	r3, [sp, #24]
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	dd05      	ble.n	801c1e8 <_dtoa_r+0x7d0>
 801c1dc:	9903      	ldr	r1, [sp, #12]
 801c1de:	461a      	mov	r2, r3
 801c1e0:	4648      	mov	r0, r9
 801c1e2:	f000 fe65 	bl	801ceb0 <__lshift>
 801c1e6:	9003      	str	r0, [sp, #12]
 801c1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	dd05      	ble.n	801c1fa <_dtoa_r+0x7e2>
 801c1ee:	4621      	mov	r1, r4
 801c1f0:	461a      	mov	r2, r3
 801c1f2:	4648      	mov	r0, r9
 801c1f4:	f000 fe5c 	bl	801ceb0 <__lshift>
 801c1f8:	4604      	mov	r4, r0
 801c1fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d06c      	beq.n	801c2da <_dtoa_r+0x8c2>
 801c200:	9803      	ldr	r0, [sp, #12]
 801c202:	4621      	mov	r1, r4
 801c204:	f000 fec4 	bl	801cf90 <__mcmp>
 801c208:	2800      	cmp	r0, #0
 801c20a:	da66      	bge.n	801c2da <_dtoa_r+0x8c2>
 801c20c:	2300      	movs	r3, #0
 801c20e:	9903      	ldr	r1, [sp, #12]
 801c210:	220a      	movs	r2, #10
 801c212:	4648      	mov	r0, r9
 801c214:	f000 fcba 	bl	801cb8c <__multadd>
 801c218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c21a:	9003      	str	r0, [sp, #12]
 801c21c:	f108 38ff 	add.w	r8, r8, #4294967295
 801c220:	2b00      	cmp	r3, #0
 801c222:	f000 81a0 	beq.w	801c566 <_dtoa_r+0xb4e>
 801c226:	2300      	movs	r3, #0
 801c228:	4629      	mov	r1, r5
 801c22a:	220a      	movs	r2, #10
 801c22c:	4648      	mov	r0, r9
 801c22e:	f000 fcad 	bl	801cb8c <__multadd>
 801c232:	9b08      	ldr	r3, [sp, #32]
 801c234:	2b00      	cmp	r3, #0
 801c236:	4605      	mov	r5, r0
 801c238:	f300 808a 	bgt.w	801c350 <_dtoa_r+0x938>
 801c23c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c23e:	2b02      	cmp	r3, #2
 801c240:	dc53      	bgt.n	801c2ea <_dtoa_r+0x8d2>
 801c242:	e085      	b.n	801c350 <_dtoa_r+0x938>
 801c244:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c24a:	e758      	b.n	801c0fe <_dtoa_r+0x6e6>
 801c24c:	9b05      	ldr	r3, [sp, #20]
 801c24e:	1e5c      	subs	r4, r3, #1
 801c250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c252:	42a3      	cmp	r3, r4
 801c254:	bfbf      	itttt	lt
 801c256:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c258:	940a      	strlt	r4, [sp, #40]	; 0x28
 801c25a:	1ae2      	sublt	r2, r4, r3
 801c25c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801c25e:	bfb6      	itet	lt
 801c260:	189b      	addlt	r3, r3, r2
 801c262:	1b1c      	subge	r4, r3, r4
 801c264:	930e      	strlt	r3, [sp, #56]	; 0x38
 801c266:	9b05      	ldr	r3, [sp, #20]
 801c268:	bfb8      	it	lt
 801c26a:	2400      	movlt	r4, #0
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	bfb7      	itett	lt
 801c270:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 801c274:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 801c278:	1a9e      	sublt	r6, r3, r2
 801c27a:	2300      	movlt	r3, #0
 801c27c:	e741      	b.n	801c102 <_dtoa_r+0x6ea>
 801c27e:	bf00      	nop
 801c280:	3fe00000 	.word	0x3fe00000
 801c284:	40240000 	.word	0x40240000
 801c288:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c28a:	9e06      	ldr	r6, [sp, #24]
 801c28c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c28e:	e743      	b.n	801c118 <_dtoa_r+0x700>
 801c290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c292:	e76c      	b.n	801c16e <_dtoa_r+0x756>
 801c294:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c296:	2b01      	cmp	r3, #1
 801c298:	dc17      	bgt.n	801c2ca <_dtoa_r+0x8b2>
 801c29a:	f1ba 0f00 	cmp.w	sl, #0
 801c29e:	d114      	bne.n	801c2ca <_dtoa_r+0x8b2>
 801c2a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c2a4:	b99b      	cbnz	r3, 801c2ce <_dtoa_r+0x8b6>
 801c2a6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801c2aa:	0d3f      	lsrs	r7, r7, #20
 801c2ac:	053f      	lsls	r7, r7, #20
 801c2ae:	b137      	cbz	r7, 801c2be <_dtoa_r+0x8a6>
 801c2b0:	9b06      	ldr	r3, [sp, #24]
 801c2b2:	3301      	adds	r3, #1
 801c2b4:	9306      	str	r3, [sp, #24]
 801c2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2b8:	3301      	adds	r3, #1
 801c2ba:	9309      	str	r3, [sp, #36]	; 0x24
 801c2bc:	2701      	movs	r7, #1
 801c2be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	f47f af6c 	bne.w	801c19e <_dtoa_r+0x786>
 801c2c6:	2001      	movs	r0, #1
 801c2c8:	e771      	b.n	801c1ae <_dtoa_r+0x796>
 801c2ca:	2700      	movs	r7, #0
 801c2cc:	e7f7      	b.n	801c2be <_dtoa_r+0x8a6>
 801c2ce:	4657      	mov	r7, sl
 801c2d0:	e7f5      	b.n	801c2be <_dtoa_r+0x8a6>
 801c2d2:	d080      	beq.n	801c1d6 <_dtoa_r+0x7be>
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	301c      	adds	r0, #28
 801c2d8:	e776      	b.n	801c1c8 <_dtoa_r+0x7b0>
 801c2da:	9b05      	ldr	r3, [sp, #20]
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	dc31      	bgt.n	801c344 <_dtoa_r+0x92c>
 801c2e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c2e2:	2b02      	cmp	r3, #2
 801c2e4:	dd2e      	ble.n	801c344 <_dtoa_r+0x92c>
 801c2e6:	9b05      	ldr	r3, [sp, #20]
 801c2e8:	9308      	str	r3, [sp, #32]
 801c2ea:	9b08      	ldr	r3, [sp, #32]
 801c2ec:	b963      	cbnz	r3, 801c308 <_dtoa_r+0x8f0>
 801c2ee:	4621      	mov	r1, r4
 801c2f0:	2205      	movs	r2, #5
 801c2f2:	4648      	mov	r0, r9
 801c2f4:	f000 fc4a 	bl	801cb8c <__multadd>
 801c2f8:	4601      	mov	r1, r0
 801c2fa:	4604      	mov	r4, r0
 801c2fc:	9803      	ldr	r0, [sp, #12]
 801c2fe:	f000 fe47 	bl	801cf90 <__mcmp>
 801c302:	2800      	cmp	r0, #0
 801c304:	f73f adc4 	bgt.w	801be90 <_dtoa_r+0x478>
 801c308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c30a:	9e04      	ldr	r6, [sp, #16]
 801c30c:	ea6f 0803 	mvn.w	r8, r3
 801c310:	2700      	movs	r7, #0
 801c312:	4621      	mov	r1, r4
 801c314:	4648      	mov	r0, r9
 801c316:	f000 fc30 	bl	801cb7a <_Bfree>
 801c31a:	2d00      	cmp	r5, #0
 801c31c:	f43f aeb2 	beq.w	801c084 <_dtoa_r+0x66c>
 801c320:	b12f      	cbz	r7, 801c32e <_dtoa_r+0x916>
 801c322:	42af      	cmp	r7, r5
 801c324:	d003      	beq.n	801c32e <_dtoa_r+0x916>
 801c326:	4639      	mov	r1, r7
 801c328:	4648      	mov	r0, r9
 801c32a:	f000 fc26 	bl	801cb7a <_Bfree>
 801c32e:	4629      	mov	r1, r5
 801c330:	4648      	mov	r0, r9
 801c332:	f000 fc22 	bl	801cb7a <_Bfree>
 801c336:	e6a5      	b.n	801c084 <_dtoa_r+0x66c>
 801c338:	2400      	movs	r4, #0
 801c33a:	4625      	mov	r5, r4
 801c33c:	e7e4      	b.n	801c308 <_dtoa_r+0x8f0>
 801c33e:	46a8      	mov	r8, r5
 801c340:	4625      	mov	r5, r4
 801c342:	e5a5      	b.n	801be90 <_dtoa_r+0x478>
 801c344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c346:	2b00      	cmp	r3, #0
 801c348:	f000 80c4 	beq.w	801c4d4 <_dtoa_r+0xabc>
 801c34c:	9b05      	ldr	r3, [sp, #20]
 801c34e:	9308      	str	r3, [sp, #32]
 801c350:	2e00      	cmp	r6, #0
 801c352:	dd05      	ble.n	801c360 <_dtoa_r+0x948>
 801c354:	4629      	mov	r1, r5
 801c356:	4632      	mov	r2, r6
 801c358:	4648      	mov	r0, r9
 801c35a:	f000 fda9 	bl	801ceb0 <__lshift>
 801c35e:	4605      	mov	r5, r0
 801c360:	2f00      	cmp	r7, #0
 801c362:	d058      	beq.n	801c416 <_dtoa_r+0x9fe>
 801c364:	6869      	ldr	r1, [r5, #4]
 801c366:	4648      	mov	r0, r9
 801c368:	f000 fbe2 	bl	801cb30 <_Balloc>
 801c36c:	4606      	mov	r6, r0
 801c36e:	b920      	cbnz	r0, 801c37a <_dtoa_r+0x962>
 801c370:	4b81      	ldr	r3, [pc, #516]	; (801c578 <_dtoa_r+0xb60>)
 801c372:	4602      	mov	r2, r0
 801c374:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c378:	e480      	b.n	801bc7c <_dtoa_r+0x264>
 801c37a:	692a      	ldr	r2, [r5, #16]
 801c37c:	3202      	adds	r2, #2
 801c37e:	0092      	lsls	r2, r2, #2
 801c380:	f105 010c 	add.w	r1, r5, #12
 801c384:	300c      	adds	r0, #12
 801c386:	f7fc fb3b 	bl	8018a00 <memcpy>
 801c38a:	2201      	movs	r2, #1
 801c38c:	4631      	mov	r1, r6
 801c38e:	4648      	mov	r0, r9
 801c390:	f000 fd8e 	bl	801ceb0 <__lshift>
 801c394:	9b04      	ldr	r3, [sp, #16]
 801c396:	9a04      	ldr	r2, [sp, #16]
 801c398:	3301      	adds	r3, #1
 801c39a:	9305      	str	r3, [sp, #20]
 801c39c:	9b08      	ldr	r3, [sp, #32]
 801c39e:	4413      	add	r3, r2
 801c3a0:	930a      	str	r3, [sp, #40]	; 0x28
 801c3a2:	f00a 0301 	and.w	r3, sl, #1
 801c3a6:	462f      	mov	r7, r5
 801c3a8:	9309      	str	r3, [sp, #36]	; 0x24
 801c3aa:	4605      	mov	r5, r0
 801c3ac:	9b05      	ldr	r3, [sp, #20]
 801c3ae:	9803      	ldr	r0, [sp, #12]
 801c3b0:	4621      	mov	r1, r4
 801c3b2:	f103 3bff 	add.w	fp, r3, #4294967295
 801c3b6:	f7ff faa7 	bl	801b908 <quorem>
 801c3ba:	4639      	mov	r1, r7
 801c3bc:	9006      	str	r0, [sp, #24]
 801c3be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c3c2:	9803      	ldr	r0, [sp, #12]
 801c3c4:	f000 fde4 	bl	801cf90 <__mcmp>
 801c3c8:	462a      	mov	r2, r5
 801c3ca:	9008      	str	r0, [sp, #32]
 801c3cc:	4621      	mov	r1, r4
 801c3ce:	4648      	mov	r0, r9
 801c3d0:	f000 fdfa 	bl	801cfc8 <__mdiff>
 801c3d4:	68c2      	ldr	r2, [r0, #12]
 801c3d6:	4606      	mov	r6, r0
 801c3d8:	b9fa      	cbnz	r2, 801c41a <_dtoa_r+0xa02>
 801c3da:	4601      	mov	r1, r0
 801c3dc:	9803      	ldr	r0, [sp, #12]
 801c3de:	f000 fdd7 	bl	801cf90 <__mcmp>
 801c3e2:	4602      	mov	r2, r0
 801c3e4:	4631      	mov	r1, r6
 801c3e6:	4648      	mov	r0, r9
 801c3e8:	920b      	str	r2, [sp, #44]	; 0x2c
 801c3ea:	f000 fbc6 	bl	801cb7a <_Bfree>
 801c3ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c3f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c3f2:	9e05      	ldr	r6, [sp, #20]
 801c3f4:	ea43 0102 	orr.w	r1, r3, r2
 801c3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3fa:	430b      	orrs	r3, r1
 801c3fc:	d10f      	bne.n	801c41e <_dtoa_r+0xa06>
 801c3fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c402:	d028      	beq.n	801c456 <_dtoa_r+0xa3e>
 801c404:	9b08      	ldr	r3, [sp, #32]
 801c406:	2b00      	cmp	r3, #0
 801c408:	dd02      	ble.n	801c410 <_dtoa_r+0x9f8>
 801c40a:	9b06      	ldr	r3, [sp, #24]
 801c40c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c410:	f88b a000 	strb.w	sl, [fp]
 801c414:	e77d      	b.n	801c312 <_dtoa_r+0x8fa>
 801c416:	4628      	mov	r0, r5
 801c418:	e7bc      	b.n	801c394 <_dtoa_r+0x97c>
 801c41a:	2201      	movs	r2, #1
 801c41c:	e7e2      	b.n	801c3e4 <_dtoa_r+0x9cc>
 801c41e:	9b08      	ldr	r3, [sp, #32]
 801c420:	2b00      	cmp	r3, #0
 801c422:	db04      	blt.n	801c42e <_dtoa_r+0xa16>
 801c424:	9920      	ldr	r1, [sp, #128]	; 0x80
 801c426:	430b      	orrs	r3, r1
 801c428:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c42a:	430b      	orrs	r3, r1
 801c42c:	d120      	bne.n	801c470 <_dtoa_r+0xa58>
 801c42e:	2a00      	cmp	r2, #0
 801c430:	ddee      	ble.n	801c410 <_dtoa_r+0x9f8>
 801c432:	9903      	ldr	r1, [sp, #12]
 801c434:	2201      	movs	r2, #1
 801c436:	4648      	mov	r0, r9
 801c438:	f000 fd3a 	bl	801ceb0 <__lshift>
 801c43c:	4621      	mov	r1, r4
 801c43e:	9003      	str	r0, [sp, #12]
 801c440:	f000 fda6 	bl	801cf90 <__mcmp>
 801c444:	2800      	cmp	r0, #0
 801c446:	dc03      	bgt.n	801c450 <_dtoa_r+0xa38>
 801c448:	d1e2      	bne.n	801c410 <_dtoa_r+0x9f8>
 801c44a:	f01a 0f01 	tst.w	sl, #1
 801c44e:	d0df      	beq.n	801c410 <_dtoa_r+0x9f8>
 801c450:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c454:	d1d9      	bne.n	801c40a <_dtoa_r+0x9f2>
 801c456:	2339      	movs	r3, #57	; 0x39
 801c458:	f88b 3000 	strb.w	r3, [fp]
 801c45c:	4633      	mov	r3, r6
 801c45e:	461e      	mov	r6, r3
 801c460:	3b01      	subs	r3, #1
 801c462:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c466:	2a39      	cmp	r2, #57	; 0x39
 801c468:	d06b      	beq.n	801c542 <_dtoa_r+0xb2a>
 801c46a:	3201      	adds	r2, #1
 801c46c:	701a      	strb	r2, [r3, #0]
 801c46e:	e750      	b.n	801c312 <_dtoa_r+0x8fa>
 801c470:	2a00      	cmp	r2, #0
 801c472:	dd07      	ble.n	801c484 <_dtoa_r+0xa6c>
 801c474:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c478:	d0ed      	beq.n	801c456 <_dtoa_r+0xa3e>
 801c47a:	f10a 0301 	add.w	r3, sl, #1
 801c47e:	f88b 3000 	strb.w	r3, [fp]
 801c482:	e746      	b.n	801c312 <_dtoa_r+0x8fa>
 801c484:	9b05      	ldr	r3, [sp, #20]
 801c486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c488:	f803 ac01 	strb.w	sl, [r3, #-1]
 801c48c:	4293      	cmp	r3, r2
 801c48e:	d042      	beq.n	801c516 <_dtoa_r+0xafe>
 801c490:	9903      	ldr	r1, [sp, #12]
 801c492:	2300      	movs	r3, #0
 801c494:	220a      	movs	r2, #10
 801c496:	4648      	mov	r0, r9
 801c498:	f000 fb78 	bl	801cb8c <__multadd>
 801c49c:	42af      	cmp	r7, r5
 801c49e:	9003      	str	r0, [sp, #12]
 801c4a0:	f04f 0300 	mov.w	r3, #0
 801c4a4:	f04f 020a 	mov.w	r2, #10
 801c4a8:	4639      	mov	r1, r7
 801c4aa:	4648      	mov	r0, r9
 801c4ac:	d107      	bne.n	801c4be <_dtoa_r+0xaa6>
 801c4ae:	f000 fb6d 	bl	801cb8c <__multadd>
 801c4b2:	4607      	mov	r7, r0
 801c4b4:	4605      	mov	r5, r0
 801c4b6:	9b05      	ldr	r3, [sp, #20]
 801c4b8:	3301      	adds	r3, #1
 801c4ba:	9305      	str	r3, [sp, #20]
 801c4bc:	e776      	b.n	801c3ac <_dtoa_r+0x994>
 801c4be:	f000 fb65 	bl	801cb8c <__multadd>
 801c4c2:	4629      	mov	r1, r5
 801c4c4:	4607      	mov	r7, r0
 801c4c6:	2300      	movs	r3, #0
 801c4c8:	220a      	movs	r2, #10
 801c4ca:	4648      	mov	r0, r9
 801c4cc:	f000 fb5e 	bl	801cb8c <__multadd>
 801c4d0:	4605      	mov	r5, r0
 801c4d2:	e7f0      	b.n	801c4b6 <_dtoa_r+0xa9e>
 801c4d4:	9b05      	ldr	r3, [sp, #20]
 801c4d6:	9308      	str	r3, [sp, #32]
 801c4d8:	9e04      	ldr	r6, [sp, #16]
 801c4da:	9803      	ldr	r0, [sp, #12]
 801c4dc:	4621      	mov	r1, r4
 801c4de:	f7ff fa13 	bl	801b908 <quorem>
 801c4e2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c4e6:	9b04      	ldr	r3, [sp, #16]
 801c4e8:	f806 ab01 	strb.w	sl, [r6], #1
 801c4ec:	1af2      	subs	r2, r6, r3
 801c4ee:	9b08      	ldr	r3, [sp, #32]
 801c4f0:	4293      	cmp	r3, r2
 801c4f2:	dd07      	ble.n	801c504 <_dtoa_r+0xaec>
 801c4f4:	9903      	ldr	r1, [sp, #12]
 801c4f6:	2300      	movs	r3, #0
 801c4f8:	220a      	movs	r2, #10
 801c4fa:	4648      	mov	r0, r9
 801c4fc:	f000 fb46 	bl	801cb8c <__multadd>
 801c500:	9003      	str	r0, [sp, #12]
 801c502:	e7ea      	b.n	801c4da <_dtoa_r+0xac2>
 801c504:	9b08      	ldr	r3, [sp, #32]
 801c506:	2b00      	cmp	r3, #0
 801c508:	bfc8      	it	gt
 801c50a:	461e      	movgt	r6, r3
 801c50c:	9b04      	ldr	r3, [sp, #16]
 801c50e:	bfd8      	it	le
 801c510:	2601      	movle	r6, #1
 801c512:	441e      	add	r6, r3
 801c514:	2700      	movs	r7, #0
 801c516:	9903      	ldr	r1, [sp, #12]
 801c518:	2201      	movs	r2, #1
 801c51a:	4648      	mov	r0, r9
 801c51c:	f000 fcc8 	bl	801ceb0 <__lshift>
 801c520:	4621      	mov	r1, r4
 801c522:	9003      	str	r0, [sp, #12]
 801c524:	f000 fd34 	bl	801cf90 <__mcmp>
 801c528:	2800      	cmp	r0, #0
 801c52a:	dc97      	bgt.n	801c45c <_dtoa_r+0xa44>
 801c52c:	d102      	bne.n	801c534 <_dtoa_r+0xb1c>
 801c52e:	f01a 0f01 	tst.w	sl, #1
 801c532:	d193      	bne.n	801c45c <_dtoa_r+0xa44>
 801c534:	4633      	mov	r3, r6
 801c536:	461e      	mov	r6, r3
 801c538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c53c:	2a30      	cmp	r2, #48	; 0x30
 801c53e:	d0fa      	beq.n	801c536 <_dtoa_r+0xb1e>
 801c540:	e6e7      	b.n	801c312 <_dtoa_r+0x8fa>
 801c542:	9a04      	ldr	r2, [sp, #16]
 801c544:	429a      	cmp	r2, r3
 801c546:	d18a      	bne.n	801c45e <_dtoa_r+0xa46>
 801c548:	2331      	movs	r3, #49	; 0x31
 801c54a:	f108 0801 	add.w	r8, r8, #1
 801c54e:	7013      	strb	r3, [r2, #0]
 801c550:	e6df      	b.n	801c312 <_dtoa_r+0x8fa>
 801c552:	4b0a      	ldr	r3, [pc, #40]	; (801c57c <_dtoa_r+0xb64>)
 801c554:	f7ff bab0 	b.w	801bab8 <_dtoa_r+0xa0>
 801c558:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	f47f aa94 	bne.w	801ba88 <_dtoa_r+0x70>
 801c560:	4b07      	ldr	r3, [pc, #28]	; (801c580 <_dtoa_r+0xb68>)
 801c562:	f7ff baa9 	b.w	801bab8 <_dtoa_r+0xa0>
 801c566:	9b08      	ldr	r3, [sp, #32]
 801c568:	2b00      	cmp	r3, #0
 801c56a:	dcb5      	bgt.n	801c4d8 <_dtoa_r+0xac0>
 801c56c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c56e:	2b02      	cmp	r3, #2
 801c570:	f73f aebb 	bgt.w	801c2ea <_dtoa_r+0x8d2>
 801c574:	e7b0      	b.n	801c4d8 <_dtoa_r+0xac0>
 801c576:	bf00      	nop
 801c578:	0802067d 	.word	0x0802067d
 801c57c:	0802062e 	.word	0x0802062e
 801c580:	08020674 	.word	0x08020674

0801c584 <__sflush_r>:
 801c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c586:	898b      	ldrh	r3, [r1, #12]
 801c588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c58c:	4605      	mov	r5, r0
 801c58e:	0718      	lsls	r0, r3, #28
 801c590:	460c      	mov	r4, r1
 801c592:	d45e      	bmi.n	801c652 <__sflush_r+0xce>
 801c594:	684b      	ldr	r3, [r1, #4]
 801c596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	818a      	strh	r2, [r1, #12]
 801c59e:	dc04      	bgt.n	801c5aa <__sflush_r+0x26>
 801c5a0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	dc01      	bgt.n	801c5aa <__sflush_r+0x26>
 801c5a6:	2000      	movs	r0, #0
 801c5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c5ac:	2e00      	cmp	r6, #0
 801c5ae:	d0fa      	beq.n	801c5a6 <__sflush_r+0x22>
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c5b6:	682f      	ldr	r7, [r5, #0]
 801c5b8:	602b      	str	r3, [r5, #0]
 801c5ba:	d036      	beq.n	801c62a <__sflush_r+0xa6>
 801c5bc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801c5be:	89a3      	ldrh	r3, [r4, #12]
 801c5c0:	075a      	lsls	r2, r3, #29
 801c5c2:	d505      	bpl.n	801c5d0 <__sflush_r+0x4c>
 801c5c4:	6863      	ldr	r3, [r4, #4]
 801c5c6:	1ac0      	subs	r0, r0, r3
 801c5c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c5ca:	b10b      	cbz	r3, 801c5d0 <__sflush_r+0x4c>
 801c5cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c5ce:	1ac0      	subs	r0, r0, r3
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	4602      	mov	r2, r0
 801c5d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c5d6:	69e1      	ldr	r1, [r4, #28]
 801c5d8:	4628      	mov	r0, r5
 801c5da:	47b0      	blx	r6
 801c5dc:	1c43      	adds	r3, r0, #1
 801c5de:	89a3      	ldrh	r3, [r4, #12]
 801c5e0:	d106      	bne.n	801c5f0 <__sflush_r+0x6c>
 801c5e2:	6829      	ldr	r1, [r5, #0]
 801c5e4:	291d      	cmp	r1, #29
 801c5e6:	d830      	bhi.n	801c64a <__sflush_r+0xc6>
 801c5e8:	4a2a      	ldr	r2, [pc, #168]	; (801c694 <__sflush_r+0x110>)
 801c5ea:	40ca      	lsrs	r2, r1
 801c5ec:	07d6      	lsls	r6, r2, #31
 801c5ee:	d52c      	bpl.n	801c64a <__sflush_r+0xc6>
 801c5f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c5f4:	b21b      	sxth	r3, r3
 801c5f6:	2200      	movs	r2, #0
 801c5f8:	6062      	str	r2, [r4, #4]
 801c5fa:	04d9      	lsls	r1, r3, #19
 801c5fc:	6922      	ldr	r2, [r4, #16]
 801c5fe:	81a3      	strh	r3, [r4, #12]
 801c600:	6022      	str	r2, [r4, #0]
 801c602:	d504      	bpl.n	801c60e <__sflush_r+0x8a>
 801c604:	1c42      	adds	r2, r0, #1
 801c606:	d101      	bne.n	801c60c <__sflush_r+0x88>
 801c608:	682b      	ldr	r3, [r5, #0]
 801c60a:	b903      	cbnz	r3, 801c60e <__sflush_r+0x8a>
 801c60c:	6520      	str	r0, [r4, #80]	; 0x50
 801c60e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c610:	602f      	str	r7, [r5, #0]
 801c612:	2900      	cmp	r1, #0
 801c614:	d0c7      	beq.n	801c5a6 <__sflush_r+0x22>
 801c616:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801c61a:	4299      	cmp	r1, r3
 801c61c:	d002      	beq.n	801c624 <__sflush_r+0xa0>
 801c61e:	4628      	mov	r0, r5
 801c620:	f000 f936 	bl	801c890 <_free_r>
 801c624:	2000      	movs	r0, #0
 801c626:	6320      	str	r0, [r4, #48]	; 0x30
 801c628:	e7be      	b.n	801c5a8 <__sflush_r+0x24>
 801c62a:	69e1      	ldr	r1, [r4, #28]
 801c62c:	2301      	movs	r3, #1
 801c62e:	4628      	mov	r0, r5
 801c630:	47b0      	blx	r6
 801c632:	1c41      	adds	r1, r0, #1
 801c634:	d1c3      	bne.n	801c5be <__sflush_r+0x3a>
 801c636:	682b      	ldr	r3, [r5, #0]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d0c0      	beq.n	801c5be <__sflush_r+0x3a>
 801c63c:	2b1d      	cmp	r3, #29
 801c63e:	d001      	beq.n	801c644 <__sflush_r+0xc0>
 801c640:	2b16      	cmp	r3, #22
 801c642:	d101      	bne.n	801c648 <__sflush_r+0xc4>
 801c644:	602f      	str	r7, [r5, #0]
 801c646:	e7ae      	b.n	801c5a6 <__sflush_r+0x22>
 801c648:	89a3      	ldrh	r3, [r4, #12]
 801c64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c64e:	81a3      	strh	r3, [r4, #12]
 801c650:	e7aa      	b.n	801c5a8 <__sflush_r+0x24>
 801c652:	690f      	ldr	r7, [r1, #16]
 801c654:	2f00      	cmp	r7, #0
 801c656:	d0a6      	beq.n	801c5a6 <__sflush_r+0x22>
 801c658:	079b      	lsls	r3, r3, #30
 801c65a:	680e      	ldr	r6, [r1, #0]
 801c65c:	bf08      	it	eq
 801c65e:	694b      	ldreq	r3, [r1, #20]
 801c660:	600f      	str	r7, [r1, #0]
 801c662:	bf18      	it	ne
 801c664:	2300      	movne	r3, #0
 801c666:	1bf6      	subs	r6, r6, r7
 801c668:	608b      	str	r3, [r1, #8]
 801c66a:	2e00      	cmp	r6, #0
 801c66c:	dd9b      	ble.n	801c5a6 <__sflush_r+0x22>
 801c66e:	69e1      	ldr	r1, [r4, #28]
 801c670:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 801c674:	4633      	mov	r3, r6
 801c676:	463a      	mov	r2, r7
 801c678:	4628      	mov	r0, r5
 801c67a:	47e0      	blx	ip
 801c67c:	2800      	cmp	r0, #0
 801c67e:	dc06      	bgt.n	801c68e <__sflush_r+0x10a>
 801c680:	89a3      	ldrh	r3, [r4, #12]
 801c682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c686:	81a3      	strh	r3, [r4, #12]
 801c688:	f04f 30ff 	mov.w	r0, #4294967295
 801c68c:	e78c      	b.n	801c5a8 <__sflush_r+0x24>
 801c68e:	4407      	add	r7, r0
 801c690:	1a36      	subs	r6, r6, r0
 801c692:	e7ea      	b.n	801c66a <__sflush_r+0xe6>
 801c694:	20400001 	.word	0x20400001

0801c698 <_fflush_r>:
 801c698:	b538      	push	{r3, r4, r5, lr}
 801c69a:	460c      	mov	r4, r1
 801c69c:	4605      	mov	r5, r0
 801c69e:	b118      	cbz	r0, 801c6a8 <_fflush_r+0x10>
 801c6a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801c6a2:	b90b      	cbnz	r3, 801c6a8 <_fflush_r+0x10>
 801c6a4:	f000 f864 	bl	801c770 <__sinit>
 801c6a8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801c6ac:	b1b8      	cbz	r0, 801c6de <_fflush_r+0x46>
 801c6ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c6b0:	07db      	lsls	r3, r3, #31
 801c6b2:	d404      	bmi.n	801c6be <_fflush_r+0x26>
 801c6b4:	0581      	lsls	r1, r0, #22
 801c6b6:	d402      	bmi.n	801c6be <_fflush_r+0x26>
 801c6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c6ba:	f7fb ff53 	bl	8018564 <__retarget_lock_acquire_recursive>
 801c6be:	4628      	mov	r0, r5
 801c6c0:	4621      	mov	r1, r4
 801c6c2:	f7ff ff5f 	bl	801c584 <__sflush_r>
 801c6c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c6c8:	07da      	lsls	r2, r3, #31
 801c6ca:	4605      	mov	r5, r0
 801c6cc:	d405      	bmi.n	801c6da <_fflush_r+0x42>
 801c6ce:	89a3      	ldrh	r3, [r4, #12]
 801c6d0:	059b      	lsls	r3, r3, #22
 801c6d2:	d402      	bmi.n	801c6da <_fflush_r+0x42>
 801c6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c6d6:	f7fb ff46 	bl	8018566 <__retarget_lock_release_recursive>
 801c6da:	4628      	mov	r0, r5
 801c6dc:	bd38      	pop	{r3, r4, r5, pc}
 801c6de:	4605      	mov	r5, r0
 801c6e0:	e7fb      	b.n	801c6da <_fflush_r+0x42>
	...

0801c6e4 <std>:
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	b510      	push	{r4, lr}
 801c6e8:	4604      	mov	r4, r0
 801c6ea:	e9c0 3300 	strd	r3, r3, [r0]
 801c6ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c6f2:	6083      	str	r3, [r0, #8]
 801c6f4:	8181      	strh	r1, [r0, #12]
 801c6f6:	6643      	str	r3, [r0, #100]	; 0x64
 801c6f8:	81c2      	strh	r2, [r0, #14]
 801c6fa:	6183      	str	r3, [r0, #24]
 801c6fc:	4619      	mov	r1, r3
 801c6fe:	2208      	movs	r2, #8
 801c700:	305c      	adds	r0, #92	; 0x5c
 801c702:	f7fc f9a5 	bl	8018a50 <memset>
 801c706:	4b07      	ldr	r3, [pc, #28]	; (801c724 <std+0x40>)
 801c708:	6223      	str	r3, [r4, #32]
 801c70a:	4b07      	ldr	r3, [pc, #28]	; (801c728 <std+0x44>)
 801c70c:	6263      	str	r3, [r4, #36]	; 0x24
 801c70e:	4b07      	ldr	r3, [pc, #28]	; (801c72c <std+0x48>)
 801c710:	62a3      	str	r3, [r4, #40]	; 0x28
 801c712:	4b07      	ldr	r3, [pc, #28]	; (801c730 <std+0x4c>)
 801c714:	61e4      	str	r4, [r4, #28]
 801c716:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c718:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c720:	f7fb bf1e 	b.w	8018560 <__retarget_lock_init_recursive>
 801c724:	0801d1f9 	.word	0x0801d1f9
 801c728:	0801d21b 	.word	0x0801d21b
 801c72c:	0801d253 	.word	0x0801d253
 801c730:	0801d277 	.word	0x0801d277

0801c734 <_cleanup_r>:
 801c734:	4901      	ldr	r1, [pc, #4]	; (801c73c <_cleanup_r+0x8>)
 801c736:	f000 b96b 	b.w	801ca10 <_fwalk_reent>
 801c73a:	bf00      	nop
 801c73c:	0801df0d 	.word	0x0801df0d

0801c740 <__sfp_lock_acquire>:
 801c740:	4801      	ldr	r0, [pc, #4]	; (801c748 <__sfp_lock_acquire+0x8>)
 801c742:	f7fb bf0f 	b.w	8018564 <__retarget_lock_acquire_recursive>
 801c746:	bf00      	nop
 801c748:	20005e6a 	.word	0x20005e6a

0801c74c <__sfp_lock_release>:
 801c74c:	4801      	ldr	r0, [pc, #4]	; (801c754 <__sfp_lock_release+0x8>)
 801c74e:	f7fb bf0a 	b.w	8018566 <__retarget_lock_release_recursive>
 801c752:	bf00      	nop
 801c754:	20005e6a 	.word	0x20005e6a

0801c758 <__sinit_lock_acquire>:
 801c758:	4801      	ldr	r0, [pc, #4]	; (801c760 <__sinit_lock_acquire+0x8>)
 801c75a:	f7fb bf03 	b.w	8018564 <__retarget_lock_acquire_recursive>
 801c75e:	bf00      	nop
 801c760:	20005e6b 	.word	0x20005e6b

0801c764 <__sinit_lock_release>:
 801c764:	4801      	ldr	r0, [pc, #4]	; (801c76c <__sinit_lock_release+0x8>)
 801c766:	f7fb befe 	b.w	8018566 <__retarget_lock_release_recursive>
 801c76a:	bf00      	nop
 801c76c:	20005e6b 	.word	0x20005e6b

0801c770 <__sinit>:
 801c770:	b510      	push	{r4, lr}
 801c772:	4604      	mov	r4, r0
 801c774:	f7ff fff0 	bl	801c758 <__sinit_lock_acquire>
 801c778:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801c77a:	b11a      	cbz	r2, 801c784 <__sinit+0x14>
 801c77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c780:	f7ff bff0 	b.w	801c764 <__sinit_lock_release>
 801c784:	4b0d      	ldr	r3, [pc, #52]	; (801c7bc <__sinit+0x4c>)
 801c786:	63e3      	str	r3, [r4, #60]	; 0x3c
 801c788:	2303      	movs	r3, #3
 801c78a:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 801c78e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 801c792:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801c796:	6860      	ldr	r0, [r4, #4]
 801c798:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 801c79c:	2104      	movs	r1, #4
 801c79e:	f7ff ffa1 	bl	801c6e4 <std>
 801c7a2:	68a0      	ldr	r0, [r4, #8]
 801c7a4:	2201      	movs	r2, #1
 801c7a6:	2109      	movs	r1, #9
 801c7a8:	f7ff ff9c 	bl	801c6e4 <std>
 801c7ac:	68e0      	ldr	r0, [r4, #12]
 801c7ae:	2202      	movs	r2, #2
 801c7b0:	2112      	movs	r1, #18
 801c7b2:	f7ff ff97 	bl	801c6e4 <std>
 801c7b6:	2301      	movs	r3, #1
 801c7b8:	63a3      	str	r3, [r4, #56]	; 0x38
 801c7ba:	e7df      	b.n	801c77c <__sinit+0xc>
 801c7bc:	0801c735 	.word	0x0801c735

0801c7c0 <__libc_fini_array>:
 801c7c0:	b538      	push	{r3, r4, r5, lr}
 801c7c2:	4d07      	ldr	r5, [pc, #28]	; (801c7e0 <__libc_fini_array+0x20>)
 801c7c4:	4c07      	ldr	r4, [pc, #28]	; (801c7e4 <__libc_fini_array+0x24>)
 801c7c6:	1b64      	subs	r4, r4, r5
 801c7c8:	10a4      	asrs	r4, r4, #2
 801c7ca:	b91c      	cbnz	r4, 801c7d4 <__libc_fini_array+0x14>
 801c7cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c7d0:	f002 bc72 	b.w	801f0b8 <_fini>
 801c7d4:	3c01      	subs	r4, #1
 801c7d6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801c7da:	4798      	blx	r3
 801c7dc:	e7f5      	b.n	801c7ca <__libc_fini_array+0xa>
 801c7de:	bf00      	nop
 801c7e0:	080208f0 	.word	0x080208f0
 801c7e4:	080208f4 	.word	0x080208f4

0801c7e8 <_malloc_trim_r>:
 801c7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7ec:	4606      	mov	r6, r0
 801c7ee:	2008      	movs	r0, #8
 801c7f0:	460c      	mov	r4, r1
 801c7f2:	f7fd fdb5 	bl	801a360 <sysconf>
 801c7f6:	4f23      	ldr	r7, [pc, #140]	; (801c884 <_malloc_trim_r+0x9c>)
 801c7f8:	4680      	mov	r8, r0
 801c7fa:	4630      	mov	r0, r6
 801c7fc:	f7fc f930 	bl	8018a60 <__malloc_lock>
 801c800:	68bb      	ldr	r3, [r7, #8]
 801c802:	685d      	ldr	r5, [r3, #4]
 801c804:	f025 0503 	bic.w	r5, r5, #3
 801c808:	1b2c      	subs	r4, r5, r4
 801c80a:	3c11      	subs	r4, #17
 801c80c:	4444      	add	r4, r8
 801c80e:	fbb4 f4f8 	udiv	r4, r4, r8
 801c812:	3c01      	subs	r4, #1
 801c814:	fb08 f404 	mul.w	r4, r8, r4
 801c818:	45a0      	cmp	r8, r4
 801c81a:	dd05      	ble.n	801c828 <_malloc_trim_r+0x40>
 801c81c:	4630      	mov	r0, r6
 801c81e:	f7fc f925 	bl	8018a6c <__malloc_unlock>
 801c822:	2000      	movs	r0, #0
 801c824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c828:	2100      	movs	r1, #0
 801c82a:	4630      	mov	r0, r6
 801c82c:	f7fc fb1a 	bl	8018e64 <_sbrk_r>
 801c830:	68bb      	ldr	r3, [r7, #8]
 801c832:	442b      	add	r3, r5
 801c834:	4298      	cmp	r0, r3
 801c836:	d1f1      	bne.n	801c81c <_malloc_trim_r+0x34>
 801c838:	4261      	negs	r1, r4
 801c83a:	4630      	mov	r0, r6
 801c83c:	f7fc fb12 	bl	8018e64 <_sbrk_r>
 801c840:	3001      	adds	r0, #1
 801c842:	d110      	bne.n	801c866 <_malloc_trim_r+0x7e>
 801c844:	2100      	movs	r1, #0
 801c846:	4630      	mov	r0, r6
 801c848:	f7fc fb0c 	bl	8018e64 <_sbrk_r>
 801c84c:	68ba      	ldr	r2, [r7, #8]
 801c84e:	1a83      	subs	r3, r0, r2
 801c850:	2b0f      	cmp	r3, #15
 801c852:	dde3      	ble.n	801c81c <_malloc_trim_r+0x34>
 801c854:	490c      	ldr	r1, [pc, #48]	; (801c888 <_malloc_trim_r+0xa0>)
 801c856:	6809      	ldr	r1, [r1, #0]
 801c858:	1a40      	subs	r0, r0, r1
 801c85a:	490c      	ldr	r1, [pc, #48]	; (801c88c <_malloc_trim_r+0xa4>)
 801c85c:	f043 0301 	orr.w	r3, r3, #1
 801c860:	6008      	str	r0, [r1, #0]
 801c862:	6053      	str	r3, [r2, #4]
 801c864:	e7da      	b.n	801c81c <_malloc_trim_r+0x34>
 801c866:	68bb      	ldr	r3, [r7, #8]
 801c868:	4a08      	ldr	r2, [pc, #32]	; (801c88c <_malloc_trim_r+0xa4>)
 801c86a:	1b2d      	subs	r5, r5, r4
 801c86c:	f045 0501 	orr.w	r5, r5, #1
 801c870:	605d      	str	r5, [r3, #4]
 801c872:	6813      	ldr	r3, [r2, #0]
 801c874:	4630      	mov	r0, r6
 801c876:	1b1b      	subs	r3, r3, r4
 801c878:	6013      	str	r3, [r2, #0]
 801c87a:	f7fc f8f7 	bl	8018a6c <__malloc_unlock>
 801c87e:	2001      	movs	r0, #1
 801c880:	e7d0      	b.n	801c824 <_malloc_trim_r+0x3c>
 801c882:	bf00      	nop
 801c884:	200004c8 	.word	0x200004c8
 801c888:	200008d0 	.word	0x200008d0
 801c88c:	20005e6c 	.word	0x20005e6c

0801c890 <_free_r>:
 801c890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c892:	4605      	mov	r5, r0
 801c894:	460f      	mov	r7, r1
 801c896:	2900      	cmp	r1, #0
 801c898:	f000 80b1 	beq.w	801c9fe <_free_r+0x16e>
 801c89c:	f7fc f8e0 	bl	8018a60 <__malloc_lock>
 801c8a0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801c8a4:	4856      	ldr	r0, [pc, #344]	; (801ca00 <_free_r+0x170>)
 801c8a6:	f022 0401 	bic.w	r4, r2, #1
 801c8aa:	f1a7 0308 	sub.w	r3, r7, #8
 801c8ae:	eb03 0c04 	add.w	ip, r3, r4
 801c8b2:	6881      	ldr	r1, [r0, #8]
 801c8b4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801c8b8:	4561      	cmp	r1, ip
 801c8ba:	f026 0603 	bic.w	r6, r6, #3
 801c8be:	f002 0201 	and.w	r2, r2, #1
 801c8c2:	d11b      	bne.n	801c8fc <_free_r+0x6c>
 801c8c4:	4434      	add	r4, r6
 801c8c6:	b93a      	cbnz	r2, 801c8d8 <_free_r+0x48>
 801c8c8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801c8cc:	1a9b      	subs	r3, r3, r2
 801c8ce:	4414      	add	r4, r2
 801c8d0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801c8d4:	60ca      	str	r2, [r1, #12]
 801c8d6:	6091      	str	r1, [r2, #8]
 801c8d8:	f044 0201 	orr.w	r2, r4, #1
 801c8dc:	605a      	str	r2, [r3, #4]
 801c8de:	6083      	str	r3, [r0, #8]
 801c8e0:	4b48      	ldr	r3, [pc, #288]	; (801ca04 <_free_r+0x174>)
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	42a3      	cmp	r3, r4
 801c8e6:	d804      	bhi.n	801c8f2 <_free_r+0x62>
 801c8e8:	4b47      	ldr	r3, [pc, #284]	; (801ca08 <_free_r+0x178>)
 801c8ea:	4628      	mov	r0, r5
 801c8ec:	6819      	ldr	r1, [r3, #0]
 801c8ee:	f7ff ff7b 	bl	801c7e8 <_malloc_trim_r>
 801c8f2:	4628      	mov	r0, r5
 801c8f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c8f8:	f7fc b8b8 	b.w	8018a6c <__malloc_unlock>
 801c8fc:	f8cc 6004 	str.w	r6, [ip, #4]
 801c900:	2a00      	cmp	r2, #0
 801c902:	d138      	bne.n	801c976 <_free_r+0xe6>
 801c904:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801c908:	1a5b      	subs	r3, r3, r1
 801c90a:	440c      	add	r4, r1
 801c90c:	6899      	ldr	r1, [r3, #8]
 801c90e:	f100 0708 	add.w	r7, r0, #8
 801c912:	42b9      	cmp	r1, r7
 801c914:	d031      	beq.n	801c97a <_free_r+0xea>
 801c916:	68df      	ldr	r7, [r3, #12]
 801c918:	60cf      	str	r7, [r1, #12]
 801c91a:	60b9      	str	r1, [r7, #8]
 801c91c:	eb0c 0106 	add.w	r1, ip, r6
 801c920:	6849      	ldr	r1, [r1, #4]
 801c922:	07c9      	lsls	r1, r1, #31
 801c924:	d40b      	bmi.n	801c93e <_free_r+0xae>
 801c926:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801c92a:	4434      	add	r4, r6
 801c92c:	bb3a      	cbnz	r2, 801c97e <_free_r+0xee>
 801c92e:	4e37      	ldr	r6, [pc, #220]	; (801ca0c <_free_r+0x17c>)
 801c930:	42b1      	cmp	r1, r6
 801c932:	d124      	bne.n	801c97e <_free_r+0xee>
 801c934:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c938:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801c93c:	2201      	movs	r2, #1
 801c93e:	f044 0101 	orr.w	r1, r4, #1
 801c942:	6059      	str	r1, [r3, #4]
 801c944:	511c      	str	r4, [r3, r4]
 801c946:	2a00      	cmp	r2, #0
 801c948:	d1d3      	bne.n	801c8f2 <_free_r+0x62>
 801c94a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801c94e:	d21b      	bcs.n	801c988 <_free_r+0xf8>
 801c950:	0961      	lsrs	r1, r4, #5
 801c952:	08e2      	lsrs	r2, r4, #3
 801c954:	2401      	movs	r4, #1
 801c956:	408c      	lsls	r4, r1
 801c958:	6841      	ldr	r1, [r0, #4]
 801c95a:	3201      	adds	r2, #1
 801c95c:	430c      	orrs	r4, r1
 801c95e:	6044      	str	r4, [r0, #4]
 801c960:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 801c964:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 801c968:	3908      	subs	r1, #8
 801c96a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801c96e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801c972:	60e3      	str	r3, [r4, #12]
 801c974:	e7bd      	b.n	801c8f2 <_free_r+0x62>
 801c976:	2200      	movs	r2, #0
 801c978:	e7d0      	b.n	801c91c <_free_r+0x8c>
 801c97a:	2201      	movs	r2, #1
 801c97c:	e7ce      	b.n	801c91c <_free_r+0x8c>
 801c97e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801c982:	60ce      	str	r6, [r1, #12]
 801c984:	60b1      	str	r1, [r6, #8]
 801c986:	e7da      	b.n	801c93e <_free_r+0xae>
 801c988:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 801c98c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 801c990:	d214      	bcs.n	801c9bc <_free_r+0x12c>
 801c992:	09a2      	lsrs	r2, r4, #6
 801c994:	3238      	adds	r2, #56	; 0x38
 801c996:	1c51      	adds	r1, r2, #1
 801c998:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801c99c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 801c9a0:	428e      	cmp	r6, r1
 801c9a2:	d125      	bne.n	801c9f0 <_free_r+0x160>
 801c9a4:	2401      	movs	r4, #1
 801c9a6:	1092      	asrs	r2, r2, #2
 801c9a8:	fa04 f202 	lsl.w	r2, r4, r2
 801c9ac:	6844      	ldr	r4, [r0, #4]
 801c9ae:	4322      	orrs	r2, r4
 801c9b0:	6042      	str	r2, [r0, #4]
 801c9b2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801c9b6:	60b3      	str	r3, [r6, #8]
 801c9b8:	60cb      	str	r3, [r1, #12]
 801c9ba:	e79a      	b.n	801c8f2 <_free_r+0x62>
 801c9bc:	2a14      	cmp	r2, #20
 801c9be:	d801      	bhi.n	801c9c4 <_free_r+0x134>
 801c9c0:	325b      	adds	r2, #91	; 0x5b
 801c9c2:	e7e8      	b.n	801c996 <_free_r+0x106>
 801c9c4:	2a54      	cmp	r2, #84	; 0x54
 801c9c6:	d802      	bhi.n	801c9ce <_free_r+0x13e>
 801c9c8:	0b22      	lsrs	r2, r4, #12
 801c9ca:	326e      	adds	r2, #110	; 0x6e
 801c9cc:	e7e3      	b.n	801c996 <_free_r+0x106>
 801c9ce:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801c9d2:	d802      	bhi.n	801c9da <_free_r+0x14a>
 801c9d4:	0be2      	lsrs	r2, r4, #15
 801c9d6:	3277      	adds	r2, #119	; 0x77
 801c9d8:	e7dd      	b.n	801c996 <_free_r+0x106>
 801c9da:	f240 5154 	movw	r1, #1364	; 0x554
 801c9de:	428a      	cmp	r2, r1
 801c9e0:	bf9a      	itte	ls
 801c9e2:	0ca2      	lsrls	r2, r4, #18
 801c9e4:	327c      	addls	r2, #124	; 0x7c
 801c9e6:	227e      	movhi	r2, #126	; 0x7e
 801c9e8:	e7d5      	b.n	801c996 <_free_r+0x106>
 801c9ea:	6889      	ldr	r1, [r1, #8]
 801c9ec:	428e      	cmp	r6, r1
 801c9ee:	d004      	beq.n	801c9fa <_free_r+0x16a>
 801c9f0:	684a      	ldr	r2, [r1, #4]
 801c9f2:	f022 0203 	bic.w	r2, r2, #3
 801c9f6:	42a2      	cmp	r2, r4
 801c9f8:	d8f7      	bhi.n	801c9ea <_free_r+0x15a>
 801c9fa:	68ce      	ldr	r6, [r1, #12]
 801c9fc:	e7d9      	b.n	801c9b2 <_free_r+0x122>
 801c9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca00:	200004c8 	.word	0x200004c8
 801ca04:	200008d4 	.word	0x200008d4
 801ca08:	20005e9c 	.word	0x20005e9c
 801ca0c:	200004d0 	.word	0x200004d0

0801ca10 <_fwalk_reent>:
 801ca10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca14:	4606      	mov	r6, r0
 801ca16:	4688      	mov	r8, r1
 801ca18:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 801ca1c:	2700      	movs	r7, #0
 801ca1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ca22:	f1b9 0901 	subs.w	r9, r9, #1
 801ca26:	d505      	bpl.n	801ca34 <_fwalk_reent+0x24>
 801ca28:	6824      	ldr	r4, [r4, #0]
 801ca2a:	2c00      	cmp	r4, #0
 801ca2c:	d1f7      	bne.n	801ca1e <_fwalk_reent+0xe>
 801ca2e:	4638      	mov	r0, r7
 801ca30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca34:	89ab      	ldrh	r3, [r5, #12]
 801ca36:	2b01      	cmp	r3, #1
 801ca38:	d907      	bls.n	801ca4a <_fwalk_reent+0x3a>
 801ca3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ca3e:	3301      	adds	r3, #1
 801ca40:	d003      	beq.n	801ca4a <_fwalk_reent+0x3a>
 801ca42:	4629      	mov	r1, r5
 801ca44:	4630      	mov	r0, r6
 801ca46:	47c0      	blx	r8
 801ca48:	4307      	orrs	r7, r0
 801ca4a:	3568      	adds	r5, #104	; 0x68
 801ca4c:	e7e9      	b.n	801ca22 <_fwalk_reent+0x12>
	...

0801ca50 <_localeconv_r>:
 801ca50:	4800      	ldr	r0, [pc, #0]	; (801ca54 <_localeconv_r+0x4>)
 801ca52:	4770      	bx	lr
 801ca54:	200009cc 	.word	0x200009cc

0801ca58 <__swhatbuf_r>:
 801ca58:	b570      	push	{r4, r5, r6, lr}
 801ca5a:	460e      	mov	r6, r1
 801ca5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca60:	2900      	cmp	r1, #0
 801ca62:	b096      	sub	sp, #88	; 0x58
 801ca64:	4614      	mov	r4, r2
 801ca66:	461d      	mov	r5, r3
 801ca68:	da0a      	bge.n	801ca80 <__swhatbuf_r+0x28>
 801ca6a:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 801ca6e:	2300      	movs	r3, #0
 801ca70:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 801ca74:	602b      	str	r3, [r5, #0]
 801ca76:	d116      	bne.n	801caa6 <__swhatbuf_r+0x4e>
 801ca78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca7c:	6023      	str	r3, [r4, #0]
 801ca7e:	e015      	b.n	801caac <__swhatbuf_r+0x54>
 801ca80:	466a      	mov	r2, sp
 801ca82:	f001 fb17 	bl	801e0b4 <_fstat_r>
 801ca86:	2800      	cmp	r0, #0
 801ca88:	dbef      	blt.n	801ca6a <__swhatbuf_r+0x12>
 801ca8a:	9a01      	ldr	r2, [sp, #4]
 801ca8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ca90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ca94:	425a      	negs	r2, r3
 801ca96:	415a      	adcs	r2, r3
 801ca98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca9c:	602a      	str	r2, [r5, #0]
 801ca9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801caa2:	6023      	str	r3, [r4, #0]
 801caa4:	e002      	b.n	801caac <__swhatbuf_r+0x54>
 801caa6:	2240      	movs	r2, #64	; 0x40
 801caa8:	6022      	str	r2, [r4, #0]
 801caaa:	4618      	mov	r0, r3
 801caac:	b016      	add	sp, #88	; 0x58
 801caae:	bd70      	pop	{r4, r5, r6, pc}

0801cab0 <__smakebuf_r>:
 801cab0:	898b      	ldrh	r3, [r1, #12]
 801cab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cab4:	079d      	lsls	r5, r3, #30
 801cab6:	4606      	mov	r6, r0
 801cab8:	460c      	mov	r4, r1
 801caba:	d507      	bpl.n	801cacc <__smakebuf_r+0x1c>
 801cabc:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801cac0:	6023      	str	r3, [r4, #0]
 801cac2:	6123      	str	r3, [r4, #16]
 801cac4:	2301      	movs	r3, #1
 801cac6:	6163      	str	r3, [r4, #20]
 801cac8:	b002      	add	sp, #8
 801caca:	bd70      	pop	{r4, r5, r6, pc}
 801cacc:	ab01      	add	r3, sp, #4
 801cace:	466a      	mov	r2, sp
 801cad0:	f7ff ffc2 	bl	801ca58 <__swhatbuf_r>
 801cad4:	9900      	ldr	r1, [sp, #0]
 801cad6:	4605      	mov	r5, r0
 801cad8:	4630      	mov	r0, r6
 801cada:	f7fb fd45 	bl	8018568 <_malloc_r>
 801cade:	b948      	cbnz	r0, 801caf4 <__smakebuf_r+0x44>
 801cae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cae4:	059a      	lsls	r2, r3, #22
 801cae6:	d4ef      	bmi.n	801cac8 <__smakebuf_r+0x18>
 801cae8:	f023 0303 	bic.w	r3, r3, #3
 801caec:	f043 0302 	orr.w	r3, r3, #2
 801caf0:	81a3      	strh	r3, [r4, #12]
 801caf2:	e7e3      	b.n	801cabc <__smakebuf_r+0xc>
 801caf4:	4b0d      	ldr	r3, [pc, #52]	; (801cb2c <__smakebuf_r+0x7c>)
 801caf6:	63f3      	str	r3, [r6, #60]	; 0x3c
 801caf8:	89a3      	ldrh	r3, [r4, #12]
 801cafa:	6020      	str	r0, [r4, #0]
 801cafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cb00:	81a3      	strh	r3, [r4, #12]
 801cb02:	9b00      	ldr	r3, [sp, #0]
 801cb04:	6163      	str	r3, [r4, #20]
 801cb06:	9b01      	ldr	r3, [sp, #4]
 801cb08:	6120      	str	r0, [r4, #16]
 801cb0a:	b15b      	cbz	r3, 801cb24 <__smakebuf_r+0x74>
 801cb0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cb10:	4630      	mov	r0, r6
 801cb12:	f001 fae1 	bl	801e0d8 <_isatty_r>
 801cb16:	b128      	cbz	r0, 801cb24 <__smakebuf_r+0x74>
 801cb18:	89a3      	ldrh	r3, [r4, #12]
 801cb1a:	f023 0303 	bic.w	r3, r3, #3
 801cb1e:	f043 0301 	orr.w	r3, r3, #1
 801cb22:	81a3      	strh	r3, [r4, #12]
 801cb24:	89a0      	ldrh	r0, [r4, #12]
 801cb26:	4305      	orrs	r5, r0
 801cb28:	81a5      	strh	r5, [r4, #12]
 801cb2a:	e7cd      	b.n	801cac8 <__smakebuf_r+0x18>
 801cb2c:	0801c735 	.word	0x0801c735

0801cb30 <_Balloc>:
 801cb30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801cb32:	b570      	push	{r4, r5, r6, lr}
 801cb34:	4605      	mov	r5, r0
 801cb36:	460c      	mov	r4, r1
 801cb38:	b17b      	cbz	r3, 801cb5a <_Balloc+0x2a>
 801cb3a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801cb3c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801cb40:	b9a0      	cbnz	r0, 801cb6c <_Balloc+0x3c>
 801cb42:	2101      	movs	r1, #1
 801cb44:	fa01 f604 	lsl.w	r6, r1, r4
 801cb48:	1d72      	adds	r2, r6, #5
 801cb4a:	0092      	lsls	r2, r2, #2
 801cb4c:	4628      	mov	r0, r5
 801cb4e:	f001 f997 	bl	801de80 <_calloc_r>
 801cb52:	b148      	cbz	r0, 801cb68 <_Balloc+0x38>
 801cb54:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801cb58:	e00b      	b.n	801cb72 <_Balloc+0x42>
 801cb5a:	2221      	movs	r2, #33	; 0x21
 801cb5c:	2104      	movs	r1, #4
 801cb5e:	f001 f98f 	bl	801de80 <_calloc_r>
 801cb62:	64e8      	str	r0, [r5, #76]	; 0x4c
 801cb64:	2800      	cmp	r0, #0
 801cb66:	d1e8      	bne.n	801cb3a <_Balloc+0xa>
 801cb68:	2000      	movs	r0, #0
 801cb6a:	bd70      	pop	{r4, r5, r6, pc}
 801cb6c:	6802      	ldr	r2, [r0, #0]
 801cb6e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801cb72:	2300      	movs	r3, #0
 801cb74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cb78:	e7f7      	b.n	801cb6a <_Balloc+0x3a>

0801cb7a <_Bfree>:
 801cb7a:	b131      	cbz	r1, 801cb8a <_Bfree+0x10>
 801cb7c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801cb7e:	684a      	ldr	r2, [r1, #4]
 801cb80:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cb84:	6008      	str	r0, [r1, #0]
 801cb86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801cb8a:	4770      	bx	lr

0801cb8c <__multadd>:
 801cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb90:	690d      	ldr	r5, [r1, #16]
 801cb92:	4607      	mov	r7, r0
 801cb94:	460c      	mov	r4, r1
 801cb96:	461e      	mov	r6, r3
 801cb98:	f101 0c14 	add.w	ip, r1, #20
 801cb9c:	2000      	movs	r0, #0
 801cb9e:	f8dc 3000 	ldr.w	r3, [ip]
 801cba2:	b299      	uxth	r1, r3
 801cba4:	fb02 6101 	mla	r1, r2, r1, r6
 801cba8:	0c1e      	lsrs	r6, r3, #16
 801cbaa:	0c0b      	lsrs	r3, r1, #16
 801cbac:	fb02 3306 	mla	r3, r2, r6, r3
 801cbb0:	b289      	uxth	r1, r1
 801cbb2:	3001      	adds	r0, #1
 801cbb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cbb8:	4285      	cmp	r5, r0
 801cbba:	f84c 1b04 	str.w	r1, [ip], #4
 801cbbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cbc2:	dcec      	bgt.n	801cb9e <__multadd+0x12>
 801cbc4:	b30e      	cbz	r6, 801cc0a <__multadd+0x7e>
 801cbc6:	68a3      	ldr	r3, [r4, #8]
 801cbc8:	42ab      	cmp	r3, r5
 801cbca:	dc19      	bgt.n	801cc00 <__multadd+0x74>
 801cbcc:	6861      	ldr	r1, [r4, #4]
 801cbce:	4638      	mov	r0, r7
 801cbd0:	3101      	adds	r1, #1
 801cbd2:	f7ff ffad 	bl	801cb30 <_Balloc>
 801cbd6:	4680      	mov	r8, r0
 801cbd8:	b928      	cbnz	r0, 801cbe6 <__multadd+0x5a>
 801cbda:	4602      	mov	r2, r0
 801cbdc:	4b0c      	ldr	r3, [pc, #48]	; (801cc10 <__multadd+0x84>)
 801cbde:	480d      	ldr	r0, [pc, #52]	; (801cc14 <__multadd+0x88>)
 801cbe0:	21b5      	movs	r1, #181	; 0xb5
 801cbe2:	f001 f92f 	bl	801de44 <__assert_func>
 801cbe6:	6922      	ldr	r2, [r4, #16]
 801cbe8:	3202      	adds	r2, #2
 801cbea:	f104 010c 	add.w	r1, r4, #12
 801cbee:	0092      	lsls	r2, r2, #2
 801cbf0:	300c      	adds	r0, #12
 801cbf2:	f7fb ff05 	bl	8018a00 <memcpy>
 801cbf6:	4621      	mov	r1, r4
 801cbf8:	4638      	mov	r0, r7
 801cbfa:	f7ff ffbe 	bl	801cb7a <_Bfree>
 801cbfe:	4644      	mov	r4, r8
 801cc00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cc04:	3501      	adds	r5, #1
 801cc06:	615e      	str	r6, [r3, #20]
 801cc08:	6125      	str	r5, [r4, #16]
 801cc0a:	4620      	mov	r0, r4
 801cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc10:	0802067d 	.word	0x0802067d
 801cc14:	080206e9 	.word	0x080206e9

0801cc18 <__hi0bits>:
 801cc18:	0c02      	lsrs	r2, r0, #16
 801cc1a:	0412      	lsls	r2, r2, #16
 801cc1c:	4603      	mov	r3, r0
 801cc1e:	b9ca      	cbnz	r2, 801cc54 <__hi0bits+0x3c>
 801cc20:	0403      	lsls	r3, r0, #16
 801cc22:	2010      	movs	r0, #16
 801cc24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801cc28:	bf04      	itt	eq
 801cc2a:	021b      	lsleq	r3, r3, #8
 801cc2c:	3008      	addeq	r0, #8
 801cc2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801cc32:	bf04      	itt	eq
 801cc34:	011b      	lsleq	r3, r3, #4
 801cc36:	3004      	addeq	r0, #4
 801cc38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801cc3c:	bf04      	itt	eq
 801cc3e:	009b      	lsleq	r3, r3, #2
 801cc40:	3002      	addeq	r0, #2
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	db05      	blt.n	801cc52 <__hi0bits+0x3a>
 801cc46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801cc4a:	f100 0001 	add.w	r0, r0, #1
 801cc4e:	bf08      	it	eq
 801cc50:	2020      	moveq	r0, #32
 801cc52:	4770      	bx	lr
 801cc54:	2000      	movs	r0, #0
 801cc56:	e7e5      	b.n	801cc24 <__hi0bits+0xc>

0801cc58 <__lo0bits>:
 801cc58:	6803      	ldr	r3, [r0, #0]
 801cc5a:	4602      	mov	r2, r0
 801cc5c:	f013 0007 	ands.w	r0, r3, #7
 801cc60:	d00b      	beq.n	801cc7a <__lo0bits+0x22>
 801cc62:	07d9      	lsls	r1, r3, #31
 801cc64:	d421      	bmi.n	801ccaa <__lo0bits+0x52>
 801cc66:	0798      	lsls	r0, r3, #30
 801cc68:	bf49      	itett	mi
 801cc6a:	085b      	lsrmi	r3, r3, #1
 801cc6c:	089b      	lsrpl	r3, r3, #2
 801cc6e:	2001      	movmi	r0, #1
 801cc70:	6013      	strmi	r3, [r2, #0]
 801cc72:	bf5c      	itt	pl
 801cc74:	6013      	strpl	r3, [r2, #0]
 801cc76:	2002      	movpl	r0, #2
 801cc78:	4770      	bx	lr
 801cc7a:	b299      	uxth	r1, r3
 801cc7c:	b909      	cbnz	r1, 801cc82 <__lo0bits+0x2a>
 801cc7e:	0c1b      	lsrs	r3, r3, #16
 801cc80:	2010      	movs	r0, #16
 801cc82:	b2d9      	uxtb	r1, r3
 801cc84:	b909      	cbnz	r1, 801cc8a <__lo0bits+0x32>
 801cc86:	3008      	adds	r0, #8
 801cc88:	0a1b      	lsrs	r3, r3, #8
 801cc8a:	0719      	lsls	r1, r3, #28
 801cc8c:	bf04      	itt	eq
 801cc8e:	091b      	lsreq	r3, r3, #4
 801cc90:	3004      	addeq	r0, #4
 801cc92:	0799      	lsls	r1, r3, #30
 801cc94:	bf04      	itt	eq
 801cc96:	089b      	lsreq	r3, r3, #2
 801cc98:	3002      	addeq	r0, #2
 801cc9a:	07d9      	lsls	r1, r3, #31
 801cc9c:	d403      	bmi.n	801cca6 <__lo0bits+0x4e>
 801cc9e:	085b      	lsrs	r3, r3, #1
 801cca0:	f100 0001 	add.w	r0, r0, #1
 801cca4:	d003      	beq.n	801ccae <__lo0bits+0x56>
 801cca6:	6013      	str	r3, [r2, #0]
 801cca8:	4770      	bx	lr
 801ccaa:	2000      	movs	r0, #0
 801ccac:	4770      	bx	lr
 801ccae:	2020      	movs	r0, #32
 801ccb0:	4770      	bx	lr
	...

0801ccb4 <__i2b>:
 801ccb4:	b510      	push	{r4, lr}
 801ccb6:	460c      	mov	r4, r1
 801ccb8:	2101      	movs	r1, #1
 801ccba:	f7ff ff39 	bl	801cb30 <_Balloc>
 801ccbe:	4602      	mov	r2, r0
 801ccc0:	b928      	cbnz	r0, 801ccce <__i2b+0x1a>
 801ccc2:	4b05      	ldr	r3, [pc, #20]	; (801ccd8 <__i2b+0x24>)
 801ccc4:	4805      	ldr	r0, [pc, #20]	; (801ccdc <__i2b+0x28>)
 801ccc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ccca:	f001 f8bb 	bl	801de44 <__assert_func>
 801ccce:	2301      	movs	r3, #1
 801ccd0:	6144      	str	r4, [r0, #20]
 801ccd2:	6103      	str	r3, [r0, #16]
 801ccd4:	bd10      	pop	{r4, pc}
 801ccd6:	bf00      	nop
 801ccd8:	0802067d 	.word	0x0802067d
 801ccdc:	080206e9 	.word	0x080206e9

0801cce0 <__multiply>:
 801cce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cce4:	4691      	mov	r9, r2
 801cce6:	690a      	ldr	r2, [r1, #16]
 801cce8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ccec:	429a      	cmp	r2, r3
 801ccee:	bfb8      	it	lt
 801ccf0:	460b      	movlt	r3, r1
 801ccf2:	460c      	mov	r4, r1
 801ccf4:	bfbc      	itt	lt
 801ccf6:	464c      	movlt	r4, r9
 801ccf8:	4699      	movlt	r9, r3
 801ccfa:	6927      	ldr	r7, [r4, #16]
 801ccfc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cd00:	68a3      	ldr	r3, [r4, #8]
 801cd02:	6861      	ldr	r1, [r4, #4]
 801cd04:	eb07 060a 	add.w	r6, r7, sl
 801cd08:	42b3      	cmp	r3, r6
 801cd0a:	b085      	sub	sp, #20
 801cd0c:	bfb8      	it	lt
 801cd0e:	3101      	addlt	r1, #1
 801cd10:	f7ff ff0e 	bl	801cb30 <_Balloc>
 801cd14:	b930      	cbnz	r0, 801cd24 <__multiply+0x44>
 801cd16:	4602      	mov	r2, r0
 801cd18:	4b43      	ldr	r3, [pc, #268]	; (801ce28 <__multiply+0x148>)
 801cd1a:	4844      	ldr	r0, [pc, #272]	; (801ce2c <__multiply+0x14c>)
 801cd1c:	f240 115d 	movw	r1, #349	; 0x15d
 801cd20:	f001 f890 	bl	801de44 <__assert_func>
 801cd24:	f100 0514 	add.w	r5, r0, #20
 801cd28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cd2c:	462b      	mov	r3, r5
 801cd2e:	2200      	movs	r2, #0
 801cd30:	4543      	cmp	r3, r8
 801cd32:	d321      	bcc.n	801cd78 <__multiply+0x98>
 801cd34:	f104 0314 	add.w	r3, r4, #20
 801cd38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cd3c:	f109 0314 	add.w	r3, r9, #20
 801cd40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cd44:	9202      	str	r2, [sp, #8]
 801cd46:	1b3a      	subs	r2, r7, r4
 801cd48:	3a15      	subs	r2, #21
 801cd4a:	f022 0203 	bic.w	r2, r2, #3
 801cd4e:	3204      	adds	r2, #4
 801cd50:	f104 0115 	add.w	r1, r4, #21
 801cd54:	428f      	cmp	r7, r1
 801cd56:	bf38      	it	cc
 801cd58:	2204      	movcc	r2, #4
 801cd5a:	9201      	str	r2, [sp, #4]
 801cd5c:	9a02      	ldr	r2, [sp, #8]
 801cd5e:	9303      	str	r3, [sp, #12]
 801cd60:	429a      	cmp	r2, r3
 801cd62:	d80c      	bhi.n	801cd7e <__multiply+0x9e>
 801cd64:	2e00      	cmp	r6, #0
 801cd66:	dd03      	ble.n	801cd70 <__multiply+0x90>
 801cd68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d059      	beq.n	801ce24 <__multiply+0x144>
 801cd70:	6106      	str	r6, [r0, #16]
 801cd72:	b005      	add	sp, #20
 801cd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd78:	f843 2b04 	str.w	r2, [r3], #4
 801cd7c:	e7d8      	b.n	801cd30 <__multiply+0x50>
 801cd7e:	f8b3 a000 	ldrh.w	sl, [r3]
 801cd82:	f1ba 0f00 	cmp.w	sl, #0
 801cd86:	d023      	beq.n	801cdd0 <__multiply+0xf0>
 801cd88:	f104 0e14 	add.w	lr, r4, #20
 801cd8c:	46a9      	mov	r9, r5
 801cd8e:	f04f 0c00 	mov.w	ip, #0
 801cd92:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cd96:	f8d9 1000 	ldr.w	r1, [r9]
 801cd9a:	fa1f fb82 	uxth.w	fp, r2
 801cd9e:	b289      	uxth	r1, r1
 801cda0:	fb0a 110b 	mla	r1, sl, fp, r1
 801cda4:	4461      	add	r1, ip
 801cda6:	f8d9 c000 	ldr.w	ip, [r9]
 801cdaa:	0c12      	lsrs	r2, r2, #16
 801cdac:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801cdb0:	fb0a c202 	mla	r2, sl, r2, ip
 801cdb4:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cdb8:	b289      	uxth	r1, r1
 801cdba:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cdbe:	4577      	cmp	r7, lr
 801cdc0:	f849 1b04 	str.w	r1, [r9], #4
 801cdc4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cdc8:	d8e3      	bhi.n	801cd92 <__multiply+0xb2>
 801cdca:	9a01      	ldr	r2, [sp, #4]
 801cdcc:	f845 c002 	str.w	ip, [r5, r2]
 801cdd0:	9a03      	ldr	r2, [sp, #12]
 801cdd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cdd6:	3304      	adds	r3, #4
 801cdd8:	f1b9 0f00 	cmp.w	r9, #0
 801cddc:	d020      	beq.n	801ce20 <__multiply+0x140>
 801cdde:	6829      	ldr	r1, [r5, #0]
 801cde0:	f104 0c14 	add.w	ip, r4, #20
 801cde4:	46ae      	mov	lr, r5
 801cde6:	f04f 0a00 	mov.w	sl, #0
 801cdea:	f8bc b000 	ldrh.w	fp, [ip]
 801cdee:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cdf2:	fb09 220b 	mla	r2, r9, fp, r2
 801cdf6:	4492      	add	sl, r2
 801cdf8:	b289      	uxth	r1, r1
 801cdfa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cdfe:	f84e 1b04 	str.w	r1, [lr], #4
 801ce02:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ce06:	f8be 1000 	ldrh.w	r1, [lr]
 801ce0a:	0c12      	lsrs	r2, r2, #16
 801ce0c:	fb09 1102 	mla	r1, r9, r2, r1
 801ce10:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ce14:	4567      	cmp	r7, ip
 801ce16:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ce1a:	d8e6      	bhi.n	801cdea <__multiply+0x10a>
 801ce1c:	9a01      	ldr	r2, [sp, #4]
 801ce1e:	50a9      	str	r1, [r5, r2]
 801ce20:	3504      	adds	r5, #4
 801ce22:	e79b      	b.n	801cd5c <__multiply+0x7c>
 801ce24:	3e01      	subs	r6, #1
 801ce26:	e79d      	b.n	801cd64 <__multiply+0x84>
 801ce28:	0802067d 	.word	0x0802067d
 801ce2c:	080206e9 	.word	0x080206e9

0801ce30 <__pow5mult>:
 801ce30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce34:	4615      	mov	r5, r2
 801ce36:	f012 0203 	ands.w	r2, r2, #3
 801ce3a:	4606      	mov	r6, r0
 801ce3c:	460f      	mov	r7, r1
 801ce3e:	d007      	beq.n	801ce50 <__pow5mult+0x20>
 801ce40:	4c1a      	ldr	r4, [pc, #104]	; (801ceac <__pow5mult+0x7c>)
 801ce42:	3a01      	subs	r2, #1
 801ce44:	2300      	movs	r3, #0
 801ce46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ce4a:	f7ff fe9f 	bl	801cb8c <__multadd>
 801ce4e:	4607      	mov	r7, r0
 801ce50:	10ad      	asrs	r5, r5, #2
 801ce52:	d027      	beq.n	801cea4 <__pow5mult+0x74>
 801ce54:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 801ce56:	b944      	cbnz	r4, 801ce6a <__pow5mult+0x3a>
 801ce58:	f240 2171 	movw	r1, #625	; 0x271
 801ce5c:	4630      	mov	r0, r6
 801ce5e:	f7ff ff29 	bl	801ccb4 <__i2b>
 801ce62:	2300      	movs	r3, #0
 801ce64:	64b0      	str	r0, [r6, #72]	; 0x48
 801ce66:	4604      	mov	r4, r0
 801ce68:	6003      	str	r3, [r0, #0]
 801ce6a:	f04f 0900 	mov.w	r9, #0
 801ce6e:	07eb      	lsls	r3, r5, #31
 801ce70:	d50a      	bpl.n	801ce88 <__pow5mult+0x58>
 801ce72:	4639      	mov	r1, r7
 801ce74:	4622      	mov	r2, r4
 801ce76:	4630      	mov	r0, r6
 801ce78:	f7ff ff32 	bl	801cce0 <__multiply>
 801ce7c:	4639      	mov	r1, r7
 801ce7e:	4680      	mov	r8, r0
 801ce80:	4630      	mov	r0, r6
 801ce82:	f7ff fe7a 	bl	801cb7a <_Bfree>
 801ce86:	4647      	mov	r7, r8
 801ce88:	106d      	asrs	r5, r5, #1
 801ce8a:	d00b      	beq.n	801cea4 <__pow5mult+0x74>
 801ce8c:	6820      	ldr	r0, [r4, #0]
 801ce8e:	b938      	cbnz	r0, 801cea0 <__pow5mult+0x70>
 801ce90:	4622      	mov	r2, r4
 801ce92:	4621      	mov	r1, r4
 801ce94:	4630      	mov	r0, r6
 801ce96:	f7ff ff23 	bl	801cce0 <__multiply>
 801ce9a:	6020      	str	r0, [r4, #0]
 801ce9c:	f8c0 9000 	str.w	r9, [r0]
 801cea0:	4604      	mov	r4, r0
 801cea2:	e7e4      	b.n	801ce6e <__pow5mult+0x3e>
 801cea4:	4638      	mov	r0, r7
 801cea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ceaa:	bf00      	nop
 801ceac:	08020838 	.word	0x08020838

0801ceb0 <__lshift>:
 801ceb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ceb4:	460c      	mov	r4, r1
 801ceb6:	6849      	ldr	r1, [r1, #4]
 801ceb8:	6923      	ldr	r3, [r4, #16]
 801ceba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cebe:	68a3      	ldr	r3, [r4, #8]
 801cec0:	4607      	mov	r7, r0
 801cec2:	4691      	mov	r9, r2
 801cec4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cec8:	f108 0601 	add.w	r6, r8, #1
 801cecc:	42b3      	cmp	r3, r6
 801cece:	db0b      	blt.n	801cee8 <__lshift+0x38>
 801ced0:	4638      	mov	r0, r7
 801ced2:	f7ff fe2d 	bl	801cb30 <_Balloc>
 801ced6:	4605      	mov	r5, r0
 801ced8:	b948      	cbnz	r0, 801ceee <__lshift+0x3e>
 801ceda:	4602      	mov	r2, r0
 801cedc:	4b2a      	ldr	r3, [pc, #168]	; (801cf88 <__lshift+0xd8>)
 801cede:	482b      	ldr	r0, [pc, #172]	; (801cf8c <__lshift+0xdc>)
 801cee0:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cee4:	f000 ffae 	bl	801de44 <__assert_func>
 801cee8:	3101      	adds	r1, #1
 801ceea:	005b      	lsls	r3, r3, #1
 801ceec:	e7ee      	b.n	801cecc <__lshift+0x1c>
 801ceee:	2300      	movs	r3, #0
 801cef0:	f100 0114 	add.w	r1, r0, #20
 801cef4:	f100 0210 	add.w	r2, r0, #16
 801cef8:	4618      	mov	r0, r3
 801cefa:	4553      	cmp	r3, sl
 801cefc:	db37      	blt.n	801cf6e <__lshift+0xbe>
 801cefe:	6920      	ldr	r0, [r4, #16]
 801cf00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cf04:	f104 0314 	add.w	r3, r4, #20
 801cf08:	f019 091f 	ands.w	r9, r9, #31
 801cf0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cf10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cf14:	d02f      	beq.n	801cf76 <__lshift+0xc6>
 801cf16:	f1c9 0e20 	rsb	lr, r9, #32
 801cf1a:	468a      	mov	sl, r1
 801cf1c:	f04f 0c00 	mov.w	ip, #0
 801cf20:	681a      	ldr	r2, [r3, #0]
 801cf22:	fa02 f209 	lsl.w	r2, r2, r9
 801cf26:	ea42 020c 	orr.w	r2, r2, ip
 801cf2a:	f84a 2b04 	str.w	r2, [sl], #4
 801cf2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf32:	4298      	cmp	r0, r3
 801cf34:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cf38:	d8f2      	bhi.n	801cf20 <__lshift+0x70>
 801cf3a:	1b03      	subs	r3, r0, r4
 801cf3c:	3b15      	subs	r3, #21
 801cf3e:	f023 0303 	bic.w	r3, r3, #3
 801cf42:	3304      	adds	r3, #4
 801cf44:	f104 0215 	add.w	r2, r4, #21
 801cf48:	4290      	cmp	r0, r2
 801cf4a:	bf38      	it	cc
 801cf4c:	2304      	movcc	r3, #4
 801cf4e:	f841 c003 	str.w	ip, [r1, r3]
 801cf52:	f1bc 0f00 	cmp.w	ip, #0
 801cf56:	d001      	beq.n	801cf5c <__lshift+0xac>
 801cf58:	f108 0602 	add.w	r6, r8, #2
 801cf5c:	3e01      	subs	r6, #1
 801cf5e:	4638      	mov	r0, r7
 801cf60:	612e      	str	r6, [r5, #16]
 801cf62:	4621      	mov	r1, r4
 801cf64:	f7ff fe09 	bl	801cb7a <_Bfree>
 801cf68:	4628      	mov	r0, r5
 801cf6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf6e:	f842 0f04 	str.w	r0, [r2, #4]!
 801cf72:	3301      	adds	r3, #1
 801cf74:	e7c1      	b.n	801cefa <__lshift+0x4a>
 801cf76:	3904      	subs	r1, #4
 801cf78:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf7c:	f841 2f04 	str.w	r2, [r1, #4]!
 801cf80:	4298      	cmp	r0, r3
 801cf82:	d8f9      	bhi.n	801cf78 <__lshift+0xc8>
 801cf84:	e7ea      	b.n	801cf5c <__lshift+0xac>
 801cf86:	bf00      	nop
 801cf88:	0802067d 	.word	0x0802067d
 801cf8c:	080206e9 	.word	0x080206e9

0801cf90 <__mcmp>:
 801cf90:	690a      	ldr	r2, [r1, #16]
 801cf92:	4603      	mov	r3, r0
 801cf94:	6900      	ldr	r0, [r0, #16]
 801cf96:	1a80      	subs	r0, r0, r2
 801cf98:	b530      	push	{r4, r5, lr}
 801cf9a:	d10d      	bne.n	801cfb8 <__mcmp+0x28>
 801cf9c:	3314      	adds	r3, #20
 801cf9e:	3114      	adds	r1, #20
 801cfa0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801cfa4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801cfa8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801cfac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801cfb0:	4295      	cmp	r5, r2
 801cfb2:	d002      	beq.n	801cfba <__mcmp+0x2a>
 801cfb4:	d304      	bcc.n	801cfc0 <__mcmp+0x30>
 801cfb6:	2001      	movs	r0, #1
 801cfb8:	bd30      	pop	{r4, r5, pc}
 801cfba:	42a3      	cmp	r3, r4
 801cfbc:	d3f4      	bcc.n	801cfa8 <__mcmp+0x18>
 801cfbe:	e7fb      	b.n	801cfb8 <__mcmp+0x28>
 801cfc0:	f04f 30ff 	mov.w	r0, #4294967295
 801cfc4:	e7f8      	b.n	801cfb8 <__mcmp+0x28>
	...

0801cfc8 <__mdiff>:
 801cfc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfcc:	460d      	mov	r5, r1
 801cfce:	4607      	mov	r7, r0
 801cfd0:	4611      	mov	r1, r2
 801cfd2:	4628      	mov	r0, r5
 801cfd4:	4614      	mov	r4, r2
 801cfd6:	f7ff ffdb 	bl	801cf90 <__mcmp>
 801cfda:	1e06      	subs	r6, r0, #0
 801cfdc:	d111      	bne.n	801d002 <__mdiff+0x3a>
 801cfde:	4631      	mov	r1, r6
 801cfe0:	4638      	mov	r0, r7
 801cfe2:	f7ff fda5 	bl	801cb30 <_Balloc>
 801cfe6:	4602      	mov	r2, r0
 801cfe8:	b928      	cbnz	r0, 801cff6 <__mdiff+0x2e>
 801cfea:	4b39      	ldr	r3, [pc, #228]	; (801d0d0 <__mdiff+0x108>)
 801cfec:	f240 2132 	movw	r1, #562	; 0x232
 801cff0:	4838      	ldr	r0, [pc, #224]	; (801d0d4 <__mdiff+0x10c>)
 801cff2:	f000 ff27 	bl	801de44 <__assert_func>
 801cff6:	2301      	movs	r3, #1
 801cff8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801cffc:	4610      	mov	r0, r2
 801cffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d002:	bfa4      	itt	ge
 801d004:	4623      	movge	r3, r4
 801d006:	462c      	movge	r4, r5
 801d008:	4638      	mov	r0, r7
 801d00a:	6861      	ldr	r1, [r4, #4]
 801d00c:	bfa6      	itte	ge
 801d00e:	461d      	movge	r5, r3
 801d010:	2600      	movge	r6, #0
 801d012:	2601      	movlt	r6, #1
 801d014:	f7ff fd8c 	bl	801cb30 <_Balloc>
 801d018:	4602      	mov	r2, r0
 801d01a:	b918      	cbnz	r0, 801d024 <__mdiff+0x5c>
 801d01c:	4b2c      	ldr	r3, [pc, #176]	; (801d0d0 <__mdiff+0x108>)
 801d01e:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d022:	e7e5      	b.n	801cff0 <__mdiff+0x28>
 801d024:	6927      	ldr	r7, [r4, #16]
 801d026:	60c6      	str	r6, [r0, #12]
 801d028:	692e      	ldr	r6, [r5, #16]
 801d02a:	f104 0014 	add.w	r0, r4, #20
 801d02e:	f105 0914 	add.w	r9, r5, #20
 801d032:	f102 0e14 	add.w	lr, r2, #20
 801d036:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 801d03a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d03e:	3410      	adds	r4, #16
 801d040:	46f2      	mov	sl, lr
 801d042:	2100      	movs	r1, #0
 801d044:	f859 3b04 	ldr.w	r3, [r9], #4
 801d048:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801d04c:	fa1f f883 	uxth.w	r8, r3
 801d050:	fa11 f18b 	uxtah	r1, r1, fp
 801d054:	0c1b      	lsrs	r3, r3, #16
 801d056:	eba1 0808 	sub.w	r8, r1, r8
 801d05a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d05e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d062:	fa1f f888 	uxth.w	r8, r8
 801d066:	1419      	asrs	r1, r3, #16
 801d068:	454e      	cmp	r6, r9
 801d06a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d06e:	f84a 3b04 	str.w	r3, [sl], #4
 801d072:	d8e7      	bhi.n	801d044 <__mdiff+0x7c>
 801d074:	1b73      	subs	r3, r6, r5
 801d076:	3b15      	subs	r3, #21
 801d078:	f023 0303 	bic.w	r3, r3, #3
 801d07c:	3304      	adds	r3, #4
 801d07e:	3515      	adds	r5, #21
 801d080:	42ae      	cmp	r6, r5
 801d082:	bf38      	it	cc
 801d084:	2304      	movcc	r3, #4
 801d086:	4418      	add	r0, r3
 801d088:	4473      	add	r3, lr
 801d08a:	469e      	mov	lr, r3
 801d08c:	4606      	mov	r6, r0
 801d08e:	4566      	cmp	r6, ip
 801d090:	d30e      	bcc.n	801d0b0 <__mdiff+0xe8>
 801d092:	f10c 0103 	add.w	r1, ip, #3
 801d096:	1a09      	subs	r1, r1, r0
 801d098:	f021 0103 	bic.w	r1, r1, #3
 801d09c:	3803      	subs	r0, #3
 801d09e:	4584      	cmp	ip, r0
 801d0a0:	bf38      	it	cc
 801d0a2:	2100      	movcc	r1, #0
 801d0a4:	4419      	add	r1, r3
 801d0a6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801d0aa:	b17b      	cbz	r3, 801d0cc <__mdiff+0x104>
 801d0ac:	6117      	str	r7, [r2, #16]
 801d0ae:	e7a5      	b.n	801cffc <__mdiff+0x34>
 801d0b0:	f856 8b04 	ldr.w	r8, [r6], #4
 801d0b4:	fa11 f488 	uxtah	r4, r1, r8
 801d0b8:	1425      	asrs	r5, r4, #16
 801d0ba:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 801d0be:	b2a4      	uxth	r4, r4
 801d0c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801d0c4:	f84e 4b04 	str.w	r4, [lr], #4
 801d0c8:	1429      	asrs	r1, r5, #16
 801d0ca:	e7e0      	b.n	801d08e <__mdiff+0xc6>
 801d0cc:	3f01      	subs	r7, #1
 801d0ce:	e7ea      	b.n	801d0a6 <__mdiff+0xde>
 801d0d0:	0802067d 	.word	0x0802067d
 801d0d4:	080206e9 	.word	0x080206e9

0801d0d8 <__d2b>:
 801d0d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d0dc:	2101      	movs	r1, #1
 801d0de:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801d0e2:	4690      	mov	r8, r2
 801d0e4:	461d      	mov	r5, r3
 801d0e6:	f7ff fd23 	bl	801cb30 <_Balloc>
 801d0ea:	4604      	mov	r4, r0
 801d0ec:	b930      	cbnz	r0, 801d0fc <__d2b+0x24>
 801d0ee:	4602      	mov	r2, r0
 801d0f0:	4b25      	ldr	r3, [pc, #148]	; (801d188 <__d2b+0xb0>)
 801d0f2:	4826      	ldr	r0, [pc, #152]	; (801d18c <__d2b+0xb4>)
 801d0f4:	f240 310a 	movw	r1, #778	; 0x30a
 801d0f8:	f000 fea4 	bl	801de44 <__assert_func>
 801d0fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801d100:	f3c5 550a 	ubfx	r5, r5, #20, #11
 801d104:	bb2d      	cbnz	r5, 801d152 <__d2b+0x7a>
 801d106:	9301      	str	r3, [sp, #4]
 801d108:	f1b8 0300 	subs.w	r3, r8, #0
 801d10c:	d026      	beq.n	801d15c <__d2b+0x84>
 801d10e:	4668      	mov	r0, sp
 801d110:	9300      	str	r3, [sp, #0]
 801d112:	f7ff fda1 	bl	801cc58 <__lo0bits>
 801d116:	9900      	ldr	r1, [sp, #0]
 801d118:	b1f0      	cbz	r0, 801d158 <__d2b+0x80>
 801d11a:	9a01      	ldr	r2, [sp, #4]
 801d11c:	f1c0 0320 	rsb	r3, r0, #32
 801d120:	fa02 f303 	lsl.w	r3, r2, r3
 801d124:	430b      	orrs	r3, r1
 801d126:	40c2      	lsrs	r2, r0
 801d128:	6163      	str	r3, [r4, #20]
 801d12a:	9201      	str	r2, [sp, #4]
 801d12c:	9b01      	ldr	r3, [sp, #4]
 801d12e:	61a3      	str	r3, [r4, #24]
 801d130:	2b00      	cmp	r3, #0
 801d132:	bf14      	ite	ne
 801d134:	2102      	movne	r1, #2
 801d136:	2101      	moveq	r1, #1
 801d138:	6121      	str	r1, [r4, #16]
 801d13a:	b1c5      	cbz	r5, 801d16e <__d2b+0x96>
 801d13c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d140:	4405      	add	r5, r0
 801d142:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d146:	603d      	str	r5, [r7, #0]
 801d148:	6030      	str	r0, [r6, #0]
 801d14a:	4620      	mov	r0, r4
 801d14c:	b002      	add	sp, #8
 801d14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d156:	e7d6      	b.n	801d106 <__d2b+0x2e>
 801d158:	6161      	str	r1, [r4, #20]
 801d15a:	e7e7      	b.n	801d12c <__d2b+0x54>
 801d15c:	a801      	add	r0, sp, #4
 801d15e:	f7ff fd7b 	bl	801cc58 <__lo0bits>
 801d162:	9b01      	ldr	r3, [sp, #4]
 801d164:	6163      	str	r3, [r4, #20]
 801d166:	2101      	movs	r1, #1
 801d168:	6121      	str	r1, [r4, #16]
 801d16a:	3020      	adds	r0, #32
 801d16c:	e7e5      	b.n	801d13a <__d2b+0x62>
 801d16e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801d172:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d176:	6038      	str	r0, [r7, #0]
 801d178:	6918      	ldr	r0, [r3, #16]
 801d17a:	f7ff fd4d 	bl	801cc18 <__hi0bits>
 801d17e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 801d182:	6031      	str	r1, [r6, #0]
 801d184:	e7e1      	b.n	801d14a <__d2b+0x72>
 801d186:	bf00      	nop
 801d188:	0802067d 	.word	0x0802067d
 801d18c:	080206e9 	.word	0x080206e9

0801d190 <frexp>:
 801d190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d192:	4617      	mov	r7, r2
 801d194:	2200      	movs	r2, #0
 801d196:	603a      	str	r2, [r7, #0]
 801d198:	4a14      	ldr	r2, [pc, #80]	; (801d1ec <frexp+0x5c>)
 801d19a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d19e:	4296      	cmp	r6, r2
 801d1a0:	4604      	mov	r4, r0
 801d1a2:	460d      	mov	r5, r1
 801d1a4:	460b      	mov	r3, r1
 801d1a6:	dc1e      	bgt.n	801d1e6 <frexp+0x56>
 801d1a8:	4602      	mov	r2, r0
 801d1aa:	4332      	orrs	r2, r6
 801d1ac:	d01b      	beq.n	801d1e6 <frexp+0x56>
 801d1ae:	4a10      	ldr	r2, [pc, #64]	; (801d1f0 <frexp+0x60>)
 801d1b0:	400a      	ands	r2, r1
 801d1b2:	b952      	cbnz	r2, 801d1ca <frexp+0x3a>
 801d1b4:	4b0f      	ldr	r3, [pc, #60]	; (801d1f4 <frexp+0x64>)
 801d1b6:	2200      	movs	r2, #0
 801d1b8:	f7eb fbf6 	bl	80089a8 <__aeabi_dmul>
 801d1bc:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801d1c0:	4604      	mov	r4, r0
 801d1c2:	460b      	mov	r3, r1
 801d1c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d1c8:	603a      	str	r2, [r7, #0]
 801d1ca:	683a      	ldr	r2, [r7, #0]
 801d1cc:	1536      	asrs	r6, r6, #20
 801d1ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d1d2:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 801d1d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d1da:	4416      	add	r6, r2
 801d1dc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801d1e0:	603e      	str	r6, [r7, #0]
 801d1e2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801d1e6:	4620      	mov	r0, r4
 801d1e8:	4629      	mov	r1, r5
 801d1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1ec:	7fefffff 	.word	0x7fefffff
 801d1f0:	7ff00000 	.word	0x7ff00000
 801d1f4:	43500000 	.word	0x43500000

0801d1f8 <__sread>:
 801d1f8:	b510      	push	{r4, lr}
 801d1fa:	460c      	mov	r4, r1
 801d1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d200:	f000 ffa4 	bl	801e14c <_read_r>
 801d204:	2800      	cmp	r0, #0
 801d206:	bfab      	itete	ge
 801d208:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 801d20a:	89a3      	ldrhlt	r3, [r4, #12]
 801d20c:	181b      	addge	r3, r3, r0
 801d20e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d212:	bfac      	ite	ge
 801d214:	6523      	strge	r3, [r4, #80]	; 0x50
 801d216:	81a3      	strhlt	r3, [r4, #12]
 801d218:	bd10      	pop	{r4, pc}

0801d21a <__swrite>:
 801d21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d21e:	461f      	mov	r7, r3
 801d220:	898b      	ldrh	r3, [r1, #12]
 801d222:	05db      	lsls	r3, r3, #23
 801d224:	4605      	mov	r5, r0
 801d226:	460c      	mov	r4, r1
 801d228:	4616      	mov	r6, r2
 801d22a:	d505      	bpl.n	801d238 <__swrite+0x1e>
 801d22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d230:	2302      	movs	r3, #2
 801d232:	2200      	movs	r2, #0
 801d234:	f000 ff66 	bl	801e104 <_lseek_r>
 801d238:	89a3      	ldrh	r3, [r4, #12]
 801d23a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d23e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d242:	81a3      	strh	r3, [r4, #12]
 801d244:	4632      	mov	r2, r6
 801d246:	463b      	mov	r3, r7
 801d248:	4628      	mov	r0, r5
 801d24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d24e:	f000 bda5 	b.w	801dd9c <_write_r>

0801d252 <__sseek>:
 801d252:	b510      	push	{r4, lr}
 801d254:	460c      	mov	r4, r1
 801d256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d25a:	f000 ff53 	bl	801e104 <_lseek_r>
 801d25e:	1c43      	adds	r3, r0, #1
 801d260:	89a3      	ldrh	r3, [r4, #12]
 801d262:	bf15      	itete	ne
 801d264:	6520      	strne	r0, [r4, #80]	; 0x50
 801d266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d26a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d26e:	81a3      	strheq	r3, [r4, #12]
 801d270:	bf18      	it	ne
 801d272:	81a3      	strhne	r3, [r4, #12]
 801d274:	bd10      	pop	{r4, pc}

0801d276 <__sclose>:
 801d276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d27a:	f000 be37 	b.w	801deec <_close_r>

0801d27e <strncpy>:
 801d27e:	b510      	push	{r4, lr}
 801d280:	3901      	subs	r1, #1
 801d282:	4603      	mov	r3, r0
 801d284:	b132      	cbz	r2, 801d294 <strncpy+0x16>
 801d286:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d28a:	f803 4b01 	strb.w	r4, [r3], #1
 801d28e:	3a01      	subs	r2, #1
 801d290:	2c00      	cmp	r4, #0
 801d292:	d1f7      	bne.n	801d284 <strncpy+0x6>
 801d294:	441a      	add	r2, r3
 801d296:	2100      	movs	r1, #0
 801d298:	4293      	cmp	r3, r2
 801d29a:	d100      	bne.n	801d29e <strncpy+0x20>
 801d29c:	bd10      	pop	{r4, pc}
 801d29e:	f803 1b01 	strb.w	r1, [r3], #1
 801d2a2:	e7f9      	b.n	801d298 <strncpy+0x1a>

0801d2a4 <__ssprint_r>:
 801d2a4:	6893      	ldr	r3, [r2, #8]
 801d2a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2aa:	4680      	mov	r8, r0
 801d2ac:	460c      	mov	r4, r1
 801d2ae:	4617      	mov	r7, r2
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d061      	beq.n	801d378 <__ssprint_r+0xd4>
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	f8d2 a000 	ldr.w	sl, [r2]
 801d2ba:	9301      	str	r3, [sp, #4]
 801d2bc:	469b      	mov	fp, r3
 801d2be:	f1bb 0f00 	cmp.w	fp, #0
 801d2c2:	d02b      	beq.n	801d31c <__ssprint_r+0x78>
 801d2c4:	68a6      	ldr	r6, [r4, #8]
 801d2c6:	455e      	cmp	r6, fp
 801d2c8:	d844      	bhi.n	801d354 <__ssprint_r+0xb0>
 801d2ca:	89a2      	ldrh	r2, [r4, #12]
 801d2cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d2d0:	d03e      	beq.n	801d350 <__ssprint_r+0xac>
 801d2d2:	6820      	ldr	r0, [r4, #0]
 801d2d4:	6921      	ldr	r1, [r4, #16]
 801d2d6:	6965      	ldr	r5, [r4, #20]
 801d2d8:	eba0 0901 	sub.w	r9, r0, r1
 801d2dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d2e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d2e4:	f109 0001 	add.w	r0, r9, #1
 801d2e8:	106d      	asrs	r5, r5, #1
 801d2ea:	4458      	add	r0, fp
 801d2ec:	4285      	cmp	r5, r0
 801d2ee:	bf38      	it	cc
 801d2f0:	4605      	movcc	r5, r0
 801d2f2:	0553      	lsls	r3, r2, #21
 801d2f4:	d545      	bpl.n	801d382 <__ssprint_r+0xde>
 801d2f6:	4629      	mov	r1, r5
 801d2f8:	4640      	mov	r0, r8
 801d2fa:	f7fb f935 	bl	8018568 <_malloc_r>
 801d2fe:	4606      	mov	r6, r0
 801d300:	b9a0      	cbnz	r0, 801d32c <__ssprint_r+0x88>
 801d302:	230c      	movs	r3, #12
 801d304:	f8c8 3000 	str.w	r3, [r8]
 801d308:	89a3      	ldrh	r3, [r4, #12]
 801d30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d30e:	81a3      	strh	r3, [r4, #12]
 801d310:	2300      	movs	r3, #0
 801d312:	e9c7 3301 	strd	r3, r3, [r7, #4]
 801d316:	f04f 30ff 	mov.w	r0, #4294967295
 801d31a:	e02f      	b.n	801d37c <__ssprint_r+0xd8>
 801d31c:	f8da 3000 	ldr.w	r3, [sl]
 801d320:	f8da b004 	ldr.w	fp, [sl, #4]
 801d324:	9301      	str	r3, [sp, #4]
 801d326:	f10a 0a08 	add.w	sl, sl, #8
 801d32a:	e7c8      	b.n	801d2be <__ssprint_r+0x1a>
 801d32c:	464a      	mov	r2, r9
 801d32e:	6921      	ldr	r1, [r4, #16]
 801d330:	f7fb fb66 	bl	8018a00 <memcpy>
 801d334:	89a2      	ldrh	r2, [r4, #12]
 801d336:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801d33a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801d33e:	81a2      	strh	r2, [r4, #12]
 801d340:	6126      	str	r6, [r4, #16]
 801d342:	6165      	str	r5, [r4, #20]
 801d344:	444e      	add	r6, r9
 801d346:	eba5 0509 	sub.w	r5, r5, r9
 801d34a:	6026      	str	r6, [r4, #0]
 801d34c:	60a5      	str	r5, [r4, #8]
 801d34e:	465e      	mov	r6, fp
 801d350:	455e      	cmp	r6, fp
 801d352:	d900      	bls.n	801d356 <__ssprint_r+0xb2>
 801d354:	465e      	mov	r6, fp
 801d356:	4632      	mov	r2, r6
 801d358:	9901      	ldr	r1, [sp, #4]
 801d35a:	6820      	ldr	r0, [r4, #0]
 801d35c:	f7fb fb5e 	bl	8018a1c <memmove>
 801d360:	68a2      	ldr	r2, [r4, #8]
 801d362:	1b92      	subs	r2, r2, r6
 801d364:	60a2      	str	r2, [r4, #8]
 801d366:	6822      	ldr	r2, [r4, #0]
 801d368:	4432      	add	r2, r6
 801d36a:	6022      	str	r2, [r4, #0]
 801d36c:	68ba      	ldr	r2, [r7, #8]
 801d36e:	eba2 030b 	sub.w	r3, r2, fp
 801d372:	60bb      	str	r3, [r7, #8]
 801d374:	2b00      	cmp	r3, #0
 801d376:	d1d1      	bne.n	801d31c <__ssprint_r+0x78>
 801d378:	2000      	movs	r0, #0
 801d37a:	6078      	str	r0, [r7, #4]
 801d37c:	b003      	add	sp, #12
 801d37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d382:	462a      	mov	r2, r5
 801d384:	4640      	mov	r0, r8
 801d386:	f7fb fb77 	bl	8018a78 <_realloc_r>
 801d38a:	4606      	mov	r6, r0
 801d38c:	2800      	cmp	r0, #0
 801d38e:	d1d7      	bne.n	801d340 <__ssprint_r+0x9c>
 801d390:	6921      	ldr	r1, [r4, #16]
 801d392:	4640      	mov	r0, r8
 801d394:	f7ff fa7c 	bl	801c890 <_free_r>
 801d398:	e7b3      	b.n	801d302 <__ssprint_r+0x5e>

0801d39a <__sprint_r>:
 801d39a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d39e:	6893      	ldr	r3, [r2, #8]
 801d3a0:	4680      	mov	r8, r0
 801d3a2:	460f      	mov	r7, r1
 801d3a4:	4614      	mov	r4, r2
 801d3a6:	b91b      	cbnz	r3, 801d3b0 <__sprint_r+0x16>
 801d3a8:	6053      	str	r3, [r2, #4]
 801d3aa:	4618      	mov	r0, r3
 801d3ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3b0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801d3b2:	049d      	lsls	r5, r3, #18
 801d3b4:	d520      	bpl.n	801d3f8 <__sprint_r+0x5e>
 801d3b6:	6815      	ldr	r5, [r2, #0]
 801d3b8:	3508      	adds	r5, #8
 801d3ba:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 801d3be:	f04f 0900 	mov.w	r9, #0
 801d3c2:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 801d3c6:	45ca      	cmp	sl, r9
 801d3c8:	dc0b      	bgt.n	801d3e2 <__sprint_r+0x48>
 801d3ca:	68a0      	ldr	r0, [r4, #8]
 801d3cc:	f026 0603 	bic.w	r6, r6, #3
 801d3d0:	1b80      	subs	r0, r0, r6
 801d3d2:	60a0      	str	r0, [r4, #8]
 801d3d4:	3508      	adds	r5, #8
 801d3d6:	2800      	cmp	r0, #0
 801d3d8:	d1ef      	bne.n	801d3ba <__sprint_r+0x20>
 801d3da:	2300      	movs	r3, #0
 801d3dc:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801d3e0:	e7e4      	b.n	801d3ac <__sprint_r+0x12>
 801d3e2:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801d3e6:	463a      	mov	r2, r7
 801d3e8:	4640      	mov	r0, r8
 801d3ea:	f000 fe3a 	bl	801e062 <_fputwc_r>
 801d3ee:	1c43      	adds	r3, r0, #1
 801d3f0:	d0f3      	beq.n	801d3da <__sprint_r+0x40>
 801d3f2:	f109 0901 	add.w	r9, r9, #1
 801d3f6:	e7e6      	b.n	801d3c6 <__sprint_r+0x2c>
 801d3f8:	f7fa feee 	bl	80181d8 <__sfvwrite_r>
 801d3fc:	e7ed      	b.n	801d3da <__sprint_r+0x40>
	...

0801d400 <_vfiprintf_r>:
 801d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d404:	b0bb      	sub	sp, #236	; 0xec
 801d406:	460f      	mov	r7, r1
 801d408:	9202      	str	r2, [sp, #8]
 801d40a:	461d      	mov	r5, r3
 801d40c:	461c      	mov	r4, r3
 801d40e:	4681      	mov	r9, r0
 801d410:	b118      	cbz	r0, 801d41a <_vfiprintf_r+0x1a>
 801d412:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801d414:	b90b      	cbnz	r3, 801d41a <_vfiprintf_r+0x1a>
 801d416:	f7ff f9ab 	bl	801c770 <__sinit>
 801d41a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d41c:	07d8      	lsls	r0, r3, #31
 801d41e:	d405      	bmi.n	801d42c <_vfiprintf_r+0x2c>
 801d420:	89bb      	ldrh	r3, [r7, #12]
 801d422:	0599      	lsls	r1, r3, #22
 801d424:	d402      	bmi.n	801d42c <_vfiprintf_r+0x2c>
 801d426:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d428:	f7fb f89c 	bl	8018564 <__retarget_lock_acquire_recursive>
 801d42c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801d430:	049a      	lsls	r2, r3, #18
 801d432:	d406      	bmi.n	801d442 <_vfiprintf_r+0x42>
 801d434:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801d438:	81bb      	strh	r3, [r7, #12]
 801d43a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d43c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d440:	667b      	str	r3, [r7, #100]	; 0x64
 801d442:	89bb      	ldrh	r3, [r7, #12]
 801d444:	071e      	lsls	r6, r3, #28
 801d446:	d501      	bpl.n	801d44c <_vfiprintf_r+0x4c>
 801d448:	693b      	ldr	r3, [r7, #16]
 801d44a:	b9ab      	cbnz	r3, 801d478 <_vfiprintf_r+0x78>
 801d44c:	4639      	mov	r1, r7
 801d44e:	4648      	mov	r0, r9
 801d450:	f7fe f9f2 	bl	801b838 <__swsetup_r>
 801d454:	b180      	cbz	r0, 801d478 <_vfiprintf_r+0x78>
 801d456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d458:	07d8      	lsls	r0, r3, #31
 801d45a:	d506      	bpl.n	801d46a <_vfiprintf_r+0x6a>
 801d45c:	f04f 33ff 	mov.w	r3, #4294967295
 801d460:	9303      	str	r3, [sp, #12]
 801d462:	9803      	ldr	r0, [sp, #12]
 801d464:	b03b      	add	sp, #236	; 0xec
 801d466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d46a:	89bb      	ldrh	r3, [r7, #12]
 801d46c:	0599      	lsls	r1, r3, #22
 801d46e:	d4f5      	bmi.n	801d45c <_vfiprintf_r+0x5c>
 801d470:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d472:	f7fb f878 	bl	8018566 <__retarget_lock_release_recursive>
 801d476:	e7f1      	b.n	801d45c <_vfiprintf_r+0x5c>
 801d478:	89bb      	ldrh	r3, [r7, #12]
 801d47a:	f003 021a 	and.w	r2, r3, #26
 801d47e:	2a0a      	cmp	r2, #10
 801d480:	d114      	bne.n	801d4ac <_vfiprintf_r+0xac>
 801d482:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801d486:	2a00      	cmp	r2, #0
 801d488:	db10      	blt.n	801d4ac <_vfiprintf_r+0xac>
 801d48a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d48c:	07d2      	lsls	r2, r2, #31
 801d48e:	d404      	bmi.n	801d49a <_vfiprintf_r+0x9a>
 801d490:	059e      	lsls	r6, r3, #22
 801d492:	d402      	bmi.n	801d49a <_vfiprintf_r+0x9a>
 801d494:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d496:	f7fb f866 	bl	8018566 <__retarget_lock_release_recursive>
 801d49a:	9a02      	ldr	r2, [sp, #8]
 801d49c:	462b      	mov	r3, r5
 801d49e:	4639      	mov	r1, r7
 801d4a0:	4648      	mov	r0, r9
 801d4a2:	b03b      	add	sp, #236	; 0xec
 801d4a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4a8:	f000 bc38 	b.w	801dd1c <__sbprintf>
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 801d4b2:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801d4b6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d4ba:	ae11      	add	r6, sp, #68	; 0x44
 801d4bc:	960e      	str	r6, [sp, #56]	; 0x38
 801d4be:	9303      	str	r3, [sp, #12]
 801d4c0:	9b02      	ldr	r3, [sp, #8]
 801d4c2:	461d      	mov	r5, r3
 801d4c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4c8:	b10a      	cbz	r2, 801d4ce <_vfiprintf_r+0xce>
 801d4ca:	2a25      	cmp	r2, #37	; 0x25
 801d4cc:	d1f9      	bne.n	801d4c2 <_vfiprintf_r+0xc2>
 801d4ce:	9b02      	ldr	r3, [sp, #8]
 801d4d0:	ebb5 0803 	subs.w	r8, r5, r3
 801d4d4:	d00d      	beq.n	801d4f2 <_vfiprintf_r+0xf2>
 801d4d6:	e9c6 3800 	strd	r3, r8, [r6]
 801d4da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4dc:	4443      	add	r3, r8
 801d4de:	9310      	str	r3, [sp, #64]	; 0x40
 801d4e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d4e2:	3301      	adds	r3, #1
 801d4e4:	2b07      	cmp	r3, #7
 801d4e6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d4e8:	dc75      	bgt.n	801d5d6 <_vfiprintf_r+0x1d6>
 801d4ea:	3608      	adds	r6, #8
 801d4ec:	9b03      	ldr	r3, [sp, #12]
 801d4ee:	4443      	add	r3, r8
 801d4f0:	9303      	str	r3, [sp, #12]
 801d4f2:	782b      	ldrb	r3, [r5, #0]
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	f000 83d5 	beq.w	801dca4 <_vfiprintf_r+0x8a4>
 801d4fa:	2300      	movs	r3, #0
 801d4fc:	f04f 31ff 	mov.w	r1, #4294967295
 801d500:	1c6a      	adds	r2, r5, #1
 801d502:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801d506:	9101      	str	r1, [sp, #4]
 801d508:	9304      	str	r3, [sp, #16]
 801d50a:	469a      	mov	sl, r3
 801d50c:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d510:	9202      	str	r2, [sp, #8]
 801d512:	f1a3 0220 	sub.w	r2, r3, #32
 801d516:	2a5a      	cmp	r2, #90	; 0x5a
 801d518:	f200 831d 	bhi.w	801db56 <_vfiprintf_r+0x756>
 801d51c:	e8df f012 	tbh	[pc, r2, lsl #1]
 801d520:	031b009a 	.word	0x031b009a
 801d524:	00a2031b 	.word	0x00a2031b
 801d528:	031b031b 	.word	0x031b031b
 801d52c:	0082031b 	.word	0x0082031b
 801d530:	031b031b 	.word	0x031b031b
 801d534:	00af00a5 	.word	0x00af00a5
 801d538:	00ac031b 	.word	0x00ac031b
 801d53c:	031b00b1 	.word	0x031b00b1
 801d540:	00cf00cc 	.word	0x00cf00cc
 801d544:	00cf00cf 	.word	0x00cf00cf
 801d548:	00cf00cf 	.word	0x00cf00cf
 801d54c:	00cf00cf 	.word	0x00cf00cf
 801d550:	00cf00cf 	.word	0x00cf00cf
 801d554:	031b031b 	.word	0x031b031b
 801d558:	031b031b 	.word	0x031b031b
 801d55c:	031b031b 	.word	0x031b031b
 801d560:	031b031b 	.word	0x031b031b
 801d564:	00f9031b 	.word	0x00f9031b
 801d568:	031b0107 	.word	0x031b0107
 801d56c:	031b031b 	.word	0x031b031b
 801d570:	031b031b 	.word	0x031b031b
 801d574:	031b031b 	.word	0x031b031b
 801d578:	031b031b 	.word	0x031b031b
 801d57c:	0157031b 	.word	0x0157031b
 801d580:	031b031b 	.word	0x031b031b
 801d584:	01a0031b 	.word	0x01a0031b
 801d588:	027d031b 	.word	0x027d031b
 801d58c:	031b031b 	.word	0x031b031b
 801d590:	031b029d 	.word	0x031b029d
 801d594:	031b031b 	.word	0x031b031b
 801d598:	031b031b 	.word	0x031b031b
 801d59c:	031b031b 	.word	0x031b031b
 801d5a0:	031b031b 	.word	0x031b031b
 801d5a4:	00f9031b 	.word	0x00f9031b
 801d5a8:	031b0109 	.word	0x031b0109
 801d5ac:	031b031b 	.word	0x031b031b
 801d5b0:	010900df 	.word	0x010900df
 801d5b4:	031b00f3 	.word	0x031b00f3
 801d5b8:	031b00ec 	.word	0x031b00ec
 801d5bc:	01590135 	.word	0x01590135
 801d5c0:	00f3018e 	.word	0x00f3018e
 801d5c4:	01a0031b 	.word	0x01a0031b
 801d5c8:	027f0098 	.word	0x027f0098
 801d5cc:	031b031b 	.word	0x031b031b
 801d5d0:	031b0065 	.word	0x031b0065
 801d5d4:	0098      	.short	0x0098
 801d5d6:	aa0e      	add	r2, sp, #56	; 0x38
 801d5d8:	4639      	mov	r1, r7
 801d5da:	4648      	mov	r0, r9
 801d5dc:	f7ff fedd 	bl	801d39a <__sprint_r>
 801d5e0:	2800      	cmp	r0, #0
 801d5e2:	f040 833e 	bne.w	801dc62 <_vfiprintf_r+0x862>
 801d5e6:	ae11      	add	r6, sp, #68	; 0x44
 801d5e8:	e780      	b.n	801d4ec <_vfiprintf_r+0xec>
 801d5ea:	4a9c      	ldr	r2, [pc, #624]	; (801d85c <_vfiprintf_r+0x45c>)
 801d5ec:	9206      	str	r2, [sp, #24]
 801d5ee:	f01a 0220 	ands.w	r2, sl, #32
 801d5f2:	f000 8234 	beq.w	801da5e <_vfiprintf_r+0x65e>
 801d5f6:	3407      	adds	r4, #7
 801d5f8:	f024 0207 	bic.w	r2, r4, #7
 801d5fc:	4693      	mov	fp, r2
 801d5fe:	6855      	ldr	r5, [r2, #4]
 801d600:	f85b 4b08 	ldr.w	r4, [fp], #8
 801d604:	f01a 0f01 	tst.w	sl, #1
 801d608:	d009      	beq.n	801d61e <_vfiprintf_r+0x21e>
 801d60a:	ea54 0205 	orrs.w	r2, r4, r5
 801d60e:	bf1f      	itttt	ne
 801d610:	2230      	movne	r2, #48	; 0x30
 801d612:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 801d616:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 801d61a:	f04a 0a02 	orrne.w	sl, sl, #2
 801d61e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801d622:	e119      	b.n	801d858 <_vfiprintf_r+0x458>
 801d624:	4648      	mov	r0, r9
 801d626:	f7ff fa13 	bl	801ca50 <_localeconv_r>
 801d62a:	6843      	ldr	r3, [r0, #4]
 801d62c:	9309      	str	r3, [sp, #36]	; 0x24
 801d62e:	4618      	mov	r0, r3
 801d630:	f7ea fff6 	bl	8008620 <strlen>
 801d634:	9008      	str	r0, [sp, #32]
 801d636:	4648      	mov	r0, r9
 801d638:	f7ff fa0a 	bl	801ca50 <_localeconv_r>
 801d63c:	6883      	ldr	r3, [r0, #8]
 801d63e:	9307      	str	r3, [sp, #28]
 801d640:	9b08      	ldr	r3, [sp, #32]
 801d642:	b12b      	cbz	r3, 801d650 <_vfiprintf_r+0x250>
 801d644:	9b07      	ldr	r3, [sp, #28]
 801d646:	b11b      	cbz	r3, 801d650 <_vfiprintf_r+0x250>
 801d648:	781b      	ldrb	r3, [r3, #0]
 801d64a:	b10b      	cbz	r3, 801d650 <_vfiprintf_r+0x250>
 801d64c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801d650:	9a02      	ldr	r2, [sp, #8]
 801d652:	e75b      	b.n	801d50c <_vfiprintf_r+0x10c>
 801d654:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d1f9      	bne.n	801d650 <_vfiprintf_r+0x250>
 801d65c:	2320      	movs	r3, #32
 801d65e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801d662:	e7f5      	b.n	801d650 <_vfiprintf_r+0x250>
 801d664:	f04a 0a01 	orr.w	sl, sl, #1
 801d668:	e7f2      	b.n	801d650 <_vfiprintf_r+0x250>
 801d66a:	f854 3b04 	ldr.w	r3, [r4], #4
 801d66e:	9304      	str	r3, [sp, #16]
 801d670:	2b00      	cmp	r3, #0
 801d672:	daed      	bge.n	801d650 <_vfiprintf_r+0x250>
 801d674:	425b      	negs	r3, r3
 801d676:	9304      	str	r3, [sp, #16]
 801d678:	f04a 0a04 	orr.w	sl, sl, #4
 801d67c:	e7e8      	b.n	801d650 <_vfiprintf_r+0x250>
 801d67e:	232b      	movs	r3, #43	; 0x2b
 801d680:	e7ed      	b.n	801d65e <_vfiprintf_r+0x25e>
 801d682:	9a02      	ldr	r2, [sp, #8]
 801d684:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d688:	2b2a      	cmp	r3, #42	; 0x2a
 801d68a:	d112      	bne.n	801d6b2 <_vfiprintf_r+0x2b2>
 801d68c:	f854 0b04 	ldr.w	r0, [r4], #4
 801d690:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801d694:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801d698:	e7da      	b.n	801d650 <_vfiprintf_r+0x250>
 801d69a:	9b01      	ldr	r3, [sp, #4]
 801d69c:	200a      	movs	r0, #10
 801d69e:	fb00 1303 	mla	r3, r0, r3, r1
 801d6a2:	9301      	str	r3, [sp, #4]
 801d6a4:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d6a8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801d6ac:	2909      	cmp	r1, #9
 801d6ae:	d9f4      	bls.n	801d69a <_vfiprintf_r+0x29a>
 801d6b0:	e72e      	b.n	801d510 <_vfiprintf_r+0x110>
 801d6b2:	2100      	movs	r1, #0
 801d6b4:	9101      	str	r1, [sp, #4]
 801d6b6:	e7f7      	b.n	801d6a8 <_vfiprintf_r+0x2a8>
 801d6b8:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801d6bc:	e7c8      	b.n	801d650 <_vfiprintf_r+0x250>
 801d6be:	2100      	movs	r1, #0
 801d6c0:	9a02      	ldr	r2, [sp, #8]
 801d6c2:	9104      	str	r1, [sp, #16]
 801d6c4:	9904      	ldr	r1, [sp, #16]
 801d6c6:	3b30      	subs	r3, #48	; 0x30
 801d6c8:	200a      	movs	r0, #10
 801d6ca:	fb00 3301 	mla	r3, r0, r1, r3
 801d6ce:	9304      	str	r3, [sp, #16]
 801d6d0:	f812 3b01 	ldrb.w	r3, [r2], #1
 801d6d4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801d6d8:	2909      	cmp	r1, #9
 801d6da:	d9f3      	bls.n	801d6c4 <_vfiprintf_r+0x2c4>
 801d6dc:	e718      	b.n	801d510 <_vfiprintf_r+0x110>
 801d6de:	9b02      	ldr	r3, [sp, #8]
 801d6e0:	781b      	ldrb	r3, [r3, #0]
 801d6e2:	2b68      	cmp	r3, #104	; 0x68
 801d6e4:	bf01      	itttt	eq
 801d6e6:	9b02      	ldreq	r3, [sp, #8]
 801d6e8:	3301      	addeq	r3, #1
 801d6ea:	9302      	streq	r3, [sp, #8]
 801d6ec:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801d6f0:	bf18      	it	ne
 801d6f2:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801d6f6:	e7ab      	b.n	801d650 <_vfiprintf_r+0x250>
 801d6f8:	9b02      	ldr	r3, [sp, #8]
 801d6fa:	781b      	ldrb	r3, [r3, #0]
 801d6fc:	2b6c      	cmp	r3, #108	; 0x6c
 801d6fe:	d105      	bne.n	801d70c <_vfiprintf_r+0x30c>
 801d700:	9b02      	ldr	r3, [sp, #8]
 801d702:	3301      	adds	r3, #1
 801d704:	9302      	str	r3, [sp, #8]
 801d706:	f04a 0a20 	orr.w	sl, sl, #32
 801d70a:	e7a1      	b.n	801d650 <_vfiprintf_r+0x250>
 801d70c:	f04a 0a10 	orr.w	sl, sl, #16
 801d710:	e79e      	b.n	801d650 <_vfiprintf_r+0x250>
 801d712:	46a3      	mov	fp, r4
 801d714:	2100      	movs	r1, #0
 801d716:	f85b 3b04 	ldr.w	r3, [fp], #4
 801d71a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801d71e:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 801d722:	2301      	movs	r3, #1
 801d724:	9301      	str	r3, [sp, #4]
 801d726:	460d      	mov	r5, r1
 801d728:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 801d72c:	e0ad      	b.n	801d88a <_vfiprintf_r+0x48a>
 801d72e:	f04a 0a10 	orr.w	sl, sl, #16
 801d732:	f01a 0f20 	tst.w	sl, #32
 801d736:	d011      	beq.n	801d75c <_vfiprintf_r+0x35c>
 801d738:	3407      	adds	r4, #7
 801d73a:	f024 0307 	bic.w	r3, r4, #7
 801d73e:	469b      	mov	fp, r3
 801d740:	685d      	ldr	r5, [r3, #4]
 801d742:	f85b 4b08 	ldr.w	r4, [fp], #8
 801d746:	2d00      	cmp	r5, #0
 801d748:	da06      	bge.n	801d758 <_vfiprintf_r+0x358>
 801d74a:	4264      	negs	r4, r4
 801d74c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801d750:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801d754:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801d758:	2301      	movs	r3, #1
 801d75a:	e04a      	b.n	801d7f2 <_vfiprintf_r+0x3f2>
 801d75c:	46a3      	mov	fp, r4
 801d75e:	f01a 0f10 	tst.w	sl, #16
 801d762:	f85b 5b04 	ldr.w	r5, [fp], #4
 801d766:	d002      	beq.n	801d76e <_vfiprintf_r+0x36e>
 801d768:	462c      	mov	r4, r5
 801d76a:	17ed      	asrs	r5, r5, #31
 801d76c:	e7eb      	b.n	801d746 <_vfiprintf_r+0x346>
 801d76e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801d772:	d003      	beq.n	801d77c <_vfiprintf_r+0x37c>
 801d774:	b22c      	sxth	r4, r5
 801d776:	f345 35c0 	sbfx	r5, r5, #15, #1
 801d77a:	e7e4      	b.n	801d746 <_vfiprintf_r+0x346>
 801d77c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801d780:	d0f2      	beq.n	801d768 <_vfiprintf_r+0x368>
 801d782:	b26c      	sxtb	r4, r5
 801d784:	f345 15c0 	sbfx	r5, r5, #7, #1
 801d788:	e7dd      	b.n	801d746 <_vfiprintf_r+0x346>
 801d78a:	f01a 0f20 	tst.w	sl, #32
 801d78e:	f104 0b04 	add.w	fp, r4, #4
 801d792:	d007      	beq.n	801d7a4 <_vfiprintf_r+0x3a4>
 801d794:	9a03      	ldr	r2, [sp, #12]
 801d796:	6823      	ldr	r3, [r4, #0]
 801d798:	9903      	ldr	r1, [sp, #12]
 801d79a:	17d2      	asrs	r2, r2, #31
 801d79c:	e9c3 1200 	strd	r1, r2, [r3]
 801d7a0:	465c      	mov	r4, fp
 801d7a2:	e68d      	b.n	801d4c0 <_vfiprintf_r+0xc0>
 801d7a4:	f01a 0f10 	tst.w	sl, #16
 801d7a8:	d003      	beq.n	801d7b2 <_vfiprintf_r+0x3b2>
 801d7aa:	6823      	ldr	r3, [r4, #0]
 801d7ac:	9a03      	ldr	r2, [sp, #12]
 801d7ae:	601a      	str	r2, [r3, #0]
 801d7b0:	e7f6      	b.n	801d7a0 <_vfiprintf_r+0x3a0>
 801d7b2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801d7b6:	d003      	beq.n	801d7c0 <_vfiprintf_r+0x3c0>
 801d7b8:	6823      	ldr	r3, [r4, #0]
 801d7ba:	9a03      	ldr	r2, [sp, #12]
 801d7bc:	801a      	strh	r2, [r3, #0]
 801d7be:	e7ef      	b.n	801d7a0 <_vfiprintf_r+0x3a0>
 801d7c0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801d7c4:	d0f1      	beq.n	801d7aa <_vfiprintf_r+0x3aa>
 801d7c6:	6823      	ldr	r3, [r4, #0]
 801d7c8:	9a03      	ldr	r2, [sp, #12]
 801d7ca:	701a      	strb	r2, [r3, #0]
 801d7cc:	e7e8      	b.n	801d7a0 <_vfiprintf_r+0x3a0>
 801d7ce:	f04a 0a10 	orr.w	sl, sl, #16
 801d7d2:	f01a 0320 	ands.w	r3, sl, #32
 801d7d6:	d01f      	beq.n	801d818 <_vfiprintf_r+0x418>
 801d7d8:	3407      	adds	r4, #7
 801d7da:	f024 0307 	bic.w	r3, r4, #7
 801d7de:	469b      	mov	fp, r3
 801d7e0:	685d      	ldr	r5, [r3, #4]
 801d7e2:	f85b 4b08 	ldr.w	r4, [fp], #8
 801d7e6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801d7ea:	2300      	movs	r3, #0
 801d7ec:	2200      	movs	r2, #0
 801d7ee:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 801d7f2:	9a01      	ldr	r2, [sp, #4]
 801d7f4:	3201      	adds	r2, #1
 801d7f6:	f000 8262 	beq.w	801dcbe <_vfiprintf_r+0x8be>
 801d7fa:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 801d7fe:	9205      	str	r2, [sp, #20]
 801d800:	ea54 0205 	orrs.w	r2, r4, r5
 801d804:	f040 8261 	bne.w	801dcca <_vfiprintf_r+0x8ca>
 801d808:	9a01      	ldr	r2, [sp, #4]
 801d80a:	2a00      	cmp	r2, #0
 801d80c:	f000 8198 	beq.w	801db40 <_vfiprintf_r+0x740>
 801d810:	2b01      	cmp	r3, #1
 801d812:	f040 825d 	bne.w	801dcd0 <_vfiprintf_r+0x8d0>
 801d816:	e139      	b.n	801da8c <_vfiprintf_r+0x68c>
 801d818:	46a3      	mov	fp, r4
 801d81a:	f01a 0510 	ands.w	r5, sl, #16
 801d81e:	f85b 4b04 	ldr.w	r4, [fp], #4
 801d822:	d001      	beq.n	801d828 <_vfiprintf_r+0x428>
 801d824:	461d      	mov	r5, r3
 801d826:	e7de      	b.n	801d7e6 <_vfiprintf_r+0x3e6>
 801d828:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801d82c:	d001      	beq.n	801d832 <_vfiprintf_r+0x432>
 801d82e:	b2a4      	uxth	r4, r4
 801d830:	e7d9      	b.n	801d7e6 <_vfiprintf_r+0x3e6>
 801d832:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801d836:	d0d6      	beq.n	801d7e6 <_vfiprintf_r+0x3e6>
 801d838:	b2e4      	uxtb	r4, r4
 801d83a:	e7f3      	b.n	801d824 <_vfiprintf_r+0x424>
 801d83c:	2330      	movs	r3, #48	; 0x30
 801d83e:	46a3      	mov	fp, r4
 801d840:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801d844:	2378      	movs	r3, #120	; 0x78
 801d846:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801d84a:	f85b 4b04 	ldr.w	r4, [fp], #4
 801d84e:	4b03      	ldr	r3, [pc, #12]	; (801d85c <_vfiprintf_r+0x45c>)
 801d850:	9306      	str	r3, [sp, #24]
 801d852:	2500      	movs	r5, #0
 801d854:	f04a 0a02 	orr.w	sl, sl, #2
 801d858:	2302      	movs	r3, #2
 801d85a:	e7c7      	b.n	801d7ec <_vfiprintf_r+0x3ec>
 801d85c:	0802060c 	.word	0x0802060c
 801d860:	9b01      	ldr	r3, [sp, #4]
 801d862:	46a3      	mov	fp, r4
 801d864:	2500      	movs	r5, #0
 801d866:	1c5c      	adds	r4, r3, #1
 801d868:	f85b 8b04 	ldr.w	r8, [fp], #4
 801d86c:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 801d870:	f000 80ce 	beq.w	801da10 <_vfiprintf_r+0x610>
 801d874:	461a      	mov	r2, r3
 801d876:	4629      	mov	r1, r5
 801d878:	4640      	mov	r0, r8
 801d87a:	f7ea fe81 	bl	8008580 <memchr>
 801d87e:	2800      	cmp	r0, #0
 801d880:	f000 8173 	beq.w	801db6a <_vfiprintf_r+0x76a>
 801d884:	eba0 0308 	sub.w	r3, r0, r8
 801d888:	9301      	str	r3, [sp, #4]
 801d88a:	9b01      	ldr	r3, [sp, #4]
 801d88c:	42ab      	cmp	r3, r5
 801d88e:	bfb8      	it	lt
 801d890:	462b      	movlt	r3, r5
 801d892:	9305      	str	r3, [sp, #20]
 801d894:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801d898:	b113      	cbz	r3, 801d8a0 <_vfiprintf_r+0x4a0>
 801d89a:	9b05      	ldr	r3, [sp, #20]
 801d89c:	3301      	adds	r3, #1
 801d89e:	9305      	str	r3, [sp, #20]
 801d8a0:	f01a 0302 	ands.w	r3, sl, #2
 801d8a4:	930a      	str	r3, [sp, #40]	; 0x28
 801d8a6:	bf1e      	ittt	ne
 801d8a8:	9b05      	ldrne	r3, [sp, #20]
 801d8aa:	3302      	addne	r3, #2
 801d8ac:	9305      	strne	r3, [sp, #20]
 801d8ae:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 801d8b2:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8b4:	d11f      	bne.n	801d8f6 <_vfiprintf_r+0x4f6>
 801d8b6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801d8ba:	1a9c      	subs	r4, r3, r2
 801d8bc:	2c00      	cmp	r4, #0
 801d8be:	dd1a      	ble.n	801d8f6 <_vfiprintf_r+0x4f6>
 801d8c0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801d8c4:	48aa      	ldr	r0, [pc, #680]	; (801db70 <_vfiprintf_r+0x770>)
 801d8c6:	6030      	str	r0, [r6, #0]
 801d8c8:	2c10      	cmp	r4, #16
 801d8ca:	f103 0301 	add.w	r3, r3, #1
 801d8ce:	f106 0108 	add.w	r1, r6, #8
 801d8d2:	f300 8153 	bgt.w	801db7c <_vfiprintf_r+0x77c>
 801d8d6:	6074      	str	r4, [r6, #4]
 801d8d8:	2b07      	cmp	r3, #7
 801d8da:	4414      	add	r4, r2
 801d8dc:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 801d8e0:	f340 815e 	ble.w	801dba0 <_vfiprintf_r+0x7a0>
 801d8e4:	aa0e      	add	r2, sp, #56	; 0x38
 801d8e6:	4639      	mov	r1, r7
 801d8e8:	4648      	mov	r0, r9
 801d8ea:	f7ff fd56 	bl	801d39a <__sprint_r>
 801d8ee:	2800      	cmp	r0, #0
 801d8f0:	f040 81b7 	bne.w	801dc62 <_vfiprintf_r+0x862>
 801d8f4:	ae11      	add	r6, sp, #68	; 0x44
 801d8f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801d8fa:	b173      	cbz	r3, 801d91a <_vfiprintf_r+0x51a>
 801d8fc:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801d900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d902:	6032      	str	r2, [r6, #0]
 801d904:	2201      	movs	r2, #1
 801d906:	6072      	str	r2, [r6, #4]
 801d908:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d90a:	3301      	adds	r3, #1
 801d90c:	3201      	adds	r2, #1
 801d90e:	2b07      	cmp	r3, #7
 801d910:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 801d914:	f300 8146 	bgt.w	801dba4 <_vfiprintf_r+0x7a4>
 801d918:	3608      	adds	r6, #8
 801d91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d91c:	b16b      	cbz	r3, 801d93a <_vfiprintf_r+0x53a>
 801d91e:	aa0d      	add	r2, sp, #52	; 0x34
 801d920:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d922:	6032      	str	r2, [r6, #0]
 801d924:	2202      	movs	r2, #2
 801d926:	6072      	str	r2, [r6, #4]
 801d928:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d92a:	3301      	adds	r3, #1
 801d92c:	3202      	adds	r2, #2
 801d92e:	2b07      	cmp	r3, #7
 801d930:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 801d934:	f300 813f 	bgt.w	801dbb6 <_vfiprintf_r+0x7b6>
 801d938:	3608      	adds	r6, #8
 801d93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d93c:	2b80      	cmp	r3, #128	; 0x80
 801d93e:	d11f      	bne.n	801d980 <_vfiprintf_r+0x580>
 801d940:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801d944:	1a9c      	subs	r4, r3, r2
 801d946:	2c00      	cmp	r4, #0
 801d948:	dd1a      	ble.n	801d980 <_vfiprintf_r+0x580>
 801d94a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 801d94e:	4889      	ldr	r0, [pc, #548]	; (801db74 <_vfiprintf_r+0x774>)
 801d950:	6030      	str	r0, [r6, #0]
 801d952:	2c10      	cmp	r4, #16
 801d954:	f103 0301 	add.w	r3, r3, #1
 801d958:	f106 0108 	add.w	r1, r6, #8
 801d95c:	f300 8134 	bgt.w	801dbc8 <_vfiprintf_r+0x7c8>
 801d960:	6074      	str	r4, [r6, #4]
 801d962:	2b07      	cmp	r3, #7
 801d964:	4414      	add	r4, r2
 801d966:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 801d96a:	f340 813f 	ble.w	801dbec <_vfiprintf_r+0x7ec>
 801d96e:	aa0e      	add	r2, sp, #56	; 0x38
 801d970:	4639      	mov	r1, r7
 801d972:	4648      	mov	r0, r9
 801d974:	f7ff fd11 	bl	801d39a <__sprint_r>
 801d978:	2800      	cmp	r0, #0
 801d97a:	f040 8172 	bne.w	801dc62 <_vfiprintf_r+0x862>
 801d97e:	ae11      	add	r6, sp, #68	; 0x44
 801d980:	9b01      	ldr	r3, [sp, #4]
 801d982:	1aec      	subs	r4, r5, r3
 801d984:	2c00      	cmp	r4, #0
 801d986:	dd1a      	ble.n	801d9be <_vfiprintf_r+0x5be>
 801d988:	4d7a      	ldr	r5, [pc, #488]	; (801db74 <_vfiprintf_r+0x774>)
 801d98a:	6035      	str	r5, [r6, #0]
 801d98c:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 801d990:	2c10      	cmp	r4, #16
 801d992:	f103 0301 	add.w	r3, r3, #1
 801d996:	f106 0208 	add.w	r2, r6, #8
 801d99a:	f300 8129 	bgt.w	801dbf0 <_vfiprintf_r+0x7f0>
 801d99e:	6074      	str	r4, [r6, #4]
 801d9a0:	2b07      	cmp	r3, #7
 801d9a2:	440c      	add	r4, r1
 801d9a4:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 801d9a8:	f340 8133 	ble.w	801dc12 <_vfiprintf_r+0x812>
 801d9ac:	aa0e      	add	r2, sp, #56	; 0x38
 801d9ae:	4639      	mov	r1, r7
 801d9b0:	4648      	mov	r0, r9
 801d9b2:	f7ff fcf2 	bl	801d39a <__sprint_r>
 801d9b6:	2800      	cmp	r0, #0
 801d9b8:	f040 8153 	bne.w	801dc62 <_vfiprintf_r+0x862>
 801d9bc:	ae11      	add	r6, sp, #68	; 0x44
 801d9be:	9b01      	ldr	r3, [sp, #4]
 801d9c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d9c2:	6073      	str	r3, [r6, #4]
 801d9c4:	4418      	add	r0, r3
 801d9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d9c8:	f8c6 8000 	str.w	r8, [r6]
 801d9cc:	3301      	adds	r3, #1
 801d9ce:	2b07      	cmp	r3, #7
 801d9d0:	9010      	str	r0, [sp, #64]	; 0x40
 801d9d2:	930f      	str	r3, [sp, #60]	; 0x3c
 801d9d4:	f300 811f 	bgt.w	801dc16 <_vfiprintf_r+0x816>
 801d9d8:	f106 0308 	add.w	r3, r6, #8
 801d9dc:	f01a 0f04 	tst.w	sl, #4
 801d9e0:	f040 8121 	bne.w	801dc26 <_vfiprintf_r+0x826>
 801d9e4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801d9e8:	9905      	ldr	r1, [sp, #20]
 801d9ea:	428a      	cmp	r2, r1
 801d9ec:	bfac      	ite	ge
 801d9ee:	189b      	addge	r3, r3, r2
 801d9f0:	185b      	addlt	r3, r3, r1
 801d9f2:	9303      	str	r3, [sp, #12]
 801d9f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9f6:	b13b      	cbz	r3, 801da08 <_vfiprintf_r+0x608>
 801d9f8:	aa0e      	add	r2, sp, #56	; 0x38
 801d9fa:	4639      	mov	r1, r7
 801d9fc:	4648      	mov	r0, r9
 801d9fe:	f7ff fccc 	bl	801d39a <__sprint_r>
 801da02:	2800      	cmp	r0, #0
 801da04:	f040 812d 	bne.w	801dc62 <_vfiprintf_r+0x862>
 801da08:	2300      	movs	r3, #0
 801da0a:	930f      	str	r3, [sp, #60]	; 0x3c
 801da0c:	ae11      	add	r6, sp, #68	; 0x44
 801da0e:	e6c7      	b.n	801d7a0 <_vfiprintf_r+0x3a0>
 801da10:	4640      	mov	r0, r8
 801da12:	f7ea fe05 	bl	8008620 <strlen>
 801da16:	9001      	str	r0, [sp, #4]
 801da18:	e737      	b.n	801d88a <_vfiprintf_r+0x48a>
 801da1a:	f04a 0a10 	orr.w	sl, sl, #16
 801da1e:	f01a 0320 	ands.w	r3, sl, #32
 801da22:	d008      	beq.n	801da36 <_vfiprintf_r+0x636>
 801da24:	3407      	adds	r4, #7
 801da26:	f024 0307 	bic.w	r3, r4, #7
 801da2a:	469b      	mov	fp, r3
 801da2c:	685d      	ldr	r5, [r3, #4]
 801da2e:	f85b 4b08 	ldr.w	r4, [fp], #8
 801da32:	2301      	movs	r3, #1
 801da34:	e6da      	b.n	801d7ec <_vfiprintf_r+0x3ec>
 801da36:	46a3      	mov	fp, r4
 801da38:	f01a 0510 	ands.w	r5, sl, #16
 801da3c:	f85b 4b04 	ldr.w	r4, [fp], #4
 801da40:	d001      	beq.n	801da46 <_vfiprintf_r+0x646>
 801da42:	461d      	mov	r5, r3
 801da44:	e7f5      	b.n	801da32 <_vfiprintf_r+0x632>
 801da46:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801da4a:	d001      	beq.n	801da50 <_vfiprintf_r+0x650>
 801da4c:	b2a4      	uxth	r4, r4
 801da4e:	e7f0      	b.n	801da32 <_vfiprintf_r+0x632>
 801da50:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801da54:	d0ed      	beq.n	801da32 <_vfiprintf_r+0x632>
 801da56:	b2e4      	uxtb	r4, r4
 801da58:	e7f3      	b.n	801da42 <_vfiprintf_r+0x642>
 801da5a:	4a47      	ldr	r2, [pc, #284]	; (801db78 <_vfiprintf_r+0x778>)
 801da5c:	e5c6      	b.n	801d5ec <_vfiprintf_r+0x1ec>
 801da5e:	46a3      	mov	fp, r4
 801da60:	f01a 0510 	ands.w	r5, sl, #16
 801da64:	f85b 4b04 	ldr.w	r4, [fp], #4
 801da68:	d001      	beq.n	801da6e <_vfiprintf_r+0x66e>
 801da6a:	4615      	mov	r5, r2
 801da6c:	e5ca      	b.n	801d604 <_vfiprintf_r+0x204>
 801da6e:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 801da72:	d001      	beq.n	801da78 <_vfiprintf_r+0x678>
 801da74:	b2a4      	uxth	r4, r4
 801da76:	e5c5      	b.n	801d604 <_vfiprintf_r+0x204>
 801da78:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801da7c:	f43f adc2 	beq.w	801d604 <_vfiprintf_r+0x204>
 801da80:	b2e4      	uxtb	r4, r4
 801da82:	e7f2      	b.n	801da6a <_vfiprintf_r+0x66a>
 801da84:	2c0a      	cmp	r4, #10
 801da86:	f175 0300 	sbcs.w	r3, r5, #0
 801da8a:	d205      	bcs.n	801da98 <_vfiprintf_r+0x698>
 801da8c:	3430      	adds	r4, #48	; 0x30
 801da8e:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 801da92:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 801da96:	e137      	b.n	801dd08 <_vfiprintf_r+0x908>
 801da98:	ab3a      	add	r3, sp, #232	; 0xe8
 801da9a:	930a      	str	r3, [sp, #40]	; 0x28
 801da9c:	9b05      	ldr	r3, [sp, #20]
 801da9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801daa2:	f04f 0a00 	mov.w	sl, #0
 801daa6:	930b      	str	r3, [sp, #44]	; 0x2c
 801daa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801daaa:	220a      	movs	r2, #10
 801daac:	f103 38ff 	add.w	r8, r3, #4294967295
 801dab0:	4620      	mov	r0, r4
 801dab2:	2300      	movs	r3, #0
 801dab4:	4629      	mov	r1, r5
 801dab6:	f7eb fb9d 	bl	80091f4 <__aeabi_uldivmod>
 801daba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dabc:	3230      	adds	r2, #48	; 0x30
 801dabe:	f803 2c01 	strb.w	r2, [r3, #-1]
 801dac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dac4:	f10a 0a01 	add.w	sl, sl, #1
 801dac8:	b1d3      	cbz	r3, 801db00 <_vfiprintf_r+0x700>
 801daca:	9b07      	ldr	r3, [sp, #28]
 801dacc:	781b      	ldrb	r3, [r3, #0]
 801dace:	4553      	cmp	r3, sl
 801dad0:	d116      	bne.n	801db00 <_vfiprintf_r+0x700>
 801dad2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dad6:	d013      	beq.n	801db00 <_vfiprintf_r+0x700>
 801dad8:	2c0a      	cmp	r4, #10
 801dada:	f175 0300 	sbcs.w	r3, r5, #0
 801dade:	d30f      	bcc.n	801db00 <_vfiprintf_r+0x700>
 801dae0:	9b08      	ldr	r3, [sp, #32]
 801dae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dae4:	eba8 0803 	sub.w	r8, r8, r3
 801dae8:	461a      	mov	r2, r3
 801daea:	4640      	mov	r0, r8
 801daec:	f7ff fbc7 	bl	801d27e <strncpy>
 801daf0:	9b07      	ldr	r3, [sp, #28]
 801daf2:	785b      	ldrb	r3, [r3, #1]
 801daf4:	b1a3      	cbz	r3, 801db20 <_vfiprintf_r+0x720>
 801daf6:	9b07      	ldr	r3, [sp, #28]
 801daf8:	3301      	adds	r3, #1
 801dafa:	9307      	str	r3, [sp, #28]
 801dafc:	f04f 0a00 	mov.w	sl, #0
 801db00:	2300      	movs	r3, #0
 801db02:	220a      	movs	r2, #10
 801db04:	4620      	mov	r0, r4
 801db06:	4629      	mov	r1, r5
 801db08:	f7eb fb74 	bl	80091f4 <__aeabi_uldivmod>
 801db0c:	2c0a      	cmp	r4, #10
 801db0e:	f175 0300 	sbcs.w	r3, r5, #0
 801db12:	f0c0 80f9 	bcc.w	801dd08 <_vfiprintf_r+0x908>
 801db16:	4604      	mov	r4, r0
 801db18:	460d      	mov	r5, r1
 801db1a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801db1e:	e7c3      	b.n	801daa8 <_vfiprintf_r+0x6a8>
 801db20:	469a      	mov	sl, r3
 801db22:	e7ed      	b.n	801db00 <_vfiprintf_r+0x700>
 801db24:	f004 030f 	and.w	r3, r4, #15
 801db28:	9a06      	ldr	r2, [sp, #24]
 801db2a:	0924      	lsrs	r4, r4, #4
 801db2c:	5cd3      	ldrb	r3, [r2, r3]
 801db2e:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801db32:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801db36:	092d      	lsrs	r5, r5, #4
 801db38:	ea54 0305 	orrs.w	r3, r4, r5
 801db3c:	d1f2      	bne.n	801db24 <_vfiprintf_r+0x724>
 801db3e:	e0e3      	b.n	801dd08 <_vfiprintf_r+0x908>
 801db40:	b933      	cbnz	r3, 801db50 <_vfiprintf_r+0x750>
 801db42:	f01a 0f01 	tst.w	sl, #1
 801db46:	d003      	beq.n	801db50 <_vfiprintf_r+0x750>
 801db48:	2330      	movs	r3, #48	; 0x30
 801db4a:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 801db4e:	e7a0      	b.n	801da92 <_vfiprintf_r+0x692>
 801db50:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 801db54:	e0d8      	b.n	801dd08 <_vfiprintf_r+0x908>
 801db56:	2b00      	cmp	r3, #0
 801db58:	f000 80a4 	beq.w	801dca4 <_vfiprintf_r+0x8a4>
 801db5c:	2100      	movs	r1, #0
 801db5e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801db62:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 801db66:	46a3      	mov	fp, r4
 801db68:	e5db      	b.n	801d722 <_vfiprintf_r+0x322>
 801db6a:	4605      	mov	r5, r0
 801db6c:	e68d      	b.n	801d88a <_vfiprintf_r+0x48a>
 801db6e:	bf00      	nop
 801db70:	08020844 	.word	0x08020844
 801db74:	08020854 	.word	0x08020854
 801db78:	0802061d 	.word	0x0802061d
 801db7c:	2010      	movs	r0, #16
 801db7e:	4402      	add	r2, r0
 801db80:	2b07      	cmp	r3, #7
 801db82:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 801db86:	6070      	str	r0, [r6, #4]
 801db88:	dd07      	ble.n	801db9a <_vfiprintf_r+0x79a>
 801db8a:	aa0e      	add	r2, sp, #56	; 0x38
 801db8c:	4639      	mov	r1, r7
 801db8e:	4648      	mov	r0, r9
 801db90:	f7ff fc03 	bl	801d39a <__sprint_r>
 801db94:	2800      	cmp	r0, #0
 801db96:	d164      	bne.n	801dc62 <_vfiprintf_r+0x862>
 801db98:	a911      	add	r1, sp, #68	; 0x44
 801db9a:	3c10      	subs	r4, #16
 801db9c:	460e      	mov	r6, r1
 801db9e:	e68f      	b.n	801d8c0 <_vfiprintf_r+0x4c0>
 801dba0:	460e      	mov	r6, r1
 801dba2:	e6a8      	b.n	801d8f6 <_vfiprintf_r+0x4f6>
 801dba4:	aa0e      	add	r2, sp, #56	; 0x38
 801dba6:	4639      	mov	r1, r7
 801dba8:	4648      	mov	r0, r9
 801dbaa:	f7ff fbf6 	bl	801d39a <__sprint_r>
 801dbae:	2800      	cmp	r0, #0
 801dbb0:	d157      	bne.n	801dc62 <_vfiprintf_r+0x862>
 801dbb2:	ae11      	add	r6, sp, #68	; 0x44
 801dbb4:	e6b1      	b.n	801d91a <_vfiprintf_r+0x51a>
 801dbb6:	aa0e      	add	r2, sp, #56	; 0x38
 801dbb8:	4639      	mov	r1, r7
 801dbba:	4648      	mov	r0, r9
 801dbbc:	f7ff fbed 	bl	801d39a <__sprint_r>
 801dbc0:	2800      	cmp	r0, #0
 801dbc2:	d14e      	bne.n	801dc62 <_vfiprintf_r+0x862>
 801dbc4:	ae11      	add	r6, sp, #68	; 0x44
 801dbc6:	e6b8      	b.n	801d93a <_vfiprintf_r+0x53a>
 801dbc8:	2010      	movs	r0, #16
 801dbca:	4402      	add	r2, r0
 801dbcc:	2b07      	cmp	r3, #7
 801dbce:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 801dbd2:	6070      	str	r0, [r6, #4]
 801dbd4:	dd07      	ble.n	801dbe6 <_vfiprintf_r+0x7e6>
 801dbd6:	aa0e      	add	r2, sp, #56	; 0x38
 801dbd8:	4639      	mov	r1, r7
 801dbda:	4648      	mov	r0, r9
 801dbdc:	f7ff fbdd 	bl	801d39a <__sprint_r>
 801dbe0:	2800      	cmp	r0, #0
 801dbe2:	d13e      	bne.n	801dc62 <_vfiprintf_r+0x862>
 801dbe4:	a911      	add	r1, sp, #68	; 0x44
 801dbe6:	3c10      	subs	r4, #16
 801dbe8:	460e      	mov	r6, r1
 801dbea:	e6ae      	b.n	801d94a <_vfiprintf_r+0x54a>
 801dbec:	460e      	mov	r6, r1
 801dbee:	e6c7      	b.n	801d980 <_vfiprintf_r+0x580>
 801dbf0:	2010      	movs	r0, #16
 801dbf2:	4401      	add	r1, r0
 801dbf4:	2b07      	cmp	r3, #7
 801dbf6:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 801dbfa:	6070      	str	r0, [r6, #4]
 801dbfc:	dd06      	ble.n	801dc0c <_vfiprintf_r+0x80c>
 801dbfe:	aa0e      	add	r2, sp, #56	; 0x38
 801dc00:	4639      	mov	r1, r7
 801dc02:	4648      	mov	r0, r9
 801dc04:	f7ff fbc9 	bl	801d39a <__sprint_r>
 801dc08:	bb58      	cbnz	r0, 801dc62 <_vfiprintf_r+0x862>
 801dc0a:	aa11      	add	r2, sp, #68	; 0x44
 801dc0c:	3c10      	subs	r4, #16
 801dc0e:	4616      	mov	r6, r2
 801dc10:	e6bb      	b.n	801d98a <_vfiprintf_r+0x58a>
 801dc12:	4616      	mov	r6, r2
 801dc14:	e6d3      	b.n	801d9be <_vfiprintf_r+0x5be>
 801dc16:	aa0e      	add	r2, sp, #56	; 0x38
 801dc18:	4639      	mov	r1, r7
 801dc1a:	4648      	mov	r0, r9
 801dc1c:	f7ff fbbd 	bl	801d39a <__sprint_r>
 801dc20:	b9f8      	cbnz	r0, 801dc62 <_vfiprintf_r+0x862>
 801dc22:	ab11      	add	r3, sp, #68	; 0x44
 801dc24:	e6da      	b.n	801d9dc <_vfiprintf_r+0x5dc>
 801dc26:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801dc2a:	1a54      	subs	r4, r2, r1
 801dc2c:	2c00      	cmp	r4, #0
 801dc2e:	f77f aed9 	ble.w	801d9e4 <_vfiprintf_r+0x5e4>
 801dc32:	4d39      	ldr	r5, [pc, #228]	; (801dd18 <_vfiprintf_r+0x918>)
 801dc34:	2610      	movs	r6, #16
 801dc36:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 801dc3a:	2c10      	cmp	r4, #16
 801dc3c:	f102 0201 	add.w	r2, r2, #1
 801dc40:	601d      	str	r5, [r3, #0]
 801dc42:	dc1d      	bgt.n	801dc80 <_vfiprintf_r+0x880>
 801dc44:	605c      	str	r4, [r3, #4]
 801dc46:	2a07      	cmp	r2, #7
 801dc48:	440c      	add	r4, r1
 801dc4a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 801dc4e:	f77f aec9 	ble.w	801d9e4 <_vfiprintf_r+0x5e4>
 801dc52:	aa0e      	add	r2, sp, #56	; 0x38
 801dc54:	4639      	mov	r1, r7
 801dc56:	4648      	mov	r0, r9
 801dc58:	f7ff fb9f 	bl	801d39a <__sprint_r>
 801dc5c:	2800      	cmp	r0, #0
 801dc5e:	f43f aec1 	beq.w	801d9e4 <_vfiprintf_r+0x5e4>
 801dc62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801dc64:	07d9      	lsls	r1, r3, #31
 801dc66:	d405      	bmi.n	801dc74 <_vfiprintf_r+0x874>
 801dc68:	89bb      	ldrh	r3, [r7, #12]
 801dc6a:	059a      	lsls	r2, r3, #22
 801dc6c:	d402      	bmi.n	801dc74 <_vfiprintf_r+0x874>
 801dc6e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801dc70:	f7fa fc79 	bl	8018566 <__retarget_lock_release_recursive>
 801dc74:	89bb      	ldrh	r3, [r7, #12]
 801dc76:	065b      	lsls	r3, r3, #25
 801dc78:	f57f abf3 	bpl.w	801d462 <_vfiprintf_r+0x62>
 801dc7c:	f7ff bbee 	b.w	801d45c <_vfiprintf_r+0x5c>
 801dc80:	3110      	adds	r1, #16
 801dc82:	2a07      	cmp	r2, #7
 801dc84:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 801dc88:	605e      	str	r6, [r3, #4]
 801dc8a:	dc02      	bgt.n	801dc92 <_vfiprintf_r+0x892>
 801dc8c:	3308      	adds	r3, #8
 801dc8e:	3c10      	subs	r4, #16
 801dc90:	e7d1      	b.n	801dc36 <_vfiprintf_r+0x836>
 801dc92:	aa0e      	add	r2, sp, #56	; 0x38
 801dc94:	4639      	mov	r1, r7
 801dc96:	4648      	mov	r0, r9
 801dc98:	f7ff fb7f 	bl	801d39a <__sprint_r>
 801dc9c:	2800      	cmp	r0, #0
 801dc9e:	d1e0      	bne.n	801dc62 <_vfiprintf_r+0x862>
 801dca0:	ab11      	add	r3, sp, #68	; 0x44
 801dca2:	e7f4      	b.n	801dc8e <_vfiprintf_r+0x88e>
 801dca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dca6:	b913      	cbnz	r3, 801dcae <_vfiprintf_r+0x8ae>
 801dca8:	2300      	movs	r3, #0
 801dcaa:	930f      	str	r3, [sp, #60]	; 0x3c
 801dcac:	e7d9      	b.n	801dc62 <_vfiprintf_r+0x862>
 801dcae:	aa0e      	add	r2, sp, #56	; 0x38
 801dcb0:	4639      	mov	r1, r7
 801dcb2:	4648      	mov	r0, r9
 801dcb4:	f7ff fb71 	bl	801d39a <__sprint_r>
 801dcb8:	2800      	cmp	r0, #0
 801dcba:	d0f5      	beq.n	801dca8 <_vfiprintf_r+0x8a8>
 801dcbc:	e7d1      	b.n	801dc62 <_vfiprintf_r+0x862>
 801dcbe:	ea54 0205 	orrs.w	r2, r4, r5
 801dcc2:	f8cd a014 	str.w	sl, [sp, #20]
 801dcc6:	f43f ada3 	beq.w	801d810 <_vfiprintf_r+0x410>
 801dcca:	2b01      	cmp	r3, #1
 801dccc:	f43f aeda 	beq.w	801da84 <_vfiprintf_r+0x684>
 801dcd0:	2b02      	cmp	r3, #2
 801dcd2:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 801dcd6:	f43f af25 	beq.w	801db24 <_vfiprintf_r+0x724>
 801dcda:	f004 0307 	and.w	r3, r4, #7
 801dcde:	08e4      	lsrs	r4, r4, #3
 801dce0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801dce4:	08ed      	lsrs	r5, r5, #3
 801dce6:	3330      	adds	r3, #48	; 0x30
 801dce8:	ea54 0105 	orrs.w	r1, r4, r5
 801dcec:	4642      	mov	r2, r8
 801dcee:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801dcf2:	d1f2      	bne.n	801dcda <_vfiprintf_r+0x8da>
 801dcf4:	9905      	ldr	r1, [sp, #20]
 801dcf6:	07c8      	lsls	r0, r1, #31
 801dcf8:	d506      	bpl.n	801dd08 <_vfiprintf_r+0x908>
 801dcfa:	2b30      	cmp	r3, #48	; 0x30
 801dcfc:	d004      	beq.n	801dd08 <_vfiprintf_r+0x908>
 801dcfe:	2330      	movs	r3, #48	; 0x30
 801dd00:	f808 3c01 	strb.w	r3, [r8, #-1]
 801dd04:	f1a2 0802 	sub.w	r8, r2, #2
 801dd08:	ab3a      	add	r3, sp, #232	; 0xe8
 801dd0a:	eba3 0308 	sub.w	r3, r3, r8
 801dd0e:	9d01      	ldr	r5, [sp, #4]
 801dd10:	f8dd a014 	ldr.w	sl, [sp, #20]
 801dd14:	9301      	str	r3, [sp, #4]
 801dd16:	e5b8      	b.n	801d88a <_vfiprintf_r+0x48a>
 801dd18:	08020844 	.word	0x08020844

0801dd1c <__sbprintf>:
 801dd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd1e:	461f      	mov	r7, r3
 801dd20:	898b      	ldrh	r3, [r1, #12]
 801dd22:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 801dd26:	f023 0302 	bic.w	r3, r3, #2
 801dd2a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801dd2e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801dd30:	9319      	str	r3, [sp, #100]	; 0x64
 801dd32:	89cb      	ldrh	r3, [r1, #14]
 801dd34:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dd38:	69cb      	ldr	r3, [r1, #28]
 801dd3a:	9307      	str	r3, [sp, #28]
 801dd3c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801dd3e:	9309      	str	r3, [sp, #36]	; 0x24
 801dd40:	ab1a      	add	r3, sp, #104	; 0x68
 801dd42:	9300      	str	r3, [sp, #0]
 801dd44:	9304      	str	r3, [sp, #16]
 801dd46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dd4a:	4615      	mov	r5, r2
 801dd4c:	4606      	mov	r6, r0
 801dd4e:	9302      	str	r3, [sp, #8]
 801dd50:	9305      	str	r3, [sp, #20]
 801dd52:	a816      	add	r0, sp, #88	; 0x58
 801dd54:	2300      	movs	r3, #0
 801dd56:	460c      	mov	r4, r1
 801dd58:	9306      	str	r3, [sp, #24]
 801dd5a:	f7fa fc01 	bl	8018560 <__retarget_lock_init_recursive>
 801dd5e:	462a      	mov	r2, r5
 801dd60:	463b      	mov	r3, r7
 801dd62:	4669      	mov	r1, sp
 801dd64:	4630      	mov	r0, r6
 801dd66:	f7ff fb4b 	bl	801d400 <_vfiprintf_r>
 801dd6a:	1e05      	subs	r5, r0, #0
 801dd6c:	db07      	blt.n	801dd7e <__sbprintf+0x62>
 801dd6e:	4669      	mov	r1, sp
 801dd70:	4630      	mov	r0, r6
 801dd72:	f7fe fc91 	bl	801c698 <_fflush_r>
 801dd76:	2800      	cmp	r0, #0
 801dd78:	bf18      	it	ne
 801dd7a:	f04f 35ff 	movne.w	r5, #4294967295
 801dd7e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801dd82:	9816      	ldr	r0, [sp, #88]	; 0x58
 801dd84:	065b      	lsls	r3, r3, #25
 801dd86:	bf42      	ittt	mi
 801dd88:	89a3      	ldrhmi	r3, [r4, #12]
 801dd8a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801dd8e:	81a3      	strhmi	r3, [r4, #12]
 801dd90:	f7fa fbe7 	bl	8018562 <__retarget_lock_close_recursive>
 801dd94:	4628      	mov	r0, r5
 801dd96:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dd9c <_write_r>:
 801dd9c:	b538      	push	{r3, r4, r5, lr}
 801dd9e:	4d07      	ldr	r5, [pc, #28]	; (801ddbc <_write_r+0x20>)
 801dda0:	4604      	mov	r4, r0
 801dda2:	4608      	mov	r0, r1
 801dda4:	4611      	mov	r1, r2
 801dda6:	2200      	movs	r2, #0
 801dda8:	602a      	str	r2, [r5, #0]
 801ddaa:	461a      	mov	r2, r3
 801ddac:	f7ec fd44 	bl	800a838 <_write>
 801ddb0:	1c43      	adds	r3, r0, #1
 801ddb2:	d102      	bne.n	801ddba <_write_r+0x1e>
 801ddb4:	682b      	ldr	r3, [r5, #0]
 801ddb6:	b103      	cbz	r3, 801ddba <_write_r+0x1e>
 801ddb8:	6023      	str	r3, [r4, #0]
 801ddba:	bd38      	pop	{r3, r4, r5, pc}
 801ddbc:	20005ea0 	.word	0x20005ea0

0801ddc0 <__register_exitproc>:
 801ddc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddc4:	f8df a074 	ldr.w	sl, [pc, #116]	; 801de3c <__register_exitproc+0x7c>
 801ddc8:	4606      	mov	r6, r0
 801ddca:	f8da 0000 	ldr.w	r0, [sl]
 801ddce:	4698      	mov	r8, r3
 801ddd0:	460f      	mov	r7, r1
 801ddd2:	4691      	mov	r9, r2
 801ddd4:	f7fa fbc6 	bl	8018564 <__retarget_lock_acquire_recursive>
 801ddd8:	4b19      	ldr	r3, [pc, #100]	; (801de40 <__register_exitproc+0x80>)
 801ddda:	681b      	ldr	r3, [r3, #0]
 801dddc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801dde0:	b91c      	cbnz	r4, 801ddea <__register_exitproc+0x2a>
 801dde2:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801dde6:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 801ddea:	6865      	ldr	r5, [r4, #4]
 801ddec:	f8da 0000 	ldr.w	r0, [sl]
 801ddf0:	2d1f      	cmp	r5, #31
 801ddf2:	dd05      	ble.n	801de00 <__register_exitproc+0x40>
 801ddf4:	f7fa fbb7 	bl	8018566 <__retarget_lock_release_recursive>
 801ddf8:	f04f 30ff 	mov.w	r0, #4294967295
 801ddfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de00:	b19e      	cbz	r6, 801de2a <__register_exitproc+0x6a>
 801de02:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801de06:	2201      	movs	r2, #1
 801de08:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801de0c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801de10:	40aa      	lsls	r2, r5
 801de12:	4313      	orrs	r3, r2
 801de14:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801de18:	2e02      	cmp	r6, #2
 801de1a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801de1e:	bf02      	ittt	eq
 801de20:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801de24:	4313      	orreq	r3, r2
 801de26:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801de2a:	1c6b      	adds	r3, r5, #1
 801de2c:	3502      	adds	r5, #2
 801de2e:	6063      	str	r3, [r4, #4]
 801de30:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801de34:	f7fa fb97 	bl	8018566 <__retarget_lock_release_recursive>
 801de38:	2000      	movs	r0, #0
 801de3a:	e7df      	b.n	801ddfc <__register_exitproc+0x3c>
 801de3c:	200008d8 	.word	0x200008d8
 801de40:	080205f8 	.word	0x080205f8

0801de44 <__assert_func>:
 801de44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801de46:	4614      	mov	r4, r2
 801de48:	461a      	mov	r2, r3
 801de4a:	4b09      	ldr	r3, [pc, #36]	; (801de70 <__assert_func+0x2c>)
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	4605      	mov	r5, r0
 801de50:	68d8      	ldr	r0, [r3, #12]
 801de52:	b14c      	cbz	r4, 801de68 <__assert_func+0x24>
 801de54:	4b07      	ldr	r3, [pc, #28]	; (801de74 <__assert_func+0x30>)
 801de56:	9100      	str	r1, [sp, #0]
 801de58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801de5c:	4906      	ldr	r1, [pc, #24]	; (801de78 <__assert_func+0x34>)
 801de5e:	462b      	mov	r3, r5
 801de60:	f000 f8ac 	bl	801dfbc <fiprintf>
 801de64:	f000 f9f1 	bl	801e24a <abort>
 801de68:	4b04      	ldr	r3, [pc, #16]	; (801de7c <__assert_func+0x38>)
 801de6a:	461c      	mov	r4, r3
 801de6c:	e7f3      	b.n	801de56 <__assert_func+0x12>
 801de6e:	bf00      	nop
 801de70:	20000098 	.word	0x20000098
 801de74:	08020864 	.word	0x08020864
 801de78:	08020871 	.word	0x08020871
 801de7c:	0802089f 	.word	0x0802089f

0801de80 <_calloc_r>:
 801de80:	b538      	push	{r3, r4, r5, lr}
 801de82:	fba1 1502 	umull	r1, r5, r1, r2
 801de86:	b92d      	cbnz	r5, 801de94 <_calloc_r+0x14>
 801de88:	f7fa fb6e 	bl	8018568 <_malloc_r>
 801de8c:	4604      	mov	r4, r0
 801de8e:	b938      	cbnz	r0, 801dea0 <_calloc_r+0x20>
 801de90:	4620      	mov	r0, r4
 801de92:	bd38      	pop	{r3, r4, r5, pc}
 801de94:	f7fa f988 	bl	80181a8 <__errno>
 801de98:	230c      	movs	r3, #12
 801de9a:	6003      	str	r3, [r0, #0]
 801de9c:	2400      	movs	r4, #0
 801de9e:	e7f7      	b.n	801de90 <_calloc_r+0x10>
 801dea0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801dea4:	f022 0203 	bic.w	r2, r2, #3
 801dea8:	3a04      	subs	r2, #4
 801deaa:	2a24      	cmp	r2, #36	; 0x24
 801deac:	d819      	bhi.n	801dee2 <_calloc_r+0x62>
 801deae:	2a13      	cmp	r2, #19
 801deb0:	d915      	bls.n	801dede <_calloc_r+0x5e>
 801deb2:	2a1b      	cmp	r2, #27
 801deb4:	e9c0 5500 	strd	r5, r5, [r0]
 801deb8:	d806      	bhi.n	801dec8 <_calloc_r+0x48>
 801deba:	f100 0308 	add.w	r3, r0, #8
 801debe:	2200      	movs	r2, #0
 801dec0:	e9c3 2200 	strd	r2, r2, [r3]
 801dec4:	609a      	str	r2, [r3, #8]
 801dec6:	e7e3      	b.n	801de90 <_calloc_r+0x10>
 801dec8:	2a24      	cmp	r2, #36	; 0x24
 801deca:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801dece:	bf11      	iteee	ne
 801ded0:	f100 0310 	addne.w	r3, r0, #16
 801ded4:	6105      	streq	r5, [r0, #16]
 801ded6:	f100 0318 	addeq.w	r3, r0, #24
 801deda:	6145      	streq	r5, [r0, #20]
 801dedc:	e7ef      	b.n	801debe <_calloc_r+0x3e>
 801dede:	4603      	mov	r3, r0
 801dee0:	e7ed      	b.n	801debe <_calloc_r+0x3e>
 801dee2:	4629      	mov	r1, r5
 801dee4:	f7fa fdb4 	bl	8018a50 <memset>
 801dee8:	e7d2      	b.n	801de90 <_calloc_r+0x10>
	...

0801deec <_close_r>:
 801deec:	b538      	push	{r3, r4, r5, lr}
 801deee:	4d06      	ldr	r5, [pc, #24]	; (801df08 <_close_r+0x1c>)
 801def0:	2300      	movs	r3, #0
 801def2:	4604      	mov	r4, r0
 801def4:	4608      	mov	r0, r1
 801def6:	602b      	str	r3, [r5, #0]
 801def8:	f7ec fcba 	bl	800a870 <_close>
 801defc:	1c43      	adds	r3, r0, #1
 801defe:	d102      	bne.n	801df06 <_close_r+0x1a>
 801df00:	682b      	ldr	r3, [r5, #0]
 801df02:	b103      	cbz	r3, 801df06 <_close_r+0x1a>
 801df04:	6023      	str	r3, [r4, #0]
 801df06:	bd38      	pop	{r3, r4, r5, pc}
 801df08:	20005ea0 	.word	0x20005ea0

0801df0c <_fclose_r>:
 801df0c:	b570      	push	{r4, r5, r6, lr}
 801df0e:	4606      	mov	r6, r0
 801df10:	460c      	mov	r4, r1
 801df12:	b911      	cbnz	r1, 801df1a <_fclose_r+0xe>
 801df14:	2500      	movs	r5, #0
 801df16:	4628      	mov	r0, r5
 801df18:	bd70      	pop	{r4, r5, r6, pc}
 801df1a:	b118      	cbz	r0, 801df24 <_fclose_r+0x18>
 801df1c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801df1e:	b90b      	cbnz	r3, 801df24 <_fclose_r+0x18>
 801df20:	f7fe fc26 	bl	801c770 <__sinit>
 801df24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801df26:	07d8      	lsls	r0, r3, #31
 801df28:	d405      	bmi.n	801df36 <_fclose_r+0x2a>
 801df2a:	89a3      	ldrh	r3, [r4, #12]
 801df2c:	0599      	lsls	r1, r3, #22
 801df2e:	d402      	bmi.n	801df36 <_fclose_r+0x2a>
 801df30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801df32:	f7fa fb17 	bl	8018564 <__retarget_lock_acquire_recursive>
 801df36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df3a:	b93b      	cbnz	r3, 801df4c <_fclose_r+0x40>
 801df3c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801df3e:	f015 0501 	ands.w	r5, r5, #1
 801df42:	d1e7      	bne.n	801df14 <_fclose_r+0x8>
 801df44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801df46:	f7fa fb0e 	bl	8018566 <__retarget_lock_release_recursive>
 801df4a:	e7e4      	b.n	801df16 <_fclose_r+0xa>
 801df4c:	4621      	mov	r1, r4
 801df4e:	4630      	mov	r0, r6
 801df50:	f7fe fb18 	bl	801c584 <__sflush_r>
 801df54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801df56:	4605      	mov	r5, r0
 801df58:	b133      	cbz	r3, 801df68 <_fclose_r+0x5c>
 801df5a:	69e1      	ldr	r1, [r4, #28]
 801df5c:	4630      	mov	r0, r6
 801df5e:	4798      	blx	r3
 801df60:	2800      	cmp	r0, #0
 801df62:	bfb8      	it	lt
 801df64:	f04f 35ff 	movlt.w	r5, #4294967295
 801df68:	89a3      	ldrh	r3, [r4, #12]
 801df6a:	061a      	lsls	r2, r3, #24
 801df6c:	d503      	bpl.n	801df76 <_fclose_r+0x6a>
 801df6e:	6921      	ldr	r1, [r4, #16]
 801df70:	4630      	mov	r0, r6
 801df72:	f7fe fc8d 	bl	801c890 <_free_r>
 801df76:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801df78:	b141      	cbz	r1, 801df8c <_fclose_r+0x80>
 801df7a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801df7e:	4299      	cmp	r1, r3
 801df80:	d002      	beq.n	801df88 <_fclose_r+0x7c>
 801df82:	4630      	mov	r0, r6
 801df84:	f7fe fc84 	bl	801c890 <_free_r>
 801df88:	2300      	movs	r3, #0
 801df8a:	6323      	str	r3, [r4, #48]	; 0x30
 801df8c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801df8e:	b121      	cbz	r1, 801df9a <_fclose_r+0x8e>
 801df90:	4630      	mov	r0, r6
 801df92:	f7fe fc7d 	bl	801c890 <_free_r>
 801df96:	2300      	movs	r3, #0
 801df98:	6463      	str	r3, [r4, #68]	; 0x44
 801df9a:	f7fe fbd1 	bl	801c740 <__sfp_lock_acquire>
 801df9e:	2300      	movs	r3, #0
 801dfa0:	81a3      	strh	r3, [r4, #12]
 801dfa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dfa4:	07db      	lsls	r3, r3, #31
 801dfa6:	d402      	bmi.n	801dfae <_fclose_r+0xa2>
 801dfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dfaa:	f7fa fadc 	bl	8018566 <__retarget_lock_release_recursive>
 801dfae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dfb0:	f7fa fad7 	bl	8018562 <__retarget_lock_close_recursive>
 801dfb4:	f7fe fbca 	bl	801c74c <__sfp_lock_release>
 801dfb8:	e7ad      	b.n	801df16 <_fclose_r+0xa>
	...

0801dfbc <fiprintf>:
 801dfbc:	b40e      	push	{r1, r2, r3}
 801dfbe:	b503      	push	{r0, r1, lr}
 801dfc0:	4601      	mov	r1, r0
 801dfc2:	ab03      	add	r3, sp, #12
 801dfc4:	4805      	ldr	r0, [pc, #20]	; (801dfdc <fiprintf+0x20>)
 801dfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 801dfca:	6800      	ldr	r0, [r0, #0]
 801dfcc:	9301      	str	r3, [sp, #4]
 801dfce:	f7ff fa17 	bl	801d400 <_vfiprintf_r>
 801dfd2:	b002      	add	sp, #8
 801dfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dfd8:	b003      	add	sp, #12
 801dfda:	4770      	bx	lr
 801dfdc:	20000098 	.word	0x20000098

0801dfe0 <__fputwc>:
 801dfe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dfe4:	4680      	mov	r8, r0
 801dfe6:	460e      	mov	r6, r1
 801dfe8:	4615      	mov	r5, r2
 801dfea:	f000 f885 	bl	801e0f8 <__locale_mb_cur_max>
 801dfee:	2801      	cmp	r0, #1
 801dff0:	4604      	mov	r4, r0
 801dff2:	d11b      	bne.n	801e02c <__fputwc+0x4c>
 801dff4:	1e73      	subs	r3, r6, #1
 801dff6:	2bfe      	cmp	r3, #254	; 0xfe
 801dff8:	d818      	bhi.n	801e02c <__fputwc+0x4c>
 801dffa:	f88d 6004 	strb.w	r6, [sp, #4]
 801dffe:	2700      	movs	r7, #0
 801e000:	f10d 0904 	add.w	r9, sp, #4
 801e004:	42a7      	cmp	r7, r4
 801e006:	d020      	beq.n	801e04a <__fputwc+0x6a>
 801e008:	68ab      	ldr	r3, [r5, #8]
 801e00a:	f817 1009 	ldrb.w	r1, [r7, r9]
 801e00e:	3b01      	subs	r3, #1
 801e010:	2b00      	cmp	r3, #0
 801e012:	60ab      	str	r3, [r5, #8]
 801e014:	da04      	bge.n	801e020 <__fputwc+0x40>
 801e016:	69aa      	ldr	r2, [r5, #24]
 801e018:	4293      	cmp	r3, r2
 801e01a:	db1a      	blt.n	801e052 <__fputwc+0x72>
 801e01c:	290a      	cmp	r1, #10
 801e01e:	d018      	beq.n	801e052 <__fputwc+0x72>
 801e020:	682b      	ldr	r3, [r5, #0]
 801e022:	1c5a      	adds	r2, r3, #1
 801e024:	602a      	str	r2, [r5, #0]
 801e026:	7019      	strb	r1, [r3, #0]
 801e028:	3701      	adds	r7, #1
 801e02a:	e7eb      	b.n	801e004 <__fputwc+0x24>
 801e02c:	4632      	mov	r2, r6
 801e02e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 801e032:	a901      	add	r1, sp, #4
 801e034:	4640      	mov	r0, r8
 801e036:	f000 f8e5 	bl	801e204 <_wcrtomb_r>
 801e03a:	1c42      	adds	r2, r0, #1
 801e03c:	4604      	mov	r4, r0
 801e03e:	d1de      	bne.n	801dffe <__fputwc+0x1e>
 801e040:	89ab      	ldrh	r3, [r5, #12]
 801e042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e046:	81ab      	strh	r3, [r5, #12]
 801e048:	4606      	mov	r6, r0
 801e04a:	4630      	mov	r0, r6
 801e04c:	b003      	add	sp, #12
 801e04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e052:	462a      	mov	r2, r5
 801e054:	4640      	mov	r0, r8
 801e056:	f000 f88b 	bl	801e170 <__swbuf_r>
 801e05a:	1c43      	adds	r3, r0, #1
 801e05c:	d1e4      	bne.n	801e028 <__fputwc+0x48>
 801e05e:	4606      	mov	r6, r0
 801e060:	e7f3      	b.n	801e04a <__fputwc+0x6a>

0801e062 <_fputwc_r>:
 801e062:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801e064:	07db      	lsls	r3, r3, #31
 801e066:	b570      	push	{r4, r5, r6, lr}
 801e068:	4605      	mov	r5, r0
 801e06a:	460e      	mov	r6, r1
 801e06c:	4614      	mov	r4, r2
 801e06e:	d405      	bmi.n	801e07c <_fputwc_r+0x1a>
 801e070:	8993      	ldrh	r3, [r2, #12]
 801e072:	0598      	lsls	r0, r3, #22
 801e074:	d402      	bmi.n	801e07c <_fputwc_r+0x1a>
 801e076:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801e078:	f7fa fa74 	bl	8018564 <__retarget_lock_acquire_recursive>
 801e07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e080:	0499      	lsls	r1, r3, #18
 801e082:	d406      	bmi.n	801e092 <_fputwc_r+0x30>
 801e084:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e088:	81a3      	strh	r3, [r4, #12]
 801e08a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e08c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e090:	6663      	str	r3, [r4, #100]	; 0x64
 801e092:	4622      	mov	r2, r4
 801e094:	4628      	mov	r0, r5
 801e096:	4631      	mov	r1, r6
 801e098:	f7ff ffa2 	bl	801dfe0 <__fputwc>
 801e09c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e09e:	07da      	lsls	r2, r3, #31
 801e0a0:	4605      	mov	r5, r0
 801e0a2:	d405      	bmi.n	801e0b0 <_fputwc_r+0x4e>
 801e0a4:	89a3      	ldrh	r3, [r4, #12]
 801e0a6:	059b      	lsls	r3, r3, #22
 801e0a8:	d402      	bmi.n	801e0b0 <_fputwc_r+0x4e>
 801e0aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e0ac:	f7fa fa5b 	bl	8018566 <__retarget_lock_release_recursive>
 801e0b0:	4628      	mov	r0, r5
 801e0b2:	bd70      	pop	{r4, r5, r6, pc}

0801e0b4 <_fstat_r>:
 801e0b4:	b538      	push	{r3, r4, r5, lr}
 801e0b6:	4d07      	ldr	r5, [pc, #28]	; (801e0d4 <_fstat_r+0x20>)
 801e0b8:	2300      	movs	r3, #0
 801e0ba:	4604      	mov	r4, r0
 801e0bc:	4608      	mov	r0, r1
 801e0be:	4611      	mov	r1, r2
 801e0c0:	602b      	str	r3, [r5, #0]
 801e0c2:	f7ec fbe0 	bl	800a886 <_fstat>
 801e0c6:	1c43      	adds	r3, r0, #1
 801e0c8:	d102      	bne.n	801e0d0 <_fstat_r+0x1c>
 801e0ca:	682b      	ldr	r3, [r5, #0]
 801e0cc:	b103      	cbz	r3, 801e0d0 <_fstat_r+0x1c>
 801e0ce:	6023      	str	r3, [r4, #0]
 801e0d0:	bd38      	pop	{r3, r4, r5, pc}
 801e0d2:	bf00      	nop
 801e0d4:	20005ea0 	.word	0x20005ea0

0801e0d8 <_isatty_r>:
 801e0d8:	b538      	push	{r3, r4, r5, lr}
 801e0da:	4d06      	ldr	r5, [pc, #24]	; (801e0f4 <_isatty_r+0x1c>)
 801e0dc:	2300      	movs	r3, #0
 801e0de:	4604      	mov	r4, r0
 801e0e0:	4608      	mov	r0, r1
 801e0e2:	602b      	str	r3, [r5, #0]
 801e0e4:	f7ec fbde 	bl	800a8a4 <_isatty>
 801e0e8:	1c43      	adds	r3, r0, #1
 801e0ea:	d102      	bne.n	801e0f2 <_isatty_r+0x1a>
 801e0ec:	682b      	ldr	r3, [r5, #0]
 801e0ee:	b103      	cbz	r3, 801e0f2 <_isatty_r+0x1a>
 801e0f0:	6023      	str	r3, [r4, #0]
 801e0f2:	bd38      	pop	{r3, r4, r5, pc}
 801e0f4:	20005ea0 	.word	0x20005ea0

0801e0f8 <__locale_mb_cur_max>:
 801e0f8:	4b01      	ldr	r3, [pc, #4]	; (801e100 <__locale_mb_cur_max+0x8>)
 801e0fa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801e0fe:	4770      	bx	lr
 801e100:	200008dc 	.word	0x200008dc

0801e104 <_lseek_r>:
 801e104:	b538      	push	{r3, r4, r5, lr}
 801e106:	4d07      	ldr	r5, [pc, #28]	; (801e124 <_lseek_r+0x20>)
 801e108:	4604      	mov	r4, r0
 801e10a:	4608      	mov	r0, r1
 801e10c:	4611      	mov	r1, r2
 801e10e:	2200      	movs	r2, #0
 801e110:	602a      	str	r2, [r5, #0]
 801e112:	461a      	mov	r2, r3
 801e114:	f7ec fbd0 	bl	800a8b8 <_lseek>
 801e118:	1c43      	adds	r3, r0, #1
 801e11a:	d102      	bne.n	801e122 <_lseek_r+0x1e>
 801e11c:	682b      	ldr	r3, [r5, #0]
 801e11e:	b103      	cbz	r3, 801e122 <_lseek_r+0x1e>
 801e120:	6023      	str	r3, [r4, #0]
 801e122:	bd38      	pop	{r3, r4, r5, pc}
 801e124:	20005ea0 	.word	0x20005ea0

0801e128 <__ascii_mbtowc>:
 801e128:	b082      	sub	sp, #8
 801e12a:	b901      	cbnz	r1, 801e12e <__ascii_mbtowc+0x6>
 801e12c:	a901      	add	r1, sp, #4
 801e12e:	b142      	cbz	r2, 801e142 <__ascii_mbtowc+0x1a>
 801e130:	b14b      	cbz	r3, 801e146 <__ascii_mbtowc+0x1e>
 801e132:	7813      	ldrb	r3, [r2, #0]
 801e134:	600b      	str	r3, [r1, #0]
 801e136:	7812      	ldrb	r2, [r2, #0]
 801e138:	1e10      	subs	r0, r2, #0
 801e13a:	bf18      	it	ne
 801e13c:	2001      	movne	r0, #1
 801e13e:	b002      	add	sp, #8
 801e140:	4770      	bx	lr
 801e142:	4610      	mov	r0, r2
 801e144:	e7fb      	b.n	801e13e <__ascii_mbtowc+0x16>
 801e146:	f06f 0001 	mvn.w	r0, #1
 801e14a:	e7f8      	b.n	801e13e <__ascii_mbtowc+0x16>

0801e14c <_read_r>:
 801e14c:	b538      	push	{r3, r4, r5, lr}
 801e14e:	4d07      	ldr	r5, [pc, #28]	; (801e16c <_read_r+0x20>)
 801e150:	4604      	mov	r4, r0
 801e152:	4608      	mov	r0, r1
 801e154:	4611      	mov	r1, r2
 801e156:	2200      	movs	r2, #0
 801e158:	602a      	str	r2, [r5, #0]
 801e15a:	461a      	mov	r2, r3
 801e15c:	f7ec fb4f 	bl	800a7fe <_read>
 801e160:	1c43      	adds	r3, r0, #1
 801e162:	d102      	bne.n	801e16a <_read_r+0x1e>
 801e164:	682b      	ldr	r3, [r5, #0]
 801e166:	b103      	cbz	r3, 801e16a <_read_r+0x1e>
 801e168:	6023      	str	r3, [r4, #0]
 801e16a:	bd38      	pop	{r3, r4, r5, pc}
 801e16c:	20005ea0 	.word	0x20005ea0

0801e170 <__swbuf_r>:
 801e170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e172:	460e      	mov	r6, r1
 801e174:	4614      	mov	r4, r2
 801e176:	4605      	mov	r5, r0
 801e178:	b118      	cbz	r0, 801e182 <__swbuf_r+0x12>
 801e17a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801e17c:	b90b      	cbnz	r3, 801e182 <__swbuf_r+0x12>
 801e17e:	f7fe faf7 	bl	801c770 <__sinit>
 801e182:	69a3      	ldr	r3, [r4, #24]
 801e184:	60a3      	str	r3, [r4, #8]
 801e186:	89a3      	ldrh	r3, [r4, #12]
 801e188:	0719      	lsls	r1, r3, #28
 801e18a:	d529      	bpl.n	801e1e0 <__swbuf_r+0x70>
 801e18c:	6923      	ldr	r3, [r4, #16]
 801e18e:	b33b      	cbz	r3, 801e1e0 <__swbuf_r+0x70>
 801e190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e194:	b2f6      	uxtb	r6, r6
 801e196:	049a      	lsls	r2, r3, #18
 801e198:	4637      	mov	r7, r6
 801e19a:	d52a      	bpl.n	801e1f2 <__swbuf_r+0x82>
 801e19c:	6823      	ldr	r3, [r4, #0]
 801e19e:	6920      	ldr	r0, [r4, #16]
 801e1a0:	1a18      	subs	r0, r3, r0
 801e1a2:	6963      	ldr	r3, [r4, #20]
 801e1a4:	4283      	cmp	r3, r0
 801e1a6:	dc04      	bgt.n	801e1b2 <__swbuf_r+0x42>
 801e1a8:	4621      	mov	r1, r4
 801e1aa:	4628      	mov	r0, r5
 801e1ac:	f7fe fa74 	bl	801c698 <_fflush_r>
 801e1b0:	b9e0      	cbnz	r0, 801e1ec <__swbuf_r+0x7c>
 801e1b2:	68a3      	ldr	r3, [r4, #8]
 801e1b4:	3b01      	subs	r3, #1
 801e1b6:	60a3      	str	r3, [r4, #8]
 801e1b8:	6823      	ldr	r3, [r4, #0]
 801e1ba:	1c5a      	adds	r2, r3, #1
 801e1bc:	6022      	str	r2, [r4, #0]
 801e1be:	701e      	strb	r6, [r3, #0]
 801e1c0:	6962      	ldr	r2, [r4, #20]
 801e1c2:	1c43      	adds	r3, r0, #1
 801e1c4:	429a      	cmp	r2, r3
 801e1c6:	d004      	beq.n	801e1d2 <__swbuf_r+0x62>
 801e1c8:	89a3      	ldrh	r3, [r4, #12]
 801e1ca:	07db      	lsls	r3, r3, #31
 801e1cc:	d506      	bpl.n	801e1dc <__swbuf_r+0x6c>
 801e1ce:	2e0a      	cmp	r6, #10
 801e1d0:	d104      	bne.n	801e1dc <__swbuf_r+0x6c>
 801e1d2:	4621      	mov	r1, r4
 801e1d4:	4628      	mov	r0, r5
 801e1d6:	f7fe fa5f 	bl	801c698 <_fflush_r>
 801e1da:	b938      	cbnz	r0, 801e1ec <__swbuf_r+0x7c>
 801e1dc:	4638      	mov	r0, r7
 801e1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e1e0:	4621      	mov	r1, r4
 801e1e2:	4628      	mov	r0, r5
 801e1e4:	f7fd fb28 	bl	801b838 <__swsetup_r>
 801e1e8:	2800      	cmp	r0, #0
 801e1ea:	d0d1      	beq.n	801e190 <__swbuf_r+0x20>
 801e1ec:	f04f 37ff 	mov.w	r7, #4294967295
 801e1f0:	e7f4      	b.n	801e1dc <__swbuf_r+0x6c>
 801e1f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e1f6:	81a3      	strh	r3, [r4, #12]
 801e1f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e1fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801e1fe:	6663      	str	r3, [r4, #100]	; 0x64
 801e200:	e7cc      	b.n	801e19c <__swbuf_r+0x2c>
	...

0801e204 <_wcrtomb_r>:
 801e204:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e206:	4c09      	ldr	r4, [pc, #36]	; (801e22c <_wcrtomb_r+0x28>)
 801e208:	b085      	sub	sp, #20
 801e20a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 801e20e:	4605      	mov	r5, r0
 801e210:	461e      	mov	r6, r3
 801e212:	b909      	cbnz	r1, 801e218 <_wcrtomb_r+0x14>
 801e214:	460a      	mov	r2, r1
 801e216:	a901      	add	r1, sp, #4
 801e218:	47b8      	blx	r7
 801e21a:	1c43      	adds	r3, r0, #1
 801e21c:	bf01      	itttt	eq
 801e21e:	2300      	moveq	r3, #0
 801e220:	6033      	streq	r3, [r6, #0]
 801e222:	238a      	moveq	r3, #138	; 0x8a
 801e224:	602b      	streq	r3, [r5, #0]
 801e226:	b005      	add	sp, #20
 801e228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e22a:	bf00      	nop
 801e22c:	200008dc 	.word	0x200008dc

0801e230 <__ascii_wctomb>:
 801e230:	4603      	mov	r3, r0
 801e232:	4608      	mov	r0, r1
 801e234:	b141      	cbz	r1, 801e248 <__ascii_wctomb+0x18>
 801e236:	2aff      	cmp	r2, #255	; 0xff
 801e238:	d904      	bls.n	801e244 <__ascii_wctomb+0x14>
 801e23a:	228a      	movs	r2, #138	; 0x8a
 801e23c:	601a      	str	r2, [r3, #0]
 801e23e:	f04f 30ff 	mov.w	r0, #4294967295
 801e242:	4770      	bx	lr
 801e244:	700a      	strb	r2, [r1, #0]
 801e246:	2001      	movs	r0, #1
 801e248:	4770      	bx	lr

0801e24a <abort>:
 801e24a:	b508      	push	{r3, lr}
 801e24c:	2006      	movs	r0, #6
 801e24e:	f000 f82d 	bl	801e2ac <raise>
 801e252:	2001      	movs	r0, #1
 801e254:	f7ec fac9 	bl	800a7ea <_exit>

0801e258 <_raise_r>:
 801e258:	291f      	cmp	r1, #31
 801e25a:	b538      	push	{r3, r4, r5, lr}
 801e25c:	4604      	mov	r4, r0
 801e25e:	460d      	mov	r5, r1
 801e260:	d904      	bls.n	801e26c <_raise_r+0x14>
 801e262:	2316      	movs	r3, #22
 801e264:	6003      	str	r3, [r0, #0]
 801e266:	f04f 30ff 	mov.w	r0, #4294967295
 801e26a:	bd38      	pop	{r3, r4, r5, pc}
 801e26c:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 801e270:	b112      	cbz	r2, 801e278 <_raise_r+0x20>
 801e272:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e276:	b94b      	cbnz	r3, 801e28c <_raise_r+0x34>
 801e278:	4620      	mov	r0, r4
 801e27a:	f000 f831 	bl	801e2e0 <_getpid_r>
 801e27e:	462a      	mov	r2, r5
 801e280:	4601      	mov	r1, r0
 801e282:	4620      	mov	r0, r4
 801e284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e288:	f000 b818 	b.w	801e2bc <_kill_r>
 801e28c:	2b01      	cmp	r3, #1
 801e28e:	d00a      	beq.n	801e2a6 <_raise_r+0x4e>
 801e290:	1c59      	adds	r1, r3, #1
 801e292:	d103      	bne.n	801e29c <_raise_r+0x44>
 801e294:	2316      	movs	r3, #22
 801e296:	6003      	str	r3, [r0, #0]
 801e298:	2001      	movs	r0, #1
 801e29a:	e7e6      	b.n	801e26a <_raise_r+0x12>
 801e29c:	2400      	movs	r4, #0
 801e29e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e2a2:	4628      	mov	r0, r5
 801e2a4:	4798      	blx	r3
 801e2a6:	2000      	movs	r0, #0
 801e2a8:	e7df      	b.n	801e26a <_raise_r+0x12>
	...

0801e2ac <raise>:
 801e2ac:	4b02      	ldr	r3, [pc, #8]	; (801e2b8 <raise+0xc>)
 801e2ae:	4601      	mov	r1, r0
 801e2b0:	6818      	ldr	r0, [r3, #0]
 801e2b2:	f7ff bfd1 	b.w	801e258 <_raise_r>
 801e2b6:	bf00      	nop
 801e2b8:	20000098 	.word	0x20000098

0801e2bc <_kill_r>:
 801e2bc:	b538      	push	{r3, r4, r5, lr}
 801e2be:	4d07      	ldr	r5, [pc, #28]	; (801e2dc <_kill_r+0x20>)
 801e2c0:	2300      	movs	r3, #0
 801e2c2:	4604      	mov	r4, r0
 801e2c4:	4608      	mov	r0, r1
 801e2c6:	4611      	mov	r1, r2
 801e2c8:	602b      	str	r3, [r5, #0]
 801e2ca:	f7ec fa7e 	bl	800a7ca <_kill>
 801e2ce:	1c43      	adds	r3, r0, #1
 801e2d0:	d102      	bne.n	801e2d8 <_kill_r+0x1c>
 801e2d2:	682b      	ldr	r3, [r5, #0]
 801e2d4:	b103      	cbz	r3, 801e2d8 <_kill_r+0x1c>
 801e2d6:	6023      	str	r3, [r4, #0]
 801e2d8:	bd38      	pop	{r3, r4, r5, pc}
 801e2da:	bf00      	nop
 801e2dc:	20005ea0 	.word	0x20005ea0

0801e2e0 <_getpid_r>:
 801e2e0:	f7ec ba6c 	b.w	800a7bc <_getpid>

0801e2e4 <pow>:
 801e2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2e8:	4614      	mov	r4, r2
 801e2ea:	461d      	mov	r5, r3
 801e2ec:	4680      	mov	r8, r0
 801e2ee:	4689      	mov	r9, r1
 801e2f0:	f000 f862 	bl	801e3b8 <__ieee754_pow>
 801e2f4:	4622      	mov	r2, r4
 801e2f6:	4606      	mov	r6, r0
 801e2f8:	460f      	mov	r7, r1
 801e2fa:	462b      	mov	r3, r5
 801e2fc:	4620      	mov	r0, r4
 801e2fe:	4629      	mov	r1, r5
 801e300:	f7ea fdec 	bl	8008edc <__aeabi_dcmpun>
 801e304:	bbc8      	cbnz	r0, 801e37a <pow+0x96>
 801e306:	2200      	movs	r2, #0
 801e308:	2300      	movs	r3, #0
 801e30a:	4640      	mov	r0, r8
 801e30c:	4649      	mov	r1, r9
 801e30e:	f7ea fdb3 	bl	8008e78 <__aeabi_dcmpeq>
 801e312:	b1b8      	cbz	r0, 801e344 <pow+0x60>
 801e314:	2200      	movs	r2, #0
 801e316:	2300      	movs	r3, #0
 801e318:	4620      	mov	r0, r4
 801e31a:	4629      	mov	r1, r5
 801e31c:	f7ea fdac 	bl	8008e78 <__aeabi_dcmpeq>
 801e320:	2800      	cmp	r0, #0
 801e322:	d141      	bne.n	801e3a8 <pow+0xc4>
 801e324:	4620      	mov	r0, r4
 801e326:	4629      	mov	r1, r5
 801e328:	f000 fe39 	bl	801ef9e <finite>
 801e32c:	b328      	cbz	r0, 801e37a <pow+0x96>
 801e32e:	2200      	movs	r2, #0
 801e330:	2300      	movs	r3, #0
 801e332:	4620      	mov	r0, r4
 801e334:	4629      	mov	r1, r5
 801e336:	f7ea fda9 	bl	8008e8c <__aeabi_dcmplt>
 801e33a:	b1f0      	cbz	r0, 801e37a <pow+0x96>
 801e33c:	f7f9 ff34 	bl	80181a8 <__errno>
 801e340:	2322      	movs	r3, #34	; 0x22
 801e342:	e019      	b.n	801e378 <pow+0x94>
 801e344:	4630      	mov	r0, r6
 801e346:	4639      	mov	r1, r7
 801e348:	f000 fe29 	bl	801ef9e <finite>
 801e34c:	b9c8      	cbnz	r0, 801e382 <pow+0x9e>
 801e34e:	4640      	mov	r0, r8
 801e350:	4649      	mov	r1, r9
 801e352:	f000 fe24 	bl	801ef9e <finite>
 801e356:	b1a0      	cbz	r0, 801e382 <pow+0x9e>
 801e358:	4620      	mov	r0, r4
 801e35a:	4629      	mov	r1, r5
 801e35c:	f000 fe1f 	bl	801ef9e <finite>
 801e360:	b178      	cbz	r0, 801e382 <pow+0x9e>
 801e362:	4632      	mov	r2, r6
 801e364:	463b      	mov	r3, r7
 801e366:	4630      	mov	r0, r6
 801e368:	4639      	mov	r1, r7
 801e36a:	f7ea fdb7 	bl	8008edc <__aeabi_dcmpun>
 801e36e:	2800      	cmp	r0, #0
 801e370:	d0e4      	beq.n	801e33c <pow+0x58>
 801e372:	f7f9 ff19 	bl	80181a8 <__errno>
 801e376:	2321      	movs	r3, #33	; 0x21
 801e378:	6003      	str	r3, [r0, #0]
 801e37a:	4630      	mov	r0, r6
 801e37c:	4639      	mov	r1, r7
 801e37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e382:	2200      	movs	r2, #0
 801e384:	2300      	movs	r3, #0
 801e386:	4630      	mov	r0, r6
 801e388:	4639      	mov	r1, r7
 801e38a:	f7ea fd75 	bl	8008e78 <__aeabi_dcmpeq>
 801e38e:	2800      	cmp	r0, #0
 801e390:	d0f3      	beq.n	801e37a <pow+0x96>
 801e392:	4640      	mov	r0, r8
 801e394:	4649      	mov	r1, r9
 801e396:	f000 fe02 	bl	801ef9e <finite>
 801e39a:	2800      	cmp	r0, #0
 801e39c:	d0ed      	beq.n	801e37a <pow+0x96>
 801e39e:	4620      	mov	r0, r4
 801e3a0:	4629      	mov	r1, r5
 801e3a2:	f000 fdfc 	bl	801ef9e <finite>
 801e3a6:	e7c8      	b.n	801e33a <pow+0x56>
 801e3a8:	4f01      	ldr	r7, [pc, #4]	; (801e3b0 <pow+0xcc>)
 801e3aa:	2600      	movs	r6, #0
 801e3ac:	e7e5      	b.n	801e37a <pow+0x96>
 801e3ae:	bf00      	nop
 801e3b0:	3ff00000 	.word	0x3ff00000
 801e3b4:	00000000 	.word	0x00000000

0801e3b8 <__ieee754_pow>:
 801e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3bc:	b093      	sub	sp, #76	; 0x4c
 801e3be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e3c2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 801e3c6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801e3ca:	4689      	mov	r9, r1
 801e3cc:	ea56 0102 	orrs.w	r1, r6, r2
 801e3d0:	4680      	mov	r8, r0
 801e3d2:	d111      	bne.n	801e3f8 <__ieee754_pow+0x40>
 801e3d4:	1803      	adds	r3, r0, r0
 801e3d6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 801e3da:	4152      	adcs	r2, r2
 801e3dc:	4299      	cmp	r1, r3
 801e3de:	4b82      	ldr	r3, [pc, #520]	; (801e5e8 <__ieee754_pow+0x230>)
 801e3e0:	4193      	sbcs	r3, r2
 801e3e2:	f080 84b9 	bcs.w	801ed58 <__ieee754_pow+0x9a0>
 801e3e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e3ea:	4640      	mov	r0, r8
 801e3ec:	4649      	mov	r1, r9
 801e3ee:	f7ea f925 	bl	800863c <__adddf3>
 801e3f2:	4683      	mov	fp, r0
 801e3f4:	468c      	mov	ip, r1
 801e3f6:	e06f      	b.n	801e4d8 <__ieee754_pow+0x120>
 801e3f8:	4b7c      	ldr	r3, [pc, #496]	; (801e5ec <__ieee754_pow+0x234>)
 801e3fa:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 801e3fe:	429c      	cmp	r4, r3
 801e400:	464d      	mov	r5, r9
 801e402:	4682      	mov	sl, r0
 801e404:	dc06      	bgt.n	801e414 <__ieee754_pow+0x5c>
 801e406:	d101      	bne.n	801e40c <__ieee754_pow+0x54>
 801e408:	2800      	cmp	r0, #0
 801e40a:	d1ec      	bne.n	801e3e6 <__ieee754_pow+0x2e>
 801e40c:	429e      	cmp	r6, r3
 801e40e:	dc01      	bgt.n	801e414 <__ieee754_pow+0x5c>
 801e410:	d10f      	bne.n	801e432 <__ieee754_pow+0x7a>
 801e412:	b172      	cbz	r2, 801e432 <__ieee754_pow+0x7a>
 801e414:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801e418:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801e41c:	ea55 050a 	orrs.w	r5, r5, sl
 801e420:	d1e1      	bne.n	801e3e6 <__ieee754_pow+0x2e>
 801e422:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801e426:	18db      	adds	r3, r3, r3
 801e428:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801e42c:	4152      	adcs	r2, r2
 801e42e:	429d      	cmp	r5, r3
 801e430:	e7d5      	b.n	801e3de <__ieee754_pow+0x26>
 801e432:	2d00      	cmp	r5, #0
 801e434:	da39      	bge.n	801e4aa <__ieee754_pow+0xf2>
 801e436:	4b6e      	ldr	r3, [pc, #440]	; (801e5f0 <__ieee754_pow+0x238>)
 801e438:	429e      	cmp	r6, r3
 801e43a:	dc52      	bgt.n	801e4e2 <__ieee754_pow+0x12a>
 801e43c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e440:	429e      	cmp	r6, r3
 801e442:	f340 849c 	ble.w	801ed7e <__ieee754_pow+0x9c6>
 801e446:	1533      	asrs	r3, r6, #20
 801e448:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e44c:	2b14      	cmp	r3, #20
 801e44e:	dd0f      	ble.n	801e470 <__ieee754_pow+0xb8>
 801e450:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e454:	fa22 f103 	lsr.w	r1, r2, r3
 801e458:	fa01 f303 	lsl.w	r3, r1, r3
 801e45c:	4293      	cmp	r3, r2
 801e45e:	f040 848e 	bne.w	801ed7e <__ieee754_pow+0x9c6>
 801e462:	f001 0101 	and.w	r1, r1, #1
 801e466:	f1c1 0302 	rsb	r3, r1, #2
 801e46a:	9300      	str	r3, [sp, #0]
 801e46c:	b182      	cbz	r2, 801e490 <__ieee754_pow+0xd8>
 801e46e:	e05d      	b.n	801e52c <__ieee754_pow+0x174>
 801e470:	2a00      	cmp	r2, #0
 801e472:	d159      	bne.n	801e528 <__ieee754_pow+0x170>
 801e474:	f1c3 0314 	rsb	r3, r3, #20
 801e478:	fa46 f103 	asr.w	r1, r6, r3
 801e47c:	fa01 f303 	lsl.w	r3, r1, r3
 801e480:	42b3      	cmp	r3, r6
 801e482:	f040 8479 	bne.w	801ed78 <__ieee754_pow+0x9c0>
 801e486:	f001 0101 	and.w	r1, r1, #1
 801e48a:	f1c1 0302 	rsb	r3, r1, #2
 801e48e:	9300      	str	r3, [sp, #0]
 801e490:	4b58      	ldr	r3, [pc, #352]	; (801e5f4 <__ieee754_pow+0x23c>)
 801e492:	429e      	cmp	r6, r3
 801e494:	d132      	bne.n	801e4fc <__ieee754_pow+0x144>
 801e496:	2f00      	cmp	r7, #0
 801e498:	f280 846a 	bge.w	801ed70 <__ieee754_pow+0x9b8>
 801e49c:	4955      	ldr	r1, [pc, #340]	; (801e5f4 <__ieee754_pow+0x23c>)
 801e49e:	4642      	mov	r2, r8
 801e4a0:	464b      	mov	r3, r9
 801e4a2:	2000      	movs	r0, #0
 801e4a4:	f7ea fbaa 	bl	8008bfc <__aeabi_ddiv>
 801e4a8:	e7a3      	b.n	801e3f2 <__ieee754_pow+0x3a>
 801e4aa:	2300      	movs	r3, #0
 801e4ac:	9300      	str	r3, [sp, #0]
 801e4ae:	2a00      	cmp	r2, #0
 801e4b0:	d13c      	bne.n	801e52c <__ieee754_pow+0x174>
 801e4b2:	4b4e      	ldr	r3, [pc, #312]	; (801e5ec <__ieee754_pow+0x234>)
 801e4b4:	429e      	cmp	r6, r3
 801e4b6:	d1eb      	bne.n	801e490 <__ieee754_pow+0xd8>
 801e4b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e4bc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e4c0:	ea53 030a 	orrs.w	r3, r3, sl
 801e4c4:	f000 8448 	beq.w	801ed58 <__ieee754_pow+0x9a0>
 801e4c8:	4b4b      	ldr	r3, [pc, #300]	; (801e5f8 <__ieee754_pow+0x240>)
 801e4ca:	429c      	cmp	r4, r3
 801e4cc:	dd0b      	ble.n	801e4e6 <__ieee754_pow+0x12e>
 801e4ce:	2f00      	cmp	r7, #0
 801e4d0:	f2c0 8448 	blt.w	801ed64 <__ieee754_pow+0x9ac>
 801e4d4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 801e4d8:	4658      	mov	r0, fp
 801e4da:	4661      	mov	r1, ip
 801e4dc:	b013      	add	sp, #76	; 0x4c
 801e4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4e2:	2302      	movs	r3, #2
 801e4e4:	e7e2      	b.n	801e4ac <__ieee754_pow+0xf4>
 801e4e6:	2f00      	cmp	r7, #0
 801e4e8:	f04f 0b00 	mov.w	fp, #0
 801e4ec:	f04f 0c00 	mov.w	ip, #0
 801e4f0:	daf2      	bge.n	801e4d8 <__ieee754_pow+0x120>
 801e4f2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801e4f6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 801e4fa:	e7ed      	b.n	801e4d8 <__ieee754_pow+0x120>
 801e4fc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801e500:	d106      	bne.n	801e510 <__ieee754_pow+0x158>
 801e502:	4642      	mov	r2, r8
 801e504:	464b      	mov	r3, r9
 801e506:	4640      	mov	r0, r8
 801e508:	4649      	mov	r1, r9
 801e50a:	f7ea fa4d 	bl	80089a8 <__aeabi_dmul>
 801e50e:	e770      	b.n	801e3f2 <__ieee754_pow+0x3a>
 801e510:	4b3a      	ldr	r3, [pc, #232]	; (801e5fc <__ieee754_pow+0x244>)
 801e512:	429f      	cmp	r7, r3
 801e514:	d10a      	bne.n	801e52c <__ieee754_pow+0x174>
 801e516:	2d00      	cmp	r5, #0
 801e518:	db08      	blt.n	801e52c <__ieee754_pow+0x174>
 801e51a:	4640      	mov	r0, r8
 801e51c:	4649      	mov	r1, r9
 801e51e:	b013      	add	sp, #76	; 0x4c
 801e520:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e524:	f000 bc5e 	b.w	801ede4 <__ieee754_sqrt>
 801e528:	2300      	movs	r3, #0
 801e52a:	9300      	str	r3, [sp, #0]
 801e52c:	4640      	mov	r0, r8
 801e52e:	4649      	mov	r1, r9
 801e530:	f000 fd32 	bl	801ef98 <fabs>
 801e534:	4683      	mov	fp, r0
 801e536:	468c      	mov	ip, r1
 801e538:	f1ba 0f00 	cmp.w	sl, #0
 801e53c:	d128      	bne.n	801e590 <__ieee754_pow+0x1d8>
 801e53e:	b124      	cbz	r4, 801e54a <__ieee754_pow+0x192>
 801e540:	4b2c      	ldr	r3, [pc, #176]	; (801e5f4 <__ieee754_pow+0x23c>)
 801e542:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801e546:	429a      	cmp	r2, r3
 801e548:	d122      	bne.n	801e590 <__ieee754_pow+0x1d8>
 801e54a:	2f00      	cmp	r7, #0
 801e54c:	da07      	bge.n	801e55e <__ieee754_pow+0x1a6>
 801e54e:	465a      	mov	r2, fp
 801e550:	4663      	mov	r3, ip
 801e552:	4928      	ldr	r1, [pc, #160]	; (801e5f4 <__ieee754_pow+0x23c>)
 801e554:	2000      	movs	r0, #0
 801e556:	f7ea fb51 	bl	8008bfc <__aeabi_ddiv>
 801e55a:	4683      	mov	fp, r0
 801e55c:	468c      	mov	ip, r1
 801e55e:	2d00      	cmp	r5, #0
 801e560:	daba      	bge.n	801e4d8 <__ieee754_pow+0x120>
 801e562:	9b00      	ldr	r3, [sp, #0]
 801e564:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e568:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e56c:	4323      	orrs	r3, r4
 801e56e:	d108      	bne.n	801e582 <__ieee754_pow+0x1ca>
 801e570:	465a      	mov	r2, fp
 801e572:	4663      	mov	r3, ip
 801e574:	4658      	mov	r0, fp
 801e576:	4661      	mov	r1, ip
 801e578:	f7ea f85e 	bl	8008638 <__aeabi_dsub>
 801e57c:	4602      	mov	r2, r0
 801e57e:	460b      	mov	r3, r1
 801e580:	e790      	b.n	801e4a4 <__ieee754_pow+0xec>
 801e582:	9b00      	ldr	r3, [sp, #0]
 801e584:	2b01      	cmp	r3, #1
 801e586:	d1a7      	bne.n	801e4d8 <__ieee754_pow+0x120>
 801e588:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 801e58c:	469c      	mov	ip, r3
 801e58e:	e7a3      	b.n	801e4d8 <__ieee754_pow+0x120>
 801e590:	0feb      	lsrs	r3, r5, #31
 801e592:	3b01      	subs	r3, #1
 801e594:	930c      	str	r3, [sp, #48]	; 0x30
 801e596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e598:	9b00      	ldr	r3, [sp, #0]
 801e59a:	4313      	orrs	r3, r2
 801e59c:	d104      	bne.n	801e5a8 <__ieee754_pow+0x1f0>
 801e59e:	4642      	mov	r2, r8
 801e5a0:	464b      	mov	r3, r9
 801e5a2:	4640      	mov	r0, r8
 801e5a4:	4649      	mov	r1, r9
 801e5a6:	e7e7      	b.n	801e578 <__ieee754_pow+0x1c0>
 801e5a8:	4b15      	ldr	r3, [pc, #84]	; (801e600 <__ieee754_pow+0x248>)
 801e5aa:	429e      	cmp	r6, r3
 801e5ac:	f340 80f6 	ble.w	801e79c <__ieee754_pow+0x3e4>
 801e5b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e5b4:	429e      	cmp	r6, r3
 801e5b6:	4b10      	ldr	r3, [pc, #64]	; (801e5f8 <__ieee754_pow+0x240>)
 801e5b8:	dd09      	ble.n	801e5ce <__ieee754_pow+0x216>
 801e5ba:	429c      	cmp	r4, r3
 801e5bc:	dc0c      	bgt.n	801e5d8 <__ieee754_pow+0x220>
 801e5be:	2f00      	cmp	r7, #0
 801e5c0:	da0c      	bge.n	801e5dc <__ieee754_pow+0x224>
 801e5c2:	2000      	movs	r0, #0
 801e5c4:	b013      	add	sp, #76	; 0x4c
 801e5c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ca:	f000 bce0 	b.w	801ef8e <__math_oflow>
 801e5ce:	429c      	cmp	r4, r3
 801e5d0:	dbf5      	blt.n	801e5be <__ieee754_pow+0x206>
 801e5d2:	4b08      	ldr	r3, [pc, #32]	; (801e5f4 <__ieee754_pow+0x23c>)
 801e5d4:	429c      	cmp	r4, r3
 801e5d6:	dd15      	ble.n	801e604 <__ieee754_pow+0x24c>
 801e5d8:	2f00      	cmp	r7, #0
 801e5da:	dcf2      	bgt.n	801e5c2 <__ieee754_pow+0x20a>
 801e5dc:	2000      	movs	r0, #0
 801e5de:	b013      	add	sp, #76	; 0x4c
 801e5e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5e4:	f000 bcce 	b.w	801ef84 <__math_uflow>
 801e5e8:	fff00000 	.word	0xfff00000
 801e5ec:	7ff00000 	.word	0x7ff00000
 801e5f0:	433fffff 	.word	0x433fffff
 801e5f4:	3ff00000 	.word	0x3ff00000
 801e5f8:	3fefffff 	.word	0x3fefffff
 801e5fc:	3fe00000 	.word	0x3fe00000
 801e600:	41e00000 	.word	0x41e00000
 801e604:	4661      	mov	r1, ip
 801e606:	4b60      	ldr	r3, [pc, #384]	; (801e788 <__ieee754_pow+0x3d0>)
 801e608:	2200      	movs	r2, #0
 801e60a:	4658      	mov	r0, fp
 801e60c:	f7ea f814 	bl	8008638 <__aeabi_dsub>
 801e610:	a355      	add	r3, pc, #340	; (adr r3, 801e768 <__ieee754_pow+0x3b0>)
 801e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e616:	4604      	mov	r4, r0
 801e618:	460d      	mov	r5, r1
 801e61a:	f7ea f9c5 	bl	80089a8 <__aeabi_dmul>
 801e61e:	a354      	add	r3, pc, #336	; (adr r3, 801e770 <__ieee754_pow+0x3b8>)
 801e620:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e624:	4606      	mov	r6, r0
 801e626:	460f      	mov	r7, r1
 801e628:	4620      	mov	r0, r4
 801e62a:	4629      	mov	r1, r5
 801e62c:	f7ea f9bc 	bl	80089a8 <__aeabi_dmul>
 801e630:	4b56      	ldr	r3, [pc, #344]	; (801e78c <__ieee754_pow+0x3d4>)
 801e632:	4682      	mov	sl, r0
 801e634:	468b      	mov	fp, r1
 801e636:	2200      	movs	r2, #0
 801e638:	4620      	mov	r0, r4
 801e63a:	4629      	mov	r1, r5
 801e63c:	f7ea f9b4 	bl	80089a8 <__aeabi_dmul>
 801e640:	4602      	mov	r2, r0
 801e642:	460b      	mov	r3, r1
 801e644:	a14c      	add	r1, pc, #304	; (adr r1, 801e778 <__ieee754_pow+0x3c0>)
 801e646:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e64a:	f7e9 fff5 	bl	8008638 <__aeabi_dsub>
 801e64e:	4622      	mov	r2, r4
 801e650:	462b      	mov	r3, r5
 801e652:	f7ea f9a9 	bl	80089a8 <__aeabi_dmul>
 801e656:	4602      	mov	r2, r0
 801e658:	460b      	mov	r3, r1
 801e65a:	2000      	movs	r0, #0
 801e65c:	494c      	ldr	r1, [pc, #304]	; (801e790 <__ieee754_pow+0x3d8>)
 801e65e:	f7e9 ffeb 	bl	8008638 <__aeabi_dsub>
 801e662:	4622      	mov	r2, r4
 801e664:	462b      	mov	r3, r5
 801e666:	4680      	mov	r8, r0
 801e668:	4689      	mov	r9, r1
 801e66a:	4620      	mov	r0, r4
 801e66c:	4629      	mov	r1, r5
 801e66e:	f7ea f99b 	bl	80089a8 <__aeabi_dmul>
 801e672:	4602      	mov	r2, r0
 801e674:	460b      	mov	r3, r1
 801e676:	4640      	mov	r0, r8
 801e678:	4649      	mov	r1, r9
 801e67a:	f7ea f995 	bl	80089a8 <__aeabi_dmul>
 801e67e:	a340      	add	r3, pc, #256	; (adr r3, 801e780 <__ieee754_pow+0x3c8>)
 801e680:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e684:	f7ea f990 	bl	80089a8 <__aeabi_dmul>
 801e688:	4602      	mov	r2, r0
 801e68a:	460b      	mov	r3, r1
 801e68c:	4650      	mov	r0, sl
 801e68e:	4659      	mov	r1, fp
 801e690:	f7e9 ffd2 	bl	8008638 <__aeabi_dsub>
 801e694:	4602      	mov	r2, r0
 801e696:	460b      	mov	r3, r1
 801e698:	4604      	mov	r4, r0
 801e69a:	460d      	mov	r5, r1
 801e69c:	4630      	mov	r0, r6
 801e69e:	4639      	mov	r1, r7
 801e6a0:	f7e9 ffcc 	bl	800863c <__adddf3>
 801e6a4:	f04f 0a00 	mov.w	sl, #0
 801e6a8:	4632      	mov	r2, r6
 801e6aa:	463b      	mov	r3, r7
 801e6ac:	4650      	mov	r0, sl
 801e6ae:	468b      	mov	fp, r1
 801e6b0:	f7e9 ffc2 	bl	8008638 <__aeabi_dsub>
 801e6b4:	4602      	mov	r2, r0
 801e6b6:	460b      	mov	r3, r1
 801e6b8:	4620      	mov	r0, r4
 801e6ba:	4629      	mov	r1, r5
 801e6bc:	f7e9 ffbc 	bl	8008638 <__aeabi_dsub>
 801e6c0:	9b00      	ldr	r3, [sp, #0]
 801e6c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e6c4:	3b01      	subs	r3, #1
 801e6c6:	4313      	orrs	r3, r2
 801e6c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e6cc:	bf0c      	ite	eq
 801e6ce:	4b31      	ldreq	r3, [pc, #196]	; (801e794 <__ieee754_pow+0x3dc>)
 801e6d0:	4b2d      	ldrne	r3, [pc, #180]	; (801e788 <__ieee754_pow+0x3d0>)
 801e6d2:	2600      	movs	r6, #0
 801e6d4:	2200      	movs	r2, #0
 801e6d6:	e9cd 2300 	strd	r2, r3, [sp]
 801e6da:	4604      	mov	r4, r0
 801e6dc:	460d      	mov	r5, r1
 801e6de:	4632      	mov	r2, r6
 801e6e0:	463b      	mov	r3, r7
 801e6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e6e6:	f7e9 ffa7 	bl	8008638 <__aeabi_dsub>
 801e6ea:	4652      	mov	r2, sl
 801e6ec:	465b      	mov	r3, fp
 801e6ee:	f7ea f95b 	bl	80089a8 <__aeabi_dmul>
 801e6f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e6f6:	4680      	mov	r8, r0
 801e6f8:	4689      	mov	r9, r1
 801e6fa:	4620      	mov	r0, r4
 801e6fc:	4629      	mov	r1, r5
 801e6fe:	f7ea f953 	bl	80089a8 <__aeabi_dmul>
 801e702:	4602      	mov	r2, r0
 801e704:	460b      	mov	r3, r1
 801e706:	4640      	mov	r0, r8
 801e708:	4649      	mov	r1, r9
 801e70a:	f7e9 ff97 	bl	800863c <__adddf3>
 801e70e:	4632      	mov	r2, r6
 801e710:	463b      	mov	r3, r7
 801e712:	4680      	mov	r8, r0
 801e714:	4689      	mov	r9, r1
 801e716:	4650      	mov	r0, sl
 801e718:	4659      	mov	r1, fp
 801e71a:	f7ea f945 	bl	80089a8 <__aeabi_dmul>
 801e71e:	460b      	mov	r3, r1
 801e720:	4604      	mov	r4, r0
 801e722:	460d      	mov	r5, r1
 801e724:	4602      	mov	r2, r0
 801e726:	4649      	mov	r1, r9
 801e728:	4640      	mov	r0, r8
 801e72a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801e72e:	f7e9 ff85 	bl	800863c <__adddf3>
 801e732:	4b19      	ldr	r3, [pc, #100]	; (801e798 <__ieee754_pow+0x3e0>)
 801e734:	4299      	cmp	r1, r3
 801e736:	4682      	mov	sl, r0
 801e738:	460f      	mov	r7, r1
 801e73a:	460e      	mov	r6, r1
 801e73c:	f340 82e7 	ble.w	801ed0e <__ieee754_pow+0x956>
 801e740:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e744:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e748:	4303      	orrs	r3, r0
 801e74a:	f000 81e1 	beq.w	801eb10 <__ieee754_pow+0x758>
 801e74e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e752:	2200      	movs	r2, #0
 801e754:	2300      	movs	r3, #0
 801e756:	f7ea fb99 	bl	8008e8c <__aeabi_dcmplt>
 801e75a:	3800      	subs	r0, #0
 801e75c:	bf18      	it	ne
 801e75e:	2001      	movne	r0, #1
 801e760:	e730      	b.n	801e5c4 <__ieee754_pow+0x20c>
 801e762:	bf00      	nop
 801e764:	f3af 8000 	nop.w
 801e768:	60000000 	.word	0x60000000
 801e76c:	3ff71547 	.word	0x3ff71547
 801e770:	f85ddf44 	.word	0xf85ddf44
 801e774:	3e54ae0b 	.word	0x3e54ae0b
 801e778:	55555555 	.word	0x55555555
 801e77c:	3fd55555 	.word	0x3fd55555
 801e780:	652b82fe 	.word	0x652b82fe
 801e784:	3ff71547 	.word	0x3ff71547
 801e788:	3ff00000 	.word	0x3ff00000
 801e78c:	3fd00000 	.word	0x3fd00000
 801e790:	3fe00000 	.word	0x3fe00000
 801e794:	bff00000 	.word	0xbff00000
 801e798:	408fffff 	.word	0x408fffff
 801e79c:	4bd2      	ldr	r3, [pc, #840]	; (801eae8 <__ieee754_pow+0x730>)
 801e79e:	402b      	ands	r3, r5
 801e7a0:	2200      	movs	r2, #0
 801e7a2:	b943      	cbnz	r3, 801e7b6 <__ieee754_pow+0x3fe>
 801e7a4:	4658      	mov	r0, fp
 801e7a6:	4bd1      	ldr	r3, [pc, #836]	; (801eaec <__ieee754_pow+0x734>)
 801e7a8:	4661      	mov	r1, ip
 801e7aa:	f7ea f8fd 	bl	80089a8 <__aeabi_dmul>
 801e7ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e7b2:	4683      	mov	fp, r0
 801e7b4:	460c      	mov	r4, r1
 801e7b6:	1523      	asrs	r3, r4, #20
 801e7b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e7bc:	4413      	add	r3, r2
 801e7be:	930b      	str	r3, [sp, #44]	; 0x2c
 801e7c0:	4bcb      	ldr	r3, [pc, #812]	; (801eaf0 <__ieee754_pow+0x738>)
 801e7c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e7c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e7ca:	429c      	cmp	r4, r3
 801e7cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e7d0:	dd08      	ble.n	801e7e4 <__ieee754_pow+0x42c>
 801e7d2:	4bc8      	ldr	r3, [pc, #800]	; (801eaf4 <__ieee754_pow+0x73c>)
 801e7d4:	429c      	cmp	r4, r3
 801e7d6:	f340 8199 	ble.w	801eb0c <__ieee754_pow+0x754>
 801e7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7dc:	3301      	adds	r3, #1
 801e7de:	930b      	str	r3, [sp, #44]	; 0x2c
 801e7e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e7e4:	2600      	movs	r6, #0
 801e7e6:	00f3      	lsls	r3, r6, #3
 801e7e8:	930d      	str	r3, [sp, #52]	; 0x34
 801e7ea:	4bc3      	ldr	r3, [pc, #780]	; (801eaf8 <__ieee754_pow+0x740>)
 801e7ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801e7f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 801e7f4:	4658      	mov	r0, fp
 801e7f6:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801e7fa:	461a      	mov	r2, r3
 801e7fc:	4629      	mov	r1, r5
 801e7fe:	4623      	mov	r3, r4
 801e800:	f7e9 ff1a 	bl	8008638 <__aeabi_dsub>
 801e804:	46da      	mov	sl, fp
 801e806:	4652      	mov	r2, sl
 801e808:	462b      	mov	r3, r5
 801e80a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801e80e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801e812:	f7e9 ff13 	bl	800863c <__adddf3>
 801e816:	4602      	mov	r2, r0
 801e818:	460b      	mov	r3, r1
 801e81a:	2000      	movs	r0, #0
 801e81c:	49b7      	ldr	r1, [pc, #732]	; (801eafc <__ieee754_pow+0x744>)
 801e81e:	f7ea f9ed 	bl	8008bfc <__aeabi_ddiv>
 801e822:	4602      	mov	r2, r0
 801e824:	460b      	mov	r3, r1
 801e826:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801e82a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e82e:	f7ea f8bb 	bl	80089a8 <__aeabi_dmul>
 801e832:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e836:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801e83a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801e83e:	2300      	movs	r3, #0
 801e840:	9304      	str	r3, [sp, #16]
 801e842:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801e846:	46ab      	mov	fp, r5
 801e848:	106d      	asrs	r5, r5, #1
 801e84a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e84e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e852:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 801e856:	2200      	movs	r2, #0
 801e858:	4640      	mov	r0, r8
 801e85a:	4649      	mov	r1, r9
 801e85c:	4614      	mov	r4, r2
 801e85e:	461d      	mov	r5, r3
 801e860:	f7ea f8a2 	bl	80089a8 <__aeabi_dmul>
 801e864:	4602      	mov	r2, r0
 801e866:	460b      	mov	r3, r1
 801e868:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801e86c:	f7e9 fee4 	bl	8008638 <__aeabi_dsub>
 801e870:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e874:	4606      	mov	r6, r0
 801e876:	460f      	mov	r7, r1
 801e878:	4620      	mov	r0, r4
 801e87a:	4629      	mov	r1, r5
 801e87c:	f7e9 fedc 	bl	8008638 <__aeabi_dsub>
 801e880:	4602      	mov	r2, r0
 801e882:	460b      	mov	r3, r1
 801e884:	4650      	mov	r0, sl
 801e886:	4659      	mov	r1, fp
 801e888:	f7e9 fed6 	bl	8008638 <__aeabi_dsub>
 801e88c:	4642      	mov	r2, r8
 801e88e:	464b      	mov	r3, r9
 801e890:	f7ea f88a 	bl	80089a8 <__aeabi_dmul>
 801e894:	4602      	mov	r2, r0
 801e896:	460b      	mov	r3, r1
 801e898:	4630      	mov	r0, r6
 801e89a:	4639      	mov	r1, r7
 801e89c:	f7e9 fecc 	bl	8008638 <__aeabi_dsub>
 801e8a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801e8a4:	f7ea f880 	bl	80089a8 <__aeabi_dmul>
 801e8a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e8ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801e8b0:	4610      	mov	r0, r2
 801e8b2:	4619      	mov	r1, r3
 801e8b4:	f7ea f878 	bl	80089a8 <__aeabi_dmul>
 801e8b8:	a379      	add	r3, pc, #484	; (adr r3, 801eaa0 <__ieee754_pow+0x6e8>)
 801e8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8be:	4604      	mov	r4, r0
 801e8c0:	460d      	mov	r5, r1
 801e8c2:	f7ea f871 	bl	80089a8 <__aeabi_dmul>
 801e8c6:	a378      	add	r3, pc, #480	; (adr r3, 801eaa8 <__ieee754_pow+0x6f0>)
 801e8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8cc:	f7e9 feb6 	bl	800863c <__adddf3>
 801e8d0:	4622      	mov	r2, r4
 801e8d2:	462b      	mov	r3, r5
 801e8d4:	f7ea f868 	bl	80089a8 <__aeabi_dmul>
 801e8d8:	a375      	add	r3, pc, #468	; (adr r3, 801eab0 <__ieee754_pow+0x6f8>)
 801e8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8de:	f7e9 fead 	bl	800863c <__adddf3>
 801e8e2:	4622      	mov	r2, r4
 801e8e4:	462b      	mov	r3, r5
 801e8e6:	f7ea f85f 	bl	80089a8 <__aeabi_dmul>
 801e8ea:	a373      	add	r3, pc, #460	; (adr r3, 801eab8 <__ieee754_pow+0x700>)
 801e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8f0:	f7e9 fea4 	bl	800863c <__adddf3>
 801e8f4:	4622      	mov	r2, r4
 801e8f6:	462b      	mov	r3, r5
 801e8f8:	f7ea f856 	bl	80089a8 <__aeabi_dmul>
 801e8fc:	a370      	add	r3, pc, #448	; (adr r3, 801eac0 <__ieee754_pow+0x708>)
 801e8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e902:	f7e9 fe9b 	bl	800863c <__adddf3>
 801e906:	4622      	mov	r2, r4
 801e908:	462b      	mov	r3, r5
 801e90a:	f7ea f84d 	bl	80089a8 <__aeabi_dmul>
 801e90e:	a36e      	add	r3, pc, #440	; (adr r3, 801eac8 <__ieee754_pow+0x710>)
 801e910:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e914:	f7e9 fe92 	bl	800863c <__adddf3>
 801e918:	4622      	mov	r2, r4
 801e91a:	4606      	mov	r6, r0
 801e91c:	460f      	mov	r7, r1
 801e91e:	462b      	mov	r3, r5
 801e920:	4620      	mov	r0, r4
 801e922:	4629      	mov	r1, r5
 801e924:	f7ea f840 	bl	80089a8 <__aeabi_dmul>
 801e928:	4602      	mov	r2, r0
 801e92a:	460b      	mov	r3, r1
 801e92c:	4630      	mov	r0, r6
 801e92e:	4639      	mov	r1, r7
 801e930:	f7ea f83a 	bl	80089a8 <__aeabi_dmul>
 801e934:	4642      	mov	r2, r8
 801e936:	4604      	mov	r4, r0
 801e938:	460d      	mov	r5, r1
 801e93a:	464b      	mov	r3, r9
 801e93c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e940:	f7e9 fe7c 	bl	800863c <__adddf3>
 801e944:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801e948:	f7ea f82e 	bl	80089a8 <__aeabi_dmul>
 801e94c:	4622      	mov	r2, r4
 801e94e:	462b      	mov	r3, r5
 801e950:	f7e9 fe74 	bl	800863c <__adddf3>
 801e954:	4642      	mov	r2, r8
 801e956:	4606      	mov	r6, r0
 801e958:	460f      	mov	r7, r1
 801e95a:	464b      	mov	r3, r9
 801e95c:	4640      	mov	r0, r8
 801e95e:	4649      	mov	r1, r9
 801e960:	f7ea f822 	bl	80089a8 <__aeabi_dmul>
 801e964:	4b66      	ldr	r3, [pc, #408]	; (801eb00 <__ieee754_pow+0x748>)
 801e966:	2200      	movs	r2, #0
 801e968:	4682      	mov	sl, r0
 801e96a:	468b      	mov	fp, r1
 801e96c:	f7e9 fe66 	bl	800863c <__adddf3>
 801e970:	4632      	mov	r2, r6
 801e972:	463b      	mov	r3, r7
 801e974:	f7e9 fe62 	bl	800863c <__adddf3>
 801e978:	2400      	movs	r4, #0
 801e97a:	460d      	mov	r5, r1
 801e97c:	4622      	mov	r2, r4
 801e97e:	460b      	mov	r3, r1
 801e980:	4640      	mov	r0, r8
 801e982:	4649      	mov	r1, r9
 801e984:	f7ea f810 	bl	80089a8 <__aeabi_dmul>
 801e988:	4b5d      	ldr	r3, [pc, #372]	; (801eb00 <__ieee754_pow+0x748>)
 801e98a:	4680      	mov	r8, r0
 801e98c:	4689      	mov	r9, r1
 801e98e:	2200      	movs	r2, #0
 801e990:	4620      	mov	r0, r4
 801e992:	4629      	mov	r1, r5
 801e994:	f7e9 fe50 	bl	8008638 <__aeabi_dsub>
 801e998:	4652      	mov	r2, sl
 801e99a:	465b      	mov	r3, fp
 801e99c:	f7e9 fe4c 	bl	8008638 <__aeabi_dsub>
 801e9a0:	4602      	mov	r2, r0
 801e9a2:	460b      	mov	r3, r1
 801e9a4:	4630      	mov	r0, r6
 801e9a6:	4639      	mov	r1, r7
 801e9a8:	f7e9 fe46 	bl	8008638 <__aeabi_dsub>
 801e9ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801e9b0:	f7e9 fffa 	bl	80089a8 <__aeabi_dmul>
 801e9b4:	4622      	mov	r2, r4
 801e9b6:	4606      	mov	r6, r0
 801e9b8:	460f      	mov	r7, r1
 801e9ba:	462b      	mov	r3, r5
 801e9bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801e9c0:	f7e9 fff2 	bl	80089a8 <__aeabi_dmul>
 801e9c4:	4602      	mov	r2, r0
 801e9c6:	460b      	mov	r3, r1
 801e9c8:	4630      	mov	r0, r6
 801e9ca:	4639      	mov	r1, r7
 801e9cc:	f7e9 fe36 	bl	800863c <__adddf3>
 801e9d0:	4606      	mov	r6, r0
 801e9d2:	460f      	mov	r7, r1
 801e9d4:	4602      	mov	r2, r0
 801e9d6:	460b      	mov	r3, r1
 801e9d8:	4640      	mov	r0, r8
 801e9da:	4649      	mov	r1, r9
 801e9dc:	f7e9 fe2e 	bl	800863c <__adddf3>
 801e9e0:	2400      	movs	r4, #0
 801e9e2:	a33b      	add	r3, pc, #236	; (adr r3, 801ead0 <__ieee754_pow+0x718>)
 801e9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	460d      	mov	r5, r1
 801e9ec:	f7e9 ffdc 	bl	80089a8 <__aeabi_dmul>
 801e9f0:	4642      	mov	r2, r8
 801e9f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e9f6:	464b      	mov	r3, r9
 801e9f8:	4620      	mov	r0, r4
 801e9fa:	4629      	mov	r1, r5
 801e9fc:	f7e9 fe1c 	bl	8008638 <__aeabi_dsub>
 801ea00:	4602      	mov	r2, r0
 801ea02:	460b      	mov	r3, r1
 801ea04:	4630      	mov	r0, r6
 801ea06:	4639      	mov	r1, r7
 801ea08:	f7e9 fe16 	bl	8008638 <__aeabi_dsub>
 801ea0c:	a332      	add	r3, pc, #200	; (adr r3, 801ead8 <__ieee754_pow+0x720>)
 801ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea12:	f7e9 ffc9 	bl	80089a8 <__aeabi_dmul>
 801ea16:	a332      	add	r3, pc, #200	; (adr r3, 801eae0 <__ieee754_pow+0x728>)
 801ea18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea1c:	4606      	mov	r6, r0
 801ea1e:	460f      	mov	r7, r1
 801ea20:	4620      	mov	r0, r4
 801ea22:	4629      	mov	r1, r5
 801ea24:	f7e9 ffc0 	bl	80089a8 <__aeabi_dmul>
 801ea28:	4602      	mov	r2, r0
 801ea2a:	460b      	mov	r3, r1
 801ea2c:	4630      	mov	r0, r6
 801ea2e:	4639      	mov	r1, r7
 801ea30:	f7e9 fe04 	bl	800863c <__adddf3>
 801ea34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ea36:	4b33      	ldr	r3, [pc, #204]	; (801eb04 <__ieee754_pow+0x74c>)
 801ea38:	4413      	add	r3, r2
 801ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea3e:	f7e9 fdfd 	bl	800863c <__adddf3>
 801ea42:	4680      	mov	r8, r0
 801ea44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ea46:	4689      	mov	r9, r1
 801ea48:	f7e9 ff44 	bl	80088d4 <__aeabi_i2d>
 801ea4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ea4e:	4b2e      	ldr	r3, [pc, #184]	; (801eb08 <__ieee754_pow+0x750>)
 801ea50:	4413      	add	r3, r2
 801ea52:	e9d3 6700 	ldrd	r6, r7, [r3]
 801ea56:	4604      	mov	r4, r0
 801ea58:	460d      	mov	r5, r1
 801ea5a:	4642      	mov	r2, r8
 801ea5c:	464b      	mov	r3, r9
 801ea5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ea62:	f7e9 fdeb 	bl	800863c <__adddf3>
 801ea66:	4632      	mov	r2, r6
 801ea68:	463b      	mov	r3, r7
 801ea6a:	f7e9 fde7 	bl	800863c <__adddf3>
 801ea6e:	4622      	mov	r2, r4
 801ea70:	462b      	mov	r3, r5
 801ea72:	f7e9 fde3 	bl	800863c <__adddf3>
 801ea76:	f04f 0a00 	mov.w	sl, #0
 801ea7a:	4622      	mov	r2, r4
 801ea7c:	462b      	mov	r3, r5
 801ea7e:	4650      	mov	r0, sl
 801ea80:	468b      	mov	fp, r1
 801ea82:	f7e9 fdd9 	bl	8008638 <__aeabi_dsub>
 801ea86:	4632      	mov	r2, r6
 801ea88:	463b      	mov	r3, r7
 801ea8a:	f7e9 fdd5 	bl	8008638 <__aeabi_dsub>
 801ea8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ea92:	f7e9 fdd1 	bl	8008638 <__aeabi_dsub>
 801ea96:	4602      	mov	r2, r0
 801ea98:	460b      	mov	r3, r1
 801ea9a:	4640      	mov	r0, r8
 801ea9c:	4649      	mov	r1, r9
 801ea9e:	e60d      	b.n	801e6bc <__ieee754_pow+0x304>
 801eaa0:	4a454eef 	.word	0x4a454eef
 801eaa4:	3fca7e28 	.word	0x3fca7e28
 801eaa8:	93c9db65 	.word	0x93c9db65
 801eaac:	3fcd864a 	.word	0x3fcd864a
 801eab0:	a91d4101 	.word	0xa91d4101
 801eab4:	3fd17460 	.word	0x3fd17460
 801eab8:	518f264d 	.word	0x518f264d
 801eabc:	3fd55555 	.word	0x3fd55555
 801eac0:	db6fabff 	.word	0xdb6fabff
 801eac4:	3fdb6db6 	.word	0x3fdb6db6
 801eac8:	33333303 	.word	0x33333303
 801eacc:	3fe33333 	.word	0x3fe33333
 801ead0:	e0000000 	.word	0xe0000000
 801ead4:	3feec709 	.word	0x3feec709
 801ead8:	dc3a03fd 	.word	0xdc3a03fd
 801eadc:	3feec709 	.word	0x3feec709
 801eae0:	145b01f5 	.word	0x145b01f5
 801eae4:	be3e2fe0 	.word	0xbe3e2fe0
 801eae8:	7ff00000 	.word	0x7ff00000
 801eaec:	43400000 	.word	0x43400000
 801eaf0:	0003988e 	.word	0x0003988e
 801eaf4:	000bb679 	.word	0x000bb679
 801eaf8:	080208b0 	.word	0x080208b0
 801eafc:	3ff00000 	.word	0x3ff00000
 801eb00:	40080000 	.word	0x40080000
 801eb04:	080208d0 	.word	0x080208d0
 801eb08:	080208c0 	.word	0x080208c0
 801eb0c:	2601      	movs	r6, #1
 801eb0e:	e66a      	b.n	801e7e6 <__ieee754_pow+0x42e>
 801eb10:	a39d      	add	r3, pc, #628	; (adr r3, 801ed88 <__ieee754_pow+0x9d0>)
 801eb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb16:	4640      	mov	r0, r8
 801eb18:	4649      	mov	r1, r9
 801eb1a:	f7e9 fd8f 	bl	800863c <__adddf3>
 801eb1e:	4622      	mov	r2, r4
 801eb20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801eb24:	462b      	mov	r3, r5
 801eb26:	4650      	mov	r0, sl
 801eb28:	4639      	mov	r1, r7
 801eb2a:	f7e9 fd85 	bl	8008638 <__aeabi_dsub>
 801eb2e:	4602      	mov	r2, r0
 801eb30:	460b      	mov	r3, r1
 801eb32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801eb36:	f7ea f9c7 	bl	8008ec8 <__aeabi_dcmpgt>
 801eb3a:	2800      	cmp	r0, #0
 801eb3c:	f47f ae07 	bne.w	801e74e <__ieee754_pow+0x396>
 801eb40:	4aa3      	ldr	r2, [pc, #652]	; (801edd0 <__ieee754_pow+0xa18>)
 801eb42:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 801eb46:	4293      	cmp	r3, r2
 801eb48:	f340 8101 	ble.w	801ed4e <__ieee754_pow+0x996>
 801eb4c:	151b      	asrs	r3, r3, #20
 801eb4e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801eb52:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801eb56:	fa4a f303 	asr.w	r3, sl, r3
 801eb5a:	4433      	add	r3, r6
 801eb5c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801eb60:	4f9c      	ldr	r7, [pc, #624]	; (801edd4 <__ieee754_pow+0xa1c>)
 801eb62:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801eb66:	4117      	asrs	r7, r2
 801eb68:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801eb6c:	2000      	movs	r0, #0
 801eb6e:	ea23 0107 	bic.w	r1, r3, r7
 801eb72:	f1c2 0214 	rsb	r2, r2, #20
 801eb76:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801eb7a:	fa4a fa02 	asr.w	sl, sl, r2
 801eb7e:	2e00      	cmp	r6, #0
 801eb80:	4602      	mov	r2, r0
 801eb82:	460b      	mov	r3, r1
 801eb84:	4620      	mov	r0, r4
 801eb86:	4629      	mov	r1, r5
 801eb88:	bfb8      	it	lt
 801eb8a:	f1ca 0a00 	rsblt	sl, sl, #0
 801eb8e:	f7e9 fd53 	bl	8008638 <__aeabi_dsub>
 801eb92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eb96:	4642      	mov	r2, r8
 801eb98:	464b      	mov	r3, r9
 801eb9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb9e:	f7e9 fd4d 	bl	800863c <__adddf3>
 801eba2:	2400      	movs	r4, #0
 801eba4:	a37a      	add	r3, pc, #488	; (adr r3, 801ed90 <__ieee754_pow+0x9d8>)
 801eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebaa:	4620      	mov	r0, r4
 801ebac:	460d      	mov	r5, r1
 801ebae:	f7e9 fefb 	bl	80089a8 <__aeabi_dmul>
 801ebb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ebb6:	4606      	mov	r6, r0
 801ebb8:	460f      	mov	r7, r1
 801ebba:	4620      	mov	r0, r4
 801ebbc:	4629      	mov	r1, r5
 801ebbe:	f7e9 fd3b 	bl	8008638 <__aeabi_dsub>
 801ebc2:	4602      	mov	r2, r0
 801ebc4:	460b      	mov	r3, r1
 801ebc6:	4640      	mov	r0, r8
 801ebc8:	4649      	mov	r1, r9
 801ebca:	f7e9 fd35 	bl	8008638 <__aeabi_dsub>
 801ebce:	a372      	add	r3, pc, #456	; (adr r3, 801ed98 <__ieee754_pow+0x9e0>)
 801ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebd4:	f7e9 fee8 	bl	80089a8 <__aeabi_dmul>
 801ebd8:	a371      	add	r3, pc, #452	; (adr r3, 801eda0 <__ieee754_pow+0x9e8>)
 801ebda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebde:	4680      	mov	r8, r0
 801ebe0:	4689      	mov	r9, r1
 801ebe2:	4620      	mov	r0, r4
 801ebe4:	4629      	mov	r1, r5
 801ebe6:	f7e9 fedf 	bl	80089a8 <__aeabi_dmul>
 801ebea:	4602      	mov	r2, r0
 801ebec:	460b      	mov	r3, r1
 801ebee:	4640      	mov	r0, r8
 801ebf0:	4649      	mov	r1, r9
 801ebf2:	f7e9 fd23 	bl	800863c <__adddf3>
 801ebf6:	4604      	mov	r4, r0
 801ebf8:	460d      	mov	r5, r1
 801ebfa:	4602      	mov	r2, r0
 801ebfc:	460b      	mov	r3, r1
 801ebfe:	4630      	mov	r0, r6
 801ec00:	4639      	mov	r1, r7
 801ec02:	f7e9 fd1b 	bl	800863c <__adddf3>
 801ec06:	4632      	mov	r2, r6
 801ec08:	463b      	mov	r3, r7
 801ec0a:	4680      	mov	r8, r0
 801ec0c:	4689      	mov	r9, r1
 801ec0e:	f7e9 fd13 	bl	8008638 <__aeabi_dsub>
 801ec12:	4602      	mov	r2, r0
 801ec14:	460b      	mov	r3, r1
 801ec16:	4620      	mov	r0, r4
 801ec18:	4629      	mov	r1, r5
 801ec1a:	f7e9 fd0d 	bl	8008638 <__aeabi_dsub>
 801ec1e:	4642      	mov	r2, r8
 801ec20:	4606      	mov	r6, r0
 801ec22:	460f      	mov	r7, r1
 801ec24:	464b      	mov	r3, r9
 801ec26:	4640      	mov	r0, r8
 801ec28:	4649      	mov	r1, r9
 801ec2a:	f7e9 febd 	bl	80089a8 <__aeabi_dmul>
 801ec2e:	a35e      	add	r3, pc, #376	; (adr r3, 801eda8 <__ieee754_pow+0x9f0>)
 801ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec34:	4604      	mov	r4, r0
 801ec36:	460d      	mov	r5, r1
 801ec38:	f7e9 feb6 	bl	80089a8 <__aeabi_dmul>
 801ec3c:	a35c      	add	r3, pc, #368	; (adr r3, 801edb0 <__ieee754_pow+0x9f8>)
 801ec3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec42:	f7e9 fcf9 	bl	8008638 <__aeabi_dsub>
 801ec46:	4622      	mov	r2, r4
 801ec48:	462b      	mov	r3, r5
 801ec4a:	f7e9 fead 	bl	80089a8 <__aeabi_dmul>
 801ec4e:	a35a      	add	r3, pc, #360	; (adr r3, 801edb8 <__ieee754_pow+0xa00>)
 801ec50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec54:	f7e9 fcf2 	bl	800863c <__adddf3>
 801ec58:	4622      	mov	r2, r4
 801ec5a:	462b      	mov	r3, r5
 801ec5c:	f7e9 fea4 	bl	80089a8 <__aeabi_dmul>
 801ec60:	a357      	add	r3, pc, #348	; (adr r3, 801edc0 <__ieee754_pow+0xa08>)
 801ec62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec66:	f7e9 fce7 	bl	8008638 <__aeabi_dsub>
 801ec6a:	4622      	mov	r2, r4
 801ec6c:	462b      	mov	r3, r5
 801ec6e:	f7e9 fe9b 	bl	80089a8 <__aeabi_dmul>
 801ec72:	a355      	add	r3, pc, #340	; (adr r3, 801edc8 <__ieee754_pow+0xa10>)
 801ec74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec78:	f7e9 fce0 	bl	800863c <__adddf3>
 801ec7c:	4622      	mov	r2, r4
 801ec7e:	462b      	mov	r3, r5
 801ec80:	f7e9 fe92 	bl	80089a8 <__aeabi_dmul>
 801ec84:	4602      	mov	r2, r0
 801ec86:	460b      	mov	r3, r1
 801ec88:	4640      	mov	r0, r8
 801ec8a:	4649      	mov	r1, r9
 801ec8c:	f7e9 fcd4 	bl	8008638 <__aeabi_dsub>
 801ec90:	4604      	mov	r4, r0
 801ec92:	460d      	mov	r5, r1
 801ec94:	4602      	mov	r2, r0
 801ec96:	460b      	mov	r3, r1
 801ec98:	4640      	mov	r0, r8
 801ec9a:	4649      	mov	r1, r9
 801ec9c:	f7e9 fe84 	bl	80089a8 <__aeabi_dmul>
 801eca0:	2200      	movs	r2, #0
 801eca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ecaa:	4620      	mov	r0, r4
 801ecac:	4629      	mov	r1, r5
 801ecae:	f7e9 fcc3 	bl	8008638 <__aeabi_dsub>
 801ecb2:	4602      	mov	r2, r0
 801ecb4:	460b      	mov	r3, r1
 801ecb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ecba:	f7e9 ff9f 	bl	8008bfc <__aeabi_ddiv>
 801ecbe:	4632      	mov	r2, r6
 801ecc0:	4604      	mov	r4, r0
 801ecc2:	460d      	mov	r5, r1
 801ecc4:	463b      	mov	r3, r7
 801ecc6:	4640      	mov	r0, r8
 801ecc8:	4649      	mov	r1, r9
 801ecca:	f7e9 fe6d 	bl	80089a8 <__aeabi_dmul>
 801ecce:	4632      	mov	r2, r6
 801ecd0:	463b      	mov	r3, r7
 801ecd2:	f7e9 fcb3 	bl	800863c <__adddf3>
 801ecd6:	4602      	mov	r2, r0
 801ecd8:	460b      	mov	r3, r1
 801ecda:	4620      	mov	r0, r4
 801ecdc:	4629      	mov	r1, r5
 801ecde:	f7e9 fcab 	bl	8008638 <__aeabi_dsub>
 801ece2:	4642      	mov	r2, r8
 801ece4:	464b      	mov	r3, r9
 801ece6:	f7e9 fca7 	bl	8008638 <__aeabi_dsub>
 801ecea:	4602      	mov	r2, r0
 801ecec:	460b      	mov	r3, r1
 801ecee:	2000      	movs	r0, #0
 801ecf0:	4939      	ldr	r1, [pc, #228]	; (801edd8 <__ieee754_pow+0xa20>)
 801ecf2:	f7e9 fca1 	bl	8008638 <__aeabi_dsub>
 801ecf6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801ecfa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ecfe:	da29      	bge.n	801ed54 <__ieee754_pow+0x99c>
 801ed00:	4652      	mov	r2, sl
 801ed02:	f000 f955 	bl	801efb0 <scalbn>
 801ed06:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ed0a:	f7ff bbfe 	b.w	801e50a <__ieee754_pow+0x152>
 801ed0e:	4b33      	ldr	r3, [pc, #204]	; (801eddc <__ieee754_pow+0xa24>)
 801ed10:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801ed14:	429f      	cmp	r7, r3
 801ed16:	f77f af13 	ble.w	801eb40 <__ieee754_pow+0x788>
 801ed1a:	4b31      	ldr	r3, [pc, #196]	; (801ede0 <__ieee754_pow+0xa28>)
 801ed1c:	440b      	add	r3, r1
 801ed1e:	4303      	orrs	r3, r0
 801ed20:	d009      	beq.n	801ed36 <__ieee754_pow+0x97e>
 801ed22:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ed26:	2200      	movs	r2, #0
 801ed28:	2300      	movs	r3, #0
 801ed2a:	f7ea f8af 	bl	8008e8c <__aeabi_dcmplt>
 801ed2e:	3800      	subs	r0, #0
 801ed30:	bf18      	it	ne
 801ed32:	2001      	movne	r0, #1
 801ed34:	e453      	b.n	801e5de <__ieee754_pow+0x226>
 801ed36:	4622      	mov	r2, r4
 801ed38:	462b      	mov	r3, r5
 801ed3a:	f7e9 fc7d 	bl	8008638 <__aeabi_dsub>
 801ed3e:	4642      	mov	r2, r8
 801ed40:	464b      	mov	r3, r9
 801ed42:	f7ea f8b7 	bl	8008eb4 <__aeabi_dcmpge>
 801ed46:	2800      	cmp	r0, #0
 801ed48:	f43f aefa 	beq.w	801eb40 <__ieee754_pow+0x788>
 801ed4c:	e7e9      	b.n	801ed22 <__ieee754_pow+0x96a>
 801ed4e:	f04f 0a00 	mov.w	sl, #0
 801ed52:	e720      	b.n	801eb96 <__ieee754_pow+0x7de>
 801ed54:	4621      	mov	r1, r4
 801ed56:	e7d6      	b.n	801ed06 <__ieee754_pow+0x94e>
 801ed58:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801edd8 <__ieee754_pow+0xa20>
 801ed5c:	f04f 0b00 	mov.w	fp, #0
 801ed60:	f7ff bbba 	b.w	801e4d8 <__ieee754_pow+0x120>
 801ed64:	f04f 0b00 	mov.w	fp, #0
 801ed68:	f04f 0c00 	mov.w	ip, #0
 801ed6c:	f7ff bbb4 	b.w	801e4d8 <__ieee754_pow+0x120>
 801ed70:	4640      	mov	r0, r8
 801ed72:	4649      	mov	r1, r9
 801ed74:	f7ff bb3d 	b.w	801e3f2 <__ieee754_pow+0x3a>
 801ed78:	9200      	str	r2, [sp, #0]
 801ed7a:	f7ff bb89 	b.w	801e490 <__ieee754_pow+0xd8>
 801ed7e:	2300      	movs	r3, #0
 801ed80:	f7ff bb73 	b.w	801e46a <__ieee754_pow+0xb2>
 801ed84:	f3af 8000 	nop.w
 801ed88:	652b82fe 	.word	0x652b82fe
 801ed8c:	3c971547 	.word	0x3c971547
 801ed90:	00000000 	.word	0x00000000
 801ed94:	3fe62e43 	.word	0x3fe62e43
 801ed98:	fefa39ef 	.word	0xfefa39ef
 801ed9c:	3fe62e42 	.word	0x3fe62e42
 801eda0:	0ca86c39 	.word	0x0ca86c39
 801eda4:	be205c61 	.word	0xbe205c61
 801eda8:	72bea4d0 	.word	0x72bea4d0
 801edac:	3e663769 	.word	0x3e663769
 801edb0:	c5d26bf1 	.word	0xc5d26bf1
 801edb4:	3ebbbd41 	.word	0x3ebbbd41
 801edb8:	af25de2c 	.word	0xaf25de2c
 801edbc:	3f11566a 	.word	0x3f11566a
 801edc0:	16bebd93 	.word	0x16bebd93
 801edc4:	3f66c16c 	.word	0x3f66c16c
 801edc8:	5555553e 	.word	0x5555553e
 801edcc:	3fc55555 	.word	0x3fc55555
 801edd0:	3fe00000 	.word	0x3fe00000
 801edd4:	000fffff 	.word	0x000fffff
 801edd8:	3ff00000 	.word	0x3ff00000
 801eddc:	4090cbff 	.word	0x4090cbff
 801ede0:	3f6f3400 	.word	0x3f6f3400

0801ede4 <__ieee754_sqrt>:
 801ede4:	f8df c154 	ldr.w	ip, [pc, #340]	; 801ef3c <__ieee754_sqrt+0x158>
 801ede8:	ea3c 0c01 	bics.w	ip, ip, r1
 801edec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801edf0:	460a      	mov	r2, r1
 801edf2:	4606      	mov	r6, r0
 801edf4:	460d      	mov	r5, r1
 801edf6:	460c      	mov	r4, r1
 801edf8:	4607      	mov	r7, r0
 801edfa:	4603      	mov	r3, r0
 801edfc:	d10f      	bne.n	801ee1e <__ieee754_sqrt+0x3a>
 801edfe:	4602      	mov	r2, r0
 801ee00:	460b      	mov	r3, r1
 801ee02:	f7e9 fdd1 	bl	80089a8 <__aeabi_dmul>
 801ee06:	4602      	mov	r2, r0
 801ee08:	460b      	mov	r3, r1
 801ee0a:	4630      	mov	r0, r6
 801ee0c:	4629      	mov	r1, r5
 801ee0e:	f7e9 fc15 	bl	800863c <__adddf3>
 801ee12:	4606      	mov	r6, r0
 801ee14:	460d      	mov	r5, r1
 801ee16:	4630      	mov	r0, r6
 801ee18:	4629      	mov	r1, r5
 801ee1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee1e:	2900      	cmp	r1, #0
 801ee20:	dc0e      	bgt.n	801ee40 <__ieee754_sqrt+0x5c>
 801ee22:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801ee26:	ea5c 0707 	orrs.w	r7, ip, r7
 801ee2a:	d0f4      	beq.n	801ee16 <__ieee754_sqrt+0x32>
 801ee2c:	b141      	cbz	r1, 801ee40 <__ieee754_sqrt+0x5c>
 801ee2e:	4602      	mov	r2, r0
 801ee30:	460b      	mov	r3, r1
 801ee32:	f7e9 fc01 	bl	8008638 <__aeabi_dsub>
 801ee36:	4602      	mov	r2, r0
 801ee38:	460b      	mov	r3, r1
 801ee3a:	f7e9 fedf 	bl	8008bfc <__aeabi_ddiv>
 801ee3e:	e7e8      	b.n	801ee12 <__ieee754_sqrt+0x2e>
 801ee40:	1521      	asrs	r1, r4, #20
 801ee42:	d074      	beq.n	801ef2e <__ieee754_sqrt+0x14a>
 801ee44:	07cc      	lsls	r4, r1, #31
 801ee46:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ee4a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 801ee4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801ee52:	bf5e      	ittt	pl
 801ee54:	0fd9      	lsrpl	r1, r3, #31
 801ee56:	005b      	lslpl	r3, r3, #1
 801ee58:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 801ee5c:	2400      	movs	r4, #0
 801ee5e:	0fd9      	lsrs	r1, r3, #31
 801ee60:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801ee64:	107f      	asrs	r7, r7, #1
 801ee66:	005b      	lsls	r3, r3, #1
 801ee68:	2516      	movs	r5, #22
 801ee6a:	4620      	mov	r0, r4
 801ee6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ee70:	1846      	adds	r6, r0, r1
 801ee72:	4296      	cmp	r6, r2
 801ee74:	bfde      	ittt	le
 801ee76:	1b92      	suble	r2, r2, r6
 801ee78:	1870      	addle	r0, r6, r1
 801ee7a:	1864      	addle	r4, r4, r1
 801ee7c:	0052      	lsls	r2, r2, #1
 801ee7e:	3d01      	subs	r5, #1
 801ee80:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801ee84:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801ee88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ee8c:	d1f0      	bne.n	801ee70 <__ieee754_sqrt+0x8c>
 801ee8e:	4629      	mov	r1, r5
 801ee90:	f04f 0e20 	mov.w	lr, #32
 801ee94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801ee98:	4282      	cmp	r2, r0
 801ee9a:	eb06 0c05 	add.w	ip, r6, r5
 801ee9e:	dc02      	bgt.n	801eea6 <__ieee754_sqrt+0xc2>
 801eea0:	d113      	bne.n	801eeca <__ieee754_sqrt+0xe6>
 801eea2:	459c      	cmp	ip, r3
 801eea4:	d811      	bhi.n	801eeca <__ieee754_sqrt+0xe6>
 801eea6:	f1bc 0f00 	cmp.w	ip, #0
 801eeaa:	eb0c 0506 	add.w	r5, ip, r6
 801eeae:	da43      	bge.n	801ef38 <__ieee754_sqrt+0x154>
 801eeb0:	2d00      	cmp	r5, #0
 801eeb2:	db41      	blt.n	801ef38 <__ieee754_sqrt+0x154>
 801eeb4:	f100 0801 	add.w	r8, r0, #1
 801eeb8:	1a12      	subs	r2, r2, r0
 801eeba:	459c      	cmp	ip, r3
 801eebc:	bf88      	it	hi
 801eebe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801eec2:	eba3 030c 	sub.w	r3, r3, ip
 801eec6:	4431      	add	r1, r6
 801eec8:	4640      	mov	r0, r8
 801eeca:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801eece:	f1be 0e01 	subs.w	lr, lr, #1
 801eed2:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 801eed6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801eeda:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801eede:	d1db      	bne.n	801ee98 <__ieee754_sqrt+0xb4>
 801eee0:	4313      	orrs	r3, r2
 801eee2:	d006      	beq.n	801eef2 <__ieee754_sqrt+0x10e>
 801eee4:	1c48      	adds	r0, r1, #1
 801eee6:	bf13      	iteet	ne
 801eee8:	3101      	addne	r1, #1
 801eeea:	3401      	addeq	r4, #1
 801eeec:	4671      	moveq	r1, lr
 801eeee:	f021 0101 	bicne.w	r1, r1, #1
 801eef2:	1063      	asrs	r3, r4, #1
 801eef4:	0849      	lsrs	r1, r1, #1
 801eef6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801eefa:	07e2      	lsls	r2, r4, #31
 801eefc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ef00:	bf48      	it	mi
 801ef02:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801ef06:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801ef0a:	460e      	mov	r6, r1
 801ef0c:	e783      	b.n	801ee16 <__ieee754_sqrt+0x32>
 801ef0e:	0ada      	lsrs	r2, r3, #11
 801ef10:	3815      	subs	r0, #21
 801ef12:	055b      	lsls	r3, r3, #21
 801ef14:	2a00      	cmp	r2, #0
 801ef16:	d0fa      	beq.n	801ef0e <__ieee754_sqrt+0x12a>
 801ef18:	02d5      	lsls	r5, r2, #11
 801ef1a:	d50a      	bpl.n	801ef32 <__ieee754_sqrt+0x14e>
 801ef1c:	f1c1 0420 	rsb	r4, r1, #32
 801ef20:	fa23 f404 	lsr.w	r4, r3, r4
 801ef24:	1e4d      	subs	r5, r1, #1
 801ef26:	408b      	lsls	r3, r1
 801ef28:	4322      	orrs	r2, r4
 801ef2a:	1b41      	subs	r1, r0, r5
 801ef2c:	e78a      	b.n	801ee44 <__ieee754_sqrt+0x60>
 801ef2e:	4608      	mov	r0, r1
 801ef30:	e7f0      	b.n	801ef14 <__ieee754_sqrt+0x130>
 801ef32:	0052      	lsls	r2, r2, #1
 801ef34:	3101      	adds	r1, #1
 801ef36:	e7ef      	b.n	801ef18 <__ieee754_sqrt+0x134>
 801ef38:	4680      	mov	r8, r0
 801ef3a:	e7bd      	b.n	801eeb8 <__ieee754_sqrt+0xd4>
 801ef3c:	7ff00000 	.word	0x7ff00000

0801ef40 <with_errno>:
 801ef40:	b570      	push	{r4, r5, r6, lr}
 801ef42:	4604      	mov	r4, r0
 801ef44:	460d      	mov	r5, r1
 801ef46:	4616      	mov	r6, r2
 801ef48:	f7f9 f92e 	bl	80181a8 <__errno>
 801ef4c:	4629      	mov	r1, r5
 801ef4e:	6006      	str	r6, [r0, #0]
 801ef50:	4620      	mov	r0, r4
 801ef52:	bd70      	pop	{r4, r5, r6, pc}

0801ef54 <xflow>:
 801ef54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ef56:	4615      	mov	r5, r2
 801ef58:	461c      	mov	r4, r3
 801ef5a:	b180      	cbz	r0, 801ef7e <xflow+0x2a>
 801ef5c:	4610      	mov	r0, r2
 801ef5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ef62:	e9cd 0100 	strd	r0, r1, [sp]
 801ef66:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ef6a:	4628      	mov	r0, r5
 801ef6c:	4621      	mov	r1, r4
 801ef6e:	f7e9 fd1b 	bl	80089a8 <__aeabi_dmul>
 801ef72:	2222      	movs	r2, #34	; 0x22
 801ef74:	b003      	add	sp, #12
 801ef76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ef7a:	f7ff bfe1 	b.w	801ef40 <with_errno>
 801ef7e:	4610      	mov	r0, r2
 801ef80:	4619      	mov	r1, r3
 801ef82:	e7ee      	b.n	801ef62 <xflow+0xe>

0801ef84 <__math_uflow>:
 801ef84:	2200      	movs	r2, #0
 801ef86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801ef8a:	f7ff bfe3 	b.w	801ef54 <xflow>

0801ef8e <__math_oflow>:
 801ef8e:	2200      	movs	r2, #0
 801ef90:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801ef94:	f7ff bfde 	b.w	801ef54 <xflow>

0801ef98 <fabs>:
 801ef98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ef9c:	4770      	bx	lr

0801ef9e <finite>:
 801ef9e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 801efa2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801efa6:	0fc0      	lsrs	r0, r0, #31
 801efa8:	4770      	bx	lr
 801efaa:	0000      	movs	r0, r0
 801efac:	0000      	movs	r0, r0
	...

0801efb0 <scalbn>:
 801efb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801efb2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801efb6:	4604      	mov	r4, r0
 801efb8:	460d      	mov	r5, r1
 801efba:	4617      	mov	r7, r2
 801efbc:	460b      	mov	r3, r1
 801efbe:	b996      	cbnz	r6, 801efe6 <scalbn+0x36>
 801efc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801efc4:	4303      	orrs	r3, r0
 801efc6:	d039      	beq.n	801f03c <scalbn+0x8c>
 801efc8:	4b33      	ldr	r3, [pc, #204]	; (801f098 <scalbn+0xe8>)
 801efca:	2200      	movs	r2, #0
 801efcc:	f7e9 fcec 	bl	80089a8 <__aeabi_dmul>
 801efd0:	4b32      	ldr	r3, [pc, #200]	; (801f09c <scalbn+0xec>)
 801efd2:	429f      	cmp	r7, r3
 801efd4:	4604      	mov	r4, r0
 801efd6:	460d      	mov	r5, r1
 801efd8:	da0f      	bge.n	801effa <scalbn+0x4a>
 801efda:	a32b      	add	r3, pc, #172	; (adr r3, 801f088 <scalbn+0xd8>)
 801efdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efe0:	f7e9 fce2 	bl	80089a8 <__aeabi_dmul>
 801efe4:	e006      	b.n	801eff4 <scalbn+0x44>
 801efe6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801efea:	4296      	cmp	r6, r2
 801efec:	d10a      	bne.n	801f004 <scalbn+0x54>
 801efee:	4602      	mov	r2, r0
 801eff0:	f7e9 fb24 	bl	800863c <__adddf3>
 801eff4:	4604      	mov	r4, r0
 801eff6:	460d      	mov	r5, r1
 801eff8:	e020      	b.n	801f03c <scalbn+0x8c>
 801effa:	460b      	mov	r3, r1
 801effc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801f000:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 801f004:	19b9      	adds	r1, r7, r6
 801f006:	f240 72fe 	movw	r2, #2046	; 0x7fe
 801f00a:	4291      	cmp	r1, r2
 801f00c:	dd0e      	ble.n	801f02c <scalbn+0x7c>
 801f00e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 801f012:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 801f016:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 801f01a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 801f01e:	a31c      	add	r3, pc, #112	; (adr r3, 801f090 <scalbn+0xe0>)
 801f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f024:	481e      	ldr	r0, [pc, #120]	; (801f0a0 <scalbn+0xf0>)
 801f026:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 801f02a:	e7d9      	b.n	801efe0 <scalbn+0x30>
 801f02c:	2900      	cmp	r1, #0
 801f02e:	dd08      	ble.n	801f042 <scalbn+0x92>
 801f030:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f034:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f038:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801f03c:	4620      	mov	r0, r4
 801f03e:	4629      	mov	r1, r5
 801f040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f042:	f111 0f35 	cmn.w	r1, #53	; 0x35
 801f046:	da12      	bge.n	801f06e <scalbn+0xbe>
 801f048:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f04c:	429f      	cmp	r7, r3
 801f04e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 801f052:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 801f056:	dcdc      	bgt.n	801f012 <scalbn+0x62>
 801f058:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 801f05c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 801f060:	a309      	add	r3, pc, #36	; (adr r3, 801f088 <scalbn+0xd8>)
 801f062:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f066:	480f      	ldr	r0, [pc, #60]	; (801f0a4 <scalbn+0xf4>)
 801f068:	f041 011f 	orr.w	r1, r1, #31
 801f06c:	e7b8      	b.n	801efe0 <scalbn+0x30>
 801f06e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f072:	3136      	adds	r1, #54	; 0x36
 801f074:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f078:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 801f07c:	4620      	mov	r0, r4
 801f07e:	4b0a      	ldr	r3, [pc, #40]	; (801f0a8 <scalbn+0xf8>)
 801f080:	4629      	mov	r1, r5
 801f082:	2200      	movs	r2, #0
 801f084:	e7ac      	b.n	801efe0 <scalbn+0x30>
 801f086:	bf00      	nop
 801f088:	c2f8f359 	.word	0xc2f8f359
 801f08c:	01a56e1f 	.word	0x01a56e1f
 801f090:	8800759c 	.word	0x8800759c
 801f094:	7e37e43c 	.word	0x7e37e43c
 801f098:	43500000 	.word	0x43500000
 801f09c:	ffff3cb0 	.word	0xffff3cb0
 801f0a0:	8800759c 	.word	0x8800759c
 801f0a4:	c2f8f359 	.word	0xc2f8f359
 801f0a8:	3c900000 	.word	0x3c900000

0801f0ac <_init>:
 801f0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0ae:	bf00      	nop
 801f0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0b2:	bc08      	pop	{r3}
 801f0b4:	469e      	mov	lr, r3
 801f0b6:	4770      	bx	lr

0801f0b8 <_fini>:
 801f0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0ba:	bf00      	nop
 801f0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f0be:	bc08      	pop	{r3}
 801f0c0:	469e      	mov	lr, r3
 801f0c2:	4770      	bx	lr

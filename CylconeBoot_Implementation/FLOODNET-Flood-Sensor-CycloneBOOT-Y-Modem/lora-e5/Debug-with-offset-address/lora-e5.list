
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08008400  08008400  00008400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ecc  08008540  08008540  00008540  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001830  0801f410  0801f410  0001f410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020c40  08020c40  00030760  2**0
                  CONTENTS
  4 .ARM          00000008  08020c40  08020c40  00020c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020c48  08020c48  00030760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08020c48  08020c48  00020c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020c50  08020c50  00020c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e0  20000080  08020c54  00030080  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005158  20000760  08021334  00030760  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200058b8  08021334  000358b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030760  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003078a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003c363  00000000  00000000  000307cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008b46  00000000  00000000  0006cb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d68  00000000  00000000  00075678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000022b8  00000000  00000000  000783e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262f0  00000000  00000000  0007a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004588a  00000000  00000000  000a0988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6d9a  00000000  00000000  000e6212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000d434  00000000  00000000  001bcfac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c5  00000000  00000000  001ca3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008540 <__do_global_dtors_aux>:
 8008540:	b510      	push	{r4, lr}
 8008542:	4c05      	ldr	r4, [pc, #20]	; (8008558 <__do_global_dtors_aux+0x18>)
 8008544:	7823      	ldrb	r3, [r4, #0]
 8008546:	b933      	cbnz	r3, 8008556 <__do_global_dtors_aux+0x16>
 8008548:	4b04      	ldr	r3, [pc, #16]	; (800855c <__do_global_dtors_aux+0x1c>)
 800854a:	b113      	cbz	r3, 8008552 <__do_global_dtors_aux+0x12>
 800854c:	4804      	ldr	r0, [pc, #16]	; (8008560 <__do_global_dtors_aux+0x20>)
 800854e:	f3af 8000 	nop.w
 8008552:	2301      	movs	r3, #1
 8008554:	7023      	strb	r3, [r4, #0]
 8008556:	bd10      	pop	{r4, pc}
 8008558:	20000760 	.word	0x20000760
 800855c:	00000000 	.word	0x00000000
 8008560:	0801f3f4 	.word	0x0801f3f4

08008564 <frame_dummy>:
 8008564:	b508      	push	{r3, lr}
 8008566:	4b03      	ldr	r3, [pc, #12]	; (8008574 <frame_dummy+0x10>)
 8008568:	b11b      	cbz	r3, 8008572 <frame_dummy+0xe>
 800856a:	4903      	ldr	r1, [pc, #12]	; (8008578 <frame_dummy+0x14>)
 800856c:	4803      	ldr	r0, [pc, #12]	; (800857c <frame_dummy+0x18>)
 800856e:	f3af 8000 	nop.w
 8008572:	bd08      	pop	{r3, pc}
 8008574:	00000000 	.word	0x00000000
 8008578:	20000764 	.word	0x20000764
 800857c:	0801f3f4 	.word	0x0801f3f4

08008580 <memchr>:
 8008580:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008584:	2a10      	cmp	r2, #16
 8008586:	db2b      	blt.n	80085e0 <memchr+0x60>
 8008588:	f010 0f07 	tst.w	r0, #7
 800858c:	d008      	beq.n	80085a0 <memchr+0x20>
 800858e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008592:	3a01      	subs	r2, #1
 8008594:	428b      	cmp	r3, r1
 8008596:	d02d      	beq.n	80085f4 <memchr+0x74>
 8008598:	f010 0f07 	tst.w	r0, #7
 800859c:	b342      	cbz	r2, 80085f0 <memchr+0x70>
 800859e:	d1f6      	bne.n	800858e <memchr+0xe>
 80085a0:	b4f0      	push	{r4, r5, r6, r7}
 80085a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80085a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80085aa:	f022 0407 	bic.w	r4, r2, #7
 80085ae:	f07f 0700 	mvns.w	r7, #0
 80085b2:	2300      	movs	r3, #0
 80085b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80085b8:	3c08      	subs	r4, #8
 80085ba:	ea85 0501 	eor.w	r5, r5, r1
 80085be:	ea86 0601 	eor.w	r6, r6, r1
 80085c2:	fa85 f547 	uadd8	r5, r5, r7
 80085c6:	faa3 f587 	sel	r5, r3, r7
 80085ca:	fa86 f647 	uadd8	r6, r6, r7
 80085ce:	faa5 f687 	sel	r6, r5, r7
 80085d2:	b98e      	cbnz	r6, 80085f8 <memchr+0x78>
 80085d4:	d1ee      	bne.n	80085b4 <memchr+0x34>
 80085d6:	bcf0      	pop	{r4, r5, r6, r7}
 80085d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80085dc:	f002 0207 	and.w	r2, r2, #7
 80085e0:	b132      	cbz	r2, 80085f0 <memchr+0x70>
 80085e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80085e6:	3a01      	subs	r2, #1
 80085e8:	ea83 0301 	eor.w	r3, r3, r1
 80085ec:	b113      	cbz	r3, 80085f4 <memchr+0x74>
 80085ee:	d1f8      	bne.n	80085e2 <memchr+0x62>
 80085f0:	2000      	movs	r0, #0
 80085f2:	4770      	bx	lr
 80085f4:	3801      	subs	r0, #1
 80085f6:	4770      	bx	lr
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	bf06      	itte	eq
 80085fc:	4635      	moveq	r5, r6
 80085fe:	3803      	subeq	r0, #3
 8008600:	3807      	subne	r0, #7
 8008602:	f015 0f01 	tst.w	r5, #1
 8008606:	d107      	bne.n	8008618 <memchr+0x98>
 8008608:	3001      	adds	r0, #1
 800860a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800860e:	bf02      	ittt	eq
 8008610:	3001      	addeq	r0, #1
 8008612:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008616:	3001      	addeq	r0, #1
 8008618:	bcf0      	pop	{r4, r5, r6, r7}
 800861a:	3801      	subs	r0, #1
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop

08008620 <strlen>:
 8008620:	4603      	mov	r3, r0
 8008622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008626:	2a00      	cmp	r2, #0
 8008628:	d1fb      	bne.n	8008622 <strlen+0x2>
 800862a:	1a18      	subs	r0, r3, r0
 800862c:	3801      	subs	r0, #1
 800862e:	4770      	bx	lr

08008630 <__aeabi_drsub>:
 8008630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008634:	e002      	b.n	800863c <__adddf3>
 8008636:	bf00      	nop

08008638 <__aeabi_dsub>:
 8008638:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800863c <__adddf3>:
 800863c:	b530      	push	{r4, r5, lr}
 800863e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008642:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008646:	ea94 0f05 	teq	r4, r5
 800864a:	bf08      	it	eq
 800864c:	ea90 0f02 	teqeq	r0, r2
 8008650:	bf1f      	itttt	ne
 8008652:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008656:	ea55 0c02 	orrsne.w	ip, r5, r2
 800865a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800865e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008662:	f000 80e2 	beq.w	800882a <__adddf3+0x1ee>
 8008666:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800866a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800866e:	bfb8      	it	lt
 8008670:	426d      	neglt	r5, r5
 8008672:	dd0c      	ble.n	800868e <__adddf3+0x52>
 8008674:	442c      	add	r4, r5
 8008676:	ea80 0202 	eor.w	r2, r0, r2
 800867a:	ea81 0303 	eor.w	r3, r1, r3
 800867e:	ea82 0000 	eor.w	r0, r2, r0
 8008682:	ea83 0101 	eor.w	r1, r3, r1
 8008686:	ea80 0202 	eor.w	r2, r0, r2
 800868a:	ea81 0303 	eor.w	r3, r1, r3
 800868e:	2d36      	cmp	r5, #54	; 0x36
 8008690:	bf88      	it	hi
 8008692:	bd30      	pophi	{r4, r5, pc}
 8008694:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008698:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800869c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80086a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80086a4:	d002      	beq.n	80086ac <__adddf3+0x70>
 80086a6:	4240      	negs	r0, r0
 80086a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80086ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80086b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80086b8:	d002      	beq.n	80086c0 <__adddf3+0x84>
 80086ba:	4252      	negs	r2, r2
 80086bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80086c0:	ea94 0f05 	teq	r4, r5
 80086c4:	f000 80a7 	beq.w	8008816 <__adddf3+0x1da>
 80086c8:	f1a4 0401 	sub.w	r4, r4, #1
 80086cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80086d0:	db0d      	blt.n	80086ee <__adddf3+0xb2>
 80086d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80086d6:	fa22 f205 	lsr.w	r2, r2, r5
 80086da:	1880      	adds	r0, r0, r2
 80086dc:	f141 0100 	adc.w	r1, r1, #0
 80086e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80086e4:	1880      	adds	r0, r0, r2
 80086e6:	fa43 f305 	asr.w	r3, r3, r5
 80086ea:	4159      	adcs	r1, r3
 80086ec:	e00e      	b.n	800870c <__adddf3+0xd0>
 80086ee:	f1a5 0520 	sub.w	r5, r5, #32
 80086f2:	f10e 0e20 	add.w	lr, lr, #32
 80086f6:	2a01      	cmp	r2, #1
 80086f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80086fc:	bf28      	it	cs
 80086fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008702:	fa43 f305 	asr.w	r3, r3, r5
 8008706:	18c0      	adds	r0, r0, r3
 8008708:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800870c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008710:	d507      	bpl.n	8008722 <__adddf3+0xe6>
 8008712:	f04f 0e00 	mov.w	lr, #0
 8008716:	f1dc 0c00 	rsbs	ip, ip, #0
 800871a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800871e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008722:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008726:	d31b      	bcc.n	8008760 <__adddf3+0x124>
 8008728:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800872c:	d30c      	bcc.n	8008748 <__adddf3+0x10c>
 800872e:	0849      	lsrs	r1, r1, #1
 8008730:	ea5f 0030 	movs.w	r0, r0, rrx
 8008734:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008738:	f104 0401 	add.w	r4, r4, #1
 800873c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008740:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008744:	f080 809a 	bcs.w	800887c <__adddf3+0x240>
 8008748:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800874c:	bf08      	it	eq
 800874e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008752:	f150 0000 	adcs.w	r0, r0, #0
 8008756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800875a:	ea41 0105 	orr.w	r1, r1, r5
 800875e:	bd30      	pop	{r4, r5, pc}
 8008760:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008764:	4140      	adcs	r0, r0
 8008766:	eb41 0101 	adc.w	r1, r1, r1
 800876a:	3c01      	subs	r4, #1
 800876c:	bf28      	it	cs
 800876e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008772:	d2e9      	bcs.n	8008748 <__adddf3+0x10c>
 8008774:	f091 0f00 	teq	r1, #0
 8008778:	bf04      	itt	eq
 800877a:	4601      	moveq	r1, r0
 800877c:	2000      	moveq	r0, #0
 800877e:	fab1 f381 	clz	r3, r1
 8008782:	bf08      	it	eq
 8008784:	3320      	addeq	r3, #32
 8008786:	f1a3 030b 	sub.w	r3, r3, #11
 800878a:	f1b3 0220 	subs.w	r2, r3, #32
 800878e:	da0c      	bge.n	80087aa <__adddf3+0x16e>
 8008790:	320c      	adds	r2, #12
 8008792:	dd08      	ble.n	80087a6 <__adddf3+0x16a>
 8008794:	f102 0c14 	add.w	ip, r2, #20
 8008798:	f1c2 020c 	rsb	r2, r2, #12
 800879c:	fa01 f00c 	lsl.w	r0, r1, ip
 80087a0:	fa21 f102 	lsr.w	r1, r1, r2
 80087a4:	e00c      	b.n	80087c0 <__adddf3+0x184>
 80087a6:	f102 0214 	add.w	r2, r2, #20
 80087aa:	bfd8      	it	le
 80087ac:	f1c2 0c20 	rsble	ip, r2, #32
 80087b0:	fa01 f102 	lsl.w	r1, r1, r2
 80087b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80087b8:	bfdc      	itt	le
 80087ba:	ea41 010c 	orrle.w	r1, r1, ip
 80087be:	4090      	lslle	r0, r2
 80087c0:	1ae4      	subs	r4, r4, r3
 80087c2:	bfa2      	ittt	ge
 80087c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80087c8:	4329      	orrge	r1, r5
 80087ca:	bd30      	popge	{r4, r5, pc}
 80087cc:	ea6f 0404 	mvn.w	r4, r4
 80087d0:	3c1f      	subs	r4, #31
 80087d2:	da1c      	bge.n	800880e <__adddf3+0x1d2>
 80087d4:	340c      	adds	r4, #12
 80087d6:	dc0e      	bgt.n	80087f6 <__adddf3+0x1ba>
 80087d8:	f104 0414 	add.w	r4, r4, #20
 80087dc:	f1c4 0220 	rsb	r2, r4, #32
 80087e0:	fa20 f004 	lsr.w	r0, r0, r4
 80087e4:	fa01 f302 	lsl.w	r3, r1, r2
 80087e8:	ea40 0003 	orr.w	r0, r0, r3
 80087ec:	fa21 f304 	lsr.w	r3, r1, r4
 80087f0:	ea45 0103 	orr.w	r1, r5, r3
 80087f4:	bd30      	pop	{r4, r5, pc}
 80087f6:	f1c4 040c 	rsb	r4, r4, #12
 80087fa:	f1c4 0220 	rsb	r2, r4, #32
 80087fe:	fa20 f002 	lsr.w	r0, r0, r2
 8008802:	fa01 f304 	lsl.w	r3, r1, r4
 8008806:	ea40 0003 	orr.w	r0, r0, r3
 800880a:	4629      	mov	r1, r5
 800880c:	bd30      	pop	{r4, r5, pc}
 800880e:	fa21 f004 	lsr.w	r0, r1, r4
 8008812:	4629      	mov	r1, r5
 8008814:	bd30      	pop	{r4, r5, pc}
 8008816:	f094 0f00 	teq	r4, #0
 800881a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800881e:	bf06      	itte	eq
 8008820:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008824:	3401      	addeq	r4, #1
 8008826:	3d01      	subne	r5, #1
 8008828:	e74e      	b.n	80086c8 <__adddf3+0x8c>
 800882a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800882e:	bf18      	it	ne
 8008830:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008834:	d029      	beq.n	800888a <__adddf3+0x24e>
 8008836:	ea94 0f05 	teq	r4, r5
 800883a:	bf08      	it	eq
 800883c:	ea90 0f02 	teqeq	r0, r2
 8008840:	d005      	beq.n	800884e <__adddf3+0x212>
 8008842:	ea54 0c00 	orrs.w	ip, r4, r0
 8008846:	bf04      	itt	eq
 8008848:	4619      	moveq	r1, r3
 800884a:	4610      	moveq	r0, r2
 800884c:	bd30      	pop	{r4, r5, pc}
 800884e:	ea91 0f03 	teq	r1, r3
 8008852:	bf1e      	ittt	ne
 8008854:	2100      	movne	r1, #0
 8008856:	2000      	movne	r0, #0
 8008858:	bd30      	popne	{r4, r5, pc}
 800885a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800885e:	d105      	bne.n	800886c <__adddf3+0x230>
 8008860:	0040      	lsls	r0, r0, #1
 8008862:	4149      	adcs	r1, r1
 8008864:	bf28      	it	cs
 8008866:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800886a:	bd30      	pop	{r4, r5, pc}
 800886c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008870:	bf3c      	itt	cc
 8008872:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008876:	bd30      	popcc	{r4, r5, pc}
 8008878:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800887c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008884:	f04f 0000 	mov.w	r0, #0
 8008888:	bd30      	pop	{r4, r5, pc}
 800888a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800888e:	bf1a      	itte	ne
 8008890:	4619      	movne	r1, r3
 8008892:	4610      	movne	r0, r2
 8008894:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008898:	bf1c      	itt	ne
 800889a:	460b      	movne	r3, r1
 800889c:	4602      	movne	r2, r0
 800889e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80088a2:	bf06      	itte	eq
 80088a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80088a8:	ea91 0f03 	teqeq	r1, r3
 80088ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80088b0:	bd30      	pop	{r4, r5, pc}
 80088b2:	bf00      	nop

080088b4 <__aeabi_ui2d>:
 80088b4:	f090 0f00 	teq	r0, #0
 80088b8:	bf04      	itt	eq
 80088ba:	2100      	moveq	r1, #0
 80088bc:	4770      	bxeq	lr
 80088be:	b530      	push	{r4, r5, lr}
 80088c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80088c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80088c8:	f04f 0500 	mov.w	r5, #0
 80088cc:	f04f 0100 	mov.w	r1, #0
 80088d0:	e750      	b.n	8008774 <__adddf3+0x138>
 80088d2:	bf00      	nop

080088d4 <__aeabi_i2d>:
 80088d4:	f090 0f00 	teq	r0, #0
 80088d8:	bf04      	itt	eq
 80088da:	2100      	moveq	r1, #0
 80088dc:	4770      	bxeq	lr
 80088de:	b530      	push	{r4, r5, lr}
 80088e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80088e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80088e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80088ec:	bf48      	it	mi
 80088ee:	4240      	negmi	r0, r0
 80088f0:	f04f 0100 	mov.w	r1, #0
 80088f4:	e73e      	b.n	8008774 <__adddf3+0x138>
 80088f6:	bf00      	nop

080088f8 <__aeabi_f2d>:
 80088f8:	0042      	lsls	r2, r0, #1
 80088fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80088fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8008902:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008906:	bf1f      	itttt	ne
 8008908:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800890c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008910:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008914:	4770      	bxne	lr
 8008916:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800891a:	bf08      	it	eq
 800891c:	4770      	bxeq	lr
 800891e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008922:	bf04      	itt	eq
 8008924:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008928:	4770      	bxeq	lr
 800892a:	b530      	push	{r4, r5, lr}
 800892c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008930:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008934:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008938:	e71c      	b.n	8008774 <__adddf3+0x138>
 800893a:	bf00      	nop

0800893c <__aeabi_ul2d>:
 800893c:	ea50 0201 	orrs.w	r2, r0, r1
 8008940:	bf08      	it	eq
 8008942:	4770      	bxeq	lr
 8008944:	b530      	push	{r4, r5, lr}
 8008946:	f04f 0500 	mov.w	r5, #0
 800894a:	e00a      	b.n	8008962 <__aeabi_l2d+0x16>

0800894c <__aeabi_l2d>:
 800894c:	ea50 0201 	orrs.w	r2, r0, r1
 8008950:	bf08      	it	eq
 8008952:	4770      	bxeq	lr
 8008954:	b530      	push	{r4, r5, lr}
 8008956:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800895a:	d502      	bpl.n	8008962 <__aeabi_l2d+0x16>
 800895c:	4240      	negs	r0, r0
 800895e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008962:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008966:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800896a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800896e:	f43f aed8 	beq.w	8008722 <__adddf3+0xe6>
 8008972:	f04f 0203 	mov.w	r2, #3
 8008976:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800897a:	bf18      	it	ne
 800897c:	3203      	addne	r2, #3
 800897e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008982:	bf18      	it	ne
 8008984:	3203      	addne	r2, #3
 8008986:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800898a:	f1c2 0320 	rsb	r3, r2, #32
 800898e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008992:	fa20 f002 	lsr.w	r0, r0, r2
 8008996:	fa01 fe03 	lsl.w	lr, r1, r3
 800899a:	ea40 000e 	orr.w	r0, r0, lr
 800899e:	fa21 f102 	lsr.w	r1, r1, r2
 80089a2:	4414      	add	r4, r2
 80089a4:	e6bd      	b.n	8008722 <__adddf3+0xe6>
 80089a6:	bf00      	nop

080089a8 <__aeabi_dmul>:
 80089a8:	b570      	push	{r4, r5, r6, lr}
 80089aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80089ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80089b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80089b6:	bf1d      	ittte	ne
 80089b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80089bc:	ea94 0f0c 	teqne	r4, ip
 80089c0:	ea95 0f0c 	teqne	r5, ip
 80089c4:	f000 f8de 	bleq	8008b84 <__aeabi_dmul+0x1dc>
 80089c8:	442c      	add	r4, r5
 80089ca:	ea81 0603 	eor.w	r6, r1, r3
 80089ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80089d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80089d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80089da:	bf18      	it	ne
 80089dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80089e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089e8:	d038      	beq.n	8008a5c <__aeabi_dmul+0xb4>
 80089ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80089ee:	f04f 0500 	mov.w	r5, #0
 80089f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80089f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80089fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80089fe:	f04f 0600 	mov.w	r6, #0
 8008a02:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008a06:	f09c 0f00 	teq	ip, #0
 8008a0a:	bf18      	it	ne
 8008a0c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008a10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008a14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008a18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008a1c:	d204      	bcs.n	8008a28 <__aeabi_dmul+0x80>
 8008a1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008a22:	416d      	adcs	r5, r5
 8008a24:	eb46 0606 	adc.w	r6, r6, r6
 8008a28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008a2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008a30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008a34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008a38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008a3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008a40:	bf88      	it	hi
 8008a42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008a46:	d81e      	bhi.n	8008a86 <__aeabi_dmul+0xde>
 8008a48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008a4c:	bf08      	it	eq
 8008a4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008a52:	f150 0000 	adcs.w	r0, r0, #0
 8008a56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008a60:	ea46 0101 	orr.w	r1, r6, r1
 8008a64:	ea40 0002 	orr.w	r0, r0, r2
 8008a68:	ea81 0103 	eor.w	r1, r1, r3
 8008a6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008a70:	bfc2      	ittt	gt
 8008a72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a7a:	bd70      	popgt	{r4, r5, r6, pc}
 8008a7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a80:	f04f 0e00 	mov.w	lr, #0
 8008a84:	3c01      	subs	r4, #1
 8008a86:	f300 80ab 	bgt.w	8008be0 <__aeabi_dmul+0x238>
 8008a8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008a8e:	bfde      	ittt	le
 8008a90:	2000      	movle	r0, #0
 8008a92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008a96:	bd70      	pople	{r4, r5, r6, pc}
 8008a98:	f1c4 0400 	rsb	r4, r4, #0
 8008a9c:	3c20      	subs	r4, #32
 8008a9e:	da35      	bge.n	8008b0c <__aeabi_dmul+0x164>
 8008aa0:	340c      	adds	r4, #12
 8008aa2:	dc1b      	bgt.n	8008adc <__aeabi_dmul+0x134>
 8008aa4:	f104 0414 	add.w	r4, r4, #20
 8008aa8:	f1c4 0520 	rsb	r5, r4, #32
 8008aac:	fa00 f305 	lsl.w	r3, r0, r5
 8008ab0:	fa20 f004 	lsr.w	r0, r0, r4
 8008ab4:	fa01 f205 	lsl.w	r2, r1, r5
 8008ab8:	ea40 0002 	orr.w	r0, r0, r2
 8008abc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008ac0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ac4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008ac8:	fa21 f604 	lsr.w	r6, r1, r4
 8008acc:	eb42 0106 	adc.w	r1, r2, r6
 8008ad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008ad4:	bf08      	it	eq
 8008ad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	f1c4 040c 	rsb	r4, r4, #12
 8008ae0:	f1c4 0520 	rsb	r5, r4, #32
 8008ae4:	fa00 f304 	lsl.w	r3, r0, r4
 8008ae8:	fa20 f005 	lsr.w	r0, r0, r5
 8008aec:	fa01 f204 	lsl.w	r2, r1, r4
 8008af0:	ea40 0002 	orr.w	r0, r0, r2
 8008af4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008af8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008afc:	f141 0100 	adc.w	r1, r1, #0
 8008b00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008b04:	bf08      	it	eq
 8008b06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	f1c4 0520 	rsb	r5, r4, #32
 8008b10:	fa00 f205 	lsl.w	r2, r0, r5
 8008b14:	ea4e 0e02 	orr.w	lr, lr, r2
 8008b18:	fa20 f304 	lsr.w	r3, r0, r4
 8008b1c:	fa01 f205 	lsl.w	r2, r1, r5
 8008b20:	ea43 0302 	orr.w	r3, r3, r2
 8008b24:	fa21 f004 	lsr.w	r0, r1, r4
 8008b28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008b2c:	fa21 f204 	lsr.w	r2, r1, r4
 8008b30:	ea20 0002 	bic.w	r0, r0, r2
 8008b34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008b3c:	bf08      	it	eq
 8008b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008b42:	bd70      	pop	{r4, r5, r6, pc}
 8008b44:	f094 0f00 	teq	r4, #0
 8008b48:	d10f      	bne.n	8008b6a <__aeabi_dmul+0x1c2>
 8008b4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008b4e:	0040      	lsls	r0, r0, #1
 8008b50:	eb41 0101 	adc.w	r1, r1, r1
 8008b54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008b58:	bf08      	it	eq
 8008b5a:	3c01      	subeq	r4, #1
 8008b5c:	d0f7      	beq.n	8008b4e <__aeabi_dmul+0x1a6>
 8008b5e:	ea41 0106 	orr.w	r1, r1, r6
 8008b62:	f095 0f00 	teq	r5, #0
 8008b66:	bf18      	it	ne
 8008b68:	4770      	bxne	lr
 8008b6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008b6e:	0052      	lsls	r2, r2, #1
 8008b70:	eb43 0303 	adc.w	r3, r3, r3
 8008b74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008b78:	bf08      	it	eq
 8008b7a:	3d01      	subeq	r5, #1
 8008b7c:	d0f7      	beq.n	8008b6e <__aeabi_dmul+0x1c6>
 8008b7e:	ea43 0306 	orr.w	r3, r3, r6
 8008b82:	4770      	bx	lr
 8008b84:	ea94 0f0c 	teq	r4, ip
 8008b88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008b8c:	bf18      	it	ne
 8008b8e:	ea95 0f0c 	teqne	r5, ip
 8008b92:	d00c      	beq.n	8008bae <__aeabi_dmul+0x206>
 8008b94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008b98:	bf18      	it	ne
 8008b9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008b9e:	d1d1      	bne.n	8008b44 <__aeabi_dmul+0x19c>
 8008ba0:	ea81 0103 	eor.w	r1, r1, r3
 8008ba4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008ba8:	f04f 0000 	mov.w	r0, #0
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008bb2:	bf06      	itte	eq
 8008bb4:	4610      	moveq	r0, r2
 8008bb6:	4619      	moveq	r1, r3
 8008bb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008bbc:	d019      	beq.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bbe:	ea94 0f0c 	teq	r4, ip
 8008bc2:	d102      	bne.n	8008bca <__aeabi_dmul+0x222>
 8008bc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008bc8:	d113      	bne.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bca:	ea95 0f0c 	teq	r5, ip
 8008bce:	d105      	bne.n	8008bdc <__aeabi_dmul+0x234>
 8008bd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008bd4:	bf1c      	itt	ne
 8008bd6:	4610      	movne	r0, r2
 8008bd8:	4619      	movne	r1, r3
 8008bda:	d10a      	bne.n	8008bf2 <__aeabi_dmul+0x24a>
 8008bdc:	ea81 0103 	eor.w	r1, r1, r3
 8008be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008be4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008be8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bec:	f04f 0000 	mov.w	r0, #0
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
 8008bf2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008bf6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}

08008bfc <__aeabi_ddiv>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008c02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008c06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008c0a:	bf1d      	ittte	ne
 8008c0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008c10:	ea94 0f0c 	teqne	r4, ip
 8008c14:	ea95 0f0c 	teqne	r5, ip
 8008c18:	f000 f8a7 	bleq	8008d6a <__aeabi_ddiv+0x16e>
 8008c1c:	eba4 0405 	sub.w	r4, r4, r5
 8008c20:	ea81 0e03 	eor.w	lr, r1, r3
 8008c24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008c28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008c2c:	f000 8088 	beq.w	8008d40 <__aeabi_ddiv+0x144>
 8008c30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008c34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008c38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008c3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008c40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008c44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008c48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008c4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008c50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008c54:	429d      	cmp	r5, r3
 8008c56:	bf08      	it	eq
 8008c58:	4296      	cmpeq	r6, r2
 8008c5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008c5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008c62:	d202      	bcs.n	8008c6a <__aeabi_ddiv+0x6e>
 8008c64:	085b      	lsrs	r3, r3, #1
 8008c66:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c6a:	1ab6      	subs	r6, r6, r2
 8008c6c:	eb65 0503 	sbc.w	r5, r5, r3
 8008c70:	085b      	lsrs	r3, r3, #1
 8008c72:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008c7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008c7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c86:	bf22      	ittt	cs
 8008c88:	1ab6      	subcs	r6, r6, r2
 8008c8a:	4675      	movcs	r5, lr
 8008c8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	ea4f 0232 	mov.w	r2, r2, rrx
 8008c96:	ebb6 0e02 	subs.w	lr, r6, r2
 8008c9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008c9e:	bf22      	ittt	cs
 8008ca0:	1ab6      	subcs	r6, r6, r2
 8008ca2:	4675      	movcs	r5, lr
 8008ca4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	ea4f 0232 	mov.w	r2, r2, rrx
 8008cae:	ebb6 0e02 	subs.w	lr, r6, r2
 8008cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008cb6:	bf22      	ittt	cs
 8008cb8:	1ab6      	subcs	r6, r6, r2
 8008cba:	4675      	movcs	r5, lr
 8008cbc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8008cc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8008cca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008cce:	bf22      	ittt	cs
 8008cd0:	1ab6      	subcs	r6, r6, r2
 8008cd2:	4675      	movcs	r5, lr
 8008cd4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008cd8:	ea55 0e06 	orrs.w	lr, r5, r6
 8008cdc:	d018      	beq.n	8008d10 <__aeabi_ddiv+0x114>
 8008cde:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008ce2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008ce6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008cea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008cee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008cf2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008cf6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008cfa:	d1c0      	bne.n	8008c7e <__aeabi_ddiv+0x82>
 8008cfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d00:	d10b      	bne.n	8008d1a <__aeabi_ddiv+0x11e>
 8008d02:	ea41 0100 	orr.w	r1, r1, r0
 8008d06:	f04f 0000 	mov.w	r0, #0
 8008d0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008d0e:	e7b6      	b.n	8008c7e <__aeabi_ddiv+0x82>
 8008d10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008d14:	bf04      	itt	eq
 8008d16:	4301      	orreq	r1, r0
 8008d18:	2000      	moveq	r0, #0
 8008d1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008d1e:	bf88      	it	hi
 8008d20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008d24:	f63f aeaf 	bhi.w	8008a86 <__aeabi_dmul+0xde>
 8008d28:	ebb5 0c03 	subs.w	ip, r5, r3
 8008d2c:	bf04      	itt	eq
 8008d2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008d32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008d36:	f150 0000 	adcs.w	r0, r0, #0
 8008d3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008d44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008d48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008d4c:	bfc2      	ittt	gt
 8008d4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008d52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008d56:	bd70      	popgt	{r4, r5, r6, pc}
 8008d58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008d5c:	f04f 0e00 	mov.w	lr, #0
 8008d60:	3c01      	subs	r4, #1
 8008d62:	e690      	b.n	8008a86 <__aeabi_dmul+0xde>
 8008d64:	ea45 0e06 	orr.w	lr, r5, r6
 8008d68:	e68d      	b.n	8008a86 <__aeabi_dmul+0xde>
 8008d6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008d6e:	ea94 0f0c 	teq	r4, ip
 8008d72:	bf08      	it	eq
 8008d74:	ea95 0f0c 	teqeq	r5, ip
 8008d78:	f43f af3b 	beq.w	8008bf2 <__aeabi_dmul+0x24a>
 8008d7c:	ea94 0f0c 	teq	r4, ip
 8008d80:	d10a      	bne.n	8008d98 <__aeabi_ddiv+0x19c>
 8008d82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008d86:	f47f af34 	bne.w	8008bf2 <__aeabi_dmul+0x24a>
 8008d8a:	ea95 0f0c 	teq	r5, ip
 8008d8e:	f47f af25 	bne.w	8008bdc <__aeabi_dmul+0x234>
 8008d92:	4610      	mov	r0, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	e72c      	b.n	8008bf2 <__aeabi_dmul+0x24a>
 8008d98:	ea95 0f0c 	teq	r5, ip
 8008d9c:	d106      	bne.n	8008dac <__aeabi_ddiv+0x1b0>
 8008d9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008da2:	f43f aefd 	beq.w	8008ba0 <__aeabi_dmul+0x1f8>
 8008da6:	4610      	mov	r0, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	e722      	b.n	8008bf2 <__aeabi_dmul+0x24a>
 8008dac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008db0:	bf18      	it	ne
 8008db2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008db6:	f47f aec5 	bne.w	8008b44 <__aeabi_dmul+0x19c>
 8008dba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008dbe:	f47f af0d 	bne.w	8008bdc <__aeabi_dmul+0x234>
 8008dc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008dc6:	f47f aeeb 	bne.w	8008ba0 <__aeabi_dmul+0x1f8>
 8008dca:	e712      	b.n	8008bf2 <__aeabi_dmul+0x24a>

08008dcc <__gedf2>:
 8008dcc:	f04f 3cff 	mov.w	ip, #4294967295
 8008dd0:	e006      	b.n	8008de0 <__cmpdf2+0x4>
 8008dd2:	bf00      	nop

08008dd4 <__ledf2>:
 8008dd4:	f04f 0c01 	mov.w	ip, #1
 8008dd8:	e002      	b.n	8008de0 <__cmpdf2+0x4>
 8008dda:	bf00      	nop

08008ddc <__cmpdf2>:
 8008ddc:	f04f 0c01 	mov.w	ip, #1
 8008de0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008de4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008de8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008dec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008df0:	bf18      	it	ne
 8008df2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008df6:	d01b      	beq.n	8008e30 <__cmpdf2+0x54>
 8008df8:	b001      	add	sp, #4
 8008dfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008dfe:	bf0c      	ite	eq
 8008e00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008e04:	ea91 0f03 	teqne	r1, r3
 8008e08:	bf02      	ittt	eq
 8008e0a:	ea90 0f02 	teqeq	r0, r2
 8008e0e:	2000      	moveq	r0, #0
 8008e10:	4770      	bxeq	lr
 8008e12:	f110 0f00 	cmn.w	r0, #0
 8008e16:	ea91 0f03 	teq	r1, r3
 8008e1a:	bf58      	it	pl
 8008e1c:	4299      	cmppl	r1, r3
 8008e1e:	bf08      	it	eq
 8008e20:	4290      	cmpeq	r0, r2
 8008e22:	bf2c      	ite	cs
 8008e24:	17d8      	asrcs	r0, r3, #31
 8008e26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008e2a:	f040 0001 	orr.w	r0, r0, #1
 8008e2e:	4770      	bx	lr
 8008e30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008e34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008e38:	d102      	bne.n	8008e40 <__cmpdf2+0x64>
 8008e3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008e3e:	d107      	bne.n	8008e50 <__cmpdf2+0x74>
 8008e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008e48:	d1d6      	bne.n	8008df8 <__cmpdf2+0x1c>
 8008e4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008e4e:	d0d3      	beq.n	8008df8 <__cmpdf2+0x1c>
 8008e50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop

08008e58 <__aeabi_cdrcmple>:
 8008e58:	4684      	mov	ip, r0
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4662      	mov	r2, ip
 8008e5e:	468c      	mov	ip, r1
 8008e60:	4619      	mov	r1, r3
 8008e62:	4663      	mov	r3, ip
 8008e64:	e000      	b.n	8008e68 <__aeabi_cdcmpeq>
 8008e66:	bf00      	nop

08008e68 <__aeabi_cdcmpeq>:
 8008e68:	b501      	push	{r0, lr}
 8008e6a:	f7ff ffb7 	bl	8008ddc <__cmpdf2>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	bf48      	it	mi
 8008e72:	f110 0f00 	cmnmi.w	r0, #0
 8008e76:	bd01      	pop	{r0, pc}

08008e78 <__aeabi_dcmpeq>:
 8008e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e7c:	f7ff fff4 	bl	8008e68 <__aeabi_cdcmpeq>
 8008e80:	bf0c      	ite	eq
 8008e82:	2001      	moveq	r0, #1
 8008e84:	2000      	movne	r0, #0
 8008e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e8a:	bf00      	nop

08008e8c <__aeabi_dcmplt>:
 8008e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008e90:	f7ff ffea 	bl	8008e68 <__aeabi_cdcmpeq>
 8008e94:	bf34      	ite	cc
 8008e96:	2001      	movcc	r0, #1
 8008e98:	2000      	movcs	r0, #0
 8008e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008e9e:	bf00      	nop

08008ea0 <__aeabi_dcmple>:
 8008ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ea4:	f7ff ffe0 	bl	8008e68 <__aeabi_cdcmpeq>
 8008ea8:	bf94      	ite	ls
 8008eaa:	2001      	movls	r0, #1
 8008eac:	2000      	movhi	r0, #0
 8008eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8008eb2:	bf00      	nop

08008eb4 <__aeabi_dcmpge>:
 8008eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008eb8:	f7ff ffce 	bl	8008e58 <__aeabi_cdrcmple>
 8008ebc:	bf94      	ite	ls
 8008ebe:	2001      	movls	r0, #1
 8008ec0:	2000      	movhi	r0, #0
 8008ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008ec6:	bf00      	nop

08008ec8 <__aeabi_dcmpgt>:
 8008ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ecc:	f7ff ffc4 	bl	8008e58 <__aeabi_cdrcmple>
 8008ed0:	bf34      	ite	cc
 8008ed2:	2001      	movcc	r0, #1
 8008ed4:	2000      	movcs	r0, #0
 8008ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008eda:	bf00      	nop

08008edc <__aeabi_dcmpun>:
 8008edc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ee0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ee4:	d102      	bne.n	8008eec <__aeabi_dcmpun+0x10>
 8008ee6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008eea:	d10a      	bne.n	8008f02 <__aeabi_dcmpun+0x26>
 8008eec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008ef0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008ef4:	d102      	bne.n	8008efc <__aeabi_dcmpun+0x20>
 8008ef6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008efa:	d102      	bne.n	8008f02 <__aeabi_dcmpun+0x26>
 8008efc:	f04f 0000 	mov.w	r0, #0
 8008f00:	4770      	bx	lr
 8008f02:	f04f 0001 	mov.w	r0, #1
 8008f06:	4770      	bx	lr

08008f08 <__aeabi_d2iz>:
 8008f08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008f0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008f10:	d215      	bcs.n	8008f3e <__aeabi_d2iz+0x36>
 8008f12:	d511      	bpl.n	8008f38 <__aeabi_d2iz+0x30>
 8008f14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008f18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008f1c:	d912      	bls.n	8008f44 <__aeabi_d2iz+0x3c>
 8008f1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008f2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008f2e:	fa23 f002 	lsr.w	r0, r3, r2
 8008f32:	bf18      	it	ne
 8008f34:	4240      	negne	r0, r0
 8008f36:	4770      	bx	lr
 8008f38:	f04f 0000 	mov.w	r0, #0
 8008f3c:	4770      	bx	lr
 8008f3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008f42:	d105      	bne.n	8008f50 <__aeabi_d2iz+0x48>
 8008f44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008f48:	bf08      	it	eq
 8008f4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008f4e:	4770      	bx	lr
 8008f50:	f04f 0000 	mov.w	r0, #0
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop

08008f58 <__aeabi_d2uiz>:
 8008f58:	004a      	lsls	r2, r1, #1
 8008f5a:	d211      	bcs.n	8008f80 <__aeabi_d2uiz+0x28>
 8008f5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008f60:	d211      	bcs.n	8008f86 <__aeabi_d2uiz+0x2e>
 8008f62:	d50d      	bpl.n	8008f80 <__aeabi_d2uiz+0x28>
 8008f64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008f68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008f6c:	d40e      	bmi.n	8008f8c <__aeabi_d2uiz+0x34>
 8008f6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008f7a:	fa23 f002 	lsr.w	r0, r3, r2
 8008f7e:	4770      	bx	lr
 8008f80:	f04f 0000 	mov.w	r0, #0
 8008f84:	4770      	bx	lr
 8008f86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008f8a:	d102      	bne.n	8008f92 <__aeabi_d2uiz+0x3a>
 8008f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f90:	4770      	bx	lr
 8008f92:	f04f 0000 	mov.w	r0, #0
 8008f96:	4770      	bx	lr

08008f98 <__aeabi_frsub>:
 8008f98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8008f9c:	e002      	b.n	8008fa4 <__addsf3>
 8008f9e:	bf00      	nop

08008fa0 <__aeabi_fsub>:
 8008fa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08008fa4 <__addsf3>:
 8008fa4:	0042      	lsls	r2, r0, #1
 8008fa6:	bf1f      	itttt	ne
 8008fa8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8008fac:	ea92 0f03 	teqne	r2, r3
 8008fb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8008fb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008fb8:	d06a      	beq.n	8009090 <__addsf3+0xec>
 8008fba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008fbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8008fc2:	bfc1      	itttt	gt
 8008fc4:	18d2      	addgt	r2, r2, r3
 8008fc6:	4041      	eorgt	r1, r0
 8008fc8:	4048      	eorgt	r0, r1
 8008fca:	4041      	eorgt	r1, r0
 8008fcc:	bfb8      	it	lt
 8008fce:	425b      	neglt	r3, r3
 8008fd0:	2b19      	cmp	r3, #25
 8008fd2:	bf88      	it	hi
 8008fd4:	4770      	bxhi	lr
 8008fd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8008fda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008fde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008fe2:	bf18      	it	ne
 8008fe4:	4240      	negne	r0, r0
 8008fe6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008fea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008fee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8008ff2:	bf18      	it	ne
 8008ff4:	4249      	negne	r1, r1
 8008ff6:	ea92 0f03 	teq	r2, r3
 8008ffa:	d03f      	beq.n	800907c <__addsf3+0xd8>
 8008ffc:	f1a2 0201 	sub.w	r2, r2, #1
 8009000:	fa41 fc03 	asr.w	ip, r1, r3
 8009004:	eb10 000c 	adds.w	r0, r0, ip
 8009008:	f1c3 0320 	rsb	r3, r3, #32
 800900c:	fa01 f103 	lsl.w	r1, r1, r3
 8009010:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8009014:	d502      	bpl.n	800901c <__addsf3+0x78>
 8009016:	4249      	negs	r1, r1
 8009018:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800901c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8009020:	d313      	bcc.n	800904a <__addsf3+0xa6>
 8009022:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8009026:	d306      	bcc.n	8009036 <__addsf3+0x92>
 8009028:	0840      	lsrs	r0, r0, #1
 800902a:	ea4f 0131 	mov.w	r1, r1, rrx
 800902e:	f102 0201 	add.w	r2, r2, #1
 8009032:	2afe      	cmp	r2, #254	; 0xfe
 8009034:	d251      	bcs.n	80090da <__addsf3+0x136>
 8009036:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800903a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800903e:	bf08      	it	eq
 8009040:	f020 0001 	biceq.w	r0, r0, #1
 8009044:	ea40 0003 	orr.w	r0, r0, r3
 8009048:	4770      	bx	lr
 800904a:	0049      	lsls	r1, r1, #1
 800904c:	eb40 0000 	adc.w	r0, r0, r0
 8009050:	3a01      	subs	r2, #1
 8009052:	bf28      	it	cs
 8009054:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8009058:	d2ed      	bcs.n	8009036 <__addsf3+0x92>
 800905a:	fab0 fc80 	clz	ip, r0
 800905e:	f1ac 0c08 	sub.w	ip, ip, #8
 8009062:	ebb2 020c 	subs.w	r2, r2, ip
 8009066:	fa00 f00c 	lsl.w	r0, r0, ip
 800906a:	bfaa      	itet	ge
 800906c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8009070:	4252      	neglt	r2, r2
 8009072:	4318      	orrge	r0, r3
 8009074:	bfbc      	itt	lt
 8009076:	40d0      	lsrlt	r0, r2
 8009078:	4318      	orrlt	r0, r3
 800907a:	4770      	bx	lr
 800907c:	f092 0f00 	teq	r2, #0
 8009080:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8009084:	bf06      	itte	eq
 8009086:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800908a:	3201      	addeq	r2, #1
 800908c:	3b01      	subne	r3, #1
 800908e:	e7b5      	b.n	8008ffc <__addsf3+0x58>
 8009090:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8009094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8009098:	bf18      	it	ne
 800909a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800909e:	d021      	beq.n	80090e4 <__addsf3+0x140>
 80090a0:	ea92 0f03 	teq	r2, r3
 80090a4:	d004      	beq.n	80090b0 <__addsf3+0x10c>
 80090a6:	f092 0f00 	teq	r2, #0
 80090aa:	bf08      	it	eq
 80090ac:	4608      	moveq	r0, r1
 80090ae:	4770      	bx	lr
 80090b0:	ea90 0f01 	teq	r0, r1
 80090b4:	bf1c      	itt	ne
 80090b6:	2000      	movne	r0, #0
 80090b8:	4770      	bxne	lr
 80090ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80090be:	d104      	bne.n	80090ca <__addsf3+0x126>
 80090c0:	0040      	lsls	r0, r0, #1
 80090c2:	bf28      	it	cs
 80090c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80090c8:	4770      	bx	lr
 80090ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80090ce:	bf3c      	itt	cc
 80090d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80090d4:	4770      	bxcc	lr
 80090d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80090da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80090de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80090e2:	4770      	bx	lr
 80090e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80090e8:	bf16      	itet	ne
 80090ea:	4608      	movne	r0, r1
 80090ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80090f0:	4601      	movne	r1, r0
 80090f2:	0242      	lsls	r2, r0, #9
 80090f4:	bf06      	itte	eq
 80090f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80090fa:	ea90 0f01 	teqeq	r0, r1
 80090fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8009102:	4770      	bx	lr

08009104 <__aeabi_ui2f>:
 8009104:	f04f 0300 	mov.w	r3, #0
 8009108:	e004      	b.n	8009114 <__aeabi_i2f+0x8>
 800910a:	bf00      	nop

0800910c <__aeabi_i2f>:
 800910c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8009110:	bf48      	it	mi
 8009112:	4240      	negmi	r0, r0
 8009114:	ea5f 0c00 	movs.w	ip, r0
 8009118:	bf08      	it	eq
 800911a:	4770      	bxeq	lr
 800911c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8009120:	4601      	mov	r1, r0
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	e01c      	b.n	8009162 <__aeabi_l2f+0x2a>

08009128 <__aeabi_ul2f>:
 8009128:	ea50 0201 	orrs.w	r2, r0, r1
 800912c:	bf08      	it	eq
 800912e:	4770      	bxeq	lr
 8009130:	f04f 0300 	mov.w	r3, #0
 8009134:	e00a      	b.n	800914c <__aeabi_l2f+0x14>
 8009136:	bf00      	nop

08009138 <__aeabi_l2f>:
 8009138:	ea50 0201 	orrs.w	r2, r0, r1
 800913c:	bf08      	it	eq
 800913e:	4770      	bxeq	lr
 8009140:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8009144:	d502      	bpl.n	800914c <__aeabi_l2f+0x14>
 8009146:	4240      	negs	r0, r0
 8009148:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800914c:	ea5f 0c01 	movs.w	ip, r1
 8009150:	bf02      	ittt	eq
 8009152:	4684      	moveq	ip, r0
 8009154:	4601      	moveq	r1, r0
 8009156:	2000      	moveq	r0, #0
 8009158:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800915c:	bf08      	it	eq
 800915e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8009162:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009166:	fabc f28c 	clz	r2, ip
 800916a:	3a08      	subs	r2, #8
 800916c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8009170:	db10      	blt.n	8009194 <__aeabi_l2f+0x5c>
 8009172:	fa01 fc02 	lsl.w	ip, r1, r2
 8009176:	4463      	add	r3, ip
 8009178:	fa00 fc02 	lsl.w	ip, r0, r2
 800917c:	f1c2 0220 	rsb	r2, r2, #32
 8009180:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8009184:	fa20 f202 	lsr.w	r2, r0, r2
 8009188:	eb43 0002 	adc.w	r0, r3, r2
 800918c:	bf08      	it	eq
 800918e:	f020 0001 	biceq.w	r0, r0, #1
 8009192:	4770      	bx	lr
 8009194:	f102 0220 	add.w	r2, r2, #32
 8009198:	fa01 fc02 	lsl.w	ip, r1, r2
 800919c:	f1c2 0220 	rsb	r2, r2, #32
 80091a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80091a4:	fa21 f202 	lsr.w	r2, r1, r2
 80091a8:	eb43 0002 	adc.w	r0, r3, r2
 80091ac:	bf08      	it	eq
 80091ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80091b2:	4770      	bx	lr

080091b4 <__aeabi_f2uiz>:
 80091b4:	0042      	lsls	r2, r0, #1
 80091b6:	d20e      	bcs.n	80091d6 <__aeabi_f2uiz+0x22>
 80091b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80091bc:	d30b      	bcc.n	80091d6 <__aeabi_f2uiz+0x22>
 80091be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80091c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80091c6:	d409      	bmi.n	80091dc <__aeabi_f2uiz+0x28>
 80091c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80091cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091d0:	fa23 f002 	lsr.w	r0, r3, r2
 80091d4:	4770      	bx	lr
 80091d6:	f04f 0000 	mov.w	r0, #0
 80091da:	4770      	bx	lr
 80091dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80091e0:	d101      	bne.n	80091e6 <__aeabi_f2uiz+0x32>
 80091e2:	0242      	lsls	r2, r0, #9
 80091e4:	d102      	bne.n	80091ec <__aeabi_f2uiz+0x38>
 80091e6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ea:	4770      	bx	lr
 80091ec:	f04f 0000 	mov.w	r0, #0
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop

080091f4 <__aeabi_uldivmod>:
 80091f4:	b953      	cbnz	r3, 800920c <__aeabi_uldivmod+0x18>
 80091f6:	b94a      	cbnz	r2, 800920c <__aeabi_uldivmod+0x18>
 80091f8:	2900      	cmp	r1, #0
 80091fa:	bf08      	it	eq
 80091fc:	2800      	cmpeq	r0, #0
 80091fe:	bf1c      	itt	ne
 8009200:	f04f 31ff 	movne.w	r1, #4294967295
 8009204:	f04f 30ff 	movne.w	r0, #4294967295
 8009208:	f000 b970 	b.w	80094ec <__aeabi_idiv0>
 800920c:	f1ad 0c08 	sub.w	ip, sp, #8
 8009210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8009214:	f000 f806 	bl	8009224 <__udivmoddi4>
 8009218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800921c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009220:	b004      	add	sp, #16
 8009222:	4770      	bx	lr

08009224 <__udivmoddi4>:
 8009224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009228:	9e08      	ldr	r6, [sp, #32]
 800922a:	460d      	mov	r5, r1
 800922c:	4604      	mov	r4, r0
 800922e:	460f      	mov	r7, r1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d14a      	bne.n	80092ca <__udivmoddi4+0xa6>
 8009234:	428a      	cmp	r2, r1
 8009236:	4694      	mov	ip, r2
 8009238:	d965      	bls.n	8009306 <__udivmoddi4+0xe2>
 800923a:	fab2 f382 	clz	r3, r2
 800923e:	b143      	cbz	r3, 8009252 <__udivmoddi4+0x2e>
 8009240:	fa02 fc03 	lsl.w	ip, r2, r3
 8009244:	f1c3 0220 	rsb	r2, r3, #32
 8009248:	409f      	lsls	r7, r3
 800924a:	fa20 f202 	lsr.w	r2, r0, r2
 800924e:	4317      	orrs	r7, r2
 8009250:	409c      	lsls	r4, r3
 8009252:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8009256:	fa1f f58c 	uxth.w	r5, ip
 800925a:	fbb7 f1fe 	udiv	r1, r7, lr
 800925e:	0c22      	lsrs	r2, r4, #16
 8009260:	fb0e 7711 	mls	r7, lr, r1, r7
 8009264:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8009268:	fb01 f005 	mul.w	r0, r1, r5
 800926c:	4290      	cmp	r0, r2
 800926e:	d90a      	bls.n	8009286 <__udivmoddi4+0x62>
 8009270:	eb1c 0202 	adds.w	r2, ip, r2
 8009274:	f101 37ff 	add.w	r7, r1, #4294967295
 8009278:	f080 811b 	bcs.w	80094b2 <__udivmoddi4+0x28e>
 800927c:	4290      	cmp	r0, r2
 800927e:	f240 8118 	bls.w	80094b2 <__udivmoddi4+0x28e>
 8009282:	3902      	subs	r1, #2
 8009284:	4462      	add	r2, ip
 8009286:	1a12      	subs	r2, r2, r0
 8009288:	b2a4      	uxth	r4, r4
 800928a:	fbb2 f0fe 	udiv	r0, r2, lr
 800928e:	fb0e 2210 	mls	r2, lr, r0, r2
 8009292:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009296:	fb00 f505 	mul.w	r5, r0, r5
 800929a:	42a5      	cmp	r5, r4
 800929c:	d90a      	bls.n	80092b4 <__udivmoddi4+0x90>
 800929e:	eb1c 0404 	adds.w	r4, ip, r4
 80092a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80092a6:	f080 8106 	bcs.w	80094b6 <__udivmoddi4+0x292>
 80092aa:	42a5      	cmp	r5, r4
 80092ac:	f240 8103 	bls.w	80094b6 <__udivmoddi4+0x292>
 80092b0:	4464      	add	r4, ip
 80092b2:	3802      	subs	r0, #2
 80092b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80092b8:	1b64      	subs	r4, r4, r5
 80092ba:	2100      	movs	r1, #0
 80092bc:	b11e      	cbz	r6, 80092c6 <__udivmoddi4+0xa2>
 80092be:	40dc      	lsrs	r4, r3
 80092c0:	2300      	movs	r3, #0
 80092c2:	e9c6 4300 	strd	r4, r3, [r6]
 80092c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ca:	428b      	cmp	r3, r1
 80092cc:	d908      	bls.n	80092e0 <__udivmoddi4+0xbc>
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	f000 80ec 	beq.w	80094ac <__udivmoddi4+0x288>
 80092d4:	2100      	movs	r1, #0
 80092d6:	e9c6 0500 	strd	r0, r5, [r6]
 80092da:	4608      	mov	r0, r1
 80092dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e0:	fab3 f183 	clz	r1, r3
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d149      	bne.n	800937c <__udivmoddi4+0x158>
 80092e8:	42ab      	cmp	r3, r5
 80092ea:	d302      	bcc.n	80092f2 <__udivmoddi4+0xce>
 80092ec:	4282      	cmp	r2, r0
 80092ee:	f200 80f7 	bhi.w	80094e0 <__udivmoddi4+0x2bc>
 80092f2:	1a84      	subs	r4, r0, r2
 80092f4:	eb65 0203 	sbc.w	r2, r5, r3
 80092f8:	2001      	movs	r0, #1
 80092fa:	4617      	mov	r7, r2
 80092fc:	2e00      	cmp	r6, #0
 80092fe:	d0e2      	beq.n	80092c6 <__udivmoddi4+0xa2>
 8009300:	e9c6 4700 	strd	r4, r7, [r6]
 8009304:	e7df      	b.n	80092c6 <__udivmoddi4+0xa2>
 8009306:	b902      	cbnz	r2, 800930a <__udivmoddi4+0xe6>
 8009308:	deff      	udf	#255	; 0xff
 800930a:	fab2 f382 	clz	r3, r2
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 808f 	bne.w	8009432 <__udivmoddi4+0x20e>
 8009314:	1a8a      	subs	r2, r1, r2
 8009316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800931a:	fa1f fe8c 	uxth.w	lr, ip
 800931e:	2101      	movs	r1, #1
 8009320:	fbb2 f5f7 	udiv	r5, r2, r7
 8009324:	fb07 2015 	mls	r0, r7, r5, r2
 8009328:	0c22      	lsrs	r2, r4, #16
 800932a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800932e:	fb0e f005 	mul.w	r0, lr, r5
 8009332:	4290      	cmp	r0, r2
 8009334:	d908      	bls.n	8009348 <__udivmoddi4+0x124>
 8009336:	eb1c 0202 	adds.w	r2, ip, r2
 800933a:	f105 38ff 	add.w	r8, r5, #4294967295
 800933e:	d202      	bcs.n	8009346 <__udivmoddi4+0x122>
 8009340:	4290      	cmp	r0, r2
 8009342:	f200 80ca 	bhi.w	80094da <__udivmoddi4+0x2b6>
 8009346:	4645      	mov	r5, r8
 8009348:	1a12      	subs	r2, r2, r0
 800934a:	b2a4      	uxth	r4, r4
 800934c:	fbb2 f0f7 	udiv	r0, r2, r7
 8009350:	fb07 2210 	mls	r2, r7, r0, r2
 8009354:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009358:	fb0e fe00 	mul.w	lr, lr, r0
 800935c:	45a6      	cmp	lr, r4
 800935e:	d908      	bls.n	8009372 <__udivmoddi4+0x14e>
 8009360:	eb1c 0404 	adds.w	r4, ip, r4
 8009364:	f100 32ff 	add.w	r2, r0, #4294967295
 8009368:	d202      	bcs.n	8009370 <__udivmoddi4+0x14c>
 800936a:	45a6      	cmp	lr, r4
 800936c:	f200 80ba 	bhi.w	80094e4 <__udivmoddi4+0x2c0>
 8009370:	4610      	mov	r0, r2
 8009372:	eba4 040e 	sub.w	r4, r4, lr
 8009376:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800937a:	e79f      	b.n	80092bc <__udivmoddi4+0x98>
 800937c:	f1c1 0720 	rsb	r7, r1, #32
 8009380:	408b      	lsls	r3, r1
 8009382:	fa22 fc07 	lsr.w	ip, r2, r7
 8009386:	ea4c 0c03 	orr.w	ip, ip, r3
 800938a:	fa05 f401 	lsl.w	r4, r5, r1
 800938e:	fa20 f307 	lsr.w	r3, r0, r7
 8009392:	40fd      	lsrs	r5, r7
 8009394:	4323      	orrs	r3, r4
 8009396:	fa00 f901 	lsl.w	r9, r0, r1
 800939a:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800939e:	fa1f fe8c 	uxth.w	lr, ip
 80093a2:	fbb5 f8f0 	udiv	r8, r5, r0
 80093a6:	0c1c      	lsrs	r4, r3, #16
 80093a8:	fb00 5518 	mls	r5, r0, r8, r5
 80093ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80093b0:	fb08 f50e 	mul.w	r5, r8, lr
 80093b4:	42a5      	cmp	r5, r4
 80093b6:	fa02 f201 	lsl.w	r2, r2, r1
 80093ba:	d90b      	bls.n	80093d4 <__udivmoddi4+0x1b0>
 80093bc:	eb1c 0404 	adds.w	r4, ip, r4
 80093c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80093c4:	f080 8087 	bcs.w	80094d6 <__udivmoddi4+0x2b2>
 80093c8:	42a5      	cmp	r5, r4
 80093ca:	f240 8084 	bls.w	80094d6 <__udivmoddi4+0x2b2>
 80093ce:	f1a8 0802 	sub.w	r8, r8, #2
 80093d2:	4464      	add	r4, ip
 80093d4:	1b64      	subs	r4, r4, r5
 80093d6:	b29d      	uxth	r5, r3
 80093d8:	fbb4 f3f0 	udiv	r3, r4, r0
 80093dc:	fb00 4413 	mls	r4, r0, r3, r4
 80093e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80093e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80093e8:	45a6      	cmp	lr, r4
 80093ea:	d908      	bls.n	80093fe <__udivmoddi4+0x1da>
 80093ec:	eb1c 0404 	adds.w	r4, ip, r4
 80093f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80093f4:	d26b      	bcs.n	80094ce <__udivmoddi4+0x2aa>
 80093f6:	45a6      	cmp	lr, r4
 80093f8:	d969      	bls.n	80094ce <__udivmoddi4+0x2aa>
 80093fa:	3b02      	subs	r3, #2
 80093fc:	4464      	add	r4, ip
 80093fe:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8009402:	fba0 8302 	umull	r8, r3, r0, r2
 8009406:	eba4 040e 	sub.w	r4, r4, lr
 800940a:	429c      	cmp	r4, r3
 800940c:	46c6      	mov	lr, r8
 800940e:	461d      	mov	r5, r3
 8009410:	d355      	bcc.n	80094be <__udivmoddi4+0x29a>
 8009412:	d052      	beq.n	80094ba <__udivmoddi4+0x296>
 8009414:	b156      	cbz	r6, 800942c <__udivmoddi4+0x208>
 8009416:	ebb9 030e 	subs.w	r3, r9, lr
 800941a:	eb64 0405 	sbc.w	r4, r4, r5
 800941e:	fa04 f707 	lsl.w	r7, r4, r7
 8009422:	40cb      	lsrs	r3, r1
 8009424:	40cc      	lsrs	r4, r1
 8009426:	431f      	orrs	r7, r3
 8009428:	e9c6 7400 	strd	r7, r4, [r6]
 800942c:	2100      	movs	r1, #0
 800942e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009432:	f1c3 0120 	rsb	r1, r3, #32
 8009436:	fa02 fc03 	lsl.w	ip, r2, r3
 800943a:	fa20 f201 	lsr.w	r2, r0, r1
 800943e:	fa25 f101 	lsr.w	r1, r5, r1
 8009442:	409d      	lsls	r5, r3
 8009444:	432a      	orrs	r2, r5
 8009446:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800944a:	fa1f fe8c 	uxth.w	lr, ip
 800944e:	fbb1 f0f7 	udiv	r0, r1, r7
 8009452:	fb07 1510 	mls	r5, r7, r0, r1
 8009456:	0c11      	lsrs	r1, r2, #16
 8009458:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800945c:	fb00 f50e 	mul.w	r5, r0, lr
 8009460:	428d      	cmp	r5, r1
 8009462:	fa04 f403 	lsl.w	r4, r4, r3
 8009466:	d908      	bls.n	800947a <__udivmoddi4+0x256>
 8009468:	eb1c 0101 	adds.w	r1, ip, r1
 800946c:	f100 38ff 	add.w	r8, r0, #4294967295
 8009470:	d22f      	bcs.n	80094d2 <__udivmoddi4+0x2ae>
 8009472:	428d      	cmp	r5, r1
 8009474:	d92d      	bls.n	80094d2 <__udivmoddi4+0x2ae>
 8009476:	3802      	subs	r0, #2
 8009478:	4461      	add	r1, ip
 800947a:	1b49      	subs	r1, r1, r5
 800947c:	b292      	uxth	r2, r2
 800947e:	fbb1 f5f7 	udiv	r5, r1, r7
 8009482:	fb07 1115 	mls	r1, r7, r5, r1
 8009486:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800948a:	fb05 f10e 	mul.w	r1, r5, lr
 800948e:	4291      	cmp	r1, r2
 8009490:	d908      	bls.n	80094a4 <__udivmoddi4+0x280>
 8009492:	eb1c 0202 	adds.w	r2, ip, r2
 8009496:	f105 38ff 	add.w	r8, r5, #4294967295
 800949a:	d216      	bcs.n	80094ca <__udivmoddi4+0x2a6>
 800949c:	4291      	cmp	r1, r2
 800949e:	d914      	bls.n	80094ca <__udivmoddi4+0x2a6>
 80094a0:	3d02      	subs	r5, #2
 80094a2:	4462      	add	r2, ip
 80094a4:	1a52      	subs	r2, r2, r1
 80094a6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80094aa:	e739      	b.n	8009320 <__udivmoddi4+0xfc>
 80094ac:	4631      	mov	r1, r6
 80094ae:	4630      	mov	r0, r6
 80094b0:	e709      	b.n	80092c6 <__udivmoddi4+0xa2>
 80094b2:	4639      	mov	r1, r7
 80094b4:	e6e7      	b.n	8009286 <__udivmoddi4+0x62>
 80094b6:	4610      	mov	r0, r2
 80094b8:	e6fc      	b.n	80092b4 <__udivmoddi4+0x90>
 80094ba:	45c1      	cmp	r9, r8
 80094bc:	d2aa      	bcs.n	8009414 <__udivmoddi4+0x1f0>
 80094be:	ebb8 0e02 	subs.w	lr, r8, r2
 80094c2:	eb63 050c 	sbc.w	r5, r3, ip
 80094c6:	3801      	subs	r0, #1
 80094c8:	e7a4      	b.n	8009414 <__udivmoddi4+0x1f0>
 80094ca:	4645      	mov	r5, r8
 80094cc:	e7ea      	b.n	80094a4 <__udivmoddi4+0x280>
 80094ce:	4603      	mov	r3, r0
 80094d0:	e795      	b.n	80093fe <__udivmoddi4+0x1da>
 80094d2:	4640      	mov	r0, r8
 80094d4:	e7d1      	b.n	800947a <__udivmoddi4+0x256>
 80094d6:	46d0      	mov	r8, sl
 80094d8:	e77c      	b.n	80093d4 <__udivmoddi4+0x1b0>
 80094da:	3d02      	subs	r5, #2
 80094dc:	4462      	add	r2, ip
 80094de:	e733      	b.n	8009348 <__udivmoddi4+0x124>
 80094e0:	4608      	mov	r0, r1
 80094e2:	e70b      	b.n	80092fc <__udivmoddi4+0xd8>
 80094e4:	4464      	add	r4, ip
 80094e6:	3802      	subs	r0, #2
 80094e8:	e743      	b.n	8009372 <__udivmoddi4+0x14e>
 80094ea:	bf00      	nop

080094ec <__aeabi_idiv0>:
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop

080094f0 <osDelayTask>:
 * @brief Delay routine
 * @param[in] delay Amount of time for which the calling task should block
 **/

void osDelayTask(systime_t delay)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
   //Delay the task for the specified duration
   vTaskDelay(OS_MS_TO_SYSTICKS(delay));
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f00d f9f5 	bl	80168e8 <vTaskDelay>
}
 80094fe:	bf00      	nop
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800950a:	f00d fe9b 	bl	8017244 <xTaskGetSchedulerState>
 800950e:	4603      	mov	r3, r0
 8009510:	2b01      	cmp	r3, #1
 8009512:	d001      	beq.n	8009518 <osSuspendAllTasks+0x12>
   {
      //Suspend all tasks
      vTaskSuspendAll();
 8009514:	f00d fa8c 	bl	8016a30 <vTaskSuspendAll>
   }
}
 8009518:	bf00      	nop
 800951a:	bd80      	pop	{r7, pc}

0800951c <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009520:	f00d fe90 	bl	8017244 <xTaskGetSchedulerState>
 8009524:	4603      	mov	r3, r0
 8009526:	2b01      	cmp	r3, #1
 8009528:	d001      	beq.n	800952e <osResumeAllTasks+0x12>
   {
      //Resume all tasks
      xTaskResumeAll();
 800952a:	f00d fa8f 	bl	8016a4c <xTaskResumeAll>
   }
}
 800952e:	bf00      	nop
 8009530:	bd80      	pop	{r7, pc}

08009532 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = pvPortMalloc(size);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f00e fdde 	bl	80180fc <pvPortMalloc>
 8009540:	60f8      	str	r0, [r7, #12]
   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 8009542:	68fb      	ldr	r3, [r7, #12]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

__weak_func void osFreeMem(void *p)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      vPortFree(p);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f00e fe98 	bl	8018290 <vPortFree>
   }
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8009568:	b480      	push	{r7}
 800956a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800956c:	bf00      	nop
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4a06      	ldr	r2, [pc, #24]	; (800959c <vApplicationGetIdleTaskMemory+0x28>)
 8009584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	4a05      	ldr	r2, [pc, #20]	; (80095a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800958a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2280      	movs	r2, #128	; 0x80
 8009590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8009592:	bf00      	nop
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	bc80      	pop	{r7}
 800959a:	4770      	bx	lr
 800959c:	20000780 	.word	0x20000780
 80095a0:	200008f8 	.word	0x200008f8

080095a4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	4a07      	ldr	r2, [pc, #28]	; (80095d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80095b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	4a06      	ldr	r2, [pc, #24]	; (80095d4 <vApplicationGetTimerTaskMemory+0x30>)
 80095ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095c2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80095c4:	bf00      	nop
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bc80      	pop	{r7}
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	20000af8 	.word	0x20000af8
 80095d4:	20000c70 	.word	0x20000c70

080095d8 <vApplicationStackOverflowHook>:
 * @brief FreeRTOS stackoverflow detection callback
 **/

void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    signed char *pcTaskName )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
	fprintf(stderr, "Stack overflow in task '%s'!\r\n", pcTaskName);
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <vApplicationStackOverflowHook+0x30>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	4908      	ldr	r1, [pc, #32]	; (800960c <vApplicationStackOverflowHook+0x34>)
 80095ec:	4618      	mov	r0, r3
 80095ee:	f00e fff5 	bl	80185dc <fprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009604:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	while(1);
 8009606:	e7fe      	b.n	8009606 <vApplicationStackOverflowHook+0x2e>
 8009608:	200001c8 	.word	0x200001c8
 800960c:	0801f410 	.word	0x0801f410

08009610 <vApplicationMallocFailedHook>:
/**
 * @brief FreeRTOS memory allocation failed detection callback
 **/

void vApplicationMallocFailedHook( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
	fprintf(stderr, "OS memory allocation failed!\r\n");
 8009616:	4b09      	ldr	r3, [pc, #36]	; (800963c <vApplicationMallocFailedHook+0x2c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	221e      	movs	r2, #30
 800961e:	2101      	movs	r1, #1
 8009620:	4807      	ldr	r0, [pc, #28]	; (8009640 <vApplicationMallocFailedHook+0x30>)
 8009622:	f00f f99f 	bl	8018964 <fwrite>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	607b      	str	r3, [r7, #4]
}
 8009638:	bf00      	nop
	taskDISABLE_INTERRUPTS();
	while(1);
 800963a:	e7fe      	b.n	800963a <vApplicationMallocFailedHook+0x2a>
 800963c:	200001c8 	.word	0x200001c8
 8009640:	0801f430 	.word	0x0801f430

08009644 <Int2Str>:
 * @param  intnum: The integer to be converted
 * @retval None
 **/

void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 800964e:	4b25      	ldr	r3, [pc, #148]	; (80096e4 <Int2Str+0xa0>)
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	2300      	movs	r3, #0
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	2300      	movs	r3, #0
 8009658:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 800965a:	2300      	movs	r3, #0
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	e038      	b.n	80096d2 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	fbb2 f3f3 	udiv	r3, r2, r3
 8009668:	b2da      	uxtb	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	1c59      	adds	r1, r3, #1
 800966e:	60f9      	str	r1, [r7, #12]
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	440b      	add	r3, r1
 8009674:	3230      	adds	r2, #48	; 0x30
 8009676:	b2d2      	uxtb	r2, r2
 8009678:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009682:	6939      	ldr	r1, [r7, #16]
 8009684:	fb01 f202 	mul.w	r2, r1, r2
 8009688:	1a9b      	subs	r3, r3, r2
 800968a:	603b      	str	r3, [r7, #0]
    divider /= 10;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	4a16      	ldr	r2, [pc, #88]	; (80096e8 <Int2Str+0xa4>)
 8009690:	fba2 2303 	umull	r2, r3, r2, r3
 8009694:	08db      	lsrs	r3, r3, #3
 8009696:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3b01      	subs	r3, #1
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	4413      	add	r3, r2
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	2b30      	cmp	r3, #48	; 0x30
 80096a4:	bf0c      	ite	eq
 80096a6:	2301      	moveq	r3, #1
 80096a8:	2300      	movne	r3, #0
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bf0c      	ite	eq
 80096b2:	2301      	moveq	r3, #1
 80096b4:	2300      	movne	r3, #0
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	4013      	ands	r3, r2
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <Int2Str+0x82>
    {
      pos = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	e002      	b.n	80096cc <Int2Str+0x88>
    }
    else
    {
      status++;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	3301      	adds	r3, #1
 80096ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	3301      	adds	r3, #1
 80096d0:	617b      	str	r3, [r7, #20]
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2b09      	cmp	r3, #9
 80096d6:	d9c3      	bls.n	8009660 <Int2Str+0x1c>
    }
  }
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	bc80      	pop	{r7}
 80096e2:	4770      	bx	lr
 80096e4:	3b9aca00 	.word	0x3b9aca00
 80096e8:	cccccccd 	.word	0xcccccccd

080096ec <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	2300      	movs	r3, #0
 80096fc:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	2b30      	cmp	r3, #48	; 0x30
 8009708:	f040 80d7 	bne.w	80098ba <Str2Int+0x1ce>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3301      	adds	r3, #1
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b78      	cmp	r3, #120	; 0x78
 8009714:	d005      	beq.n	8009722 <Str2Int+0x36>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3301      	adds	r3, #1
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b58      	cmp	r3, #88	; 0x58
 800971e:	f040 80cc 	bne.w	80098ba <Str2Int+0x1ce>
  {
    i = 2;
 8009722:	2302      	movs	r3, #2
 8009724:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8009726:	e057      	b.n	80097d8 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	4413      	add	r3, r2
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b40      	cmp	r3, #64	; 0x40
 8009732:	d905      	bls.n	8009740 <Str2Int+0x54>
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	4413      	add	r3, r2
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b46      	cmp	r3, #70	; 0x46
 800973e:	d917      	bls.n	8009770 <Str2Int+0x84>
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	4413      	add	r3, r2
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b60      	cmp	r3, #96	; 0x60
 800974a:	d905      	bls.n	8009758 <Str2Int+0x6c>
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	4413      	add	r3, r2
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2b66      	cmp	r3, #102	; 0x66
 8009756:	d90b      	bls.n	8009770 <Str2Int+0x84>
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	4413      	add	r3, r2
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b2f      	cmp	r3, #47	; 0x2f
 8009762:	d936      	bls.n	80097d2 <Str2Int+0xe6>
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	4413      	add	r3, r2
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b39      	cmp	r3, #57	; 0x39
 800976e:	d830      	bhi.n	80097d2 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	440a      	add	r2, r1
 800977a:	7812      	ldrb	r2, [r2, #0]
 800977c:	2a2f      	cmp	r2, #47	; 0x2f
 800977e:	d90b      	bls.n	8009798 <Str2Int+0xac>
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	440a      	add	r2, r1
 8009786:	7812      	ldrb	r2, [r2, #0]
 8009788:	2a39      	cmp	r2, #57	; 0x39
 800978a:	d805      	bhi.n	8009798 <Str2Int+0xac>
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	440a      	add	r2, r1
 8009792:	7812      	ldrb	r2, [r2, #0]
 8009794:	3a30      	subs	r2, #48	; 0x30
 8009796:	e016      	b.n	80097c6 <Str2Int+0xda>
 8009798:	6879      	ldr	r1, [r7, #4]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	440a      	add	r2, r1
 800979e:	7812      	ldrb	r2, [r2, #0]
 80097a0:	2a40      	cmp	r2, #64	; 0x40
 80097a2:	d90b      	bls.n	80097bc <Str2Int+0xd0>
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	440a      	add	r2, r1
 80097aa:	7812      	ldrb	r2, [r2, #0]
 80097ac:	2a46      	cmp	r2, #70	; 0x46
 80097ae:	d805      	bhi.n	80097bc <Str2Int+0xd0>
 80097b0:	6879      	ldr	r1, [r7, #4]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	440a      	add	r2, r1
 80097b6:	7812      	ldrb	r2, [r2, #0]
 80097b8:	3a37      	subs	r2, #55	; 0x37
 80097ba:	e004      	b.n	80097c6 <Str2Int+0xda>
 80097bc:	6879      	ldr	r1, [r7, #4]
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	440a      	add	r2, r1
 80097c2:	7812      	ldrb	r2, [r2, #0]
 80097c4:	3a57      	subs	r2, #87	; 0x57
 80097c6:	4413      	add	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	3301      	adds	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
 80097d0:	e002      	b.n	80097d8 <Str2Int+0xec>
        res = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
        break;
 80097d6:	e008      	b.n	80097ea <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	2b0a      	cmp	r3, #10
 80097dc:	d805      	bhi.n	80097ea <Str2Int+0xfe>
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	4413      	add	r3, r2
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d19e      	bne.n	8009728 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	4413      	add	r3, r2
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d167      	bne.n	80098c6 <Str2Int+0x1da>
    {
      *p_intnum = val;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	601a      	str	r2, [r3, #0]
      res = 1;
 80097fc:	2301      	movs	r3, #1
 80097fe:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8009800:	e061      	b.n	80098c6 <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	4413      	add	r3, r2
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d105      	bne.n	800981a <Str2Int+0x12e>
      {
        *p_intnum = val;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 8009814:	2301      	movs	r3, #1
 8009816:	613b      	str	r3, [r7, #16]
 8009818:	e04c      	b.n	80098b4 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	4413      	add	r3, r2
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b6b      	cmp	r3, #107	; 0x6b
 8009824:	d005      	beq.n	8009832 <Str2Int+0x146>
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	4413      	add	r3, r2
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	2b4b      	cmp	r3, #75	; 0x4b
 8009830:	d10b      	bne.n	800984a <Str2Int+0x15e>
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d008      	beq.n	800984a <Str2Int+0x15e>
      {
        val = val << 10;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	029b      	lsls	r3, r3, #10
 800983c:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	601a      	str	r2, [r3, #0]
        res = 1;
 8009844:	2301      	movs	r3, #1
 8009846:	613b      	str	r3, [r7, #16]
 8009848:	e034      	b.n	80098b4 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	4413      	add	r3, r2
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b6d      	cmp	r3, #109	; 0x6d
 8009854:	d005      	beq.n	8009862 <Str2Int+0x176>
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	4413      	add	r3, r2
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	2b4d      	cmp	r3, #77	; 0x4d
 8009860:	d10b      	bne.n	800987a <Str2Int+0x18e>
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d008      	beq.n	800987a <Str2Int+0x18e>
      {
        val = val << 20;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	051b      	lsls	r3, r3, #20
 800986c:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	601a      	str	r2, [r3, #0]
        res = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	613b      	str	r3, [r7, #16]
 8009878:	e01c      	b.n	80098b4 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	4413      	add	r3, r2
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	2b2f      	cmp	r3, #47	; 0x2f
 8009884:	d913      	bls.n	80098ae <Str2Int+0x1c2>
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	4413      	add	r3, r2
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b39      	cmp	r3, #57	; 0x39
 8009890:	d80d      	bhi.n	80098ae <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	4619      	mov	r1, r3
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	4413      	add	r3, r2
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	440b      	add	r3, r1
 80098a8:	3b30      	subs	r3, #48	; 0x30
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	e002      	b.n	80098b4 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	613b      	str	r3, [r7, #16]
        break;
 80098b2:	e008      	b.n	80098c6 <Str2Int+0x1da>
      }
      i++;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	3301      	adds	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b0a      	cmp	r3, #10
 80098be:	d802      	bhi.n	80098c6 <Str2Int+0x1da>
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d19d      	bne.n	8009802 <Str2Int+0x116>
    }
  }

  return res;
 80098c6:	693b      	ldr	r3, [r7, #16]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	371c      	adds	r7, #28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr
	...

080098d4 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 80098e0:	e002      	b.n	80098e8 <Serial_PutString+0x14>
  {
    length++;
 80098e2:	89fb      	ldrh	r3, [r7, #14]
 80098e4:	3301      	adds	r3, #1
 80098e6:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 80098e8:	89fb      	ldrh	r3, [r7, #14]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	4413      	add	r3, r2
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1f6      	bne.n	80098e2 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 80098f4:	89fa      	ldrh	r2, [r7, #14]
 80098f6:	2364      	movs	r3, #100	; 0x64
 80098f8:	6879      	ldr	r1, [r7, #4]
 80098fa:	4803      	ldr	r0, [pc, #12]	; (8009908 <Serial_PutString+0x34>)
 80098fc:	f008 fd6a 	bl	80123d4 <HAL_UART_Transmit>
}
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	20001360 	.word	0x20001360

0800990c <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 8009916:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <Serial_PutByte+0x34>)
 8009918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991c:	2ba0      	cmp	r3, #160	; 0xa0
 800991e:	d103      	bne.n	8009928 <Serial_PutByte+0x1c>
  {
    UartHandle.gState = HAL_UART_STATE_READY;
 8009920:	4b07      	ldr	r3, [pc, #28]	; (8009940 <Serial_PutByte+0x34>)
 8009922:	2220      	movs	r2, #32
 8009924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 8009928:	1df9      	adds	r1, r7, #7
 800992a:	2364      	movs	r3, #100	; 0x64
 800992c:	2201      	movs	r2, #1
 800992e:	4804      	ldr	r0, [pc, #16]	; (8009940 <Serial_PutByte+0x34>)
 8009930:	f008 fd50 	bl	80123d4 <HAL_UART_Transmit>
 8009934:	4603      	mov	r3, r0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20001360 	.word	0x20001360

08009944 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800994c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009950:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4313      	orrs	r3, r2
 800995a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800995c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4013      	ands	r3, r2
 8009966:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009968:	68fb      	ldr	r3, [r7, #12]
}
 800996a:	bf00      	nop
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	bc80      	pop	{r7}
 8009972:	4770      	bx	lr

08009974 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800997c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009980:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4313      	orrs	r3, r2
 800998a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800998c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009990:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4013      	ands	r3, r2
 8009996:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009998:	68fb      	ldr	r3, [r7, #12]
}
 800999a:	bf00      	nop
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	bc80      	pop	{r7}
 80099a2:	4770      	bx	lr

080099a4 <updateDevice>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool updateDevice()
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
	uint8_t c;
	bool status = false;
 80099aa:	2300      	movs	r3, #0
 80099ac:	71fb      	strb	r3, [r7, #7]
	bool bootReady = false;
 80099ae:	2300      	movs	r3, #0
 80099b0:	71bb      	strb	r3, [r7, #6]
	serialPutStr("E5 POR\n");
 80099b2:	4815      	ldr	r0, [pc, #84]	; (8009a08 <updateDevice+0x64>)
 80099b4:	f00b fafc 	bl	8014fb0 <serialPutStr>

    do
    {
    	if(HAL_UART_Receive(&huart2, &c, 1, 100) == HAL_OK)
 80099b8:	1d79      	adds	r1, r7, #5
 80099ba:	2364      	movs	r3, #100	; 0x64
 80099bc:	2201      	movs	r2, #1
 80099be:	4813      	ldr	r0, [pc, #76]	; (8009a0c <updateDevice+0x68>)
 80099c0:	f008 fd8e 	bl	80124e0 <HAL_UART_Receive>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d113      	bne.n	80099f2 <updateDevice+0x4e>
		{
    		switch(c)
 80099ca:	797b      	ldrb	r3, [r7, #5]
 80099cc:	2b61      	cmp	r3, #97	; 0x61
 80099ce:	d002      	beq.n	80099d6 <updateDevice+0x32>
 80099d0:	2b62      	cmp	r3, #98	; 0x62
 80099d2:	d005      	beq.n	80099e0 <updateDevice+0x3c>
 80099d4:	e009      	b.n	80099ea <updateDevice+0x46>
    		{
    		case 'a':
    			status = true;
 80099d6:	2301      	movs	r3, #1
 80099d8:	71fb      	strb	r3, [r7, #7]
    			bootReady = true;
 80099da:	2301      	movs	r3, #1
 80099dc:	71bb      	strb	r3, [r7, #6]
    			break;
 80099de:	e008      	b.n	80099f2 <updateDevice+0x4e>

    		case 'b':
    			status = false;
 80099e0:	2300      	movs	r3, #0
 80099e2:	71fb      	strb	r3, [r7, #7]
    			bootReady = true;
 80099e4:	2301      	movs	r3, #1
 80099e6:	71bb      	strb	r3, [r7, #6]
    			break;
 80099e8:	e003      	b.n	80099f2 <updateDevice+0x4e>
    		default:
    			serialPutStr("Unknown Command\n");
 80099ea:	4809      	ldr	r0, [pc, #36]	; (8009a10 <updateDevice+0x6c>)
 80099ec:	f00b fae0 	bl	8014fb0 <serialPutStr>
    			break;
 80099f0:	bf00      	nop
    		}
		}
    }while(!bootReady);
 80099f2:	79bb      	ldrb	r3, [r7, #6]
 80099f4:	f083 0301 	eor.w	r3, r3, #1
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1dc      	bne.n	80099b8 <updateDevice+0x14>

	return status;
 80099fe:	79fb      	ldrb	r3, [r7, #7]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	0801f450 	.word	0x0801f450
 8009a0c:	200011bc 	.word	0x200011bc
 8009a10:	0801f458 	.word	0x0801f458

08009a14 <__io_putchar>:

int __io_putchar(int ch)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
	uint8_t c;

	c = (uint8_t)ch;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	73fb      	strb	r3, [r7, #15]

	if(HAL_UART_Transmit(&huart2, &c, 1, 100) == HAL_OK)
 8009a22:	f107 010f 	add.w	r1, r7, #15
 8009a26:	2364      	movs	r3, #100	; 0x64
 8009a28:	2201      	movs	r2, #1
 8009a2a:	4807      	ldr	r0, [pc, #28]	; (8009a48 <__io_putchar+0x34>)
 8009a2c:	f008 fcd2 	bl	80123d4 <HAL_UART_Transmit>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <__io_putchar+0x26>
		return ch;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	e001      	b.n	8009a3e <__io_putchar+0x2a>
	else
		return -1;
 8009a3a:	f04f 33ff 	mov.w	r3, #4294967295
	return -1;
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	200011bc 	.word	0x200011bc

08009a4c <ledTaskHandler>:
/**
 * @brief Led task routine (for debug purpose)
 **/

void ledTaskHandler(void const * argument)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8009a54:	2201      	movs	r2, #1
 8009a56:	2140      	movs	r1, #64	; 0x40
 8009a58:	4807      	ldr	r0, [pc, #28]	; (8009a78 <ledTaskHandler+0x2c>)
 8009a5a:	f005 f8d9 	bl	800ec10 <HAL_GPIO_WritePin>
		osDelay(100);
 8009a5e:	2064      	movs	r0, #100	; 0x64
 8009a60:	f00b fc27 	bl	80152b2 <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8009a64:	2200      	movs	r2, #0
 8009a66:	2140      	movs	r1, #64	; 0x40
 8009a68:	4803      	ldr	r0, [pc, #12]	; (8009a78 <ledTaskHandler+0x2c>)
 8009a6a:	f005 f8d1 	bl	800ec10 <HAL_GPIO_WritePin>
		osDelay(900);
 8009a6e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8009a72:	f00b fc1e 	bl	80152b2 <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8009a76:	e7ed      	b.n	8009a54 <ledTaskHandler+0x8>
 8009a78:	48000400 	.word	0x48000400

08009a7c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8009a7c:	b5b0      	push	{r4, r5, r7, lr}
 8009a7e:	b0a4      	sub	sp, #144	; 0x90
 8009a80:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009a82:	f003 fa57 	bl	800cf34 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8009a86:	f000 f8b7 	bl	8009bf8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8009a8a:	f000 fb2b 	bl	800a0e4 <MX_GPIO_Init>
	MX_ADC_Init();
 8009a8e:	f000 f90f 	bl	8009cb0 <MX_ADC_Init>
	MX_LPUART1_UART_Init();
 8009a92:	f000 f9b9 	bl	8009e08 <MX_LPUART1_UART_Init>
	MX_USART2_UART_Init();
 8009a96:	f000 fa05 	bl	8009ea4 <MX_USART2_UART_Init>
	MX_RTC_Init();
 8009a9a:	f000 fa4f 	bl	8009f3c <MX_RTC_Init>
	MX_SPI2_Init();
 8009a9e:	f000 fae3 	bl	800a068 <MX_SPI2_Init>
	MX_I2C2_Init();
 8009aa2:	f000 f971 	bl	8009d88 <MX_I2C2_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of UartMutex */
	osMutexDef(UartMutex);
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009aac:	2300      	movs	r3, #0
 8009aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8009ab2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f00b fc0f 	bl	80152da <osMutexCreate>
 8009abc:	4603      	mov	r3, r0
 8009abe:	4a41      	ldr	r2, [pc, #260]	; (8009bc4 <main+0x148>)
 8009ac0:	6013      	str	r3, [r2, #0]

	/* definition and creation of SpiMutex */
	osMutexDef(SpiMutex);
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 8009ace:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f00b fc01 	bl	80152da <osMutexCreate>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	4a3b      	ldr	r2, [pc, #236]	; (8009bc8 <main+0x14c>)
 8009adc:	6013      	str	r3, [r2, #0]

	/* definition and creation of I2cMutex */
	osMutexDef(I2cMutex);
 8009ade:	2300      	movs	r3, #0
 8009ae0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	67fb      	str	r3, [r7, #124]	; 0x7c
	I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 8009ae6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8009aea:	4618      	mov	r0, r3
 8009aec:	f00b fbf5 	bl	80152da <osMutexCreate>
 8009af0:	4603      	mov	r3, r0
 8009af2:	4a36      	ldr	r2, [pc, #216]	; (8009bcc <main+0x150>)
 8009af4:	6013      	str	r3, [r2, #0]

	/* definition and creation of RtcMutex */
	osMutexDef(RtcMutex);
 8009af6:	2300      	movs	r3, #0
 8009af8:	673b      	str	r3, [r7, #112]	; 0x70
 8009afa:	2300      	movs	r3, #0
 8009afc:	677b      	str	r3, [r7, #116]	; 0x74
	RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 8009afe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009b02:	4618      	mov	r0, r3
 8009b04:	f00b fbe9 	bl	80152da <osMutexCreate>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	4a31      	ldr	r2, [pc, #196]	; (8009bd0 <main+0x154>)
 8009b0c:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */

	// definition and creation of iapMutex */
	osMutexDef(iapMutex);
 8009b0e:	2300      	movs	r3, #0
 8009b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b12:	2300      	movs	r3, #0
 8009b14:	66fb      	str	r3, [r7, #108]	; 0x6c
	iapMutexHandle = osMutexCreate(osMutex(iapMutex));
 8009b16:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f00b fbdd 	bl	80152da <osMutexCreate>
 8009b20:	4603      	mov	r3, r0
 8009b22:	4a2c      	ldr	r2, [pc, #176]	; (8009bd4 <main+0x158>)
 8009b24:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of xQueue1 */
	osMessageQDef(xQueue1, 100, uint16_t);
 8009b26:	4b2c      	ldr	r3, [pc, #176]	; (8009bd8 <main+0x15c>)
 8009b28:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 8009b32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009b36:	2100      	movs	r1, #0
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f00b fc6b 	bl	8015414 <osMessageCreate>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	4a26      	ldr	r2, [pc, #152]	; (8009bdc <main+0x160>)
 8009b42:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	// definition and creation of uartUserTask

	if(updateDevice())
 8009b44:	f7ff ff2e 	bl	80099a4 <updateDevice>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d026      	beq.n	8009b9c <main+0x120>
	{
		osThreadDef(uartUserTask, uartUserTaskHandler, osPriorityNormal, 0, 500);
 8009b4e:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <main+0x164>)
 8009b50:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009b54:	461d      	mov	r5, r3
 8009b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		uartUserTaskHandle = osThreadCreate(osThread(uartUserTask), NULL);
 8009b62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009b66:	2100      	movs	r1, #0
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f00b fb56 	bl	801521a <osThreadCreate>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	4a1c      	ldr	r2, [pc, #112]	; (8009be4 <main+0x168>)
 8009b72:	6013      	str	r3, [r2, #0]

		// definition and creation of ledTask
		osThreadDef(ledTask, ledTaskHandler, osPriorityNormal, 0, 128);
 8009b74:	4b1c      	ldr	r3, [pc, #112]	; (8009be8 <main+0x16c>)
 8009b76:	f107 0420 	add.w	r4, r7, #32
 8009b7a:	461d      	mov	r5, r3
 8009b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8009b88:	f107 0320 	add.w	r3, r7, #32
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f00b fb43 	bl	801521a <osThreadCreate>
 8009b94:	4603      	mov	r3, r0
 8009b96:	4a15      	ldr	r2, [pc, #84]	; (8009bec <main+0x170>)
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	e010      	b.n	8009bbe <main+0x142>
	}
	else
	{
		osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 500);
 8009b9c:	4b14      	ldr	r3, [pc, #80]	; (8009bf0 <main+0x174>)
 8009b9e:	1d3c      	adds	r4, r7, #4
 8009ba0:	461d      	mov	r5, r3
 8009ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009baa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 8009bae:	1d3b      	adds	r3, r7, #4
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f00b fb31 	bl	801521a <osThreadCreate>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	4a0e      	ldr	r2, [pc, #56]	; (8009bf4 <main+0x178>)
 8009bbc:	6013      	str	r3, [r2, #0]


	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8009bbe:	f00b fb25 	bl	801520c <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8009bc2:	e7fe      	b.n	8009bc2 <main+0x146>
 8009bc4:	200012f4 	.word	0x200012f4
 8009bc8:	200012f8 	.word	0x200012f8
 8009bcc:	200012fc 	.word	0x200012fc
 8009bd0:	20001300 	.word	0x20001300
 8009bd4:	20001304 	.word	0x20001304
 8009bd8:	0801f484 	.word	0x0801f484
 8009bdc:	200012f0 	.word	0x200012f0
 8009be0:	0801f4a4 	.word	0x0801f4a4
 8009be4:	2000130c 	.word	0x2000130c
 8009be8:	0801f4c8 	.word	0x0801f4c8
 8009bec:	20001308 	.word	0x20001308
 8009bf0:	0801f4f4 	.word	0x0801f4f4
 8009bf4:	200012ec 	.word	0x200012ec

08009bf8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b09a      	sub	sp, #104	; 0x68
 8009bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009bfe:	f107 0320 	add.w	r3, r7, #32
 8009c02:	2248      	movs	r2, #72	; 0x48
 8009c04:	2100      	movs	r1, #0
 8009c06:	4618      	mov	r0, r3
 8009c08:	f00e ffd4 	bl	8018bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009c0c:	f107 0308 	add.w	r3, r7, #8
 8009c10:	2200      	movs	r2, #0
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	605a      	str	r2, [r3, #4]
 8009c16:	609a      	str	r2, [r3, #8]
 8009c18:	60da      	str	r2, [r3, #12]
 8009c1a:	611a      	str	r2, [r3, #16]
 8009c1c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c1e:	4b23      	ldr	r3, [pc, #140]	; (8009cac <SystemClock_Config+0xb4>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009c26:	4a21      	ldr	r2, [pc, #132]	; (8009cac <SystemClock_Config+0xb4>)
 8009c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	4b1f      	ldr	r3, [pc, #124]	; (8009cac <SystemClock_Config+0xb4>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c36:	607b      	str	r3, [r7, #4]
 8009c38:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8009c3a:	232a      	movs	r3, #42	; 0x2a
 8009c3c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009c44:	2301      	movs	r3, #1
 8009c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009c48:	2340      	movs	r3, #64	; 0x40
 8009c4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8009c50:	23b0      	movs	r3, #176	; 0xb0
 8009c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8009c54:	2300      	movs	r3, #0
 8009c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009c60:	f107 0320 	add.w	r3, r7, #32
 8009c64:	4618      	mov	r0, r3
 8009c66:	f005 fbb9 	bl	800f3dc <HAL_RCC_OscConfig>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8009c70:	f000 fad4 	bl	800a21c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8009c74:	234f      	movs	r3, #79	; 0x4f
 8009c76:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009c84:	2300      	movs	r3, #0
 8009c86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009c8c:	f107 0308 	add.w	r3, r7, #8
 8009c90:	2102      	movs	r1, #2
 8009c92:	4618      	mov	r0, r3
 8009c94:	f005 ff24 	bl	800fae0 <HAL_RCC_ClockConfig>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8009c9e:	f000 fabd 	bl	800a21c <Error_Handler>
  }
}
 8009ca2:	bf00      	nop
 8009ca4:	3768      	adds	r7, #104	; 0x68
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	58000400 	.word	0x58000400

08009cb0 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC;
 8009cb6:	4b31      	ldr	r3, [pc, #196]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009cb8:	4a31      	ldr	r2, [pc, #196]	; (8009d80 <MX_ADC_Init+0xd0>)
 8009cba:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009cbc:	4b2f      	ldr	r3, [pc, #188]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009cc2:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8009cc4:	4b2d      	ldr	r3, [pc, #180]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009cca:	4b2c      	ldr	r3, [pc, #176]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8009cd0:	4b2a      	ldr	r3, [pc, #168]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009cd6:	4b29      	ldr	r3, [pc, #164]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009cd8:	2204      	movs	r2, #4
 8009cda:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8009cdc:	4b27      	ldr	r3, [pc, #156]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8009ce2:	4b26      	ldr	r3, [pc, #152]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 8009ce8:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	769a      	strb	r2, [r3, #26]
	hadc.Init.NbrOfConversion = 1;
 8009cee:	4b23      	ldr	r3, [pc, #140]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	61da      	str	r2, [r3, #28]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8009cf4:	4b21      	ldr	r3, [pc, #132]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009cfc:	4b1f      	ldr	r3, [pc, #124]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009d02:	4b1e      	ldr	r3, [pc, #120]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 8009d08:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8009d10:	4b1a      	ldr	r3, [pc, #104]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009d12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d16:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8009d18:	4b18      	ldr	r3, [pc, #96]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009d1a:	2205      	movs	r2, #5
 8009d1c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8009d1e:	4b17      	ldr	r3, [pc, #92]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009d20:	2205      	movs	r2, #5
 8009d22:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.OversamplingMode = DISABLE;
 8009d24:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8009d2c:	4b13      	ldr	r3, [pc, #76]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8009d32:	4812      	ldr	r0, [pc, #72]	; (8009d7c <MX_ADC_Init+0xcc>)
 8009d34:	f003 faee 	bl	800d314 <HAL_ADC_Init>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <MX_ADC_Init+0x92>
	{
		Error_Handler();
 8009d3e:	f000 fa6d 	bl	800a21c <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d42:	1d3b      	adds	r3, r7, #4
 8009d44:	2200      	movs	r2, #0
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	605a      	str	r2, [r3, #4]
 8009d4a:	609a      	str	r2, [r3, #8]
 8009d4c:	60da      	str	r2, [r3, #12]
 8009d4e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_ADC_CLK_ENABLE();
 8009d50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009d54:	f7ff fe0e 	bl	8009974 <LL_APB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009d58:	2002      	movs	r0, #2
 8009d5a:	f7ff fdf3 	bl	8009944 <LL_AHB2_GRP1_EnableClock>
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009d5e:	2310      	movs	r3, #16
 8009d60:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009d62:	2303      	movs	r3, #3
 8009d64:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d6a:	1d3b      	adds	r3, r7, #4
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4805      	ldr	r0, [pc, #20]	; (8009d84 <MX_ADC_Init+0xd4>)
 8009d70:	f004 fd20 	bl	800e7b4 <HAL_GPIO_Init>
	/* USER CODE END ADC_Init 2 */

}
 8009d74:	bf00      	nop
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	20001070 	.word	0x20001070
 8009d80:	40012400 	.word	0x40012400
 8009d84:	48000400 	.word	0x48000400

08009d88 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8009d8c:	4b1b      	ldr	r3, [pc, #108]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009d8e:	4a1c      	ldr	r2, [pc, #112]	; (8009e00 <MX_I2C2_Init+0x78>)
 8009d90:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 8009d92:	4b1a      	ldr	r3, [pc, #104]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009d94:	4a1b      	ldr	r2, [pc, #108]	; (8009e04 <MX_I2C2_Init+0x7c>)
 8009d96:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8009d98:	4b18      	ldr	r3, [pc, #96]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009d9e:	4b17      	ldr	r3, [pc, #92]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009da0:	2201      	movs	r2, #1
 8009da2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009da4:	4b15      	ldr	r3, [pc, #84]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009da6:	2200      	movs	r2, #0
 8009da8:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8009daa:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009db0:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009db6:	4b11      	ldr	r3, [pc, #68]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009dbc:	4b0f      	ldr	r3, [pc, #60]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009dc2:	480e      	ldr	r0, [pc, #56]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009dc4:	f004 ff3b 	bl	800ec3e <HAL_I2C_Init>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8009dce:	f000 fa25 	bl	800a21c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	4809      	ldr	r0, [pc, #36]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009dd6:	f004 ffc1 	bl	800ed5c <HAL_I2CEx_ConfigAnalogFilter>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8009de0:	f000 fa1c 	bl	800a21c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009de4:	2100      	movs	r1, #0
 8009de6:	4805      	ldr	r0, [pc, #20]	; (8009dfc <MX_I2C2_Init+0x74>)
 8009de8:	f005 f802 	bl	800edf0 <HAL_I2CEx_ConfigDigitalFilter>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8009df2:	f000 fa13 	bl	800a21c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8009df6:	bf00      	nop
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	200010d4 	.word	0x200010d4
 8009e00:	40005800 	.word	0x40005800
 8009e04:	20303e5d 	.word	0x20303e5d

08009e08 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009e0c:	4b23      	ldr	r3, [pc, #140]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e0e:	4a24      	ldr	r2, [pc, #144]	; (8009ea0 <MX_LPUART1_UART_Init+0x98>)
 8009e10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8009e12:	4b22      	ldr	r3, [pc, #136]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009e18:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009e1a:	4b20      	ldr	r3, [pc, #128]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009e20:	4b1e      	ldr	r3, [pc, #120]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009e26:	4b1d      	ldr	r3, [pc, #116]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 8009e2c:	4b1b      	ldr	r3, [pc, #108]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e2e:	2204      	movs	r2, #4
 8009e30:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e32:	4b1a      	ldr	r3, [pc, #104]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009e38:	4b18      	ldr	r3, [pc, #96]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009e3e:	4b17      	ldr	r3, [pc, #92]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8009e44:	4b15      	ldr	r3, [pc, #84]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e46:	2208      	movs	r2, #8
 8009e48:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8009e4a:	4b14      	ldr	r3, [pc, #80]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8009e52:	4812      	ldr	r0, [pc, #72]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e54:	f008 fa66 	bl	8012324 <HAL_HalfDuplex_Init>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8009e5e:	f000 f9dd 	bl	800a21c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e62:	2100      	movs	r1, #0
 8009e64:	480d      	ldr	r0, [pc, #52]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e66:	f00a fb29 	bl	80144bc <HAL_UARTEx_SetTxFifoThreshold>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d001      	beq.n	8009e74 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8009e70:	f000 f9d4 	bl	800a21c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e74:	2100      	movs	r1, #0
 8009e76:	4809      	ldr	r0, [pc, #36]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e78:	f00a fb5e 	bl	8014538 <HAL_UARTEx_SetRxFifoThreshold>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8009e82:	f000 f9cb 	bl	800a21c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8009e86:	4805      	ldr	r0, [pc, #20]	; (8009e9c <MX_LPUART1_UART_Init+0x94>)
 8009e88:	f00a faa5 	bl	80143d6 <HAL_UARTEx_EnableFifoMode>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8009e92:	f000 f9c3 	bl	800a21c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009e96:	bf00      	nop
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20001128 	.word	0x20001128
 8009ea0:	40008000 	.word	0x40008000

08009ea4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8009ea8:	4b22      	ldr	r3, [pc, #136]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009eaa:	4a23      	ldr	r2, [pc, #140]	; (8009f38 <MX_USART2_UART_Init+0x94>)
 8009eac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8009eae:	4b21      	ldr	r3, [pc, #132]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009eb4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009eb6:	4b1f      	ldr	r3, [pc, #124]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8009ebc:	4b1d      	ldr	r3, [pc, #116]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8009ec2:	4b1c      	ldr	r3, [pc, #112]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8009ec8:	4b1a      	ldr	r3, [pc, #104]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009eca:	220c      	movs	r2, #12
 8009ecc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009ece:	4b19      	ldr	r3, [pc, #100]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ed4:	4b17      	ldr	r3, [pc, #92]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009eda:	4b16      	ldr	r3, [pc, #88]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009ee0:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009ee6:	4b13      	ldr	r3, [pc, #76]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8009eec:	4811      	ldr	r0, [pc, #68]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009eee:	f008 f9c9 	bl	8012284 <HAL_UART_Init>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8009ef8:	f000 f990 	bl	800a21c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009efc:	2100      	movs	r1, #0
 8009efe:	480d      	ldr	r0, [pc, #52]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009f00:	f00a fadc 	bl	80144bc <HAL_UARTEx_SetTxFifoThreshold>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8009f0a:	f000 f987 	bl	800a21c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f0e:	2100      	movs	r1, #0
 8009f10:	4808      	ldr	r0, [pc, #32]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009f12:	f00a fb11 	bl	8014538 <HAL_UARTEx_SetRxFifoThreshold>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8009f1c:	f000 f97e 	bl	800a21c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009f20:	4804      	ldr	r0, [pc, #16]	; (8009f34 <MX_USART2_UART_Init+0x90>)
 8009f22:	f00a fa93 	bl	801444c <HAL_UARTEx_DisableFifoMode>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8009f2c:	f000 f976 	bl	800a21c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8009f30:	bf00      	nop
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	200011bc 	.word	0x200011bc
 8009f38:	40004400 	.word	0x40004400

08009f3c <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b092      	sub	sp, #72	; 0x48
 8009f40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8009f42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	605a      	str	r2, [r3, #4]
 8009f4c:	609a      	str	r2, [r3, #8]
 8009f4e:	60da      	str	r2, [r3, #12]
 8009f50:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8009f52:	2300      	movs	r3, #0
 8009f54:	633b      	str	r3, [r7, #48]	; 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 8009f56:	1d3b      	adds	r3, r7, #4
 8009f58:	222c      	movs	r2, #44	; 0x2c
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f00e fe29 	bl	8018bb4 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8009f62:	4b3f      	ldr	r3, [pc, #252]	; (800a060 <MX_RTC_Init+0x124>)
 8009f64:	4a3f      	ldr	r2, [pc, #252]	; (800a064 <MX_RTC_Init+0x128>)
 8009f66:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009f68:	4b3d      	ldr	r3, [pc, #244]	; (800a060 <MX_RTC_Init+0x124>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8009f6e:	4b3c      	ldr	r3, [pc, #240]	; (800a060 <MX_RTC_Init+0x124>)
 8009f70:	227f      	movs	r2, #127	; 0x7f
 8009f72:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8009f74:	4b3a      	ldr	r3, [pc, #232]	; (800a060 <MX_RTC_Init+0x124>)
 8009f76:	22ff      	movs	r2, #255	; 0xff
 8009f78:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009f7a:	4b39      	ldr	r3, [pc, #228]	; (800a060 <MX_RTC_Init+0x124>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009f80:	4b37      	ldr	r3, [pc, #220]	; (800a060 <MX_RTC_Init+0x124>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009f86:	4b36      	ldr	r3, [pc, #216]	; (800a060 <MX_RTC_Init+0x124>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009f8c:	4b34      	ldr	r3, [pc, #208]	; (800a060 <MX_RTC_Init+0x124>)
 8009f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009f92:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8009f94:	4b32      	ldr	r3, [pc, #200]	; (800a060 <MX_RTC_Init+0x124>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8009f9a:	4b31      	ldr	r3, [pc, #196]	; (800a060 <MX_RTC_Init+0x124>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009fa0:	482f      	ldr	r0, [pc, #188]	; (800a060 <MX_RTC_Init+0x124>)
 8009fa2:	f006 fa97 	bl	80104d4 <HAL_RTC_Init>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <MX_RTC_Init+0x74>
	{
		Error_Handler();
 8009fac:	f000 f936 	bl	800a21c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	sTime.Minutes = 0x0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	sTime.Seconds = 0x0;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	643b      	str	r3, [r7, #64]	; 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009fca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009fce:	2201      	movs	r2, #1
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4823      	ldr	r0, [pc, #140]	; (800a060 <MX_RTC_Init+0x124>)
 8009fd4:	f006 fb00 	bl	80105d8 <HAL_RTC_SetTime>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <MX_RTC_Init+0xa6>
	{
		Error_Handler();
 8009fde:	f000 f91d 	bl	800a21c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	sDate.Date = 0x1;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	sDate.Year = 0x0;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ffe:	2201      	movs	r2, #1
 800a000:	4619      	mov	r1, r3
 800a002:	4817      	ldr	r0, [pc, #92]	; (800a060 <MX_RTC_Init+0x124>)
 800a004:	f006 fb84 	bl	8010710 <HAL_RTC_SetDate>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <MX_RTC_Init+0xd6>
	{
		Error_Handler();
 800a00e:	f000 f905 	bl	800a21c <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 800a012:	2300      	movs	r3, #0
 800a014:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x0;
 800a016:	2300      	movs	r3, #0
 800a018:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 800a01e:	2300      	movs	r3, #0
 800a020:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a022:	2300      	movs	r3, #0
 800a024:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a026:	2300      	movs	r3, #0
 800a028:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800a02a:	2300      	movs	r3, #0
 800a02c:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a02e:	2300      	movs	r3, #0
 800a030:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a032:	2300      	movs	r3, #0
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
	sAlarm.AlarmDateWeekDay = 0x1;
 800a036:	2301      	movs	r3, #1
 800a038:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 800a03c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a040:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a042:	1d3b      	adds	r3, r7, #4
 800a044:	2201      	movs	r2, #1
 800a046:	4619      	mov	r1, r3
 800a048:	4805      	ldr	r0, [pc, #20]	; (800a060 <MX_RTC_Init+0x124>)
 800a04a:	f006 fbe7 	bl	801081c <HAL_RTC_SetAlarm>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d001      	beq.n	800a058 <MX_RTC_Init+0x11c>
	{
		Error_Handler();
 800a054:	f000 f8e2 	bl	800a21c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800a058:	bf00      	nop
 800a05a:	3748      	adds	r7, #72	; 0x48
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20001250 	.word	0x20001250
 800a064:	40002800 	.word	0x40002800

0800a068 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800a06c:	4b1b      	ldr	r3, [pc, #108]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a06e:	4a1c      	ldr	r2, [pc, #112]	; (800a0e0 <MX_SPI2_Init+0x78>)
 800a070:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800a072:	4b1a      	ldr	r3, [pc, #104]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a074:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a078:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a07a:	4b18      	ldr	r3, [pc, #96]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a080:	4b16      	ldr	r3, [pc, #88]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a082:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a086:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a088:	4b14      	ldr	r3, [pc, #80]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a08e:	4b13      	ldr	r3, [pc, #76]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a090:	2200      	movs	r2, #0
 800a092:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800a094:	4b11      	ldr	r3, [pc, #68]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a09a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a09c:	4b0f      	ldr	r3, [pc, #60]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a09e:	2200      	movs	r2, #0
 800a0a0:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a0a2:	4b0e      	ldr	r3, [pc, #56]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a0a8:	4b0c      	ldr	r3, [pc, #48]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0ae:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800a0b4:	4b09      	ldr	r3, [pc, #36]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a0b6:	2207      	movs	r2, #7
 800a0b8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a0ba:	4b08      	ldr	r3, [pc, #32]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a0c0:	4b06      	ldr	r3, [pc, #24]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a0c6:	4805      	ldr	r0, [pc, #20]	; (800a0dc <MX_SPI2_Init+0x74>)
 800a0c8:	f006 fd61 	bl	8010b8e <HAL_SPI_Init>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <MX_SPI2_Init+0x6e>
	{
		Error_Handler();
 800a0d2:	f000 f8a3 	bl	800a21c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800a0d6:	bf00      	nop
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20001288 	.word	0x20001288
 800a0e0:	40003800 	.word	0x40003800

0800a0e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0ea:	1d3b      	adds	r3, r7, #4
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	601a      	str	r2, [r3, #0]
 800a0f0:	605a      	str	r2, [r3, #4]
 800a0f2:	609a      	str	r2, [r3, #8]
 800a0f4:	60da      	str	r2, [r3, #12]
 800a0f6:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a0f8:	2001      	movs	r0, #1
 800a0fa:	f7ff fc23 	bl	8009944 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a0fe:	2002      	movs	r0, #2
 800a100:	f7ff fc20 	bl	8009944 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800a104:	2004      	movs	r0, #4
 800a106:	f7ff fc1d 	bl	8009944 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 800a10a:	2200      	movs	r2, #0
 800a10c:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 800a110:	481e      	ldr	r0, [pc, #120]	; (800a18c <MX_GPIO_Init+0xa8>)
 800a112:	f004 fd7d 	bl	800ec10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 800a116:	2200      	movs	r2, #0
 800a118:	f240 2101 	movw	r1, #513	; 0x201
 800a11c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a120:	f004 fd76 	bl	800ec10 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 800a124:	2200      	movs	r2, #0
 800a126:	2102      	movs	r1, #2
 800a128:	4819      	ldr	r0, [pc, #100]	; (800a190 <MX_GPIO_Init+0xac>)
 800a12a:	f004 fd71 	bl	800ec10 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : ADC_SW_Pin FLASH_CS_Pin MB_OC_Pin LED_Pin */
	GPIO_InitStruct.Pin = ADC_SW_Pin|FLASH_CS_Pin|MB_OC_Pin|LED_Pin;
 800a12e:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800a132:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a134:	2301      	movs	r3, #1
 800a136:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a138:	2300      	movs	r3, #0
 800a13a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a13c:	2300      	movs	r3, #0
 800a13e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a140:	1d3b      	adds	r3, r7, #4
 800a142:	4619      	mov	r1, r3
 800a144:	4811      	ldr	r0, [pc, #68]	; (800a18c <MX_GPIO_Init+0xa8>)
 800a146:	f004 fb35 	bl	800e7b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
	GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 800a14a:	f240 2301 	movw	r3, #513	; 0x201
 800a14e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a150:	2301      	movs	r3, #1
 800a152:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a154:	2300      	movs	r3, #0
 800a156:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a158:	2300      	movs	r3, #0
 800a15a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a15c:	1d3b      	adds	r3, r7, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a164:	f004 fb26 	bl	800e7b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MB_CTL_Pin */
	GPIO_InitStruct.Pin = MB_CTL_Pin;
 800a168:	2302      	movs	r3, #2
 800a16a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a16c:	2301      	movs	r3, #1
 800a16e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 800a178:	1d3b      	adds	r3, r7, #4
 800a17a:	4619      	mov	r1, r3
 800a17c:	4804      	ldr	r0, [pc, #16]	; (800a190 <MX_GPIO_Init+0xac>)
 800a17e:	f004 fb19 	bl	800e7b4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800a182:	bf00      	nop
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	48000400 	.word	0x48000400
 800a190:	48000800 	.word	0x48000800

0800a194 <Get_AdcHandle>:
	osDelay(Delay);
}


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 800a194:	b480      	push	{r7}
 800a196:	af00      	add	r7, sp, #0
	return &hadc;
 800a198:	4b02      	ldr	r3, [pc, #8]	; (800a1a4 <Get_AdcHandle+0x10>)
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bc80      	pop	{r7}
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20001070 	.word	0x20001070

0800a1a8 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	af00      	add	r7, sp, #0
	return &huart2;
 800a1ac:	4b02      	ldr	r3, [pc, #8]	; (800a1b8 <Get_DebugHandle+0x10>)
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bc80      	pop	{r7}
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	200011bc 	.word	0x200011bc

0800a1bc <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0
	return &hlpuart1;;
 800a1c0:	4b02      	ldr	r3, [pc, #8]	; (800a1cc <Get_SonarHandle+0x10>)
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	20001128 	.word	0x20001128

0800a1d0 <Get_SpiHandle>:
{
	return &hrtc;
}

SPI_HandleTypeDef   *Get_SpiHandle(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
	return &hspi2;
 800a1d4:	4b02      	ldr	r3, [pc, #8]	; (800a1e0 <Get_SpiHandle+0x10>)
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bc80      	pop	{r7}
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	20001288 	.word	0x20001288

0800a1e4 <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	af00      	add	r7, sp, #0
	return xQueue1Handle;;
 800a1e8:	4b02      	ldr	r3, [pc, #8]	; (800a1f4 <Get_TerminalQueueHandle+0x10>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bc80      	pop	{r7}
 800a1f2:	4770      	bx	lr
 800a1f4:	200012f0 	.word	0x200012f0

0800a1f8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a04      	ldr	r2, [pc, #16]	; (800a218 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d101      	bne.n	800a20e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800a20a:	f002 feb3 	bl	800cf74 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800a20e:	bf00      	nop
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	40012c00 	.word	0x40012c00

0800a21c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800a21c:	b480      	push	{r7}
 800a21e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a220:	b672      	cpsid	i
}
 800a222:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800a224:	e7fe      	b.n	800a224 <Error_Handler+0x8>

0800a226 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800a226:	b480      	push	{r7}
 800a228:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800a22a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a23a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a23e:	bf00      	nop
 800a240:	46bd      	mov	sp, r7
 800a242:	bc80      	pop	{r7}
 800a244:	4770      	bx	lr

0800a246 <LL_AHB2_GRP1_EnableClock>:
{
 800a246:	b480      	push	{r7}
 800a248:	b085      	sub	sp, #20
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a24e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a25e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4013      	ands	r3, r2
 800a268:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a26a:	68fb      	ldr	r3, [r7, #12]
}
 800a26c:	bf00      	nop
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	bc80      	pop	{r7}
 800a274:	4770      	bx	lr

0800a276 <LL_APB1_GRP1_EnableClock>:
{
 800a276:	b480      	push	{r7}
 800a278:	b085      	sub	sp, #20
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a27e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a282:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a28e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a292:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4013      	ands	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a29a:	68fb      	ldr	r3, [r7, #12]
}
 800a29c:	bf00      	nop
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bc80      	pop	{r7}
 800a2a4:	4770      	bx	lr

0800a2a6 <LL_APB1_GRP2_EnableClock>:
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800a2ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800a2be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
}
 800a2cc:	bf00      	nop
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bc80      	pop	{r7}
 800a2d4:	4770      	bx	lr

0800a2d6 <LL_APB1_GRP1_DisableClock>:
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800a2de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	43db      	mvns	r3, r3
 800a2e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	658b      	str	r3, [r1, #88]	; 0x58
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bc80      	pop	{r7}
 800a2f8:	4770      	bx	lr

0800a2fa <LL_APB1_GRP2_DisableClock>:
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800a302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a306:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	43db      	mvns	r3, r3
 800a30c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a310:	4013      	ands	r3, r2
 800a312:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	bc80      	pop	{r7}
 800a31c:	4770      	bx	lr

0800a31e <LL_APB2_GRP1_EnableClock>:
{
 800a31e:	b480      	push	{r7}
 800a320:	b085      	sub	sp, #20
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800a326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a32a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a32c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4313      	orrs	r3, r2
 800a334:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a33a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4013      	ands	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	bf00      	nop
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	bc80      	pop	{r7}
 800a34c:	4770      	bx	lr

0800a34e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a352:	2200      	movs	r2, #0
 800a354:	210f      	movs	r1, #15
 800a356:	f06f 0001 	mvn.w	r0, #1
 800a35a:	f003 ff1e 	bl	800e19a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a35e:	bf00      	nop
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a36c:	f107 030c 	add.w	r3, r7, #12
 800a370:	2200      	movs	r2, #0
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	605a      	str	r2, [r3, #4]
 800a376:	609a      	str	r2, [r3, #8]
 800a378:	60da      	str	r2, [r3, #12]
 800a37a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0c      	ldr	r2, [pc, #48]	; (800a3b4 <HAL_ADC_MspInit+0x50>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d112      	bne.n	800a3ac <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800a386:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a38a:	f7ff ffc8 	bl	800a31e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a38e:	2002      	movs	r0, #2
 800a390:	f7ff ff59 	bl	800a246 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a394:	2308      	movs	r3, #8
 800a396:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a398:	2303      	movs	r3, #3
 800a39a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3a0:	f107 030c 	add.w	r3, r7, #12
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4804      	ldr	r0, [pc, #16]	; (800a3b8 <HAL_ADC_MspInit+0x54>)
 800a3a8:	f004 fa04 	bl	800e7b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 800a3ac:	bf00      	nop
 800a3ae:	3720      	adds	r7, #32
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	40012400 	.word	0x40012400
 800a3b8:	48000400 	.word	0x48000400

0800a3bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b096      	sub	sp, #88	; 0x58
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	601a      	str	r2, [r3, #0]
 800a3cc:	605a      	str	r2, [r3, #4]
 800a3ce:	609a      	str	r2, [r3, #8]
 800a3d0:	60da      	str	r2, [r3, #12]
 800a3d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a3d4:	f107 030c 	add.w	r3, r7, #12
 800a3d8:	2238      	movs	r2, #56	; 0x38
 800a3da:	2100      	movs	r1, #0
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f00e fbe9 	bl	8018bb4 <memset>
  if(hi2c->Instance==I2C2)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a21      	ldr	r2, [pc, #132]	; (800a46c <HAL_I2C_MspInit+0xb0>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d13b      	bne.n	800a464 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a3ec:	2380      	movs	r3, #128	; 0x80
 800a3ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a3f0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800a3f4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a3f6:	f107 030c 	add.w	r3, r7, #12
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f005 ff50 	bl	80102a0 <HAL_RCCEx_PeriphCLKConfig>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800a406:	f7ff ff09 	bl	800a21c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a40a:	2001      	movs	r0, #1
 800a40c:	f7ff ff1b 	bl	800a246 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a410:	2002      	movs	r0, #2
 800a412:	f7ff ff18 	bl	800a246 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a41a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a41c:	2312      	movs	r3, #18
 800a41e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a420:	2300      	movs	r3, #0
 800a422:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a424:	2300      	movs	r3, #0
 800a426:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a428:	2304      	movs	r3, #4
 800a42a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a42c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a430:	4619      	mov	r1, r3
 800a432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a436:	f004 f9bd 	bl	800e7b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a43a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a43e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a440:	2312      	movs	r3, #18
 800a442:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a444:	2300      	movs	r3, #0
 800a446:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a448:	2300      	movs	r3, #0
 800a44a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a44c:	2304      	movs	r3, #4
 800a44e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a450:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a454:	4619      	mov	r1, r3
 800a456:	4806      	ldr	r0, [pc, #24]	; (800a470 <HAL_I2C_MspInit+0xb4>)
 800a458:	f004 f9ac 	bl	800e7b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a45c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a460:	f7ff ff09 	bl	800a276 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800a464:	bf00      	nop
 800a466:	3758      	adds	r7, #88	; 0x58
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	40005800 	.word	0x40005800
 800a470:	48000400 	.word	0x48000400

0800a474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b096      	sub	sp, #88	; 0x58
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a47c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	605a      	str	r2, [r3, #4]
 800a486:	609a      	str	r2, [r3, #8]
 800a488:	60da      	str	r2, [r3, #12]
 800a48a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a48c:	f107 030c 	add.w	r3, r7, #12
 800a490:	2238      	movs	r2, #56	; 0x38
 800a492:	2100      	movs	r1, #0
 800a494:	4618      	mov	r0, r3
 800a496:	f00e fb8d 	bl	8018bb4 <memset>
  if(huart->Instance==LPUART1)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a30      	ldr	r2, [pc, #192]	; (800a560 <HAL_UART_MspInit+0xec>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d125      	bne.n	800a4f0 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a4a4:	2320      	movs	r3, #32
 800a4a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 800a4a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4ac:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a4ae:	f107 030c 	add.w	r3, r7, #12
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f005 fef4 	bl	80102a0 <HAL_RCCEx_PeriphCLKConfig>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a4be:	f7ff fead 	bl	800a21c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	f7ff feef 	bl	800a2a6 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4c8:	2004      	movs	r0, #4
 800a4ca:	f7ff febc 	bl	800a246 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a4d2:	2312      	movs	r3, #18
 800a4d4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a4de:	2308      	movs	r3, #8
 800a4e0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a4e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	481e      	ldr	r0, [pc, #120]	; (800a564 <HAL_UART_MspInit+0xf0>)
 800a4ea:	f004 f963 	bl	800e7b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a4ee:	e033      	b.n	800a558 <HAL_UART_MspInit+0xe4>
  else if(huart->Instance==USART2)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a1c      	ldr	r2, [pc, #112]	; (800a568 <HAL_UART_MspInit+0xf4>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d12e      	bne.n	800a558 <HAL_UART_MspInit+0xe4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a4fe:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800a502:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a504:	f107 030c 	add.w	r3, r7, #12
 800a508:	4618      	mov	r0, r3
 800a50a:	f005 fec9 	bl	80102a0 <HAL_RCCEx_PeriphCLKConfig>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 800a514:	f7ff fe82 	bl	800a21c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a518:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a51c:	f7ff feab 	bl	800a276 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a520:	2001      	movs	r0, #1
 800a522:	f7ff fe90 	bl	800a246 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800a526:	230c      	movs	r3, #12
 800a528:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a52a:	2302      	movs	r3, #2
 800a52c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a52e:	2300      	movs	r3, #0
 800a530:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a532:	2300      	movs	r3, #0
 800a534:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a536:	2307      	movs	r3, #7
 800a538:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a53a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a53e:	4619      	mov	r1, r3
 800a540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a544:	f004 f936 	bl	800e7b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a548:	2200      	movs	r2, #0
 800a54a:	2105      	movs	r1, #5
 800a54c:	2025      	movs	r0, #37	; 0x25
 800a54e:	f003 fe24 	bl	800e19a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a552:	2025      	movs	r0, #37	; 0x25
 800a554:	f003 fe3b 	bl	800e1ce <HAL_NVIC_EnableIRQ>
}
 800a558:	bf00      	nop
 800a55a:	3758      	adds	r7, #88	; 0x58
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	40008000 	.word	0x40008000
 800a564:	48000800 	.word	0x48000800
 800a568:	40004400 	.word	0x40004400

0800a56c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a0f      	ldr	r2, [pc, #60]	; (800a5b8 <HAL_UART_MspDeInit+0x4c>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d107      	bne.n	800a58e <HAL_UART_MspDeInit+0x22>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800a57e:	2001      	movs	r0, #1
 800a580:	f7ff febb 	bl	800a2fa <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 800a584:	2102      	movs	r1, #2
 800a586:	480d      	ldr	r0, [pc, #52]	; (800a5bc <HAL_UART_MspDeInit+0x50>)
 800a588:	f004 fa74 	bl	800ea74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800a58c:	e010      	b.n	800a5b0 <HAL_UART_MspDeInit+0x44>
  else if(huart->Instance==USART2)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a0b      	ldr	r2, [pc, #44]	; (800a5c0 <HAL_UART_MspDeInit+0x54>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d10b      	bne.n	800a5b0 <HAL_UART_MspDeInit+0x44>
    __HAL_RCC_USART2_CLK_DISABLE();
 800a598:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a59c:	f7ff fe9b 	bl	800a2d6 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 800a5a0:	210c      	movs	r1, #12
 800a5a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5a6:	f004 fa65 	bl	800ea74 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800a5aa:	2025      	movs	r0, #37	; 0x25
 800a5ac:	f003 fe1d 	bl	800e1ea <HAL_NVIC_DisableIRQ>
}
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	40008000 	.word	0x40008000
 800a5bc:	48000800 	.word	0x48000800
 800a5c0:	40004400 	.word	0x40004400

0800a5c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b090      	sub	sp, #64	; 0x40
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a5cc:	f107 0308 	add.w	r3, r7, #8
 800a5d0:	2238      	movs	r2, #56	; 0x38
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f00e faed 	bl	8018bb4 <memset>
  if(hrtc->Instance==RTC)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a0e      	ldr	r2, [pc, #56]	; (800a618 <HAL_RTC_MspInit+0x54>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d115      	bne.n	800a610 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a5e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a5e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a5ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5ee:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a5f0:	f107 0308 	add.w	r3, r7, #8
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f005 fe53 	bl	80102a0 <HAL_RCCEx_PeriphCLKConfig>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a600:	f7ff fe0c 	bl	800a21c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a604:	f7ff fe0f 	bl	800a226 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a608:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a60c:	f7ff fe33 	bl	800a276 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a610:	bf00      	nop
 800a612:	3740      	adds	r7, #64	; 0x40
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	40002800 	.word	0x40002800

0800a61c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b096      	sub	sp, #88	; 0x58
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a624:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a628:	2200      	movs	r2, #0
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	605a      	str	r2, [r3, #4]
 800a62e:	609a      	str	r2, [r3, #8]
 800a630:	60da      	str	r2, [r3, #12]
 800a632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a634:	f107 030c 	add.w	r3, r7, #12
 800a638:	2238      	movs	r2, #56	; 0x38
 800a63a:	2100      	movs	r1, #0
 800a63c:	4618      	mov	r0, r3
 800a63e:	f00e fab9 	bl	8018bb4 <memset>
  if(hspi->Instance==SPI2)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a21      	ldr	r2, [pc, #132]	; (800a6cc <HAL_SPI_MspInit+0xb0>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d13b      	bne.n	800a6c4 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800a64c:	2310      	movs	r3, #16
 800a64e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 800a650:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a654:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a656:	f107 030c 	add.w	r3, r7, #12
 800a65a:	4618      	mov	r0, r3
 800a65c:	f005 fe20 	bl	80102a0 <HAL_RCCEx_PeriphCLKConfig>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800a666:	f7ff fdd9 	bl	800a21c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a66a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a66e:	f7ff fe02 	bl	800a276 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a672:	2002      	movs	r0, #2
 800a674:	f7ff fde7 	bl	800a246 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a678:	2001      	movs	r0, #1
 800a67a:	f7ff fde4 	bl	800a246 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800a67e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800a682:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a684:	2302      	movs	r3, #2
 800a686:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a688:	2301      	movs	r3, #1
 800a68a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a68c:	2300      	movs	r3, #0
 800a68e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a690:	2305      	movs	r3, #5
 800a692:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a694:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a698:	4619      	mov	r1, r3
 800a69a:	480d      	ldr	r0, [pc, #52]	; (800a6d0 <HAL_SPI_MspInit+0xb4>)
 800a69c:	f004 f88a 	bl	800e7b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a6a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6a4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a6b2:	2305      	movs	r3, #5
 800a6b4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a6c0:	f004 f878 	bl	800e7b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a6c4:	bf00      	nop
 800a6c6:	3758      	adds	r7, #88	; 0x58
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	40003800 	.word	0x40003800
 800a6d0:	48000400 	.word	0x48000400

0800a6d4 <LL_APB2_GRP1_EnableClock>:
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800a6dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a6e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a6ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
}
 800a6fa:	bf00      	nop
 800a6fc:	3714      	adds	r7, #20
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bc80      	pop	{r7}
 800a702:	4770      	bx	lr

0800a704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08c      	sub	sp, #48	; 0x30
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800a710:	2300      	movs	r3, #0
 800a712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a71a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a71e:	f7ff ffd9 	bl	800a6d4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a722:	f107 0208 	add.w	r2, r7, #8
 800a726:	f107 030c 	add.w	r3, r7, #12
 800a72a:	4611      	mov	r1, r2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f005 fbd3 	bl	800fed8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800a732:	f005 fbbf 	bl	800feb4 <HAL_RCC_GetPCLK2Freq>
 800a736:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	4a21      	ldr	r2, [pc, #132]	; (800a7c0 <HAL_InitTick+0xbc>)
 800a73c:	fba2 2303 	umull	r2, r3, r2, r3
 800a740:	0c9b      	lsrs	r3, r3, #18
 800a742:	3b01      	subs	r3, #1
 800a744:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a746:	4b1f      	ldr	r3, [pc, #124]	; (800a7c4 <HAL_InitTick+0xc0>)
 800a748:	4a1f      	ldr	r2, [pc, #124]	; (800a7c8 <HAL_InitTick+0xc4>)
 800a74a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800a74c:	4b1d      	ldr	r3, [pc, #116]	; (800a7c4 <HAL_InitTick+0xc0>)
 800a74e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a752:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a754:	4a1b      	ldr	r2, [pc, #108]	; (800a7c4 <HAL_InitTick+0xc0>)
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a75a:	4b1a      	ldr	r3, [pc, #104]	; (800a7c4 <HAL_InitTick+0xc0>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a760:	4b18      	ldr	r3, [pc, #96]	; (800a7c4 <HAL_InitTick+0xc0>)
 800a762:	2200      	movs	r2, #0
 800a764:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800a766:	4817      	ldr	r0, [pc, #92]	; (800a7c4 <HAL_InitTick+0xc0>)
 800a768:	f007 fafe 	bl	8011d68 <HAL_TIM_Base_Init>
 800a76c:	4603      	mov	r3, r0
 800a76e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800a772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a776:	2b00      	cmp	r3, #0
 800a778:	d11b      	bne.n	800a7b2 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800a77a:	4812      	ldr	r0, [pc, #72]	; (800a7c4 <HAL_InitTick+0xc0>)
 800a77c:	f007 fb54 	bl	8011e28 <HAL_TIM_Base_Start_IT>
 800a780:	4603      	mov	r3, r0
 800a782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800a786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d111      	bne.n	800a7b2 <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a78e:	2018      	movs	r0, #24
 800a790:	f003 fd1d 	bl	800e1ce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b0f      	cmp	r3, #15
 800a798:	d808      	bhi.n	800a7ac <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800a79a:	2200      	movs	r2, #0
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	2018      	movs	r0, #24
 800a7a0:	f003 fcfb 	bl	800e19a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a7a4:	4a09      	ldr	r2, [pc, #36]	; (800a7cc <HAL_InitTick+0xc8>)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	e002      	b.n	800a7b2 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800a7b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3730      	adds	r7, #48	; 0x30
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	431bde83 	.word	0x431bde83
 800a7c4:	20001310 	.word	0x20001310
 800a7c8:	40012c00 	.word	0x40012c00
 800a7cc:	20000088 	.word	0x20000088

0800a7d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a7d4:	e7fe      	b.n	800a7d4 <NMI_Handler+0x4>

0800a7d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a7da:	e7fe      	b.n	800a7da <HardFault_Handler+0x4>

0800a7dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a7e0:	e7fe      	b.n	800a7e0 <MemManage_Handler+0x4>

0800a7e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a7e6:	e7fe      	b.n	800a7e6 <BusFault_Handler+0x4>

0800a7e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a7ec:	e7fe      	b.n	800a7ec <UsageFault_Handler+0x4>

0800a7ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a7f2:	bf00      	nop
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bc80      	pop	{r7}
 800a7f8:	4770      	bx	lr
	...

0800a7fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a800:	4802      	ldr	r0, [pc, #8]	; (800a80c <TIM1_UP_IRQHandler+0x10>)
 800a802:	f007 fb5d 	bl	8011ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a806:	bf00      	nop
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	20001310 	.word	0x20001310

0800a810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a814:	4802      	ldr	r0, [pc, #8]	; (800a820 <USART2_IRQHandler+0x10>)
 800a816:	f007 ff73 	bl	8012700 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a81a:	bf00      	nop
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	200011bc 	.word	0x200011bc

0800a824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a824:	b480      	push	{r7}
 800a826:	af00      	add	r7, sp, #0
  return 1;
 800a828:	2301      	movs	r3, #1
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bc80      	pop	{r7}
 800a830:	4770      	bx	lr

0800a832 <_kill>:

int _kill(int pid, int sig)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b082      	sub	sp, #8
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a83c:	f00e fa78 	bl	8018d30 <__errno>
 800a840:	4603      	mov	r3, r0
 800a842:	2216      	movs	r2, #22
 800a844:	601a      	str	r2, [r3, #0]
  return -1;
 800a846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <_exit>:

void _exit (int status)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a85a:	f04f 31ff 	mov.w	r1, #4294967295
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7ff ffe7 	bl	800a832 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a864:	e7fe      	b.n	800a864 <_exit+0x12>

0800a866 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b086      	sub	sp, #24
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	60f8      	str	r0, [r7, #12]
 800a86e:	60b9      	str	r1, [r7, #8]
 800a870:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a872:	2300      	movs	r3, #0
 800a874:	617b      	str	r3, [r7, #20]
 800a876:	e00a      	b.n	800a88e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a878:	f3af 8000 	nop.w
 800a87c:	4601      	mov	r1, r0
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	60ba      	str	r2, [r7, #8]
 800a884:	b2ca      	uxtb	r2, r1
 800a886:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	3301      	adds	r3, #1
 800a88c:	617b      	str	r3, [r7, #20]
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	429a      	cmp	r2, r3
 800a894:	dbf0      	blt.n	800a878 <_read+0x12>
  }

  return len;
 800a896:	687b      	ldr	r3, [r7, #4]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	e009      	b.n	800a8c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	60ba      	str	r2, [r7, #8]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff f8aa 	bl	8009a14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	dbf1      	blt.n	800a8b2 <_write+0x12>
  }
  return len;
 800a8ce:	687b      	ldr	r3, [r7, #4]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <_close>:

int _close(int file)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a8e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bc80      	pop	{r7}
 800a8ec:	4770      	bx	lr

0800a8ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a8fe:	605a      	str	r2, [r3, #4]
  return 0;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	bc80      	pop	{r7}
 800a90a:	4770      	bx	lr

0800a90c <_isatty>:

int _isatty(int file)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a914:	2301      	movs	r3, #1
}
 800a916:	4618      	mov	r0, r3
 800a918:	370c      	adds	r7, #12
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bc80      	pop	{r7}
 800a91e:	4770      	bx	lr

0800a920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	bc80      	pop	{r7}
 800a936:	4770      	bx	lr

0800a938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a940:	4a14      	ldr	r2, [pc, #80]	; (800a994 <_sbrk+0x5c>)
 800a942:	4b15      	ldr	r3, [pc, #84]	; (800a998 <_sbrk+0x60>)
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a94c:	4b13      	ldr	r3, [pc, #76]	; (800a99c <_sbrk+0x64>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a954:	4b11      	ldr	r3, [pc, #68]	; (800a99c <_sbrk+0x64>)
 800a956:	4a12      	ldr	r2, [pc, #72]	; (800a9a0 <_sbrk+0x68>)
 800a958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a95a:	4b10      	ldr	r3, [pc, #64]	; (800a99c <_sbrk+0x64>)
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4413      	add	r3, r2
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	429a      	cmp	r2, r3
 800a966:	d207      	bcs.n	800a978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a968:	f00e f9e2 	bl	8018d30 <__errno>
 800a96c:	4603      	mov	r3, r0
 800a96e:	220c      	movs	r2, #12
 800a970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a972:	f04f 33ff 	mov.w	r3, #4294967295
 800a976:	e009      	b.n	800a98c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a978:	4b08      	ldr	r3, [pc, #32]	; (800a99c <_sbrk+0x64>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a97e:	4b07      	ldr	r3, [pc, #28]	; (800a99c <_sbrk+0x64>)
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4413      	add	r3, r2
 800a986:	4a05      	ldr	r2, [pc, #20]	; (800a99c <_sbrk+0x64>)
 800a988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a98a:	68fb      	ldr	r3, [r7, #12]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	20010000 	.word	0x20010000
 800a998:	00000400 	.word	0x00000400
 800a99c:	2000135c 	.word	0x2000135c
 800a9a0:	200058b8 	.word	0x200058b8

0800a9a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800a9a8:	4b03      	ldr	r3, [pc, #12]	; (800a9b8 <SystemInit+0x14>)
 800a9aa:	4a04      	ldr	r2, [pc, #16]	; (800a9bc <SystemInit+0x18>)
 800a9ac:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800a9ae:	bf00      	nop
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bc80      	pop	{r7}
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	e000ed00 	.word	0xe000ed00
 800a9bc:	08008400 	.word	0x08008400

0800a9c0 <LL_AHB2_GRP1_EnableClock>:
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a9c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a9d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
}
 800a9e6:	bf00      	nop
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bc80      	pop	{r7}
 800a9ee:	4770      	bx	lr

0800a9f0 <LL_APB1_GRP1_EnableClock>:
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a9f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a9fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800aa08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4013      	ands	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800aa14:	68fb      	ldr	r3, [r7, #12]
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bc80      	pop	{r7}
 800aa1e:	4770      	bx	lr

0800aa20 <uartUserDownload>:
/**
 * @brief Download a file via serial port
 **/

void uartUserDownload(void)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
   uint8_t number[11] = {0};
 800aa26:	2300      	movs	r3, #0
 800aa28:	60bb      	str	r3, [r7, #8]
 800aa2a:	f107 030c 	add.w	r3, r7, #12
 800aa2e:	2200      	movs	r2, #0
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	f8c3 2003 	str.w	r2, [r3, #3]
   uint32_t size = 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	607b      	str	r3, [r7, #4]
   COM_StatusTypeDef result;

   cboot_error_t cboot_error;

   //Get exclusive access
   osMutexWait(iapMutexHandle, osWaitForever);
 800aa3a:	4b6b      	ldr	r3, [pc, #428]	; (800abe8 <uartUserDownload+0x1c8>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f04f 31ff 	mov.w	r1, #4294967295
 800aa42:	4618      	mov	r0, r3
 800aa44:	f00a fc62 	bl	801530c <osMutexWait>

   //Suspend scheduler
   osThreadSuspendAll();
 800aa48:	f00a fd0c 	bl	8015464 <osThreadSuspendAll>

#if 1
   //Debug message
   TRACE_INFO("\r\n");
 800aa4c:	f7fe fd5b 	bl	8009506 <osSuspendAllTasks>
 800aa50:	4b66      	ldr	r3, [pc, #408]	; (800abec <uartUserDownload+0x1cc>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	2202      	movs	r2, #2
 800aa58:	2101      	movs	r1, #1
 800aa5a:	4865      	ldr	r0, [pc, #404]	; (800abf0 <uartUserDownload+0x1d0>)
 800aa5c:	f00d ff82 	bl	8018964 <fwrite>
 800aa60:	f7fe fd5c 	bl	800951c <osResumeAllTasks>
   TRACE_INFO("Starting firmware update...\r\n");
 800aa64:	f7fe fd4f 	bl	8009506 <osSuspendAllTasks>
 800aa68:	4b60      	ldr	r3, [pc, #384]	; (800abec <uartUserDownload+0x1cc>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	221d      	movs	r2, #29
 800aa70:	2101      	movs	r1, #1
 800aa72:	4860      	ldr	r0, [pc, #384]	; (800abf4 <uartUserDownload+0x1d4>)
 800aa74:	f00d ff76 	bl	8018964 <fwrite>
 800aa78:	f7fe fd50 	bl	800951c <osResumeAllTasks>



   //Get default IAP settings
   iapGetDefaultSettings(&iapSettings);
 800aa7c:	485e      	ldr	r0, [pc, #376]	; (800abf8 <uartUserDownload+0x1d8>)
 800aa7e:	f000 fcb5 	bl	800b3ec <iapGetDefaultSettings>
   iapSettings.imageInCrypto.cipherMode                     = IAP_SETTING_CIPHER_MODE;
   iapSettings.imageInCrypto.cipherKey                      = IAP_SETTING_CIPHER_KEY;
   iapSettings.imageInCrypto.cipherKeyLen                   = IAP_SETTING_CIHPER_KEY_LEN;
#else
   //User IAP settings configuration
   iapSettings.imageInCrypto.verifySettings.verifyMethod    = IAP_VERIFY_METHOD;
 800aa82:	4b5d      	ldr	r3, [pc, #372]	; (800abf8 <uartUserDownload+0x1d8>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	721a      	strb	r2, [r3, #8]
   iapSettings.imageInCrypto.verifySettings.integrityAlgo   = IAP_SETTING_INTEGRITY_ALGO;
 800aa88:	4b5b      	ldr	r3, [pc, #364]	; (800abf8 <uartUserDownload+0x1d8>)
 800aa8a:	4a5c      	ldr	r2, [pc, #368]	; (800abfc <uartUserDownload+0x1dc>)
 800aa8c:	60da      	str	r2, [r3, #12]
#endif
   //User IAP primary(internal flash) memory driver
   iapSettings.primaryFlashDriver             = IAP_SETTING_PRM_MEM_DRIVER;
 800aa8e:	4b5a      	ldr	r3, [pc, #360]	; (800abf8 <uartUserDownload+0x1d8>)
 800aa90:	4a5b      	ldr	r2, [pc, #364]	; (800ac00 <uartUserDownload+0x1e0>)
 800aa92:	605a      	str	r2, [r3, #4]
   //User IAP secondary(external flash) memory driver
   iapSettings.secondaryFlashDriver           = IAP_SETTING_SRD_MEM_DRIVER;
 800aa94:	4b58      	ldr	r3, [pc, #352]	; (800abf8 <uartUserDownload+0x1d8>)
 800aa96:	4a5b      	ldr	r2, [pc, #364]	; (800ac04 <uartUserDownload+0x1e4>)
 800aa98:	611a      	str	r2, [r3, #16]

   //User IAP first secondary memory slot configuration
   iapSettings.addrSlot1                       = IAP_SETTING_SRD_MEM_SLOT_1_ADDR;
 800aa9a:	4b57      	ldr	r3, [pc, #348]	; (800abf8 <uartUserDownload+0x1d8>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	839a      	strh	r2, [r3, #28]
   iapSettings.sizeSlot1                       = IAP_SETTING_SRD_MEM_SLOT_1_SIZE;
 800aaa0:	4b55      	ldr	r3, [pc, #340]	; (800abf8 <uartUserDownload+0x1d8>)
 800aaa2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800aaa6:	621a      	str	r2, [r3, #32]
#if defined(APP_DEMO_3)
   iapSettings.appVersion = 0x00030000;
#elif defined(APP_DEMO_2)
   iapSettings.appVersion = 0x00020000;
#else
   iapSettings.appVersion = 0x00010000;
 800aaa8:	4b53      	ldr	r3, [pc, #332]	; (800abf8 <uartUserDownload+0x1d8>)
 800aaaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800aaae:	601a      	str	r2, [r3, #0]
#endif

   //Initialize IAP Application context
   cboot_error = iapInit(&iapContext, &iapSettings);
 800aab0:	4951      	ldr	r1, [pc, #324]	; (800abf8 <uartUserDownload+0x1d8>)
 800aab2:	4855      	ldr	r0, [pc, #340]	; (800ac08 <uartUserDownload+0x1e8>)
 800aab4:	f000 fcaa 	bl	800b40c <iapInit>
 800aab8:	4603      	mov	r3, r0
 800aaba:	82fb      	strh	r3, [r7, #22]
   //Is any error?
   if(cboot_error != CBOOT_NO_ERROR)
 800aabc:	8afb      	ldrh	r3, [r7, #22]
 800aabe:	f240 224b 	movw	r2, #587	; 0x24b
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d00c      	beq.n	800aae0 <uartUserDownload+0xc0>
   {
      //Debug message
      TRACE_ERROR("Failed to initialize IAP!\r\n");
 800aac6:	f7fe fd1e 	bl	8009506 <osSuspendAllTasks>
 800aaca:	4b48      	ldr	r3, [pc, #288]	; (800abec <uartUserDownload+0x1cc>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	221b      	movs	r2, #27
 800aad2:	2101      	movs	r1, #1
 800aad4:	484d      	ldr	r0, [pc, #308]	; (800ac0c <uartUserDownload+0x1ec>)
 800aad6:	f00d ff45 	bl	8018964 <fwrite>
 800aada:	f7fe fd1f 	bl	800951c <osResumeAllTasks>
 800aade:	e078      	b.n	800abd2 <uartUserDownload+0x1b2>
   }
   else
#endif
   {
      Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\r\n");
 800aae0:	484b      	ldr	r0, [pc, #300]	; (800ac10 <uartUserDownload+0x1f0>)
 800aae2:	f7fe fef7 	bl	80098d4 <Serial_PutString>
      result = Ymodem_Receive( &size );
 800aae6:	1d3b      	adds	r3, r7, #4
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 fad3 	bl	800b094 <Ymodem_Receive>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	757b      	strb	r3, [r7, #21]
      if (result == COM_OK)
 800aaf2:	7d7b      	ldrb	r3, [r7, #21]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d154      	bne.n	800aba2 <uartUserDownload+0x182>
      {
         Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 800aaf8:	4846      	ldr	r0, [pc, #280]	; (800ac14 <uartUserDownload+0x1f4>)
 800aafa:	f7fe feeb 	bl	80098d4 <Serial_PutString>
         Serial_PutString(aFileName);
 800aafe:	4846      	ldr	r0, [pc, #280]	; (800ac18 <uartUserDownload+0x1f8>)
 800ab00:	f7fe fee8 	bl	80098d4 <Serial_PutString>
         Int2Str(number, size);
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	f107 0308 	add.w	r3, r7, #8
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe fd99 	bl	8009644 <Int2Str>
         Serial_PutString((uint8_t *)"\r\n Size: ");
 800ab12:	4842      	ldr	r0, [pc, #264]	; (800ac1c <uartUserDownload+0x1fc>)
 800ab14:	f7fe fede 	bl	80098d4 <Serial_PutString>
         Serial_PutString(number);
 800ab18:	f107 0308 	add.w	r3, r7, #8
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fe fed9 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t *)" Bytes\r\n");
 800ab22:	483f      	ldr	r0, [pc, #252]	; (800ac20 <uartUserDownload+0x200>)
 800ab24:	f7fe fed6 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t *)"-------------------\r\n");
 800ab28:	483e      	ldr	r0, [pc, #248]	; (800ac24 <uartUserDownload+0x204>)
 800ab2a:	f7fe fed3 	bl	80098d4 <Serial_PutString>
#if 1
         cboot_error = iapFinalize(&iapContext);
 800ab2e:	4836      	ldr	r0, [pc, #216]	; (800ac08 <uartUserDownload+0x1e8>)
 800ab30:	f000 fd72 	bl	800b618 <iapFinalize>
 800ab34:	4603      	mov	r3, r0
 800ab36:	82fb      	strh	r3, [r7, #22]
         if(cboot_error != CBOOT_NO_ERROR)
 800ab38:	8afb      	ldrh	r3, [r7, #22]
 800ab3a:	f240 224b 	movw	r2, #587	; 0x24b
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d00c      	beq.n	800ab5c <uartUserDownload+0x13c>
         {
            //Debug message
            TRACE_ERROR("Failed to finalize firmware update!\r\n");
 800ab42:	f7fe fce0 	bl	8009506 <osSuspendAllTasks>
 800ab46:	4b29      	ldr	r3, [pc, #164]	; (800abec <uartUserDownload+0x1cc>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	2225      	movs	r2, #37	; 0x25
 800ab4e:	2101      	movs	r1, #1
 800ab50:	4835      	ldr	r0, [pc, #212]	; (800ac28 <uartUserDownload+0x208>)
 800ab52:	f00d ff07 	bl	8018964 <fwrite>
 800ab56:	f7fe fce1 	bl	800951c <osResumeAllTasks>
 800ab5a:	e03a      	b.n	800abd2 <uartUserDownload+0x1b2>
         }
         else
         {
        	//DEbug message
        	TRACE_INFO("Update image successfully processed. Rebooting to finalize update...\r\n");
 800ab5c:	f7fe fcd3 	bl	8009506 <osSuspendAllTasks>
 800ab60:	4b22      	ldr	r3, [pc, #136]	; (800abec <uartUserDownload+0x1cc>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	2246      	movs	r2, #70	; 0x46
 800ab68:	2101      	movs	r1, #1
 800ab6a:	4830      	ldr	r0, [pc, #192]	; (800ac2c <uartUserDownload+0x20c>)
 800ab6c:	f00d fefa 	bl	8018964 <fwrite>
 800ab70:	f7fe fcd4 	bl	800951c <osResumeAllTasks>

            cboot_error = iapReboot(&iapContext);
 800ab74:	4824      	ldr	r0, [pc, #144]	; (800ac08 <uartUserDownload+0x1e8>)
 800ab76:	f000 fdb5 	bl	800b6e4 <iapReboot>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	82fb      	strh	r3, [r7, #22]
            if(cboot_error != CBOOT_NO_ERROR)
 800ab7e:	8afb      	ldrh	r3, [r7, #22]
 800ab80:	f240 224b 	movw	r2, #587	; 0x24b
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d024      	beq.n	800abd2 <uartUserDownload+0x1b2>
            {
               //Debug message
               TRACE_ERROR("Failed to reboot!\r\n");
 800ab88:	f7fe fcbd 	bl	8009506 <osSuspendAllTasks>
 800ab8c:	4b17      	ldr	r3, [pc, #92]	; (800abec <uartUserDownload+0x1cc>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	2213      	movs	r2, #19
 800ab94:	2101      	movs	r1, #1
 800ab96:	4826      	ldr	r0, [pc, #152]	; (800ac30 <uartUserDownload+0x210>)
 800ab98:	f00d fee4 	bl	8018964 <fwrite>
 800ab9c:	f7fe fcbe 	bl	800951c <osResumeAllTasks>
 800aba0:	e017      	b.n	800abd2 <uartUserDownload+0x1b2>
            }
         }
#endif
      }
      else if (result == COM_LIMIT)
 800aba2:	7d7b      	ldrb	r3, [r7, #21]
 800aba4:	2b05      	cmp	r3, #5
 800aba6:	d103      	bne.n	800abb0 <uartUserDownload+0x190>
      {
         Serial_PutString((uint8_t *)"\r\n\r\nThe image size is higher than the allowed space memory!\r\n");
 800aba8:	4822      	ldr	r0, [pc, #136]	; (800ac34 <uartUserDownload+0x214>)
 800abaa:	f7fe fe93 	bl	80098d4 <Serial_PutString>
 800abae:	e010      	b.n	800abd2 <uartUserDownload+0x1b2>
      }
      else if (result == COM_DATA)
 800abb0:	7d7b      	ldrb	r3, [r7, #21]
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	d103      	bne.n	800abbe <uartUserDownload+0x19e>
      {
         Serial_PutString((uint8_t *)"\r\n\r\nVerification failed!\r\n");
 800abb6:	4820      	ldr	r0, [pc, #128]	; (800ac38 <uartUserDownload+0x218>)
 800abb8:	f7fe fe8c 	bl	80098d4 <Serial_PutString>
 800abbc:	e009      	b.n	800abd2 <uartUserDownload+0x1b2>
      }
      else if (result == COM_ABORT)
 800abbe:	7d7b      	ldrb	r3, [r7, #21]
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d103      	bne.n	800abcc <uartUserDownload+0x1ac>
      {
         Serial_PutString((uint8_t *)"\r\n\nAborted by user.\r\n");
 800abc4:	481d      	ldr	r0, [pc, #116]	; (800ac3c <uartUserDownload+0x21c>)
 800abc6:	f7fe fe85 	bl	80098d4 <Serial_PutString>
 800abca:	e002      	b.n	800abd2 <uartUserDownload+0x1b2>
      }
      else
      {
         Serial_PutString((uint8_t *)"\r\nFailed to receive the file!\r\n");
 800abcc:	481c      	ldr	r0, [pc, #112]	; (800ac40 <uartUserDownload+0x220>)
 800abce:	f7fe fe81 	bl	80098d4 <Serial_PutString>
      }
   }

   //Suspend scheduler
   osThreadResumeAll();
 800abd2:	f00a fc4e 	bl	8015472 <osThreadResumeAll>

   //Release exclusive access
   osMutexRelease(iapMutexHandle);
 800abd6:	4b04      	ldr	r3, [pc, #16]	; (800abe8 <uartUserDownload+0x1c8>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f00a fbe4 	bl	80153a8 <osMutexRelease>
}
 800abe0:	bf00      	nop
 800abe2:	3718      	adds	r7, #24
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20001304 	.word	0x20001304
 800abec:	200001c8 	.word	0x200001c8
 800abf0:	0801f510 	.word	0x0801f510
 800abf4:	0801f514 	.word	0x0801f514
 800abf8:	20001bf8 	.word	0x20001bf8
 800abfc:	08020114 	.word	0x08020114
 800ac00:	08020184 	.word	0x08020184
 800ac04:	080201d8 	.word	0x080201d8
 800ac08:	200013f4 	.word	0x200013f4
 800ac0c:	0801f534 	.word	0x0801f534
 800ac10:	0801f550 	.word	0x0801f550
 800ac14:	0801f58c 	.word	0x0801f58c
 800ac18:	20001c1c 	.word	0x20001c1c
 800ac1c:	0801f5e0 	.word	0x0801f5e0
 800ac20:	0801f5ec 	.word	0x0801f5ec
 800ac24:	0801f5f8 	.word	0x0801f5f8
 800ac28:	0801f610 	.word	0x0801f610
 800ac2c:	0801f638 	.word	0x0801f638
 800ac30:	0801f680 	.word	0x0801f680
 800ac34:	0801f694 	.word	0x0801f694
 800ac38:	0801f6d4 	.word	0x0801f6d4
 800ac3c:	0801f6f0 	.word	0x0801f6f0
 800ac40:	0801f708 	.word	0x0801f708

0800ac44 <Ymodem_Receive_UserCallback>:
 * @param[in] length Length of the received data
 * @retuen Error code
 **/

cboot_error_t Ymodem_Receive_UserCallback(uint8_t *data, size_t length)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
   cboot_error_t cboot_error;

   //Write received bytes in flash
   cboot_error = iapUpdate(&iapContext, data, length);
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	6879      	ldr	r1, [r7, #4]
 800ac52:	480d      	ldr	r0, [pc, #52]	; (800ac88 <Ymodem_Receive_UserCallback+0x44>)
 800ac54:	f000 fc60 	bl	800b518 <iapUpdate>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(cboot_error != CBOOT_NO_ERROR)
 800ac5c:	89fb      	ldrh	r3, [r7, #14]
 800ac5e:	f240 224b 	movw	r2, #587	; 0x24b
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d00b      	beq.n	800ac7e <Ymodem_Receive_UserCallback+0x3a>
   {
      //Debug message
      TRACE_ERROR("Failed to update firmware!\r\n");
 800ac66:	f7fe fc4e 	bl	8009506 <osSuspendAllTasks>
 800ac6a:	4b08      	ldr	r3, [pc, #32]	; (800ac8c <Ymodem_Receive_UserCallback+0x48>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	221c      	movs	r2, #28
 800ac72:	2101      	movs	r1, #1
 800ac74:	4806      	ldr	r0, [pc, #24]	; (800ac90 <Ymodem_Receive_UserCallback+0x4c>)
 800ac76:	f00d fe75 	bl	8018964 <fwrite>
 800ac7a:	f7fe fc4f 	bl	800951c <osResumeAllTasks>
   }

   //Status code
   return cboot_error;
 800ac7e:	89fb      	ldrh	r3, [r7, #14]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	200013f4 	.word	0x200013f4
 800ac8c:	200001c8 	.word	0x200001c8
 800ac90:	0801f728 	.word	0x0801f728

0800ac94 <uartUserInit>:
/**
 * @brief Initialize user uart
 **/

void uartUserInit(void)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b086      	sub	sp, #24
 800ac98:	af00      	add	r7, sp, #0

   //
   // Setup UART against MX_UART_Init(). May not be needed if we keep MX_UART_Init().
   //

   HAL_UART_MspDeInit(Get_DebugHandle());
 800ac9a:	f7ff fa85 	bl	800a1a8 <Get_DebugHandle>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff fc63 	bl	800a56c <HAL_UART_MspDeInit>

   //Enable GPIOA clock
   __HAL_RCC_GPIOA_CLK_ENABLE();
 800aca6:	2001      	movs	r0, #1
 800aca8:	f7ff fe8a 	bl	800a9c0 <LL_AHB2_GRP1_EnableClock>
   //Enable USART2 clock
   __HAL_RCC_USART2_CLK_ENABLE();
 800acac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800acb0:	f7ff fe9e 	bl	800a9f0 <LL_APB1_GRP1_EnableClock>

   //Configure USART2_TX (PA2)
   GPIO_InitStructure.Pin = GPIO_PIN_2;
 800acb4:	2304      	movs	r3, #4
 800acb6:	607b      	str	r3, [r7, #4]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800acb8:	2302      	movs	r3, #2
 800acba:	60bb      	str	r3, [r7, #8]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800acc0:	2300      	movs	r3, #0
 800acc2:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 800acc4:	2307      	movs	r3, #7
 800acc6:	617b      	str	r3, [r7, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800acc8:	1d3b      	adds	r3, r7, #4
 800acca:	4619      	mov	r1, r3
 800accc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acd0:	f003 fd70 	bl	800e7b4 <HAL_GPIO_Init>

   //Configure USART2_RX (PA3)
   GPIO_InitStructure.Pin = GPIO_PIN_3;
 800acd4:	2308      	movs	r3, #8
 800acd6:	607b      	str	r3, [r7, #4]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800acd8:	2302      	movs	r3, #2
 800acda:	60bb      	str	r3, [r7, #8]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 800acdc:	2300      	movs	r3, #0
 800acde:	60fb      	str	r3, [r7, #12]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800ace0:	2300      	movs	r3, #0
 800ace2:	613b      	str	r3, [r7, #16]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 800ace4:	2307      	movs	r3, #7
 800ace6:	617b      	str	r3, [r7, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800ace8:	1d3b      	adds	r3, r7, #4
 800acea:	4619      	mov	r1, r3
 800acec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800acf0:	f003 fd60 	bl	800e7b4 <HAL_GPIO_Init>

   UartHandle.Instance = USART2;
 800acf4:	4b0e      	ldr	r3, [pc, #56]	; (800ad30 <uartUserInit+0x9c>)
 800acf6:	4a0f      	ldr	r2, [pc, #60]	; (800ad34 <uartUserInit+0xa0>)
 800acf8:	601a      	str	r2, [r3, #0]
   UartHandle.Init.BaudRate = 115200;
 800acfa:	4b0d      	ldr	r3, [pc, #52]	; (800ad30 <uartUserInit+0x9c>)
 800acfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ad00:	605a      	str	r2, [r3, #4]
   UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800ad02:	4b0b      	ldr	r3, [pc, #44]	; (800ad30 <uartUserInit+0x9c>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	609a      	str	r2, [r3, #8]
   UartHandle.Init.StopBits = UART_STOPBITS_1;
 800ad08:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <uartUserInit+0x9c>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	60da      	str	r2, [r3, #12]
   UartHandle.Init.Parity = UART_PARITY_NONE;
 800ad0e:	4b08      	ldr	r3, [pc, #32]	; (800ad30 <uartUserInit+0x9c>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	611a      	str	r2, [r3, #16]
   UartHandle.Init.Mode = UART_MODE_TX_RX;
 800ad14:	4b06      	ldr	r3, [pc, #24]	; (800ad30 <uartUserInit+0x9c>)
 800ad16:	220c      	movs	r2, #12
 800ad18:	615a      	str	r2, [r3, #20]
   UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ad1a:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <uartUserInit+0x9c>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	619a      	str	r2, [r3, #24]
   HAL_UART_Init(&UartHandle);
 800ad20:	4803      	ldr	r0, [pc, #12]	; (800ad30 <uartUserInit+0x9c>)
 800ad22:	f007 faaf 	bl	8012284 <HAL_UART_Init>
}
 800ad26:	bf00      	nop
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20001360 	.word	0x20001360
 800ad34:	40004400 	.word	0x40004400

0800ad38 <uartUserTaskHandler>:
/**
 * @brief Uart user task routine
 **/

void uartUserTaskHandler(void *param)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
   uint8_t key = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	737b      	strb	r3, [r7, #13]
   uint8_t state = 0;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73fb      	strb	r3, [r7, #15]
   HAL_StatusTypeDef status;

   //Init uart
   uartUserInit();
 800ad48:	f7ff ffa4 	bl	800ac94 <uartUserInit>

   while(1)
   {
      if(state == 0)
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d11a      	bne.n	800ad88 <uartUserTaskHandler+0x50>
      {
         Serial_PutString((uint8_t*) "\r\n");
 800ad52:	482d      	ldr	r0, [pc, #180]	; (800ae08 <uartUserTaskHandler+0xd0>)
 800ad54:	f7fe fdbe 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "=======================\r\n");
 800ad58:	482c      	ldr	r0, [pc, #176]	; (800ae0c <uartUserTaskHandler+0xd4>)
 800ad5a:	f7fe fdbb 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "= Y-MODEM update menu =\r\n");
 800ad5e:	482c      	ldr	r0, [pc, #176]	; (800ae10 <uartUserTaskHandler+0xd8>)
 800ad60:	f7fe fdb8 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "=======================\r\n");
 800ad64:	4829      	ldr	r0, [pc, #164]	; (800ae0c <uartUserTaskHandler+0xd4>)
 800ad66:	f7fe fdb5 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "Choices:\r\n");
 800ad6a:	482a      	ldr	r0, [pc, #168]	; (800ae14 <uartUserTaskHandler+0xdc>)
 800ad6c:	f7fe fdb2 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "  1 -> Download update image\r\n");
 800ad70:	4829      	ldr	r0, [pc, #164]	; (800ae18 <uartUserTaskHandler+0xe0>)
 800ad72:	f7fe fdaf 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "  2 -> Get current application version\r\n");
 800ad76:	4829      	ldr	r0, [pc, #164]	; (800ae1c <uartUserTaskHandler+0xe4>)
 800ad78:	f7fe fdac 	bl	80098d4 <Serial_PutString>
         Serial_PutString((uint8_t*) "\r\n");
 800ad7c:	4822      	ldr	r0, [pc, #136]	; (800ae08 <uartUserTaskHandler+0xd0>)
 800ad7e:	f7fe fda9 	bl	80098d4 <Serial_PutString>

         //Change state
         state = 1;
 800ad82:	2301      	movs	r3, #1
 800ad84:	73fb      	strb	r3, [r7, #15]
 800ad86:	e03b      	b.n	800ae00 <uartUserTaskHandler+0xc8>
      }
      else if(state == 1)
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d138      	bne.n	800ae00 <uartUserTaskHandler+0xc8>
      {
         /* Clean the input path */
         __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 800ad8e:	4b24      	ldr	r3, [pc, #144]	; (800ae20 <uartUserTaskHandler+0xe8>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	699a      	ldr	r2, [r3, #24]
 800ad94:	4b22      	ldr	r3, [pc, #136]	; (800ae20 <uartUserTaskHandler+0xe8>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f042 0208 	orr.w	r2, r2, #8
 800ad9c:	619a      	str	r2, [r3, #24]
 800ad9e:	4b20      	ldr	r3, [pc, #128]	; (800ae20 <uartUserTaskHandler+0xe8>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	699a      	ldr	r2, [r3, #24]
 800ada4:	4b1e      	ldr	r3, [pc, #120]	; (800ae20 <uartUserTaskHandler+0xe8>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0210 	orr.w	r2, r2, #16
 800adac:	619a      	str	r2, [r3, #24]

         /* Receive key */
         status = HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 800adae:	f107 010d 	add.w	r1, r7, #13
 800adb2:	f04f 33ff 	mov.w	r3, #4294967295
 800adb6:	2201      	movs	r2, #1
 800adb8:	4819      	ldr	r0, [pc, #100]	; (800ae20 <uartUserTaskHandler+0xe8>)
 800adba:	f007 fb91 	bl	80124e0 <HAL_UART_Receive>
 800adbe:	4603      	mov	r3, r0
 800adc0:	73bb      	strb	r3, [r7, #14]

         if(status == HAL_OK)
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d11b      	bne.n	800ae00 <uartUserTaskHandler+0xc8>
         {
            switch(key)
 800adc8:	7b7b      	ldrb	r3, [r7, #13]
 800adca:	2b31      	cmp	r3, #49	; 0x31
 800adcc:	d002      	beq.n	800add4 <uartUserTaskHandler+0x9c>
 800adce:	2b32      	cmp	r3, #50	; 0x32
 800add0:	d006      	beq.n	800ade0 <uartUserTaskHandler+0xa8>
 800add2:	e009      	b.n	800ade8 <uartUserTaskHandler+0xb0>
            {
               case '1':
                  Serial_PutString((uint8_t*) "Downloading update image...\r\n");
 800add4:	4813      	ldr	r0, [pc, #76]	; (800ae24 <uartUserTaskHandler+0xec>)
 800add6:	f7fe fd7d 	bl	80098d4 <Serial_PutString>
                  //Start downloading file
                  uartUserDownload();
 800adda:	f7ff fe21 	bl	800aa20 <uartUserDownload>
                  break;
 800adde:	e00a      	b.n	800adf6 <uartUserTaskHandler+0xbe>

               case '2':
#if defined(APP_DEMO_V1)
                  Serial_PutString((uint8_t*) "v1.0.0\r\n");
#elif defined(APP_DEMO_V2)
                  Serial_PutString((uint8_t*) "v2.0.0\r\n");
 800ade0:	4811      	ldr	r0, [pc, #68]	; (800ae28 <uartUserTaskHandler+0xf0>)
 800ade2:	f7fe fd77 	bl	80098d4 <Serial_PutString>
#else
                  Serial_PutString((uint8_t*) "v3.0.0\r\n");
#endif
                  break;
 800ade6:	e006      	b.n	800adf6 <uartUserTaskHandler+0xbe>

               default:
                  Serial_PutString((uint8_t*) "Unknown number!\r\n");
 800ade8:	4810      	ldr	r0, [pc, #64]	; (800ae2c <uartUserTaskHandler+0xf4>)
 800adea:	f7fe fd73 	bl	80098d4 <Serial_PutString>
                  Serial_PutString((uint8_t*) "Number should be 1 or 2!\r\n");
 800adee:	4810      	ldr	r0, [pc, #64]	; (800ae30 <uartUserTaskHandler+0xf8>)
 800adf0:	f7fe fd70 	bl	80098d4 <Serial_PutString>
                  break;
 800adf4:	bf00      	nop
            }
            Serial_PutString((uint8_t*) "\r\n");
 800adf6:	4804      	ldr	r0, [pc, #16]	; (800ae08 <uartUserTaskHandler+0xd0>)
 800adf8:	f7fe fd6c 	bl	80098d4 <Serial_PutString>

            //Change state
            state = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
      {
         //For sanity
      }

      //Os delay
      osDelayTask(200);
 800ae00:	20c8      	movs	r0, #200	; 0xc8
 800ae02:	f7fe fb75 	bl	80094f0 <osDelayTask>
      if(state == 0)
 800ae06:	e7a1      	b.n	800ad4c <uartUserTaskHandler+0x14>
 800ae08:	0801f510 	.word	0x0801f510
 800ae0c:	0801f748 	.word	0x0801f748
 800ae10:	0801f764 	.word	0x0801f764
 800ae14:	0801f780 	.word	0x0801f780
 800ae18:	0801f78c 	.word	0x0801f78c
 800ae1c:	0801f7ac 	.word	0x0801f7ac
 800ae20:	20001360 	.word	0x20001360
 800ae24:	0801f7d8 	.word	0x0801f7d8
 800ae28:	0801f7f8 	.word	0x0801f7f8
 800ae2c:	0801f804 	.word	0x0801f804
 800ae30:	0801f818 	.word	0x0801f818

0800ae34 <ReceivePacket>:
 * @return HAL_OK: normally return
 *         HAL_BUSY: abort by user
 **/

static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b088      	sub	sp, #32
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2200      	movs	r2, #0
 800ae48:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 800ae4a:	f107 0113 	add.w	r1, r7, #19
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2201      	movs	r2, #1
 800ae52:	485d      	ldr	r0, [pc, #372]	; (800afc8 <ReceivePacket+0x194>)
 800ae54:	f007 fb44 	bl	80124e0 <HAL_UART_Receive>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 800ae5c:	7efb      	ldrb	r3, [r7, #27]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f040 80aa 	bne.w	800afb8 <ReceivePacket+0x184>
  {
    switch (char1)
 800ae64:	7cfb      	ldrb	r3, [r7, #19]
 800ae66:	2b61      	cmp	r3, #97	; 0x61
 800ae68:	d059      	beq.n	800af1e <ReceivePacket+0xea>
 800ae6a:	2b61      	cmp	r3, #97	; 0x61
 800ae6c:	dc5a      	bgt.n	800af24 <ReceivePacket+0xf0>
 800ae6e:	2b18      	cmp	r3, #24
 800ae70:	dc38      	bgt.n	800aee4 <ReceivePacket+0xb0>
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	dd56      	ble.n	800af24 <ReceivePacket+0xf0>
 800ae76:	3b01      	subs	r3, #1
 800ae78:	2b17      	cmp	r3, #23
 800ae7a:	d853      	bhi.n	800af24 <ReceivePacket+0xf0>
 800ae7c:	a201      	add	r2, pc, #4	; (adr r2, 800ae84 <ReceivePacket+0x50>)
 800ae7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae82:	bf00      	nop
 800ae84:	0800aeeb 	.word	0x0800aeeb
 800ae88:	0800aef1 	.word	0x0800aef1
 800ae8c:	0800af25 	.word	0x0800af25
 800ae90:	0800af2b 	.word	0x0800af2b
 800ae94:	0800af25 	.word	0x0800af25
 800ae98:	0800af25 	.word	0x0800af25
 800ae9c:	0800af25 	.word	0x0800af25
 800aea0:	0800af25 	.word	0x0800af25
 800aea4:	0800af25 	.word	0x0800af25
 800aea8:	0800af25 	.word	0x0800af25
 800aeac:	0800af25 	.word	0x0800af25
 800aeb0:	0800af25 	.word	0x0800af25
 800aeb4:	0800af25 	.word	0x0800af25
 800aeb8:	0800af25 	.word	0x0800af25
 800aebc:	0800af25 	.word	0x0800af25
 800aec0:	0800af25 	.word	0x0800af25
 800aec4:	0800af25 	.word	0x0800af25
 800aec8:	0800af25 	.word	0x0800af25
 800aecc:	0800af25 	.word	0x0800af25
 800aed0:	0800af25 	.word	0x0800af25
 800aed4:	0800af25 	.word	0x0800af25
 800aed8:	0800af25 	.word	0x0800af25
 800aedc:	0800af25 	.word	0x0800af25
 800aee0:	0800aef9 	.word	0x0800aef9
 800aee4:	2b41      	cmp	r3, #65	; 0x41
 800aee6:	d01a      	beq.n	800af1e <ReceivePacket+0xea>
 800aee8:	e01c      	b.n	800af24 <ReceivePacket+0xf0>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 800aeea:	2380      	movs	r3, #128	; 0x80
 800aeec:	61fb      	str	r3, [r7, #28]
        break;
 800aeee:	e01d      	b.n	800af2c <ReceivePacket+0xf8>
      case STX:
        packet_size = PACKET_1K_SIZE;
 800aef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aef4:	61fb      	str	r3, [r7, #28]
        break;
 800aef6:	e019      	b.n	800af2c <ReceivePacket+0xf8>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 800aef8:	f107 0113 	add.w	r1, r7, #19
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	4831      	ldr	r0, [pc, #196]	; (800afc8 <ReceivePacket+0x194>)
 800af02:	f007 faed 	bl	80124e0 <HAL_UART_Receive>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d105      	bne.n	800af18 <ReceivePacket+0xe4>
 800af0c:	7cfb      	ldrb	r3, [r7, #19]
 800af0e:	2b18      	cmp	r3, #24
 800af10:	d102      	bne.n	800af18 <ReceivePacket+0xe4>
        {
          packet_size = 2;
 800af12:	2302      	movs	r3, #2
 800af14:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 800af16:	e009      	b.n	800af2c <ReceivePacket+0xf8>
          status = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	76fb      	strb	r3, [r7, #27]
        break;
 800af1c:	e006      	b.n	800af2c <ReceivePacket+0xf8>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 800af1e:	2302      	movs	r3, #2
 800af20:	76fb      	strb	r3, [r7, #27]
        break;
 800af22:	e003      	b.n	800af2c <ReceivePacket+0xf8>
      default:
        status = HAL_ERROR;
 800af24:	2301      	movs	r3, #1
 800af26:	76fb      	strb	r3, [r7, #27]
        break;
 800af28:	e000      	b.n	800af2c <ReceivePacket+0xf8>
        break;
 800af2a:	bf00      	nop
    }
    *p_data = char1;
 800af2c:	7cfa      	ldrb	r2, [r7, #19]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2b7f      	cmp	r3, #127	; 0x7f
 800af36:	d93f      	bls.n	800afb8 <ReceivePacket+0x184>
    {
      status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	1c99      	adds	r1, r3, #2
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	3304      	adds	r3, #4
 800af42:	b29a      	uxth	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4820      	ldr	r0, [pc, #128]	; (800afc8 <ReceivePacket+0x194>)
 800af48:	f007 faca 	bl	80124e0 <HAL_UART_Receive>
 800af4c:	4603      	mov	r3, r0
 800af4e:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 800af50:	7efb      	ldrb	r3, [r7, #27]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d12e      	bne.n	800afb4 <ReceivePacket+0x180>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	3302      	adds	r3, #2
 800af5a:	781a      	ldrb	r2, [r3, #0]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3303      	adds	r3, #3
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	43db      	mvns	r3, r3
 800af64:	b2db      	uxtb	r3, r3
 800af66:	429a      	cmp	r2, r3
 800af68:	d004      	beq.n	800af74 <ReceivePacket+0x140>
        {
          packet_size = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	76fb      	strb	r3, [r7, #27]
 800af72:	e021      	b.n	800afb8 <ReceivePacket+0x184>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	3304      	adds	r3, #4
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	4413      	add	r3, r2
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	3305      	adds	r3, #5
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	4413      	add	r3, r2
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	461a      	mov	r2, r3
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	4413      	add	r3, r2
 800af92:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	3304      	adds	r3, #4
 800af98:	69f9      	ldr	r1, [r7, #28]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f849 	bl	800b032 <Cal_CRC16>
 800afa0:	4603      	mov	r3, r0
 800afa2:	461a      	mov	r2, r3
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d006      	beq.n	800afb8 <ReceivePacket+0x184>
          {
            packet_size = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	76fb      	strb	r3, [r7, #27]
 800afb2:	e001      	b.n	800afb8 <ReceivePacket+0x184>
          }
        }
      }
      else
      {
        packet_size = 0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	69fa      	ldr	r2, [r7, #28]
 800afbc:	601a      	str	r2, [r3, #0]
  return status;
 800afbe:	7efb      	ldrb	r3, [r7, #27]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3720      	adds	r7, #32
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	20001360 	.word	0x20001360

0800afcc <UpdateCRC16>:
 * @param[in] input byte
 * @return None
 **/

uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	4603      	mov	r3, r0
 800afd4:	460a      	mov	r2, r1
 800afd6:	80fb      	strh	r3, [r7, #6]
 800afd8:	4613      	mov	r3, r2
 800afda:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 800afdc:	88fb      	ldrh	r3, [r7, #6]
 800afde:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 800afe0:	797b      	ldrb	r3, [r7, #5]
 800afe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afe6:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	005b      	lsls	r3, r3, #1
 800afec:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	005b      	lsls	r3, r3, #1
 800aff2:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800affa:	2b00      	cmp	r3, #0
 800affc:	d002      	beq.n	800b004 <UpdateCRC16+0x38>
      ++crc;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3301      	adds	r3, #1
 800b002:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d005      	beq.n	800b01a <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800b014:	f083 0301 	eor.w	r3, r3, #1
 800b018:	60fb      	str	r3, [r7, #12]
  }

  while(!(in & 0x10000));
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0e1      	beq.n	800afe8 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	b29b      	uxth	r3, r3
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bc80      	pop	{r7}
 800b030:	4770      	bx	lr

0800b032 <Cal_CRC16>:
 * @param[in] length
 * @return None
 **/

uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	4413      	add	r3, r2
 800b046:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 800b048:	e00a      	b.n	800b060 <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	b298      	uxth	r0, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	1c5a      	adds	r2, r3, #1
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	4619      	mov	r1, r3
 800b058:	f7ff ffb8 	bl	800afcc <UpdateCRC16>
 800b05c:	4603      	mov	r3, r0
 800b05e:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	429a      	cmp	r2, r3
 800b066:	d3f0      	bcc.n	800b04a <Cal_CRC16+0x18>

  crc = UpdateCRC16(crc, 0);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	2100      	movs	r1, #0
 800b06e:	4618      	mov	r0, r3
 800b070:	f7ff ffac 	bl	800afcc <UpdateCRC16>
 800b074:	4603      	mov	r3, r0
 800b076:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	2100      	movs	r1, #0
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff ffa4 	bl	800afcc <UpdateCRC16>
 800b084:	4603      	mov	r3, r0
 800b086:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	b29b      	uxth	r3, r3
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <Ymodem_Receive>:
 * @param[out] p_size The size of the file.
 * @return COM_StatusTypeDef result of reception/programming
 **/

COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b092      	sub	sp, #72	; 0x48
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0, packets_received = 0, bytes_received = 0;
 800b09c:	2300      	movs	r3, #0
 800b09e:	643b      	str	r3, [r7, #64]	; 0x40
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	633b      	str	r3, [r7, #48]	; 0x30
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t filesize;
  uint8_t *file_ptr, *data_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH];
  COM_StatusTypeDef result = COM_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  while ((session_done == 0) && (result == COM_OK))
 800b0b6:	e0ea      	b.n	800b28e <Ymodem_Receive+0x1fa>
  {
    packets_received = 0;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	633b      	str	r3, [r7, #48]	; 0x30
    file_done = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 800b0c0:	e0dd      	b.n	800b27e <Ymodem_Receive+0x1ea>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 800b0c2:	f107 031c 	add.w	r3, r7, #28
 800b0c6:	f643 2298 	movw	r2, #15000	; 0x3a98
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	4877      	ldr	r0, [pc, #476]	; (800b2ac <Ymodem_Receive+0x218>)
 800b0ce:	f7ff feb1 	bl	800ae34 <ReceivePacket>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d003      	beq.n	800b0e0 <Ymodem_Receive+0x4c>
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	f000 80b2 	beq.w	800b242 <Ymodem_Receive+0x1ae>
 800b0de:	e0ba      	b.n	800b256 <Ymodem_Receive+0x1c2>
      {
        case HAL_OK:
          errors = 0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d008      	beq.n	800b0fc <Ymodem_Receive+0x68>
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d10c      	bne.n	800b108 <Ymodem_Receive+0x74>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 800b0ee:	2006      	movs	r0, #6
 800b0f0:	f7fe fc0c 	bl	800990c <Serial_PutByte>
              result = COM_ABORT;
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              break;
 800b0fa:	e0a1      	b.n	800b240 <Ymodem_Receive+0x1ac>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 800b0fc:	2006      	movs	r0, #6
 800b0fe:	f7fe fc05 	bl	800990c <Serial_PutByte>
              file_done = 1;
 800b102:	2301      	movs	r3, #1
 800b104:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 800b106:	e09b      	b.n	800b240 <Ymodem_Receive+0x1ac>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != (0xFFU & packets_received))
 800b108:	4b68      	ldr	r3, [pc, #416]	; (800b2ac <Ymodem_Receive+0x218>)
 800b10a:	789b      	ldrb	r3, [r3, #2]
 800b10c:	461a      	mov	r2, r3
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	b2db      	uxtb	r3, r3
 800b112:	429a      	cmp	r2, r3
 800b114:	d003      	beq.n	800b11e <Ymodem_Receive+0x8a>
              {
                Serial_PutByte(NAK);
 800b116:	2015      	movs	r0, #21
 800b118:	f7fe fbf8 	bl	800990c <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 800b11c:	e08f      	b.n	800b23e <Ymodem_Receive+0x1aa>
                if (packets_received == 0)
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	2b00      	cmp	r3, #0
 800b122:	d158      	bne.n	800b1d6 <Ymodem_Receive+0x142>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 800b124:	4b61      	ldr	r3, [pc, #388]	; (800b2ac <Ymodem_Receive+0x218>)
 800b126:	791b      	ldrb	r3, [r3, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d04c      	beq.n	800b1c6 <Ymodem_Receive+0x132>
                    i = 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 800b130:	4b5f      	ldr	r3, [pc, #380]	; (800b2b0 <Ymodem_Receive+0x21c>)
 800b132:	62bb      	str	r3, [r7, #40]	; 0x28
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800b134:	e008      	b.n	800b148 <Ymodem_Receive+0xb4>
                      aFileName[i++] = *file_ptr++;
 800b136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b138:	1c53      	adds	r3, r2, #1
 800b13a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b13c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b13e:	1c59      	adds	r1, r3, #1
 800b140:	6479      	str	r1, [r7, #68]	; 0x44
 800b142:	7811      	ldrb	r1, [r2, #0]
 800b144:	4a5b      	ldr	r2, [pc, #364]	; (800b2b4 <Ymodem_Receive+0x220>)
 800b146:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800b148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <Ymodem_Receive+0xc2>
 800b150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b152:	2b3f      	cmp	r3, #63	; 0x3f
 800b154:	d9ef      	bls.n	800b136 <Ymodem_Receive+0xa2>
                    aFileName[i++] = '\0';
 800b156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b158:	1c5a      	adds	r2, r3, #1
 800b15a:	647a      	str	r2, [r7, #68]	; 0x44
 800b15c:	4a55      	ldr	r2, [pc, #340]	; (800b2b4 <Ymodem_Receive+0x220>)
 800b15e:	2100      	movs	r1, #0
 800b160:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 800b166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b168:	3301      	adds	r3, #1
 800b16a:	62bb      	str	r3, [r7, #40]	; 0x28
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800b16c:	e00a      	b.n	800b184 <Ymodem_Receive+0xf0>
                      file_size[i++] = *file_ptr++;
 800b16e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b170:	1c53      	adds	r3, r2, #1
 800b172:	62bb      	str	r3, [r7, #40]	; 0x28
 800b174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b176:	1c59      	adds	r1, r3, #1
 800b178:	6479      	str	r1, [r7, #68]	; 0x44
 800b17a:	7812      	ldrb	r2, [r2, #0]
 800b17c:	3348      	adds	r3, #72	; 0x48
 800b17e:	443b      	add	r3, r7
 800b180:	f803 2c40 	strb.w	r2, [r3, #-64]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	2b20      	cmp	r3, #32
 800b18a:	d002      	beq.n	800b192 <Ymodem_Receive+0xfe>
 800b18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b18e:	2b0f      	cmp	r3, #15
 800b190:	d9ed      	bls.n	800b16e <Ymodem_Receive+0xda>
                    file_size[i++] = '\0';
 800b192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b194:	1c5a      	adds	r2, r3, #1
 800b196:	647a      	str	r2, [r7, #68]	; 0x44
 800b198:	3348      	adds	r3, #72	; 0x48
 800b19a:	443b      	add	r3, r7
 800b19c:	2200      	movs	r2, #0
 800b19e:	f803 2c40 	strb.w	r2, [r3, #-64]
                    Str2Int(file_size, &filesize);
 800b1a2:	f107 0218 	add.w	r2, r7, #24
 800b1a6:	f107 0308 	add.w	r3, r7, #8
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fe fa9d 	bl	80096ec <Str2Int>
                    *p_size = filesize;
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 800b1b8:	2006      	movs	r0, #6
 800b1ba:	f7fe fba7 	bl	800990c <Serial_PutByte>
                    Serial_PutByte(CRC16);
 800b1be:	2043      	movs	r0, #67	; 0x43
 800b1c0:	f7fe fba4 	bl	800990c <Serial_PutByte>
 800b1c4:	e036      	b.n	800b234 <Ymodem_Receive+0x1a0>
                    Serial_PutByte(ACK);
 800b1c6:	2006      	movs	r0, #6
 800b1c8:	f7fe fba0 	bl	800990c <Serial_PutByte>
                    file_done = 1;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 800b1d4:	e034      	b.n	800b240 <Ymodem_Receive+0x1ac>
                   data_ptr = (uint8_t*)&aPacketData[PACKET_DATA_INDEX];
 800b1d6:	4b36      	ldr	r3, [pc, #216]	; (800b2b0 <Ymodem_Receive+0x21c>)
 800b1d8:	623b      	str	r3, [r7, #32]
                   if((filesize - bytes_received) < 1024)
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1e4:	d20a      	bcs.n	800b1fc <Ymodem_Receive+0x168>
                      while(data_ptr[packet_length-1] == '\x1A')
 800b1e6:	e002      	b.n	800b1ee <Ymodem_Receive+0x15a>
                         packet_length--;
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	61fb      	str	r3, [r7, #28]
                      while(data_ptr[packet_length-1] == '\x1A')
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	6a3a      	ldr	r2, [r7, #32]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	2b1a      	cmp	r3, #26
 800b1fa:	d0f5      	beq.n	800b1e8 <Ymodem_Receive+0x154>
                   bytes_received += packet_length;
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b200:	4413      	add	r3, r2
 800b202:	62fb      	str	r3, [r7, #44]	; 0x2c
                   if(Ymodem_Receive_UserCallback(data_ptr, packet_length) == CBOOT_NO_ERROR)
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	4619      	mov	r1, r3
 800b208:	6a38      	ldr	r0, [r7, #32]
 800b20a:	f7ff fd1b 	bl	800ac44 <Ymodem_Receive_UserCallback>
 800b20e:	4603      	mov	r3, r0
 800b210:	461a      	mov	r2, r3
 800b212:	f240 234b 	movw	r3, #587	; 0x24b
 800b216:	429a      	cmp	r2, r3
 800b218:	d103      	bne.n	800b222 <Ymodem_Receive+0x18e>
                      Serial_PutByte(ACK);
 800b21a:	2006      	movs	r0, #6
 800b21c:	f7fe fb76 	bl	800990c <Serial_PutByte>
 800b220:	e008      	b.n	800b234 <Ymodem_Receive+0x1a0>
                    Serial_PutByte(CA);
 800b222:	2018      	movs	r0, #24
 800b224:	f7fe fb72 	bl	800990c <Serial_PutByte>
                    Serial_PutByte(CA);
 800b228:	2018      	movs	r0, #24
 800b22a:	f7fe fb6f 	bl	800990c <Serial_PutByte>
                    result = COM_DATA;
 800b22e:	2304      	movs	r3, #4
 800b230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                packets_received ++;
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	3301      	adds	r3, #1
 800b238:	633b      	str	r3, [r7, #48]	; 0x30
                session_begin = 1;
 800b23a:	2301      	movs	r3, #1
 800b23c:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b23e:	bf00      	nop
          }
          break;
 800b240:	e01d      	b.n	800b27e <Ymodem_Receive+0x1ea>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 800b242:	2018      	movs	r0, #24
 800b244:	f7fe fb62 	bl	800990c <Serial_PutByte>
          Serial_PutByte(CA);
 800b248:	2018      	movs	r0, #24
 800b24a:	f7fe fb5f 	bl	800990c <Serial_PutByte>
          result = COM_ABORT;
 800b24e:	2302      	movs	r3, #2
 800b250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b254:	e013      	b.n	800b27e <Ymodem_Receive+0x1ea>
        default:
          if (session_begin > 0)
 800b256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <Ymodem_Receive+0x1ce>
          {
            errors ++;
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	3301      	adds	r3, #1
 800b260:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	2b05      	cmp	r3, #5
 800b266:	d906      	bls.n	800b276 <Ymodem_Receive+0x1e2>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 800b268:	2018      	movs	r0, #24
 800b26a:	f7fe fb4f 	bl	800990c <Serial_PutByte>
            Serial_PutByte(CA);
 800b26e:	2018      	movs	r0, #24
 800b270:	f7fe fb4c 	bl	800990c <Serial_PutByte>
 800b274:	e002      	b.n	800b27c <Ymodem_Receive+0x1e8>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 800b276:	2043      	movs	r0, #67	; 0x43
 800b278:	f7fe fb48 	bl	800990c <Serial_PutByte>
          }
          break;
 800b27c:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 800b27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b280:	2b00      	cmp	r3, #0
 800b282:	d104      	bne.n	800b28e <Ymodem_Receive+0x1fa>
 800b284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f43f af1a 	beq.w	800b0c2 <Ymodem_Receive+0x2e>
  while ((session_done == 0) && (result == COM_OK))
 800b28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b290:	2b00      	cmp	r3, #0
 800b292:	d104      	bne.n	800b29e <Ymodem_Receive+0x20a>
 800b294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f43f af0d 	beq.w	800b0b8 <Ymodem_Receive+0x24>
      }
    }
  }
  return result;
 800b29e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3748      	adds	r7, #72	; 0x48
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	20001c5c 	.word	0x20001c5c
 800b2b0:	20001c60 	.word	0x20001c60
 800b2b4:	20001c1c 	.word	0x20001c1c

0800b2b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800b2b8:	480d      	ldr	r0, [pc, #52]	; (800b2f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800b2ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b2bc:	f7ff fb72 	bl	800a9a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b2c0:	480c      	ldr	r0, [pc, #48]	; (800b2f4 <LoopForever+0x6>)
  ldr r1, =_edata
 800b2c2:	490d      	ldr	r1, [pc, #52]	; (800b2f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800b2c4:	4a0d      	ldr	r2, [pc, #52]	; (800b2fc <LoopForever+0xe>)
  movs r3, #0
 800b2c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b2c8:	e002      	b.n	800b2d0 <LoopCopyDataInit>

0800b2ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b2ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b2cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b2ce:	3304      	adds	r3, #4

0800b2d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b2d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b2d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b2d4:	d3f9      	bcc.n	800b2ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b2d6:	4a0a      	ldr	r2, [pc, #40]	; (800b300 <LoopForever+0x12>)
  ldr r4, =_ebss
 800b2d8:	4c0a      	ldr	r4, [pc, #40]	; (800b304 <LoopForever+0x16>)
  movs r3, #0
 800b2da:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b2dc:	e001      	b.n	800b2e2 <LoopFillZerobss>

0800b2de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b2de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b2e0:	3204      	adds	r2, #4

0800b2e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b2e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b2e4:	d3fb      	bcc.n	800b2de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800b2e6:	f00d fd29 	bl	8018d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800b2ea:	f7fe fbc7 	bl	8009a7c <main>

0800b2ee <LoopForever>:

LoopForever:
    b LoopForever
 800b2ee:	e7fe      	b.n	800b2ee <LoopForever>
  ldr   r0, =_estack
 800b2f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800b2f4:	20000080 	.word	0x20000080
  ldr r1, =_edata
 800b2f8:	20000760 	.word	0x20000760
  ldr r2, =_sidata
 800b2fc:	08020c54 	.word	0x08020c54
  ldr r2, =_sbss
 800b300:	20000760 	.word	0x20000760
  ldr r4, =_ebss
 800b304:	200058b8 	.word	0x200058b8

0800b308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800b308:	e7fe      	b.n	800b308 <ADC_IRQHandler>

0800b30a <crc32Compute>:
 * @param[out] digest Pointer to the calculated digest
 * @return Error code
 **/

error_t crc32Compute(const void *data, size_t length, uint8_t *digest)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b086      	sub	sp, #24
 800b30e:	af00      	add	r7, sp, #0
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	60b9      	str	r1, [r7, #8]
 800b314:	607a      	str	r2, [r7, #4]
   //Allocate a memory buffer to hold the CRC32 context
   Crc32Context *context = cryptoAllocMem(sizeof(Crc32Context));
 800b316:	2004      	movs	r0, #4
 800b318:	f7fe f90b 	bl	8009532 <osAllocMem>
 800b31c:	6178      	str	r0, [r7, #20]
   //Failed to allocate memory?
   if(context == NULL)
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <crc32Compute+0x1e>
      return ERROR_OUT_OF_MEMORY;
 800b324:	2364      	movs	r3, #100	; 0x64
 800b326:	e00f      	b.n	800b348 <crc32Compute+0x3e>

   //Initialize the CRC32 context
   crc32Init(context);
 800b328:	6978      	ldr	r0, [r7, #20]
 800b32a:	f000 f811 	bl	800b350 <crc32Init>
   //Digest the message
   crc32Update(context, data, length);
 800b32e:	68ba      	ldr	r2, [r7, #8]
 800b330:	68f9      	ldr	r1, [r7, #12]
 800b332:	6978      	ldr	r0, [r7, #20]
 800b334:	f000 f81a 	bl	800b36c <crc32Update>
   //Finalize the CRC32 message digest
   crc32Final(context, digest);
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	6978      	ldr	r0, [r7, #20]
 800b33c:	f000 f844 	bl	800b3c8 <crc32Final>

   //Free previously allocated memory
   cryptoFreeMem(context);
 800b340:	6978      	ldr	r0, [r7, #20]
 800b342:	f7fe f903 	bl	800954c <osFreeMem>
   //Successful processing
   return NO_ERROR;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <crc32Init>:
 * @brief Initialize CRC32 message digest context
 * @param[in] context Pointer to the CRC32 context to initialize
 **/

void crc32Init(Crc32Context *context)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
   //CRC (digest) preset value
   context->digest = 0xFFFFFFFF;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f04f 32ff 	mov.w	r2, #4294967295
 800b35e:	601a      	str	r2, [r3, #0]
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	bc80      	pop	{r7}
 800b368:	4770      	bx	lr
	...

0800b36c <crc32Update>:
 * @param[in] data Pointer to the buffer being hashed
 * @param[in] length Length of the buffer
 **/

void crc32Update(Crc32Context *context, const void *data, size_t length)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b089      	sub	sp, #36	; 0x24
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
   size_t i;
   const uint8_t *p;
   uint32_t crc;

   //Restaure last crc
   crc = (uint32_t)context->digest;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	61bb      	str	r3, [r7, #24]

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	617b      	str	r3, [r7, #20]

   //Process the incoming data
   for(i = 0; i < length; i++)
 800b382:	2300      	movs	r3, #0
 800b384:	61fb      	str	r3, [r7, #28]
 800b386:	e010      	b.n	800b3aa <crc32Update+0x3e>
   {
      //The message is processed byte by byte
      crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ p[i]];
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	0a1a      	lsrs	r2, r3, #8
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	6978      	ldr	r0, [r7, #20]
 800b392:	69f9      	ldr	r1, [r7, #28]
 800b394:	4401      	add	r1, r0
 800b396:	7809      	ldrb	r1, [r1, #0]
 800b398:	404b      	eors	r3, r1
 800b39a:	490a      	ldr	r1, [pc, #40]	; (800b3c4 <crc32Update+0x58>)
 800b39c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b3a0:	4053      	eors	r3, r2
 800b3a2:	61bb      	str	r3, [r7, #24]
   for(i = 0; i < length; i++)
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	61fb      	str	r3, [r7, #28]
 800b3aa:	69fa      	ldr	r2, [r7, #28]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d3ea      	bcc.n	800b388 <crc32Update+0x1c>
   }

   //Save updated crc
   context->digest = crc;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	69ba      	ldr	r2, [r7, #24]
 800b3b6:	601a      	str	r2, [r3, #0]
}
 800b3b8:	bf00      	nop
 800b3ba:	3724      	adds	r7, #36	; 0x24
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bc80      	pop	{r7}
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	0801fd14 	.word	0x0801fd14

0800b3c8 <crc32Final>:
 * @param[in] context Pointer to the CRC32 context
 * @param[out] digest Calculated digest (optional parameter)
 **/

void crc32Final(Crc32Context *context, uint8_t *digest)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
   //Copy the resulting digest
   if(digest != NULL)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d004      	beq.n	800b3e2 <crc32Final+0x1a>
      osMemcpy(digest, (uint8_t*)&context->digest, CRC32_DIGEST_SIZE);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	461a      	mov	r2, r3
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	601a      	str	r2, [r3, #0]
}
 800b3e2:	bf00      	nop
 800b3e4:	370c      	adds	r7, #12
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bc80      	pop	{r7}
 800b3ea:	4770      	bx	lr

0800b3ec <iapGetDefaultSettings>:
* @brief Initialize settings with default values
* @param[in,out] settings Structure that contains IAP settings
**/

void iapGetDefaultSettings(IapSettings *settings)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
   //Clear image output crypto settings structure
   memset(settings, 0x00, sizeof(IapSettings));
 800b3f4:	2224      	movs	r2, #36	; 0x24
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f00d fbdb 	bl	8018bb4 <memset>

#if (VERIFY_INTEGRITY_SUPPORT == ENABLED || IAP_SINGLE_BANK_SUPPORT == ENABLED)
   //IAP integrity setting
   settings->imageInCrypto.verifySettings.integrityAlgo = NULL;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	60da      	str	r2, [r3, #12]
   settings->imageInCrypto.cipherAlgo = NULL;
   settings->imageInCrypto.cipherMode = CIPHER_MODE_NULL;
   settings->imageInCrypto.cipherKey = NULL;
   settings->imageInCrypto.cipherKeyLen = 0;
#endif
}
 800b404:	bf00      	nop
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <iapInit>:
 * @param[in,out] context Pointer to the IAP Application context to be initialized
 * @return Status code
 **/

cboot_error_t iapInit(IapContext *context, const IapSettings *settings)
{
 800b40c:	b5b0      	push	{r4, r5, r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   uint16_t newImgIdx;
#endif

   //Check Parameters validity
   if(context == NULL || settings == NULL)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <iapInit+0x16>
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d102      	bne.n	800b428 <iapInit+0x1c>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800b422:	f240 234d 	movw	r3, #589	; 0x24d
 800b426:	e073      	b.n	800b510 <iapInit+0x104>

   //Debug message
   TRACE_INFO("Initializing IAP...\r\n");

   //Clear the IAP context
   memset(context, 0, sizeof(IapContext));
 800b428:	f640 0204 	movw	r2, #2052	; 0x804
 800b42c:	2100      	movs	r1, #0
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f00d fbc0 	bl	8018bb4 <memset>

    //Save user settings
   context->settings = *settings;
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	4614      	mov	r4, r2
 800b43a:	461d      	mov	r5, r3
 800b43c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b43e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	6023      	str	r3, [r4, #0]

   //Initialize primary (internal flash) memory driver
   error = iapInitPrimaryMemory(&context->settings,context);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6879      	ldr	r1, [r7, #4]
 800b44c:	4618      	mov	r0, r3
 800b44e:	f000 f9b4 	bl	800b7ba <iapInitPrimaryMemory>
 800b452:	4603      	mov	r3, r0
 800b454:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b456:	89fb      	ldrh	r3, [r7, #14]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <iapInit+0x56>
      return CBOOT_ERROR_FAILURE;
 800b45c:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b460:	e056      	b.n	800b510 <iapInit+0x104>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   //Initialize secondary (external) memory driver
   error = iapInitSecondaryMemory(&context->settings,context);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6879      	ldr	r1, [r7, #4]
 800b466:	4618      	mov	r0, r3
 800b468:	f000 fa03 	bl	800b872 <iapInitSecondaryMemory>
 800b46c:	4603      	mov	r3, r0
 800b46e:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b470:	89fb      	ldrh	r3, [r7, #14]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d002      	beq.n	800b47c <iapInit+0x70>
      return CBOOT_ERROR_FAILURE;
 800b476:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b47a:	e049      	b.n	800b510 <iapInit+0x104>
#endif

   //Initialize image input context (will process received update image)
   error = iapInitInputImage(&context->settings,context);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6879      	ldr	r1, [r7, #4]
 800b480:	4618      	mov	r0, r3
 800b482:	f000 fa55 	bl	800b930 <iapInitInputImage>
 800b486:	4603      	mov	r3, r0
 800b488:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b48a:	89fb      	ldrh	r3, [r7, #14]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <iapInit+0x8a>
      return CBOOT_ERROR_FAILURE;
 800b490:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b494:	e03c      	b.n	800b510 <iapInit+0x104>

   //Initialize image output context (will process the output binary or image)
   error = iapInitOutputImage(&context->settings,context);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6879      	ldr	r1, [r7, #4]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 fab6 	bl	800ba0c <iapInitOutputImage>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b4a4:	89fb      	ldrh	r3, [r7, #14]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d002      	beq.n	800b4b0 <iapInit+0xa4>
      return CBOOT_ERROR_FAILURE;
 800b4aa:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b4ae:	e02f      	b.n	800b510 <iapInit+0x104>

#if IAP_SINGLE_BANK_SUPPORT == ENABLED
   // Set index of output image
   error = iapCalculateOutputImageIdx(context, &newImgIdx);
 800b4b0:	f107 030c 	add.w	r3, r7, #12
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f93d 	bl	800b736 <iapCalculateOutputImageIdx>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b4c0:	89fb      	ldrh	r3, [r7, #14]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d002      	beq.n	800b4cc <iapInit+0xc0>
      return CBOOT_ERROR_FAILURE;
 800b4c6:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b4ca:	e021      	b.n	800b510 <iapInit+0x104>

   context->imageOutput.imgIdx = newImgIdx;
 800b4cc:	89ba      	ldrh	r2, [r7, #12]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8a3 2430 	strh.w	r2, [r3, #1072]	; 0x430
#endif

   //Get slot to store output update image
   error = iapGetUpdateSlot(context, &context->imageOutput.slotInfo);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 f957 	bl	800b790 <iapGetUpdateSlot>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	81fb      	strh	r3, [r7, #14]
   //Is any error?
   if(error)
 800b4e6:	89fb      	ldrh	r3, [r7, #14]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <iapInit+0xe6>
      return CBOOT_ERROR_FAILURE;
 800b4ec:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b4f0:	e00e      	b.n	800b510 <iapInit+0x104>

   //Get external flash memory start address
   context->imageOutput.firmwareAddr = context->imageOutput.slotInfo->addr;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438

   //Initialize memory position to flash bank start addresse
   context->imageOutput.pos = context->imageOutput.firmwareAddr;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8d3 2438 	ldr.w	r2, [r3, #1080]	; 0x438
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

   //Successful process
   return CBOOT_NO_ERROR;
 800b50c:	f240 234b 	movw	r3, #587	; 0x24b
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bdb0      	pop	{r4, r5, r7, pc}

0800b518 <iapUpdate>:
 * @param[in] length Length of the firmware chunck of data to be written
 * @return Status code
 **/

cboot_error_t iapUpdate(IapContext *context, const void *data, size_t length)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
   error_t error;
   uint_t n;
   uint8_t *pData;

   //Check parameters validity
   if (context == NULL || data == NULL || length == 0)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d005      	beq.n	800b536 <iapUpdate+0x1e>
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <iapUpdate+0x1e>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d102      	bne.n	800b53c <iapUpdate+0x24>
      return CBOOT_ERROR_INVALID_PARAMETERS;//ERROR_INVALID_PARAMETER;
 800b536:	f240 234d 	movw	r3, #589	; 0x24d
 800b53a:	e065      	b.n	800b608 <iapUpdate+0xf0>

   //Initialize variables
   n = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	617b      	str	r3, [r7, #20]
   error = NO_ERROR;
 800b540:	2300      	movs	r3, #0
 800b542:	83fb      	strh	r3, [r7, #30]

   //Point to the beginning of the data
   pData = (uint8_t*)data;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	61bb      	str	r3, [r7, #24]

   //Process the incoming data
   while(length > 0)
 800b548:	e053      	b.n	800b5f2 <iapUpdate+0xda>
   {
      //Still room in buffer?
      if(context->imageInput.bufferLen < sizeof(context->imageInput.buffer))
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b550:	2b7f      	cmp	r3, #127	; 0x7f
 800b552:	d83e      	bhi.n	800b5d2 <iapUpdate+0xba>
      {
         //Fill buffer with input data
         n = MIN(length, sizeof(context->imageInput.buffer) - context->imageInput.bufferLen);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b55a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	4293      	cmp	r3, r2
 800b562:	bf28      	it	cs
 800b564:	4613      	movcs	r3, r2
 800b566:	617b      	str	r3, [r7, #20]
         memcpy(context->imageInput.bufferPos, pData, n);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	69b9      	ldr	r1, [r7, #24]
 800b572:	4618      	mov	r0, r3
 800b574:	f00d fc0a 	bl	8018d8c <memcpy>

         //Update buffer position and length
         context->imageInput.bufferPos += n;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	441a      	add	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
         context->imageInput.bufferLen += n;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	441a      	add	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

         //Update input data postion and length
         pData += n;
 800b598:	69ba      	ldr	r2, [r7, #24]
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	4413      	add	r3, r2
 800b59e:	61bb      	str	r3, [r7, #24]
         length -= n;
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	607b      	str	r3, [r7, #4]

         //Process received image input data
         error = iapProcessInputImage(&context->imageInput);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	335c      	adds	r3, #92	; 0x5c
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 fb8b 	bl	800bcc8 <iapProcessInputImage>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	83fb      	strh	r3, [r7, #30]
         //Is any error?
         if(error)
 800b5b6:	8bfb      	ldrh	r3, [r7, #30]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d01a      	beq.n	800b5f2 <iapUpdate+0xda>
         {
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
            //Erase output image slot first bytes to make sure bootloader doesn't
            //consider it as a new valid update image if a reboot occurs
            context->secondaryMem.driver->erase(
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c0:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 800b5c8:	6812      	ldr	r2, [r2, #0]
 800b5ca:	2140      	movs	r1, #64	; 0x40
 800b5cc:	4610      	mov	r0, r2
 800b5ce:	4798      	blx	r3
#endif
            break;
 800b5d0:	e012      	b.n	800b5f8 <iapUpdate+0xe0>
         }
      }
      else
      {
         //Debug message
         TRACE_ERROR("Buffer would overflow!\r\n");
 800b5d2:	f7fd ff98 	bl	8009506 <osSuspendAllTasks>
 800b5d6:	4b0e      	ldr	r3, [pc, #56]	; (800b610 <iapUpdate+0xf8>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	2218      	movs	r2, #24
 800b5de:	2101      	movs	r1, #1
 800b5e0:	480c      	ldr	r0, [pc, #48]	; (800b614 <iapUpdate+0xfc>)
 800b5e2:	f00d f9bf 	bl	8018964 <fwrite>
 800b5e6:	f7fd ff99 	bl	800951c <osResumeAllTasks>
         error = ERROR_BUFFER_OVERFLOW;
 800b5ea:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800b5ee:	83fb      	strh	r3, [r7, #30]
         break;
 800b5f0:	e002      	b.n	800b5f8 <iapUpdate+0xe0>
   while(length > 0)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1a8      	bne.n	800b54a <iapUpdate+0x32>
      }
   }

   //Return error code
   if(error) {
 800b5f8:	8bfb      	ldrh	r3, [r7, #30]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d002      	beq.n	800b604 <iapUpdate+0xec>
      return CBOOT_ERROR_FAILURE;
 800b5fe:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b602:	e001      	b.n	800b608 <iapUpdate+0xf0>
   } else {
      return CBOOT_NO_ERROR;
 800b604:	f240 234b 	movw	r3, #587	; 0x24b
   }
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3720      	adds	r7, #32
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	200001c8 	.word	0x200001c8
 800b614:	0801f844 	.word	0x0801f844

0800b618 <iapFinalize>:
 * @param[in,out] context Pointer to the IAP application context
 * @return Error code
 **/

cboot_error_t iapFinalize(IapContext* context)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
   IAP_EXT_MEM_ENCRYPTION_SUPPORT == ENABLED)
   BootMailBox bMsg;
#endif

   //Check parameters validity
   if (context == NULL)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d102      	bne.n	800b62c <iapFinalize+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800b626:	f240 234d 	movw	r3, #589	; 0x24d
 800b62a:	e051      	b.n	800b6d0 <iapFinalize+0xb8>

   //Debug message
   TRACE_INFO("Finalizing firmware update...\r\n");

   //Ready to verify firmware image validity?
   if (context->imageInput.state == IAP_STATE_VALIDATE_APP)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b632:	2b04      	cmp	r3, #4
 800b634:	d134      	bne.n	800b6a0 <iapFinalize+0x88>
   {
      //Verify firmware image validity (could integrity tag or
      //authentification tag or signature)
      error = verifyConfirm(&context->imageInput.verifyContext, context->imageInput.checkData, context->imageInput.checkDataLen);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f503 7108 	add.w	r1, r3, #544	; 0x220
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800b648:	461a      	mov	r2, r3
 800b64a:	f001 fab1 	bl	800cbb0 <verifyConfirm>
 800b64e:	4603      	mov	r3, r0
 800b650:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if (error)
 800b652:	89fb      	ldrh	r3, [r7, #14]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d01c      	beq.n	800b692 <iapFinalize+0x7a>
      {
         //Debug message
         TRACE_ERROR("Firmware image is invalid!\r\n");
 800b658:	f7fd ff55 	bl	8009506 <osSuspendAllTasks>
 800b65c:	4b1e      	ldr	r3, [pc, #120]	; (800b6d8 <iapFinalize+0xc0>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	221c      	movs	r2, #28
 800b664:	2101      	movs	r1, #1
 800b666:	481d      	ldr	r0, [pc, #116]	; (800b6dc <iapFinalize+0xc4>)
 800b668:	f00d f97c 	bl	8018964 <fwrite>
 800b66c:	f7fd ff56 	bl	800951c <osResumeAllTasks>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
            //Erase output image slot first bytes to make sure bootloader doesn't
            //consider it as a new valid update image if a reboot occurs
            context->secondaryMem.driver->erase(
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b674:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 800b67c:	6812      	ldr	r2, [r2, #0]
 800b67e:	2140      	movs	r1, #64	; 0x40
 800b680:	4610      	mov	r0, r2
 800b682:	4798      	blx	r3
#endif

         //Return to IAP idle state
         context->imageInput.state = IAP_STATE_IDLE;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
         //Return error code
         return CBOOT_ERROR_INVALID_IMAGE_APP;
 800b68c:	f44f 7315 	mov.w	r3, #596	; 0x254
 800b690:	e01e      	b.n	800b6d0 <iapFinalize+0xb8>
         if(error)
            return CBOOT_ERROR_FAILURE;
      }
#endif
      //Change IAP state
      context->imageInput.state = IAP_STATE_APP_REBOOT;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2205      	movs	r2, #5
 800b696:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      return CBOOT_ERROR_IMAGE_NOT_READY;
   }

   //Successful process
   return CBOOT_NO_ERROR;
 800b69a:	f240 234b 	movw	r3, #587	; 0x24b
 800b69e:	e017      	b.n	800b6d0 <iapFinalize+0xb8>
      TRACE_ERROR("Firmware image is not ready for verification!\r\n");
 800b6a0:	f7fd ff31 	bl	8009506 <osSuspendAllTasks>
 800b6a4:	4b0c      	ldr	r3, [pc, #48]	; (800b6d8 <iapFinalize+0xc0>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	222f      	movs	r2, #47	; 0x2f
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	480c      	ldr	r0, [pc, #48]	; (800b6e0 <iapFinalize+0xc8>)
 800b6b0:	f00d f958 	bl	8018964 <fwrite>
 800b6b4:	f7fd ff32 	bl	800951c <osResumeAllTasks>
            context->secondaryMem.driver->erase(
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6bc:	695b      	ldr	r3, [r3, #20]
               context->imageOutput.slotInfo->addr, sizeof(ImageHeader));
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	f8d2 2800 	ldr.w	r2, [r2, #2048]	; 0x800
            context->secondaryMem.driver->erase(
 800b6c4:	6812      	ldr	r2, [r2, #0]
 800b6c6:	2140      	movs	r1, #64	; 0x40
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4798      	blx	r3
      return CBOOT_ERROR_IMAGE_NOT_READY;
 800b6cc:	f240 2355 	movw	r3, #597	; 0x255
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	200001c8 	.word	0x200001c8
 800b6dc:	0801f860 	.word	0x0801f860
 800b6e0:	0801f880 	.word	0x0801f880

0800b6e4 <iapReboot>:
 * @param[in] context Pointer to the IAP context
 * @return Error code.
 **/

cboot_error_t iapReboot(IapContext* context)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]

   //Debug message
   TRACE_INFO("Rebooting device to finalize update...\r\n");

   //Check parameter validity
   if (context == NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d102      	bne.n	800b6f8 <iapReboot+0x14>
      return CBOOT_ERROR_INVALID_PARAMETERS;
 800b6f2:	f240 234d 	movw	r3, #589	; 0x24d
 800b6f6:	e01a      	b.n	800b72e <iapReboot+0x4a>

   if (context->imageInput.state == IAP_STATE_APP_REBOOT)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b6fe:	2b05      	cmp	r3, #5
 800b700:	d113      	bne.n	800b72a <iapReboot+0x46>
   {
      //Get flash info
      error = context->primaryMem.driver->getInfo(&memInfo);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	f107 0208 	add.w	r2, r7, #8
 800b70c:	4610      	mov	r0, r2
 800b70e:	4798      	blx	r3
 800b710:	4603      	mov	r3, r0
 800b712:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800b714:	89fb      	ldrh	r3, [r7, #14]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d002      	beq.n	800b720 <iapReboot+0x3c>
         return CBOOT_ERROR_FAILURE;
 800b71a:	f44f 7313 	mov.w	r3, #588	; 0x24c
 800b71e:	e006      	b.n	800b72e <iapReboot+0x4a>

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Reboot system to complete firmware update procedure
      mcuSystemReset();
 800b720:	f001 f9a0 	bl	800ca64 <mcuSystemReset>
      //Wrong state
      return CBOOT_ERROR_INVALID_STATE;
   }

   //Successful process
   return CBOOT_NO_ERROR;
 800b724:	f240 234b 	movw	r3, #587	; 0x24b
 800b728:	e001      	b.n	800b72e <iapReboot+0x4a>
      return CBOOT_ERROR_INVALID_STATE;
 800b72a:	f240 2356 	movw	r3, #598	; 0x256
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <iapCalculateOutputImageIdx>:
 * @param[out] imgIdx Calculated value of the output image index.
 * @return Error code.
 **/

error_t iapCalculateOutputImageIdx(IapContext *context, uint16_t *imgIdx)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b094      	sub	sp, #80	; 0x50
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	6039      	str	r1, [r7, #0]
   ImageHeader imgHeader;
   uint32_t curIdx;
   error_t error;

   //Check paramter validity
   if(context == NULL || imgIdx == NULL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d002      	beq.n	800b74c <iapCalculateOutputImageIdx+0x16>
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <iapCalculateOutputImageIdx+0x1a>
      return ERROR_INVALID_PARAMETER;
 800b74c:	2302      	movs	r3, #2
 800b74e:	e01b      	b.n	800b788 <iapCalculateOutputImageIdx+0x52>

   //Get image header from primary flash memory first slot
   error = iapGetImageHeaderFromSlot(&context->primaryMem.slots[0], &imgHeader);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	3328      	adds	r3, #40	; 0x28
 800b754:	f107 0208 	add.w	r2, r7, #8
 800b758:	4611      	mov	r1, r2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 fa76 	bl	800bc4c <iapGetImageHeaderFromSlot>
 800b760:	4603      	mov	r3, r0
 800b762:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   //Is any error?
   if(error)
 800b766:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <iapCalculateOutputImageIdx+0x3e>
      return error;
 800b76e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b772:	e009      	b.n	800b788 <iapCalculateOutputImageIdx+0x52>

   //Get image index from header
   curIdx = imgHeader.imgIndex;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	64bb      	str	r3, [r7, #72]	; 0x48
   //Save incremented image index
   *imgIdx = ++curIdx;
 800b778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b77a:	3301      	adds	r3, #1
 800b77c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b77e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b780:	b29a      	uxth	r2, r3
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	801a      	strh	r2, [r3, #0]

   //Successful process
   return NO_ERROR;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3750      	adds	r7, #80	; 0x50
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <iapGetUpdateSlot>:
 * @param[out] slot Pointer to the slot that will be used to hold output image.
 * @return
 **/

error_t iapGetUpdateSlot(IapContext *context, SlotDesc **slot)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
   SlotDesc *tempSlot;
   ImageHeader header;
#endif

   //Check parameters validity
   if(context == NULL)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <iapGetUpdateSlot+0x14>
      return ERROR_INVALID_PARAMETER;
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	e005      	b.n	800b7b0 <iapGetUpdateSlot+0x20>
   //Select the second slot of primary flash memory that match the second flash bank
   *slot = (SlotDesc*)&context->primaryMem.slots[1];
#else
#if (IAP_FALLBACK_SUPPORT == DISABLED)
   //In single bank mode without fallback support only one
   *slot = (SlotDesc*)&context->secondaryMem.slots[0];
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	601a      	str	r2, [r3, #0]
   }
#endif
#endif

   //Successful process
   return NO_ERROR;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bc80      	pop	{r7}
 800b7b8:	4770      	bx	lr

0800b7ba <iapInitPrimaryMemory>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitPrimaryMemory(IapSettings *settings, IapContext *context)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b086      	sub	sp, #24
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
   uint32_t nextSector;
#endif
   error_t error;

   //Check parameters validity
   if(context == NULL || settings == NULL)
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d002      	beq.n	800b7d0 <iapInitPrimaryMemory+0x16>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <iapInitPrimaryMemory+0x1a>
      return ERROR_INVALID_PARAMETER;
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	e04a      	b.n	800b86a <iapInitPrimaryMemory+0xb0>

   //Check primary flash memory driver is valid
   if(settings->primaryFlashDriver == NULL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d101      	bne.n	800b7e0 <iapInitPrimaryMemory+0x26>
      return ERROR_INVALID_PARAMETER;
 800b7dc:	2302      	movs	r3, #2
 800b7de:	e044      	b.n	800b86a <iapInitPrimaryMemory+0xb0>

   //Save primary flash memory driver
   context->primaryMem.driver = (FlashDriver*)settings->primaryFlashDriver;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685a      	ldr	r2, [r3, #4]
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	625a      	str	r2, [r3, #36]	; 0x24

   //Point to the memory driver
   flashDriver = (FlashDriver*)context->primaryMem.driver;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ec:	617b      	str	r3, [r7, #20]

   //Initialize primary (internal) memory flash driver
   error = flashDriver->init();
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4798      	blx	r3
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b7f8:	8a7b      	ldrh	r3, [r7, #18]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d001      	beq.n	800b802 <iapInitPrimaryMemory+0x48>
      return error;
 800b7fe:	8a7b      	ldrh	r3, [r7, #18]
 800b800:	e033      	b.n	800b86a <iapInitPrimaryMemory+0xb0>

   //Get memory driver informations
   error = flashDriver->getInfo(&memInfo);
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	f107 020c 	add.w	r2, r7, #12
 800b80a:	4610      	mov	r0, r2
 800b80c:	4798      	blx	r3
 800b80e:	4603      	mov	r3, r0
 800b810:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b812:	8a7b      	ldrh	r3, [r7, #18]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <iapInitPrimaryMemory+0x62>
      return error;
 800b818:	8a7b      	ldrh	r3, [r7, #18]
 800b81a:	e026      	b.n	800b86a <iapInitPrimaryMemory+0xb0>
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
   //Debug message
   TRACE_DEBUG("Primary flash addr = 0x%08lX | Bootloader size = 0x%08X\r\n", (unsigned long) memInfo->flashAddr, BOOTLOADER_SIZE);

   // Get the address of the next sector available after the bootloader
   error = context->primaryMem.driver->getNextSectorAddr(memInfo->flashAddr + BOOTLOADER_SIZE, &nextSector);
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	69db      	ldr	r3, [r3, #28]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	68d2      	ldr	r2, [r2, #12]
 800b826:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800b82a:	f107 0108 	add.w	r1, r7, #8
 800b82e:	4610      	mov	r0, r2
 800b830:	4798      	blx	r3
 800b832:	4603      	mov	r3, r0
 800b834:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b836:	8a7b      	ldrh	r3, [r7, #18]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d001      	beq.n	800b840 <iapInitPrimaryMemory+0x86>
      return error;
 800b83c:	8a7b      	ldrh	r3, [r7, #18]
 800b83e:	e014      	b.n	800b86a <iapInitPrimaryMemory+0xb0>
   //Debug message
   TRACE_DEBUG("Primary slot 1 addr = 0x%08lX\r\n", (unsigned long) nextSector);

   //Set primary flash memory slot which hold current running application
   //This slot is located after the bootloader at the beginning of the next available flash sector
   context->primaryMem.slots[0].addr = nextSector;
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	629a      	str	r2, [r3, #40]	; 0x28
   context->primaryMem.slots[0].size = (memInfo->flashAddr + memInfo->flashSize) - (nextSector + settings->sizeSlot1);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	68da      	ldr	r2, [r3, #12]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	441a      	add	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a19      	ldr	r1, [r3, #32]
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	440b      	add	r3, r1
 800b858:	1ad2      	subs	r2, r2, r3
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	62da      	str	r2, [r3, #44]	; 0x2c
   context->primaryMem.slots[0].flash =  (FlashDesc*)&context->primaryMem;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	631a      	str	r2, [r3, #48]	; 0x30
   context->primaryMem.slots[1].size = memInfo->bankSize;
   context->primaryMem.slots[1].flash = (FlashDesc*)&context->primaryMem;
#endif

   //Succesful process
   return NO_ERROR;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <iapInitSecondaryMemory>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitSecondaryMemory(IapSettings *settings, IapContext *context)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b086      	sub	sp, #24
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	6039      	str	r1, [r7, #0]
   FlashDriver *flashDriver;
   const FlashInfo *memInfo;
   bool_t ret;

   //Check parameters validity
   if(context == NULL || settings == NULL)
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d002      	beq.n	800b888 <iapInitSecondaryMemory+0x16>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d101      	bne.n	800b88c <iapInitSecondaryMemory+0x1a>
      return ERROR_INVALID_PARAMETER;
 800b888:	2302      	movs	r3, #2
 800b88a:	e04d      	b.n	800b928 <iapInitSecondaryMemory+0xb6>

   //Check secondary flash memory driver is valid
   if(settings->secondaryFlashDriver == NULL)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <iapInitSecondaryMemory+0x26>
      return ERROR_INVALID_PARAMETER;
 800b894:	2302      	movs	r3, #2
 800b896:	e047      	b.n	800b928 <iapInitSecondaryMemory+0xb6>

   //Save secondary flash memory driver
   context->secondaryMem.driver = (FlashDriver*)settings->secondaryFlashDriver;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	691a      	ldr	r2, [r3, #16]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	641a      	str	r2, [r3, #64]	; 0x40

   //Point to the secondary flash memory driver
   flashDriver = (FlashDriver*)context->secondaryMem.driver;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a4:	617b      	str	r3, [r7, #20]

   //Initialize secondary flash memory driver
   error = flashDriver->init();
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4798      	blx	r3
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b8b0:	8a7b      	ldrh	r3, [r7, #18]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <iapInitSecondaryMemory+0x48>
      return error;
 800b8b6:	8a7b      	ldrh	r3, [r7, #18]
 800b8b8:	e036      	b.n	800b928 <iapInitSecondaryMemory+0xb6>

   //Get secondary flash memory driver informations
   error = flashDriver->getInfo(&memInfo);
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	f107 0208 	add.w	r2, r7, #8
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	4798      	blx	r3
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800b8ca:	8a7b      	ldrh	r3, [r7, #18]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <iapInitSecondaryMemory+0x62>
      return error;
 800b8d0:	8a7b      	ldrh	r3, [r7, #18]
 800b8d2:	e029      	b.n	800b928 <iapInitSecondaryMemory+0xb6>
   //Debug message
   TRACE_DEBUG("Secondary flash addr = 0x%08lX\r\n", (unsigned long) memInfo->flashAddr);
   TRACE_DEBUG("Secondary slot 1 addr = 0x%08lX\r\n", (unsigned long) settings->addrSlot1);

   //Check if user slot 1 address match a secondary flash memory sector address
   ret = flashDriver->isSectorAddr(settings->addrSlot1);
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	8b92      	ldrh	r2, [r2, #28]
 800b8dc:	4610      	mov	r0, r2
 800b8de:	4798      	blx	r3
 800b8e0:	60f8      	str	r0, [r7, #12]
   if(!ret)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <iapInitSecondaryMemory+0x7a>
      return ERROR_INVALID_VALUE;
 800b8e8:	23f1      	movs	r3, #241	; 0xf1
 800b8ea:	e01d      	b.n	800b928 <iapInitSecondaryMemory+0xb6>

   //Check if user slot 1 fits in secondary flash memory
   if(settings->addrSlot1 + settings->sizeSlot1 > memInfo->flashAddr + memInfo->flashSize)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	8b9b      	ldrh	r3, [r3, #28]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	441a      	add	r2, r3
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	68d9      	ldr	r1, [r3, #12]
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	440b      	add	r3, r1
 800b902:	429a      	cmp	r2, r3
 800b904:	d901      	bls.n	800b90a <iapInitSecondaryMemory+0x98>
      return ERROR_FAILURE;
 800b906:	2301      	movs	r3, #1
 800b908:	e00e      	b.n	800b928 <iapInitSecondaryMemory+0xb6>

   //Set secondary flash memory slot 1 which will hold the new encrypted update image
   //If fallback support is enabled the slot 1 could also hold the
   //backup encrypted image of the current running application
   context->secondaryMem.slots[0].addr = settings->addrSlot1;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	8b9b      	ldrh	r3, [r3, #28]
 800b90e:	461a      	mov	r2, r3
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	645a      	str	r2, [r3, #68]	; 0x44
   context->secondaryMem.slots[0].size = settings->sizeSlot1;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a1a      	ldr	r2, [r3, #32]
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	649a      	str	r2, [r3, #72]	; 0x48
   context->secondaryMem.slots[0].flash = (FlashDesc*)&context->secondaryMem;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	64da      	str	r2, [r3, #76]	; 0x4c
   context->secondaryMem.slots[1].flash = (FlashDriver*)&context->secondaryMem;
#endif
#endif

   //Succesful process
   return NO_ERROR;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3718      	adds	r7, #24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <iapInitInputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitInputImage(IapSettings *settings, IapContext *context)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
   error_t error;
   ImageContext *imageIn;

   //Initialize status code
   error = NO_ERROR;
 800b93a:	2300      	movs	r3, #0
 800b93c:	81fb      	strh	r3, [r7, #14]

   //Check parameters validity
   if(context == NULL || settings == NULL)
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <iapInitInputImage+0x1a>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <iapInitInputImage+0x1e>
      return ERROR_INVALID_PARAMETER;
 800b94a:	2302      	movs	r3, #2
 800b94c:	e055      	b.n	800b9fa <iapInitInputImage+0xca>

   //Check image verification method settings
   if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	7a1b      	ldrb	r3, [r3, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d105      	bne.n	800b962 <iapInitInputImage+0x32>
   {
#if VERIFY_INTEGRITY_SUPPORT == ENABLED
      //Check image integrity verification settings
      if(settings->imageInCrypto.verifySettings.integrityAlgo == NULL)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d11b      	bne.n	800b996 <iapInitInputImage+0x66>
         return ERROR_INVALID_PARAMETER;
 800b95e:	2302      	movs	r3, #2
 800b960:	e04b      	b.n	800b9fa <iapInitInputImage+0xca>
#else
      //Image integrity verification support is not activated
      return ERROR_INVALID_PARAMETER;
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	7a1b      	ldrb	r3, [r3, #8]
 800b966:	2b01      	cmp	r3, #1
 800b968:	d101      	bne.n	800b96e <iapInitInputImage+0x3e>
      //Force authentication algorythm to HMAC
      if(settings->imageInCrypto.verifySettings.authAlgo != VERIFY_AUTH_HMAC)
         return ERROR_UNSUPPORTED_ALGO;
#else
      //Image authentication verification support is not activated
      return ERROR_INVALID_PARAMETER;
 800b96a:	2302      	movs	r3, #2
 800b96c:	e045      	b.n	800b9fa <iapInitInputImage+0xca>
#endif
   }
   else if(settings->imageInCrypto.verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	7a1b      	ldrb	r3, [r3, #8]
 800b972:	2b02      	cmp	r3, #2
 800b974:	d101      	bne.n	800b97a <iapInitInputImage+0x4a>
      if(settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_RSA &&
         settings->imageInCrypto.verifySettings.signAlgo != VERIFY_SIGN_ECDSA)
         return ERROR_UNSUPPORTED_SIGNATURE_ALGO;
#else
      //Image signature verification support is not activated
      return ERROR_INVALID_PARAMETER;
 800b976:	2302      	movs	r3, #2
 800b978:	e03f      	b.n	800b9fa <iapInitInputImage+0xca>
#endif
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image verification mode not supported!\r\n");
 800b97a:	f7fd fdc4 	bl	8009506 <osSuspendAllTasks>
 800b97e:	4b21      	ldr	r3, [pc, #132]	; (800ba04 <iapInitInputImage+0xd4>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	2228      	movs	r2, #40	; 0x28
 800b986:	2101      	movs	r1, #1
 800b988:	481f      	ldr	r0, [pc, #124]	; (800ba08 <iapInitInputImage+0xd8>)
 800b98a:	f00c ffeb 	bl	8018964 <fwrite>
 800b98e:	f7fd fdc5 	bl	800951c <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800b992:	2367      	movs	r3, #103	; 0x67
 800b994:	e031      	b.n	800b9fa <iapInitInputImage+0xca>
   if(settings->imageInCrypto.cipherMode != CIPHER_MODE_CBC)
      return ERROR_UNSUPPORTED_CIPHER_MODE;
#endif

   //Point to the input image context
   imageIn = (ImageContext*)&context->imageInput;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	335c      	adds	r3, #92	; 0x5c
 800b99a:	60bb      	str	r3, [r7, #8]

   //Clear input image context
   memset(imageIn, 0x00, sizeof(ImageContext));
 800b99c:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	68b8      	ldr	r0, [r7, #8]
 800b9a4:	f00d f906 	bl	8018bb4 <memset>

   //Set pointer to IAP context
   imageIn->iapContext = (IapContext*)context;
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	605a      	str	r2, [r3, #4]
   //Initialize buffer position to buffer start addresse
   imageIn->bufferPos = imageIn->buffer;
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f103 0219 	add.w	r2, r3, #25
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
   //Initialize check data position to check data start addresse
   imageIn->checkDataPos = imageIn->checkData;
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

   //Initialize image input process state
   imageIn->state = IAP_STATE_RECV_APP_HEADER;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	761a      	strb	r2, [r3, #24]
         return error;
   }
#endif

   //Initialize verification module
   error = verifyInit(&imageIn->verifyContext, &settings->imageInCrypto.verifySettings);
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	4610      	mov	r0, r2
 800b9da:	f001 f847 	bl	800ca6c <verifyInit>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	81fb      	strh	r3, [r7, #14]
   //Is any error ?
   if (error)
 800b9e2:	89fb      	ldrh	r3, [r7, #14]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <iapInitInputImage+0xbc>
      return error;
 800b9e8:	89fb      	ldrh	r3, [r7, #14]
 800b9ea:	e006      	b.n	800b9fa <iapInitInputImage+0xca>

   //Get exepecting image check data size
   imageIn->checkDataSize = imageIn->verifyContext.checkDataSize;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

   //Successful process
   return NO_ERROR;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	200001c8 	.word	0x200001c8
 800ba08:	0801f8b0 	.word	0x0801f8b0

0800ba0c <iapInitOutputImage>:
 * @param[in,out] context Pointer to the IAP context.
 * @return Error code
 **/

error_t iapInitOutputImage(IapSettings *settings, IapContext *context)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
   error_t error;
   ImageContext *imageOut;
   VerifySettings verifySettings;

   //Initialize status code
   error = NO_ERROR;
 800ba16:	2300      	movs	r3, #0
 800ba18:	82fb      	strh	r3, [r7, #22]

   //Initialize verify settings structure
   memset(&verifySettings, 0, sizeof(VerifySettings));
 800ba1a:	f107 0308 	add.w	r3, r7, #8
 800ba1e:	2208      	movs	r2, #8
 800ba20:	2100      	movs	r1, #0
 800ba22:	4618      	mov	r0, r3
 800ba24:	f00d f8c6 	bl	8018bb4 <memset>

   //Check parameters validty
   if(context == NULL || settings == NULL)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d002      	beq.n	800ba34 <iapInitOutputImage+0x28>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d101      	bne.n	800ba38 <iapInitOutputImage+0x2c>
      return ERROR_INVALID_PARAMETER;
 800ba34:	2302      	movs	r3, #2
 800ba36:	e02f      	b.n	800ba98 <iapInitOutputImage+0x8c>

   //Point to the output image context
   imageOut = (ImageContext*)&context->imageOutput;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800ba3e:	613b      	str	r3, [r7, #16]

   //Clear output image context
   memset(imageOut, 0x00, sizeof(ImageContext));
 800ba40:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 800ba44:	2100      	movs	r1, #0
 800ba46:	6938      	ldr	r0, [r7, #16]
 800ba48:	f00d f8b4 	bl	8018bb4 <memset>

   //Set pointer to IAP context
   imageOut->iapContext = (IapContext*)context;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	605a      	str	r2, [r3, #4]
   //Initialize buffer position to buffer start addresse
   imageOut->bufferPos = imageOut->buffer;
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	f103 0219 	add.w	r2, r3, #25
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

   //Initialize image output process state
   imageOut->state = 0;
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	2200      	movs	r2, #0
 800ba62:	761a      	strb	r2, [r3, #24]
   if (error)
      return error;
#endif

   //Initialize check data position to check data start addresse
   imageOut->checkDataPos = imageOut->checkData;
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	f503 72e2 	add.w	r2, r3, #452	; 0x1c4
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

   //Set verification module settings
   verifySettings.verifyMethod = VERIFY_METHOD_INTEGRITY;
 800ba70:	2300      	movs	r3, #0
 800ba72:	723b      	strb	r3, [r7, #8]
   verifySettings.integrityAlgo = CRC32_HASH_ALGO;
 800ba74:	4b0a      	ldr	r3, [pc, #40]	; (800baa0 <iapInitOutputImage+0x94>)
 800ba76:	60fb      	str	r3, [r7, #12]

   //Initialize verification module
   error = verifyInit(&imageOut->verifyContext, &verifySettings);
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	33a4      	adds	r3, #164	; 0xa4
 800ba7c:	f107 0208 	add.w	r2, r7, #8
 800ba80:	4611      	mov	r1, r2
 800ba82:	4618      	mov	r0, r3
 800ba84:	f000 fff2 	bl	800ca6c <verifyInit>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	82fb      	strh	r3, [r7, #22]
   //Is any error ?
   if (error)
 800ba8c:	8afb      	ldrh	r3, [r7, #22]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <iapInitOutputImage+0x8a>
      return error;
 800ba92:	8afb      	ldrh	r3, [r7, #22]
 800ba94:	e000      	b.n	800ba98 <iapInitOutputImage+0x8c>
#endif

   //Return status code
   return error;
 800ba96:	8afb      	ldrh	r3, [r7, #22]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	08020114 	.word	0x08020114

0800baa4 <iapWrite>:
 * @param[in] length Length of the firmware data bloc to be written
 * @return Error code
 **/

error_t iapWrite(ImageContext *context, const uint8_t *data, size_t length, uint8_t flag)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b08a      	sub	sp, #40	; 0x28
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
 800bab0:	70fb      	strb	r3, [r7, #3]
   size_t writeBlockSize;
   const FlashInfo *memInfo;
   const FlashDriver *flashDriver;

   //Check parameters validity
   if(context == NULL || data == NULL || length == 0)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d005      	beq.n	800bac4 <iapWrite+0x20>
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d002      	beq.n	800bac4 <iapWrite+0x20>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <iapWrite+0x24>
      return ERROR_INVALID_PARAMETER;
 800bac4:	2302      	movs	r3, #2
 800bac6:	e0b2      	b.n	800bc2e <iapWrite+0x18a>

   //Get memory driver
   flashDriver = ((FlashDesc*)context->slotInfo->flash)->driver;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	627b      	str	r3, [r7, #36]	; 0x24

   //Get memory driver informations
   error = flashDriver->getInfo(&memInfo);
 800bad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	f107 0214 	add.w	r2, r7, #20
 800badc:	4610      	mov	r0, r2
 800bade:	4798      	blx	r3
 800bae0:	4603      	mov	r3, r0
 800bae2:	847b      	strh	r3, [r7, #34]	; 0x22
   //Is any error?
   if(error)
 800bae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <iapWrite+0x4a>
      return error;
 800baea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800baec:	e09f      	b.n	800bc2e <iapWrite+0x18a>

   //Get memory driver write block size
   writeBlockSize = memInfo->writeSize;
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	61fb      	str	r3, [r7, #28]

   //Temporary data flush required?
   if(flag == 2)
 800baf4:	78fb      	ldrb	r3, [r7, #3]
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	d15c      	bne.n	800bbb4 <iapWrite+0x110>
   {
      //Reset temporary buffer data
      memset(tempBuffer, 0x00, sizeof(tempBuffer));
 800bafa:	2240      	movs	r2, #64	; 0x40
 800bafc:	2100      	movs	r1, #0
 800bafe:	484e      	ldr	r0, [pc, #312]	; (800bc38 <iapWrite+0x194>)
 800bb00:	f00d f858 	bl	8018bb4 <memset>
      //Reset temporary buffer position
      tempBufferPos = tempBuffer;
 800bb04:	4b4d      	ldr	r3, [pc, #308]	; (800bc3c <iapWrite+0x198>)
 800bb06:	4a4c      	ldr	r2, [pc, #304]	; (800bc38 <iapWrite+0x194>)
 800bb08:	601a      	str	r2, [r3, #0]
      //Reset temporary buffer length
      tempBufferLen = 0;
 800bb0a:	4b4d      	ldr	r3, [pc, #308]	; (800bc40 <iapWrite+0x19c>)
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	601a      	str	r2, [r3, #0]
   }

   //Process incomming data
   while(length > 0)
 800bb10:	e050      	b.n	800bbb4 <iapWrite+0x110>
   {
      //Fill temporary buffer to reach allowed flash memory write block size
      n = MIN(length, writeBlockSize - tempBufferLen);
 800bb12:	4b4b      	ldr	r3, [pc, #300]	; (800bc40 <iapWrite+0x19c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	69fa      	ldr	r2, [r7, #28]
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	bf28      	it	cs
 800bb20:	4613      	movcs	r3, r2
 800bb22:	61bb      	str	r3, [r7, #24]

      //Fill buffer
      memcpy(tempBufferPos, data, n);
 800bb24:	4b45      	ldr	r3, [pc, #276]	; (800bc3c <iapWrite+0x198>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	69ba      	ldr	r2, [r7, #24]
 800bb2a:	68b9      	ldr	r1, [r7, #8]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f00d f92d 	bl	8018d8c <memcpy>
      //Update temporary buffer position
      tempBufferPos += n;
 800bb32:	4b42      	ldr	r3, [pc, #264]	; (800bc3c <iapWrite+0x198>)
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	4413      	add	r3, r2
 800bb3a:	4a40      	ldr	r2, [pc, #256]	; (800bc3c <iapWrite+0x198>)
 800bb3c:	6013      	str	r3, [r2, #0]
      //Update temporary buffer length
      tempBufferLen += n;
 800bb3e:	4b40      	ldr	r3, [pc, #256]	; (800bc40 <iapWrite+0x19c>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	4413      	add	r3, r2
 800bb46:	4a3e      	ldr	r2, [pc, #248]	; (800bc40 <iapWrite+0x19c>)
 800bb48:	6013      	str	r3, [r2, #0]
      //Advance data pointer
      data += n;
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	4413      	add	r3, r2
 800bb50:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	607b      	str	r3, [r7, #4]

      //Enought data to be write?
      if(tempBufferLen == writeBlockSize)
 800bb5a:	4b39      	ldr	r3, [pc, #228]	; (800bc40 <iapWrite+0x19c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	69fa      	ldr	r2, [r7, #28]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d127      	bne.n	800bbb4 <iapWrite+0x110>
      {
         //Write image data into memory
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
     error = context->iapContext->secondaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	6910      	ldr	r0, [r2, #16]
 800bb70:	69fa      	ldr	r2, [r7, #28]
 800bb72:	4931      	ldr	r1, [pc, #196]	; (800bc38 <iapWrite+0x194>)
 800bb74:	4798      	blx	r3
 800bb76:	4603      	mov	r3, r0
 800bb78:	847b      	strh	r3, [r7, #34]	; 0x22
#elif IAP_DUAL_BANK_SUPPORT == ENABLED
     error = context->iapContext->primaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
#endif
         //Is any error?
         if(error)
 800bb7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00d      	beq.n	800bb9c <iapWrite+0xf8>
         {
            //Debug message
            TRACE_ERROR("Failed to write image data into external flash memory!\r\n");
 800bb80:	f7fd fcc1 	bl	8009506 <osSuspendAllTasks>
 800bb84:	4b2f      	ldr	r3, [pc, #188]	; (800bc44 <iapWrite+0x1a0>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	2238      	movs	r2, #56	; 0x38
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	482e      	ldr	r0, [pc, #184]	; (800bc48 <iapWrite+0x1a4>)
 800bb90:	f00c fee8 	bl	8018964 <fwrite>
 800bb94:	f7fd fcc2 	bl	800951c <osResumeAllTasks>
            return error;
 800bb98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb9a:	e048      	b.n	800bc2e <iapWrite+0x18a>
         }

         //Advance memory write address
         context->pos += writeBlockSize;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	691a      	ldr	r2, [r3, #16]
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	441a      	add	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	611a      	str	r2, [r3, #16]
         //Reset temporary buffer position
         tempBufferPos = tempBuffer;
 800bba8:	4b24      	ldr	r3, [pc, #144]	; (800bc3c <iapWrite+0x198>)
 800bbaa:	4a23      	ldr	r2, [pc, #140]	; (800bc38 <iapWrite+0x194>)
 800bbac:	601a      	str	r2, [r3, #0]
         //Reset temporary buffer length
         tempBufferLen = 0;
 800bbae:	4b24      	ldr	r3, [pc, #144]	; (800bc40 <iapWrite+0x19c>)
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	601a      	str	r2, [r3, #0]
   while(length > 0)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1ab      	bne.n	800bb12 <iapWrite+0x6e>
      }
   }

   //Temporary data write required?
   if(tempBufferLen != 0 && flag == 1)
 800bbba:	4b21      	ldr	r3, [pc, #132]	; (800bc40 <iapWrite+0x19c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d034      	beq.n	800bc2c <iapWrite+0x188>
 800bbc2:	78fb      	ldrb	r3, [r7, #3]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d131      	bne.n	800bc2c <iapWrite+0x188>
   {
      //Complete buffer with padding to reach minimum allowed write block size
      memset(tempBufferPos, 0x00, writeBlockSize - tempBufferLen);
 800bbc8:	4b1c      	ldr	r3, [pc, #112]	; (800bc3c <iapWrite+0x198>)
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	4b1c      	ldr	r3, [pc, #112]	; (800bc40 <iapWrite+0x19c>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	69fa      	ldr	r2, [r7, #28]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	f00c ffec 	bl	8018bb4 <memset>

      //Write image data into memory
#if IAP_SINGLE_BANK_SUPPORT == ENABLED
      error = context->iapContext->secondaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	6910      	ldr	r0, [r2, #16]
 800bbe8:	69fa      	ldr	r2, [r7, #28]
 800bbea:	4913      	ldr	r1, [pc, #76]	; (800bc38 <iapWrite+0x194>)
 800bbec:	4798      	blx	r3
 800bbee:	4603      	mov	r3, r0
 800bbf0:	847b      	strh	r3, [r7, #34]	; 0x22
#elif IAP_DUAL_BANK_SUPPORT == ENABLED
      error = context->iapContext->primaryMem.driver->write(context->pos, (uint8_t*)tempBuffer, writeBlockSize);
#endif
      //Is any error?
      if(error)
 800bbf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00d      	beq.n	800bc14 <iapWrite+0x170>
      {
         //Debug message
         TRACE_ERROR("Failed to write image data into external flash memory!\r\n");
 800bbf8:	f7fd fc85 	bl	8009506 <osSuspendAllTasks>
 800bbfc:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <iapWrite+0x1a0>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	2238      	movs	r2, #56	; 0x38
 800bc04:	2101      	movs	r1, #1
 800bc06:	4810      	ldr	r0, [pc, #64]	; (800bc48 <iapWrite+0x1a4>)
 800bc08:	f00c feac 	bl	8018964 <fwrite>
 800bc0c:	f7fd fc86 	bl	800951c <osResumeAllTasks>
         return error;
 800bc10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc12:	e00c      	b.n	800bc2e <iapWrite+0x18a>
      }

      //Advance memory write address
      context->pos += writeBlockSize;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	691a      	ldr	r2, [r3, #16]
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	441a      	add	r2, r3
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	611a      	str	r2, [r3, #16]
      //Reset temporary buffer position
      tempBufferPos = tempBuffer;
 800bc20:	4b06      	ldr	r3, [pc, #24]	; (800bc3c <iapWrite+0x198>)
 800bc22:	4a05      	ldr	r2, [pc, #20]	; (800bc38 <iapWrite+0x194>)
 800bc24:	601a      	str	r2, [r3, #0]
      //Reset temporary buffer length
      tempBufferLen = 0;
 800bc26:	4b06      	ldr	r3, [pc, #24]	; (800bc40 <iapWrite+0x19c>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]
   }

   //Successful process
   return NO_ERROR;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3728      	adds	r7, #40	; 0x28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	20002064 	.word	0x20002064
 800bc3c:	20000084 	.word	0x20000084
 800bc40:	200020a4 	.word	0x200020a4
 800bc44:	200001c8 	.word	0x200001c8
 800bc48:	0801f8dc 	.word	0x0801f8dc

0800bc4c <iapGetImageHeaderFromSlot>:
 * @param[out] header Pointer to store the extracted image header.
 * @return Error code.
 **/

error_t iapGetImageHeaderFromSlot(SlotDesc *slot, ImageHeader *header)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b096      	sub	sp, #88	; 0x58
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
   FlashDriver *flashDriver;
   ImageHeader *imgHeader;
   uint8_t buffer[sizeof(ImageHeader)];

   //Check parameter validity
   if(slot == NULL || header == NULL)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d002      	beq.n	800bc62 <iapGetImageHeaderFromSlot+0x16>
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <iapGetImageHeaderFromSlot+0x1a>
      return ERROR_INVALID_PARAMETER;
 800bc62:	2302      	movs	r3, #2
 800bc64:	e02c      	b.n	800bcc0 <iapGetImageHeaderFromSlot+0x74>

   //Point to the slot memory driver
   flashDriver = (FlashDriver*)((FlashDesc*)slot->flash)->driver;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	657b      	str	r3, [r7, #84]	; 0x54

   //Read first slot 64 bytes
   error = flashDriver->read(slot->addr, buffer, sizeof(ImageHeader));
 800bc6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	6810      	ldr	r0, [r2, #0]
 800bc76:	f107 010c 	add.w	r1, r7, #12
 800bc7a:	2240      	movs	r2, #64	; 0x40
 800bc7c:	4798      	blx	r3
 800bc7e:	4603      	mov	r3, r0
 800bc80:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   //Is any error?
   if(error)
 800bc84:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d001      	beq.n	800bc90 <iapGetImageHeaderFromSlot+0x44>
      return ERROR_FAILURE;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e017      	b.n	800bcc0 <iapGetImageHeaderFromSlot+0x74>

   //Get image header from above buffer
   error = imageGetHeader(buffer, sizeof(ImageHeader), &imgHeader);
 800bc90:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800bc94:	f107 030c 	add.w	r3, r7, #12
 800bc98:	2140      	movs	r1, #64	; 0x40
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 fba0 	bl	800c3e0 <imageGetHeader>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
   //Is any error?
   if(error)
 800bca6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d001      	beq.n	800bcb2 <iapGetImageHeaderFromSlot+0x66>
      return ERROR_INVALID_HEADER;
 800bcae:	23d4      	movs	r3, #212	; 0xd4
 800bcb0:	e006      	b.n	800bcc0 <iapGetImageHeaderFromSlot+0x74>

   //Save image header
   memcpy(header, imgHeader, sizeof(ImageHeader));
 800bcb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb4:	2240      	movs	r2, #64	; 0x40
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6838      	ldr	r0, [r7, #0]
 800bcba:	f00d f867 	bl	8018d8c <memcpy>

   //Successful process
   return NO_ERROR;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3758      	adds	r7, #88	; 0x58
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <iapProcessInputImage>:
 * @param[in,out] context Pointer to the Input image context
 * @return Status code
 **/

error_t iapProcessInputImage(ImageContext *context)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
   error_t error;

   //IAP receiving image header state?
   if(context->state == IAP_STATE_RECV_APP_HEADER)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	7e1b      	ldrb	r3, [r3, #24]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d109      	bne.n	800bcec <iapProcessInputImage+0x24>
   {
      //Process image header
      error = iapProcessAppHeader(context);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f967 	bl	800bfac <iapProcessAppHeader>
 800bcde:	4603      	mov	r3, r0
 800bce0:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800bce2:	89fb      	ldrh	r3, [r7, #14]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d020      	beq.n	800bd2a <iapProcessInputImage+0x62>
         return error;
 800bce8:	89fb      	ldrh	r3, [r7, #14]
 800bcea:	e01f      	b.n	800bd2c <iapProcessInputImage+0x64>
   }
   //IAP receiving image data state?
   else if(context->state == IAP_STATE_RECV_APP_DATA)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	7e1b      	ldrb	r3, [r3, #24]
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d109      	bne.n	800bd08 <iapProcessInputImage+0x40>
   {
      //Process image data
      error = iapProcessAppData(context);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fa1b 	bl	800c130 <iapProcessAppData>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800bcfe:	89fb      	ldrh	r3, [r7, #14]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d012      	beq.n	800bd2a <iapProcessInputImage+0x62>
         return error;
 800bd04:	89fb      	ldrh	r3, [r7, #14]
 800bd06:	e011      	b.n	800bd2c <iapProcessInputImage+0x64>
   }
   //IAP receiving image check data state?
   else if(context->state == IAP_STATE_RECV_APP_CHECK)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	7e1b      	ldrb	r3, [r3, #24]
 800bd0c:	2b03      	cmp	r3, #3
 800bd0e:	d109      	bne.n	800bd24 <iapProcessInputImage+0x5c>
   {
      //Process image check data
      error = iapProcessAppCheck(context);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fabf 	bl	800c294 <iapProcessAppCheck>
 800bd16:	4603      	mov	r3, r0
 800bd18:	81fb      	strh	r3, [r7, #14]
      //Is any error?
      if(error)
 800bd1a:	89fb      	ldrh	r3, [r7, #14]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d004      	beq.n	800bd2a <iapProcessInputImage+0x62>
         return error;
 800bd20:	89fb      	ldrh	r3, [r7, #14]
 800bd22:	e003      	b.n	800bd2c <iapProcessInputImage+0x64>
   }
   else
   {
      //Wrong state
      error = ERROR_WRONG_STATE;
 800bd24:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bd28:	81fb      	strh	r3, [r7, #14]
   }

   //Successful process
   return NO_ERROR;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <iapProcessOutputImageSingleBank>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

error_t iapProcessOutputImageSingleBank(ImageContext *context, uint8_t *data, size_t length)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
   error_t error;
   size_t n;
   ImageHeader *imgHeader;

   //Check parameters validity
   if(context == NULL || data == NULL || length == 0)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d006      	beq.n	800bd54 <iapProcessOutputImageSingleBank+0x20>
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d003      	beq.n	800bd54 <iapProcessOutputImageSingleBank+0x20>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f040 8111 	bne.w	800bf76 <iapProcessOutputImageSingleBank+0x242>
      return ERROR_INVALID_PARAMETER;
 800bd54:	2302      	movs	r3, #2
 800bd56:	e113      	b.n	800bf80 <iapProcessOutputImageSingleBank+0x24c>

   //Process the incoming data
   while(length > 0)
   {
      //The buffer can hold at most it size
      n = MIN(length, sizeof(context->buffer) - context->bufferLen);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd5e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	4293      	cmp	r3, r2
 800bd66:	bf28      	it	cs
 800bd68:	4613      	movcs	r3, r2
 800bd6a:	61fb      	str	r3, [r7, #28]

      //Copy the data to the buffer
      memcpy(context->bufferPos, data, n);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd72:	69fa      	ldr	r2, [r7, #28]
 800bd74:	68b9      	ldr	r1, [r7, #8]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f00d f808 	bl	8018d8c <memcpy>

      //Advance the data pointer
      data += n;
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	4413      	add	r3, r2
 800bd82:	60bb      	str	r3, [r7, #8]
      //Remaining bytes to process
      length -= n;
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	69fb      	ldr	r3, [r7, #28]
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	607b      	str	r3, [r7, #4]
      //Update buffer data length
      context->bufferLen += n;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	441a      	add	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      //Update buffer data free position
      context->bufferPos += n;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	441a      	add	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      //Format new Header
      if(context->state == 0)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	7e1b      	ldrb	r3, [r3, #24]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d14f      	bne.n	800be54 <iapProcessOutputImageSingleBank+0x120>
      {
         //Point to image header
         imgHeader = (ImageHeader*)context->buffer;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3319      	adds	r3, #25
 800bdb8:	617b      	str	r3, [r7, #20]

         //Debug message
         TRACE_DEBUG_ARRAY("HEADER: ", (uint8_t*)imgHeader, sizeof(ImageHeader));

         //Set new header image index
         imgHeader->imgIndex = context->imgIdx;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	605a      	str	r2, [r3, #4]

         //Save original image data size
         context->firmwareLength = imgHeader->dataSize;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	60da      	str	r2, [r3, #12]
         if(imgHeader->dataSize % context->cipherEngine.ivLen != 0)
            imgHeader->dataSize += context->cipherEngine.ivLen - (imgHeader->dataSize % context->cipherEngine.ivLen);
#endif

         //Compute new image header crc
         CRC32_HASH_ALGO->compute((uint8_t*)imgHeader, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&imgHeader->headCrc);
 800bdce:	4b6e      	ldr	r3, [pc, #440]	; (800bf88 <iapProcessOutputImageSingleBank+0x254>)
 800bdd0:	6a1b      	ldr	r3, [r3, #32]
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	323c      	adds	r2, #60	; 0x3c
 800bdd6:	213c      	movs	r1, #60	; 0x3c
 800bdd8:	6978      	ldr	r0, [r7, #20]
 800bdda:	4798      	blx	r3

         //Update application check computation tag (could be integrity tag or
         //authentification tag or hash signature tag)
         error = verifyProcess(&context->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	333c      	adds	r3, #60	; 0x3c
 800bde6:	2204      	movs	r2, #4
 800bde8:	4619      	mov	r1, r3
 800bdea:	f000 fe99 	bl	800cb20 <verifyProcess>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	837b      	strh	r3, [r7, #26]
         //Is any error?
         if(error)
 800bdf2:	8b7b      	ldrh	r3, [r7, #26]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d001      	beq.n	800bdfc <iapProcessOutputImageSingleBank+0xc8>
            return error;
 800bdf8:	8b7b      	ldrh	r3, [r7, #26]
 800bdfa:	e0c1      	b.n	800bf80 <iapProcessOutputImageSingleBank+0x24c>

         //Set external memory start write address (selected slot start address)
         context->firmwareAddr = context->slotInfo->addr;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be02:	681a      	ldr	r2, [r3, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	609a      	str	r2, [r3, #8]
         context->pos = context->firmwareAddr;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	689a      	ldr	r2, [r3, #8]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	611a      	str	r2, [r3, #16]

         //Write new image header (with flush)
         error = iapWrite(context, (uint8_t*)imgHeader, sizeof(ImageHeader), 2);
 800be10:	2302      	movs	r3, #2
 800be12:	2240      	movs	r2, #64	; 0x40
 800be14:	6979      	ldr	r1, [r7, #20]
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7ff fe44 	bl	800baa4 <iapWrite>
 800be1c:	4603      	mov	r3, r0
 800be1e:	837b      	strh	r3, [r7, #26]
         if(error)
 800be20:	8b7b      	ldrh	r3, [r7, #26]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <iapProcessOutputImageSingleBank+0xf6>
            return error;
 800be26:	8b7b      	ldrh	r3, [r7, #26]
 800be28:	e0aa      	b.n	800bf80 <iapProcessOutputImageSingleBank+0x24c>
         if(error)
            return error;
#endif

         //Reset buffer position
         context->bufferPos = context->buffer;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f103 0219 	add.w	r2, r3, #25
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
         //Reset buffer data
         memset(context->buffer, 0x00, sizeof(context->buffer));
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3319      	adds	r3, #25
 800be3a:	2280      	movs	r2, #128	; 0x80
 800be3c:	2100      	movs	r1, #0
 800be3e:	4618      	mov	r0, r3
 800be40:	f00c feb8 	bl	8018bb4 <memset>
         //Reset buffer data length
         context->bufferLen = 0;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2200      	movs	r2, #0
 800be48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

         //Change state
         context->state = 1;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2201      	movs	r2, #1
 800be50:	761a      	strb	r2, [r3, #24]
 800be52:	e090      	b.n	800bf76 <iapProcessOutputImageSingleBank+0x242>
      }
      //Encrypt data
      else
      {
         //Reached end of image firmware binary section?
         if(context->written + context->bufferLen == context->firmwareLength)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	695a      	ldr	r2, [r3, #20]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be5e:	441a      	add	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	429a      	cmp	r2, r3
 800be66:	d149      	bne.n	800befc <iapProcessOutputImageSingleBank+0x1c8>
            error = iapWrite(context, context->buffer, context->bufferLen, 1);
            if(error)
               return error;
#else
            //Update image check data computation tag (crc tag)
            error = verifyProcess(&context->verifyContext, context->buffer, context->bufferLen);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f103 0119 	add.w	r1, r3, #25
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be7a:	461a      	mov	r2, r3
 800be7c:	f000 fe50 	bl	800cb20 <verifyProcess>
 800be80:	4603      	mov	r3, r0
 800be82:	837b      	strh	r3, [r7, #26]
            if(error)
 800be84:	8b7b      	ldrh	r3, [r7, #26]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <iapProcessOutputImageSingleBank+0x15a>
               return error;
 800be8a:	8b7b      	ldrh	r3, [r7, #26]
 800be8c:	e078      	b.n	800bf80 <iapProcessOutputImageSingleBank+0x24c>

            //Write image data block into memory
            error = iapWrite(context, context->buffer, context->bufferLen, 0);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f103 0119 	add.w	r1, r3, #25
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800be9a:	2300      	movs	r3, #0
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f7ff fe01 	bl	800baa4 <iapWrite>
 800bea2:	4603      	mov	r3, r0
 800bea4:	837b      	strh	r3, [r7, #26]
            if(error)
 800bea6:	8b7b      	ldrh	r3, [r7, #26]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <iapProcessOutputImageSingleBank+0x17c>
               return error;
 800beac:	8b7b      	ldrh	r3, [r7, #26]
 800beae:	e067      	b.n	800bf80 <iapProcessOutputImageSingleBank+0x24c>
#endif

            //Update written data
            context->written += n;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	695a      	ldr	r2, [r3, #20]
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	441a      	add	r2, r3
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	615a      	str	r2, [r3, #20]

            //Finalize image check data computation tag (crc tag)
            error = verifyGenerateCheckData(&context->verifyContext, context->buffer,
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f103 0119 	add.w	r1, r3, #25
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	33a0      	adds	r3, #160	; 0xa0
 800bed2:	f000 fec7 	bl	800cc64 <verifyGenerateCheckData>
 800bed6:	4603      	mov	r3, r0
 800bed8:	837b      	strh	r3, [r7, #26]
               context->verifyContext.imageCheckDigestSize, &context->bufferLen);

            //Write new image check data tag (crc tag)
            error = iapWrite(context, context->buffer, context->bufferLen, 1);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f103 0119 	add.w	r1, r3, #25
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bee6:	2301      	movs	r3, #1
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f7ff fddb 	bl	800baa4 <iapWrite>
 800beee:	4603      	mov	r3, r0
 800bef0:	837b      	strh	r3, [r7, #26]
            if(error)
 800bef2:	8b7b      	ldrh	r3, [r7, #26]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d03e      	beq.n	800bf76 <iapProcessOutputImageSingleBank+0x242>
               return error;
 800bef8:	8b7b      	ldrh	r3, [r7, #26]
 800befa:	e041      	b.n	800bf80 <iapProcessOutputImageSingleBank+0x24c>
            memcpy(context->buffer, context->bufferPos, context->bufferLen);
            //Reset buffer position
            context->bufferPos = context->buffer + context->bufferLen;
#else
            //Update image check data computation tag (crc tag)
            error = verifyProcess(&context->verifyContext, context->buffer, context->bufferLen);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f103 0119 	add.w	r1, r3, #25
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf0e:	461a      	mov	r2, r3
 800bf10:	f000 fe06 	bl	800cb20 <verifyProcess>
 800bf14:	4603      	mov	r3, r0
 800bf16:	837b      	strh	r3, [r7, #26]
            if(error)
 800bf18:	8b7b      	ldrh	r3, [r7, #26]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d001      	beq.n	800bf22 <iapProcessOutputImageSingleBank+0x1ee>
               return error;
 800bf1e:	8b7b      	ldrh	r3, [r7, #26]
 800bf20:	e02e      	b.n	800bf80 <iapProcessOutputImageSingleBank+0x24c>

            //Write encrypted image data into memory
            error = iapWrite(context, context->buffer, context->bufferLen, 0);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f103 0119 	add.w	r1, r3, #25
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bf2e:	2300      	movs	r3, #0
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff fdb7 	bl	800baa4 <iapWrite>
 800bf36:	4603      	mov	r3, r0
 800bf38:	837b      	strh	r3, [r7, #26]
            if(error)
 800bf3a:	8b7b      	ldrh	r3, [r7, #26]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d001      	beq.n	800bf44 <iapProcessOutputImageSingleBank+0x210>
               return error;
 800bf40:	8b7b      	ldrh	r3, [r7, #26]
 800bf42:	e01d      	b.n	800bf80 <iapProcessOutputImageSingleBank+0x24c>

            //Update context buffer length
            context->written += context->bufferLen;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	695a      	ldr	r2, [r3, #20]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bf4e:	441a      	add	r2, r3
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	615a      	str	r2, [r3, #20]

            //Update buffer data length
            context->bufferLen = 0;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
            //Reset buffer position
            context->bufferPos = context->buffer;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f103 0219 	add.w	r2, r3, #25
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            //Reset buffer
            memset(context->buffer, 0, sizeof(context->buffer));
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	3319      	adds	r3, #25
 800bf6c:	2280      	movs	r2, #128	; 0x80
 800bf6e:	2100      	movs	r1, #0
 800bf70:	4618      	mov	r0, r3
 800bf72:	f00c fe1f 	bl	8018bb4 <memset>
   while(length > 0)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f47f aeed 	bne.w	800bd58 <iapProcessOutputImageSingleBank+0x24>
         }
      }
   }

   //Successful process
   return NO_ERROR;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3720      	adds	r7, #32
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	08020114 	.word	0x08020114

0800bf8c <iapProcessOutputImage>:
 * @param[in] length Length of the output data chunk.
 * @return Status code
 **/

error_t iapProcessOutputImage(ImageContext *context, uint8_t *data, size_t length)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
   return iapProcessOutputImageSingleBank(context, data, length);
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	68b9      	ldr	r1, [r7, #8]
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f7ff fec9 	bl	800bd34 <iapProcessOutputImageSingleBank>
 800bfa2:	4603      	mov	r3, r0
#else
   return iapProcessOutputImageDualBank(context, data, length);
#endif
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <iapProcessAppHeader>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppHeader(ImageContext *context)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b088      	sub	sp, #32
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
   const FlashInfo *memInfo;
   ImageContext *outputImg;
   uint_t n;

   //Check parameter validity
   if (context == NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <iapProcessAppHeader+0x12>
      return ERROR_INVALID_PARAMETER;
 800bfba:	2302      	movs	r3, #2
 800bfbc:	e0ad      	b.n	800c11a <iapProcessAppHeader+0x16e>

   //Initialize variable
   imgHeader = NULL;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	613b      	str	r3, [r7, #16]
   n = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	61fb      	str	r3, [r7, #28]

   //Is buffer full enough to contains IAP image header?
   if (context->bufferLen >= sizeof(ImageHeader))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfcc:	2b3f      	cmp	r3, #63	; 0x3f
 800bfce:	f240 80a3 	bls.w	800c118 <iapProcessAppHeader+0x16c>
   {
      //Debug message
      TRACE_DEBUG("Processing firmware image header...\r\n");

      //Get input image header
      error = imageGetHeader(context->buffer, context->bufferLen, &imgHeader);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f103 0019 	add.w	r0, r3, #25
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfde:	f107 0210 	add.w	r2, r7, #16
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	f000 f9fc 	bl	800c3e0 <imageGetHeader>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800bfec:	8b7b      	ldrh	r3, [r7, #26]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <iapProcessAppHeader+0x4a>
      {
         //Debug message
         TRACE_INFO("Input image header is invalid!\r\n");
         //Forward error
         return error;
 800bff2:	8b7b      	ldrh	r3, [r7, #26]
 800bff4:	e091      	b.n	800c11a <iapProcessAppHeader+0x16e>
         return ERROR_FAILURE;
     }
#endif

      //Check header image type
      if(imgHeader->imgType != IMAGE_TYPE_APP)
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	7a1b      	ldrb	r3, [r3, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00d      	beq.n	800c01a <iapProcessAppHeader+0x6e>
      {
         //Debug message
         TRACE_ERROR("Invalid header image type!\r\n");
 800bffe:	f7fd fa82 	bl	8009506 <osSuspendAllTasks>
 800c002:	4b48      	ldr	r3, [pc, #288]	; (800c124 <iapProcessAppHeader+0x178>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	221c      	movs	r2, #28
 800c00a:	2101      	movs	r1, #1
 800c00c:	4846      	ldr	r0, [pc, #280]	; (800c128 <iapProcessAppHeader+0x17c>)
 800c00e:	f00c fca9 	bl	8018964 <fwrite>
 800c012:	f7fd fa83 	bl	800951c <osResumeAllTasks>
         return ERROR_FAILURE;
 800c016:	2301      	movs	r3, #1
 800c018:	e07f      	b.n	800c11a <iapProcessAppHeader+0x16e>
      }

      //Get memory driver infos
      error = context->iapContext->primaryMem.driver->getInfo(&memInfo);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	f107 020c 	add.w	r2, r7, #12
 800c026:	4610      	mov	r0, r2
 800c028:	4798      	blx	r3
 800c02a:	4603      	mov	r3, r0
 800c02c:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800c02e:	8b7b      	ldrh	r3, [r7, #26]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <iapProcessAppHeader+0x8c>
         return error;
 800c034:	8b7b      	ldrh	r3, [r7, #26]
 800c036:	e070      	b.n	800c11a <iapProcessAppHeader+0x16e>

      //Point to output image context
      outputImg = (ImageContext*)&context->iapContext->imageOutput;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c040:	617b      	str	r3, [r7, #20]

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Would firmware overcome the external flash memory slot size?
      if (imgHeader->dataSize + sizeof(ImageHeader) + outputImg->verifyContext.verifySettings.integrityAlgo->digestSize > outputImg->slotInfo->size)
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c04e:	695b      	ldr	r3, [r3, #20]
 800c050:	4413      	add	r3, r2
 800c052:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d90e      	bls.n	800c080 <iapProcessAppHeader+0xd4>
      //Would firmware overcome the flash bank 2 size?
      if (imgHeader->dataSize > context->iapContext->imageOutput.slotInfo->size)
#endif
      {
         //Debug message
         TRACE_ERROR("Image is bigger than the flash memory slot!\r\n");
 800c062:	f7fd fa50 	bl	8009506 <osSuspendAllTasks>
 800c066:	4b2f      	ldr	r3, [pc, #188]	; (800c124 <iapProcessAppHeader+0x178>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	222d      	movs	r2, #45	; 0x2d
 800c06e:	2101      	movs	r1, #1
 800c070:	482e      	ldr	r0, [pc, #184]	; (800c12c <iapProcessAppHeader+0x180>)
 800c072:	f00c fc77 	bl	8018964 <fwrite>
 800c076:	f7fd fa51 	bl	800951c <osResumeAllTasks>
         //Forward error
         return ERROR_BUFFER_OVERFLOW;
 800c07a:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800c07e:	e04c      	b.n	800c11a <iapProcessAppHeader+0x16e>
      }

      //Save application firmware length
      context->firmwareLength = imgHeader->dataSize;
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	60da      	str	r2, [r3, #12]
      outputImg->firmwareLength = imgHeader->dataSize;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	60da      	str	r2, [r3, #12]

#if (IAP_SINGLE_BANK_SUPPORT == ENABLED)
      //Process parsed image input header for later output image generation
      error = iapProcessOutputImage(&context->iapContext->imageOutput, (uint8_t*)imgHeader, sizeof(ImageHeader));
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c09c:	6939      	ldr	r1, [r7, #16]
 800c09e:	2240      	movs	r2, #64	; 0x40
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff ff73 	bl	800bf8c <iapProcessOutputImage>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	837b      	strh	r3, [r7, #26]
      if(error)
 800c0aa:	8b7b      	ldrh	r3, [r7, #26]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d001      	beq.n	800c0b4 <iapProcessAppHeader+0x108>
         return error;
 800c0b0:	8b7b      	ldrh	r3, [r7, #26]
 800c0b2:	e032      	b.n	800c11a <iapProcessAppHeader+0x16e>
#endif

      //Update application check computation tag (could be integrity tag or
      //authentification tag or hash signature tag)
      error = verifyProcess(&context->verifyContext, (uint8_t*)&imgHeader->headCrc, CRC32_DIGEST_SIZE);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	333c      	adds	r3, #60	; 0x3c
 800c0be:	2204      	movs	r2, #4
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	f000 fd2d 	bl	800cb20 <verifyProcess>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800c0ca:	8b7b      	ldrh	r3, [r7, #26]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d001      	beq.n	800c0d4 <iapProcessAppHeader+0x128>
         return error;
 800c0d0:	8b7b      	ldrh	r3, [r7, #26]
 800c0d2:	e022      	b.n	800c11a <iapProcessAppHeader+0x16e>


      //Remove header from buffer
      n = context->bufferLen - sizeof(ImageHeader);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c0da:	3b40      	subs	r3, #64	; 0x40
 800c0dc:	61fb      	str	r3, [r7, #28]
      memcpy(context->buffer, context->buffer + sizeof(ImageHeader), n);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f103 0019 	add.w	r0, r3, #25
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	3319      	adds	r3, #25
 800c0e8:	3340      	adds	r3, #64	; 0x40
 800c0ea:	69fa      	ldr	r2, [r7, #28]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	f00c fe4d 	bl	8018d8c <memcpy>
      context->bufferPos -= sizeof(ImageHeader);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0f8:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      context->bufferLen -= sizeof(ImageHeader);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c108:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

      //Change IAP state
      context->state = IAP_STATE_RECV_APP_DATA;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2202      	movs	r2, #2
 800c116:	761a      	strb	r2, [r3, #24]
   }

   //Successful process
   return NO_ERROR;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3720      	adds	r7, #32
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	200001c8 	.word	0x200001c8
 800c128:	0801f918 	.word	0x0801f918
 800c12c:	0801f938 	.word	0x0801f938

0800c130 <iapProcessAppData>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppData(ImageContext *context)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
   error_t error;
   uint_t dataLength;
   static ImageContext *imgOutput;

   //Check parameter validity
   if (context == NULL)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <iapProcessAppData+0x12>
      return ERROR_INVALID_PARAMETER;
 800c13e:	2302      	movs	r3, #2
 800c140:	e0a2      	b.n	800c288 <iapProcessAppData+0x158>

   //Point to image output context
   imgOutput = (ImageContext*) &context->iapContext->imageOutput;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800c14a:	4a51      	ldr	r2, [pc, #324]	; (800c290 <iapProcessAppData+0x160>)
 800c14c:	6013      	str	r3, [r2, #0]
   //Receiving image firmware data?
   if(1)
   {
#endif
      //Is buffer full or full enought to contain last application data?
      if ((context->bufferLen == sizeof(context->buffer)) ||
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c154:	2b80      	cmp	r3, #128	; 0x80
 800c156:	d00a      	beq.n	800c16e <iapProcessAppData+0x3e>
         (context->written + context->bufferLen >= context->firmwareLength))
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	695a      	ldr	r2, [r3, #20]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c162:	441a      	add	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
      if ((context->bufferLen == sizeof(context->buffer)) ||
 800c168:	429a      	cmp	r2, r3
 800c16a:	f0c0 808c 	bcc.w	800c286 <iapProcessAppData+0x156>
      {
         //We must not process more data than the firmware length
         dataLength = MIN(context->bufferLen, context->firmwareLength - context->written);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	1ad2      	subs	r2, r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c17e:	4293      	cmp	r3, r2
 800c180:	bf28      	it	cs
 800c182:	4613      	movcs	r3, r2
 800c184:	60fb      	str	r3, [r7, #12]

         //Update application check computation tag (could be integrity tag or
         //authentification tag or hash signature tag)
         error = verifyProcess(&context->verifyContext, context->buffer, dataLength);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	3319      	adds	r3, #25
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	4619      	mov	r1, r3
 800c194:	f000 fcc4 	bl	800cb20 <verifyProcess>
 800c198:	4603      	mov	r3, r0
 800c19a:	817b      	strh	r3, [r7, #10]
         //Is any error?
         if (error)
 800c19c:	897b      	ldrh	r3, [r7, #10]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <iapProcessAppData+0x76>
            return error;
 800c1a2:	897b      	ldrh	r3, [r7, #10]
 800c1a4:	e070      	b.n	800c288 <iapProcessAppData+0x158>
               return error;
         }
#endif

         //Process output image data
         error = iapProcessOutputImage(imgOutput, context->buffer, dataLength);
 800c1a6:	4b3a      	ldr	r3, [pc, #232]	; (800c290 <iapProcessAppData+0x160>)
 800c1a8:	6818      	ldr	r0, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3319      	adds	r3, #25
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	f7ff feeb 	bl	800bf8c <iapProcessOutputImage>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	817b      	strh	r3, [r7, #10]
         //Is any error?
         if(error)
 800c1ba:	897b      	ldrh	r3, [r7, #10]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <iapProcessAppData+0x94>
            return error;
 800c1c0:	897b      	ldrh	r3, [r7, #10]
 800c1c2:	e061      	b.n	800c288 <iapProcessAppData+0x158>

         context->written += dataLength;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	695a      	ldr	r2, [r3, #20]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	441a      	add	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	615a      	str	r2, [r3, #20]

         //Is buffer contains remaining data?
         if (context->bufferLen != dataLength)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1d6:	68fa      	ldr	r2, [r7, #12]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d02b      	beq.n	800c234 <iapProcessAppData+0x104>
         {
            //Discard already processed data
            memset(context->buffer, 0, dataLength);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	3319      	adds	r3, #25
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f00c fce5 	bl	8018bb4 <memset>

            //Put remaining data at buffer start
            memcpy(context->buffer, context->buffer + dataLength,
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f103 0019 	add.w	r0, r3, #25
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f103 0219 	add.w	r2, r3, #25
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	18d1      	adds	r1, r2, r3
               context->bufferLen - dataLength);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
            memcpy(context->buffer, context->buffer + dataLength,
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	461a      	mov	r2, r3
 800c206:	f00c fdc1 	bl	8018d8c <memcpy>
            //Update buffer position and length
            context->bufferPos = context->buffer + (context->bufferLen - dataLength);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f103 0219 	add.w	r2, r3, #25
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	1acb      	subs	r3, r1, r3
 800c21a:	441a      	add	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            context->bufferLen = context->bufferLen - dataLength;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	1ad2      	subs	r2, r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800c232:	e010      	b.n	800c256 <iapProcessAppData+0x126>
         }
         else
         {
            //Reset buffer
            memset(context->buffer, 0, sizeof(context->buffer));
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3319      	adds	r3, #25
 800c238:	2280      	movs	r2, #128	; 0x80
 800c23a:	2100      	movs	r1, #0
 800c23c:	4618      	mov	r0, r3
 800c23e:	f00c fcb9 	bl	8018bb4 <memset>
            context->bufferPos = context->buffer;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f103 0219 	add.w	r2, r3, #25
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            context->bufferLen = 0;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
         }

         //Is application data all received?
         if (context->written == context->firmwareLength)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	695a      	ldr	r2, [r3, #20]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d111      	bne.n	800c286 <iapProcessAppData+0x156>
         {
            //Change IAP state
            context->state = IAP_STATE_RECV_APP_CHECK;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2203      	movs	r2, #3
 800c266:	761a      	strb	r2, [r3, #24]

            //Still data to process?
            if (context->bufferLen > 0)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d009      	beq.n	800c286 <iapProcessAppData+0x156>
            {
               //Process IAP check app data
               error = iapProcessAppCheck(context);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f80e 	bl	800c294 <iapProcessAppCheck>
 800c278:	4603      	mov	r3, r0
 800c27a:	817b      	strh	r3, [r7, #10]
               //Is any error?
               if (error)
 800c27c:	897b      	ldrh	r3, [r7, #10]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <iapProcessAppData+0x156>
                  return error;
 800c282:	897b      	ldrh	r3, [r7, #10]
 800c284:	e000      	b.n	800c288 <iapProcessAppData+0x158>
         }
      }
   }

   //Successfull process
   return NO_ERROR;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	200020a8 	.word	0x200020a8

0800c294 <iapProcessAppCheck>:
 * @param[in,out] context Pointer to the IAP context
 * @return Error code.
 **/

error_t iapProcessAppCheck(ImageContext *context)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
   //Check parameter validity
   if (context == NULL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <iapProcessAppCheck+0x12>
      return ERROR_INVALID_PARAMETER;
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	e058      	b.n	800c358 <iapProcessAppCheck+0xc4>

   //Is buffer full enough to contains IAP image check data?
   //(could be integrity/authentification tag or signature)
   if (context->checkDataLen + context->bufferLen <= context->checkDataSize)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2b2:	441a      	add	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d83c      	bhi.n	800c338 <iapProcessAppCheck+0xa4>
   {
      //Save image check data block
      memcpy(context->checkDataPos, context->buffer, context->bufferLen);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f103 0119 	add.w	r1, r3, #25
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	f00c fd5b 	bl	8018d8c <memcpy>
      context->checkDataPos += context->bufferLen;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2e2:	441a      	add	r2, r3
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      context->checkDataLen += context->bufferLen;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2f6:	441a      	add	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

      //Reset buffer
      memset(context->buffer, 0, sizeof(context->buffer));
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	3319      	adds	r3, #25
 800c302:	2280      	movs	r2, #128	; 0x80
 800c304:	2100      	movs	r1, #0
 800c306:	4618      	mov	r0, r3
 800c308:	f00c fc54 	bl	8018bb4 <memset>
      context->bufferPos = context->buffer;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f103 0219 	add.w	r2, r3, #25
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      context->bufferLen = 0;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

      //Is image check data fully received?
      if (context->checkDataLen == context->checkDataSize)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 23c8 	ldr.w	r2, [r3, #968]	; 0x3c8
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d112      	bne.n	800c356 <iapProcessAppCheck+0xc2>
      {
         //Change IAP state
         context->state = IAP_STATE_VALIDATE_APP;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2204      	movs	r2, #4
 800c334:	761a      	strb	r2, [r3, #24]
 800c336:	e00e      	b.n	800c356 <iapProcessAppCheck+0xc2>
      }
   }
   else
   {
      //Debug message
      TRACE_ERROR("Image check data is bigger than expected!\r\n");
 800c338:	f7fd f8e5 	bl	8009506 <osSuspendAllTasks>
 800c33c:	4b08      	ldr	r3, [pc, #32]	; (800c360 <iapProcessAppCheck+0xcc>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	222b      	movs	r2, #43	; 0x2b
 800c344:	2101      	movs	r1, #1
 800c346:	4807      	ldr	r0, [pc, #28]	; (800c364 <iapProcessAppCheck+0xd0>)
 800c348:	f00c fb0c 	bl	8018964 <fwrite>
 800c34c:	f7fd f8e6 	bl	800951c <osResumeAllTasks>
      return ERROR_BUFFER_OVERFLOW;
 800c350:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800c354:	e000      	b.n	800c358 <iapProcessAppCheck+0xc4>
   }

   //Successful process
   return NO_ERROR;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	200001c8 	.word	0x200001c8
 800c364:	0801f968 	.word	0x0801f968

0800c368 <imageCheckHeader>:
 * @param[in] header Pointeur to the internal image header to be checked
 * @return Status code
 **/

error_t imageCheckHeader(ImageHeader *header)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
   error_t error;
   uint32_t computedCrc;

   //Check parameter vailidty
   if(header == NULL)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <imageCheckHeader+0x12>
      return ERROR_INVALID_PARAMETER;
 800c376:	2302      	movs	r3, #2
 800c378:	e028      	b.n	800c3cc <imageCheckHeader+0x64>

   //Compute image header crc
   error = CRC32_HASH_ALGO->compute((uint8_t*)header, sizeof(ImageHeader) - CRC32_DIGEST_SIZE, (uint8_t*)&computedCrc);
 800c37a:	4b16      	ldr	r3, [pc, #88]	; (800c3d4 <imageCheckHeader+0x6c>)
 800c37c:	6a1b      	ldr	r3, [r3, #32]
 800c37e:	f107 0208 	add.w	r2, r7, #8
 800c382:	213c      	movs	r1, #60	; 0x3c
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	4798      	blx	r3
 800c388:	4603      	mov	r3, r0
 800c38a:	81fb      	strh	r3, [r7, #14]
   if(error)
 800c38c:	89fb      	ldrh	r3, [r7, #14]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00d      	beq.n	800c3ae <imageCheckHeader+0x46>
   {
      //Debug message
      TRACE_ERROR("Failed to compute image header crc!\r\n");
 800c392:	f7fd f8b8 	bl	8009506 <osSuspendAllTasks>
 800c396:	4b10      	ldr	r3, [pc, #64]	; (800c3d8 <imageCheckHeader+0x70>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	2225      	movs	r2, #37	; 0x25
 800c39e:	2101      	movs	r1, #1
 800c3a0:	480e      	ldr	r0, [pc, #56]	; (800c3dc <imageCheckHeader+0x74>)
 800c3a2:	f00c fadf 	bl	8018964 <fwrite>
 800c3a6:	f7fd f8b9 	bl	800951c <osResumeAllTasks>
      return error;
 800c3aa:	89fb      	ldrh	r3, [r7, #14]
 800c3ac:	e00e      	b.n	800c3cc <imageCheckHeader+0x64>
   }

   //Check image header integrity
   if(header->headCrc != computedCrc)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d001      	beq.n	800c3bc <imageCheckHeader+0x54>
      return ERROR_INVALID_HEADER;
 800c3b8:	23d4      	movs	r3, #212	; 0xd4
 800c3ba:	e007      	b.n	800c3cc <imageCheckHeader+0x64>

   //Check image header version
   if(header->headVers != IMAGE_HEADER_VERSION)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3c4:	d001      	beq.n	800c3ca <imageCheckHeader+0x62>
      return ERROR_INVALID_VERSION;
 800c3c6:	23f3      	movs	r3, #243	; 0xf3
 800c3c8:	e000      	b.n	800c3cc <imageCheckHeader+0x64>

   //Successful process
   return NO_ERROR;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	08020114 	.word	0x08020114
 800c3d8:	200001c8 	.word	0x200001c8
 800c3dc:	0801f994 	.word	0x0801f994

0800c3e0 <imageGetHeader>:
 * @param[out] header Pointeur to the header structure to be returned
 * @return Status code
 **/

error_t imageGetHeader(uint8_t *buffer, size_t bufferLen, ImageHeader **header)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
   error_t error;
   ImageHeader *tempHeader;

   //Check parameters validity
   if(buffer == NULL || bufferLen == 0)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <imageGetHeader+0x18>
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <imageGetHeader+0x1c>
      return ERROR_INVALID_PARAMETER;
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e014      	b.n	800c426 <imageGetHeader+0x46>

   if(bufferLen < sizeof(ImageHeader))
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	2b3f      	cmp	r3, #63	; 0x3f
 800c400:	d801      	bhi.n	800c406 <imageGetHeader+0x26>
      return ERROR_INVALID_LENGTH;
 800c402:	23ec      	movs	r3, #236	; 0xec
 800c404:	e00f      	b.n	800c426 <imageGetHeader+0x46>

   //Point to the image header
   tempHeader = (ImageHeader *)buffer;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	617b      	str	r3, [r7, #20]

   //Check image header
   error = imageCheckHeader(tempHeader);
 800c40a:	6978      	ldr	r0, [r7, #20]
 800c40c:	f7ff ffac 	bl	800c368 <imageCheckHeader>
 800c410:	4603      	mov	r3, r0
 800c412:	827b      	strh	r3, [r7, #18]
   //Is any error?
   if(error)
 800c414:	8a7b      	ldrh	r3, [r7, #18]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <imageGetHeader+0x3e>
      return error;
 800c41a:	8a7b      	ldrh	r3, [r7, #18]
 800c41c:	e003      	b.n	800c426 <imageGetHeader+0x46>

   //Save image header
   *header = (ImageHeader*) tempHeader;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	697a      	ldr	r2, [r7, #20]
 800c422:	601a      	str	r2, [r3, #0]

   //Successful process
   return NO_ERROR;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3718      	adds	r7, #24
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
	...

0800c430 <stm32wlxxFlashDriverInit>:
 * @brief Initialize Flash Memory.
 * @return Error code
 **/

error_t stm32wlxxFlashDriverInit(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
   //Debug message
   TRACE_INFO("Initializing %s memory...\r\n", STM32WLxx_FLASH_NAME);

   //Wait for last flash operation on flash
   FLASH_WaitForLastOperation(50);
 800c434:	2032      	movs	r0, #50	; 0x32
 800c436:	f002 f823 	bl	800e480 <FLASH_WaitForLastOperation>
   //Clear all flash error flags
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800c43a:	4b06      	ldr	r3, [pc, #24]	; (800c454 <stm32wlxxFlashDriverInit+0x24>)
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	4a05      	ldr	r2, [pc, #20]	; (800c454 <stm32wlxxFlashDriverInit+0x24>)
 800c440:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c444:	6193      	str	r3, [r2, #24]
 800c446:	4b03      	ldr	r3, [pc, #12]	; (800c454 <stm32wlxxFlashDriverInit+0x24>)
 800c448:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800c44c:	611a      	str	r2, [r3, #16]

   //Successfull process
   return NO_ERROR;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	bd80      	pop	{r7, pc}
 800c454:	58004000 	.word	0x58004000

0800c458 <stm32wlxxFlashDriverGetInfo>:
 * @param[in,out] info Pointeur to the Memory information structure to be returned
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetInfo(const FlashInfo **info)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
   //Set Memory information pointeur
   *info = (const FlashInfo*) &stm32wlxxFlashDriverInfo;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4a04      	ldr	r2, [pc, #16]	; (800c474 <stm32wlxxFlashDriverGetInfo+0x1c>)
 800c464:	601a      	str	r2, [r3, #0]

   //Successfull process
   return NO_ERROR;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bc80      	pop	{r7}
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	08020154 	.word	0x08020154

0800c478 <stm32wlxxFlashDriverGetStatus>:
 * @param[in,out] status Pointeur to the Memory status to be returned
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetStatus(FlashStatus *status)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
   uint32_t flag;

   //Check parameter vailidity
   if(status == NULL)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <stm32wlxxFlashDriverGetStatus+0x12>
      return ERROR_INVALID_PARAMETER;
 800c486:	2302      	movs	r3, #2
 800c488:	e027      	b.n	800c4da <stm32wlxxFlashDriverGetStatus+0x62>

   do
   {
      //Get Flash Memory error flags status
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS);
 800c48a:	4b16      	ldr	r3, [pc, #88]	; (800c4e4 <stm32wlxxFlashDriverGetStatus+0x6c>)
 800c48c:	699a      	ldr	r2, [r3, #24]
 800c48e:	4b16      	ldr	r3, [pc, #88]	; (800c4e8 <stm32wlxxFlashDriverGetStatus+0x70>)
 800c490:	4013      	ands	r3, r2
 800c492:	4a15      	ldr	r2, [pc, #84]	; (800c4e8 <stm32wlxxFlashDriverGetStatus+0x70>)
 800c494:	4293      	cmp	r3, r2
 800c496:	bf0c      	ite	eq
 800c498:	2301      	moveq	r3, #1
 800c49a:	2300      	movne	r3, #0
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	60fb      	str	r3, [r7, #12]
      //Is any error flag set?
      if(flag != RESET)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <stm32wlxxFlashDriverGetStatus+0x36>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_ERR;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2202      	movs	r2, #2
 800c4aa:	701a      	strb	r2, [r3, #0]
         break;
 800c4ac:	e014      	b.n	800c4d8 <stm32wlxxFlashDriverGetStatus+0x60>
      }

      //Get Flash Memory busy flags
      flag = __HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY);
 800c4ae:	4b0d      	ldr	r3, [pc, #52]	; (800c4e4 <stm32wlxxFlashDriverGetStatus+0x6c>)
 800c4b0:	691b      	ldr	r3, [r3, #16]
 800c4b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ba:	bf0c      	ite	eq
 800c4bc:	2301      	moveq	r3, #1
 800c4be:	2300      	movne	r3, #0
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	60fb      	str	r3, [r7, #12]
      //Is busy flag set?
      if(flag != RESET)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d003      	beq.n	800c4d2 <stm32wlxxFlashDriverGetStatus+0x5a>
      {
         //Set Flash memory status
         *status = FLASH_STATUS_BUSY;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	701a      	strb	r2, [r3, #0]
         break;
 800c4d0:	e002      	b.n	800c4d8 <stm32wlxxFlashDriverGetStatus+0x60>
      }

      //Set Flash memory status
      *status = FLASH_STATUS_OK;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	701a      	strb	r2, [r3, #0]
   }while(0);

   //Successfull process
   return NO_ERROR;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bc80      	pop	{r7}
 800c4e2:	4770      	bx	lr
 800c4e4:	58004000 	.word	0x58004000
 800c4e8:	c000c3fa 	.word	0xc000c3fa

0800c4ec <stm32wlxxFlashDriverWrite>:
 * @param[in] length Number of data bytes to write in
 * @return Error code
 **/

error_t stm32wlxxFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08a      	sub	sp, #40	; 0x28
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
   const uint8_t *p;
   uint8_t word[STM32WLxx_FLASH_WRITE_SIZE];
   size_t n;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c4f8:	4b30      	ldr	r3, [pc, #192]	; (800c5bc <stm32wlxxFlashDriverWrite+0xd0>)
 800c4fa:	623b      	str	r3, [r7, #32]

   //Check address validity
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c502:	d308      	bcc.n	800c516 <stm32wlxxFlashDriverWrite+0x2a>
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	6a3b      	ldr	r3, [r7, #32]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d204      	bcs.n	800c516 <stm32wlxxFlashDriverWrite+0x2a>
      (address % sizeof(uint32_t) != 0))
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <stm32wlxxFlashDriverWrite+0x2e>
      return ERROR_INVALID_PARAMETER;
 800c516:	2302      	movs	r3, #2
 800c518:	e04c      	b.n	800c5b4 <stm32wlxxFlashDriverWrite+0xc8>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d005      	beq.n	800c52c <stm32wlxxFlashDriverWrite+0x40>
 800c520:	68fa      	ldr	r2, [r7, #12]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4413      	add	r3, r2
 800c526:	6a3a      	ldr	r2, [r7, #32]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d201      	bcs.n	800c530 <stm32wlxxFlashDriverWrite+0x44>
      return ERROR_INVALID_PARAMETER;
 800c52c:	2302      	movs	r3, #2
 800c52e:	e041      	b.n	800c5b4 <stm32wlxxFlashDriverWrite+0xc8>
   TRACE_INFO("Writing data (%d bytes) at 0x%08X\r\n", length, address);
   TRACE_DEBUG_ARRAY("WRITE DATA: ", data, length);


   //Cast data pointer
   p = (const uint8_t*) data;
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	627b      	str	r3, [r7, #36]	; 0x24

   //Perform write operation
   while(length > 0)
 800c534:	e03a      	b.n	800c5ac <stm32wlxxFlashDriverWrite+0xc0>
   {
      //Prevent to write more than allowed flash write bytes at a time
      n = MIN(sizeof(word), length);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b08      	cmp	r3, #8
 800c53a:	bf28      	it	cs
 800c53c:	2308      	movcs	r3, #8
 800c53e:	61fb      	str	r3, [r7, #28]

      //Check if remaining bytes is less than required flash write size
      if(n < sizeof(word))
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	2b07      	cmp	r3, #7
 800c544:	d806      	bhi.n	800c554 <stm32wlxxFlashDriverWrite+0x68>
         memset(word, 0, sizeof(word));
 800c546:	f107 0310 	add.w	r3, r7, #16
 800c54a:	2208      	movs	r2, #8
 800c54c:	2100      	movs	r1, #0
 800c54e:	4618      	mov	r0, r3
 800c550:	f00c fb30 	bl	8018bb4 <memset>

      //Copy n bytes
      memcpy(word, p, n);
 800c554:	f107 0310 	add.w	r3, r7, #16
 800c558:	69fa      	ldr	r2, [r7, #28]
 800c55a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c55c:	4618      	mov	r0, r3
 800c55e:	f00c fc15 	bl	8018d8c <memcpy>

      //Program 32-bit word in flash memory
      error = stm32wlxxFlashDriverWriteWord(address, (uint32_t)word);
 800c562:	f107 0310 	add.w	r3, r7, #16
 800c566:	4619      	mov	r1, r3
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f000 f9b7 	bl	800c8dc <stm32wlxxFlashDriverWriteWord>
 800c56e:	4603      	mov	r3, r0
 800c570:	837b      	strh	r3, [r7, #26]
      if(error)
 800c572:	8b7b      	ldrh	r3, [r7, #26]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00d      	beq.n	800c594 <stm32wlxxFlashDriverWrite+0xa8>
      {
         TRACE_ERROR("Failed to write in flash memory!\r\n");
 800c578:	f7fc ffc5 	bl	8009506 <osSuspendAllTasks>
 800c57c:	4b10      	ldr	r3, [pc, #64]	; (800c5c0 <stm32wlxxFlashDriverWrite+0xd4>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	2222      	movs	r2, #34	; 0x22
 800c584:	2101      	movs	r1, #1
 800c586:	480f      	ldr	r0, [pc, #60]	; (800c5c4 <stm32wlxxFlashDriverWrite+0xd8>)
 800c588:	f00c f9ec 	bl	8018964 <fwrite>
 800c58c:	f7fc ffc6 	bl	800951c <osResumeAllTasks>
         return error;
 800c590:	8b7b      	ldrh	r3, [r7, #26]
 800c592:	e00f      	b.n	800c5b4 <stm32wlxxFlashDriverWrite+0xc8>
      }

      //Advance data pointer
      p += n;
 800c594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	4413      	add	r3, r2
 800c59a:	627b      	str	r3, [r7, #36]	; 0x24
      //Increment word address
      address += n;
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	60fb      	str	r3, [r7, #12]
      //Remaining bytes to be written
      length -= n;
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	607b      	str	r3, [r7, #4]
   while(length > 0)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1c1      	bne.n	800c536 <stm32wlxxFlashDriverWrite+0x4a>
   }

   //Successful process
   return NO_ERROR;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3728      	adds	r7, #40	; 0x28
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	08040000 	.word	0x08040000
 800c5c0:	200001c8 	.word	0x200001c8
 800c5c4:	0801f9d8 	.word	0x0801f9d8

0800c5c8 <stm32wlxxFlashDriverRead>:
 * @param[in] length Number of data bytes to read out
 * @return Error code
 **/

error_t stm32wlxxFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t topAddress;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c5d4:	4b17      	ldr	r3, [pc, #92]	; (800c634 <stm32wlxxFlashDriverRead+0x6c>)
 800c5d6:	613b      	str	r3, [r7, #16]

   //Check address validity
   if(address < STM32WLxx_FLASH_ADDR || address >= topAddress)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5de:	d303      	bcc.n	800c5e8 <stm32wlxxFlashDriverRead+0x20>
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d301      	bcc.n	800c5ec <stm32wlxxFlashDriverRead+0x24>
      return ERROR_INVALID_PARAMETER;
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	e01e      	b.n	800c62a <stm32wlxxFlashDriverRead+0x62>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d005      	beq.n	800c5fe <stm32wlxxFlashDriverRead+0x36>
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d201      	bcs.n	800c602 <stm32wlxxFlashDriverRead+0x3a>
      return ERROR_INVALID_PARAMETER;
 800c5fe:	2302      	movs	r3, #2
 800c600:	e013      	b.n	800c62a <stm32wlxxFlashDriverRead+0x62>

   //Perform read operation
   for(i = 0; i < length; i++)
 800c602:	2300      	movs	r3, #0
 800c604:	617b      	str	r3, [r7, #20]
 800c606:	e00b      	b.n	800c620 <stm32wlxxFlashDriverRead+0x58>
   {
      *((uint8_t *)data + i) = *(uint8_t*)address;
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	68b9      	ldr	r1, [r7, #8]
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	440b      	add	r3, r1
 800c610:	7812      	ldrb	r2, [r2, #0]
 800c612:	701a      	strb	r2, [r3, #0]
      address++;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	3301      	adds	r3, #1
 800c618:	60fb      	str	r3, [r7, #12]
   for(i = 0; i < length; i++)
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	3301      	adds	r3, #1
 800c61e:	617b      	str	r3, [r7, #20]
 800c620:	697a      	ldr	r2, [r7, #20]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	429a      	cmp	r2, r3
 800c626:	d3ef      	bcc.n	800c608 <stm32wlxxFlashDriverRead+0x40>
   }

   //Successfull process
   return NO_ERROR;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	371c      	adds	r7, #28
 800c62e:	46bd      	mov	sp, r7
 800c630:	bc80      	pop	{r7}
 800c632:	4770      	bx	lr
 800c634:	08040000 	.word	0x08040000

0800c638 <stm32wlxxFlashDriverErase>:
 * @param[in] address Address in Memory to start erasing from
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 **/
error_t stm32wlxxFlashDriverErase(uint32_t address, size_t length)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b088      	sub	sp, #32
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   int_t firstSectorNumber;
   uint32_t lastSectorAddr;
   int_t lastSectorNumber;

   error = NO_ERROR;
 800c642:	2300      	movs	r3, #0
 800c644:	837b      	strh	r3, [r7, #26]

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c646:	4b29      	ldr	r3, [pc, #164]	; (800c6ec <stm32wlxxFlashDriverErase+0xb4>)
 800c648:	617b      	str	r3, [r7, #20]

   //Check address validity
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c650:	d308      	bcc.n	800c664 <stm32wlxxFlashDriverErase+0x2c>
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	429a      	cmp	r2, r3
 800c658:	d204      	bcs.n	800c664 <stm32wlxxFlashDriverErase+0x2c>
      (address % sizeof(uint32_t) != 0))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f003 0303 	and.w	r3, r3, #3
   if((address < STM32WLxx_FLASH_ADDR || address >= topAddress) ||
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <stm32wlxxFlashDriverErase+0x30>
      return ERROR_INVALID_PARAMETER;
 800c664:	2302      	movs	r3, #2
 800c666:	e03c      	b.n	800c6e2 <stm32wlxxFlashDriverErase+0xaa>

   //Check parameters validity (is data in flash)
   if((length == 0) || (address + length > topAddress))
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d005      	beq.n	800c67a <stm32wlxxFlashDriverErase+0x42>
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	4413      	add	r3, r2
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	429a      	cmp	r2, r3
 800c678:	d201      	bcs.n	800c67e <stm32wlxxFlashDriverErase+0x46>
      return ERROR_INVALID_PARAMETER;
 800c67a:	2302      	movs	r3, #2
 800c67c:	e031      	b.n	800c6e2 <stm32wlxxFlashDriverErase+0xaa>

   //Get the number of the first sector to erase
   firstSectorNumber = stm32wlxxFlashGetSector(address);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 f9a0 	bl	800c9c4 <stm32wlxxFlashGetSector>
 800c684:	6138      	str	r0, [r7, #16]

   if(address + length == topAddress)
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	4413      	add	r3, r2
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d102      	bne.n	800c698 <stm32wlxxFlashDriverErase+0x60>
   {
      //Set last sector number as the flash sector total number
      lastSectorNumber = STM32WLxx_FLASH_SECTOR_NUMBER;
 800c692:	2380      	movs	r3, #128	; 0x80
 800c694:	61fb      	str	r3, [r7, #28]
 800c696:	e014      	b.n	800c6c2 <stm32wlxxFlashDriverErase+0x8a>
   }
   else
   {
      //Get the address of the boundary sector (not to be erased)
      error = stm32wlxxFlashDriverGetNextSector(address+length, &lastSectorAddr);
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	4413      	add	r3, r2
 800c69e:	f107 020c 	add.w	r2, r7, #12
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f000 f823 	bl	800c6f0 <stm32wlxxFlashDriverGetNextSector>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	837b      	strh	r3, [r7, #26]
      //Is any error?
      if(error)
 800c6ae:	8b7b      	ldrh	r3, [r7, #26]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d001      	beq.n	800c6b8 <stm32wlxxFlashDriverErase+0x80>
         return error;
 800c6b4:	8b7b      	ldrh	r3, [r7, #26]
 800c6b6:	e014      	b.n	800c6e2 <stm32wlxxFlashDriverErase+0xaa>

      //The last sector to erase is the last flash bank 1 sector
      lastSectorNumber = stm32wlxxFlashGetSector(lastSectorAddr);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 f982 	bl	800c9c4 <stm32wlxxFlashGetSector>
 800c6c0:	61f8      	str	r0, [r7, #28]
   }

   //Erase sectors of the flash bank 1 (the only one flash bank)
   error = stm32wlxxFlashDriverEraseSector(STM32WLxx_FLASH_BANK1_ID, firstSectorNumber, lastSectorNumber-firstSectorNumber);
 800c6c2:	6939      	ldr	r1, [r7, #16]
 800c6c4:	69fa      	ldr	r2, [r7, #28]
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	2001      	movs	r0, #1
 800c6ce:	f000 f88d 	bl	800c7ec <stm32wlxxFlashDriverEraseSector>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	837b      	strh	r3, [r7, #26]
   //Is any error?
   if(error)
 800c6d6:	8b7b      	ldrh	r3, [r7, #26]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d001      	beq.n	800c6e0 <stm32wlxxFlashDriverErase+0xa8>
      return error;
 800c6dc:	8b7b      	ldrh	r3, [r7, #26]
 800c6de:	e000      	b.n	800c6e2 <stm32wlxxFlashDriverErase+0xaa>

   //Successful process
   return NO_ERROR;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3720      	adds	r7, #32
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	08040000 	.word	0x08040000

0800c6f0 <stm32wlxxFlashDriverGetNextSector>:
 * @brief Get address of the neighbouring sector
 * @return Error code
 **/

error_t stm32wlxxFlashDriverGetNextSector(uint32_t address, uint32_t *sectorAddr)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b089      	sub	sp, #36	; 0x24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t j;
   SectorsGroup *sg;
   uint32_t sAddr = 0xFFFFFFFF;
 800c6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fe:	617b      	str	r3, [r7, #20]
   uint32_t lastSectorAddr;

   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 800c700:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      (sectorsList[SECTORS_LIST_LEN-1].size * (sectorsList[SECTORS_LIST_LEN-1].nb - 1));
 800c704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c708:	2380      	movs	r3, #128	; 0x80
 800c70a:	3b01      	subs	r3, #1
 800c70c:	fb01 f303 	mul.w	r3, r1, r3
   lastSectorAddr = sectorsList[SECTORS_LIST_LEN-1].addr +
 800c710:	4413      	add	r3, r2
 800c712:	613b      	str	r3, [r7, #16]

   //Check parameters validity
   if(address < STM32WLxx_FLASH_ADDR || address > lastSectorAddr || sectorAddr == NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c71a:	d306      	bcc.n	800c72a <stm32wlxxFlashDriverGetNextSector+0x3a>
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	429a      	cmp	r2, r3
 800c722:	d802      	bhi.n	800c72a <stm32wlxxFlashDriverGetNextSector+0x3a>
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <stm32wlxxFlashDriverGetNextSector+0x3e>
      return ERROR_INVALID_PARAMETER;
 800c72a:	2302      	movs	r3, #2
 800c72c:	e044      	b.n	800c7b8 <stm32wlxxFlashDriverGetNextSector+0xc8>

   //Loop through sectors list
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 800c72e:	2300      	movs	r3, #0
 800c730:	61fb      	str	r3, [r7, #28]
 800c732:	e036      	b.n	800c7a2 <stm32wlxxFlashDriverGetNextSector+0xb2>
   {
      //Point to the current sectors group
      sg = (SectorsGroup *) &sectorsList[i];
 800c734:	69fa      	ldr	r2, [r7, #28]
 800c736:	4613      	mov	r3, r2
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	4413      	add	r3, r2
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4a21      	ldr	r2, [pc, #132]	; (800c7c4 <stm32wlxxFlashDriverGetNextSector+0xd4>)
 800c740:	4413      	add	r3, r2
 800c742:	60fb      	str	r3, [r7, #12]

      //Is address in current sector group
      if(address <= sg->addr + sg->size*sg->nb)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	68f9      	ldr	r1, [r7, #12]
 800c74e:	6889      	ldr	r1, [r1, #8]
 800c750:	fb01 f303 	mul.w	r3, r1, r3
 800c754:	4413      	add	r3, r2
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d81f      	bhi.n	800c79c <stm32wlxxFlashDriverGetNextSector+0xac>
      {
         //Loop through sectors group list
         for(j = 0; j < sg->nb; j++)
 800c75c:	2300      	movs	r3, #0
 800c75e:	61bb      	str	r3, [r7, #24]
 800c760:	e017      	b.n	800c792 <stm32wlxxFlashDriverGetNextSector+0xa2>
         {
            //Is address located in current sector?
            if(address <= sg->addr + j*sg->size)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	69b9      	ldr	r1, [r7, #24]
 800c76c:	fb01 f303 	mul.w	r3, r1, r3
 800c770:	4413      	add	r3, r2
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	429a      	cmp	r2, r3
 800c776:	d809      	bhi.n	800c78c <stm32wlxxFlashDriverGetNextSector+0x9c>
            {
               //Set next sector address
               sAddr = sg->addr + j*sg->size;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	69b9      	ldr	r1, [r7, #24]
 800c782:	fb01 f303 	mul.w	r3, r1, r3
 800c786:	4413      	add	r3, r2
 800c788:	617b      	str	r3, [r7, #20]
               break;
 800c78a:	e007      	b.n	800c79c <stm32wlxxFlashDriverGetNextSector+0xac>
         for(j = 0; j < sg->nb; j++)
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	3301      	adds	r3, #1
 800c790:	61bb      	str	r3, [r7, #24]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	69ba      	ldr	r2, [r7, #24]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d3e2      	bcc.n	800c762 <stm32wlxxFlashDriverGetNextSector+0x72>
   for(i = 0; i < SECTORS_LIST_LEN && sAddr == 0xFFFFFFFF; i++)
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	61fb      	str	r3, [r7, #28]
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d103      	bne.n	800c7b0 <stm32wlxxFlashDriverGetNextSector+0xc0>
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ae:	d0c1      	beq.n	800c734 <stm32wlxxFlashDriverGetNextSector+0x44>
         }
      }
   }

   //Save next sector addr
   *sectorAddr = sAddr;
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	697a      	ldr	r2, [r7, #20]
 800c7b4:	601a      	str	r2, [r3, #0]

   //Succesfull process
   return NO_ERROR;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3724      	adds	r7, #36	; 0x24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bc80      	pop	{r7}
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	08020148 	.word	0x08020148

0800c7c8 <stm32wlxxFlashDriverIsSectorAddr>:
 * @brief Determine if a given address is contained within a sector
 * @return boolean
 **/

bool_t stm32wlxxFlashDriverIsSectorAddr(uint32_t address)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
   int_t sector;

   //Get Flash memory sector number
   sector = stm32wlxxFlashGetSector(address);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f8f7 	bl	800c9c4 <stm32wlxxFlashGetSector>
 800c7d6:	60f8      	str	r0, [r7, #12]

   //Is given address match a sector start address?
   if(sector >= 0)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	db01      	blt.n	800c7e2 <stm32wlxxFlashDriverIsSectorAddr+0x1a>
      return TRUE;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e000      	b.n	800c7e4 <stm32wlxxFlashDriverIsSectorAddr+0x1c>
   else
      return FALSE;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3710      	adds	r7, #16
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <stm32wlxxFlashDriverEraseSector>:
 * @param[in] nbSectors Number of Flash memory sector to be erased
 * @return Error code
 **/

error_t stm32wlxxFlashDriverEraseSector(uint32_t bankID, uint32_t firstSector, size_t nbSectors)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b08a      	sub	sp, #40	; 0x28
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;
   uint32_t sectorError;

   //Check parameter validity
   if((firstSector >= STM32WLxx_FLASH_SECTOR_NUMBER) || (nbSectors == 0) ||
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	2b7f      	cmp	r3, #127	; 0x7f
 800c7fc:	d80b      	bhi.n	800c816 <stm32wlxxFlashDriverEraseSector+0x2a>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d008      	beq.n	800c816 <stm32wlxxFlashDriverEraseSector+0x2a>
      ((firstSector + nbSectors - 1) >= STM32WLxx_FLASH_SECTOR_NUMBER) ||
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4413      	add	r3, r2
 800c80a:	3b01      	subs	r3, #1
   if((firstSector >= STM32WLxx_FLASH_SECTOR_NUMBER) || (nbSectors == 0) ||
 800c80c:	2b7f      	cmp	r3, #127	; 0x7f
 800c80e:	d802      	bhi.n	800c816 <stm32wlxxFlashDriverEraseSector+0x2a>
      ((firstSector + nbSectors - 1) >= STM32WLxx_FLASH_SECTOR_NUMBER) ||
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d001      	beq.n	800c81a <stm32wlxxFlashDriverEraseSector+0x2e>
      (bankID != STM32WLxx_FLASH_BANK1_ID))
      return ERROR_INVALID_PARAMETER;
 800c816:	2302      	movs	r3, #2
 800c818:	e054      	b.n	800c8c4 <stm32wlxxFlashDriverEraseSector+0xd8>

   //Start of exception handling block
   do
   {
      //Allow access to Flash control registers and user False
      status = HAL_FLASH_Unlock();
 800c81a:	f001 fdf5 	bl	800e408 <HAL_FLASH_Unlock>
 800c81e:	4603      	mov	r3, r0
 800c820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      //Is any error?
      if (status != HAL_OK)
 800c824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00c      	beq.n	800c846 <stm32wlxxFlashDriverEraseSector+0x5a>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register unlock failed!\r\n");
 800c82c:	f7fc fe6b 	bl	8009506 <osSuspendAllTasks>
 800c830:	4b26      	ldr	r3, [pc, #152]	; (800c8cc <stm32wlxxFlashDriverEraseSector+0xe0>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	2227      	movs	r2, #39	; 0x27
 800c838:	2101      	movs	r1, #1
 800c83a:	4825      	ldr	r0, [pc, #148]	; (800c8d0 <stm32wlxxFlashDriverEraseSector+0xe4>)
 800c83c:	f00c f892 	bl	8018964 <fwrite>
 800c840:	f7fc fe6c 	bl	800951c <osResumeAllTasks>
         break;
 800c844:	e036      	b.n	800c8b4 <stm32wlxxFlashDriverEraseSector+0xc8>
      }

      //Set flash erase settings
      EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 800c846:	2302      	movs	r3, #2
 800c848:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.Page       = firstSector;
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	61fb      	str	r3, [r7, #28]
      EraseInitStruct.NbPages    = nbSectors;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	623b      	str	r3, [r7, #32]

      //Wait for the last flash operation
      FLASH_WaitForLastOperation((uint32_t)5000U);
 800c852:	f241 3088 	movw	r0, #5000	; 0x1388
 800c856:	f001 fe13 	bl	800e480 <FLASH_WaitForLastOperation>

      //Erase the specified Flash sector(s)
      status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 800c85a:	f107 0214 	add.w	r2, r7, #20
 800c85e:	f107 0318 	add.w	r3, r7, #24
 800c862:	4611      	mov	r1, r2
 800c864:	4618      	mov	r0, r3
 800c866:	f001 fed1 	bl	800e60c <HAL_FLASHEx_Erase>
 800c86a:	4603      	mov	r3, r0
 800c86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      //Is any error?
      if(status != HAL_OK)
 800c870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00b      	beq.n	800c890 <stm32wlxxFlashDriverEraseSector+0xa4>
      {
         //Debug message
         TRACE_ERROR("Failed to erase flash sector(s) %ld, error = 0x%08lX!\r\n", firstSector, sectorError);
 800c878:	f7fc fe45 	bl	8009506 <osSuspendAllTasks>
 800c87c:	4b13      	ldr	r3, [pc, #76]	; (800c8cc <stm32wlxxFlashDriverEraseSector+0xe0>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68d8      	ldr	r0, [r3, #12]
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	4913      	ldr	r1, [pc, #76]	; (800c8d4 <stm32wlxxFlashDriverEraseSector+0xe8>)
 800c888:	f00b fea8 	bl	80185dc <fprintf>
 800c88c:	f7fc fe46 	bl	800951c <osResumeAllTasks>
      }

      //Disable the Flash option control register access (recommended to protect
      //the option Bytes against possible unwanted operations)
      if(HAL_FLASH_Lock() != HAL_OK)
 800c890:	f001 fddc 	bl	800e44c <HAL_FLASH_Lock>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00c      	beq.n	800c8b4 <stm32wlxxFlashDriverEraseSector+0xc8>
      {
         //Debug message
         TRACE_ERROR("Flash Control Register lock failed!\r\n");
 800c89a:	f7fc fe34 	bl	8009506 <osSuspendAllTasks>
 800c89e:	4b0b      	ldr	r3, [pc, #44]	; (800c8cc <stm32wlxxFlashDriverEraseSector+0xe0>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	2225      	movs	r2, #37	; 0x25
 800c8a6:	2101      	movs	r1, #1
 800c8a8:	480b      	ldr	r0, [pc, #44]	; (800c8d8 <stm32wlxxFlashDriverEraseSector+0xec>)
 800c8aa:	f00c f85b 	bl	8018964 <fwrite>
 800c8ae:	f7fc fe35 	bl	800951c <osResumeAllTasks>
         break;
 800c8b2:	bf00      	nop
      }
   }while(0);

   //Return status code
   return (status == HAL_OK) ? NO_ERROR : ERROR_WRITE_FAILED;
 800c8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <stm32wlxxFlashDriverEraseSector+0xd4>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e001      	b.n	800c8c4 <stm32wlxxFlashDriverEraseSector+0xd8>
 800c8c0:	f240 2309 	movw	r3, #521	; 0x209
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3728      	adds	r7, #40	; 0x28
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	200001c8 	.word	0x200001c8
 800c8d0:	0801f9fc 	.word	0x0801f9fc
 800c8d4:	0801fa24 	.word	0x0801fa24
 800c8d8:	0801fa5c 	.word	0x0801fa5c

0800c8dc <stm32wlxxFlashDriverWriteWord>:
 * @param[in] word 32-bit word to write in Flash memory
 * @return Error code
 **/

error_t stm32wlxxFlashDriverWriteWord(uint32_t address, uint32_t word)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;
   HAL_StatusTypeDef status;
   FLASH_EraseInitTypeDef EraseInitStruct;

   //Precompute the top address
   topAddress = STM32WLxx_FLASH_ADDR + STM32WLxx_FLASH_SIZE;
 800c8e6:	4b33      	ldr	r3, [pc, #204]	; (800c9b4 <stm32wlxxFlashDriverWriteWord+0xd8>)
 800c8e8:	623b      	str	r3, [r7, #32]

   //Check parameters validity (is data in flash)
   if((address + sizeof(uint32_t) >= topAddress) ||
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	3304      	adds	r3, #4
 800c8ee:	6a3a      	ldr	r2, [r7, #32]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d904      	bls.n	800c8fe <stm32wlxxFlashDriverWriteWord+0x22>
      (address % sizeof(uint32_t) != 0))
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f003 0303 	and.w	r3, r3, #3
   if((address + sizeof(uint32_t) >= topAddress) ||
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <stm32wlxxFlashDriverWriteWord+0x26>
      return ERROR_INVALID_PARAMETER;
 800c8fe:	2302      	movs	r3, #2
 800c900:	e053      	b.n	800c9aa <stm32wlxxFlashDriverWriteWord+0xce>

   //Unlock FLASH
   HAL_FLASH_Unlock();
 800c902:	f001 fd81 	bl	800e408 <HAL_FLASH_Unlock>

   do
   {
      //Get flash sector number according to the given wirte address
      // (-1 if it doesn't match a flash sector start address)
      flashSector = stm32wlxxFlashGetSector(address);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f85c 	bl	800c9c4 <stm32wlxxFlashGetSector>
 800c90c:	61f8      	str	r0, [r7, #28]

      //Is write address match a flash sector start address?
      if(flashSector >= 0)
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	2b00      	cmp	r3, #0
 800c912:	db25      	blt.n	800c960 <stm32wlxxFlashDriverWriteWord+0x84>
      {
         //Set flash erase settings
         EraseInitStruct.TypeErase    = FLASH_TYPEERASE_PAGES;
 800c914:	2302      	movs	r3, #2
 800c916:	60fb      	str	r3, [r7, #12]
         EraseInitStruct.Page       = flashSector;
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	613b      	str	r3, [r7, #16]
         EraseInitStruct.NbPages    = 1;
 800c91c:	2301      	movs	r3, #1
 800c91e:	617b      	str	r3, [r7, #20]

         //Wait for the last flash operation
         FLASH_WaitForLastOperation((uint32_t)5000U);
 800c920:	f241 3088 	movw	r0, #5000	; 0x1388
 800c924:	f001 fdac 	bl	800e480 <FLASH_WaitForLastOperation>

         //Erase the sector
         status = HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError);
 800c928:	f107 0218 	add.w	r2, r7, #24
 800c92c:	f107 030c 	add.w	r3, r7, #12
 800c930:	4611      	mov	r1, r2
 800c932:	4618      	mov	r0, r3
 800c934:	f001 fe6a 	bl	800e60c <HAL_FLASHEx_Erase>
 800c938:	4603      	mov	r3, r0
 800c93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
         if(status != HAL_OK)
 800c93e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00c      	beq.n	800c960 <stm32wlxxFlashDriverWriteWord+0x84>
         {
            //Debug message
            TRACE_ERROR("Flash erase failed!\r\n");
 800c946:	f7fc fdde 	bl	8009506 <osSuspendAllTasks>
 800c94a:	4b1b      	ldr	r3, [pc, #108]	; (800c9b8 <stm32wlxxFlashDriverWriteWord+0xdc>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	2215      	movs	r2, #21
 800c952:	2101      	movs	r1, #1
 800c954:	4819      	ldr	r0, [pc, #100]	; (800c9bc <stm32wlxxFlashDriverWriteWord+0xe0>)
 800c956:	f00c f805 	bl	8018964 <fwrite>
 800c95a:	f7fc fddf 	bl	800951c <osResumeAllTasks>
            break;
 800c95e:	e01a      	b.n	800c996 <stm32wlxxFlashDriverWriteWord+0xba>

      //Write word (64bits) into flash
      // Becareful !!!
      // - If FLASH_TYPEPROGRAM_DOUBLEWORD type program -> Data parameter MUST be the 64bits data value
      // - If FLASH_TYPEPROGRAM_FAST type program -> Data parameter MUST be the the address of data
      status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, *((uint64_t*)word));
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c966:	6879      	ldr	r1, [r7, #4]
 800c968:	2001      	movs	r0, #1
 800c96a:	f001 fd09 	bl	800e380 <HAL_FLASH_Program>
 800c96e:	4603      	mov	r3, r0
 800c970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if(status != HAL_OK)
 800c974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00c      	beq.n	800c996 <stm32wlxxFlashDriverWriteWord+0xba>
      {
         //Debug message
         TRACE_ERROR("Flash program failed!\r\n");
 800c97c:	f7fc fdc3 	bl	8009506 <osSuspendAllTasks>
 800c980:	4b0d      	ldr	r3, [pc, #52]	; (800c9b8 <stm32wlxxFlashDriverWriteWord+0xdc>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	2217      	movs	r2, #23
 800c988:	2101      	movs	r1, #1
 800c98a:	480d      	ldr	r0, [pc, #52]	; (800c9c0 <stm32wlxxFlashDriverWriteWord+0xe4>)
 800c98c:	f00b ffea 	bl	8018964 <fwrite>
 800c990:	f7fc fdc4 	bl	800951c <osResumeAllTasks>
         break;
 800c994:	bf00      	nop
      }
   }while(0);

   //Lock FLASH
   HAL_FLASH_Lock();
 800c996:	f001 fd59 	bl	800e44c <HAL_FLASH_Lock>

   //Return error code
   return (status != HAL_OK)? ERROR_FAILURE : NO_ERROR;
 800c99a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	bf14      	ite	ne
 800c9a2:	2301      	movne	r3, #1
 800c9a4:	2300      	moveq	r3, #0
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	b29b      	uxth	r3, r3
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3728      	adds	r7, #40	; 0x28
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	08040000 	.word	0x08040000
 800c9b8:	200001c8 	.word	0x200001c8
 800c9bc:	0801fa84 	.word	0x0801fa84
 800c9c0:	0801fa9c 	.word	0x0801fa9c

0800c9c4 <stm32wlxxFlashGetSector>:
 * @param[in] address Given Flash Memory address
 * @return Sector number or -1
 **/

int_t stm32wlxxFlashGetSector(uint32_t address)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
    uint_t j;
    int_t sector;
    SectorsGroup* sGroup;

    //Initialize sector number
    sector = -1;
 800c9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c9d0:	60fb      	str	r3, [r7, #12]

    //Loop through flash sector group list
    for(i = 0; i < SECTORS_LIST_LEN; i++)
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	617b      	str	r3, [r7, #20]
 800c9d6:	e024      	b.n	800ca22 <stm32wlxxFlashGetSector+0x5e>
    {
        //Point to the current sector group
        sGroup = (SectorsGroup*) &sectorsList[i];
 800c9d8:	697a      	ldr	r2, [r7, #20]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	4413      	add	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	4a14      	ldr	r2, [pc, #80]	; (800ca34 <stm32wlxxFlashGetSector+0x70>)
 800c9e4:	4413      	add	r3, r2
 800c9e6:	60bb      	str	r3, [r7, #8]

        //Loop through sector group sectors list
        for(j = 0; j < sGroup->nb; j++)
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	613b      	str	r3, [r7, #16]
 800c9ec:	e011      	b.n	800ca12 <stm32wlxxFlashGetSector+0x4e>
        {
            //Is current sector address matches given address?
            if(sGroup->addr + sGroup->size*j == address)
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	681a      	ldr	r2, [r3, #0]
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	6939      	ldr	r1, [r7, #16]
 800c9f8:	fb01 f303 	mul.w	r3, r1, r3
 800c9fc:	4413      	add	r3, r2
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d103      	bne.n	800ca0c <stm32wlxxFlashGetSector+0x48>
            {
                sector = j;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	60fb      	str	r3, [r7, #12]
                return sector;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	e00e      	b.n	800ca2a <stm32wlxxFlashGetSector+0x66>
        for(j = 0; j < sGroup->nb; j++)
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	613b      	str	r3, [r7, #16]
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	693a      	ldr	r2, [r7, #16]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d3e8      	bcc.n	800c9ee <stm32wlxxFlashGetSector+0x2a>
    for(i = 0; i < SECTORS_LIST_LEN; i++)
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	617b      	str	r3, [r7, #20]
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d0d7      	beq.n	800c9d8 <stm32wlxxFlashGetSector+0x14>
            }
        }
    }

    return sector;
 800ca28:	68fb      	ldr	r3, [r7, #12]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	371c      	adds	r7, #28
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bc80      	pop	{r7}
 800ca32:	4770      	bx	lr
 800ca34:	08020148 	.word	0x08020148

0800ca38 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ca3c:	f3bf 8f4f 	dsb	sy
}
 800ca40:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ca42:	4b06      	ldr	r3, [pc, #24]	; (800ca5c <__NVIC_SystemReset+0x24>)
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800ca4a:	4904      	ldr	r1, [pc, #16]	; (800ca5c <__NVIC_SystemReset+0x24>)
 800ca4c:	4b04      	ldr	r3, [pc, #16]	; (800ca60 <__NVIC_SystemReset+0x28>)
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ca52:	f3bf 8f4f 	dsb	sy
}
 800ca56:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800ca58:	bf00      	nop
 800ca5a:	e7fd      	b.n	800ca58 <__NVIC_SystemReset+0x20>
 800ca5c:	e000ed00 	.word	0xe000ed00
 800ca60:	05fa0004 	.word	0x05fa0004

0800ca64 <mcuSystemReset>:
/**
 * @brief Reset MCU system
 **/

void mcuSystemReset(void)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	af00      	add	r7, sp, #0
   NVIC_SystemReset();
 800ca68:	f7ff ffe6 	bl	800ca38 <__NVIC_SystemReset>

0800ca6c <verifyInit>:
 * @param[in] settings Image Verification specific settings
 * @return
 **/

error_t verifyInit(VerifyContext *context, VerifySettings *settings)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
   //Check parameters
   if (context == NULL || settings == NULL)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d002      	beq.n	800ca82 <verifyInit+0x16>
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d101      	bne.n	800ca86 <verifyInit+0x1a>
      return ERROR_INVALID_PARAMETER;
 800ca82:	2302      	movs	r3, #2
 800ca84:	e043      	b.n	800cb0e <verifyInit+0xa2>

   //Save verify settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2208      	movs	r2, #8
 800ca8a:	6839      	ldr	r1, [r7, #0]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f00c f97d 	bl	8018d8c <memcpy>

   //Save verification module user settings
   memcpy(&context->verifySettings, settings, sizeof(VerifySettings));
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2208      	movs	r2, #8
 800ca96:	6839      	ldr	r1, [r7, #0]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f00c f977 	bl	8018d8c <memcpy>

   //Initialize verification context for integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d11a      	bne.n	800cadc <verifyInit+0x70>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d014      	beq.n	800cad8 <verifyInit+0x6c>
      {
         //Initialize integrity algo context
         context->verifySettings.integrityAlgo->init(context->checkContext);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	3208      	adds	r2, #8
 800cab8:	4610      	mov	r0, r2
 800caba:	4798      	blx	r3

         //Set image check digest size
         context->imageCheckDigestSize = context->verifySettings.integrityAlgo->digestSize;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	695a      	ldr	r2, [r3, #20]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

         //Set check data (integrity tag) size
         context->checkDataSize = context->imageCheckDigestSize;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

         //Successful process
         return NO_ERROR;
 800cad4:	2300      	movs	r3, #0
 800cad6:	e01a      	b.n	800cb0e <verifyInit+0xa2>
      }
      else
      {
         return ERROR_INVALID_PARAMETER;
 800cad8:	2302      	movs	r3, #2
 800cada:	e018      	b.n	800cb0e <verifyInit+0xa2>
#else
      return ERROR_INVALID_PARAMETER;
#endif
   }
   //Initialize verification context for authentication method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d101      	bne.n	800cae8 <verifyInit+0x7c>
   {
#if (VERIFY_AUTHENTICATION_SUPPORT == ENABLED)
      //Initialize authentication algorithm
      return authInit(context);
#else
      return ERROR_INVALID_PARAMETER;
 800cae4:	2302      	movs	r3, #2
 800cae6:	e012      	b.n	800cb0e <verifyInit+0xa2>
#endif
   }
   //Initialize verification context for signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d101      	bne.n	800caf4 <verifyInit+0x88>
   {
#if (VERIFY_SIGNATURE_SUPPORT == ENABLED)
      //Initialize signature algorithm
      return signInit(context);
#else
      return ERROR_INVALID_PARAMETER;
 800caf0:	2302      	movs	r3, #2
 800caf2:	e00c      	b.n	800cb0e <verifyInit+0xa2>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 800caf4:	f7fc fd07 	bl	8009506 <osSuspendAllTasks>
 800caf8:	4b07      	ldr	r3, [pc, #28]	; (800cb18 <verifyInit+0xac>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	2222      	movs	r2, #34	; 0x22
 800cb00:	2101      	movs	r1, #1
 800cb02:	4806      	ldr	r0, [pc, #24]	; (800cb1c <verifyInit+0xb0>)
 800cb04:	f00b ff2e 	bl	8018964 <fwrite>
 800cb08:	f7fc fd08 	bl	800951c <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800cb0c:	2367      	movs	r3, #103	; 0x67
   }
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	200001c8 	.word	0x200001c8
 800cb1c:	0801fab4 	.word	0x0801fab4

0800cb20 <verifyProcess>:
 * @param[in] length Length og the image data block
 * @return Error code
 **/

error_t verifyProcess(VerifyContext *context, uint8_t *data, size_t length)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
   //Check parameters
   if (context == NULL || (data == NULL || length == 0))
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d005      	beq.n	800cb3e <verifyProcess+0x1e>
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d002      	beq.n	800cb3e <verifyProcess+0x1e>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d101      	bne.n	800cb42 <verifyProcess+0x22>
      return ERROR_INVALID_PARAMETER;
 800cb3e:	2302      	movs	r3, #2
 800cb40:	e02d      	b.n	800cb9e <verifyProcess+0x7e>

   //Process image data block integrity hash tag calculation
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d110      	bne.n	800cb6c <verifyProcess+0x4c>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00a      	beq.n	800cb68 <verifyProcess+0x48>
      {
         //Update integrity hash tag
         context->verifySettings.integrityAlgo->update(context->checkContext, data, length);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	f102 0008 	add.w	r0, r2, #8
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	68b9      	ldr	r1, [r7, #8]
 800cb62:	4798      	blx	r3
      TRACE_ERROR("Verification mode not supported!\r\n");
      return ERROR_NOT_IMPLEMENTED;
   }

   //Successful process
   return NO_ERROR;
 800cb64:	2300      	movs	r3, #0
 800cb66:	e01a      	b.n	800cb9e <verifyProcess+0x7e>
         return ERROR_INVALID_PARAMETER;
 800cb68:	2302      	movs	r3, #2
 800cb6a:	e018      	b.n	800cb9e <verifyProcess+0x7e>
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d101      	bne.n	800cb78 <verifyProcess+0x58>
      return ERROR_INVALID_PARAMETER;
 800cb74:	2302      	movs	r3, #2
 800cb76:	e012      	b.n	800cb9e <verifyProcess+0x7e>
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	2b02      	cmp	r3, #2
 800cb7e:	d101      	bne.n	800cb84 <verifyProcess+0x64>
      return ERROR_INVALID_PARAMETER;
 800cb80:	2302      	movs	r3, #2
 800cb82:	e00c      	b.n	800cb9e <verifyProcess+0x7e>
      TRACE_ERROR("Verification mode not supported!\r\n");
 800cb84:	f7fc fcbf 	bl	8009506 <osSuspendAllTasks>
 800cb88:	4b07      	ldr	r3, [pc, #28]	; (800cba8 <verifyProcess+0x88>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	2222      	movs	r2, #34	; 0x22
 800cb90:	2101      	movs	r1, #1
 800cb92:	4806      	ldr	r0, [pc, #24]	; (800cbac <verifyProcess+0x8c>)
 800cb94:	f00b fee6 	bl	8018964 <fwrite>
 800cb98:	f7fc fcc0 	bl	800951c <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800cb9c:	2367      	movs	r3, #103	; 0x67
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3710      	adds	r7, #16
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	200001c8 	.word	0x200001c8
 800cbac:	0801fab4 	.word	0x0801fab4

0800cbb0 <verifyConfirm>:
 * @param[in] verifyDataLength Length of the image check data
 * @return Error code
 **/

error_t verifyConfirm(VerifyContext *context, uint8_t *verifyData, size_t verifyDataLength)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
   error_t error;

   //Initialize error code
   error = NO_ERROR;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	82fb      	strh	r3, [r7, #22]

   //Check parameters
   if (context == NULL || verifyData == NULL || verifyDataLength == 0)
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d005      	beq.n	800cbd2 <verifyConfirm+0x22>
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <verifyConfirm+0x22>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d101      	bne.n	800cbd6 <verifyConfirm+0x26>
      return ERROR_INVALID_PARAMETER;
 800cbd2:	2302      	movs	r3, #2
 800cbd4:	e03e      	b.n	800cc54 <verifyConfirm+0xa4>

   //Check image check data using integrity method
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d11f      	bne.n	800cc1e <verifyConfirm+0x6e>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d019      	beq.n	800cc1a <verifyConfirm+0x6a>
      {
         //Finalize interity tag computation
         context->verifySettings.integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	f102 0008 	add.w	r0, r2, #8
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	32dc      	adds	r2, #220	; 0xdc
 800cbf6:	4611      	mov	r1, r2
 800cbf8:	4798      	blx	r3
         TRACE_DEBUG("Computed integrity tag (%d bytes)\r\n", context->imageCheckDigestSize);
         TRACE_DEBUG_ARRAY("  ", context->imageCheckDigest, context->imageCheckDigestSize);
         TRACE_DEBUG("\r\n");

         //Compare computed integrity digest with the one received in the image
         if (osMemcmp(verifyData, context->imageCheckDigest, context->imageCheckDigestSize) != 0)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800cc06:	461a      	mov	r2, r3
 800cc08:	68b8      	ldr	r0, [r7, #8]
 800cc0a:	f00b ffa9 	bl	8018b60 <memcmp>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d01e      	beq.n	800cc52 <verifyConfirm+0xa2>
         {
            //Debug message
            TRACE_INFO("Firmware integrity tag is not valid!\r\n");
            error = ERROR_ABORTED;
 800cc14:	230f      	movs	r3, #15
 800cc16:	82fb      	strh	r3, [r7, #22]
 800cc18:	e01b      	b.n	800cc52 <verifyConfirm+0xa2>
         }
      }
      else
      {
         return ERROR_INVALID_PARAMETER;
 800cc1a:	2302      	movs	r3, #2
 800cc1c:	e01a      	b.n	800cc54 <verifyConfirm+0xa4>
#else
      return ERROR_INVALID_PARAMETER;
#endif
   }
   //Check image check data using authentification method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_AUTHENTICATION)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d101      	bne.n	800cc2a <verifyConfirm+0x7a>
      else
      {
         return ERROR_INVALID_PARAMETER;
      }
#else
      return ERROR_INVALID_PARAMETER;
 800cc26:	2302      	movs	r3, #2
 800cc28:	e014      	b.n	800cc54 <verifyConfirm+0xa4>
#endif
   }
   //Check image check data using signature method
   else if(context->verifySettings.verifyMethod == VERIFY_METHOD_SIGNATURE)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d101      	bne.n	800cc36 <verifyConfirm+0x86>
      else
      {
         return ERROR_INVALID_PARAMETER;
      }
#else
      return ERROR_INVALID_PARAMETER;
 800cc32:	2302      	movs	r3, #2
 800cc34:	e00e      	b.n	800cc54 <verifyConfirm+0xa4>
#endif
   }
   else
   {
      // Debug message
      TRACE_ERROR("Verification mode not supported!\r\n");
 800cc36:	f7fc fc66 	bl	8009506 <osSuspendAllTasks>
 800cc3a:	4b08      	ldr	r3, [pc, #32]	; (800cc5c <verifyConfirm+0xac>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	2222      	movs	r2, #34	; 0x22
 800cc42:	2101      	movs	r1, #1
 800cc44:	4806      	ldr	r0, [pc, #24]	; (800cc60 <verifyConfirm+0xb0>)
 800cc46:	f00b fe8d 	bl	8018964 <fwrite>
 800cc4a:	f7fc fc67 	bl	800951c <osResumeAllTasks>
      return ERROR_NOT_IMPLEMENTED;
 800cc4e:	2367      	movs	r3, #103	; 0x67
 800cc50:	e000      	b.n	800cc54 <verifyConfirm+0xa4>
   }

   //Successful process
   return error;
 800cc52:	8afb      	ldrh	r3, [r7, #22]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3718      	adds	r7, #24
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	200001c8 	.word	0x200001c8
 800cc60:	0801fab4 	.word	0x0801fab4

0800cc64 <verifyGenerateCheckData>:
 * @param[out] checkDataLength Length of the image check data buffer tag
 * @return Error code
 **/

error_t verifyGenerateCheckData(VerifyContext *context, uint8_t *checkData, size_t checkDataSize, size_t *checkDataLength)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b086      	sub	sp, #24
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
 800cc70:	603b      	str	r3, [r7, #0]
   VerifySettings *settings;

   //Check parameters
   if (context == NULL || checkData == NULL || checkDataLength == NULL)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d005      	beq.n	800cc84 <verifyGenerateCheckData+0x20>
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d002      	beq.n	800cc84 <verifyGenerateCheckData+0x20>
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d101      	bne.n	800cc88 <verifyGenerateCheckData+0x24>
      return ERROR_INVALID_PARAMETER;
 800cc84:	2302      	movs	r3, #2
 800cc86:	e03c      	b.n	800cd02 <verifyGenerateCheckData+0x9e>

   //Point to the verify settings
   settings = (VerifySettings *)&context->verifySettings;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	617b      	str	r3, [r7, #20]

   //Generate image check integrity tag
   if(context->verifySettings.verifyMethod == VERIFY_METHOD_INTEGRITY)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d129      	bne.n	800cce8 <verifyGenerateCheckData+0x84>
   {
#if (VERIFY_INTEGRITY_SUPPORT == ENABLED)
      //Is user require integrity check?
      if (context->verifySettings.integrityAlgo != NULL)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d023      	beq.n	800cce4 <verifyGenerateCheckData+0x80>
      {
         //Finalize interity tag check computation
         settings->integrityAlgo->final(context->checkContext, context->imageCheckDigest);
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	f102 0008 	add.w	r0, r2, #8
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	32dc      	adds	r2, #220	; 0xdc
 800ccac:	4611      	mov	r1, r2
 800ccae:	4798      	blx	r3

         if(checkDataSize >= context->imageCheckDigestSize)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d310      	bcc.n	800ccde <verifyGenerateCheckData+0x7a>
         {
            //Save interity tag check data length
            *checkDataLength = context->imageCheckDigestSize;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	601a      	str	r2, [r3, #0]
            //Save interity tag check data
            memcpy(checkData, context->imageCheckDigest, context->imageCheckDigestSize);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	68b8      	ldr	r0, [r7, #8]
 800ccd6:	f00c f859 	bl	8018d8c <memcpy>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
      return ERROR_ABORTED;
   }

   //Successfull process
   return NO_ERROR;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	e011      	b.n	800cd02 <verifyGenerateCheckData+0x9e>
            return ERROR_BUFFER_OVERFLOW;
 800ccde:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800cce2:	e00e      	b.n	800cd02 <verifyGenerateCheckData+0x9e>
         return ERROR_INVALID_PARAMETER;
 800cce4:	2302      	movs	r3, #2
 800cce6:	e00c      	b.n	800cd02 <verifyGenerateCheckData+0x9e>
      TRACE_ERROR("Check data generation method missing or unsupported!!!\r\n");
 800cce8:	f7fc fc0d 	bl	8009506 <osSuspendAllTasks>
 800ccec:	4b07      	ldr	r3, [pc, #28]	; (800cd0c <verifyGenerateCheckData+0xa8>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	2238      	movs	r2, #56	; 0x38
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	4806      	ldr	r0, [pc, #24]	; (800cd10 <verifyGenerateCheckData+0xac>)
 800ccf8:	f00b fe34 	bl	8018964 <fwrite>
 800ccfc:	f7fc fc0e 	bl	800951c <osResumeAllTasks>
      return ERROR_ABORTED;
 800cd00:	230f      	movs	r3, #15
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3718      	adds	r7, #24
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	200001c8 	.word	0x200001c8
 800cd10:	0801fad8 	.word	0x0801fad8

0800cd14 <w25q80dvFlashDriverInit>:
 * @brief Initialize Flash Memory.
 * @return Error code
 **/

error_t w25q80dvFlashDriverInit(void)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
	bool_t status;

   //Debug message
   TRACE_INFO("Initializing %s memory...\r\n", W25Q80DV_NAME);

   status = Flash__Init();
 800cd1a:	f007 fdfb 	bl	8014914 <Flash__Init>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	607b      	str	r3, [r7, #4]
   if(!status)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <w25q80dvFlashDriverInit+0x18>
   {
      TRACE_ERROR("Failed to initialize SPI External Flash!\r\n");
      return ERROR_FAILURE;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e000      	b.n	800cd2e <w25q80dvFlashDriverInit+0x1a>
   }

   //Successfull process
   return NO_ERROR;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <w25q80dvFlashDriverGetInfo>:
 * @param[in,out] info Pointeur to the Memory information structure to be returned
 * @return Error code
 **/

error_t w25q80dvFlashDriverGetInfo(const FlashInfo **info)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
   //Set Memory information pointeur
   *info = (const FlashInfo*) &w25q80dvFlashDriverInfo;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a04      	ldr	r2, [pc, #16]	; (800cd54 <w25q80dvFlashDriverGetInfo+0x1c>)
 800cd44:	601a      	str	r2, [r3, #0]

   //Successfull process
   return NO_ERROR;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bc80      	pop	{r7}
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	080201a8 	.word	0x080201a8

0800cd58 <w25q80dvFlashDriverGetStatus>:
 * @param[in,out] status Pointeur to the Memory status to be returned
 * @return Error code
 **/

error_t w25q80dvFlashDriverGetStatus(FlashStatus *status)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
   uint16_t statusReg;

   //Check parameter vailidity
   if(status == NULL)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <w25q80dvFlashDriverGetStatus+0x12>
      return ERROR_INVALID_PARAMETER;
 800cd66:	2302      	movs	r3, #2
 800cd68:	e010      	b.n	800cd8c <w25q80dvFlashDriverGetStatus+0x34>

   //TODO: Get SPI Flash Memory error flags status

   //Read w25q80dv status register 1 & 2
   statusReg = Flash__ReadDeviceStatus();
 800cd6a:	f007 fe66 	bl	8014a3a <Flash__ReadDeviceStatus>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	81fb      	strh	r3, [r7, #14]

   if(statusReg & STATUS_REG_BUSY)
 800cd72:	89fb      	ldrh	r3, [r7, #14]
 800cd74:	f003 0301 	and.w	r3, r3, #1
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d003      	beq.n	800cd84 <w25q80dvFlashDriverGetStatus+0x2c>
   {
	   //Set Flash memory status
	   *status = FLASH_STATUS_BUSY;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	e002      	b.n	800cd8a <w25q80dvFlashDriverGetStatus+0x32>
   }
   else
   {
	   //Set Flash memory status
	   *status = FLASH_STATUS_OK;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	701a      	strb	r2, [r3, #0]
   }

   //Successfull process
   return NO_ERROR;
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <w25q80dvFlashDriverWrite>:
 * @param[in] length Number of data bytes to write in
 * @return Error code
 **/

error_t w25q80dvFlashDriverWrite(uint32_t address, uint8_t* data, size_t length)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b088      	sub	sp, #32
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
   const uint8_t *p;
   uint8_t word[4];
   size_t n;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 800cda0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cda4:	61bb      	str	r3, [r7, #24]

   //Check address validity
   if((address < W25Q80DV_ADDR || address >= topAddress) ||
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d204      	bcs.n	800cdb8 <w25q80dvFlashDriverWrite+0x24>
      (address % sizeof(uint32_t) != 0))
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f003 0303 	and.w	r3, r3, #3
   if((address < W25Q80DV_ADDR || address >= topAddress) ||
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d001      	beq.n	800cdbc <w25q80dvFlashDriverWrite+0x28>
      return ERROR_INVALID_PARAMETER;
 800cdb8:	2302      	movs	r3, #2
 800cdba:	e042      	b.n	800ce42 <w25q80dvFlashDriverWrite+0xae>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d005      	beq.n	800cdce <w25q80dvFlashDriverWrite+0x3a>
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	69ba      	ldr	r2, [r7, #24]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d201      	bcs.n	800cdd2 <w25q80dvFlashDriverWrite+0x3e>
      return ERROR_INVALID_PARAMETER;
 800cdce:	2302      	movs	r3, #2
 800cdd0:	e037      	b.n	800ce42 <w25q80dvFlashDriverWrite+0xae>

   //Cast data pointer
   p = (const uint8_t*) data;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	61fb      	str	r3, [r7, #28]

   //Perform write operation
   while(length > 0)
 800cdd6:	e030      	b.n	800ce3a <w25q80dvFlashDriverWrite+0xa6>
   {
      //Prevent to write more than 4 bytes at a time
      n = MIN(sizeof(word), length);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2b04      	cmp	r3, #4
 800cddc:	bf28      	it	cs
 800cdde:	2304      	movcs	r3, #4
 800cde0:	617b      	str	r3, [r7, #20]

      //Check if remaining bytes is less than 4 (32bits word)
      if(n < sizeof(uint32_t))
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	d806      	bhi.n	800cdf6 <w25q80dvFlashDriverWrite+0x62>
         memset(word, 0, sizeof(word));
 800cde8:	f107 0310 	add.w	r3, r7, #16
 800cdec:	2204      	movs	r2, #4
 800cdee:	2100      	movs	r1, #0
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f00b fedf 	bl	8018bb4 <memset>

      //Copy n bytes
      memcpy(word, p, n);
 800cdf6:	f107 0310 	add.w	r3, r7, #16
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	69f9      	ldr	r1, [r7, #28]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f00b ffc4 	bl	8018d8c <memcpy>

      //Is address match sector start address?
      if(address % W25Q80DV_SUBSECTORS_SIZE == 0)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d102      	bne.n	800ce14 <w25q80dvFlashDriverWrite+0x80>
      {
         //Erases the specified block
    	 Flash__SectorErase4k(address);
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f007 fec8 	bl	8014ba4 <Flash__SectorErase4k>
      }

      //Program 32-bit word in flash memory
      Flash__PageProgram(address, word, sizeof(uint32_t));
 800ce14:	f107 0310 	add.w	r3, r7, #16
 800ce18:	2204      	movs	r2, #4
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f007 fe74 	bl	8014b0a <Flash__PageProgram>

      //Advance data pointer
      p += n;
 800ce22:	69fa      	ldr	r2, [r7, #28]
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	4413      	add	r3, r2
 800ce28:	61fb      	str	r3, [r7, #28]
      //Increment word address
      address += n;
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	4413      	add	r3, r2
 800ce30:	60fb      	str	r3, [r7, #12]
      //Remaining bytes to be written
      length -= n;
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	1ad3      	subs	r3, r2, r3
 800ce38:	607b      	str	r3, [r7, #4]
   while(length > 0)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1cb      	bne.n	800cdd8 <w25q80dvFlashDriverWrite+0x44>
   }

   //Successful process
   return NO_ERROR;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3720      	adds	r7, #32
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <w25q80dvFlashDriverRead>:
 * @param[in] length Number of data bytes to read out
 * @return Error code
 **/

error_t w25q80dvFlashDriverRead(uint32_t address, uint8_t* data, size_t length)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b086      	sub	sp, #24
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	60f8      	str	r0, [r7, #12]
 800ce52:	60b9      	str	r1, [r7, #8]
 800ce54:	607a      	str	r2, [r7, #4]
   uint32_t topAddress;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 800ce56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ce5a:	617b      	str	r3, [r7, #20]

   //Check address validity
   if(address < W25Q80DV_ADDR || address >= topAddress)
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d301      	bcc.n	800ce68 <w25q80dvFlashDriverRead+0x1e>
      return ERROR_INVALID_PARAMETER;
 800ce64:	2302      	movs	r3, #2
 800ce66:	e010      	b.n	800ce8a <w25q80dvFlashDriverRead+0x40>

   //Check parameters validity (is data in flash)
   if(data == NULL || address + length > topAddress)
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d005      	beq.n	800ce7a <w25q80dvFlashDriverRead+0x30>
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	4413      	add	r3, r2
 800ce74:	697a      	ldr	r2, [r7, #20]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d201      	bcs.n	800ce7e <w25q80dvFlashDriverRead+0x34>
      return ERROR_INVALID_PARAMETER;
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	e005      	b.n	800ce8a <w25q80dvFlashDriverRead+0x40>

   //Perform read operation
   Flash__ReadBuffer(address, data, length);
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	68b9      	ldr	r1, [r7, #8]
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f007 fdf1 	bl	8014a6a <Flash__ReadBuffer>

   //Successfull process
   return NO_ERROR;
 800ce88:	2300      	movs	r3, #0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3718      	adds	r7, #24
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <w25q80dvFlashDriverErase>:
 * @param[in] length Number of data bytes to be erased
 * @return Error code
 **/

error_t w25q80dvFlashDriverErase(uint32_t address, size_t length)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b084      	sub	sp, #16
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	6039      	str	r1, [r7, #0]
   uint32_t topAddress;

   //Precompute the top address
   topAddress = W25Q80DV_ADDR + W25Q80DV_SIZE;
 800ce9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cea0:	60fb      	str	r3, [r7, #12]

   //Check address validity
   if(address < W25Q80DV_ADDR || address >= topAddress)
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d301      	bcc.n	800ceae <w25q80dvFlashDriverErase+0x1c>
      return ERROR_INVALID_PARAMETER;
 800ceaa:	2302      	movs	r3, #2
 800ceac:	e02d      	b.n	800cf0a <w25q80dvFlashDriverErase+0x78>

   //Check parameters validity (is data in flash)
   if(address + length > topAddress)
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d201      	bcs.n	800cebe <w25q80dvFlashDriverErase+0x2c>
      return ERROR_INVALID_PARAMETER;
 800ceba:	2302      	movs	r3, #2
 800cebc:	e025      	b.n	800cf0a <w25q80dvFlashDriverErase+0x78>

   //Be sure address match a memory flash subsector start address
   if(address % W25Q80DV_SUBSECTORS_SIZE != 0)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d01c      	beq.n	800cf02 <w25q80dvFlashDriverErase+0x70>
   {
      length += address % W25Q80DV_SUBSECTORS_SIZE;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cece:	683a      	ldr	r2, [r7, #0]
 800ced0:	4413      	add	r3, r2
 800ced2:	603b      	str	r3, [r7, #0]
      address -= address % W25Q80DV_SUBSECTORS_SIZE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ceda:	f023 030f 	bic.w	r3, r3, #15
 800cede:	607b      	str	r3, [r7, #4]
   }

   //Perform erase operation
   while(length > 0)
 800cee0:	e00f      	b.n	800cf02 <w25q80dvFlashDriverErase+0x70>
   {
      //Erases the specified block
	  Flash__SectorErase4k(address);
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f007 fe5e 	bl	8014ba4 <Flash__SectorErase4k>

      //Increment word address
      address += W25Q80DV_SUBSECTORS_SIZE;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceee:	607b      	str	r3, [r7, #4]
      //Remaining bytes to be erased
      length -= MIN(length, W25Q80DV_SUBSECTORS_SIZE);
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cef6:	bf28      	it	cs
 800cef8:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	603b      	str	r3, [r7, #0]
   while(length > 0)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1ec      	bne.n	800cee2 <w25q80dvFlashDriverErase+0x50>
   }

   //Successful process
   return NO_ERROR;
 800cf08:	2300      	movs	r3, #0
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <w25q80dvFlashDriverIsSectorAddr>:
 * @brief Determine if a given address match a sector tart address
 * @return boolean
 **/

bool_t w25q80dvFlashDriverIsSectorAddr(uint32_t address)
{
 800cf12:	b480      	push	{r7}
 800cf14:	b083      	sub	sp, #12
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	6078      	str	r0, [r7, #4]
   //Is given address match a sector start address?
   if((address % W25Q80DV_SUBSECTORS_SIZE) == 0)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d101      	bne.n	800cf28 <w25q80dvFlashDriverIsSectorAddr+0x16>
      return TRUE;
 800cf24:	2301      	movs	r3, #1
 800cf26:	e000      	b.n	800cf2a <w25q80dvFlashDriverIsSectorAddr+0x18>
   else
      return FALSE;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	370c      	adds	r7, #12
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bc80      	pop	{r7}
 800cf32:	4770      	bx	lr

0800cf34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cf3e:	2003      	movs	r0, #3
 800cf40:	f001 f920 	bl	800e184 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cf44:	f002 ff90 	bl	800fe68 <HAL_RCC_GetHCLKFreq>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	4a09      	ldr	r2, [pc, #36]	; (800cf70 <HAL_Init+0x3c>)
 800cf4c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800cf4e:	200f      	movs	r0, #15
 800cf50:	f7fd fbd8 	bl	800a704 <HAL_InitTick>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d002      	beq.n	800cf60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	71fb      	strb	r3, [r7, #7]
 800cf5e:	e001      	b.n	800cf64 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800cf60:	f7fd f9f5 	bl	800a34e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800cf64:	79fb      	ldrb	r3, [r7, #7]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	20000080 	.word	0x20000080

0800cf74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cf74:	b480      	push	{r7}
 800cf76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800cf78:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <HAL_IncTick+0x1c>)
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	4b05      	ldr	r3, [pc, #20]	; (800cf94 <HAL_IncTick+0x20>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4413      	add	r3, r2
 800cf84:	4a03      	ldr	r2, [pc, #12]	; (800cf94 <HAL_IncTick+0x20>)
 800cf86:	6013      	str	r3, [r2, #0]
}
 800cf88:	bf00      	nop
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bc80      	pop	{r7}
 800cf8e:	4770      	bx	lr
 800cf90:	2000008c 	.word	0x2000008c
 800cf94:	200020ac 	.word	0x200020ac

0800cf98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	af00      	add	r7, sp, #0
  return uwTick;
 800cf9c:	4b02      	ldr	r3, [pc, #8]	; (800cfa8 <HAL_GetTick+0x10>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bc80      	pop	{r7}
 800cfa6:	4770      	bx	lr
 800cfa8:	200020ac 	.word	0x200020ac

0800cfac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cfb4:	f7ff fff0 	bl	800cf98 <HAL_GetTick>
 800cfb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc4:	d005      	beq.n	800cfd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800cfc6:	4b0a      	ldr	r3, [pc, #40]	; (800cff0 <HAL_Delay+0x44>)
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	461a      	mov	r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	4413      	add	r3, r2
 800cfd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800cfd2:	bf00      	nop
 800cfd4:	f7ff ffe0 	bl	800cf98 <HAL_GetTick>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	68fa      	ldr	r2, [r7, #12]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d8f7      	bhi.n	800cfd4 <HAL_Delay+0x28>
  {
  }
}
 800cfe4:	bf00      	nop
 800cfe6:	bf00      	nop
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	2000008c 	.word	0x2000008c

0800cff4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800cff4:	b480      	push	{r7}
 800cff6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800cff8:	4b02      	ldr	r3, [pc, #8]	; (800d004 <HAL_GetUIDw0+0x10>)
 800cffa:	681b      	ldr	r3, [r3, #0]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	46bd      	mov	sp, r7
 800d000:	bc80      	pop	{r7}
 800d002:	4770      	bx	lr
 800d004:	1fff7590 	.word	0x1fff7590

0800d008 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800d008:	b480      	push	{r7}
 800d00a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800d00c:	4b02      	ldr	r3, [pc, #8]	; (800d018 <HAL_GetUIDw1+0x10>)
 800d00e:	681b      	ldr	r3, [r3, #0]
}
 800d010:	4618      	mov	r0, r3
 800d012:	46bd      	mov	sp, r7
 800d014:	bc80      	pop	{r7}
 800d016:	4770      	bx	lr
 800d018:	1fff7594 	.word	0x1fff7594

0800d01c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800d01c:	b480      	push	{r7}
 800d01e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800d020:	4b02      	ldr	r3, [pc, #8]	; (800d02c <HAL_GetUIDw2+0x10>)
 800d022:	681b      	ldr	r3, [r3, #0]
}
 800d024:	4618      	mov	r0, r3
 800d026:	46bd      	mov	sp, r7
 800d028:	bc80      	pop	{r7}
 800d02a:	4770      	bx	lr
 800d02c:	1fff7598 	.word	0x1fff7598

0800d030 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	431a      	orrs	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	601a      	str	r2, [r3, #0]
}
 800d04a:	bf00      	nop
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	bc80      	pop	{r7}
 800d052:	4770      	bx	lr

0800d054 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800d064:	4618      	mov	r0, r3
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	bc80      	pop	{r7}
 800d06c:	4770      	bx	lr

0800d06e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800d06e:	b480      	push	{r7}
 800d070:	b085      	sub	sp, #20
 800d072:	af00      	add	r7, sp, #0
 800d074:	60f8      	str	r0, [r7, #12]
 800d076:	60b9      	str	r1, [r7, #8]
 800d078:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	695a      	ldr	r2, [r3, #20]
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	f003 0304 	and.w	r3, r3, #4
 800d084:	2107      	movs	r1, #7
 800d086:	fa01 f303 	lsl.w	r3, r1, r3
 800d08a:	43db      	mvns	r3, r3
 800d08c:	401a      	ands	r2, r3
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	f003 0304 	and.w	r3, r3, #4
 800d094:	6879      	ldr	r1, [r7, #4]
 800d096:	fa01 f303 	lsl.w	r3, r1, r3
 800d09a:	431a      	orrs	r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800d0a0:	bf00      	nop
 800d0a2:	3714      	adds	r7, #20
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bc80      	pop	{r7}
 800d0a8:	4770      	bx	lr

0800d0aa <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	695a      	ldr	r2, [r3, #20]
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	f003 0304 	and.w	r3, r3, #4
 800d0be:	2107      	movs	r1, #7
 800d0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d0c4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800d0cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bc80      	pop	{r7}
 800d0d8:	4770      	bx	lr

0800d0da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d101      	bne.n	800d0f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e000      	b.n	800d0f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bc80      	pop	{r7}
 800d0fc:	4770      	bx	lr

0800d0fe <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800d0fe:	b480      	push	{r7}
 800d100:	b085      	sub	sp, #20
 800d102:	af00      	add	r7, sp, #0
 800d104:	60f8      	str	r0, [r7, #12]
 800d106:	60b9      	str	r1, [r7, #8]
 800d108:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	f003 031f 	and.w	r3, r3, #31
 800d114:	210f      	movs	r1, #15
 800d116:	fa01 f303 	lsl.w	r3, r1, r3
 800d11a:	43db      	mvns	r3, r3
 800d11c:	401a      	ands	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	0e9b      	lsrs	r3, r3, #26
 800d122:	f003 010f 	and.w	r1, r3, #15
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f003 031f 	and.w	r3, r3, #31
 800d12c:	fa01 f303 	lsl.w	r3, r1, r3
 800d130:	431a      	orrs	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800d136:	bf00      	nop
 800d138:	3714      	adds	r7, #20
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bc80      	pop	{r7}
 800d13e:	4770      	bx	lr

0800d140 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d154:	431a      	orrs	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d15a:	bf00      	nop
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	bc80      	pop	{r7}
 800d162:	4770      	bx	lr

0800d164 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d178:	43db      	mvns	r3, r3
 800d17a:	401a      	ands	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	bc80      	pop	{r7}
 800d188:	4770      	bx	lr

0800d18a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800d18a:	b480      	push	{r7}
 800d18c:	b085      	sub	sp, #20
 800d18e:	af00      	add	r7, sp, #0
 800d190:	60f8      	str	r0, [r7, #12]
 800d192:	60b9      	str	r1, [r7, #8]
 800d194:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	695a      	ldr	r2, [r3, #20]
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	021b      	lsls	r3, r3, #8
 800d19e:	43db      	mvns	r3, r3
 800d1a0:	401a      	ands	r2, r3
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	0219      	lsls	r1, r3, #8
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	400b      	ands	r3, r1
 800d1aa:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800d1ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d1b2:	431a      	orrs	r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800d1b8:	bf00      	nop
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bc80      	pop	{r7}
 800d1c0:	4770      	bx	lr

0800d1c2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800d1c2:	b480      	push	{r7}
 800d1c4:	b083      	sub	sp, #12
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800d1d2:	f023 0317 	bic.w	r3, r3, #23
 800d1d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800d1de:	bf00      	nop
 800d1e0:	370c      	adds	r7, #12
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bc80      	pop	{r7}
 800d1e6:	4770      	bx	lr

0800d1e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1fc:	d101      	bne.n	800d202 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e000      	b.n	800d204 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	bc80      	pop	{r7}
 800d20c:	4770      	bx	lr

0800d20e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800d20e:	b480      	push	{r7}
 800d210:	b083      	sub	sp, #12
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d21e:	f023 0317 	bic.w	r3, r3, #23
 800d222:	f043 0201 	orr.w	r2, r3, #1
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800d22a:	bf00      	nop
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	bc80      	pop	{r7}
 800d232:	4770      	bx	lr

0800d234 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d244:	f023 0317 	bic.w	r3, r3, #23
 800d248:	f043 0202 	orr.w	r2, r3, #2
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	bc80      	pop	{r7}
 800d258:	4770      	bx	lr

0800d25a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800d25a:	b480      	push	{r7}
 800d25c:	b083      	sub	sp, #12
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	f003 0301 	and.w	r3, r3, #1
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d101      	bne.n	800d272 <LL_ADC_IsEnabled+0x18>
 800d26e:	2301      	movs	r3, #1
 800d270:	e000      	b.n	800d274 <LL_ADC_IsEnabled+0x1a>
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	bc80      	pop	{r7}
 800d27c:	4770      	bx	lr

0800d27e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800d27e:	b480      	push	{r7}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	f003 0302 	and.w	r3, r3, #2
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d101      	bne.n	800d296 <LL_ADC_IsDisableOngoing+0x18>
 800d292:	2301      	movs	r3, #1
 800d294:	e000      	b.n	800d298 <LL_ADC_IsDisableOngoing+0x1a>
 800d296:	2300      	movs	r3, #0
}
 800d298:	4618      	mov	r0, r3
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bc80      	pop	{r7}
 800d2a0:	4770      	bx	lr

0800d2a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b083      	sub	sp, #12
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2b2:	f023 0317 	bic.w	r3, r3, #23
 800d2b6:	f043 0204 	orr.w	r2, r3, #4
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800d2be:	bf00      	nop
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bc80      	pop	{r7}
 800d2c6:	4770      	bx	lr

0800d2c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2d8:	f023 0317 	bic.w	r3, r3, #23
 800d2dc:	f043 0210 	orr.w	r2, r3, #16
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800d2e4:	bf00      	nop
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bc80      	pop	{r7}
 800d2ec:	4770      	bx	lr

0800d2ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	f003 0304 	and.w	r3, r3, #4
 800d2fe:	2b04      	cmp	r3, #4
 800d300:	d101      	bne.n	800d306 <LL_ADC_REG_IsConversionOngoing+0x18>
 800d302:	2301      	movs	r3, #1
 800d304:	e000      	b.n	800d308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bc80      	pop	{r7}
 800d310:	4770      	bx	lr
	...

0800d314 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d31c:	2300      	movs	r3, #0
 800d31e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800d320:	2300      	movs	r3, #0
 800d322:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800d324:	2300      	movs	r3, #0
 800d326:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800d328:	2300      	movs	r3, #0
 800d32a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800d332:	2301      	movs	r3, #1
 800d334:	e17e      	b.n	800d634 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d340:	2b00      	cmp	r3, #0
 800d342:	d109      	bne.n	800d358 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7fd f80d 	bl	800a364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff ff43 	bl	800d1e8 <LL_ADC_IsInternalRegulatorEnabled>
 800d362:	4603      	mov	r3, r0
 800d364:	2b00      	cmp	r3, #0
 800d366:	d115      	bne.n	800d394 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7ff ff28 	bl	800d1c2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d372:	4b9e      	ldr	r3, [pc, #632]	; (800d5ec <HAL_ADC_Init+0x2d8>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	099b      	lsrs	r3, r3, #6
 800d378:	4a9d      	ldr	r2, [pc, #628]	; (800d5f0 <HAL_ADC_Init+0x2dc>)
 800d37a:	fba2 2303 	umull	r2, r3, r2, r3
 800d37e:	099b      	lsrs	r3, r3, #6
 800d380:	3301      	adds	r3, #1
 800d382:	005b      	lsls	r3, r3, #1
 800d384:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800d386:	e002      	b.n	800d38e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	3b01      	subs	r3, #1
 800d38c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1f9      	bne.n	800d388 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4618      	mov	r0, r3
 800d39a:	f7ff ff25 	bl	800d1e8 <LL_ADC_IsInternalRegulatorEnabled>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d10d      	bne.n	800d3c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3a8:	f043 0210 	orr.w	r2, r3, #16
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3b4:	f043 0201 	orr.w	r2, r3, #1
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7ff ff92 	bl	800d2ee <LL_ADC_REG_IsConversionOngoing>
 800d3ca:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3d0:	f003 0310 	and.w	r3, r3, #16
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f040 8124 	bne.w	800d622 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f040 8120 	bne.w	800d622 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800d3ea:	f043 0202 	orr.w	r2, r3, #2
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7ff ff2f 	bl	800d25a <LL_ADC_IsEnabled>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f040 80a7 	bne.w	800d552 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	7e1b      	ldrb	r3, [r3, #24]
 800d40c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800d40e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	7e5b      	ldrb	r3, [r3, #25]
 800d414:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800d416:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7e9b      	ldrb	r3, [r3, #26]
 800d41c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800d41e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d424:	2a00      	cmp	r2, #0
 800d426:	d002      	beq.n	800d42e <HAL_ADC_Init+0x11a>
 800d428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d42c:	e000      	b.n	800d430 <HAL_ADC_Init+0x11c>
 800d42e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800d430:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800d436:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	691b      	ldr	r3, [r3, #16]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	da04      	bge.n	800d44a <HAL_ADC_Init+0x136>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	691b      	ldr	r3, [r3, #16]
 800d444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d448:	e001      	b.n	800d44e <HAL_ADC_Init+0x13a>
 800d44a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800d44e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d456:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800d458:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800d45a:	69ba      	ldr	r2, [r7, #24]
 800d45c:	4313      	orrs	r3, r2
 800d45e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d114      	bne.n	800d494 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	7e9b      	ldrb	r3, [r3, #26]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d104      	bne.n	800d47c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d478:	61bb      	str	r3, [r7, #24]
 800d47a:	e00b      	b.n	800d494 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d480:	f043 0220 	orr.w	r2, r3, #32
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d48c:	f043 0201 	orr.w	r2, r3, #1
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d009      	beq.n	800d4b0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	69ba      	ldr	r2, [r7, #24]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800d4ba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	6812      	ldr	r2, [r2, #0]
 800d4c2:	69b9      	ldr	r1, [r7, #24]
 800d4c4:	430b      	orrs	r3, r1
 800d4c6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	697a      	ldr	r2, [r7, #20]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d111      	bne.n	800d50a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800d4f2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800d4f8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800d4fe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	4313      	orrs	r3, r2
 800d504:	f043 0301 	orr.w	r3, r3, #1
 800d508:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	691a      	ldr	r2, [r3, #16]
 800d510:	4b38      	ldr	r3, [pc, #224]	; (800d5f4 <HAL_ADC_Init+0x2e0>)
 800d512:	4013      	ands	r3, r2
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	6812      	ldr	r2, [r2, #0]
 800d518:	6979      	ldr	r1, [r7, #20]
 800d51a:	430b      	orrs	r3, r1
 800d51c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800d526:	d014      	beq.n	800d552 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800d52c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d530:	d00f      	beq.n	800d552 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800d536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d53a:	d00a      	beq.n	800d552 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800d53c:	4b2e      	ldr	r3, [pc, #184]	; (800d5f8 <HAL_ADC_Init+0x2e4>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800d54c:	492a      	ldr	r1, [pc, #168]	; (800d5f8 <HAL_ADC_Init+0x2e4>)
 800d54e:	4313      	orrs	r3, r2
 800d550:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6818      	ldr	r0, [r3, #0]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55a:	461a      	mov	r2, r3
 800d55c:	2100      	movs	r1, #0
 800d55e:	f7ff fd86 	bl	800d06e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6818      	ldr	r0, [r3, #0]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d56a:	461a      	mov	r2, r3
 800d56c:	4923      	ldr	r1, [pc, #140]	; (800d5fc <HAL_ADC_Init+0x2e8>)
 800d56e:	f7ff fd7e 	bl	800d06e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d108      	bne.n	800d58c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f062 020f 	orn	r2, r2, #15
 800d588:	629a      	str	r2, [r3, #40]	; 0x28
 800d58a:	e017      	b.n	800d5bc <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d594:	d112      	bne.n	800d5bc <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	69db      	ldr	r3, [r3, #28]
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	f003 031c 	and.w	r3, r3, #28
 800d5a8:	f06f 020f 	mvn.w	r2, #15
 800d5ac:	fa02 f103 	lsl.w	r1, r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	430a      	orrs	r2, r1
 800d5ba:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff fd71 	bl	800d0aa <LL_ADC_GetSamplingTimeCommonChannels>
 800d5c8:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d116      	bne.n	800d600 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5dc:	f023 0303 	bic.w	r3, r3, #3
 800d5e0:	f043 0201 	orr.w	r2, r3, #1
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d5e8:	e023      	b.n	800d632 <HAL_ADC_Init+0x31e>
 800d5ea:	bf00      	nop
 800d5ec:	20000080 	.word	0x20000080
 800d5f0:	053e2d63 	.word	0x053e2d63
 800d5f4:	1ffffc02 	.word	0x1ffffc02
 800d5f8:	40012708 	.word	0x40012708
 800d5fc:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d604:	f023 0312 	bic.w	r3, r3, #18
 800d608:	f043 0210 	orr.w	r2, r3, #16
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d614:	f043 0201 	orr.w	r2, r3, #1
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800d620:	e007      	b.n	800d632 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d626:	f043 0210 	orr.w	r2, r3, #16
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d62e:	2301      	movs	r3, #1
 800d630:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800d632:	7ffb      	ldrb	r3, [r7, #31]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3720      	adds	r7, #32
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4618      	mov	r0, r3
 800d64a:	f7ff fe50 	bl	800d2ee <LL_ADC_REG_IsConversionOngoing>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d132      	bne.n	800d6ba <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d101      	bne.n	800d662 <HAL_ADC_Start+0x26>
 800d65e:	2302      	movs	r3, #2
 800d660:	e02e      	b.n	800d6c0 <HAL_ADC_Start+0x84>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2201      	movs	r2, #1
 800d666:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fa8a 	bl	800db84 <ADC_Enable>
 800d670:	4603      	mov	r3, r0
 800d672:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800d674:	7bfb      	ldrb	r3, [r7, #15]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d11a      	bne.n	800d6b0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d67e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d682:	f023 0301 	bic.w	r3, r3, #1
 800d686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	221c      	movs	r2, #28
 800d69a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff fdfa 	bl	800d2a2 <LL_ADC_REG_StartConversion>
 800d6ae:	e006      	b.n	800d6be <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800d6b8:	e001      	b.n	800d6be <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800d6ba:	2302      	movs	r3, #2
 800d6bc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800d6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d101      	bne.n	800d6de <HAL_ADC_Stop+0x16>
 800d6da:	2302      	movs	r3, #2
 800d6dc:	e022      	b.n	800d724 <HAL_ADC_Stop+0x5c>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 fa07 	bl	800dafa <ADC_ConversionStop>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d111      	bne.n	800d71a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 faca 	bl	800dc90 <ADC_Disable>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800d700:	7bfb      	ldrb	r3, [r7, #15]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d109      	bne.n	800d71a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d70a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d70e:	f023 0301 	bic.w	r3, r3, #1
 800d712:	f043 0201 	orr.w	r2, r3, #1
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800d722:	7bfb      	ldrb	r3, [r7, #15]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3710      	adds	r7, #16
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	695b      	ldr	r3, [r3, #20]
 800d73a:	2b08      	cmp	r3, #8
 800d73c:	d102      	bne.n	800d744 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800d73e:	2308      	movs	r3, #8
 800d740:	60fb      	str	r3, [r7, #12]
 800d742:	e010      	b.n	800d766 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d007      	beq.n	800d762 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d756:	f043 0220 	orr.w	r2, r3, #32
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	e077      	b.n	800d852 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800d762:	2304      	movs	r3, #4
 800d764:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800d766:	f7ff fc17 	bl	800cf98 <HAL_GetTick>
 800d76a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800d76c:	e021      	b.n	800d7b2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d774:	d01d      	beq.n	800d7b2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800d776:	f7ff fc0f 	bl	800cf98 <HAL_GetTick>
 800d77a:	4602      	mov	r2, r0
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	683a      	ldr	r2, [r7, #0]
 800d782:	429a      	cmp	r2, r3
 800d784:	d302      	bcc.n	800d78c <HAL_ADC_PollForConversion+0x60>
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d112      	bne.n	800d7b2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	4013      	ands	r3, r2
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10b      	bne.n	800d7b2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d79e:	f043 0204 	orr.w	r2, r3, #4
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	e04f      	b.n	800d852 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d0d6      	beq.n	800d76e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff fc82 	bl	800d0da <LL_ADC_REG_IsTriggerSourceSWStart>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d031      	beq.n	800d840 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7e9b      	ldrb	r3, [r3, #26]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d12d      	bne.n	800d840 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f003 0308 	and.w	r3, r3, #8
 800d7ee:	2b08      	cmp	r3, #8
 800d7f0:	d126      	bne.n	800d840 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7ff fd79 	bl	800d2ee <LL_ADC_REG_IsConversionOngoing>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d112      	bne.n	800d828 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	685a      	ldr	r2, [r3, #4]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f022 020c 	bic.w	r2, r2, #12
 800d810:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d81a:	f023 0301 	bic.w	r3, r3, #1
 800d81e:	f043 0201 	orr.w	r2, r3, #1
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	659a      	str	r2, [r3, #88]	; 0x58
 800d826:	e00b      	b.n	800d840 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d82c:	f043 0220 	orr.w	r2, r3, #32
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d838:	f043 0201 	orr.w	r2, r3, #1
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	7e1b      	ldrb	r3, [r3, #24]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d103      	bne.n	800d850 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	220c      	movs	r2, #12
 800d84e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800d85a:	b480      	push	{r7}
 800d85c:	b083      	sub	sp, #12
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800d868:	4618      	mov	r0, r3
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bc80      	pop	{r7}
 800d870:	4770      	bx	lr
	...

0800d874 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800d882:	2300      	movs	r3, #0
 800d884:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800d894:	2b01      	cmp	r3, #1
 800d896:	d101      	bne.n	800d89c <HAL_ADC_ConfigChannel+0x28>
 800d898:	2302      	movs	r3, #2
 800d89a:	e110      	b.n	800dabe <HAL_ADC_ConfigChannel+0x24a>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7ff fd20 	bl	800d2ee <LL_ADC_REG_IsConversionOngoing>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f040 80f7 	bne.w	800daa4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	2b02      	cmp	r3, #2
 800d8bc:	f000 80b1 	beq.w	800da22 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8c8:	d004      	beq.n	800d8d4 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d8ce:	4a7e      	ldr	r2, [pc, #504]	; (800dac8 <HAL_ADC_ConfigChannel+0x254>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d108      	bne.n	800d8e6 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4619      	mov	r1, r3
 800d8de:	4610      	mov	r0, r2
 800d8e0:	f7ff fc2e 	bl	800d140 <LL_ADC_REG_SetSequencerChAdd>
 800d8e4:	e041      	b.n	800d96a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	f003 031f 	and.w	r3, r3, #31
 800d8f2:	210f      	movs	r1, #15
 800d8f4:	fa01 f303 	lsl.w	r3, r1, r3
 800d8f8:	43db      	mvns	r3, r3
 800d8fa:	401a      	ands	r2, r3
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800d904:	2b00      	cmp	r3, #0
 800d906:	d105      	bne.n	800d914 <HAL_ADC_ConfigChannel+0xa0>
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	0e9b      	lsrs	r3, r3, #26
 800d90e:	f003 031f 	and.w	r3, r3, #31
 800d912:	e011      	b.n	800d938 <HAL_ADC_ConfigChannel+0xc4>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	fa93 f3a3 	rbit	r3, r3
 800d920:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d101      	bne.n	800d930 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800d92c:	2320      	movs	r3, #32
 800d92e:	e003      	b.n	800d938 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	fab3 f383 	clz	r3, r3
 800d936:	b2db      	uxtb	r3, r3
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	6849      	ldr	r1, [r1, #4]
 800d93c:	f001 011f 	and.w	r1, r1, #31
 800d940:	408b      	lsls	r3, r1
 800d942:	431a      	orrs	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	089b      	lsrs	r3, r3, #2
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	69db      	ldr	r3, [r3, #28]
 800d954:	429a      	cmp	r2, r3
 800d956:	d808      	bhi.n	800d96a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6818      	ldr	r0, [r3, #0]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	6859      	ldr	r1, [r3, #4]
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	461a      	mov	r2, r3
 800d966:	f7ff fbca 	bl	800d0fe <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6818      	ldr	r0, [r3, #0]
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	6819      	ldr	r1, [r3, #0]
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	461a      	mov	r2, r3
 800d978:	f7ff fc07 	bl	800d18a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	f280 8097 	bge.w	800dab4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d986:	4851      	ldr	r0, [pc, #324]	; (800dacc <HAL_ADC_ConfigChannel+0x258>)
 800d988:	f7ff fb64 	bl	800d054 <LL_ADC_GetCommonPathInternalCh>
 800d98c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a4f      	ldr	r2, [pc, #316]	; (800dad0 <HAL_ADC_ConfigChannel+0x25c>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d120      	bne.n	800d9da <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d11b      	bne.n	800d9da <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	4848      	ldr	r0, [pc, #288]	; (800dacc <HAL_ADC_ConfigChannel+0x258>)
 800d9ac:	f7ff fb40 	bl	800d030 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d9b0:	4b48      	ldr	r3, [pc, #288]	; (800dad4 <HAL_ADC_ConfigChannel+0x260>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	099b      	lsrs	r3, r3, #6
 800d9b6:	4a48      	ldr	r2, [pc, #288]	; (800dad8 <HAL_ADC_ConfigChannel+0x264>)
 800d9b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d9bc:	099b      	lsrs	r3, r3, #6
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	005b      	lsls	r3, r3, #1
 800d9c4:	4413      	add	r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800d9ca:	e002      	b.n	800d9d2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1f9      	bne.n	800d9cc <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d9d8:	e06c      	b.n	800dab4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a3f      	ldr	r2, [pc, #252]	; (800dadc <HAL_ADC_ConfigChannel+0x268>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d10c      	bne.n	800d9fe <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d107      	bne.n	800d9fe <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	4835      	ldr	r0, [pc, #212]	; (800dacc <HAL_ADC_ConfigChannel+0x258>)
 800d9f8:	f7ff fb1a 	bl	800d030 <LL_ADC_SetCommonPathInternalCh>
 800d9fc:	e05a      	b.n	800dab4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a37      	ldr	r2, [pc, #220]	; (800dae0 <HAL_ADC_ConfigChannel+0x26c>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d155      	bne.n	800dab4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d150      	bne.n	800dab4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da18:	4619      	mov	r1, r3
 800da1a:	482c      	ldr	r0, [pc, #176]	; (800dacc <HAL_ADC_ConfigChannel+0x258>)
 800da1c:	f7ff fb08 	bl	800d030 <LL_ADC_SetCommonPathInternalCh>
 800da20:	e048      	b.n	800dab4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da2a:	d004      	beq.n	800da36 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800da30:	4a25      	ldr	r2, [pc, #148]	; (800dac8 <HAL_ADC_ConfigChannel+0x254>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d107      	bne.n	800da46 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4619      	mov	r1, r3
 800da40:	4610      	mov	r0, r2
 800da42:	f7ff fb8f 	bl	800d164 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	da32      	bge.n	800dab4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800da4e:	481f      	ldr	r0, [pc, #124]	; (800dacc <HAL_ADC_ConfigChannel+0x258>)
 800da50:	f7ff fb00 	bl	800d054 <LL_ADC_GetCommonPathInternalCh>
 800da54:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a1d      	ldr	r2, [pc, #116]	; (800dad0 <HAL_ADC_ConfigChannel+0x25c>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d107      	bne.n	800da70 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800da66:	4619      	mov	r1, r3
 800da68:	4818      	ldr	r0, [pc, #96]	; (800dacc <HAL_ADC_ConfigChannel+0x258>)
 800da6a:	f7ff fae1 	bl	800d030 <LL_ADC_SetCommonPathInternalCh>
 800da6e:	e021      	b.n	800dab4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a19      	ldr	r2, [pc, #100]	; (800dadc <HAL_ADC_ConfigChannel+0x268>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d107      	bne.n	800da8a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da80:	4619      	mov	r1, r3
 800da82:	4812      	ldr	r0, [pc, #72]	; (800dacc <HAL_ADC_ConfigChannel+0x258>)
 800da84:	f7ff fad4 	bl	800d030 <LL_ADC_SetCommonPathInternalCh>
 800da88:	e014      	b.n	800dab4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a14      	ldr	r2, [pc, #80]	; (800dae0 <HAL_ADC_ConfigChannel+0x26c>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d10f      	bne.n	800dab4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800da9a:	4619      	mov	r1, r3
 800da9c:	480b      	ldr	r0, [pc, #44]	; (800dacc <HAL_ADC_ConfigChannel+0x258>)
 800da9e:	f7ff fac7 	bl	800d030 <LL_ADC_SetCommonPathInternalCh>
 800daa2:	e007      	b.n	800dab4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daa8:	f043 0220 	orr.w	r2, r3, #32
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800dab0:	2301      	movs	r3, #1
 800dab2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800dabc:	7ffb      	ldrb	r3, [r7, #31]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3720      	adds	r7, #32
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	80000004 	.word	0x80000004
 800dacc:	40012708 	.word	0x40012708
 800dad0:	b0001000 	.word	0xb0001000
 800dad4:	20000080 	.word	0x20000080
 800dad8:	053e2d63 	.word	0x053e2d63
 800dadc:	b8004000 	.word	0xb8004000
 800dae0:	b4002000 	.word	0xb4002000

0800dae4 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bc80      	pop	{r7}
 800daf8:	4770      	bx	lr

0800dafa <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b084      	sub	sp, #16
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff fbf1 	bl	800d2ee <LL_ADC_REG_IsConversionOngoing>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d033      	beq.n	800db7a <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff fbb1 	bl	800d27e <LL_ADC_IsDisableOngoing>
 800db1c:	4603      	mov	r3, r0
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d104      	bne.n	800db2c <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4618      	mov	r0, r3
 800db28:	f7ff fbce 	bl	800d2c8 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800db2c:	f7ff fa34 	bl	800cf98 <HAL_GetTick>
 800db30:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800db32:	e01b      	b.n	800db6c <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800db34:	f7ff fa30 	bl	800cf98 <HAL_GetTick>
 800db38:	4602      	mov	r2, r0
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d914      	bls.n	800db6c <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	f003 0304 	and.w	r3, r3, #4
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00d      	beq.n	800db6c <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db54:	f043 0210 	orr.w	r2, r3, #16
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db60:	f043 0201 	orr.w	r2, r3, #1
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800db68:	2301      	movs	r3, #1
 800db6a:	e007      	b.n	800db7c <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	689b      	ldr	r3, [r3, #8]
 800db72:	f003 0304 	and.w	r3, r3, #4
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1dc      	bne.n	800db34 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800db7a:	2300      	movs	r3, #0
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800db8c:	2300      	movs	r3, #0
 800db8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4618      	mov	r0, r3
 800db96:	f7ff fb60 	bl	800d25a <LL_ADC_IsEnabled>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d169      	bne.n	800dc74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	689a      	ldr	r2, [r3, #8]
 800dba6:	4b36      	ldr	r3, [pc, #216]	; (800dc80 <ADC_Enable+0xfc>)
 800dba8:	4013      	ands	r3, r2
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00d      	beq.n	800dbca <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbb2:	f043 0210 	orr.w	r2, r3, #16
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbbe:	f043 0201 	orr.w	r2, r3, #1
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e055      	b.n	800dc76 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff fb1d 	bl	800d20e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800dbd4:	482b      	ldr	r0, [pc, #172]	; (800dc84 <ADC_Enable+0x100>)
 800dbd6:	f7ff fa3d 	bl	800d054 <LL_ADC_GetCommonPathInternalCh>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d00f      	beq.n	800dc04 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800dbe4:	4b28      	ldr	r3, [pc, #160]	; (800dc88 <ADC_Enable+0x104>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	099b      	lsrs	r3, r3, #6
 800dbea:	4a28      	ldr	r2, [pc, #160]	; (800dc8c <ADC_Enable+0x108>)
 800dbec:	fba2 2303 	umull	r2, r3, r2, r3
 800dbf0:	099b      	lsrs	r3, r3, #6
 800dbf2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800dbf4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800dbf6:	e002      	b.n	800dbfe <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1f9      	bne.n	800dbf8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	7e5b      	ldrb	r3, [r3, #25]
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d033      	beq.n	800dc74 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800dc0c:	f7ff f9c4 	bl	800cf98 <HAL_GetTick>
 800dc10:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dc12:	e028      	b.n	800dc66 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff fb1e 	bl	800d25a <LL_ADC_IsEnabled>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d104      	bne.n	800dc2e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7ff faf0 	bl	800d20e <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800dc2e:	f7ff f9b3 	bl	800cf98 <HAL_GetTick>
 800dc32:	4602      	mov	r2, r0
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	d914      	bls.n	800dc66 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f003 0301 	and.w	r3, r3, #1
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d00d      	beq.n	800dc66 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc4e:	f043 0210 	orr.w	r2, r3, #16
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc5a:	f043 0201 	orr.w	r2, r3, #1
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	e007      	b.n	800dc76 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f003 0301 	and.w	r3, r3, #1
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d1cf      	bne.n	800dc14 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	80000017 	.word	0x80000017
 800dc84:	40012708 	.word	0x40012708
 800dc88:	20000080 	.word	0x20000080
 800dc8c:	053e2d63 	.word	0x053e2d63

0800dc90 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7ff faee 	bl	800d27e <LL_ADC_IsDisableOngoing>
 800dca2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7ff fad6 	bl	800d25a <LL_ADC_IsEnabled>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d047      	beq.n	800dd44 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d144      	bne.n	800dd44 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	689b      	ldr	r3, [r3, #8]
 800dcc0:	f003 0305 	and.w	r3, r3, #5
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d10c      	bne.n	800dce2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7ff fab1 	bl	800d234 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2203      	movs	r2, #3
 800dcd8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800dcda:	f7ff f95d 	bl	800cf98 <HAL_GetTick>
 800dcde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dce0:	e029      	b.n	800dd36 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dce6:	f043 0210 	orr.w	r2, r3, #16
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcf2:	f043 0201 	orr.w	r2, r3, #1
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e023      	b.n	800dd46 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800dcfe:	f7ff f94b 	bl	800cf98 <HAL_GetTick>
 800dd02:	4602      	mov	r2, r0
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	2b02      	cmp	r3, #2
 800dd0a:	d914      	bls.n	800dd36 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	f003 0301 	and.w	r3, r3, #1
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00d      	beq.n	800dd36 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd1e:	f043 0210 	orr.w	r2, r3, #16
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd2a:	f043 0201 	orr.w	r2, r3, #1
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	e007      	b.n	800dd46 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	f003 0301 	and.w	r3, r3, #1
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1dc      	bne.n	800dcfe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3710      	adds	r7, #16
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <LL_ADC_SetCalibrationFactor>:
{
 800dd4e:	b480      	push	{r7}
 800dd50:	b083      	sub	sp, #12
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dd5e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	431a      	orrs	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 800dd6c:	bf00      	nop
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bc80      	pop	{r7}
 800dd74:	4770      	bx	lr

0800dd76 <LL_ADC_GetCalibrationFactor>:
{
 800dd76:	b480      	push	{r7}
 800dd78:	b083      	sub	sp, #12
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dd84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bc80      	pop	{r7}
 800dd90:	4770      	bx	lr

0800dd92 <LL_ADC_Enable>:
{
 800dd92:	b480      	push	{r7}
 800dd94:	b083      	sub	sp, #12
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dda2:	f023 0317 	bic.w	r3, r3, #23
 800dda6:	f043 0201 	orr.w	r2, r3, #1
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	609a      	str	r2, [r3, #8]
}
 800ddae:	bf00      	nop
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bc80      	pop	{r7}
 800ddb6:	4770      	bx	lr

0800ddb8 <LL_ADC_Disable>:
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddc8:	f023 0317 	bic.w	r3, r3, #23
 800ddcc:	f043 0202 	orr.w	r2, r3, #2
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	609a      	str	r2, [r3, #8]
}
 800ddd4:	bf00      	nop
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bc80      	pop	{r7}
 800dddc:	4770      	bx	lr

0800ddde <LL_ADC_IsEnabled>:
{
 800ddde:	b480      	push	{r7}
 800dde0:	b083      	sub	sp, #12
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	f003 0301 	and.w	r3, r3, #1
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d101      	bne.n	800ddf6 <LL_ADC_IsEnabled+0x18>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e000      	b.n	800ddf8 <LL_ADC_IsEnabled+0x1a>
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bc80      	pop	{r7}
 800de00:	4770      	bx	lr

0800de02 <LL_ADC_StartCalibration>:
{
 800de02:	b480      	push	{r7}
 800de04:	b083      	sub	sp, #12
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de12:	f023 0317 	bic.w	r3, r3, #23
 800de16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	609a      	str	r2, [r3, #8]
}
 800de1e:	bf00      	nop
 800de20:	370c      	adds	r7, #12
 800de22:	46bd      	mov	sp, r7
 800de24:	bc80      	pop	{r7}
 800de26:	4770      	bx	lr

0800de28 <LL_ADC_IsCalibrationOnGoing>:
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de3c:	d101      	bne.n	800de42 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800de3e:	2301      	movs	r3, #1
 800de40:	e000      	b.n	800de44 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	bc80      	pop	{r7}
 800de4c:	4770      	bx	lr

0800de4e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b088      	sub	sp, #32
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800de56:	2300      	movs	r3, #0
 800de58:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800de5a:	2300      	movs	r3, #0
 800de5c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800de64:	2b01      	cmp	r3, #1
 800de66:	d101      	bne.n	800de6c <HAL_ADCEx_Calibration_Start+0x1e>
 800de68:	2302      	movs	r3, #2
 800de6a:	e0b9      	b.n	800dfe0 <HAL_ADCEx_Calibration_Start+0x192>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2201      	movs	r2, #1
 800de70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f7ff ff0b 	bl	800dc90 <ADC_Disable>
 800de7a:	4603      	mov	r3, r0
 800de7c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff ffab 	bl	800ddde <LL_ADC_IsEnabled>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f040 809d 	bne.w	800dfca <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800de98:	f043 0202 	orr.w	r2, r3, #2
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	68da      	ldr	r2, [r3, #12]
 800dea6:	f248 0303 	movw	r3, #32771	; 0x8003
 800deaa:	4013      	ands	r3, r2
 800deac:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	6812      	ldr	r2, [r2, #0]
 800deb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800debc:	f023 0303 	bic.w	r3, r3, #3
 800dec0:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800dec2:	2300      	movs	r3, #0
 800dec4:	61fb      	str	r3, [r7, #28]
 800dec6:	e02e      	b.n	800df26 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4618      	mov	r0, r3
 800dece:	f7ff ff98 	bl	800de02 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ded2:	e014      	b.n	800defe <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	3301      	adds	r3, #1
 800ded8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800dee0:	d30d      	bcc.n	800defe <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dee6:	f023 0312 	bic.w	r3, r3, #18
 800deea:	f043 0210 	orr.w	r2, r3, #16
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800defa:	2301      	movs	r3, #1
 800defc:	e070      	b.n	800dfe0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4618      	mov	r0, r3
 800df04:	f7ff ff90 	bl	800de28 <LL_ADC_IsCalibrationOnGoing>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d1e2      	bne.n	800ded4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4618      	mov	r0, r3
 800df14:	f7ff ff2f 	bl	800dd76 <LL_ADC_GetCalibrationFactor>
 800df18:	4602      	mov	r2, r0
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	4413      	add	r3, r2
 800df1e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	3301      	adds	r3, #1
 800df24:	61fb      	str	r3, [r7, #28]
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	2b07      	cmp	r3, #7
 800df2a:	d9cd      	bls.n	800dec8 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800df2c:	69ba      	ldr	r2, [r7, #24]
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	fbb2 f3f3 	udiv	r3, r2, r3
 800df34:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff ff29 	bl	800dd92 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	69b9      	ldr	r1, [r7, #24]
 800df46:	4618      	mov	r0, r3
 800df48:	f7ff ff01 	bl	800dd4e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4618      	mov	r0, r3
 800df52:	f7ff ff31 	bl	800ddb8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800df56:	f7ff f81f 	bl	800cf98 <HAL_GetTick>
 800df5a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800df5c:	e01c      	b.n	800df98 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800df5e:	f7ff f81b 	bl	800cf98 <HAL_GetTick>
 800df62:	4602      	mov	r2, r0
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	2b02      	cmp	r3, #2
 800df6a:	d915      	bls.n	800df98 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4618      	mov	r0, r3
 800df72:	f7ff ff34 	bl	800ddde <LL_ADC_IsEnabled>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00d      	beq.n	800df98 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df80:	f043 0210 	orr.w	r2, r3, #16
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df8c:	f043 0201 	orr.w	r2, r3, #1
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800df94:	2301      	movs	r3, #1
 800df96:	e023      	b.n	800dfe0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7ff ff1e 	bl	800ddde <LL_ADC_IsEnabled>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1da      	bne.n	800df5e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68d9      	ldr	r1, [r3, #12]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	693a      	ldr	r2, [r7, #16]
 800dfb4:	430a      	orrs	r2, r1
 800dfb6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfbc:	f023 0303 	bic.w	r3, r3, #3
 800dfc0:	f043 0201 	orr.w	r2, r3, #1
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	659a      	str	r2, [r3, #88]	; 0x58
 800dfc8:	e005      	b.n	800dfd6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfce:	f043 0210 	orr.w	r2, r3, #16
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800dfde:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3720      	adds	r7, #32
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <__NVIC_SetPriorityGrouping>:
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f003 0307 	and.w	r3, r3, #7
 800dff6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dff8:	4b0c      	ldr	r3, [pc, #48]	; (800e02c <__NVIC_SetPriorityGrouping+0x44>)
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e004:	4013      	ands	r3, r2
 800e006:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e01a:	4a04      	ldr	r2, [pc, #16]	; (800e02c <__NVIC_SetPriorityGrouping+0x44>)
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	60d3      	str	r3, [r2, #12]
}
 800e020:	bf00      	nop
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	bc80      	pop	{r7}
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop
 800e02c:	e000ed00 	.word	0xe000ed00

0800e030 <__NVIC_GetPriorityGrouping>:
{
 800e030:	b480      	push	{r7}
 800e032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e034:	4b04      	ldr	r3, [pc, #16]	; (800e048 <__NVIC_GetPriorityGrouping+0x18>)
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	0a1b      	lsrs	r3, r3, #8
 800e03a:	f003 0307 	and.w	r3, r3, #7
}
 800e03e:	4618      	mov	r0, r3
 800e040:	46bd      	mov	sp, r7
 800e042:	bc80      	pop	{r7}
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	e000ed00 	.word	0xe000ed00

0800e04c <__NVIC_EnableIRQ>:
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	4603      	mov	r3, r0
 800e054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	db0b      	blt.n	800e076 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e05e:	79fb      	ldrb	r3, [r7, #7]
 800e060:	f003 021f 	and.w	r2, r3, #31
 800e064:	4906      	ldr	r1, [pc, #24]	; (800e080 <__NVIC_EnableIRQ+0x34>)
 800e066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e06a:	095b      	lsrs	r3, r3, #5
 800e06c:	2001      	movs	r0, #1
 800e06e:	fa00 f202 	lsl.w	r2, r0, r2
 800e072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e076:	bf00      	nop
 800e078:	370c      	adds	r7, #12
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bc80      	pop	{r7}
 800e07e:	4770      	bx	lr
 800e080:	e000e100 	.word	0xe000e100

0800e084 <__NVIC_DisableIRQ>:
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	4603      	mov	r3, r0
 800e08c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e08e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e092:	2b00      	cmp	r3, #0
 800e094:	db12      	blt.n	800e0bc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e096:	79fb      	ldrb	r3, [r7, #7]
 800e098:	f003 021f 	and.w	r2, r3, #31
 800e09c:	490a      	ldr	r1, [pc, #40]	; (800e0c8 <__NVIC_DisableIRQ+0x44>)
 800e09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0a2:	095b      	lsrs	r3, r3, #5
 800e0a4:	2001      	movs	r0, #1
 800e0a6:	fa00 f202 	lsl.w	r2, r0, r2
 800e0aa:	3320      	adds	r3, #32
 800e0ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800e0b0:	f3bf 8f4f 	dsb	sy
}
 800e0b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e0b6:	f3bf 8f6f 	isb	sy
}
 800e0ba:	bf00      	nop
}
 800e0bc:	bf00      	nop
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bc80      	pop	{r7}
 800e0c4:	4770      	bx	lr
 800e0c6:	bf00      	nop
 800e0c8:	e000e100 	.word	0xe000e100

0800e0cc <__NVIC_SetPriority>:
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	6039      	str	r1, [r7, #0]
 800e0d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e0d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	db0a      	blt.n	800e0f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	b2da      	uxtb	r2, r3
 800e0e4:	490c      	ldr	r1, [pc, #48]	; (800e118 <__NVIC_SetPriority+0x4c>)
 800e0e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e0ea:	0112      	lsls	r2, r2, #4
 800e0ec:	b2d2      	uxtb	r2, r2
 800e0ee:	440b      	add	r3, r1
 800e0f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e0f4:	e00a      	b.n	800e10c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	b2da      	uxtb	r2, r3
 800e0fa:	4908      	ldr	r1, [pc, #32]	; (800e11c <__NVIC_SetPriority+0x50>)
 800e0fc:	79fb      	ldrb	r3, [r7, #7]
 800e0fe:	f003 030f 	and.w	r3, r3, #15
 800e102:	3b04      	subs	r3, #4
 800e104:	0112      	lsls	r2, r2, #4
 800e106:	b2d2      	uxtb	r2, r2
 800e108:	440b      	add	r3, r1
 800e10a:	761a      	strb	r2, [r3, #24]
}
 800e10c:	bf00      	nop
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	bc80      	pop	{r7}
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	e000e100 	.word	0xe000e100
 800e11c:	e000ed00 	.word	0xe000ed00

0800e120 <NVIC_EncodePriority>:
{
 800e120:	b480      	push	{r7}
 800e122:	b089      	sub	sp, #36	; 0x24
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f003 0307 	and.w	r3, r3, #7
 800e132:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	f1c3 0307 	rsb	r3, r3, #7
 800e13a:	2b04      	cmp	r3, #4
 800e13c:	bf28      	it	cs
 800e13e:	2304      	movcs	r3, #4
 800e140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	3304      	adds	r3, #4
 800e146:	2b06      	cmp	r3, #6
 800e148:	d902      	bls.n	800e150 <NVIC_EncodePriority+0x30>
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	3b03      	subs	r3, #3
 800e14e:	e000      	b.n	800e152 <NVIC_EncodePriority+0x32>
 800e150:	2300      	movs	r3, #0
 800e152:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e154:	f04f 32ff 	mov.w	r2, #4294967295
 800e158:	69bb      	ldr	r3, [r7, #24]
 800e15a:	fa02 f303 	lsl.w	r3, r2, r3
 800e15e:	43da      	mvns	r2, r3
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	401a      	ands	r2, r3
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e168:	f04f 31ff 	mov.w	r1, #4294967295
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	fa01 f303 	lsl.w	r3, r1, r3
 800e172:	43d9      	mvns	r1, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e178:	4313      	orrs	r3, r2
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3724      	adds	r7, #36	; 0x24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bc80      	pop	{r7}
 800e182:	4770      	bx	lr

0800e184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff ff2b 	bl	800dfe8 <__NVIC_SetPriorityGrouping>
}
 800e192:	bf00      	nop
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b086      	sub	sp, #24
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	60b9      	str	r1, [r7, #8]
 800e1a4:	607a      	str	r2, [r7, #4]
 800e1a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800e1a8:	f7ff ff42 	bl	800e030 <__NVIC_GetPriorityGrouping>
 800e1ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	68b9      	ldr	r1, [r7, #8]
 800e1b2:	6978      	ldr	r0, [r7, #20]
 800e1b4:	f7ff ffb4 	bl	800e120 <NVIC_EncodePriority>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1be:	4611      	mov	r1, r2
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f7ff ff83 	bl	800e0cc <__NVIC_SetPriority>
}
 800e1c6:	bf00      	nop
 800e1c8:	3718      	adds	r7, #24
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b082      	sub	sp, #8
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e1d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff ff35 	bl	800e04c <__NVIC_EnableIRQ>
}
 800e1e2:	bf00      	nop
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b082      	sub	sp, #8
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800e1f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7ff ff43 	bl	800e084 <__NVIC_DisableIRQ>
}
 800e1fe:	bf00      	nop
 800e200:	3708      	adds	r7, #8
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e206:	b480      	push	{r7}
 800e208:	b083      	sub	sp, #12
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d101      	bne.n	800e218 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800e214:	2301      	movs	r3, #1
 800e216:	e04f      	b.n	800e2b8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	2b02      	cmp	r3, #2
 800e222:	d008      	beq.n	800e236 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2204      	movs	r2, #4
 800e228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2200      	movs	r2, #0
 800e22e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	e040      	b.n	800e2b8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f022 020e 	bic.w	r2, r2, #14
 800e244:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e254:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f022 0201 	bic.w	r2, r2, #1
 800e264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e26a:	f003 021c 	and.w	r2, r3, #28
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e272:	2101      	movs	r1, #1
 800e274:	fa01 f202 	lsl.w	r2, r1, r2
 800e278:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e282:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00c      	beq.n	800e2a6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e296:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e29a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e2a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bc80      	pop	{r7}
 800e2c0:	4770      	bx	lr

0800e2c2 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b084      	sub	sp, #16
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	2b02      	cmp	r3, #2
 800e2d8:	d005      	beq.n	800e2e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2204      	movs	r2, #4
 800e2de:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	73fb      	strb	r3, [r7, #15]
 800e2e4:	e047      	b.n	800e376 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f022 020e 	bic.w	r2, r2, #14
 800e2f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f022 0201 	bic.w	r2, r2, #1
 800e304:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e314:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e31a:	f003 021c 	and.w	r2, r3, #28
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e322:	2101      	movs	r1, #1
 800e324:	fa01 f202 	lsl.w	r2, r1, r2
 800e328:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e332:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00c      	beq.n	800e356 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e34a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e354:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2201      	movs	r2, #1
 800e35a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2200      	movs	r2, #0
 800e362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d003      	beq.n	800e376 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	4798      	blx	r3
    }
  }
  return status;
 800e376:	7bfb      	ldrb	r3, [r7, #15]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b086      	sub	sp, #24
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e38e:	4b1c      	ldr	r3, [pc, #112]	; (800e400 <HAL_FLASH_Program+0x80>)
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	2b01      	cmp	r3, #1
 800e394:	d101      	bne.n	800e39a <HAL_FLASH_Program+0x1a>
 800e396:	2302      	movs	r3, #2
 800e398:	e02d      	b.n	800e3f6 <HAL_FLASH_Program+0x76>
 800e39a:	4b19      	ldr	r3, [pc, #100]	; (800e400 <HAL_FLASH_Program+0x80>)
 800e39c:	2201      	movs	r2, #1
 800e39e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e3a0:	4b17      	ldr	r3, [pc, #92]	; (800e400 <HAL_FLASH_Program+0x80>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e3a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e3aa:	f000 f869 	bl	800e480 <FLASH_WaitForLastOperation>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800e3b2:	7dfb      	ldrb	r3, [r7, #23]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d11a      	bne.n	800e3ee <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d105      	bne.n	800e3ca <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800e3be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3c2:	68b8      	ldr	r0, [r7, #8]
 800e3c4:	f000 f8be 	bl	800e544 <FLASH_Program_DoubleWord>
 800e3c8:	e004      	b.n	800e3d4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	68b8      	ldr	r0, [r7, #8]
 800e3d0:	f000 f8de 	bl	800e590 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e3d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e3d8:	f000 f852 	bl	800e480 <FLASH_WaitForLastOperation>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800e3e0:	4b08      	ldr	r3, [pc, #32]	; (800e404 <HAL_FLASH_Program+0x84>)
 800e3e2:	695a      	ldr	r2, [r3, #20]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	43db      	mvns	r3, r3
 800e3e8:	4906      	ldr	r1, [pc, #24]	; (800e404 <HAL_FLASH_Program+0x84>)
 800e3ea:	4013      	ands	r3, r2
 800e3ec:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e3ee:	4b04      	ldr	r3, [pc, #16]	; (800e400 <HAL_FLASH_Program+0x80>)
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800e3f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3718      	adds	r7, #24
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	200020b0 	.word	0x200020b0
 800e404:	58004000 	.word	0x58004000

0800e408 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e40e:	2300      	movs	r3, #0
 800e410:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e412:	4b0b      	ldr	r3, [pc, #44]	; (800e440 <HAL_FLASH_Unlock+0x38>)
 800e414:	695b      	ldr	r3, [r3, #20]
 800e416:	2b00      	cmp	r3, #0
 800e418:	da0b      	bge.n	800e432 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e41a:	4b09      	ldr	r3, [pc, #36]	; (800e440 <HAL_FLASH_Unlock+0x38>)
 800e41c:	4a09      	ldr	r2, [pc, #36]	; (800e444 <HAL_FLASH_Unlock+0x3c>)
 800e41e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e420:	4b07      	ldr	r3, [pc, #28]	; (800e440 <HAL_FLASH_Unlock+0x38>)
 800e422:	4a09      	ldr	r2, [pc, #36]	; (800e448 <HAL_FLASH_Unlock+0x40>)
 800e424:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800e426:	4b06      	ldr	r3, [pc, #24]	; (800e440 <HAL_FLASH_Unlock+0x38>)
 800e428:	695b      	ldr	r3, [r3, #20]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	da01      	bge.n	800e432 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e42e:	2301      	movs	r3, #1
 800e430:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e432:	79fb      	ldrb	r3, [r7, #7]
}
 800e434:	4618      	mov	r0, r3
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	bc80      	pop	{r7}
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	58004000 	.word	0x58004000
 800e444:	45670123 	.word	0x45670123
 800e448:	cdef89ab 	.word	0xcdef89ab

0800e44c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800e456:	4b09      	ldr	r3, [pc, #36]	; (800e47c <HAL_FLASH_Lock+0x30>)
 800e458:	695b      	ldr	r3, [r3, #20]
 800e45a:	4a08      	ldr	r2, [pc, #32]	; (800e47c <HAL_FLASH_Lock+0x30>)
 800e45c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e460:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800e462:	4b06      	ldr	r3, [pc, #24]	; (800e47c <HAL_FLASH_Lock+0x30>)
 800e464:	695b      	ldr	r3, [r3, #20]
 800e466:	2b00      	cmp	r3, #0
 800e468:	db01      	blt.n	800e46e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800e46a:	2301      	movs	r3, #1
 800e46c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e46e:	79fb      	ldrb	r3, [r7, #7]
}
 800e470:	4618      	mov	r0, r3
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	bc80      	pop	{r7}
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	58004000 	.word	0x58004000

0800e480 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800e488:	f7fe fd86 	bl	800cf98 <HAL_GetTick>
 800e48c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e48e:	e009      	b.n	800e4a4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e490:	f7fe fd82 	bl	800cf98 <HAL_GetTick>
 800e494:	4602      	mov	r2, r0
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d801      	bhi.n	800e4a4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800e4a0:	2303      	movs	r3, #3
 800e4a2:	e047      	b.n	800e534 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800e4a4:	4b25      	ldr	r3, [pc, #148]	; (800e53c <FLASH_WaitForLastOperation+0xbc>)
 800e4a6:	691b      	ldr	r3, [r3, #16]
 800e4a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4b0:	d0ee      	beq.n	800e490 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800e4b2:	4b22      	ldr	r3, [pc, #136]	; (800e53c <FLASH_WaitForLastOperation+0xbc>)
 800e4b4:	691b      	ldr	r3, [r3, #16]
 800e4b6:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	f003 0301 	and.w	r3, r3, #1
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d002      	beq.n	800e4c8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e4c2:	4b1e      	ldr	r3, [pc, #120]	; (800e53c <FLASH_WaitForLastOperation+0xbc>)
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800e4c8:	68ba      	ldr	r2, [r7, #8]
 800e4ca:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d007      	beq.n	800e4ec <FLASH_WaitForLastOperation+0x6c>
 800e4dc:	4b17      	ldr	r3, [pc, #92]	; (800e53c <FLASH_WaitForLastOperation+0xbc>)
 800e4de:	699a      	ldr	r2, [r3, #24]
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800e4e6:	4915      	ldr	r1, [pc, #84]	; (800e53c <FLASH_WaitForLastOperation+0xbc>)
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	618b      	str	r3, [r1, #24]
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d004      	beq.n	800e500 <FLASH_WaitForLastOperation+0x80>
 800e4f6:	4a11      	ldr	r2, [pc, #68]	; (800e53c <FLASH_WaitForLastOperation+0xbc>)
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800e4fe:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00e      	beq.n	800e524 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800e506:	4a0e      	ldr	r2, [pc, #56]	; (800e540 <FLASH_WaitForLastOperation+0xc0>)
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800e50c:	2301      	movs	r3, #1
 800e50e:	e011      	b.n	800e534 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800e510:	f7fe fd42 	bl	800cf98 <HAL_GetTick>
 800e514:	4602      	mov	r2, r0
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d801      	bhi.n	800e524 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 800e520:	2303      	movs	r3, #3
 800e522:	e007      	b.n	800e534 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800e524:	4b05      	ldr	r3, [pc, #20]	; (800e53c <FLASH_WaitForLastOperation+0xbc>)
 800e526:	691b      	ldr	r3, [r3, #16]
 800e528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e52c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e530:	d0ee      	beq.n	800e510 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800e532:	2300      	movs	r3, #0
}
 800e534:	4618      	mov	r0, r3
 800e536:	3710      	adds	r7, #16
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	58004000 	.word	0x58004000
 800e540:	200020b0 	.word	0x200020b0

0800e544 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e544:	b480      	push	{r7}
 800e546:	b085      	sub	sp, #20
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800e550:	4b0e      	ldr	r3, [pc, #56]	; (800e58c <FLASH_Program_DoubleWord+0x48>)
 800e552:	695b      	ldr	r3, [r3, #20]
 800e554:	4a0d      	ldr	r2, [pc, #52]	; (800e58c <FLASH_Program_DoubleWord+0x48>)
 800e556:	f043 0301 	orr.w	r3, r3, #1
 800e55a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800e562:	f3bf 8f6f 	isb	sy
}
 800e566:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800e568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e56c:	f04f 0200 	mov.w	r2, #0
 800e570:	f04f 0300 	mov.w	r3, #0
 800e574:	000a      	movs	r2, r1
 800e576:	2300      	movs	r3, #0
 800e578:	68f9      	ldr	r1, [r7, #12]
 800e57a:	3104      	adds	r1, #4
 800e57c:	4613      	mov	r3, r2
 800e57e:	600b      	str	r3, [r1, #0]
}
 800e580:	bf00      	nop
 800e582:	3714      	adds	r7, #20
 800e584:	46bd      	mov	sp, r7
 800e586:	bc80      	pop	{r7}
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	58004000 	.word	0x58004000

0800e590 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800e590:	b480      	push	{r7}
 800e592:	b089      	sub	sp, #36	; 0x24
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800e59a:	2340      	movs	r3, #64	; 0x40
 800e59c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800e5a6:	4b18      	ldr	r3, [pc, #96]	; (800e608 <FLASH_Program_Fast+0x78>)
 800e5a8:	695b      	ldr	r3, [r3, #20]
 800e5aa:	4a17      	ldr	r2, [pc, #92]	; (800e608 <FLASH_Program_Fast+0x78>)
 800e5ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e5b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800e5b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800e5ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5bc:	b672      	cpsid	i
}
 800e5be:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	69bb      	ldr	r3, [r7, #24]
 800e5c6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	617b      	str	r3, [r7, #20]
    row_index--;
 800e5d4:	7ffb      	ldrb	r3, [r7, #31]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800e5da:	7ffb      	ldrb	r3, [r7, #31]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1ef      	bne.n	800e5c0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800e5e0:	bf00      	nop
 800e5e2:	4b09      	ldr	r3, [pc, #36]	; (800e608 <FLASH_Program_Fast+0x78>)
 800e5e4:	691b      	ldr	r3, [r3, #16]
 800e5e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5ee:	d0f8      	beq.n	800e5e2 <FLASH_Program_Fast+0x52>
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	f383 8810 	msr	PRIMASK, r3
}
 800e5fa:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800e5fc:	bf00      	nop
 800e5fe:	3724      	adds	r7, #36	; 0x24
 800e600:	46bd      	mov	sp, r7
 800e602:	bc80      	pop	{r7}
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	58004000 	.word	0x58004000

0800e60c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e616:	4b28      	ldr	r3, [pc, #160]	; (800e6b8 <HAL_FLASHEx_Erase+0xac>)
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d101      	bne.n	800e622 <HAL_FLASHEx_Erase+0x16>
 800e61e:	2302      	movs	r3, #2
 800e620:	e046      	b.n	800e6b0 <HAL_FLASHEx_Erase+0xa4>
 800e622:	4b25      	ldr	r3, [pc, #148]	; (800e6b8 <HAL_FLASHEx_Erase+0xac>)
 800e624:	2201      	movs	r2, #1
 800e626:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e628:	4b23      	ldr	r3, [pc, #140]	; (800e6b8 <HAL_FLASHEx_Erase+0xac>)
 800e62a:	2200      	movs	r2, #0
 800e62c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e62e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e632:	f7ff ff25 	bl	800e480 <FLASH_WaitForLastOperation>
 800e636:	4603      	mov	r3, r0
 800e638:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e63a:	7bfb      	ldrb	r3, [r7, #15]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d133      	bne.n	800e6a8 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b04      	cmp	r3, #4
 800e646:	d108      	bne.n	800e65a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 800e648:	f000 f838 	bl	800e6bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e64c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e650:	f7ff ff16 	bl	800e480 <FLASH_WaitForLastOperation>
 800e654:	4603      	mov	r3, r0
 800e656:	73fb      	strb	r3, [r7, #15]
 800e658:	e024      	b.n	800e6a4 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	f04f 32ff 	mov.w	r2, #4294967295
 800e660:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	60bb      	str	r3, [r7, #8]
 800e668:	e012      	b.n	800e690 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800e66a:	68b8      	ldr	r0, [r7, #8]
 800e66c:	f000 f836 	bl	800e6dc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e674:	f7ff ff04 	bl	800e480 <FLASH_WaitForLastOperation>
 800e678:	4603      	mov	r3, r0
 800e67a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800e67c:	7bfb      	ldrb	r3, [r7, #15]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d003      	beq.n	800e68a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	68ba      	ldr	r2, [r7, #8]
 800e686:	601a      	str	r2, [r3, #0]
          break;
 800e688:	e00a      	b.n	800e6a0 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	3301      	adds	r3, #1
 800e68e:	60bb      	str	r3, [r7, #8]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	685a      	ldr	r2, [r3, #4]
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	4413      	add	r3, r2
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d3e4      	bcc.n	800e66a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800e6a0:	f000 f878 	bl	800e794 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e6a4:	f000 f832 	bl	800e70c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e6a8:	4b03      	ldr	r3, [pc, #12]	; (800e6b8 <HAL_FLASHEx_Erase+0xac>)
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	701a      	strb	r2, [r3, #0]

  return status;
 800e6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3710      	adds	r7, #16
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	200020b0 	.word	0x200020b0

0800e6bc <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800e6c0:	4b05      	ldr	r3, [pc, #20]	; (800e6d8 <FLASH_MassErase+0x1c>)
 800e6c2:	695b      	ldr	r3, [r3, #20]
 800e6c4:	4a04      	ldr	r2, [pc, #16]	; (800e6d8 <FLASH_MassErase+0x1c>)
 800e6c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6ca:	f043 0304 	orr.w	r3, r3, #4
 800e6ce:	6153      	str	r3, [r2, #20]
#endif
}
 800e6d0:	bf00      	nop
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bc80      	pop	{r7}
 800e6d6:	4770      	bx	lr
 800e6d8:	58004000 	.word	0x58004000

0800e6dc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b083      	sub	sp, #12
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800e6e4:	4b08      	ldr	r3, [pc, #32]	; (800e708 <FLASH_PageErase+0x2c>)
 800e6e6:	695b      	ldr	r3, [r3, #20]
 800e6e8:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	00db      	lsls	r3, r3, #3
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	4a05      	ldr	r2, [pc, #20]	; (800e708 <FLASH_PageErase+0x2c>)
 800e6f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6f8:	f043 0302 	orr.w	r3, r3, #2
 800e6fc:	6153      	str	r3, [r2, #20]
#endif
}
 800e6fe:	bf00      	nop
 800e700:	370c      	adds	r7, #12
 800e702:	46bd      	mov	sp, r7
 800e704:	bc80      	pop	{r7}
 800e706:	4770      	bx	lr
 800e708:	58004000 	.word	0x58004000

0800e70c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800e70c:	b480      	push	{r7}
 800e70e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800e710:	4b1f      	ldr	r3, [pc, #124]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d117      	bne.n	800e74c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e71c:	4b1c      	ldr	r3, [pc, #112]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4a1b      	ldr	r2, [pc, #108]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e722:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e726:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e728:	4b19      	ldr	r3, [pc, #100]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a18      	ldr	r2, [pc, #96]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e72e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e732:	6013      	str	r3, [r2, #0]
 800e734:	4b16      	ldr	r3, [pc, #88]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a15      	ldr	r2, [pc, #84]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e73a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e73e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e740:	4b13      	ldr	r3, [pc, #76]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a12      	ldr	r2, [pc, #72]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e74a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800e74c:	4b10      	ldr	r3, [pc, #64]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e754:	2b01      	cmp	r3, #1
 800e756:	d117      	bne.n	800e788 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e758:	4b0d      	ldr	r3, [pc, #52]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a0c      	ldr	r2, [pc, #48]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e75e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e762:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e764:	4b0a      	ldr	r3, [pc, #40]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a09      	ldr	r2, [pc, #36]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e76a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	4b07      	ldr	r3, [pc, #28]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a06      	ldr	r2, [pc, #24]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e77a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e77c:	4b04      	ldr	r3, [pc, #16]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a03      	ldr	r2, [pc, #12]	; (800e790 <FLASH_FlushCaches+0x84>)
 800e782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e786:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800e788:	bf00      	nop
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bc80      	pop	{r7}
 800e78e:	4770      	bx	lr
 800e790:	58004000 	.word	0x58004000

0800e794 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800e794:	b480      	push	{r7}
 800e796:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800e798:	4b05      	ldr	r3, [pc, #20]	; (800e7b0 <FLASH_AcknowledgePageErase+0x1c>)
 800e79a:	695b      	ldr	r3, [r3, #20]
 800e79c:	4a04      	ldr	r2, [pc, #16]	; (800e7b0 <FLASH_AcknowledgePageErase+0x1c>)
 800e79e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800e7a2:	f023 0302 	bic.w	r3, r3, #2
 800e7a6:	6153      	str	r3, [r2, #20]
#endif
}
 800e7a8:	bf00      	nop
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bc80      	pop	{r7}
 800e7ae:	4770      	bx	lr
 800e7b0:	58004000 	.word	0x58004000

0800e7b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b087      	sub	sp, #28
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e7c2:	e140      	b.n	800ea46 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	fa01 f303 	lsl.w	r3, r1, r3
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	f000 8132 	beq.w	800ea40 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	f003 0303 	and.w	r3, r3, #3
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d005      	beq.n	800e7f4 <HAL_GPIO_Init+0x40>
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	f003 0303 	and.w	r3, r3, #3
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	d130      	bne.n	800e856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	005b      	lsls	r3, r3, #1
 800e7fe:	2203      	movs	r2, #3
 800e800:	fa02 f303 	lsl.w	r3, r2, r3
 800e804:	43db      	mvns	r3, r3
 800e806:	693a      	ldr	r2, [r7, #16]
 800e808:	4013      	ands	r3, r2
 800e80a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	68da      	ldr	r2, [r3, #12]
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	005b      	lsls	r3, r3, #1
 800e814:	fa02 f303 	lsl.w	r3, r2, r3
 800e818:	693a      	ldr	r2, [r7, #16]
 800e81a:	4313      	orrs	r3, r2
 800e81c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	693a      	ldr	r2, [r7, #16]
 800e822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e82a:	2201      	movs	r2, #1
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	fa02 f303 	lsl.w	r3, r2, r3
 800e832:	43db      	mvns	r3, r3
 800e834:	693a      	ldr	r2, [r7, #16]
 800e836:	4013      	ands	r3, r2
 800e838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	091b      	lsrs	r3, r3, #4
 800e840:	f003 0201 	and.w	r2, r3, #1
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	fa02 f303 	lsl.w	r3, r2, r3
 800e84a:	693a      	ldr	r2, [r7, #16]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	693a      	ldr	r2, [r7, #16]
 800e854:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	f003 0303 	and.w	r3, r3, #3
 800e85e:	2b03      	cmp	r3, #3
 800e860:	d017      	beq.n	800e892 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	2203      	movs	r2, #3
 800e86e:	fa02 f303 	lsl.w	r3, r2, r3
 800e872:	43db      	mvns	r3, r3
 800e874:	693a      	ldr	r2, [r7, #16]
 800e876:	4013      	ands	r3, r2
 800e878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	689a      	ldr	r2, [r3, #8]
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	005b      	lsls	r3, r3, #1
 800e882:	fa02 f303 	lsl.w	r3, r2, r3
 800e886:	693a      	ldr	r2, [r7, #16]
 800e888:	4313      	orrs	r3, r2
 800e88a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	693a      	ldr	r2, [r7, #16]
 800e890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	f003 0303 	and.w	r3, r3, #3
 800e89a:	2b02      	cmp	r3, #2
 800e89c:	d123      	bne.n	800e8e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	08da      	lsrs	r2, r3, #3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	3208      	adds	r2, #8
 800e8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	f003 0307 	and.w	r3, r3, #7
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	220f      	movs	r2, #15
 800e8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e8ba:	43db      	mvns	r3, r3
 800e8bc:	693a      	ldr	r2, [r7, #16]
 800e8be:	4013      	ands	r3, r2
 800e8c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	691a      	ldr	r2, [r3, #16]
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	f003 0307 	and.w	r3, r3, #7
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e8d2:	693a      	ldr	r2, [r7, #16]
 800e8d4:	4313      	orrs	r3, r2
 800e8d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	08da      	lsrs	r2, r3, #3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3208      	adds	r2, #8
 800e8e0:	6939      	ldr	r1, [r7, #16]
 800e8e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	005b      	lsls	r3, r3, #1
 800e8f0:	2203      	movs	r2, #3
 800e8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e8f6:	43db      	mvns	r3, r3
 800e8f8:	693a      	ldr	r2, [r7, #16]
 800e8fa:	4013      	ands	r3, r2
 800e8fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	f003 0203 	and.w	r2, r3, #3
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	005b      	lsls	r3, r3, #1
 800e90a:	fa02 f303 	lsl.w	r3, r2, r3
 800e90e:	693a      	ldr	r2, [r7, #16]
 800e910:	4313      	orrs	r3, r2
 800e912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e922:	2b00      	cmp	r3, #0
 800e924:	f000 808c 	beq.w	800ea40 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800e928:	4a4e      	ldr	r2, [pc, #312]	; (800ea64 <HAL_GPIO_Init+0x2b0>)
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	089b      	lsrs	r3, r3, #2
 800e92e:	3302      	adds	r3, #2
 800e930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	f003 0303 	and.w	r3, r3, #3
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	2207      	movs	r2, #7
 800e940:	fa02 f303 	lsl.w	r3, r2, r3
 800e944:	43db      	mvns	r3, r3
 800e946:	693a      	ldr	r2, [r7, #16]
 800e948:	4013      	ands	r3, r2
 800e94a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e952:	d00d      	beq.n	800e970 <HAL_GPIO_Init+0x1bc>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	4a44      	ldr	r2, [pc, #272]	; (800ea68 <HAL_GPIO_Init+0x2b4>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d007      	beq.n	800e96c <HAL_GPIO_Init+0x1b8>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a43      	ldr	r2, [pc, #268]	; (800ea6c <HAL_GPIO_Init+0x2b8>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d101      	bne.n	800e968 <HAL_GPIO_Init+0x1b4>
 800e964:	2302      	movs	r3, #2
 800e966:	e004      	b.n	800e972 <HAL_GPIO_Init+0x1be>
 800e968:	2307      	movs	r3, #7
 800e96a:	e002      	b.n	800e972 <HAL_GPIO_Init+0x1be>
 800e96c:	2301      	movs	r3, #1
 800e96e:	e000      	b.n	800e972 <HAL_GPIO_Init+0x1be>
 800e970:	2300      	movs	r3, #0
 800e972:	697a      	ldr	r2, [r7, #20]
 800e974:	f002 0203 	and.w	r2, r2, #3
 800e978:	0092      	lsls	r2, r2, #2
 800e97a:	4093      	lsls	r3, r2
 800e97c:	693a      	ldr	r2, [r7, #16]
 800e97e:	4313      	orrs	r3, r2
 800e980:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e982:	4938      	ldr	r1, [pc, #224]	; (800ea64 <HAL_GPIO_Init+0x2b0>)
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	089b      	lsrs	r3, r3, #2
 800e988:	3302      	adds	r3, #2
 800e98a:	693a      	ldr	r2, [r7, #16]
 800e98c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800e990:	4b37      	ldr	r3, [pc, #220]	; (800ea70 <HAL_GPIO_Init+0x2bc>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	43db      	mvns	r3, r3
 800e99a:	693a      	ldr	r2, [r7, #16]
 800e99c:	4013      	ands	r3, r2
 800e99e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d003      	beq.n	800e9b4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800e9ac:	693a      	ldr	r2, [r7, #16]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800e9b4:	4a2e      	ldr	r2, [pc, #184]	; (800ea70 <HAL_GPIO_Init+0x2bc>)
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800e9ba:	4b2d      	ldr	r3, [pc, #180]	; (800ea70 <HAL_GPIO_Init+0x2bc>)
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	43db      	mvns	r3, r3
 800e9c4:	693a      	ldr	r2, [r7, #16]
 800e9c6:	4013      	ands	r3, r2
 800e9c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d003      	beq.n	800e9de <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800e9d6:	693a      	ldr	r2, [r7, #16]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800e9de:	4a24      	ldr	r2, [pc, #144]	; (800ea70 <HAL_GPIO_Init+0x2bc>)
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800e9e4:	4b22      	ldr	r3, [pc, #136]	; (800ea70 <HAL_GPIO_Init+0x2bc>)
 800e9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9ea:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	43db      	mvns	r3, r3
 800e9f0:	693a      	ldr	r2, [r7, #16]
 800e9f2:	4013      	ands	r3, r2
 800e9f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d003      	beq.n	800ea0a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800ea02:	693a      	ldr	r2, [r7, #16]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800ea0a:	4a19      	ldr	r2, [pc, #100]	; (800ea70 <HAL_GPIO_Init+0x2bc>)
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800ea12:	4b17      	ldr	r3, [pc, #92]	; (800ea70 <HAL_GPIO_Init+0x2bc>)
 800ea14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea18:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	43db      	mvns	r3, r3
 800ea1e:	693a      	ldr	r2, [r7, #16]
 800ea20:	4013      	ands	r3, r2
 800ea22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d003      	beq.n	800ea38 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800ea30:	693a      	ldr	r2, [r7, #16]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	4313      	orrs	r3, r2
 800ea36:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800ea38:	4a0d      	ldr	r2, [pc, #52]	; (800ea70 <HAL_GPIO_Init+0x2bc>)
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	3301      	adds	r3, #1
 800ea44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	f47f aeb7 	bne.w	800e7c4 <HAL_GPIO_Init+0x10>
  }
}
 800ea56:	bf00      	nop
 800ea58:	bf00      	nop
 800ea5a:	371c      	adds	r7, #28
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bc80      	pop	{r7}
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	40010000 	.word	0x40010000
 800ea68:	48000400 	.word	0x48000400
 800ea6c:	48000800 	.word	0x48000800
 800ea70:	58000800 	.word	0x58000800

0800ea74 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b087      	sub	sp, #28
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800ea82:	e0af      	b.n	800ebe4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800ea84:	2201      	movs	r2, #1
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	fa02 f303 	lsl.w	r3, r2, r3
 800ea8c:	683a      	ldr	r2, [r7, #0]
 800ea8e:	4013      	ands	r3, r2
 800ea90:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	f000 80a2 	beq.w	800ebde <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800ea9a:	4a59      	ldr	r2, [pc, #356]	; (800ec00 <HAL_GPIO_DeInit+0x18c>)
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	089b      	lsrs	r3, r3, #2
 800eaa0:	3302      	adds	r3, #2
 800eaa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaa6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	f003 0303 	and.w	r3, r3, #3
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	2207      	movs	r2, #7
 800eab2:	fa02 f303 	lsl.w	r3, r2, r3
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	4013      	ands	r3, r2
 800eaba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800eac2:	d00d      	beq.n	800eae0 <HAL_GPIO_DeInit+0x6c>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4a4f      	ldr	r2, [pc, #316]	; (800ec04 <HAL_GPIO_DeInit+0x190>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d007      	beq.n	800eadc <HAL_GPIO_DeInit+0x68>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	4a4e      	ldr	r2, [pc, #312]	; (800ec08 <HAL_GPIO_DeInit+0x194>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d101      	bne.n	800ead8 <HAL_GPIO_DeInit+0x64>
 800ead4:	2302      	movs	r3, #2
 800ead6:	e004      	b.n	800eae2 <HAL_GPIO_DeInit+0x6e>
 800ead8:	2307      	movs	r3, #7
 800eada:	e002      	b.n	800eae2 <HAL_GPIO_DeInit+0x6e>
 800eadc:	2301      	movs	r3, #1
 800eade:	e000      	b.n	800eae2 <HAL_GPIO_DeInit+0x6e>
 800eae0:	2300      	movs	r3, #0
 800eae2:	697a      	ldr	r2, [r7, #20]
 800eae4:	f002 0203 	and.w	r2, r2, #3
 800eae8:	0092      	lsls	r2, r2, #2
 800eaea:	4093      	lsls	r3, r2
 800eaec:	68fa      	ldr	r2, [r7, #12]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d136      	bne.n	800eb60 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800eaf2:	4b46      	ldr	r3, [pc, #280]	; (800ec0c <HAL_GPIO_DeInit+0x198>)
 800eaf4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	43db      	mvns	r3, r3
 800eafc:	4943      	ldr	r1, [pc, #268]	; (800ec0c <HAL_GPIO_DeInit+0x198>)
 800eafe:	4013      	ands	r3, r2
 800eb00:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800eb04:	4b41      	ldr	r3, [pc, #260]	; (800ec0c <HAL_GPIO_DeInit+0x198>)
 800eb06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	43db      	mvns	r3, r3
 800eb0e:	493f      	ldr	r1, [pc, #252]	; (800ec0c <HAL_GPIO_DeInit+0x198>)
 800eb10:	4013      	ands	r3, r2
 800eb12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800eb16:	4b3d      	ldr	r3, [pc, #244]	; (800ec0c <HAL_GPIO_DeInit+0x198>)
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	43db      	mvns	r3, r3
 800eb1e:	493b      	ldr	r1, [pc, #236]	; (800ec0c <HAL_GPIO_DeInit+0x198>)
 800eb20:	4013      	ands	r3, r2
 800eb22:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800eb24:	4b39      	ldr	r3, [pc, #228]	; (800ec0c <HAL_GPIO_DeInit+0x198>)
 800eb26:	685a      	ldr	r2, [r3, #4]
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	43db      	mvns	r3, r3
 800eb2c:	4937      	ldr	r1, [pc, #220]	; (800ec0c <HAL_GPIO_DeInit+0x198>)
 800eb2e:	4013      	ands	r3, r2
 800eb30:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	f003 0303 	and.w	r3, r3, #3
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	2207      	movs	r2, #7
 800eb3c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb40:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800eb42:	4a2f      	ldr	r2, [pc, #188]	; (800ec00 <HAL_GPIO_DeInit+0x18c>)
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	089b      	lsrs	r3, r3, #2
 800eb48:	3302      	adds	r3, #2
 800eb4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	43da      	mvns	r2, r3
 800eb52:	482b      	ldr	r0, [pc, #172]	; (800ec00 <HAL_GPIO_DeInit+0x18c>)
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	089b      	lsrs	r3, r3, #2
 800eb58:	400a      	ands	r2, r1
 800eb5a:	3302      	adds	r3, #2
 800eb5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	2103      	movs	r1, #3
 800eb6a:	fa01 f303 	lsl.w	r3, r1, r3
 800eb6e:	431a      	orrs	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	08da      	lsrs	r2, r3, #3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	3208      	adds	r2, #8
 800eb7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	f003 0307 	and.w	r3, r3, #7
 800eb86:	009b      	lsls	r3, r3, #2
 800eb88:	220f      	movs	r2, #15
 800eb8a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb8e:	43db      	mvns	r3, r3
 800eb90:	697a      	ldr	r2, [r7, #20]
 800eb92:	08d2      	lsrs	r2, r2, #3
 800eb94:	4019      	ands	r1, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	3208      	adds	r2, #8
 800eb9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	689a      	ldr	r2, [r3, #8]
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	2103      	movs	r1, #3
 800eba8:	fa01 f303 	lsl.w	r3, r1, r3
 800ebac:	43db      	mvns	r3, r3
 800ebae:	401a      	ands	r2, r3
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	685a      	ldr	r2, [r3, #4]
 800ebb8:	2101      	movs	r1, #1
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	fa01 f303 	lsl.w	r3, r1, r3
 800ebc0:	43db      	mvns	r3, r3
 800ebc2:	401a      	ands	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	68da      	ldr	r2, [r3, #12]
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	005b      	lsls	r3, r3, #1
 800ebd0:	2103      	movs	r1, #3
 800ebd2:	fa01 f303 	lsl.w	r3, r1, r3
 800ebd6:	43db      	mvns	r3, r3
 800ebd8:	401a      	ands	r2, r3
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	60da      	str	r2, [r3, #12]
    }

    position++;
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	fa22 f303 	lsr.w	r3, r2, r3
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f47f af49 	bne.w	800ea84 <HAL_GPIO_DeInit+0x10>
  }
}
 800ebf2:	bf00      	nop
 800ebf4:	bf00      	nop
 800ebf6:	371c      	adds	r7, #28
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bc80      	pop	{r7}
 800ebfc:	4770      	bx	lr
 800ebfe:	bf00      	nop
 800ec00:	40010000 	.word	0x40010000
 800ec04:	48000400 	.word	0x48000400
 800ec08:	48000800 	.word	0x48000800
 800ec0c:	58000800 	.word	0x58000800

0800ec10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	807b      	strh	r3, [r7, #2]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ec20:	787b      	ldrb	r3, [r7, #1]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d003      	beq.n	800ec2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ec26:	887a      	ldrh	r2, [r7, #2]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ec2c:	e002      	b.n	800ec34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ec2e:	887a      	ldrh	r2, [r7, #2]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ec34:	bf00      	nop
 800ec36:	370c      	adds	r7, #12
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bc80      	pop	{r7}
 800ec3c:	4770      	bx	lr

0800ec3e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d101      	bne.n	800ec50 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e081      	b.n	800ed54 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d106      	bne.n	800ec6a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f7fb fba9 	bl	800a3bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2224      	movs	r2, #36	; 0x24
 800ec6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f022 0201 	bic.w	r2, r2, #1
 800ec80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ec8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	689a      	ldr	r2, [r3, #8]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d107      	bne.n	800ecb8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	689a      	ldr	r2, [r3, #8]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ecb4:	609a      	str	r2, [r3, #8]
 800ecb6:	e006      	b.n	800ecc6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	689a      	ldr	r2, [r3, #8]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ecc4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	68db      	ldr	r3, [r3, #12]
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d104      	bne.n	800ecd8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecd6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	687a      	ldr	r2, [r7, #4]
 800ece0:	6812      	ldr	r2, [r2, #0]
 800ece2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ece6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	68da      	ldr	r2, [r3, #12]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ecfa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	691a      	ldr	r2, [r3, #16]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	695b      	ldr	r3, [r3, #20]
 800ed04:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	699b      	ldr	r3, [r3, #24]
 800ed0c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	430a      	orrs	r2, r1
 800ed14:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	69d9      	ldr	r1, [r3, #28]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6a1a      	ldr	r2, [r3, #32]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	430a      	orrs	r2, r1
 800ed24:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f042 0201 	orr.w	r2, r2, #1
 800ed34:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2220      	movs	r2, #32
 800ed40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ed52:	2300      	movs	r3, #0
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	2b20      	cmp	r3, #32
 800ed70:	d138      	bne.n	800ede4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d101      	bne.n	800ed80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ed7c:	2302      	movs	r3, #2
 800ed7e:	e032      	b.n	800ede6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2201      	movs	r2, #1
 800ed84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2224      	movs	r2, #36	; 0x24
 800ed8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f022 0201 	bic.w	r2, r2, #1
 800ed9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800edae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	6819      	ldr	r1, [r3, #0]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	683a      	ldr	r2, [r7, #0]
 800edbc:	430a      	orrs	r2, r1
 800edbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	f042 0201 	orr.w	r2, r2, #1
 800edce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2220      	movs	r2, #32
 800edd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	e000      	b.n	800ede6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ede4:	2302      	movs	r3, #2
  }
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	bc80      	pop	{r7}
 800edee:	4770      	bx	lr

0800edf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b085      	sub	sp, #20
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	2b20      	cmp	r3, #32
 800ee04:	d139      	bne.n	800ee7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d101      	bne.n	800ee14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ee10:	2302      	movs	r3, #2
 800ee12:	e033      	b.n	800ee7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2224      	movs	r2, #36	; 0x24
 800ee20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f022 0201 	bic.w	r2, r2, #1
 800ee32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ee42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	021b      	lsls	r3, r3, #8
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	f042 0201 	orr.w	r2, r2, #1
 800ee64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2220      	movs	r2, #32
 800ee6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ee76:	2300      	movs	r3, #0
 800ee78:	e000      	b.n	800ee7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ee7a:	2302      	movs	r3, #2
  }
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3714      	adds	r7, #20
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bc80      	pop	{r7}
 800ee84:	4770      	bx	lr
	...

0800ee88 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ee8c:	4b04      	ldr	r3, [pc, #16]	; (800eea0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a03      	ldr	r2, [pc, #12]	; (800eea0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800ee92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee96:	6013      	str	r3, [r2, #0]
}
 800ee98:	bf00      	nop
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bc80      	pop	{r7}
 800ee9e:	4770      	bx	lr
 800eea0:	58000400 	.word	0x58000400

0800eea4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800eea4:	b480      	push	{r7}
 800eea6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800eea8:	4b03      	ldr	r3, [pc, #12]	; (800eeb8 <HAL_PWREx_GetVoltageRange+0x14>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bc80      	pop	{r7}
 800eeb6:	4770      	bx	lr
 800eeb8:	58000400 	.word	0x58000400

0800eebc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800eebc:	b480      	push	{r7}
 800eebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800eec0:	4b06      	ldr	r3, [pc, #24]	; (800eedc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eecc:	d101      	bne.n	800eed2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800eece:	2301      	movs	r3, #1
 800eed0:	e000      	b.n	800eed4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800eed2:	2300      	movs	r3, #0
}
 800eed4:	4618      	mov	r0, r3
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bc80      	pop	{r7}
 800eeda:	4770      	bx	lr
 800eedc:	58000400 	.word	0x58000400

0800eee0 <LL_RCC_HSE_EnableTcxo>:
{
 800eee0:	b480      	push	{r7}
 800eee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800eee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eeee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eef2:	6013      	str	r3, [r2, #0]
}
 800eef4:	bf00      	nop
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bc80      	pop	{r7}
 800eefa:	4770      	bx	lr

0800eefc <LL_RCC_HSE_DisableTcxo>:
{
 800eefc:	b480      	push	{r7}
 800eefe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800ef00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ef0e:	6013      	str	r3, [r2, #0]
}
 800ef10:	bf00      	nop
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bc80      	pop	{r7}
 800ef16:	4770      	bx	lr

0800ef18 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800ef18:	b480      	push	{r7}
 800ef1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800ef1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ef26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef2a:	d101      	bne.n	800ef30 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	e000      	b.n	800ef32 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bc80      	pop	{r7}
 800ef38:	4770      	bx	lr

0800ef3a <LL_RCC_HSE_Enable>:
{
 800ef3a:	b480      	push	{r7}
 800ef3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ef3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ef4c:	6013      	str	r3, [r2, #0]
}
 800ef4e:	bf00      	nop
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bc80      	pop	{r7}
 800ef54:	4770      	bx	lr

0800ef56 <LL_RCC_HSE_Disable>:
{
 800ef56:	b480      	push	{r7}
 800ef58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ef5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ef64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ef68:	6013      	str	r3, [r2, #0]
}
 800ef6a:	bf00      	nop
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bc80      	pop	{r7}
 800ef70:	4770      	bx	lr

0800ef72 <LL_RCC_HSE_IsReady>:
{
 800ef72:	b480      	push	{r7}
 800ef74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ef76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef84:	d101      	bne.n	800ef8a <LL_RCC_HSE_IsReady+0x18>
 800ef86:	2301      	movs	r3, #1
 800ef88:	e000      	b.n	800ef8c <LL_RCC_HSE_IsReady+0x1a>
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bc80      	pop	{r7}
 800ef92:	4770      	bx	lr

0800ef94 <LL_RCC_HSI_Enable>:
{
 800ef94:	b480      	push	{r7}
 800ef96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800ef98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800efa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800efa6:	6013      	str	r3, [r2, #0]
}
 800efa8:	bf00      	nop
 800efaa:	46bd      	mov	sp, r7
 800efac:	bc80      	pop	{r7}
 800efae:	4770      	bx	lr

0800efb0 <LL_RCC_HSI_Disable>:
{
 800efb0:	b480      	push	{r7}
 800efb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800efb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800efbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800efc2:	6013      	str	r3, [r2, #0]
}
 800efc4:	bf00      	nop
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bc80      	pop	{r7}
 800efca:	4770      	bx	lr

0800efcc <LL_RCC_HSI_IsReady>:
{
 800efcc:	b480      	push	{r7}
 800efce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800efd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800efda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efde:	d101      	bne.n	800efe4 <LL_RCC_HSI_IsReady+0x18>
 800efe0:	2301      	movs	r3, #1
 800efe2:	e000      	b.n	800efe6 <LL_RCC_HSI_IsReady+0x1a>
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	46bd      	mov	sp, r7
 800efea:	bc80      	pop	{r7}
 800efec:	4770      	bx	lr

0800efee <LL_RCC_HSI_SetCalibTrimming>:
{
 800efee:	b480      	push	{r7}
 800eff0:	b083      	sub	sp, #12
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800eff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	061b      	lsls	r3, r3, #24
 800f004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f008:	4313      	orrs	r3, r2
 800f00a:	604b      	str	r3, [r1, #4]
}
 800f00c:	bf00      	nop
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	bc80      	pop	{r7}
 800f014:	4770      	bx	lr

0800f016 <LL_RCC_LSE_IsReady>:
{
 800f016:	b480      	push	{r7}
 800f018:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f01a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f022:	f003 0302 	and.w	r3, r3, #2
 800f026:	2b02      	cmp	r3, #2
 800f028:	d101      	bne.n	800f02e <LL_RCC_LSE_IsReady+0x18>
 800f02a:	2301      	movs	r3, #1
 800f02c:	e000      	b.n	800f030 <LL_RCC_LSE_IsReady+0x1a>
 800f02e:	2300      	movs	r3, #0
}
 800f030:	4618      	mov	r0, r3
 800f032:	46bd      	mov	sp, r7
 800f034:	bc80      	pop	{r7}
 800f036:	4770      	bx	lr

0800f038 <LL_RCC_LSI_Enable>:
{
 800f038:	b480      	push	{r7}
 800f03a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800f03c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f048:	f043 0301 	orr.w	r3, r3, #1
 800f04c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800f050:	bf00      	nop
 800f052:	46bd      	mov	sp, r7
 800f054:	bc80      	pop	{r7}
 800f056:	4770      	bx	lr

0800f058 <LL_RCC_LSI_Disable>:
{
 800f058:	b480      	push	{r7}
 800f05a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800f05c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f068:	f023 0301 	bic.w	r3, r3, #1
 800f06c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800f070:	bf00      	nop
 800f072:	46bd      	mov	sp, r7
 800f074:	bc80      	pop	{r7}
 800f076:	4770      	bx	lr

0800f078 <LL_RCC_LSI_IsReady>:
{
 800f078:	b480      	push	{r7}
 800f07a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800f07c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f084:	f003 0302 	and.w	r3, r3, #2
 800f088:	2b02      	cmp	r3, #2
 800f08a:	d101      	bne.n	800f090 <LL_RCC_LSI_IsReady+0x18>
 800f08c:	2301      	movs	r3, #1
 800f08e:	e000      	b.n	800f092 <LL_RCC_LSI_IsReady+0x1a>
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	46bd      	mov	sp, r7
 800f096:	bc80      	pop	{r7}
 800f098:	4770      	bx	lr

0800f09a <LL_RCC_MSI_Enable>:
{
 800f09a:	b480      	push	{r7}
 800f09c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800f09e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f0a8:	f043 0301 	orr.w	r3, r3, #1
 800f0ac:	6013      	str	r3, [r2, #0]
}
 800f0ae:	bf00      	nop
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bc80      	pop	{r7}
 800f0b4:	4770      	bx	lr

0800f0b6 <LL_RCC_MSI_Disable>:
{
 800f0b6:	b480      	push	{r7}
 800f0b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800f0ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f0c4:	f023 0301 	bic.w	r3, r3, #1
 800f0c8:	6013      	str	r3, [r2, #0]
}
 800f0ca:	bf00      	nop
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bc80      	pop	{r7}
 800f0d0:	4770      	bx	lr

0800f0d2 <LL_RCC_MSI_IsReady>:
{
 800f0d2:	b480      	push	{r7}
 800f0d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800f0d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f003 0302 	and.w	r3, r3, #2
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d101      	bne.n	800f0e8 <LL_RCC_MSI_IsReady+0x16>
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e000      	b.n	800f0ea <LL_RCC_MSI_IsReady+0x18>
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bc80      	pop	{r7}
 800f0f0:	4770      	bx	lr

0800f0f2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800f0f2:	b480      	push	{r7}
 800f0f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800f0f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f003 0308 	and.w	r3, r3, #8
 800f100:	2b08      	cmp	r3, #8
 800f102:	d101      	bne.n	800f108 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800f104:	2301      	movs	r3, #1
 800f106:	e000      	b.n	800f10a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bc80      	pop	{r7}
 800f110:	4770      	bx	lr

0800f112 <LL_RCC_MSI_GetRange>:
{
 800f112:	b480      	push	{r7}
 800f114:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800f116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f120:	4618      	mov	r0, r3
 800f122:	46bd      	mov	sp, r7
 800f124:	bc80      	pop	{r7}
 800f126:	4770      	bx	lr

0800f128 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800f128:	b480      	push	{r7}
 800f12a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800f12c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f134:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800f138:	4618      	mov	r0, r3
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bc80      	pop	{r7}
 800f13e:	4770      	bx	lr

0800f140 <LL_RCC_MSI_SetCalibTrimming>:
{
 800f140:	b480      	push	{r7}
 800f142:	b083      	sub	sp, #12
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800f148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	021b      	lsls	r3, r3, #8
 800f156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f15a:	4313      	orrs	r3, r2
 800f15c:	604b      	str	r3, [r1, #4]
}
 800f15e:	bf00      	nop
 800f160:	370c      	adds	r7, #12
 800f162:	46bd      	mov	sp, r7
 800f164:	bc80      	pop	{r7}
 800f166:	4770      	bx	lr

0800f168 <LL_RCC_SetSysClkSource>:
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800f170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f174:	689b      	ldr	r3, [r3, #8]
 800f176:	f023 0203 	bic.w	r2, r3, #3
 800f17a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4313      	orrs	r3, r2
 800f182:	608b      	str	r3, [r1, #8]
}
 800f184:	bf00      	nop
 800f186:	370c      	adds	r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	bc80      	pop	{r7}
 800f18c:	4770      	bx	lr

0800f18e <LL_RCC_GetSysClkSource>:
{
 800f18e:	b480      	push	{r7}
 800f190:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	f003 030c 	and.w	r3, r3, #12
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bc80      	pop	{r7}
 800f1a2:	4770      	bx	lr

0800f1a4 <LL_RCC_SetAHBPrescaler>:
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800f1ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1b0:	689b      	ldr	r3, [r3, #8]
 800f1b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f1b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	608b      	str	r3, [r1, #8]
}
 800f1c0:	bf00      	nop
 800f1c2:	370c      	adds	r7, #12
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bc80      	pop	{r7}
 800f1c8:	4770      	bx	lr

0800f1ca <LL_RCC_SetAHB3Prescaler>:
{
 800f1ca:	b480      	push	{r7}
 800f1cc:	b083      	sub	sp, #12
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800f1d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f1d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f1da:	f023 020f 	bic.w	r2, r3, #15
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	091b      	lsrs	r3, r3, #4
 800f1e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800f1ec:	bf00      	nop
 800f1ee:	370c      	adds	r7, #12
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bc80      	pop	{r7}
 800f1f4:	4770      	bx	lr

0800f1f6 <LL_RCC_SetAPB1Prescaler>:
{
 800f1f6:	b480      	push	{r7}
 800f1f8:	b083      	sub	sp, #12
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800f1fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4313      	orrs	r3, r2
 800f210:	608b      	str	r3, [r1, #8]
}
 800f212:	bf00      	nop
 800f214:	370c      	adds	r7, #12
 800f216:	46bd      	mov	sp, r7
 800f218:	bc80      	pop	{r7}
 800f21a:	4770      	bx	lr

0800f21c <LL_RCC_SetAPB2Prescaler>:
{
 800f21c:	b480      	push	{r7}
 800f21e:	b083      	sub	sp, #12
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800f224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800f22e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4313      	orrs	r3, r2
 800f236:	608b      	str	r3, [r1, #8]
}
 800f238:	bf00      	nop
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bc80      	pop	{r7}
 800f240:	4770      	bx	lr

0800f242 <LL_RCC_GetAHBPrescaler>:
{
 800f242:	b480      	push	{r7}
 800f244:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800f246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f250:	4618      	mov	r0, r3
 800f252:	46bd      	mov	sp, r7
 800f254:	bc80      	pop	{r7}
 800f256:	4770      	bx	lr

0800f258 <LL_RCC_GetAHB3Prescaler>:
{
 800f258:	b480      	push	{r7}
 800f25a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800f25c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f260:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f264:	011b      	lsls	r3, r3, #4
 800f266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bc80      	pop	{r7}
 800f270:	4770      	bx	lr

0800f272 <LL_RCC_GetAPB1Prescaler>:
{
 800f272:	b480      	push	{r7}
 800f274:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800f276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800f280:	4618      	mov	r0, r3
 800f282:	46bd      	mov	sp, r7
 800f284:	bc80      	pop	{r7}
 800f286:	4770      	bx	lr

0800f288 <LL_RCC_GetAPB2Prescaler>:
{
 800f288:	b480      	push	{r7}
 800f28a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800f28c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800f296:	4618      	mov	r0, r3
 800f298:	46bd      	mov	sp, r7
 800f29a:	bc80      	pop	{r7}
 800f29c:	4770      	bx	lr

0800f29e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800f29e:	b480      	push	{r7}
 800f2a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800f2a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f2ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f2b0:	6013      	str	r3, [r2, #0]
}
 800f2b2:	bf00      	nop
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bc80      	pop	{r7}
 800f2b8:	4770      	bx	lr

0800f2ba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800f2ba:	b480      	push	{r7}
 800f2bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800f2be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f2c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f2cc:	6013      	str	r3, [r2, #0]
}
 800f2ce:	bf00      	nop
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bc80      	pop	{r7}
 800f2d4:	4770      	bx	lr

0800f2d6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800f2d6:	b480      	push	{r7}
 800f2d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800f2da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2e8:	d101      	bne.n	800f2ee <LL_RCC_PLL_IsReady+0x18>
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e000      	b.n	800f2f0 <LL_RCC_PLL_IsReady+0x1a>
 800f2ee:	2300      	movs	r3, #0
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bc80      	pop	{r7}
 800f2f6:	4770      	bx	lr

0800f2f8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800f2fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	0a1b      	lsrs	r3, r3, #8
 800f304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800f308:	4618      	mov	r0, r3
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bc80      	pop	{r7}
 800f30e:	4770      	bx	lr

0800f310 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800f310:	b480      	push	{r7}
 800f312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800f314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800f31e:	4618      	mov	r0, r3
 800f320:	46bd      	mov	sp, r7
 800f322:	bc80      	pop	{r7}
 800f324:	4770      	bx	lr

0800f326 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800f326:	b480      	push	{r7}
 800f328:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800f32a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f32e:	68db      	ldr	r3, [r3, #12]
 800f330:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800f334:	4618      	mov	r0, r3
 800f336:	46bd      	mov	sp, r7
 800f338:	bc80      	pop	{r7}
 800f33a:	4770      	bx	lr

0800f33c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800f33c:	b480      	push	{r7}
 800f33e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800f340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	f003 0303 	and.w	r3, r3, #3
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bc80      	pop	{r7}
 800f350:	4770      	bx	lr

0800f352 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800f352:	b480      	push	{r7}
 800f354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800f356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f364:	d101      	bne.n	800f36a <LL_RCC_IsActiveFlag_HPRE+0x18>
 800f366:	2301      	movs	r3, #1
 800f368:	e000      	b.n	800f36c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	46bd      	mov	sp, r7
 800f370:	bc80      	pop	{r7}
 800f372:	4770      	bx	lr

0800f374 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800f374:	b480      	push	{r7}
 800f376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800f378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f37c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f388:	d101      	bne.n	800f38e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800f38a:	2301      	movs	r3, #1
 800f38c:	e000      	b.n	800f390 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800f38e:	2300      	movs	r3, #0
}
 800f390:	4618      	mov	r0, r3
 800f392:	46bd      	mov	sp, r7
 800f394:	bc80      	pop	{r7}
 800f396:	4770      	bx	lr

0800f398 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800f398:	b480      	push	{r7}
 800f39a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800f39c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3a0:	689b      	ldr	r3, [r3, #8]
 800f3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f3aa:	d101      	bne.n	800f3b0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	e000      	b.n	800f3b2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800f3b0:	2300      	movs	r3, #0
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bc80      	pop	{r7}
 800f3b8:	4770      	bx	lr

0800f3ba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800f3ba:	b480      	push	{r7}
 800f3bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800f3be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f3c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f3cc:	d101      	bne.n	800f3d2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	e000      	b.n	800f3d4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800f3d2:	2300      	movs	r3, #0
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bc80      	pop	{r7}
 800f3da:	4770      	bx	lr

0800f3dc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b088      	sub	sp, #32
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d101      	bne.n	800f3ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e36f      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f3ee:	f7ff fece 	bl	800f18e <LL_RCC_GetSysClkSource>
 800f3f2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f3f4:	f7ff ffa2 	bl	800f33c <LL_RCC_PLL_GetMainSource>
 800f3f8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f003 0320 	and.w	r3, r3, #32
 800f402:	2b00      	cmp	r3, #0
 800f404:	f000 80c4 	beq.w	800f590 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d005      	beq.n	800f41a <HAL_RCC_OscConfig+0x3e>
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	2b0c      	cmp	r3, #12
 800f412:	d176      	bne.n	800f502 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	2b01      	cmp	r3, #1
 800f418:	d173      	bne.n	800f502 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6a1b      	ldr	r3, [r3, #32]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d101      	bne.n	800f426 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800f422:	2301      	movs	r3, #1
 800f424:	e353      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f42a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f003 0308 	and.w	r3, r3, #8
 800f434:	2b00      	cmp	r3, #0
 800f436:	d005      	beq.n	800f444 <HAL_RCC_OscConfig+0x68>
 800f438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f442:	e006      	b.n	800f452 <HAL_RCC_OscConfig+0x76>
 800f444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f44c:	091b      	lsrs	r3, r3, #4
 800f44e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f452:	4293      	cmp	r3, r2
 800f454:	d222      	bcs.n	800f49c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 fd7a 	bl	800ff54 <RCC_SetFlashLatencyFromMSIRange>
 800f460:	4603      	mov	r3, r0
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	e331      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f46a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f474:	f043 0308 	orr.w	r3, r3, #8
 800f478:	6013      	str	r3, [r2, #0]
 800f47a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f48c:	4313      	orrs	r3, r2
 800f48e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f494:	4618      	mov	r0, r3
 800f496:	f7ff fe53 	bl	800f140 <LL_RCC_MSI_SetCalibTrimming>
 800f49a:	e021      	b.n	800f4e0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f49c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f4a6:	f043 0308 	orr.w	r3, r3, #8
 800f4aa:	6013      	str	r3, [r2, #0]
 800f4ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7ff fe3a 	bl	800f140 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f000 fd3f 	bl	800ff54 <RCC_SetFlashLatencyFromMSIRange>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d001      	beq.n	800f4e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	e2f6      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f4e0:	f000 fcc2 	bl	800fe68 <HAL_RCC_GetHCLKFreq>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	4aa7      	ldr	r2, [pc, #668]	; (800f784 <HAL_RCC_OscConfig+0x3a8>)
 800f4e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800f4ea:	4ba7      	ldr	r3, [pc, #668]	; (800f788 <HAL_RCC_OscConfig+0x3ac>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fb f908 	bl	800a704 <HAL_InitTick>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800f4f8:	7cfb      	ldrb	r3, [r7, #19]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d047      	beq.n	800f58e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800f4fe:	7cfb      	ldrb	r3, [r7, #19]
 800f500:	e2e5      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6a1b      	ldr	r3, [r3, #32]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d02c      	beq.n	800f564 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f50a:	f7ff fdc6 	bl	800f09a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f50e:	f7fd fd43 	bl	800cf98 <HAL_GetTick>
 800f512:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800f514:	e008      	b.n	800f528 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f516:	f7fd fd3f 	bl	800cf98 <HAL_GetTick>
 800f51a:	4602      	mov	r2, r0
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	2b02      	cmp	r3, #2
 800f522:	d901      	bls.n	800f528 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800f524:	2303      	movs	r3, #3
 800f526:	e2d2      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800f528:	f7ff fdd3 	bl	800f0d2 <LL_RCC_MSI_IsReady>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d0f1      	beq.n	800f516 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f53c:	f043 0308 	orr.w	r3, r3, #8
 800f540:	6013      	str	r3, [r2, #0]
 800f542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f554:	4313      	orrs	r3, r2
 800f556:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7ff fdef 	bl	800f140 <LL_RCC_MSI_SetCalibTrimming>
 800f562:	e015      	b.n	800f590 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f564:	f7ff fda7 	bl	800f0b6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f568:	f7fd fd16 	bl	800cf98 <HAL_GetTick>
 800f56c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800f56e:	e008      	b.n	800f582 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f570:	f7fd fd12 	bl	800cf98 <HAL_GetTick>
 800f574:	4602      	mov	r2, r0
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	2b02      	cmp	r3, #2
 800f57c:	d901      	bls.n	800f582 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800f57e:	2303      	movs	r3, #3
 800f580:	e2a5      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800f582:	f7ff fda6 	bl	800f0d2 <LL_RCC_MSI_IsReady>
 800f586:	4603      	mov	r3, r0
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d1f1      	bne.n	800f570 <HAL_RCC_OscConfig+0x194>
 800f58c:	e000      	b.n	800f590 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800f58e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f003 0301 	and.w	r3, r3, #1
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d058      	beq.n	800f64e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	2b08      	cmp	r3, #8
 800f5a0:	d005      	beq.n	800f5ae <HAL_RCC_OscConfig+0x1d2>
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	2b0c      	cmp	r3, #12
 800f5a6:	d108      	bne.n	800f5ba <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	2b03      	cmp	r3, #3
 800f5ac:	d105      	bne.n	800f5ba <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d14b      	bne.n	800f64e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	e289      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800f5ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5d8:	d102      	bne.n	800f5e0 <HAL_RCC_OscConfig+0x204>
 800f5da:	f7ff fcae 	bl	800ef3a <LL_RCC_HSE_Enable>
 800f5de:	e00d      	b.n	800f5fc <HAL_RCC_OscConfig+0x220>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800f5e8:	d104      	bne.n	800f5f4 <HAL_RCC_OscConfig+0x218>
 800f5ea:	f7ff fc79 	bl	800eee0 <LL_RCC_HSE_EnableTcxo>
 800f5ee:	f7ff fca4 	bl	800ef3a <LL_RCC_HSE_Enable>
 800f5f2:	e003      	b.n	800f5fc <HAL_RCC_OscConfig+0x220>
 800f5f4:	f7ff fcaf 	bl	800ef56 <LL_RCC_HSE_Disable>
 800f5f8:	f7ff fc80 	bl	800eefc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d012      	beq.n	800f62a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f604:	f7fd fcc8 	bl	800cf98 <HAL_GetTick>
 800f608:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800f60a:	e008      	b.n	800f61e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f60c:	f7fd fcc4 	bl	800cf98 <HAL_GetTick>
 800f610:	4602      	mov	r2, r0
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	2b64      	cmp	r3, #100	; 0x64
 800f618:	d901      	bls.n	800f61e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800f61a:	2303      	movs	r3, #3
 800f61c:	e257      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800f61e:	f7ff fca8 	bl	800ef72 <LL_RCC_HSE_IsReady>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d0f1      	beq.n	800f60c <HAL_RCC_OscConfig+0x230>
 800f628:	e011      	b.n	800f64e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f62a:	f7fd fcb5 	bl	800cf98 <HAL_GetTick>
 800f62e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800f630:	e008      	b.n	800f644 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f632:	f7fd fcb1 	bl	800cf98 <HAL_GetTick>
 800f636:	4602      	mov	r2, r0
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	2b64      	cmp	r3, #100	; 0x64
 800f63e:	d901      	bls.n	800f644 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800f640:	2303      	movs	r3, #3
 800f642:	e244      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800f644:	f7ff fc95 	bl	800ef72 <LL_RCC_HSE_IsReady>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d1f1      	bne.n	800f632 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f003 0302 	and.w	r3, r3, #2
 800f656:	2b00      	cmp	r3, #0
 800f658:	d046      	beq.n	800f6e8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	2b04      	cmp	r3, #4
 800f65e:	d005      	beq.n	800f66c <HAL_RCC_OscConfig+0x290>
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	2b0c      	cmp	r3, #12
 800f664:	d10e      	bne.n	800f684 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	2b02      	cmp	r3, #2
 800f66a:	d10b      	bne.n	800f684 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	691b      	ldr	r3, [r3, #16]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d101      	bne.n	800f678 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800f674:	2301      	movs	r3, #1
 800f676:	e22a      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	695b      	ldr	r3, [r3, #20]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7ff fcb6 	bl	800efee <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800f682:	e031      	b.n	800f6e8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	691b      	ldr	r3, [r3, #16]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d019      	beq.n	800f6c0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f68c:	f7ff fc82 	bl	800ef94 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f690:	f7fd fc82 	bl	800cf98 <HAL_GetTick>
 800f694:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800f696:	e008      	b.n	800f6aa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f698:	f7fd fc7e 	bl	800cf98 <HAL_GetTick>
 800f69c:	4602      	mov	r2, r0
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	2b02      	cmp	r3, #2
 800f6a4:	d901      	bls.n	800f6aa <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800f6a6:	2303      	movs	r3, #3
 800f6a8:	e211      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800f6aa:	f7ff fc8f 	bl	800efcc <LL_RCC_HSI_IsReady>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d0f1      	beq.n	800f698 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	695b      	ldr	r3, [r3, #20]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7ff fc98 	bl	800efee <LL_RCC_HSI_SetCalibTrimming>
 800f6be:	e013      	b.n	800f6e8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f6c0:	f7ff fc76 	bl	800efb0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6c4:	f7fd fc68 	bl	800cf98 <HAL_GetTick>
 800f6c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800f6ca:	e008      	b.n	800f6de <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f6cc:	f7fd fc64 	bl	800cf98 <HAL_GetTick>
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	1ad3      	subs	r3, r2, r3
 800f6d6:	2b02      	cmp	r3, #2
 800f6d8:	d901      	bls.n	800f6de <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800f6da:	2303      	movs	r3, #3
 800f6dc:	e1f7      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800f6de:	f7ff fc75 	bl	800efcc <LL_RCC_HSI_IsReady>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d1f1      	bne.n	800f6cc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f003 0308 	and.w	r3, r3, #8
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d06e      	beq.n	800f7d2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	699b      	ldr	r3, [r3, #24]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d056      	beq.n	800f7aa <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800f6fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f704:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	69da      	ldr	r2, [r3, #28]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f003 0310 	and.w	r3, r3, #16
 800f710:	429a      	cmp	r2, r3
 800f712:	d031      	beq.n	800f778 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f003 0302 	and.w	r3, r3, #2
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d006      	beq.n	800f72c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800f724:	2b00      	cmp	r3, #0
 800f726:	d101      	bne.n	800f72c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800f728:	2301      	movs	r3, #1
 800f72a:	e1d0      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f003 0301 	and.w	r3, r3, #1
 800f732:	2b00      	cmp	r3, #0
 800f734:	d013      	beq.n	800f75e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800f736:	f7ff fc8f 	bl	800f058 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f73a:	f7fd fc2d 	bl	800cf98 <HAL_GetTick>
 800f73e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800f740:	e008      	b.n	800f754 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f742:	f7fd fc29 	bl	800cf98 <HAL_GetTick>
 800f746:	4602      	mov	r2, r0
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	1ad3      	subs	r3, r2, r3
 800f74c:	2b11      	cmp	r3, #17
 800f74e:	d901      	bls.n	800f754 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800f750:	2303      	movs	r3, #3
 800f752:	e1bc      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800f754:	f7ff fc90 	bl	800f078 <LL_RCC_LSI_IsReady>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d1f1      	bne.n	800f742 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800f75e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f766:	f023 0210 	bic.w	r2, r3, #16
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	69db      	ldr	r3, [r3, #28]
 800f76e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f772:	4313      	orrs	r3, r2
 800f774:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f778:	f7ff fc5e 	bl	800f038 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f77c:	f7fd fc0c 	bl	800cf98 <HAL_GetTick>
 800f780:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800f782:	e00c      	b.n	800f79e <HAL_RCC_OscConfig+0x3c2>
 800f784:	20000080 	.word	0x20000080
 800f788:	20000088 	.word	0x20000088
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f78c:	f7fd fc04 	bl	800cf98 <HAL_GetTick>
 800f790:	4602      	mov	r2, r0
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	1ad3      	subs	r3, r2, r3
 800f796:	2b11      	cmp	r3, #17
 800f798:	d901      	bls.n	800f79e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800f79a:	2303      	movs	r3, #3
 800f79c:	e197      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800f79e:	f7ff fc6b 	bl	800f078 <LL_RCC_LSI_IsReady>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d0f1      	beq.n	800f78c <HAL_RCC_OscConfig+0x3b0>
 800f7a8:	e013      	b.n	800f7d2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f7aa:	f7ff fc55 	bl	800f058 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f7ae:	f7fd fbf3 	bl	800cf98 <HAL_GetTick>
 800f7b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800f7b4:	e008      	b.n	800f7c8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f7b6:	f7fd fbef 	bl	800cf98 <HAL_GetTick>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	1ad3      	subs	r3, r2, r3
 800f7c0:	2b11      	cmp	r3, #17
 800f7c2:	d901      	bls.n	800f7c8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800f7c4:	2303      	movs	r3, #3
 800f7c6:	e182      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800f7c8:	f7ff fc56 	bl	800f078 <LL_RCC_LSI_IsReady>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1f1      	bne.n	800f7b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f003 0304 	and.w	r3, r3, #4
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f000 80d8 	beq.w	800f990 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800f7e0:	f7ff fb6c 	bl	800eebc <LL_PWR_IsEnabledBkUpAccess>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d113      	bne.n	800f812 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800f7ea:	f7ff fb4d 	bl	800ee88 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f7ee:	f7fd fbd3 	bl	800cf98 <HAL_GetTick>
 800f7f2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800f7f4:	e008      	b.n	800f808 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f7f6:	f7fd fbcf 	bl	800cf98 <HAL_GetTick>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	1ad3      	subs	r3, r2, r3
 800f800:	2b02      	cmp	r3, #2
 800f802:	d901      	bls.n	800f808 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800f804:	2303      	movs	r3, #3
 800f806:	e162      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800f808:	f7ff fb58 	bl	800eebc <LL_PWR_IsEnabledBkUpAccess>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d0f1      	beq.n	800f7f6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d07b      	beq.n	800f912 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	2b85      	cmp	r3, #133	; 0x85
 800f820:	d003      	beq.n	800f82a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	2b05      	cmp	r3, #5
 800f828:	d109      	bne.n	800f83e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800f82a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f836:	f043 0304 	orr.w	r3, r3, #4
 800f83a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f83e:	f7fd fbab 	bl	800cf98 <HAL_GetTick>
 800f842:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f84c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f850:	f043 0301 	orr.w	r3, r3, #1
 800f854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800f858:	e00a      	b.n	800f870 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f85a:	f7fd fb9d 	bl	800cf98 <HAL_GetTick>
 800f85e:	4602      	mov	r2, r0
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	1ad3      	subs	r3, r2, r3
 800f864:	f241 3288 	movw	r2, #5000	; 0x1388
 800f868:	4293      	cmp	r3, r2
 800f86a:	d901      	bls.n	800f870 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800f86c:	2303      	movs	r3, #3
 800f86e:	e12e      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800f870:	f7ff fbd1 	bl	800f016 <LL_RCC_LSE_IsReady>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d0ef      	beq.n	800f85a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	68db      	ldr	r3, [r3, #12]
 800f87e:	2b81      	cmp	r3, #129	; 0x81
 800f880:	d003      	beq.n	800f88a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	2b85      	cmp	r3, #133	; 0x85
 800f888:	d121      	bne.n	800f8ce <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f88a:	f7fd fb85 	bl	800cf98 <HAL_GetTick>
 800f88e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800f890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800f8a4:	e00a      	b.n	800f8bc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8a6:	f7fd fb77 	bl	800cf98 <HAL_GetTick>
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	1ad3      	subs	r3, r2, r3
 800f8b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d901      	bls.n	800f8bc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800f8b8:	2303      	movs	r3, #3
 800f8ba:	e108      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800f8bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d0ec      	beq.n	800f8a6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800f8cc:	e060      	b.n	800f990 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f8ce:	f7fd fb63 	bl	800cf98 <HAL_GetTick>
 800f8d2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800f8d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f8e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f8e8:	e00a      	b.n	800f900 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f8ea:	f7fd fb55 	bl	800cf98 <HAL_GetTick>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d901      	bls.n	800f900 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800f8fc:	2303      	movs	r3, #3
 800f8fe:	e0e6      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d1ec      	bne.n	800f8ea <HAL_RCC_OscConfig+0x50e>
 800f910:	e03e      	b.n	800f990 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f912:	f7fd fb41 	bl	800cf98 <HAL_GetTick>
 800f916:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800f918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f92c:	e00a      	b.n	800f944 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f92e:	f7fd fb33 	bl	800cf98 <HAL_GetTick>
 800f932:	4602      	mov	r2, r0
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	f241 3288 	movw	r2, #5000	; 0x1388
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d901      	bls.n	800f944 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800f940:	2303      	movs	r3, #3
 800f942:	e0c4      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800f944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f94c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1ec      	bne.n	800f92e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f954:	f7fd fb20 	bl	800cf98 <HAL_GetTick>
 800f958:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800f95a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f966:	f023 0301 	bic.w	r3, r3, #1
 800f96a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800f96e:	e00a      	b.n	800f986 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f970:	f7fd fb12 	bl	800cf98 <HAL_GetTick>
 800f974:	4602      	mov	r2, r0
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f97e:	4293      	cmp	r3, r2
 800f980:	d901      	bls.n	800f986 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800f982:	2303      	movs	r3, #3
 800f984:	e0a3      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800f986:	f7ff fb46 	bl	800f016 <LL_RCC_LSE_IsReady>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1ef      	bne.n	800f970 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f994:	2b00      	cmp	r3, #0
 800f996:	f000 8099 	beq.w	800facc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	2b0c      	cmp	r3, #12
 800f99e:	d06c      	beq.n	800fa7a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a4:	2b02      	cmp	r3, #2
 800f9a6:	d14b      	bne.n	800fa40 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f9a8:	f7ff fc87 	bl	800f2ba <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f9ac:	f7fd faf4 	bl	800cf98 <HAL_GetTick>
 800f9b0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800f9b2:	e008      	b.n	800f9c6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9b4:	f7fd faf0 	bl	800cf98 <HAL_GetTick>
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	1ad3      	subs	r3, r2, r3
 800f9be:	2b0a      	cmp	r3, #10
 800f9c0:	d901      	bls.n	800f9c6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800f9c2:	2303      	movs	r3, #3
 800f9c4:	e083      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800f9c6:	f7ff fc86 	bl	800f2d6 <LL_RCC_PLL_IsReady>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d1f1      	bne.n	800f9b4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f9d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f9d4:	68da      	ldr	r2, [r3, #12]
 800f9d6:	4b40      	ldr	r3, [pc, #256]	; (800fad8 <HAL_RCC_OscConfig+0x6fc>)
 800f9d8:	4013      	ands	r3, r2
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f9e2:	4311      	orrs	r1, r2
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f9e8:	0212      	lsls	r2, r2, #8
 800f9ea:	4311      	orrs	r1, r2
 800f9ec:	687a      	ldr	r2, [r7, #4]
 800f9ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f9f0:	4311      	orrs	r1, r2
 800f9f2:	687a      	ldr	r2, [r7, #4]
 800f9f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f9f6:	4311      	orrs	r1, r2
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f9fc:	430a      	orrs	r2, r1
 800f9fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fa02:	4313      	orrs	r3, r2
 800fa04:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fa06:	f7ff fc4a 	bl	800f29e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fa0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fa14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa18:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa1a:	f7fd fabd 	bl	800cf98 <HAL_GetTick>
 800fa1e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800fa20:	e008      	b.n	800fa34 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fa22:	f7fd fab9 	bl	800cf98 <HAL_GetTick>
 800fa26:	4602      	mov	r2, r0
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	1ad3      	subs	r3, r2, r3
 800fa2c:	2b0a      	cmp	r3, #10
 800fa2e:	d901      	bls.n	800fa34 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800fa30:	2303      	movs	r3, #3
 800fa32:	e04c      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800fa34:	f7ff fc4f 	bl	800f2d6 <LL_RCC_PLL_IsReady>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d0f1      	beq.n	800fa22 <HAL_RCC_OscConfig+0x646>
 800fa3e:	e045      	b.n	800facc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fa40:	f7ff fc3b 	bl	800f2ba <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa44:	f7fd faa8 	bl	800cf98 <HAL_GetTick>
 800fa48:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800fa4a:	e008      	b.n	800fa5e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fa4c:	f7fd faa4 	bl	800cf98 <HAL_GetTick>
 800fa50:	4602      	mov	r2, r0
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	1ad3      	subs	r3, r2, r3
 800fa56:	2b0a      	cmp	r3, #10
 800fa58:	d901      	bls.n	800fa5e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800fa5a:	2303      	movs	r3, #3
 800fa5c:	e037      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800fa5e:	f7ff fc3a 	bl	800f2d6 <LL_RCC_PLL_IsReady>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d1f1      	bne.n	800fa4c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800fa68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fa6c:	68da      	ldr	r2, [r3, #12]
 800fa6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fa72:	4b1a      	ldr	r3, [pc, #104]	; (800fadc <HAL_RCC_OscConfig+0x700>)
 800fa74:	4013      	ands	r3, r2
 800fa76:	60cb      	str	r3, [r1, #12]
 800fa78:	e028      	b.n	800facc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa7e:	2b01      	cmp	r3, #1
 800fa80:	d101      	bne.n	800fa86 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800fa82:	2301      	movs	r3, #1
 800fa84:	e023      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800fa86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	f003 0203 	and.w	r2, r3, #3
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d115      	bne.n	800fac8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d10e      	bne.n	800fac8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fab4:	021b      	lsls	r3, r3, #8
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d106      	bne.n	800fac8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d001      	beq.n	800facc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800fac8:	2301      	movs	r3, #1
 800faca:	e000      	b.n	800face <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3720      	adds	r7, #32
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	11c1808c 	.word	0x11c1808c
 800fadc:	eefefffc 	.word	0xeefefffc

0800fae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d101      	bne.n	800faf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800faf0:	2301      	movs	r3, #1
 800faf2:	e10f      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800faf4:	4b89      	ldr	r3, [pc, #548]	; (800fd1c <HAL_RCC_ClockConfig+0x23c>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f003 0307 	and.w	r3, r3, #7
 800fafc:	683a      	ldr	r2, [r7, #0]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d91b      	bls.n	800fb3a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fb02:	4b86      	ldr	r3, [pc, #536]	; (800fd1c <HAL_RCC_ClockConfig+0x23c>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f023 0207 	bic.w	r2, r3, #7
 800fb0a:	4984      	ldr	r1, [pc, #528]	; (800fd1c <HAL_RCC_ClockConfig+0x23c>)
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fb12:	f7fd fa41 	bl	800cf98 <HAL_GetTick>
 800fb16:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fb18:	e008      	b.n	800fb2c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800fb1a:	f7fd fa3d 	bl	800cf98 <HAL_GetTick>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d901      	bls.n	800fb2c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800fb28:	2303      	movs	r3, #3
 800fb2a:	e0f3      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fb2c:	4b7b      	ldr	r3, [pc, #492]	; (800fd1c <HAL_RCC_ClockConfig+0x23c>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f003 0307 	and.w	r3, r3, #7
 800fb34:	683a      	ldr	r2, [r7, #0]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d1ef      	bne.n	800fb1a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f003 0302 	and.w	r3, r3, #2
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d016      	beq.n	800fb74 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	689b      	ldr	r3, [r3, #8]
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff fb2a 	bl	800f1a4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fb50:	f7fd fa22 	bl	800cf98 <HAL_GetTick>
 800fb54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800fb56:	e008      	b.n	800fb6a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fb58:	f7fd fa1e 	bl	800cf98 <HAL_GetTick>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	2b02      	cmp	r3, #2
 800fb64:	d901      	bls.n	800fb6a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800fb66:	2303      	movs	r3, #3
 800fb68:	e0d4      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800fb6a:	f7ff fbf2 	bl	800f352 <LL_RCC_IsActiveFlag_HPRE>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d0f1      	beq.n	800fb58 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d016      	beq.n	800fbae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	695b      	ldr	r3, [r3, #20]
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7ff fb20 	bl	800f1ca <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fb8a:	f7fd fa05 	bl	800cf98 <HAL_GetTick>
 800fb8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800fb90:	e008      	b.n	800fba4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fb92:	f7fd fa01 	bl	800cf98 <HAL_GetTick>
 800fb96:	4602      	mov	r2, r0
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	1ad3      	subs	r3, r2, r3
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	d901      	bls.n	800fba4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800fba0:	2303      	movs	r3, #3
 800fba2:	e0b7      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800fba4:	f7ff fbe6 	bl	800f374 <LL_RCC_IsActiveFlag_SHDHPRE>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d0f1      	beq.n	800fb92 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f003 0304 	and.w	r3, r3, #4
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d016      	beq.n	800fbe8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7ff fb19 	bl	800f1f6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fbc4:	f7fd f9e8 	bl	800cf98 <HAL_GetTick>
 800fbc8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800fbca:	e008      	b.n	800fbde <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fbcc:	f7fd f9e4 	bl	800cf98 <HAL_GetTick>
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	1ad3      	subs	r3, r2, r3
 800fbd6:	2b02      	cmp	r3, #2
 800fbd8:	d901      	bls.n	800fbde <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800fbda:	2303      	movs	r3, #3
 800fbdc:	e09a      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800fbde:	f7ff fbdb 	bl	800f398 <LL_RCC_IsActiveFlag_PPRE1>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d0f1      	beq.n	800fbcc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f003 0308 	and.w	r3, r3, #8
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d017      	beq.n	800fc24 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	691b      	ldr	r3, [r3, #16]
 800fbf8:	00db      	lsls	r3, r3, #3
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7ff fb0e 	bl	800f21c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800fc00:	f7fd f9ca 	bl	800cf98 <HAL_GetTick>
 800fc04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800fc06:	e008      	b.n	800fc1a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800fc08:	f7fd f9c6 	bl	800cf98 <HAL_GetTick>
 800fc0c:	4602      	mov	r2, r0
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	2b02      	cmp	r3, #2
 800fc14:	d901      	bls.n	800fc1a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800fc16:	2303      	movs	r3, #3
 800fc18:	e07c      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800fc1a:	f7ff fbce 	bl	800f3ba <LL_RCC_IsActiveFlag_PPRE2>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d0f1      	beq.n	800fc08 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f003 0301 	and.w	r3, r3, #1
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d043      	beq.n	800fcb8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	2b02      	cmp	r3, #2
 800fc36:	d106      	bne.n	800fc46 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800fc38:	f7ff f99b 	bl	800ef72 <LL_RCC_HSE_IsReady>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d11e      	bne.n	800fc80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fc42:	2301      	movs	r3, #1
 800fc44:	e066      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	2b03      	cmp	r3, #3
 800fc4c:	d106      	bne.n	800fc5c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800fc4e:	f7ff fb42 	bl	800f2d6 <LL_RCC_PLL_IsReady>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d113      	bne.n	800fc80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	e05b      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d106      	bne.n	800fc72 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800fc64:	f7ff fa35 	bl	800f0d2 <LL_RCC_MSI_IsReady>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d108      	bne.n	800fc80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fc6e:	2301      	movs	r3, #1
 800fc70:	e050      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800fc72:	f7ff f9ab 	bl	800efcc <LL_RCC_HSI_IsReady>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d101      	bne.n	800fc80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e049      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7ff fa6f 	bl	800f168 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fc8a:	f7fd f985 	bl	800cf98 <HAL_GetTick>
 800fc8e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fc90:	e00a      	b.n	800fca8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fc92:	f7fd f981 	bl	800cf98 <HAL_GetTick>
 800fc96:	4602      	mov	r2, r0
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d901      	bls.n	800fca8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800fca4:	2303      	movs	r3, #3
 800fca6:	e035      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fca8:	f7ff fa71 	bl	800f18e <LL_RCC_GetSysClkSource>
 800fcac:	4602      	mov	r2, r0
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	009b      	lsls	r3, r3, #2
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d1ec      	bne.n	800fc92 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fcb8:	4b18      	ldr	r3, [pc, #96]	; (800fd1c <HAL_RCC_ClockConfig+0x23c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f003 0307 	and.w	r3, r3, #7
 800fcc0:	683a      	ldr	r2, [r7, #0]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d21b      	bcs.n	800fcfe <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fcc6:	4b15      	ldr	r3, [pc, #84]	; (800fd1c <HAL_RCC_ClockConfig+0x23c>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f023 0207 	bic.w	r2, r3, #7
 800fcce:	4913      	ldr	r1, [pc, #76]	; (800fd1c <HAL_RCC_ClockConfig+0x23c>)
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	4313      	orrs	r3, r2
 800fcd4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800fcd6:	f7fd f95f 	bl	800cf98 <HAL_GetTick>
 800fcda:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fcdc:	e008      	b.n	800fcf0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800fcde:	f7fd f95b 	bl	800cf98 <HAL_GetTick>
 800fce2:	4602      	mov	r2, r0
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	1ad3      	subs	r3, r2, r3
 800fce8:	2b02      	cmp	r3, #2
 800fcea:	d901      	bls.n	800fcf0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800fcec:	2303      	movs	r3, #3
 800fcee:	e011      	b.n	800fd14 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fcf0:	4b0a      	ldr	r3, [pc, #40]	; (800fd1c <HAL_RCC_ClockConfig+0x23c>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f003 0307 	and.w	r3, r3, #7
 800fcf8:	683a      	ldr	r2, [r7, #0]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d1ef      	bne.n	800fcde <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800fcfe:	f000 f8b3 	bl	800fe68 <HAL_RCC_GetHCLKFreq>
 800fd02:	4603      	mov	r3, r0
 800fd04:	4a06      	ldr	r2, [pc, #24]	; (800fd20 <HAL_RCC_ClockConfig+0x240>)
 800fd06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800fd08:	4b06      	ldr	r3, [pc, #24]	; (800fd24 <HAL_RCC_ClockConfig+0x244>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fa fcf9 	bl	800a704 <HAL_InitTick>
 800fd12:	4603      	mov	r3, r0
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3710      	adds	r7, #16
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	58004000 	.word	0x58004000
 800fd20:	20000080 	.word	0x20000080
 800fd24:	20000088 	.word	0x20000088

0800fd28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fd28:	b590      	push	{r4, r7, lr}
 800fd2a:	b087      	sub	sp, #28
 800fd2c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800fd32:	2300      	movs	r3, #0
 800fd34:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fd36:	f7ff fa2a 	bl	800f18e <LL_RCC_GetSysClkSource>
 800fd3a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fd3c:	f7ff fafe 	bl	800f33c <LL_RCC_PLL_GetMainSource>
 800fd40:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d005      	beq.n	800fd54 <HAL_RCC_GetSysClockFreq+0x2c>
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	2b0c      	cmp	r3, #12
 800fd4c:	d139      	bne.n	800fdc2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d136      	bne.n	800fdc2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800fd54:	f7ff f9cd 	bl	800f0f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d115      	bne.n	800fd8a <HAL_RCC_GetSysClockFreq+0x62>
 800fd5e:	f7ff f9c8 	bl	800f0f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d106      	bne.n	800fd76 <HAL_RCC_GetSysClockFreq+0x4e>
 800fd68:	f7ff f9d3 	bl	800f112 <LL_RCC_MSI_GetRange>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	0a1b      	lsrs	r3, r3, #8
 800fd70:	f003 030f 	and.w	r3, r3, #15
 800fd74:	e005      	b.n	800fd82 <HAL_RCC_GetSysClockFreq+0x5a>
 800fd76:	f7ff f9d7 	bl	800f128 <LL_RCC_MSI_GetRangeAfterStandby>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	0a1b      	lsrs	r3, r3, #8
 800fd7e:	f003 030f 	and.w	r3, r3, #15
 800fd82:	4a36      	ldr	r2, [pc, #216]	; (800fe5c <HAL_RCC_GetSysClockFreq+0x134>)
 800fd84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd88:	e014      	b.n	800fdb4 <HAL_RCC_GetSysClockFreq+0x8c>
 800fd8a:	f7ff f9b2 	bl	800f0f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d106      	bne.n	800fda2 <HAL_RCC_GetSysClockFreq+0x7a>
 800fd94:	f7ff f9bd 	bl	800f112 <LL_RCC_MSI_GetRange>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	091b      	lsrs	r3, r3, #4
 800fd9c:	f003 030f 	and.w	r3, r3, #15
 800fda0:	e005      	b.n	800fdae <HAL_RCC_GetSysClockFreq+0x86>
 800fda2:	f7ff f9c1 	bl	800f128 <LL_RCC_MSI_GetRangeAfterStandby>
 800fda6:	4603      	mov	r3, r0
 800fda8:	091b      	lsrs	r3, r3, #4
 800fdaa:	f003 030f 	and.w	r3, r3, #15
 800fdae:	4a2b      	ldr	r2, [pc, #172]	; (800fe5c <HAL_RCC_GetSysClockFreq+0x134>)
 800fdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdb4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d115      	bne.n	800fde8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800fdc0:	e012      	b.n	800fde8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	2b04      	cmp	r3, #4
 800fdc6:	d102      	bne.n	800fdce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800fdc8:	4b25      	ldr	r3, [pc, #148]	; (800fe60 <HAL_RCC_GetSysClockFreq+0x138>)
 800fdca:	617b      	str	r3, [r7, #20]
 800fdcc:	e00c      	b.n	800fde8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2b08      	cmp	r3, #8
 800fdd2:	d109      	bne.n	800fde8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800fdd4:	f7ff f8a0 	bl	800ef18 <LL_RCC_HSE_IsEnabledDiv2>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d102      	bne.n	800fde4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800fdde:	4b20      	ldr	r3, [pc, #128]	; (800fe60 <HAL_RCC_GetSysClockFreq+0x138>)
 800fde0:	617b      	str	r3, [r7, #20]
 800fde2:	e001      	b.n	800fde8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800fde4:	4b1f      	ldr	r3, [pc, #124]	; (800fe64 <HAL_RCC_GetSysClockFreq+0x13c>)
 800fde6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fde8:	f7ff f9d1 	bl	800f18e <LL_RCC_GetSysClkSource>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b0c      	cmp	r3, #12
 800fdf0:	d12f      	bne.n	800fe52 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800fdf2:	f7ff faa3 	bl	800f33c <LL_RCC_PLL_GetMainSource>
 800fdf6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b02      	cmp	r3, #2
 800fdfc:	d003      	beq.n	800fe06 <HAL_RCC_GetSysClockFreq+0xde>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2b03      	cmp	r3, #3
 800fe02:	d003      	beq.n	800fe0c <HAL_RCC_GetSysClockFreq+0xe4>
 800fe04:	e00d      	b.n	800fe22 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800fe06:	4b16      	ldr	r3, [pc, #88]	; (800fe60 <HAL_RCC_GetSysClockFreq+0x138>)
 800fe08:	60fb      	str	r3, [r7, #12]
        break;
 800fe0a:	e00d      	b.n	800fe28 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800fe0c:	f7ff f884 	bl	800ef18 <LL_RCC_HSE_IsEnabledDiv2>
 800fe10:	4603      	mov	r3, r0
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	d102      	bne.n	800fe1c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800fe16:	4b12      	ldr	r3, [pc, #72]	; (800fe60 <HAL_RCC_GetSysClockFreq+0x138>)
 800fe18:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800fe1a:	e005      	b.n	800fe28 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800fe1c:	4b11      	ldr	r3, [pc, #68]	; (800fe64 <HAL_RCC_GetSysClockFreq+0x13c>)
 800fe1e:	60fb      	str	r3, [r7, #12]
        break;
 800fe20:	e002      	b.n	800fe28 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	60fb      	str	r3, [r7, #12]
        break;
 800fe26:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800fe28:	f7ff fa66 	bl	800f2f8 <LL_RCC_PLL_GetN>
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	fb03 f402 	mul.w	r4, r3, r2
 800fe34:	f7ff fa77 	bl	800f326 <LL_RCC_PLL_GetDivider>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	091b      	lsrs	r3, r3, #4
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	fbb4 f4f3 	udiv	r4, r4, r3
 800fe42:	f7ff fa65 	bl	800f310 <LL_RCC_PLL_GetR>
 800fe46:	4603      	mov	r3, r0
 800fe48:	0f5b      	lsrs	r3, r3, #29
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	fbb4 f3f3 	udiv	r3, r4, r3
 800fe50:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800fe52:	697b      	ldr	r3, [r7, #20]
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	371c      	adds	r7, #28
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd90      	pop	{r4, r7, pc}
 800fe5c:	0801fcd4 	.word	0x0801fcd4
 800fe60:	00f42400 	.word	0x00f42400
 800fe64:	01e84800 	.word	0x01e84800

0800fe68 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fe68:	b598      	push	{r3, r4, r7, lr}
 800fe6a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800fe6c:	f7ff ff5c 	bl	800fd28 <HAL_RCC_GetSysClockFreq>
 800fe70:	4604      	mov	r4, r0
 800fe72:	f7ff f9e6 	bl	800f242 <LL_RCC_GetAHBPrescaler>
 800fe76:	4603      	mov	r3, r0
 800fe78:	091b      	lsrs	r3, r3, #4
 800fe7a:	f003 030f 	and.w	r3, r3, #15
 800fe7e:	4a03      	ldr	r2, [pc, #12]	; (800fe8c <HAL_RCC_GetHCLKFreq+0x24>)
 800fe80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe84:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	bd98      	pop	{r3, r4, r7, pc}
 800fe8c:	0801fc74 	.word	0x0801fc74

0800fe90 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fe90:	b598      	push	{r3, r4, r7, lr}
 800fe92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800fe94:	f7ff ffe8 	bl	800fe68 <HAL_RCC_GetHCLKFreq>
 800fe98:	4604      	mov	r4, r0
 800fe9a:	f7ff f9ea 	bl	800f272 <LL_RCC_GetAPB1Prescaler>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	0a1b      	lsrs	r3, r3, #8
 800fea2:	4a03      	ldr	r2, [pc, #12]	; (800feb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800fea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fea8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800feac:	4618      	mov	r0, r3
 800feae:	bd98      	pop	{r3, r4, r7, pc}
 800feb0:	0801fcb4 	.word	0x0801fcb4

0800feb4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800feb4:	b598      	push	{r3, r4, r7, lr}
 800feb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800feb8:	f7ff ffd6 	bl	800fe68 <HAL_RCC_GetHCLKFreq>
 800febc:	4604      	mov	r4, r0
 800febe:	f7ff f9e3 	bl	800f288 <LL_RCC_GetAPB2Prescaler>
 800fec2:	4603      	mov	r3, r0
 800fec4:	0adb      	lsrs	r3, r3, #11
 800fec6:	4a03      	ldr	r2, [pc, #12]	; (800fed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800fec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fecc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	bd98      	pop	{r3, r4, r7, pc}
 800fed4:	0801fcb4 	.word	0x0801fcb4

0800fed8 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d02d      	beq.n	800ff44 <HAL_RCC_GetClockConfig+0x6c>
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d02a      	beq.n	800ff44 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	224f      	movs	r2, #79	; 0x4f
 800fef2:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 800fef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fef8:	689b      	ldr	r3, [r3, #8]
 800fefa:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f003 020c 	and.w	r2, r3, #12
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 800ff24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ff28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800ff2c:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	011b      	lsls	r3, r3, #4
 800ff32:	b2da      	uxtb	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ff38:	4b05      	ldr	r3, [pc, #20]	; (800ff50 <HAL_RCC_GetClockConfig+0x78>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f003 0207 	and.w	r2, r3, #7
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	601a      	str	r2, [r3, #0]
  }
}
 800ff44:	bf00      	nop
 800ff46:	3714      	adds	r7, #20
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bc80      	pop	{r7}
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	58004000 	.word	0x58004000

0800ff54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800ff54:	b590      	push	{r4, r7, lr}
 800ff56:	b085      	sub	sp, #20
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	091b      	lsrs	r3, r3, #4
 800ff60:	f003 030f 	and.w	r3, r3, #15
 800ff64:	4a10      	ldr	r2, [pc, #64]	; (800ffa8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800ff66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff6a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800ff6c:	f7ff f974 	bl	800f258 <LL_RCC_GetAHB3Prescaler>
 800ff70:	4603      	mov	r3, r0
 800ff72:	091b      	lsrs	r3, r3, #4
 800ff74:	f003 030f 	and.w	r3, r3, #15
 800ff78:	4a0c      	ldr	r2, [pc, #48]	; (800ffac <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800ff7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff84:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	4a09      	ldr	r2, [pc, #36]	; (800ffb0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800ff8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ff8e:	0c9c      	lsrs	r4, r3, #18
 800ff90:	f7fe ff88 	bl	800eea4 <HAL_PWREx_GetVoltageRange>
 800ff94:	4603      	mov	r3, r0
 800ff96:	4619      	mov	r1, r3
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f000 f80b 	bl	800ffb4 <RCC_SetFlashLatency>
 800ff9e:	4603      	mov	r3, r0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3714      	adds	r7, #20
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd90      	pop	{r4, r7, pc}
 800ffa8:	0801fcd4 	.word	0x0801fcd4
 800ffac:	0801fc74 	.word	0x0801fc74
 800ffb0:	431bde83 	.word	0x431bde83

0800ffb4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b08e      	sub	sp, #56	; 0x38
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800ffbe:	4a3a      	ldr	r2, [pc, #232]	; (80100a8 <RCC_SetFlashLatency+0xf4>)
 800ffc0:	f107 0320 	add.w	r3, r7, #32
 800ffc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffc8:	6018      	str	r0, [r3, #0]
 800ffca:	3304      	adds	r3, #4
 800ffcc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800ffce:	4a37      	ldr	r2, [pc, #220]	; (80100ac <RCC_SetFlashLatency+0xf8>)
 800ffd0:	f107 0318 	add.w	r3, r7, #24
 800ffd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ffd8:	6018      	str	r0, [r3, #0]
 800ffda:	3304      	adds	r3, #4
 800ffdc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800ffde:	4a34      	ldr	r2, [pc, #208]	; (80100b0 <RCC_SetFlashLatency+0xfc>)
 800ffe0:	f107 030c 	add.w	r3, r7, #12
 800ffe4:	ca07      	ldmia	r2, {r0, r1, r2}
 800ffe6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ffea:	2300      	movs	r3, #0
 800ffec:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fff4:	d11b      	bne.n	801002e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800fff6:	2300      	movs	r3, #0
 800fff8:	633b      	str	r3, [r7, #48]	; 0x30
 800fffa:	e014      	b.n	8010026 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800fffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffe:	005b      	lsls	r3, r3, #1
 8010000:	3338      	adds	r3, #56	; 0x38
 8010002:	443b      	add	r3, r7
 8010004:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8010008:	461a      	mov	r2, r3
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	4293      	cmp	r3, r2
 801000e:	d807      	bhi.n	8010020 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8010010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	3338      	adds	r3, #56	; 0x38
 8010016:	443b      	add	r3, r7
 8010018:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 801001c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801001e:	e021      	b.n	8010064 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8010020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010022:	3301      	adds	r3, #1
 8010024:	633b      	str	r3, [r7, #48]	; 0x30
 8010026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010028:	2b02      	cmp	r3, #2
 801002a:	d9e7      	bls.n	800fffc <RCC_SetFlashLatency+0x48>
 801002c:	e01a      	b.n	8010064 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 801002e:	2300      	movs	r3, #0
 8010030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010032:	e014      	b.n	801005e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8010034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010036:	005b      	lsls	r3, r3, #1
 8010038:	3338      	adds	r3, #56	; 0x38
 801003a:	443b      	add	r3, r7
 801003c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8010040:	461a      	mov	r2, r3
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	4293      	cmp	r3, r2
 8010046:	d807      	bhi.n	8010058 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8010048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	3338      	adds	r3, #56	; 0x38
 801004e:	443b      	add	r3, r7
 8010050:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8010054:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8010056:	e005      	b.n	8010064 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8010058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005a:	3301      	adds	r3, #1
 801005c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801005e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010060:	2b02      	cmp	r3, #2
 8010062:	d9e7      	bls.n	8010034 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8010064:	4b13      	ldr	r3, [pc, #76]	; (80100b4 <RCC_SetFlashLatency+0x100>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f023 0207 	bic.w	r2, r3, #7
 801006c:	4911      	ldr	r1, [pc, #68]	; (80100b4 <RCC_SetFlashLatency+0x100>)
 801006e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010070:	4313      	orrs	r3, r2
 8010072:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8010074:	f7fc ff90 	bl	800cf98 <HAL_GetTick>
 8010078:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801007a:	e008      	b.n	801008e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 801007c:	f7fc ff8c 	bl	800cf98 <HAL_GetTick>
 8010080:	4602      	mov	r2, r0
 8010082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010084:	1ad3      	subs	r3, r2, r3
 8010086:	2b02      	cmp	r3, #2
 8010088:	d901      	bls.n	801008e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 801008a:	2303      	movs	r3, #3
 801008c:	e007      	b.n	801009e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 801008e:	4b09      	ldr	r3, [pc, #36]	; (80100b4 <RCC_SetFlashLatency+0x100>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f003 0307 	and.w	r3, r3, #7
 8010096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010098:	429a      	cmp	r2, r3
 801009a:	d1ef      	bne.n	801007c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 801009c:	2300      	movs	r3, #0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3738      	adds	r7, #56	; 0x38
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	0801fb38 	.word	0x0801fb38
 80100ac:	0801fb40 	.word	0x0801fb40
 80100b0:	0801fb48 	.word	0x0801fb48
 80100b4:	58004000 	.word	0x58004000

080100b8 <LL_RCC_LSE_IsReady>:
{
 80100b8:	b480      	push	{r7}
 80100ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80100bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100c4:	f003 0302 	and.w	r3, r3, #2
 80100c8:	2b02      	cmp	r3, #2
 80100ca:	d101      	bne.n	80100d0 <LL_RCC_LSE_IsReady+0x18>
 80100cc:	2301      	movs	r3, #1
 80100ce:	e000      	b.n	80100d2 <LL_RCC_LSE_IsReady+0x1a>
 80100d0:	2300      	movs	r3, #0
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bc80      	pop	{r7}
 80100d8:	4770      	bx	lr

080100da <LL_RCC_SetUSARTClockSource>:
{
 80100da:	b480      	push	{r7}
 80100dc:	b083      	sub	sp, #12
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80100e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80100e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	0c1b      	lsrs	r3, r3, #16
 80100ee:	43db      	mvns	r3, r3
 80100f0:	401a      	ands	r2, r3
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80100fa:	4313      	orrs	r3, r2
 80100fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8010100:	bf00      	nop
 8010102:	370c      	adds	r7, #12
 8010104:	46bd      	mov	sp, r7
 8010106:	bc80      	pop	{r7}
 8010108:	4770      	bx	lr

0801010a <LL_RCC_SetI2SClockSource>:
{
 801010a:	b480      	push	{r7}
 801010c:	b083      	sub	sp, #12
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8010112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801011a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801011e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	4313      	orrs	r3, r2
 8010126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801012a:	bf00      	nop
 801012c:	370c      	adds	r7, #12
 801012e:	46bd      	mov	sp, r7
 8010130:	bc80      	pop	{r7}
 8010132:	4770      	bx	lr

08010134 <LL_RCC_SetLPUARTClockSource>:
{
 8010134:	b480      	push	{r7}
 8010136:	b083      	sub	sp, #12
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 801013c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010144:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010148:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4313      	orrs	r3, r2
 8010150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8010154:	bf00      	nop
 8010156:	370c      	adds	r7, #12
 8010158:	46bd      	mov	sp, r7
 801015a:	bc80      	pop	{r7}
 801015c:	4770      	bx	lr

0801015e <LL_RCC_SetI2CClockSource>:
{
 801015e:	b480      	push	{r7}
 8010160:	b083      	sub	sp, #12
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8010166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801016a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	091b      	lsrs	r3, r3, #4
 8010172:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8010176:	43db      	mvns	r3, r3
 8010178:	401a      	ands	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	011b      	lsls	r3, r3, #4
 801017e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8010182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010186:	4313      	orrs	r3, r2
 8010188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 801018c:	bf00      	nop
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	bc80      	pop	{r7}
 8010194:	4770      	bx	lr

08010196 <LL_RCC_SetLPTIMClockSource>:
{
 8010196:	b480      	push	{r7}
 8010198:	b083      	sub	sp, #12
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801019e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	0c1b      	lsrs	r3, r3, #16
 80101aa:	041b      	lsls	r3, r3, #16
 80101ac:	43db      	mvns	r3, r3
 80101ae:	401a      	ands	r2, r3
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	041b      	lsls	r3, r3, #16
 80101b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80101b8:	4313      	orrs	r3, r2
 80101ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80101be:	bf00      	nop
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bc80      	pop	{r7}
 80101c6:	4770      	bx	lr

080101c8 <LL_RCC_SetRNGClockSource>:
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80101d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101d8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80101dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	4313      	orrs	r3, r2
 80101e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80101e8:	bf00      	nop
 80101ea:	370c      	adds	r7, #12
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bc80      	pop	{r7}
 80101f0:	4770      	bx	lr

080101f2 <LL_RCC_SetADCClockSource>:
{
 80101f2:	b480      	push	{r7}
 80101f4:	b083      	sub	sp, #12
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80101fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80101fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010202:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	4313      	orrs	r3, r2
 801020e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8010212:	bf00      	nop
 8010214:	370c      	adds	r7, #12
 8010216:	46bd      	mov	sp, r7
 8010218:	bc80      	pop	{r7}
 801021a:	4770      	bx	lr

0801021c <LL_RCC_SetRTCClockSource>:
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8010224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801022c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010230:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	4313      	orrs	r3, r2
 8010238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	bc80      	pop	{r7}
 8010244:	4770      	bx	lr

08010246 <LL_RCC_GetRTCClockSource>:
{
 8010246:	b480      	push	{r7}
 8010248:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 801024a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801024e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010252:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8010256:	4618      	mov	r0, r3
 8010258:	46bd      	mov	sp, r7
 801025a:	bc80      	pop	{r7}
 801025c:	4770      	bx	lr

0801025e <LL_RCC_ForceBackupDomainReset>:
{
 801025e:	b480      	push	{r7}
 8010260:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8010262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801026a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801026e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8010276:	bf00      	nop
 8010278:	46bd      	mov	sp, r7
 801027a:	bc80      	pop	{r7}
 801027c:	4770      	bx	lr

0801027e <LL_RCC_ReleaseBackupDomainReset>:
{
 801027e:	b480      	push	{r7}
 8010280:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8010282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801028a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801028e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8010296:	bf00      	nop
 8010298:	46bd      	mov	sp, r7
 801029a:	bc80      	pop	{r7}
 801029c:	4770      	bx	lr
	...

080102a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80102a8:	2300      	movs	r3, #0
 80102aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80102ac:	2300      	movs	r3, #0
 80102ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80102b0:	2300      	movs	r3, #0
 80102b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d058      	beq.n	8010372 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80102c0:	f7fe fde2 	bl	800ee88 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80102c4:	f7fc fe68 	bl	800cf98 <HAL_GetTick>
 80102c8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80102ca:	e009      	b.n	80102e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80102cc:	f7fc fe64 	bl	800cf98 <HAL_GetTick>
 80102d0:	4602      	mov	r2, r0
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	1ad3      	subs	r3, r2, r3
 80102d6:	2b02      	cmp	r3, #2
 80102d8:	d902      	bls.n	80102e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80102da:	2303      	movs	r3, #3
 80102dc:	74fb      	strb	r3, [r7, #19]
        break;
 80102de:	e006      	b.n	80102ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80102e0:	4b7b      	ldr	r3, [pc, #492]	; (80104d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102ec:	d1ee      	bne.n	80102cc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80102ee:	7cfb      	ldrb	r3, [r7, #19]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d13c      	bne.n	801036e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80102f4:	f7ff ffa7 	bl	8010246 <LL_RCC_GetRTCClockSource>
 80102f8:	4602      	mov	r2, r0
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102fe:	429a      	cmp	r2, r3
 8010300:	d00f      	beq.n	8010322 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801030a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801030e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010310:	f7ff ffa5 	bl	801025e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010314:	f7ff ffb3 	bl	801027e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	f003 0302 	and.w	r3, r3, #2
 8010328:	2b00      	cmp	r3, #0
 801032a:	d014      	beq.n	8010356 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801032c:	f7fc fe34 	bl	800cf98 <HAL_GetTick>
 8010330:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8010332:	e00b      	b.n	801034c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010334:	f7fc fe30 	bl	800cf98 <HAL_GetTick>
 8010338:	4602      	mov	r2, r0
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	1ad3      	subs	r3, r2, r3
 801033e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010342:	4293      	cmp	r3, r2
 8010344:	d902      	bls.n	801034c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8010346:	2303      	movs	r3, #3
 8010348:	74fb      	strb	r3, [r7, #19]
            break;
 801034a:	e004      	b.n	8010356 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 801034c:	f7ff feb4 	bl	80100b8 <LL_RCC_LSE_IsReady>
 8010350:	4603      	mov	r3, r0
 8010352:	2b01      	cmp	r3, #1
 8010354:	d1ee      	bne.n	8010334 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8010356:	7cfb      	ldrb	r3, [r7, #19]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d105      	bne.n	8010368 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010360:	4618      	mov	r0, r3
 8010362:	f7ff ff5b 	bl	801021c <LL_RCC_SetRTCClockSource>
 8010366:	e004      	b.n	8010372 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010368:	7cfb      	ldrb	r3, [r7, #19]
 801036a:	74bb      	strb	r3, [r7, #18]
 801036c:	e001      	b.n	8010372 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801036e:	7cfb      	ldrb	r3, [r7, #19]
 8010370:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f003 0301 	and.w	r3, r3, #1
 801037a:	2b00      	cmp	r3, #0
 801037c:	d004      	beq.n	8010388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	4618      	mov	r0, r3
 8010384:	f7ff fea9 	bl	80100da <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f003 0302 	and.w	r3, r3, #2
 8010390:	2b00      	cmp	r3, #0
 8010392:	d004      	beq.n	801039e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	689b      	ldr	r3, [r3, #8]
 8010398:	4618      	mov	r0, r3
 801039a:	f7ff fe9e 	bl	80100da <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f003 0320 	and.w	r3, r3, #32
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d004      	beq.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	691b      	ldr	r3, [r3, #16]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7ff fec0 	bl	8010134 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d004      	beq.n	80103ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6a1b      	ldr	r3, [r3, #32]
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7ff fee6 	bl	8010196 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d004      	beq.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103da:	4618      	mov	r0, r3
 80103dc:	f7ff fedb 	bl	8010196 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d004      	beq.n	80103f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7ff fed0 	bl	8010196 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d004      	beq.n	801040c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	695b      	ldr	r3, [r3, #20]
 8010406:	4618      	mov	r0, r3
 8010408:	f7ff fea9 	bl	801015e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010414:	2b00      	cmp	r3, #0
 8010416:	d004      	beq.n	8010422 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	699b      	ldr	r3, [r3, #24]
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff fe9e 	bl	801015e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801042a:	2b00      	cmp	r3, #0
 801042c:	d004      	beq.n	8010438 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	69db      	ldr	r3, [r3, #28]
 8010432:	4618      	mov	r0, r3
 8010434:	f7ff fe93 	bl	801015e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f003 0310 	and.w	r3, r3, #16
 8010440:	2b00      	cmp	r3, #0
 8010442:	d011      	beq.n	8010468 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	4618      	mov	r0, r3
 801044a:	f7ff fe5e 	bl	801010a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010456:	d107      	bne.n	8010468 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8010458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010466:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010470:	2b00      	cmp	r3, #0
 8010472:	d010      	beq.n	8010496 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010478:	4618      	mov	r0, r3
 801047a:	f7ff fea5 	bl	80101c8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010482:	2b00      	cmp	r3, #0
 8010484:	d107      	bne.n	8010496 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8010486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010494:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d011      	beq.n	80104c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7ff fea3 	bl	80101f2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104b4:	d107      	bne.n	80104c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80104b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80104c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80104c4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80104c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3718      	adds	r7, #24
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	58000400 	.word	0x58000400

080104d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80104dc:	2301      	movs	r3, #1
 80104de:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d071      	beq.n	80105ca <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d106      	bne.n	8010500 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2200      	movs	r2, #0
 80104f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f7fa f862 	bl	800a5c4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2202      	movs	r2, #2
 8010504:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010508:	4b32      	ldr	r3, [pc, #200]	; (80105d4 <HAL_RTC_Init+0x100>)
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	f003 0310 	and.w	r3, r3, #16
 8010510:	2b10      	cmp	r3, #16
 8010512:	d051      	beq.n	80105b8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010514:	4b2f      	ldr	r3, [pc, #188]	; (80105d4 <HAL_RTC_Init+0x100>)
 8010516:	22ca      	movs	r2, #202	; 0xca
 8010518:	625a      	str	r2, [r3, #36]	; 0x24
 801051a:	4b2e      	ldr	r3, [pc, #184]	; (80105d4 <HAL_RTC_Init+0x100>)
 801051c:	2253      	movs	r2, #83	; 0x53
 801051e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f000 faa3 	bl	8010a6c <RTC_EnterInitMode>
 8010526:	4603      	mov	r3, r0
 8010528:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 801052a:	7bfb      	ldrb	r3, [r7, #15]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d13f      	bne.n	80105b0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8010530:	4b28      	ldr	r3, [pc, #160]	; (80105d4 <HAL_RTC_Init+0x100>)
 8010532:	699b      	ldr	r3, [r3, #24]
 8010534:	4a27      	ldr	r2, [pc, #156]	; (80105d4 <HAL_RTC_Init+0x100>)
 8010536:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 801053a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801053e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8010540:	4b24      	ldr	r3, [pc, #144]	; (80105d4 <HAL_RTC_Init+0x100>)
 8010542:	699a      	ldr	r2, [r3, #24]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6859      	ldr	r1, [r3, #4]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	691b      	ldr	r3, [r3, #16]
 801054c:	4319      	orrs	r1, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	699b      	ldr	r3, [r3, #24]
 8010552:	430b      	orrs	r3, r1
 8010554:	491f      	ldr	r1, [pc, #124]	; (80105d4 <HAL_RTC_Init+0x100>)
 8010556:	4313      	orrs	r3, r2
 8010558:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	68da      	ldr	r2, [r3, #12]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	041b      	lsls	r3, r3, #16
 8010564:	491b      	ldr	r1, [pc, #108]	; (80105d4 <HAL_RTC_Init+0x100>)
 8010566:	4313      	orrs	r3, r2
 8010568:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 801056a:	4b1a      	ldr	r3, [pc, #104]	; (80105d4 <HAL_RTC_Init+0x100>)
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801057a:	430b      	orrs	r3, r1
 801057c:	4915      	ldr	r1, [pc, #84]	; (80105d4 <HAL_RTC_Init+0x100>)
 801057e:	4313      	orrs	r3, r2
 8010580:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 faa6 	bl	8010ad4 <RTC_ExitInitMode>
 8010588:	4603      	mov	r3, r0
 801058a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 801058c:	7bfb      	ldrb	r3, [r7, #15]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d10e      	bne.n	80105b0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8010592:	4b10      	ldr	r3, [pc, #64]	; (80105d4 <HAL_RTC_Init+0x100>)
 8010594:	699b      	ldr	r3, [r3, #24]
 8010596:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6a19      	ldr	r1, [r3, #32]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	69db      	ldr	r3, [r3, #28]
 80105a2:	4319      	orrs	r1, r3
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	695b      	ldr	r3, [r3, #20]
 80105a8:	430b      	orrs	r3, r1
 80105aa:	490a      	ldr	r1, [pc, #40]	; (80105d4 <HAL_RTC_Init+0x100>)
 80105ac:	4313      	orrs	r3, r2
 80105ae:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80105b0:	4b08      	ldr	r3, [pc, #32]	; (80105d4 <HAL_RTC_Init+0x100>)
 80105b2:	22ff      	movs	r2, #255	; 0xff
 80105b4:	625a      	str	r2, [r3, #36]	; 0x24
 80105b6:	e001      	b.n	80105bc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80105b8:	2300      	movs	r3, #0
 80105ba:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80105bc:	7bfb      	ldrb	r3, [r7, #15]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d103      	bne.n	80105ca <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2201      	movs	r2, #1
 80105c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80105ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3710      	adds	r7, #16
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}
 80105d4:	40002800 	.word	0x40002800

080105d8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80105d8:	b590      	push	{r4, r7, lr}
 80105da:	b087      	sub	sp, #28
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d101      	bne.n	80105f2 <HAL_RTC_SetTime+0x1a>
 80105ee:	2302      	movs	r3, #2
 80105f0:	e088      	b.n	8010704 <HAL_RTC_SetTime+0x12c>
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2201      	movs	r2, #1
 80105f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2202      	movs	r2, #2
 80105fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010602:	4b42      	ldr	r3, [pc, #264]	; (801070c <HAL_RTC_SetTime+0x134>)
 8010604:	22ca      	movs	r2, #202	; 0xca
 8010606:	625a      	str	r2, [r3, #36]	; 0x24
 8010608:	4b40      	ldr	r3, [pc, #256]	; (801070c <HAL_RTC_SetTime+0x134>)
 801060a:	2253      	movs	r2, #83	; 0x53
 801060c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801060e:	68f8      	ldr	r0, [r7, #12]
 8010610:	f000 fa2c 	bl	8010a6c <RTC_EnterInitMode>
 8010614:	4603      	mov	r3, r0
 8010616:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010618:	7cfb      	ldrb	r3, [r7, #19]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d15e      	bne.n	80106dc <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 801061e:	4b3b      	ldr	r3, [pc, #236]	; (801070c <HAL_RTC_SetTime+0x134>)
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801062a:	d057      	beq.n	80106dc <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d125      	bne.n	801067e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8010632:	4b36      	ldr	r3, [pc, #216]	; (801070c <HAL_RTC_SetTime+0x134>)
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801063a:	2b00      	cmp	r3, #0
 801063c:	d102      	bne.n	8010644 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	2200      	movs	r2, #0
 8010642:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	4618      	mov	r0, r3
 801064a:	f000 fa81 	bl	8010b50 <RTC_ByteToBcd2>
 801064e:	4603      	mov	r3, r0
 8010650:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	785b      	ldrb	r3, [r3, #1]
 8010656:	4618      	mov	r0, r3
 8010658:	f000 fa7a 	bl	8010b50 <RTC_ByteToBcd2>
 801065c:	4603      	mov	r3, r0
 801065e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010660:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	789b      	ldrb	r3, [r3, #2]
 8010666:	4618      	mov	r0, r3
 8010668:	f000 fa72 	bl	8010b50 <RTC_ByteToBcd2>
 801066c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801066e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	78db      	ldrb	r3, [r3, #3]
 8010676:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010678:	4313      	orrs	r3, r2
 801067a:	617b      	str	r3, [r7, #20]
 801067c:	e017      	b.n	80106ae <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 801067e:	4b23      	ldr	r3, [pc, #140]	; (801070c <HAL_RTC_SetTime+0x134>)
 8010680:	699b      	ldr	r3, [r3, #24]
 8010682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010686:	2b00      	cmp	r3, #0
 8010688:	d102      	bne.n	8010690 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	2200      	movs	r2, #0
 801068e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	781b      	ldrb	r3, [r3, #0]
 8010694:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	785b      	ldrb	r3, [r3, #1]
 801069a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801069c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 801069e:	68ba      	ldr	r2, [r7, #8]
 80106a0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80106a2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	78db      	ldrb	r3, [r3, #3]
 80106a8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80106aa:	4313      	orrs	r3, r2
 80106ac:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80106ae:	4a17      	ldr	r2, [pc, #92]	; (801070c <HAL_RTC_SetTime+0x134>)
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80106b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80106ba:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80106bc:	4b13      	ldr	r3, [pc, #76]	; (801070c <HAL_RTC_SetTime+0x134>)
 80106be:	699b      	ldr	r3, [r3, #24]
 80106c0:	4a12      	ldr	r2, [pc, #72]	; (801070c <HAL_RTC_SetTime+0x134>)
 80106c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80106c6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80106c8:	4b10      	ldr	r3, [pc, #64]	; (801070c <HAL_RTC_SetTime+0x134>)
 80106ca:	699a      	ldr	r2, [r3, #24]
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	68d9      	ldr	r1, [r3, #12]
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	691b      	ldr	r3, [r3, #16]
 80106d4:	430b      	orrs	r3, r1
 80106d6:	490d      	ldr	r1, [pc, #52]	; (801070c <HAL_RTC_SetTime+0x134>)
 80106d8:	4313      	orrs	r3, r2
 80106da:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80106dc:	68f8      	ldr	r0, [r7, #12]
 80106de:	f000 f9f9 	bl	8010ad4 <RTC_ExitInitMode>
 80106e2:	4603      	mov	r3, r0
 80106e4:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80106e6:	4b09      	ldr	r3, [pc, #36]	; (801070c <HAL_RTC_SetTime+0x134>)
 80106e8:	22ff      	movs	r2, #255	; 0xff
 80106ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80106ec:	7cfb      	ldrb	r3, [r7, #19]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d103      	bne.n	80106fa <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2201      	movs	r2, #1
 80106f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2200      	movs	r2, #0
 80106fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8010702:	7cfb      	ldrb	r3, [r7, #19]
}
 8010704:	4618      	mov	r0, r3
 8010706:	371c      	adds	r7, #28
 8010708:	46bd      	mov	sp, r7
 801070a:	bd90      	pop	{r4, r7, pc}
 801070c:	40002800 	.word	0x40002800

08010710 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010710:	b590      	push	{r4, r7, lr}
 8010712:	b087      	sub	sp, #28
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010722:	2b01      	cmp	r3, #1
 8010724:	d101      	bne.n	801072a <HAL_RTC_SetDate+0x1a>
 8010726:	2302      	movs	r3, #2
 8010728:	e071      	b.n	801080e <HAL_RTC_SetDate+0xfe>
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2201      	movs	r2, #1
 801072e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2202      	movs	r2, #2
 8010736:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d10e      	bne.n	801075e <HAL_RTC_SetDate+0x4e>
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	785b      	ldrb	r3, [r3, #1]
 8010744:	f003 0310 	and.w	r3, r3, #16
 8010748:	2b00      	cmp	r3, #0
 801074a:	d008      	beq.n	801075e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	785b      	ldrb	r3, [r3, #1]
 8010750:	f023 0310 	bic.w	r3, r3, #16
 8010754:	b2db      	uxtb	r3, r3
 8010756:	330a      	adds	r3, #10
 8010758:	b2da      	uxtb	r2, r3
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d11c      	bne.n	801079e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	78db      	ldrb	r3, [r3, #3]
 8010768:	4618      	mov	r0, r3
 801076a:	f000 f9f1 	bl	8010b50 <RTC_ByteToBcd2>
 801076e:	4603      	mov	r3, r0
 8010770:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	785b      	ldrb	r3, [r3, #1]
 8010776:	4618      	mov	r0, r3
 8010778:	f000 f9ea 	bl	8010b50 <RTC_ByteToBcd2>
 801077c:	4603      	mov	r3, r0
 801077e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010780:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	789b      	ldrb	r3, [r3, #2]
 8010786:	4618      	mov	r0, r3
 8010788:	f000 f9e2 	bl	8010b50 <RTC_ByteToBcd2>
 801078c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801078e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8010798:	4313      	orrs	r3, r2
 801079a:	617b      	str	r3, [r7, #20]
 801079c:	e00e      	b.n	80107bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	78db      	ldrb	r3, [r3, #3]
 80107a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	785b      	ldrb	r3, [r3, #1]
 80107a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80107aa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80107ac:	68ba      	ldr	r2, [r7, #8]
 80107ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80107b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80107b8:	4313      	orrs	r3, r2
 80107ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80107bc:	4b16      	ldr	r3, [pc, #88]	; (8010818 <HAL_RTC_SetDate+0x108>)
 80107be:	22ca      	movs	r2, #202	; 0xca
 80107c0:	625a      	str	r2, [r3, #36]	; 0x24
 80107c2:	4b15      	ldr	r3, [pc, #84]	; (8010818 <HAL_RTC_SetDate+0x108>)
 80107c4:	2253      	movs	r2, #83	; 0x53
 80107c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80107c8:	68f8      	ldr	r0, [r7, #12]
 80107ca:	f000 f94f 	bl	8010a6c <RTC_EnterInitMode>
 80107ce:	4603      	mov	r3, r0
 80107d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80107d2:	7cfb      	ldrb	r3, [r7, #19]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d10b      	bne.n	80107f0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80107d8:	4a0f      	ldr	r2, [pc, #60]	; (8010818 <HAL_RTC_SetDate+0x108>)
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80107e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80107e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80107e6:	68f8      	ldr	r0, [r7, #12]
 80107e8:	f000 f974 	bl	8010ad4 <RTC_ExitInitMode>
 80107ec:	4603      	mov	r3, r0
 80107ee:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80107f0:	4b09      	ldr	r3, [pc, #36]	; (8010818 <HAL_RTC_SetDate+0x108>)
 80107f2:	22ff      	movs	r2, #255	; 0xff
 80107f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80107f6:	7cfb      	ldrb	r3, [r7, #19]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d103      	bne.n	8010804 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	2201      	movs	r2, #1
 8010800:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	2200      	movs	r2, #0
 8010808:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 801080c:	7cfb      	ldrb	r3, [r7, #19]
}
 801080e:	4618      	mov	r0, r3
 8010810:	371c      	adds	r7, #28
 8010812:	46bd      	mov	sp, r7
 8010814:	bd90      	pop	{r4, r7, pc}
 8010816:	bf00      	nop
 8010818:	40002800 	.word	0x40002800

0801081c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 801081c:	b590      	push	{r4, r7, lr}
 801081e:	b087      	sub	sp, #28
 8010820:	af00      	add	r7, sp, #0
 8010822:	60f8      	str	r0, [r7, #12]
 8010824:	60b9      	str	r1, [r7, #8]
 8010826:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8010828:	2300      	movs	r3, #0
 801082a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010832:	2b01      	cmp	r3, #1
 8010834:	d101      	bne.n	801083a <HAL_RTC_SetAlarm+0x1e>
 8010836:	2302      	movs	r3, #2
 8010838:	e0eb      	b.n	8010a12 <HAL_RTC_SetAlarm+0x1f6>
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2201      	movs	r2, #1
 801083e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2202      	movs	r2, #2
 8010846:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 801084a:	4b74      	ldr	r3, [pc, #464]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 801084c:	68db      	ldr	r3, [r3, #12]
 801084e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010852:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801085a:	d06a      	beq.n	8010932 <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d13a      	bne.n	80108d8 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8010862:	4b6e      	ldr	r3, [pc, #440]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 8010864:	699b      	ldr	r3, [r3, #24]
 8010866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801086a:	2b00      	cmp	r3, #0
 801086c:	d102      	bne.n	8010874 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	2200      	movs	r2, #0
 8010872:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	695b      	ldr	r3, [r3, #20]
 8010878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	4618      	mov	r0, r3
 8010882:	f000 f965 	bl	8010b50 <RTC_ByteToBcd2>
 8010886:	4603      	mov	r3, r0
 8010888:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	785b      	ldrb	r3, [r3, #1]
 801088e:	4618      	mov	r0, r3
 8010890:	f000 f95e 	bl	8010b50 <RTC_ByteToBcd2>
 8010894:	4603      	mov	r3, r0
 8010896:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8010898:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	789b      	ldrb	r3, [r3, #2]
 801089e:	4618      	mov	r0, r3
 80108a0:	f000 f956 	bl	8010b50 <RTC_ByteToBcd2>
 80108a4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80108a6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	78db      	ldrb	r3, [r3, #3]
 80108ae:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80108b0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80108ba:	4618      	mov	r0, r3
 80108bc:	f000 f948 	bl	8010b50 <RTC_ByteToBcd2>
 80108c0:	4603      	mov	r3, r0
 80108c2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80108c4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80108cc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80108d2:	4313      	orrs	r3, r2
 80108d4:	617b      	str	r3, [r7, #20]
 80108d6:	e02c      	b.n	8010932 <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	695b      	ldr	r3, [r3, #20]
 80108dc:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80108e0:	d00d      	beq.n	80108fe <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	695b      	ldr	r3, [r3, #20]
 80108e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80108ea:	d008      	beq.n	80108fe <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80108ec:	4b4b      	ldr	r3, [pc, #300]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80108ee:	699b      	ldr	r3, [r3, #24]
 80108f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d102      	bne.n	80108fe <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	2200      	movs	r2, #0
 80108fc:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	785b      	ldrb	r3, [r3, #1]
 8010908:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801090a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 801090c:	68ba      	ldr	r2, [r7, #8]
 801090e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8010910:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	78db      	ldrb	r3, [r3, #3]
 8010916:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8010918:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010920:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8010922:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8010928:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 801092e:	4313      	orrs	r3, r2
 8010930:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010932:	4b3a      	ldr	r3, [pc, #232]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 8010934:	22ca      	movs	r2, #202	; 0xca
 8010936:	625a      	str	r2, [r3, #36]	; 0x24
 8010938:	4b38      	ldr	r3, [pc, #224]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 801093a:	2253      	movs	r2, #83	; 0x53
 801093c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010946:	d12c      	bne.n	80109a2 <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8010948:	4b34      	ldr	r3, [pc, #208]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 801094a:	699b      	ldr	r3, [r3, #24]
 801094c:	4a33      	ldr	r2, [pc, #204]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 801094e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010952:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8010954:	4b31      	ldr	r3, [pc, #196]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 8010956:	2201      	movs	r2, #1
 8010958:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010960:	d107      	bne.n	8010972 <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	699a      	ldr	r2, [r3, #24]
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	69db      	ldr	r3, [r3, #28]
 801096a:	492c      	ldr	r1, [pc, #176]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 801096c:	4313      	orrs	r3, r2
 801096e:	644b      	str	r3, [r1, #68]	; 0x44
 8010970:	e006      	b.n	8010980 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8010972:	4a2a      	ldr	r2, [pc, #168]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8010978:	4a28      	ldr	r2, [pc, #160]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	699b      	ldr	r3, [r3, #24]
 801097e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8010980:	4a26      	ldr	r2, [pc, #152]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801098c:	f043 0201 	orr.w	r2, r3, #1
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8010994:	4b21      	ldr	r3, [pc, #132]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 8010996:	699b      	ldr	r3, [r3, #24]
 8010998:	4a20      	ldr	r2, [pc, #128]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 801099a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801099e:	6193      	str	r3, [r2, #24]
 80109a0:	e02b      	b.n	80109fa <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80109a2:	4b1e      	ldr	r3, [pc, #120]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80109a4:	699b      	ldr	r3, [r3, #24]
 80109a6:	4a1d      	ldr	r2, [pc, #116]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80109a8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80109ac:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80109ae:	4b1b      	ldr	r3, [pc, #108]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80109b0:	2202      	movs	r2, #2
 80109b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109ba:	d107      	bne.n	80109cc <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	699a      	ldr	r2, [r3, #24]
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	69db      	ldr	r3, [r3, #28]
 80109c4:	4915      	ldr	r1, [pc, #84]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80109c6:	4313      	orrs	r3, r2
 80109c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80109ca:	e006      	b.n	80109da <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80109cc:	4a13      	ldr	r2, [pc, #76]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80109d2:	4a12      	ldr	r2, [pc, #72]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	699b      	ldr	r3, [r3, #24]
 80109d8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80109da:	4a10      	ldr	r2, [pc, #64]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109e6:	f043 0202 	orr.w	r2, r3, #2
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 80109ee:	4b0b      	ldr	r3, [pc, #44]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80109f0:	699b      	ldr	r3, [r3, #24]
 80109f2:	4a0a      	ldr	r2, [pc, #40]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80109f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80109f8:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80109fa:	4b08      	ldr	r3, [pc, #32]	; (8010a1c <HAL_RTC_SetAlarm+0x200>)
 80109fc:	22ff      	movs	r2, #255	; 0xff
 80109fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2201      	movs	r2, #1
 8010a04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	371c      	adds	r7, #28
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd90      	pop	{r4, r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	40002800 	.word	0x40002800

08010a20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8010a28:	4b0f      	ldr	r3, [pc, #60]	; (8010a68 <HAL_RTC_WaitForSynchro+0x48>)
 8010a2a:	68db      	ldr	r3, [r3, #12]
 8010a2c:	4a0e      	ldr	r2, [pc, #56]	; (8010a68 <HAL_RTC_WaitForSynchro+0x48>)
 8010a2e:	f023 0320 	bic.w	r3, r3, #32
 8010a32:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8010a34:	f7fc fab0 	bl	800cf98 <HAL_GetTick>
 8010a38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010a3a:	e009      	b.n	8010a50 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010a3c:	f7fc faac 	bl	800cf98 <HAL_GetTick>
 8010a40:	4602      	mov	r2, r0
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	1ad3      	subs	r3, r2, r3
 8010a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010a4a:	d901      	bls.n	8010a50 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8010a4c:	2303      	movs	r3, #3
 8010a4e:	e006      	b.n	8010a5e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8010a50:	4b05      	ldr	r3, [pc, #20]	; (8010a68 <HAL_RTC_WaitForSynchro+0x48>)
 8010a52:	68db      	ldr	r3, [r3, #12]
 8010a54:	f003 0320 	and.w	r3, r3, #32
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d0ef      	beq.n	8010a3c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8010a5c:	2300      	movs	r3, #0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3710      	adds	r7, #16
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	40002800 	.word	0x40002800

08010a6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010a74:	2300      	movs	r3, #0
 8010a76:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8010a78:	4b15      	ldr	r3, [pc, #84]	; (8010ad0 <RTC_EnterInitMode+0x64>)
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d120      	bne.n	8010ac6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010a84:	4b12      	ldr	r3, [pc, #72]	; (8010ad0 <RTC_EnterInitMode+0x64>)
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	4a11      	ldr	r2, [pc, #68]	; (8010ad0 <RTC_EnterInitMode+0x64>)
 8010a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a8e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8010a90:	f7fc fa82 	bl	800cf98 <HAL_GetTick>
 8010a94:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010a96:	e00d      	b.n	8010ab4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010a98:	f7fc fa7e 	bl	800cf98 <HAL_GetTick>
 8010a9c:	4602      	mov	r2, r0
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	1ad3      	subs	r3, r2, r3
 8010aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010aa6:	d905      	bls.n	8010ab4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8010aa8:	2303      	movs	r3, #3
 8010aaa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2203      	movs	r2, #3
 8010ab0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8010ab4:	4b06      	ldr	r3, [pc, #24]	; (8010ad0 <RTC_EnterInitMode+0x64>)
 8010ab6:	68db      	ldr	r3, [r3, #12]
 8010ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d102      	bne.n	8010ac6 <RTC_EnterInitMode+0x5a>
 8010ac0:	7bfb      	ldrb	r3, [r7, #15]
 8010ac2:	2b03      	cmp	r3, #3
 8010ac4:	d1e8      	bne.n	8010a98 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3710      	adds	r7, #16
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	40002800 	.word	0x40002800

08010ad4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b084      	sub	sp, #16
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010adc:	2300      	movs	r3, #0
 8010ade:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8010ae0:	4b1a      	ldr	r3, [pc, #104]	; (8010b4c <RTC_ExitInitMode+0x78>)
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	4a19      	ldr	r2, [pc, #100]	; (8010b4c <RTC_ExitInitMode+0x78>)
 8010ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010aea:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8010aec:	4b17      	ldr	r3, [pc, #92]	; (8010b4c <RTC_ExitInitMode+0x78>)
 8010aee:	699b      	ldr	r3, [r3, #24]
 8010af0:	f003 0320 	and.w	r3, r3, #32
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d10c      	bne.n	8010b12 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f7ff ff91 	bl	8010a20 <HAL_RTC_WaitForSynchro>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d01e      	beq.n	8010b42 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2203      	movs	r2, #3
 8010b08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8010b0c:	2303      	movs	r3, #3
 8010b0e:	73fb      	strb	r3, [r7, #15]
 8010b10:	e017      	b.n	8010b42 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010b12:	4b0e      	ldr	r3, [pc, #56]	; (8010b4c <RTC_ExitInitMode+0x78>)
 8010b14:	699b      	ldr	r3, [r3, #24]
 8010b16:	4a0d      	ldr	r2, [pc, #52]	; (8010b4c <RTC_ExitInitMode+0x78>)
 8010b18:	f023 0320 	bic.w	r3, r3, #32
 8010b1c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f7ff ff7e 	bl	8010a20 <HAL_RTC_WaitForSynchro>
 8010b24:	4603      	mov	r3, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d005      	beq.n	8010b36 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2203      	movs	r2, #3
 8010b2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8010b32:	2303      	movs	r3, #3
 8010b34:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010b36:	4b05      	ldr	r3, [pc, #20]	; (8010b4c <RTC_ExitInitMode+0x78>)
 8010b38:	699b      	ldr	r3, [r3, #24]
 8010b3a:	4a04      	ldr	r2, [pc, #16]	; (8010b4c <RTC_ExitInitMode+0x78>)
 8010b3c:	f043 0320 	orr.w	r3, r3, #32
 8010b40:	6193      	str	r3, [r2, #24]
  }

  return status;
 8010b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3710      	adds	r7, #16
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}
 8010b4c:	40002800 	.word	0x40002800

08010b50 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b085      	sub	sp, #20
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	4603      	mov	r3, r0
 8010b58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8010b5e:	79fb      	ldrb	r3, [r7, #7]
 8010b60:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8010b62:	e005      	b.n	8010b70 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	3301      	adds	r3, #1
 8010b68:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8010b6a:	7afb      	ldrb	r3, [r7, #11]
 8010b6c:	3b0a      	subs	r3, #10
 8010b6e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8010b70:	7afb      	ldrb	r3, [r7, #11]
 8010b72:	2b09      	cmp	r3, #9
 8010b74:	d8f6      	bhi.n	8010b64 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	011b      	lsls	r3, r3, #4
 8010b7c:	b2da      	uxtb	r2, r3
 8010b7e:	7afb      	ldrb	r3, [r7, #11]
 8010b80:	4313      	orrs	r3, r2
 8010b82:	b2db      	uxtb	r3, r3
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3714      	adds	r7, #20
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bc80      	pop	{r7}
 8010b8c:	4770      	bx	lr

08010b8e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b084      	sub	sp, #16
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d101      	bne.n	8010ba0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	e0c6      	b.n	8010d2e <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d108      	bne.n	8010bba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010bb0:	d009      	beq.n	8010bc6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	61da      	str	r2, [r3, #28]
 8010bb8:	e005      	b.n	8010bc6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d106      	bne.n	8010be0 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f7f9 fd1e 	bl	800a61c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2202      	movs	r2, #2
 8010be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010bf6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010c00:	d902      	bls.n	8010c08 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8010c02:	2300      	movs	r3, #0
 8010c04:	60fb      	str	r3, [r7, #12]
 8010c06:	e002      	b.n	8010c0e <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8010c16:	d007      	beq.n	8010c28 <HAL_SPI_Init+0x9a>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010c20:	d002      	beq.n	8010c28 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2200      	movs	r2, #0
 8010c26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	689b      	ldr	r3, [r3, #8]
 8010c34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8010c38:	431a      	orrs	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	f003 0302 	and.w	r3, r3, #2
 8010c42:	431a      	orrs	r2, r3
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	695b      	ldr	r3, [r3, #20]
 8010c48:	f003 0301 	and.w	r3, r3, #1
 8010c4c:	431a      	orrs	r2, r3
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	699b      	ldr	r3, [r3, #24]
 8010c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010c56:	431a      	orrs	r2, r3
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	69db      	ldr	r3, [r3, #28]
 8010c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010c60:	431a      	orrs	r2, r3
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6a1b      	ldr	r3, [r3, #32]
 8010c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c6a:	ea42 0103 	orr.w	r1, r2, r3
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	430a      	orrs	r2, r1
 8010c7c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c86:	d11b      	bne.n	8010cc0 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d10b      	bne.n	8010ca8 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010c98:	d903      	bls.n	8010ca2 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2202      	movs	r2, #2
 8010c9e:	631a      	str	r2, [r3, #48]	; 0x30
 8010ca0:	e002      	b.n	8010ca8 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cac:	2b02      	cmp	r3, #2
 8010cae:	d107      	bne.n	8010cc0 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010cbe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	699b      	ldr	r3, [r3, #24]
 8010cc4:	0c1b      	lsrs	r3, r3, #16
 8010cc6:	f003 0204 	and.w	r2, r3, #4
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cce:	f003 0310 	and.w	r3, r3, #16
 8010cd2:	431a      	orrs	r2, r3
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cd8:	f003 0308 	and.w	r3, r3, #8
 8010cdc:	431a      	orrs	r2, r3
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	68db      	ldr	r3, [r3, #12]
 8010ce2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8010ce6:	ea42 0103 	orr.w	r1, r2, r3
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	430a      	orrs	r2, r1
 8010cf6:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d00:	d105      	bne.n	8010d0e <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	b292      	uxth	r2, r2
 8010d0c:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	69da      	ldr	r2, [r3, #28]
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2200      	movs	r2, #0
 8010d22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2201      	movs	r2, #1
 8010d28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b088      	sub	sp, #32
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	60f8      	str	r0, [r7, #12]
 8010d3e:	60b9      	str	r1, [r7, #8]
 8010d40:	603b      	str	r3, [r7, #0]
 8010d42:	4613      	mov	r3, r2
 8010d44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010d46:	2300      	movs	r3, #0
 8010d48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d101      	bne.n	8010d58 <HAL_SPI_Transmit+0x22>
 8010d54:	2302      	movs	r3, #2
 8010d56:	e17a      	b.n	801104e <HAL_SPI_Transmit+0x318>
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010d60:	f7fc f91a 	bl	800cf98 <HAL_GetTick>
 8010d64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8010d66:	88fb      	ldrh	r3, [r7, #6]
 8010d68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	d002      	beq.n	8010d7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8010d76:	2302      	movs	r3, #2
 8010d78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010d7a:	e15f      	b.n	801103c <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d002      	beq.n	8010d88 <HAL_SPI_Transmit+0x52>
 8010d82:	88fb      	ldrh	r3, [r7, #6]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d102      	bne.n	8010d8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8010d8c:	e156      	b.n	801103c <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	2203      	movs	r2, #3
 8010d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	88fa      	ldrh	r2, [r7, #6]
 8010da6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	88fa      	ldrh	r2, [r7, #6]
 8010dac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	2200      	movs	r2, #0
 8010db2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2200      	movs	r2, #0
 8010db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	689b      	ldr	r3, [r3, #8]
 8010dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010dd8:	d10f      	bne.n	8010dfa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	681a      	ldr	r2, [r3, #0]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010de8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010df8:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e02:	d10f      	bne.n	8010e24 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	681a      	ldr	r2, [r3, #0]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010e12:	601a      	str	r2, [r3, #0]
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010e22:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e2e:	2b40      	cmp	r3, #64	; 0x40
 8010e30:	d007      	beq.n	8010e42 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8010e4a:	d94b      	bls.n	8010ee4 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d002      	beq.n	8010e5a <HAL_SPI_Transmit+0x124>
 8010e54:	8afb      	ldrh	r3, [r7, #22]
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	d13e      	bne.n	8010ed8 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e5e:	881a      	ldrh	r2, [r3, #0]
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e6a:	1c9a      	adds	r2, r3, #2
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	3b01      	subs	r3, #1
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010e7e:	e02b      	b.n	8010ed8 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	689b      	ldr	r3, [r3, #8]
 8010e86:	f003 0302 	and.w	r3, r3, #2
 8010e8a:	2b02      	cmp	r3, #2
 8010e8c:	d112      	bne.n	8010eb4 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e92:	881a      	ldrh	r2, [r3, #0]
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e9e:	1c9a      	adds	r2, r3, #2
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010eb2:	e011      	b.n	8010ed8 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010eb4:	f7fc f870 	bl	800cf98 <HAL_GetTick>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	1ad3      	subs	r3, r2, r3
 8010ebe:	683a      	ldr	r2, [r7, #0]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d803      	bhi.n	8010ecc <HAL_SPI_Transmit+0x196>
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eca:	d102      	bne.n	8010ed2 <HAL_SPI_Transmit+0x19c>
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d102      	bne.n	8010ed8 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8010ed2:	2303      	movs	r3, #3
 8010ed4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010ed6:	e0b1      	b.n	801103c <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d1ce      	bne.n	8010e80 <HAL_SPI_Transmit+0x14a>
 8010ee2:	e07c      	b.n	8010fde <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d002      	beq.n	8010ef2 <HAL_SPI_Transmit+0x1bc>
 8010eec:	8afb      	ldrh	r3, [r7, #22]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d170      	bne.n	8010fd4 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ef6:	b29b      	uxth	r3, r3
 8010ef8:	2b01      	cmp	r3, #1
 8010efa:	d912      	bls.n	8010f22 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f00:	881a      	ldrh	r2, [r3, #0]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f0c:	1c9a      	adds	r2, r3, #2
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	3b02      	subs	r3, #2
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010f20:	e058      	b.n	8010fd4 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	330c      	adds	r3, #12
 8010f2c:	7812      	ldrb	r2, [r2, #0]
 8010f2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f34:	1c5a      	adds	r2, r3, #1
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	3b01      	subs	r3, #1
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8010f48:	e044      	b.n	8010fd4 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	689b      	ldr	r3, [r3, #8]
 8010f50:	f003 0302 	and.w	r3, r3, #2
 8010f54:	2b02      	cmp	r3, #2
 8010f56:	d12b      	bne.n	8010fb0 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	2b01      	cmp	r3, #1
 8010f60:	d912      	bls.n	8010f88 <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f66:	881a      	ldrh	r2, [r3, #0]
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f72:	1c9a      	adds	r2, r3, #2
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010f7c:	b29b      	uxth	r3, r3
 8010f7e:	3b02      	subs	r3, #2
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010f86:	e025      	b.n	8010fd4 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	330c      	adds	r3, #12
 8010f92:	7812      	ldrb	r2, [r2, #0]
 8010f94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f9a:	1c5a      	adds	r2, r3, #1
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	3b01      	subs	r3, #1
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010fae:	e011      	b.n	8010fd4 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010fb0:	f7fb fff2 	bl	800cf98 <HAL_GetTick>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	69bb      	ldr	r3, [r7, #24]
 8010fb8:	1ad3      	subs	r3, r2, r3
 8010fba:	683a      	ldr	r2, [r7, #0]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d803      	bhi.n	8010fc8 <HAL_SPI_Transmit+0x292>
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc6:	d102      	bne.n	8010fce <HAL_SPI_Transmit+0x298>
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d102      	bne.n	8010fd4 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8010fce:	2303      	movs	r3, #3
 8010fd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8010fd2:	e033      	b.n	801103c <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1b5      	bne.n	8010f4a <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010fe6:	d107      	bne.n	8010ff8 <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	681a      	ldr	r2, [r3, #0]
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010ff6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010ff8:	69ba      	ldr	r2, [r7, #24]
 8010ffa:	6839      	ldr	r1, [r7, #0]
 8010ffc:	68f8      	ldr	r0, [r7, #12]
 8010ffe:	f000 fe6d 	bl	8011cdc <SPI_EndRxTxTransaction>
 8011002:	4603      	mov	r3, r0
 8011004:	2b00      	cmp	r3, #0
 8011006:	d002      	beq.n	801100e <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2220      	movs	r2, #32
 801100c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	689b      	ldr	r3, [r3, #8]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d10a      	bne.n	801102c <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011016:	2300      	movs	r3, #0
 8011018:	613b      	str	r3, [r7, #16]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	613b      	str	r3, [r7, #16]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	689b      	ldr	r3, [r3, #8]
 8011028:	613b      	str	r3, [r7, #16]
 801102a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011030:	2b00      	cmp	r3, #0
 8011032:	d002      	beq.n	801103a <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8011034:	2301      	movs	r3, #1
 8011036:	77fb      	strb	r3, [r7, #31]
 8011038:	e000      	b.n	801103c <HAL_SPI_Transmit+0x306>
  }

error:
 801103a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2201      	movs	r2, #1
 8011040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2200      	movs	r2, #0
 8011048:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801104c:	7ffb      	ldrb	r3, [r7, #31]
}
 801104e:	4618      	mov	r0, r3
 8011050:	3720      	adds	r7, #32
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}

08011056 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011056:	b580      	push	{r7, lr}
 8011058:	b08c      	sub	sp, #48	; 0x30
 801105a:	af02      	add	r7, sp, #8
 801105c:	60f8      	str	r0, [r7, #12]
 801105e:	60b9      	str	r1, [r7, #8]
 8011060:	603b      	str	r3, [r7, #0]
 8011062:	4613      	mov	r3, r2
 8011064:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8011066:	2300      	movs	r3, #0
 8011068:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801106a:	2300      	movs	r3, #0
 801106c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801106e:	2300      	movs	r3, #0
 8011070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801107c:	d112      	bne.n	80110a4 <HAL_SPI_Receive+0x4e>
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	689b      	ldr	r3, [r3, #8]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d10e      	bne.n	80110a4 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2204      	movs	r2, #4
 801108a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801108e:	88fa      	ldrh	r2, [r7, #6]
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	9300      	str	r3, [sp, #0]
 8011094:	4613      	mov	r3, r2
 8011096:	68ba      	ldr	r2, [r7, #8]
 8011098:	68b9      	ldr	r1, [r7, #8]
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	f000 f9c4 	bl	8011428 <HAL_SPI_TransmitReceive>
 80110a0:	4603      	mov	r3, r0
 80110a2:	e1bd      	b.n	8011420 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d101      	bne.n	80110b2 <HAL_SPI_Receive+0x5c>
 80110ae:	2302      	movs	r3, #2
 80110b0:	e1b6      	b.n	8011420 <HAL_SPI_Receive+0x3ca>
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	2201      	movs	r2, #1
 80110b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80110ba:	f7fb ff6d 	bl	800cf98 <HAL_GetTick>
 80110be:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80110c6:	b2db      	uxtb	r3, r3
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d003      	beq.n	80110d4 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 80110cc:	2302      	movs	r3, #2
 80110ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80110d2:	e19b      	b.n	801140c <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d002      	beq.n	80110e0 <HAL_SPI_Receive+0x8a>
 80110da:	88fb      	ldrh	r3, [r7, #6]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d103      	bne.n	80110e8 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 80110e0:	2301      	movs	r3, #1
 80110e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80110e6:	e191      	b.n	801140c <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2204      	movs	r2, #4
 80110ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2200      	movs	r2, #0
 80110f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	68ba      	ldr	r2, [r7, #8]
 80110fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	88fa      	ldrh	r2, [r7, #6]
 8011100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	88fa      	ldrh	r2, [r7, #6]
 8011108:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	2200      	movs	r2, #0
 8011110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2200      	movs	r2, #0
 8011116:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2200      	movs	r2, #0
 801111c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2200      	movs	r2, #0
 8011122:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2200      	movs	r2, #0
 8011128:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801112e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011132:	d118      	bne.n	8011166 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011142:	601a      	str	r2, [r3, #0]
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011152:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801115a:	b29b      	uxth	r3, r3
 801115c:	3b01      	subs	r3, #1
 801115e:	b29a      	uxth	r2, r3
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801116e:	d908      	bls.n	8011182 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	685a      	ldr	r2, [r3, #4]
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801117e:	605a      	str	r2, [r3, #4]
 8011180:	e007      	b.n	8011192 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	685a      	ldr	r2, [r3, #4]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011190:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	689b      	ldr	r3, [r3, #8]
 8011196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801119a:	d10f      	bne.n	80111bc <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80111aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80111ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111c6:	2b40      	cmp	r3, #64	; 0x40
 80111c8:	d007      	beq.n	80111da <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	681a      	ldr	r2, [r3, #0]
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80111d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	68db      	ldr	r3, [r3, #12]
 80111de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80111e2:	d869      	bhi.n	80112b8 <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80111e4:	e031      	b.n	801124a <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	689b      	ldr	r3, [r3, #8]
 80111ec:	f003 0301 	and.w	r3, r3, #1
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	d117      	bne.n	8011224 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f103 020c 	add.w	r2, r3, #12
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011200:	7812      	ldrb	r2, [r2, #0]
 8011202:	b2d2      	uxtb	r2, r2
 8011204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801120a:	1c5a      	adds	r2, r3, #1
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011216:	b29b      	uxth	r3, r3
 8011218:	3b01      	subs	r3, #1
 801121a:	b29a      	uxth	r2, r3
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8011222:	e012      	b.n	801124a <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011224:	f7fb feb8 	bl	800cf98 <HAL_GetTick>
 8011228:	4602      	mov	r2, r0
 801122a:	6a3b      	ldr	r3, [r7, #32]
 801122c:	1ad3      	subs	r3, r2, r3
 801122e:	683a      	ldr	r2, [r7, #0]
 8011230:	429a      	cmp	r2, r3
 8011232:	d803      	bhi.n	801123c <HAL_SPI_Receive+0x1e6>
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801123a:	d102      	bne.n	8011242 <HAL_SPI_Receive+0x1ec>
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d103      	bne.n	801124a <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8011242:	2303      	movs	r3, #3
 8011244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8011248:	e0e0      	b.n	801140c <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011250:	b29b      	uxth	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d1c7      	bne.n	80111e6 <HAL_SPI_Receive+0x190>
 8011256:	e035      	b.n	80112c4 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	689b      	ldr	r3, [r3, #8]
 801125e:	f003 0301 	and.w	r3, r3, #1
 8011262:	2b01      	cmp	r3, #1
 8011264:	d115      	bne.n	8011292 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	68da      	ldr	r2, [r3, #12]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011270:	b292      	uxth	r2, r2
 8011272:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011278:	1c9a      	adds	r2, r3, #2
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011284:	b29b      	uxth	r3, r3
 8011286:	3b01      	subs	r3, #1
 8011288:	b29a      	uxth	r2, r3
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8011290:	e012      	b.n	80112b8 <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011292:	f7fb fe81 	bl	800cf98 <HAL_GetTick>
 8011296:	4602      	mov	r2, r0
 8011298:	6a3b      	ldr	r3, [r7, #32]
 801129a:	1ad3      	subs	r3, r2, r3
 801129c:	683a      	ldr	r2, [r7, #0]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d803      	bhi.n	80112aa <HAL_SPI_Receive+0x254>
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112a8:	d102      	bne.n	80112b0 <HAL_SPI_Receive+0x25a>
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d103      	bne.n	80112b8 <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80112b0:	2303      	movs	r3, #3
 80112b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80112b6:	e0a9      	b.n	801140c <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80112be:	b29b      	uxth	r3, r3
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d1c9      	bne.n	8011258 <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80112cc:	d178      	bne.n	80113c0 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80112dc:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80112de:	6a3b      	ldr	r3, [r7, #32]
 80112e0:	9300      	str	r3, [sp, #0]
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	2201      	movs	r2, #1
 80112e6:	2101      	movs	r1, #1
 80112e8:	68f8      	ldr	r0, [r7, #12]
 80112ea:	f000 fb81 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 80112ee:	4603      	mov	r3, r0
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d003      	beq.n	80112fc <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80112f4:	2303      	movs	r3, #3
 80112f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 80112fa:	e087      	b.n	801140c <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011304:	d907      	bls.n	8011316 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	68da      	ldr	r2, [r3, #12]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011310:	b292      	uxth	r2, r2
 8011312:	801a      	strh	r2, [r3, #0]
 8011314:	e008      	b.n	8011328 <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f103 020c 	add.w	r2, r3, #12
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011322:	7812      	ldrb	r2, [r2, #0]
 8011324:	b2d2      	uxtb	r2, r2
 8011326:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8011328:	6a3b      	ldr	r3, [r7, #32]
 801132a:	9300      	str	r3, [sp, #0]
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	2201      	movs	r2, #1
 8011330:	2101      	movs	r1, #1
 8011332:	68f8      	ldr	r0, [r7, #12]
 8011334:	f000 fb5c 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 8011338:	4603      	mov	r3, r0
 801133a:	2b00      	cmp	r3, #0
 801133c:	d009      	beq.n	8011352 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011342:	f043 0202 	orr.w	r2, r3, #2
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 801134a:	2303      	movs	r3, #3
 801134c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8011350:	e05c      	b.n	801140c <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801135a:	d105      	bne.n	8011368 <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	68db      	ldr	r3, [r3, #12]
 8011362:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8011364:	69bb      	ldr	r3, [r7, #24]
 8011366:	e02b      	b.n	80113c0 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	330c      	adds	r3, #12
 801136e:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	b2db      	uxtb	r3, r3
 8011376:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011378:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011382:	d11d      	bne.n	80113c0 <HAL_SPI_Receive+0x36a>
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011388:	2b02      	cmp	r3, #2
 801138a:	d119      	bne.n	80113c0 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 801138c:	6a3b      	ldr	r3, [r7, #32]
 801138e:	9300      	str	r3, [sp, #0]
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	2201      	movs	r2, #1
 8011394:	2101      	movs	r1, #1
 8011396:	68f8      	ldr	r0, [r7, #12]
 8011398:	f000 fb2a 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d009      	beq.n	80113b6 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80113a6:	f043 0202 	orr.w	r2, r3, #2
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80113ae:	2303      	movs	r3, #3
 80113b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80113b4:	e02a      	b.n	801140c <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80113b6:	69fb      	ldr	r3, [r7, #28]
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80113be:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80113c0:	6a3a      	ldr	r2, [r7, #32]
 80113c2:	6839      	ldr	r1, [r7, #0]
 80113c4:	68f8      	ldr	r0, [r7, #12]
 80113c6:	f000 fc31 	bl	8011c2c <SPI_EndRxTransaction>
 80113ca:	4603      	mov	r3, r0
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d002      	beq.n	80113d6 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	2220      	movs	r2, #32
 80113d4:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	689b      	ldr	r3, [r3, #8]
 80113dc:	f003 0310 	and.w	r3, r3, #16
 80113e0:	2b10      	cmp	r3, #16
 80113e2:	d10a      	bne.n	80113fa <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80113e8:	f043 0202 	orr.w	r2, r3, #2
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80113f8:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d003      	beq.n	801140a <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8011402:	2301      	movs	r3, #1
 8011404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011408:	e000      	b.n	801140c <HAL_SPI_Receive+0x3b6>
  }

error :
 801140a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2201      	movs	r2, #1
 8011410:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	2200      	movs	r2, #0
 8011418:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801141c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011420:	4618      	mov	r0, r3
 8011422:	3728      	adds	r7, #40	; 0x28
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b092      	sub	sp, #72	; 0x48
 801142c:	af02      	add	r7, sp, #8
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	60b9      	str	r1, [r7, #8]
 8011432:	607a      	str	r2, [r7, #4]
 8011434:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8011436:	2300      	movs	r3, #0
 8011438:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801143a:	2300      	movs	r3, #0
 801143c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801143e:	2301      	movs	r3, #1
 8011440:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011442:	2300      	movs	r3, #0
 8011444:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801144e:	2b01      	cmp	r3, #1
 8011450:	d101      	bne.n	8011456 <HAL_SPI_TransmitReceive+0x2e>
 8011452:	2302      	movs	r3, #2
 8011454:	e2c8      	b.n	80119e8 <HAL_SPI_TransmitReceive+0x5c0>
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	2201      	movs	r2, #1
 801145a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801145e:	f7fb fd9b 	bl	800cf98 <HAL_GetTick>
 8011462:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801146a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8011474:	887b      	ldrh	r3, [r7, #2]
 8011476:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8011478:	887b      	ldrh	r3, [r7, #2]
 801147a:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801148c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011490:	2b01      	cmp	r3, #1
 8011492:	d00f      	beq.n	80114b4 <HAL_SPI_TransmitReceive+0x8c>
 8011494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801149a:	d107      	bne.n	80114ac <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	689b      	ldr	r3, [r3, #8]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d103      	bne.n	80114ac <HAL_SPI_TransmitReceive+0x84>
 80114a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80114a8:	2b04      	cmp	r3, #4
 80114aa:	d003      	beq.n	80114b4 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80114ac:	2302      	movs	r3, #2
 80114ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80114b2:	e28f      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d005      	beq.n	80114c6 <HAL_SPI_TransmitReceive+0x9e>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d002      	beq.n	80114c6 <HAL_SPI_TransmitReceive+0x9e>
 80114c0:	887b      	ldrh	r3, [r7, #2]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d103      	bne.n	80114ce <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 80114c6:	2301      	movs	r3, #1
 80114c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80114cc:	e282      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	2b04      	cmp	r3, #4
 80114d8:	d003      	beq.n	80114e2 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2205      	movs	r2, #5
 80114de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	2200      	movs	r2, #0
 80114e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	887a      	ldrh	r2, [r7, #2]
 80114f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	887a      	ldrh	r2, [r7, #2]
 80114fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	68ba      	ldr	r2, [r7, #8]
 8011502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	887a      	ldrh	r2, [r7, #2]
 8011508:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	887a      	ldrh	r2, [r7, #2]
 801150e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	2200      	movs	r2, #0
 8011514:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2200      	movs	r2, #0
 801151a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011524:	d10f      	bne.n	8011546 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011534:	601a      	str	r2, [r3, #0]
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011544:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	68db      	ldr	r3, [r3, #12]
 801154a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801154e:	d802      	bhi.n	8011556 <HAL_SPI_TransmitReceive+0x12e>
 8011550:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011552:	2b01      	cmp	r3, #1
 8011554:	d908      	bls.n	8011568 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	685a      	ldr	r2, [r3, #4]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011564:	605a      	str	r2, [r3, #4]
 8011566:	e007      	b.n	8011578 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	685a      	ldr	r2, [r3, #4]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011576:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011582:	2b40      	cmp	r3, #64	; 0x40
 8011584:	d007      	beq.n	8011596 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	681a      	ldr	r2, [r3, #0]
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011594:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	68db      	ldr	r3, [r3, #12]
 801159a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801159e:	f240 80a4 	bls.w	80116ea <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d003      	beq.n	80115b2 <HAL_SPI_TransmitReceive+0x18a>
 80115aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	f040 808e 	bne.w	80116ce <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b6:	881a      	ldrh	r2, [r3, #0]
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115c2:	1c9a      	adds	r2, r3, #2
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	3b01      	subs	r3, #1
 80115d0:	b29a      	uxth	r2, r3
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80115d6:	e07a      	b.n	80116ce <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	f003 0302 	and.w	r3, r3, #2
 80115e2:	2b02      	cmp	r3, #2
 80115e4:	d13f      	bne.n	8011666 <HAL_SPI_TransmitReceive+0x23e>
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115ea:	b29b      	uxth	r3, r3
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d03a      	beq.n	8011666 <HAL_SPI_TransmitReceive+0x23e>
 80115f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d137      	bne.n	8011666 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115fa:	881a      	ldrh	r2, [r3, #0]
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011606:	1c9a      	adds	r2, r3, #2
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011610:	b29b      	uxth	r3, r3
 8011612:	3b01      	subs	r3, #1
 8011614:	b29a      	uxth	r2, r3
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801161a:	2300      	movs	r3, #0
 801161c:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011622:	b29b      	uxth	r3, r3
 8011624:	2b00      	cmp	r3, #0
 8011626:	d11e      	bne.n	8011666 <HAL_SPI_TransmitReceive+0x23e>
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801162c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011630:	d119      	bne.n	8011666 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8011632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011634:	f003 0304 	and.w	r3, r3, #4
 8011638:	2b00      	cmp	r3, #0
 801163a:	d10c      	bne.n	8011656 <HAL_SPI_TransmitReceive+0x22e>
 801163c:	6a3b      	ldr	r3, [r7, #32]
 801163e:	f003 0308 	and.w	r3, r3, #8
 8011642:	2b00      	cmp	r3, #0
 8011644:	d007      	beq.n	8011656 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011654:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011664:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	689b      	ldr	r3, [r3, #8]
 801166c:	f003 0301 	and.w	r3, r3, #1
 8011670:	2b01      	cmp	r3, #1
 8011672:	d11c      	bne.n	80116ae <HAL_SPI_TransmitReceive+0x286>
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801167a:	b29b      	uxth	r3, r3
 801167c:	2b00      	cmp	r3, #0
 801167e:	d016      	beq.n	80116ae <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	68da      	ldr	r2, [r3, #12]
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801168a:	b292      	uxth	r2, r2
 801168c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011692:	1c9a      	adds	r2, r3, #2
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801169e:	b29b      	uxth	r3, r3
 80116a0:	3b01      	subs	r3, #1
 80116a2:	b29a      	uxth	r2, r3
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80116aa:	2301      	movs	r3, #1
 80116ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80116ae:	f7fb fc73 	bl	800cf98 <HAL_GetTick>
 80116b2:	4602      	mov	r2, r0
 80116b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d807      	bhi.n	80116ce <HAL_SPI_TransmitReceive+0x2a6>
 80116be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c4:	d003      	beq.n	80116ce <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 80116c6:	2303      	movs	r3, #3
 80116c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80116cc:	e182      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f47f af7f 	bne.w	80115d8 <HAL_SPI_TransmitReceive+0x1b0>
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f47f af78 	bne.w	80115d8 <HAL_SPI_TransmitReceive+0x1b0>
 80116e8:	e103      	b.n	80118f2 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d003      	beq.n	80116fa <HAL_SPI_TransmitReceive+0x2d2>
 80116f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	f040 80ef 	bne.w	80118d8 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80116fe:	b29b      	uxth	r3, r3
 8011700:	2b01      	cmp	r3, #1
 8011702:	d912      	bls.n	801172a <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011708:	881a      	ldrh	r2, [r3, #0]
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011714:	1c9a      	adds	r2, r3, #2
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801171e:	b29b      	uxth	r3, r3
 8011720:	3b02      	subs	r3, #2
 8011722:	b29a      	uxth	r2, r3
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011728:	e0d6      	b.n	80118d8 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	330c      	adds	r3, #12
 8011734:	7812      	ldrb	r2, [r2, #0]
 8011736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801173c:	1c5a      	adds	r2, r3, #1
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011746:	b29b      	uxth	r3, r3
 8011748:	3b01      	subs	r3, #1
 801174a:	b29a      	uxth	r2, r3
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011750:	e0c2      	b.n	80118d8 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	689b      	ldr	r3, [r3, #8]
 8011758:	f003 0302 	and.w	r3, r3, #2
 801175c:	2b02      	cmp	r3, #2
 801175e:	d158      	bne.n	8011812 <HAL_SPI_TransmitReceive+0x3ea>
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011764:	b29b      	uxth	r3, r3
 8011766:	2b00      	cmp	r3, #0
 8011768:	d053      	beq.n	8011812 <HAL_SPI_TransmitReceive+0x3ea>
 801176a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801176c:	2b01      	cmp	r3, #1
 801176e:	d150      	bne.n	8011812 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011774:	b29b      	uxth	r3, r3
 8011776:	2b01      	cmp	r3, #1
 8011778:	d912      	bls.n	80117a0 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801177e:	881a      	ldrh	r2, [r3, #0]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801178a:	1c9a      	adds	r2, r3, #2
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011794:	b29b      	uxth	r3, r3
 8011796:	3b02      	subs	r3, #2
 8011798:	b29a      	uxth	r2, r3
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801179e:	e012      	b.n	80117c6 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	330c      	adds	r3, #12
 80117aa:	7812      	ldrb	r2, [r2, #0]
 80117ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117b2:	1c5a      	adds	r2, r3, #1
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80117bc:	b29b      	uxth	r3, r3
 80117be:	3b01      	subs	r3, #1
 80117c0:	b29a      	uxth	r2, r3
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80117c6:	2300      	movs	r3, #0
 80117c8:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d11e      	bne.n	8011812 <HAL_SPI_TransmitReceive+0x3ea>
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80117dc:	d119      	bne.n	8011812 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80117de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e0:	f003 0304 	and.w	r3, r3, #4
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d10c      	bne.n	8011802 <HAL_SPI_TransmitReceive+0x3da>
 80117e8:	6a3b      	ldr	r3, [r7, #32]
 80117ea:	f003 0308 	and.w	r3, r3, #8
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d007      	beq.n	8011802 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011800:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011810:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	689b      	ldr	r3, [r3, #8]
 8011818:	f003 0301 	and.w	r3, r3, #1
 801181c:	2b01      	cmp	r3, #1
 801181e:	d148      	bne.n	80118b2 <HAL_SPI_TransmitReceive+0x48a>
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011826:	b29b      	uxth	r3, r3
 8011828:	2b00      	cmp	r3, #0
 801182a:	d042      	beq.n	80118b2 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011832:	b29b      	uxth	r3, r3
 8011834:	2b01      	cmp	r3, #1
 8011836:	d923      	bls.n	8011880 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	68da      	ldr	r2, [r3, #12]
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011842:	b292      	uxth	r2, r2
 8011844:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801184a:	1c9a      	adds	r2, r3, #2
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011856:	b29b      	uxth	r3, r3
 8011858:	3b02      	subs	r3, #2
 801185a:	b29a      	uxth	r2, r3
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8011868:	b29b      	uxth	r3, r3
 801186a:	2b01      	cmp	r3, #1
 801186c:	d81f      	bhi.n	80118ae <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	685a      	ldr	r2, [r3, #4]
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801187c:	605a      	str	r2, [r3, #4]
 801187e:	e016      	b.n	80118ae <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	f103 020c 	add.w	r2, r3, #12
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801188c:	7812      	ldrb	r2, [r2, #0]
 801188e:	b2d2      	uxtb	r2, r2
 8011890:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011896:	1c5a      	adds	r2, r3, #1
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80118a2:	b29b      	uxth	r3, r3
 80118a4:	3b01      	subs	r3, #1
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80118ae:	2301      	movs	r3, #1
 80118b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80118b2:	f7fb fb71 	bl	800cf98 <HAL_GetTick>
 80118b6:	4602      	mov	r2, r0
 80118b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ba:	1ad3      	subs	r3, r2, r3
 80118bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118be:	429a      	cmp	r2, r3
 80118c0:	d803      	bhi.n	80118ca <HAL_SPI_TransmitReceive+0x4a2>
 80118c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c8:	d102      	bne.n	80118d0 <HAL_SPI_TransmitReceive+0x4a8>
 80118ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d103      	bne.n	80118d8 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 80118d0:	2303      	movs	r3, #3
 80118d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 80118d6:	e07d      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80118dc:	b29b      	uxth	r3, r3
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f47f af37 	bne.w	8011752 <HAL_SPI_TransmitReceive+0x32a>
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	f47f af30 	bne.w	8011752 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80118fa:	d146      	bne.n	801198a <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80118fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118fe:	9300      	str	r3, [sp, #0]
 8011900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011902:	2201      	movs	r2, #1
 8011904:	2101      	movs	r1, #1
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f000 f872 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 801190c:	4603      	mov	r3, r0
 801190e:	2b00      	cmp	r3, #0
 8011910:	d009      	beq.n	8011926 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011916:	f043 0202 	orr.w	r2, r3, #2
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 801191e:	2303      	movs	r3, #3
 8011920:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8011924:	e056      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	68db      	ldr	r3, [r3, #12]
 801192a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801192e:	d105      	bne.n	801193c <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8011938:	69bb      	ldr	r3, [r7, #24]
 801193a:	e026      	b.n	801198a <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	330c      	adds	r3, #12
 8011942:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	b2db      	uxtb	r3, r3
 801194a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801194c:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011952:	2b02      	cmp	r3, #2
 8011954:	d119      	bne.n	801198a <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8011956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011958:	9300      	str	r3, [sp, #0]
 801195a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801195c:	2201      	movs	r2, #1
 801195e:	2101      	movs	r1, #1
 8011960:	68f8      	ldr	r0, [r7, #12]
 8011962:	f000 f845 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 8011966:	4603      	mov	r3, r0
 8011968:	2b00      	cmp	r3, #0
 801196a:	d009      	beq.n	8011980 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011970:	f043 0202 	orr.w	r2, r3, #2
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8011978:	2303      	movs	r3, #3
 801197a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 801197e:	e029      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	781b      	ldrb	r3, [r3, #0]
 8011984:	b2db      	uxtb	r3, r3
 8011986:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8011988:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	689b      	ldr	r3, [r3, #8]
 8011990:	f003 0310 	and.w	r3, r3, #16
 8011994:	2b10      	cmp	r3, #16
 8011996:	d10d      	bne.n	80119b4 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801199c:	f043 0202 	orr.w	r2, r3, #2
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80119ac:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80119ae:	2301      	movs	r3, #1
 80119b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80119b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80119b8:	68f8      	ldr	r0, [r7, #12]
 80119ba:	f000 f98f 	bl	8011cdc <SPI_EndRxTxTransaction>
 80119be:	4603      	mov	r3, r0
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d006      	beq.n	80119d2 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 80119c4:	2301      	movs	r3, #1
 80119c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	2220      	movs	r2, #32
 80119ce:	661a      	str	r2, [r3, #96]	; 0x60
 80119d0:	e000      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 80119d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2201      	movs	r2, #1
 80119d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2200      	movs	r2, #0
 80119e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80119e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3740      	adds	r7, #64	; 0x40
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b088      	sub	sp, #32
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	603b      	str	r3, [r7, #0]
 80119fc:	4613      	mov	r3, r2
 80119fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011a00:	f7fb faca 	bl	800cf98 <HAL_GetTick>
 8011a04:	4602      	mov	r2, r0
 8011a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a08:	1a9b      	subs	r3, r3, r2
 8011a0a:	683a      	ldr	r2, [r7, #0]
 8011a0c:	4413      	add	r3, r2
 8011a0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011a10:	f7fb fac2 	bl	800cf98 <HAL_GetTick>
 8011a14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011a16:	4b39      	ldr	r3, [pc, #228]	; (8011afc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	015b      	lsls	r3, r3, #5
 8011a1c:	0d1b      	lsrs	r3, r3, #20
 8011a1e:	69fa      	ldr	r2, [r7, #28]
 8011a20:	fb02 f303 	mul.w	r3, r2, r3
 8011a24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011a26:	e054      	b.n	8011ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a2e:	d050      	beq.n	8011ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011a30:	f7fb fab2 	bl	800cf98 <HAL_GetTick>
 8011a34:	4602      	mov	r2, r0
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	1ad3      	subs	r3, r2, r3
 8011a3a:	69fa      	ldr	r2, [r7, #28]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d902      	bls.n	8011a46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d13d      	bne.n	8011ac2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	685a      	ldr	r2, [r3, #4]
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011a54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011a5e:	d111      	bne.n	8011a84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a68:	d004      	beq.n	8011a74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	689b      	ldr	r3, [r3, #8]
 8011a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a72:	d107      	bne.n	8011a84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011a82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a8c:	d10f      	bne.n	8011aae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011a9c:	601a      	str	r2, [r3, #0]
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	681a      	ldr	r2, [r3, #0]
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011aac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2201      	movs	r2, #1
 8011ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8011abe:	2303      	movs	r3, #3
 8011ac0:	e017      	b.n	8011af2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d101      	bne.n	8011acc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	3b01      	subs	r3, #1
 8011ad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	689a      	ldr	r2, [r3, #8]
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	4013      	ands	r3, r2
 8011adc:	68ba      	ldr	r2, [r7, #8]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	bf0c      	ite	eq
 8011ae2:	2301      	moveq	r3, #1
 8011ae4:	2300      	movne	r3, #0
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	461a      	mov	r2, r3
 8011aea:	79fb      	ldrb	r3, [r7, #7]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d19b      	bne.n	8011a28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3720      	adds	r7, #32
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	20000080 	.word	0x20000080

08011b00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b08a      	sub	sp, #40	; 0x28
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
 8011b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8011b12:	f7fb fa41 	bl	800cf98 <HAL_GetTick>
 8011b16:	4602      	mov	r2, r0
 8011b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b1a:	1a9b      	subs	r3, r3, r2
 8011b1c:	683a      	ldr	r2, [r7, #0]
 8011b1e:	4413      	add	r3, r2
 8011b20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8011b22:	f7fb fa39 	bl	800cf98 <HAL_GetTick>
 8011b26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	330c      	adds	r3, #12
 8011b2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8011b30:	4b3d      	ldr	r3, [pc, #244]	; (8011c28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8011b32:	681a      	ldr	r2, [r3, #0]
 8011b34:	4613      	mov	r3, r2
 8011b36:	009b      	lsls	r3, r3, #2
 8011b38:	4413      	add	r3, r2
 8011b3a:	00da      	lsls	r2, r3, #3
 8011b3c:	1ad3      	subs	r3, r2, r3
 8011b3e:	0d1b      	lsrs	r3, r3, #20
 8011b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b42:	fb02 f303 	mul.w	r3, r2, r3
 8011b46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011b48:	e060      	b.n	8011c0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8011b50:	d107      	bne.n	8011b62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d104      	bne.n	8011b62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8011b60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b68:	d050      	beq.n	8011c0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011b6a:	f7fb fa15 	bl	800cf98 <HAL_GetTick>
 8011b6e:	4602      	mov	r2, r0
 8011b70:	6a3b      	ldr	r3, [r7, #32]
 8011b72:	1ad3      	subs	r3, r2, r3
 8011b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d902      	bls.n	8011b80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d13d      	bne.n	8011bfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	685a      	ldr	r2, [r3, #4]
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011b8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011b98:	d111      	bne.n	8011bbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	689b      	ldr	r3, [r3, #8]
 8011b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011ba2:	d004      	beq.n	8011bae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	689b      	ldr	r3, [r3, #8]
 8011ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011bac:	d107      	bne.n	8011bbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	681a      	ldr	r2, [r3, #0]
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011bbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011bc6:	d10f      	bne.n	8011be8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011bd6:	601a      	str	r2, [r3, #0]
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	681a      	ldr	r2, [r3, #0]
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011be6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2201      	movs	r2, #1
 8011bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8011bf8:	2303      	movs	r3, #3
 8011bfa:	e010      	b.n	8011c1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011bfc:	69bb      	ldr	r3, [r7, #24]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d101      	bne.n	8011c06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8011c02:	2300      	movs	r3, #0
 8011c04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8011c06:	69bb      	ldr	r3, [r7, #24]
 8011c08:	3b01      	subs	r3, #1
 8011c0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	689a      	ldr	r2, [r3, #8]
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	4013      	ands	r3, r2
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d196      	bne.n	8011b4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8011c1c:	2300      	movs	r3, #0
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3728      	adds	r7, #40	; 0x28
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	20000080 	.word	0x20000080

08011c2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b086      	sub	sp, #24
 8011c30:	af02      	add	r7, sp, #8
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011c40:	d111      	bne.n	8011c66 <SPI_EndRxTransaction+0x3a>
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	689b      	ldr	r3, [r3, #8]
 8011c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c4a:	d004      	beq.n	8011c56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	689b      	ldr	r3, [r3, #8]
 8011c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c54:	d107      	bne.n	8011c66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011c64:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	2180      	movs	r1, #128	; 0x80
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f7ff febd 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 8011c76:	4603      	mov	r3, r0
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d007      	beq.n	8011c8c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011c80:	f043 0220 	orr.w	r2, r3, #32
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011c88:	2303      	movs	r3, #3
 8011c8a:	e023      	b.n	8011cd4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011c94:	d11d      	bne.n	8011cd2 <SPI_EndRxTransaction+0xa6>
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	689b      	ldr	r3, [r3, #8]
 8011c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c9e:	d004      	beq.n	8011caa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	689b      	ldr	r3, [r3, #8]
 8011ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011ca8:	d113      	bne.n	8011cd2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	9300      	str	r3, [sp, #0]
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011cb6:	68f8      	ldr	r0, [r7, #12]
 8011cb8:	f7ff ff22 	bl	8011b00 <SPI_WaitFifoStateUntilTimeout>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d007      	beq.n	8011cd2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011cc6:	f043 0220 	orr.w	r2, r3, #32
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8011cce:	2303      	movs	r3, #3
 8011cd0:	e000      	b.n	8011cd4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8011cd2:	2300      	movs	r3, #0
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3710      	adds	r7, #16
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}

08011cdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af02      	add	r7, sp, #8
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8011cf4:	68f8      	ldr	r0, [r7, #12]
 8011cf6:	f7ff ff03 	bl	8011b00 <SPI_WaitFifoStateUntilTimeout>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d007      	beq.n	8011d10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d04:	f043 0220 	orr.w	r2, r3, #32
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011d0c:	2303      	movs	r3, #3
 8011d0e:	e027      	b.n	8011d60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	2200      	movs	r2, #0
 8011d18:	2180      	movs	r1, #128	; 0x80
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	f7ff fe68 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d007      	beq.n	8011d36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d2a:	f043 0220 	orr.w	r2, r3, #32
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011d32:	2303      	movs	r3, #3
 8011d34:	e014      	b.n	8011d60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	9300      	str	r3, [sp, #0]
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8011d42:	68f8      	ldr	r0, [r7, #12]
 8011d44:	f7ff fedc 	bl	8011b00 <SPI_WaitFifoStateUntilTimeout>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d007      	beq.n	8011d5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011d52:	f043 0220 	orr.w	r2, r3, #32
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011d5a:	2303      	movs	r3, #3
 8011d5c:	e000      	b.n	8011d60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011d5e:	2300      	movs	r3, #0
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3710      	adds	r7, #16
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d101      	bne.n	8011d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011d76:	2301      	movs	r3, #1
 8011d78:	e049      	b.n	8011e0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d106      	bne.n	8011d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 f841 	bl	8011e16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2202      	movs	r2, #2
 8011d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681a      	ldr	r2, [r3, #0]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	3304      	adds	r3, #4
 8011da4:	4619      	mov	r1, r3
 8011da6:	4610      	mov	r0, r2
 8011da8:	f000 f9ce 	bl	8012148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2201      	movs	r2, #1
 8011db0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2201      	movs	r2, #1
 8011db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2201      	movs	r2, #1
 8011dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2201      	movs	r2, #1
 8011dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2201      	movs	r2, #1
 8011dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2201      	movs	r2, #1
 8011de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2201      	movs	r2, #1
 8011de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2201      	movs	r2, #1
 8011df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2201      	movs	r2, #1
 8011df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2201      	movs	r2, #1
 8011e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3708      	adds	r7, #8
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}

08011e16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8011e16:	b480      	push	{r7}
 8011e18:	b083      	sub	sp, #12
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8011e1e:	bf00      	nop
 8011e20:	370c      	adds	r7, #12
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bc80      	pop	{r7}
 8011e26:	4770      	bx	lr

08011e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b085      	sub	sp, #20
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d001      	beq.n	8011e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	e036      	b.n	8011eae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2202      	movs	r2, #2
 8011e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	68da      	ldr	r2, [r3, #12]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f042 0201 	orr.w	r2, r2, #1
 8011e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	4a16      	ldr	r2, [pc, #88]	; (8011eb8 <HAL_TIM_Base_Start_IT+0x90>)
 8011e5e:	4293      	cmp	r3, r2
 8011e60:	d004      	beq.n	8011e6c <HAL_TIM_Base_Start_IT+0x44>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e6a:	d115      	bne.n	8011e98 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	689a      	ldr	r2, [r3, #8]
 8011e72:	4b12      	ldr	r3, [pc, #72]	; (8011ebc <HAL_TIM_Base_Start_IT+0x94>)
 8011e74:	4013      	ands	r3, r2
 8011e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	2b06      	cmp	r3, #6
 8011e7c:	d015      	beq.n	8011eaa <HAL_TIM_Base_Start_IT+0x82>
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e84:	d011      	beq.n	8011eaa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	681a      	ldr	r2, [r3, #0]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f042 0201 	orr.w	r2, r2, #1
 8011e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011e96:	e008      	b.n	8011eaa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	681a      	ldr	r2, [r3, #0]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f042 0201 	orr.w	r2, r2, #1
 8011ea6:	601a      	str	r2, [r3, #0]
 8011ea8:	e000      	b.n	8011eac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011eac:	2300      	movs	r3, #0
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	3714      	adds	r7, #20
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bc80      	pop	{r7}
 8011eb6:	4770      	bx	lr
 8011eb8:	40012c00 	.word	0x40012c00
 8011ebc:	00010007 	.word	0x00010007

08011ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	691b      	ldr	r3, [r3, #16]
 8011ece:	f003 0302 	and.w	r3, r3, #2
 8011ed2:	2b02      	cmp	r3, #2
 8011ed4:	d122      	bne.n	8011f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	68db      	ldr	r3, [r3, #12]
 8011edc:	f003 0302 	and.w	r3, r3, #2
 8011ee0:	2b02      	cmp	r3, #2
 8011ee2:	d11b      	bne.n	8011f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f06f 0202 	mvn.w	r2, #2
 8011eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	699b      	ldr	r3, [r3, #24]
 8011efa:	f003 0303 	and.w	r3, r3, #3
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d003      	beq.n	8011f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f000 f904 	bl	8012110 <HAL_TIM_IC_CaptureCallback>
 8011f08:	e005      	b.n	8011f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f000 f8f7 	bl	80120fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f000 f906 	bl	8012122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	691b      	ldr	r3, [r3, #16]
 8011f22:	f003 0304 	and.w	r3, r3, #4
 8011f26:	2b04      	cmp	r3, #4
 8011f28:	d122      	bne.n	8011f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	f003 0304 	and.w	r3, r3, #4
 8011f34:	2b04      	cmp	r3, #4
 8011f36:	d11b      	bne.n	8011f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f06f 0204 	mvn.w	r2, #4
 8011f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2202      	movs	r2, #2
 8011f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	699b      	ldr	r3, [r3, #24]
 8011f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d003      	beq.n	8011f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f000 f8da 	bl	8012110 <HAL_TIM_IC_CaptureCallback>
 8011f5c:	e005      	b.n	8011f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f000 f8cd 	bl	80120fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f000 f8dc 	bl	8012122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	691b      	ldr	r3, [r3, #16]
 8011f76:	f003 0308 	and.w	r3, r3, #8
 8011f7a:	2b08      	cmp	r3, #8
 8011f7c:	d122      	bne.n	8011fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	68db      	ldr	r3, [r3, #12]
 8011f84:	f003 0308 	and.w	r3, r3, #8
 8011f88:	2b08      	cmp	r3, #8
 8011f8a:	d11b      	bne.n	8011fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	f06f 0208 	mvn.w	r2, #8
 8011f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2204      	movs	r2, #4
 8011f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	69db      	ldr	r3, [r3, #28]
 8011fa2:	f003 0303 	and.w	r3, r3, #3
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d003      	beq.n	8011fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f000 f8b0 	bl	8012110 <HAL_TIM_IC_CaptureCallback>
 8011fb0:	e005      	b.n	8011fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f8a3 	bl	80120fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f000 f8b2 	bl	8012122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	691b      	ldr	r3, [r3, #16]
 8011fca:	f003 0310 	and.w	r3, r3, #16
 8011fce:	2b10      	cmp	r3, #16
 8011fd0:	d122      	bne.n	8012018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	f003 0310 	and.w	r3, r3, #16
 8011fdc:	2b10      	cmp	r3, #16
 8011fde:	d11b      	bne.n	8012018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f06f 0210 	mvn.w	r2, #16
 8011fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2208      	movs	r2, #8
 8011fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	69db      	ldr	r3, [r3, #28]
 8011ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d003      	beq.n	8012006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f000 f886 	bl	8012110 <HAL_TIM_IC_CaptureCallback>
 8012004:	e005      	b.n	8012012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 f879 	bl	80120fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f000 f888 	bl	8012122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2200      	movs	r2, #0
 8012016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	691b      	ldr	r3, [r3, #16]
 801201e:	f003 0301 	and.w	r3, r3, #1
 8012022:	2b01      	cmp	r3, #1
 8012024:	d10e      	bne.n	8012044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	68db      	ldr	r3, [r3, #12]
 801202c:	f003 0301 	and.w	r3, r3, #1
 8012030:	2b01      	cmp	r3, #1
 8012032:	d107      	bne.n	8012044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f06f 0201 	mvn.w	r2, #1
 801203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f7f8 f8da 	bl	800a1f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	691b      	ldr	r3, [r3, #16]
 801204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801204e:	2b80      	cmp	r3, #128	; 0x80
 8012050:	d10e      	bne.n	8012070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801205c:	2b80      	cmp	r3, #128	; 0x80
 801205e:	d107      	bne.n	8012070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f000 f8d7 	bl	801221e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	691b      	ldr	r3, [r3, #16]
 8012076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801207a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801207e:	d10e      	bne.n	801209e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	68db      	ldr	r3, [r3, #12]
 8012086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801208a:	2b80      	cmp	r3, #128	; 0x80
 801208c:	d107      	bne.n	801209e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f000 f8c9 	bl	8012230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	691b      	ldr	r3, [r3, #16]
 80120a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120a8:	2b40      	cmp	r3, #64	; 0x40
 80120aa:	d10e      	bne.n	80120ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120b6:	2b40      	cmp	r3, #64	; 0x40
 80120b8:	d107      	bne.n	80120ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80120c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f000 f835 	bl	8012134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	691b      	ldr	r3, [r3, #16]
 80120d0:	f003 0320 	and.w	r3, r3, #32
 80120d4:	2b20      	cmp	r3, #32
 80120d6:	d10e      	bne.n	80120f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	f003 0320 	and.w	r3, r3, #32
 80120e2:	2b20      	cmp	r3, #32
 80120e4:	d107      	bne.n	80120f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	f06f 0220 	mvn.w	r2, #32
 80120ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f000 f88b 	bl	801220c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80120f6:	bf00      	nop
 80120f8:	3708      	adds	r7, #8
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}

080120fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80120fe:	b480      	push	{r7}
 8012100:	b083      	sub	sp, #12
 8012102:	af00      	add	r7, sp, #0
 8012104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012106:	bf00      	nop
 8012108:	370c      	adds	r7, #12
 801210a:	46bd      	mov	sp, r7
 801210c:	bc80      	pop	{r7}
 801210e:	4770      	bx	lr

08012110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012118:	bf00      	nop
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	bc80      	pop	{r7}
 8012120:	4770      	bx	lr

08012122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012122:	b480      	push	{r7}
 8012124:	b083      	sub	sp, #12
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801212a:	bf00      	nop
 801212c:	370c      	adds	r7, #12
 801212e:	46bd      	mov	sp, r7
 8012130:	bc80      	pop	{r7}
 8012132:	4770      	bx	lr

08012134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012134:	b480      	push	{r7}
 8012136:	b083      	sub	sp, #12
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801213c:	bf00      	nop
 801213e:	370c      	adds	r7, #12
 8012140:	46bd      	mov	sp, r7
 8012142:	bc80      	pop	{r7}
 8012144:	4770      	bx	lr
	...

08012148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012148:	b480      	push	{r7}
 801214a:	b085      	sub	sp, #20
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	4a29      	ldr	r2, [pc, #164]	; (8012200 <TIM_Base_SetConfig+0xb8>)
 801215c:	4293      	cmp	r3, r2
 801215e:	d003      	beq.n	8012168 <TIM_Base_SetConfig+0x20>
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012166:	d108      	bne.n	801217a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801216e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	68fa      	ldr	r2, [r7, #12]
 8012176:	4313      	orrs	r3, r2
 8012178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	4a20      	ldr	r2, [pc, #128]	; (8012200 <TIM_Base_SetConfig+0xb8>)
 801217e:	4293      	cmp	r3, r2
 8012180:	d00b      	beq.n	801219a <TIM_Base_SetConfig+0x52>
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012188:	d007      	beq.n	801219a <TIM_Base_SetConfig+0x52>
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	4a1d      	ldr	r2, [pc, #116]	; (8012204 <TIM_Base_SetConfig+0xbc>)
 801218e:	4293      	cmp	r3, r2
 8012190:	d003      	beq.n	801219a <TIM_Base_SetConfig+0x52>
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	4a1c      	ldr	r2, [pc, #112]	; (8012208 <TIM_Base_SetConfig+0xc0>)
 8012196:	4293      	cmp	r3, r2
 8012198:	d108      	bne.n	80121ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80121a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	68fa      	ldr	r2, [r7, #12]
 80121a8:	4313      	orrs	r3, r2
 80121aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	695b      	ldr	r3, [r3, #20]
 80121b6:	4313      	orrs	r3, r2
 80121b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	68fa      	ldr	r2, [r7, #12]
 80121be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80121c0:	683b      	ldr	r3, [r7, #0]
 80121c2:	689a      	ldr	r2, [r3, #8]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	4a0b      	ldr	r2, [pc, #44]	; (8012200 <TIM_Base_SetConfig+0xb8>)
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d007      	beq.n	80121e8 <TIM_Base_SetConfig+0xa0>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	4a0a      	ldr	r2, [pc, #40]	; (8012204 <TIM_Base_SetConfig+0xbc>)
 80121dc:	4293      	cmp	r3, r2
 80121de:	d003      	beq.n	80121e8 <TIM_Base_SetConfig+0xa0>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	4a09      	ldr	r2, [pc, #36]	; (8012208 <TIM_Base_SetConfig+0xc0>)
 80121e4:	4293      	cmp	r3, r2
 80121e6:	d103      	bne.n	80121f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	691a      	ldr	r2, [r3, #16]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2201      	movs	r2, #1
 80121f4:	615a      	str	r2, [r3, #20]
}
 80121f6:	bf00      	nop
 80121f8:	3714      	adds	r7, #20
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bc80      	pop	{r7}
 80121fe:	4770      	bx	lr
 8012200:	40012c00 	.word	0x40012c00
 8012204:	40014400 	.word	0x40014400
 8012208:	40014800 	.word	0x40014800

0801220c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012214:	bf00      	nop
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	bc80      	pop	{r7}
 801221c:	4770      	bx	lr

0801221e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801221e:	b480      	push	{r7}
 8012220:	b083      	sub	sp, #12
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012226:	bf00      	nop
 8012228:	370c      	adds	r7, #12
 801222a:	46bd      	mov	sp, r7
 801222c:	bc80      	pop	{r7}
 801222e:	4770      	bx	lr

08012230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012238:	bf00      	nop
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	bc80      	pop	{r7}
 8012240:	4770      	bx	lr

08012242 <LL_RCC_GetUSARTClockSource>:
{
 8012242:	b480      	push	{r7}
 8012244:	b083      	sub	sp, #12
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 801224a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801224e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	401a      	ands	r2, r3
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	041b      	lsls	r3, r3, #16
 801225a:	4313      	orrs	r3, r2
}
 801225c:	4618      	mov	r0, r3
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	bc80      	pop	{r7}
 8012264:	4770      	bx	lr

08012266 <LL_RCC_GetLPUARTClockSource>:
{
 8012266:	b480      	push	{r7}
 8012268:	b083      	sub	sp, #12
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 801226e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8012272:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	4013      	ands	r3, r2
}
 801227a:	4618      	mov	r0, r3
 801227c:	370c      	adds	r7, #12
 801227e:	46bd      	mov	sp, r7
 8012280:	bc80      	pop	{r7}
 8012282:	4770      	bx	lr

08012284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b082      	sub	sp, #8
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d101      	bne.n	8012296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012292:	2301      	movs	r3, #1
 8012294:	e042      	b.n	801231c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801229c:	2b00      	cmp	r3, #0
 801229e:	d106      	bne.n	80122ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	f7f8 f8e3 	bl	800a474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2224      	movs	r2, #36	; 0x24
 80122b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	681a      	ldr	r2, [r3, #0]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	f022 0201 	bic.w	r2, r2, #1
 80122c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 fd5c 	bl	8012d84 <UART_SetConfig>
 80122cc:	4603      	mov	r3, r0
 80122ce:	2b01      	cmp	r3, #1
 80122d0:	d101      	bne.n	80122d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80122d2:	2301      	movs	r3, #1
 80122d4:	e022      	b.n	801231c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d002      	beq.n	80122e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 ffc4 	bl	801326c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	685a      	ldr	r2, [r3, #4]
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80122f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	689a      	ldr	r2, [r3, #8]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	681a      	ldr	r2, [r3, #0]
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	f042 0201 	orr.w	r2, r2, #1
 8012312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f001 f84a 	bl	80133ae <UART_CheckIdleState>
 801231a:	4603      	mov	r3, r0
}
 801231c:	4618      	mov	r0, r3
 801231e:	3708      	adds	r7, #8
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b082      	sub	sp, #8
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d101      	bne.n	8012336 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8012332:	2301      	movs	r3, #1
 8012334:	e04a      	b.n	80123cc <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801233c:	2b00      	cmp	r3, #0
 801233e:	d106      	bne.n	801234e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2200      	movs	r2, #0
 8012344:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7f8 f893 	bl	800a474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2224      	movs	r2, #36	; 0x24
 8012352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	f022 0201 	bic.w	r2, r2, #1
 8012364:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f000 fd0c 	bl	8012d84 <UART_SetConfig>
 801236c:	4603      	mov	r3, r0
 801236e:	2b01      	cmp	r3, #1
 8012370:	d101      	bne.n	8012376 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8012372:	2301      	movs	r3, #1
 8012374:	e02a      	b.n	80123cc <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801237a:	2b00      	cmp	r3, #0
 801237c:	d002      	beq.n	8012384 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f000 ff74 	bl	801326c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	685a      	ldr	r2, [r3, #4]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	689a      	ldr	r2, [r3, #8]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80123a2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	689a      	ldr	r2, [r3, #8]
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f042 0208 	orr.w	r2, r2, #8
 80123b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	f042 0201 	orr.w	r2, r2, #1
 80123c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f000 fff2 	bl	80133ae <UART_CheckIdleState>
 80123ca:	4603      	mov	r3, r0
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b08a      	sub	sp, #40	; 0x28
 80123d8:	af02      	add	r7, sp, #8
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	603b      	str	r3, [r7, #0]
 80123e0:	4613      	mov	r3, r2
 80123e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123ea:	2b20      	cmp	r3, #32
 80123ec:	d173      	bne.n	80124d6 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d002      	beq.n	80123fa <HAL_UART_Transmit+0x26>
 80123f4:	88fb      	ldrh	r3, [r7, #6]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d101      	bne.n	80123fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80123fa:	2301      	movs	r3, #1
 80123fc:	e06c      	b.n	80124d8 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	2200      	movs	r2, #0
 8012402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2221      	movs	r2, #33	; 0x21
 801240a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801240e:	f7fa fdc3 	bl	800cf98 <HAL_GetTick>
 8012412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	88fa      	ldrh	r2, [r7, #6]
 8012418:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	88fa      	ldrh	r2, [r7, #6]
 8012420:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	689b      	ldr	r3, [r3, #8]
 8012428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801242c:	d108      	bne.n	8012440 <HAL_UART_Transmit+0x6c>
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	691b      	ldr	r3, [r3, #16]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d104      	bne.n	8012440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012436:	2300      	movs	r3, #0
 8012438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	61bb      	str	r3, [r7, #24]
 801243e:	e003      	b.n	8012448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012444:	2300      	movs	r3, #0
 8012446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012448:	e02c      	b.n	80124a4 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	9300      	str	r3, [sp, #0]
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	2200      	movs	r2, #0
 8012452:	2180      	movs	r1, #128	; 0x80
 8012454:	68f8      	ldr	r0, [r7, #12]
 8012456:	f000 fff8 	bl	801344a <UART_WaitOnFlagUntilTimeout>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d001      	beq.n	8012464 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8012460:	2303      	movs	r3, #3
 8012462:	e039      	b.n	80124d8 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d10b      	bne.n	8012482 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	881b      	ldrh	r3, [r3, #0]
 801246e:	461a      	mov	r2, r3
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012478:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801247a:	69bb      	ldr	r3, [r7, #24]
 801247c:	3302      	adds	r3, #2
 801247e:	61bb      	str	r3, [r7, #24]
 8012480:	e007      	b.n	8012492 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012482:	69fb      	ldr	r3, [r7, #28]
 8012484:	781a      	ldrb	r2, [r3, #0]
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	3301      	adds	r3, #1
 8012490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012498:	b29b      	uxth	r3, r3
 801249a:	3b01      	subs	r3, #1
 801249c:	b29a      	uxth	r2, r3
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d1cc      	bne.n	801244a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	9300      	str	r3, [sp, #0]
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	2200      	movs	r2, #0
 80124b8:	2140      	movs	r1, #64	; 0x40
 80124ba:	68f8      	ldr	r0, [r7, #12]
 80124bc:	f000 ffc5 	bl	801344a <UART_WaitOnFlagUntilTimeout>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d001      	beq.n	80124ca <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80124c6:	2303      	movs	r3, #3
 80124c8:	e006      	b.n	80124d8 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2220      	movs	r2, #32
 80124ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80124d2:	2300      	movs	r3, #0
 80124d4:	e000      	b.n	80124d8 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80124d6:	2302      	movs	r3, #2
  }
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3720      	adds	r7, #32
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b08a      	sub	sp, #40	; 0x28
 80124e4:	af02      	add	r7, sp, #8
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	603b      	str	r3, [r7, #0]
 80124ec:	4613      	mov	r3, r2
 80124ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80124f6:	2b20      	cmp	r3, #32
 80124f8:	f040 80b1 	bne.w	801265e <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d002      	beq.n	8012508 <HAL_UART_Receive+0x28>
 8012502:	88fb      	ldrh	r3, [r7, #6]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d101      	bne.n	801250c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8012508:	2301      	movs	r3, #1
 801250a:	e0a9      	b.n	8012660 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	2200      	movs	r2, #0
 8012510:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2222      	movs	r2, #34	; 0x22
 8012518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	2200      	movs	r2, #0
 8012520:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012522:	f7fa fd39 	bl	800cf98 <HAL_GetTick>
 8012526:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	88fa      	ldrh	r2, [r7, #6]
 801252c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	88fa      	ldrh	r2, [r7, #6]
 8012534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012540:	d10e      	bne.n	8012560 <HAL_UART_Receive+0x80>
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	691b      	ldr	r3, [r3, #16]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d105      	bne.n	8012556 <HAL_UART_Receive+0x76>
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012550:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012554:	e02d      	b.n	80125b2 <HAL_UART_Receive+0xd2>
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	22ff      	movs	r2, #255	; 0xff
 801255a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801255e:	e028      	b.n	80125b2 <HAL_UART_Receive+0xd2>
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	689b      	ldr	r3, [r3, #8]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d10d      	bne.n	8012584 <HAL_UART_Receive+0xa4>
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	691b      	ldr	r3, [r3, #16]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d104      	bne.n	801257a <HAL_UART_Receive+0x9a>
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	22ff      	movs	r2, #255	; 0xff
 8012574:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012578:	e01b      	b.n	80125b2 <HAL_UART_Receive+0xd2>
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	227f      	movs	r2, #127	; 0x7f
 801257e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012582:	e016      	b.n	80125b2 <HAL_UART_Receive+0xd2>
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	689b      	ldr	r3, [r3, #8]
 8012588:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801258c:	d10d      	bne.n	80125aa <HAL_UART_Receive+0xca>
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	691b      	ldr	r3, [r3, #16]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d104      	bne.n	80125a0 <HAL_UART_Receive+0xc0>
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	227f      	movs	r2, #127	; 0x7f
 801259a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801259e:	e008      	b.n	80125b2 <HAL_UART_Receive+0xd2>
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	223f      	movs	r2, #63	; 0x3f
 80125a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80125a8:	e003      	b.n	80125b2 <HAL_UART_Receive+0xd2>
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	2200      	movs	r2, #0
 80125ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80125b8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	689b      	ldr	r3, [r3, #8]
 80125be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125c2:	d108      	bne.n	80125d6 <HAL_UART_Receive+0xf6>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	691b      	ldr	r3, [r3, #16]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d104      	bne.n	80125d6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80125cc:	2300      	movs	r3, #0
 80125ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	61bb      	str	r3, [r7, #24]
 80125d4:	e003      	b.n	80125de <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80125da:	2300      	movs	r3, #0
 80125dc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80125de:	e032      	b.n	8012646 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	9300      	str	r3, [sp, #0]
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	2200      	movs	r2, #0
 80125e8:	2120      	movs	r1, #32
 80125ea:	68f8      	ldr	r0, [r7, #12]
 80125ec:	f000 ff2d 	bl	801344a <UART_WaitOnFlagUntilTimeout>
 80125f0:	4603      	mov	r3, r0
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d001      	beq.n	80125fa <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80125f6:	2303      	movs	r3, #3
 80125f8:	e032      	b.n	8012660 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d10c      	bne.n	801261a <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012606:	b29a      	uxth	r2, r3
 8012608:	8a7b      	ldrh	r3, [r7, #18]
 801260a:	4013      	ands	r3, r2
 801260c:	b29a      	uxth	r2, r3
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8012612:	69bb      	ldr	r3, [r7, #24]
 8012614:	3302      	adds	r3, #2
 8012616:	61bb      	str	r3, [r7, #24]
 8012618:	e00c      	b.n	8012634 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012620:	b2da      	uxtb	r2, r3
 8012622:	8a7b      	ldrh	r3, [r7, #18]
 8012624:	b2db      	uxtb	r3, r3
 8012626:	4013      	ands	r3, r2
 8012628:	b2da      	uxtb	r2, r3
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801262e:	69fb      	ldr	r3, [r7, #28]
 8012630:	3301      	adds	r3, #1
 8012632:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801263a:	b29b      	uxth	r3, r3
 801263c:	3b01      	subs	r3, #1
 801263e:	b29a      	uxth	r2, r3
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801264c:	b29b      	uxth	r3, r3
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1c6      	bne.n	80125e0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	2220      	movs	r2, #32
 8012656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801265a:	2300      	movs	r3, #0
 801265c:	e000      	b.n	8012660 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 801265e:	2302      	movs	r3, #2
  }
}
 8012660:	4618      	mov	r0, r3
 8012662:	3720      	adds	r7, #32
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b08a      	sub	sp, #40	; 0x28
 801266c:	af00      	add	r7, sp, #0
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	60b9      	str	r1, [r7, #8]
 8012672:	4613      	mov	r3, r2
 8012674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801267c:	2b20      	cmp	r3, #32
 801267e:	d137      	bne.n	80126f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d002      	beq.n	801268c <HAL_UART_Receive_IT+0x24>
 8012686:	88fb      	ldrh	r3, [r7, #6]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d101      	bne.n	8012690 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801268c:	2301      	movs	r3, #1
 801268e:	e030      	b.n	80126f2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	2200      	movs	r2, #0
 8012694:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	4a18      	ldr	r2, [pc, #96]	; (80126fc <HAL_UART_Receive_IT+0x94>)
 801269c:	4293      	cmp	r3, r2
 801269e:	d01f      	beq.n	80126e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	685b      	ldr	r3, [r3, #4]
 80126a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d018      	beq.n	80126e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	e853 3f00 	ldrex	r3, [r3]
 80126ba:	613b      	str	r3, [r7, #16]
   return(result);
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80126c2:	627b      	str	r3, [r7, #36]	; 0x24
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	461a      	mov	r2, r3
 80126ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126cc:	623b      	str	r3, [r7, #32]
 80126ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126d0:	69f9      	ldr	r1, [r7, #28]
 80126d2:	6a3a      	ldr	r2, [r7, #32]
 80126d4:	e841 2300 	strex	r3, r2, [r1]
 80126d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80126da:	69bb      	ldr	r3, [r7, #24]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d1e6      	bne.n	80126ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80126e0:	88fb      	ldrh	r3, [r7, #6]
 80126e2:	461a      	mov	r2, r3
 80126e4:	68b9      	ldr	r1, [r7, #8]
 80126e6:	68f8      	ldr	r0, [r7, #12]
 80126e8:	f000 ff78 	bl	80135dc <UART_Start_Receive_IT>
 80126ec:	4603      	mov	r3, r0
 80126ee:	e000      	b.n	80126f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80126f0:	2302      	movs	r3, #2
  }
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	3728      	adds	r7, #40	; 0x28
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	40008000 	.word	0x40008000

08012700 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b0ba      	sub	sp, #232	; 0xe8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	69db      	ldr	r3, [r3, #28]
 801270e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	689b      	ldr	r3, [r3, #8]
 8012722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012726:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801272a:	f640 030f 	movw	r3, #2063	; 0x80f
 801272e:	4013      	ands	r3, r2
 8012730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012738:	2b00      	cmp	r3, #0
 801273a:	d11b      	bne.n	8012774 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801273c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012740:	f003 0320 	and.w	r3, r3, #32
 8012744:	2b00      	cmp	r3, #0
 8012746:	d015      	beq.n	8012774 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801274c:	f003 0320 	and.w	r3, r3, #32
 8012750:	2b00      	cmp	r3, #0
 8012752:	d105      	bne.n	8012760 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801275c:	2b00      	cmp	r3, #0
 801275e:	d009      	beq.n	8012774 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012764:	2b00      	cmp	r3, #0
 8012766:	f000 82e3 	beq.w	8012d30 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	4798      	blx	r3
      }
      return;
 8012772:	e2dd      	b.n	8012d30 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012774:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012778:	2b00      	cmp	r3, #0
 801277a:	f000 8123 	beq.w	80129c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801277e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012782:	4b8d      	ldr	r3, [pc, #564]	; (80129b8 <HAL_UART_IRQHandler+0x2b8>)
 8012784:	4013      	ands	r3, r2
 8012786:	2b00      	cmp	r3, #0
 8012788:	d106      	bne.n	8012798 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801278a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801278e:	4b8b      	ldr	r3, [pc, #556]	; (80129bc <HAL_UART_IRQHandler+0x2bc>)
 8012790:	4013      	ands	r3, r2
 8012792:	2b00      	cmp	r3, #0
 8012794:	f000 8116 	beq.w	80129c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801279c:	f003 0301 	and.w	r3, r3, #1
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d011      	beq.n	80127c8 <HAL_UART_IRQHandler+0xc8>
 80127a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d00b      	beq.n	80127c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	2201      	movs	r2, #1
 80127b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127be:	f043 0201 	orr.w	r2, r3, #1
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80127c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127cc:	f003 0302 	and.w	r3, r3, #2
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d011      	beq.n	80127f8 <HAL_UART_IRQHandler+0xf8>
 80127d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80127d8:	f003 0301 	and.w	r3, r3, #1
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d00b      	beq.n	80127f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	2202      	movs	r2, #2
 80127e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127ee:	f043 0204 	orr.w	r2, r3, #4
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80127f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127fc:	f003 0304 	and.w	r3, r3, #4
 8012800:	2b00      	cmp	r3, #0
 8012802:	d011      	beq.n	8012828 <HAL_UART_IRQHandler+0x128>
 8012804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012808:	f003 0301 	and.w	r3, r3, #1
 801280c:	2b00      	cmp	r3, #0
 801280e:	d00b      	beq.n	8012828 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	2204      	movs	r2, #4
 8012816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801281e:	f043 0202 	orr.w	r2, r3, #2
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801282c:	f003 0308 	and.w	r3, r3, #8
 8012830:	2b00      	cmp	r3, #0
 8012832:	d017      	beq.n	8012864 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012838:	f003 0320 	and.w	r3, r3, #32
 801283c:	2b00      	cmp	r3, #0
 801283e:	d105      	bne.n	801284c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012840:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012844:	4b5c      	ldr	r3, [pc, #368]	; (80129b8 <HAL_UART_IRQHandler+0x2b8>)
 8012846:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012848:	2b00      	cmp	r3, #0
 801284a:	d00b      	beq.n	8012864 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2208      	movs	r2, #8
 8012852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801285a:	f043 0208 	orr.w	r2, r3, #8
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801286c:	2b00      	cmp	r3, #0
 801286e:	d012      	beq.n	8012896 <HAL_UART_IRQHandler+0x196>
 8012870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012878:	2b00      	cmp	r3, #0
 801287a:	d00c      	beq.n	8012896 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801288c:	f043 0220 	orr.w	r2, r3, #32
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801289c:	2b00      	cmp	r3, #0
 801289e:	f000 8249 	beq.w	8012d34 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80128a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80128a6:	f003 0320 	and.w	r3, r3, #32
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d013      	beq.n	80128d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80128ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80128b2:	f003 0320 	and.w	r3, r3, #32
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d105      	bne.n	80128c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80128ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80128be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d007      	beq.n	80128d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d003      	beq.n	80128d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	689b      	ldr	r3, [r3, #8]
 80128e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128ea:	2b40      	cmp	r3, #64	; 0x40
 80128ec:	d005      	beq.n	80128fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80128ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80128f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d054      	beq.n	80129a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f000 ff8e 	bl	801381c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	689b      	ldr	r3, [r3, #8]
 8012906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801290a:	2b40      	cmp	r3, #64	; 0x40
 801290c:	d146      	bne.n	801299c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	3308      	adds	r3, #8
 8012914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801291c:	e853 3f00 	ldrex	r3, [r3]
 8012920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801292c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	3308      	adds	r3, #8
 8012936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801293a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801293e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801294a:	e841 2300 	strex	r3, r2, [r1]
 801294e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012956:	2b00      	cmp	r3, #0
 8012958:	d1d9      	bne.n	801290e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012960:	2b00      	cmp	r3, #0
 8012962:	d017      	beq.n	8012994 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801296a:	4a15      	ldr	r2, [pc, #84]	; (80129c0 <HAL_UART_IRQHandler+0x2c0>)
 801296c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012974:	4618      	mov	r0, r3
 8012976:	f7fb fca4 	bl	800e2c2 <HAL_DMA_Abort_IT>
 801297a:	4603      	mov	r3, r0
 801297c:	2b00      	cmp	r3, #0
 801297e:	d019      	beq.n	80129b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801298e:	4610      	mov	r0, r2
 8012990:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012992:	e00f      	b.n	80129b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f000 f9e0 	bl	8012d5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801299a:	e00b      	b.n	80129b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 f9dc 	bl	8012d5a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80129a2:	e007      	b.n	80129b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f000 f9d8 	bl	8012d5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2200      	movs	r2, #0
 80129ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80129b2:	e1bf      	b.n	8012d34 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80129b4:	bf00      	nop
    return;
 80129b6:	e1bd      	b.n	8012d34 <HAL_UART_IRQHandler+0x634>
 80129b8:	10000001 	.word	0x10000001
 80129bc:	04000120 	.word	0x04000120
 80129c0:	080138e7 	.word	0x080138e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	f040 8153 	bne.w	8012c74 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80129ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129d2:	f003 0310 	and.w	r3, r3, #16
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	f000 814c 	beq.w	8012c74 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80129dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80129e0:	f003 0310 	and.w	r3, r3, #16
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	f000 8145 	beq.w	8012c74 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2210      	movs	r2, #16
 80129f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	689b      	ldr	r3, [r3, #8]
 80129f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129fc:	2b40      	cmp	r3, #64	; 0x40
 80129fe:	f040 80bb 	bne.w	8012b78 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012a10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	f000 818f 	beq.w	8012d38 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012a20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012a24:	429a      	cmp	r2, r3
 8012a26:	f080 8187 	bcs.w	8012d38 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012a30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	f003 0320 	and.w	r3, r3, #32
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	f040 8087 	bne.w	8012b56 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012a54:	e853 3f00 	ldrex	r3, [r3]
 8012a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012a76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012a7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012a82:	e841 2300 	strex	r3, r2, [r1]
 8012a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d1da      	bne.n	8012a48 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	3308      	adds	r3, #8
 8012a98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a9c:	e853 3f00 	ldrex	r3, [r3]
 8012aa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012aa4:	f023 0301 	bic.w	r3, r3, #1
 8012aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	3308      	adds	r3, #8
 8012ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012ab6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012aba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012abc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012abe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012ac2:	e841 2300 	strex	r3, r2, [r1]
 8012ac6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d1e1      	bne.n	8012a92 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	3308      	adds	r3, #8
 8012ad4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ad8:	e853 3f00 	ldrex	r3, [r3]
 8012adc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	3308      	adds	r3, #8
 8012aee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012af2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012af4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012af6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012af8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012afa:	e841 2300 	strex	r3, r2, [r1]
 8012afe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d1e3      	bne.n	8012ace <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2220      	movs	r2, #32
 8012b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2200      	movs	r2, #0
 8012b12:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b1c:	e853 3f00 	ldrex	r3, [r3]
 8012b20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b24:	f023 0310 	bic.w	r3, r3, #16
 8012b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	461a      	mov	r2, r3
 8012b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012b36:	65bb      	str	r3, [r7, #88]	; 0x58
 8012b38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012b3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b3e:	e841 2300 	strex	r3, r2, [r1]
 8012b42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d1e4      	bne.n	8012b14 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7fb fb58 	bl	800e206 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2202      	movs	r2, #2
 8012b5a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	4619      	mov	r1, r3
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f000 f8fb 	bl	8012d6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012b76:	e0df      	b.n	8012d38 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	1ad3      	subs	r3, r2, r3
 8012b88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f000 80d1 	beq.w	8012d3c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8012b9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	f000 80cc 	beq.w	8012d3c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bac:	e853 3f00 	ldrex	r3, [r3]
 8012bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012bb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	461a      	mov	r2, r3
 8012bc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8012bc8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012bce:	e841 2300 	strex	r3, r2, [r1]
 8012bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d1e4      	bne.n	8012ba4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	3308      	adds	r3, #8
 8012be0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be4:	e853 3f00 	ldrex	r3, [r3]
 8012be8:	623b      	str	r3, [r7, #32]
   return(result);
 8012bea:	6a3b      	ldr	r3, [r7, #32]
 8012bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012bf0:	f023 0301 	bic.w	r3, r3, #1
 8012bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	3308      	adds	r3, #8
 8012bfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012c02:	633a      	str	r2, [r7, #48]	; 0x30
 8012c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c0a:	e841 2300 	strex	r3, r2, [r1]
 8012c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d1e1      	bne.n	8012bda <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2220      	movs	r2, #32
 8012c1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2200      	movs	r2, #0
 8012c22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2200      	movs	r2, #0
 8012c28:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	e853 3f00 	ldrex	r3, [r3]
 8012c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f023 0310 	bic.w	r3, r3, #16
 8012c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	461a      	mov	r2, r3
 8012c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012c4c:	61fb      	str	r3, [r7, #28]
 8012c4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c50:	69b9      	ldr	r1, [r7, #24]
 8012c52:	69fa      	ldr	r2, [r7, #28]
 8012c54:	e841 2300 	strex	r3, r2, [r1]
 8012c58:	617b      	str	r3, [r7, #20]
   return(result);
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d1e4      	bne.n	8012c2a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2202      	movs	r2, #2
 8012c64:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012c66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f000 f87d 	bl	8012d6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012c72:	e063      	b.n	8012d3c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d00e      	beq.n	8012c9e <HAL_UART_IRQHandler+0x59e>
 8012c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d008      	beq.n	8012c9e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f001 fb82 	bl	80143a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c9c:	e051      	b.n	8012d42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d014      	beq.n	8012cd4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d105      	bne.n	8012cc2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d008      	beq.n	8012cd4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d03a      	beq.n	8012d40 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	4798      	blx	r3
    }
    return;
 8012cd2:	e035      	b.n	8012d40 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d009      	beq.n	8012cf4 <HAL_UART_IRQHandler+0x5f4>
 8012ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d003      	beq.n	8012cf4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 fe10 	bl	8013912 <UART_EndTransmit_IT>
    return;
 8012cf2:	e026      	b.n	8012d42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d009      	beq.n	8012d14 <HAL_UART_IRQHandler+0x614>
 8012d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012d04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d003      	beq.n	8012d14 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f001 fb59 	bl	80143c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012d12:	e016      	b.n	8012d42 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d010      	beq.n	8012d42 <HAL_UART_IRQHandler+0x642>
 8012d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	da0c      	bge.n	8012d42 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f001 fb42 	bl	80143b2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012d2e:	e008      	b.n	8012d42 <HAL_UART_IRQHandler+0x642>
      return;
 8012d30:	bf00      	nop
 8012d32:	e006      	b.n	8012d42 <HAL_UART_IRQHandler+0x642>
    return;
 8012d34:	bf00      	nop
 8012d36:	e004      	b.n	8012d42 <HAL_UART_IRQHandler+0x642>
      return;
 8012d38:	bf00      	nop
 8012d3a:	e002      	b.n	8012d42 <HAL_UART_IRQHandler+0x642>
      return;
 8012d3c:	bf00      	nop
 8012d3e:	e000      	b.n	8012d42 <HAL_UART_IRQHandler+0x642>
    return;
 8012d40:	bf00      	nop
  }
}
 8012d42:	37e8      	adds	r7, #232	; 0xe8
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012d50:	bf00      	nop
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bc80      	pop	{r7}
 8012d58:	4770      	bx	lr

08012d5a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012d5a:	b480      	push	{r7}
 8012d5c:	b083      	sub	sp, #12
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012d62:	bf00      	nop
 8012d64:	370c      	adds	r7, #12
 8012d66:	46bd      	mov	sp, r7
 8012d68:	bc80      	pop	{r7}
 8012d6a:	4770      	bx	lr

08012d6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	460b      	mov	r3, r1
 8012d76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012d78:	bf00      	nop
 8012d7a:	370c      	adds	r7, #12
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bc80      	pop	{r7}
 8012d80:	4770      	bx	lr
	...

08012d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012d88:	b08c      	sub	sp, #48	; 0x30
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	689a      	ldr	r2, [r3, #8]
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	691b      	ldr	r3, [r3, #16]
 8012d9c:	431a      	orrs	r2, r3
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	695b      	ldr	r3, [r3, #20]
 8012da2:	431a      	orrs	r2, r3
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	69db      	ldr	r3, [r3, #28]
 8012da8:	4313      	orrs	r3, r2
 8012daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	681a      	ldr	r2, [r3, #0]
 8012db2:	4b94      	ldr	r3, [pc, #592]	; (8013004 <UART_SetConfig+0x280>)
 8012db4:	4013      	ands	r3, r2
 8012db6:	697a      	ldr	r2, [r7, #20]
 8012db8:	6812      	ldr	r2, [r2, #0]
 8012dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012dbc:	430b      	orrs	r3, r1
 8012dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	685b      	ldr	r3, [r3, #4]
 8012dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	68da      	ldr	r2, [r3, #12]
 8012dce:	697b      	ldr	r3, [r7, #20]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	430a      	orrs	r2, r1
 8012dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	699b      	ldr	r3, [r3, #24]
 8012dda:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	4a89      	ldr	r2, [pc, #548]	; (8013008 <UART_SetConfig+0x284>)
 8012de2:	4293      	cmp	r3, r2
 8012de4:	d004      	beq.n	8012df0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	6a1b      	ldr	r3, [r3, #32]
 8012dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dec:	4313      	orrs	r3, r2
 8012dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	689b      	ldr	r3, [r3, #8]
 8012df6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8012dfa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8012dfe:	697a      	ldr	r2, [r7, #20]
 8012e00:	6812      	ldr	r2, [r2, #0]
 8012e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e04:	430b      	orrs	r3, r1
 8012e06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e0e:	f023 010f 	bic.w	r1, r3, #15
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	430a      	orrs	r2, r1
 8012e1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	4a7a      	ldr	r2, [pc, #488]	; (801300c <UART_SetConfig+0x288>)
 8012e24:	4293      	cmp	r3, r2
 8012e26:	d127      	bne.n	8012e78 <UART_SetConfig+0xf4>
 8012e28:	2003      	movs	r0, #3
 8012e2a:	f7ff fa0a 	bl	8012242 <LL_RCC_GetUSARTClockSource>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8012e34:	2b03      	cmp	r3, #3
 8012e36:	d81b      	bhi.n	8012e70 <UART_SetConfig+0xec>
 8012e38:	a201      	add	r2, pc, #4	; (adr r2, 8012e40 <UART_SetConfig+0xbc>)
 8012e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e3e:	bf00      	nop
 8012e40:	08012e51 	.word	0x08012e51
 8012e44:	08012e61 	.word	0x08012e61
 8012e48:	08012e59 	.word	0x08012e59
 8012e4c:	08012e69 	.word	0x08012e69
 8012e50:	2301      	movs	r3, #1
 8012e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e56:	e080      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012e58:	2302      	movs	r3, #2
 8012e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e5e:	e07c      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012e60:	2304      	movs	r3, #4
 8012e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e66:	e078      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012e68:	2308      	movs	r3, #8
 8012e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e6e:	e074      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012e70:	2310      	movs	r3, #16
 8012e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012e76:	e070      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	4a64      	ldr	r2, [pc, #400]	; (8013010 <UART_SetConfig+0x28c>)
 8012e7e:	4293      	cmp	r3, r2
 8012e80:	d138      	bne.n	8012ef4 <UART_SetConfig+0x170>
 8012e82:	200c      	movs	r0, #12
 8012e84:	f7ff f9dd 	bl	8012242 <LL_RCC_GetUSARTClockSource>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8012e8e:	2b0c      	cmp	r3, #12
 8012e90:	d82c      	bhi.n	8012eec <UART_SetConfig+0x168>
 8012e92:	a201      	add	r2, pc, #4	; (adr r2, 8012e98 <UART_SetConfig+0x114>)
 8012e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e98:	08012ecd 	.word	0x08012ecd
 8012e9c:	08012eed 	.word	0x08012eed
 8012ea0:	08012eed 	.word	0x08012eed
 8012ea4:	08012eed 	.word	0x08012eed
 8012ea8:	08012edd 	.word	0x08012edd
 8012eac:	08012eed 	.word	0x08012eed
 8012eb0:	08012eed 	.word	0x08012eed
 8012eb4:	08012eed 	.word	0x08012eed
 8012eb8:	08012ed5 	.word	0x08012ed5
 8012ebc:	08012eed 	.word	0x08012eed
 8012ec0:	08012eed 	.word	0x08012eed
 8012ec4:	08012eed 	.word	0x08012eed
 8012ec8:	08012ee5 	.word	0x08012ee5
 8012ecc:	2300      	movs	r3, #0
 8012ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012ed2:	e042      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012ed4:	2302      	movs	r3, #2
 8012ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012eda:	e03e      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012edc:	2304      	movs	r3, #4
 8012ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012ee2:	e03a      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012ee4:	2308      	movs	r3, #8
 8012ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012eea:	e036      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012eec:	2310      	movs	r3, #16
 8012eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012ef2:	e032      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	4a43      	ldr	r2, [pc, #268]	; (8013008 <UART_SetConfig+0x284>)
 8012efa:	4293      	cmp	r3, r2
 8012efc:	d12a      	bne.n	8012f54 <UART_SetConfig+0x1d0>
 8012efe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012f02:	f7ff f9b0 	bl	8012266 <LL_RCC_GetLPUARTClockSource>
 8012f06:	4603      	mov	r3, r0
 8012f08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012f0c:	d01a      	beq.n	8012f44 <UART_SetConfig+0x1c0>
 8012f0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012f12:	d81b      	bhi.n	8012f4c <UART_SetConfig+0x1c8>
 8012f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012f18:	d00c      	beq.n	8012f34 <UART_SetConfig+0x1b0>
 8012f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012f1e:	d815      	bhi.n	8012f4c <UART_SetConfig+0x1c8>
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d003      	beq.n	8012f2c <UART_SetConfig+0x1a8>
 8012f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012f28:	d008      	beq.n	8012f3c <UART_SetConfig+0x1b8>
 8012f2a:	e00f      	b.n	8012f4c <UART_SetConfig+0x1c8>
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012f32:	e012      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012f34:	2302      	movs	r3, #2
 8012f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012f3a:	e00e      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012f3c:	2304      	movs	r3, #4
 8012f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012f42:	e00a      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012f44:	2308      	movs	r3, #8
 8012f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012f4a:	e006      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012f4c:	2310      	movs	r3, #16
 8012f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012f52:	e002      	b.n	8012f5a <UART_SetConfig+0x1d6>
 8012f54:	2310      	movs	r3, #16
 8012f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012f5a:	697b      	ldr	r3, [r7, #20]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	4a2a      	ldr	r2, [pc, #168]	; (8013008 <UART_SetConfig+0x284>)
 8012f60:	4293      	cmp	r3, r2
 8012f62:	f040 80a4 	bne.w	80130ae <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012f66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012f6a:	2b08      	cmp	r3, #8
 8012f6c:	d823      	bhi.n	8012fb6 <UART_SetConfig+0x232>
 8012f6e:	a201      	add	r2, pc, #4	; (adr r2, 8012f74 <UART_SetConfig+0x1f0>)
 8012f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f74:	08012f99 	.word	0x08012f99
 8012f78:	08012fb7 	.word	0x08012fb7
 8012f7c:	08012fa1 	.word	0x08012fa1
 8012f80:	08012fb7 	.word	0x08012fb7
 8012f84:	08012fa7 	.word	0x08012fa7
 8012f88:	08012fb7 	.word	0x08012fb7
 8012f8c:	08012fb7 	.word	0x08012fb7
 8012f90:	08012fb7 	.word	0x08012fb7
 8012f94:	08012faf 	.word	0x08012faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012f98:	f7fc ff7a 	bl	800fe90 <HAL_RCC_GetPCLK1Freq>
 8012f9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012f9e:	e010      	b.n	8012fc2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012fa0:	4b1c      	ldr	r3, [pc, #112]	; (8013014 <UART_SetConfig+0x290>)
 8012fa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012fa4:	e00d      	b.n	8012fc2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012fa6:	f7fc febf 	bl	800fd28 <HAL_RCC_GetSysClockFreq>
 8012faa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012fac:	e009      	b.n	8012fc2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012fb4:	e005      	b.n	8012fc2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8012fba:	2301      	movs	r3, #1
 8012fbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8012fc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	f000 8137 	beq.w	8013238 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fce:	4a12      	ldr	r2, [pc, #72]	; (8013018 <UART_SetConfig+0x294>)
 8012fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fdc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	685a      	ldr	r2, [r3, #4]
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	005b      	lsls	r3, r3, #1
 8012fe6:	4413      	add	r3, r2
 8012fe8:	69ba      	ldr	r2, [r7, #24]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d305      	bcc.n	8012ffa <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	685b      	ldr	r3, [r3, #4]
 8012ff2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012ff4:	69ba      	ldr	r2, [r7, #24]
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d910      	bls.n	801301c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8013000:	e11a      	b.n	8013238 <UART_SetConfig+0x4b4>
 8013002:	bf00      	nop
 8013004:	cfff69f3 	.word	0xcfff69f3
 8013008:	40008000 	.word	0x40008000
 801300c:	40013800 	.word	0x40013800
 8013010:	40004400 	.word	0x40004400
 8013014:	00f42400 	.word	0x00f42400
 8013018:	080201fc 	.word	0x080201fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301e:	2200      	movs	r2, #0
 8013020:	60bb      	str	r3, [r7, #8]
 8013022:	60fa      	str	r2, [r7, #12]
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013028:	4a8e      	ldr	r2, [pc, #568]	; (8013264 <UART_SetConfig+0x4e0>)
 801302a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801302e:	b29b      	uxth	r3, r3
 8013030:	2200      	movs	r2, #0
 8013032:	603b      	str	r3, [r7, #0]
 8013034:	607a      	str	r2, [r7, #4]
 8013036:	e9d7 2300 	ldrd	r2, r3, [r7]
 801303a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801303e:	f7f6 f8d9 	bl	80091f4 <__aeabi_uldivmod>
 8013042:	4602      	mov	r2, r0
 8013044:	460b      	mov	r3, r1
 8013046:	4610      	mov	r0, r2
 8013048:	4619      	mov	r1, r3
 801304a:	f04f 0200 	mov.w	r2, #0
 801304e:	f04f 0300 	mov.w	r3, #0
 8013052:	020b      	lsls	r3, r1, #8
 8013054:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013058:	0202      	lsls	r2, r0, #8
 801305a:	6979      	ldr	r1, [r7, #20]
 801305c:	6849      	ldr	r1, [r1, #4]
 801305e:	0849      	lsrs	r1, r1, #1
 8013060:	2000      	movs	r0, #0
 8013062:	460c      	mov	r4, r1
 8013064:	4605      	mov	r5, r0
 8013066:	eb12 0804 	adds.w	r8, r2, r4
 801306a:	eb43 0905 	adc.w	r9, r3, r5
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	2200      	movs	r2, #0
 8013074:	469a      	mov	sl, r3
 8013076:	4693      	mov	fp, r2
 8013078:	4652      	mov	r2, sl
 801307a:	465b      	mov	r3, fp
 801307c:	4640      	mov	r0, r8
 801307e:	4649      	mov	r1, r9
 8013080:	f7f6 f8b8 	bl	80091f4 <__aeabi_uldivmod>
 8013084:	4602      	mov	r2, r0
 8013086:	460b      	mov	r3, r1
 8013088:	4613      	mov	r3, r2
 801308a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801308c:	6a3b      	ldr	r3, [r7, #32]
 801308e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013092:	d308      	bcc.n	80130a6 <UART_SetConfig+0x322>
 8013094:	6a3b      	ldr	r3, [r7, #32]
 8013096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801309a:	d204      	bcs.n	80130a6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	6a3a      	ldr	r2, [r7, #32]
 80130a2:	60da      	str	r2, [r3, #12]
 80130a4:	e0c8      	b.n	8013238 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80130a6:	2301      	movs	r3, #1
 80130a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80130ac:	e0c4      	b.n	8013238 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	69db      	ldr	r3, [r3, #28]
 80130b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130b6:	d167      	bne.n	8013188 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80130b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80130bc:	2b08      	cmp	r3, #8
 80130be:	d828      	bhi.n	8013112 <UART_SetConfig+0x38e>
 80130c0:	a201      	add	r2, pc, #4	; (adr r2, 80130c8 <UART_SetConfig+0x344>)
 80130c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130c6:	bf00      	nop
 80130c8:	080130ed 	.word	0x080130ed
 80130cc:	080130f5 	.word	0x080130f5
 80130d0:	080130fd 	.word	0x080130fd
 80130d4:	08013113 	.word	0x08013113
 80130d8:	08013103 	.word	0x08013103
 80130dc:	08013113 	.word	0x08013113
 80130e0:	08013113 	.word	0x08013113
 80130e4:	08013113 	.word	0x08013113
 80130e8:	0801310b 	.word	0x0801310b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80130ec:	f7fc fed0 	bl	800fe90 <HAL_RCC_GetPCLK1Freq>
 80130f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80130f2:	e014      	b.n	801311e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80130f4:	f7fc fede 	bl	800feb4 <HAL_RCC_GetPCLK2Freq>
 80130f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80130fa:	e010      	b.n	801311e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80130fc:	4b5a      	ldr	r3, [pc, #360]	; (8013268 <UART_SetConfig+0x4e4>)
 80130fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013100:	e00d      	b.n	801311e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013102:	f7fc fe11 	bl	800fd28 <HAL_RCC_GetSysClockFreq>
 8013106:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8013108:	e009      	b.n	801311e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801310a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801310e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013110:	e005      	b.n	801311e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8013112:	2300      	movs	r3, #0
 8013114:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8013116:	2301      	movs	r3, #1
 8013118:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801311c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013120:	2b00      	cmp	r3, #0
 8013122:	f000 8089 	beq.w	8013238 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801312a:	4a4e      	ldr	r2, [pc, #312]	; (8013264 <UART_SetConfig+0x4e0>)
 801312c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013130:	461a      	mov	r2, r3
 8013132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013134:	fbb3 f3f2 	udiv	r3, r3, r2
 8013138:	005a      	lsls	r2, r3, #1
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	085b      	lsrs	r3, r3, #1
 8013140:	441a      	add	r2, r3
 8013142:	697b      	ldr	r3, [r7, #20]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	fbb2 f3f3 	udiv	r3, r2, r3
 801314a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801314c:	6a3b      	ldr	r3, [r7, #32]
 801314e:	2b0f      	cmp	r3, #15
 8013150:	d916      	bls.n	8013180 <UART_SetConfig+0x3fc>
 8013152:	6a3b      	ldr	r3, [r7, #32]
 8013154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013158:	d212      	bcs.n	8013180 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801315a:	6a3b      	ldr	r3, [r7, #32]
 801315c:	b29b      	uxth	r3, r3
 801315e:	f023 030f 	bic.w	r3, r3, #15
 8013162:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013164:	6a3b      	ldr	r3, [r7, #32]
 8013166:	085b      	lsrs	r3, r3, #1
 8013168:	b29b      	uxth	r3, r3
 801316a:	f003 0307 	and.w	r3, r3, #7
 801316e:	b29a      	uxth	r2, r3
 8013170:	8bfb      	ldrh	r3, [r7, #30]
 8013172:	4313      	orrs	r3, r2
 8013174:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	8bfa      	ldrh	r2, [r7, #30]
 801317c:	60da      	str	r2, [r3, #12]
 801317e:	e05b      	b.n	8013238 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8013180:	2301      	movs	r3, #1
 8013182:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8013186:	e057      	b.n	8013238 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013188:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801318c:	2b08      	cmp	r3, #8
 801318e:	d828      	bhi.n	80131e2 <UART_SetConfig+0x45e>
 8013190:	a201      	add	r2, pc, #4	; (adr r2, 8013198 <UART_SetConfig+0x414>)
 8013192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013196:	bf00      	nop
 8013198:	080131bd 	.word	0x080131bd
 801319c:	080131c5 	.word	0x080131c5
 80131a0:	080131cd 	.word	0x080131cd
 80131a4:	080131e3 	.word	0x080131e3
 80131a8:	080131d3 	.word	0x080131d3
 80131ac:	080131e3 	.word	0x080131e3
 80131b0:	080131e3 	.word	0x080131e3
 80131b4:	080131e3 	.word	0x080131e3
 80131b8:	080131db 	.word	0x080131db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80131bc:	f7fc fe68 	bl	800fe90 <HAL_RCC_GetPCLK1Freq>
 80131c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80131c2:	e014      	b.n	80131ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80131c4:	f7fc fe76 	bl	800feb4 <HAL_RCC_GetPCLK2Freq>
 80131c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80131ca:	e010      	b.n	80131ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80131cc:	4b26      	ldr	r3, [pc, #152]	; (8013268 <UART_SetConfig+0x4e4>)
 80131ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80131d0:	e00d      	b.n	80131ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80131d2:	f7fc fda9 	bl	800fd28 <HAL_RCC_GetSysClockFreq>
 80131d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80131d8:	e009      	b.n	80131ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80131da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80131de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80131e0:	e005      	b.n	80131ee <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80131e2:	2300      	movs	r3, #0
 80131e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80131e6:	2301      	movs	r3, #1
 80131e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80131ec:	bf00      	nop
    }

    if (pclk != 0U)
 80131ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d021      	beq.n	8013238 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f8:	4a1a      	ldr	r2, [pc, #104]	; (8013264 <UART_SetConfig+0x4e0>)
 80131fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80131fe:	461a      	mov	r2, r3
 8013200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013202:	fbb3 f2f2 	udiv	r2, r3, r2
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	085b      	lsrs	r3, r3, #1
 801320c:	441a      	add	r2, r3
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	fbb2 f3f3 	udiv	r3, r2, r3
 8013216:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013218:	6a3b      	ldr	r3, [r7, #32]
 801321a:	2b0f      	cmp	r3, #15
 801321c:	d909      	bls.n	8013232 <UART_SetConfig+0x4ae>
 801321e:	6a3b      	ldr	r3, [r7, #32]
 8013220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013224:	d205      	bcs.n	8013232 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013226:	6a3b      	ldr	r3, [r7, #32]
 8013228:	b29a      	uxth	r2, r3
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	60da      	str	r2, [r3, #12]
 8013230:	e002      	b.n	8013238 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8013232:	2301      	movs	r3, #1
 8013234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	2201      	movs	r2, #1
 801323c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	2201      	movs	r2, #1
 8013244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	2200      	movs	r2, #0
 801324c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	2200      	movs	r2, #0
 8013252:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013254:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8013258:	4618      	mov	r0, r3
 801325a:	3730      	adds	r7, #48	; 0x30
 801325c:	46bd      	mov	sp, r7
 801325e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013262:	bf00      	nop
 8013264:	080201fc 	.word	0x080201fc
 8013268:	00f42400 	.word	0x00f42400

0801326c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801326c:	b480      	push	{r7}
 801326e:	b083      	sub	sp, #12
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013278:	f003 0301 	and.w	r3, r3, #1
 801327c:	2b00      	cmp	r3, #0
 801327e:	d00a      	beq.n	8013296 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	685b      	ldr	r3, [r3, #4]
 8013286:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	430a      	orrs	r2, r1
 8013294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801329a:	f003 0302 	and.w	r3, r3, #2
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d00a      	beq.n	80132b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	430a      	orrs	r2, r1
 80132b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132bc:	f003 0304 	and.w	r3, r3, #4
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d00a      	beq.n	80132da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	430a      	orrs	r2, r1
 80132d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132de:	f003 0308 	and.w	r3, r3, #8
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d00a      	beq.n	80132fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	430a      	orrs	r2, r1
 80132fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013300:	f003 0310 	and.w	r3, r3, #16
 8013304:	2b00      	cmp	r3, #0
 8013306:	d00a      	beq.n	801331e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	689b      	ldr	r3, [r3, #8]
 801330e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	430a      	orrs	r2, r1
 801331c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013322:	f003 0320 	and.w	r3, r3, #32
 8013326:	2b00      	cmp	r3, #0
 8013328:	d00a      	beq.n	8013340 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	689b      	ldr	r3, [r3, #8]
 8013330:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	430a      	orrs	r2, r1
 801333e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013348:	2b00      	cmp	r3, #0
 801334a:	d01a      	beq.n	8013382 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	430a      	orrs	r2, r1
 8013360:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801336a:	d10a      	bne.n	8013382 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	430a      	orrs	r2, r1
 8013380:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801338a:	2b00      	cmp	r3, #0
 801338c:	d00a      	beq.n	80133a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	430a      	orrs	r2, r1
 80133a2:	605a      	str	r2, [r3, #4]
  }
}
 80133a4:	bf00      	nop
 80133a6:	370c      	adds	r7, #12
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bc80      	pop	{r7}
 80133ac:	4770      	bx	lr

080133ae <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b086      	sub	sp, #24
 80133b2:	af02      	add	r7, sp, #8
 80133b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2200      	movs	r2, #0
 80133ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80133be:	f7f9 fdeb 	bl	800cf98 <HAL_GetTick>
 80133c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	f003 0308 	and.w	r3, r3, #8
 80133ce:	2b08      	cmp	r3, #8
 80133d0:	d10e      	bne.n	80133f0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80133d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80133d6:	9300      	str	r3, [sp, #0]
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	2200      	movs	r2, #0
 80133dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f000 f832 	bl	801344a <UART_WaitOnFlagUntilTimeout>
 80133e6:	4603      	mov	r3, r0
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d001      	beq.n	80133f0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80133ec:	2303      	movs	r3, #3
 80133ee:	e028      	b.n	8013442 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	f003 0304 	and.w	r3, r3, #4
 80133fa:	2b04      	cmp	r3, #4
 80133fc:	d10e      	bne.n	801341c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80133fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	2200      	movs	r2, #0
 8013408:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f000 f81c 	bl	801344a <UART_WaitOnFlagUntilTimeout>
 8013412:	4603      	mov	r3, r0
 8013414:	2b00      	cmp	r3, #0
 8013416:	d001      	beq.n	801341c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013418:	2303      	movs	r3, #3
 801341a:	e012      	b.n	8013442 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2220      	movs	r2, #32
 8013420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	2220      	movs	r2, #32
 8013428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2200      	movs	r2, #0
 8013430:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2200      	movs	r2, #0
 8013436:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2200      	movs	r2, #0
 801343c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013440:	2300      	movs	r3, #0
}
 8013442:	4618      	mov	r0, r3
 8013444:	3710      	adds	r7, #16
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}

0801344a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801344a:	b580      	push	{r7, lr}
 801344c:	b09c      	sub	sp, #112	; 0x70
 801344e:	af00      	add	r7, sp, #0
 8013450:	60f8      	str	r0, [r7, #12]
 8013452:	60b9      	str	r1, [r7, #8]
 8013454:	603b      	str	r3, [r7, #0]
 8013456:	4613      	mov	r3, r2
 8013458:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801345a:	e0a9      	b.n	80135b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801345c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013462:	f000 80a5 	beq.w	80135b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013466:	f7f9 fd97 	bl	800cf98 <HAL_GetTick>
 801346a:	4602      	mov	r2, r0
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	1ad3      	subs	r3, r2, r3
 8013470:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013472:	429a      	cmp	r2, r3
 8013474:	d302      	bcc.n	801347c <UART_WaitOnFlagUntilTimeout+0x32>
 8013476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013478:	2b00      	cmp	r3, #0
 801347a:	d140      	bne.n	80134fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013484:	e853 3f00 	ldrex	r3, [r3]
 8013488:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801348a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801348c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013490:	667b      	str	r3, [r7, #100]	; 0x64
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	461a      	mov	r2, r3
 8013498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801349a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801349c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801349e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80134a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80134a2:	e841 2300 	strex	r3, r2, [r1]
 80134a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80134a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d1e6      	bne.n	801347c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	3308      	adds	r3, #8
 80134b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134b8:	e853 3f00 	ldrex	r3, [r3]
 80134bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80134be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c0:	f023 0301 	bic.w	r3, r3, #1
 80134c4:	663b      	str	r3, [r7, #96]	; 0x60
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	3308      	adds	r3, #8
 80134cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80134ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80134d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80134d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134d6:	e841 2300 	strex	r3, r2, [r1]
 80134da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80134dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d1e5      	bne.n	80134ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2220      	movs	r2, #32
 80134e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	2220      	movs	r2, #32
 80134ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2200      	movs	r2, #0
 80134f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80134fa:	2303      	movs	r3, #3
 80134fc:	e069      	b.n	80135d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	f003 0304 	and.w	r3, r3, #4
 8013508:	2b00      	cmp	r3, #0
 801350a:	d051      	beq.n	80135b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	69db      	ldr	r3, [r3, #28]
 8013512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801351a:	d149      	bne.n	80135b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013524:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801352e:	e853 3f00 	ldrex	r3, [r3]
 8013532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013536:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801353a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	461a      	mov	r2, r3
 8013542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013544:	637b      	str	r3, [r7, #52]	; 0x34
 8013546:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801354a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801354c:	e841 2300 	strex	r3, r2, [r1]
 8013550:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013554:	2b00      	cmp	r3, #0
 8013556:	d1e6      	bne.n	8013526 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	3308      	adds	r3, #8
 801355e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	e853 3f00 	ldrex	r3, [r3]
 8013566:	613b      	str	r3, [r7, #16]
   return(result);
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	f023 0301 	bic.w	r3, r3, #1
 801356e:	66bb      	str	r3, [r7, #104]	; 0x68
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	3308      	adds	r3, #8
 8013576:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013578:	623a      	str	r2, [r7, #32]
 801357a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801357c:	69f9      	ldr	r1, [r7, #28]
 801357e:	6a3a      	ldr	r2, [r7, #32]
 8013580:	e841 2300 	strex	r3, r2, [r1]
 8013584:	61bb      	str	r3, [r7, #24]
   return(result);
 8013586:	69bb      	ldr	r3, [r7, #24]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d1e5      	bne.n	8013558 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	2220      	movs	r2, #32
 8013590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	2220      	movs	r2, #32
 8013598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	2220      	movs	r2, #32
 80135a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	2200      	movs	r2, #0
 80135a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80135ac:	2303      	movs	r3, #3
 80135ae:	e010      	b.n	80135d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	69da      	ldr	r2, [r3, #28]
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	4013      	ands	r3, r2
 80135ba:	68ba      	ldr	r2, [r7, #8]
 80135bc:	429a      	cmp	r2, r3
 80135be:	bf0c      	ite	eq
 80135c0:	2301      	moveq	r3, #1
 80135c2:	2300      	movne	r3, #0
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	461a      	mov	r2, r3
 80135c8:	79fb      	ldrb	r3, [r7, #7]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	f43f af46 	beq.w	801345c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80135d0:	2300      	movs	r3, #0
}
 80135d2:	4618      	mov	r0, r3
 80135d4:	3770      	adds	r7, #112	; 0x70
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
	...

080135dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80135dc:	b480      	push	{r7}
 80135de:	b0a3      	sub	sp, #140	; 0x8c
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	4613      	mov	r3, r2
 80135e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	68ba      	ldr	r2, [r7, #8]
 80135ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	88fa      	ldrh	r2, [r7, #6]
 80135f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	88fa      	ldrh	r2, [r7, #6]
 80135fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	2200      	movs	r2, #0
 8013604:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	689b      	ldr	r3, [r3, #8]
 801360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801360e:	d10e      	bne.n	801362e <UART_Start_Receive_IT+0x52>
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	691b      	ldr	r3, [r3, #16]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d105      	bne.n	8013624 <UART_Start_Receive_IT+0x48>
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801361e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013622:	e02d      	b.n	8013680 <UART_Start_Receive_IT+0xa4>
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	22ff      	movs	r2, #255	; 0xff
 8013628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801362c:	e028      	b.n	8013680 <UART_Start_Receive_IT+0xa4>
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	689b      	ldr	r3, [r3, #8]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d10d      	bne.n	8013652 <UART_Start_Receive_IT+0x76>
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	691b      	ldr	r3, [r3, #16]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d104      	bne.n	8013648 <UART_Start_Receive_IT+0x6c>
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	22ff      	movs	r2, #255	; 0xff
 8013642:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013646:	e01b      	b.n	8013680 <UART_Start_Receive_IT+0xa4>
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	227f      	movs	r2, #127	; 0x7f
 801364c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013650:	e016      	b.n	8013680 <UART_Start_Receive_IT+0xa4>
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	689b      	ldr	r3, [r3, #8]
 8013656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801365a:	d10d      	bne.n	8013678 <UART_Start_Receive_IT+0x9c>
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	691b      	ldr	r3, [r3, #16]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d104      	bne.n	801366e <UART_Start_Receive_IT+0x92>
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	227f      	movs	r2, #127	; 0x7f
 8013668:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801366c:	e008      	b.n	8013680 <UART_Start_Receive_IT+0xa4>
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	223f      	movs	r2, #63	; 0x3f
 8013672:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013676:	e003      	b.n	8013680 <UART_Start_Receive_IT+0xa4>
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2200      	movs	r2, #0
 801367c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2200      	movs	r2, #0
 8013684:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2222      	movs	r2, #34	; 0x22
 801368c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	3308      	adds	r3, #8
 8013696:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801369a:	e853 3f00 	ldrex	r3, [r3]
 801369e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80136a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80136a2:	f043 0301 	orr.w	r3, r3, #1
 80136a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	3308      	adds	r3, #8
 80136b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80136b4:	673a      	str	r2, [r7, #112]	; 0x70
 80136b6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136b8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80136ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80136bc:	e841 2300 	strex	r3, r2, [r1]
 80136c0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80136c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d1e3      	bne.n	8013690 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80136cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80136d0:	d14f      	bne.n	8013772 <UART_Start_Receive_IT+0x196>
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80136d8:	88fa      	ldrh	r2, [r7, #6]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d349      	bcc.n	8013772 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	689b      	ldr	r3, [r3, #8]
 80136e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80136e6:	d107      	bne.n	80136f8 <UART_Start_Receive_IT+0x11c>
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	691b      	ldr	r3, [r3, #16]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d103      	bne.n	80136f8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	4a46      	ldr	r2, [pc, #280]	; (801380c <UART_Start_Receive_IT+0x230>)
 80136f4:	675a      	str	r2, [r3, #116]	; 0x74
 80136f6:	e002      	b.n	80136fe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	4a45      	ldr	r2, [pc, #276]	; (8013810 <UART_Start_Receive_IT+0x234>)
 80136fc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	691b      	ldr	r3, [r3, #16]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d01a      	beq.n	801373c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801370c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801370e:	e853 3f00 	ldrex	r3, [r3]
 8013712:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801371a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	461a      	mov	r2, r3
 8013724:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013728:	65fb      	str	r3, [r7, #92]	; 0x5c
 801372a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801372c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801372e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013730:	e841 2300 	strex	r3, r2, [r1]
 8013734:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013738:	2b00      	cmp	r3, #0
 801373a:	d1e4      	bne.n	8013706 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	3308      	adds	r3, #8
 8013742:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013746:	e853 3f00 	ldrex	r3, [r3]
 801374a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801374e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013752:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	3308      	adds	r3, #8
 801375a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801375c:	64ba      	str	r2, [r7, #72]	; 0x48
 801375e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013760:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013764:	e841 2300 	strex	r3, r2, [r1]
 8013768:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801376a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801376c:	2b00      	cmp	r3, #0
 801376e:	d1e5      	bne.n	801373c <UART_Start_Receive_IT+0x160>
 8013770:	e046      	b.n	8013800 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	689b      	ldr	r3, [r3, #8]
 8013776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801377a:	d107      	bne.n	801378c <UART_Start_Receive_IT+0x1b0>
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	691b      	ldr	r3, [r3, #16]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d103      	bne.n	801378c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	4a23      	ldr	r2, [pc, #140]	; (8013814 <UART_Start_Receive_IT+0x238>)
 8013788:	675a      	str	r2, [r3, #116]	; 0x74
 801378a:	e002      	b.n	8013792 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	4a22      	ldr	r2, [pc, #136]	; (8013818 <UART_Start_Receive_IT+0x23c>)
 8013790:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	691b      	ldr	r3, [r3, #16]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d019      	beq.n	80137ce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a2:	e853 3f00 	ldrex	r3, [r3]
 80137a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80137a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80137ae:	677b      	str	r3, [r7, #116]	; 0x74
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	461a      	mov	r2, r3
 80137b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80137b8:	637b      	str	r3, [r7, #52]	; 0x34
 80137ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80137be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137c0:	e841 2300 	strex	r3, r2, [r1]
 80137c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80137c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d1e6      	bne.n	801379a <UART_Start_Receive_IT+0x1be>
 80137cc:	e018      	b.n	8013800 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	e853 3f00 	ldrex	r3, [r3]
 80137da:	613b      	str	r3, [r7, #16]
   return(result);
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	f043 0320 	orr.w	r3, r3, #32
 80137e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	461a      	mov	r2, r3
 80137ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80137ec:	623b      	str	r3, [r7, #32]
 80137ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137f0:	69f9      	ldr	r1, [r7, #28]
 80137f2:	6a3a      	ldr	r2, [r7, #32]
 80137f4:	e841 2300 	strex	r3, r2, [r1]
 80137f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80137fa:	69bb      	ldr	r3, [r7, #24]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d1e6      	bne.n	80137ce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8013800:	2300      	movs	r3, #0
}
 8013802:	4618      	mov	r0, r3
 8013804:	378c      	adds	r7, #140	; 0x8c
 8013806:	46bd      	mov	sp, r7
 8013808:	bc80      	pop	{r7}
 801380a:	4770      	bx	lr
 801380c:	08014039 	.word	0x08014039
 8013810:	08013cd9 	.word	0x08013cd9
 8013814:	08013b21 	.word	0x08013b21
 8013818:	08013969 	.word	0x08013969

0801381c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801381c:	b480      	push	{r7}
 801381e:	b095      	sub	sp, #84	; 0x54
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801382a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801382c:	e853 3f00 	ldrex	r3, [r3]
 8013830:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013838:	64fb      	str	r3, [r7, #76]	; 0x4c
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	461a      	mov	r2, r3
 8013840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013842:	643b      	str	r3, [r7, #64]	; 0x40
 8013844:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013846:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801384a:	e841 2300 	strex	r3, r2, [r1]
 801384e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013852:	2b00      	cmp	r3, #0
 8013854:	d1e6      	bne.n	8013824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	3308      	adds	r3, #8
 801385c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801385e:	6a3b      	ldr	r3, [r7, #32]
 8013860:	e853 3f00 	ldrex	r3, [r3]
 8013864:	61fb      	str	r3, [r7, #28]
   return(result);
 8013866:	69fb      	ldr	r3, [r7, #28]
 8013868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801386c:	f023 0301 	bic.w	r3, r3, #1
 8013870:	64bb      	str	r3, [r7, #72]	; 0x48
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	3308      	adds	r3, #8
 8013878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801387a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801387c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801387e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013882:	e841 2300 	strex	r3, r2, [r1]
 8013886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801388a:	2b00      	cmp	r3, #0
 801388c:	d1e3      	bne.n	8013856 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013892:	2b01      	cmp	r3, #1
 8013894:	d118      	bne.n	80138c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	e853 3f00 	ldrex	r3, [r3]
 80138a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	f023 0310 	bic.w	r3, r3, #16
 80138aa:	647b      	str	r3, [r7, #68]	; 0x44
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	461a      	mov	r2, r3
 80138b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138b4:	61bb      	str	r3, [r7, #24]
 80138b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138b8:	6979      	ldr	r1, [r7, #20]
 80138ba:	69ba      	ldr	r2, [r7, #24]
 80138bc:	e841 2300 	strex	r3, r2, [r1]
 80138c0:	613b      	str	r3, [r7, #16]
   return(result);
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d1e6      	bne.n	8013896 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2220      	movs	r2, #32
 80138cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	2200      	movs	r2, #0
 80138d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2200      	movs	r2, #0
 80138da:	675a      	str	r2, [r3, #116]	; 0x74
}
 80138dc:	bf00      	nop
 80138de:	3754      	adds	r7, #84	; 0x54
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bc80      	pop	{r7}
 80138e4:	4770      	bx	lr

080138e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80138e6:	b580      	push	{r7, lr}
 80138e8:	b084      	sub	sp, #16
 80138ea:	af00      	add	r7, sp, #0
 80138ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2200      	movs	r2, #0
 80138f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2200      	movs	r2, #0
 8013900:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013904:	68f8      	ldr	r0, [r7, #12]
 8013906:	f7ff fa28 	bl	8012d5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801390a:	bf00      	nop
 801390c:	3710      	adds	r7, #16
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}

08013912 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013912:	b580      	push	{r7, lr}
 8013914:	b088      	sub	sp, #32
 8013916:	af00      	add	r7, sp, #0
 8013918:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	e853 3f00 	ldrex	r3, [r3]
 8013926:	60bb      	str	r3, [r7, #8]
   return(result);
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801392e:	61fb      	str	r3, [r7, #28]
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	461a      	mov	r2, r3
 8013936:	69fb      	ldr	r3, [r7, #28]
 8013938:	61bb      	str	r3, [r7, #24]
 801393a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801393c:	6979      	ldr	r1, [r7, #20]
 801393e:	69ba      	ldr	r2, [r7, #24]
 8013940:	e841 2300 	strex	r3, r2, [r1]
 8013944:	613b      	str	r3, [r7, #16]
   return(result);
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d1e6      	bne.n	801391a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2220      	movs	r2, #32
 8013950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2200      	movs	r2, #0
 8013958:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f7ff f9f4 	bl	8012d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013960:	bf00      	nop
 8013962:	3720      	adds	r7, #32
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}

08013968 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b09c      	sub	sp, #112	; 0x70
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013976:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013980:	2b22      	cmp	r3, #34	; 0x22
 8013982:	f040 80be 	bne.w	8013b02 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801398c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013990:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013994:	b2d9      	uxtb	r1, r3
 8013996:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801399a:	b2da      	uxtb	r2, r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139a0:	400a      	ands	r2, r1
 80139a2:	b2d2      	uxtb	r2, r2
 80139a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139aa:	1c5a      	adds	r2, r3, #1
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	3b01      	subs	r3, #1
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80139c8:	b29b      	uxth	r3, r3
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	f040 80a1 	bne.w	8013b12 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139d8:	e853 3f00 	ldrex	r3, [r3]
 80139dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80139de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80139e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	461a      	mov	r2, r3
 80139ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80139ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80139f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80139f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80139f6:	e841 2300 	strex	r3, r2, [r1]
 80139fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80139fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d1e6      	bne.n	80139d0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	3308      	adds	r3, #8
 8013a08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0c:	e853 3f00 	ldrex	r3, [r3]
 8013a10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a14:	f023 0301 	bic.w	r3, r3, #1
 8013a18:	667b      	str	r3, [r7, #100]	; 0x64
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	3308      	adds	r3, #8
 8013a20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013a22:	647a      	str	r2, [r7, #68]	; 0x44
 8013a24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a2a:	e841 2300 	strex	r3, r2, [r1]
 8013a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d1e5      	bne.n	8013a02 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2220      	movs	r2, #32
 8013a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	2200      	movs	r2, #0
 8013a42:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2200      	movs	r2, #0
 8013a48:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	4a33      	ldr	r2, [pc, #204]	; (8013b1c <UART_RxISR_8BIT+0x1b4>)
 8013a50:	4293      	cmp	r3, r2
 8013a52:	d01f      	beq.n	8013a94 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	685b      	ldr	r3, [r3, #4]
 8013a5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d018      	beq.n	8013a94 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6a:	e853 3f00 	ldrex	r3, [r3]
 8013a6e:	623b      	str	r3, [r7, #32]
   return(result);
 8013a70:	6a3b      	ldr	r3, [r7, #32]
 8013a72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013a76:	663b      	str	r3, [r7, #96]	; 0x60
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a80:	633b      	str	r3, [r7, #48]	; 0x30
 8013a82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a88:	e841 2300 	strex	r3, r2, [r1]
 8013a8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d1e6      	bne.n	8013a62 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d12e      	bne.n	8013afa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	e853 3f00 	ldrex	r3, [r3]
 8013aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	f023 0310 	bic.w	r3, r3, #16
 8013ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	461a      	mov	r2, r3
 8013abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ac0:	61fb      	str	r3, [r7, #28]
 8013ac2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ac4:	69b9      	ldr	r1, [r7, #24]
 8013ac6:	69fa      	ldr	r2, [r7, #28]
 8013ac8:	e841 2300 	strex	r3, r2, [r1]
 8013acc:	617b      	str	r3, [r7, #20]
   return(result);
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d1e6      	bne.n	8013aa2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	69db      	ldr	r3, [r3, #28]
 8013ada:	f003 0310 	and.w	r3, r3, #16
 8013ade:	2b10      	cmp	r3, #16
 8013ae0:	d103      	bne.n	8013aea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	2210      	movs	r2, #16
 8013ae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013af0:	4619      	mov	r1, r3
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f7ff f93a 	bl	8012d6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013af8:	e00b      	b.n	8013b12 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f001 fb36 	bl	801516c <HAL_UART_RxCpltCallback>
}
 8013b00:	e007      	b.n	8013b12 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	699a      	ldr	r2, [r3, #24]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	f042 0208 	orr.w	r2, r2, #8
 8013b10:	619a      	str	r2, [r3, #24]
}
 8013b12:	bf00      	nop
 8013b14:	3770      	adds	r7, #112	; 0x70
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}
 8013b1a:	bf00      	nop
 8013b1c:	40008000 	.word	0x40008000

08013b20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b09c      	sub	sp, #112	; 0x70
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013b2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013b38:	2b22      	cmp	r3, #34	; 0x22
 8013b3a:	f040 80be 	bne.w	8013cba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b4c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8013b4e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8013b52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013b56:	4013      	ands	r3, r2
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013b5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b62:	1c9a      	adds	r2, r3, #2
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b6e:	b29b      	uxth	r3, r3
 8013b70:	3b01      	subs	r3, #1
 8013b72:	b29a      	uxth	r2, r3
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b80:	b29b      	uxth	r3, r3
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	f040 80a1 	bne.w	8013cca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b90:	e853 3f00 	ldrex	r3, [r3]
 8013b94:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8013ba8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013baa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013bac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013bae:	e841 2300 	strex	r3, r2, [r1]
 8013bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1e6      	bne.n	8013b88 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	3308      	adds	r3, #8
 8013bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bc4:	e853 3f00 	ldrex	r3, [r3]
 8013bc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bcc:	f023 0301 	bic.w	r3, r3, #1
 8013bd0:	663b      	str	r3, [r7, #96]	; 0x60
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	3308      	adds	r3, #8
 8013bd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013bda:	643a      	str	r2, [r7, #64]	; 0x40
 8013bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013be2:	e841 2300 	strex	r3, r2, [r1]
 8013be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d1e5      	bne.n	8013bba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2220      	movs	r2, #32
 8013bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	4a33      	ldr	r2, [pc, #204]	; (8013cd4 <UART_RxISR_16BIT+0x1b4>)
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d01f      	beq.n	8013c4c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d018      	beq.n	8013c4c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c20:	6a3b      	ldr	r3, [r7, #32]
 8013c22:	e853 3f00 	ldrex	r3, [r3]
 8013c26:	61fb      	str	r3, [r7, #28]
   return(result);
 8013c28:	69fb      	ldr	r3, [r7, #28]
 8013c2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	461a      	mov	r2, r3
 8013c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c3a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c40:	e841 2300 	strex	r3, r2, [r1]
 8013c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d1e6      	bne.n	8013c1a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	d12e      	bne.n	8013cb2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2200      	movs	r2, #0
 8013c58:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	e853 3f00 	ldrex	r3, [r3]
 8013c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	f023 0310 	bic.w	r3, r3, #16
 8013c6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	461a      	mov	r2, r3
 8013c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013c78:	61bb      	str	r3, [r7, #24]
 8013c7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c7c:	6979      	ldr	r1, [r7, #20]
 8013c7e:	69ba      	ldr	r2, [r7, #24]
 8013c80:	e841 2300 	strex	r3, r2, [r1]
 8013c84:	613b      	str	r3, [r7, #16]
   return(result);
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d1e6      	bne.n	8013c5a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	69db      	ldr	r3, [r3, #28]
 8013c92:	f003 0310 	and.w	r3, r3, #16
 8013c96:	2b10      	cmp	r3, #16
 8013c98:	d103      	bne.n	8013ca2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	2210      	movs	r2, #16
 8013ca0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013ca8:	4619      	mov	r1, r3
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f7ff f85e 	bl	8012d6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013cb0:	e00b      	b.n	8013cca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8013cb2:	6878      	ldr	r0, [r7, #4]
 8013cb4:	f001 fa5a 	bl	801516c <HAL_UART_RxCpltCallback>
}
 8013cb8:	e007      	b.n	8013cca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	699a      	ldr	r2, [r3, #24]
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f042 0208 	orr.w	r2, r2, #8
 8013cc8:	619a      	str	r2, [r3, #24]
}
 8013cca:	bf00      	nop
 8013ccc:	3770      	adds	r7, #112	; 0x70
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	40008000 	.word	0x40008000

08013cd8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b0ac      	sub	sp, #176	; 0xb0
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ce6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	69db      	ldr	r3, [r3, #28]
 8013cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	689b      	ldr	r3, [r3, #8]
 8013d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d0e:	2b22      	cmp	r3, #34	; 0x22
 8013d10:	f040 8182 	bne.w	8014018 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013d1a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013d1e:	e125      	b.n	8013f6c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d26:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013d2a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8013d2e:	b2d9      	uxtb	r1, r3
 8013d30:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8013d34:	b2da      	uxtb	r2, r3
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d3a:	400a      	ands	r2, r1
 8013d3c:	b2d2      	uxtb	r2, r2
 8013d3e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013d44:	1c5a      	adds	r2, r3, #1
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013d50:	b29b      	uxth	r3, r3
 8013d52:	3b01      	subs	r3, #1
 8013d54:	b29a      	uxth	r2, r3
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	69db      	ldr	r3, [r3, #28]
 8013d62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d6a:	f003 0307 	and.w	r3, r3, #7
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d053      	beq.n	8013e1a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013d76:	f003 0301 	and.w	r3, r3, #1
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d011      	beq.n	8013da2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8013d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d00b      	beq.n	8013da2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2201      	movs	r2, #1
 8013d90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013d98:	f043 0201 	orr.w	r2, r3, #1
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013da6:	f003 0302 	and.w	r3, r3, #2
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d011      	beq.n	8013dd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8013dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013db2:	f003 0301 	and.w	r3, r3, #1
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d00b      	beq.n	8013dd2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	2202      	movs	r2, #2
 8013dc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013dc8:	f043 0204 	orr.w	r2, r3, #4
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013dd6:	f003 0304 	and.w	r3, r3, #4
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d011      	beq.n	8013e02 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8013dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013de2:	f003 0301 	and.w	r3, r3, #1
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d00b      	beq.n	8013e02 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	2204      	movs	r2, #4
 8013df0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013df8:	f043 0202 	orr.w	r2, r3, #2
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d006      	beq.n	8013e1a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f7fe ffa4 	bl	8012d5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2200      	movs	r2, #0
 8013e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	f040 80a2 	bne.w	8013f6c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013e30:	e853 3f00 	ldrex	r3, [r3]
 8013e34:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8013e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	461a      	mov	r2, r3
 8013e46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013e4c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e4e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013e50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013e52:	e841 2300 	strex	r3, r2, [r1]
 8013e56:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8013e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d1e4      	bne.n	8013e28 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	3308      	adds	r3, #8
 8013e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013e68:	e853 3f00 	ldrex	r3, [r3]
 8013e6c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8013e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013e74:	f023 0301 	bic.w	r3, r3, #1
 8013e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	3308      	adds	r3, #8
 8013e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013e86:	66ba      	str	r2, [r7, #104]	; 0x68
 8013e88:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e8a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013e8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013e8e:	e841 2300 	strex	r3, r2, [r1]
 8013e92:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d1e1      	bne.n	8013e5e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2220      	movs	r2, #32
 8013e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2200      	movs	r2, #0
 8013eac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	4a5f      	ldr	r2, [pc, #380]	; (8014030 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8013eb4:	4293      	cmp	r3, r2
 8013eb6:	d021      	beq.n	8013efc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d01a      	beq.n	8013efc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ece:	e853 3f00 	ldrex	r3, [r3]
 8013ed2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ed6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	461a      	mov	r2, r3
 8013ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013ee8:	657b      	str	r3, [r7, #84]	; 0x54
 8013eea:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013eec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013eee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ef0:	e841 2300 	strex	r3, r2, [r1]
 8013ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1e4      	bne.n	8013ec6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f00:	2b01      	cmp	r3, #1
 8013f02:	d130      	bne.n	8013f66 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2200      	movs	r2, #0
 8013f08:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f12:	e853 3f00 	ldrex	r3, [r3]
 8013f16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f1a:	f023 0310 	bic.w	r3, r3, #16
 8013f1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	461a      	mov	r2, r3
 8013f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8013f2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f34:	e841 2300 	strex	r3, r2, [r1]
 8013f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d1e4      	bne.n	8013f0a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	69db      	ldr	r3, [r3, #28]
 8013f46:	f003 0310 	and.w	r3, r3, #16
 8013f4a:	2b10      	cmp	r3, #16
 8013f4c:	d103      	bne.n	8013f56 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	2210      	movs	r2, #16
 8013f54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013f5c:	4619      	mov	r1, r3
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f7fe ff04 	bl	8012d6c <HAL_UARTEx_RxEventCallback>
 8013f64:	e002      	b.n	8013f6c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f001 f900 	bl	801516c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013f6c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d006      	beq.n	8013f82 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8013f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013f78:	f003 0320 	and.w	r3, r3, #32
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	f47f aecf 	bne.w	8013d20 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f88:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013f8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d049      	beq.n	8014028 <UART_RxISR_8BIT_FIFOEN+0x350>
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013f9a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d242      	bcs.n	8014028 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	3308      	adds	r3, #8
 8013fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013faa:	6a3b      	ldr	r3, [r7, #32]
 8013fac:	e853 3f00 	ldrex	r3, [r3]
 8013fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8013fb2:	69fb      	ldr	r3, [r7, #28]
 8013fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	3308      	adds	r3, #8
 8013fc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013fc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fce:	e841 2300 	strex	r3, r2, [r1]
 8013fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d1e3      	bne.n	8013fa2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4a15      	ldr	r2, [pc, #84]	; (8014034 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8013fde:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	e853 3f00 	ldrex	r3, [r3]
 8013fec:	60bb      	str	r3, [r7, #8]
   return(result);
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	f043 0320 	orr.w	r3, r3, #32
 8013ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014002:	61bb      	str	r3, [r7, #24]
 8014004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014006:	6979      	ldr	r1, [r7, #20]
 8014008:	69ba      	ldr	r2, [r7, #24]
 801400a:	e841 2300 	strex	r3, r2, [r1]
 801400e:	613b      	str	r3, [r7, #16]
   return(result);
 8014010:	693b      	ldr	r3, [r7, #16]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d1e4      	bne.n	8013fe0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014016:	e007      	b.n	8014028 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	699a      	ldr	r2, [r3, #24]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	f042 0208 	orr.w	r2, r2, #8
 8014026:	619a      	str	r2, [r3, #24]
}
 8014028:	bf00      	nop
 801402a:	37b0      	adds	r7, #176	; 0xb0
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	40008000 	.word	0x40008000
 8014034:	08013969 	.word	0x08013969

08014038 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b0ae      	sub	sp, #184	; 0xb8
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014046:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	69db      	ldr	r3, [r3, #28]
 8014050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	689b      	ldr	r3, [r3, #8]
 8014064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801406e:	2b22      	cmp	r3, #34	; 0x22
 8014070:	f040 8186 	bne.w	8014380 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801407a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801407e:	e129      	b.n	80142d4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014086:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801408e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8014092:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8014096:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801409a:	4013      	ands	r3, r2
 801409c:	b29a      	uxth	r2, r3
 801409e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80140a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140a8:	1c9a      	adds	r2, r3, #2
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	3b01      	subs	r3, #1
 80140b8:	b29a      	uxth	r2, r3
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	69db      	ldr	r3, [r3, #28]
 80140c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80140ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80140ce:	f003 0307 	and.w	r3, r3, #7
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d053      	beq.n	801417e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80140d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80140da:	f003 0301 	and.w	r3, r3, #1
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d011      	beq.n	8014106 <UART_RxISR_16BIT_FIFOEN+0xce>
 80140e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80140e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d00b      	beq.n	8014106 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	2201      	movs	r2, #1
 80140f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80140fc:	f043 0201 	orr.w	r2, r3, #1
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014106:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801410a:	f003 0302 	and.w	r3, r3, #2
 801410e:	2b00      	cmp	r3, #0
 8014110:	d011      	beq.n	8014136 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8014112:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014116:	f003 0301 	and.w	r3, r3, #1
 801411a:	2b00      	cmp	r3, #0
 801411c:	d00b      	beq.n	8014136 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2202      	movs	r2, #2
 8014124:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801412c:	f043 0204 	orr.w	r2, r3, #4
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014136:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801413a:	f003 0304 	and.w	r3, r3, #4
 801413e:	2b00      	cmp	r3, #0
 8014140:	d011      	beq.n	8014166 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8014142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014146:	f003 0301 	and.w	r3, r3, #1
 801414a:	2b00      	cmp	r3, #0
 801414c:	d00b      	beq.n	8014166 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	2204      	movs	r2, #4
 8014154:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801415c:	f043 0202 	orr.w	r2, r3, #2
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801416c:	2b00      	cmp	r3, #0
 801416e:	d006      	beq.n	801417e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f7fe fdf2 	bl	8012d5a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	2200      	movs	r2, #0
 801417a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014184:	b29b      	uxth	r3, r3
 8014186:	2b00      	cmp	r3, #0
 8014188:	f040 80a4 	bne.w	80142d4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014194:	e853 3f00 	ldrex	r3, [r3]
 8014198:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801419a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80141a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	461a      	mov	r2, r3
 80141aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80141ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80141b2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80141b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80141ba:	e841 2300 	strex	r3, r2, [r1]
 80141be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80141c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d1e2      	bne.n	801418c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	3308      	adds	r3, #8
 80141cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80141d0:	e853 3f00 	ldrex	r3, [r3]
 80141d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80141d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80141dc:	f023 0301 	bic.w	r3, r3, #1
 80141e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	3308      	adds	r3, #8
 80141ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80141ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80141f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80141f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80141f6:	e841 2300 	strex	r3, r2, [r1]
 80141fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80141fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d1e1      	bne.n	80141c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2220      	movs	r2, #32
 8014206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2200      	movs	r2, #0
 801420e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2200      	movs	r2, #0
 8014214:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	4a5f      	ldr	r2, [pc, #380]	; (8014398 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801421c:	4293      	cmp	r3, r2
 801421e:	d021      	beq.n	8014264 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	685b      	ldr	r3, [r3, #4]
 8014226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801422a:	2b00      	cmp	r3, #0
 801422c:	d01a      	beq.n	8014264 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014236:	e853 3f00 	ldrex	r3, [r3]
 801423a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801423c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801423e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	461a      	mov	r2, r3
 801424c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014250:	65bb      	str	r3, [r7, #88]	; 0x58
 8014252:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014254:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014256:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014258:	e841 2300 	strex	r3, r2, [r1]
 801425c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801425e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014260:	2b00      	cmp	r3, #0
 8014262:	d1e4      	bne.n	801422e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014268:	2b01      	cmp	r3, #1
 801426a:	d130      	bne.n	80142ce <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2200      	movs	r2, #0
 8014270:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801427a:	e853 3f00 	ldrex	r3, [r3]
 801427e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014282:	f023 0310 	bic.w	r3, r3, #16
 8014286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	461a      	mov	r2, r3
 8014290:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014294:	647b      	str	r3, [r7, #68]	; 0x44
 8014296:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014298:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801429a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801429c:	e841 2300 	strex	r3, r2, [r1]
 80142a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80142a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d1e4      	bne.n	8014272 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	69db      	ldr	r3, [r3, #28]
 80142ae:	f003 0310 	and.w	r3, r3, #16
 80142b2:	2b10      	cmp	r3, #16
 80142b4:	d103      	bne.n	80142be <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	2210      	movs	r2, #16
 80142bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80142c4:	4619      	mov	r1, r3
 80142c6:	6878      	ldr	r0, [r7, #4]
 80142c8:	f7fe fd50 	bl	8012d6c <HAL_UARTEx_RxEventCallback>
 80142cc:	e002      	b.n	80142d4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f000 ff4c 	bl	801516c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80142d4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d006      	beq.n	80142ea <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80142dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80142e0:	f003 0320 	and.w	r3, r3, #32
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	f47f aecb 	bne.w	8014080 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80142f0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80142f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d049      	beq.n	8014390 <UART_RxISR_16BIT_FIFOEN+0x358>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014302:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8014306:	429a      	cmp	r2, r3
 8014308:	d242      	bcs.n	8014390 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	3308      	adds	r3, #8
 8014310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014314:	e853 3f00 	ldrex	r3, [r3]
 8014318:	623b      	str	r3, [r7, #32]
   return(result);
 801431a:	6a3b      	ldr	r3, [r7, #32]
 801431c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	3308      	adds	r3, #8
 801432a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801432e:	633a      	str	r2, [r7, #48]	; 0x30
 8014330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014336:	e841 2300 	strex	r3, r2, [r1]
 801433a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801433e:	2b00      	cmp	r3, #0
 8014340:	d1e3      	bne.n	801430a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	4a15      	ldr	r2, [pc, #84]	; (801439c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8014346:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801434e:	693b      	ldr	r3, [r7, #16]
 8014350:	e853 3f00 	ldrex	r3, [r3]
 8014354:	60fb      	str	r3, [r7, #12]
   return(result);
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	f043 0320 	orr.w	r3, r3, #32
 801435c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	461a      	mov	r2, r3
 8014366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801436a:	61fb      	str	r3, [r7, #28]
 801436c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801436e:	69b9      	ldr	r1, [r7, #24]
 8014370:	69fa      	ldr	r2, [r7, #28]
 8014372:	e841 2300 	strex	r3, r2, [r1]
 8014376:	617b      	str	r3, [r7, #20]
   return(result);
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d1e4      	bne.n	8014348 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801437e:	e007      	b.n	8014390 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	699a      	ldr	r2, [r3, #24]
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	f042 0208 	orr.w	r2, r2, #8
 801438e:	619a      	str	r2, [r3, #24]
}
 8014390:	bf00      	nop
 8014392:	37b8      	adds	r7, #184	; 0xb8
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}
 8014398:	40008000 	.word	0x40008000
 801439c:	08013b21 	.word	0x08013b21

080143a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80143a0:	b480      	push	{r7}
 80143a2:	b083      	sub	sp, #12
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80143a8:	bf00      	nop
 80143aa:	370c      	adds	r7, #12
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bc80      	pop	{r7}
 80143b0:	4770      	bx	lr

080143b2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80143b2:	b480      	push	{r7}
 80143b4:	b083      	sub	sp, #12
 80143b6:	af00      	add	r7, sp, #0
 80143b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80143ba:	bf00      	nop
 80143bc:	370c      	adds	r7, #12
 80143be:	46bd      	mov	sp, r7
 80143c0:	bc80      	pop	{r7}
 80143c2:	4770      	bx	lr

080143c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b083      	sub	sp, #12
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80143cc:	bf00      	nop
 80143ce:	370c      	adds	r7, #12
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bc80      	pop	{r7}
 80143d4:	4770      	bx	lr

080143d6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80143d6:	b580      	push	{r7, lr}
 80143d8:	b084      	sub	sp, #16
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80143e4:	2b01      	cmp	r3, #1
 80143e6:	d101      	bne.n	80143ec <HAL_UARTEx_EnableFifoMode+0x16>
 80143e8:	2302      	movs	r3, #2
 80143ea:	e02b      	b.n	8014444 <HAL_UARTEx_EnableFifoMode+0x6e>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2201      	movs	r2, #1
 80143f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2224      	movs	r2, #36	; 0x24
 80143f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	681a      	ldr	r2, [r3, #0]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	f022 0201 	bic.w	r2, r2, #1
 8014412:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801441a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8014422:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	68fa      	ldr	r2, [r7, #12]
 801442a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801442c:	6878      	ldr	r0, [r7, #4]
 801442e:	f000 f8c1 	bl	80145b4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	2220      	movs	r2, #32
 8014436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2200      	movs	r2, #0
 801443e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014442:	2300      	movs	r3, #0
}
 8014444:	4618      	mov	r0, r3
 8014446:	3710      	adds	r7, #16
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}

0801444c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801444c:	b480      	push	{r7}
 801444e:	b085      	sub	sp, #20
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801445a:	2b01      	cmp	r3, #1
 801445c:	d101      	bne.n	8014462 <HAL_UARTEx_DisableFifoMode+0x16>
 801445e:	2302      	movs	r3, #2
 8014460:	e027      	b.n	80144b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	2201      	movs	r2, #1
 8014466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2224      	movs	r2, #36	; 0x24
 801446e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	f022 0201 	bic.w	r2, r2, #1
 8014488:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014490:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2200      	movs	r2, #0
 8014496:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	68fa      	ldr	r2, [r7, #12]
 801449e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2220      	movs	r2, #32
 80144a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2200      	movs	r2, #0
 80144ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80144b0:	2300      	movs	r3, #0
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3714      	adds	r7, #20
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bc80      	pop	{r7}
 80144ba:	4770      	bx	lr

080144bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b084      	sub	sp, #16
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
 80144c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80144cc:	2b01      	cmp	r3, #1
 80144ce:	d101      	bne.n	80144d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80144d0:	2302      	movs	r3, #2
 80144d2:	e02d      	b.n	8014530 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2201      	movs	r2, #1
 80144d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2224      	movs	r2, #36	; 0x24
 80144e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	681a      	ldr	r2, [r3, #0]
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	f022 0201 	bic.w	r2, r2, #1
 80144fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	689b      	ldr	r3, [r3, #8]
 8014502:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	683a      	ldr	r2, [r7, #0]
 801450c:	430a      	orrs	r2, r1
 801450e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014510:	6878      	ldr	r0, [r7, #4]
 8014512:	f000 f84f 	bl	80145b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	68fa      	ldr	r2, [r7, #12]
 801451c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2220      	movs	r2, #32
 8014522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	2200      	movs	r2, #0
 801452a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801452e:	2300      	movs	r3, #0
}
 8014530:	4618      	mov	r0, r3
 8014532:	3710      	adds	r7, #16
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b084      	sub	sp, #16
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014548:	2b01      	cmp	r3, #1
 801454a:	d101      	bne.n	8014550 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801454c:	2302      	movs	r3, #2
 801454e:	e02d      	b.n	80145ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2201      	movs	r2, #1
 8014554:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2224      	movs	r2, #36	; 0x24
 801455c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	681a      	ldr	r2, [r3, #0]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	f022 0201 	bic.w	r2, r2, #1
 8014576:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	689b      	ldr	r3, [r3, #8]
 801457e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	683a      	ldr	r2, [r7, #0]
 8014588:	430a      	orrs	r2, r1
 801458a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f000 f811 	bl	80145b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	68fa      	ldr	r2, [r7, #12]
 8014598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2220      	movs	r2, #32
 801459e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	2200      	movs	r2, #0
 80145a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80145aa:	2300      	movs	r3, #0
}
 80145ac:	4618      	mov	r0, r3
 80145ae:	3710      	adds	r7, #16
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80145b4:	b480      	push	{r7}
 80145b6:	b085      	sub	sp, #20
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d108      	bne.n	80145d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2201      	movs	r2, #1
 80145c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2201      	movs	r2, #1
 80145d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80145d4:	e031      	b.n	801463a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80145d6:	2308      	movs	r3, #8
 80145d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80145da:	2308      	movs	r3, #8
 80145dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	689b      	ldr	r3, [r3, #8]
 80145e4:	0e5b      	lsrs	r3, r3, #25
 80145e6:	b2db      	uxtb	r3, r3
 80145e8:	f003 0307 	and.w	r3, r3, #7
 80145ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	689b      	ldr	r3, [r3, #8]
 80145f4:	0f5b      	lsrs	r3, r3, #29
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	f003 0307 	and.w	r3, r3, #7
 80145fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80145fe:	7bbb      	ldrb	r3, [r7, #14]
 8014600:	7b3a      	ldrb	r2, [r7, #12]
 8014602:	4910      	ldr	r1, [pc, #64]	; (8014644 <UARTEx_SetNbDataToProcess+0x90>)
 8014604:	5c8a      	ldrb	r2, [r1, r2]
 8014606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801460a:	7b3a      	ldrb	r2, [r7, #12]
 801460c:	490e      	ldr	r1, [pc, #56]	; (8014648 <UARTEx_SetNbDataToProcess+0x94>)
 801460e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014610:	fb93 f3f2 	sdiv	r3, r3, r2
 8014614:	b29a      	uxth	r2, r3
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801461c:	7bfb      	ldrb	r3, [r7, #15]
 801461e:	7b7a      	ldrb	r2, [r7, #13]
 8014620:	4908      	ldr	r1, [pc, #32]	; (8014644 <UARTEx_SetNbDataToProcess+0x90>)
 8014622:	5c8a      	ldrb	r2, [r1, r2]
 8014624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014628:	7b7a      	ldrb	r2, [r7, #13]
 801462a:	4907      	ldr	r1, [pc, #28]	; (8014648 <UARTEx_SetNbDataToProcess+0x94>)
 801462c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801462e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014632:	b29a      	uxth	r2, r3
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801463a:	bf00      	nop
 801463c:	3714      	adds	r7, #20
 801463e:	46bd      	mov	sp, r7
 8014640:	bc80      	pop	{r7}
 8014642:	4770      	bx	lr
 8014644:	08020214 	.word	0x08020214
 8014648:	0802021c 	.word	0x0802021c

0801464c <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b086      	sub	sp, #24
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
	uint16_t result;
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 8014654:	f7f5 fd9e 	bl	800a194 <Get_AdcHandle>
 8014658:	4603      	mov	r3, r0
 801465a:	4618      	mov	r0, r3
 801465c:	f7f9 fbf7 	bl	800de4e <HAL_ADCEx_Calibration_Start>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d001      	beq.n	801466a <ReadADCChannel+0x1e>
	    Error_Handler();
 8014666:	f7f5 fdd9 	bl	800a21c <Error_Handler>
	  }
	ADC_ChannelConfTypeDef sConfig = {0};
 801466a:	f107 0308 	add.w	r3, r7, #8
 801466e:	2200      	movs	r2, #0
 8014670:	601a      	str	r2, [r3, #0]
 8014672:	605a      	str	r2, [r3, #4]
 8014674:	609a      	str	r2, [r3, #8]
	sConfig.Channel = Channel;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 801467a:	2300      	movs	r3, #0
 801467c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 801467e:	2300      	movs	r3, #0
 8014680:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(Get_AdcHandle(), &sConfig) != HAL_OK) {
 8014682:	f7f5 fd87 	bl	800a194 <Get_AdcHandle>
 8014686:	4602      	mov	r2, r0
 8014688:	f107 0308 	add.w	r3, r7, #8
 801468c:	4619      	mov	r1, r3
 801468e:	4610      	mov	r0, r2
 8014690:	f7f9 f8f0 	bl	800d874 <HAL_ADC_ConfigChannel>
 8014694:	4603      	mov	r3, r0
 8014696:	2b00      	cmp	r3, #0
 8014698:	d001      	beq.n	801469e <ReadADCChannel+0x52>
		Error_Handler();
 801469a:	f7f5 fdbf 	bl	800a21c <Error_Handler>
	}
	if (HAL_ADC_Start(Get_AdcHandle()) != HAL_OK) {
 801469e:	f7f5 fd79 	bl	800a194 <Get_AdcHandle>
 80146a2:	4603      	mov	r3, r0
 80146a4:	4618      	mov	r0, r3
 80146a6:	f7f8 ffc9 	bl	800d63c <HAL_ADC_Start>
 80146aa:	4603      	mov	r3, r0
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d001      	beq.n	80146b4 <ReadADCChannel+0x68>
		Error_Handler();
 80146b0:	f7f5 fdb4 	bl	800a21c <Error_Handler>
	}
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 80146b4:	f7f5 fd6e 	bl	800a194 <Get_AdcHandle>
 80146b8:	4603      	mov	r3, r0
 80146ba:	f04f 31ff 	mov.w	r1, #4294967295
 80146be:	4618      	mov	r0, r3
 80146c0:	f7f9 f834 	bl	800d72c <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(Get_AdcHandle());
 80146c4:	f7f5 fd66 	bl	800a194 <Get_AdcHandle>
 80146c8:	4603      	mov	r3, r0
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7f8 fffc 	bl	800d6c8 <HAL_ADC_Stop>
	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 80146d0:	f7f5 fd60 	bl	800a194 <Get_AdcHandle>
 80146d4:	4603      	mov	r3, r0
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7f9 fa04 	bl	800dae4 <HAL_ADC_GetState>
 80146dc:	4603      	mov	r3, r0
 80146de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80146e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146e6:	d107      	bne.n	80146f8 <ReadADCChannel+0xac>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		result = (uint16_t)HAL_ADC_GetValue(Get_AdcHandle());
 80146e8:	f7f5 fd54 	bl	800a194 <Get_AdcHandle>
 80146ec:	4603      	mov	r3, r0
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7f9 f8b3 	bl	800d85a <HAL_ADC_GetValue>
 80146f4:	4603      	mov	r3, r0
 80146f6:	82fb      	strh	r3, [r7, #22]
	}
	return result;
 80146f8:	8afb      	ldrh	r3, [r7, #22]
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3718      	adds	r7, #24
 80146fe:	46bd      	mov	sp, r7
 8014700:	bd80      	pop	{r7, pc}
	...

08014704 <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 8014708:	2200      	movs	r2, #0
 801470a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801470e:	480b      	ldr	r0, [pc, #44]	; (801473c <AdcRead_VBatt+0x38>)
 8014710:	f7fa fa7e 	bl	800ec10 <HAL_GPIO_WritePin>
	adcResult = ReadADCChannel(ADC_CHANNEL_3); // * 3.3 * 23) / (4096 * 13);
 8014714:	480a      	ldr	r0, [pc, #40]	; (8014740 <AdcRead_VBatt+0x3c>)
 8014716:	f7ff ff99 	bl	801464c <ReadADCChannel>
 801471a:	4603      	mov	r3, r0
 801471c:	4618      	mov	r0, r3
 801471e:	f7f4 fcf1 	bl	8009104 <__aeabi_ui2f>
 8014722:	4603      	mov	r3, r0
 8014724:	4a07      	ldr	r2, [pc, #28]	; (8014744 <AdcRead_VBatt+0x40>)
 8014726:	6013      	str	r3, [r2, #0]
	return adcResult;
 8014728:	4b06      	ldr	r3, [pc, #24]	; (8014744 <AdcRead_VBatt+0x40>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	4618      	mov	r0, r3
 801472e:	f7f4 fd41 	bl	80091b4 <__aeabi_f2uiz>
 8014732:	4603      	mov	r3, r0
 8014734:	b29b      	uxth	r3, r3
}
 8014736:	4618      	mov	r0, r3
 8014738:	bd80      	pop	{r7, pc}
 801473a:	bf00      	nop
 801473c:	48000400 	.word	0x48000400
 8014740:	0c000008 	.word	0x0c000008
 8014744:	200020c8 	.word	0x200020c8

08014748 <__NVIC_SystemReset>:
{
 8014748:	b480      	push	{r7}
 801474a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801474c:	f3bf 8f4f 	dsb	sy
}
 8014750:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8014752:	4b06      	ldr	r3, [pc, #24]	; (801476c <__NVIC_SystemReset+0x24>)
 8014754:	68db      	ldr	r3, [r3, #12]
 8014756:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801475a:	4904      	ldr	r1, [pc, #16]	; (801476c <__NVIC_SystemReset+0x24>)
 801475c:	4b04      	ldr	r3, [pc, #16]	; (8014770 <__NVIC_SystemReset+0x28>)
 801475e:	4313      	orrs	r3, r2
 8014760:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014762:	f3bf 8f4f 	dsb	sy
}
 8014766:	bf00      	nop
    __NOP();
 8014768:	bf00      	nop
 801476a:	e7fd      	b.n	8014768 <__NVIC_SystemReset+0x20>
 801476c:	e000ed00 	.word	0xe000ed00
 8014770:	05fa0004 	.word	0x05fa0004

08014774 <commandReadDeviceId>:

char DataBuffer[200];
char *Version = "4.0";

void commandReadDeviceId(char *data)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b096      	sub	sp, #88	; 0x58
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 801477c:	2300      	movs	r3, #0
 801477e:	61bb      	str	r3, [r7, #24]
 8014780:	f107 031c 	add.w	r3, r7, #28
 8014784:	2200      	movs	r2, #0
 8014786:	601a      	str	r2, [r3, #0]
 8014788:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 801478a:	f7f8 fc33 	bl	800cff4 <HAL_GetUIDw0>
 801478e:	4603      	mov	r3, r0
 8014790:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 8014792:	f7f8 fc39 	bl	800d008 <HAL_GetUIDw1>
 8014796:	4603      	mov	r3, r0
 8014798:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 801479a:	f7f8 fc3f 	bl	800d01c <HAL_GetUIDw2>
 801479e:	4603      	mov	r3, r0
 80147a0:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 80147a2:	f107 0318 	add.w	r3, r7, #24
 80147a6:	220c      	movs	r2, #12
 80147a8:	2100      	movs	r1, #0
 80147aa:	4618      	mov	r0, r3
 80147ac:	f004 fa02 	bl	8018bb4 <memset>
 80147b0:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 80147b2:	61bb      	str	r3, [r7, #24]
 80147b4:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 80147b6:	61fb      	str	r3, [r7, #28]
 80147b8:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 80147ba:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 80147bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147c0:	4a1e      	ldr	r2, [pc, #120]	; (801483c <commandReadDeviceId+0xc8>)
 80147c2:	2132      	movs	r1, #50	; 0x32
 80147c4:	4618      	mov	r0, r3
 80147c6:	f004 f8db 	bl	8018980 <snprintf>
  serialPutStr(DeviceId);
 80147ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147ce:	4618      	mov	r0, r3
 80147d0:	f000 fbee 	bl	8014fb0 <serialPutStr>
  for(i=0; i<12; i++)
 80147d4:	2300      	movs	r3, #0
 80147d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80147da:	e026      	b.n	801482a <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 80147dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147e0:	2b0a      	cmp	r3, #10
 80147e2:	d80c      	bhi.n	80147fe <commandReadDeviceId+0x8a>
 80147e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147e8:	3358      	adds	r3, #88	; 0x58
 80147ea:	443b      	add	r3, r7
 80147ec:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80147f0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80147f4:	4a12      	ldr	r2, [pc, #72]	; (8014840 <commandReadDeviceId+0xcc>)
 80147f6:	2132      	movs	r1, #50	; 0x32
 80147f8:	f004 f8c2 	bl	8018980 <snprintf>
 80147fc:	e00b      	b.n	8014816 <commandReadDeviceId+0xa2>
 80147fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014802:	3358      	adds	r3, #88	; 0x58
 8014804:	443b      	add	r3, r7
 8014806:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 801480a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801480e:	4a0d      	ldr	r2, [pc, #52]	; (8014844 <commandReadDeviceId+0xd0>)
 8014810:	2132      	movs	r1, #50	; 0x32
 8014812:	f004 f8b5 	bl	8018980 <snprintf>
    serialPutStr(DeviceId);
 8014816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801481a:	4618      	mov	r0, r3
 801481c:	f000 fbc8 	bl	8014fb0 <serialPutStr>
  for(i=0; i<12; i++)
 8014820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014824:	3301      	adds	r3, #1
 8014826:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801482a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801482e:	2b0b      	cmp	r3, #11
 8014830:	d9d4      	bls.n	80147dc <commandReadDeviceId+0x68>
  }
}
 8014832:	bf00      	nop
 8014834:	bf00      	nop
 8014836:	3758      	adds	r7, #88	; 0x58
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}
 801483c:	0801fb58 	.word	0x0801fb58
 8014840:	0801fb68 	.word	0x0801fb68
 8014844:	0801fb6c 	.word	0x0801fb6c

08014848 <commandReadDeviceBattery>:

void commandReadDeviceBattery(char *data)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 8014850:	4808      	ldr	r0, [pc, #32]	; (8014874 <commandReadDeviceBattery+0x2c>)
 8014852:	f000 fbad 	bl	8014fb0 <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %d\n",AdcRead_VBatt());
 8014856:	f7ff ff55 	bl	8014704 <AdcRead_VBatt>
 801485a:	4603      	mov	r3, r0
 801485c:	461a      	mov	r2, r3
 801485e:	4906      	ldr	r1, [pc, #24]	; (8014878 <commandReadDeviceBattery+0x30>)
 8014860:	4806      	ldr	r0, [pc, #24]	; (801487c <commandReadDeviceBattery+0x34>)
 8014862:	f004 f8c1 	bl	80189e8 <sprintf>
	 serialPutStr(DataBuffer);
 8014866:	4805      	ldr	r0, [pc, #20]	; (801487c <commandReadDeviceBattery+0x34>)
 8014868:	f000 fba2 	bl	8014fb0 <serialPutStr>
}
 801486c:	bf00      	nop
 801486e:	3708      	adds	r7, #8
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	0801fb70 	.word	0x0801fb70
 8014878:	0801fb7c 	.word	0x0801fb7c
 801487c:	200020cc 	.word	0x200020cc

08014880 <commandGetDistance>:


char sonarBuffer[100];
void commandGetDistance(char *data)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b082      	sub	sp, #8
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_RESET); 		/* turn on */
 8014888:	2200      	movs	r2, #0
 801488a:	2101      	movs	r1, #1
 801488c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014890:	f7fa f9be 	bl	800ec10 <HAL_GPIO_WritePin>
	sprintf(sonarBuffer,"OK,DISTREAD %d\n",getSonarDistance());
 8014894:	f000 fa5e 	bl	8014d54 <getSonarDistance>
 8014898:	4603      	mov	r3, r0
 801489a:	461a      	mov	r2, r3
 801489c:	4905      	ldr	r1, [pc, #20]	; (80148b4 <commandGetDistance+0x34>)
 801489e:	4806      	ldr	r0, [pc, #24]	; (80148b8 <commandGetDistance+0x38>)
 80148a0:	f004 f8a2 	bl	80189e8 <sprintf>
	serialPutStr(sonarBuffer);
 80148a4:	4804      	ldr	r0, [pc, #16]	; (80148b8 <commandGetDistance+0x38>)
 80148a6:	f000 fb83 	bl	8014fb0 <serialPutStr>
//	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);	/* turn off to save power */
}
 80148aa:	bf00      	nop
 80148ac:	3708      	adds	r7, #8
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}
 80148b2:	bf00      	nop
 80148b4:	0801fb8c 	.word	0x0801fb8c
 80148b8:	20002194 	.word	0x20002194

080148bc <commandGetVersion>:

void commandGetVersion(char *data)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]

	sprintf(DataBuffer,"OK,VERSION %s\n",Version);
 80148c4:	4b06      	ldr	r3, [pc, #24]	; (80148e0 <commandGetVersion+0x24>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	461a      	mov	r2, r3
 80148ca:	4906      	ldr	r1, [pc, #24]	; (80148e4 <commandGetVersion+0x28>)
 80148cc:	4806      	ldr	r0, [pc, #24]	; (80148e8 <commandGetVersion+0x2c>)
 80148ce:	f004 f88b 	bl	80189e8 <sprintf>
	serialPutStr(DataBuffer);
 80148d2:	4805      	ldr	r0, [pc, #20]	; (80148e8 <commandGetVersion+0x2c>)
 80148d4:	f000 fb6c 	bl	8014fb0 <serialPutStr>
}
 80148d8:	bf00      	nop
 80148da:	3708      	adds	r7, #8
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}
 80148e0:	20000090 	.word	0x20000090
 80148e4:	0801fb9c 	.word	0x0801fb9c
 80148e8:	200020cc 	.word	0x200020cc

080148ec <commandReboot>:

void commandReboot(char *data){
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b082      	sub	sp, #8
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
	NVIC_SystemReset();
 80148f4:	f7ff ff28 	bl	8014748 <__NVIC_SystemReset>

080148f8 <commandSleep>:
}


void commandSleep(char *data){
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b082      	sub	sp, #8
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
	serialPutStr("Sleep called...\n");
 8014900:	4803      	ldr	r0, [pc, #12]	; (8014910 <commandSleep+0x18>)
 8014902:	f000 fb55 	bl	8014fb0 <serialPutStr>
}
 8014906:	bf00      	nop
 8014908:	3708      	adds	r7, #8
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
 801490e:	bf00      	nop
 8014910:	0801fbac 	.word	0x0801fbac

08014914 <Flash__Init>:
/**
 * @brief Flash Init routine
 **/

bool Flash__Init(void)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
	uint32_t jedecId;

	HAL_Delay(100);
 801491a:	2064      	movs	r0, #100	; 0x64
 801491c:	f7f8 fb46 	bl	800cfac <HAL_Delay>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014920:	f000 fafc 	bl	8014f1c <Spi1_AssertCs>
	HAL_Delay(100);
 8014924:	2064      	movs	r0, #100	; 0x64
 8014926:	f7f8 fb41 	bl	800cfac <HAL_Delay>

	Flash__GetJEDEC_ID(&jedecId);
 801492a:	1d3b      	adds	r3, r7, #4
 801492c:	4618      	mov	r0, r3
 801492e:	f000 f835 	bl	801499c <Flash__GetJEDEC_ID>

	if(jedecId != WINBOND_JEDEC_ID)
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	4a04      	ldr	r2, [pc, #16]	; (8014948 <Flash__Init+0x34>)
 8014936:	4293      	cmp	r3, r2
 8014938:	d001      	beq.n	801493e <Flash__Init+0x2a>
	{
		return false;
 801493a:	2300      	movs	r3, #0
 801493c:	e000      	b.n	8014940 <Flash__Init+0x2c>
	}
	else
	{
		return true;
 801493e:	2301      	movs	r3, #1
	}
}
 8014940:	4618      	mov	r0, r3
 8014942:	3708      	adds	r7, #8
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}
 8014948:	00ef4014 	.word	0x00ef4014

0801494c <Flash__SpiWrite>:
/**
 * @brief Flash Spi write routine
 **/

void Flash__SpiWrite(unsigned char data)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	4603      	mov	r3, r0
 8014954:	71fb      	strb	r3, [r7, #7]
	Spi1_Transmit(&data, sizeof(data));
 8014956:	1dfb      	adds	r3, r7, #7
 8014958:	2101      	movs	r1, #1
 801495a:	4618      	mov	r0, r3
 801495c:	f000 faf6 	bl	8014f4c <Spi1_Transmit>
}
 8014960:	bf00      	nop
 8014962:	3708      	adds	r7, #8
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}

08014968 <Flash__SpiRead>:
/**
 * @brief Flash Spi read routine
 **/

unsigned char Flash__SpiRead(void)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b082      	sub	sp, #8
 801496c:	af00      	add	r7, sp, #0
	unsigned char ret = 0x00;
 801496e:	2300      	movs	r3, #0
 8014970:	71fb      	strb	r3, [r7, #7]
	Spi1_Receive(&ret, sizeof(ret));
 8014972:	1dfb      	adds	r3, r7, #7
 8014974:	2101      	movs	r1, #1
 8014976:	4618      	mov	r0, r3
 8014978:	f000 fb01 	bl	8014f7e <Spi1_Receive>
	return ret;
 801497c:	79fb      	ldrb	r3, [r7, #7]
}
 801497e:	4618      	mov	r0, r3
 8014980:	3708      	adds	r7, #8
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}

08014986 <Flash__WriteEnable>:
/**
 * @brief Flash Write Enable routine
 **/

void Flash__WriteEnable(void)
{
 8014986:	b580      	push	{r7, lr}
 8014988:	af00      	add	r7, sp, #0
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 801498a:	f000 fad3 	bl	8014f34 <Spi1_DeassertCs>
	//Send Write Enable Command
	Flash__SpiWrite(CMD_WREN);
 801498e:	2006      	movs	r0, #6
 8014990:	f7ff ffdc 	bl	801494c <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014994:	f000 fac2 	bl	8014f1c <Spi1_AssertCs>
}
 8014998:	bf00      	nop
 801499a:	bd80      	pop	{r7, pc}

0801499c <Flash__GetJEDEC_ID>:
 *
 * @param[out] jdecId Flash JEDEC id to be read
 **/

void Flash__GetJEDEC_ID(uint32_t *jdecId)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
	uint8_t read_buff[3];

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80149a4:	f000 fac6 	bl	8014f34 <Spi1_DeassertCs>
	//Send Read JEDEC ID Command
	Flash__SpiWrite(CMD_JEDEC_ID);
 80149a8:	209f      	movs	r0, #159	; 0x9f
 80149aa:	f7ff ffcf 	bl	801494c <Flash__SpiWrite>
	read_buff[0] = Flash__SpiRead();
 80149ae:	f7ff ffdb 	bl	8014968 <Flash__SpiRead>
 80149b2:	4603      	mov	r3, r0
 80149b4:	733b      	strb	r3, [r7, #12]
	read_buff[1] = Flash__SpiRead();
 80149b6:	f7ff ffd7 	bl	8014968 <Flash__SpiRead>
 80149ba:	4603      	mov	r3, r0
 80149bc:	737b      	strb	r3, [r7, #13]
	read_buff[2] = Flash__SpiRead();
 80149be:	f7ff ffd3 	bl	8014968 <Flash__SpiRead>
 80149c2:	4603      	mov	r3, r0
 80149c4:	73bb      	strb	r3, [r7, #14]
	//Assert Spi CS pin
	Spi1_AssertCs();
 80149c6:	f000 faa9 	bl	8014f1c <Spi1_AssertCs>

	//Format JEDEC ID
	*jdecId = (read_buff[0] << 16) | (read_buff[1] << 8) | read_buff[2];
 80149ca:	7b3b      	ldrb	r3, [r7, #12]
 80149cc:	041a      	lsls	r2, r3, #16
 80149ce:	7b7b      	ldrb	r3, [r7, #13]
 80149d0:	021b      	lsls	r3, r3, #8
 80149d2:	4313      	orrs	r3, r2
 80149d4:	7bba      	ldrb	r2, [r7, #14]
 80149d6:	4313      	orrs	r3, r2
 80149d8:	461a      	mov	r2, r3
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	601a      	str	r2, [r3, #0]
}
 80149de:	bf00      	nop
 80149e0:	3710      	adds	r7, #16
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}

080149e6 <Flash__ReadDeviceStatus1>:
/**
 * @brief Flash read device status register 1 routine
 **/

uint8_t Flash__ReadDeviceStatus1(void)
{
 80149e6:	b580      	push	{r7, lr}
 80149e8:	b082      	sub	sp, #8
 80149ea:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80149ec:	2300      	movs	r3, #0
 80149ee:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 80149f0:	f000 faa0 	bl	8014f34 <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);
 80149f4:	2005      	movs	r0, #5
 80149f6:	f7ff ffa9 	bl	801494c <Flash__SpiWrite>
	data = Flash__SpiRead();                     // dummy
 80149fa:	f7ff ffb5 	bl	8014968 <Flash__SpiRead>
 80149fe:	4603      	mov	r3, r0
 8014a00:	71fb      	strb	r3, [r7, #7]
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014a02:	f000 fa8b 	bl	8014f1c <Spi1_AssertCs>

	return (data);
 8014a06:	79fb      	ldrb	r3, [r7, #7]
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3708      	adds	r7, #8
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}

08014a10 <Flash__ReadDeviceStatus2>:
/**
 * @brief Flash read device status register 2 routine
 **/

uint8_t Flash__ReadDeviceStatus2(void)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8014a16:	2300      	movs	r3, #0
 8014a18:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014a1a:	f000 fa8b 	bl	8014f34 <Spi1_DeassertCs>
	//Send Read Status Register 2 Command
	Flash__SpiWrite(CMD_RDSR2);
 8014a1e:	2035      	movs	r0, #53	; 0x35
 8014a20:	f7ff ff94 	bl	801494c <Flash__SpiWrite>
	data = Flash__SpiRead();                     // dummy
 8014a24:	f7ff ffa0 	bl	8014968 <Flash__SpiRead>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	71fb      	strb	r3, [r7, #7]
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014a2c:	f000 fa76 	bl	8014f1c <Spi1_AssertCs>

	return (data);
 8014a30:	79fb      	ldrb	r3, [r7, #7]
}
 8014a32:	4618      	mov	r0, r3
 8014a34:	3708      	adds	r7, #8
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}

08014a3a <Flash__ReadDeviceStatus>:
/**
 * @brief Flash read device status routine
 **/

uint16_t Flash__ReadDeviceStatus(void)
{
 8014a3a:	b590      	push	{r4, r7, lr}
 8014a3c:	b083      	sub	sp, #12
 8014a3e:	af00      	add	r7, sp, #0
	uint16_t data = 0;
 8014a40:	2300      	movs	r3, #0
 8014a42:	80fb      	strh	r3, [r7, #6]

	data = Flash__ReadDeviceStatus2();
 8014a44:	f7ff ffe4 	bl	8014a10 <Flash__ReadDeviceStatus2>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	80fb      	strh	r3, [r7, #6]
	data = (data << 8) | Flash__ReadDeviceStatus1();
 8014a4c:	88fb      	ldrh	r3, [r7, #6]
 8014a4e:	021b      	lsls	r3, r3, #8
 8014a50:	b21c      	sxth	r4, r3
 8014a52:	f7ff ffc8 	bl	80149e6 <Flash__ReadDeviceStatus1>
 8014a56:	4603      	mov	r3, r0
 8014a58:	b21b      	sxth	r3, r3
 8014a5a:	4323      	orrs	r3, r4
 8014a5c:	b21b      	sxth	r3, r3
 8014a5e:	80fb      	strh	r3, [r7, #6]

	return (data);
 8014a60:	88fb      	ldrh	r3, [r7, #6]
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	370c      	adds	r7, #12
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd90      	pop	{r4, r7, pc}

08014a6a <Flash__ReadBuffer>:
 * @param[in] pBuffer Pointer to the buffer that receives the data read
 * @param[in] Length Number of bytes to read
 **/

bool Flash__ReadBuffer(uint32_t addr, uint8_t *pBuffer, uint32_t length)
{
 8014a6a:	b590      	push	{r4, r7, lr}
 8014a6c:	b087      	sub	sp, #28
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	60f8      	str	r0, [r7, #12]
 8014a72:	60b9      	str	r1, [r7, #8]
 8014a74:	607a      	str	r2, [r7, #4]
	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014a76:	f000 fa5d 	bl	8014f34 <Spi1_DeassertCs>
#if WINBOND_USE_FAST_READ
	//Send Fast Read Command
	Flash__SpiWrite(CMD_READ_HS);               // send 0Bh
 8014a7a:	200b      	movs	r0, #11
 8014a7c:	f7ff ff66 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 16) & 0xFF);       // Send ReadAddr high nibble
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	0c1b      	lsrs	r3, r3, #16
 8014a84:	b2db      	uxtb	r3, r3
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7ff ff60 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 8) & 0xFF); 		// Send ReadAddr middle nibble address byte to read from
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	0a1b      	lsrs	r3, r3, #8
 8014a90:	b2db      	uxtb	r3, r3
 8014a92:	4618      	mov	r0, r3
 8014a94:	f7ff ff5a 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite(addr & 0xFF); 				// Send ReadAddr low nibble address byte to read from
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	b2db      	uxtb	r3, r3
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7ff ff55 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite(DUMMY);						// Dummy eight clocks
 8014aa2:	20ff      	movs	r0, #255	; 0xff
 8014aa4:	f7ff ff52 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite((addr >> 16) & 0xFF);       // Send ReadAddr high nibble
	Flash__SpiWrite((addr >> 8) & 0xFF); 		// Send ReadAddr middle nibble address byte to read from
	Flash__SpiWrite(addr & 0xFF); 				// Send ReadAddr low nibble address byte to read from
#endif
	//Read bytes
	for (uint32_t i = 0; i < length; ++i) {
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	617b      	str	r3, [r7, #20]
 8014aac:	e009      	b.n	8014ac2 <Flash__ReadBuffer+0x58>
		pBuffer[i] = Flash__SpiRead();
 8014aae:	68ba      	ldr	r2, [r7, #8]
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	18d4      	adds	r4, r2, r3
 8014ab4:	f7ff ff58 	bl	8014968 <Flash__SpiRead>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	7023      	strb	r3, [r4, #0]
	for (uint32_t i = 0; i < length; ++i) {
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	3301      	adds	r3, #1
 8014ac0:	617b      	str	r3, [r7, #20]
 8014ac2:	697a      	ldr	r2, [r7, #20]
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d3f1      	bcc.n	8014aae <Flash__ReadBuffer+0x44>
	}
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014aca:	f000 fa27 	bl	8014f1c <Spi1_AssertCs>

	return true;
 8014ace:	2301      	movs	r3, #1
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	371c      	adds	r7, #28
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd90      	pop	{r4, r7, pc}

08014ad8 <flashWaitWhileBusy>:
 * Polls the status of the write in progress (WIP) bit of the status register
 * until the write operation is completed
 **/

void flashWaitWhileBusy(void)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
	uint8_t flash_status = 0;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	71fb      	strb	r3, [r7, #7]

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014ae2:	f000 fa27 	bl	8014f34 <Spi1_DeassertCs>
	//Send Read Status Register 1 Command
	Flash__SpiWrite(CMD_RDSR1);   //Send RDSR command
 8014ae6:	2005      	movs	r0, #5
 8014ae8:	f7ff ff30 	bl	801494c <Flash__SpiWrite>
	/*Loop whiles memory is busy with a write cycle */
	do { /* Send dummy bytes to clock out data from flash */
		flash_status = Flash__SpiRead();
 8014aec:	f7ff ff3c 	bl	8014968 <Flash__SpiRead>
 8014af0:	4603      	mov	r3, r0
 8014af2:	71fb      	strb	r3, [r7, #7]
	} while (flash_status & 0x01); /* Write in progress */
 8014af4:	79fb      	ldrb	r3, [r7, #7]
 8014af6:	f003 0301 	and.w	r3, r3, #1
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d1f6      	bne.n	8014aec <flashWaitWhileBusy+0x14>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014afe:	f000 fa0d 	bl	8014f1c <Spi1_AssertCs>
}
 8014b02:	bf00      	nop
 8014b04:	3708      	adds	r7, #8
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <Flash__PageProgram>:
 * @param[in] write_buffer Pointer to buffer containing the date to be written to flash
 * @param[in] length Number of bytes to be written
 **/

void Flash__PageProgram(uint32_t addr, uint8_t *write_buffer, uint16_t length)
{
 8014b0a:	b580      	push	{r7, lr}
 8014b0c:	b084      	sub	sp, #16
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	60f8      	str	r0, [r7, #12]
 8014b12:	60b9      	str	r1, [r7, #8]
 8014b14:	4613      	mov	r3, r2
 8014b16:	80fb      	strh	r3, [r7, #6]
	//Wait for last operation to end
	flashWaitWhileBusy();
 8014b18:	f7ff ffde 	bl	8014ad8 <flashWaitWhileBusy>
	//Enable write operation
	Flash__WriteEnable();
 8014b1c:	f7ff ff33 	bl	8014986 <Flash__WriteEnable>

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014b20:	f000 fa08 	bl	8014f34 <Spi1_DeassertCs>
	// Send Page Program Command
	Flash__SpiWrite(CMD_PAGEPROG);
 8014b24:	2002      	movs	r0, #2
 8014b26:	f7ff ff11 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	0c1b      	lsrs	r3, r3, #16
 8014b2e:	b2db      	uxtb	r3, r3
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7ff ff0b 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	0a1b      	lsrs	r3, r3, #8
 8014b3a:	b2db      	uxtb	r3, r3
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7ff ff05 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	b2db      	uxtb	r3, r3
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7ff ff00 	bl	801494c <Flash__SpiWrite>


	// Check if the address match the beginning of a page
	if(addr & 0xFF)
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	b2db      	uxtb	r3, r3
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d009      	beq.n	8014b68 <Flash__PageProgram+0x5e>
	{
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE - (addr % SPI_FLASH_PERWRITEPAGESIZE));
 8014b54:	88fa      	ldrh	r2, [r7, #6]
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	bf28      	it	cs
 8014b62:	4613      	movcs	r3, r2
 8014b64:	80fb      	strh	r3, [r7, #6]
 8014b66:	e00f      	b.n	8014b88 <Flash__PageProgram+0x7e>
	}
	else
	{
		length = MIN(length, SPI_FLASH_PERWRITEPAGESIZE);
 8014b68:	88fb      	ldrh	r3, [r7, #6]
 8014b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b6e:	bf28      	it	cs
 8014b70:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8014b74:	80fb      	strh	r3, [r7, #6]
	}

	/* while there is data to be written on the FLASH */
	while (length--) {
 8014b76:	e007      	b.n	8014b88 <Flash__PageProgram+0x7e>
		/* Send the current byte */
		Flash__SpiWrite(*write_buffer);
 8014b78:	68bb      	ldr	r3, [r7, #8]
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7ff fee5 	bl	801494c <Flash__SpiWrite>
		/* Point on the next byte to be written */
		write_buffer++;
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	3301      	adds	r3, #1
 8014b86:	60bb      	str	r3, [r7, #8]
	while (length--) {
 8014b88:	88fb      	ldrh	r3, [r7, #6]
 8014b8a:	1e5a      	subs	r2, r3, #1
 8014b8c:	80fa      	strh	r2, [r7, #6]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d1f2      	bne.n	8014b78 <Flash__PageProgram+0x6e>
	}
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014b92:	f000 f9c3 	bl	8014f1c <Spi1_AssertCs>

	// Wait for page program operation to end
	flashWaitWhileBusy();
 8014b96:	f7ff ff9f 	bl	8014ad8 <flashWaitWhileBusy>
}
 8014b9a:	bf00      	nop
 8014b9c:	3710      	adds	r7, #16
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
	...

08014ba4 <Flash__SectorErase4k>:
 * @brief Flash 4kB Sector Erase routine
 * @param[in] addr Address of the sector to be erased
 **/

void Flash__SectorErase4k(uint32_t addr)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
	// Wait for last operation to end
	flashWaitWhileBusy();
 8014bac:	f7ff ff94 	bl	8014ad8 <flashWaitWhileBusy>
	// Enable write operation
	Flash__WriteEnable();
 8014bb0:	f7ff fee9 	bl	8014986 <Flash__WriteEnable>

	//Make sure it is a 4k sector address
	if(addr & 0xFFF)
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d003      	beq.n	8014bc6 <Flash__SectorErase4k+0x22>
	{
		addr = addr & 0x00FFF000;
 8014bbe:	687a      	ldr	r2, [r7, #4]
 8014bc0:	4b10      	ldr	r3, [pc, #64]	; (8014c04 <Flash__SectorErase4k+0x60>)
 8014bc2:	4013      	ands	r3, r2
 8014bc4:	607b      	str	r3, [r7, #4]
	}

	//Deassert Spi CS pin
	Spi1_DeassertCs();
 8014bc6:	f000 f9b5 	bl	8014f34 <Spi1_DeassertCs>
	//Send Sector Erase Command
	Flash__SpiWrite(CMD_ERASE_SECTOR);
 8014bca:	2020      	movs	r0, #32
 8014bcc:	f7ff febe 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 16));
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	0c1b      	lsrs	r3, r3, #16
 8014bd4:	b2db      	uxtb	r3, r3
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7ff feb8 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) (addr >> 8));
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	0a1b      	lsrs	r3, r3, #8
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7ff feb2 	bl	801494c <Flash__SpiWrite>
	Flash__SpiWrite((uint8_t) addr);
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7ff fead 	bl	801494c <Flash__SpiWrite>
	//Assert Spi CS pin
	Spi1_AssertCs();
 8014bf2:	f000 f993 	bl	8014f1c <Spi1_AssertCs>

	// Wait for sector erase 4k operation to end
	flashWaitWhileBusy();
 8014bf6:	f7ff ff6f 	bl	8014ad8 <flashWaitWhileBusy>
}
 8014bfa:	bf00      	nop
 8014bfc:	3708      	adds	r7, #8
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}
 8014c02:	bf00      	nop
 8014c04:	00fff000 	.word	0x00fff000

08014c08 <singleRead>:
static uint16_t mode_(unsigned int number_of_samples);
static void swap(volatile uint16_t *p, volatile uint16_t *q);
static int partition(int lowIndex, int highIndex);
static void quickSort(int lowIndex, int highIndex);

static uint16_t singleRead(void) {
 8014c08:	b5b0      	push	{r4, r5, r7, lr}
 8014c0a:	b086      	sub	sp, #24
 8014c0c:	af00      	add	r7, sp, #0
	unsigned char RxBuffer[4];
	bool newData = false;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	75fb      	strb	r3, [r7, #23]
	uint16_t dist_mm = 0;
 8014c12:	2300      	movs	r3, #0
 8014c14:	82bb      	strh	r3, [r7, #20]
	unsigned char rx;
	uint8_t tries = 0;
 8014c16:	2300      	movs	r3, #0
 8014c18:	74fb      	strb	r3, [r7, #19]

	do {
		HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_SET);
 8014c1a:	2201      	movs	r2, #1
 8014c1c:	2102      	movs	r1, #2
 8014c1e:	4849      	ldr	r0, [pc, #292]	; (8014d44 <singleRead+0x13c>)
 8014c20:	f7f9 fff6 	bl	800ec10 <HAL_GPIO_WritePin>
		HAL_Delay(1); // todo: implement HAL_Delay_Microseconds()
 8014c24:	2001      	movs	r0, #1
 8014c26:	f7f8 f9c1 	bl	800cfac <HAL_Delay>
		HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	2102      	movs	r1, #2
 8014c2e:	4845      	ldr	r0, [pc, #276]	; (8014d44 <singleRead+0x13c>)
 8014c30:	f7f9 ffee 	bl	800ec10 <HAL_GPIO_WritePin>
		if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t*) &rx, 1, 20)
 8014c34:	f7f5 fac2 	bl	800a1bc <Get_SonarHandle>
 8014c38:	1df9      	adds	r1, r7, #7
 8014c3a:	2314      	movs	r3, #20
 8014c3c:	2201      	movs	r2, #1
 8014c3e:	f7fd fc4f 	bl	80124e0 <HAL_UART_Receive>
 8014c42:	4603      	mov	r3, r0
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d160      	bne.n	8014d0a <singleRead+0x102>
				== HAL_OK) {
			if ((char) rx == 'R') {
 8014c48:	79fb      	ldrb	r3, [r7, #7]
 8014c4a:	2b52      	cmp	r3, #82	; 0x52
 8014c4c:	d15a      	bne.n	8014d04 <singleRead+0xfc>
				if (HAL_UART_Receive(Get_SonarHandle(), (uint8_t*) &RxBuffer, 4,
 8014c4e:	f7f5 fab5 	bl	800a1bc <Get_SonarHandle>
 8014c52:	f107 0108 	add.w	r1, r7, #8
 8014c56:	2314      	movs	r3, #20
 8014c58:	2204      	movs	r2, #4
 8014c5a:	f7fd fc41 	bl	80124e0 <HAL_UART_Receive>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d155      	bne.n	8014d10 <singleRead+0x108>
						20) == HAL_OK) {
					if (isdigit(RxBuffer[3])) {
 8014c64:	7afb      	ldrb	r3, [r7, #11]
 8014c66:	3301      	adds	r3, #1
 8014c68:	4a37      	ldr	r2, [pc, #220]	; (8014d48 <singleRead+0x140>)
 8014c6a:	4413      	add	r3, r2
 8014c6c:	781b      	ldrb	r3, [r3, #0]
 8014c6e:	f003 0304 	and.w	r3, r3, #4
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d001      	beq.n	8014c7a <singleRead+0x72>
						newData = true;
 8014c76:	2301      	movs	r3, #1
 8014c78:	75fb      	strb	r3, [r7, #23]
					}
					if (newData) {
 8014c7a:	7dfb      	ldrb	r3, [r7, #23]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d047      	beq.n	8014d10 <singleRead+0x108>
						for (int i = 0; i < 4; i++)
 8014c80:	2300      	movs	r3, #0
 8014c82:	60fb      	str	r3, [r7, #12]
 8014c84:	e035      	b.n	8014cf2 <singleRead+0xea>
							dist_mm += (RxBuffer[3 - i] - '0') * pow(10, i);
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	f1c3 0303 	rsb	r3, r3, #3
 8014c8c:	3318      	adds	r3, #24
 8014c8e:	443b      	add	r3, r7
 8014c90:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8014c94:	3b30      	subs	r3, #48	; 0x30
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7f3 fe1c 	bl	80088d4 <__aeabi_i2d>
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	460d      	mov	r5, r1
 8014ca0:	68f8      	ldr	r0, [r7, #12]
 8014ca2:	f7f3 fe17 	bl	80088d4 <__aeabi_i2d>
 8014ca6:	4602      	mov	r2, r0
 8014ca8:	460b      	mov	r3, r1
 8014caa:	f04f 0000 	mov.w	r0, #0
 8014cae:	4927      	ldr	r1, [pc, #156]	; (8014d4c <singleRead+0x144>)
 8014cb0:	f009 fc9a 	bl	801e5e8 <pow>
 8014cb4:	4602      	mov	r2, r0
 8014cb6:	460b      	mov	r3, r1
 8014cb8:	4620      	mov	r0, r4
 8014cba:	4629      	mov	r1, r5
 8014cbc:	f7f3 fe74 	bl	80089a8 <__aeabi_dmul>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	460b      	mov	r3, r1
 8014cc4:	4614      	mov	r4, r2
 8014cc6:	461d      	mov	r5, r3
 8014cc8:	8abb      	ldrh	r3, [r7, #20]
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7f3 fe02 	bl	80088d4 <__aeabi_i2d>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	4629      	mov	r1, r5
 8014cd8:	f7f3 fcb0 	bl	800863c <__adddf3>
 8014cdc:	4602      	mov	r2, r0
 8014cde:	460b      	mov	r3, r1
 8014ce0:	4610      	mov	r0, r2
 8014ce2:	4619      	mov	r1, r3
 8014ce4:	f7f4 f938 	bl	8008f58 <__aeabi_d2uiz>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	82bb      	strh	r3, [r7, #20]
						for (int i = 0; i < 4; i++)
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	3301      	adds	r3, #1
 8014cf0:	60fb      	str	r3, [r7, #12]
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	2b03      	cmp	r3, #3
 8014cf6:	ddc6      	ble.n	8014c86 <singleRead+0x7e>
						if (dist_mm == 0)
 8014cf8:	8abb      	ldrh	r3, [r7, #20]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d108      	bne.n	8014d10 <singleRead+0x108>
							newData = false;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	75fb      	strb	r3, [r7, #23]
 8014d02:	e005      	b.n	8014d10 <singleRead+0x108>
					}
				}
			} else {
				newData = false;
 8014d04:	2300      	movs	r3, #0
 8014d06:	75fb      	strb	r3, [r7, #23]
 8014d08:	e002      	b.n	8014d10 <singleRead+0x108>
			}
		} else {
			tries++;
 8014d0a:	7cfb      	ldrb	r3, [r7, #19]
 8014d0c:	3301      	adds	r3, #1
 8014d0e:	74fb      	strb	r3, [r7, #19]
		}
	} while (newData == false && tries < MAX_SONAR_TRIES - 1);
 8014d10:	7dfb      	ldrb	r3, [r7, #23]
 8014d12:	f083 0301 	eor.w	r3, r3, #1
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d003      	beq.n	8014d24 <singleRead+0x11c>
 8014d1c:	7cfb      	ldrb	r3, [r7, #19]
 8014d1e:	2b03      	cmp	r3, #3
 8014d20:	f67f af7b 	bls.w	8014c1a <singleRead+0x12>
	HAL_UART_Transmit(Get_DebugHandle(), (uint8_t *)RxBuffer, 4, 20);
 8014d24:	f7f5 fa40 	bl	800a1a8 <Get_DebugHandle>
 8014d28:	f107 0108 	add.w	r1, r7, #8
 8014d2c:	2314      	movs	r3, #20
 8014d2e:	2204      	movs	r2, #4
 8014d30:	f7fd fb50 	bl	80123d4 <HAL_UART_Transmit>
	serialPutStr((char *)"\n");
 8014d34:	4806      	ldr	r0, [pc, #24]	; (8014d50 <singleRead+0x148>)
 8014d36:	f000 f93b 	bl	8014fb0 <serialPutStr>
	return dist_mm;
 8014d3a:	8abb      	ldrh	r3, [r7, #20]
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3718      	adds	r7, #24
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bdb0      	pop	{r4, r5, r7, pc}
 8014d44:	48000800 	.word	0x48000800
 8014d48:	08020864 	.word	0x08020864
 8014d4c:	40240000 	.word	0x40240000
 8014d50:	0801fbe0 	.word	0x0801fbe0

08014d54 <getSonarDistance>:

uint16_t getSonarDistance(void) {
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b082      	sub	sp, #8
 8014d58:	af00      	add	r7, sp, #0
	uint16_t dist_mm = 0;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	807b      	strh	r3, [r7, #2]
	/* RESET IS ON, SET IS OFF! is this in reverse? wdik */
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_RESET);
 8014d5e:	2200      	movs	r2, #0
 8014d60:	2101      	movs	r1, #1
 8014d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014d66:	f7f9 ff53 	bl	800ec10 <HAL_GPIO_WritePin>
	/* First two are from the BOOT UP message of Maxbotix */
	singleRead();
 8014d6a:	f7ff ff4d 	bl	8014c08 <singleRead>
	singleRead();
 8014d6e:	f7ff ff4b 	bl	8014c08 <singleRead>
	for (int i = 0; i < MAX_SONAR_SAMPLES; i++) {
 8014d72:	2300      	movs	r3, #0
 8014d74:	607b      	str	r3, [r7, #4]
 8014d76:	e00d      	b.n	8014d94 <getSonarDistance+0x40>
		readings_arr[i] = singleRead();
 8014d78:	f7ff ff46 	bl	8014c08 <singleRead>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	4619      	mov	r1, r3
 8014d80:	4a0e      	ldr	r2, [pc, #56]	; (8014dbc <getSonarDistance+0x68>)
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		HAL_Delay(250);
 8014d88:	20fa      	movs	r0, #250	; 0xfa
 8014d8a:	f7f8 f90f 	bl	800cfac <HAL_Delay>
	for (int i = 0; i < MAX_SONAR_SAMPLES; i++) {
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	3301      	adds	r3, #1
 8014d92:	607b      	str	r3, [r7, #4]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2b06      	cmp	r3, #6
 8014d98:	ddee      	ble.n	8014d78 <getSonarDistance+0x24>
	}
	HAL_GPIO_WritePin(MB_PWR_GPIO_Port, MB_PWR_Pin, GPIO_PIN_SET);
 8014d9a:	2201      	movs	r2, #1
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014da2:	f7f9 ff35 	bl	800ec10 <HAL_GPIO_WritePin>
	switch (AVERAGING_METHOD) {
	case 1: /* Mean */
		dist_mm = mean(MAX_SONAR_SAMPLES);
		break;
	case 2: /* Median */
		dist_mm = median(MAX_SONAR_SAMPLES);
 8014da6:	2007      	movs	r0, #7
 8014da8:	f000 f886 	bl	8014eb8 <median>
 8014dac:	4603      	mov	r3, r0
 8014dae:	807b      	strh	r3, [r7, #2]
		break;
 8014db0:	bf00      	nop
		break;
	default: /* should never reach here */
		dist_mm = singleRead();
		break;
	}
	return dist_mm;
 8014db2:	887b      	ldrh	r3, [r7, #2]
}
 8014db4:	4618      	mov	r0, r3
 8014db6:	3708      	adds	r7, #8
 8014db8:	46bd      	mov	sp, r7
 8014dba:	bd80      	pop	{r7, pc}
 8014dbc:	200021f8 	.word	0x200021f8

08014dc0 <swap>:

static void swap(volatile uint16_t *p, volatile uint16_t *q) {
 8014dc0:	b480      	push	{r7}
 8014dc2:	b085      	sub	sp, #20
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6039      	str	r1, [r7, #0]
	int t = *p;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	881b      	ldrh	r3, [r3, #0]
 8014dce:	b29b      	uxth	r3, r3
 8014dd0:	60fb      	str	r3, [r7, #12]
	*p = *q;
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	881b      	ldrh	r3, [r3, #0]
 8014dd6:	b29a      	uxth	r2, r3
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	801a      	strh	r2, [r3, #0]
	*q = t;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	801a      	strh	r2, [r3, #0]
}
 8014de4:	bf00      	nop
 8014de6:	3714      	adds	r7, #20
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bc80      	pop	{r7}
 8014dec:	4770      	bx	lr
	...

08014df0 <partition>:

static int partition(int lowIndex, int highIndex) {
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b086      	sub	sp, #24
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
 8014df8:	6039      	str	r1, [r7, #0]
	int pivotElement = readings_arr[highIndex];
 8014dfa:	4a1f      	ldr	r2, [pc, #124]	; (8014e78 <partition+0x88>)
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	60fb      	str	r3, [r7, #12]
	int i = (lowIndex - 1);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	3b01      	subs	r3, #1
 8014e0a:	617b      	str	r3, [r7, #20]
	for (int j = lowIndex; j <= highIndex - 1; j++) {
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	613b      	str	r3, [r7, #16]
 8014e10:	e01a      	b.n	8014e48 <partition+0x58>
		if (readings_arr[j] <= pivotElement) {
 8014e12:	4a19      	ldr	r2, [pc, #100]	; (8014e78 <partition+0x88>)
 8014e14:	693b      	ldr	r3, [r7, #16]
 8014e16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	4293      	cmp	r3, r2
 8014e22:	db0e      	blt.n	8014e42 <partition+0x52>
			i++;
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	3301      	adds	r3, #1
 8014e28:	617b      	str	r3, [r7, #20]
			swap(&readings_arr[i], &readings_arr[j]);
 8014e2a:	697b      	ldr	r3, [r7, #20]
 8014e2c:	005b      	lsls	r3, r3, #1
 8014e2e:	4a12      	ldr	r2, [pc, #72]	; (8014e78 <partition+0x88>)
 8014e30:	441a      	add	r2, r3
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	005b      	lsls	r3, r3, #1
 8014e36:	4910      	ldr	r1, [pc, #64]	; (8014e78 <partition+0x88>)
 8014e38:	440b      	add	r3, r1
 8014e3a:	4619      	mov	r1, r3
 8014e3c:	4610      	mov	r0, r2
 8014e3e:	f7ff ffbf 	bl	8014dc0 <swap>
	for (int j = lowIndex; j <= highIndex - 1; j++) {
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	3301      	adds	r3, #1
 8014e46:	613b      	str	r3, [r7, #16]
 8014e48:	683a      	ldr	r2, [r7, #0]
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	dce0      	bgt.n	8014e12 <partition+0x22>
		}
	}
	swap(&readings_arr[i + 1], &readings_arr[highIndex]);
 8014e50:	697b      	ldr	r3, [r7, #20]
 8014e52:	3301      	adds	r3, #1
 8014e54:	005b      	lsls	r3, r3, #1
 8014e56:	4a08      	ldr	r2, [pc, #32]	; (8014e78 <partition+0x88>)
 8014e58:	441a      	add	r2, r3
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	005b      	lsls	r3, r3, #1
 8014e5e:	4906      	ldr	r1, [pc, #24]	; (8014e78 <partition+0x88>)
 8014e60:	440b      	add	r3, r1
 8014e62:	4619      	mov	r1, r3
 8014e64:	4610      	mov	r0, r2
 8014e66:	f7ff ffab 	bl	8014dc0 <swap>
	return (i + 1);
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	3301      	adds	r3, #1
}
 8014e6e:	4618      	mov	r0, r3
 8014e70:	3718      	adds	r7, #24
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}
 8014e76:	bf00      	nop
 8014e78:	200021f8 	.word	0x200021f8

08014e7c <quickSort>:

static void quickSort(int lowIndex, int highIndex) {
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	6039      	str	r1, [r7, #0]
	if (lowIndex < highIndex) {
 8014e86:	687a      	ldr	r2, [r7, #4]
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	da10      	bge.n	8014eb0 <quickSort+0x34>
		int pivot = partition(lowIndex, highIndex);
 8014e8e:	6839      	ldr	r1, [r7, #0]
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f7ff ffad 	bl	8014df0 <partition>
 8014e96:	60f8      	str	r0, [r7, #12]
		quickSort(lowIndex, pivot - 1);
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	3b01      	subs	r3, #1
 8014e9c:	4619      	mov	r1, r3
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	f7ff ffec 	bl	8014e7c <quickSort>
		quickSort(pivot + 1, highIndex);
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	3301      	adds	r3, #1
 8014ea8:	6839      	ldr	r1, [r7, #0]
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f7ff ffe6 	bl	8014e7c <quickSort>
	}
}
 8014eb0:	bf00      	nop
 8014eb2:	3710      	adds	r7, #16
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}

08014eb8 <median>:
		readings_sum = readings_sum + readings_arr[i];
	}
	return readings_sum / number_of_samples;
}

static uint16_t median(unsigned int number_of_samples) {
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b082      	sub	sp, #8
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
	quickSort(0, number_of_samples - 1);
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	3b01      	subs	r3, #1
 8014ec4:	4619      	mov	r1, r3
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	f7ff ffd8 	bl	8014e7c <quickSort>
	if (number_of_samples % 2 != 0) {
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	f003 0301 	and.w	r3, r3, #1
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d008      	beq.n	8014ee8 <median+0x30>
		return readings_arr[(number_of_samples + 1) / 2 - 1];
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	3301      	adds	r3, #1
 8014eda:	085b      	lsrs	r3, r3, #1
 8014edc:	3b01      	subs	r3, #1
 8014ede:	4a0e      	ldr	r2, [pc, #56]	; (8014f18 <median+0x60>)
 8014ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ee4:	b29b      	uxth	r3, r3
 8014ee6:	e012      	b.n	8014f0e <median+0x56>
	} else {
		return (readings_arr[number_of_samples / 2 - 1]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	085b      	lsrs	r3, r3, #1
 8014eec:	3b01      	subs	r3, #1
 8014eee:	4a0a      	ldr	r2, [pc, #40]	; (8014f18 <median+0x60>)
 8014ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ef4:	b29b      	uxth	r3, r3
 8014ef6:	4619      	mov	r1, r3
				+ readings_arr[number_of_samples / 2]) / 2;
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	085b      	lsrs	r3, r3, #1
 8014efc:	4a06      	ldr	r2, [pc, #24]	; (8014f18 <median+0x60>)
 8014efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f02:	b29b      	uxth	r3, r3
 8014f04:	440b      	add	r3, r1
 8014f06:	0fda      	lsrs	r2, r3, #31
 8014f08:	4413      	add	r3, r2
 8014f0a:	105b      	asrs	r3, r3, #1
 8014f0c:	b29b      	uxth	r3, r3
	}
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3708      	adds	r7, #8
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}
 8014f16:	bf00      	nop
 8014f18:	200021f8 	.word	0x200021f8

08014f1c <Spi1_AssertCs>:
 */

#include "Spi.h"

void Spi1_AssertCs(void)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	af00      	add	r7, sp, #0
	//Assert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8014f20:	2201      	movs	r2, #1
 8014f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014f26:	4802      	ldr	r0, [pc, #8]	; (8014f30 <Spi1_AssertCs+0x14>)
 8014f28:	f7f9 fe72 	bl	800ec10 <HAL_GPIO_WritePin>
}
 8014f2c:	bf00      	nop
 8014f2e:	bd80      	pop	{r7, pc}
 8014f30:	48000400 	.word	0x48000400

08014f34 <Spi1_DeassertCs>:

void Spi1_DeassertCs(void)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	af00      	add	r7, sp, #0
	//Deassert SPI1_NSS pin
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8014f38:	2200      	movs	r2, #0
 8014f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014f3e:	4802      	ldr	r0, [pc, #8]	; (8014f48 <Spi1_DeassertCs+0x14>)
 8014f40:	f7f9 fe66 	bl	800ec10 <HAL_GPIO_WritePin>
}
 8014f44:	bf00      	nop
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	48000400 	.word	0x48000400

08014f4c <Spi1_Transmit>:

bool Spi1_Transmit(uint8_t *buff, uint16_t size)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b084      	sub	sp, #16
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	460b      	mov	r3, r1
 8014f56:	807b      	strh	r3, [r7, #2]
  bool status = false;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Transmit(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8014f5c:	f7f5 f938 	bl	800a1d0 <Get_SpiHandle>
 8014f60:	887a      	ldrh	r2, [r7, #2]
 8014f62:	2364      	movs	r3, #100	; 0x64
 8014f64:	6879      	ldr	r1, [r7, #4]
 8014f66:	f7fb fee6 	bl	8010d36 <HAL_SPI_Transmit>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d101      	bne.n	8014f74 <Spi1_Transmit+0x28>
  {
    status  = true;
 8014f70:	2301      	movs	r3, #1
 8014f72:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8014f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3710      	adds	r7, #16
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}

08014f7e <Spi1_Receive>:


bool Spi1_Receive(uint8_t *buff, uint16_t size)
{
 8014f7e:	b580      	push	{r7, lr}
 8014f80:	b084      	sub	sp, #16
 8014f82:	af00      	add	r7, sp, #0
 8014f84:	6078      	str	r0, [r7, #4]
 8014f86:	460b      	mov	r3, r1
 8014f88:	807b      	strh	r3, [r7, #2]
  bool status = false;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_Receive(Get_SpiHandle(), buff, size, SPI_TIMEOUT) == HAL_OK)
 8014f8e:	f7f5 f91f 	bl	800a1d0 <Get_SpiHandle>
 8014f92:	887a      	ldrh	r2, [r7, #2]
 8014f94:	2364      	movs	r3, #100	; 0x64
 8014f96:	6879      	ldr	r1, [r7, #4]
 8014f98:	f7fc f85d 	bl	8011056 <HAL_SPI_Receive>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d101      	bne.n	8014fa6 <Spi1_Receive+0x28>
  {
    status = true;
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8014fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3710      	adds	r7, #16
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}

08014fb0 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8014fb0:	b590      	push	{r4, r7, lr}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8014fb8:	f7f5 f8f6 	bl	800a1a8 <Get_DebugHandle>
 8014fbc:	4604      	mov	r4, r0
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f7f3 fb2e 	bl	8008620 <strlen>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	b29a      	uxth	r2, r3
 8014fc8:	230a      	movs	r3, #10
 8014fca:	6879      	ldr	r1, [r7, #4]
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f7fd fa01 	bl	80123d4 <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 8014fd2:	bf00      	nop
 8014fd4:	370c      	adds	r7, #12
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd90      	pop	{r4, r7, pc}
	...

08014fdc <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b084      	sub	sp, #16
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	60fb      	str	r3, [r7, #12]
	char tRxedChar;



	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8014fe8:	f7f5 f8de 	bl	800a1a8 <Get_DebugHandle>
 8014fec:	4603      	mov	r3, r0
 8014fee:	2201      	movs	r2, #1
 8014ff0:	4911      	ldr	r1, [pc, #68]	; (8015038 <terminalTaskHandler+0x5c>)
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7fd fb38 	bl	8012668 <HAL_UART_Receive_IT>
	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 8014ff8:	4810      	ldr	r0, [pc, #64]	; (801503c <terminalTaskHandler+0x60>)
 8014ffa:	f7ff ffd9 	bl	8014fb0 <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8014ffe:	f7f5 f8f1 	bl	800a1e4 <Get_TerminalQueueHandle>
 8015002:	f107 030b 	add.w	r3, r7, #11
 8015006:	220a      	movs	r2, #10
 8015008:	4619      	mov	r1, r3
 801500a:	f000 fe9d 	bl	8015d48 <xQueueReceive>
 801500e:	4603      	mov	r3, r0
 8015010:	2b00      	cmp	r3, #0
 8015012:	d00c      	beq.n	801502e <terminalTaskHandler+0x52>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 8015014:	7afb      	ldrb	r3, [r7, #11]
 8015016:	4618      	mov	r0, r3
 8015018:	f000 f814 	bl	8015044 <CommandLineBuildCommand>
 801501c:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d004      	beq.n	801502e <terminalTaskHandler+0x52>
			{
				CommandLineProcessCommand(gCommandBuffer);
 8015024:	4806      	ldr	r0, [pc, #24]	; (8015040 <terminalTaskHandler+0x64>)
 8015026:	f000 f855 	bl	80150d4 <CommandLineProcessCommand>
				tCommandReady = 0;
 801502a:	2300      	movs	r3, #0
 801502c:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 801502e:	2001      	movs	r0, #1
 8015030:	f000 f93f 	bl	80152b2 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8015034:	e7e3      	b.n	8014ffe <terminalTaskHandler+0x22>
 8015036:	bf00      	nop
 8015038:	20002238 	.word	0x20002238
 801503c:	0801fc20 	.word	0x0801fc20
 8015040:	2000223c 	.word	0x2000223c

08015044 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 8015044:	b480      	push	{r7}
 8015046:	b083      	sub	sp, #12
 8015048:	af00      	add	r7, sp, #0
 801504a:	4603      	mov	r3, r0
 801504c:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 801504e:	79fb      	ldrb	r3, [r7, #7]
 8015050:	2b0a      	cmp	r3, #10
 8015052:	d005      	beq.n	8015060 <CommandLineBuildCommand+0x1c>
 8015054:	79fb      	ldrb	r3, [r7, #7]
 8015056:	2b20      	cmp	r3, #32
 8015058:	d002      	beq.n	8015060 <CommandLineBuildCommand+0x1c>
 801505a:	79fb      	ldrb	r3, [r7, #7]
 801505c:	2b09      	cmp	r3, #9
 801505e:	d101      	bne.n	8015064 <CommandLineBuildCommand+0x20>
	{
		return false;
 8015060:	2300      	movs	r3, #0
 8015062:	e02d      	b.n	80150c0 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8015064:	79fb      	ldrb	r3, [r7, #7]
 8015066:	2b0d      	cmp	r3, #13
 8015068:	d10a      	bne.n	8015080 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 801506a:	4b18      	ldr	r3, [pc, #96]	; (80150cc <CommandLineBuildCommand+0x88>)
 801506c:	881b      	ldrh	r3, [r3, #0]
 801506e:	461a      	mov	r2, r3
 8015070:	4b17      	ldr	r3, [pc, #92]	; (80150d0 <CommandLineBuildCommand+0x8c>)
 8015072:	2100      	movs	r1, #0
 8015074:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 8015076:	4b15      	ldr	r3, [pc, #84]	; (80150cc <CommandLineBuildCommand+0x88>)
 8015078:	2200      	movs	r2, #0
 801507a:	801a      	strh	r2, [r3, #0]
		return true;
 801507c:	2301      	movs	r3, #1
 801507e:	e01f      	b.n	80150c0 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8015080:	79fb      	ldrb	r3, [r7, #7]
 8015082:	2b60      	cmp	r3, #96	; 0x60
 8015084:	d906      	bls.n	8015094 <CommandLineBuildCommand+0x50>
 8015086:	79fb      	ldrb	r3, [r7, #7]
 8015088:	2b7a      	cmp	r3, #122	; 0x7a
 801508a:	d803      	bhi.n	8015094 <CommandLineBuildCommand+0x50>
 801508c:	79fb      	ldrb	r3, [r7, #7]
 801508e:	3b20      	subs	r3, #32
 8015090:	b2db      	uxtb	r3, r3
 8015092:	e000      	b.n	8015096 <CommandLineBuildCommand+0x52>
 8015094:	79fb      	ldrb	r3, [r7, #7]
 8015096:	4a0d      	ldr	r2, [pc, #52]	; (80150cc <CommandLineBuildCommand+0x88>)
 8015098:	8812      	ldrh	r2, [r2, #0]
 801509a:	4611      	mov	r1, r2
 801509c:	4a0c      	ldr	r2, [pc, #48]	; (80150d0 <CommandLineBuildCommand+0x8c>)
 801509e:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 80150a0:	4b0a      	ldr	r3, [pc, #40]	; (80150cc <CommandLineBuildCommand+0x88>)
 80150a2:	881b      	ldrh	r3, [r3, #0]
 80150a4:	3301      	adds	r3, #1
 80150a6:	b29a      	uxth	r2, r3
 80150a8:	4b08      	ldr	r3, [pc, #32]	; (80150cc <CommandLineBuildCommand+0x88>)
 80150aa:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 80150ac:	4b07      	ldr	r3, [pc, #28]	; (80150cc <CommandLineBuildCommand+0x88>)
 80150ae:	881b      	ldrh	r3, [r3, #0]
 80150b0:	2b77      	cmp	r3, #119	; 0x77
 80150b2:	d904      	bls.n	80150be <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 80150b4:	4b05      	ldr	r3, [pc, #20]	; (80150cc <CommandLineBuildCommand+0x88>)
 80150b6:	2200      	movs	r2, #0
 80150b8:	801a      	strh	r2, [r3, #0]
		return true;
 80150ba:	2301      	movs	r3, #1
 80150bc:	e000      	b.n	80150c0 <CommandLineBuildCommand+0x7c>
	}

	return false;
 80150be:	2300      	movs	r3, #0

}
 80150c0:	4618      	mov	r0, r3
 80150c2:	370c      	adds	r7, #12
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bc80      	pop	{r7}
 80150c8:	4770      	bx	lr
 80150ca:	bf00      	nop
 80150cc:	20002320 	.word	0x20002320
 80150d0:	2000223c 	.word	0x2000223c

080150d4 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 80150d4:	b590      	push	{r4, r7, lr}
 80150d6:	b087      	sub	sp, #28
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 80150dc:	2300      	movs	r3, #0
 80150de:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 80150e0:	491e      	ldr	r1, [pc, #120]	; (801515c <CommandLineProcessCommand+0x88>)
 80150e2:	2000      	movs	r0, #0
 80150e4:	f003 fd80 	bl	8018be8 <strtok>
 80150e8:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80150ea:	2300      	movs	r3, #0
 80150ec:	617b      	str	r3, [r7, #20]
 80150ee:	e020      	b.n	8015132 <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 80150f0:	4a1b      	ldr	r2, [pc, #108]	; (8015160 <CommandLineProcessCommand+0x8c>)
 80150f2:	697b      	ldr	r3, [r7, #20]
 80150f4:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80150f8:	4a19      	ldr	r2, [pc, #100]	; (8015160 <CommandLineProcessCommand+0x8c>)
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015100:	4618      	mov	r0, r3
 8015102:	f7f3 fa8d 	bl	8008620 <strlen>
 8015106:	4603      	mov	r3, r0
 8015108:	461a      	mov	r2, r3
 801510a:	6879      	ldr	r1, [r7, #4]
 801510c:	4620      	mov	r0, r4
 801510e:	f003 fd59 	bl	8018bc4 <strncmp>
 8015112:	4603      	mov	r3, r0
 8015114:	2b00      	cmp	r3, #0
 8015116:	d109      	bne.n	801512c <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 8015118:	2301      	movs	r3, #1
 801511a:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 801511c:	4a10      	ldr	r2, [pc, #64]	; (8015160 <CommandLineProcessCommand+0x8c>)
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	00db      	lsls	r3, r3, #3
 8015122:	4413      	add	r3, r2
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	68f8      	ldr	r0, [r7, #12]
 8015128:	4798      	blx	r3
			break;
 801512a:	e008      	b.n	801513e <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 801512c:	697b      	ldr	r3, [r7, #20]
 801512e:	3301      	adds	r3, #1
 8015130:	617b      	str	r3, [r7, #20]
 8015132:	4a0b      	ldr	r2, [pc, #44]	; (8015160 <CommandLineProcessCommand+0x8c>)
 8015134:	697b      	ldr	r3, [r7, #20]
 8015136:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d1d8      	bne.n	80150f0 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message. */
	if (CommandFound==false)
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d107      	bne.n	8015154 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 8015144:	4a07      	ldr	r2, [pc, #28]	; (8015164 <CommandLineProcessCommand+0x90>)
 8015146:	2164      	movs	r1, #100	; 0x64
 8015148:	4807      	ldr	r0, [pc, #28]	; (8015168 <CommandLineProcessCommand+0x94>)
 801514a:	f003 fc19 	bl	8018980 <snprintf>
		serialPutStr(TerminalMsgBuffer);
 801514e:	4806      	ldr	r0, [pc, #24]	; (8015168 <CommandLineProcessCommand+0x94>)
 8015150:	f7ff ff2e 	bl	8014fb0 <serialPutStr>
	}
}
 8015154:	bf00      	nop
 8015156:	371c      	adds	r7, #28
 8015158:	46bd      	mov	sp, r7
 801515a:	bd90      	pop	{r4, r7, pc}
 801515c:	0801fc3c 	.word	0x0801fc3c
 8015160:	08020224 	.word	0x08020224
 8015164:	0801fc40 	.word	0x0801fc40
 8015168:	200022b8 	.word	0x200022b8

0801516c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	4a0c      	ldr	r2, [pc, #48]	; (80151ac <HAL_UART_RxCpltCallback+0x40>)
 801517a:	4293      	cmp	r3, r2
 801517c:	d112      	bne.n	80151a4 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 801517e:	f7f5 f813 	bl	800a1a8 <Get_DebugHandle>
 8015182:	4603      	mov	r3, r0
 8015184:	2201      	movs	r2, #1
 8015186:	490a      	ldr	r1, [pc, #40]	; (80151b0 <HAL_UART_RxCpltCallback+0x44>)
 8015188:	4618      	mov	r0, r3
 801518a:	f7fd fa6d 	bl	8012668 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 801518e:	4b08      	ldr	r3, [pc, #32]	; (80151b0 <HAL_UART_RxCpltCallback+0x44>)
 8015190:	781a      	ldrb	r2, [r3, #0]
 8015192:	4b08      	ldr	r3, [pc, #32]	; (80151b4 <HAL_UART_RxCpltCallback+0x48>)
 8015194:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 8015196:	f7f5 f825 	bl	800a1e4 <Get_TerminalQueueHandle>
 801519a:	2300      	movs	r3, #0
 801519c:	4a06      	ldr	r2, [pc, #24]	; (80151b8 <HAL_UART_RxCpltCallback+0x4c>)
 801519e:	4905      	ldr	r1, [pc, #20]	; (80151b4 <HAL_UART_RxCpltCallback+0x48>)
 80151a0:	f000 fcac 	bl	8015afc <xQueueGenericSendFromISR>
	}
}
 80151a4:	bf00      	nop
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	40004400 	.word	0x40004400
 80151b0:	20002238 	.word	0x20002238
 80151b4:	20002234 	.word	0x20002234
 80151b8:	2000231c 	.word	0x2000231c

080151bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80151bc:	b480      	push	{r7}
 80151be:	b085      	sub	sp, #20
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	4603      	mov	r3, r0
 80151c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80151c6:	2300      	movs	r3, #0
 80151c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80151ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80151ce:	2b84      	cmp	r3, #132	; 0x84
 80151d0:	d005      	beq.n	80151de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80151d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	4413      	add	r3, r2
 80151da:	3303      	adds	r3, #3
 80151dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80151de:	68fb      	ldr	r3, [r7, #12]
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3714      	adds	r7, #20
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bc80      	pop	{r7}
 80151e8:	4770      	bx	lr

080151ea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80151ea:	b480      	push	{r7}
 80151ec:	b083      	sub	sp, #12
 80151ee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80151f0:	f3ef 8305 	mrs	r3, IPSR
 80151f4:	607b      	str	r3, [r7, #4]
  return(result);
 80151f6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	bf14      	ite	ne
 80151fc:	2301      	movne	r3, #1
 80151fe:	2300      	moveq	r3, #0
 8015200:	b2db      	uxtb	r3, r3
}
 8015202:	4618      	mov	r0, r3
 8015204:	370c      	adds	r7, #12
 8015206:	46bd      	mov	sp, r7
 8015208:	bc80      	pop	{r7}
 801520a:	4770      	bx	lr

0801520c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8015210:	f001 fb9e 	bl	8016950 <vTaskStartScheduler>
  
  return osOK;
 8015214:	2300      	movs	r3, #0
}
 8015216:	4618      	mov	r0, r3
 8015218:	bd80      	pop	{r7, pc}

0801521a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801521a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801521c:	b089      	sub	sp, #36	; 0x24
 801521e:	af04      	add	r7, sp, #16
 8015220:	6078      	str	r0, [r7, #4]
 8015222:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	695b      	ldr	r3, [r3, #20]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d020      	beq.n	801526e <osThreadCreate+0x54>
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	699b      	ldr	r3, [r3, #24]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d01c      	beq.n	801526e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	685c      	ldr	r4, [r3, #4]
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	691e      	ldr	r6, [r3, #16]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015246:	4618      	mov	r0, r3
 8015248:	f7ff ffb8 	bl	80151bc <makeFreeRtosPriority>
 801524c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	695b      	ldr	r3, [r3, #20]
 8015252:	687a      	ldr	r2, [r7, #4]
 8015254:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015256:	9202      	str	r2, [sp, #8]
 8015258:	9301      	str	r3, [sp, #4]
 801525a:	9100      	str	r1, [sp, #0]
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	4632      	mov	r2, r6
 8015260:	4629      	mov	r1, r5
 8015262:	4620      	mov	r0, r4
 8015264:	f001 f960 	bl	8016528 <xTaskCreateStatic>
 8015268:	4603      	mov	r3, r0
 801526a:	60fb      	str	r3, [r7, #12]
 801526c:	e01c      	b.n	80152a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	685c      	ldr	r4, [r3, #4]
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801527a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015282:	4618      	mov	r0, r3
 8015284:	f7ff ff9a 	bl	80151bc <makeFreeRtosPriority>
 8015288:	4602      	mov	r2, r0
 801528a:	f107 030c 	add.w	r3, r7, #12
 801528e:	9301      	str	r3, [sp, #4]
 8015290:	9200      	str	r2, [sp, #0]
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	4632      	mov	r2, r6
 8015296:	4629      	mov	r1, r5
 8015298:	4620      	mov	r0, r4
 801529a:	f001 f9a4 	bl	80165e6 <xTaskCreate>
 801529e:	4603      	mov	r3, r0
 80152a0:	2b01      	cmp	r3, #1
 80152a2:	d001      	beq.n	80152a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80152a4:	2300      	movs	r3, #0
 80152a6:	e000      	b.n	80152aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80152a8:	68fb      	ldr	r3, [r7, #12]
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	3714      	adds	r7, #20
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080152b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80152b2:	b580      	push	{r7, lr}
 80152b4:	b084      	sub	sp, #16
 80152b6:	af00      	add	r7, sp, #0
 80152b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d001      	beq.n	80152c8 <osDelay+0x16>
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	e000      	b.n	80152ca <osDelay+0x18>
 80152c8:	2301      	movs	r3, #1
 80152ca:	4618      	mov	r0, r3
 80152cc:	f001 fb0c 	bl	80168e8 <vTaskDelay>
  
  return osOK;
 80152d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	3710      	adds	r7, #16
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}

080152da <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80152da:	b580      	push	{r7, lr}
 80152dc:	b082      	sub	sp, #8
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	685b      	ldr	r3, [r3, #4]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d007      	beq.n	80152fa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	4619      	mov	r1, r3
 80152f0:	2001      	movs	r0, #1
 80152f2:	f000 faea 	bl	80158ca <xQueueCreateMutexStatic>
 80152f6:	4603      	mov	r3, r0
 80152f8:	e003      	b.n	8015302 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80152fa:	2001      	movs	r0, #1
 80152fc:	f000 facd 	bl	801589a <xQueueCreateMutex>
 8015300:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8015302:	4618      	mov	r0, r3
 8015304:	3708      	adds	r7, #8
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
	...

0801530c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8015316:	2300      	movs	r3, #0
 8015318:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d101      	bne.n	8015324 <osMutexWait+0x18>
    return osErrorParameter;
 8015320:	2380      	movs	r3, #128	; 0x80
 8015322:	e03a      	b.n	801539a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8015324:	2300      	movs	r3, #0
 8015326:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801532e:	d103      	bne.n	8015338 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8015330:	f04f 33ff 	mov.w	r3, #4294967295
 8015334:	60fb      	str	r3, [r7, #12]
 8015336:	e009      	b.n	801534c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d006      	beq.n	801534c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d101      	bne.n	801534c <osMutexWait+0x40>
      ticks = 1;
 8015348:	2301      	movs	r3, #1
 801534a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801534c:	f7ff ff4d 	bl	80151ea <inHandlerMode>
 8015350:	4603      	mov	r3, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	d017      	beq.n	8015386 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8015356:	f107 0308 	add.w	r3, r7, #8
 801535a:	461a      	mov	r2, r3
 801535c:	2100      	movs	r1, #0
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f000 fede 	bl	8016120 <xQueueReceiveFromISR>
 8015364:	4603      	mov	r3, r0
 8015366:	2b01      	cmp	r3, #1
 8015368:	d001      	beq.n	801536e <osMutexWait+0x62>
      return osErrorOS;
 801536a:	23ff      	movs	r3, #255	; 0xff
 801536c:	e015      	b.n	801539a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d011      	beq.n	8015398 <osMutexWait+0x8c>
 8015374:	4b0b      	ldr	r3, [pc, #44]	; (80153a4 <osMutexWait+0x98>)
 8015376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801537a:	601a      	str	r2, [r3, #0]
 801537c:	f3bf 8f4f 	dsb	sy
 8015380:	f3bf 8f6f 	isb	sy
 8015384:	e008      	b.n	8015398 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8015386:	68f9      	ldr	r1, [r7, #12]
 8015388:	6878      	ldr	r0, [r7, #4]
 801538a:	f000 fdbd 	bl	8015f08 <xQueueSemaphoreTake>
 801538e:	4603      	mov	r3, r0
 8015390:	2b01      	cmp	r3, #1
 8015392:	d001      	beq.n	8015398 <osMutexWait+0x8c>
    return osErrorOS;
 8015394:	23ff      	movs	r3, #255	; 0xff
 8015396:	e000      	b.n	801539a <osMutexWait+0x8e>
  }
  
  return osOK;
 8015398:	2300      	movs	r3, #0
}
 801539a:	4618      	mov	r0, r3
 801539c:	3710      	adds	r7, #16
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}
 80153a2:	bf00      	nop
 80153a4:	e000ed04 	.word	0xe000ed04

080153a8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b084      	sub	sp, #16
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80153b0:	2300      	movs	r3, #0
 80153b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80153b4:	2300      	movs	r3, #0
 80153b6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80153b8:	f7ff ff17 	bl	80151ea <inHandlerMode>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d016      	beq.n	80153f0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80153c2:	f107 0308 	add.w	r3, r7, #8
 80153c6:	4619      	mov	r1, r3
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f000 fc2f 	bl	8015c2c <xQueueGiveFromISR>
 80153ce:	4603      	mov	r3, r0
 80153d0:	2b01      	cmp	r3, #1
 80153d2:	d001      	beq.n	80153d8 <osMutexRelease+0x30>
      return osErrorOS;
 80153d4:	23ff      	movs	r3, #255	; 0xff
 80153d6:	e017      	b.n	8015408 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d013      	beq.n	8015406 <osMutexRelease+0x5e>
 80153de:	4b0c      	ldr	r3, [pc, #48]	; (8015410 <osMutexRelease+0x68>)
 80153e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153e4:	601a      	str	r2, [r3, #0]
 80153e6:	f3bf 8f4f 	dsb	sy
 80153ea:	f3bf 8f6f 	isb	sy
 80153ee:	e00a      	b.n	8015406 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80153f0:	2300      	movs	r3, #0
 80153f2:	2200      	movs	r2, #0
 80153f4:	2100      	movs	r1, #0
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f000 fa82 	bl	8015900 <xQueueGenericSend>
 80153fc:	4603      	mov	r3, r0
 80153fe:	2b01      	cmp	r3, #1
 8015400:	d001      	beq.n	8015406 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8015402:	23ff      	movs	r3, #255	; 0xff
 8015404:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8015406:	68fb      	ldr	r3, [r7, #12]
}
 8015408:	4618      	mov	r0, r3
 801540a:	3710      	adds	r7, #16
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}
 8015410:	e000ed04 	.word	0xe000ed04

08015414 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8015414:	b590      	push	{r4, r7, lr}
 8015416:	b085      	sub	sp, #20
 8015418:	af02      	add	r7, sp, #8
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	689b      	ldr	r3, [r3, #8]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d011      	beq.n	801544a <osMessageCreate+0x36>
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	68db      	ldr	r3, [r3, #12]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d00d      	beq.n	801544a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	6818      	ldr	r0, [r3, #0]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	6859      	ldr	r1, [r3, #4]
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	689a      	ldr	r2, [r3, #8]
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	68db      	ldr	r3, [r3, #12]
 801543e:	2400      	movs	r4, #0
 8015440:	9400      	str	r4, [sp, #0]
 8015442:	f000 f939 	bl	80156b8 <xQueueGenericCreateStatic>
 8015446:	4603      	mov	r3, r0
 8015448:	e008      	b.n	801545c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	6818      	ldr	r0, [r3, #0]
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	2200      	movs	r2, #0
 8015454:	4619      	mov	r1, r3
 8015456:	f000 f9a7 	bl	80157a8 <xQueueGenericCreate>
 801545a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801545c:	4618      	mov	r0, r3
 801545e:	370c      	adds	r7, #12
 8015460:	46bd      	mov	sp, r7
 8015462:	bd90      	pop	{r4, r7, pc}

08015464 <osThreadSuspendAll>:
/**
* @brief  Suspend execution of a all active threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspendAll (void)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 8015468:	f001 fae2 	bl	8016a30 <vTaskSuspendAll>
  
  return osOK;
 801546c:	2300      	movs	r3, #0
}
 801546e:	4618      	mov	r0, r3
 8015470:	bd80      	pop	{r7, pc}

08015472 <osThreadResumeAll>:
/**
* @brief  Resume execution of a all suspended threads.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResumeAll (void)
{
 8015472:	b580      	push	{r7, lr}
 8015474:	af00      	add	r7, sp, #0
  if (xTaskResumeAll() == pdTRUE)
 8015476:	f001 fae9 	bl	8016a4c <xTaskResumeAll>
 801547a:	4603      	mov	r3, r0
 801547c:	2b01      	cmp	r3, #1
 801547e:	d101      	bne.n	8015484 <osThreadResumeAll+0x12>
    return osOK;
 8015480:	2300      	movs	r3, #0
 8015482:	e000      	b.n	8015486 <osThreadResumeAll+0x14>
  else
    return osErrorOS;
 8015484:	23ff      	movs	r3, #255	; 0xff
  
}
 8015486:	4618      	mov	r0, r3
 8015488:	bd80      	pop	{r7, pc}

0801548a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801548a:	b480      	push	{r7}
 801548c:	b083      	sub	sp, #12
 801548e:	af00      	add	r7, sp, #0
 8015490:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f103 0208 	add.w	r2, r3, #8
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	f04f 32ff 	mov.w	r2, #4294967295
 80154a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f103 0208 	add.w	r2, r3, #8
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f103 0208 	add.w	r2, r3, #8
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2200      	movs	r2, #0
 80154bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80154be:	bf00      	nop
 80154c0:	370c      	adds	r7, #12
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bc80      	pop	{r7}
 80154c6:	4770      	bx	lr

080154c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80154c8:	b480      	push	{r7}
 80154ca:	b083      	sub	sp, #12
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2200      	movs	r2, #0
 80154d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80154d6:	bf00      	nop
 80154d8:	370c      	adds	r7, #12
 80154da:	46bd      	mov	sp, r7
 80154dc:	bc80      	pop	{r7}
 80154de:	4770      	bx	lr

080154e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80154e0:	b480      	push	{r7}
 80154e2:	b085      	sub	sp, #20
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
 80154e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	68fa      	ldr	r2, [r7, #12]
 80154f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	689a      	ldr	r2, [r3, #8]
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	689b      	ldr	r3, [r3, #8]
 8015502:	683a      	ldr	r2, [r7, #0]
 8015504:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	683a      	ldr	r2, [r7, #0]
 801550a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	687a      	ldr	r2, [r7, #4]
 8015510:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	1c5a      	adds	r2, r3, #1
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	601a      	str	r2, [r3, #0]
}
 801551c:	bf00      	nop
 801551e:	3714      	adds	r7, #20
 8015520:	46bd      	mov	sp, r7
 8015522:	bc80      	pop	{r7}
 8015524:	4770      	bx	lr

08015526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015526:	b480      	push	{r7}
 8015528:	b085      	sub	sp, #20
 801552a:	af00      	add	r7, sp, #0
 801552c:	6078      	str	r0, [r7, #4]
 801552e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801553c:	d103      	bne.n	8015546 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	691b      	ldr	r3, [r3, #16]
 8015542:	60fb      	str	r3, [r7, #12]
 8015544:	e00c      	b.n	8015560 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	3308      	adds	r3, #8
 801554a:	60fb      	str	r3, [r7, #12]
 801554c:	e002      	b.n	8015554 <vListInsert+0x2e>
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	685b      	ldr	r3, [r3, #4]
 8015552:	60fb      	str	r3, [r7, #12]
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	68ba      	ldr	r2, [r7, #8]
 801555c:	429a      	cmp	r2, r3
 801555e:	d2f6      	bcs.n	801554e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	685a      	ldr	r2, [r3, #4]
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	685b      	ldr	r3, [r3, #4]
 801556c:	683a      	ldr	r2, [r7, #0]
 801556e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	68fa      	ldr	r2, [r7, #12]
 8015574:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	683a      	ldr	r2, [r7, #0]
 801557a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	687a      	ldr	r2, [r7, #4]
 8015580:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	1c5a      	adds	r2, r3, #1
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	601a      	str	r2, [r3, #0]
}
 801558c:	bf00      	nop
 801558e:	3714      	adds	r7, #20
 8015590:	46bd      	mov	sp, r7
 8015592:	bc80      	pop	{r7}
 8015594:	4770      	bx	lr

08015596 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015596:	b480      	push	{r7}
 8015598:	b085      	sub	sp, #20
 801559a:	af00      	add	r7, sp, #0
 801559c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	691b      	ldr	r3, [r3, #16]
 80155a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	685b      	ldr	r3, [r3, #4]
 80155a8:	687a      	ldr	r2, [r7, #4]
 80155aa:	6892      	ldr	r2, [r2, #8]
 80155ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	689b      	ldr	r3, [r3, #8]
 80155b2:	687a      	ldr	r2, [r7, #4]
 80155b4:	6852      	ldr	r2, [r2, #4]
 80155b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	685b      	ldr	r3, [r3, #4]
 80155bc:	687a      	ldr	r2, [r7, #4]
 80155be:	429a      	cmp	r2, r3
 80155c0:	d103      	bne.n	80155ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	689a      	ldr	r2, [r3, #8]
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2200      	movs	r2, #0
 80155ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	1e5a      	subs	r2, r3, #1
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	681b      	ldr	r3, [r3, #0]
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3714      	adds	r7, #20
 80155e2:	46bd      	mov	sp, r7
 80155e4:	bc80      	pop	{r7}
 80155e6:	4770      	bx	lr

080155e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b084      	sub	sp, #16
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d10a      	bne.n	8015612 <xQueueGenericReset+0x2a>
	__asm volatile
 80155fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015600:	f383 8811 	msr	BASEPRI, r3
 8015604:	f3bf 8f6f 	isb	sy
 8015608:	f3bf 8f4f 	dsb	sy
 801560c:	60bb      	str	r3, [r7, #8]
}
 801560e:	bf00      	nop
 8015610:	e7fe      	b.n	8015610 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015612:	f002 fc73 	bl	8017efc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	681a      	ldr	r2, [r3, #0]
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801561e:	68f9      	ldr	r1, [r7, #12]
 8015620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015622:	fb01 f303 	mul.w	r3, r1, r3
 8015626:	441a      	add	r2, r3
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	2200      	movs	r2, #0
 8015630:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	681a      	ldr	r2, [r3, #0]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	681a      	ldr	r2, [r3, #0]
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015642:	3b01      	subs	r3, #1
 8015644:	68f9      	ldr	r1, [r7, #12]
 8015646:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015648:	fb01 f303 	mul.w	r3, r1, r3
 801564c:	441a      	add	r2, r3
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	22ff      	movs	r2, #255	; 0xff
 8015656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	22ff      	movs	r2, #255	; 0xff
 801565e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d114      	bne.n	8015692 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	691b      	ldr	r3, [r3, #16]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d01a      	beq.n	80156a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	3310      	adds	r3, #16
 8015674:	4618      	mov	r0, r3
 8015676:	f001 fc23 	bl	8016ec0 <xTaskRemoveFromEventList>
 801567a:	4603      	mov	r3, r0
 801567c:	2b00      	cmp	r3, #0
 801567e:	d012      	beq.n	80156a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015680:	4b0c      	ldr	r3, [pc, #48]	; (80156b4 <xQueueGenericReset+0xcc>)
 8015682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015686:	601a      	str	r2, [r3, #0]
 8015688:	f3bf 8f4f 	dsb	sy
 801568c:	f3bf 8f6f 	isb	sy
 8015690:	e009      	b.n	80156a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	3310      	adds	r3, #16
 8015696:	4618      	mov	r0, r3
 8015698:	f7ff fef7 	bl	801548a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	3324      	adds	r3, #36	; 0x24
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7ff fef2 	bl	801548a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80156a6:	f002 fc59 	bl	8017f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80156aa:	2301      	movs	r3, #1
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	3710      	adds	r7, #16
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	e000ed04 	.word	0xe000ed04

080156b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b08e      	sub	sp, #56	; 0x38
 80156bc:	af02      	add	r7, sp, #8
 80156be:	60f8      	str	r0, [r7, #12]
 80156c0:	60b9      	str	r1, [r7, #8]
 80156c2:	607a      	str	r2, [r7, #4]
 80156c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d10a      	bne.n	80156e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80156cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156d0:	f383 8811 	msr	BASEPRI, r3
 80156d4:	f3bf 8f6f 	isb	sy
 80156d8:	f3bf 8f4f 	dsb	sy
 80156dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80156de:	bf00      	nop
 80156e0:	e7fe      	b.n	80156e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d10a      	bne.n	80156fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80156e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ec:	f383 8811 	msr	BASEPRI, r3
 80156f0:	f3bf 8f6f 	isb	sy
 80156f4:	f3bf 8f4f 	dsb	sy
 80156f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80156fa:	bf00      	nop
 80156fc:	e7fe      	b.n	80156fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d002      	beq.n	801570a <xQueueGenericCreateStatic+0x52>
 8015704:	68bb      	ldr	r3, [r7, #8]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d001      	beq.n	801570e <xQueueGenericCreateStatic+0x56>
 801570a:	2301      	movs	r3, #1
 801570c:	e000      	b.n	8015710 <xQueueGenericCreateStatic+0x58>
 801570e:	2300      	movs	r3, #0
 8015710:	2b00      	cmp	r3, #0
 8015712:	d10a      	bne.n	801572a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015718:	f383 8811 	msr	BASEPRI, r3
 801571c:	f3bf 8f6f 	isb	sy
 8015720:	f3bf 8f4f 	dsb	sy
 8015724:	623b      	str	r3, [r7, #32]
}
 8015726:	bf00      	nop
 8015728:	e7fe      	b.n	8015728 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d102      	bne.n	8015736 <xQueueGenericCreateStatic+0x7e>
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d101      	bne.n	801573a <xQueueGenericCreateStatic+0x82>
 8015736:	2301      	movs	r3, #1
 8015738:	e000      	b.n	801573c <xQueueGenericCreateStatic+0x84>
 801573a:	2300      	movs	r3, #0
 801573c:	2b00      	cmp	r3, #0
 801573e:	d10a      	bne.n	8015756 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015744:	f383 8811 	msr	BASEPRI, r3
 8015748:	f3bf 8f6f 	isb	sy
 801574c:	f3bf 8f4f 	dsb	sy
 8015750:	61fb      	str	r3, [r7, #28]
}
 8015752:	bf00      	nop
 8015754:	e7fe      	b.n	8015754 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015756:	2348      	movs	r3, #72	; 0x48
 8015758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	2b48      	cmp	r3, #72	; 0x48
 801575e:	d00a      	beq.n	8015776 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015764:	f383 8811 	msr	BASEPRI, r3
 8015768:	f3bf 8f6f 	isb	sy
 801576c:	f3bf 8f4f 	dsb	sy
 8015770:	61bb      	str	r3, [r7, #24]
}
 8015772:	bf00      	nop
 8015774:	e7fe      	b.n	8015774 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015776:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801577e:	2b00      	cmp	r3, #0
 8015780:	d00d      	beq.n	801579e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015784:	2201      	movs	r2, #1
 8015786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801578a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015790:	9300      	str	r3, [sp, #0]
 8015792:	4613      	mov	r3, r2
 8015794:	687a      	ldr	r2, [r7, #4]
 8015796:	68b9      	ldr	r1, [r7, #8]
 8015798:	68f8      	ldr	r0, [r7, #12]
 801579a:	f000 f845 	bl	8015828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3730      	adds	r7, #48	; 0x30
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}

080157a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b08a      	sub	sp, #40	; 0x28
 80157ac:	af02      	add	r7, sp, #8
 80157ae:	60f8      	str	r0, [r7, #12]
 80157b0:	60b9      	str	r1, [r7, #8]
 80157b2:	4613      	mov	r3, r2
 80157b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d10a      	bne.n	80157d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80157bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157c0:	f383 8811 	msr	BASEPRI, r3
 80157c4:	f3bf 8f6f 	isb	sy
 80157c8:	f3bf 8f4f 	dsb	sy
 80157cc:	613b      	str	r3, [r7, #16]
}
 80157ce:	bf00      	nop
 80157d0:	e7fe      	b.n	80157d0 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d102      	bne.n	80157de <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80157d8:	2300      	movs	r3, #0
 80157da:	61fb      	str	r3, [r7, #28]
 80157dc:	e004      	b.n	80157e8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	68ba      	ldr	r2, [r7, #8]
 80157e2:	fb02 f303 	mul.w	r3, r2, r3
 80157e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80157e8:	69fb      	ldr	r3, [r7, #28]
 80157ea:	3348      	adds	r3, #72	; 0x48
 80157ec:	4618      	mov	r0, r3
 80157ee:	f002 fc85 	bl	80180fc <pvPortMalloc>
 80157f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80157f4:	69bb      	ldr	r3, [r7, #24]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d011      	beq.n	801581e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80157fa:	69bb      	ldr	r3, [r7, #24]
 80157fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80157fe:	697b      	ldr	r3, [r7, #20]
 8015800:	3348      	adds	r3, #72	; 0x48
 8015802:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015804:	69bb      	ldr	r3, [r7, #24]
 8015806:	2200      	movs	r2, #0
 8015808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801580c:	79fa      	ldrb	r2, [r7, #7]
 801580e:	69bb      	ldr	r3, [r7, #24]
 8015810:	9300      	str	r3, [sp, #0]
 8015812:	4613      	mov	r3, r2
 8015814:	697a      	ldr	r2, [r7, #20]
 8015816:	68b9      	ldr	r1, [r7, #8]
 8015818:	68f8      	ldr	r0, [r7, #12]
 801581a:	f000 f805 	bl	8015828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801581e:	69bb      	ldr	r3, [r7, #24]
	}
 8015820:	4618      	mov	r0, r3
 8015822:	3720      	adds	r7, #32
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}

08015828 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b084      	sub	sp, #16
 801582c:	af00      	add	r7, sp, #0
 801582e:	60f8      	str	r0, [r7, #12]
 8015830:	60b9      	str	r1, [r7, #8]
 8015832:	607a      	str	r2, [r7, #4]
 8015834:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015836:	68bb      	ldr	r3, [r7, #8]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d103      	bne.n	8015844 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801583c:	69bb      	ldr	r3, [r7, #24]
 801583e:	69ba      	ldr	r2, [r7, #24]
 8015840:	601a      	str	r2, [r3, #0]
 8015842:	e002      	b.n	801584a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015844:	69bb      	ldr	r3, [r7, #24]
 8015846:	687a      	ldr	r2, [r7, #4]
 8015848:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801584a:	69bb      	ldr	r3, [r7, #24]
 801584c:	68fa      	ldr	r2, [r7, #12]
 801584e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015850:	69bb      	ldr	r3, [r7, #24]
 8015852:	68ba      	ldr	r2, [r7, #8]
 8015854:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015856:	2101      	movs	r1, #1
 8015858:	69b8      	ldr	r0, [r7, #24]
 801585a:	f7ff fec5 	bl	80155e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801585e:	bf00      	nop
 8015860:	3710      	adds	r7, #16
 8015862:	46bd      	mov	sp, r7
 8015864:	bd80      	pop	{r7, pc}

08015866 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015866:	b580      	push	{r7, lr}
 8015868:	b082      	sub	sp, #8
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d00e      	beq.n	8015892 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2200      	movs	r2, #0
 8015878:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	2200      	movs	r2, #0
 801587e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2200      	movs	r2, #0
 8015884:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015886:	2300      	movs	r3, #0
 8015888:	2200      	movs	r2, #0
 801588a:	2100      	movs	r1, #0
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f000 f837 	bl	8015900 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015892:	bf00      	nop
 8015894:	3708      	adds	r7, #8
 8015896:	46bd      	mov	sp, r7
 8015898:	bd80      	pop	{r7, pc}

0801589a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801589a:	b580      	push	{r7, lr}
 801589c:	b086      	sub	sp, #24
 801589e:	af00      	add	r7, sp, #0
 80158a0:	4603      	mov	r3, r0
 80158a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80158a4:	2301      	movs	r3, #1
 80158a6:	617b      	str	r3, [r7, #20]
 80158a8:	2300      	movs	r3, #0
 80158aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80158ac:	79fb      	ldrb	r3, [r7, #7]
 80158ae:	461a      	mov	r2, r3
 80158b0:	6939      	ldr	r1, [r7, #16]
 80158b2:	6978      	ldr	r0, [r7, #20]
 80158b4:	f7ff ff78 	bl	80157a8 <xQueueGenericCreate>
 80158b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	f7ff ffd3 	bl	8015866 <prvInitialiseMutex>

		return xNewQueue;
 80158c0:	68fb      	ldr	r3, [r7, #12]
	}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3718      	adds	r7, #24
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}

080158ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80158ca:	b580      	push	{r7, lr}
 80158cc:	b088      	sub	sp, #32
 80158ce:	af02      	add	r7, sp, #8
 80158d0:	4603      	mov	r3, r0
 80158d2:	6039      	str	r1, [r7, #0]
 80158d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80158d6:	2301      	movs	r3, #1
 80158d8:	617b      	str	r3, [r7, #20]
 80158da:	2300      	movs	r3, #0
 80158dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80158de:	79fb      	ldrb	r3, [r7, #7]
 80158e0:	9300      	str	r3, [sp, #0]
 80158e2:	683b      	ldr	r3, [r7, #0]
 80158e4:	2200      	movs	r2, #0
 80158e6:	6939      	ldr	r1, [r7, #16]
 80158e8:	6978      	ldr	r0, [r7, #20]
 80158ea:	f7ff fee5 	bl	80156b8 <xQueueGenericCreateStatic>
 80158ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80158f0:	68f8      	ldr	r0, [r7, #12]
 80158f2:	f7ff ffb8 	bl	8015866 <prvInitialiseMutex>

		return xNewQueue;
 80158f6:	68fb      	ldr	r3, [r7, #12]
	}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3718      	adds	r7, #24
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b08e      	sub	sp, #56	; 0x38
 8015904:	af00      	add	r7, sp, #0
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	607a      	str	r2, [r7, #4]
 801590c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801590e:	2300      	movs	r3, #0
 8015910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015918:	2b00      	cmp	r3, #0
 801591a:	d10a      	bne.n	8015932 <xQueueGenericSend+0x32>
	__asm volatile
 801591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015920:	f383 8811 	msr	BASEPRI, r3
 8015924:	f3bf 8f6f 	isb	sy
 8015928:	f3bf 8f4f 	dsb	sy
 801592c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801592e:	bf00      	nop
 8015930:	e7fe      	b.n	8015930 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d103      	bne.n	8015940 <xQueueGenericSend+0x40>
 8015938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801593c:	2b00      	cmp	r3, #0
 801593e:	d101      	bne.n	8015944 <xQueueGenericSend+0x44>
 8015940:	2301      	movs	r3, #1
 8015942:	e000      	b.n	8015946 <xQueueGenericSend+0x46>
 8015944:	2300      	movs	r3, #0
 8015946:	2b00      	cmp	r3, #0
 8015948:	d10a      	bne.n	8015960 <xQueueGenericSend+0x60>
	__asm volatile
 801594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801594e:	f383 8811 	msr	BASEPRI, r3
 8015952:	f3bf 8f6f 	isb	sy
 8015956:	f3bf 8f4f 	dsb	sy
 801595a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801595c:	bf00      	nop
 801595e:	e7fe      	b.n	801595e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	2b02      	cmp	r3, #2
 8015964:	d103      	bne.n	801596e <xQueueGenericSend+0x6e>
 8015966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801596a:	2b01      	cmp	r3, #1
 801596c:	d101      	bne.n	8015972 <xQueueGenericSend+0x72>
 801596e:	2301      	movs	r3, #1
 8015970:	e000      	b.n	8015974 <xQueueGenericSend+0x74>
 8015972:	2300      	movs	r3, #0
 8015974:	2b00      	cmp	r3, #0
 8015976:	d10a      	bne.n	801598e <xQueueGenericSend+0x8e>
	__asm volatile
 8015978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801597c:	f383 8811 	msr	BASEPRI, r3
 8015980:	f3bf 8f6f 	isb	sy
 8015984:	f3bf 8f4f 	dsb	sy
 8015988:	623b      	str	r3, [r7, #32]
}
 801598a:	bf00      	nop
 801598c:	e7fe      	b.n	801598c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801598e:	f001 fc59 	bl	8017244 <xTaskGetSchedulerState>
 8015992:	4603      	mov	r3, r0
 8015994:	2b00      	cmp	r3, #0
 8015996:	d102      	bne.n	801599e <xQueueGenericSend+0x9e>
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d101      	bne.n	80159a2 <xQueueGenericSend+0xa2>
 801599e:	2301      	movs	r3, #1
 80159a0:	e000      	b.n	80159a4 <xQueueGenericSend+0xa4>
 80159a2:	2300      	movs	r3, #0
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d10a      	bne.n	80159be <xQueueGenericSend+0xbe>
	__asm volatile
 80159a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ac:	f383 8811 	msr	BASEPRI, r3
 80159b0:	f3bf 8f6f 	isb	sy
 80159b4:	f3bf 8f4f 	dsb	sy
 80159b8:	61fb      	str	r3, [r7, #28]
}
 80159ba:	bf00      	nop
 80159bc:	e7fe      	b.n	80159bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80159be:	f002 fa9d 	bl	8017efc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80159c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80159c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d302      	bcc.n	80159d4 <xQueueGenericSend+0xd4>
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	2b02      	cmp	r3, #2
 80159d2:	d129      	bne.n	8015a28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80159d4:	683a      	ldr	r2, [r7, #0]
 80159d6:	68b9      	ldr	r1, [r7, #8]
 80159d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159da:	f000 fc38 	bl	801624e <prvCopyDataToQueue>
 80159de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80159e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d010      	beq.n	8015a0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80159e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ea:	3324      	adds	r3, #36	; 0x24
 80159ec:	4618      	mov	r0, r3
 80159ee:	f001 fa67 	bl	8016ec0 <xTaskRemoveFromEventList>
 80159f2:	4603      	mov	r3, r0
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d013      	beq.n	8015a20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80159f8:	4b3f      	ldr	r3, [pc, #252]	; (8015af8 <xQueueGenericSend+0x1f8>)
 80159fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159fe:	601a      	str	r2, [r3, #0]
 8015a00:	f3bf 8f4f 	dsb	sy
 8015a04:	f3bf 8f6f 	isb	sy
 8015a08:	e00a      	b.n	8015a20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d007      	beq.n	8015a20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015a10:	4b39      	ldr	r3, [pc, #228]	; (8015af8 <xQueueGenericSend+0x1f8>)
 8015a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a16:	601a      	str	r2, [r3, #0]
 8015a18:	f3bf 8f4f 	dsb	sy
 8015a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015a20:	f002 fa9c 	bl	8017f5c <vPortExitCritical>
				return pdPASS;
 8015a24:	2301      	movs	r3, #1
 8015a26:	e063      	b.n	8015af0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d103      	bne.n	8015a36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015a2e:	f002 fa95 	bl	8017f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015a32:	2300      	movs	r3, #0
 8015a34:	e05c      	b.n	8015af0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d106      	bne.n	8015a4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015a3c:	f107 0314 	add.w	r3, r7, #20
 8015a40:	4618      	mov	r0, r3
 8015a42:	f001 fa9f 	bl	8016f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015a46:	2301      	movs	r3, #1
 8015a48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015a4a:	f002 fa87 	bl	8017f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015a4e:	f000 ffef 	bl	8016a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015a52:	f002 fa53 	bl	8017efc <vPortEnterCritical>
 8015a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015a5c:	b25b      	sxtb	r3, r3
 8015a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a62:	d103      	bne.n	8015a6c <xQueueGenericSend+0x16c>
 8015a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a66:	2200      	movs	r2, #0
 8015a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a72:	b25b      	sxtb	r3, r3
 8015a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a78:	d103      	bne.n	8015a82 <xQueueGenericSend+0x182>
 8015a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015a82:	f002 fa6b 	bl	8017f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015a86:	1d3a      	adds	r2, r7, #4
 8015a88:	f107 0314 	add.w	r3, r7, #20
 8015a8c:	4611      	mov	r1, r2
 8015a8e:	4618      	mov	r0, r3
 8015a90:	f001 fa8e 	bl	8016fb0 <xTaskCheckForTimeOut>
 8015a94:	4603      	mov	r3, r0
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d124      	bne.n	8015ae4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015a9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a9c:	f000 fccf 	bl	801643e <prvIsQueueFull>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d018      	beq.n	8015ad8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aa8:	3310      	adds	r3, #16
 8015aaa:	687a      	ldr	r2, [r7, #4]
 8015aac:	4611      	mov	r1, r2
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f001 f9b6 	bl	8016e20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ab6:	f000 fc5a 	bl	801636e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015aba:	f000 ffc7 	bl	8016a4c <xTaskResumeAll>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	f47f af7c 	bne.w	80159be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015ac6:	4b0c      	ldr	r3, [pc, #48]	; (8015af8 <xQueueGenericSend+0x1f8>)
 8015ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015acc:	601a      	str	r2, [r3, #0]
 8015ace:	f3bf 8f4f 	dsb	sy
 8015ad2:	f3bf 8f6f 	isb	sy
 8015ad6:	e772      	b.n	80159be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ada:	f000 fc48 	bl	801636e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015ade:	f000 ffb5 	bl	8016a4c <xTaskResumeAll>
 8015ae2:	e76c      	b.n	80159be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ae6:	f000 fc42 	bl	801636e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015aea:	f000 ffaf 	bl	8016a4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	3738      	adds	r7, #56	; 0x38
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}
 8015af8:	e000ed04 	.word	0xe000ed04

08015afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b08e      	sub	sp, #56	; 0x38
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	60f8      	str	r0, [r7, #12]
 8015b04:	60b9      	str	r1, [r7, #8]
 8015b06:	607a      	str	r2, [r7, #4]
 8015b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d10a      	bne.n	8015b2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b18:	f383 8811 	msr	BASEPRI, r3
 8015b1c:	f3bf 8f6f 	isb	sy
 8015b20:	f3bf 8f4f 	dsb	sy
 8015b24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015b26:	bf00      	nop
 8015b28:	e7fe      	b.n	8015b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d103      	bne.n	8015b38 <xQueueGenericSendFromISR+0x3c>
 8015b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d101      	bne.n	8015b3c <xQueueGenericSendFromISR+0x40>
 8015b38:	2301      	movs	r3, #1
 8015b3a:	e000      	b.n	8015b3e <xQueueGenericSendFromISR+0x42>
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d10a      	bne.n	8015b58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b46:	f383 8811 	msr	BASEPRI, r3
 8015b4a:	f3bf 8f6f 	isb	sy
 8015b4e:	f3bf 8f4f 	dsb	sy
 8015b52:	623b      	str	r3, [r7, #32]
}
 8015b54:	bf00      	nop
 8015b56:	e7fe      	b.n	8015b56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	2b02      	cmp	r3, #2
 8015b5c:	d103      	bne.n	8015b66 <xQueueGenericSendFromISR+0x6a>
 8015b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b62:	2b01      	cmp	r3, #1
 8015b64:	d101      	bne.n	8015b6a <xQueueGenericSendFromISR+0x6e>
 8015b66:	2301      	movs	r3, #1
 8015b68:	e000      	b.n	8015b6c <xQueueGenericSendFromISR+0x70>
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d10a      	bne.n	8015b86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b74:	f383 8811 	msr	BASEPRI, r3
 8015b78:	f3bf 8f6f 	isb	sy
 8015b7c:	f3bf 8f4f 	dsb	sy
 8015b80:	61fb      	str	r3, [r7, #28]
}
 8015b82:	bf00      	nop
 8015b84:	e7fe      	b.n	8015b84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b86:	f002 fa7b 	bl	8018080 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015b8a:	f3ef 8211 	mrs	r2, BASEPRI
 8015b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b92:	f383 8811 	msr	BASEPRI, r3
 8015b96:	f3bf 8f6f 	isb	sy
 8015b9a:	f3bf 8f4f 	dsb	sy
 8015b9e:	61ba      	str	r2, [r7, #24]
 8015ba0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015ba2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d302      	bcc.n	8015bb8 <xQueueGenericSendFromISR+0xbc>
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	2b02      	cmp	r3, #2
 8015bb6:	d12c      	bne.n	8015c12 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015bc2:	683a      	ldr	r2, [r7, #0]
 8015bc4:	68b9      	ldr	r1, [r7, #8]
 8015bc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015bc8:	f000 fb41 	bl	801624e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015bcc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bd4:	d112      	bne.n	8015bfc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d016      	beq.n	8015c0c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be0:	3324      	adds	r3, #36	; 0x24
 8015be2:	4618      	mov	r0, r3
 8015be4:	f001 f96c 	bl	8016ec0 <xTaskRemoveFromEventList>
 8015be8:	4603      	mov	r3, r0
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d00e      	beq.n	8015c0c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d00b      	beq.n	8015c0c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	2201      	movs	r2, #1
 8015bf8:	601a      	str	r2, [r3, #0]
 8015bfa:	e007      	b.n	8015c0c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015bfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015c00:	3301      	adds	r3, #1
 8015c02:	b2db      	uxtb	r3, r3
 8015c04:	b25a      	sxtb	r2, r3
 8015c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015c10:	e001      	b.n	8015c16 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015c12:	2300      	movs	r3, #0
 8015c14:	637b      	str	r3, [r7, #52]	; 0x34
 8015c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c18:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015c20:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015c24:	4618      	mov	r0, r3
 8015c26:	3738      	adds	r7, #56	; 0x38
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd80      	pop	{r7, pc}

08015c2c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b08e      	sub	sp, #56	; 0x38
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d10a      	bne.n	8015c56 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8015c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c44:	f383 8811 	msr	BASEPRI, r3
 8015c48:	f3bf 8f6f 	isb	sy
 8015c4c:	f3bf 8f4f 	dsb	sy
 8015c50:	623b      	str	r3, [r7, #32]
}
 8015c52:	bf00      	nop
 8015c54:	e7fe      	b.n	8015c54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d00a      	beq.n	8015c74 <xQueueGiveFromISR+0x48>
	__asm volatile
 8015c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c62:	f383 8811 	msr	BASEPRI, r3
 8015c66:	f3bf 8f6f 	isb	sy
 8015c6a:	f3bf 8f4f 	dsb	sy
 8015c6e:	61fb      	str	r3, [r7, #28]
}
 8015c70:	bf00      	nop
 8015c72:	e7fe      	b.n	8015c72 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d103      	bne.n	8015c84 <xQueueGiveFromISR+0x58>
 8015c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c7e:	689b      	ldr	r3, [r3, #8]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d101      	bne.n	8015c88 <xQueueGiveFromISR+0x5c>
 8015c84:	2301      	movs	r3, #1
 8015c86:	e000      	b.n	8015c8a <xQueueGiveFromISR+0x5e>
 8015c88:	2300      	movs	r3, #0
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d10a      	bne.n	8015ca4 <xQueueGiveFromISR+0x78>
	__asm volatile
 8015c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c92:	f383 8811 	msr	BASEPRI, r3
 8015c96:	f3bf 8f6f 	isb	sy
 8015c9a:	f3bf 8f4f 	dsb	sy
 8015c9e:	61bb      	str	r3, [r7, #24]
}
 8015ca0:	bf00      	nop
 8015ca2:	e7fe      	b.n	8015ca2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015ca4:	f002 f9ec 	bl	8018080 <vPortValidateInterruptPriority>
	__asm volatile
 8015ca8:	f3ef 8211 	mrs	r2, BASEPRI
 8015cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cb0:	f383 8811 	msr	BASEPRI, r3
 8015cb4:	f3bf 8f6f 	isb	sy
 8015cb8:	f3bf 8f4f 	dsb	sy
 8015cbc:	617a      	str	r2, [r7, #20]
 8015cbe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015cc0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cc8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d22b      	bcs.n	8015d2c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce0:	1c5a      	adds	r2, r3, #1
 8015ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015ce6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cee:	d112      	bne.n	8015d16 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d016      	beq.n	8015d26 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfa:	3324      	adds	r3, #36	; 0x24
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f001 f8df 	bl	8016ec0 <xTaskRemoveFromEventList>
 8015d02:	4603      	mov	r3, r0
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d00e      	beq.n	8015d26 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d00b      	beq.n	8015d26 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	2201      	movs	r2, #1
 8015d12:	601a      	str	r2, [r3, #0]
 8015d14:	e007      	b.n	8015d26 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	b2db      	uxtb	r3, r3
 8015d1e:	b25a      	sxtb	r2, r3
 8015d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015d26:	2301      	movs	r3, #1
 8015d28:	637b      	str	r3, [r7, #52]	; 0x34
 8015d2a:	e001      	b.n	8015d30 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8015d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d32:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	f383 8811 	msr	BASEPRI, r3
}
 8015d3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3738      	adds	r7, #56	; 0x38
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}
	...

08015d48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b08c      	sub	sp, #48	; 0x30
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	60f8      	str	r0, [r7, #12]
 8015d50:	60b9      	str	r1, [r7, #8]
 8015d52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015d54:	2300      	movs	r3, #0
 8015d56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d10a      	bne.n	8015d78 <xQueueReceive+0x30>
	__asm volatile
 8015d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d66:	f383 8811 	msr	BASEPRI, r3
 8015d6a:	f3bf 8f6f 	isb	sy
 8015d6e:	f3bf 8f4f 	dsb	sy
 8015d72:	623b      	str	r3, [r7, #32]
}
 8015d74:	bf00      	nop
 8015d76:	e7fe      	b.n	8015d76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d78:	68bb      	ldr	r3, [r7, #8]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d103      	bne.n	8015d86 <xQueueReceive+0x3e>
 8015d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d101      	bne.n	8015d8a <xQueueReceive+0x42>
 8015d86:	2301      	movs	r3, #1
 8015d88:	e000      	b.n	8015d8c <xQueueReceive+0x44>
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d10a      	bne.n	8015da6 <xQueueReceive+0x5e>
	__asm volatile
 8015d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d94:	f383 8811 	msr	BASEPRI, r3
 8015d98:	f3bf 8f6f 	isb	sy
 8015d9c:	f3bf 8f4f 	dsb	sy
 8015da0:	61fb      	str	r3, [r7, #28]
}
 8015da2:	bf00      	nop
 8015da4:	e7fe      	b.n	8015da4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015da6:	f001 fa4d 	bl	8017244 <xTaskGetSchedulerState>
 8015daa:	4603      	mov	r3, r0
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d102      	bne.n	8015db6 <xQueueReceive+0x6e>
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d101      	bne.n	8015dba <xQueueReceive+0x72>
 8015db6:	2301      	movs	r3, #1
 8015db8:	e000      	b.n	8015dbc <xQueueReceive+0x74>
 8015dba:	2300      	movs	r3, #0
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d10a      	bne.n	8015dd6 <xQueueReceive+0x8e>
	__asm volatile
 8015dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dc4:	f383 8811 	msr	BASEPRI, r3
 8015dc8:	f3bf 8f6f 	isb	sy
 8015dcc:	f3bf 8f4f 	dsb	sy
 8015dd0:	61bb      	str	r3, [r7, #24]
}
 8015dd2:	bf00      	nop
 8015dd4:	e7fe      	b.n	8015dd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015dd6:	f002 f891 	bl	8017efc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d01f      	beq.n	8015e26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015de6:	68b9      	ldr	r1, [r7, #8]
 8015de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dea:	f000 fa9a 	bl	8016322 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df0:	1e5a      	subs	r2, r3, #1
 8015df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df8:	691b      	ldr	r3, [r3, #16]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d00f      	beq.n	8015e1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e00:	3310      	adds	r3, #16
 8015e02:	4618      	mov	r0, r3
 8015e04:	f001 f85c 	bl	8016ec0 <xTaskRemoveFromEventList>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d007      	beq.n	8015e1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015e0e:	4b3d      	ldr	r3, [pc, #244]	; (8015f04 <xQueueReceive+0x1bc>)
 8015e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e14:	601a      	str	r2, [r3, #0]
 8015e16:	f3bf 8f4f 	dsb	sy
 8015e1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015e1e:	f002 f89d 	bl	8017f5c <vPortExitCritical>
				return pdPASS;
 8015e22:	2301      	movs	r3, #1
 8015e24:	e069      	b.n	8015efa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d103      	bne.n	8015e34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015e2c:	f002 f896 	bl	8017f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015e30:	2300      	movs	r3, #0
 8015e32:	e062      	b.n	8015efa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d106      	bne.n	8015e48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015e3a:	f107 0310 	add.w	r3, r7, #16
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f001 f8a0 	bl	8016f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015e44:	2301      	movs	r3, #1
 8015e46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015e48:	f002 f888 	bl	8017f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015e4c:	f000 fdf0 	bl	8016a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015e50:	f002 f854 	bl	8017efc <vPortEnterCritical>
 8015e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015e5a:	b25b      	sxtb	r3, r3
 8015e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e60:	d103      	bne.n	8015e6a <xQueueReceive+0x122>
 8015e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e64:	2200      	movs	r2, #0
 8015e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e70:	b25b      	sxtb	r3, r3
 8015e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e76:	d103      	bne.n	8015e80 <xQueueReceive+0x138>
 8015e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015e80:	f002 f86c 	bl	8017f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015e84:	1d3a      	adds	r2, r7, #4
 8015e86:	f107 0310 	add.w	r3, r7, #16
 8015e8a:	4611      	mov	r1, r2
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f001 f88f 	bl	8016fb0 <xTaskCheckForTimeOut>
 8015e92:	4603      	mov	r3, r0
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d123      	bne.n	8015ee0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e9a:	f000 faba 	bl	8016412 <prvIsQueueEmpty>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d017      	beq.n	8015ed4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea6:	3324      	adds	r3, #36	; 0x24
 8015ea8:	687a      	ldr	r2, [r7, #4]
 8015eaa:	4611      	mov	r1, r2
 8015eac:	4618      	mov	r0, r3
 8015eae:	f000 ffb7 	bl	8016e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eb4:	f000 fa5b 	bl	801636e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015eb8:	f000 fdc8 	bl	8016a4c <xTaskResumeAll>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d189      	bne.n	8015dd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8015ec2:	4b10      	ldr	r3, [pc, #64]	; (8015f04 <xQueueReceive+0x1bc>)
 8015ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ec8:	601a      	str	r2, [r3, #0]
 8015eca:	f3bf 8f4f 	dsb	sy
 8015ece:	f3bf 8f6f 	isb	sy
 8015ed2:	e780      	b.n	8015dd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ed6:	f000 fa4a 	bl	801636e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015eda:	f000 fdb7 	bl	8016a4c <xTaskResumeAll>
 8015ede:	e77a      	b.n	8015dd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ee2:	f000 fa44 	bl	801636e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015ee6:	f000 fdb1 	bl	8016a4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eec:	f000 fa91 	bl	8016412 <prvIsQueueEmpty>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	f43f af6f 	beq.w	8015dd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015ef8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015efa:	4618      	mov	r0, r3
 8015efc:	3730      	adds	r7, #48	; 0x30
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}
 8015f02:	bf00      	nop
 8015f04:	e000ed04 	.word	0xe000ed04

08015f08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b08e      	sub	sp, #56	; 0x38
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8015f12:	2300      	movs	r3, #0
 8015f14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d10a      	bne.n	8015f3a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f28:	f383 8811 	msr	BASEPRI, r3
 8015f2c:	f3bf 8f6f 	isb	sy
 8015f30:	f3bf 8f4f 	dsb	sy
 8015f34:	623b      	str	r3, [r7, #32]
}
 8015f36:	bf00      	nop
 8015f38:	e7fe      	b.n	8015f38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d00a      	beq.n	8015f58 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8015f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f46:	f383 8811 	msr	BASEPRI, r3
 8015f4a:	f3bf 8f6f 	isb	sy
 8015f4e:	f3bf 8f4f 	dsb	sy
 8015f52:	61fb      	str	r3, [r7, #28]
}
 8015f54:	bf00      	nop
 8015f56:	e7fe      	b.n	8015f56 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015f58:	f001 f974 	bl	8017244 <xTaskGetSchedulerState>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d102      	bne.n	8015f68 <xQueueSemaphoreTake+0x60>
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d101      	bne.n	8015f6c <xQueueSemaphoreTake+0x64>
 8015f68:	2301      	movs	r3, #1
 8015f6a:	e000      	b.n	8015f6e <xQueueSemaphoreTake+0x66>
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d10a      	bne.n	8015f88 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8015f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f76:	f383 8811 	msr	BASEPRI, r3
 8015f7a:	f3bf 8f6f 	isb	sy
 8015f7e:	f3bf 8f4f 	dsb	sy
 8015f82:	61bb      	str	r3, [r7, #24]
}
 8015f84:	bf00      	nop
 8015f86:	e7fe      	b.n	8015f86 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015f88:	f001 ffb8 	bl	8017efc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f90:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d024      	beq.n	8015fe2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f9a:	1e5a      	subs	r2, r3, #1
 8015f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f9e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d104      	bne.n	8015fb2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015fa8:	f001 fb0a 	bl	80175c0 <pvTaskIncrementMutexHeldCount>
 8015fac:	4602      	mov	r2, r0
 8015fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb4:	691b      	ldr	r3, [r3, #16]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d00f      	beq.n	8015fda <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fbc:	3310      	adds	r3, #16
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f000 ff7e 	bl	8016ec0 <xTaskRemoveFromEventList>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d007      	beq.n	8015fda <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015fca:	4b54      	ldr	r3, [pc, #336]	; (801611c <xQueueSemaphoreTake+0x214>)
 8015fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fd0:	601a      	str	r2, [r3, #0]
 8015fd2:	f3bf 8f4f 	dsb	sy
 8015fd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015fda:	f001 ffbf 	bl	8017f5c <vPortExitCritical>
				return pdPASS;
 8015fde:	2301      	movs	r3, #1
 8015fe0:	e097      	b.n	8016112 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015fe2:	683b      	ldr	r3, [r7, #0]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d111      	bne.n	801600c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d00a      	beq.n	8016004 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8015fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ff2:	f383 8811 	msr	BASEPRI, r3
 8015ff6:	f3bf 8f6f 	isb	sy
 8015ffa:	f3bf 8f4f 	dsb	sy
 8015ffe:	617b      	str	r3, [r7, #20]
}
 8016000:	bf00      	nop
 8016002:	e7fe      	b.n	8016002 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016004:	f001 ffaa 	bl	8017f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016008:	2300      	movs	r3, #0
 801600a:	e082      	b.n	8016112 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801600e:	2b00      	cmp	r3, #0
 8016010:	d106      	bne.n	8016020 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016012:	f107 030c 	add.w	r3, r7, #12
 8016016:	4618      	mov	r0, r3
 8016018:	f000 ffb4 	bl	8016f84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801601c:	2301      	movs	r3, #1
 801601e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016020:	f001 ff9c 	bl	8017f5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016024:	f000 fd04 	bl	8016a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016028:	f001 ff68 	bl	8017efc <vPortEnterCritical>
 801602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801602e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016032:	b25b      	sxtb	r3, r3
 8016034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016038:	d103      	bne.n	8016042 <xQueueSemaphoreTake+0x13a>
 801603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801603c:	2200      	movs	r2, #0
 801603e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016048:	b25b      	sxtb	r3, r3
 801604a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801604e:	d103      	bne.n	8016058 <xQueueSemaphoreTake+0x150>
 8016050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016052:	2200      	movs	r2, #0
 8016054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016058:	f001 ff80 	bl	8017f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801605c:	463a      	mov	r2, r7
 801605e:	f107 030c 	add.w	r3, r7, #12
 8016062:	4611      	mov	r1, r2
 8016064:	4618      	mov	r0, r3
 8016066:	f000 ffa3 	bl	8016fb0 <xTaskCheckForTimeOut>
 801606a:	4603      	mov	r3, r0
 801606c:	2b00      	cmp	r3, #0
 801606e:	d132      	bne.n	80160d6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016070:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016072:	f000 f9ce 	bl	8016412 <prvIsQueueEmpty>
 8016076:	4603      	mov	r3, r0
 8016078:	2b00      	cmp	r3, #0
 801607a:	d026      	beq.n	80160ca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d109      	bne.n	8016098 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016084:	f001 ff3a 	bl	8017efc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801608a:	689b      	ldr	r3, [r3, #8]
 801608c:	4618      	mov	r0, r3
 801608e:	f001 f8f7 	bl	8017280 <xTaskPriorityInherit>
 8016092:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016094:	f001 ff62 	bl	8017f5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609a:	3324      	adds	r3, #36	; 0x24
 801609c:	683a      	ldr	r2, [r7, #0]
 801609e:	4611      	mov	r1, r2
 80160a0:	4618      	mov	r0, r3
 80160a2:	f000 febd 	bl	8016e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80160a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80160a8:	f000 f961 	bl	801636e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80160ac:	f000 fcce 	bl	8016a4c <xTaskResumeAll>
 80160b0:	4603      	mov	r3, r0
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	f47f af68 	bne.w	8015f88 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80160b8:	4b18      	ldr	r3, [pc, #96]	; (801611c <xQueueSemaphoreTake+0x214>)
 80160ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160be:	601a      	str	r2, [r3, #0]
 80160c0:	f3bf 8f4f 	dsb	sy
 80160c4:	f3bf 8f6f 	isb	sy
 80160c8:	e75e      	b.n	8015f88 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80160ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80160cc:	f000 f94f 	bl	801636e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80160d0:	f000 fcbc 	bl	8016a4c <xTaskResumeAll>
 80160d4:	e758      	b.n	8015f88 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80160d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80160d8:	f000 f949 	bl	801636e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80160dc:	f000 fcb6 	bl	8016a4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80160e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80160e2:	f000 f996 	bl	8016412 <prvIsQueueEmpty>
 80160e6:	4603      	mov	r3, r0
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	f43f af4d 	beq.w	8015f88 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80160ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d00d      	beq.n	8016110 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80160f4:	f001 ff02 	bl	8017efc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80160f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80160fa:	f000 f891 	bl	8016220 <prvGetDisinheritPriorityAfterTimeout>
 80160fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016102:	689b      	ldr	r3, [r3, #8]
 8016104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016106:	4618      	mov	r0, r3
 8016108:	f001 f9c0 	bl	801748c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801610c:	f001 ff26 	bl	8017f5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016110:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8016112:	4618      	mov	r0, r3
 8016114:	3738      	adds	r7, #56	; 0x38
 8016116:	46bd      	mov	sp, r7
 8016118:	bd80      	pop	{r7, pc}
 801611a:	bf00      	nop
 801611c:	e000ed04 	.word	0xe000ed04

08016120 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b08e      	sub	sp, #56	; 0x38
 8016124:	af00      	add	r7, sp, #0
 8016126:	60f8      	str	r0, [r7, #12]
 8016128:	60b9      	str	r1, [r7, #8]
 801612a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016132:	2b00      	cmp	r3, #0
 8016134:	d10a      	bne.n	801614c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801613a:	f383 8811 	msr	BASEPRI, r3
 801613e:	f3bf 8f6f 	isb	sy
 8016142:	f3bf 8f4f 	dsb	sy
 8016146:	623b      	str	r3, [r7, #32]
}
 8016148:	bf00      	nop
 801614a:	e7fe      	b.n	801614a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d103      	bne.n	801615a <xQueueReceiveFromISR+0x3a>
 8016152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016156:	2b00      	cmp	r3, #0
 8016158:	d101      	bne.n	801615e <xQueueReceiveFromISR+0x3e>
 801615a:	2301      	movs	r3, #1
 801615c:	e000      	b.n	8016160 <xQueueReceiveFromISR+0x40>
 801615e:	2300      	movs	r3, #0
 8016160:	2b00      	cmp	r3, #0
 8016162:	d10a      	bne.n	801617a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016168:	f383 8811 	msr	BASEPRI, r3
 801616c:	f3bf 8f6f 	isb	sy
 8016170:	f3bf 8f4f 	dsb	sy
 8016174:	61fb      	str	r3, [r7, #28]
}
 8016176:	bf00      	nop
 8016178:	e7fe      	b.n	8016178 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801617a:	f001 ff81 	bl	8018080 <vPortValidateInterruptPriority>
	__asm volatile
 801617e:	f3ef 8211 	mrs	r2, BASEPRI
 8016182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016186:	f383 8811 	msr	BASEPRI, r3
 801618a:	f3bf 8f6f 	isb	sy
 801618e:	f3bf 8f4f 	dsb	sy
 8016192:	61ba      	str	r2, [r7, #24]
 8016194:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016196:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016198:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801619e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80161a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d02f      	beq.n	8016206 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80161a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80161ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80161b0:	68b9      	ldr	r1, [r7, #8]
 80161b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161b4:	f000 f8b5 	bl	8016322 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80161b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ba:	1e5a      	subs	r2, r3, #1
 80161bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80161c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80161c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161c8:	d112      	bne.n	80161f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80161ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161cc:	691b      	ldr	r3, [r3, #16]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d016      	beq.n	8016200 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80161d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d4:	3310      	adds	r3, #16
 80161d6:	4618      	mov	r0, r3
 80161d8:	f000 fe72 	bl	8016ec0 <xTaskRemoveFromEventList>
 80161dc:	4603      	mov	r3, r0
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d00e      	beq.n	8016200 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d00b      	beq.n	8016200 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2201      	movs	r2, #1
 80161ec:	601a      	str	r2, [r3, #0]
 80161ee:	e007      	b.n	8016200 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80161f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161f4:	3301      	adds	r3, #1
 80161f6:	b2db      	uxtb	r3, r3
 80161f8:	b25a      	sxtb	r2, r3
 80161fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016200:	2301      	movs	r3, #1
 8016202:	637b      	str	r3, [r7, #52]	; 0x34
 8016204:	e001      	b.n	801620a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016206:	2300      	movs	r3, #0
 8016208:	637b      	str	r3, [r7, #52]	; 0x34
 801620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	f383 8811 	msr	BASEPRI, r3
}
 8016214:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016218:	4618      	mov	r0, r3
 801621a:	3738      	adds	r7, #56	; 0x38
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016220:	b480      	push	{r7}
 8016222:	b085      	sub	sp, #20
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801622c:	2b00      	cmp	r3, #0
 801622e:	d006      	beq.n	801623e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	f1c3 0307 	rsb	r3, r3, #7
 801623a:	60fb      	str	r3, [r7, #12]
 801623c:	e001      	b.n	8016242 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801623e:	2300      	movs	r3, #0
 8016240:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016242:	68fb      	ldr	r3, [r7, #12]
	}
 8016244:	4618      	mov	r0, r3
 8016246:	3714      	adds	r7, #20
 8016248:	46bd      	mov	sp, r7
 801624a:	bc80      	pop	{r7}
 801624c:	4770      	bx	lr

0801624e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801624e:	b580      	push	{r7, lr}
 8016250:	b086      	sub	sp, #24
 8016252:	af00      	add	r7, sp, #0
 8016254:	60f8      	str	r0, [r7, #12]
 8016256:	60b9      	str	r1, [r7, #8]
 8016258:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801625a:	2300      	movs	r3, #0
 801625c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016262:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016268:	2b00      	cmp	r3, #0
 801626a:	d10d      	bne.n	8016288 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d14d      	bne.n	8016310 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	689b      	ldr	r3, [r3, #8]
 8016278:	4618      	mov	r0, r3
 801627a:	f001 f881 	bl	8017380 <xTaskPriorityDisinherit>
 801627e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	2200      	movs	r2, #0
 8016284:	609a      	str	r2, [r3, #8]
 8016286:	e043      	b.n	8016310 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d119      	bne.n	80162c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	6858      	ldr	r0, [r3, #4]
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016296:	461a      	mov	r2, r3
 8016298:	68b9      	ldr	r1, [r7, #8]
 801629a:	f002 fd77 	bl	8018d8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	685a      	ldr	r2, [r3, #4]
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162a6:	441a      	add	r2, r3
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	685a      	ldr	r2, [r3, #4]
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	689b      	ldr	r3, [r3, #8]
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d32b      	bcc.n	8016310 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	681a      	ldr	r2, [r3, #0]
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	605a      	str	r2, [r3, #4]
 80162c0:	e026      	b.n	8016310 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	68d8      	ldr	r0, [r3, #12]
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162ca:	461a      	mov	r2, r3
 80162cc:	68b9      	ldr	r1, [r7, #8]
 80162ce:	f002 fd5d 	bl	8018d8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	68da      	ldr	r2, [r3, #12]
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162da:	425b      	negs	r3, r3
 80162dc:	441a      	add	r2, r3
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	68da      	ldr	r2, [r3, #12]
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	429a      	cmp	r2, r3
 80162ec:	d207      	bcs.n	80162fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	689a      	ldr	r2, [r3, #8]
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162f6:	425b      	negs	r3, r3
 80162f8:	441a      	add	r2, r3
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	2b02      	cmp	r3, #2
 8016302:	d105      	bne.n	8016310 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d002      	beq.n	8016310 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801630a:	693b      	ldr	r3, [r7, #16]
 801630c:	3b01      	subs	r3, #1
 801630e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016310:	693b      	ldr	r3, [r7, #16]
 8016312:	1c5a      	adds	r2, r3, #1
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016318:	697b      	ldr	r3, [r7, #20]
}
 801631a:	4618      	mov	r0, r3
 801631c:	3718      	adds	r7, #24
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}

08016322 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016322:	b580      	push	{r7, lr}
 8016324:	b082      	sub	sp, #8
 8016326:	af00      	add	r7, sp, #0
 8016328:	6078      	str	r0, [r7, #4]
 801632a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016330:	2b00      	cmp	r3, #0
 8016332:	d018      	beq.n	8016366 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	68da      	ldr	r2, [r3, #12]
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801633c:	441a      	add	r2, r3
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	68da      	ldr	r2, [r3, #12]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	689b      	ldr	r3, [r3, #8]
 801634a:	429a      	cmp	r2, r3
 801634c:	d303      	bcc.n	8016356 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681a      	ldr	r2, [r3, #0]
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	68d9      	ldr	r1, [r3, #12]
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801635e:	461a      	mov	r2, r3
 8016360:	6838      	ldr	r0, [r7, #0]
 8016362:	f002 fd13 	bl	8018d8c <memcpy>
	}
}
 8016366:	bf00      	nop
 8016368:	3708      	adds	r7, #8
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}

0801636e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801636e:	b580      	push	{r7, lr}
 8016370:	b084      	sub	sp, #16
 8016372:	af00      	add	r7, sp, #0
 8016374:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016376:	f001 fdc1 	bl	8017efc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016380:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016382:	e011      	b.n	80163a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016388:	2b00      	cmp	r3, #0
 801638a:	d012      	beq.n	80163b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	3324      	adds	r3, #36	; 0x24
 8016390:	4618      	mov	r0, r3
 8016392:	f000 fd95 	bl	8016ec0 <xTaskRemoveFromEventList>
 8016396:	4603      	mov	r3, r0
 8016398:	2b00      	cmp	r3, #0
 801639a:	d001      	beq.n	80163a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801639c:	f000 fe6a 	bl	8017074 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80163a0:	7bfb      	ldrb	r3, [r7, #15]
 80163a2:	3b01      	subs	r3, #1
 80163a4:	b2db      	uxtb	r3, r3
 80163a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80163a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	dce9      	bgt.n	8016384 <prvUnlockQueue+0x16>
 80163b0:	e000      	b.n	80163b4 <prvUnlockQueue+0x46>
					break;
 80163b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	22ff      	movs	r2, #255	; 0xff
 80163b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80163bc:	f001 fdce 	bl	8017f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80163c0:	f001 fd9c 	bl	8017efc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80163cc:	e011      	b.n	80163f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	691b      	ldr	r3, [r3, #16]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d012      	beq.n	80163fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	3310      	adds	r3, #16
 80163da:	4618      	mov	r0, r3
 80163dc:	f000 fd70 	bl	8016ec0 <xTaskRemoveFromEventList>
 80163e0:	4603      	mov	r3, r0
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d001      	beq.n	80163ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80163e6:	f000 fe45 	bl	8017074 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80163ea:	7bbb      	ldrb	r3, [r7, #14]
 80163ec:	3b01      	subs	r3, #1
 80163ee:	b2db      	uxtb	r3, r3
 80163f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80163f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	dce9      	bgt.n	80163ce <prvUnlockQueue+0x60>
 80163fa:	e000      	b.n	80163fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80163fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	22ff      	movs	r2, #255	; 0xff
 8016402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016406:	f001 fda9 	bl	8017f5c <vPortExitCritical>
}
 801640a:	bf00      	nop
 801640c:	3710      	adds	r7, #16
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}

08016412 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016412:	b580      	push	{r7, lr}
 8016414:	b084      	sub	sp, #16
 8016416:	af00      	add	r7, sp, #0
 8016418:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801641a:	f001 fd6f 	bl	8017efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016422:	2b00      	cmp	r3, #0
 8016424:	d102      	bne.n	801642c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016426:	2301      	movs	r3, #1
 8016428:	60fb      	str	r3, [r7, #12]
 801642a:	e001      	b.n	8016430 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801642c:	2300      	movs	r3, #0
 801642e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016430:	f001 fd94 	bl	8017f5c <vPortExitCritical>

	return xReturn;
 8016434:	68fb      	ldr	r3, [r7, #12]
}
 8016436:	4618      	mov	r0, r3
 8016438:	3710      	adds	r7, #16
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}

0801643e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801643e:	b580      	push	{r7, lr}
 8016440:	b084      	sub	sp, #16
 8016442:	af00      	add	r7, sp, #0
 8016444:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016446:	f001 fd59 	bl	8017efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016452:	429a      	cmp	r2, r3
 8016454:	d102      	bne.n	801645c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016456:	2301      	movs	r3, #1
 8016458:	60fb      	str	r3, [r7, #12]
 801645a:	e001      	b.n	8016460 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801645c:	2300      	movs	r3, #0
 801645e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016460:	f001 fd7c 	bl	8017f5c <vPortExitCritical>

	return xReturn;
 8016464:	68fb      	ldr	r3, [r7, #12]
}
 8016466:	4618      	mov	r0, r3
 8016468:	3710      	adds	r7, #16
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}
	...

08016470 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016470:	b480      	push	{r7}
 8016472:	b085      	sub	sp, #20
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801647a:	2300      	movs	r3, #0
 801647c:	60fb      	str	r3, [r7, #12]
 801647e:	e014      	b.n	80164aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016480:	4a0e      	ldr	r2, [pc, #56]	; (80164bc <vQueueAddToRegistry+0x4c>)
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d10b      	bne.n	80164a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801648c:	490b      	ldr	r1, [pc, #44]	; (80164bc <vQueueAddToRegistry+0x4c>)
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	683a      	ldr	r2, [r7, #0]
 8016492:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016496:	4a09      	ldr	r2, [pc, #36]	; (80164bc <vQueueAddToRegistry+0x4c>)
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	00db      	lsls	r3, r3, #3
 801649c:	4413      	add	r3, r2
 801649e:	687a      	ldr	r2, [r7, #4]
 80164a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80164a2:	e006      	b.n	80164b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	3301      	adds	r3, #1
 80164a8:	60fb      	str	r3, [r7, #12]
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	2b07      	cmp	r3, #7
 80164ae:	d9e7      	bls.n	8016480 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80164b0:	bf00      	nop
 80164b2:	bf00      	nop
 80164b4:	3714      	adds	r7, #20
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bc80      	pop	{r7}
 80164ba:	4770      	bx	lr
 80164bc:	20002324 	.word	0x20002324

080164c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b086      	sub	sp, #24
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	60f8      	str	r0, [r7, #12]
 80164c8:	60b9      	str	r1, [r7, #8]
 80164ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80164d0:	f001 fd14 	bl	8017efc <vPortEnterCritical>
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80164da:	b25b      	sxtb	r3, r3
 80164dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164e0:	d103      	bne.n	80164ea <vQueueWaitForMessageRestricted+0x2a>
 80164e2:	697b      	ldr	r3, [r7, #20]
 80164e4:	2200      	movs	r2, #0
 80164e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80164ea:	697b      	ldr	r3, [r7, #20]
 80164ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80164f0:	b25b      	sxtb	r3, r3
 80164f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164f6:	d103      	bne.n	8016500 <vQueueWaitForMessageRestricted+0x40>
 80164f8:	697b      	ldr	r3, [r7, #20]
 80164fa:	2200      	movs	r2, #0
 80164fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016500:	f001 fd2c 	bl	8017f5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016504:	697b      	ldr	r3, [r7, #20]
 8016506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016508:	2b00      	cmp	r3, #0
 801650a:	d106      	bne.n	801651a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	3324      	adds	r3, #36	; 0x24
 8016510:	687a      	ldr	r2, [r7, #4]
 8016512:	68b9      	ldr	r1, [r7, #8]
 8016514:	4618      	mov	r0, r3
 8016516:	f000 fca7 	bl	8016e68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801651a:	6978      	ldr	r0, [r7, #20]
 801651c:	f7ff ff27 	bl	801636e <prvUnlockQueue>
	}
 8016520:	bf00      	nop
 8016522:	3718      	adds	r7, #24
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}

08016528 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016528:	b580      	push	{r7, lr}
 801652a:	b08e      	sub	sp, #56	; 0x38
 801652c:	af04      	add	r7, sp, #16
 801652e:	60f8      	str	r0, [r7, #12]
 8016530:	60b9      	str	r1, [r7, #8]
 8016532:	607a      	str	r2, [r7, #4]
 8016534:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016538:	2b00      	cmp	r3, #0
 801653a:	d10a      	bne.n	8016552 <xTaskCreateStatic+0x2a>
	__asm volatile
 801653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016540:	f383 8811 	msr	BASEPRI, r3
 8016544:	f3bf 8f6f 	isb	sy
 8016548:	f3bf 8f4f 	dsb	sy
 801654c:	623b      	str	r3, [r7, #32]
}
 801654e:	bf00      	nop
 8016550:	e7fe      	b.n	8016550 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016554:	2b00      	cmp	r3, #0
 8016556:	d10a      	bne.n	801656e <xTaskCreateStatic+0x46>
	__asm volatile
 8016558:	f04f 0350 	mov.w	r3, #80	; 0x50
 801655c:	f383 8811 	msr	BASEPRI, r3
 8016560:	f3bf 8f6f 	isb	sy
 8016564:	f3bf 8f4f 	dsb	sy
 8016568:	61fb      	str	r3, [r7, #28]
}
 801656a:	bf00      	nop
 801656c:	e7fe      	b.n	801656c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801656e:	f44f 73bc 	mov.w	r3, #376	; 0x178
 8016572:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016574:	693b      	ldr	r3, [r7, #16]
 8016576:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 801657a:	d00a      	beq.n	8016592 <xTaskCreateStatic+0x6a>
	__asm volatile
 801657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016580:	f383 8811 	msr	BASEPRI, r3
 8016584:	f3bf 8f6f 	isb	sy
 8016588:	f3bf 8f4f 	dsb	sy
 801658c:	61bb      	str	r3, [r7, #24]
}
 801658e:	bf00      	nop
 8016590:	e7fe      	b.n	8016590 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016592:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016596:	2b00      	cmp	r3, #0
 8016598:	d01e      	beq.n	80165d8 <xTaskCreateStatic+0xb0>
 801659a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801659c:	2b00      	cmp	r3, #0
 801659e:	d01b      	beq.n	80165d8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80165a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80165a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80165a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80165aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ac:	2202      	movs	r2, #2
 80165ae:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80165b2:	2300      	movs	r3, #0
 80165b4:	9303      	str	r3, [sp, #12]
 80165b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b8:	9302      	str	r3, [sp, #8]
 80165ba:	f107 0314 	add.w	r3, r7, #20
 80165be:	9301      	str	r3, [sp, #4]
 80165c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c2:	9300      	str	r3, [sp, #0]
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	687a      	ldr	r2, [r7, #4]
 80165c8:	68b9      	ldr	r1, [r7, #8]
 80165ca:	68f8      	ldr	r0, [r7, #12]
 80165cc:	f000 f852 	bl	8016674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80165d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165d2:	f000 f91f 	bl	8016814 <prvAddNewTaskToReadyList>
 80165d6:	e001      	b.n	80165dc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80165d8:	2300      	movs	r3, #0
 80165da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80165dc:	697b      	ldr	r3, [r7, #20]
	}
 80165de:	4618      	mov	r0, r3
 80165e0:	3728      	adds	r7, #40	; 0x28
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}

080165e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80165e6:	b580      	push	{r7, lr}
 80165e8:	b08c      	sub	sp, #48	; 0x30
 80165ea:	af04      	add	r7, sp, #16
 80165ec:	60f8      	str	r0, [r7, #12]
 80165ee:	60b9      	str	r1, [r7, #8]
 80165f0:	603b      	str	r3, [r7, #0]
 80165f2:	4613      	mov	r3, r2
 80165f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80165f6:	88fb      	ldrh	r3, [r7, #6]
 80165f8:	009b      	lsls	r3, r3, #2
 80165fa:	4618      	mov	r0, r3
 80165fc:	f001 fd7e 	bl	80180fc <pvPortMalloc>
 8016600:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d00f      	beq.n	8016628 <xTaskCreate+0x42>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016608:	f44f 70bc 	mov.w	r0, #376	; 0x178
 801660c:	f001 fd76 	bl	80180fc <pvPortMalloc>
 8016610:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016612:	69fb      	ldr	r3, [r7, #28]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d003      	beq.n	8016620 <xTaskCreate+0x3a>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016618:	69fb      	ldr	r3, [r7, #28]
 801661a:	697a      	ldr	r2, [r7, #20]
 801661c:	631a      	str	r2, [r3, #48]	; 0x30
 801661e:	e005      	b.n	801662c <xTaskCreate+0x46>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016620:	6978      	ldr	r0, [r7, #20]
 8016622:	f001 fe35 	bl	8018290 <vPortFree>
 8016626:	e001      	b.n	801662c <xTaskCreate+0x46>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016628:	2300      	movs	r3, #0
 801662a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801662c:	69fb      	ldr	r3, [r7, #28]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d017      	beq.n	8016662 <xTaskCreate+0x7c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016632:	69fb      	ldr	r3, [r7, #28]
 8016634:	2200      	movs	r2, #0
 8016636:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801663a:	88fa      	ldrh	r2, [r7, #6]
 801663c:	2300      	movs	r3, #0
 801663e:	9303      	str	r3, [sp, #12]
 8016640:	69fb      	ldr	r3, [r7, #28]
 8016642:	9302      	str	r3, [sp, #8]
 8016644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016646:	9301      	str	r3, [sp, #4]
 8016648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801664a:	9300      	str	r3, [sp, #0]
 801664c:	683b      	ldr	r3, [r7, #0]
 801664e:	68b9      	ldr	r1, [r7, #8]
 8016650:	68f8      	ldr	r0, [r7, #12]
 8016652:	f000 f80f 	bl	8016674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016656:	69f8      	ldr	r0, [r7, #28]
 8016658:	f000 f8dc 	bl	8016814 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801665c:	2301      	movs	r3, #1
 801665e:	61bb      	str	r3, [r7, #24]
 8016660:	e002      	b.n	8016668 <xTaskCreate+0x82>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016662:	f04f 33ff 	mov.w	r3, #4294967295
 8016666:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016668:	69bb      	ldr	r3, [r7, #24]
	}
 801666a:	4618      	mov	r0, r3
 801666c:	3720      	adds	r7, #32
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}
	...

08016674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b088      	sub	sp, #32
 8016678:	af00      	add	r7, sp, #0
 801667a:	60f8      	str	r0, [r7, #12]
 801667c:	60b9      	str	r1, [r7, #8]
 801667e:	607a      	str	r2, [r7, #4]
 8016680:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016684:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	009b      	lsls	r3, r3, #2
 801668a:	461a      	mov	r2, r3
 801668c:	21a5      	movs	r1, #165	; 0xa5
 801668e:	f002 fa91 	bl	8018bb4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801669c:	3b01      	subs	r3, #1
 801669e:	009b      	lsls	r3, r3, #2
 80166a0:	4413      	add	r3, r2
 80166a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80166a4:	69bb      	ldr	r3, [r7, #24]
 80166a6:	f023 0307 	bic.w	r3, r3, #7
 80166aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80166ac:	69bb      	ldr	r3, [r7, #24]
 80166ae:	f003 0307 	and.w	r3, r3, #7
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d00a      	beq.n	80166cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80166b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ba:	f383 8811 	msr	BASEPRI, r3
 80166be:	f3bf 8f6f 	isb	sy
 80166c2:	f3bf 8f4f 	dsb	sy
 80166c6:	617b      	str	r3, [r7, #20]
}
 80166c8:	bf00      	nop
 80166ca:	e7fe      	b.n	80166ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80166cc:	68bb      	ldr	r3, [r7, #8]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d01f      	beq.n	8016712 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80166d2:	2300      	movs	r3, #0
 80166d4:	61fb      	str	r3, [r7, #28]
 80166d6:	e012      	b.n	80166fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80166d8:	68ba      	ldr	r2, [r7, #8]
 80166da:	69fb      	ldr	r3, [r7, #28]
 80166dc:	4413      	add	r3, r2
 80166de:	7819      	ldrb	r1, [r3, #0]
 80166e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166e2:	69fb      	ldr	r3, [r7, #28]
 80166e4:	4413      	add	r3, r2
 80166e6:	3334      	adds	r3, #52	; 0x34
 80166e8:	460a      	mov	r2, r1
 80166ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80166ec:	68ba      	ldr	r2, [r7, #8]
 80166ee:	69fb      	ldr	r3, [r7, #28]
 80166f0:	4413      	add	r3, r2
 80166f2:	781b      	ldrb	r3, [r3, #0]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d006      	beq.n	8016706 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80166f8:	69fb      	ldr	r3, [r7, #28]
 80166fa:	3301      	adds	r3, #1
 80166fc:	61fb      	str	r3, [r7, #28]
 80166fe:	69fb      	ldr	r3, [r7, #28]
 8016700:	2b0f      	cmp	r3, #15
 8016702:	d9e9      	bls.n	80166d8 <prvInitialiseNewTask+0x64>
 8016704:	e000      	b.n	8016708 <prvInitialiseNewTask+0x94>
			{
				break;
 8016706:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801670a:	2200      	movs	r2, #0
 801670c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016710:	e003      	b.n	801671a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016714:	2200      	movs	r2, #0
 8016716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671c:	2b06      	cmp	r3, #6
 801671e:	d901      	bls.n	8016724 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016720:	2306      	movs	r3, #6
 8016722:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016728:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801672c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801672e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016732:	2200      	movs	r2, #0
 8016734:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016738:	3304      	adds	r3, #4
 801673a:	4618      	mov	r0, r3
 801673c:	f7fe fec4 	bl	80154c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016742:	3318      	adds	r3, #24
 8016744:	4618      	mov	r0, r3
 8016746:	f7fe febf 	bl	80154c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801674c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801674e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016752:	f1c3 0207 	rsb	r2, r3, #7
 8016756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016758:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801675c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801675e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016762:	2200      	movs	r2, #0
 8016764:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801676a:	2200      	movs	r2, #0
 801676c:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016772:	3350      	adds	r3, #80	; 0x50
 8016774:	f44f 7290 	mov.w	r2, #288	; 0x120
 8016778:	2100      	movs	r1, #0
 801677a:	4618      	mov	r0, r3
 801677c:	f002 fa1a 	bl	8018bb4 <memset>
 8016780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016782:	4a21      	ldr	r2, [pc, #132]	; (8016808 <prvInitialiseNewTask+0x194>)
 8016784:	655a      	str	r2, [r3, #84]	; 0x54
 8016786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016788:	4a20      	ldr	r2, [pc, #128]	; (801680c <prvInitialiseNewTask+0x198>)
 801678a:	659a      	str	r2, [r3, #88]	; 0x58
 801678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801678e:	4a20      	ldr	r2, [pc, #128]	; (8016810 <prvInitialiseNewTask+0x19c>)
 8016790:	65da      	str	r2, [r3, #92]	; 0x5c
 8016792:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016794:	f04f 0201 	mov.w	r2, #1
 8016798:	f04f 0300 	mov.w	r3, #0
 801679c:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
 80167a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167a2:	f243 320e 	movw	r2, #13070	; 0x330e
 80167a6:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
 80167aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ac:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 80167b0:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
 80167b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167b6:	f241 2234 	movw	r2, #4660	; 0x1234
 80167ba:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 80167be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167c0:	f24e 626d 	movw	r2, #58989	; 0xe66d
 80167c4:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 80167c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ca:	f64d 62ec 	movw	r2, #57068	; 0xdeec
 80167ce:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
 80167d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167d4:	2205      	movs	r2, #5
 80167d6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
 80167da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167dc:	220b      	movs	r2, #11
 80167de:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80167e2:	683a      	ldr	r2, [r7, #0]
 80167e4:	68f9      	ldr	r1, [r7, #12]
 80167e6:	69b8      	ldr	r0, [r7, #24]
 80167e8:	f001 fa94 	bl	8017d14 <pxPortInitialiseStack>
 80167ec:	4602      	mov	r2, r0
 80167ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80167f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d002      	beq.n	80167fe <prvInitialiseNewTask+0x18a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80167f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80167fe:	bf00      	nop
 8016800:	3720      	adds	r7, #32
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}
 8016806:	bf00      	nop
 8016808:	200055ac 	.word	0x200055ac
 801680c:	20005614 	.word	0x20005614
 8016810:	2000567c 	.word	0x2000567c

08016814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b082      	sub	sp, #8
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801681c:	f001 fb6e 	bl	8017efc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016820:	4b2a      	ldr	r3, [pc, #168]	; (80168cc <prvAddNewTaskToReadyList+0xb8>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	3301      	adds	r3, #1
 8016826:	4a29      	ldr	r2, [pc, #164]	; (80168cc <prvAddNewTaskToReadyList+0xb8>)
 8016828:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801682a:	4b29      	ldr	r3, [pc, #164]	; (80168d0 <prvAddNewTaskToReadyList+0xbc>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d109      	bne.n	8016846 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016832:	4a27      	ldr	r2, [pc, #156]	; (80168d0 <prvAddNewTaskToReadyList+0xbc>)
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016838:	4b24      	ldr	r3, [pc, #144]	; (80168cc <prvAddNewTaskToReadyList+0xb8>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	2b01      	cmp	r3, #1
 801683e:	d110      	bne.n	8016862 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016840:	f000 fc3e 	bl	80170c0 <prvInitialiseTaskLists>
 8016844:	e00d      	b.n	8016862 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016846:	4b23      	ldr	r3, [pc, #140]	; (80168d4 <prvAddNewTaskToReadyList+0xc0>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d109      	bne.n	8016862 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801684e:	4b20      	ldr	r3, [pc, #128]	; (80168d0 <prvAddNewTaskToReadyList+0xbc>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016858:	429a      	cmp	r2, r3
 801685a:	d802      	bhi.n	8016862 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801685c:	4a1c      	ldr	r2, [pc, #112]	; (80168d0 <prvAddNewTaskToReadyList+0xbc>)
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016862:	4b1d      	ldr	r3, [pc, #116]	; (80168d8 <prvAddNewTaskToReadyList+0xc4>)
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	3301      	adds	r3, #1
 8016868:	4a1b      	ldr	r2, [pc, #108]	; (80168d8 <prvAddNewTaskToReadyList+0xc4>)
 801686a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016870:	2201      	movs	r2, #1
 8016872:	409a      	lsls	r2, r3
 8016874:	4b19      	ldr	r3, [pc, #100]	; (80168dc <prvAddNewTaskToReadyList+0xc8>)
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	4313      	orrs	r3, r2
 801687a:	4a18      	ldr	r2, [pc, #96]	; (80168dc <prvAddNewTaskToReadyList+0xc8>)
 801687c:	6013      	str	r3, [r2, #0]
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016882:	4613      	mov	r3, r2
 8016884:	009b      	lsls	r3, r3, #2
 8016886:	4413      	add	r3, r2
 8016888:	009b      	lsls	r3, r3, #2
 801688a:	4a15      	ldr	r2, [pc, #84]	; (80168e0 <prvAddNewTaskToReadyList+0xcc>)
 801688c:	441a      	add	r2, r3
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	3304      	adds	r3, #4
 8016892:	4619      	mov	r1, r3
 8016894:	4610      	mov	r0, r2
 8016896:	f7fe fe23 	bl	80154e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801689a:	f001 fb5f 	bl	8017f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801689e:	4b0d      	ldr	r3, [pc, #52]	; (80168d4 <prvAddNewTaskToReadyList+0xc0>)
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d00e      	beq.n	80168c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80168a6:	4b0a      	ldr	r3, [pc, #40]	; (80168d0 <prvAddNewTaskToReadyList+0xbc>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d207      	bcs.n	80168c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80168b4:	4b0b      	ldr	r3, [pc, #44]	; (80168e4 <prvAddNewTaskToReadyList+0xd0>)
 80168b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168ba:	601a      	str	r2, [r3, #0]
 80168bc:	f3bf 8f4f 	dsb	sy
 80168c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80168c4:	bf00      	nop
 80168c6:	3708      	adds	r7, #8
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd80      	pop	{r7, pc}
 80168cc:	20002464 	.word	0x20002464
 80168d0:	20002364 	.word	0x20002364
 80168d4:	20002470 	.word	0x20002470
 80168d8:	20002480 	.word	0x20002480
 80168dc:	2000246c 	.word	0x2000246c
 80168e0:	20002368 	.word	0x20002368
 80168e4:	e000ed04 	.word	0xe000ed04

080168e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b084      	sub	sp, #16
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80168f0:	2300      	movs	r3, #0
 80168f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d017      	beq.n	801692a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80168fa:	4b13      	ldr	r3, [pc, #76]	; (8016948 <vTaskDelay+0x60>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d00a      	beq.n	8016918 <vTaskDelay+0x30>
	__asm volatile
 8016902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016906:	f383 8811 	msr	BASEPRI, r3
 801690a:	f3bf 8f6f 	isb	sy
 801690e:	f3bf 8f4f 	dsb	sy
 8016912:	60bb      	str	r3, [r7, #8]
}
 8016914:	bf00      	nop
 8016916:	e7fe      	b.n	8016916 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016918:	f000 f88a 	bl	8016a30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801691c:	2100      	movs	r1, #0
 801691e:	6878      	ldr	r0, [r7, #4]
 8016920:	f000 fe62 	bl	80175e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016924:	f000 f892 	bl	8016a4c <xTaskResumeAll>
 8016928:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d107      	bne.n	8016940 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8016930:	4b06      	ldr	r3, [pc, #24]	; (801694c <vTaskDelay+0x64>)
 8016932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016936:	601a      	str	r2, [r3, #0]
 8016938:	f3bf 8f4f 	dsb	sy
 801693c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016940:	bf00      	nop
 8016942:	3710      	adds	r7, #16
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}
 8016948:	2000248c 	.word	0x2000248c
 801694c:	e000ed04 	.word	0xe000ed04

08016950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b08a      	sub	sp, #40	; 0x28
 8016954:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016956:	2300      	movs	r3, #0
 8016958:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801695a:	2300      	movs	r3, #0
 801695c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801695e:	463a      	mov	r2, r7
 8016960:	1d39      	adds	r1, r7, #4
 8016962:	f107 0308 	add.w	r3, r7, #8
 8016966:	4618      	mov	r0, r3
 8016968:	f7f2 fe04 	bl	8009574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801696c:	6839      	ldr	r1, [r7, #0]
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	68ba      	ldr	r2, [r7, #8]
 8016972:	9202      	str	r2, [sp, #8]
 8016974:	9301      	str	r3, [sp, #4]
 8016976:	2300      	movs	r3, #0
 8016978:	9300      	str	r3, [sp, #0]
 801697a:	2300      	movs	r3, #0
 801697c:	460a      	mov	r2, r1
 801697e:	4924      	ldr	r1, [pc, #144]	; (8016a10 <vTaskStartScheduler+0xc0>)
 8016980:	4824      	ldr	r0, [pc, #144]	; (8016a14 <vTaskStartScheduler+0xc4>)
 8016982:	f7ff fdd1 	bl	8016528 <xTaskCreateStatic>
 8016986:	4603      	mov	r3, r0
 8016988:	4a23      	ldr	r2, [pc, #140]	; (8016a18 <vTaskStartScheduler+0xc8>)
 801698a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801698c:	4b22      	ldr	r3, [pc, #136]	; (8016a18 <vTaskStartScheduler+0xc8>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d002      	beq.n	801699a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016994:	2301      	movs	r3, #1
 8016996:	617b      	str	r3, [r7, #20]
 8016998:	e001      	b.n	801699e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801699a:	2300      	movs	r3, #0
 801699c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801699e:	697b      	ldr	r3, [r7, #20]
 80169a0:	2b01      	cmp	r3, #1
 80169a2:	d102      	bne.n	80169aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80169a4:	f000 fe86 	bl	80176b4 <xTimerCreateTimerTask>
 80169a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80169aa:	697b      	ldr	r3, [r7, #20]
 80169ac:	2b01      	cmp	r3, #1
 80169ae:	d11b      	bne.n	80169e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80169b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169b4:	f383 8811 	msr	BASEPRI, r3
 80169b8:	f3bf 8f6f 	isb	sy
 80169bc:	f3bf 8f4f 	dsb	sy
 80169c0:	613b      	str	r3, [r7, #16]
}
 80169c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80169c4:	4b15      	ldr	r3, [pc, #84]	; (8016a1c <vTaskStartScheduler+0xcc>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	3350      	adds	r3, #80	; 0x50
 80169ca:	4a15      	ldr	r2, [pc, #84]	; (8016a20 <vTaskStartScheduler+0xd0>)
 80169cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80169ce:	4b15      	ldr	r3, [pc, #84]	; (8016a24 <vTaskStartScheduler+0xd4>)
 80169d0:	f04f 32ff 	mov.w	r2, #4294967295
 80169d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80169d6:	4b14      	ldr	r3, [pc, #80]	; (8016a28 <vTaskStartScheduler+0xd8>)
 80169d8:	2201      	movs	r2, #1
 80169da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80169dc:	4b13      	ldr	r3, [pc, #76]	; (8016a2c <vTaskStartScheduler+0xdc>)
 80169de:	2200      	movs	r2, #0
 80169e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80169e2:	f001 fa19 	bl	8017e18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80169e6:	e00e      	b.n	8016a06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169ee:	d10a      	bne.n	8016a06 <vTaskStartScheduler+0xb6>
	__asm volatile
 80169f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169f4:	f383 8811 	msr	BASEPRI, r3
 80169f8:	f3bf 8f6f 	isb	sy
 80169fc:	f3bf 8f4f 	dsb	sy
 8016a00:	60fb      	str	r3, [r7, #12]
}
 8016a02:	bf00      	nop
 8016a04:	e7fe      	b.n	8016a04 <vTaskStartScheduler+0xb4>
}
 8016a06:	bf00      	nop
 8016a08:	3718      	adds	r7, #24
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	bd80      	pop	{r7, pc}
 8016a0e:	bf00      	nop
 8016a10:	0801fc5c 	.word	0x0801fc5c
 8016a14:	0801708d 	.word	0x0801708d
 8016a18:	20002488 	.word	0x20002488
 8016a1c:	20002364 	.word	0x20002364
 8016a20:	200001c8 	.word	0x200001c8
 8016a24:	20002484 	.word	0x20002484
 8016a28:	20002470 	.word	0x20002470
 8016a2c:	20002468 	.word	0x20002468

08016a30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016a30:	b480      	push	{r7}
 8016a32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016a34:	4b04      	ldr	r3, [pc, #16]	; (8016a48 <vTaskSuspendAll+0x18>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	3301      	adds	r3, #1
 8016a3a:	4a03      	ldr	r2, [pc, #12]	; (8016a48 <vTaskSuspendAll+0x18>)
 8016a3c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8016a3e:	bf00      	nop
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bc80      	pop	{r7}
 8016a44:	4770      	bx	lr
 8016a46:	bf00      	nop
 8016a48:	2000248c 	.word	0x2000248c

08016a4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b084      	sub	sp, #16
 8016a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016a52:	2300      	movs	r3, #0
 8016a54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016a56:	2300      	movs	r3, #0
 8016a58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016a5a:	4b41      	ldr	r3, [pc, #260]	; (8016b60 <xTaskResumeAll+0x114>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d10a      	bne.n	8016a78 <xTaskResumeAll+0x2c>
	__asm volatile
 8016a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a66:	f383 8811 	msr	BASEPRI, r3
 8016a6a:	f3bf 8f6f 	isb	sy
 8016a6e:	f3bf 8f4f 	dsb	sy
 8016a72:	603b      	str	r3, [r7, #0]
}
 8016a74:	bf00      	nop
 8016a76:	e7fe      	b.n	8016a76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016a78:	f001 fa40 	bl	8017efc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016a7c:	4b38      	ldr	r3, [pc, #224]	; (8016b60 <xTaskResumeAll+0x114>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	3b01      	subs	r3, #1
 8016a82:	4a37      	ldr	r2, [pc, #220]	; (8016b60 <xTaskResumeAll+0x114>)
 8016a84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a86:	4b36      	ldr	r3, [pc, #216]	; (8016b60 <xTaskResumeAll+0x114>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d161      	bne.n	8016b52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016a8e:	4b35      	ldr	r3, [pc, #212]	; (8016b64 <xTaskResumeAll+0x118>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d05d      	beq.n	8016b52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016a96:	e02e      	b.n	8016af6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a98:	4b33      	ldr	r3, [pc, #204]	; (8016b68 <xTaskResumeAll+0x11c>)
 8016a9a:	68db      	ldr	r3, [r3, #12]
 8016a9c:	68db      	ldr	r3, [r3, #12]
 8016a9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	3318      	adds	r3, #24
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f7fe fd76 	bl	8015596 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	3304      	adds	r3, #4
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f7fe fd71 	bl	8015596 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ab8:	2201      	movs	r2, #1
 8016aba:	409a      	lsls	r2, r3
 8016abc:	4b2b      	ldr	r3, [pc, #172]	; (8016b6c <xTaskResumeAll+0x120>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	4313      	orrs	r3, r2
 8016ac2:	4a2a      	ldr	r2, [pc, #168]	; (8016b6c <xTaskResumeAll+0x120>)
 8016ac4:	6013      	str	r3, [r2, #0]
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016aca:	4613      	mov	r3, r2
 8016acc:	009b      	lsls	r3, r3, #2
 8016ace:	4413      	add	r3, r2
 8016ad0:	009b      	lsls	r3, r3, #2
 8016ad2:	4a27      	ldr	r2, [pc, #156]	; (8016b70 <xTaskResumeAll+0x124>)
 8016ad4:	441a      	add	r2, r3
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	3304      	adds	r3, #4
 8016ada:	4619      	mov	r1, r3
 8016adc:	4610      	mov	r0, r2
 8016ade:	f7fe fcff 	bl	80154e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ae6:	4b23      	ldr	r3, [pc, #140]	; (8016b74 <xTaskResumeAll+0x128>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aec:	429a      	cmp	r2, r3
 8016aee:	d302      	bcc.n	8016af6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8016af0:	4b21      	ldr	r3, [pc, #132]	; (8016b78 <xTaskResumeAll+0x12c>)
 8016af2:	2201      	movs	r2, #1
 8016af4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016af6:	4b1c      	ldr	r3, [pc, #112]	; (8016b68 <xTaskResumeAll+0x11c>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d1cc      	bne.n	8016a98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d001      	beq.n	8016b08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016b04:	f000 fb7e 	bl	8017204 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016b08:	4b1c      	ldr	r3, [pc, #112]	; (8016b7c <xTaskResumeAll+0x130>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d010      	beq.n	8016b36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016b14:	f000 f844 	bl	8016ba0 <xTaskIncrementTick>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d002      	beq.n	8016b24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8016b1e:	4b16      	ldr	r3, [pc, #88]	; (8016b78 <xTaskResumeAll+0x12c>)
 8016b20:	2201      	movs	r2, #1
 8016b22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	3b01      	subs	r3, #1
 8016b28:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d1f1      	bne.n	8016b14 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8016b30:	4b12      	ldr	r3, [pc, #72]	; (8016b7c <xTaskResumeAll+0x130>)
 8016b32:	2200      	movs	r2, #0
 8016b34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016b36:	4b10      	ldr	r3, [pc, #64]	; (8016b78 <xTaskResumeAll+0x12c>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d009      	beq.n	8016b52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016b3e:	2301      	movs	r3, #1
 8016b40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016b42:	4b0f      	ldr	r3, [pc, #60]	; (8016b80 <xTaskResumeAll+0x134>)
 8016b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b48:	601a      	str	r2, [r3, #0]
 8016b4a:	f3bf 8f4f 	dsb	sy
 8016b4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016b52:	f001 fa03 	bl	8017f5c <vPortExitCritical>

	return xAlreadyYielded;
 8016b56:	68bb      	ldr	r3, [r7, #8]
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3710      	adds	r7, #16
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}
 8016b60:	2000248c 	.word	0x2000248c
 8016b64:	20002464 	.word	0x20002464
 8016b68:	20002424 	.word	0x20002424
 8016b6c:	2000246c 	.word	0x2000246c
 8016b70:	20002368 	.word	0x20002368
 8016b74:	20002364 	.word	0x20002364
 8016b78:	20002478 	.word	0x20002478
 8016b7c:	20002474 	.word	0x20002474
 8016b80:	e000ed04 	.word	0xe000ed04

08016b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016b84:	b480      	push	{r7}
 8016b86:	b083      	sub	sp, #12
 8016b88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016b8a:	4b04      	ldr	r3, [pc, #16]	; (8016b9c <xTaskGetTickCount+0x18>)
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016b90:	687b      	ldr	r3, [r7, #4]
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	370c      	adds	r7, #12
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bc80      	pop	{r7}
 8016b9a:	4770      	bx	lr
 8016b9c:	20002468 	.word	0x20002468

08016ba0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b086      	sub	sp, #24
 8016ba4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016baa:	4b4e      	ldr	r3, [pc, #312]	; (8016ce4 <xTaskIncrementTick+0x144>)
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	f040 8088 	bne.w	8016cc4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016bb4:	4b4c      	ldr	r3, [pc, #304]	; (8016ce8 <xTaskIncrementTick+0x148>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	3301      	adds	r3, #1
 8016bba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016bbc:	4a4a      	ldr	r2, [pc, #296]	; (8016ce8 <xTaskIncrementTick+0x148>)
 8016bbe:	693b      	ldr	r3, [r7, #16]
 8016bc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016bc2:	693b      	ldr	r3, [r7, #16]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d120      	bne.n	8016c0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016bc8:	4b48      	ldr	r3, [pc, #288]	; (8016cec <xTaskIncrementTick+0x14c>)
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d00a      	beq.n	8016be8 <xTaskIncrementTick+0x48>
	__asm volatile
 8016bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd6:	f383 8811 	msr	BASEPRI, r3
 8016bda:	f3bf 8f6f 	isb	sy
 8016bde:	f3bf 8f4f 	dsb	sy
 8016be2:	603b      	str	r3, [r7, #0]
}
 8016be4:	bf00      	nop
 8016be6:	e7fe      	b.n	8016be6 <xTaskIncrementTick+0x46>
 8016be8:	4b40      	ldr	r3, [pc, #256]	; (8016cec <xTaskIncrementTick+0x14c>)
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	60fb      	str	r3, [r7, #12]
 8016bee:	4b40      	ldr	r3, [pc, #256]	; (8016cf0 <xTaskIncrementTick+0x150>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	4a3e      	ldr	r2, [pc, #248]	; (8016cec <xTaskIncrementTick+0x14c>)
 8016bf4:	6013      	str	r3, [r2, #0]
 8016bf6:	4a3e      	ldr	r2, [pc, #248]	; (8016cf0 <xTaskIncrementTick+0x150>)
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	6013      	str	r3, [r2, #0]
 8016bfc:	4b3d      	ldr	r3, [pc, #244]	; (8016cf4 <xTaskIncrementTick+0x154>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	3301      	adds	r3, #1
 8016c02:	4a3c      	ldr	r2, [pc, #240]	; (8016cf4 <xTaskIncrementTick+0x154>)
 8016c04:	6013      	str	r3, [r2, #0]
 8016c06:	f000 fafd 	bl	8017204 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016c0a:	4b3b      	ldr	r3, [pc, #236]	; (8016cf8 <xTaskIncrementTick+0x158>)
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	693a      	ldr	r2, [r7, #16]
 8016c10:	429a      	cmp	r2, r3
 8016c12:	d348      	bcc.n	8016ca6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016c14:	4b35      	ldr	r3, [pc, #212]	; (8016cec <xTaskIncrementTick+0x14c>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d104      	bne.n	8016c28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c1e:	4b36      	ldr	r3, [pc, #216]	; (8016cf8 <xTaskIncrementTick+0x158>)
 8016c20:	f04f 32ff 	mov.w	r2, #4294967295
 8016c24:	601a      	str	r2, [r3, #0]
					break;
 8016c26:	e03e      	b.n	8016ca6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c28:	4b30      	ldr	r3, [pc, #192]	; (8016cec <xTaskIncrementTick+0x14c>)
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	68db      	ldr	r3, [r3, #12]
 8016c2e:	68db      	ldr	r3, [r3, #12]
 8016c30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016c32:	68bb      	ldr	r3, [r7, #8]
 8016c34:	685b      	ldr	r3, [r3, #4]
 8016c36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016c38:	693a      	ldr	r2, [r7, #16]
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d203      	bcs.n	8016c48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016c40:	4a2d      	ldr	r2, [pc, #180]	; (8016cf8 <xTaskIncrementTick+0x158>)
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016c46:	e02e      	b.n	8016ca6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016c48:	68bb      	ldr	r3, [r7, #8]
 8016c4a:	3304      	adds	r3, #4
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f7fe fca2 	bl	8015596 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016c52:	68bb      	ldr	r3, [r7, #8]
 8016c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d004      	beq.n	8016c64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016c5a:	68bb      	ldr	r3, [r7, #8]
 8016c5c:	3318      	adds	r3, #24
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f7fe fc99 	bl	8015596 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c68:	2201      	movs	r2, #1
 8016c6a:	409a      	lsls	r2, r3
 8016c6c:	4b23      	ldr	r3, [pc, #140]	; (8016cfc <xTaskIncrementTick+0x15c>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	4313      	orrs	r3, r2
 8016c72:	4a22      	ldr	r2, [pc, #136]	; (8016cfc <xTaskIncrementTick+0x15c>)
 8016c74:	6013      	str	r3, [r2, #0]
 8016c76:	68bb      	ldr	r3, [r7, #8]
 8016c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c7a:	4613      	mov	r3, r2
 8016c7c:	009b      	lsls	r3, r3, #2
 8016c7e:	4413      	add	r3, r2
 8016c80:	009b      	lsls	r3, r3, #2
 8016c82:	4a1f      	ldr	r2, [pc, #124]	; (8016d00 <xTaskIncrementTick+0x160>)
 8016c84:	441a      	add	r2, r3
 8016c86:	68bb      	ldr	r3, [r7, #8]
 8016c88:	3304      	adds	r3, #4
 8016c8a:	4619      	mov	r1, r3
 8016c8c:	4610      	mov	r0, r2
 8016c8e:	f7fe fc27 	bl	80154e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c96:	4b1b      	ldr	r3, [pc, #108]	; (8016d04 <xTaskIncrementTick+0x164>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d3b9      	bcc.n	8016c14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016ca0:	2301      	movs	r3, #1
 8016ca2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016ca4:	e7b6      	b.n	8016c14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016ca6:	4b17      	ldr	r3, [pc, #92]	; (8016d04 <xTaskIncrementTick+0x164>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cac:	4914      	ldr	r1, [pc, #80]	; (8016d00 <xTaskIncrementTick+0x160>)
 8016cae:	4613      	mov	r3, r2
 8016cb0:	009b      	lsls	r3, r3, #2
 8016cb2:	4413      	add	r3, r2
 8016cb4:	009b      	lsls	r3, r3, #2
 8016cb6:	440b      	add	r3, r1
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	2b01      	cmp	r3, #1
 8016cbc:	d907      	bls.n	8016cce <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	617b      	str	r3, [r7, #20]
 8016cc2:	e004      	b.n	8016cce <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016cc4:	4b10      	ldr	r3, [pc, #64]	; (8016d08 <xTaskIncrementTick+0x168>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	3301      	adds	r3, #1
 8016cca:	4a0f      	ldr	r2, [pc, #60]	; (8016d08 <xTaskIncrementTick+0x168>)
 8016ccc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016cce:	4b0f      	ldr	r3, [pc, #60]	; (8016d0c <xTaskIncrementTick+0x16c>)
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d001      	beq.n	8016cda <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016cda:	697b      	ldr	r3, [r7, #20]
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3718      	adds	r7, #24
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	2000248c 	.word	0x2000248c
 8016ce8:	20002468 	.word	0x20002468
 8016cec:	2000241c 	.word	0x2000241c
 8016cf0:	20002420 	.word	0x20002420
 8016cf4:	2000247c 	.word	0x2000247c
 8016cf8:	20002484 	.word	0x20002484
 8016cfc:	2000246c 	.word	0x2000246c
 8016d00:	20002368 	.word	0x20002368
 8016d04:	20002364 	.word	0x20002364
 8016d08:	20002474 	.word	0x20002474
 8016d0c:	20002478 	.word	0x20002478

08016d10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b088      	sub	sp, #32
 8016d14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016d16:	4b3c      	ldr	r3, [pc, #240]	; (8016e08 <vTaskSwitchContext+0xf8>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d003      	beq.n	8016d26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016d1e:	4b3b      	ldr	r3, [pc, #236]	; (8016e0c <vTaskSwitchContext+0xfc>)
 8016d20:	2201      	movs	r2, #1
 8016d22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016d24:	e06b      	b.n	8016dfe <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 8016d26:	4b39      	ldr	r3, [pc, #228]	; (8016e0c <vTaskSwitchContext+0xfc>)
 8016d28:	2200      	movs	r2, #0
 8016d2a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016d2c:	4b38      	ldr	r3, [pc, #224]	; (8016e10 <vTaskSwitchContext+0x100>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d32:	61fb      	str	r3, [r7, #28]
 8016d34:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8016d38:	61bb      	str	r3, [r7, #24]
 8016d3a:	69fb      	ldr	r3, [r7, #28]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	69ba      	ldr	r2, [r7, #24]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d111      	bne.n	8016d68 <vTaskSwitchContext+0x58>
 8016d44:	69fb      	ldr	r3, [r7, #28]
 8016d46:	3304      	adds	r3, #4
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	69ba      	ldr	r2, [r7, #24]
 8016d4c:	429a      	cmp	r2, r3
 8016d4e:	d10b      	bne.n	8016d68 <vTaskSwitchContext+0x58>
 8016d50:	69fb      	ldr	r3, [r7, #28]
 8016d52:	3308      	adds	r3, #8
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	69ba      	ldr	r2, [r7, #24]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d105      	bne.n	8016d68 <vTaskSwitchContext+0x58>
 8016d5c:	69fb      	ldr	r3, [r7, #28]
 8016d5e:	330c      	adds	r3, #12
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	69ba      	ldr	r2, [r7, #24]
 8016d64:	429a      	cmp	r2, r3
 8016d66:	d008      	beq.n	8016d7a <vTaskSwitchContext+0x6a>
 8016d68:	4b29      	ldr	r3, [pc, #164]	; (8016e10 <vTaskSwitchContext+0x100>)
 8016d6a:	681a      	ldr	r2, [r3, #0]
 8016d6c:	4b28      	ldr	r3, [pc, #160]	; (8016e10 <vTaskSwitchContext+0x100>)
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	3334      	adds	r3, #52	; 0x34
 8016d72:	4619      	mov	r1, r3
 8016d74:	4610      	mov	r0, r2
 8016d76:	f7f2 fc2f 	bl	80095d8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d7a:	4b26      	ldr	r3, [pc, #152]	; (8016e14 <vTaskSwitchContext+0x104>)
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	fab3 f383 	clz	r3, r3
 8016d86:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8016d88:	7afb      	ldrb	r3, [r7, #11]
 8016d8a:	f1c3 031f 	rsb	r3, r3, #31
 8016d8e:	617b      	str	r3, [r7, #20]
 8016d90:	4921      	ldr	r1, [pc, #132]	; (8016e18 <vTaskSwitchContext+0x108>)
 8016d92:	697a      	ldr	r2, [r7, #20]
 8016d94:	4613      	mov	r3, r2
 8016d96:	009b      	lsls	r3, r3, #2
 8016d98:	4413      	add	r3, r2
 8016d9a:	009b      	lsls	r3, r3, #2
 8016d9c:	440b      	add	r3, r1
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d10a      	bne.n	8016dba <vTaskSwitchContext+0xaa>
	__asm volatile
 8016da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016da8:	f383 8811 	msr	BASEPRI, r3
 8016dac:	f3bf 8f6f 	isb	sy
 8016db0:	f3bf 8f4f 	dsb	sy
 8016db4:	607b      	str	r3, [r7, #4]
}
 8016db6:	bf00      	nop
 8016db8:	e7fe      	b.n	8016db8 <vTaskSwitchContext+0xa8>
 8016dba:	697a      	ldr	r2, [r7, #20]
 8016dbc:	4613      	mov	r3, r2
 8016dbe:	009b      	lsls	r3, r3, #2
 8016dc0:	4413      	add	r3, r2
 8016dc2:	009b      	lsls	r3, r3, #2
 8016dc4:	4a14      	ldr	r2, [pc, #80]	; (8016e18 <vTaskSwitchContext+0x108>)
 8016dc6:	4413      	add	r3, r2
 8016dc8:	613b      	str	r3, [r7, #16]
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	685b      	ldr	r3, [r3, #4]
 8016dce:	685a      	ldr	r2, [r3, #4]
 8016dd0:	693b      	ldr	r3, [r7, #16]
 8016dd2:	605a      	str	r2, [r3, #4]
 8016dd4:	693b      	ldr	r3, [r7, #16]
 8016dd6:	685a      	ldr	r2, [r3, #4]
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	3308      	adds	r3, #8
 8016ddc:	429a      	cmp	r2, r3
 8016dde:	d104      	bne.n	8016dea <vTaskSwitchContext+0xda>
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	685b      	ldr	r3, [r3, #4]
 8016de4:	685a      	ldr	r2, [r3, #4]
 8016de6:	693b      	ldr	r3, [r7, #16]
 8016de8:	605a      	str	r2, [r3, #4]
 8016dea:	693b      	ldr	r3, [r7, #16]
 8016dec:	685b      	ldr	r3, [r3, #4]
 8016dee:	68db      	ldr	r3, [r3, #12]
 8016df0:	4a07      	ldr	r2, [pc, #28]	; (8016e10 <vTaskSwitchContext+0x100>)
 8016df2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016df4:	4b06      	ldr	r3, [pc, #24]	; (8016e10 <vTaskSwitchContext+0x100>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	3350      	adds	r3, #80	; 0x50
 8016dfa:	4a08      	ldr	r2, [pc, #32]	; (8016e1c <vTaskSwitchContext+0x10c>)
 8016dfc:	6013      	str	r3, [r2, #0]
}
 8016dfe:	bf00      	nop
 8016e00:	3720      	adds	r7, #32
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	bf00      	nop
 8016e08:	2000248c 	.word	0x2000248c
 8016e0c:	20002478 	.word	0x20002478
 8016e10:	20002364 	.word	0x20002364
 8016e14:	2000246c 	.word	0x2000246c
 8016e18:	20002368 	.word	0x20002368
 8016e1c:	200001c8 	.word	0x200001c8

08016e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b084      	sub	sp, #16
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
 8016e28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d10a      	bne.n	8016e46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e34:	f383 8811 	msr	BASEPRI, r3
 8016e38:	f3bf 8f6f 	isb	sy
 8016e3c:	f3bf 8f4f 	dsb	sy
 8016e40:	60fb      	str	r3, [r7, #12]
}
 8016e42:	bf00      	nop
 8016e44:	e7fe      	b.n	8016e44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016e46:	4b07      	ldr	r3, [pc, #28]	; (8016e64 <vTaskPlaceOnEventList+0x44>)
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	3318      	adds	r3, #24
 8016e4c:	4619      	mov	r1, r3
 8016e4e:	6878      	ldr	r0, [r7, #4]
 8016e50:	f7fe fb69 	bl	8015526 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016e54:	2101      	movs	r1, #1
 8016e56:	6838      	ldr	r0, [r7, #0]
 8016e58:	f000 fbc6 	bl	80175e8 <prvAddCurrentTaskToDelayedList>
}
 8016e5c:	bf00      	nop
 8016e5e:	3710      	adds	r7, #16
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}
 8016e64:	20002364 	.word	0x20002364

08016e68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b086      	sub	sp, #24
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	60f8      	str	r0, [r7, #12]
 8016e70:	60b9      	str	r1, [r7, #8]
 8016e72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016e74:	68fb      	ldr	r3, [r7, #12]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d10a      	bne.n	8016e90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e7e:	f383 8811 	msr	BASEPRI, r3
 8016e82:	f3bf 8f6f 	isb	sy
 8016e86:	f3bf 8f4f 	dsb	sy
 8016e8a:	617b      	str	r3, [r7, #20]
}
 8016e8c:	bf00      	nop
 8016e8e:	e7fe      	b.n	8016e8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016e90:	4b0a      	ldr	r3, [pc, #40]	; (8016ebc <vTaskPlaceOnEventListRestricted+0x54>)
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	3318      	adds	r3, #24
 8016e96:	4619      	mov	r1, r3
 8016e98:	68f8      	ldr	r0, [r7, #12]
 8016e9a:	f7fe fb21 	bl	80154e0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d002      	beq.n	8016eaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ea8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016eaa:	6879      	ldr	r1, [r7, #4]
 8016eac:	68b8      	ldr	r0, [r7, #8]
 8016eae:	f000 fb9b 	bl	80175e8 <prvAddCurrentTaskToDelayedList>
	}
 8016eb2:	bf00      	nop
 8016eb4:	3718      	adds	r7, #24
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	bd80      	pop	{r7, pc}
 8016eba:	bf00      	nop
 8016ebc:	20002364 	.word	0x20002364

08016ec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b086      	sub	sp, #24
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	68db      	ldr	r3, [r3, #12]
 8016ecc:	68db      	ldr	r3, [r3, #12]
 8016ece:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d10a      	bne.n	8016eec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eda:	f383 8811 	msr	BASEPRI, r3
 8016ede:	f3bf 8f6f 	isb	sy
 8016ee2:	f3bf 8f4f 	dsb	sy
 8016ee6:	60fb      	str	r3, [r7, #12]
}
 8016ee8:	bf00      	nop
 8016eea:	e7fe      	b.n	8016eea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016eec:	693b      	ldr	r3, [r7, #16]
 8016eee:	3318      	adds	r3, #24
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7fe fb50 	bl	8015596 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016ef6:	4b1d      	ldr	r3, [pc, #116]	; (8016f6c <xTaskRemoveFromEventList+0xac>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d11c      	bne.n	8016f38 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016efe:	693b      	ldr	r3, [r7, #16]
 8016f00:	3304      	adds	r3, #4
 8016f02:	4618      	mov	r0, r3
 8016f04:	f7fe fb47 	bl	8015596 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016f08:	693b      	ldr	r3, [r7, #16]
 8016f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f0c:	2201      	movs	r2, #1
 8016f0e:	409a      	lsls	r2, r3
 8016f10:	4b17      	ldr	r3, [pc, #92]	; (8016f70 <xTaskRemoveFromEventList+0xb0>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	4313      	orrs	r3, r2
 8016f16:	4a16      	ldr	r2, [pc, #88]	; (8016f70 <xTaskRemoveFromEventList+0xb0>)
 8016f18:	6013      	str	r3, [r2, #0]
 8016f1a:	693b      	ldr	r3, [r7, #16]
 8016f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f1e:	4613      	mov	r3, r2
 8016f20:	009b      	lsls	r3, r3, #2
 8016f22:	4413      	add	r3, r2
 8016f24:	009b      	lsls	r3, r3, #2
 8016f26:	4a13      	ldr	r2, [pc, #76]	; (8016f74 <xTaskRemoveFromEventList+0xb4>)
 8016f28:	441a      	add	r2, r3
 8016f2a:	693b      	ldr	r3, [r7, #16]
 8016f2c:	3304      	adds	r3, #4
 8016f2e:	4619      	mov	r1, r3
 8016f30:	4610      	mov	r0, r2
 8016f32:	f7fe fad5 	bl	80154e0 <vListInsertEnd>
 8016f36:	e005      	b.n	8016f44 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	3318      	adds	r3, #24
 8016f3c:	4619      	mov	r1, r3
 8016f3e:	480e      	ldr	r0, [pc, #56]	; (8016f78 <xTaskRemoveFromEventList+0xb8>)
 8016f40:	f7fe face 	bl	80154e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016f44:	693b      	ldr	r3, [r7, #16]
 8016f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f48:	4b0c      	ldr	r3, [pc, #48]	; (8016f7c <xTaskRemoveFromEventList+0xbc>)
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d905      	bls.n	8016f5e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016f52:	2301      	movs	r3, #1
 8016f54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016f56:	4b0a      	ldr	r3, [pc, #40]	; (8016f80 <xTaskRemoveFromEventList+0xc0>)
 8016f58:	2201      	movs	r2, #1
 8016f5a:	601a      	str	r2, [r3, #0]
 8016f5c:	e001      	b.n	8016f62 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016f62:	697b      	ldr	r3, [r7, #20]
}
 8016f64:	4618      	mov	r0, r3
 8016f66:	3718      	adds	r7, #24
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}
 8016f6c:	2000248c 	.word	0x2000248c
 8016f70:	2000246c 	.word	0x2000246c
 8016f74:	20002368 	.word	0x20002368
 8016f78:	20002424 	.word	0x20002424
 8016f7c:	20002364 	.word	0x20002364
 8016f80:	20002478 	.word	0x20002478

08016f84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016f84:	b480      	push	{r7}
 8016f86:	b083      	sub	sp, #12
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016f8c:	4b06      	ldr	r3, [pc, #24]	; (8016fa8 <vTaskInternalSetTimeOutState+0x24>)
 8016f8e:	681a      	ldr	r2, [r3, #0]
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016f94:	4b05      	ldr	r3, [pc, #20]	; (8016fac <vTaskInternalSetTimeOutState+0x28>)
 8016f96:	681a      	ldr	r2, [r3, #0]
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	605a      	str	r2, [r3, #4]
}
 8016f9c:	bf00      	nop
 8016f9e:	370c      	adds	r7, #12
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bc80      	pop	{r7}
 8016fa4:	4770      	bx	lr
 8016fa6:	bf00      	nop
 8016fa8:	2000247c 	.word	0x2000247c
 8016fac:	20002468 	.word	0x20002468

08016fb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b088      	sub	sp, #32
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
 8016fb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d10a      	bne.n	8016fd6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fc4:	f383 8811 	msr	BASEPRI, r3
 8016fc8:	f3bf 8f6f 	isb	sy
 8016fcc:	f3bf 8f4f 	dsb	sy
 8016fd0:	613b      	str	r3, [r7, #16]
}
 8016fd2:	bf00      	nop
 8016fd4:	e7fe      	b.n	8016fd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016fd6:	683b      	ldr	r3, [r7, #0]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d10a      	bne.n	8016ff2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fe0:	f383 8811 	msr	BASEPRI, r3
 8016fe4:	f3bf 8f6f 	isb	sy
 8016fe8:	f3bf 8f4f 	dsb	sy
 8016fec:	60fb      	str	r3, [r7, #12]
}
 8016fee:	bf00      	nop
 8016ff0:	e7fe      	b.n	8016ff0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016ff2:	f000 ff83 	bl	8017efc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016ff6:	4b1d      	ldr	r3, [pc, #116]	; (801706c <xTaskCheckForTimeOut+0xbc>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	685b      	ldr	r3, [r3, #4]
 8017000:	69ba      	ldr	r2, [r7, #24]
 8017002:	1ad3      	subs	r3, r2, r3
 8017004:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017006:	683b      	ldr	r3, [r7, #0]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801700e:	d102      	bne.n	8017016 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017010:	2300      	movs	r3, #0
 8017012:	61fb      	str	r3, [r7, #28]
 8017014:	e023      	b.n	801705e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	681a      	ldr	r2, [r3, #0]
 801701a:	4b15      	ldr	r3, [pc, #84]	; (8017070 <xTaskCheckForTimeOut+0xc0>)
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	429a      	cmp	r2, r3
 8017020:	d007      	beq.n	8017032 <xTaskCheckForTimeOut+0x82>
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	685b      	ldr	r3, [r3, #4]
 8017026:	69ba      	ldr	r2, [r7, #24]
 8017028:	429a      	cmp	r2, r3
 801702a:	d302      	bcc.n	8017032 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801702c:	2301      	movs	r3, #1
 801702e:	61fb      	str	r3, [r7, #28]
 8017030:	e015      	b.n	801705e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	697a      	ldr	r2, [r7, #20]
 8017038:	429a      	cmp	r2, r3
 801703a:	d20b      	bcs.n	8017054 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	681a      	ldr	r2, [r3, #0]
 8017040:	697b      	ldr	r3, [r7, #20]
 8017042:	1ad2      	subs	r2, r2, r3
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f7ff ff9b 	bl	8016f84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801704e:	2300      	movs	r3, #0
 8017050:	61fb      	str	r3, [r7, #28]
 8017052:	e004      	b.n	801705e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017054:	683b      	ldr	r3, [r7, #0]
 8017056:	2200      	movs	r2, #0
 8017058:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801705a:	2301      	movs	r3, #1
 801705c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801705e:	f000 ff7d 	bl	8017f5c <vPortExitCritical>

	return xReturn;
 8017062:	69fb      	ldr	r3, [r7, #28]
}
 8017064:	4618      	mov	r0, r3
 8017066:	3720      	adds	r7, #32
 8017068:	46bd      	mov	sp, r7
 801706a:	bd80      	pop	{r7, pc}
 801706c:	20002468 	.word	0x20002468
 8017070:	2000247c 	.word	0x2000247c

08017074 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017074:	b480      	push	{r7}
 8017076:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017078:	4b03      	ldr	r3, [pc, #12]	; (8017088 <vTaskMissedYield+0x14>)
 801707a:	2201      	movs	r2, #1
 801707c:	601a      	str	r2, [r3, #0]
}
 801707e:	bf00      	nop
 8017080:	46bd      	mov	sp, r7
 8017082:	bc80      	pop	{r7}
 8017084:	4770      	bx	lr
 8017086:	bf00      	nop
 8017088:	20002478 	.word	0x20002478

0801708c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b082      	sub	sp, #8
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017094:	f000 f854 	bl	8017140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017098:	4b07      	ldr	r3, [pc, #28]	; (80170b8 <prvIdleTask+0x2c>)
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	2b01      	cmp	r3, #1
 801709e:	d907      	bls.n	80170b0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80170a0:	4b06      	ldr	r3, [pc, #24]	; (80170bc <prvIdleTask+0x30>)
 80170a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80170a6:	601a      	str	r2, [r3, #0]
 80170a8:	f3bf 8f4f 	dsb	sy
 80170ac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80170b0:	f7f2 fa5a 	bl	8009568 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80170b4:	e7ee      	b.n	8017094 <prvIdleTask+0x8>
 80170b6:	bf00      	nop
 80170b8:	20002368 	.word	0x20002368
 80170bc:	e000ed04 	.word	0xe000ed04

080170c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b082      	sub	sp, #8
 80170c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80170c6:	2300      	movs	r3, #0
 80170c8:	607b      	str	r3, [r7, #4]
 80170ca:	e00c      	b.n	80170e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80170cc:	687a      	ldr	r2, [r7, #4]
 80170ce:	4613      	mov	r3, r2
 80170d0:	009b      	lsls	r3, r3, #2
 80170d2:	4413      	add	r3, r2
 80170d4:	009b      	lsls	r3, r3, #2
 80170d6:	4a12      	ldr	r2, [pc, #72]	; (8017120 <prvInitialiseTaskLists+0x60>)
 80170d8:	4413      	add	r3, r2
 80170da:	4618      	mov	r0, r3
 80170dc:	f7fe f9d5 	bl	801548a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	3301      	adds	r3, #1
 80170e4:	607b      	str	r3, [r7, #4]
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	2b06      	cmp	r3, #6
 80170ea:	d9ef      	bls.n	80170cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80170ec:	480d      	ldr	r0, [pc, #52]	; (8017124 <prvInitialiseTaskLists+0x64>)
 80170ee:	f7fe f9cc 	bl	801548a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80170f2:	480d      	ldr	r0, [pc, #52]	; (8017128 <prvInitialiseTaskLists+0x68>)
 80170f4:	f7fe f9c9 	bl	801548a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80170f8:	480c      	ldr	r0, [pc, #48]	; (801712c <prvInitialiseTaskLists+0x6c>)
 80170fa:	f7fe f9c6 	bl	801548a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80170fe:	480c      	ldr	r0, [pc, #48]	; (8017130 <prvInitialiseTaskLists+0x70>)
 8017100:	f7fe f9c3 	bl	801548a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017104:	480b      	ldr	r0, [pc, #44]	; (8017134 <prvInitialiseTaskLists+0x74>)
 8017106:	f7fe f9c0 	bl	801548a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801710a:	4b0b      	ldr	r3, [pc, #44]	; (8017138 <prvInitialiseTaskLists+0x78>)
 801710c:	4a05      	ldr	r2, [pc, #20]	; (8017124 <prvInitialiseTaskLists+0x64>)
 801710e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017110:	4b0a      	ldr	r3, [pc, #40]	; (801713c <prvInitialiseTaskLists+0x7c>)
 8017112:	4a05      	ldr	r2, [pc, #20]	; (8017128 <prvInitialiseTaskLists+0x68>)
 8017114:	601a      	str	r2, [r3, #0]
}
 8017116:	bf00      	nop
 8017118:	3708      	adds	r7, #8
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	20002368 	.word	0x20002368
 8017124:	200023f4 	.word	0x200023f4
 8017128:	20002408 	.word	0x20002408
 801712c:	20002424 	.word	0x20002424
 8017130:	20002438 	.word	0x20002438
 8017134:	20002450 	.word	0x20002450
 8017138:	2000241c 	.word	0x2000241c
 801713c:	20002420 	.word	0x20002420

08017140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b082      	sub	sp, #8
 8017144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017146:	e019      	b.n	801717c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017148:	f000 fed8 	bl	8017efc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801714c:	4b10      	ldr	r3, [pc, #64]	; (8017190 <prvCheckTasksWaitingTermination+0x50>)
 801714e:	68db      	ldr	r3, [r3, #12]
 8017150:	68db      	ldr	r3, [r3, #12]
 8017152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	3304      	adds	r3, #4
 8017158:	4618      	mov	r0, r3
 801715a:	f7fe fa1c 	bl	8015596 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801715e:	4b0d      	ldr	r3, [pc, #52]	; (8017194 <prvCheckTasksWaitingTermination+0x54>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	3b01      	subs	r3, #1
 8017164:	4a0b      	ldr	r2, [pc, #44]	; (8017194 <prvCheckTasksWaitingTermination+0x54>)
 8017166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017168:	4b0b      	ldr	r3, [pc, #44]	; (8017198 <prvCheckTasksWaitingTermination+0x58>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	3b01      	subs	r3, #1
 801716e:	4a0a      	ldr	r2, [pc, #40]	; (8017198 <prvCheckTasksWaitingTermination+0x58>)
 8017170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017172:	f000 fef3 	bl	8017f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017176:	6878      	ldr	r0, [r7, #4]
 8017178:	f000 f810 	bl	801719c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801717c:	4b06      	ldr	r3, [pc, #24]	; (8017198 <prvCheckTasksWaitingTermination+0x58>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d1e1      	bne.n	8017148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017184:	bf00      	nop
 8017186:	bf00      	nop
 8017188:	3708      	adds	r7, #8
 801718a:	46bd      	mov	sp, r7
 801718c:	bd80      	pop	{r7, pc}
 801718e:	bf00      	nop
 8017190:	20002438 	.word	0x20002438
 8017194:	20002464 	.word	0x20002464
 8017198:	2000244c 	.word	0x2000244c

0801719c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801719c:	b580      	push	{r7, lr}
 801719e:	b084      	sub	sp, #16
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	3350      	adds	r3, #80	; 0x50
 80171a8:	4618      	mov	r0, r3
 80171aa:	f001 fd5d 	bl	8018c68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	f893 3175 	ldrb.w	r3, [r3, #373]	; 0x175
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d108      	bne.n	80171ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171bc:	4618      	mov	r0, r3
 80171be:	f001 f867 	bl	8018290 <vPortFree>
				vPortFree( pxTCB );
 80171c2:	6878      	ldr	r0, [r7, #4]
 80171c4:	f001 f864 	bl	8018290 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80171c8:	e018      	b.n	80171fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	f893 3175 	ldrb.w	r3, [r3, #373]	; 0x175
 80171d0:	2b01      	cmp	r3, #1
 80171d2:	d103      	bne.n	80171dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80171d4:	6878      	ldr	r0, [r7, #4]
 80171d6:	f001 f85b 	bl	8018290 <vPortFree>
	}
 80171da:	e00f      	b.n	80171fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f893 3175 	ldrb.w	r3, [r3, #373]	; 0x175
 80171e2:	2b02      	cmp	r3, #2
 80171e4:	d00a      	beq.n	80171fc <prvDeleteTCB+0x60>
	__asm volatile
 80171e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ea:	f383 8811 	msr	BASEPRI, r3
 80171ee:	f3bf 8f6f 	isb	sy
 80171f2:	f3bf 8f4f 	dsb	sy
 80171f6:	60fb      	str	r3, [r7, #12]
}
 80171f8:	bf00      	nop
 80171fa:	e7fe      	b.n	80171fa <prvDeleteTCB+0x5e>
	}
 80171fc:	bf00      	nop
 80171fe:	3710      	adds	r7, #16
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}

08017204 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017204:	b480      	push	{r7}
 8017206:	b083      	sub	sp, #12
 8017208:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801720a:	4b0c      	ldr	r3, [pc, #48]	; (801723c <prvResetNextTaskUnblockTime+0x38>)
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d104      	bne.n	801721e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017214:	4b0a      	ldr	r3, [pc, #40]	; (8017240 <prvResetNextTaskUnblockTime+0x3c>)
 8017216:	f04f 32ff 	mov.w	r2, #4294967295
 801721a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801721c:	e008      	b.n	8017230 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801721e:	4b07      	ldr	r3, [pc, #28]	; (801723c <prvResetNextTaskUnblockTime+0x38>)
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	68db      	ldr	r3, [r3, #12]
 8017224:	68db      	ldr	r3, [r3, #12]
 8017226:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	685b      	ldr	r3, [r3, #4]
 801722c:	4a04      	ldr	r2, [pc, #16]	; (8017240 <prvResetNextTaskUnblockTime+0x3c>)
 801722e:	6013      	str	r3, [r2, #0]
}
 8017230:	bf00      	nop
 8017232:	370c      	adds	r7, #12
 8017234:	46bd      	mov	sp, r7
 8017236:	bc80      	pop	{r7}
 8017238:	4770      	bx	lr
 801723a:	bf00      	nop
 801723c:	2000241c 	.word	0x2000241c
 8017240:	20002484 	.word	0x20002484

08017244 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017244:	b480      	push	{r7}
 8017246:	b083      	sub	sp, #12
 8017248:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801724a:	4b0b      	ldr	r3, [pc, #44]	; (8017278 <xTaskGetSchedulerState+0x34>)
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d102      	bne.n	8017258 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017252:	2301      	movs	r3, #1
 8017254:	607b      	str	r3, [r7, #4]
 8017256:	e008      	b.n	801726a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017258:	4b08      	ldr	r3, [pc, #32]	; (801727c <xTaskGetSchedulerState+0x38>)
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d102      	bne.n	8017266 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017260:	2302      	movs	r3, #2
 8017262:	607b      	str	r3, [r7, #4]
 8017264:	e001      	b.n	801726a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017266:	2300      	movs	r3, #0
 8017268:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801726a:	687b      	ldr	r3, [r7, #4]
	}
 801726c:	4618      	mov	r0, r3
 801726e:	370c      	adds	r7, #12
 8017270:	46bd      	mov	sp, r7
 8017272:	bc80      	pop	{r7}
 8017274:	4770      	bx	lr
 8017276:	bf00      	nop
 8017278:	20002470 	.word	0x20002470
 801727c:	2000248c 	.word	0x2000248c

08017280 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017280:	b580      	push	{r7, lr}
 8017282:	b084      	sub	sp, #16
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801728c:	2300      	movs	r3, #0
 801728e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d069      	beq.n	801736a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017296:	68bb      	ldr	r3, [r7, #8]
 8017298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801729a:	4b36      	ldr	r3, [pc, #216]	; (8017374 <xTaskPriorityInherit+0xf4>)
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d259      	bcs.n	8017358 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80172a4:	68bb      	ldr	r3, [r7, #8]
 80172a6:	699b      	ldr	r3, [r3, #24]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	db06      	blt.n	80172ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80172ac:	4b31      	ldr	r3, [pc, #196]	; (8017374 <xTaskPriorityInherit+0xf4>)
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172b2:	f1c3 0207 	rsb	r2, r3, #7
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	6959      	ldr	r1, [r3, #20]
 80172be:	68bb      	ldr	r3, [r7, #8]
 80172c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172c2:	4613      	mov	r3, r2
 80172c4:	009b      	lsls	r3, r3, #2
 80172c6:	4413      	add	r3, r2
 80172c8:	009b      	lsls	r3, r3, #2
 80172ca:	4a2b      	ldr	r2, [pc, #172]	; (8017378 <xTaskPriorityInherit+0xf8>)
 80172cc:	4413      	add	r3, r2
 80172ce:	4299      	cmp	r1, r3
 80172d0:	d13a      	bne.n	8017348 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80172d2:	68bb      	ldr	r3, [r7, #8]
 80172d4:	3304      	adds	r3, #4
 80172d6:	4618      	mov	r0, r3
 80172d8:	f7fe f95d 	bl	8015596 <uxListRemove>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d115      	bne.n	801730e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80172e2:	68bb      	ldr	r3, [r7, #8]
 80172e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80172e6:	4924      	ldr	r1, [pc, #144]	; (8017378 <xTaskPriorityInherit+0xf8>)
 80172e8:	4613      	mov	r3, r2
 80172ea:	009b      	lsls	r3, r3, #2
 80172ec:	4413      	add	r3, r2
 80172ee:	009b      	lsls	r3, r3, #2
 80172f0:	440b      	add	r3, r1
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d10a      	bne.n	801730e <xTaskPriorityInherit+0x8e>
 80172f8:	68bb      	ldr	r3, [r7, #8]
 80172fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172fc:	2201      	movs	r2, #1
 80172fe:	fa02 f303 	lsl.w	r3, r2, r3
 8017302:	43da      	mvns	r2, r3
 8017304:	4b1d      	ldr	r3, [pc, #116]	; (801737c <xTaskPriorityInherit+0xfc>)
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	4013      	ands	r3, r2
 801730a:	4a1c      	ldr	r2, [pc, #112]	; (801737c <xTaskPriorityInherit+0xfc>)
 801730c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801730e:	4b19      	ldr	r3, [pc, #100]	; (8017374 <xTaskPriorityInherit+0xf4>)
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017314:	68bb      	ldr	r3, [r7, #8]
 8017316:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801731c:	2201      	movs	r2, #1
 801731e:	409a      	lsls	r2, r3
 8017320:	4b16      	ldr	r3, [pc, #88]	; (801737c <xTaskPriorityInherit+0xfc>)
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	4313      	orrs	r3, r2
 8017326:	4a15      	ldr	r2, [pc, #84]	; (801737c <xTaskPriorityInherit+0xfc>)
 8017328:	6013      	str	r3, [r2, #0]
 801732a:	68bb      	ldr	r3, [r7, #8]
 801732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801732e:	4613      	mov	r3, r2
 8017330:	009b      	lsls	r3, r3, #2
 8017332:	4413      	add	r3, r2
 8017334:	009b      	lsls	r3, r3, #2
 8017336:	4a10      	ldr	r2, [pc, #64]	; (8017378 <xTaskPriorityInherit+0xf8>)
 8017338:	441a      	add	r2, r3
 801733a:	68bb      	ldr	r3, [r7, #8]
 801733c:	3304      	adds	r3, #4
 801733e:	4619      	mov	r1, r3
 8017340:	4610      	mov	r0, r2
 8017342:	f7fe f8cd 	bl	80154e0 <vListInsertEnd>
 8017346:	e004      	b.n	8017352 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017348:	4b0a      	ldr	r3, [pc, #40]	; (8017374 <xTaskPriorityInherit+0xf4>)
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017352:	2301      	movs	r3, #1
 8017354:	60fb      	str	r3, [r7, #12]
 8017356:	e008      	b.n	801736a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801735c:	4b05      	ldr	r3, [pc, #20]	; (8017374 <xTaskPriorityInherit+0xf4>)
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017362:	429a      	cmp	r2, r3
 8017364:	d201      	bcs.n	801736a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017366:	2301      	movs	r3, #1
 8017368:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801736a:	68fb      	ldr	r3, [r7, #12]
	}
 801736c:	4618      	mov	r0, r3
 801736e:	3710      	adds	r7, #16
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}
 8017374:	20002364 	.word	0x20002364
 8017378:	20002368 	.word	0x20002368
 801737c:	2000246c 	.word	0x2000246c

08017380 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017380:	b580      	push	{r7, lr}
 8017382:	b086      	sub	sp, #24
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801738c:	2300      	movs	r3, #0
 801738e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d06e      	beq.n	8017474 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017396:	4b3a      	ldr	r3, [pc, #232]	; (8017480 <xTaskPriorityDisinherit+0x100>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	693a      	ldr	r2, [r7, #16]
 801739c:	429a      	cmp	r2, r3
 801739e:	d00a      	beq.n	80173b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80173a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173a4:	f383 8811 	msr	BASEPRI, r3
 80173a8:	f3bf 8f6f 	isb	sy
 80173ac:	f3bf 8f4f 	dsb	sy
 80173b0:	60fb      	str	r3, [r7, #12]
}
 80173b2:	bf00      	nop
 80173b4:	e7fe      	b.n	80173b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80173b6:	693b      	ldr	r3, [r7, #16]
 80173b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d10a      	bne.n	80173d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80173be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173c2:	f383 8811 	msr	BASEPRI, r3
 80173c6:	f3bf 8f6f 	isb	sy
 80173ca:	f3bf 8f4f 	dsb	sy
 80173ce:	60bb      	str	r3, [r7, #8]
}
 80173d0:	bf00      	nop
 80173d2:	e7fe      	b.n	80173d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80173d4:	693b      	ldr	r3, [r7, #16]
 80173d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80173d8:	1e5a      	subs	r2, r3, #1
 80173da:	693b      	ldr	r3, [r7, #16]
 80173dc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80173de:	693b      	ldr	r3, [r7, #16]
 80173e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173e2:	693b      	ldr	r3, [r7, #16]
 80173e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173e6:	429a      	cmp	r2, r3
 80173e8:	d044      	beq.n	8017474 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80173ea:	693b      	ldr	r3, [r7, #16]
 80173ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d140      	bne.n	8017474 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80173f2:	693b      	ldr	r3, [r7, #16]
 80173f4:	3304      	adds	r3, #4
 80173f6:	4618      	mov	r0, r3
 80173f8:	f7fe f8cd 	bl	8015596 <uxListRemove>
 80173fc:	4603      	mov	r3, r0
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d115      	bne.n	801742e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017402:	693b      	ldr	r3, [r7, #16]
 8017404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017406:	491f      	ldr	r1, [pc, #124]	; (8017484 <xTaskPriorityDisinherit+0x104>)
 8017408:	4613      	mov	r3, r2
 801740a:	009b      	lsls	r3, r3, #2
 801740c:	4413      	add	r3, r2
 801740e:	009b      	lsls	r3, r3, #2
 8017410:	440b      	add	r3, r1
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d10a      	bne.n	801742e <xTaskPriorityDisinherit+0xae>
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801741c:	2201      	movs	r2, #1
 801741e:	fa02 f303 	lsl.w	r3, r2, r3
 8017422:	43da      	mvns	r2, r3
 8017424:	4b18      	ldr	r3, [pc, #96]	; (8017488 <xTaskPriorityDisinherit+0x108>)
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	4013      	ands	r3, r2
 801742a:	4a17      	ldr	r2, [pc, #92]	; (8017488 <xTaskPriorityDisinherit+0x108>)
 801742c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017432:	693b      	ldr	r3, [r7, #16]
 8017434:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801743a:	f1c3 0207 	rsb	r2, r3, #7
 801743e:	693b      	ldr	r3, [r7, #16]
 8017440:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017442:	693b      	ldr	r3, [r7, #16]
 8017444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017446:	2201      	movs	r2, #1
 8017448:	409a      	lsls	r2, r3
 801744a:	4b0f      	ldr	r3, [pc, #60]	; (8017488 <xTaskPriorityDisinherit+0x108>)
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	4313      	orrs	r3, r2
 8017450:	4a0d      	ldr	r2, [pc, #52]	; (8017488 <xTaskPriorityDisinherit+0x108>)
 8017452:	6013      	str	r3, [r2, #0]
 8017454:	693b      	ldr	r3, [r7, #16]
 8017456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017458:	4613      	mov	r3, r2
 801745a:	009b      	lsls	r3, r3, #2
 801745c:	4413      	add	r3, r2
 801745e:	009b      	lsls	r3, r3, #2
 8017460:	4a08      	ldr	r2, [pc, #32]	; (8017484 <xTaskPriorityDisinherit+0x104>)
 8017462:	441a      	add	r2, r3
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	3304      	adds	r3, #4
 8017468:	4619      	mov	r1, r3
 801746a:	4610      	mov	r0, r2
 801746c:	f7fe f838 	bl	80154e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017470:	2301      	movs	r3, #1
 8017472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017474:	697b      	ldr	r3, [r7, #20]
	}
 8017476:	4618      	mov	r0, r3
 8017478:	3718      	adds	r7, #24
 801747a:	46bd      	mov	sp, r7
 801747c:	bd80      	pop	{r7, pc}
 801747e:	bf00      	nop
 8017480:	20002364 	.word	0x20002364
 8017484:	20002368 	.word	0x20002368
 8017488:	2000246c 	.word	0x2000246c

0801748c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801748c:	b580      	push	{r7, lr}
 801748e:	b088      	sub	sp, #32
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
 8017494:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801749a:	2301      	movs	r3, #1
 801749c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	f000 8083 	beq.w	80175ac <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80174a6:	69bb      	ldr	r3, [r7, #24]
 80174a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d10a      	bne.n	80174c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80174ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174b2:	f383 8811 	msr	BASEPRI, r3
 80174b6:	f3bf 8f6f 	isb	sy
 80174ba:	f3bf 8f4f 	dsb	sy
 80174be:	60fb      	str	r3, [r7, #12]
}
 80174c0:	bf00      	nop
 80174c2:	e7fe      	b.n	80174c2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80174c4:	69bb      	ldr	r3, [r7, #24]
 80174c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174c8:	683a      	ldr	r2, [r7, #0]
 80174ca:	429a      	cmp	r2, r3
 80174cc:	d902      	bls.n	80174d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	61fb      	str	r3, [r7, #28]
 80174d2:	e002      	b.n	80174da <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80174d4:	69bb      	ldr	r3, [r7, #24]
 80174d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80174d8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80174da:	69bb      	ldr	r3, [r7, #24]
 80174dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174de:	69fa      	ldr	r2, [r7, #28]
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d063      	beq.n	80175ac <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80174e4:	69bb      	ldr	r3, [r7, #24]
 80174e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80174e8:	697a      	ldr	r2, [r7, #20]
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d15e      	bne.n	80175ac <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80174ee:	4b31      	ldr	r3, [pc, #196]	; (80175b4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	69ba      	ldr	r2, [r7, #24]
 80174f4:	429a      	cmp	r2, r3
 80174f6:	d10a      	bne.n	801750e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80174f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174fc:	f383 8811 	msr	BASEPRI, r3
 8017500:	f3bf 8f6f 	isb	sy
 8017504:	f3bf 8f4f 	dsb	sy
 8017508:	60bb      	str	r3, [r7, #8]
}
 801750a:	bf00      	nop
 801750c:	e7fe      	b.n	801750c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801750e:	69bb      	ldr	r3, [r7, #24]
 8017510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017512:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017514:	69bb      	ldr	r3, [r7, #24]
 8017516:	69fa      	ldr	r2, [r7, #28]
 8017518:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801751a:	69bb      	ldr	r3, [r7, #24]
 801751c:	699b      	ldr	r3, [r3, #24]
 801751e:	2b00      	cmp	r3, #0
 8017520:	db04      	blt.n	801752c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017522:	69fb      	ldr	r3, [r7, #28]
 8017524:	f1c3 0207 	rsb	r2, r3, #7
 8017528:	69bb      	ldr	r3, [r7, #24]
 801752a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801752c:	69bb      	ldr	r3, [r7, #24]
 801752e:	6959      	ldr	r1, [r3, #20]
 8017530:	693a      	ldr	r2, [r7, #16]
 8017532:	4613      	mov	r3, r2
 8017534:	009b      	lsls	r3, r3, #2
 8017536:	4413      	add	r3, r2
 8017538:	009b      	lsls	r3, r3, #2
 801753a:	4a1f      	ldr	r2, [pc, #124]	; (80175b8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801753c:	4413      	add	r3, r2
 801753e:	4299      	cmp	r1, r3
 8017540:	d134      	bne.n	80175ac <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017542:	69bb      	ldr	r3, [r7, #24]
 8017544:	3304      	adds	r3, #4
 8017546:	4618      	mov	r0, r3
 8017548:	f7fe f825 	bl	8015596 <uxListRemove>
 801754c:	4603      	mov	r3, r0
 801754e:	2b00      	cmp	r3, #0
 8017550:	d115      	bne.n	801757e <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8017552:	69bb      	ldr	r3, [r7, #24]
 8017554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017556:	4918      	ldr	r1, [pc, #96]	; (80175b8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8017558:	4613      	mov	r3, r2
 801755a:	009b      	lsls	r3, r3, #2
 801755c:	4413      	add	r3, r2
 801755e:	009b      	lsls	r3, r3, #2
 8017560:	440b      	add	r3, r1
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d10a      	bne.n	801757e <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8017568:	69bb      	ldr	r3, [r7, #24]
 801756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801756c:	2201      	movs	r2, #1
 801756e:	fa02 f303 	lsl.w	r3, r2, r3
 8017572:	43da      	mvns	r2, r3
 8017574:	4b11      	ldr	r3, [pc, #68]	; (80175bc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	4013      	ands	r3, r2
 801757a:	4a10      	ldr	r2, [pc, #64]	; (80175bc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801757c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801757e:	69bb      	ldr	r3, [r7, #24]
 8017580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017582:	2201      	movs	r2, #1
 8017584:	409a      	lsls	r2, r3
 8017586:	4b0d      	ldr	r3, [pc, #52]	; (80175bc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	4313      	orrs	r3, r2
 801758c:	4a0b      	ldr	r2, [pc, #44]	; (80175bc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801758e:	6013      	str	r3, [r2, #0]
 8017590:	69bb      	ldr	r3, [r7, #24]
 8017592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017594:	4613      	mov	r3, r2
 8017596:	009b      	lsls	r3, r3, #2
 8017598:	4413      	add	r3, r2
 801759a:	009b      	lsls	r3, r3, #2
 801759c:	4a06      	ldr	r2, [pc, #24]	; (80175b8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801759e:	441a      	add	r2, r3
 80175a0:	69bb      	ldr	r3, [r7, #24]
 80175a2:	3304      	adds	r3, #4
 80175a4:	4619      	mov	r1, r3
 80175a6:	4610      	mov	r0, r2
 80175a8:	f7fd ff9a 	bl	80154e0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80175ac:	bf00      	nop
 80175ae:	3720      	adds	r7, #32
 80175b0:	46bd      	mov	sp, r7
 80175b2:	bd80      	pop	{r7, pc}
 80175b4:	20002364 	.word	0x20002364
 80175b8:	20002368 	.word	0x20002368
 80175bc:	2000246c 	.word	0x2000246c

080175c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80175c0:	b480      	push	{r7}
 80175c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80175c4:	4b07      	ldr	r3, [pc, #28]	; (80175e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d004      	beq.n	80175d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80175cc:	4b05      	ldr	r3, [pc, #20]	; (80175e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80175d2:	3201      	adds	r2, #1
 80175d4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80175d6:	4b03      	ldr	r3, [pc, #12]	; (80175e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80175d8:	681b      	ldr	r3, [r3, #0]
	}
 80175da:	4618      	mov	r0, r3
 80175dc:	46bd      	mov	sp, r7
 80175de:	bc80      	pop	{r7}
 80175e0:	4770      	bx	lr
 80175e2:	bf00      	nop
 80175e4:	20002364 	.word	0x20002364

080175e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b084      	sub	sp, #16
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80175f2:	4b29      	ldr	r3, [pc, #164]	; (8017698 <prvAddCurrentTaskToDelayedList+0xb0>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80175f8:	4b28      	ldr	r3, [pc, #160]	; (801769c <prvAddCurrentTaskToDelayedList+0xb4>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	3304      	adds	r3, #4
 80175fe:	4618      	mov	r0, r3
 8017600:	f7fd ffc9 	bl	8015596 <uxListRemove>
 8017604:	4603      	mov	r3, r0
 8017606:	2b00      	cmp	r3, #0
 8017608:	d10b      	bne.n	8017622 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801760a:	4b24      	ldr	r3, [pc, #144]	; (801769c <prvAddCurrentTaskToDelayedList+0xb4>)
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017610:	2201      	movs	r2, #1
 8017612:	fa02 f303 	lsl.w	r3, r2, r3
 8017616:	43da      	mvns	r2, r3
 8017618:	4b21      	ldr	r3, [pc, #132]	; (80176a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	4013      	ands	r3, r2
 801761e:	4a20      	ldr	r2, [pc, #128]	; (80176a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8017620:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017628:	d10a      	bne.n	8017640 <prvAddCurrentTaskToDelayedList+0x58>
 801762a:	683b      	ldr	r3, [r7, #0]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d007      	beq.n	8017640 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017630:	4b1a      	ldr	r3, [pc, #104]	; (801769c <prvAddCurrentTaskToDelayedList+0xb4>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	3304      	adds	r3, #4
 8017636:	4619      	mov	r1, r3
 8017638:	481a      	ldr	r0, [pc, #104]	; (80176a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801763a:	f7fd ff51 	bl	80154e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801763e:	e026      	b.n	801768e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017640:	68fa      	ldr	r2, [r7, #12]
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	4413      	add	r3, r2
 8017646:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017648:	4b14      	ldr	r3, [pc, #80]	; (801769c <prvAddCurrentTaskToDelayedList+0xb4>)
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	68ba      	ldr	r2, [r7, #8]
 801764e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017650:	68ba      	ldr	r2, [r7, #8]
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	429a      	cmp	r2, r3
 8017656:	d209      	bcs.n	801766c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017658:	4b13      	ldr	r3, [pc, #76]	; (80176a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801765a:	681a      	ldr	r2, [r3, #0]
 801765c:	4b0f      	ldr	r3, [pc, #60]	; (801769c <prvAddCurrentTaskToDelayedList+0xb4>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	3304      	adds	r3, #4
 8017662:	4619      	mov	r1, r3
 8017664:	4610      	mov	r0, r2
 8017666:	f7fd ff5e 	bl	8015526 <vListInsert>
}
 801766a:	e010      	b.n	801768e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801766c:	4b0f      	ldr	r3, [pc, #60]	; (80176ac <prvAddCurrentTaskToDelayedList+0xc4>)
 801766e:	681a      	ldr	r2, [r3, #0]
 8017670:	4b0a      	ldr	r3, [pc, #40]	; (801769c <prvAddCurrentTaskToDelayedList+0xb4>)
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	3304      	adds	r3, #4
 8017676:	4619      	mov	r1, r3
 8017678:	4610      	mov	r0, r2
 801767a:	f7fd ff54 	bl	8015526 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801767e:	4b0c      	ldr	r3, [pc, #48]	; (80176b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	68ba      	ldr	r2, [r7, #8]
 8017684:	429a      	cmp	r2, r3
 8017686:	d202      	bcs.n	801768e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017688:	4a09      	ldr	r2, [pc, #36]	; (80176b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801768a:	68bb      	ldr	r3, [r7, #8]
 801768c:	6013      	str	r3, [r2, #0]
}
 801768e:	bf00      	nop
 8017690:	3710      	adds	r7, #16
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop
 8017698:	20002468 	.word	0x20002468
 801769c:	20002364 	.word	0x20002364
 80176a0:	2000246c 	.word	0x2000246c
 80176a4:	20002450 	.word	0x20002450
 80176a8:	20002420 	.word	0x20002420
 80176ac:	2000241c 	.word	0x2000241c
 80176b0:	20002484 	.word	0x20002484

080176b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b08a      	sub	sp, #40	; 0x28
 80176b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80176ba:	2300      	movs	r3, #0
 80176bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80176be:	f000 fae9 	bl	8017c94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80176c2:	4b1c      	ldr	r3, [pc, #112]	; (8017734 <xTimerCreateTimerTask+0x80>)
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d021      	beq.n	801770e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80176ca:	2300      	movs	r3, #0
 80176cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80176ce:	2300      	movs	r3, #0
 80176d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80176d2:	1d3a      	adds	r2, r7, #4
 80176d4:	f107 0108 	add.w	r1, r7, #8
 80176d8:	f107 030c 	add.w	r3, r7, #12
 80176dc:	4618      	mov	r0, r3
 80176de:	f7f1 ff61 	bl	80095a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80176e2:	6879      	ldr	r1, [r7, #4]
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	68fa      	ldr	r2, [r7, #12]
 80176e8:	9202      	str	r2, [sp, #8]
 80176ea:	9301      	str	r3, [sp, #4]
 80176ec:	2302      	movs	r3, #2
 80176ee:	9300      	str	r3, [sp, #0]
 80176f0:	2300      	movs	r3, #0
 80176f2:	460a      	mov	r2, r1
 80176f4:	4910      	ldr	r1, [pc, #64]	; (8017738 <xTimerCreateTimerTask+0x84>)
 80176f6:	4811      	ldr	r0, [pc, #68]	; (801773c <xTimerCreateTimerTask+0x88>)
 80176f8:	f7fe ff16 	bl	8016528 <xTaskCreateStatic>
 80176fc:	4603      	mov	r3, r0
 80176fe:	4a10      	ldr	r2, [pc, #64]	; (8017740 <xTimerCreateTimerTask+0x8c>)
 8017700:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017702:	4b0f      	ldr	r3, [pc, #60]	; (8017740 <xTimerCreateTimerTask+0x8c>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d001      	beq.n	801770e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801770a:	2301      	movs	r3, #1
 801770c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801770e:	697b      	ldr	r3, [r7, #20]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d10a      	bne.n	801772a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017718:	f383 8811 	msr	BASEPRI, r3
 801771c:	f3bf 8f6f 	isb	sy
 8017720:	f3bf 8f4f 	dsb	sy
 8017724:	613b      	str	r3, [r7, #16]
}
 8017726:	bf00      	nop
 8017728:	e7fe      	b.n	8017728 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801772a:	697b      	ldr	r3, [r7, #20]
}
 801772c:	4618      	mov	r0, r3
 801772e:	3718      	adds	r7, #24
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	200024c0 	.word	0x200024c0
 8017738:	0801fc64 	.word	0x0801fc64
 801773c:	08017879 	.word	0x08017879
 8017740:	200024c4 	.word	0x200024c4

08017744 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b08a      	sub	sp, #40	; 0x28
 8017748:	af00      	add	r7, sp, #0
 801774a:	60f8      	str	r0, [r7, #12]
 801774c:	60b9      	str	r1, [r7, #8]
 801774e:	607a      	str	r2, [r7, #4]
 8017750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017752:	2300      	movs	r3, #0
 8017754:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d10a      	bne.n	8017772 <xTimerGenericCommand+0x2e>
	__asm volatile
 801775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017760:	f383 8811 	msr	BASEPRI, r3
 8017764:	f3bf 8f6f 	isb	sy
 8017768:	f3bf 8f4f 	dsb	sy
 801776c:	623b      	str	r3, [r7, #32]
}
 801776e:	bf00      	nop
 8017770:	e7fe      	b.n	8017770 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017772:	4b1a      	ldr	r3, [pc, #104]	; (80177dc <xTimerGenericCommand+0x98>)
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d02a      	beq.n	80177d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801777a:	68bb      	ldr	r3, [r7, #8]
 801777c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017786:	68bb      	ldr	r3, [r7, #8]
 8017788:	2b05      	cmp	r3, #5
 801778a:	dc18      	bgt.n	80177be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801778c:	f7ff fd5a 	bl	8017244 <xTaskGetSchedulerState>
 8017790:	4603      	mov	r3, r0
 8017792:	2b02      	cmp	r3, #2
 8017794:	d109      	bne.n	80177aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017796:	4b11      	ldr	r3, [pc, #68]	; (80177dc <xTimerGenericCommand+0x98>)
 8017798:	6818      	ldr	r0, [r3, #0]
 801779a:	f107 0114 	add.w	r1, r7, #20
 801779e:	2300      	movs	r3, #0
 80177a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177a2:	f7fe f8ad 	bl	8015900 <xQueueGenericSend>
 80177a6:	6278      	str	r0, [r7, #36]	; 0x24
 80177a8:	e012      	b.n	80177d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80177aa:	4b0c      	ldr	r3, [pc, #48]	; (80177dc <xTimerGenericCommand+0x98>)
 80177ac:	6818      	ldr	r0, [r3, #0]
 80177ae:	f107 0114 	add.w	r1, r7, #20
 80177b2:	2300      	movs	r3, #0
 80177b4:	2200      	movs	r2, #0
 80177b6:	f7fe f8a3 	bl	8015900 <xQueueGenericSend>
 80177ba:	6278      	str	r0, [r7, #36]	; 0x24
 80177bc:	e008      	b.n	80177d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80177be:	4b07      	ldr	r3, [pc, #28]	; (80177dc <xTimerGenericCommand+0x98>)
 80177c0:	6818      	ldr	r0, [r3, #0]
 80177c2:	f107 0114 	add.w	r1, r7, #20
 80177c6:	2300      	movs	r3, #0
 80177c8:	683a      	ldr	r2, [r7, #0]
 80177ca:	f7fe f997 	bl	8015afc <xQueueGenericSendFromISR>
 80177ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80177d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80177d2:	4618      	mov	r0, r3
 80177d4:	3728      	adds	r7, #40	; 0x28
 80177d6:	46bd      	mov	sp, r7
 80177d8:	bd80      	pop	{r7, pc}
 80177da:	bf00      	nop
 80177dc:	200024c0 	.word	0x200024c0

080177e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b088      	sub	sp, #32
 80177e4:	af02      	add	r7, sp, #8
 80177e6:	6078      	str	r0, [r7, #4]
 80177e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80177ea:	4b22      	ldr	r3, [pc, #136]	; (8017874 <prvProcessExpiredTimer+0x94>)
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	68db      	ldr	r3, [r3, #12]
 80177f0:	68db      	ldr	r3, [r3, #12]
 80177f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80177f4:	697b      	ldr	r3, [r7, #20]
 80177f6:	3304      	adds	r3, #4
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7fd fecc 	bl	8015596 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017804:	f003 0304 	and.w	r3, r3, #4
 8017808:	2b00      	cmp	r3, #0
 801780a:	d022      	beq.n	8017852 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	699a      	ldr	r2, [r3, #24]
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	18d1      	adds	r1, r2, r3
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	683a      	ldr	r2, [r7, #0]
 8017818:	6978      	ldr	r0, [r7, #20]
 801781a:	f000 f8cf 	bl	80179bc <prvInsertTimerInActiveList>
 801781e:	4603      	mov	r3, r0
 8017820:	2b00      	cmp	r3, #0
 8017822:	d01f      	beq.n	8017864 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017824:	2300      	movs	r3, #0
 8017826:	9300      	str	r3, [sp, #0]
 8017828:	2300      	movs	r3, #0
 801782a:	687a      	ldr	r2, [r7, #4]
 801782c:	2100      	movs	r1, #0
 801782e:	6978      	ldr	r0, [r7, #20]
 8017830:	f7ff ff88 	bl	8017744 <xTimerGenericCommand>
 8017834:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017836:	693b      	ldr	r3, [r7, #16]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d113      	bne.n	8017864 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017840:	f383 8811 	msr	BASEPRI, r3
 8017844:	f3bf 8f6f 	isb	sy
 8017848:	f3bf 8f4f 	dsb	sy
 801784c:	60fb      	str	r3, [r7, #12]
}
 801784e:	bf00      	nop
 8017850:	e7fe      	b.n	8017850 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017852:	697b      	ldr	r3, [r7, #20]
 8017854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017858:	f023 0301 	bic.w	r3, r3, #1
 801785c:	b2da      	uxtb	r2, r3
 801785e:	697b      	ldr	r3, [r7, #20]
 8017860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017864:	697b      	ldr	r3, [r7, #20]
 8017866:	6a1b      	ldr	r3, [r3, #32]
 8017868:	6978      	ldr	r0, [r7, #20]
 801786a:	4798      	blx	r3
}
 801786c:	bf00      	nop
 801786e:	3718      	adds	r7, #24
 8017870:	46bd      	mov	sp, r7
 8017872:	bd80      	pop	{r7, pc}
 8017874:	200024b8 	.word	0x200024b8

08017878 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b084      	sub	sp, #16
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017880:	f107 0308 	add.w	r3, r7, #8
 8017884:	4618      	mov	r0, r3
 8017886:	f000 f857 	bl	8017938 <prvGetNextExpireTime>
 801788a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801788c:	68bb      	ldr	r3, [r7, #8]
 801788e:	4619      	mov	r1, r3
 8017890:	68f8      	ldr	r0, [r7, #12]
 8017892:	f000 f803 	bl	801789c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017896:	f000 f8d3 	bl	8017a40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801789a:	e7f1      	b.n	8017880 <prvTimerTask+0x8>

0801789c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b084      	sub	sp, #16
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
 80178a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80178a6:	f7ff f8c3 	bl	8016a30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80178aa:	f107 0308 	add.w	r3, r7, #8
 80178ae:	4618      	mov	r0, r3
 80178b0:	f000 f864 	bl	801797c <prvSampleTimeNow>
 80178b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80178b6:	68bb      	ldr	r3, [r7, #8]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d130      	bne.n	801791e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80178bc:	683b      	ldr	r3, [r7, #0]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d10a      	bne.n	80178d8 <prvProcessTimerOrBlockTask+0x3c>
 80178c2:	687a      	ldr	r2, [r7, #4]
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	429a      	cmp	r2, r3
 80178c8:	d806      	bhi.n	80178d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80178ca:	f7ff f8bf 	bl	8016a4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80178ce:	68f9      	ldr	r1, [r7, #12]
 80178d0:	6878      	ldr	r0, [r7, #4]
 80178d2:	f7ff ff85 	bl	80177e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80178d6:	e024      	b.n	8017922 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80178d8:	683b      	ldr	r3, [r7, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d008      	beq.n	80178f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80178de:	4b13      	ldr	r3, [pc, #76]	; (801792c <prvProcessTimerOrBlockTask+0x90>)
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d101      	bne.n	80178ec <prvProcessTimerOrBlockTask+0x50>
 80178e8:	2301      	movs	r3, #1
 80178ea:	e000      	b.n	80178ee <prvProcessTimerOrBlockTask+0x52>
 80178ec:	2300      	movs	r3, #0
 80178ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80178f0:	4b0f      	ldr	r3, [pc, #60]	; (8017930 <prvProcessTimerOrBlockTask+0x94>)
 80178f2:	6818      	ldr	r0, [r3, #0]
 80178f4:	687a      	ldr	r2, [r7, #4]
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	1ad3      	subs	r3, r2, r3
 80178fa:	683a      	ldr	r2, [r7, #0]
 80178fc:	4619      	mov	r1, r3
 80178fe:	f7fe fddf 	bl	80164c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017902:	f7ff f8a3 	bl	8016a4c <xTaskResumeAll>
 8017906:	4603      	mov	r3, r0
 8017908:	2b00      	cmp	r3, #0
 801790a:	d10a      	bne.n	8017922 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801790c:	4b09      	ldr	r3, [pc, #36]	; (8017934 <prvProcessTimerOrBlockTask+0x98>)
 801790e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017912:	601a      	str	r2, [r3, #0]
 8017914:	f3bf 8f4f 	dsb	sy
 8017918:	f3bf 8f6f 	isb	sy
}
 801791c:	e001      	b.n	8017922 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801791e:	f7ff f895 	bl	8016a4c <xTaskResumeAll>
}
 8017922:	bf00      	nop
 8017924:	3710      	adds	r7, #16
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}
 801792a:	bf00      	nop
 801792c:	200024bc 	.word	0x200024bc
 8017930:	200024c0 	.word	0x200024c0
 8017934:	e000ed04 	.word	0xe000ed04

08017938 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017938:	b480      	push	{r7}
 801793a:	b085      	sub	sp, #20
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017940:	4b0d      	ldr	r3, [pc, #52]	; (8017978 <prvGetNextExpireTime+0x40>)
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d101      	bne.n	801794e <prvGetNextExpireTime+0x16>
 801794a:	2201      	movs	r2, #1
 801794c:	e000      	b.n	8017950 <prvGetNextExpireTime+0x18>
 801794e:	2200      	movs	r2, #0
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d105      	bne.n	8017968 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801795c:	4b06      	ldr	r3, [pc, #24]	; (8017978 <prvGetNextExpireTime+0x40>)
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	68db      	ldr	r3, [r3, #12]
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	60fb      	str	r3, [r7, #12]
 8017966:	e001      	b.n	801796c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017968:	2300      	movs	r3, #0
 801796a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801796c:	68fb      	ldr	r3, [r7, #12]
}
 801796e:	4618      	mov	r0, r3
 8017970:	3714      	adds	r7, #20
 8017972:	46bd      	mov	sp, r7
 8017974:	bc80      	pop	{r7}
 8017976:	4770      	bx	lr
 8017978:	200024b8 	.word	0x200024b8

0801797c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801797c:	b580      	push	{r7, lr}
 801797e:	b084      	sub	sp, #16
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017984:	f7ff f8fe 	bl	8016b84 <xTaskGetTickCount>
 8017988:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801798a:	4b0b      	ldr	r3, [pc, #44]	; (80179b8 <prvSampleTimeNow+0x3c>)
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	68fa      	ldr	r2, [r7, #12]
 8017990:	429a      	cmp	r2, r3
 8017992:	d205      	bcs.n	80179a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017994:	f000 f91a 	bl	8017bcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	2201      	movs	r2, #1
 801799c:	601a      	str	r2, [r3, #0]
 801799e:	e002      	b.n	80179a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2200      	movs	r2, #0
 80179a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80179a6:	4a04      	ldr	r2, [pc, #16]	; (80179b8 <prvSampleTimeNow+0x3c>)
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80179ac:	68fb      	ldr	r3, [r7, #12]
}
 80179ae:	4618      	mov	r0, r3
 80179b0:	3710      	adds	r7, #16
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}
 80179b6:	bf00      	nop
 80179b8:	200024c8 	.word	0x200024c8

080179bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b086      	sub	sp, #24
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	60f8      	str	r0, [r7, #12]
 80179c4:	60b9      	str	r1, [r7, #8]
 80179c6:	607a      	str	r2, [r7, #4]
 80179c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80179ca:	2300      	movs	r3, #0
 80179cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	68ba      	ldr	r2, [r7, #8]
 80179d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	68fa      	ldr	r2, [r7, #12]
 80179d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80179da:	68ba      	ldr	r2, [r7, #8]
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	429a      	cmp	r2, r3
 80179e0:	d812      	bhi.n	8017a08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80179e2:	687a      	ldr	r2, [r7, #4]
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	1ad2      	subs	r2, r2, r3
 80179e8:	68fb      	ldr	r3, [r7, #12]
 80179ea:	699b      	ldr	r3, [r3, #24]
 80179ec:	429a      	cmp	r2, r3
 80179ee:	d302      	bcc.n	80179f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80179f0:	2301      	movs	r3, #1
 80179f2:	617b      	str	r3, [r7, #20]
 80179f4:	e01b      	b.n	8017a2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80179f6:	4b10      	ldr	r3, [pc, #64]	; (8017a38 <prvInsertTimerInActiveList+0x7c>)
 80179f8:	681a      	ldr	r2, [r3, #0]
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	3304      	adds	r3, #4
 80179fe:	4619      	mov	r1, r3
 8017a00:	4610      	mov	r0, r2
 8017a02:	f7fd fd90 	bl	8015526 <vListInsert>
 8017a06:	e012      	b.n	8017a2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017a08:	687a      	ldr	r2, [r7, #4]
 8017a0a:	683b      	ldr	r3, [r7, #0]
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	d206      	bcs.n	8017a1e <prvInsertTimerInActiveList+0x62>
 8017a10:	68ba      	ldr	r2, [r7, #8]
 8017a12:	683b      	ldr	r3, [r7, #0]
 8017a14:	429a      	cmp	r2, r3
 8017a16:	d302      	bcc.n	8017a1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017a18:	2301      	movs	r3, #1
 8017a1a:	617b      	str	r3, [r7, #20]
 8017a1c:	e007      	b.n	8017a2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017a1e:	4b07      	ldr	r3, [pc, #28]	; (8017a3c <prvInsertTimerInActiveList+0x80>)
 8017a20:	681a      	ldr	r2, [r3, #0]
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	3304      	adds	r3, #4
 8017a26:	4619      	mov	r1, r3
 8017a28:	4610      	mov	r0, r2
 8017a2a:	f7fd fd7c 	bl	8015526 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017a2e:	697b      	ldr	r3, [r7, #20]
}
 8017a30:	4618      	mov	r0, r3
 8017a32:	3718      	adds	r7, #24
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bd80      	pop	{r7, pc}
 8017a38:	200024bc 	.word	0x200024bc
 8017a3c:	200024b8 	.word	0x200024b8

08017a40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b08c      	sub	sp, #48	; 0x30
 8017a44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017a46:	e0ae      	b.n	8017ba6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	f2c0 80ab 	blt.w	8017ba6 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017a50:	693b      	ldr	r3, [r7, #16]
 8017a52:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a56:	695b      	ldr	r3, [r3, #20]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d004      	beq.n	8017a66 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a5e:	3304      	adds	r3, #4
 8017a60:	4618      	mov	r0, r3
 8017a62:	f7fd fd98 	bl	8015596 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017a66:	1d3b      	adds	r3, r7, #4
 8017a68:	4618      	mov	r0, r3
 8017a6a:	f7ff ff87 	bl	801797c <prvSampleTimeNow>
 8017a6e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8017a70:	68bb      	ldr	r3, [r7, #8]
 8017a72:	2b09      	cmp	r3, #9
 8017a74:	f200 8096 	bhi.w	8017ba4 <prvProcessReceivedCommands+0x164>
 8017a78:	a201      	add	r2, pc, #4	; (adr r2, 8017a80 <prvProcessReceivedCommands+0x40>)
 8017a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a7e:	bf00      	nop
 8017a80:	08017aa9 	.word	0x08017aa9
 8017a84:	08017aa9 	.word	0x08017aa9
 8017a88:	08017aa9 	.word	0x08017aa9
 8017a8c:	08017b1d 	.word	0x08017b1d
 8017a90:	08017b31 	.word	0x08017b31
 8017a94:	08017b7b 	.word	0x08017b7b
 8017a98:	08017aa9 	.word	0x08017aa9
 8017a9c:	08017aa9 	.word	0x08017aa9
 8017aa0:	08017b1d 	.word	0x08017b1d
 8017aa4:	08017b31 	.word	0x08017b31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017aae:	f043 0301 	orr.w	r3, r3, #1
 8017ab2:	b2da      	uxtb	r2, r3
 8017ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017aba:	68fa      	ldr	r2, [r7, #12]
 8017abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017abe:	699b      	ldr	r3, [r3, #24]
 8017ac0:	18d1      	adds	r1, r2, r3
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	6a3a      	ldr	r2, [r7, #32]
 8017ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ac8:	f7ff ff78 	bl	80179bc <prvInsertTimerInActiveList>
 8017acc:	4603      	mov	r3, r0
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d069      	beq.n	8017ba6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad4:	6a1b      	ldr	r3, [r3, #32]
 8017ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ad8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017adc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017ae0:	f003 0304 	and.w	r3, r3, #4
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d05e      	beq.n	8017ba6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017ae8:	68fa      	ldr	r2, [r7, #12]
 8017aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aec:	699b      	ldr	r3, [r3, #24]
 8017aee:	441a      	add	r2, r3
 8017af0:	2300      	movs	r3, #0
 8017af2:	9300      	str	r3, [sp, #0]
 8017af4:	2300      	movs	r3, #0
 8017af6:	2100      	movs	r1, #0
 8017af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017afa:	f7ff fe23 	bl	8017744 <xTimerGenericCommand>
 8017afe:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8017b00:	69fb      	ldr	r3, [r7, #28]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d14f      	bne.n	8017ba6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8017b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b0a:	f383 8811 	msr	BASEPRI, r3
 8017b0e:	f3bf 8f6f 	isb	sy
 8017b12:	f3bf 8f4f 	dsb	sy
 8017b16:	61bb      	str	r3, [r7, #24]
}
 8017b18:	bf00      	nop
 8017b1a:	e7fe      	b.n	8017b1a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017b22:	f023 0301 	bic.w	r3, r3, #1
 8017b26:	b2da      	uxtb	r2, r3
 8017b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8017b2e:	e03a      	b.n	8017ba6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017b36:	f043 0301 	orr.w	r3, r3, #1
 8017b3a:	b2da      	uxtb	r2, r3
 8017b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017b42:	68fa      	ldr	r2, [r7, #12]
 8017b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b4a:	699b      	ldr	r3, [r3, #24]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d10a      	bne.n	8017b66 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8017b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b54:	f383 8811 	msr	BASEPRI, r3
 8017b58:	f3bf 8f6f 	isb	sy
 8017b5c:	f3bf 8f4f 	dsb	sy
 8017b60:	617b      	str	r3, [r7, #20]
}
 8017b62:	bf00      	nop
 8017b64:	e7fe      	b.n	8017b64 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b68:	699a      	ldr	r2, [r3, #24]
 8017b6a:	6a3b      	ldr	r3, [r7, #32]
 8017b6c:	18d1      	adds	r1, r2, r3
 8017b6e:	6a3b      	ldr	r3, [r7, #32]
 8017b70:	6a3a      	ldr	r2, [r7, #32]
 8017b72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b74:	f7ff ff22 	bl	80179bc <prvInsertTimerInActiveList>
					break;
 8017b78:	e015      	b.n	8017ba6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017b80:	f003 0302 	and.w	r3, r3, #2
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d103      	bne.n	8017b90 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8017b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017b8a:	f000 fb81 	bl	8018290 <vPortFree>
 8017b8e:	e00a      	b.n	8017ba6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017b96:	f023 0301 	bic.w	r3, r3, #1
 8017b9a:	b2da      	uxtb	r2, r3
 8017b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017ba2:	e000      	b.n	8017ba6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8017ba4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017ba6:	4b08      	ldr	r3, [pc, #32]	; (8017bc8 <prvProcessReceivedCommands+0x188>)
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	f107 0108 	add.w	r1, r7, #8
 8017bae:	2200      	movs	r2, #0
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7fe f8c9 	bl	8015d48 <xQueueReceive>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	f47f af45 	bne.w	8017a48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8017bbe:	bf00      	nop
 8017bc0:	bf00      	nop
 8017bc2:	3728      	adds	r7, #40	; 0x28
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}
 8017bc8:	200024c0 	.word	0x200024c0

08017bcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b088      	sub	sp, #32
 8017bd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017bd2:	e048      	b.n	8017c66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017bd4:	4b2d      	ldr	r3, [pc, #180]	; (8017c8c <prvSwitchTimerLists+0xc0>)
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	68db      	ldr	r3, [r3, #12]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017bde:	4b2b      	ldr	r3, [pc, #172]	; (8017c8c <prvSwitchTimerLists+0xc0>)
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	68db      	ldr	r3, [r3, #12]
 8017be4:	68db      	ldr	r3, [r3, #12]
 8017be6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	3304      	adds	r3, #4
 8017bec:	4618      	mov	r0, r3
 8017bee:	f7fd fcd2 	bl	8015596 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	6a1b      	ldr	r3, [r3, #32]
 8017bf6:	68f8      	ldr	r0, [r7, #12]
 8017bf8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017c00:	f003 0304 	and.w	r3, r3, #4
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d02e      	beq.n	8017c66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	699b      	ldr	r3, [r3, #24]
 8017c0c:	693a      	ldr	r2, [r7, #16]
 8017c0e:	4413      	add	r3, r2
 8017c10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017c12:	68ba      	ldr	r2, [r7, #8]
 8017c14:	693b      	ldr	r3, [r7, #16]
 8017c16:	429a      	cmp	r2, r3
 8017c18:	d90e      	bls.n	8017c38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	68ba      	ldr	r2, [r7, #8]
 8017c1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	68fa      	ldr	r2, [r7, #12]
 8017c24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017c26:	4b19      	ldr	r3, [pc, #100]	; (8017c8c <prvSwitchTimerLists+0xc0>)
 8017c28:	681a      	ldr	r2, [r3, #0]
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	3304      	adds	r3, #4
 8017c2e:	4619      	mov	r1, r3
 8017c30:	4610      	mov	r0, r2
 8017c32:	f7fd fc78 	bl	8015526 <vListInsert>
 8017c36:	e016      	b.n	8017c66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017c38:	2300      	movs	r3, #0
 8017c3a:	9300      	str	r3, [sp, #0]
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	693a      	ldr	r2, [r7, #16]
 8017c40:	2100      	movs	r1, #0
 8017c42:	68f8      	ldr	r0, [r7, #12]
 8017c44:	f7ff fd7e 	bl	8017744 <xTimerGenericCommand>
 8017c48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d10a      	bne.n	8017c66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c54:	f383 8811 	msr	BASEPRI, r3
 8017c58:	f3bf 8f6f 	isb	sy
 8017c5c:	f3bf 8f4f 	dsb	sy
 8017c60:	603b      	str	r3, [r7, #0]
}
 8017c62:	bf00      	nop
 8017c64:	e7fe      	b.n	8017c64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017c66:	4b09      	ldr	r3, [pc, #36]	; (8017c8c <prvSwitchTimerLists+0xc0>)
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d1b1      	bne.n	8017bd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017c70:	4b06      	ldr	r3, [pc, #24]	; (8017c8c <prvSwitchTimerLists+0xc0>)
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017c76:	4b06      	ldr	r3, [pc, #24]	; (8017c90 <prvSwitchTimerLists+0xc4>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	4a04      	ldr	r2, [pc, #16]	; (8017c8c <prvSwitchTimerLists+0xc0>)
 8017c7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017c7e:	4a04      	ldr	r2, [pc, #16]	; (8017c90 <prvSwitchTimerLists+0xc4>)
 8017c80:	697b      	ldr	r3, [r7, #20]
 8017c82:	6013      	str	r3, [r2, #0]
}
 8017c84:	bf00      	nop
 8017c86:	3718      	adds	r7, #24
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}
 8017c8c:	200024b8 	.word	0x200024b8
 8017c90:	200024bc 	.word	0x200024bc

08017c94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b082      	sub	sp, #8
 8017c98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017c9a:	f000 f92f 	bl	8017efc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017c9e:	4b15      	ldr	r3, [pc, #84]	; (8017cf4 <prvCheckForValidListAndQueue+0x60>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d120      	bne.n	8017ce8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017ca6:	4814      	ldr	r0, [pc, #80]	; (8017cf8 <prvCheckForValidListAndQueue+0x64>)
 8017ca8:	f7fd fbef 	bl	801548a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017cac:	4813      	ldr	r0, [pc, #76]	; (8017cfc <prvCheckForValidListAndQueue+0x68>)
 8017cae:	f7fd fbec 	bl	801548a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017cb2:	4b13      	ldr	r3, [pc, #76]	; (8017d00 <prvCheckForValidListAndQueue+0x6c>)
 8017cb4:	4a10      	ldr	r2, [pc, #64]	; (8017cf8 <prvCheckForValidListAndQueue+0x64>)
 8017cb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017cb8:	4b12      	ldr	r3, [pc, #72]	; (8017d04 <prvCheckForValidListAndQueue+0x70>)
 8017cba:	4a10      	ldr	r2, [pc, #64]	; (8017cfc <prvCheckForValidListAndQueue+0x68>)
 8017cbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	9300      	str	r3, [sp, #0]
 8017cc2:	4b11      	ldr	r3, [pc, #68]	; (8017d08 <prvCheckForValidListAndQueue+0x74>)
 8017cc4:	4a11      	ldr	r2, [pc, #68]	; (8017d0c <prvCheckForValidListAndQueue+0x78>)
 8017cc6:	210c      	movs	r1, #12
 8017cc8:	200a      	movs	r0, #10
 8017cca:	f7fd fcf5 	bl	80156b8 <xQueueGenericCreateStatic>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	4a08      	ldr	r2, [pc, #32]	; (8017cf4 <prvCheckForValidListAndQueue+0x60>)
 8017cd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017cd4:	4b07      	ldr	r3, [pc, #28]	; (8017cf4 <prvCheckForValidListAndQueue+0x60>)
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d005      	beq.n	8017ce8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017cdc:	4b05      	ldr	r3, [pc, #20]	; (8017cf4 <prvCheckForValidListAndQueue+0x60>)
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	490b      	ldr	r1, [pc, #44]	; (8017d10 <prvCheckForValidListAndQueue+0x7c>)
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	f7fe fbc4 	bl	8016470 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017ce8:	f000 f938 	bl	8017f5c <vPortExitCritical>
}
 8017cec:	bf00      	nop
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	bd80      	pop	{r7, pc}
 8017cf2:	bf00      	nop
 8017cf4:	200024c0 	.word	0x200024c0
 8017cf8:	20002490 	.word	0x20002490
 8017cfc:	200024a4 	.word	0x200024a4
 8017d00:	200024b8 	.word	0x200024b8
 8017d04:	200024bc 	.word	0x200024bc
 8017d08:	20002544 	.word	0x20002544
 8017d0c:	200024cc 	.word	0x200024cc
 8017d10:	0801fc6c 	.word	0x0801fc6c

08017d14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017d14:	b480      	push	{r7}
 8017d16:	b085      	sub	sp, #20
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	60f8      	str	r0, [r7, #12]
 8017d1c:	60b9      	str	r1, [r7, #8]
 8017d1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	3b04      	subs	r3, #4
 8017d24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	3b04      	subs	r3, #4
 8017d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017d34:	68bb      	ldr	r3, [r7, #8]
 8017d36:	f023 0201 	bic.w	r2, r3, #1
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	3b04      	subs	r3, #4
 8017d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017d44:	4a08      	ldr	r2, [pc, #32]	; (8017d68 <pxPortInitialiseStack+0x54>)
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	3b14      	subs	r3, #20
 8017d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017d50:	687a      	ldr	r2, [r7, #4]
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	3b20      	subs	r3, #32
 8017d5a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017d5c:	68fb      	ldr	r3, [r7, #12]
}
 8017d5e:	4618      	mov	r0, r3
 8017d60:	3714      	adds	r7, #20
 8017d62:	46bd      	mov	sp, r7
 8017d64:	bc80      	pop	{r7}
 8017d66:	4770      	bx	lr
 8017d68:	08017d6d 	.word	0x08017d6d

08017d6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017d6c:	b480      	push	{r7}
 8017d6e:	b085      	sub	sp, #20
 8017d70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8017d72:	2300      	movs	r3, #0
 8017d74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017d76:	4b12      	ldr	r3, [pc, #72]	; (8017dc0 <prvTaskExitError+0x54>)
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d7e:	d00a      	beq.n	8017d96 <prvTaskExitError+0x2a>
	__asm volatile
 8017d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d84:	f383 8811 	msr	BASEPRI, r3
 8017d88:	f3bf 8f6f 	isb	sy
 8017d8c:	f3bf 8f4f 	dsb	sy
 8017d90:	60fb      	str	r3, [r7, #12]
}
 8017d92:	bf00      	nop
 8017d94:	e7fe      	b.n	8017d94 <prvTaskExitError+0x28>
	__asm volatile
 8017d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d9a:	f383 8811 	msr	BASEPRI, r3
 8017d9e:	f3bf 8f6f 	isb	sy
 8017da2:	f3bf 8f4f 	dsb	sy
 8017da6:	60bb      	str	r3, [r7, #8]
}
 8017da8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017daa:	bf00      	nop
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d0fc      	beq.n	8017dac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017db2:	bf00      	nop
 8017db4:	bf00      	nop
 8017db6:	3714      	adds	r7, #20
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bc80      	pop	{r7}
 8017dbc:	4770      	bx	lr
 8017dbe:	bf00      	nop
 8017dc0:	20000094 	.word	0x20000094
	...

08017dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017dd0:	4b07      	ldr	r3, [pc, #28]	; (8017df0 <pxCurrentTCBConst2>)
 8017dd2:	6819      	ldr	r1, [r3, #0]
 8017dd4:	6808      	ldr	r0, [r1, #0]
 8017dd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017dda:	f380 8809 	msr	PSP, r0
 8017dde:	f3bf 8f6f 	isb	sy
 8017de2:	f04f 0000 	mov.w	r0, #0
 8017de6:	f380 8811 	msr	BASEPRI, r0
 8017dea:	f04e 0e0d 	orr.w	lr, lr, #13
 8017dee:	4770      	bx	lr

08017df0 <pxCurrentTCBConst2>:
 8017df0:	20002364 	.word	0x20002364
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017df4:	bf00      	nop
 8017df6:	bf00      	nop

08017df8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8017df8:	4806      	ldr	r0, [pc, #24]	; (8017e14 <prvPortStartFirstTask+0x1c>)
 8017dfa:	6800      	ldr	r0, [r0, #0]
 8017dfc:	6800      	ldr	r0, [r0, #0]
 8017dfe:	f380 8808 	msr	MSP, r0
 8017e02:	b662      	cpsie	i
 8017e04:	b661      	cpsie	f
 8017e06:	f3bf 8f4f 	dsb	sy
 8017e0a:	f3bf 8f6f 	isb	sy
 8017e0e:	df00      	svc	0
 8017e10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017e12:	bf00      	nop
 8017e14:	e000ed08 	.word	0xe000ed08

08017e18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b084      	sub	sp, #16
 8017e1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017e1e:	4b32      	ldr	r3, [pc, #200]	; (8017ee8 <xPortStartScheduler+0xd0>)
 8017e20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	781b      	ldrb	r3, [r3, #0]
 8017e26:	b2db      	uxtb	r3, r3
 8017e28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	22ff      	movs	r2, #255	; 0xff
 8017e2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	781b      	ldrb	r3, [r3, #0]
 8017e34:	b2db      	uxtb	r3, r3
 8017e36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017e38:	78fb      	ldrb	r3, [r7, #3]
 8017e3a:	b2db      	uxtb	r3, r3
 8017e3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017e40:	b2da      	uxtb	r2, r3
 8017e42:	4b2a      	ldr	r3, [pc, #168]	; (8017eec <xPortStartScheduler+0xd4>)
 8017e44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017e46:	4b2a      	ldr	r3, [pc, #168]	; (8017ef0 <xPortStartScheduler+0xd8>)
 8017e48:	2207      	movs	r2, #7
 8017e4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017e4c:	e009      	b.n	8017e62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8017e4e:	4b28      	ldr	r3, [pc, #160]	; (8017ef0 <xPortStartScheduler+0xd8>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	3b01      	subs	r3, #1
 8017e54:	4a26      	ldr	r2, [pc, #152]	; (8017ef0 <xPortStartScheduler+0xd8>)
 8017e56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017e58:	78fb      	ldrb	r3, [r7, #3]
 8017e5a:	b2db      	uxtb	r3, r3
 8017e5c:	005b      	lsls	r3, r3, #1
 8017e5e:	b2db      	uxtb	r3, r3
 8017e60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017e62:	78fb      	ldrb	r3, [r7, #3]
 8017e64:	b2db      	uxtb	r3, r3
 8017e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017e6a:	2b80      	cmp	r3, #128	; 0x80
 8017e6c:	d0ef      	beq.n	8017e4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017e6e:	4b20      	ldr	r3, [pc, #128]	; (8017ef0 <xPortStartScheduler+0xd8>)
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	f1c3 0307 	rsb	r3, r3, #7
 8017e76:	2b04      	cmp	r3, #4
 8017e78:	d00a      	beq.n	8017e90 <xPortStartScheduler+0x78>
	__asm volatile
 8017e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e7e:	f383 8811 	msr	BASEPRI, r3
 8017e82:	f3bf 8f6f 	isb	sy
 8017e86:	f3bf 8f4f 	dsb	sy
 8017e8a:	60bb      	str	r3, [r7, #8]
}
 8017e8c:	bf00      	nop
 8017e8e:	e7fe      	b.n	8017e8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017e90:	4b17      	ldr	r3, [pc, #92]	; (8017ef0 <xPortStartScheduler+0xd8>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	021b      	lsls	r3, r3, #8
 8017e96:	4a16      	ldr	r2, [pc, #88]	; (8017ef0 <xPortStartScheduler+0xd8>)
 8017e98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017e9a:	4b15      	ldr	r3, [pc, #84]	; (8017ef0 <xPortStartScheduler+0xd8>)
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8017ea2:	4a13      	ldr	r2, [pc, #76]	; (8017ef0 <xPortStartScheduler+0xd8>)
 8017ea4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	b2da      	uxtb	r2, r3
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017eae:	4b11      	ldr	r3, [pc, #68]	; (8017ef4 <xPortStartScheduler+0xdc>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	4a10      	ldr	r2, [pc, #64]	; (8017ef4 <xPortStartScheduler+0xdc>)
 8017eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017eb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017eba:	4b0e      	ldr	r3, [pc, #56]	; (8017ef4 <xPortStartScheduler+0xdc>)
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	4a0d      	ldr	r2, [pc, #52]	; (8017ef4 <xPortStartScheduler+0xdc>)
 8017ec0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017ec4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017ec6:	f000 f8b9 	bl	801803c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017eca:	4b0b      	ldr	r3, [pc, #44]	; (8017ef8 <xPortStartScheduler+0xe0>)
 8017ecc:	2200      	movs	r2, #0
 8017ece:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017ed0:	f7ff ff92 	bl	8017df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017ed4:	f7fe ff1c 	bl	8016d10 <vTaskSwitchContext>
	prvTaskExitError();
 8017ed8:	f7ff ff48 	bl	8017d6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017edc:	2300      	movs	r3, #0
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	3710      	adds	r7, #16
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}
 8017ee6:	bf00      	nop
 8017ee8:	e000e400 	.word	0xe000e400
 8017eec:	2000258c 	.word	0x2000258c
 8017ef0:	20002590 	.word	0x20002590
 8017ef4:	e000ed20 	.word	0xe000ed20
 8017ef8:	20000094 	.word	0x20000094

08017efc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017efc:	b480      	push	{r7}
 8017efe:	b083      	sub	sp, #12
 8017f00:	af00      	add	r7, sp, #0
	__asm volatile
 8017f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f06:	f383 8811 	msr	BASEPRI, r3
 8017f0a:	f3bf 8f6f 	isb	sy
 8017f0e:	f3bf 8f4f 	dsb	sy
 8017f12:	607b      	str	r3, [r7, #4]
}
 8017f14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017f16:	4b0f      	ldr	r3, [pc, #60]	; (8017f54 <vPortEnterCritical+0x58>)
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	3301      	adds	r3, #1
 8017f1c:	4a0d      	ldr	r2, [pc, #52]	; (8017f54 <vPortEnterCritical+0x58>)
 8017f1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017f20:	4b0c      	ldr	r3, [pc, #48]	; (8017f54 <vPortEnterCritical+0x58>)
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	2b01      	cmp	r3, #1
 8017f26:	d10f      	bne.n	8017f48 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017f28:	4b0b      	ldr	r3, [pc, #44]	; (8017f58 <vPortEnterCritical+0x5c>)
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	b2db      	uxtb	r3, r3
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d00a      	beq.n	8017f48 <vPortEnterCritical+0x4c>
	__asm volatile
 8017f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f36:	f383 8811 	msr	BASEPRI, r3
 8017f3a:	f3bf 8f6f 	isb	sy
 8017f3e:	f3bf 8f4f 	dsb	sy
 8017f42:	603b      	str	r3, [r7, #0]
}
 8017f44:	bf00      	nop
 8017f46:	e7fe      	b.n	8017f46 <vPortEnterCritical+0x4a>
	}
}
 8017f48:	bf00      	nop
 8017f4a:	370c      	adds	r7, #12
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bc80      	pop	{r7}
 8017f50:	4770      	bx	lr
 8017f52:	bf00      	nop
 8017f54:	20000094 	.word	0x20000094
 8017f58:	e000ed04 	.word	0xe000ed04

08017f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017f5c:	b480      	push	{r7}
 8017f5e:	b083      	sub	sp, #12
 8017f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017f62:	4b11      	ldr	r3, [pc, #68]	; (8017fa8 <vPortExitCritical+0x4c>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d10a      	bne.n	8017f80 <vPortExitCritical+0x24>
	__asm volatile
 8017f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f6e:	f383 8811 	msr	BASEPRI, r3
 8017f72:	f3bf 8f6f 	isb	sy
 8017f76:	f3bf 8f4f 	dsb	sy
 8017f7a:	607b      	str	r3, [r7, #4]
}
 8017f7c:	bf00      	nop
 8017f7e:	e7fe      	b.n	8017f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017f80:	4b09      	ldr	r3, [pc, #36]	; (8017fa8 <vPortExitCritical+0x4c>)
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	3b01      	subs	r3, #1
 8017f86:	4a08      	ldr	r2, [pc, #32]	; (8017fa8 <vPortExitCritical+0x4c>)
 8017f88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017f8a:	4b07      	ldr	r3, [pc, #28]	; (8017fa8 <vPortExitCritical+0x4c>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d105      	bne.n	8017f9e <vPortExitCritical+0x42>
 8017f92:	2300      	movs	r3, #0
 8017f94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017f96:	683b      	ldr	r3, [r7, #0]
 8017f98:	f383 8811 	msr	BASEPRI, r3
}
 8017f9c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017f9e:	bf00      	nop
 8017fa0:	370c      	adds	r7, #12
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	bc80      	pop	{r7}
 8017fa6:	4770      	bx	lr
 8017fa8:	20000094 	.word	0x20000094
 8017fac:	00000000 	.word	0x00000000

08017fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017fb0:	f3ef 8009 	mrs	r0, PSP
 8017fb4:	f3bf 8f6f 	isb	sy
 8017fb8:	4b0d      	ldr	r3, [pc, #52]	; (8017ff0 <pxCurrentTCBConst>)
 8017fba:	681a      	ldr	r2, [r3, #0]
 8017fbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017fc0:	6010      	str	r0, [r2, #0]
 8017fc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8017fc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017fca:	f380 8811 	msr	BASEPRI, r0
 8017fce:	f7fe fe9f 	bl	8016d10 <vTaskSwitchContext>
 8017fd2:	f04f 0000 	mov.w	r0, #0
 8017fd6:	f380 8811 	msr	BASEPRI, r0
 8017fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017fde:	6819      	ldr	r1, [r3, #0]
 8017fe0:	6808      	ldr	r0, [r1, #0]
 8017fe2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8017fe6:	f380 8809 	msr	PSP, r0
 8017fea:	f3bf 8f6f 	isb	sy
 8017fee:	4770      	bx	lr

08017ff0 <pxCurrentTCBConst>:
 8017ff0:	20002364 	.word	0x20002364
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017ff4:	bf00      	nop
 8017ff6:	bf00      	nop

08017ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b082      	sub	sp, #8
 8017ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8017ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018002:	f383 8811 	msr	BASEPRI, r3
 8018006:	f3bf 8f6f 	isb	sy
 801800a:	f3bf 8f4f 	dsb	sy
 801800e:	607b      	str	r3, [r7, #4]
}
 8018010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018012:	f7fe fdc5 	bl	8016ba0 <xTaskIncrementTick>
 8018016:	4603      	mov	r3, r0
 8018018:	2b00      	cmp	r3, #0
 801801a:	d003      	beq.n	8018024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801801c:	4b06      	ldr	r3, [pc, #24]	; (8018038 <SysTick_Handler+0x40>)
 801801e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018022:	601a      	str	r2, [r3, #0]
 8018024:	2300      	movs	r3, #0
 8018026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	f383 8811 	msr	BASEPRI, r3
}
 801802e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018030:	bf00      	nop
 8018032:	3708      	adds	r7, #8
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	e000ed04 	.word	0xe000ed04

0801803c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801803c:	b480      	push	{r7}
 801803e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018040:	4b0a      	ldr	r3, [pc, #40]	; (801806c <vPortSetupTimerInterrupt+0x30>)
 8018042:	2200      	movs	r2, #0
 8018044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018046:	4b0a      	ldr	r3, [pc, #40]	; (8018070 <vPortSetupTimerInterrupt+0x34>)
 8018048:	2200      	movs	r2, #0
 801804a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801804c:	4b09      	ldr	r3, [pc, #36]	; (8018074 <vPortSetupTimerInterrupt+0x38>)
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	4a09      	ldr	r2, [pc, #36]	; (8018078 <vPortSetupTimerInterrupt+0x3c>)
 8018052:	fba2 2303 	umull	r2, r3, r2, r3
 8018056:	099b      	lsrs	r3, r3, #6
 8018058:	4a08      	ldr	r2, [pc, #32]	; (801807c <vPortSetupTimerInterrupt+0x40>)
 801805a:	3b01      	subs	r3, #1
 801805c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801805e:	4b03      	ldr	r3, [pc, #12]	; (801806c <vPortSetupTimerInterrupt+0x30>)
 8018060:	2207      	movs	r2, #7
 8018062:	601a      	str	r2, [r3, #0]
}
 8018064:	bf00      	nop
 8018066:	46bd      	mov	sp, r7
 8018068:	bc80      	pop	{r7}
 801806a:	4770      	bx	lr
 801806c:	e000e010 	.word	0xe000e010
 8018070:	e000e018 	.word	0xe000e018
 8018074:	20000080 	.word	0x20000080
 8018078:	10624dd3 	.word	0x10624dd3
 801807c:	e000e014 	.word	0xe000e014

08018080 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018080:	b480      	push	{r7}
 8018082:	b085      	sub	sp, #20
 8018084:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018086:	f3ef 8305 	mrs	r3, IPSR
 801808a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	2b0f      	cmp	r3, #15
 8018090:	d914      	bls.n	80180bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018092:	4a16      	ldr	r2, [pc, #88]	; (80180ec <vPortValidateInterruptPriority+0x6c>)
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	4413      	add	r3, r2
 8018098:	781b      	ldrb	r3, [r3, #0]
 801809a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801809c:	4b14      	ldr	r3, [pc, #80]	; (80180f0 <vPortValidateInterruptPriority+0x70>)
 801809e:	781b      	ldrb	r3, [r3, #0]
 80180a0:	7afa      	ldrb	r2, [r7, #11]
 80180a2:	429a      	cmp	r2, r3
 80180a4:	d20a      	bcs.n	80180bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80180a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180aa:	f383 8811 	msr	BASEPRI, r3
 80180ae:	f3bf 8f6f 	isb	sy
 80180b2:	f3bf 8f4f 	dsb	sy
 80180b6:	607b      	str	r3, [r7, #4]
}
 80180b8:	bf00      	nop
 80180ba:	e7fe      	b.n	80180ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80180bc:	4b0d      	ldr	r3, [pc, #52]	; (80180f4 <vPortValidateInterruptPriority+0x74>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80180c4:	4b0c      	ldr	r3, [pc, #48]	; (80180f8 <vPortValidateInterruptPriority+0x78>)
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	429a      	cmp	r2, r3
 80180ca:	d90a      	bls.n	80180e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80180cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180d0:	f383 8811 	msr	BASEPRI, r3
 80180d4:	f3bf 8f6f 	isb	sy
 80180d8:	f3bf 8f4f 	dsb	sy
 80180dc:	603b      	str	r3, [r7, #0]
}
 80180de:	bf00      	nop
 80180e0:	e7fe      	b.n	80180e0 <vPortValidateInterruptPriority+0x60>
	}
 80180e2:	bf00      	nop
 80180e4:	3714      	adds	r7, #20
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bc80      	pop	{r7}
 80180ea:	4770      	bx	lr
 80180ec:	e000e3f0 	.word	0xe000e3f0
 80180f0:	2000258c 	.word	0x2000258c
 80180f4:	e000ed0c 	.word	0xe000ed0c
 80180f8:	20002590 	.word	0x20002590

080180fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b08a      	sub	sp, #40	; 0x28
 8018100:	af00      	add	r7, sp, #0
 8018102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018104:	2300      	movs	r3, #0
 8018106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018108:	f7fe fc92 	bl	8016a30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801810c:	4b5b      	ldr	r3, [pc, #364]	; (801827c <pvPortMalloc+0x180>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d101      	bne.n	8018118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018114:	f000 f916 	bl	8018344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018118:	4b59      	ldr	r3, [pc, #356]	; (8018280 <pvPortMalloc+0x184>)
 801811a:	681a      	ldr	r2, [r3, #0]
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	4013      	ands	r3, r2
 8018120:	2b00      	cmp	r3, #0
 8018122:	f040 808e 	bne.w	8018242 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d01d      	beq.n	8018168 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801812c:	2208      	movs	r2, #8
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	4413      	add	r3, r2
 8018132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f003 0307 	and.w	r3, r3, #7
 801813a:	2b00      	cmp	r3, #0
 801813c:	d014      	beq.n	8018168 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	f023 0307 	bic.w	r3, r3, #7
 8018144:	3308      	adds	r3, #8
 8018146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	f003 0307 	and.w	r3, r3, #7
 801814e:	2b00      	cmp	r3, #0
 8018150:	d00a      	beq.n	8018168 <pvPortMalloc+0x6c>
	__asm volatile
 8018152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018156:	f383 8811 	msr	BASEPRI, r3
 801815a:	f3bf 8f6f 	isb	sy
 801815e:	f3bf 8f4f 	dsb	sy
 8018162:	617b      	str	r3, [r7, #20]
}
 8018164:	bf00      	nop
 8018166:	e7fe      	b.n	8018166 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d069      	beq.n	8018242 <pvPortMalloc+0x146>
 801816e:	4b45      	ldr	r3, [pc, #276]	; (8018284 <pvPortMalloc+0x188>)
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	687a      	ldr	r2, [r7, #4]
 8018174:	429a      	cmp	r2, r3
 8018176:	d864      	bhi.n	8018242 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8018178:	4b43      	ldr	r3, [pc, #268]	; (8018288 <pvPortMalloc+0x18c>)
 801817a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801817c:	4b42      	ldr	r3, [pc, #264]	; (8018288 <pvPortMalloc+0x18c>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018182:	e004      	b.n	801818e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8018184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018186:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8018188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018190:	685b      	ldr	r3, [r3, #4]
 8018192:	687a      	ldr	r2, [r7, #4]
 8018194:	429a      	cmp	r2, r3
 8018196:	d903      	bls.n	80181a0 <pvPortMalloc+0xa4>
 8018198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d1f1      	bne.n	8018184 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80181a0:	4b36      	ldr	r3, [pc, #216]	; (801827c <pvPortMalloc+0x180>)
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181a6:	429a      	cmp	r2, r3
 80181a8:	d04b      	beq.n	8018242 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80181aa:	6a3b      	ldr	r3, [r7, #32]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	2208      	movs	r2, #8
 80181b0:	4413      	add	r3, r2
 80181b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80181b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b6:	681a      	ldr	r2, [r3, #0]
 80181b8:	6a3b      	ldr	r3, [r7, #32]
 80181ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80181bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181be:	685a      	ldr	r2, [r3, #4]
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	1ad2      	subs	r2, r2, r3
 80181c4:	2308      	movs	r3, #8
 80181c6:	005b      	lsls	r3, r3, #1
 80181c8:	429a      	cmp	r2, r3
 80181ca:	d91f      	bls.n	801820c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80181cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	4413      	add	r3, r2
 80181d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80181d4:	69bb      	ldr	r3, [r7, #24]
 80181d6:	f003 0307 	and.w	r3, r3, #7
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d00a      	beq.n	80181f4 <pvPortMalloc+0xf8>
	__asm volatile
 80181de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181e2:	f383 8811 	msr	BASEPRI, r3
 80181e6:	f3bf 8f6f 	isb	sy
 80181ea:	f3bf 8f4f 	dsb	sy
 80181ee:	613b      	str	r3, [r7, #16]
}
 80181f0:	bf00      	nop
 80181f2:	e7fe      	b.n	80181f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80181f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f6:	685a      	ldr	r2, [r3, #4]
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	1ad2      	subs	r2, r2, r3
 80181fc:	69bb      	ldr	r3, [r7, #24]
 80181fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018202:	687a      	ldr	r2, [r7, #4]
 8018204:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018206:	69b8      	ldr	r0, [r7, #24]
 8018208:	f000 f8fe 	bl	8018408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801820c:	4b1d      	ldr	r3, [pc, #116]	; (8018284 <pvPortMalloc+0x188>)
 801820e:	681a      	ldr	r2, [r3, #0]
 8018210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018212:	685b      	ldr	r3, [r3, #4]
 8018214:	1ad3      	subs	r3, r2, r3
 8018216:	4a1b      	ldr	r2, [pc, #108]	; (8018284 <pvPortMalloc+0x188>)
 8018218:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801821a:	4b1a      	ldr	r3, [pc, #104]	; (8018284 <pvPortMalloc+0x188>)
 801821c:	681a      	ldr	r2, [r3, #0]
 801821e:	4b1b      	ldr	r3, [pc, #108]	; (801828c <pvPortMalloc+0x190>)
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	429a      	cmp	r2, r3
 8018224:	d203      	bcs.n	801822e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018226:	4b17      	ldr	r3, [pc, #92]	; (8018284 <pvPortMalloc+0x188>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	4a18      	ldr	r2, [pc, #96]	; (801828c <pvPortMalloc+0x190>)
 801822c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018230:	685a      	ldr	r2, [r3, #4]
 8018232:	4b13      	ldr	r3, [pc, #76]	; (8018280 <pvPortMalloc+0x184>)
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	431a      	orrs	r2, r3
 8018238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801823a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801823e:	2200      	movs	r2, #0
 8018240:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018242:	f7fe fc03 	bl	8016a4c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8018246:	69fb      	ldr	r3, [r7, #28]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d101      	bne.n	8018250 <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801824c:	f7f1 f9e0 	bl	8009610 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8018250:	69fb      	ldr	r3, [r7, #28]
 8018252:	f003 0307 	and.w	r3, r3, #7
 8018256:	2b00      	cmp	r3, #0
 8018258:	d00a      	beq.n	8018270 <pvPortMalloc+0x174>
	__asm volatile
 801825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801825e:	f383 8811 	msr	BASEPRI, r3
 8018262:	f3bf 8f6f 	isb	sy
 8018266:	f3bf 8f4f 	dsb	sy
 801826a:	60fb      	str	r3, [r7, #12]
}
 801826c:	bf00      	nop
 801826e:	e7fe      	b.n	801826e <pvPortMalloc+0x172>
	return pvReturn;
 8018270:	69fb      	ldr	r3, [r7, #28]
}
 8018272:	4618      	mov	r0, r3
 8018274:	3728      	adds	r7, #40	; 0x28
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}
 801827a:	bf00      	nop
 801827c:	2000559c 	.word	0x2000559c
 8018280:	200055a8 	.word	0x200055a8
 8018284:	200055a0 	.word	0x200055a0
 8018288:	20005594 	.word	0x20005594
 801828c:	200055a4 	.word	0x200055a4

08018290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b086      	sub	sp, #24
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d048      	beq.n	8018334 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80182a2:	2308      	movs	r3, #8
 80182a4:	425b      	negs	r3, r3
 80182a6:	697a      	ldr	r2, [r7, #20]
 80182a8:	4413      	add	r3, r2
 80182aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80182ac:	697b      	ldr	r3, [r7, #20]
 80182ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80182b0:	693b      	ldr	r3, [r7, #16]
 80182b2:	685a      	ldr	r2, [r3, #4]
 80182b4:	4b21      	ldr	r3, [pc, #132]	; (801833c <vPortFree+0xac>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	4013      	ands	r3, r2
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d10a      	bne.n	80182d4 <vPortFree+0x44>
	__asm volatile
 80182be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182c2:	f383 8811 	msr	BASEPRI, r3
 80182c6:	f3bf 8f6f 	isb	sy
 80182ca:	f3bf 8f4f 	dsb	sy
 80182ce:	60fb      	str	r3, [r7, #12]
}
 80182d0:	bf00      	nop
 80182d2:	e7fe      	b.n	80182d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80182d4:	693b      	ldr	r3, [r7, #16]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d00a      	beq.n	80182f2 <vPortFree+0x62>
	__asm volatile
 80182dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182e0:	f383 8811 	msr	BASEPRI, r3
 80182e4:	f3bf 8f6f 	isb	sy
 80182e8:	f3bf 8f4f 	dsb	sy
 80182ec:	60bb      	str	r3, [r7, #8]
}
 80182ee:	bf00      	nop
 80182f0:	e7fe      	b.n	80182f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80182f2:	693b      	ldr	r3, [r7, #16]
 80182f4:	685a      	ldr	r2, [r3, #4]
 80182f6:	4b11      	ldr	r3, [pc, #68]	; (801833c <vPortFree+0xac>)
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	4013      	ands	r3, r2
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d019      	beq.n	8018334 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018300:	693b      	ldr	r3, [r7, #16]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d115      	bne.n	8018334 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018308:	693b      	ldr	r3, [r7, #16]
 801830a:	685a      	ldr	r2, [r3, #4]
 801830c:	4b0b      	ldr	r3, [pc, #44]	; (801833c <vPortFree+0xac>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	43db      	mvns	r3, r3
 8018312:	401a      	ands	r2, r3
 8018314:	693b      	ldr	r3, [r7, #16]
 8018316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018318:	f7fe fb8a 	bl	8016a30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801831c:	693b      	ldr	r3, [r7, #16]
 801831e:	685a      	ldr	r2, [r3, #4]
 8018320:	4b07      	ldr	r3, [pc, #28]	; (8018340 <vPortFree+0xb0>)
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	4413      	add	r3, r2
 8018326:	4a06      	ldr	r2, [pc, #24]	; (8018340 <vPortFree+0xb0>)
 8018328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801832a:	6938      	ldr	r0, [r7, #16]
 801832c:	f000 f86c 	bl	8018408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8018330:	f7fe fb8c 	bl	8016a4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018334:	bf00      	nop
 8018336:	3718      	adds	r7, #24
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}
 801833c:	200055a8 	.word	0x200055a8
 8018340:	200055a0 	.word	0x200055a0

08018344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018344:	b480      	push	{r7}
 8018346:	b085      	sub	sp, #20
 8018348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801834a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801834e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018350:	4b27      	ldr	r3, [pc, #156]	; (80183f0 <prvHeapInit+0xac>)
 8018352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	f003 0307 	and.w	r3, r3, #7
 801835a:	2b00      	cmp	r3, #0
 801835c:	d00c      	beq.n	8018378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	3307      	adds	r3, #7
 8018362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	f023 0307 	bic.w	r3, r3, #7
 801836a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801836c:	68ba      	ldr	r2, [r7, #8]
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	1ad3      	subs	r3, r2, r3
 8018372:	4a1f      	ldr	r2, [pc, #124]	; (80183f0 <prvHeapInit+0xac>)
 8018374:	4413      	add	r3, r2
 8018376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801837c:	4a1d      	ldr	r2, [pc, #116]	; (80183f4 <prvHeapInit+0xb0>)
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018382:	4b1c      	ldr	r3, [pc, #112]	; (80183f4 <prvHeapInit+0xb0>)
 8018384:	2200      	movs	r2, #0
 8018386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	68ba      	ldr	r2, [r7, #8]
 801838c:	4413      	add	r3, r2
 801838e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018390:	2208      	movs	r2, #8
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	1a9b      	subs	r3, r3, r2
 8018396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	f023 0307 	bic.w	r3, r3, #7
 801839e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	4a15      	ldr	r2, [pc, #84]	; (80183f8 <prvHeapInit+0xb4>)
 80183a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80183a6:	4b14      	ldr	r3, [pc, #80]	; (80183f8 <prvHeapInit+0xb4>)
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	2200      	movs	r2, #0
 80183ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80183ae:	4b12      	ldr	r3, [pc, #72]	; (80183f8 <prvHeapInit+0xb4>)
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	2200      	movs	r2, #0
 80183b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80183ba:	683b      	ldr	r3, [r7, #0]
 80183bc:	68fa      	ldr	r2, [r7, #12]
 80183be:	1ad2      	subs	r2, r2, r3
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80183c4:	4b0c      	ldr	r3, [pc, #48]	; (80183f8 <prvHeapInit+0xb4>)
 80183c6:	681a      	ldr	r2, [r3, #0]
 80183c8:	683b      	ldr	r3, [r7, #0]
 80183ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80183cc:	683b      	ldr	r3, [r7, #0]
 80183ce:	685b      	ldr	r3, [r3, #4]
 80183d0:	4a0a      	ldr	r2, [pc, #40]	; (80183fc <prvHeapInit+0xb8>)
 80183d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80183d4:	683b      	ldr	r3, [r7, #0]
 80183d6:	685b      	ldr	r3, [r3, #4]
 80183d8:	4a09      	ldr	r2, [pc, #36]	; (8018400 <prvHeapInit+0xbc>)
 80183da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80183dc:	4b09      	ldr	r3, [pc, #36]	; (8018404 <prvHeapInit+0xc0>)
 80183de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80183e2:	601a      	str	r2, [r3, #0]
}
 80183e4:	bf00      	nop
 80183e6:	3714      	adds	r7, #20
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bc80      	pop	{r7}
 80183ec:	4770      	bx	lr
 80183ee:	bf00      	nop
 80183f0:	20002594 	.word	0x20002594
 80183f4:	20005594 	.word	0x20005594
 80183f8:	2000559c 	.word	0x2000559c
 80183fc:	200055a4 	.word	0x200055a4
 8018400:	200055a0 	.word	0x200055a0
 8018404:	200055a8 	.word	0x200055a8

08018408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018408:	b480      	push	{r7}
 801840a:	b085      	sub	sp, #20
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018410:	4b27      	ldr	r3, [pc, #156]	; (80184b0 <prvInsertBlockIntoFreeList+0xa8>)
 8018412:	60fb      	str	r3, [r7, #12]
 8018414:	e002      	b.n	801841c <prvInsertBlockIntoFreeList+0x14>
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	60fb      	str	r3, [r7, #12]
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	687a      	ldr	r2, [r7, #4]
 8018422:	429a      	cmp	r2, r3
 8018424:	d8f7      	bhi.n	8018416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	685b      	ldr	r3, [r3, #4]
 801842e:	68ba      	ldr	r2, [r7, #8]
 8018430:	4413      	add	r3, r2
 8018432:	687a      	ldr	r2, [r7, #4]
 8018434:	429a      	cmp	r2, r3
 8018436:	d108      	bne.n	801844a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	685a      	ldr	r2, [r3, #4]
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	685b      	ldr	r3, [r3, #4]
 8018440:	441a      	add	r2, r3
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	685b      	ldr	r3, [r3, #4]
 8018452:	68ba      	ldr	r2, [r7, #8]
 8018454:	441a      	add	r2, r3
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	429a      	cmp	r2, r3
 801845c:	d118      	bne.n	8018490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	681a      	ldr	r2, [r3, #0]
 8018462:	4b14      	ldr	r3, [pc, #80]	; (80184b4 <prvInsertBlockIntoFreeList+0xac>)
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	429a      	cmp	r2, r3
 8018468:	d00d      	beq.n	8018486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	685a      	ldr	r2, [r3, #4]
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	441a      	add	r2, r3
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	681a      	ldr	r2, [r3, #0]
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	601a      	str	r2, [r3, #0]
 8018484:	e008      	b.n	8018498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018486:	4b0b      	ldr	r3, [pc, #44]	; (80184b4 <prvInsertBlockIntoFreeList+0xac>)
 8018488:	681a      	ldr	r2, [r3, #0]
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	601a      	str	r2, [r3, #0]
 801848e:	e003      	b.n	8018498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018490:	68fb      	ldr	r3, [r7, #12]
 8018492:	681a      	ldr	r2, [r3, #0]
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018498:	68fa      	ldr	r2, [r7, #12]
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	429a      	cmp	r2, r3
 801849e:	d002      	beq.n	80184a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	687a      	ldr	r2, [r7, #4]
 80184a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80184a6:	bf00      	nop
 80184a8:	3714      	adds	r7, #20
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bc80      	pop	{r7}
 80184ae:	4770      	bx	lr
 80184b0:	20005594 	.word	0x20005594
 80184b4:	2000559c 	.word	0x2000559c

080184b8 <std>:
 80184b8:	2300      	movs	r3, #0
 80184ba:	b510      	push	{r4, lr}
 80184bc:	4604      	mov	r4, r0
 80184be:	e9c0 3300 	strd	r3, r3, [r0]
 80184c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80184c6:	6083      	str	r3, [r0, #8]
 80184c8:	8181      	strh	r1, [r0, #12]
 80184ca:	6643      	str	r3, [r0, #100]	; 0x64
 80184cc:	81c2      	strh	r2, [r0, #14]
 80184ce:	6183      	str	r3, [r0, #24]
 80184d0:	4619      	mov	r1, r3
 80184d2:	2208      	movs	r2, #8
 80184d4:	305c      	adds	r0, #92	; 0x5c
 80184d6:	f000 fb6d 	bl	8018bb4 <memset>
 80184da:	4b05      	ldr	r3, [pc, #20]	; (80184f0 <std+0x38>)
 80184dc:	6223      	str	r3, [r4, #32]
 80184de:	4b05      	ldr	r3, [pc, #20]	; (80184f4 <std+0x3c>)
 80184e0:	6263      	str	r3, [r4, #36]	; 0x24
 80184e2:	4b05      	ldr	r3, [pc, #20]	; (80184f8 <std+0x40>)
 80184e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80184e6:	4b05      	ldr	r3, [pc, #20]	; (80184fc <std+0x44>)
 80184e8:	61e4      	str	r4, [r4, #28]
 80184ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80184ec:	bd10      	pop	{r4, pc}
 80184ee:	bf00      	nop
 80184f0:	08018a29 	.word	0x08018a29
 80184f4:	08018a4b 	.word	0x08018a4b
 80184f8:	08018a83 	.word	0x08018a83
 80184fc:	08018aa7 	.word	0x08018aa7

08018500 <stdio_exit_handler>:
 8018500:	4a02      	ldr	r2, [pc, #8]	; (801850c <stdio_exit_handler+0xc>)
 8018502:	4903      	ldr	r1, [pc, #12]	; (8018510 <stdio_exit_handler+0x10>)
 8018504:	4803      	ldr	r0, [pc, #12]	; (8018514 <stdio_exit_handler+0x14>)
 8018506:	f000 b9c5 	b.w	8018894 <_fwalk_sglue>
 801850a:	bf00      	nop
 801850c:	20000098 	.word	0x20000098
 8018510:	0801ca29 	.word	0x0801ca29
 8018514:	200000a8 	.word	0x200000a8

08018518 <cleanup_stdio>:
 8018518:	6841      	ldr	r1, [r0, #4]
 801851a:	4b0c      	ldr	r3, [pc, #48]	; (801854c <cleanup_stdio+0x34>)
 801851c:	4299      	cmp	r1, r3
 801851e:	b510      	push	{r4, lr}
 8018520:	4604      	mov	r4, r0
 8018522:	d001      	beq.n	8018528 <cleanup_stdio+0x10>
 8018524:	f004 fa80 	bl	801ca28 <_fclose_r>
 8018528:	68a1      	ldr	r1, [r4, #8]
 801852a:	4b09      	ldr	r3, [pc, #36]	; (8018550 <cleanup_stdio+0x38>)
 801852c:	4299      	cmp	r1, r3
 801852e:	d002      	beq.n	8018536 <cleanup_stdio+0x1e>
 8018530:	4620      	mov	r0, r4
 8018532:	f004 fa79 	bl	801ca28 <_fclose_r>
 8018536:	68e1      	ldr	r1, [r4, #12]
 8018538:	4b06      	ldr	r3, [pc, #24]	; (8018554 <cleanup_stdio+0x3c>)
 801853a:	4299      	cmp	r1, r3
 801853c:	d004      	beq.n	8018548 <cleanup_stdio+0x30>
 801853e:	4620      	mov	r0, r4
 8018540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018544:	f004 ba70 	b.w	801ca28 <_fclose_r>
 8018548:	bd10      	pop	{r4, pc}
 801854a:	bf00      	nop
 801854c:	200055ac 	.word	0x200055ac
 8018550:	20005614 	.word	0x20005614
 8018554:	2000567c 	.word	0x2000567c

08018558 <global_stdio_init.part.0>:
 8018558:	b510      	push	{r4, lr}
 801855a:	4b0b      	ldr	r3, [pc, #44]	; (8018588 <global_stdio_init.part.0+0x30>)
 801855c:	4c0b      	ldr	r4, [pc, #44]	; (801858c <global_stdio_init.part.0+0x34>)
 801855e:	4a0c      	ldr	r2, [pc, #48]	; (8018590 <global_stdio_init.part.0+0x38>)
 8018560:	601a      	str	r2, [r3, #0]
 8018562:	4620      	mov	r0, r4
 8018564:	2200      	movs	r2, #0
 8018566:	2104      	movs	r1, #4
 8018568:	f7ff ffa6 	bl	80184b8 <std>
 801856c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018570:	2201      	movs	r2, #1
 8018572:	2109      	movs	r1, #9
 8018574:	f7ff ffa0 	bl	80184b8 <std>
 8018578:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801857c:	2202      	movs	r2, #2
 801857e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018582:	2112      	movs	r1, #18
 8018584:	f7ff bf98 	b.w	80184b8 <std>
 8018588:	200056e4 	.word	0x200056e4
 801858c:	200055ac 	.word	0x200055ac
 8018590:	08018501 	.word	0x08018501

08018594 <__sfp_lock_acquire>:
 8018594:	4801      	ldr	r0, [pc, #4]	; (801859c <__sfp_lock_acquire+0x8>)
 8018596:	f000 bbf7 	b.w	8018d88 <__retarget_lock_acquire_recursive>
 801859a:	bf00      	nop
 801859c:	200056ee 	.word	0x200056ee

080185a0 <__sfp_lock_release>:
 80185a0:	4801      	ldr	r0, [pc, #4]	; (80185a8 <__sfp_lock_release+0x8>)
 80185a2:	f000 bbf2 	b.w	8018d8a <__retarget_lock_release_recursive>
 80185a6:	bf00      	nop
 80185a8:	200056ee 	.word	0x200056ee

080185ac <__sinit>:
 80185ac:	b510      	push	{r4, lr}
 80185ae:	4604      	mov	r4, r0
 80185b0:	f7ff fff0 	bl	8018594 <__sfp_lock_acquire>
 80185b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80185b6:	b11b      	cbz	r3, 80185c0 <__sinit+0x14>
 80185b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185bc:	f7ff bff0 	b.w	80185a0 <__sfp_lock_release>
 80185c0:	4b04      	ldr	r3, [pc, #16]	; (80185d4 <__sinit+0x28>)
 80185c2:	6363      	str	r3, [r4, #52]	; 0x34
 80185c4:	4b04      	ldr	r3, [pc, #16]	; (80185d8 <__sinit+0x2c>)
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d1f5      	bne.n	80185b8 <__sinit+0xc>
 80185cc:	f7ff ffc4 	bl	8018558 <global_stdio_init.part.0>
 80185d0:	e7f2      	b.n	80185b8 <__sinit+0xc>
 80185d2:	bf00      	nop
 80185d4:	08018519 	.word	0x08018519
 80185d8:	200056e4 	.word	0x200056e4

080185dc <fprintf>:
 80185dc:	b40e      	push	{r1, r2, r3}
 80185de:	b503      	push	{r0, r1, lr}
 80185e0:	4601      	mov	r1, r0
 80185e2:	ab03      	add	r3, sp, #12
 80185e4:	4805      	ldr	r0, [pc, #20]	; (80185fc <fprintf+0x20>)
 80185e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80185ea:	6800      	ldr	r0, [r0, #0]
 80185ec:	9301      	str	r3, [sp, #4]
 80185ee:	f002 fabb 	bl	801ab68 <_vfprintf_r>
 80185f2:	b002      	add	sp, #8
 80185f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80185f8:	b003      	add	sp, #12
 80185fa:	4770      	bx	lr
 80185fc:	200001c8 	.word	0x200001c8

08018600 <__sfvwrite_r>:
 8018600:	6893      	ldr	r3, [r2, #8]
 8018602:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018606:	4606      	mov	r6, r0
 8018608:	460c      	mov	r4, r1
 801860a:	4691      	mov	r9, r2
 801860c:	b91b      	cbnz	r3, 8018616 <__sfvwrite_r+0x16>
 801860e:	2000      	movs	r0, #0
 8018610:	b003      	add	sp, #12
 8018612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018616:	898b      	ldrh	r3, [r1, #12]
 8018618:	0718      	lsls	r0, r3, #28
 801861a:	d54f      	bpl.n	80186bc <__sfvwrite_r+0xbc>
 801861c:	690b      	ldr	r3, [r1, #16]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d04c      	beq.n	80186bc <__sfvwrite_r+0xbc>
 8018622:	89a3      	ldrh	r3, [r4, #12]
 8018624:	f8d9 8000 	ldr.w	r8, [r9]
 8018628:	f013 0702 	ands.w	r7, r3, #2
 801862c:	d16b      	bne.n	8018706 <__sfvwrite_r+0x106>
 801862e:	f013 0301 	ands.w	r3, r3, #1
 8018632:	f000 809b 	beq.w	801876c <__sfvwrite_r+0x16c>
 8018636:	4638      	mov	r0, r7
 8018638:	46ba      	mov	sl, r7
 801863a:	46bb      	mov	fp, r7
 801863c:	f1bb 0f00 	cmp.w	fp, #0
 8018640:	f000 8102 	beq.w	8018848 <__sfvwrite_r+0x248>
 8018644:	b950      	cbnz	r0, 801865c <__sfvwrite_r+0x5c>
 8018646:	465a      	mov	r2, fp
 8018648:	210a      	movs	r1, #10
 801864a:	4650      	mov	r0, sl
 801864c:	f7ef ff98 	bl	8008580 <memchr>
 8018650:	2800      	cmp	r0, #0
 8018652:	f000 80ff 	beq.w	8018854 <__sfvwrite_r+0x254>
 8018656:	3001      	adds	r0, #1
 8018658:	eba0 070a 	sub.w	r7, r0, sl
 801865c:	6820      	ldr	r0, [r4, #0]
 801865e:	6921      	ldr	r1, [r4, #16]
 8018660:	68a5      	ldr	r5, [r4, #8]
 8018662:	6963      	ldr	r3, [r4, #20]
 8018664:	455f      	cmp	r7, fp
 8018666:	463a      	mov	r2, r7
 8018668:	bf28      	it	cs
 801866a:	465a      	movcs	r2, fp
 801866c:	4288      	cmp	r0, r1
 801866e:	f240 80f4 	bls.w	801885a <__sfvwrite_r+0x25a>
 8018672:	441d      	add	r5, r3
 8018674:	42aa      	cmp	r2, r5
 8018676:	f340 80f0 	ble.w	801885a <__sfvwrite_r+0x25a>
 801867a:	4651      	mov	r1, sl
 801867c:	462a      	mov	r2, r5
 801867e:	f000 fa7f 	bl	8018b80 <memmove>
 8018682:	6823      	ldr	r3, [r4, #0]
 8018684:	442b      	add	r3, r5
 8018686:	6023      	str	r3, [r4, #0]
 8018688:	4621      	mov	r1, r4
 801868a:	4630      	mov	r0, r6
 801868c:	f004 faae 	bl	801cbec <_fflush_r>
 8018690:	2800      	cmp	r0, #0
 8018692:	d166      	bne.n	8018762 <__sfvwrite_r+0x162>
 8018694:	1b7f      	subs	r7, r7, r5
 8018696:	f040 80f8 	bne.w	801888a <__sfvwrite_r+0x28a>
 801869a:	4621      	mov	r1, r4
 801869c:	4630      	mov	r0, r6
 801869e:	f004 faa5 	bl	801cbec <_fflush_r>
 80186a2:	2800      	cmp	r0, #0
 80186a4:	d15d      	bne.n	8018762 <__sfvwrite_r+0x162>
 80186a6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80186aa:	1b5b      	subs	r3, r3, r5
 80186ac:	44aa      	add	sl, r5
 80186ae:	ebab 0b05 	sub.w	fp, fp, r5
 80186b2:	f8c9 3008 	str.w	r3, [r9, #8]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d1c0      	bne.n	801863c <__sfvwrite_r+0x3c>
 80186ba:	e7a8      	b.n	801860e <__sfvwrite_r+0xe>
 80186bc:	4621      	mov	r1, r4
 80186be:	4630      	mov	r0, r6
 80186c0:	f000 f9f6 	bl	8018ab0 <__swsetup_r>
 80186c4:	2800      	cmp	r0, #0
 80186c6:	d0ac      	beq.n	8018622 <__sfvwrite_r+0x22>
 80186c8:	f04f 30ff 	mov.w	r0, #4294967295
 80186cc:	e7a0      	b.n	8018610 <__sfvwrite_r+0x10>
 80186ce:	e9d8 a500 	ldrd	sl, r5, [r8]
 80186d2:	f108 0808 	add.w	r8, r8, #8
 80186d6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80186da:	69e1      	ldr	r1, [r4, #28]
 80186dc:	2d00      	cmp	r5, #0
 80186de:	d0f6      	beq.n	80186ce <__sfvwrite_r+0xce>
 80186e0:	42bd      	cmp	r5, r7
 80186e2:	462b      	mov	r3, r5
 80186e4:	4652      	mov	r2, sl
 80186e6:	bf28      	it	cs
 80186e8:	463b      	movcs	r3, r7
 80186ea:	4630      	mov	r0, r6
 80186ec:	47d8      	blx	fp
 80186ee:	2800      	cmp	r0, #0
 80186f0:	dd37      	ble.n	8018762 <__sfvwrite_r+0x162>
 80186f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80186f6:	1a1b      	subs	r3, r3, r0
 80186f8:	4482      	add	sl, r0
 80186fa:	1a2d      	subs	r5, r5, r0
 80186fc:	f8c9 3008 	str.w	r3, [r9, #8]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d1e8      	bne.n	80186d6 <__sfvwrite_r+0xd6>
 8018704:	e783      	b.n	801860e <__sfvwrite_r+0xe>
 8018706:	f04f 0a00 	mov.w	sl, #0
 801870a:	4f61      	ldr	r7, [pc, #388]	; (8018890 <__sfvwrite_r+0x290>)
 801870c:	4655      	mov	r5, sl
 801870e:	e7e2      	b.n	80186d6 <__sfvwrite_r+0xd6>
 8018710:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8018714:	f108 0808 	add.w	r8, r8, #8
 8018718:	6820      	ldr	r0, [r4, #0]
 801871a:	68a2      	ldr	r2, [r4, #8]
 801871c:	f1ba 0f00 	cmp.w	sl, #0
 8018720:	d0f6      	beq.n	8018710 <__sfvwrite_r+0x110>
 8018722:	89a3      	ldrh	r3, [r4, #12]
 8018724:	0599      	lsls	r1, r3, #22
 8018726:	d563      	bpl.n	80187f0 <__sfvwrite_r+0x1f0>
 8018728:	4552      	cmp	r2, sl
 801872a:	d836      	bhi.n	801879a <__sfvwrite_r+0x19a>
 801872c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8018730:	d033      	beq.n	801879a <__sfvwrite_r+0x19a>
 8018732:	6921      	ldr	r1, [r4, #16]
 8018734:	6965      	ldr	r5, [r4, #20]
 8018736:	eba0 0b01 	sub.w	fp, r0, r1
 801873a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801873e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018742:	f10b 0201 	add.w	r2, fp, #1
 8018746:	106d      	asrs	r5, r5, #1
 8018748:	4452      	add	r2, sl
 801874a:	4295      	cmp	r5, r2
 801874c:	bf38      	it	cc
 801874e:	4615      	movcc	r5, r2
 8018750:	055b      	lsls	r3, r3, #21
 8018752:	d53d      	bpl.n	80187d0 <__sfvwrite_r+0x1d0>
 8018754:	4629      	mov	r1, r5
 8018756:	4630      	mov	r0, r6
 8018758:	f000 fc4a 	bl	8018ff0 <_malloc_r>
 801875c:	b948      	cbnz	r0, 8018772 <__sfvwrite_r+0x172>
 801875e:	230c      	movs	r3, #12
 8018760:	6033      	str	r3, [r6, #0]
 8018762:	89a3      	ldrh	r3, [r4, #12]
 8018764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018768:	81a3      	strh	r3, [r4, #12]
 801876a:	e7ad      	b.n	80186c8 <__sfvwrite_r+0xc8>
 801876c:	461f      	mov	r7, r3
 801876e:	469a      	mov	sl, r3
 8018770:	e7d2      	b.n	8018718 <__sfvwrite_r+0x118>
 8018772:	465a      	mov	r2, fp
 8018774:	6921      	ldr	r1, [r4, #16]
 8018776:	9001      	str	r0, [sp, #4]
 8018778:	f000 fb08 	bl	8018d8c <memcpy>
 801877c:	89a2      	ldrh	r2, [r4, #12]
 801877e:	9b01      	ldr	r3, [sp, #4]
 8018780:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8018784:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018788:	81a2      	strh	r2, [r4, #12]
 801878a:	6123      	str	r3, [r4, #16]
 801878c:	6165      	str	r5, [r4, #20]
 801878e:	445b      	add	r3, fp
 8018790:	eba5 050b 	sub.w	r5, r5, fp
 8018794:	6023      	str	r3, [r4, #0]
 8018796:	4652      	mov	r2, sl
 8018798:	60a5      	str	r5, [r4, #8]
 801879a:	4552      	cmp	r2, sl
 801879c:	bf28      	it	cs
 801879e:	4652      	movcs	r2, sl
 80187a0:	6820      	ldr	r0, [r4, #0]
 80187a2:	9201      	str	r2, [sp, #4]
 80187a4:	4639      	mov	r1, r7
 80187a6:	f000 f9eb 	bl	8018b80 <memmove>
 80187aa:	68a3      	ldr	r3, [r4, #8]
 80187ac:	9a01      	ldr	r2, [sp, #4]
 80187ae:	1a9b      	subs	r3, r3, r2
 80187b0:	60a3      	str	r3, [r4, #8]
 80187b2:	6823      	ldr	r3, [r4, #0]
 80187b4:	4413      	add	r3, r2
 80187b6:	4655      	mov	r5, sl
 80187b8:	6023      	str	r3, [r4, #0]
 80187ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80187be:	1b5b      	subs	r3, r3, r5
 80187c0:	442f      	add	r7, r5
 80187c2:	ebaa 0a05 	sub.w	sl, sl, r5
 80187c6:	f8c9 3008 	str.w	r3, [r9, #8]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d1a4      	bne.n	8018718 <__sfvwrite_r+0x118>
 80187ce:	e71e      	b.n	801860e <__sfvwrite_r+0xe>
 80187d0:	462a      	mov	r2, r5
 80187d2:	4630      	mov	r0, r6
 80187d4:	f000 fe52 	bl	801947c <_realloc_r>
 80187d8:	4603      	mov	r3, r0
 80187da:	2800      	cmp	r0, #0
 80187dc:	d1d5      	bne.n	801878a <__sfvwrite_r+0x18a>
 80187de:	6921      	ldr	r1, [r4, #16]
 80187e0:	4630      	mov	r0, r6
 80187e2:	f000 fb45 	bl	8018e70 <_free_r>
 80187e6:	89a3      	ldrh	r3, [r4, #12]
 80187e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80187ec:	81a3      	strh	r3, [r4, #12]
 80187ee:	e7b6      	b.n	801875e <__sfvwrite_r+0x15e>
 80187f0:	6923      	ldr	r3, [r4, #16]
 80187f2:	4283      	cmp	r3, r0
 80187f4:	d302      	bcc.n	80187fc <__sfvwrite_r+0x1fc>
 80187f6:	6961      	ldr	r1, [r4, #20]
 80187f8:	4551      	cmp	r1, sl
 80187fa:	d915      	bls.n	8018828 <__sfvwrite_r+0x228>
 80187fc:	4552      	cmp	r2, sl
 80187fe:	bf28      	it	cs
 8018800:	4652      	movcs	r2, sl
 8018802:	4639      	mov	r1, r7
 8018804:	4615      	mov	r5, r2
 8018806:	f000 f9bb 	bl	8018b80 <memmove>
 801880a:	68a3      	ldr	r3, [r4, #8]
 801880c:	6822      	ldr	r2, [r4, #0]
 801880e:	1b5b      	subs	r3, r3, r5
 8018810:	442a      	add	r2, r5
 8018812:	60a3      	str	r3, [r4, #8]
 8018814:	6022      	str	r2, [r4, #0]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d1cf      	bne.n	80187ba <__sfvwrite_r+0x1ba>
 801881a:	4621      	mov	r1, r4
 801881c:	4630      	mov	r0, r6
 801881e:	f004 f9e5 	bl	801cbec <_fflush_r>
 8018822:	2800      	cmp	r0, #0
 8018824:	d0c9      	beq.n	80187ba <__sfvwrite_r+0x1ba>
 8018826:	e79c      	b.n	8018762 <__sfvwrite_r+0x162>
 8018828:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801882c:	459a      	cmp	sl, r3
 801882e:	bf38      	it	cc
 8018830:	4653      	movcc	r3, sl
 8018832:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018834:	fb93 f3f1 	sdiv	r3, r3, r1
 8018838:	463a      	mov	r2, r7
 801883a:	434b      	muls	r3, r1
 801883c:	4630      	mov	r0, r6
 801883e:	69e1      	ldr	r1, [r4, #28]
 8018840:	47a8      	blx	r5
 8018842:	1e05      	subs	r5, r0, #0
 8018844:	dcb9      	bgt.n	80187ba <__sfvwrite_r+0x1ba>
 8018846:	e78c      	b.n	8018762 <__sfvwrite_r+0x162>
 8018848:	e9d8 ab00 	ldrd	sl, fp, [r8]
 801884c:	2000      	movs	r0, #0
 801884e:	f108 0808 	add.w	r8, r8, #8
 8018852:	e6f3      	b.n	801863c <__sfvwrite_r+0x3c>
 8018854:	f10b 0701 	add.w	r7, fp, #1
 8018858:	e700      	b.n	801865c <__sfvwrite_r+0x5c>
 801885a:	4293      	cmp	r3, r2
 801885c:	dc08      	bgt.n	8018870 <__sfvwrite_r+0x270>
 801885e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018860:	69e1      	ldr	r1, [r4, #28]
 8018862:	4652      	mov	r2, sl
 8018864:	4630      	mov	r0, r6
 8018866:	47a8      	blx	r5
 8018868:	1e05      	subs	r5, r0, #0
 801886a:	f73f af13 	bgt.w	8018694 <__sfvwrite_r+0x94>
 801886e:	e778      	b.n	8018762 <__sfvwrite_r+0x162>
 8018870:	4651      	mov	r1, sl
 8018872:	9201      	str	r2, [sp, #4]
 8018874:	f000 f984 	bl	8018b80 <memmove>
 8018878:	9a01      	ldr	r2, [sp, #4]
 801887a:	68a3      	ldr	r3, [r4, #8]
 801887c:	1a9b      	subs	r3, r3, r2
 801887e:	60a3      	str	r3, [r4, #8]
 8018880:	6823      	ldr	r3, [r4, #0]
 8018882:	4413      	add	r3, r2
 8018884:	6023      	str	r3, [r4, #0]
 8018886:	4615      	mov	r5, r2
 8018888:	e704      	b.n	8018694 <__sfvwrite_r+0x94>
 801888a:	2001      	movs	r0, #1
 801888c:	e70b      	b.n	80186a6 <__sfvwrite_r+0xa6>
 801888e:	bf00      	nop
 8018890:	7ffffc00 	.word	0x7ffffc00

08018894 <_fwalk_sglue>:
 8018894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018898:	4607      	mov	r7, r0
 801889a:	4688      	mov	r8, r1
 801889c:	4614      	mov	r4, r2
 801889e:	2600      	movs	r6, #0
 80188a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80188a4:	f1b9 0901 	subs.w	r9, r9, #1
 80188a8:	d505      	bpl.n	80188b6 <_fwalk_sglue+0x22>
 80188aa:	6824      	ldr	r4, [r4, #0]
 80188ac:	2c00      	cmp	r4, #0
 80188ae:	d1f7      	bne.n	80188a0 <_fwalk_sglue+0xc>
 80188b0:	4630      	mov	r0, r6
 80188b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188b6:	89ab      	ldrh	r3, [r5, #12]
 80188b8:	2b01      	cmp	r3, #1
 80188ba:	d907      	bls.n	80188cc <_fwalk_sglue+0x38>
 80188bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80188c0:	3301      	adds	r3, #1
 80188c2:	d003      	beq.n	80188cc <_fwalk_sglue+0x38>
 80188c4:	4629      	mov	r1, r5
 80188c6:	4638      	mov	r0, r7
 80188c8:	47c0      	blx	r8
 80188ca:	4306      	orrs	r6, r0
 80188cc:	3568      	adds	r5, #104	; 0x68
 80188ce:	e7e9      	b.n	80188a4 <_fwalk_sglue+0x10>

080188d0 <_fwrite_r>:
 80188d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188d4:	b086      	sub	sp, #24
 80188d6:	fb02 f603 	mul.w	r6, r2, r3
 80188da:	461d      	mov	r5, r3
 80188dc:	ab01      	add	r3, sp, #4
 80188de:	9303      	str	r3, [sp, #12]
 80188e0:	2301      	movs	r3, #1
 80188e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80188e4:	9101      	str	r1, [sp, #4]
 80188e6:	4690      	mov	r8, r2
 80188e8:	9602      	str	r6, [sp, #8]
 80188ea:	9605      	str	r6, [sp, #20]
 80188ec:	9304      	str	r3, [sp, #16]
 80188ee:	4607      	mov	r7, r0
 80188f0:	b118      	cbz	r0, 80188fa <_fwrite_r+0x2a>
 80188f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80188f4:	b90b      	cbnz	r3, 80188fa <_fwrite_r+0x2a>
 80188f6:	f7ff fe59 	bl	80185ac <__sinit>
 80188fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80188fc:	07d8      	lsls	r0, r3, #31
 80188fe:	d405      	bmi.n	801890c <_fwrite_r+0x3c>
 8018900:	89a3      	ldrh	r3, [r4, #12]
 8018902:	0599      	lsls	r1, r3, #22
 8018904:	d402      	bmi.n	801890c <_fwrite_r+0x3c>
 8018906:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018908:	f000 fa3e 	bl	8018d88 <__retarget_lock_acquire_recursive>
 801890c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018910:	049a      	lsls	r2, r3, #18
 8018912:	d406      	bmi.n	8018922 <_fwrite_r+0x52>
 8018914:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018918:	81a3      	strh	r3, [r4, #12]
 801891a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801891c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8018920:	6663      	str	r3, [r4, #100]	; 0x64
 8018922:	aa03      	add	r2, sp, #12
 8018924:	4621      	mov	r1, r4
 8018926:	4638      	mov	r0, r7
 8018928:	f7ff fe6a 	bl	8018600 <__sfvwrite_r>
 801892c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801892e:	b958      	cbnz	r0, 8018948 <_fwrite_r+0x78>
 8018930:	07d8      	lsls	r0, r3, #31
 8018932:	d405      	bmi.n	8018940 <_fwrite_r+0x70>
 8018934:	89a3      	ldrh	r3, [r4, #12]
 8018936:	0599      	lsls	r1, r3, #22
 8018938:	d402      	bmi.n	8018940 <_fwrite_r+0x70>
 801893a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801893c:	f000 fa25 	bl	8018d8a <__retarget_lock_release_recursive>
 8018940:	4628      	mov	r0, r5
 8018942:	b006      	add	sp, #24
 8018944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018948:	07da      	lsls	r2, r3, #31
 801894a:	d405      	bmi.n	8018958 <_fwrite_r+0x88>
 801894c:	89a3      	ldrh	r3, [r4, #12]
 801894e:	059b      	lsls	r3, r3, #22
 8018950:	d402      	bmi.n	8018958 <_fwrite_r+0x88>
 8018952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018954:	f000 fa19 	bl	8018d8a <__retarget_lock_release_recursive>
 8018958:	9b05      	ldr	r3, [sp, #20]
 801895a:	1af6      	subs	r6, r6, r3
 801895c:	fbb6 f5f8 	udiv	r5, r6, r8
 8018960:	e7ee      	b.n	8018940 <_fwrite_r+0x70>
	...

08018964 <fwrite>:
 8018964:	b507      	push	{r0, r1, r2, lr}
 8018966:	9300      	str	r3, [sp, #0]
 8018968:	4613      	mov	r3, r2
 801896a:	460a      	mov	r2, r1
 801896c:	4601      	mov	r1, r0
 801896e:	4803      	ldr	r0, [pc, #12]	; (801897c <fwrite+0x18>)
 8018970:	6800      	ldr	r0, [r0, #0]
 8018972:	f7ff ffad 	bl	80188d0 <_fwrite_r>
 8018976:	b003      	add	sp, #12
 8018978:	f85d fb04 	ldr.w	pc, [sp], #4
 801897c:	200001c8 	.word	0x200001c8

08018980 <snprintf>:
 8018980:	b40c      	push	{r2, r3}
 8018982:	b530      	push	{r4, r5, lr}
 8018984:	4b17      	ldr	r3, [pc, #92]	; (80189e4 <snprintf+0x64>)
 8018986:	1e0c      	subs	r4, r1, #0
 8018988:	681d      	ldr	r5, [r3, #0]
 801898a:	b09d      	sub	sp, #116	; 0x74
 801898c:	da08      	bge.n	80189a0 <snprintf+0x20>
 801898e:	238b      	movs	r3, #139	; 0x8b
 8018990:	602b      	str	r3, [r5, #0]
 8018992:	f04f 30ff 	mov.w	r0, #4294967295
 8018996:	b01d      	add	sp, #116	; 0x74
 8018998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801899c:	b002      	add	sp, #8
 801899e:	4770      	bx	lr
 80189a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80189a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80189a8:	bf14      	ite	ne
 80189aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80189ae:	4623      	moveq	r3, r4
 80189b0:	9304      	str	r3, [sp, #16]
 80189b2:	9307      	str	r3, [sp, #28]
 80189b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189b8:	9002      	str	r0, [sp, #8]
 80189ba:	9006      	str	r0, [sp, #24]
 80189bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80189c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80189c2:	ab21      	add	r3, sp, #132	; 0x84
 80189c4:	a902      	add	r1, sp, #8
 80189c6:	4628      	mov	r0, r5
 80189c8:	9301      	str	r3, [sp, #4]
 80189ca:	f000 fefd 	bl	80197c8 <_svfprintf_r>
 80189ce:	1c43      	adds	r3, r0, #1
 80189d0:	bfbc      	itt	lt
 80189d2:	238b      	movlt	r3, #139	; 0x8b
 80189d4:	602b      	strlt	r3, [r5, #0]
 80189d6:	2c00      	cmp	r4, #0
 80189d8:	d0dd      	beq.n	8018996 <snprintf+0x16>
 80189da:	9b02      	ldr	r3, [sp, #8]
 80189dc:	2200      	movs	r2, #0
 80189de:	701a      	strb	r2, [r3, #0]
 80189e0:	e7d9      	b.n	8018996 <snprintf+0x16>
 80189e2:	bf00      	nop
 80189e4:	200001c8 	.word	0x200001c8

080189e8 <sprintf>:
 80189e8:	b40e      	push	{r1, r2, r3}
 80189ea:	b500      	push	{lr}
 80189ec:	b09c      	sub	sp, #112	; 0x70
 80189ee:	ab1d      	add	r3, sp, #116	; 0x74
 80189f0:	9002      	str	r0, [sp, #8]
 80189f2:	9006      	str	r0, [sp, #24]
 80189f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80189f8:	4809      	ldr	r0, [pc, #36]	; (8018a20 <sprintf+0x38>)
 80189fa:	9107      	str	r1, [sp, #28]
 80189fc:	9104      	str	r1, [sp, #16]
 80189fe:	4909      	ldr	r1, [pc, #36]	; (8018a24 <sprintf+0x3c>)
 8018a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a04:	9105      	str	r1, [sp, #20]
 8018a06:	6800      	ldr	r0, [r0, #0]
 8018a08:	9301      	str	r3, [sp, #4]
 8018a0a:	a902      	add	r1, sp, #8
 8018a0c:	f000 fedc 	bl	80197c8 <_svfprintf_r>
 8018a10:	9b02      	ldr	r3, [sp, #8]
 8018a12:	2200      	movs	r2, #0
 8018a14:	701a      	strb	r2, [r3, #0]
 8018a16:	b01c      	add	sp, #112	; 0x70
 8018a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a1c:	b003      	add	sp, #12
 8018a1e:	4770      	bx	lr
 8018a20:	200001c8 	.word	0x200001c8
 8018a24:	ffff0208 	.word	0xffff0208

08018a28 <__sread>:
 8018a28:	b510      	push	{r4, lr}
 8018a2a:	460c      	mov	r4, r1
 8018a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a30:	f000 f95a 	bl	8018ce8 <_read_r>
 8018a34:	2800      	cmp	r0, #0
 8018a36:	bfab      	itete	ge
 8018a38:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8018a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8018a3c:	181b      	addge	r3, r3, r0
 8018a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018a42:	bfac      	ite	ge
 8018a44:	6523      	strge	r3, [r4, #80]	; 0x50
 8018a46:	81a3      	strhlt	r3, [r4, #12]
 8018a48:	bd10      	pop	{r4, pc}

08018a4a <__swrite>:
 8018a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a4e:	461f      	mov	r7, r3
 8018a50:	898b      	ldrh	r3, [r1, #12]
 8018a52:	05db      	lsls	r3, r3, #23
 8018a54:	4605      	mov	r5, r0
 8018a56:	460c      	mov	r4, r1
 8018a58:	4616      	mov	r6, r2
 8018a5a:	d505      	bpl.n	8018a68 <__swrite+0x1e>
 8018a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a60:	2302      	movs	r3, #2
 8018a62:	2200      	movs	r2, #0
 8018a64:	f000 f92e 	bl	8018cc4 <_lseek_r>
 8018a68:	89a3      	ldrh	r3, [r4, #12]
 8018a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018a72:	81a3      	strh	r3, [r4, #12]
 8018a74:	4632      	mov	r2, r6
 8018a76:	463b      	mov	r3, r7
 8018a78:	4628      	mov	r0, r5
 8018a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a7e:	f000 b945 	b.w	8018d0c <_write_r>

08018a82 <__sseek>:
 8018a82:	b510      	push	{r4, lr}
 8018a84:	460c      	mov	r4, r1
 8018a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a8a:	f000 f91b 	bl	8018cc4 <_lseek_r>
 8018a8e:	1c43      	adds	r3, r0, #1
 8018a90:	89a3      	ldrh	r3, [r4, #12]
 8018a92:	bf15      	itete	ne
 8018a94:	6520      	strne	r0, [r4, #80]	; 0x50
 8018a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018a9e:	81a3      	strheq	r3, [r4, #12]
 8018aa0:	bf18      	it	ne
 8018aa2:	81a3      	strhne	r3, [r4, #12]
 8018aa4:	bd10      	pop	{r4, pc}

08018aa6 <__sclose>:
 8018aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018aaa:	f000 b8cd 	b.w	8018c48 <_close_r>
	...

08018ab0 <__swsetup_r>:
 8018ab0:	b538      	push	{r3, r4, r5, lr}
 8018ab2:	4b2a      	ldr	r3, [pc, #168]	; (8018b5c <__swsetup_r+0xac>)
 8018ab4:	4605      	mov	r5, r0
 8018ab6:	6818      	ldr	r0, [r3, #0]
 8018ab8:	460c      	mov	r4, r1
 8018aba:	b118      	cbz	r0, 8018ac4 <__swsetup_r+0x14>
 8018abc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8018abe:	b90b      	cbnz	r3, 8018ac4 <__swsetup_r+0x14>
 8018ac0:	f7ff fd74 	bl	80185ac <__sinit>
 8018ac4:	89a3      	ldrh	r3, [r4, #12]
 8018ac6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018aca:	0718      	lsls	r0, r3, #28
 8018acc:	d422      	bmi.n	8018b14 <__swsetup_r+0x64>
 8018ace:	06d9      	lsls	r1, r3, #27
 8018ad0:	d407      	bmi.n	8018ae2 <__swsetup_r+0x32>
 8018ad2:	2309      	movs	r3, #9
 8018ad4:	602b      	str	r3, [r5, #0]
 8018ad6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018ada:	81a3      	strh	r3, [r4, #12]
 8018adc:	f04f 30ff 	mov.w	r0, #4294967295
 8018ae0:	e034      	b.n	8018b4c <__swsetup_r+0x9c>
 8018ae2:	0758      	lsls	r0, r3, #29
 8018ae4:	d512      	bpl.n	8018b0c <__swsetup_r+0x5c>
 8018ae6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018ae8:	b141      	cbz	r1, 8018afc <__swsetup_r+0x4c>
 8018aea:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8018aee:	4299      	cmp	r1, r3
 8018af0:	d002      	beq.n	8018af8 <__swsetup_r+0x48>
 8018af2:	4628      	mov	r0, r5
 8018af4:	f000 f9bc 	bl	8018e70 <_free_r>
 8018af8:	2300      	movs	r3, #0
 8018afa:	6323      	str	r3, [r4, #48]	; 0x30
 8018afc:	89a3      	ldrh	r3, [r4, #12]
 8018afe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018b02:	81a3      	strh	r3, [r4, #12]
 8018b04:	2300      	movs	r3, #0
 8018b06:	6063      	str	r3, [r4, #4]
 8018b08:	6923      	ldr	r3, [r4, #16]
 8018b0a:	6023      	str	r3, [r4, #0]
 8018b0c:	89a3      	ldrh	r3, [r4, #12]
 8018b0e:	f043 0308 	orr.w	r3, r3, #8
 8018b12:	81a3      	strh	r3, [r4, #12]
 8018b14:	6923      	ldr	r3, [r4, #16]
 8018b16:	b94b      	cbnz	r3, 8018b2c <__swsetup_r+0x7c>
 8018b18:	89a3      	ldrh	r3, [r4, #12]
 8018b1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018b22:	d003      	beq.n	8018b2c <__swsetup_r+0x7c>
 8018b24:	4621      	mov	r1, r4
 8018b26:	4628      	mov	r0, r5
 8018b28:	f004 f8ad 	bl	801cc86 <__smakebuf_r>
 8018b2c:	89a0      	ldrh	r0, [r4, #12]
 8018b2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b32:	f010 0301 	ands.w	r3, r0, #1
 8018b36:	d00a      	beq.n	8018b4e <__swsetup_r+0x9e>
 8018b38:	2300      	movs	r3, #0
 8018b3a:	60a3      	str	r3, [r4, #8]
 8018b3c:	6963      	ldr	r3, [r4, #20]
 8018b3e:	425b      	negs	r3, r3
 8018b40:	61a3      	str	r3, [r4, #24]
 8018b42:	6923      	ldr	r3, [r4, #16]
 8018b44:	b943      	cbnz	r3, 8018b58 <__swsetup_r+0xa8>
 8018b46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018b4a:	d1c4      	bne.n	8018ad6 <__swsetup_r+0x26>
 8018b4c:	bd38      	pop	{r3, r4, r5, pc}
 8018b4e:	0781      	lsls	r1, r0, #30
 8018b50:	bf58      	it	pl
 8018b52:	6963      	ldrpl	r3, [r4, #20]
 8018b54:	60a3      	str	r3, [r4, #8]
 8018b56:	e7f4      	b.n	8018b42 <__swsetup_r+0x92>
 8018b58:	2000      	movs	r0, #0
 8018b5a:	e7f7      	b.n	8018b4c <__swsetup_r+0x9c>
 8018b5c:	200001c8 	.word	0x200001c8

08018b60 <memcmp>:
 8018b60:	b510      	push	{r4, lr}
 8018b62:	3901      	subs	r1, #1
 8018b64:	4402      	add	r2, r0
 8018b66:	4290      	cmp	r0, r2
 8018b68:	d101      	bne.n	8018b6e <memcmp+0xe>
 8018b6a:	2000      	movs	r0, #0
 8018b6c:	e005      	b.n	8018b7a <memcmp+0x1a>
 8018b6e:	7803      	ldrb	r3, [r0, #0]
 8018b70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018b74:	42a3      	cmp	r3, r4
 8018b76:	d001      	beq.n	8018b7c <memcmp+0x1c>
 8018b78:	1b18      	subs	r0, r3, r4
 8018b7a:	bd10      	pop	{r4, pc}
 8018b7c:	3001      	adds	r0, #1
 8018b7e:	e7f2      	b.n	8018b66 <memcmp+0x6>

08018b80 <memmove>:
 8018b80:	4288      	cmp	r0, r1
 8018b82:	b510      	push	{r4, lr}
 8018b84:	eb01 0402 	add.w	r4, r1, r2
 8018b88:	d902      	bls.n	8018b90 <memmove+0x10>
 8018b8a:	4284      	cmp	r4, r0
 8018b8c:	4623      	mov	r3, r4
 8018b8e:	d807      	bhi.n	8018ba0 <memmove+0x20>
 8018b90:	1e43      	subs	r3, r0, #1
 8018b92:	42a1      	cmp	r1, r4
 8018b94:	d008      	beq.n	8018ba8 <memmove+0x28>
 8018b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018b9e:	e7f8      	b.n	8018b92 <memmove+0x12>
 8018ba0:	4402      	add	r2, r0
 8018ba2:	4601      	mov	r1, r0
 8018ba4:	428a      	cmp	r2, r1
 8018ba6:	d100      	bne.n	8018baa <memmove+0x2a>
 8018ba8:	bd10      	pop	{r4, pc}
 8018baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018bb2:	e7f7      	b.n	8018ba4 <memmove+0x24>

08018bb4 <memset>:
 8018bb4:	4402      	add	r2, r0
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	4293      	cmp	r3, r2
 8018bba:	d100      	bne.n	8018bbe <memset+0xa>
 8018bbc:	4770      	bx	lr
 8018bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8018bc2:	e7f9      	b.n	8018bb8 <memset+0x4>

08018bc4 <strncmp>:
 8018bc4:	b510      	push	{r4, lr}
 8018bc6:	b16a      	cbz	r2, 8018be4 <strncmp+0x20>
 8018bc8:	3901      	subs	r1, #1
 8018bca:	1884      	adds	r4, r0, r2
 8018bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018bd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018bd4:	429a      	cmp	r2, r3
 8018bd6:	d103      	bne.n	8018be0 <strncmp+0x1c>
 8018bd8:	42a0      	cmp	r0, r4
 8018bda:	d001      	beq.n	8018be0 <strncmp+0x1c>
 8018bdc:	2a00      	cmp	r2, #0
 8018bde:	d1f5      	bne.n	8018bcc <strncmp+0x8>
 8018be0:	1ad0      	subs	r0, r2, r3
 8018be2:	bd10      	pop	{r4, pc}
 8018be4:	4610      	mov	r0, r2
 8018be6:	e7fc      	b.n	8018be2 <strncmp+0x1e>

08018be8 <strtok>:
 8018be8:	4b02      	ldr	r3, [pc, #8]	; (8018bf4 <strtok+0xc>)
 8018bea:	681a      	ldr	r2, [r3, #0]
 8018bec:	2301      	movs	r3, #1
 8018bee:	3250      	adds	r2, #80	; 0x50
 8018bf0:	f000 b802 	b.w	8018bf8 <__strtok_r>
 8018bf4:	200001c8 	.word	0x200001c8

08018bf8 <__strtok_r>:
 8018bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bfa:	b908      	cbnz	r0, 8018c00 <__strtok_r+0x8>
 8018bfc:	6810      	ldr	r0, [r2, #0]
 8018bfe:	b188      	cbz	r0, 8018c24 <__strtok_r+0x2c>
 8018c00:	4604      	mov	r4, r0
 8018c02:	4620      	mov	r0, r4
 8018c04:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018c08:	460f      	mov	r7, r1
 8018c0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018c0e:	b91e      	cbnz	r6, 8018c18 <__strtok_r+0x20>
 8018c10:	b965      	cbnz	r5, 8018c2c <__strtok_r+0x34>
 8018c12:	6015      	str	r5, [r2, #0]
 8018c14:	4628      	mov	r0, r5
 8018c16:	e005      	b.n	8018c24 <__strtok_r+0x2c>
 8018c18:	42b5      	cmp	r5, r6
 8018c1a:	d1f6      	bne.n	8018c0a <__strtok_r+0x12>
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d1f0      	bne.n	8018c02 <__strtok_r+0xa>
 8018c20:	6014      	str	r4, [r2, #0]
 8018c22:	7003      	strb	r3, [r0, #0]
 8018c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c26:	461c      	mov	r4, r3
 8018c28:	e00c      	b.n	8018c44 <__strtok_r+0x4c>
 8018c2a:	b915      	cbnz	r5, 8018c32 <__strtok_r+0x3a>
 8018c2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018c30:	460e      	mov	r6, r1
 8018c32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018c36:	42ab      	cmp	r3, r5
 8018c38:	d1f7      	bne.n	8018c2a <__strtok_r+0x32>
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d0f3      	beq.n	8018c26 <__strtok_r+0x2e>
 8018c3e:	2300      	movs	r3, #0
 8018c40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018c44:	6014      	str	r4, [r2, #0]
 8018c46:	e7ed      	b.n	8018c24 <__strtok_r+0x2c>

08018c48 <_close_r>:
 8018c48:	b538      	push	{r3, r4, r5, lr}
 8018c4a:	4d06      	ldr	r5, [pc, #24]	; (8018c64 <_close_r+0x1c>)
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	4604      	mov	r4, r0
 8018c50:	4608      	mov	r0, r1
 8018c52:	602b      	str	r3, [r5, #0]
 8018c54:	f7f1 fe40 	bl	800a8d8 <_close>
 8018c58:	1c43      	adds	r3, r0, #1
 8018c5a:	d102      	bne.n	8018c62 <_close_r+0x1a>
 8018c5c:	682b      	ldr	r3, [r5, #0]
 8018c5e:	b103      	cbz	r3, 8018c62 <_close_r+0x1a>
 8018c60:	6023      	str	r3, [r4, #0]
 8018c62:	bd38      	pop	{r3, r4, r5, pc}
 8018c64:	200056e8 	.word	0x200056e8

08018c68 <_reclaim_reent>:
 8018c68:	4b15      	ldr	r3, [pc, #84]	; (8018cc0 <_reclaim_reent+0x58>)
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	4283      	cmp	r3, r0
 8018c6e:	b570      	push	{r4, r5, r6, lr}
 8018c70:	4604      	mov	r4, r0
 8018c72:	d023      	beq.n	8018cbc <_reclaim_reent+0x54>
 8018c74:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8018c76:	b9fb      	cbnz	r3, 8018cb8 <_reclaim_reent+0x50>
 8018c78:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018c7a:	b111      	cbz	r1, 8018c82 <_reclaim_reent+0x1a>
 8018c7c:	4620      	mov	r0, r4
 8018c7e:	f000 f8f7 	bl	8018e70 <_free_r>
 8018c82:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8018c84:	b111      	cbz	r1, 8018c8c <_reclaim_reent+0x24>
 8018c86:	4620      	mov	r0, r4
 8018c88:	f000 f8f2 	bl	8018e70 <_free_r>
 8018c8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018c8e:	b1ab      	cbz	r3, 8018cbc <_reclaim_reent+0x54>
 8018c90:	4620      	mov	r0, r4
 8018c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c96:	4718      	bx	r3
 8018c98:	5949      	ldr	r1, [r1, r5]
 8018c9a:	b939      	cbnz	r1, 8018cac <_reclaim_reent+0x44>
 8018c9c:	3504      	adds	r5, #4
 8018c9e:	2d80      	cmp	r5, #128	; 0x80
 8018ca0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018ca2:	d1f9      	bne.n	8018c98 <_reclaim_reent+0x30>
 8018ca4:	4620      	mov	r0, r4
 8018ca6:	f000 f8e3 	bl	8018e70 <_free_r>
 8018caa:	e7e5      	b.n	8018c78 <_reclaim_reent+0x10>
 8018cac:	680e      	ldr	r6, [r1, #0]
 8018cae:	4620      	mov	r0, r4
 8018cb0:	f000 f8de 	bl	8018e70 <_free_r>
 8018cb4:	4631      	mov	r1, r6
 8018cb6:	e7f0      	b.n	8018c9a <_reclaim_reent+0x32>
 8018cb8:	2500      	movs	r5, #0
 8018cba:	e7f0      	b.n	8018c9e <_reclaim_reent+0x36>
 8018cbc:	bd70      	pop	{r4, r5, r6, pc}
 8018cbe:	bf00      	nop
 8018cc0:	200001c8 	.word	0x200001c8

08018cc4 <_lseek_r>:
 8018cc4:	b538      	push	{r3, r4, r5, lr}
 8018cc6:	4d07      	ldr	r5, [pc, #28]	; (8018ce4 <_lseek_r+0x20>)
 8018cc8:	4604      	mov	r4, r0
 8018cca:	4608      	mov	r0, r1
 8018ccc:	4611      	mov	r1, r2
 8018cce:	2200      	movs	r2, #0
 8018cd0:	602a      	str	r2, [r5, #0]
 8018cd2:	461a      	mov	r2, r3
 8018cd4:	f7f1 fe24 	bl	800a920 <_lseek>
 8018cd8:	1c43      	adds	r3, r0, #1
 8018cda:	d102      	bne.n	8018ce2 <_lseek_r+0x1e>
 8018cdc:	682b      	ldr	r3, [r5, #0]
 8018cde:	b103      	cbz	r3, 8018ce2 <_lseek_r+0x1e>
 8018ce0:	6023      	str	r3, [r4, #0]
 8018ce2:	bd38      	pop	{r3, r4, r5, pc}
 8018ce4:	200056e8 	.word	0x200056e8

08018ce8 <_read_r>:
 8018ce8:	b538      	push	{r3, r4, r5, lr}
 8018cea:	4d07      	ldr	r5, [pc, #28]	; (8018d08 <_read_r+0x20>)
 8018cec:	4604      	mov	r4, r0
 8018cee:	4608      	mov	r0, r1
 8018cf0:	4611      	mov	r1, r2
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	602a      	str	r2, [r5, #0]
 8018cf6:	461a      	mov	r2, r3
 8018cf8:	f7f1 fdb5 	bl	800a866 <_read>
 8018cfc:	1c43      	adds	r3, r0, #1
 8018cfe:	d102      	bne.n	8018d06 <_read_r+0x1e>
 8018d00:	682b      	ldr	r3, [r5, #0]
 8018d02:	b103      	cbz	r3, 8018d06 <_read_r+0x1e>
 8018d04:	6023      	str	r3, [r4, #0]
 8018d06:	bd38      	pop	{r3, r4, r5, pc}
 8018d08:	200056e8 	.word	0x200056e8

08018d0c <_write_r>:
 8018d0c:	b538      	push	{r3, r4, r5, lr}
 8018d0e:	4d07      	ldr	r5, [pc, #28]	; (8018d2c <_write_r+0x20>)
 8018d10:	4604      	mov	r4, r0
 8018d12:	4608      	mov	r0, r1
 8018d14:	4611      	mov	r1, r2
 8018d16:	2200      	movs	r2, #0
 8018d18:	602a      	str	r2, [r5, #0]
 8018d1a:	461a      	mov	r2, r3
 8018d1c:	f7f1 fdc0 	bl	800a8a0 <_write>
 8018d20:	1c43      	adds	r3, r0, #1
 8018d22:	d102      	bne.n	8018d2a <_write_r+0x1e>
 8018d24:	682b      	ldr	r3, [r5, #0]
 8018d26:	b103      	cbz	r3, 8018d2a <_write_r+0x1e>
 8018d28:	6023      	str	r3, [r4, #0]
 8018d2a:	bd38      	pop	{r3, r4, r5, pc}
 8018d2c:	200056e8 	.word	0x200056e8

08018d30 <__errno>:
 8018d30:	4b01      	ldr	r3, [pc, #4]	; (8018d38 <__errno+0x8>)
 8018d32:	6818      	ldr	r0, [r3, #0]
 8018d34:	4770      	bx	lr
 8018d36:	bf00      	nop
 8018d38:	200001c8 	.word	0x200001c8

08018d3c <__libc_init_array>:
 8018d3c:	b570      	push	{r4, r5, r6, lr}
 8018d3e:	4d0d      	ldr	r5, [pc, #52]	; (8018d74 <__libc_init_array+0x38>)
 8018d40:	4c0d      	ldr	r4, [pc, #52]	; (8018d78 <__libc_init_array+0x3c>)
 8018d42:	1b64      	subs	r4, r4, r5
 8018d44:	10a4      	asrs	r4, r4, #2
 8018d46:	2600      	movs	r6, #0
 8018d48:	42a6      	cmp	r6, r4
 8018d4a:	d109      	bne.n	8018d60 <__libc_init_array+0x24>
 8018d4c:	4d0b      	ldr	r5, [pc, #44]	; (8018d7c <__libc_init_array+0x40>)
 8018d4e:	4c0c      	ldr	r4, [pc, #48]	; (8018d80 <__libc_init_array+0x44>)
 8018d50:	f006 fb50 	bl	801f3f4 <_init>
 8018d54:	1b64      	subs	r4, r4, r5
 8018d56:	10a4      	asrs	r4, r4, #2
 8018d58:	2600      	movs	r6, #0
 8018d5a:	42a6      	cmp	r6, r4
 8018d5c:	d105      	bne.n	8018d6a <__libc_init_array+0x2e>
 8018d5e:	bd70      	pop	{r4, r5, r6, pc}
 8018d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d64:	4798      	blx	r3
 8018d66:	3601      	adds	r6, #1
 8018d68:	e7ee      	b.n	8018d48 <__libc_init_array+0xc>
 8018d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d6e:	4798      	blx	r3
 8018d70:	3601      	adds	r6, #1
 8018d72:	e7f2      	b.n	8018d5a <__libc_init_array+0x1e>
 8018d74:	08020c48 	.word	0x08020c48
 8018d78:	08020c48 	.word	0x08020c48
 8018d7c:	08020c48 	.word	0x08020c48
 8018d80:	08020c50 	.word	0x08020c50

08018d84 <__retarget_lock_init_recursive>:
 8018d84:	4770      	bx	lr

08018d86 <__retarget_lock_close_recursive>:
 8018d86:	4770      	bx	lr

08018d88 <__retarget_lock_acquire_recursive>:
 8018d88:	4770      	bx	lr

08018d8a <__retarget_lock_release_recursive>:
 8018d8a:	4770      	bx	lr

08018d8c <memcpy>:
 8018d8c:	440a      	add	r2, r1
 8018d8e:	4291      	cmp	r1, r2
 8018d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8018d94:	d100      	bne.n	8018d98 <memcpy+0xc>
 8018d96:	4770      	bx	lr
 8018d98:	b510      	push	{r4, lr}
 8018d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018da2:	4291      	cmp	r1, r2
 8018da4:	d1f9      	bne.n	8018d9a <memcpy+0xe>
 8018da6:	bd10      	pop	{r4, pc}

08018da8 <register_fini>:
 8018da8:	4b02      	ldr	r3, [pc, #8]	; (8018db4 <register_fini+0xc>)
 8018daa:	b113      	cbz	r3, 8018db2 <register_fini+0xa>
 8018dac:	4802      	ldr	r0, [pc, #8]	; (8018db8 <register_fini+0x10>)
 8018dae:	f000 b805 	b.w	8018dbc <atexit>
 8018db2:	4770      	bx	lr
 8018db4:	00000000 	.word	0x00000000
 8018db8:	0801ce71 	.word	0x0801ce71

08018dbc <atexit>:
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	4601      	mov	r1, r0
 8018dc0:	461a      	mov	r2, r3
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f004 b8a8 	b.w	801cf18 <__register_exitproc>

08018dc8 <_malloc_trim_r>:
 8018dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dcc:	4606      	mov	r6, r0
 8018dce:	2008      	movs	r0, #8
 8018dd0:	460c      	mov	r4, r1
 8018dd2:	f004 f861 	bl	801ce98 <sysconf>
 8018dd6:	4f23      	ldr	r7, [pc, #140]	; (8018e64 <_malloc_trim_r+0x9c>)
 8018dd8:	4680      	mov	r8, r0
 8018dda:	4630      	mov	r0, r6
 8018ddc:	f000 fb42 	bl	8019464 <__malloc_lock>
 8018de0:	68bb      	ldr	r3, [r7, #8]
 8018de2:	685d      	ldr	r5, [r3, #4]
 8018de4:	f025 0503 	bic.w	r5, r5, #3
 8018de8:	1b2c      	subs	r4, r5, r4
 8018dea:	3c11      	subs	r4, #17
 8018dec:	4444      	add	r4, r8
 8018dee:	fbb4 f4f8 	udiv	r4, r4, r8
 8018df2:	3c01      	subs	r4, #1
 8018df4:	fb08 f404 	mul.w	r4, r8, r4
 8018df8:	45a0      	cmp	r8, r4
 8018dfa:	dd05      	ble.n	8018e08 <_malloc_trim_r+0x40>
 8018dfc:	4630      	mov	r0, r6
 8018dfe:	f000 fb37 	bl	8019470 <__malloc_unlock>
 8018e02:	2000      	movs	r0, #0
 8018e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e08:	2100      	movs	r1, #0
 8018e0a:	4630      	mov	r0, r6
 8018e0c:	f004 f820 	bl	801ce50 <_sbrk_r>
 8018e10:	68bb      	ldr	r3, [r7, #8]
 8018e12:	442b      	add	r3, r5
 8018e14:	4298      	cmp	r0, r3
 8018e16:	d1f1      	bne.n	8018dfc <_malloc_trim_r+0x34>
 8018e18:	4261      	negs	r1, r4
 8018e1a:	4630      	mov	r0, r6
 8018e1c:	f004 f818 	bl	801ce50 <_sbrk_r>
 8018e20:	3001      	adds	r0, #1
 8018e22:	d110      	bne.n	8018e46 <_malloc_trim_r+0x7e>
 8018e24:	2100      	movs	r1, #0
 8018e26:	4630      	mov	r0, r6
 8018e28:	f004 f812 	bl	801ce50 <_sbrk_r>
 8018e2c:	68ba      	ldr	r2, [r7, #8]
 8018e2e:	1a83      	subs	r3, r0, r2
 8018e30:	2b0f      	cmp	r3, #15
 8018e32:	dde3      	ble.n	8018dfc <_malloc_trim_r+0x34>
 8018e34:	490c      	ldr	r1, [pc, #48]	; (8018e68 <_malloc_trim_r+0xa0>)
 8018e36:	6809      	ldr	r1, [r1, #0]
 8018e38:	1a40      	subs	r0, r0, r1
 8018e3a:	490c      	ldr	r1, [pc, #48]	; (8018e6c <_malloc_trim_r+0xa4>)
 8018e3c:	f043 0301 	orr.w	r3, r3, #1
 8018e40:	6008      	str	r0, [r1, #0]
 8018e42:	6053      	str	r3, [r2, #4]
 8018e44:	e7da      	b.n	8018dfc <_malloc_trim_r+0x34>
 8018e46:	68bb      	ldr	r3, [r7, #8]
 8018e48:	4a08      	ldr	r2, [pc, #32]	; (8018e6c <_malloc_trim_r+0xa4>)
 8018e4a:	1b2d      	subs	r5, r5, r4
 8018e4c:	f045 0501 	orr.w	r5, r5, #1
 8018e50:	605d      	str	r5, [r3, #4]
 8018e52:	6813      	ldr	r3, [r2, #0]
 8018e54:	4630      	mov	r0, r6
 8018e56:	1b1b      	subs	r3, r3, r4
 8018e58:	6013      	str	r3, [r2, #0]
 8018e5a:	f000 fb09 	bl	8019470 <__malloc_unlock>
 8018e5e:	2001      	movs	r0, #1
 8018e60:	e7d0      	b.n	8018e04 <_malloc_trim_r+0x3c>
 8018e62:	bf00      	nop
 8018e64:	200001d0 	.word	0x200001d0
 8018e68:	200005d8 	.word	0x200005d8
 8018e6c:	200056f4 	.word	0x200056f4

08018e70 <_free_r>:
 8018e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e72:	4605      	mov	r5, r0
 8018e74:	460f      	mov	r7, r1
 8018e76:	2900      	cmp	r1, #0
 8018e78:	f000 80b1 	beq.w	8018fde <_free_r+0x16e>
 8018e7c:	f000 faf2 	bl	8019464 <__malloc_lock>
 8018e80:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018e84:	4856      	ldr	r0, [pc, #344]	; (8018fe0 <_free_r+0x170>)
 8018e86:	f022 0401 	bic.w	r4, r2, #1
 8018e8a:	f1a7 0308 	sub.w	r3, r7, #8
 8018e8e:	eb03 0c04 	add.w	ip, r3, r4
 8018e92:	6881      	ldr	r1, [r0, #8]
 8018e94:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8018e98:	4561      	cmp	r1, ip
 8018e9a:	f026 0603 	bic.w	r6, r6, #3
 8018e9e:	f002 0201 	and.w	r2, r2, #1
 8018ea2:	d11b      	bne.n	8018edc <_free_r+0x6c>
 8018ea4:	4426      	add	r6, r4
 8018ea6:	b93a      	cbnz	r2, 8018eb8 <_free_r+0x48>
 8018ea8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8018eac:	1a9b      	subs	r3, r3, r2
 8018eae:	4416      	add	r6, r2
 8018eb0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8018eb4:	60ca      	str	r2, [r1, #12]
 8018eb6:	6091      	str	r1, [r2, #8]
 8018eb8:	f046 0201 	orr.w	r2, r6, #1
 8018ebc:	605a      	str	r2, [r3, #4]
 8018ebe:	6083      	str	r3, [r0, #8]
 8018ec0:	4b48      	ldr	r3, [pc, #288]	; (8018fe4 <_free_r+0x174>)
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	42b3      	cmp	r3, r6
 8018ec6:	d804      	bhi.n	8018ed2 <_free_r+0x62>
 8018ec8:	4b47      	ldr	r3, [pc, #284]	; (8018fe8 <_free_r+0x178>)
 8018eca:	4628      	mov	r0, r5
 8018ecc:	6819      	ldr	r1, [r3, #0]
 8018ece:	f7ff ff7b 	bl	8018dc8 <_malloc_trim_r>
 8018ed2:	4628      	mov	r0, r5
 8018ed4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018ed8:	f000 baca 	b.w	8019470 <__malloc_unlock>
 8018edc:	f8cc 6004 	str.w	r6, [ip, #4]
 8018ee0:	2a00      	cmp	r2, #0
 8018ee2:	d138      	bne.n	8018f56 <_free_r+0xe6>
 8018ee4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8018ee8:	1a5b      	subs	r3, r3, r1
 8018eea:	440c      	add	r4, r1
 8018eec:	6899      	ldr	r1, [r3, #8]
 8018eee:	f100 0708 	add.w	r7, r0, #8
 8018ef2:	42b9      	cmp	r1, r7
 8018ef4:	d031      	beq.n	8018f5a <_free_r+0xea>
 8018ef6:	68df      	ldr	r7, [r3, #12]
 8018ef8:	60cf      	str	r7, [r1, #12]
 8018efa:	60b9      	str	r1, [r7, #8]
 8018efc:	eb0c 0106 	add.w	r1, ip, r6
 8018f00:	6849      	ldr	r1, [r1, #4]
 8018f02:	07c9      	lsls	r1, r1, #31
 8018f04:	d40b      	bmi.n	8018f1e <_free_r+0xae>
 8018f06:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8018f0a:	4434      	add	r4, r6
 8018f0c:	bb3a      	cbnz	r2, 8018f5e <_free_r+0xee>
 8018f0e:	4e37      	ldr	r6, [pc, #220]	; (8018fec <_free_r+0x17c>)
 8018f10:	42b1      	cmp	r1, r6
 8018f12:	d124      	bne.n	8018f5e <_free_r+0xee>
 8018f14:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018f18:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8018f1c:	2201      	movs	r2, #1
 8018f1e:	f044 0101 	orr.w	r1, r4, #1
 8018f22:	6059      	str	r1, [r3, #4]
 8018f24:	511c      	str	r4, [r3, r4]
 8018f26:	2a00      	cmp	r2, #0
 8018f28:	d1d3      	bne.n	8018ed2 <_free_r+0x62>
 8018f2a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8018f2e:	d21b      	bcs.n	8018f68 <_free_r+0xf8>
 8018f30:	08e2      	lsrs	r2, r4, #3
 8018f32:	2101      	movs	r1, #1
 8018f34:	0964      	lsrs	r4, r4, #5
 8018f36:	40a1      	lsls	r1, r4
 8018f38:	6844      	ldr	r4, [r0, #4]
 8018f3a:	3201      	adds	r2, #1
 8018f3c:	4321      	orrs	r1, r4
 8018f3e:	6041      	str	r1, [r0, #4]
 8018f40:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8018f44:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8018f48:	3908      	subs	r1, #8
 8018f4a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8018f4e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8018f52:	60e3      	str	r3, [r4, #12]
 8018f54:	e7bd      	b.n	8018ed2 <_free_r+0x62>
 8018f56:	2200      	movs	r2, #0
 8018f58:	e7d0      	b.n	8018efc <_free_r+0x8c>
 8018f5a:	2201      	movs	r2, #1
 8018f5c:	e7ce      	b.n	8018efc <_free_r+0x8c>
 8018f5e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8018f62:	60ce      	str	r6, [r1, #12]
 8018f64:	60b1      	str	r1, [r6, #8]
 8018f66:	e7da      	b.n	8018f1e <_free_r+0xae>
 8018f68:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8018f6c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8018f70:	d214      	bcs.n	8018f9c <_free_r+0x12c>
 8018f72:	09a2      	lsrs	r2, r4, #6
 8018f74:	3238      	adds	r2, #56	; 0x38
 8018f76:	1c51      	adds	r1, r2, #1
 8018f78:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8018f7c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8018f80:	428e      	cmp	r6, r1
 8018f82:	d125      	bne.n	8018fd0 <_free_r+0x160>
 8018f84:	2401      	movs	r4, #1
 8018f86:	1092      	asrs	r2, r2, #2
 8018f88:	fa04 f202 	lsl.w	r2, r4, r2
 8018f8c:	6844      	ldr	r4, [r0, #4]
 8018f8e:	4322      	orrs	r2, r4
 8018f90:	6042      	str	r2, [r0, #4]
 8018f92:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8018f96:	60b3      	str	r3, [r6, #8]
 8018f98:	60cb      	str	r3, [r1, #12]
 8018f9a:	e79a      	b.n	8018ed2 <_free_r+0x62>
 8018f9c:	2a14      	cmp	r2, #20
 8018f9e:	d801      	bhi.n	8018fa4 <_free_r+0x134>
 8018fa0:	325b      	adds	r2, #91	; 0x5b
 8018fa2:	e7e8      	b.n	8018f76 <_free_r+0x106>
 8018fa4:	2a54      	cmp	r2, #84	; 0x54
 8018fa6:	d802      	bhi.n	8018fae <_free_r+0x13e>
 8018fa8:	0b22      	lsrs	r2, r4, #12
 8018faa:	326e      	adds	r2, #110	; 0x6e
 8018fac:	e7e3      	b.n	8018f76 <_free_r+0x106>
 8018fae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8018fb2:	d802      	bhi.n	8018fba <_free_r+0x14a>
 8018fb4:	0be2      	lsrs	r2, r4, #15
 8018fb6:	3277      	adds	r2, #119	; 0x77
 8018fb8:	e7dd      	b.n	8018f76 <_free_r+0x106>
 8018fba:	f240 5154 	movw	r1, #1364	; 0x554
 8018fbe:	428a      	cmp	r2, r1
 8018fc0:	bf9a      	itte	ls
 8018fc2:	0ca2      	lsrls	r2, r4, #18
 8018fc4:	327c      	addls	r2, #124	; 0x7c
 8018fc6:	227e      	movhi	r2, #126	; 0x7e
 8018fc8:	e7d5      	b.n	8018f76 <_free_r+0x106>
 8018fca:	6889      	ldr	r1, [r1, #8]
 8018fcc:	428e      	cmp	r6, r1
 8018fce:	d004      	beq.n	8018fda <_free_r+0x16a>
 8018fd0:	684a      	ldr	r2, [r1, #4]
 8018fd2:	f022 0203 	bic.w	r2, r2, #3
 8018fd6:	42a2      	cmp	r2, r4
 8018fd8:	d8f7      	bhi.n	8018fca <_free_r+0x15a>
 8018fda:	68ce      	ldr	r6, [r1, #12]
 8018fdc:	e7d9      	b.n	8018f92 <_free_r+0x122>
 8018fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018fe0:	200001d0 	.word	0x200001d0
 8018fe4:	200005dc 	.word	0x200005dc
 8018fe8:	20005724 	.word	0x20005724
 8018fec:	200001d8 	.word	0x200001d8

08018ff0 <_malloc_r>:
 8018ff0:	f101 030b 	add.w	r3, r1, #11
 8018ff4:	2b16      	cmp	r3, #22
 8018ff6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ffa:	4605      	mov	r5, r0
 8018ffc:	d906      	bls.n	801900c <_malloc_r+0x1c>
 8018ffe:	f033 0707 	bics.w	r7, r3, #7
 8019002:	d504      	bpl.n	801900e <_malloc_r+0x1e>
 8019004:	230c      	movs	r3, #12
 8019006:	602b      	str	r3, [r5, #0]
 8019008:	2400      	movs	r4, #0
 801900a:	e1a1      	b.n	8019350 <_malloc_r+0x360>
 801900c:	2710      	movs	r7, #16
 801900e:	42b9      	cmp	r1, r7
 8019010:	d8f8      	bhi.n	8019004 <_malloc_r+0x14>
 8019012:	4628      	mov	r0, r5
 8019014:	f000 fa26 	bl	8019464 <__malloc_lock>
 8019018:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 801901c:	4eae      	ldr	r6, [pc, #696]	; (80192d8 <_malloc_r+0x2e8>)
 801901e:	d237      	bcs.n	8019090 <_malloc_r+0xa0>
 8019020:	f107 0208 	add.w	r2, r7, #8
 8019024:	4432      	add	r2, r6
 8019026:	f1a2 0108 	sub.w	r1, r2, #8
 801902a:	6854      	ldr	r4, [r2, #4]
 801902c:	428c      	cmp	r4, r1
 801902e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8019032:	d102      	bne.n	801903a <_malloc_r+0x4a>
 8019034:	68d4      	ldr	r4, [r2, #12]
 8019036:	42a2      	cmp	r2, r4
 8019038:	d010      	beq.n	801905c <_malloc_r+0x6c>
 801903a:	6863      	ldr	r3, [r4, #4]
 801903c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8019040:	f023 0303 	bic.w	r3, r3, #3
 8019044:	60ca      	str	r2, [r1, #12]
 8019046:	4423      	add	r3, r4
 8019048:	6091      	str	r1, [r2, #8]
 801904a:	685a      	ldr	r2, [r3, #4]
 801904c:	f042 0201 	orr.w	r2, r2, #1
 8019050:	605a      	str	r2, [r3, #4]
 8019052:	4628      	mov	r0, r5
 8019054:	f000 fa0c 	bl	8019470 <__malloc_unlock>
 8019058:	3408      	adds	r4, #8
 801905a:	e179      	b.n	8019350 <_malloc_r+0x360>
 801905c:	3302      	adds	r3, #2
 801905e:	6934      	ldr	r4, [r6, #16]
 8019060:	499e      	ldr	r1, [pc, #632]	; (80192dc <_malloc_r+0x2ec>)
 8019062:	428c      	cmp	r4, r1
 8019064:	d077      	beq.n	8019156 <_malloc_r+0x166>
 8019066:	6862      	ldr	r2, [r4, #4]
 8019068:	f022 0c03 	bic.w	ip, r2, #3
 801906c:	ebac 0007 	sub.w	r0, ip, r7
 8019070:	280f      	cmp	r0, #15
 8019072:	dd48      	ble.n	8019106 <_malloc_r+0x116>
 8019074:	19e2      	adds	r2, r4, r7
 8019076:	f040 0301 	orr.w	r3, r0, #1
 801907a:	f047 0701 	orr.w	r7, r7, #1
 801907e:	6067      	str	r7, [r4, #4]
 8019080:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8019084:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019088:	6053      	str	r3, [r2, #4]
 801908a:	f844 000c 	str.w	r0, [r4, ip]
 801908e:	e7e0      	b.n	8019052 <_malloc_r+0x62>
 8019090:	0a7b      	lsrs	r3, r7, #9
 8019092:	d02a      	beq.n	80190ea <_malloc_r+0xfa>
 8019094:	2b04      	cmp	r3, #4
 8019096:	d812      	bhi.n	80190be <_malloc_r+0xce>
 8019098:	09bb      	lsrs	r3, r7, #6
 801909a:	3338      	adds	r3, #56	; 0x38
 801909c:	1c5a      	adds	r2, r3, #1
 801909e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80190a2:	f1a2 0c08 	sub.w	ip, r2, #8
 80190a6:	6854      	ldr	r4, [r2, #4]
 80190a8:	4564      	cmp	r4, ip
 80190aa:	d006      	beq.n	80190ba <_malloc_r+0xca>
 80190ac:	6862      	ldr	r2, [r4, #4]
 80190ae:	f022 0203 	bic.w	r2, r2, #3
 80190b2:	1bd0      	subs	r0, r2, r7
 80190b4:	280f      	cmp	r0, #15
 80190b6:	dd1c      	ble.n	80190f2 <_malloc_r+0x102>
 80190b8:	3b01      	subs	r3, #1
 80190ba:	3301      	adds	r3, #1
 80190bc:	e7cf      	b.n	801905e <_malloc_r+0x6e>
 80190be:	2b14      	cmp	r3, #20
 80190c0:	d801      	bhi.n	80190c6 <_malloc_r+0xd6>
 80190c2:	335b      	adds	r3, #91	; 0x5b
 80190c4:	e7ea      	b.n	801909c <_malloc_r+0xac>
 80190c6:	2b54      	cmp	r3, #84	; 0x54
 80190c8:	d802      	bhi.n	80190d0 <_malloc_r+0xe0>
 80190ca:	0b3b      	lsrs	r3, r7, #12
 80190cc:	336e      	adds	r3, #110	; 0x6e
 80190ce:	e7e5      	b.n	801909c <_malloc_r+0xac>
 80190d0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80190d4:	d802      	bhi.n	80190dc <_malloc_r+0xec>
 80190d6:	0bfb      	lsrs	r3, r7, #15
 80190d8:	3377      	adds	r3, #119	; 0x77
 80190da:	e7df      	b.n	801909c <_malloc_r+0xac>
 80190dc:	f240 5254 	movw	r2, #1364	; 0x554
 80190e0:	4293      	cmp	r3, r2
 80190e2:	d804      	bhi.n	80190ee <_malloc_r+0xfe>
 80190e4:	0cbb      	lsrs	r3, r7, #18
 80190e6:	337c      	adds	r3, #124	; 0x7c
 80190e8:	e7d8      	b.n	801909c <_malloc_r+0xac>
 80190ea:	233f      	movs	r3, #63	; 0x3f
 80190ec:	e7d6      	b.n	801909c <_malloc_r+0xac>
 80190ee:	237e      	movs	r3, #126	; 0x7e
 80190f0:	e7d4      	b.n	801909c <_malloc_r+0xac>
 80190f2:	2800      	cmp	r0, #0
 80190f4:	68e1      	ldr	r1, [r4, #12]
 80190f6:	db04      	blt.n	8019102 <_malloc_r+0x112>
 80190f8:	68a3      	ldr	r3, [r4, #8]
 80190fa:	60d9      	str	r1, [r3, #12]
 80190fc:	608b      	str	r3, [r1, #8]
 80190fe:	18a3      	adds	r3, r4, r2
 8019100:	e7a3      	b.n	801904a <_malloc_r+0x5a>
 8019102:	460c      	mov	r4, r1
 8019104:	e7d0      	b.n	80190a8 <_malloc_r+0xb8>
 8019106:	2800      	cmp	r0, #0
 8019108:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801910c:	db07      	blt.n	801911e <_malloc_r+0x12e>
 801910e:	44a4      	add	ip, r4
 8019110:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8019114:	f043 0301 	orr.w	r3, r3, #1
 8019118:	f8cc 3004 	str.w	r3, [ip, #4]
 801911c:	e799      	b.n	8019052 <_malloc_r+0x62>
 801911e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8019122:	6870      	ldr	r0, [r6, #4]
 8019124:	f080 8093 	bcs.w	801924e <_malloc_r+0x25e>
 8019128:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801912c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8019130:	f04f 0c01 	mov.w	ip, #1
 8019134:	3201      	adds	r2, #1
 8019136:	fa0c fc0e 	lsl.w	ip, ip, lr
 801913a:	ea4c 0000 	orr.w	r0, ip, r0
 801913e:	6070      	str	r0, [r6, #4]
 8019140:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8019144:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8019148:	3808      	subs	r0, #8
 801914a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801914e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8019152:	f8cc 400c 	str.w	r4, [ip, #12]
 8019156:	1098      	asrs	r0, r3, #2
 8019158:	2201      	movs	r2, #1
 801915a:	4082      	lsls	r2, r0
 801915c:	6870      	ldr	r0, [r6, #4]
 801915e:	4290      	cmp	r0, r2
 8019160:	d326      	bcc.n	80191b0 <_malloc_r+0x1c0>
 8019162:	4210      	tst	r0, r2
 8019164:	d106      	bne.n	8019174 <_malloc_r+0x184>
 8019166:	f023 0303 	bic.w	r3, r3, #3
 801916a:	0052      	lsls	r2, r2, #1
 801916c:	4210      	tst	r0, r2
 801916e:	f103 0304 	add.w	r3, r3, #4
 8019172:	d0fa      	beq.n	801916a <_malloc_r+0x17a>
 8019174:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8019178:	46c1      	mov	r9, r8
 801917a:	469e      	mov	lr, r3
 801917c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8019180:	454c      	cmp	r4, r9
 8019182:	f040 80b7 	bne.w	80192f4 <_malloc_r+0x304>
 8019186:	f10e 0e01 	add.w	lr, lr, #1
 801918a:	f01e 0f03 	tst.w	lr, #3
 801918e:	f109 0908 	add.w	r9, r9, #8
 8019192:	d1f3      	bne.n	801917c <_malloc_r+0x18c>
 8019194:	0798      	lsls	r0, r3, #30
 8019196:	f040 80e1 	bne.w	801935c <_malloc_r+0x36c>
 801919a:	6873      	ldr	r3, [r6, #4]
 801919c:	ea23 0302 	bic.w	r3, r3, r2
 80191a0:	6073      	str	r3, [r6, #4]
 80191a2:	6870      	ldr	r0, [r6, #4]
 80191a4:	0052      	lsls	r2, r2, #1
 80191a6:	4290      	cmp	r0, r2
 80191a8:	d302      	bcc.n	80191b0 <_malloc_r+0x1c0>
 80191aa:	2a00      	cmp	r2, #0
 80191ac:	f040 80e3 	bne.w	8019376 <_malloc_r+0x386>
 80191b0:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80191b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80191b8:	f023 0903 	bic.w	r9, r3, #3
 80191bc:	45b9      	cmp	r9, r7
 80191be:	d304      	bcc.n	80191ca <_malloc_r+0x1da>
 80191c0:	eba9 0207 	sub.w	r2, r9, r7
 80191c4:	2a0f      	cmp	r2, #15
 80191c6:	f300 8141 	bgt.w	801944c <_malloc_r+0x45c>
 80191ca:	4b45      	ldr	r3, [pc, #276]	; (80192e0 <_malloc_r+0x2f0>)
 80191cc:	6819      	ldr	r1, [r3, #0]
 80191ce:	3110      	adds	r1, #16
 80191d0:	4439      	add	r1, r7
 80191d2:	2008      	movs	r0, #8
 80191d4:	9101      	str	r1, [sp, #4]
 80191d6:	f003 fe5f 	bl	801ce98 <sysconf>
 80191da:	4a42      	ldr	r2, [pc, #264]	; (80192e4 <_malloc_r+0x2f4>)
 80191dc:	9901      	ldr	r1, [sp, #4]
 80191de:	6813      	ldr	r3, [r2, #0]
 80191e0:	3301      	adds	r3, #1
 80191e2:	bf1f      	itttt	ne
 80191e4:	f101 31ff 	addne.w	r1, r1, #4294967295
 80191e8:	1809      	addne	r1, r1, r0
 80191ea:	4243      	negne	r3, r0
 80191ec:	4019      	andne	r1, r3
 80191ee:	4680      	mov	r8, r0
 80191f0:	4628      	mov	r0, r5
 80191f2:	9101      	str	r1, [sp, #4]
 80191f4:	f003 fe2c 	bl	801ce50 <_sbrk_r>
 80191f8:	1c42      	adds	r2, r0, #1
 80191fa:	eb0a 0b09 	add.w	fp, sl, r9
 80191fe:	4604      	mov	r4, r0
 8019200:	f000 80f7 	beq.w	80193f2 <_malloc_r+0x402>
 8019204:	4583      	cmp	fp, r0
 8019206:	9901      	ldr	r1, [sp, #4]
 8019208:	4a36      	ldr	r2, [pc, #216]	; (80192e4 <_malloc_r+0x2f4>)
 801920a:	d902      	bls.n	8019212 <_malloc_r+0x222>
 801920c:	45b2      	cmp	sl, r6
 801920e:	f040 80f0 	bne.w	80193f2 <_malloc_r+0x402>
 8019212:	4b35      	ldr	r3, [pc, #212]	; (80192e8 <_malloc_r+0x2f8>)
 8019214:	6818      	ldr	r0, [r3, #0]
 8019216:	45a3      	cmp	fp, r4
 8019218:	4408      	add	r0, r1
 801921a:	6018      	str	r0, [r3, #0]
 801921c:	f108 3cff 	add.w	ip, r8, #4294967295
 8019220:	f040 80ab 	bne.w	801937a <_malloc_r+0x38a>
 8019224:	ea1b 0f0c 	tst.w	fp, ip
 8019228:	f040 80a7 	bne.w	801937a <_malloc_r+0x38a>
 801922c:	68b2      	ldr	r2, [r6, #8]
 801922e:	4449      	add	r1, r9
 8019230:	f041 0101 	orr.w	r1, r1, #1
 8019234:	6051      	str	r1, [r2, #4]
 8019236:	4a2d      	ldr	r2, [pc, #180]	; (80192ec <_malloc_r+0x2fc>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	6811      	ldr	r1, [r2, #0]
 801923c:	428b      	cmp	r3, r1
 801923e:	bf88      	it	hi
 8019240:	6013      	strhi	r3, [r2, #0]
 8019242:	4a2b      	ldr	r2, [pc, #172]	; (80192f0 <_malloc_r+0x300>)
 8019244:	6811      	ldr	r1, [r2, #0]
 8019246:	428b      	cmp	r3, r1
 8019248:	bf88      	it	hi
 801924a:	6013      	strhi	r3, [r2, #0]
 801924c:	e0d1      	b.n	80193f2 <_malloc_r+0x402>
 801924e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8019252:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8019256:	d218      	bcs.n	801928a <_malloc_r+0x29a>
 8019258:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801925c:	3238      	adds	r2, #56	; 0x38
 801925e:	f102 0e01 	add.w	lr, r2, #1
 8019262:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8019266:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801926a:	45f0      	cmp	r8, lr
 801926c:	d12b      	bne.n	80192c6 <_malloc_r+0x2d6>
 801926e:	1092      	asrs	r2, r2, #2
 8019270:	f04f 0c01 	mov.w	ip, #1
 8019274:	fa0c f202 	lsl.w	r2, ip, r2
 8019278:	4302      	orrs	r2, r0
 801927a:	6072      	str	r2, [r6, #4]
 801927c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8019280:	f8c8 4008 	str.w	r4, [r8, #8]
 8019284:	f8ce 400c 	str.w	r4, [lr, #12]
 8019288:	e765      	b.n	8019156 <_malloc_r+0x166>
 801928a:	2a14      	cmp	r2, #20
 801928c:	d801      	bhi.n	8019292 <_malloc_r+0x2a2>
 801928e:	325b      	adds	r2, #91	; 0x5b
 8019290:	e7e5      	b.n	801925e <_malloc_r+0x26e>
 8019292:	2a54      	cmp	r2, #84	; 0x54
 8019294:	d803      	bhi.n	801929e <_malloc_r+0x2ae>
 8019296:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801929a:	326e      	adds	r2, #110	; 0x6e
 801929c:	e7df      	b.n	801925e <_malloc_r+0x26e>
 801929e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80192a2:	d803      	bhi.n	80192ac <_malloc_r+0x2bc>
 80192a4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80192a8:	3277      	adds	r2, #119	; 0x77
 80192aa:	e7d8      	b.n	801925e <_malloc_r+0x26e>
 80192ac:	f240 5e54 	movw	lr, #1364	; 0x554
 80192b0:	4572      	cmp	r2, lr
 80192b2:	bf9a      	itte	ls
 80192b4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80192b8:	327c      	addls	r2, #124	; 0x7c
 80192ba:	227e      	movhi	r2, #126	; 0x7e
 80192bc:	e7cf      	b.n	801925e <_malloc_r+0x26e>
 80192be:	f8de e008 	ldr.w	lr, [lr, #8]
 80192c2:	45f0      	cmp	r8, lr
 80192c4:	d005      	beq.n	80192d2 <_malloc_r+0x2e2>
 80192c6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80192ca:	f022 0203 	bic.w	r2, r2, #3
 80192ce:	4562      	cmp	r2, ip
 80192d0:	d8f5      	bhi.n	80192be <_malloc_r+0x2ce>
 80192d2:	f8de 800c 	ldr.w	r8, [lr, #12]
 80192d6:	e7d1      	b.n	801927c <_malloc_r+0x28c>
 80192d8:	200001d0 	.word	0x200001d0
 80192dc:	200001d8 	.word	0x200001d8
 80192e0:	20005724 	.word	0x20005724
 80192e4:	200005d8 	.word	0x200005d8
 80192e8:	200056f4 	.word	0x200056f4
 80192ec:	2000571c 	.word	0x2000571c
 80192f0:	20005720 	.word	0x20005720
 80192f4:	6860      	ldr	r0, [r4, #4]
 80192f6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80192fa:	f020 0003 	bic.w	r0, r0, #3
 80192fe:	eba0 0a07 	sub.w	sl, r0, r7
 8019302:	f1ba 0f0f 	cmp.w	sl, #15
 8019306:	dd12      	ble.n	801932e <_malloc_r+0x33e>
 8019308:	68a3      	ldr	r3, [r4, #8]
 801930a:	19e2      	adds	r2, r4, r7
 801930c:	f047 0701 	orr.w	r7, r7, #1
 8019310:	6067      	str	r7, [r4, #4]
 8019312:	f8c3 c00c 	str.w	ip, [r3, #12]
 8019316:	f8cc 3008 	str.w	r3, [ip, #8]
 801931a:	f04a 0301 	orr.w	r3, sl, #1
 801931e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8019322:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8019326:	6053      	str	r3, [r2, #4]
 8019328:	f844 a000 	str.w	sl, [r4, r0]
 801932c:	e691      	b.n	8019052 <_malloc_r+0x62>
 801932e:	f1ba 0f00 	cmp.w	sl, #0
 8019332:	db11      	blt.n	8019358 <_malloc_r+0x368>
 8019334:	4420      	add	r0, r4
 8019336:	6843      	ldr	r3, [r0, #4]
 8019338:	f043 0301 	orr.w	r3, r3, #1
 801933c:	6043      	str	r3, [r0, #4]
 801933e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8019342:	4628      	mov	r0, r5
 8019344:	f8c3 c00c 	str.w	ip, [r3, #12]
 8019348:	f8cc 3008 	str.w	r3, [ip, #8]
 801934c:	f000 f890 	bl	8019470 <__malloc_unlock>
 8019350:	4620      	mov	r0, r4
 8019352:	b003      	add	sp, #12
 8019354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019358:	4664      	mov	r4, ip
 801935a:	e711      	b.n	8019180 <_malloc_r+0x190>
 801935c:	f858 0908 	ldr.w	r0, [r8], #-8
 8019360:	4540      	cmp	r0, r8
 8019362:	f103 33ff 	add.w	r3, r3, #4294967295
 8019366:	f43f af15 	beq.w	8019194 <_malloc_r+0x1a4>
 801936a:	e71a      	b.n	80191a2 <_malloc_r+0x1b2>
 801936c:	3304      	adds	r3, #4
 801936e:	0052      	lsls	r2, r2, #1
 8019370:	4210      	tst	r0, r2
 8019372:	d0fb      	beq.n	801936c <_malloc_r+0x37c>
 8019374:	e6fe      	b.n	8019174 <_malloc_r+0x184>
 8019376:	4673      	mov	r3, lr
 8019378:	e7fa      	b.n	8019370 <_malloc_r+0x380>
 801937a:	f8d2 e000 	ldr.w	lr, [r2]
 801937e:	f1be 3fff 	cmp.w	lr, #4294967295
 8019382:	bf1b      	ittet	ne
 8019384:	eba4 0b0b 	subne.w	fp, r4, fp
 8019388:	eb0b 0200 	addne.w	r2, fp, r0
 801938c:	6014      	streq	r4, [r2, #0]
 801938e:	601a      	strne	r2, [r3, #0]
 8019390:	f014 0b07 	ands.w	fp, r4, #7
 8019394:	bf1a      	itte	ne
 8019396:	f1cb 0008 	rsbne	r0, fp, #8
 801939a:	1824      	addne	r4, r4, r0
 801939c:	4658      	moveq	r0, fp
 801939e:	1862      	adds	r2, r4, r1
 80193a0:	ea02 010c 	and.w	r1, r2, ip
 80193a4:	4480      	add	r8, r0
 80193a6:	eba8 0801 	sub.w	r8, r8, r1
 80193aa:	ea08 080c 	and.w	r8, r8, ip
 80193ae:	4641      	mov	r1, r8
 80193b0:	4628      	mov	r0, r5
 80193b2:	9201      	str	r2, [sp, #4]
 80193b4:	f003 fd4c 	bl	801ce50 <_sbrk_r>
 80193b8:	1c43      	adds	r3, r0, #1
 80193ba:	9a01      	ldr	r2, [sp, #4]
 80193bc:	4b28      	ldr	r3, [pc, #160]	; (8019460 <_malloc_r+0x470>)
 80193be:	d107      	bne.n	80193d0 <_malloc_r+0x3e0>
 80193c0:	f1bb 0f00 	cmp.w	fp, #0
 80193c4:	d023      	beq.n	801940e <_malloc_r+0x41e>
 80193c6:	f1ab 0008 	sub.w	r0, fp, #8
 80193ca:	4410      	add	r0, r2
 80193cc:	f04f 0800 	mov.w	r8, #0
 80193d0:	681a      	ldr	r2, [r3, #0]
 80193d2:	60b4      	str	r4, [r6, #8]
 80193d4:	1b00      	subs	r0, r0, r4
 80193d6:	4440      	add	r0, r8
 80193d8:	4442      	add	r2, r8
 80193da:	f040 0001 	orr.w	r0, r0, #1
 80193de:	45b2      	cmp	sl, r6
 80193e0:	601a      	str	r2, [r3, #0]
 80193e2:	6060      	str	r0, [r4, #4]
 80193e4:	f43f af27 	beq.w	8019236 <_malloc_r+0x246>
 80193e8:	f1b9 0f0f 	cmp.w	r9, #15
 80193ec:	d812      	bhi.n	8019414 <_malloc_r+0x424>
 80193ee:	2301      	movs	r3, #1
 80193f0:	6063      	str	r3, [r4, #4]
 80193f2:	68b3      	ldr	r3, [r6, #8]
 80193f4:	685b      	ldr	r3, [r3, #4]
 80193f6:	f023 0303 	bic.w	r3, r3, #3
 80193fa:	42bb      	cmp	r3, r7
 80193fc:	eba3 0207 	sub.w	r2, r3, r7
 8019400:	d301      	bcc.n	8019406 <_malloc_r+0x416>
 8019402:	2a0f      	cmp	r2, #15
 8019404:	dc22      	bgt.n	801944c <_malloc_r+0x45c>
 8019406:	4628      	mov	r0, r5
 8019408:	f000 f832 	bl	8019470 <__malloc_unlock>
 801940c:	e5fc      	b.n	8019008 <_malloc_r+0x18>
 801940e:	4610      	mov	r0, r2
 8019410:	46d8      	mov	r8, fp
 8019412:	e7dd      	b.n	80193d0 <_malloc_r+0x3e0>
 8019414:	f8da 2004 	ldr.w	r2, [sl, #4]
 8019418:	f1a9 090c 	sub.w	r9, r9, #12
 801941c:	f029 0907 	bic.w	r9, r9, #7
 8019420:	f002 0201 	and.w	r2, r2, #1
 8019424:	ea42 0209 	orr.w	r2, r2, r9
 8019428:	f8ca 2004 	str.w	r2, [sl, #4]
 801942c:	2105      	movs	r1, #5
 801942e:	eb0a 0209 	add.w	r2, sl, r9
 8019432:	f1b9 0f0f 	cmp.w	r9, #15
 8019436:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801943a:	f67f aefc 	bls.w	8019236 <_malloc_r+0x246>
 801943e:	f10a 0108 	add.w	r1, sl, #8
 8019442:	4628      	mov	r0, r5
 8019444:	f7ff fd14 	bl	8018e70 <_free_r>
 8019448:	4b05      	ldr	r3, [pc, #20]	; (8019460 <_malloc_r+0x470>)
 801944a:	e6f4      	b.n	8019236 <_malloc_r+0x246>
 801944c:	68b4      	ldr	r4, [r6, #8]
 801944e:	f047 0301 	orr.w	r3, r7, #1
 8019452:	4427      	add	r7, r4
 8019454:	f042 0201 	orr.w	r2, r2, #1
 8019458:	6063      	str	r3, [r4, #4]
 801945a:	60b7      	str	r7, [r6, #8]
 801945c:	607a      	str	r2, [r7, #4]
 801945e:	e5f8      	b.n	8019052 <_malloc_r+0x62>
 8019460:	200056f4 	.word	0x200056f4

08019464 <__malloc_lock>:
 8019464:	4801      	ldr	r0, [pc, #4]	; (801946c <__malloc_lock+0x8>)
 8019466:	f7ff bc8f 	b.w	8018d88 <__retarget_lock_acquire_recursive>
 801946a:	bf00      	nop
 801946c:	200056ed 	.word	0x200056ed

08019470 <__malloc_unlock>:
 8019470:	4801      	ldr	r0, [pc, #4]	; (8019478 <__malloc_unlock+0x8>)
 8019472:	f7ff bc8a 	b.w	8018d8a <__retarget_lock_release_recursive>
 8019476:	bf00      	nop
 8019478:	200056ed 	.word	0x200056ed

0801947c <_realloc_r>:
 801947c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019480:	460c      	mov	r4, r1
 8019482:	4682      	mov	sl, r0
 8019484:	4611      	mov	r1, r2
 8019486:	b924      	cbnz	r4, 8019492 <_realloc_r+0x16>
 8019488:	b003      	add	sp, #12
 801948a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801948e:	f7ff bdaf 	b.w	8018ff0 <_malloc_r>
 8019492:	9201      	str	r2, [sp, #4]
 8019494:	f7ff ffe6 	bl	8019464 <__malloc_lock>
 8019498:	9901      	ldr	r1, [sp, #4]
 801949a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801949e:	f101 080b 	add.w	r8, r1, #11
 80194a2:	f1b8 0f16 	cmp.w	r8, #22
 80194a6:	d90b      	bls.n	80194c0 <_realloc_r+0x44>
 80194a8:	f038 0807 	bics.w	r8, r8, #7
 80194ac:	d50a      	bpl.n	80194c4 <_realloc_r+0x48>
 80194ae:	230c      	movs	r3, #12
 80194b0:	f8ca 3000 	str.w	r3, [sl]
 80194b4:	f04f 0b00 	mov.w	fp, #0
 80194b8:	4658      	mov	r0, fp
 80194ba:	b003      	add	sp, #12
 80194bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194c0:	f04f 0810 	mov.w	r8, #16
 80194c4:	4588      	cmp	r8, r1
 80194c6:	d3f2      	bcc.n	80194ae <_realloc_r+0x32>
 80194c8:	f025 0603 	bic.w	r6, r5, #3
 80194cc:	45b0      	cmp	r8, r6
 80194ce:	f1a4 0908 	sub.w	r9, r4, #8
 80194d2:	f340 816e 	ble.w	80197b2 <_realloc_r+0x336>
 80194d6:	4a9b      	ldr	r2, [pc, #620]	; (8019744 <_realloc_r+0x2c8>)
 80194d8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80194dc:	eb09 0306 	add.w	r3, r9, r6
 80194e0:	459c      	cmp	ip, r3
 80194e2:	685a      	ldr	r2, [r3, #4]
 80194e4:	d005      	beq.n	80194f2 <_realloc_r+0x76>
 80194e6:	f022 0001 	bic.w	r0, r2, #1
 80194ea:	4418      	add	r0, r3
 80194ec:	6840      	ldr	r0, [r0, #4]
 80194ee:	07c7      	lsls	r7, r0, #31
 80194f0:	d447      	bmi.n	8019582 <_realloc_r+0x106>
 80194f2:	f022 0203 	bic.w	r2, r2, #3
 80194f6:	459c      	cmp	ip, r3
 80194f8:	eb06 0702 	add.w	r7, r6, r2
 80194fc:	d119      	bne.n	8019532 <_realloc_r+0xb6>
 80194fe:	f108 0010 	add.w	r0, r8, #16
 8019502:	42b8      	cmp	r0, r7
 8019504:	dc3f      	bgt.n	8019586 <_realloc_r+0x10a>
 8019506:	eb09 0308 	add.w	r3, r9, r8
 801950a:	4a8e      	ldr	r2, [pc, #568]	; (8019744 <_realloc_r+0x2c8>)
 801950c:	eba7 0708 	sub.w	r7, r7, r8
 8019510:	f047 0701 	orr.w	r7, r7, #1
 8019514:	6093      	str	r3, [r2, #8]
 8019516:	605f      	str	r7, [r3, #4]
 8019518:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801951c:	f003 0301 	and.w	r3, r3, #1
 8019520:	ea43 0308 	orr.w	r3, r3, r8
 8019524:	f844 3c04 	str.w	r3, [r4, #-4]
 8019528:	4650      	mov	r0, sl
 801952a:	f7ff ffa1 	bl	8019470 <__malloc_unlock>
 801952e:	46a3      	mov	fp, r4
 8019530:	e7c2      	b.n	80194b8 <_realloc_r+0x3c>
 8019532:	45b8      	cmp	r8, r7
 8019534:	dc27      	bgt.n	8019586 <_realloc_r+0x10a>
 8019536:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 801953a:	60da      	str	r2, [r3, #12]
 801953c:	6093      	str	r3, [r2, #8]
 801953e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019542:	eba7 0008 	sub.w	r0, r7, r8
 8019546:	280f      	cmp	r0, #15
 8019548:	f003 0301 	and.w	r3, r3, #1
 801954c:	eb09 0207 	add.w	r2, r9, r7
 8019550:	f240 8131 	bls.w	80197b6 <_realloc_r+0x33a>
 8019554:	eb09 0108 	add.w	r1, r9, r8
 8019558:	ea48 0303 	orr.w	r3, r8, r3
 801955c:	f040 0001 	orr.w	r0, r0, #1
 8019560:	f8c9 3004 	str.w	r3, [r9, #4]
 8019564:	6048      	str	r0, [r1, #4]
 8019566:	6853      	ldr	r3, [r2, #4]
 8019568:	f043 0301 	orr.w	r3, r3, #1
 801956c:	6053      	str	r3, [r2, #4]
 801956e:	3108      	adds	r1, #8
 8019570:	4650      	mov	r0, sl
 8019572:	f7ff fc7d 	bl	8018e70 <_free_r>
 8019576:	4650      	mov	r0, sl
 8019578:	f7ff ff7a 	bl	8019470 <__malloc_unlock>
 801957c:	f109 0b08 	add.w	fp, r9, #8
 8019580:	e79a      	b.n	80194b8 <_realloc_r+0x3c>
 8019582:	2200      	movs	r2, #0
 8019584:	4613      	mov	r3, r2
 8019586:	07e8      	lsls	r0, r5, #31
 8019588:	f100 80c6 	bmi.w	8019718 <_realloc_r+0x29c>
 801958c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8019590:	eba9 0505 	sub.w	r5, r9, r5
 8019594:	6868      	ldr	r0, [r5, #4]
 8019596:	f020 0003 	bic.w	r0, r0, #3
 801959a:	eb00 0b06 	add.w	fp, r0, r6
 801959e:	2b00      	cmp	r3, #0
 80195a0:	f000 8086 	beq.w	80196b0 <_realloc_r+0x234>
 80195a4:	459c      	cmp	ip, r3
 80195a6:	eb02 070b 	add.w	r7, r2, fp
 80195aa:	d149      	bne.n	8019640 <_realloc_r+0x1c4>
 80195ac:	f108 0310 	add.w	r3, r8, #16
 80195b0:	42bb      	cmp	r3, r7
 80195b2:	dc7d      	bgt.n	80196b0 <_realloc_r+0x234>
 80195b4:	46ab      	mov	fp, r5
 80195b6:	68eb      	ldr	r3, [r5, #12]
 80195b8:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80195bc:	60d3      	str	r3, [r2, #12]
 80195be:	609a      	str	r2, [r3, #8]
 80195c0:	1f32      	subs	r2, r6, #4
 80195c2:	2a24      	cmp	r2, #36	; 0x24
 80195c4:	d837      	bhi.n	8019636 <_realloc_r+0x1ba>
 80195c6:	2a13      	cmp	r2, #19
 80195c8:	d933      	bls.n	8019632 <_realloc_r+0x1b6>
 80195ca:	6823      	ldr	r3, [r4, #0]
 80195cc:	60ab      	str	r3, [r5, #8]
 80195ce:	6863      	ldr	r3, [r4, #4]
 80195d0:	60eb      	str	r3, [r5, #12]
 80195d2:	2a1b      	cmp	r2, #27
 80195d4:	d81b      	bhi.n	801960e <_realloc_r+0x192>
 80195d6:	3408      	adds	r4, #8
 80195d8:	f105 0310 	add.w	r3, r5, #16
 80195dc:	6822      	ldr	r2, [r4, #0]
 80195de:	601a      	str	r2, [r3, #0]
 80195e0:	6862      	ldr	r2, [r4, #4]
 80195e2:	605a      	str	r2, [r3, #4]
 80195e4:	68a2      	ldr	r2, [r4, #8]
 80195e6:	609a      	str	r2, [r3, #8]
 80195e8:	eb05 0308 	add.w	r3, r5, r8
 80195ec:	4a55      	ldr	r2, [pc, #340]	; (8019744 <_realloc_r+0x2c8>)
 80195ee:	eba7 0708 	sub.w	r7, r7, r8
 80195f2:	f047 0701 	orr.w	r7, r7, #1
 80195f6:	6093      	str	r3, [r2, #8]
 80195f8:	605f      	str	r7, [r3, #4]
 80195fa:	686b      	ldr	r3, [r5, #4]
 80195fc:	f003 0301 	and.w	r3, r3, #1
 8019600:	ea43 0308 	orr.w	r3, r3, r8
 8019604:	606b      	str	r3, [r5, #4]
 8019606:	4650      	mov	r0, sl
 8019608:	f7ff ff32 	bl	8019470 <__malloc_unlock>
 801960c:	e754      	b.n	80194b8 <_realloc_r+0x3c>
 801960e:	68a3      	ldr	r3, [r4, #8]
 8019610:	612b      	str	r3, [r5, #16]
 8019612:	68e3      	ldr	r3, [r4, #12]
 8019614:	616b      	str	r3, [r5, #20]
 8019616:	2a24      	cmp	r2, #36	; 0x24
 8019618:	bf01      	itttt	eq
 801961a:	6923      	ldreq	r3, [r4, #16]
 801961c:	61ab      	streq	r3, [r5, #24]
 801961e:	6962      	ldreq	r2, [r4, #20]
 8019620:	61ea      	streq	r2, [r5, #28]
 8019622:	bf19      	ittee	ne
 8019624:	3410      	addne	r4, #16
 8019626:	f105 0318 	addne.w	r3, r5, #24
 801962a:	f105 0320 	addeq.w	r3, r5, #32
 801962e:	3418      	addeq	r4, #24
 8019630:	e7d4      	b.n	80195dc <_realloc_r+0x160>
 8019632:	465b      	mov	r3, fp
 8019634:	e7d2      	b.n	80195dc <_realloc_r+0x160>
 8019636:	4621      	mov	r1, r4
 8019638:	4658      	mov	r0, fp
 801963a:	f7ff faa1 	bl	8018b80 <memmove>
 801963e:	e7d3      	b.n	80195e8 <_realloc_r+0x16c>
 8019640:	45b8      	cmp	r8, r7
 8019642:	dc35      	bgt.n	80196b0 <_realloc_r+0x234>
 8019644:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8019648:	4628      	mov	r0, r5
 801964a:	60da      	str	r2, [r3, #12]
 801964c:	6093      	str	r3, [r2, #8]
 801964e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8019652:	68eb      	ldr	r3, [r5, #12]
 8019654:	60d3      	str	r3, [r2, #12]
 8019656:	609a      	str	r2, [r3, #8]
 8019658:	1f32      	subs	r2, r6, #4
 801965a:	2a24      	cmp	r2, #36	; 0x24
 801965c:	d824      	bhi.n	80196a8 <_realloc_r+0x22c>
 801965e:	2a13      	cmp	r2, #19
 8019660:	d908      	bls.n	8019674 <_realloc_r+0x1f8>
 8019662:	6823      	ldr	r3, [r4, #0]
 8019664:	60ab      	str	r3, [r5, #8]
 8019666:	6863      	ldr	r3, [r4, #4]
 8019668:	60eb      	str	r3, [r5, #12]
 801966a:	2a1b      	cmp	r2, #27
 801966c:	d80a      	bhi.n	8019684 <_realloc_r+0x208>
 801966e:	3408      	adds	r4, #8
 8019670:	f105 0010 	add.w	r0, r5, #16
 8019674:	6823      	ldr	r3, [r4, #0]
 8019676:	6003      	str	r3, [r0, #0]
 8019678:	6863      	ldr	r3, [r4, #4]
 801967a:	6043      	str	r3, [r0, #4]
 801967c:	68a3      	ldr	r3, [r4, #8]
 801967e:	6083      	str	r3, [r0, #8]
 8019680:	46a9      	mov	r9, r5
 8019682:	e75c      	b.n	801953e <_realloc_r+0xc2>
 8019684:	68a3      	ldr	r3, [r4, #8]
 8019686:	612b      	str	r3, [r5, #16]
 8019688:	68e3      	ldr	r3, [r4, #12]
 801968a:	616b      	str	r3, [r5, #20]
 801968c:	2a24      	cmp	r2, #36	; 0x24
 801968e:	bf01      	itttt	eq
 8019690:	6923      	ldreq	r3, [r4, #16]
 8019692:	61ab      	streq	r3, [r5, #24]
 8019694:	6963      	ldreq	r3, [r4, #20]
 8019696:	61eb      	streq	r3, [r5, #28]
 8019698:	bf19      	ittee	ne
 801969a:	3410      	addne	r4, #16
 801969c:	f105 0018 	addne.w	r0, r5, #24
 80196a0:	f105 0020 	addeq.w	r0, r5, #32
 80196a4:	3418      	addeq	r4, #24
 80196a6:	e7e5      	b.n	8019674 <_realloc_r+0x1f8>
 80196a8:	4621      	mov	r1, r4
 80196aa:	f7ff fa69 	bl	8018b80 <memmove>
 80196ae:	e7e7      	b.n	8019680 <_realloc_r+0x204>
 80196b0:	45d8      	cmp	r8, fp
 80196b2:	dc31      	bgt.n	8019718 <_realloc_r+0x29c>
 80196b4:	4628      	mov	r0, r5
 80196b6:	68eb      	ldr	r3, [r5, #12]
 80196b8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80196bc:	60d3      	str	r3, [r2, #12]
 80196be:	609a      	str	r2, [r3, #8]
 80196c0:	1f32      	subs	r2, r6, #4
 80196c2:	2a24      	cmp	r2, #36	; 0x24
 80196c4:	d824      	bhi.n	8019710 <_realloc_r+0x294>
 80196c6:	2a13      	cmp	r2, #19
 80196c8:	d908      	bls.n	80196dc <_realloc_r+0x260>
 80196ca:	6823      	ldr	r3, [r4, #0]
 80196cc:	60ab      	str	r3, [r5, #8]
 80196ce:	6863      	ldr	r3, [r4, #4]
 80196d0:	60eb      	str	r3, [r5, #12]
 80196d2:	2a1b      	cmp	r2, #27
 80196d4:	d80a      	bhi.n	80196ec <_realloc_r+0x270>
 80196d6:	3408      	adds	r4, #8
 80196d8:	f105 0010 	add.w	r0, r5, #16
 80196dc:	6823      	ldr	r3, [r4, #0]
 80196de:	6003      	str	r3, [r0, #0]
 80196e0:	6863      	ldr	r3, [r4, #4]
 80196e2:	6043      	str	r3, [r0, #4]
 80196e4:	68a3      	ldr	r3, [r4, #8]
 80196e6:	6083      	str	r3, [r0, #8]
 80196e8:	465f      	mov	r7, fp
 80196ea:	e7c9      	b.n	8019680 <_realloc_r+0x204>
 80196ec:	68a3      	ldr	r3, [r4, #8]
 80196ee:	612b      	str	r3, [r5, #16]
 80196f0:	68e3      	ldr	r3, [r4, #12]
 80196f2:	616b      	str	r3, [r5, #20]
 80196f4:	2a24      	cmp	r2, #36	; 0x24
 80196f6:	bf01      	itttt	eq
 80196f8:	6923      	ldreq	r3, [r4, #16]
 80196fa:	61ab      	streq	r3, [r5, #24]
 80196fc:	6963      	ldreq	r3, [r4, #20]
 80196fe:	61eb      	streq	r3, [r5, #28]
 8019700:	bf19      	ittee	ne
 8019702:	3410      	addne	r4, #16
 8019704:	f105 0018 	addne.w	r0, r5, #24
 8019708:	f105 0020 	addeq.w	r0, r5, #32
 801970c:	3418      	addeq	r4, #24
 801970e:	e7e5      	b.n	80196dc <_realloc_r+0x260>
 8019710:	4621      	mov	r1, r4
 8019712:	f7ff fa35 	bl	8018b80 <memmove>
 8019716:	e7e7      	b.n	80196e8 <_realloc_r+0x26c>
 8019718:	4650      	mov	r0, sl
 801971a:	f7ff fc69 	bl	8018ff0 <_malloc_r>
 801971e:	4683      	mov	fp, r0
 8019720:	2800      	cmp	r0, #0
 8019722:	f43f af70 	beq.w	8019606 <_realloc_r+0x18a>
 8019726:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801972a:	f023 0301 	bic.w	r3, r3, #1
 801972e:	444b      	add	r3, r9
 8019730:	f1a0 0208 	sub.w	r2, r0, #8
 8019734:	4293      	cmp	r3, r2
 8019736:	d107      	bne.n	8019748 <_realloc_r+0x2cc>
 8019738:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801973c:	f027 0703 	bic.w	r7, r7, #3
 8019740:	4437      	add	r7, r6
 8019742:	e6fc      	b.n	801953e <_realloc_r+0xc2>
 8019744:	200001d0 	.word	0x200001d0
 8019748:	1f32      	subs	r2, r6, #4
 801974a:	2a24      	cmp	r2, #36	; 0x24
 801974c:	d82d      	bhi.n	80197aa <_realloc_r+0x32e>
 801974e:	2a13      	cmp	r2, #19
 8019750:	d928      	bls.n	80197a4 <_realloc_r+0x328>
 8019752:	6823      	ldr	r3, [r4, #0]
 8019754:	6003      	str	r3, [r0, #0]
 8019756:	6863      	ldr	r3, [r4, #4]
 8019758:	6043      	str	r3, [r0, #4]
 801975a:	2a1b      	cmp	r2, #27
 801975c:	d80e      	bhi.n	801977c <_realloc_r+0x300>
 801975e:	f104 0208 	add.w	r2, r4, #8
 8019762:	f100 0308 	add.w	r3, r0, #8
 8019766:	6811      	ldr	r1, [r2, #0]
 8019768:	6019      	str	r1, [r3, #0]
 801976a:	6851      	ldr	r1, [r2, #4]
 801976c:	6059      	str	r1, [r3, #4]
 801976e:	6892      	ldr	r2, [r2, #8]
 8019770:	609a      	str	r2, [r3, #8]
 8019772:	4621      	mov	r1, r4
 8019774:	4650      	mov	r0, sl
 8019776:	f7ff fb7b 	bl	8018e70 <_free_r>
 801977a:	e744      	b.n	8019606 <_realloc_r+0x18a>
 801977c:	68a3      	ldr	r3, [r4, #8]
 801977e:	6083      	str	r3, [r0, #8]
 8019780:	68e3      	ldr	r3, [r4, #12]
 8019782:	60c3      	str	r3, [r0, #12]
 8019784:	2a24      	cmp	r2, #36	; 0x24
 8019786:	bf01      	itttt	eq
 8019788:	6923      	ldreq	r3, [r4, #16]
 801978a:	6103      	streq	r3, [r0, #16]
 801978c:	6961      	ldreq	r1, [r4, #20]
 801978e:	6141      	streq	r1, [r0, #20]
 8019790:	bf19      	ittee	ne
 8019792:	f104 0210 	addne.w	r2, r4, #16
 8019796:	f100 0310 	addne.w	r3, r0, #16
 801979a:	f104 0218 	addeq.w	r2, r4, #24
 801979e:	f100 0318 	addeq.w	r3, r0, #24
 80197a2:	e7e0      	b.n	8019766 <_realloc_r+0x2ea>
 80197a4:	4603      	mov	r3, r0
 80197a6:	4622      	mov	r2, r4
 80197a8:	e7dd      	b.n	8019766 <_realloc_r+0x2ea>
 80197aa:	4621      	mov	r1, r4
 80197ac:	f7ff f9e8 	bl	8018b80 <memmove>
 80197b0:	e7df      	b.n	8019772 <_realloc_r+0x2f6>
 80197b2:	4637      	mov	r7, r6
 80197b4:	e6c3      	b.n	801953e <_realloc_r+0xc2>
 80197b6:	431f      	orrs	r7, r3
 80197b8:	f8c9 7004 	str.w	r7, [r9, #4]
 80197bc:	6853      	ldr	r3, [r2, #4]
 80197be:	f043 0301 	orr.w	r3, r3, #1
 80197c2:	6053      	str	r3, [r2, #4]
 80197c4:	e6d7      	b.n	8019576 <_realloc_r+0xfa>
 80197c6:	bf00      	nop

080197c8 <_svfprintf_r>:
 80197c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197cc:	b0d3      	sub	sp, #332	; 0x14c
 80197ce:	468a      	mov	sl, r1
 80197d0:	4693      	mov	fp, r2
 80197d2:	461d      	mov	r5, r3
 80197d4:	4681      	mov	r9, r0
 80197d6:	f003 fb15 	bl	801ce04 <_localeconv_r>
 80197da:	6803      	ldr	r3, [r0, #0]
 80197dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80197de:	4618      	mov	r0, r3
 80197e0:	f7ee ff1e 	bl	8008620 <strlen>
 80197e4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80197e8:	9012      	str	r0, [sp, #72]	; 0x48
 80197ea:	0618      	lsls	r0, r3, #24
 80197ec:	d518      	bpl.n	8019820 <_svfprintf_r+0x58>
 80197ee:	f8da 3010 	ldr.w	r3, [sl, #16]
 80197f2:	b9ab      	cbnz	r3, 8019820 <_svfprintf_r+0x58>
 80197f4:	2140      	movs	r1, #64	; 0x40
 80197f6:	4648      	mov	r0, r9
 80197f8:	f7ff fbfa 	bl	8018ff0 <_malloc_r>
 80197fc:	f8ca 0000 	str.w	r0, [sl]
 8019800:	f8ca 0010 	str.w	r0, [sl, #16]
 8019804:	b948      	cbnz	r0, 801981a <_svfprintf_r+0x52>
 8019806:	230c      	movs	r3, #12
 8019808:	f8c9 3000 	str.w	r3, [r9]
 801980c:	f04f 33ff 	mov.w	r3, #4294967295
 8019810:	930f      	str	r3, [sp, #60]	; 0x3c
 8019812:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8019814:	b053      	add	sp, #332	; 0x14c
 8019816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801981a:	2340      	movs	r3, #64	; 0x40
 801981c:	f8ca 3014 	str.w	r3, [sl, #20]
 8019820:	2300      	movs	r3, #0
 8019822:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8019826:	9309      	str	r3, [sp, #36]	; 0x24
 8019828:	2200      	movs	r2, #0
 801982a:	2300      	movs	r3, #0
 801982c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8019830:	2300      	movs	r3, #0
 8019832:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 8019836:	ac29      	add	r4, sp, #164	; 0xa4
 8019838:	9426      	str	r4, [sp, #152]	; 0x98
 801983a:	930d      	str	r3, [sp, #52]	; 0x34
 801983c:	9315      	str	r3, [sp, #84]	; 0x54
 801983e:	9318      	str	r3, [sp, #96]	; 0x60
 8019840:	930f      	str	r3, [sp, #60]	; 0x3c
 8019842:	465b      	mov	r3, fp
 8019844:	461e      	mov	r6, r3
 8019846:	f813 2b01 	ldrb.w	r2, [r3], #1
 801984a:	b10a      	cbz	r2, 8019850 <_svfprintf_r+0x88>
 801984c:	2a25      	cmp	r2, #37	; 0x25
 801984e:	d1f9      	bne.n	8019844 <_svfprintf_r+0x7c>
 8019850:	ebb6 070b 	subs.w	r7, r6, fp
 8019854:	d00d      	beq.n	8019872 <_svfprintf_r+0xaa>
 8019856:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019858:	443b      	add	r3, r7
 801985a:	9328      	str	r3, [sp, #160]	; 0xa0
 801985c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801985e:	3301      	adds	r3, #1
 8019860:	2b07      	cmp	r3, #7
 8019862:	e9c4 b700 	strd	fp, r7, [r4]
 8019866:	9327      	str	r3, [sp, #156]	; 0x9c
 8019868:	dc79      	bgt.n	801995e <_svfprintf_r+0x196>
 801986a:	3408      	adds	r4, #8
 801986c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801986e:	443b      	add	r3, r7
 8019870:	930f      	str	r3, [sp, #60]	; 0x3c
 8019872:	7833      	ldrb	r3, [r6, #0]
 8019874:	2b00      	cmp	r3, #0
 8019876:	f001 8135 	beq.w	801aae4 <_svfprintf_r+0x131c>
 801987a:	2300      	movs	r3, #0
 801987c:	f04f 32ff 	mov.w	r2, #4294967295
 8019880:	3601      	adds	r6, #1
 8019882:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019886:	9207      	str	r2, [sp, #28]
 8019888:	9313      	str	r3, [sp, #76]	; 0x4c
 801988a:	4698      	mov	r8, r3
 801988c:	270a      	movs	r7, #10
 801988e:	212b      	movs	r1, #43	; 0x2b
 8019890:	4633      	mov	r3, r6
 8019892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019896:	920b      	str	r2, [sp, #44]	; 0x2c
 8019898:	930e      	str	r3, [sp, #56]	; 0x38
 801989a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801989c:	3b20      	subs	r3, #32
 801989e:	2b5a      	cmp	r3, #90	; 0x5a
 80198a0:	f200 85a8 	bhi.w	801a3f4 <_svfprintf_r+0xc2c>
 80198a4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80198a8:	05a6007e 	.word	0x05a6007e
 80198ac:	008605a6 	.word	0x008605a6
 80198b0:	05a605a6 	.word	0x05a605a6
 80198b4:	006505a6 	.word	0x006505a6
 80198b8:	05a605a6 	.word	0x05a605a6
 80198bc:	00930089 	.word	0x00930089
 80198c0:	009005a6 	.word	0x009005a6
 80198c4:	05a60096 	.word	0x05a60096
 80198c8:	00b500b2 	.word	0x00b500b2
 80198cc:	00b500b5 	.word	0x00b500b5
 80198d0:	00b500b5 	.word	0x00b500b5
 80198d4:	00b500b5 	.word	0x00b500b5
 80198d8:	00b500b5 	.word	0x00b500b5
 80198dc:	05a605a6 	.word	0x05a605a6
 80198e0:	05a605a6 	.word	0x05a605a6
 80198e4:	05a605a6 	.word	0x05a605a6
 80198e8:	012505a6 	.word	0x012505a6
 80198ec:	00e205a6 	.word	0x00e205a6
 80198f0:	012500f5 	.word	0x012500f5
 80198f4:	01250125 	.word	0x01250125
 80198f8:	05a605a6 	.word	0x05a605a6
 80198fc:	05a605a6 	.word	0x05a605a6
 8019900:	05a600c5 	.word	0x05a600c5
 8019904:	048505a6 	.word	0x048505a6
 8019908:	05a605a6 	.word	0x05a605a6
 801990c:	04cf05a6 	.word	0x04cf05a6
 8019910:	04f005a6 	.word	0x04f005a6
 8019914:	05a605a6 	.word	0x05a605a6
 8019918:	05a60512 	.word	0x05a60512
 801991c:	05a605a6 	.word	0x05a605a6
 8019920:	05a605a6 	.word	0x05a605a6
 8019924:	05a605a6 	.word	0x05a605a6
 8019928:	012505a6 	.word	0x012505a6
 801992c:	00e205a6 	.word	0x00e205a6
 8019930:	012500f7 	.word	0x012500f7
 8019934:	01250125 	.word	0x01250125
 8019938:	00f700c8 	.word	0x00f700c8
 801993c:	05a600dc 	.word	0x05a600dc
 8019940:	05a600d5 	.word	0x05a600d5
 8019944:	04870460 	.word	0x04870460
 8019948:	00dc04be 	.word	0x00dc04be
 801994c:	04cf05a6 	.word	0x04cf05a6
 8019950:	04f2007c 	.word	0x04f2007c
 8019954:	05a605a6 	.word	0x05a605a6
 8019958:	05a60531 	.word	0x05a60531
 801995c:	007c      	.short	0x007c
 801995e:	aa26      	add	r2, sp, #152	; 0x98
 8019960:	4651      	mov	r1, sl
 8019962:	4648      	mov	r0, r9
 8019964:	f004 fcc8 	bl	801e2f8 <__ssprint_r>
 8019968:	2800      	cmp	r0, #0
 801996a:	f040 812e 	bne.w	8019bca <_svfprintf_r+0x402>
 801996e:	ac29      	add	r4, sp, #164	; 0xa4
 8019970:	e77c      	b.n	801986c <_svfprintf_r+0xa4>
 8019972:	4648      	mov	r0, r9
 8019974:	f003 fa46 	bl	801ce04 <_localeconv_r>
 8019978:	6843      	ldr	r3, [r0, #4]
 801997a:	9318      	str	r3, [sp, #96]	; 0x60
 801997c:	4618      	mov	r0, r3
 801997e:	f7ee fe4f 	bl	8008620 <strlen>
 8019982:	9015      	str	r0, [sp, #84]	; 0x54
 8019984:	4648      	mov	r0, r9
 8019986:	f003 fa3d 	bl	801ce04 <_localeconv_r>
 801998a:	6883      	ldr	r3, [r0, #8]
 801998c:	930d      	str	r3, [sp, #52]	; 0x34
 801998e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019990:	212b      	movs	r1, #43	; 0x2b
 8019992:	b12b      	cbz	r3, 80199a0 <_svfprintf_r+0x1d8>
 8019994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019996:	b11b      	cbz	r3, 80199a0 <_svfprintf_r+0x1d8>
 8019998:	781b      	ldrb	r3, [r3, #0]
 801999a:	b10b      	cbz	r3, 80199a0 <_svfprintf_r+0x1d8>
 801999c:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 80199a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80199a2:	e775      	b.n	8019890 <_svfprintf_r+0xc8>
 80199a4:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d1f9      	bne.n	80199a0 <_svfprintf_r+0x1d8>
 80199ac:	2320      	movs	r3, #32
 80199ae:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80199b2:	e7f5      	b.n	80199a0 <_svfprintf_r+0x1d8>
 80199b4:	f048 0801 	orr.w	r8, r8, #1
 80199b8:	e7f2      	b.n	80199a0 <_svfprintf_r+0x1d8>
 80199ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80199be:	9313      	str	r3, [sp, #76]	; 0x4c
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	daed      	bge.n	80199a0 <_svfprintf_r+0x1d8>
 80199c4:	425b      	negs	r3, r3
 80199c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80199c8:	f048 0804 	orr.w	r8, r8, #4
 80199cc:	e7e8      	b.n	80199a0 <_svfprintf_r+0x1d8>
 80199ce:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 80199d2:	e7e5      	b.n	80199a0 <_svfprintf_r+0x1d8>
 80199d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80199da:	920b      	str	r2, [sp, #44]	; 0x2c
 80199dc:	2a2a      	cmp	r2, #42	; 0x2a
 80199de:	d112      	bne.n	8019a06 <_svfprintf_r+0x23e>
 80199e0:	f855 2b04 	ldr.w	r2, [r5], #4
 80199e4:	930e      	str	r3, [sp, #56]	; 0x38
 80199e6:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80199ea:	9207      	str	r2, [sp, #28]
 80199ec:	e7d8      	b.n	80199a0 <_svfprintf_r+0x1d8>
 80199ee:	9807      	ldr	r0, [sp, #28]
 80199f0:	fb07 2200 	mla	r2, r7, r0, r2
 80199f4:	9207      	str	r2, [sp, #28]
 80199f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80199fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80199fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80199fe:	3a30      	subs	r2, #48	; 0x30
 8019a00:	2a09      	cmp	r2, #9
 8019a02:	d9f4      	bls.n	80199ee <_svfprintf_r+0x226>
 8019a04:	e748      	b.n	8019898 <_svfprintf_r+0xd0>
 8019a06:	2200      	movs	r2, #0
 8019a08:	9207      	str	r2, [sp, #28]
 8019a0a:	e7f7      	b.n	80199fc <_svfprintf_r+0x234>
 8019a0c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8019a10:	e7c6      	b.n	80199a0 <_svfprintf_r+0x1d8>
 8019a12:	2200      	movs	r2, #0
 8019a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a16:	9213      	str	r2, [sp, #76]	; 0x4c
 8019a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019a1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8019a1c:	3a30      	subs	r2, #48	; 0x30
 8019a1e:	fb07 2200 	mla	r2, r7, r0, r2
 8019a22:	9213      	str	r2, [sp, #76]	; 0x4c
 8019a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a28:	920b      	str	r2, [sp, #44]	; 0x2c
 8019a2a:	3a30      	subs	r2, #48	; 0x30
 8019a2c:	2a09      	cmp	r2, #9
 8019a2e:	d9f3      	bls.n	8019a18 <_svfprintf_r+0x250>
 8019a30:	e732      	b.n	8019898 <_svfprintf_r+0xd0>
 8019a32:	f048 0808 	orr.w	r8, r8, #8
 8019a36:	e7b3      	b.n	80199a0 <_svfprintf_r+0x1d8>
 8019a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a3a:	781b      	ldrb	r3, [r3, #0]
 8019a3c:	2b68      	cmp	r3, #104	; 0x68
 8019a3e:	bf01      	itttt	eq
 8019a40:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 8019a42:	3301      	addeq	r3, #1
 8019a44:	930e      	streq	r3, [sp, #56]	; 0x38
 8019a46:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8019a4a:	bf18      	it	ne
 8019a4c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8019a50:	e7a6      	b.n	80199a0 <_svfprintf_r+0x1d8>
 8019a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a54:	781b      	ldrb	r3, [r3, #0]
 8019a56:	2b6c      	cmp	r3, #108	; 0x6c
 8019a58:	d105      	bne.n	8019a66 <_svfprintf_r+0x29e>
 8019a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a5c:	3301      	adds	r3, #1
 8019a5e:	930e      	str	r3, [sp, #56]	; 0x38
 8019a60:	f048 0820 	orr.w	r8, r8, #32
 8019a64:	e79c      	b.n	80199a0 <_svfprintf_r+0x1d8>
 8019a66:	f048 0810 	orr.w	r8, r8, #16
 8019a6a:	e799      	b.n	80199a0 <_svfprintf_r+0x1d8>
 8019a6c:	462a      	mov	r2, r5
 8019a6e:	f852 3b04 	ldr.w	r3, [r2], #4
 8019a72:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8019a76:	2300      	movs	r3, #0
 8019a78:	920a      	str	r2, [sp, #40]	; 0x28
 8019a7a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019a7e:	2700      	movs	r7, #0
 8019a80:	9308      	str	r3, [sp, #32]
 8019a82:	2301      	movs	r3, #1
 8019a84:	9307      	str	r3, [sp, #28]
 8019a86:	463e      	mov	r6, r7
 8019a88:	970c      	str	r7, [sp, #48]	; 0x30
 8019a8a:	463d      	mov	r5, r7
 8019a8c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8019a90:	e1b0      	b.n	8019df4 <_svfprintf_r+0x62c>
 8019a92:	f048 0810 	orr.w	r8, r8, #16
 8019a96:	f018 0f20 	tst.w	r8, #32
 8019a9a:	d012      	beq.n	8019ac2 <_svfprintf_r+0x2fa>
 8019a9c:	3507      	adds	r5, #7
 8019a9e:	f025 0307 	bic.w	r3, r5, #7
 8019aa2:	461a      	mov	r2, r3
 8019aa4:	685e      	ldr	r6, [r3, #4]
 8019aa6:	f852 5b08 	ldr.w	r5, [r2], #8
 8019aaa:	920a      	str	r2, [sp, #40]	; 0x28
 8019aac:	2e00      	cmp	r6, #0
 8019aae:	da06      	bge.n	8019abe <_svfprintf_r+0x2f6>
 8019ab0:	426d      	negs	r5, r5
 8019ab2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8019ab6:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8019aba:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019abe:	2301      	movs	r3, #1
 8019ac0:	e38a      	b.n	801a1d8 <_svfprintf_r+0xa10>
 8019ac2:	462b      	mov	r3, r5
 8019ac4:	f018 0f10 	tst.w	r8, #16
 8019ac8:	f853 6b04 	ldr.w	r6, [r3], #4
 8019acc:	930a      	str	r3, [sp, #40]	; 0x28
 8019ace:	d002      	beq.n	8019ad6 <_svfprintf_r+0x30e>
 8019ad0:	4635      	mov	r5, r6
 8019ad2:	17f6      	asrs	r6, r6, #31
 8019ad4:	e7ea      	b.n	8019aac <_svfprintf_r+0x2e4>
 8019ad6:	f018 0f40 	tst.w	r8, #64	; 0x40
 8019ada:	d003      	beq.n	8019ae4 <_svfprintf_r+0x31c>
 8019adc:	b235      	sxth	r5, r6
 8019ade:	f346 36c0 	sbfx	r6, r6, #15, #1
 8019ae2:	e7e3      	b.n	8019aac <_svfprintf_r+0x2e4>
 8019ae4:	f418 7f00 	tst.w	r8, #512	; 0x200
 8019ae8:	d0f2      	beq.n	8019ad0 <_svfprintf_r+0x308>
 8019aea:	b275      	sxtb	r5, r6
 8019aec:	f346 16c0 	sbfx	r6, r6, #7, #1
 8019af0:	e7dc      	b.n	8019aac <_svfprintf_r+0x2e4>
 8019af2:	3507      	adds	r5, #7
 8019af4:	f025 0307 	bic.w	r3, r5, #7
 8019af8:	4619      	mov	r1, r3
 8019afa:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8019afe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8019b02:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 8019b06:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8019b0a:	910a      	str	r1, [sp, #40]	; 0x28
 8019b0c:	4b3b      	ldr	r3, [pc, #236]	; (8019bfc <_svfprintf_r+0x434>)
 8019b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8019b12:	4630      	mov	r0, r6
 8019b14:	4629      	mov	r1, r5
 8019b16:	f7ef f9e1 	bl	8008edc <__aeabi_dcmpun>
 8019b1a:	bb18      	cbnz	r0, 8019b64 <_svfprintf_r+0x39c>
 8019b1c:	4b37      	ldr	r3, [pc, #220]	; (8019bfc <_svfprintf_r+0x434>)
 8019b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8019b22:	4630      	mov	r0, r6
 8019b24:	4629      	mov	r1, r5
 8019b26:	f7ef f9bb 	bl	8008ea0 <__aeabi_dcmple>
 8019b2a:	b9d8      	cbnz	r0, 8019b64 <_svfprintf_r+0x39c>
 8019b2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8019b30:	2200      	movs	r2, #0
 8019b32:	2300      	movs	r3, #0
 8019b34:	f7ef f9aa 	bl	8008e8c <__aeabi_dcmplt>
 8019b38:	b110      	cbz	r0, 8019b40 <_svfprintf_r+0x378>
 8019b3a:	232d      	movs	r3, #45	; 0x2d
 8019b3c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019b40:	4a2f      	ldr	r2, [pc, #188]	; (8019c00 <_svfprintf_r+0x438>)
 8019b42:	4b30      	ldr	r3, [pc, #192]	; (8019c04 <_svfprintf_r+0x43c>)
 8019b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019b46:	2947      	cmp	r1, #71	; 0x47
 8019b48:	bfd4      	ite	le
 8019b4a:	4693      	movle	fp, r2
 8019b4c:	469b      	movgt	fp, r3
 8019b4e:	2303      	movs	r3, #3
 8019b50:	2100      	movs	r1, #0
 8019b52:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8019b56:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8019b5a:	2700      	movs	r7, #0
 8019b5c:	463e      	mov	r6, r7
 8019b5e:	463b      	mov	r3, r7
 8019b60:	f000 bffa 	b.w	801ab58 <_svfprintf_r+0x1390>
 8019b64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019b68:	4610      	mov	r0, r2
 8019b6a:	4619      	mov	r1, r3
 8019b6c:	f7ef f9b6 	bl	8008edc <__aeabi_dcmpun>
 8019b70:	b140      	cbz	r0, 8019b84 <_svfprintf_r+0x3bc>
 8019b72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019b74:	4a24      	ldr	r2, [pc, #144]	; (8019c08 <_svfprintf_r+0x440>)
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	bfbc      	itt	lt
 8019b7a:	232d      	movlt	r3, #45	; 0x2d
 8019b7c:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8019b80:	4b22      	ldr	r3, [pc, #136]	; (8019c0c <_svfprintf_r+0x444>)
 8019b82:	e7df      	b.n	8019b44 <_svfprintf_r+0x37c>
 8019b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b86:	f023 0320 	bic.w	r3, r3, #32
 8019b8a:	2b41      	cmp	r3, #65	; 0x41
 8019b8c:	930c      	str	r3, [sp, #48]	; 0x30
 8019b8e:	d125      	bne.n	8019bdc <_svfprintf_r+0x414>
 8019b90:	2330      	movs	r3, #48	; 0x30
 8019b92:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8019b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b98:	2b61      	cmp	r3, #97	; 0x61
 8019b9a:	bf0c      	ite	eq
 8019b9c:	2378      	moveq	r3, #120	; 0x78
 8019b9e:	2358      	movne	r3, #88	; 0x58
 8019ba0:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8019ba4:	9b07      	ldr	r3, [sp, #28]
 8019ba6:	2b63      	cmp	r3, #99	; 0x63
 8019ba8:	f048 0802 	orr.w	r8, r8, #2
 8019bac:	dd30      	ble.n	8019c10 <_svfprintf_r+0x448>
 8019bae:	1c59      	adds	r1, r3, #1
 8019bb0:	4648      	mov	r0, r9
 8019bb2:	f7ff fa1d 	bl	8018ff0 <_malloc_r>
 8019bb6:	4683      	mov	fp, r0
 8019bb8:	2800      	cmp	r0, #0
 8019bba:	f040 81f9 	bne.w	8019fb0 <_svfprintf_r+0x7e8>
 8019bbe:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8019bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019bc6:	f8aa 300c 	strh.w	r3, [sl, #12]
 8019bca:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8019bce:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019bd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019bd4:	bf18      	it	ne
 8019bd6:	f04f 33ff 	movne.w	r3, #4294967295
 8019bda:	e619      	b.n	8019810 <_svfprintf_r+0x48>
 8019bdc:	9b07      	ldr	r3, [sp, #28]
 8019bde:	3301      	adds	r3, #1
 8019be0:	f000 81e8 	beq.w	8019fb4 <_svfprintf_r+0x7ec>
 8019be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019be6:	2b47      	cmp	r3, #71	; 0x47
 8019be8:	f040 81e7 	bne.w	8019fba <_svfprintf_r+0x7f2>
 8019bec:	9b07      	ldr	r3, [sp, #28]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	f040 81e3 	bne.w	8019fba <_svfprintf_r+0x7f2>
 8019bf4:	9308      	str	r3, [sp, #32]
 8019bf6:	2301      	movs	r3, #1
 8019bf8:	9307      	str	r3, [sp, #28]
 8019bfa:	e00c      	b.n	8019c16 <_svfprintf_r+0x44e>
 8019bfc:	7fefffff 	.word	0x7fefffff
 8019c00:	08020965 	.word	0x08020965
 8019c04:	08020969 	.word	0x08020969
 8019c08:	0802096d 	.word	0x0802096d
 8019c0c:	08020971 	.word	0x08020971
 8019c10:	9008      	str	r0, [sp, #32]
 8019c12:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8019c16:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8019c1a:	9314      	str	r3, [sp, #80]	; 0x50
 8019c1c:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 8019c20:	1e1d      	subs	r5, r3, #0
 8019c22:	bfb6      	itet	lt
 8019c24:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8019c28:	2300      	movge	r3, #0
 8019c2a:	232d      	movlt	r3, #45	; 0x2d
 8019c2c:	931c      	str	r3, [sp, #112]	; 0x70
 8019c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c30:	2b41      	cmp	r3, #65	; 0x41
 8019c32:	f040 81da 	bne.w	8019fea <_svfprintf_r+0x822>
 8019c36:	aa20      	add	r2, sp, #128	; 0x80
 8019c38:	4638      	mov	r0, r7
 8019c3a:	4629      	mov	r1, r5
 8019c3c:	f003 f938 	bl	801ceb0 <frexp>
 8019c40:	2200      	movs	r2, #0
 8019c42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019c46:	f7ee feaf 	bl	80089a8 <__aeabi_dmul>
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	2300      	movs	r3, #0
 8019c4e:	4606      	mov	r6, r0
 8019c50:	460f      	mov	r7, r1
 8019c52:	f7ef f911 	bl	8008e78 <__aeabi_dcmpeq>
 8019c56:	b108      	cbz	r0, 8019c5c <_svfprintf_r+0x494>
 8019c58:	2301      	movs	r3, #1
 8019c5a:	9320      	str	r3, [sp, #128]	; 0x80
 8019c5c:	4bad      	ldr	r3, [pc, #692]	; (8019f14 <_svfprintf_r+0x74c>)
 8019c5e:	4aae      	ldr	r2, [pc, #696]	; (8019f18 <_svfprintf_r+0x750>)
 8019c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019c62:	2961      	cmp	r1, #97	; 0x61
 8019c64:	bf18      	it	ne
 8019c66:	461a      	movne	r2, r3
 8019c68:	9b07      	ldr	r3, [sp, #28]
 8019c6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8019c6c:	3b01      	subs	r3, #1
 8019c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8019c70:	465d      	mov	r5, fp
 8019c72:	4baa      	ldr	r3, [pc, #680]	; (8019f1c <_svfprintf_r+0x754>)
 8019c74:	2200      	movs	r2, #0
 8019c76:	4630      	mov	r0, r6
 8019c78:	4639      	mov	r1, r7
 8019c7a:	f7ee fe95 	bl	80089a8 <__aeabi_dmul>
 8019c7e:	460f      	mov	r7, r1
 8019c80:	4606      	mov	r6, r0
 8019c82:	f7ef f941 	bl	8008f08 <__aeabi_d2iz>
 8019c86:	901d      	str	r0, [sp, #116]	; 0x74
 8019c88:	f7ee fe24 	bl	80088d4 <__aeabi_i2d>
 8019c8c:	4602      	mov	r2, r0
 8019c8e:	460b      	mov	r3, r1
 8019c90:	4630      	mov	r0, r6
 8019c92:	4639      	mov	r1, r7
 8019c94:	f7ee fcd0 	bl	8008638 <__aeabi_dsub>
 8019c98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019c9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019c9c:	5c9b      	ldrb	r3, [r3, r2]
 8019c9e:	f805 3b01 	strb.w	r3, [r5], #1
 8019ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ca4:	9316      	str	r3, [sp, #88]	; 0x58
 8019ca6:	1c5a      	adds	r2, r3, #1
 8019ca8:	4606      	mov	r6, r0
 8019caa:	460f      	mov	r7, r1
 8019cac:	d007      	beq.n	8019cbe <_svfprintf_r+0x4f6>
 8019cae:	3b01      	subs	r3, #1
 8019cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	f7ef f8df 	bl	8008e78 <__aeabi_dcmpeq>
 8019cba:	2800      	cmp	r0, #0
 8019cbc:	d0d9      	beq.n	8019c72 <_svfprintf_r+0x4aa>
 8019cbe:	4b98      	ldr	r3, [pc, #608]	; (8019f20 <_svfprintf_r+0x758>)
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	4630      	mov	r0, r6
 8019cc4:	4639      	mov	r1, r7
 8019cc6:	f7ef f8ff 	bl	8008ec8 <__aeabi_dcmpgt>
 8019cca:	b960      	cbnz	r0, 8019ce6 <_svfprintf_r+0x51e>
 8019ccc:	4b94      	ldr	r3, [pc, #592]	; (8019f20 <_svfprintf_r+0x758>)
 8019cce:	2200      	movs	r2, #0
 8019cd0:	4630      	mov	r0, r6
 8019cd2:	4639      	mov	r1, r7
 8019cd4:	f7ef f8d0 	bl	8008e78 <__aeabi_dcmpeq>
 8019cd8:	2800      	cmp	r0, #0
 8019cda:	f000 8181 	beq.w	8019fe0 <_svfprintf_r+0x818>
 8019cde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019ce0:	07db      	lsls	r3, r3, #31
 8019ce2:	f140 817d 	bpl.w	8019fe0 <_svfprintf_r+0x818>
 8019ce6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019ce8:	9524      	str	r5, [sp, #144]	; 0x90
 8019cea:	7bd9      	ldrb	r1, [r3, #15]
 8019cec:	2030      	movs	r0, #48	; 0x30
 8019cee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019cf0:	1e53      	subs	r3, r2, #1
 8019cf2:	9324      	str	r3, [sp, #144]	; 0x90
 8019cf4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8019cf8:	428b      	cmp	r3, r1
 8019cfa:	f000 8160 	beq.w	8019fbe <_svfprintf_r+0x7f6>
 8019cfe:	2b39      	cmp	r3, #57	; 0x39
 8019d00:	bf0b      	itete	eq
 8019d02:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 8019d04:	3301      	addne	r3, #1
 8019d06:	7a9b      	ldrbeq	r3, [r3, #10]
 8019d08:	b2db      	uxtbne	r3, r3
 8019d0a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019d0e:	eba5 030b 	sub.w	r3, r5, fp
 8019d12:	9309      	str	r3, [sp, #36]	; 0x24
 8019d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d16:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8019d18:	2b47      	cmp	r3, #71	; 0x47
 8019d1a:	f040 81b5 	bne.w	801a088 <_svfprintf_r+0x8c0>
 8019d1e:	1cef      	adds	r7, r5, #3
 8019d20:	db03      	blt.n	8019d2a <_svfprintf_r+0x562>
 8019d22:	9b07      	ldr	r3, [sp, #28]
 8019d24:	42ab      	cmp	r3, r5
 8019d26:	f280 81d5 	bge.w	801a0d4 <_svfprintf_r+0x90c>
 8019d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d2c:	3b02      	subs	r3, #2
 8019d2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8019d30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019d32:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8019d36:	f021 0120 	bic.w	r1, r1, #32
 8019d3a:	2941      	cmp	r1, #65	; 0x41
 8019d3c:	bf08      	it	eq
 8019d3e:	320f      	addeq	r2, #15
 8019d40:	f105 33ff 	add.w	r3, r5, #4294967295
 8019d44:	bf06      	itte	eq
 8019d46:	b2d2      	uxtbeq	r2, r2
 8019d48:	2101      	moveq	r1, #1
 8019d4a:	2100      	movne	r1, #0
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	9320      	str	r3, [sp, #128]	; 0x80
 8019d50:	bfb8      	it	lt
 8019d52:	f1c5 0301 	rsblt	r3, r5, #1
 8019d56:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8019d5a:	bfb4      	ite	lt
 8019d5c:	222d      	movlt	r2, #45	; 0x2d
 8019d5e:	222b      	movge	r2, #43	; 0x2b
 8019d60:	2b09      	cmp	r3, #9
 8019d62:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8019d66:	f340 81a8 	ble.w	801a0ba <_svfprintf_r+0x8f2>
 8019d6a:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8019d6e:	260a      	movs	r6, #10
 8019d70:	4602      	mov	r2, r0
 8019d72:	fb93 f5f6 	sdiv	r5, r3, r6
 8019d76:	fb06 3115 	mls	r1, r6, r5, r3
 8019d7a:	3130      	adds	r1, #48	; 0x30
 8019d7c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019d80:	4619      	mov	r1, r3
 8019d82:	2963      	cmp	r1, #99	; 0x63
 8019d84:	f100 30ff 	add.w	r0, r0, #4294967295
 8019d88:	462b      	mov	r3, r5
 8019d8a:	dcf1      	bgt.n	8019d70 <_svfprintf_r+0x5a8>
 8019d8c:	3330      	adds	r3, #48	; 0x30
 8019d8e:	1e91      	subs	r1, r2, #2
 8019d90:	f800 3c01 	strb.w	r3, [r0, #-1]
 8019d94:	f10d 0589 	add.w	r5, sp, #137	; 0x89
 8019d98:	460b      	mov	r3, r1
 8019d9a:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8019d9e:	4283      	cmp	r3, r0
 8019da0:	f0c0 8186 	bcc.w	801a0b0 <_svfprintf_r+0x8e8>
 8019da4:	f10d 0399 	add.w	r3, sp, #153	; 0x99
 8019da8:	1a9b      	subs	r3, r3, r2
 8019daa:	4281      	cmp	r1, r0
 8019dac:	bf88      	it	hi
 8019dae:	2300      	movhi	r3, #0
 8019db0:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8019db4:	441a      	add	r2, r3
 8019db6:	ab22      	add	r3, sp, #136	; 0x88
 8019db8:	1ad3      	subs	r3, r2, r3
 8019dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019dbc:	9319      	str	r3, [sp, #100]	; 0x64
 8019dbe:	2a01      	cmp	r2, #1
 8019dc0:	4413      	add	r3, r2
 8019dc2:	9307      	str	r3, [sp, #28]
 8019dc4:	dc02      	bgt.n	8019dcc <_svfprintf_r+0x604>
 8019dc6:	f018 0f01 	tst.w	r8, #1
 8019dca:	d003      	beq.n	8019dd4 <_svfprintf_r+0x60c>
 8019dcc:	9b07      	ldr	r3, [sp, #28]
 8019dce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019dd0:	4413      	add	r3, r2
 8019dd2:	9307      	str	r3, [sp, #28]
 8019dd4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8019dd8:	2600      	movs	r6, #0
 8019dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019dde:	9314      	str	r3, [sp, #80]	; 0x50
 8019de0:	960c      	str	r6, [sp, #48]	; 0x30
 8019de2:	4635      	mov	r5, r6
 8019de4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019de6:	b113      	cbz	r3, 8019dee <_svfprintf_r+0x626>
 8019de8:	232d      	movs	r3, #45	; 0x2d
 8019dea:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8019dee:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019df2:	2700      	movs	r7, #0
 8019df4:	9b07      	ldr	r3, [sp, #28]
 8019df6:	42bb      	cmp	r3, r7
 8019df8:	bfb8      	it	lt
 8019dfa:	463b      	movlt	r3, r7
 8019dfc:	9314      	str	r3, [sp, #80]	; 0x50
 8019dfe:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8019e02:	b113      	cbz	r3, 8019e0a <_svfprintf_r+0x642>
 8019e04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019e06:	3301      	adds	r3, #1
 8019e08:	9314      	str	r3, [sp, #80]	; 0x50
 8019e0a:	f018 0302 	ands.w	r3, r8, #2
 8019e0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8019e10:	bf1e      	ittt	ne
 8019e12:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 8019e14:	3302      	addne	r3, #2
 8019e16:	9314      	strne	r3, [sp, #80]	; 0x50
 8019e18:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8019e1c:	931c      	str	r3, [sp, #112]	; 0x70
 8019e1e:	d122      	bne.n	8019e66 <_svfprintf_r+0x69e>
 8019e20:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8019e24:	1a9b      	subs	r3, r3, r2
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	9316      	str	r3, [sp, #88]	; 0x58
 8019e2a:	dd1c      	ble.n	8019e66 <_svfprintf_r+0x69e>
 8019e2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019e2e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8019e32:	2810      	cmp	r0, #16
 8019e34:	483b      	ldr	r0, [pc, #236]	; (8019f24 <_svfprintf_r+0x75c>)
 8019e36:	6020      	str	r0, [r4, #0]
 8019e38:	f102 0201 	add.w	r2, r2, #1
 8019e3c:	f104 0108 	add.w	r1, r4, #8
 8019e40:	f300 82e7 	bgt.w	801a412 <_svfprintf_r+0xc4a>
 8019e44:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019e46:	6060      	str	r0, [r4, #4]
 8019e48:	4403      	add	r3, r0
 8019e4a:	2a07      	cmp	r2, #7
 8019e4c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019e50:	f340 82f4 	ble.w	801a43c <_svfprintf_r+0xc74>
 8019e54:	aa26      	add	r2, sp, #152	; 0x98
 8019e56:	4651      	mov	r1, sl
 8019e58:	4648      	mov	r0, r9
 8019e5a:	f004 fa4d 	bl	801e2f8 <__ssprint_r>
 8019e5e:	2800      	cmp	r0, #0
 8019e60:	f040 861e 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 8019e64:	ac29      	add	r4, sp, #164	; 0xa4
 8019e66:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 8019e6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019e6c:	b16a      	cbz	r2, 8019e8a <_svfprintf_r+0x6c2>
 8019e6e:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8019e72:	6022      	str	r2, [r4, #0]
 8019e74:	2201      	movs	r2, #1
 8019e76:	4413      	add	r3, r2
 8019e78:	9328      	str	r3, [sp, #160]	; 0xa0
 8019e7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019e7c:	6062      	str	r2, [r4, #4]
 8019e7e:	4413      	add	r3, r2
 8019e80:	2b07      	cmp	r3, #7
 8019e82:	9327      	str	r3, [sp, #156]	; 0x9c
 8019e84:	f300 82dc 	bgt.w	801a440 <_svfprintf_r+0xc78>
 8019e88:	3408      	adds	r4, #8
 8019e8a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019e8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019e8e:	b162      	cbz	r2, 8019eaa <_svfprintf_r+0x6e2>
 8019e90:	aa1f      	add	r2, sp, #124	; 0x7c
 8019e92:	6022      	str	r2, [r4, #0]
 8019e94:	2202      	movs	r2, #2
 8019e96:	4413      	add	r3, r2
 8019e98:	9328      	str	r3, [sp, #160]	; 0xa0
 8019e9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019e9c:	6062      	str	r2, [r4, #4]
 8019e9e:	3301      	adds	r3, #1
 8019ea0:	2b07      	cmp	r3, #7
 8019ea2:	9327      	str	r3, [sp, #156]	; 0x9c
 8019ea4:	f300 82d6 	bgt.w	801a454 <_svfprintf_r+0xc8c>
 8019ea8:	3408      	adds	r4, #8
 8019eaa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019eac:	2b80      	cmp	r3, #128	; 0x80
 8019eae:	d122      	bne.n	8019ef6 <_svfprintf_r+0x72e>
 8019eb0:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8019eb4:	1a9b      	subs	r3, r3, r2
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	9316      	str	r3, [sp, #88]	; 0x58
 8019eba:	dd1c      	ble.n	8019ef6 <_svfprintf_r+0x72e>
 8019ebc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019ebe:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8019ec2:	2810      	cmp	r0, #16
 8019ec4:	4818      	ldr	r0, [pc, #96]	; (8019f28 <_svfprintf_r+0x760>)
 8019ec6:	6020      	str	r0, [r4, #0]
 8019ec8:	f102 0201 	add.w	r2, r2, #1
 8019ecc:	f104 0108 	add.w	r1, r4, #8
 8019ed0:	f300 82ca 	bgt.w	801a468 <_svfprintf_r+0xca0>
 8019ed4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019ed6:	6060      	str	r0, [r4, #4]
 8019ed8:	4403      	add	r3, r0
 8019eda:	2a07      	cmp	r2, #7
 8019edc:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8019ee0:	f340 82d7 	ble.w	801a492 <_svfprintf_r+0xcca>
 8019ee4:	aa26      	add	r2, sp, #152	; 0x98
 8019ee6:	4651      	mov	r1, sl
 8019ee8:	4648      	mov	r0, r9
 8019eea:	f004 fa05 	bl	801e2f8 <__ssprint_r>
 8019eee:	2800      	cmp	r0, #0
 8019ef0:	f040 85d6 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 8019ef4:	ac29      	add	r4, sp, #164	; 0xa4
 8019ef6:	9b07      	ldr	r3, [sp, #28]
 8019ef8:	1aff      	subs	r7, r7, r3
 8019efa:	2f00      	cmp	r7, #0
 8019efc:	dd28      	ble.n	8019f50 <_svfprintf_r+0x788>
 8019efe:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8019f02:	4809      	ldr	r0, [pc, #36]	; (8019f28 <_svfprintf_r+0x760>)
 8019f04:	6020      	str	r0, [r4, #0]
 8019f06:	2f10      	cmp	r7, #16
 8019f08:	f103 0301 	add.w	r3, r3, #1
 8019f0c:	f104 0108 	add.w	r1, r4, #8
 8019f10:	e00c      	b.n	8019f2c <_svfprintf_r+0x764>
 8019f12:	bf00      	nop
 8019f14:	08020986 	.word	0x08020986
 8019f18:	08020975 	.word	0x08020975
 8019f1c:	40300000 	.word	0x40300000
 8019f20:	3fe00000 	.word	0x3fe00000
 8019f24:	08020999 	.word	0x08020999
 8019f28:	080209a9 	.word	0x080209a9
 8019f2c:	f300 82b3 	bgt.w	801a496 <_svfprintf_r+0xcce>
 8019f30:	6067      	str	r7, [r4, #4]
 8019f32:	2b07      	cmp	r3, #7
 8019f34:	4417      	add	r7, r2
 8019f36:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 8019f3a:	f340 82bf 	ble.w	801a4bc <_svfprintf_r+0xcf4>
 8019f3e:	aa26      	add	r2, sp, #152	; 0x98
 8019f40:	4651      	mov	r1, sl
 8019f42:	4648      	mov	r0, r9
 8019f44:	f004 f9d8 	bl	801e2f8 <__ssprint_r>
 8019f48:	2800      	cmp	r0, #0
 8019f4a:	f040 85a9 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 8019f4e:	ac29      	add	r4, sp, #164	; 0xa4
 8019f50:	f418 7f80 	tst.w	r8, #256	; 0x100
 8019f54:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8019f56:	f040 82b7 	bne.w	801a4c8 <_svfprintf_r+0xd00>
 8019f5a:	9b07      	ldr	r3, [sp, #28]
 8019f5c:	f8c4 b000 	str.w	fp, [r4]
 8019f60:	441f      	add	r7, r3
 8019f62:	6063      	str	r3, [r4, #4]
 8019f64:	9728      	str	r7, [sp, #160]	; 0xa0
 8019f66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019f68:	3301      	adds	r3, #1
 8019f6a:	2b07      	cmp	r3, #7
 8019f6c:	9327      	str	r3, [sp, #156]	; 0x9c
 8019f6e:	f300 82f0 	bgt.w	801a552 <_svfprintf_r+0xd8a>
 8019f72:	3408      	adds	r4, #8
 8019f74:	f018 0f04 	tst.w	r8, #4
 8019f78:	f040 8574 	bne.w	801aa64 <_svfprintf_r+0x129c>
 8019f7c:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 8019f80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f82:	428a      	cmp	r2, r1
 8019f84:	bfac      	ite	ge
 8019f86:	189b      	addge	r3, r3, r2
 8019f88:	185b      	addlt	r3, r3, r1
 8019f8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8019f8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f8e:	b13b      	cbz	r3, 8019fa0 <_svfprintf_r+0x7d8>
 8019f90:	aa26      	add	r2, sp, #152	; 0x98
 8019f92:	4651      	mov	r1, sl
 8019f94:	4648      	mov	r0, r9
 8019f96:	f004 f9af 	bl	801e2f8 <__ssprint_r>
 8019f9a:	2800      	cmp	r0, #0
 8019f9c:	f040 8580 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	9327      	str	r3, [sp, #156]	; 0x9c
 8019fa4:	9b08      	ldr	r3, [sp, #32]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	f040 8596 	bne.w	801aad8 <_svfprintf_r+0x1310>
 8019fac:	ac29      	add	r4, sp, #164	; 0xa4
 8019fae:	e0e6      	b.n	801a17e <_svfprintf_r+0x9b6>
 8019fb0:	9008      	str	r0, [sp, #32]
 8019fb2:	e630      	b.n	8019c16 <_svfprintf_r+0x44e>
 8019fb4:	9008      	str	r0, [sp, #32]
 8019fb6:	2306      	movs	r3, #6
 8019fb8:	e61e      	b.n	8019bf8 <_svfprintf_r+0x430>
 8019fba:	9008      	str	r0, [sp, #32]
 8019fbc:	e62b      	b.n	8019c16 <_svfprintf_r+0x44e>
 8019fbe:	f802 0c01 	strb.w	r0, [r2, #-1]
 8019fc2:	e694      	b.n	8019cee <_svfprintf_r+0x526>
 8019fc4:	f803 0b01 	strb.w	r0, [r3], #1
 8019fc8:	1aca      	subs	r2, r1, r3
 8019fca:	2a00      	cmp	r2, #0
 8019fcc:	dafa      	bge.n	8019fc4 <_svfprintf_r+0x7fc>
 8019fce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019fd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019fd2:	3201      	adds	r2, #1
 8019fd4:	f103 0301 	add.w	r3, r3, #1
 8019fd8:	bfb8      	it	lt
 8019fda:	2300      	movlt	r3, #0
 8019fdc:	441d      	add	r5, r3
 8019fde:	e696      	b.n	8019d0e <_svfprintf_r+0x546>
 8019fe0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019fe2:	462b      	mov	r3, r5
 8019fe4:	18a9      	adds	r1, r5, r2
 8019fe6:	2030      	movs	r0, #48	; 0x30
 8019fe8:	e7ee      	b.n	8019fc8 <_svfprintf_r+0x800>
 8019fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019fec:	2b46      	cmp	r3, #70	; 0x46
 8019fee:	d005      	beq.n	8019ffc <_svfprintf_r+0x834>
 8019ff0:	2b45      	cmp	r3, #69	; 0x45
 8019ff2:	d11d      	bne.n	801a030 <_svfprintf_r+0x868>
 8019ff4:	9b07      	ldr	r3, [sp, #28]
 8019ff6:	1c5e      	adds	r6, r3, #1
 8019ff8:	2302      	movs	r3, #2
 8019ffa:	e001      	b.n	801a000 <_svfprintf_r+0x838>
 8019ffc:	9e07      	ldr	r6, [sp, #28]
 8019ffe:	2303      	movs	r3, #3
 801a000:	aa24      	add	r2, sp, #144	; 0x90
 801a002:	9204      	str	r2, [sp, #16]
 801a004:	aa21      	add	r2, sp, #132	; 0x84
 801a006:	9203      	str	r2, [sp, #12]
 801a008:	aa20      	add	r2, sp, #128	; 0x80
 801a00a:	e9cd 6201 	strd	r6, r2, [sp, #4]
 801a00e:	9300      	str	r3, [sp, #0]
 801a010:	463a      	mov	r2, r7
 801a012:	462b      	mov	r3, r5
 801a014:	4648      	mov	r0, r9
 801a016:	f003 f847 	bl	801d0a8 <_dtoa_r>
 801a01a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a01c:	2b47      	cmp	r3, #71	; 0x47
 801a01e:	4683      	mov	fp, r0
 801a020:	d108      	bne.n	801a034 <_svfprintf_r+0x86c>
 801a022:	f018 0f01 	tst.w	r8, #1
 801a026:	d105      	bne.n	801a034 <_svfprintf_r+0x86c>
 801a028:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a02a:	eba3 030b 	sub.w	r3, r3, fp
 801a02e:	e670      	b.n	8019d12 <_svfprintf_r+0x54a>
 801a030:	9e07      	ldr	r6, [sp, #28]
 801a032:	e7e1      	b.n	8019ff8 <_svfprintf_r+0x830>
 801a034:	eb0b 0306 	add.w	r3, fp, r6
 801a038:	9309      	str	r3, [sp, #36]	; 0x24
 801a03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a03c:	2b46      	cmp	r3, #70	; 0x46
 801a03e:	d111      	bne.n	801a064 <_svfprintf_r+0x89c>
 801a040:	f89b 3000 	ldrb.w	r3, [fp]
 801a044:	2b30      	cmp	r3, #48	; 0x30
 801a046:	d109      	bne.n	801a05c <_svfprintf_r+0x894>
 801a048:	2200      	movs	r2, #0
 801a04a:	2300      	movs	r3, #0
 801a04c:	4638      	mov	r0, r7
 801a04e:	4629      	mov	r1, r5
 801a050:	f7ee ff12 	bl	8008e78 <__aeabi_dcmpeq>
 801a054:	b910      	cbnz	r0, 801a05c <_svfprintf_r+0x894>
 801a056:	f1c6 0601 	rsb	r6, r6, #1
 801a05a:	9620      	str	r6, [sp, #128]	; 0x80
 801a05c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a05e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a060:	441a      	add	r2, r3
 801a062:	9209      	str	r2, [sp, #36]	; 0x24
 801a064:	2200      	movs	r2, #0
 801a066:	2300      	movs	r3, #0
 801a068:	4638      	mov	r0, r7
 801a06a:	4629      	mov	r1, r5
 801a06c:	f7ee ff04 	bl	8008e78 <__aeabi_dcmpeq>
 801a070:	b108      	cbz	r0, 801a076 <_svfprintf_r+0x8ae>
 801a072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a074:	9324      	str	r3, [sp, #144]	; 0x90
 801a076:	2230      	movs	r2, #48	; 0x30
 801a078:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a07a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a07c:	4299      	cmp	r1, r3
 801a07e:	d9d3      	bls.n	801a028 <_svfprintf_r+0x860>
 801a080:	1c59      	adds	r1, r3, #1
 801a082:	9124      	str	r1, [sp, #144]	; 0x90
 801a084:	701a      	strb	r2, [r3, #0]
 801a086:	e7f7      	b.n	801a078 <_svfprintf_r+0x8b0>
 801a088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a08a:	2b46      	cmp	r3, #70	; 0x46
 801a08c:	f47f ae50 	bne.w	8019d30 <_svfprintf_r+0x568>
 801a090:	9a07      	ldr	r2, [sp, #28]
 801a092:	f008 0301 	and.w	r3, r8, #1
 801a096:	2d00      	cmp	r5, #0
 801a098:	ea43 0302 	orr.w	r3, r3, r2
 801a09c:	dd29      	ble.n	801a0f2 <_svfprintf_r+0x92a>
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d034      	beq.n	801a10c <_svfprintf_r+0x944>
 801a0a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a0a4:	18eb      	adds	r3, r5, r3
 801a0a6:	441a      	add	r2, r3
 801a0a8:	9207      	str	r2, [sp, #28]
 801a0aa:	2366      	movs	r3, #102	; 0x66
 801a0ac:	930b      	str	r3, [sp, #44]	; 0x2c
 801a0ae:	e033      	b.n	801a118 <_svfprintf_r+0x950>
 801a0b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a0b4:	f805 6f01 	strb.w	r6, [r5, #1]!
 801a0b8:	e671      	b.n	8019d9e <_svfprintf_r+0x5d6>
 801a0ba:	b941      	cbnz	r1, 801a0ce <_svfprintf_r+0x906>
 801a0bc:	2230      	movs	r2, #48	; 0x30
 801a0be:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 801a0c2:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 801a0c6:	3330      	adds	r3, #48	; 0x30
 801a0c8:	f802 3b01 	strb.w	r3, [r2], #1
 801a0cc:	e673      	b.n	8019db6 <_svfprintf_r+0x5ee>
 801a0ce:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801a0d2:	e7f8      	b.n	801a0c6 <_svfprintf_r+0x8fe>
 801a0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0d6:	42ab      	cmp	r3, r5
 801a0d8:	dd10      	ble.n	801a0fc <_svfprintf_r+0x934>
 801a0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0de:	2d00      	cmp	r5, #0
 801a0e0:	4413      	add	r3, r2
 801a0e2:	9307      	str	r3, [sp, #28]
 801a0e4:	dc10      	bgt.n	801a108 <_svfprintf_r+0x940>
 801a0e6:	9a07      	ldr	r2, [sp, #28]
 801a0e8:	f1c5 0301 	rsb	r3, r5, #1
 801a0ec:	441a      	add	r2, r3
 801a0ee:	9207      	str	r2, [sp, #28]
 801a0f0:	e00a      	b.n	801a108 <_svfprintf_r+0x940>
 801a0f2:	b16b      	cbz	r3, 801a110 <_svfprintf_r+0x948>
 801a0f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a0f6:	9a07      	ldr	r2, [sp, #28]
 801a0f8:	3301      	adds	r3, #1
 801a0fa:	e7d4      	b.n	801a0a6 <_svfprintf_r+0x8de>
 801a0fc:	f018 0f01 	tst.w	r8, #1
 801a100:	d01f      	beq.n	801a142 <_svfprintf_r+0x97a>
 801a102:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a104:	18eb      	adds	r3, r5, r3
 801a106:	9307      	str	r3, [sp, #28]
 801a108:	2367      	movs	r3, #103	; 0x67
 801a10a:	e7cf      	b.n	801a0ac <_svfprintf_r+0x8e4>
 801a10c:	9507      	str	r5, [sp, #28]
 801a10e:	e7cc      	b.n	801a0aa <_svfprintf_r+0x8e2>
 801a110:	2366      	movs	r3, #102	; 0x66
 801a112:	930b      	str	r3, [sp, #44]	; 0x2c
 801a114:	2301      	movs	r3, #1
 801a116:	9307      	str	r3, [sp, #28]
 801a118:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801a11c:	930c      	str	r3, [sp, #48]	; 0x30
 801a11e:	d021      	beq.n	801a164 <_svfprintf_r+0x99c>
 801a120:	2600      	movs	r6, #0
 801a122:	2d00      	cmp	r5, #0
 801a124:	960c      	str	r6, [sp, #48]	; 0x30
 801a126:	f77f ae5d 	ble.w	8019de4 <_svfprintf_r+0x61c>
 801a12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a12c:	781b      	ldrb	r3, [r3, #0]
 801a12e:	2bff      	cmp	r3, #255	; 0xff
 801a130:	d109      	bne.n	801a146 <_svfprintf_r+0x97e>
 801a132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a134:	9a07      	ldr	r2, [sp, #28]
 801a136:	9915      	ldr	r1, [sp, #84]	; 0x54
 801a138:	4433      	add	r3, r6
 801a13a:	fb01 2303 	mla	r3, r1, r3, r2
 801a13e:	9307      	str	r3, [sp, #28]
 801a140:	e650      	b.n	8019de4 <_svfprintf_r+0x61c>
 801a142:	9507      	str	r5, [sp, #28]
 801a144:	e7e0      	b.n	801a108 <_svfprintf_r+0x940>
 801a146:	42ab      	cmp	r3, r5
 801a148:	daf3      	bge.n	801a132 <_svfprintf_r+0x96a>
 801a14a:	1aed      	subs	r5, r5, r3
 801a14c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a14e:	785b      	ldrb	r3, [r3, #1]
 801a150:	b133      	cbz	r3, 801a160 <_svfprintf_r+0x998>
 801a152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a154:	3301      	adds	r3, #1
 801a156:	930c      	str	r3, [sp, #48]	; 0x30
 801a158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a15a:	3301      	adds	r3, #1
 801a15c:	930d      	str	r3, [sp, #52]	; 0x34
 801a15e:	e7e4      	b.n	801a12a <_svfprintf_r+0x962>
 801a160:	3601      	adds	r6, #1
 801a162:	e7e2      	b.n	801a12a <_svfprintf_r+0x962>
 801a164:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a166:	e63d      	b.n	8019de4 <_svfprintf_r+0x61c>
 801a168:	1d2b      	adds	r3, r5, #4
 801a16a:	f018 0f20 	tst.w	r8, #32
 801a16e:	930a      	str	r3, [sp, #40]	; 0x28
 801a170:	d00a      	beq.n	801a188 <_svfprintf_r+0x9c0>
 801a172:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a174:	682b      	ldr	r3, [r5, #0]
 801a176:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a178:	17d2      	asrs	r2, r2, #31
 801a17a:	e9c3 1200 	strd	r1, r2, [r3]
 801a17e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a180:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801a184:	f7ff bb5d 	b.w	8019842 <_svfprintf_r+0x7a>
 801a188:	f018 0f10 	tst.w	r8, #16
 801a18c:	d003      	beq.n	801a196 <_svfprintf_r+0x9ce>
 801a18e:	682b      	ldr	r3, [r5, #0]
 801a190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a192:	601a      	str	r2, [r3, #0]
 801a194:	e7f3      	b.n	801a17e <_svfprintf_r+0x9b6>
 801a196:	f018 0f40 	tst.w	r8, #64	; 0x40
 801a19a:	d003      	beq.n	801a1a4 <_svfprintf_r+0x9dc>
 801a19c:	682b      	ldr	r3, [r5, #0]
 801a19e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a1a0:	801a      	strh	r2, [r3, #0]
 801a1a2:	e7ec      	b.n	801a17e <_svfprintf_r+0x9b6>
 801a1a4:	f418 7f00 	tst.w	r8, #512	; 0x200
 801a1a8:	d0f1      	beq.n	801a18e <_svfprintf_r+0x9c6>
 801a1aa:	682b      	ldr	r3, [r5, #0]
 801a1ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a1ae:	701a      	strb	r2, [r3, #0]
 801a1b0:	e7e5      	b.n	801a17e <_svfprintf_r+0x9b6>
 801a1b2:	f048 0810 	orr.w	r8, r8, #16
 801a1b6:	f018 0320 	ands.w	r3, r8, #32
 801a1ba:	d020      	beq.n	801a1fe <_svfprintf_r+0xa36>
 801a1bc:	3507      	adds	r5, #7
 801a1be:	f025 0307 	bic.w	r3, r5, #7
 801a1c2:	461a      	mov	r2, r3
 801a1c4:	685e      	ldr	r6, [r3, #4]
 801a1c6:	f852 5b08 	ldr.w	r5, [r2], #8
 801a1ca:	920a      	str	r2, [sp, #40]	; 0x28
 801a1cc:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	2200      	movs	r2, #0
 801a1d4:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801a1d8:	9a07      	ldr	r2, [sp, #28]
 801a1da:	3201      	adds	r2, #1
 801a1dc:	f000 848d 	beq.w	801aafa <_svfprintf_r+0x1332>
 801a1e0:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801a1e4:	9208      	str	r2, [sp, #32]
 801a1e6:	ea55 0206 	orrs.w	r2, r5, r6
 801a1ea:	f040 848c 	bne.w	801ab06 <_svfprintf_r+0x133e>
 801a1ee:	9a07      	ldr	r2, [sp, #28]
 801a1f0:	2a00      	cmp	r2, #0
 801a1f2:	f000 80f4 	beq.w	801a3de <_svfprintf_r+0xc16>
 801a1f6:	2b01      	cmp	r3, #1
 801a1f8:	f040 8488 	bne.w	801ab0c <_svfprintf_r+0x1344>
 801a1fc:	e09e      	b.n	801a33c <_svfprintf_r+0xb74>
 801a1fe:	462a      	mov	r2, r5
 801a200:	f018 0610 	ands.w	r6, r8, #16
 801a204:	f852 5b04 	ldr.w	r5, [r2], #4
 801a208:	920a      	str	r2, [sp, #40]	; 0x28
 801a20a:	d001      	beq.n	801a210 <_svfprintf_r+0xa48>
 801a20c:	461e      	mov	r6, r3
 801a20e:	e7dd      	b.n	801a1cc <_svfprintf_r+0xa04>
 801a210:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801a214:	d001      	beq.n	801a21a <_svfprintf_r+0xa52>
 801a216:	b2ad      	uxth	r5, r5
 801a218:	e7d8      	b.n	801a1cc <_svfprintf_r+0xa04>
 801a21a:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801a21e:	d0d5      	beq.n	801a1cc <_svfprintf_r+0xa04>
 801a220:	b2ed      	uxtb	r5, r5
 801a222:	e7f3      	b.n	801a20c <_svfprintf_r+0xa44>
 801a224:	462b      	mov	r3, r5
 801a226:	2278      	movs	r2, #120	; 0x78
 801a228:	f853 5b04 	ldr.w	r5, [r3], #4
 801a22c:	930a      	str	r3, [sp, #40]	; 0x28
 801a22e:	f647 0330 	movw	r3, #30768	; 0x7830
 801a232:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 801a236:	4ba2      	ldr	r3, [pc, #648]	; (801a4c0 <_svfprintf_r+0xcf8>)
 801a238:	931a      	str	r3, [sp, #104]	; 0x68
 801a23a:	2600      	movs	r6, #0
 801a23c:	f048 0802 	orr.w	r8, r8, #2
 801a240:	2302      	movs	r3, #2
 801a242:	920b      	str	r2, [sp, #44]	; 0x2c
 801a244:	e7c5      	b.n	801a1d2 <_svfprintf_r+0xa0a>
 801a246:	462b      	mov	r3, r5
 801a248:	2500      	movs	r5, #0
 801a24a:	f853 bb04 	ldr.w	fp, [r3], #4
 801a24e:	930a      	str	r3, [sp, #40]	; 0x28
 801a250:	9b07      	ldr	r3, [sp, #28]
 801a252:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 801a256:	1c58      	adds	r0, r3, #1
 801a258:	d010      	beq.n	801a27c <_svfprintf_r+0xab4>
 801a25a:	461a      	mov	r2, r3
 801a25c:	4629      	mov	r1, r5
 801a25e:	4658      	mov	r0, fp
 801a260:	f7ee f98e 	bl	8008580 <memchr>
 801a264:	9008      	str	r0, [sp, #32]
 801a266:	2800      	cmp	r0, #0
 801a268:	f000 80d0 	beq.w	801a40c <_svfprintf_r+0xc44>
 801a26c:	eba0 030b 	sub.w	r3, r0, fp
 801a270:	e9cd 3507 	strd	r3, r5, [sp, #28]
 801a274:	462f      	mov	r7, r5
 801a276:	462e      	mov	r6, r5
 801a278:	950c      	str	r5, [sp, #48]	; 0x30
 801a27a:	e5bb      	b.n	8019df4 <_svfprintf_r+0x62c>
 801a27c:	4658      	mov	r0, fp
 801a27e:	f7ee f9cf 	bl	8008620 <strlen>
 801a282:	e9cd 0507 	strd	r0, r5, [sp, #28]
 801a286:	e468      	b.n	8019b5a <_svfprintf_r+0x392>
 801a288:	f048 0810 	orr.w	r8, r8, #16
 801a28c:	f018 0320 	ands.w	r3, r8, #32
 801a290:	d009      	beq.n	801a2a6 <_svfprintf_r+0xade>
 801a292:	3507      	adds	r5, #7
 801a294:	f025 0307 	bic.w	r3, r5, #7
 801a298:	461a      	mov	r2, r3
 801a29a:	685e      	ldr	r6, [r3, #4]
 801a29c:	f852 5b08 	ldr.w	r5, [r2], #8
 801a2a0:	920a      	str	r2, [sp, #40]	; 0x28
 801a2a2:	2301      	movs	r3, #1
 801a2a4:	e795      	b.n	801a1d2 <_svfprintf_r+0xa0a>
 801a2a6:	462a      	mov	r2, r5
 801a2a8:	f018 0610 	ands.w	r6, r8, #16
 801a2ac:	f852 5b04 	ldr.w	r5, [r2], #4
 801a2b0:	920a      	str	r2, [sp, #40]	; 0x28
 801a2b2:	d001      	beq.n	801a2b8 <_svfprintf_r+0xaf0>
 801a2b4:	461e      	mov	r6, r3
 801a2b6:	e7f4      	b.n	801a2a2 <_svfprintf_r+0xada>
 801a2b8:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801a2bc:	d001      	beq.n	801a2c2 <_svfprintf_r+0xafa>
 801a2be:	b2ad      	uxth	r5, r5
 801a2c0:	e7ef      	b.n	801a2a2 <_svfprintf_r+0xada>
 801a2c2:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801a2c6:	d0ec      	beq.n	801a2a2 <_svfprintf_r+0xada>
 801a2c8:	b2ed      	uxtb	r5, r5
 801a2ca:	e7f3      	b.n	801a2b4 <_svfprintf_r+0xaec>
 801a2cc:	4b7d      	ldr	r3, [pc, #500]	; (801a4c4 <_svfprintf_r+0xcfc>)
 801a2ce:	931a      	str	r3, [sp, #104]	; 0x68
 801a2d0:	f018 0320 	ands.w	r3, r8, #32
 801a2d4:	d01b      	beq.n	801a30e <_svfprintf_r+0xb46>
 801a2d6:	3507      	adds	r5, #7
 801a2d8:	f025 0307 	bic.w	r3, r5, #7
 801a2dc:	461a      	mov	r2, r3
 801a2de:	685e      	ldr	r6, [r3, #4]
 801a2e0:	f852 5b08 	ldr.w	r5, [r2], #8
 801a2e4:	920a      	str	r2, [sp, #40]	; 0x28
 801a2e6:	f018 0f01 	tst.w	r8, #1
 801a2ea:	d00a      	beq.n	801a302 <_svfprintf_r+0xb3a>
 801a2ec:	ea55 0306 	orrs.w	r3, r5, r6
 801a2f0:	d007      	beq.n	801a302 <_svfprintf_r+0xb3a>
 801a2f2:	2330      	movs	r3, #48	; 0x30
 801a2f4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801a2f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a2fa:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801a2fe:	f048 0802 	orr.w	r8, r8, #2
 801a302:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801a306:	2302      	movs	r3, #2
 801a308:	e763      	b.n	801a1d2 <_svfprintf_r+0xa0a>
 801a30a:	4b6d      	ldr	r3, [pc, #436]	; (801a4c0 <_svfprintf_r+0xcf8>)
 801a30c:	e7df      	b.n	801a2ce <_svfprintf_r+0xb06>
 801a30e:	462a      	mov	r2, r5
 801a310:	f018 0610 	ands.w	r6, r8, #16
 801a314:	f852 5b04 	ldr.w	r5, [r2], #4
 801a318:	920a      	str	r2, [sp, #40]	; 0x28
 801a31a:	d001      	beq.n	801a320 <_svfprintf_r+0xb58>
 801a31c:	461e      	mov	r6, r3
 801a31e:	e7e2      	b.n	801a2e6 <_svfprintf_r+0xb1e>
 801a320:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801a324:	d001      	beq.n	801a32a <_svfprintf_r+0xb62>
 801a326:	b2ad      	uxth	r5, r5
 801a328:	e7dd      	b.n	801a2e6 <_svfprintf_r+0xb1e>
 801a32a:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801a32e:	d0da      	beq.n	801a2e6 <_svfprintf_r+0xb1e>
 801a330:	b2ed      	uxtb	r5, r5
 801a332:	e7f3      	b.n	801a31c <_svfprintf_r+0xb54>
 801a334:	2d0a      	cmp	r5, #10
 801a336:	f176 0300 	sbcs.w	r3, r6, #0
 801a33a:	d205      	bcs.n	801a348 <_svfprintf_r+0xb80>
 801a33c:	3530      	adds	r5, #48	; 0x30
 801a33e:	f88d 5147 	strb.w	r5, [sp, #327]	; 0x147
 801a342:	f20d 1b47 	addw	fp, sp, #327	; 0x147
 801a346:	e3fd      	b.n	801ab44 <_svfprintf_r+0x137c>
 801a348:	2300      	movs	r3, #0
 801a34a:	9309      	str	r3, [sp, #36]	; 0x24
 801a34c:	9b08      	ldr	r3, [sp, #32]
 801a34e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a352:	af52      	add	r7, sp, #328	; 0x148
 801a354:	930c      	str	r3, [sp, #48]	; 0x30
 801a356:	220a      	movs	r2, #10
 801a358:	2300      	movs	r3, #0
 801a35a:	4628      	mov	r0, r5
 801a35c:	4631      	mov	r1, r6
 801a35e:	f7ee ff49 	bl	80091f4 <__aeabi_uldivmod>
 801a362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a364:	9014      	str	r0, [sp, #80]	; 0x50
 801a366:	3301      	adds	r3, #1
 801a368:	9309      	str	r3, [sp, #36]	; 0x24
 801a36a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a36c:	3230      	adds	r2, #48	; 0x30
 801a36e:	4688      	mov	r8, r1
 801a370:	f107 3bff 	add.w	fp, r7, #4294967295
 801a374:	f807 2c01 	strb.w	r2, [r7, #-1]
 801a378:	b1d3      	cbz	r3, 801a3b0 <_svfprintf_r+0xbe8>
 801a37a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a37c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a37e:	781b      	ldrb	r3, [r3, #0]
 801a380:	429a      	cmp	r2, r3
 801a382:	d115      	bne.n	801a3b0 <_svfprintf_r+0xbe8>
 801a384:	2aff      	cmp	r2, #255	; 0xff
 801a386:	d013      	beq.n	801a3b0 <_svfprintf_r+0xbe8>
 801a388:	2d0a      	cmp	r5, #10
 801a38a:	f176 0300 	sbcs.w	r3, r6, #0
 801a38e:	d30f      	bcc.n	801a3b0 <_svfprintf_r+0xbe8>
 801a390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a392:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a394:	ebab 0b03 	sub.w	fp, fp, r3
 801a398:	461a      	mov	r2, r3
 801a39a:	4658      	mov	r0, fp
 801a39c:	f002 fd19 	bl	801cdd2 <strncpy>
 801a3a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a3a2:	785b      	ldrb	r3, [r3, #1]
 801a3a4:	b11b      	cbz	r3, 801a3ae <_svfprintf_r+0xbe6>
 801a3a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a3a8:	3301      	adds	r3, #1
 801a3aa:	930d      	str	r3, [sp, #52]	; 0x34
 801a3ac:	2300      	movs	r3, #0
 801a3ae:	9309      	str	r3, [sp, #36]	; 0x24
 801a3b0:	2d0a      	cmp	r5, #10
 801a3b2:	f176 0600 	sbcs.w	r6, r6, #0
 801a3b6:	f0c0 83c5 	bcc.w	801ab44 <_svfprintf_r+0x137c>
 801a3ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801a3bc:	4646      	mov	r6, r8
 801a3be:	465f      	mov	r7, fp
 801a3c0:	e7c9      	b.n	801a356 <_svfprintf_r+0xb8e>
 801a3c2:	f005 030f 	and.w	r3, r5, #15
 801a3c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a3c8:	092d      	lsrs	r5, r5, #4
 801a3ca:	5cd3      	ldrb	r3, [r2, r3]
 801a3cc:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801a3d0:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 801a3d4:	0936      	lsrs	r6, r6, #4
 801a3d6:	ea55 0306 	orrs.w	r3, r5, r6
 801a3da:	d1f2      	bne.n	801a3c2 <_svfprintf_r+0xbfa>
 801a3dc:	e3b2      	b.n	801ab44 <_svfprintf_r+0x137c>
 801a3de:	b933      	cbnz	r3, 801a3ee <_svfprintf_r+0xc26>
 801a3e0:	f018 0f01 	tst.w	r8, #1
 801a3e4:	d003      	beq.n	801a3ee <_svfprintf_r+0xc26>
 801a3e6:	2330      	movs	r3, #48	; 0x30
 801a3e8:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 801a3ec:	e7a9      	b.n	801a342 <_svfprintf_r+0xb7a>
 801a3ee:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801a3f2:	e3a7      	b.n	801ab44 <_svfprintf_r+0x137c>
 801a3f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	f000 8374 	beq.w	801aae4 <_svfprintf_r+0x131c>
 801a3fc:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801a400:	2300      	movs	r3, #0
 801a402:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801a406:	950a      	str	r5, [sp, #40]	; 0x28
 801a408:	f7ff bb39 	b.w	8019a7e <_svfprintf_r+0x2b6>
 801a40c:	9f08      	ldr	r7, [sp, #32]
 801a40e:	f7ff bba5 	b.w	8019b5c <_svfprintf_r+0x394>
 801a412:	2010      	movs	r0, #16
 801a414:	4403      	add	r3, r0
 801a416:	2a07      	cmp	r2, #7
 801a418:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801a41c:	6060      	str	r0, [r4, #4]
 801a41e:	dd08      	ble.n	801a432 <_svfprintf_r+0xc6a>
 801a420:	aa26      	add	r2, sp, #152	; 0x98
 801a422:	4651      	mov	r1, sl
 801a424:	4648      	mov	r0, r9
 801a426:	f003 ff67 	bl	801e2f8 <__ssprint_r>
 801a42a:	2800      	cmp	r0, #0
 801a42c:	f040 8338 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a430:	a929      	add	r1, sp, #164	; 0xa4
 801a432:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a434:	3b10      	subs	r3, #16
 801a436:	9316      	str	r3, [sp, #88]	; 0x58
 801a438:	460c      	mov	r4, r1
 801a43a:	e4f7      	b.n	8019e2c <_svfprintf_r+0x664>
 801a43c:	460c      	mov	r4, r1
 801a43e:	e512      	b.n	8019e66 <_svfprintf_r+0x69e>
 801a440:	aa26      	add	r2, sp, #152	; 0x98
 801a442:	4651      	mov	r1, sl
 801a444:	4648      	mov	r0, r9
 801a446:	f003 ff57 	bl	801e2f8 <__ssprint_r>
 801a44a:	2800      	cmp	r0, #0
 801a44c:	f040 8328 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a450:	ac29      	add	r4, sp, #164	; 0xa4
 801a452:	e51a      	b.n	8019e8a <_svfprintf_r+0x6c2>
 801a454:	aa26      	add	r2, sp, #152	; 0x98
 801a456:	4651      	mov	r1, sl
 801a458:	4648      	mov	r0, r9
 801a45a:	f003 ff4d 	bl	801e2f8 <__ssprint_r>
 801a45e:	2800      	cmp	r0, #0
 801a460:	f040 831e 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a464:	ac29      	add	r4, sp, #164	; 0xa4
 801a466:	e520      	b.n	8019eaa <_svfprintf_r+0x6e2>
 801a468:	2010      	movs	r0, #16
 801a46a:	4403      	add	r3, r0
 801a46c:	2a07      	cmp	r2, #7
 801a46e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801a472:	6060      	str	r0, [r4, #4]
 801a474:	dd08      	ble.n	801a488 <_svfprintf_r+0xcc0>
 801a476:	aa26      	add	r2, sp, #152	; 0x98
 801a478:	4651      	mov	r1, sl
 801a47a:	4648      	mov	r0, r9
 801a47c:	f003 ff3c 	bl	801e2f8 <__ssprint_r>
 801a480:	2800      	cmp	r0, #0
 801a482:	f040 830d 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a486:	a929      	add	r1, sp, #164	; 0xa4
 801a488:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a48a:	3b10      	subs	r3, #16
 801a48c:	9316      	str	r3, [sp, #88]	; 0x58
 801a48e:	460c      	mov	r4, r1
 801a490:	e514      	b.n	8019ebc <_svfprintf_r+0x6f4>
 801a492:	460c      	mov	r4, r1
 801a494:	e52f      	b.n	8019ef6 <_svfprintf_r+0x72e>
 801a496:	2010      	movs	r0, #16
 801a498:	4402      	add	r2, r0
 801a49a:	2b07      	cmp	r3, #7
 801a49c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a4a0:	6060      	str	r0, [r4, #4]
 801a4a2:	dd08      	ble.n	801a4b6 <_svfprintf_r+0xcee>
 801a4a4:	aa26      	add	r2, sp, #152	; 0x98
 801a4a6:	4651      	mov	r1, sl
 801a4a8:	4648      	mov	r0, r9
 801a4aa:	f003 ff25 	bl	801e2f8 <__ssprint_r>
 801a4ae:	2800      	cmp	r0, #0
 801a4b0:	f040 82f6 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a4b4:	a929      	add	r1, sp, #164	; 0xa4
 801a4b6:	3f10      	subs	r7, #16
 801a4b8:	460c      	mov	r4, r1
 801a4ba:	e520      	b.n	8019efe <_svfprintf_r+0x736>
 801a4bc:	460c      	mov	r4, r1
 801a4be:	e547      	b.n	8019f50 <_svfprintf_r+0x788>
 801a4c0:	08020975 	.word	0x08020975
 801a4c4:	08020986 	.word	0x08020986
 801a4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4ca:	2b65      	cmp	r3, #101	; 0x65
 801a4cc:	f340 8230 	ble.w	801a930 <_svfprintf_r+0x1168>
 801a4d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	2300      	movs	r3, #0
 801a4d8:	f7ee fcce 	bl	8008e78 <__aeabi_dcmpeq>
 801a4dc:	2800      	cmp	r0, #0
 801a4de:	d068      	beq.n	801a5b2 <_svfprintf_r+0xdea>
 801a4e0:	4b6d      	ldr	r3, [pc, #436]	; (801a698 <_svfprintf_r+0xed0>)
 801a4e2:	6023      	str	r3, [r4, #0]
 801a4e4:	2301      	movs	r3, #1
 801a4e6:	441f      	add	r7, r3
 801a4e8:	6063      	str	r3, [r4, #4]
 801a4ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a4ec:	9728      	str	r7, [sp, #160]	; 0xa0
 801a4ee:	3301      	adds	r3, #1
 801a4f0:	2b07      	cmp	r3, #7
 801a4f2:	9327      	str	r3, [sp, #156]	; 0x9c
 801a4f4:	dc37      	bgt.n	801a566 <_svfprintf_r+0xd9e>
 801a4f6:	3408      	adds	r4, #8
 801a4f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a4fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a4fc:	4293      	cmp	r3, r2
 801a4fe:	db03      	blt.n	801a508 <_svfprintf_r+0xd40>
 801a500:	f018 0f01 	tst.w	r8, #1
 801a504:	f43f ad36 	beq.w	8019f74 <_svfprintf_r+0x7ac>
 801a508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a50a:	6023      	str	r3, [r4, #0]
 801a50c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a50e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a510:	6063      	str	r3, [r4, #4]
 801a512:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a514:	4413      	add	r3, r2
 801a516:	9328      	str	r3, [sp, #160]	; 0xa0
 801a518:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a51a:	3301      	adds	r3, #1
 801a51c:	2b07      	cmp	r3, #7
 801a51e:	9327      	str	r3, [sp, #156]	; 0x9c
 801a520:	dc2b      	bgt.n	801a57a <_svfprintf_r+0xdb2>
 801a522:	3408      	adds	r4, #8
 801a524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a526:	1e5d      	subs	r5, r3, #1
 801a528:	2d00      	cmp	r5, #0
 801a52a:	f77f ad23 	ble.w	8019f74 <_svfprintf_r+0x7ac>
 801a52e:	4e5b      	ldr	r6, [pc, #364]	; (801a69c <_svfprintf_r+0xed4>)
 801a530:	2710      	movs	r7, #16
 801a532:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a536:	2d10      	cmp	r5, #16
 801a538:	f103 0301 	add.w	r3, r3, #1
 801a53c:	f104 0108 	add.w	r1, r4, #8
 801a540:	6026      	str	r6, [r4, #0]
 801a542:	dc24      	bgt.n	801a58e <_svfprintf_r+0xdc6>
 801a544:	6065      	str	r5, [r4, #4]
 801a546:	4415      	add	r5, r2
 801a548:	9528      	str	r5, [sp, #160]	; 0xa0
 801a54a:	2b07      	cmp	r3, #7
 801a54c:	9327      	str	r3, [sp, #156]	; 0x9c
 801a54e:	f340 8286 	ble.w	801aa5e <_svfprintf_r+0x1296>
 801a552:	aa26      	add	r2, sp, #152	; 0x98
 801a554:	4651      	mov	r1, sl
 801a556:	4648      	mov	r0, r9
 801a558:	f003 fece 	bl	801e2f8 <__ssprint_r>
 801a55c:	2800      	cmp	r0, #0
 801a55e:	f040 829f 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a562:	ac29      	add	r4, sp, #164	; 0xa4
 801a564:	e506      	b.n	8019f74 <_svfprintf_r+0x7ac>
 801a566:	aa26      	add	r2, sp, #152	; 0x98
 801a568:	4651      	mov	r1, sl
 801a56a:	4648      	mov	r0, r9
 801a56c:	f003 fec4 	bl	801e2f8 <__ssprint_r>
 801a570:	2800      	cmp	r0, #0
 801a572:	f040 8295 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a576:	ac29      	add	r4, sp, #164	; 0xa4
 801a578:	e7be      	b.n	801a4f8 <_svfprintf_r+0xd30>
 801a57a:	aa26      	add	r2, sp, #152	; 0x98
 801a57c:	4651      	mov	r1, sl
 801a57e:	4648      	mov	r0, r9
 801a580:	f003 feba 	bl	801e2f8 <__ssprint_r>
 801a584:	2800      	cmp	r0, #0
 801a586:	f040 828b 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a58a:	ac29      	add	r4, sp, #164	; 0xa4
 801a58c:	e7ca      	b.n	801a524 <_svfprintf_r+0xd5c>
 801a58e:	3210      	adds	r2, #16
 801a590:	2b07      	cmp	r3, #7
 801a592:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a596:	6067      	str	r7, [r4, #4]
 801a598:	dd08      	ble.n	801a5ac <_svfprintf_r+0xde4>
 801a59a:	aa26      	add	r2, sp, #152	; 0x98
 801a59c:	4651      	mov	r1, sl
 801a59e:	4648      	mov	r0, r9
 801a5a0:	f003 feaa 	bl	801e2f8 <__ssprint_r>
 801a5a4:	2800      	cmp	r0, #0
 801a5a6:	f040 827b 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a5aa:	a929      	add	r1, sp, #164	; 0xa4
 801a5ac:	3d10      	subs	r5, #16
 801a5ae:	460c      	mov	r4, r1
 801a5b0:	e7bf      	b.n	801a532 <_svfprintf_r+0xd6a>
 801a5b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	dc73      	bgt.n	801a6a0 <_svfprintf_r+0xed8>
 801a5b8:	4b37      	ldr	r3, [pc, #220]	; (801a698 <_svfprintf_r+0xed0>)
 801a5ba:	6023      	str	r3, [r4, #0]
 801a5bc:	2301      	movs	r3, #1
 801a5be:	441f      	add	r7, r3
 801a5c0:	6063      	str	r3, [r4, #4]
 801a5c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a5c4:	9728      	str	r7, [sp, #160]	; 0xa0
 801a5c6:	3301      	adds	r3, #1
 801a5c8:	2b07      	cmp	r3, #7
 801a5ca:	9327      	str	r3, [sp, #156]	; 0x9c
 801a5cc:	dc3d      	bgt.n	801a64a <_svfprintf_r+0xe82>
 801a5ce:	3408      	adds	r4, #8
 801a5d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a5d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a5d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a5d6:	430b      	orrs	r3, r1
 801a5d8:	f008 0101 	and.w	r1, r8, #1
 801a5dc:	430b      	orrs	r3, r1
 801a5de:	f43f acc9 	beq.w	8019f74 <_svfprintf_r+0x7ac>
 801a5e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a5e4:	6023      	str	r3, [r4, #0]
 801a5e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a5e8:	6063      	str	r3, [r4, #4]
 801a5ea:	441a      	add	r2, r3
 801a5ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a5ee:	9228      	str	r2, [sp, #160]	; 0xa0
 801a5f0:	3301      	adds	r3, #1
 801a5f2:	2b07      	cmp	r3, #7
 801a5f4:	9327      	str	r3, [sp, #156]	; 0x9c
 801a5f6:	dc32      	bgt.n	801a65e <_svfprintf_r+0xe96>
 801a5f8:	3408      	adds	r4, #8
 801a5fa:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a5fc:	2d00      	cmp	r5, #0
 801a5fe:	da1b      	bge.n	801a638 <_svfprintf_r+0xe70>
 801a600:	4e26      	ldr	r6, [pc, #152]	; (801a69c <_svfprintf_r+0xed4>)
 801a602:	426d      	negs	r5, r5
 801a604:	4623      	mov	r3, r4
 801a606:	2710      	movs	r7, #16
 801a608:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 801a60c:	2d10      	cmp	r5, #16
 801a60e:	f102 0201 	add.w	r2, r2, #1
 801a612:	f104 0408 	add.w	r4, r4, #8
 801a616:	601e      	str	r6, [r3, #0]
 801a618:	dc2b      	bgt.n	801a672 <_svfprintf_r+0xeaa>
 801a61a:	605d      	str	r5, [r3, #4]
 801a61c:	2a07      	cmp	r2, #7
 801a61e:	440d      	add	r5, r1
 801a620:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 801a624:	dd08      	ble.n	801a638 <_svfprintf_r+0xe70>
 801a626:	aa26      	add	r2, sp, #152	; 0x98
 801a628:	4651      	mov	r1, sl
 801a62a:	4648      	mov	r0, r9
 801a62c:	f003 fe64 	bl	801e2f8 <__ssprint_r>
 801a630:	2800      	cmp	r0, #0
 801a632:	f040 8235 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a636:	ac29      	add	r4, sp, #164	; 0xa4
 801a638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a63a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a63c:	6063      	str	r3, [r4, #4]
 801a63e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a640:	f8c4 b000 	str.w	fp, [r4]
 801a644:	4413      	add	r3, r2
 801a646:	9328      	str	r3, [sp, #160]	; 0xa0
 801a648:	e48d      	b.n	8019f66 <_svfprintf_r+0x79e>
 801a64a:	aa26      	add	r2, sp, #152	; 0x98
 801a64c:	4651      	mov	r1, sl
 801a64e:	4648      	mov	r0, r9
 801a650:	f003 fe52 	bl	801e2f8 <__ssprint_r>
 801a654:	2800      	cmp	r0, #0
 801a656:	f040 8223 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a65a:	ac29      	add	r4, sp, #164	; 0xa4
 801a65c:	e7b8      	b.n	801a5d0 <_svfprintf_r+0xe08>
 801a65e:	aa26      	add	r2, sp, #152	; 0x98
 801a660:	4651      	mov	r1, sl
 801a662:	4648      	mov	r0, r9
 801a664:	f003 fe48 	bl	801e2f8 <__ssprint_r>
 801a668:	2800      	cmp	r0, #0
 801a66a:	f040 8219 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a66e:	ac29      	add	r4, sp, #164	; 0xa4
 801a670:	e7c3      	b.n	801a5fa <_svfprintf_r+0xe32>
 801a672:	3110      	adds	r1, #16
 801a674:	2a07      	cmp	r2, #7
 801a676:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801a67a:	605f      	str	r7, [r3, #4]
 801a67c:	dd08      	ble.n	801a690 <_svfprintf_r+0xec8>
 801a67e:	aa26      	add	r2, sp, #152	; 0x98
 801a680:	4651      	mov	r1, sl
 801a682:	4648      	mov	r0, r9
 801a684:	f003 fe38 	bl	801e2f8 <__ssprint_r>
 801a688:	2800      	cmp	r0, #0
 801a68a:	f040 8209 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a68e:	ac29      	add	r4, sp, #164	; 0xa4
 801a690:	3d10      	subs	r5, #16
 801a692:	4623      	mov	r3, r4
 801a694:	e7b8      	b.n	801a608 <_svfprintf_r+0xe40>
 801a696:	bf00      	nop
 801a698:	08020997 	.word	0x08020997
 801a69c:	080209a9 	.word	0x080209a9
 801a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6a2:	42ab      	cmp	r3, r5
 801a6a4:	bfa8      	it	ge
 801a6a6:	462b      	movge	r3, r5
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	9307      	str	r3, [sp, #28]
 801a6ac:	dd09      	ble.n	801a6c2 <_svfprintf_r+0xefa>
 801a6ae:	441f      	add	r7, r3
 801a6b0:	e9c4 b300 	strd	fp, r3, [r4]
 801a6b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a6b6:	9728      	str	r7, [sp, #160]	; 0xa0
 801a6b8:	3301      	adds	r3, #1
 801a6ba:	2b07      	cmp	r3, #7
 801a6bc:	9327      	str	r3, [sp, #156]	; 0x9c
 801a6be:	dc74      	bgt.n	801a7aa <_svfprintf_r+0xfe2>
 801a6c0:	3408      	adds	r4, #8
 801a6c2:	9b07      	ldr	r3, [sp, #28]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	bfac      	ite	ge
 801a6c8:	1aef      	subge	r7, r5, r3
 801a6ca:	462f      	movlt	r7, r5
 801a6cc:	2f00      	cmp	r7, #0
 801a6ce:	dd18      	ble.n	801a702 <_svfprintf_r+0xf3a>
 801a6d0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a6d4:	4895      	ldr	r0, [pc, #596]	; (801a92c <_svfprintf_r+0x1164>)
 801a6d6:	6020      	str	r0, [r4, #0]
 801a6d8:	2f10      	cmp	r7, #16
 801a6da:	f103 0301 	add.w	r3, r3, #1
 801a6de:	f104 0108 	add.w	r1, r4, #8
 801a6e2:	dc6c      	bgt.n	801a7be <_svfprintf_r+0xff6>
 801a6e4:	6067      	str	r7, [r4, #4]
 801a6e6:	2b07      	cmp	r3, #7
 801a6e8:	4417      	add	r7, r2
 801a6ea:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801a6ee:	dd79      	ble.n	801a7e4 <_svfprintf_r+0x101c>
 801a6f0:	aa26      	add	r2, sp, #152	; 0x98
 801a6f2:	4651      	mov	r1, sl
 801a6f4:	4648      	mov	r0, r9
 801a6f6:	f003 fdff 	bl	801e2f8 <__ssprint_r>
 801a6fa:	2800      	cmp	r0, #0
 801a6fc:	f040 81d0 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a700:	ac29      	add	r4, sp, #164	; 0xa4
 801a702:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801a706:	445d      	add	r5, fp
 801a708:	d009      	beq.n	801a71e <_svfprintf_r+0xf56>
 801a70a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d16b      	bne.n	801a7e8 <_svfprintf_r+0x1020>
 801a710:	2e00      	cmp	r6, #0
 801a712:	d16b      	bne.n	801a7ec <_svfprintf_r+0x1024>
 801a714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a716:	445b      	add	r3, fp
 801a718:	429d      	cmp	r5, r3
 801a71a:	bf28      	it	cs
 801a71c:	461d      	movcs	r5, r3
 801a71e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801a720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a722:	4293      	cmp	r3, r2
 801a724:	db02      	blt.n	801a72c <_svfprintf_r+0xf64>
 801a726:	f018 0f01 	tst.w	r8, #1
 801a72a:	d00e      	beq.n	801a74a <_svfprintf_r+0xf82>
 801a72c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a72e:	6023      	str	r3, [r4, #0]
 801a730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a732:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a734:	6063      	str	r3, [r4, #4]
 801a736:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a738:	4413      	add	r3, r2
 801a73a:	9328      	str	r3, [sp, #160]	; 0xa0
 801a73c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a73e:	3301      	adds	r3, #1
 801a740:	2b07      	cmp	r3, #7
 801a742:	9327      	str	r3, [sp, #156]	; 0x9c
 801a744:	f300 80cc 	bgt.w	801a8e0 <_svfprintf_r+0x1118>
 801a748:	3408      	adds	r4, #8
 801a74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a74c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801a74e:	1b9e      	subs	r6, r3, r6
 801a750:	445b      	add	r3, fp
 801a752:	1b5b      	subs	r3, r3, r5
 801a754:	429e      	cmp	r6, r3
 801a756:	bfa8      	it	ge
 801a758:	461e      	movge	r6, r3
 801a75a:	2e00      	cmp	r6, #0
 801a75c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a75e:	dd0a      	ble.n	801a776 <_svfprintf_r+0xfae>
 801a760:	4433      	add	r3, r6
 801a762:	9328      	str	r3, [sp, #160]	; 0xa0
 801a764:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a766:	3301      	adds	r3, #1
 801a768:	2b07      	cmp	r3, #7
 801a76a:	e9c4 5600 	strd	r5, r6, [r4]
 801a76e:	9327      	str	r3, [sp, #156]	; 0x9c
 801a770:	f300 80c0 	bgt.w	801a8f4 <_svfprintf_r+0x112c>
 801a774:	3408      	adds	r4, #8
 801a776:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801a778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a77a:	2e00      	cmp	r6, #0
 801a77c:	eba3 0505 	sub.w	r5, r3, r5
 801a780:	bfa8      	it	ge
 801a782:	1bad      	subge	r5, r5, r6
 801a784:	2d00      	cmp	r5, #0
 801a786:	f77f abf5 	ble.w	8019f74 <_svfprintf_r+0x7ac>
 801a78a:	4e68      	ldr	r6, [pc, #416]	; (801a92c <_svfprintf_r+0x1164>)
 801a78c:	2710      	movs	r7, #16
 801a78e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a792:	2d10      	cmp	r5, #16
 801a794:	f103 0301 	add.w	r3, r3, #1
 801a798:	f104 0108 	add.w	r1, r4, #8
 801a79c:	6026      	str	r6, [r4, #0]
 801a79e:	f300 80b3 	bgt.w	801a908 <_svfprintf_r+0x1140>
 801a7a2:	442a      	add	r2, r5
 801a7a4:	6065      	str	r5, [r4, #4]
 801a7a6:	9228      	str	r2, [sp, #160]	; 0xa0
 801a7a8:	e6cf      	b.n	801a54a <_svfprintf_r+0xd82>
 801a7aa:	aa26      	add	r2, sp, #152	; 0x98
 801a7ac:	4651      	mov	r1, sl
 801a7ae:	4648      	mov	r0, r9
 801a7b0:	f003 fda2 	bl	801e2f8 <__ssprint_r>
 801a7b4:	2800      	cmp	r0, #0
 801a7b6:	f040 8173 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a7ba:	ac29      	add	r4, sp, #164	; 0xa4
 801a7bc:	e781      	b.n	801a6c2 <_svfprintf_r+0xefa>
 801a7be:	2010      	movs	r0, #16
 801a7c0:	4402      	add	r2, r0
 801a7c2:	2b07      	cmp	r3, #7
 801a7c4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a7c8:	6060      	str	r0, [r4, #4]
 801a7ca:	dd08      	ble.n	801a7de <_svfprintf_r+0x1016>
 801a7cc:	aa26      	add	r2, sp, #152	; 0x98
 801a7ce:	4651      	mov	r1, sl
 801a7d0:	4648      	mov	r0, r9
 801a7d2:	f003 fd91 	bl	801e2f8 <__ssprint_r>
 801a7d6:	2800      	cmp	r0, #0
 801a7d8:	f040 8162 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a7dc:	a929      	add	r1, sp, #164	; 0xa4
 801a7de:	3f10      	subs	r7, #16
 801a7e0:	460c      	mov	r4, r1
 801a7e2:	e775      	b.n	801a6d0 <_svfprintf_r+0xf08>
 801a7e4:	460c      	mov	r4, r1
 801a7e6:	e78c      	b.n	801a702 <_svfprintf_r+0xf3a>
 801a7e8:	2e00      	cmp	r6, #0
 801a7ea:	d049      	beq.n	801a880 <_svfprintf_r+0x10b8>
 801a7ec:	3e01      	subs	r6, #1
 801a7ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a7f0:	6023      	str	r3, [r4, #0]
 801a7f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a7f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a7f6:	6063      	str	r3, [r4, #4]
 801a7f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a7fa:	4413      	add	r3, r2
 801a7fc:	9328      	str	r3, [sp, #160]	; 0xa0
 801a7fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a800:	3301      	adds	r3, #1
 801a802:	2b07      	cmp	r3, #7
 801a804:	9327      	str	r3, [sp, #156]	; 0x9c
 801a806:	dc42      	bgt.n	801a88e <_svfprintf_r+0x10c6>
 801a808:	3408      	adds	r4, #8
 801a80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a80c:	445b      	add	r3, fp
 801a80e:	1b5a      	subs	r2, r3, r5
 801a810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a812:	781b      	ldrb	r3, [r3, #0]
 801a814:	429a      	cmp	r2, r3
 801a816:	bfa8      	it	ge
 801a818:	461a      	movge	r2, r3
 801a81a:	2a00      	cmp	r2, #0
 801a81c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a81e:	9207      	str	r2, [sp, #28]
 801a820:	dd09      	ble.n	801a836 <_svfprintf_r+0x106e>
 801a822:	4413      	add	r3, r2
 801a824:	9328      	str	r3, [sp, #160]	; 0xa0
 801a826:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a828:	3301      	adds	r3, #1
 801a82a:	2b07      	cmp	r3, #7
 801a82c:	e9c4 5200 	strd	r5, r2, [r4]
 801a830:	9327      	str	r3, [sp, #156]	; 0x9c
 801a832:	dc36      	bgt.n	801a8a2 <_svfprintf_r+0x10da>
 801a834:	3408      	adds	r4, #8
 801a836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a838:	781f      	ldrb	r7, [r3, #0]
 801a83a:	9b07      	ldr	r3, [sp, #28]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	bfa8      	it	ge
 801a840:	1aff      	subge	r7, r7, r3
 801a842:	2f00      	cmp	r7, #0
 801a844:	dd18      	ble.n	801a878 <_svfprintf_r+0x10b0>
 801a846:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801a84a:	4838      	ldr	r0, [pc, #224]	; (801a92c <_svfprintf_r+0x1164>)
 801a84c:	6020      	str	r0, [r4, #0]
 801a84e:	2f10      	cmp	r7, #16
 801a850:	f103 0301 	add.w	r3, r3, #1
 801a854:	f104 0108 	add.w	r1, r4, #8
 801a858:	dc2d      	bgt.n	801a8b6 <_svfprintf_r+0x10ee>
 801a85a:	443a      	add	r2, r7
 801a85c:	2b07      	cmp	r3, #7
 801a85e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a862:	6067      	str	r7, [r4, #4]
 801a864:	dd3a      	ble.n	801a8dc <_svfprintf_r+0x1114>
 801a866:	aa26      	add	r2, sp, #152	; 0x98
 801a868:	4651      	mov	r1, sl
 801a86a:	4648      	mov	r0, r9
 801a86c:	f003 fd44 	bl	801e2f8 <__ssprint_r>
 801a870:	2800      	cmp	r0, #0
 801a872:	f040 8115 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a876:	ac29      	add	r4, sp, #164	; 0xa4
 801a878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a87a:	781b      	ldrb	r3, [r3, #0]
 801a87c:	441d      	add	r5, r3
 801a87e:	e744      	b.n	801a70a <_svfprintf_r+0xf42>
 801a880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a882:	3b01      	subs	r3, #1
 801a884:	930d      	str	r3, [sp, #52]	; 0x34
 801a886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a888:	3b01      	subs	r3, #1
 801a88a:	930c      	str	r3, [sp, #48]	; 0x30
 801a88c:	e7af      	b.n	801a7ee <_svfprintf_r+0x1026>
 801a88e:	aa26      	add	r2, sp, #152	; 0x98
 801a890:	4651      	mov	r1, sl
 801a892:	4648      	mov	r0, r9
 801a894:	f003 fd30 	bl	801e2f8 <__ssprint_r>
 801a898:	2800      	cmp	r0, #0
 801a89a:	f040 8101 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a89e:	ac29      	add	r4, sp, #164	; 0xa4
 801a8a0:	e7b3      	b.n	801a80a <_svfprintf_r+0x1042>
 801a8a2:	aa26      	add	r2, sp, #152	; 0x98
 801a8a4:	4651      	mov	r1, sl
 801a8a6:	4648      	mov	r0, r9
 801a8a8:	f003 fd26 	bl	801e2f8 <__ssprint_r>
 801a8ac:	2800      	cmp	r0, #0
 801a8ae:	f040 80f7 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a8b2:	ac29      	add	r4, sp, #164	; 0xa4
 801a8b4:	e7bf      	b.n	801a836 <_svfprintf_r+0x106e>
 801a8b6:	2010      	movs	r0, #16
 801a8b8:	4402      	add	r2, r0
 801a8ba:	2b07      	cmp	r3, #7
 801a8bc:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a8c0:	6060      	str	r0, [r4, #4]
 801a8c2:	dd08      	ble.n	801a8d6 <_svfprintf_r+0x110e>
 801a8c4:	aa26      	add	r2, sp, #152	; 0x98
 801a8c6:	4651      	mov	r1, sl
 801a8c8:	4648      	mov	r0, r9
 801a8ca:	f003 fd15 	bl	801e2f8 <__ssprint_r>
 801a8ce:	2800      	cmp	r0, #0
 801a8d0:	f040 80e6 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a8d4:	a929      	add	r1, sp, #164	; 0xa4
 801a8d6:	3f10      	subs	r7, #16
 801a8d8:	460c      	mov	r4, r1
 801a8da:	e7b4      	b.n	801a846 <_svfprintf_r+0x107e>
 801a8dc:	460c      	mov	r4, r1
 801a8de:	e7cb      	b.n	801a878 <_svfprintf_r+0x10b0>
 801a8e0:	aa26      	add	r2, sp, #152	; 0x98
 801a8e2:	4651      	mov	r1, sl
 801a8e4:	4648      	mov	r0, r9
 801a8e6:	f003 fd07 	bl	801e2f8 <__ssprint_r>
 801a8ea:	2800      	cmp	r0, #0
 801a8ec:	f040 80d8 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a8f0:	ac29      	add	r4, sp, #164	; 0xa4
 801a8f2:	e72a      	b.n	801a74a <_svfprintf_r+0xf82>
 801a8f4:	aa26      	add	r2, sp, #152	; 0x98
 801a8f6:	4651      	mov	r1, sl
 801a8f8:	4648      	mov	r0, r9
 801a8fa:	f003 fcfd 	bl	801e2f8 <__ssprint_r>
 801a8fe:	2800      	cmp	r0, #0
 801a900:	f040 80ce 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a904:	ac29      	add	r4, sp, #164	; 0xa4
 801a906:	e736      	b.n	801a776 <_svfprintf_r+0xfae>
 801a908:	3210      	adds	r2, #16
 801a90a:	2b07      	cmp	r3, #7
 801a90c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801a910:	6067      	str	r7, [r4, #4]
 801a912:	dd08      	ble.n	801a926 <_svfprintf_r+0x115e>
 801a914:	aa26      	add	r2, sp, #152	; 0x98
 801a916:	4651      	mov	r1, sl
 801a918:	4648      	mov	r0, r9
 801a91a:	f003 fced 	bl	801e2f8 <__ssprint_r>
 801a91e:	2800      	cmp	r0, #0
 801a920:	f040 80be 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a924:	a929      	add	r1, sp, #164	; 0xa4
 801a926:	3d10      	subs	r5, #16
 801a928:	460c      	mov	r4, r1
 801a92a:	e730      	b.n	801a78e <_svfprintf_r+0xfc6>
 801a92c:	080209a9 	.word	0x080209a9
 801a930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a932:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a934:	2a01      	cmp	r2, #1
 801a936:	f107 0701 	add.w	r7, r7, #1
 801a93a:	f103 0301 	add.w	r3, r3, #1
 801a93e:	f104 0508 	add.w	r5, r4, #8
 801a942:	dc02      	bgt.n	801a94a <_svfprintf_r+0x1182>
 801a944:	f018 0f01 	tst.w	r8, #1
 801a948:	d07e      	beq.n	801aa48 <_svfprintf_r+0x1280>
 801a94a:	2201      	movs	r2, #1
 801a94c:	2b07      	cmp	r3, #7
 801a94e:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801a952:	f8c4 b000 	str.w	fp, [r4]
 801a956:	6062      	str	r2, [r4, #4]
 801a958:	dd08      	ble.n	801a96c <_svfprintf_r+0x11a4>
 801a95a:	aa26      	add	r2, sp, #152	; 0x98
 801a95c:	4651      	mov	r1, sl
 801a95e:	4648      	mov	r0, r9
 801a960:	f003 fcca 	bl	801e2f8 <__ssprint_r>
 801a964:	2800      	cmp	r0, #0
 801a966:	f040 809b 	bne.w	801aaa0 <_svfprintf_r+0x12d8>
 801a96a:	ad29      	add	r5, sp, #164	; 0xa4
 801a96c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a96e:	602b      	str	r3, [r5, #0]
 801a970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a972:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a974:	606b      	str	r3, [r5, #4]
 801a976:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a978:	4413      	add	r3, r2
 801a97a:	9328      	str	r3, [sp, #160]	; 0xa0
 801a97c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a97e:	3301      	adds	r3, #1
 801a980:	2b07      	cmp	r3, #7
 801a982:	9327      	str	r3, [sp, #156]	; 0x9c
 801a984:	dc32      	bgt.n	801a9ec <_svfprintf_r+0x1224>
 801a986:	3508      	adds	r5, #8
 801a988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a98a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a98e:	1e5c      	subs	r4, r3, #1
 801a990:	2200      	movs	r2, #0
 801a992:	2300      	movs	r3, #0
 801a994:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
 801a998:	f7ee fa6e 	bl	8008e78 <__aeabi_dcmpeq>
 801a99c:	2800      	cmp	r0, #0
 801a99e:	d12e      	bne.n	801a9fe <_svfprintf_r+0x1236>
 801a9a0:	f10b 0301 	add.w	r3, fp, #1
 801a9a4:	e9c5 3400 	strd	r3, r4, [r5]
 801a9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9aa:	3701      	adds	r7, #1
 801a9ac:	3e01      	subs	r6, #1
 801a9ae:	441e      	add	r6, r3
 801a9b0:	2f07      	cmp	r7, #7
 801a9b2:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
 801a9b6:	dd50      	ble.n	801aa5a <_svfprintf_r+0x1292>
 801a9b8:	aa26      	add	r2, sp, #152	; 0x98
 801a9ba:	4651      	mov	r1, sl
 801a9bc:	4648      	mov	r0, r9
 801a9be:	f003 fc9b 	bl	801e2f8 <__ssprint_r>
 801a9c2:	2800      	cmp	r0, #0
 801a9c4:	d16c      	bne.n	801aaa0 <_svfprintf_r+0x12d8>
 801a9c6:	ad29      	add	r5, sp, #164	; 0xa4
 801a9c8:	ab22      	add	r3, sp, #136	; 0x88
 801a9ca:	602b      	str	r3, [r5, #0]
 801a9cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a9ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a9d0:	606b      	str	r3, [r5, #4]
 801a9d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a9d4:	4413      	add	r3, r2
 801a9d6:	9328      	str	r3, [sp, #160]	; 0xa0
 801a9d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a9da:	3301      	adds	r3, #1
 801a9dc:	2b07      	cmp	r3, #7
 801a9de:	9327      	str	r3, [sp, #156]	; 0x9c
 801a9e0:	f73f adb7 	bgt.w	801a552 <_svfprintf_r+0xd8a>
 801a9e4:	f105 0408 	add.w	r4, r5, #8
 801a9e8:	f7ff bac4 	b.w	8019f74 <_svfprintf_r+0x7ac>
 801a9ec:	aa26      	add	r2, sp, #152	; 0x98
 801a9ee:	4651      	mov	r1, sl
 801a9f0:	4648      	mov	r0, r9
 801a9f2:	f003 fc81 	bl	801e2f8 <__ssprint_r>
 801a9f6:	2800      	cmp	r0, #0
 801a9f8:	d152      	bne.n	801aaa0 <_svfprintf_r+0x12d8>
 801a9fa:	ad29      	add	r5, sp, #164	; 0xa4
 801a9fc:	e7c4      	b.n	801a988 <_svfprintf_r+0x11c0>
 801a9fe:	2c00      	cmp	r4, #0
 801aa00:	dde2      	ble.n	801a9c8 <_svfprintf_r+0x1200>
 801aa02:	4e57      	ldr	r6, [pc, #348]	; (801ab60 <_svfprintf_r+0x1398>)
 801aa04:	2710      	movs	r7, #16
 801aa06:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801aa0a:	2c10      	cmp	r4, #16
 801aa0c:	f103 0301 	add.w	r3, r3, #1
 801aa10:	f105 0108 	add.w	r1, r5, #8
 801aa14:	602e      	str	r6, [r5, #0]
 801aa16:	dc07      	bgt.n	801aa28 <_svfprintf_r+0x1260>
 801aa18:	606c      	str	r4, [r5, #4]
 801aa1a:	2b07      	cmp	r3, #7
 801aa1c:	4414      	add	r4, r2
 801aa1e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 801aa22:	dcc9      	bgt.n	801a9b8 <_svfprintf_r+0x11f0>
 801aa24:	460d      	mov	r5, r1
 801aa26:	e7cf      	b.n	801a9c8 <_svfprintf_r+0x1200>
 801aa28:	3210      	adds	r2, #16
 801aa2a:	2b07      	cmp	r3, #7
 801aa2c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801aa30:	606f      	str	r7, [r5, #4]
 801aa32:	dd06      	ble.n	801aa42 <_svfprintf_r+0x127a>
 801aa34:	aa26      	add	r2, sp, #152	; 0x98
 801aa36:	4651      	mov	r1, sl
 801aa38:	4648      	mov	r0, r9
 801aa3a:	f003 fc5d 	bl	801e2f8 <__ssprint_r>
 801aa3e:	bb78      	cbnz	r0, 801aaa0 <_svfprintf_r+0x12d8>
 801aa40:	a929      	add	r1, sp, #164	; 0xa4
 801aa42:	3c10      	subs	r4, #16
 801aa44:	460d      	mov	r5, r1
 801aa46:	e7de      	b.n	801aa06 <_svfprintf_r+0x123e>
 801aa48:	2201      	movs	r2, #1
 801aa4a:	2b07      	cmp	r3, #7
 801aa4c:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801aa50:	f8c4 b000 	str.w	fp, [r4]
 801aa54:	6062      	str	r2, [r4, #4]
 801aa56:	ddb7      	ble.n	801a9c8 <_svfprintf_r+0x1200>
 801aa58:	e7ae      	b.n	801a9b8 <_svfprintf_r+0x11f0>
 801aa5a:	3508      	adds	r5, #8
 801aa5c:	e7b4      	b.n	801a9c8 <_svfprintf_r+0x1200>
 801aa5e:	460c      	mov	r4, r1
 801aa60:	f7ff ba88 	b.w	8019f74 <_svfprintf_r+0x7ac>
 801aa64:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801aa68:	1a9d      	subs	r5, r3, r2
 801aa6a:	2d00      	cmp	r5, #0
 801aa6c:	f77f aa86 	ble.w	8019f7c <_svfprintf_r+0x7b4>
 801aa70:	4e3c      	ldr	r6, [pc, #240]	; (801ab64 <_svfprintf_r+0x139c>)
 801aa72:	2710      	movs	r7, #16
 801aa74:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801aa78:	2d10      	cmp	r5, #16
 801aa7a:	f103 0301 	add.w	r3, r3, #1
 801aa7e:	6026      	str	r6, [r4, #0]
 801aa80:	dc18      	bgt.n	801aab4 <_svfprintf_r+0x12ec>
 801aa82:	6065      	str	r5, [r4, #4]
 801aa84:	2b07      	cmp	r3, #7
 801aa86:	4415      	add	r5, r2
 801aa88:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801aa8c:	f77f aa76 	ble.w	8019f7c <_svfprintf_r+0x7b4>
 801aa90:	aa26      	add	r2, sp, #152	; 0x98
 801aa92:	4651      	mov	r1, sl
 801aa94:	4648      	mov	r0, r9
 801aa96:	f003 fc2f 	bl	801e2f8 <__ssprint_r>
 801aa9a:	2800      	cmp	r0, #0
 801aa9c:	f43f aa6e 	beq.w	8019f7c <_svfprintf_r+0x7b4>
 801aaa0:	9b08      	ldr	r3, [sp, #32]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	f43f a891 	beq.w	8019bca <_svfprintf_r+0x402>
 801aaa8:	4619      	mov	r1, r3
 801aaaa:	4648      	mov	r0, r9
 801aaac:	f7fe f9e0 	bl	8018e70 <_free_r>
 801aab0:	f7ff b88b 	b.w	8019bca <_svfprintf_r+0x402>
 801aab4:	3210      	adds	r2, #16
 801aab6:	2b07      	cmp	r3, #7
 801aab8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801aabc:	6067      	str	r7, [r4, #4]
 801aabe:	dc02      	bgt.n	801aac6 <_svfprintf_r+0x12fe>
 801aac0:	3408      	adds	r4, #8
 801aac2:	3d10      	subs	r5, #16
 801aac4:	e7d6      	b.n	801aa74 <_svfprintf_r+0x12ac>
 801aac6:	aa26      	add	r2, sp, #152	; 0x98
 801aac8:	4651      	mov	r1, sl
 801aaca:	4648      	mov	r0, r9
 801aacc:	f003 fc14 	bl	801e2f8 <__ssprint_r>
 801aad0:	2800      	cmp	r0, #0
 801aad2:	d1e5      	bne.n	801aaa0 <_svfprintf_r+0x12d8>
 801aad4:	ac29      	add	r4, sp, #164	; 0xa4
 801aad6:	e7f4      	b.n	801aac2 <_svfprintf_r+0x12fa>
 801aad8:	9908      	ldr	r1, [sp, #32]
 801aada:	4648      	mov	r0, r9
 801aadc:	f7fe f9c8 	bl	8018e70 <_free_r>
 801aae0:	f7ff ba64 	b.w	8019fac <_svfprintf_r+0x7e4>
 801aae4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	f43f a86f 	beq.w	8019bca <_svfprintf_r+0x402>
 801aaec:	aa26      	add	r2, sp, #152	; 0x98
 801aaee:	4651      	mov	r1, sl
 801aaf0:	4648      	mov	r0, r9
 801aaf2:	f003 fc01 	bl	801e2f8 <__ssprint_r>
 801aaf6:	f7ff b868 	b.w	8019bca <_svfprintf_r+0x402>
 801aafa:	ea55 0206 	orrs.w	r2, r5, r6
 801aafe:	f8cd 8020 	str.w	r8, [sp, #32]
 801ab02:	f43f ab78 	beq.w	801a1f6 <_svfprintf_r+0xa2e>
 801ab06:	2b01      	cmp	r3, #1
 801ab08:	f43f ac14 	beq.w	801a334 <_svfprintf_r+0xb6c>
 801ab0c:	2b02      	cmp	r3, #2
 801ab0e:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 801ab12:	f43f ac56 	beq.w	801a3c2 <_svfprintf_r+0xbfa>
 801ab16:	f005 0307 	and.w	r3, r5, #7
 801ab1a:	08ed      	lsrs	r5, r5, #3
 801ab1c:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 801ab20:	08f6      	lsrs	r6, r6, #3
 801ab22:	3330      	adds	r3, #48	; 0x30
 801ab24:	ea55 0106 	orrs.w	r1, r5, r6
 801ab28:	465a      	mov	r2, fp
 801ab2a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 801ab2e:	d1f2      	bne.n	801ab16 <_svfprintf_r+0x134e>
 801ab30:	9908      	ldr	r1, [sp, #32]
 801ab32:	07c9      	lsls	r1, r1, #31
 801ab34:	d506      	bpl.n	801ab44 <_svfprintf_r+0x137c>
 801ab36:	2b30      	cmp	r3, #48	; 0x30
 801ab38:	d004      	beq.n	801ab44 <_svfprintf_r+0x137c>
 801ab3a:	2330      	movs	r3, #48	; 0x30
 801ab3c:	f80b 3c01 	strb.w	r3, [fp, #-1]
 801ab40:	f1a2 0b02 	sub.w	fp, r2, #2
 801ab44:	ab52      	add	r3, sp, #328	; 0x148
 801ab46:	eba3 030b 	sub.w	r3, r3, fp
 801ab4a:	9f07      	ldr	r7, [sp, #28]
 801ab4c:	9307      	str	r3, [sp, #28]
 801ab4e:	2300      	movs	r3, #0
 801ab50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ab54:	9308      	str	r3, [sp, #32]
 801ab56:	461e      	mov	r6, r3
 801ab58:	930c      	str	r3, [sp, #48]	; 0x30
 801ab5a:	461d      	mov	r5, r3
 801ab5c:	f7ff b94a 	b.w	8019df4 <_svfprintf_r+0x62c>
 801ab60:	080209a9 	.word	0x080209a9
 801ab64:	08020999 	.word	0x08020999

0801ab68 <_vfprintf_r>:
 801ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab6c:	b0d3      	sub	sp, #332	; 0x14c
 801ab6e:	468a      	mov	sl, r1
 801ab70:	4691      	mov	r9, r2
 801ab72:	461c      	mov	r4, r3
 801ab74:	461d      	mov	r5, r3
 801ab76:	4683      	mov	fp, r0
 801ab78:	f002 f944 	bl	801ce04 <_localeconv_r>
 801ab7c:	6803      	ldr	r3, [r0, #0]
 801ab7e:	9317      	str	r3, [sp, #92]	; 0x5c
 801ab80:	4618      	mov	r0, r3
 801ab82:	f7ed fd4d 	bl	8008620 <strlen>
 801ab86:	900f      	str	r0, [sp, #60]	; 0x3c
 801ab88:	f1bb 0f00 	cmp.w	fp, #0
 801ab8c:	d005      	beq.n	801ab9a <_vfprintf_r+0x32>
 801ab8e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 801ab92:	b913      	cbnz	r3, 801ab9a <_vfprintf_r+0x32>
 801ab94:	4658      	mov	r0, fp
 801ab96:	f7fd fd09 	bl	80185ac <__sinit>
 801ab9a:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801ab9e:	07d8      	lsls	r0, r3, #31
 801aba0:	d407      	bmi.n	801abb2 <_vfprintf_r+0x4a>
 801aba2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801aba6:	0599      	lsls	r1, r3, #22
 801aba8:	d403      	bmi.n	801abb2 <_vfprintf_r+0x4a>
 801abaa:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801abae:	f7fe f8eb 	bl	8018d88 <__retarget_lock_acquire_recursive>
 801abb2:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801abb6:	049a      	lsls	r2, r3, #18
 801abb8:	d409      	bmi.n	801abce <_vfprintf_r+0x66>
 801abba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801abbe:	f8aa 300c 	strh.w	r3, [sl, #12]
 801abc2:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801abc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801abca:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 801abce:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801abd2:	071b      	lsls	r3, r3, #28
 801abd4:	d502      	bpl.n	801abdc <_vfprintf_r+0x74>
 801abd6:	f8da 3010 	ldr.w	r3, [sl, #16]
 801abda:	b9c3      	cbnz	r3, 801ac0e <_vfprintf_r+0xa6>
 801abdc:	4651      	mov	r1, sl
 801abde:	4658      	mov	r0, fp
 801abe0:	f7fd ff66 	bl	8018ab0 <__swsetup_r>
 801abe4:	b198      	cbz	r0, 801ac0e <_vfprintf_r+0xa6>
 801abe6:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801abea:	07df      	lsls	r7, r3, #31
 801abec:	d506      	bpl.n	801abfc <_vfprintf_r+0x94>
 801abee:	f04f 33ff 	mov.w	r3, #4294967295
 801abf2:	9312      	str	r3, [sp, #72]	; 0x48
 801abf4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801abf6:	b053      	add	sp, #332	; 0x14c
 801abf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abfc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801ac00:	059e      	lsls	r6, r3, #22
 801ac02:	d4f4      	bmi.n	801abee <_vfprintf_r+0x86>
 801ac04:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801ac08:	f7fe f8bf 	bl	8018d8a <__retarget_lock_release_recursive>
 801ac0c:	e7ef      	b.n	801abee <_vfprintf_r+0x86>
 801ac0e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801ac12:	f003 021a 	and.w	r2, r3, #26
 801ac16:	2a0a      	cmp	r2, #10
 801ac18:	d116      	bne.n	801ac48 <_vfprintf_r+0xe0>
 801ac1a:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 801ac1e:	2a00      	cmp	r2, #0
 801ac20:	db12      	blt.n	801ac48 <_vfprintf_r+0xe0>
 801ac22:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 801ac26:	07d5      	lsls	r5, r2, #31
 801ac28:	d405      	bmi.n	801ac36 <_vfprintf_r+0xce>
 801ac2a:	0598      	lsls	r0, r3, #22
 801ac2c:	d403      	bmi.n	801ac36 <_vfprintf_r+0xce>
 801ac2e:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801ac32:	f7fe f8aa 	bl	8018d8a <__retarget_lock_release_recursive>
 801ac36:	4623      	mov	r3, r4
 801ac38:	464a      	mov	r2, r9
 801ac3a:	4651      	mov	r1, sl
 801ac3c:	4658      	mov	r0, fp
 801ac3e:	b053      	add	sp, #332	; 0x14c
 801ac40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac44:	f001 b9b0 	b.w	801bfa8 <__sbprintf>
 801ac48:	2300      	movs	r3, #0
 801ac4a:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 801ac4e:	9309      	str	r3, [sp, #36]	; 0x24
 801ac50:	2200      	movs	r2, #0
 801ac52:	2300      	movs	r3, #0
 801ac54:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801ac58:	2300      	movs	r3, #0
 801ac5a:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 801ac5e:	ac29      	add	r4, sp, #164	; 0xa4
 801ac60:	9426      	str	r4, [sp, #152]	; 0x98
 801ac62:	930d      	str	r3, [sp, #52]	; 0x34
 801ac64:	9315      	str	r3, [sp, #84]	; 0x54
 801ac66:	9318      	str	r3, [sp, #96]	; 0x60
 801ac68:	9312      	str	r3, [sp, #72]	; 0x48
 801ac6a:	464b      	mov	r3, r9
 801ac6c:	461e      	mov	r6, r3
 801ac6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac72:	b10a      	cbz	r2, 801ac78 <_vfprintf_r+0x110>
 801ac74:	2a25      	cmp	r2, #37	; 0x25
 801ac76:	d1f9      	bne.n	801ac6c <_vfprintf_r+0x104>
 801ac78:	ebb6 0709 	subs.w	r7, r6, r9
 801ac7c:	d00d      	beq.n	801ac9a <_vfprintf_r+0x132>
 801ac7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ac80:	443b      	add	r3, r7
 801ac82:	9328      	str	r3, [sp, #160]	; 0xa0
 801ac84:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ac86:	3301      	adds	r3, #1
 801ac88:	2b07      	cmp	r3, #7
 801ac8a:	e9c4 9700 	strd	r9, r7, [r4]
 801ac8e:	9327      	str	r3, [sp, #156]	; 0x9c
 801ac90:	dc79      	bgt.n	801ad86 <_vfprintf_r+0x21e>
 801ac92:	3408      	adds	r4, #8
 801ac94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ac96:	443b      	add	r3, r7
 801ac98:	9312      	str	r3, [sp, #72]	; 0x48
 801ac9a:	7833      	ldrb	r3, [r6, #0]
 801ac9c:	2b00      	cmp	r3, #0
 801ac9e:	f001 813d 	beq.w	801bf1c <_vfprintf_r+0x13b4>
 801aca2:	2300      	movs	r3, #0
 801aca4:	f04f 32ff 	mov.w	r2, #4294967295
 801aca8:	3601      	adds	r6, #1
 801acaa:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801acae:	9207      	str	r2, [sp, #28]
 801acb0:	9313      	str	r3, [sp, #76]	; 0x4c
 801acb2:	4698      	mov	r8, r3
 801acb4:	270a      	movs	r7, #10
 801acb6:	212b      	movs	r1, #43	; 0x2b
 801acb8:	4633      	mov	r3, r6
 801acba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801acbe:	920b      	str	r2, [sp, #44]	; 0x2c
 801acc0:	930e      	str	r3, [sp, #56]	; 0x38
 801acc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801acc4:	3b20      	subs	r3, #32
 801acc6:	2b5a      	cmp	r3, #90	; 0x5a
 801acc8:	f200 85b2 	bhi.w	801b830 <_vfprintf_r+0xcc8>
 801accc:	e8df f013 	tbh	[pc, r3, lsl #1]
 801acd0:	05b0007e 	.word	0x05b0007e
 801acd4:	008605b0 	.word	0x008605b0
 801acd8:	05b005b0 	.word	0x05b005b0
 801acdc:	006505b0 	.word	0x006505b0
 801ace0:	05b005b0 	.word	0x05b005b0
 801ace4:	00930089 	.word	0x00930089
 801ace8:	009005b0 	.word	0x009005b0
 801acec:	05b00096 	.word	0x05b00096
 801acf0:	00b500b2 	.word	0x00b500b2
 801acf4:	00b500b5 	.word	0x00b500b5
 801acf8:	00b500b5 	.word	0x00b500b5
 801acfc:	00b500b5 	.word	0x00b500b5
 801ad00:	00b500b5 	.word	0x00b500b5
 801ad04:	05b005b0 	.word	0x05b005b0
 801ad08:	05b005b0 	.word	0x05b005b0
 801ad0c:	05b005b0 	.word	0x05b005b0
 801ad10:	012505b0 	.word	0x012505b0
 801ad14:	00e205b0 	.word	0x00e205b0
 801ad18:	012500f5 	.word	0x012500f5
 801ad1c:	01250125 	.word	0x01250125
 801ad20:	05b005b0 	.word	0x05b005b0
 801ad24:	05b005b0 	.word	0x05b005b0
 801ad28:	05b000c5 	.word	0x05b000c5
 801ad2c:	048f05b0 	.word	0x048f05b0
 801ad30:	05b005b0 	.word	0x05b005b0
 801ad34:	04d905b0 	.word	0x04d905b0
 801ad38:	04fa05b0 	.word	0x04fa05b0
 801ad3c:	05b005b0 	.word	0x05b005b0
 801ad40:	05b0051c 	.word	0x05b0051c
 801ad44:	05b005b0 	.word	0x05b005b0
 801ad48:	05b005b0 	.word	0x05b005b0
 801ad4c:	05b005b0 	.word	0x05b005b0
 801ad50:	012505b0 	.word	0x012505b0
 801ad54:	00e205b0 	.word	0x00e205b0
 801ad58:	012500f7 	.word	0x012500f7
 801ad5c:	01250125 	.word	0x01250125
 801ad60:	00f700c8 	.word	0x00f700c8
 801ad64:	05b000dc 	.word	0x05b000dc
 801ad68:	05b000d5 	.word	0x05b000d5
 801ad6c:	0491046a 	.word	0x0491046a
 801ad70:	00dc04c8 	.word	0x00dc04c8
 801ad74:	04d905b0 	.word	0x04d905b0
 801ad78:	04fc007c 	.word	0x04fc007c
 801ad7c:	05b005b0 	.word	0x05b005b0
 801ad80:	05b0053b 	.word	0x05b0053b
 801ad84:	007c      	.short	0x007c
 801ad86:	aa26      	add	r2, sp, #152	; 0x98
 801ad88:	4651      	mov	r1, sl
 801ad8a:	4658      	mov	r0, fp
 801ad8c:	f001 f94c 	bl	801c028 <__sprint_r>
 801ad90:	2800      	cmp	r0, #0
 801ad92:	f040 812e 	bne.w	801aff2 <_vfprintf_r+0x48a>
 801ad96:	ac29      	add	r4, sp, #164	; 0xa4
 801ad98:	e77c      	b.n	801ac94 <_vfprintf_r+0x12c>
 801ad9a:	4658      	mov	r0, fp
 801ad9c:	f002 f832 	bl	801ce04 <_localeconv_r>
 801ada0:	6843      	ldr	r3, [r0, #4]
 801ada2:	9318      	str	r3, [sp, #96]	; 0x60
 801ada4:	4618      	mov	r0, r3
 801ada6:	f7ed fc3b 	bl	8008620 <strlen>
 801adaa:	9015      	str	r0, [sp, #84]	; 0x54
 801adac:	4658      	mov	r0, fp
 801adae:	f002 f829 	bl	801ce04 <_localeconv_r>
 801adb2:	6883      	ldr	r3, [r0, #8]
 801adb4:	930d      	str	r3, [sp, #52]	; 0x34
 801adb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801adb8:	212b      	movs	r1, #43	; 0x2b
 801adba:	b12b      	cbz	r3, 801adc8 <_vfprintf_r+0x260>
 801adbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801adbe:	b11b      	cbz	r3, 801adc8 <_vfprintf_r+0x260>
 801adc0:	781b      	ldrb	r3, [r3, #0]
 801adc2:	b10b      	cbz	r3, 801adc8 <_vfprintf_r+0x260>
 801adc4:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801adc8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801adca:	e775      	b.n	801acb8 <_vfprintf_r+0x150>
 801adcc:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801add0:	2b00      	cmp	r3, #0
 801add2:	d1f9      	bne.n	801adc8 <_vfprintf_r+0x260>
 801add4:	2320      	movs	r3, #32
 801add6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801adda:	e7f5      	b.n	801adc8 <_vfprintf_r+0x260>
 801addc:	f048 0801 	orr.w	r8, r8, #1
 801ade0:	e7f2      	b.n	801adc8 <_vfprintf_r+0x260>
 801ade2:	f855 3b04 	ldr.w	r3, [r5], #4
 801ade6:	9313      	str	r3, [sp, #76]	; 0x4c
 801ade8:	2b00      	cmp	r3, #0
 801adea:	daed      	bge.n	801adc8 <_vfprintf_r+0x260>
 801adec:	425b      	negs	r3, r3
 801adee:	9313      	str	r3, [sp, #76]	; 0x4c
 801adf0:	f048 0804 	orr.w	r8, r8, #4
 801adf4:	e7e8      	b.n	801adc8 <_vfprintf_r+0x260>
 801adf6:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 801adfa:	e7e5      	b.n	801adc8 <_vfprintf_r+0x260>
 801adfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801adfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae02:	920b      	str	r2, [sp, #44]	; 0x2c
 801ae04:	2a2a      	cmp	r2, #42	; 0x2a
 801ae06:	d112      	bne.n	801ae2e <_vfprintf_r+0x2c6>
 801ae08:	f855 2b04 	ldr.w	r2, [r5], #4
 801ae0c:	930e      	str	r3, [sp, #56]	; 0x38
 801ae0e:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801ae12:	9207      	str	r2, [sp, #28]
 801ae14:	e7d8      	b.n	801adc8 <_vfprintf_r+0x260>
 801ae16:	9807      	ldr	r0, [sp, #28]
 801ae18:	fb07 2200 	mla	r2, r7, r0, r2
 801ae1c:	9207      	str	r2, [sp, #28]
 801ae1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae22:	920b      	str	r2, [sp, #44]	; 0x2c
 801ae24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ae26:	3a30      	subs	r2, #48	; 0x30
 801ae28:	2a09      	cmp	r2, #9
 801ae2a:	d9f4      	bls.n	801ae16 <_vfprintf_r+0x2ae>
 801ae2c:	e748      	b.n	801acc0 <_vfprintf_r+0x158>
 801ae2e:	2200      	movs	r2, #0
 801ae30:	9207      	str	r2, [sp, #28]
 801ae32:	e7f7      	b.n	801ae24 <_vfprintf_r+0x2bc>
 801ae34:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 801ae38:	e7c6      	b.n	801adc8 <_vfprintf_r+0x260>
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae3e:	9213      	str	r2, [sp, #76]	; 0x4c
 801ae40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ae42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ae44:	3a30      	subs	r2, #48	; 0x30
 801ae46:	fb07 2200 	mla	r2, r7, r0, r2
 801ae4a:	9213      	str	r2, [sp, #76]	; 0x4c
 801ae4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae50:	920b      	str	r2, [sp, #44]	; 0x2c
 801ae52:	3a30      	subs	r2, #48	; 0x30
 801ae54:	2a09      	cmp	r2, #9
 801ae56:	d9f3      	bls.n	801ae40 <_vfprintf_r+0x2d8>
 801ae58:	e732      	b.n	801acc0 <_vfprintf_r+0x158>
 801ae5a:	f048 0808 	orr.w	r8, r8, #8
 801ae5e:	e7b3      	b.n	801adc8 <_vfprintf_r+0x260>
 801ae60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae62:	781b      	ldrb	r3, [r3, #0]
 801ae64:	2b68      	cmp	r3, #104	; 0x68
 801ae66:	bf01      	itttt	eq
 801ae68:	9b0e      	ldreq	r3, [sp, #56]	; 0x38
 801ae6a:	3301      	addeq	r3, #1
 801ae6c:	930e      	streq	r3, [sp, #56]	; 0x38
 801ae6e:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 801ae72:	bf18      	it	ne
 801ae74:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 801ae78:	e7a6      	b.n	801adc8 <_vfprintf_r+0x260>
 801ae7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae7c:	781b      	ldrb	r3, [r3, #0]
 801ae7e:	2b6c      	cmp	r3, #108	; 0x6c
 801ae80:	d105      	bne.n	801ae8e <_vfprintf_r+0x326>
 801ae82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae84:	3301      	adds	r3, #1
 801ae86:	930e      	str	r3, [sp, #56]	; 0x38
 801ae88:	f048 0820 	orr.w	r8, r8, #32
 801ae8c:	e79c      	b.n	801adc8 <_vfprintf_r+0x260>
 801ae8e:	f048 0810 	orr.w	r8, r8, #16
 801ae92:	e799      	b.n	801adc8 <_vfprintf_r+0x260>
 801ae94:	462a      	mov	r2, r5
 801ae96:	f852 3b04 	ldr.w	r3, [r2], #4
 801ae9a:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801ae9e:	2300      	movs	r3, #0
 801aea0:	920a      	str	r2, [sp, #40]	; 0x28
 801aea2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801aea6:	2700      	movs	r7, #0
 801aea8:	9308      	str	r3, [sp, #32]
 801aeaa:	2301      	movs	r3, #1
 801aeac:	9307      	str	r3, [sp, #28]
 801aeae:	463e      	mov	r6, r7
 801aeb0:	970c      	str	r7, [sp, #48]	; 0x30
 801aeb2:	463d      	mov	r5, r7
 801aeb4:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 801aeb8:	e1ba      	b.n	801b230 <_vfprintf_r+0x6c8>
 801aeba:	f048 0810 	orr.w	r8, r8, #16
 801aebe:	f018 0f20 	tst.w	r8, #32
 801aec2:	d012      	beq.n	801aeea <_vfprintf_r+0x382>
 801aec4:	3507      	adds	r5, #7
 801aec6:	f025 0307 	bic.w	r3, r5, #7
 801aeca:	461a      	mov	r2, r3
 801aecc:	685e      	ldr	r6, [r3, #4]
 801aece:	f852 5b08 	ldr.w	r5, [r2], #8
 801aed2:	920a      	str	r2, [sp, #40]	; 0x28
 801aed4:	2e00      	cmp	r6, #0
 801aed6:	da06      	bge.n	801aee6 <_vfprintf_r+0x37e>
 801aed8:	426d      	negs	r5, r5
 801aeda:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801aede:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 801aee2:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801aee6:	2301      	movs	r3, #1
 801aee8:	e394      	b.n	801b614 <_vfprintf_r+0xaac>
 801aeea:	462b      	mov	r3, r5
 801aeec:	f018 0f10 	tst.w	r8, #16
 801aef0:	f853 6b04 	ldr.w	r6, [r3], #4
 801aef4:	930a      	str	r3, [sp, #40]	; 0x28
 801aef6:	d002      	beq.n	801aefe <_vfprintf_r+0x396>
 801aef8:	4635      	mov	r5, r6
 801aefa:	17f6      	asrs	r6, r6, #31
 801aefc:	e7ea      	b.n	801aed4 <_vfprintf_r+0x36c>
 801aefe:	f018 0f40 	tst.w	r8, #64	; 0x40
 801af02:	d003      	beq.n	801af0c <_vfprintf_r+0x3a4>
 801af04:	b235      	sxth	r5, r6
 801af06:	f346 36c0 	sbfx	r6, r6, #15, #1
 801af0a:	e7e3      	b.n	801aed4 <_vfprintf_r+0x36c>
 801af0c:	f418 7f00 	tst.w	r8, #512	; 0x200
 801af10:	d0f2      	beq.n	801aef8 <_vfprintf_r+0x390>
 801af12:	b275      	sxtb	r5, r6
 801af14:	f346 16c0 	sbfx	r6, r6, #7, #1
 801af18:	e7dc      	b.n	801aed4 <_vfprintf_r+0x36c>
 801af1a:	3507      	adds	r5, #7
 801af1c:	f025 0307 	bic.w	r3, r5, #7
 801af20:	4619      	mov	r1, r3
 801af22:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801af26:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801af2a:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 801af2e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801af32:	910a      	str	r1, [sp, #40]	; 0x28
 801af34:	4b40      	ldr	r3, [pc, #256]	; (801b038 <_vfprintf_r+0x4d0>)
 801af36:	f04f 32ff 	mov.w	r2, #4294967295
 801af3a:	4630      	mov	r0, r6
 801af3c:	4629      	mov	r1, r5
 801af3e:	f7ed ffcd 	bl	8008edc <__aeabi_dcmpun>
 801af42:	bb18      	cbnz	r0, 801af8c <_vfprintf_r+0x424>
 801af44:	4b3c      	ldr	r3, [pc, #240]	; (801b038 <_vfprintf_r+0x4d0>)
 801af46:	f04f 32ff 	mov.w	r2, #4294967295
 801af4a:	4630      	mov	r0, r6
 801af4c:	4629      	mov	r1, r5
 801af4e:	f7ed ffa7 	bl	8008ea0 <__aeabi_dcmple>
 801af52:	b9d8      	cbnz	r0, 801af8c <_vfprintf_r+0x424>
 801af54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801af58:	2200      	movs	r2, #0
 801af5a:	2300      	movs	r3, #0
 801af5c:	f7ed ff96 	bl	8008e8c <__aeabi_dcmplt>
 801af60:	b110      	cbz	r0, 801af68 <_vfprintf_r+0x400>
 801af62:	232d      	movs	r3, #45	; 0x2d
 801af64:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801af68:	4a34      	ldr	r2, [pc, #208]	; (801b03c <_vfprintf_r+0x4d4>)
 801af6a:	4b35      	ldr	r3, [pc, #212]	; (801b040 <_vfprintf_r+0x4d8>)
 801af6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801af6e:	2947      	cmp	r1, #71	; 0x47
 801af70:	bfd4      	ite	le
 801af72:	4691      	movle	r9, r2
 801af74:	4699      	movgt	r9, r3
 801af76:	2303      	movs	r3, #3
 801af78:	2100      	movs	r1, #0
 801af7a:	e9cd 3107 	strd	r3, r1, [sp, #28]
 801af7e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 801af82:	2700      	movs	r7, #0
 801af84:	463e      	mov	r6, r7
 801af86:	463b      	mov	r3, r7
 801af88:	f001 b806 	b.w	801bf98 <_vfprintf_r+0x1430>
 801af8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801af90:	4610      	mov	r0, r2
 801af92:	4619      	mov	r1, r3
 801af94:	f7ed ffa2 	bl	8008edc <__aeabi_dcmpun>
 801af98:	b140      	cbz	r0, 801afac <_vfprintf_r+0x444>
 801af9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801af9c:	4a29      	ldr	r2, [pc, #164]	; (801b044 <_vfprintf_r+0x4dc>)
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	bfbc      	itt	lt
 801afa2:	232d      	movlt	r3, #45	; 0x2d
 801afa4:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 801afa8:	4b27      	ldr	r3, [pc, #156]	; (801b048 <_vfprintf_r+0x4e0>)
 801afaa:	e7df      	b.n	801af6c <_vfprintf_r+0x404>
 801afac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801afae:	f023 0320 	bic.w	r3, r3, #32
 801afb2:	2b41      	cmp	r3, #65	; 0x41
 801afb4:	930c      	str	r3, [sp, #48]	; 0x30
 801afb6:	d12e      	bne.n	801b016 <_vfprintf_r+0x4ae>
 801afb8:	2330      	movs	r3, #48	; 0x30
 801afba:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801afbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801afc0:	2b61      	cmp	r3, #97	; 0x61
 801afc2:	bf0c      	ite	eq
 801afc4:	2378      	moveq	r3, #120	; 0x78
 801afc6:	2358      	movne	r3, #88	; 0x58
 801afc8:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801afcc:	9b07      	ldr	r3, [sp, #28]
 801afce:	2b63      	cmp	r3, #99	; 0x63
 801afd0:	f048 0802 	orr.w	r8, r8, #2
 801afd4:	dd3a      	ble.n	801b04c <_vfprintf_r+0x4e4>
 801afd6:	1c59      	adds	r1, r3, #1
 801afd8:	4658      	mov	r0, fp
 801afda:	f7fe f809 	bl	8018ff0 <_malloc_r>
 801afde:	4681      	mov	r9, r0
 801afe0:	2800      	cmp	r0, #0
 801afe2:	f040 8203 	bne.w	801b3ec <_vfprintf_r+0x884>
 801afe6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801afea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801afee:	f8aa 300c 	strh.w	r3, [sl, #12]
 801aff2:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 801aff6:	07d9      	lsls	r1, r3, #31
 801aff8:	d407      	bmi.n	801b00a <_vfprintf_r+0x4a2>
 801affa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801affe:	059a      	lsls	r2, r3, #22
 801b000:	d403      	bmi.n	801b00a <_vfprintf_r+0x4a2>
 801b002:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 801b006:	f7fd fec0 	bl	8018d8a <__retarget_lock_release_recursive>
 801b00a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801b00e:	065b      	lsls	r3, r3, #25
 801b010:	f57f adf0 	bpl.w	801abf4 <_vfprintf_r+0x8c>
 801b014:	e5eb      	b.n	801abee <_vfprintf_r+0x86>
 801b016:	9b07      	ldr	r3, [sp, #28]
 801b018:	3301      	adds	r3, #1
 801b01a:	f000 81e9 	beq.w	801b3f0 <_vfprintf_r+0x888>
 801b01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b020:	2b47      	cmp	r3, #71	; 0x47
 801b022:	f040 81e8 	bne.w	801b3f6 <_vfprintf_r+0x88e>
 801b026:	9b07      	ldr	r3, [sp, #28]
 801b028:	2b00      	cmp	r3, #0
 801b02a:	f040 81e4 	bne.w	801b3f6 <_vfprintf_r+0x88e>
 801b02e:	9308      	str	r3, [sp, #32]
 801b030:	2301      	movs	r3, #1
 801b032:	9307      	str	r3, [sp, #28]
 801b034:	e00d      	b.n	801b052 <_vfprintf_r+0x4ea>
 801b036:	bf00      	nop
 801b038:	7fefffff 	.word	0x7fefffff
 801b03c:	08020965 	.word	0x08020965
 801b040:	08020969 	.word	0x08020969
 801b044:	0802096d 	.word	0x0802096d
 801b048:	08020971 	.word	0x08020971
 801b04c:	9008      	str	r0, [sp, #32]
 801b04e:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 801b052:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 801b056:	9314      	str	r3, [sp, #80]	; 0x50
 801b058:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 801b05c:	1e1d      	subs	r5, r3, #0
 801b05e:	bfb6      	itet	lt
 801b060:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 801b064:	2300      	movge	r3, #0
 801b066:	232d      	movlt	r3, #45	; 0x2d
 801b068:	931c      	str	r3, [sp, #112]	; 0x70
 801b06a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b06c:	2b41      	cmp	r3, #65	; 0x41
 801b06e:	f040 81da 	bne.w	801b426 <_vfprintf_r+0x8be>
 801b072:	aa20      	add	r2, sp, #128	; 0x80
 801b074:	4638      	mov	r0, r7
 801b076:	4629      	mov	r1, r5
 801b078:	f001 ff1a 	bl	801ceb0 <frexp>
 801b07c:	2200      	movs	r2, #0
 801b07e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801b082:	f7ed fc91 	bl	80089a8 <__aeabi_dmul>
 801b086:	2200      	movs	r2, #0
 801b088:	2300      	movs	r3, #0
 801b08a:	4606      	mov	r6, r0
 801b08c:	460f      	mov	r7, r1
 801b08e:	f7ed fef3 	bl	8008e78 <__aeabi_dcmpeq>
 801b092:	b108      	cbz	r0, 801b098 <_vfprintf_r+0x530>
 801b094:	2301      	movs	r3, #1
 801b096:	9320      	str	r3, [sp, #128]	; 0x80
 801b098:	4bad      	ldr	r3, [pc, #692]	; (801b350 <_vfprintf_r+0x7e8>)
 801b09a:	4aae      	ldr	r2, [pc, #696]	; (801b354 <_vfprintf_r+0x7ec>)
 801b09c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b09e:	2961      	cmp	r1, #97	; 0x61
 801b0a0:	bf18      	it	ne
 801b0a2:	461a      	movne	r2, r3
 801b0a4:	9b07      	ldr	r3, [sp, #28]
 801b0a6:	921b      	str	r2, [sp, #108]	; 0x6c
 801b0a8:	3b01      	subs	r3, #1
 801b0aa:	9309      	str	r3, [sp, #36]	; 0x24
 801b0ac:	464d      	mov	r5, r9
 801b0ae:	4baa      	ldr	r3, [pc, #680]	; (801b358 <_vfprintf_r+0x7f0>)
 801b0b0:	2200      	movs	r2, #0
 801b0b2:	4630      	mov	r0, r6
 801b0b4:	4639      	mov	r1, r7
 801b0b6:	f7ed fc77 	bl	80089a8 <__aeabi_dmul>
 801b0ba:	460f      	mov	r7, r1
 801b0bc:	4606      	mov	r6, r0
 801b0be:	f7ed ff23 	bl	8008f08 <__aeabi_d2iz>
 801b0c2:	901d      	str	r0, [sp, #116]	; 0x74
 801b0c4:	f7ed fc06 	bl	80088d4 <__aeabi_i2d>
 801b0c8:	4602      	mov	r2, r0
 801b0ca:	460b      	mov	r3, r1
 801b0cc:	4630      	mov	r0, r6
 801b0ce:	4639      	mov	r1, r7
 801b0d0:	f7ed fab2 	bl	8008638 <__aeabi_dsub>
 801b0d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b0d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b0d8:	5c9b      	ldrb	r3, [r3, r2]
 801b0da:	f805 3b01 	strb.w	r3, [r5], #1
 801b0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0e0:	9316      	str	r3, [sp, #88]	; 0x58
 801b0e2:	1c5a      	adds	r2, r3, #1
 801b0e4:	4606      	mov	r6, r0
 801b0e6:	460f      	mov	r7, r1
 801b0e8:	d007      	beq.n	801b0fa <_vfprintf_r+0x592>
 801b0ea:	3b01      	subs	r3, #1
 801b0ec:	9309      	str	r3, [sp, #36]	; 0x24
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	2300      	movs	r3, #0
 801b0f2:	f7ed fec1 	bl	8008e78 <__aeabi_dcmpeq>
 801b0f6:	2800      	cmp	r0, #0
 801b0f8:	d0d9      	beq.n	801b0ae <_vfprintf_r+0x546>
 801b0fa:	4b98      	ldr	r3, [pc, #608]	; (801b35c <_vfprintf_r+0x7f4>)
 801b0fc:	2200      	movs	r2, #0
 801b0fe:	4630      	mov	r0, r6
 801b100:	4639      	mov	r1, r7
 801b102:	f7ed fee1 	bl	8008ec8 <__aeabi_dcmpgt>
 801b106:	b960      	cbnz	r0, 801b122 <_vfprintf_r+0x5ba>
 801b108:	4b94      	ldr	r3, [pc, #592]	; (801b35c <_vfprintf_r+0x7f4>)
 801b10a:	2200      	movs	r2, #0
 801b10c:	4630      	mov	r0, r6
 801b10e:	4639      	mov	r1, r7
 801b110:	f7ed feb2 	bl	8008e78 <__aeabi_dcmpeq>
 801b114:	2800      	cmp	r0, #0
 801b116:	f000 8181 	beq.w	801b41c <_vfprintf_r+0x8b4>
 801b11a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b11c:	07da      	lsls	r2, r3, #31
 801b11e:	f140 817d 	bpl.w	801b41c <_vfprintf_r+0x8b4>
 801b122:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b124:	9524      	str	r5, [sp, #144]	; 0x90
 801b126:	7bd9      	ldrb	r1, [r3, #15]
 801b128:	2030      	movs	r0, #48	; 0x30
 801b12a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801b12c:	1e53      	subs	r3, r2, #1
 801b12e:	9324      	str	r3, [sp, #144]	; 0x90
 801b130:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801b134:	428b      	cmp	r3, r1
 801b136:	f000 8160 	beq.w	801b3fa <_vfprintf_r+0x892>
 801b13a:	2b39      	cmp	r3, #57	; 0x39
 801b13c:	bf0b      	itete	eq
 801b13e:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 801b140:	3301      	addne	r3, #1
 801b142:	7a9b      	ldrbeq	r3, [r3, #10]
 801b144:	b2db      	uxtbne	r3, r3
 801b146:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b14a:	eba5 0309 	sub.w	r3, r5, r9
 801b14e:	9309      	str	r3, [sp, #36]	; 0x24
 801b150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b152:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801b154:	2b47      	cmp	r3, #71	; 0x47
 801b156:	f040 81b5 	bne.w	801b4c4 <_vfprintf_r+0x95c>
 801b15a:	1ceb      	adds	r3, r5, #3
 801b15c:	db03      	blt.n	801b166 <_vfprintf_r+0x5fe>
 801b15e:	9b07      	ldr	r3, [sp, #28]
 801b160:	42ab      	cmp	r3, r5
 801b162:	f280 81d5 	bge.w	801b510 <_vfprintf_r+0x9a8>
 801b166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b168:	3b02      	subs	r3, #2
 801b16a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b16c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b16e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801b172:	f021 0120 	bic.w	r1, r1, #32
 801b176:	2941      	cmp	r1, #65	; 0x41
 801b178:	bf08      	it	eq
 801b17a:	320f      	addeq	r2, #15
 801b17c:	f105 33ff 	add.w	r3, r5, #4294967295
 801b180:	bf06      	itte	eq
 801b182:	b2d2      	uxtbeq	r2, r2
 801b184:	2101      	moveq	r1, #1
 801b186:	2100      	movne	r1, #0
 801b188:	2b00      	cmp	r3, #0
 801b18a:	9320      	str	r3, [sp, #128]	; 0x80
 801b18c:	bfb8      	it	lt
 801b18e:	f1c5 0301 	rsblt	r3, r5, #1
 801b192:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 801b196:	bfb4      	ite	lt
 801b198:	222d      	movlt	r2, #45	; 0x2d
 801b19a:	222b      	movge	r2, #43	; 0x2b
 801b19c:	2b09      	cmp	r3, #9
 801b19e:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 801b1a2:	f340 81a8 	ble.w	801b4f6 <_vfprintf_r+0x98e>
 801b1a6:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 801b1aa:	260a      	movs	r6, #10
 801b1ac:	4602      	mov	r2, r0
 801b1ae:	fb93 f5f6 	sdiv	r5, r3, r6
 801b1b2:	fb06 3115 	mls	r1, r6, r5, r3
 801b1b6:	3130      	adds	r1, #48	; 0x30
 801b1b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b1bc:	4619      	mov	r1, r3
 801b1be:	2963      	cmp	r1, #99	; 0x63
 801b1c0:	f100 30ff 	add.w	r0, r0, #4294967295
 801b1c4:	462b      	mov	r3, r5
 801b1c6:	dcf1      	bgt.n	801b1ac <_vfprintf_r+0x644>
 801b1c8:	3330      	adds	r3, #48	; 0x30
 801b1ca:	1e91      	subs	r1, r2, #2
 801b1cc:	f800 3c01 	strb.w	r3, [r0, #-1]
 801b1d0:	f10d 0589 	add.w	r5, sp, #137	; 0x89
 801b1d4:	460b      	mov	r3, r1
 801b1d6:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 801b1da:	4283      	cmp	r3, r0
 801b1dc:	f0c0 8186 	bcc.w	801b4ec <_vfprintf_r+0x984>
 801b1e0:	f10d 0399 	add.w	r3, sp, #153	; 0x99
 801b1e4:	1a9b      	subs	r3, r3, r2
 801b1e6:	4281      	cmp	r1, r0
 801b1e8:	bf88      	it	hi
 801b1ea:	2300      	movhi	r3, #0
 801b1ec:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801b1f0:	441a      	add	r2, r3
 801b1f2:	ab22      	add	r3, sp, #136	; 0x88
 801b1f4:	1ad3      	subs	r3, r2, r3
 801b1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1f8:	9319      	str	r3, [sp, #100]	; 0x64
 801b1fa:	2a01      	cmp	r2, #1
 801b1fc:	4413      	add	r3, r2
 801b1fe:	9307      	str	r3, [sp, #28]
 801b200:	dc02      	bgt.n	801b208 <_vfprintf_r+0x6a0>
 801b202:	f018 0f01 	tst.w	r8, #1
 801b206:	d003      	beq.n	801b210 <_vfprintf_r+0x6a8>
 801b208:	9b07      	ldr	r3, [sp, #28]
 801b20a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b20c:	4413      	add	r3, r2
 801b20e:	9307      	str	r3, [sp, #28]
 801b210:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 801b214:	2600      	movs	r6, #0
 801b216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b21a:	9314      	str	r3, [sp, #80]	; 0x50
 801b21c:	960c      	str	r6, [sp, #48]	; 0x30
 801b21e:	4635      	mov	r5, r6
 801b220:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b222:	b113      	cbz	r3, 801b22a <_vfprintf_r+0x6c2>
 801b224:	232d      	movs	r3, #45	; 0x2d
 801b226:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801b22a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b22e:	2700      	movs	r7, #0
 801b230:	9b07      	ldr	r3, [sp, #28]
 801b232:	42bb      	cmp	r3, r7
 801b234:	bfb8      	it	lt
 801b236:	463b      	movlt	r3, r7
 801b238:	9314      	str	r3, [sp, #80]	; 0x50
 801b23a:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 801b23e:	b113      	cbz	r3, 801b246 <_vfprintf_r+0x6de>
 801b240:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b242:	3301      	adds	r3, #1
 801b244:	9314      	str	r3, [sp, #80]	; 0x50
 801b246:	f018 0302 	ands.w	r3, r8, #2
 801b24a:	931b      	str	r3, [sp, #108]	; 0x6c
 801b24c:	bf1e      	ittt	ne
 801b24e:	9b14      	ldrne	r3, [sp, #80]	; 0x50
 801b250:	3302      	addne	r3, #2
 801b252:	9314      	strne	r3, [sp, #80]	; 0x50
 801b254:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 801b258:	931c      	str	r3, [sp, #112]	; 0x70
 801b25a:	d122      	bne.n	801b2a2 <_vfprintf_r+0x73a>
 801b25c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801b260:	1a9b      	subs	r3, r3, r2
 801b262:	2b00      	cmp	r3, #0
 801b264:	9316      	str	r3, [sp, #88]	; 0x58
 801b266:	dd1c      	ble.n	801b2a2 <_vfprintf_r+0x73a>
 801b268:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b26a:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801b26e:	2810      	cmp	r0, #16
 801b270:	483b      	ldr	r0, [pc, #236]	; (801b360 <_vfprintf_r+0x7f8>)
 801b272:	6020      	str	r0, [r4, #0]
 801b274:	f102 0201 	add.w	r2, r2, #1
 801b278:	f104 0108 	add.w	r1, r4, #8
 801b27c:	f300 82e7 	bgt.w	801b84e <_vfprintf_r+0xce6>
 801b280:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b282:	6060      	str	r0, [r4, #4]
 801b284:	4403      	add	r3, r0
 801b286:	2a07      	cmp	r2, #7
 801b288:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801b28c:	f340 82f4 	ble.w	801b878 <_vfprintf_r+0xd10>
 801b290:	aa26      	add	r2, sp, #152	; 0x98
 801b292:	4651      	mov	r1, sl
 801b294:	4658      	mov	r0, fp
 801b296:	f000 fec7 	bl	801c028 <__sprint_r>
 801b29a:	2800      	cmp	r0, #0
 801b29c:	f040 861c 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b2a0:	ac29      	add	r4, sp, #164	; 0xa4
 801b2a2:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
 801b2a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b2a8:	b16a      	cbz	r2, 801b2c6 <_vfprintf_r+0x75e>
 801b2aa:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 801b2ae:	6022      	str	r2, [r4, #0]
 801b2b0:	2201      	movs	r2, #1
 801b2b2:	4413      	add	r3, r2
 801b2b4:	9328      	str	r3, [sp, #160]	; 0xa0
 801b2b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b2b8:	6062      	str	r2, [r4, #4]
 801b2ba:	4413      	add	r3, r2
 801b2bc:	2b07      	cmp	r3, #7
 801b2be:	9327      	str	r3, [sp, #156]	; 0x9c
 801b2c0:	f300 82dc 	bgt.w	801b87c <_vfprintf_r+0xd14>
 801b2c4:	3408      	adds	r4, #8
 801b2c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b2c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b2ca:	b162      	cbz	r2, 801b2e6 <_vfprintf_r+0x77e>
 801b2cc:	aa1f      	add	r2, sp, #124	; 0x7c
 801b2ce:	6022      	str	r2, [r4, #0]
 801b2d0:	2202      	movs	r2, #2
 801b2d2:	4413      	add	r3, r2
 801b2d4:	9328      	str	r3, [sp, #160]	; 0xa0
 801b2d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b2d8:	6062      	str	r2, [r4, #4]
 801b2da:	3301      	adds	r3, #1
 801b2dc:	2b07      	cmp	r3, #7
 801b2de:	9327      	str	r3, [sp, #156]	; 0x9c
 801b2e0:	f300 82d6 	bgt.w	801b890 <_vfprintf_r+0xd28>
 801b2e4:	3408      	adds	r4, #8
 801b2e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b2e8:	2b80      	cmp	r3, #128	; 0x80
 801b2ea:	d122      	bne.n	801b332 <_vfprintf_r+0x7ca>
 801b2ec:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801b2f0:	1a9b      	subs	r3, r3, r2
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	9316      	str	r3, [sp, #88]	; 0x58
 801b2f6:	dd1c      	ble.n	801b332 <_vfprintf_r+0x7ca>
 801b2f8:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b2fa:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 801b2fe:	2810      	cmp	r0, #16
 801b300:	4818      	ldr	r0, [pc, #96]	; (801b364 <_vfprintf_r+0x7fc>)
 801b302:	6020      	str	r0, [r4, #0]
 801b304:	f102 0201 	add.w	r2, r2, #1
 801b308:	f104 0108 	add.w	r1, r4, #8
 801b30c:	f300 82ca 	bgt.w	801b8a4 <_vfprintf_r+0xd3c>
 801b310:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b312:	6060      	str	r0, [r4, #4]
 801b314:	4403      	add	r3, r0
 801b316:	2a07      	cmp	r2, #7
 801b318:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801b31c:	f340 82d7 	ble.w	801b8ce <_vfprintf_r+0xd66>
 801b320:	aa26      	add	r2, sp, #152	; 0x98
 801b322:	4651      	mov	r1, sl
 801b324:	4658      	mov	r0, fp
 801b326:	f000 fe7f 	bl	801c028 <__sprint_r>
 801b32a:	2800      	cmp	r0, #0
 801b32c:	f040 85d4 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b330:	ac29      	add	r4, sp, #164	; 0xa4
 801b332:	9b07      	ldr	r3, [sp, #28]
 801b334:	1aff      	subs	r7, r7, r3
 801b336:	2f00      	cmp	r7, #0
 801b338:	dd28      	ble.n	801b38c <_vfprintf_r+0x824>
 801b33a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b33e:	4809      	ldr	r0, [pc, #36]	; (801b364 <_vfprintf_r+0x7fc>)
 801b340:	6020      	str	r0, [r4, #0]
 801b342:	2f10      	cmp	r7, #16
 801b344:	f103 0301 	add.w	r3, r3, #1
 801b348:	f104 0108 	add.w	r1, r4, #8
 801b34c:	e00c      	b.n	801b368 <_vfprintf_r+0x800>
 801b34e:	bf00      	nop
 801b350:	08020986 	.word	0x08020986
 801b354:	08020975 	.word	0x08020975
 801b358:	40300000 	.word	0x40300000
 801b35c:	3fe00000 	.word	0x3fe00000
 801b360:	080209b9 	.word	0x080209b9
 801b364:	080209c9 	.word	0x080209c9
 801b368:	f300 82b3 	bgt.w	801b8d2 <_vfprintf_r+0xd6a>
 801b36c:	6067      	str	r7, [r4, #4]
 801b36e:	2b07      	cmp	r3, #7
 801b370:	4417      	add	r7, r2
 801b372:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801b376:	f340 82bf 	ble.w	801b8f8 <_vfprintf_r+0xd90>
 801b37a:	aa26      	add	r2, sp, #152	; 0x98
 801b37c:	4651      	mov	r1, sl
 801b37e:	4658      	mov	r0, fp
 801b380:	f000 fe52 	bl	801c028 <__sprint_r>
 801b384:	2800      	cmp	r0, #0
 801b386:	f040 85a7 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b38a:	ac29      	add	r4, sp, #164	; 0xa4
 801b38c:	f418 7f80 	tst.w	r8, #256	; 0x100
 801b390:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 801b392:	f040 82b7 	bne.w	801b904 <_vfprintf_r+0xd9c>
 801b396:	9b07      	ldr	r3, [sp, #28]
 801b398:	f8c4 9000 	str.w	r9, [r4]
 801b39c:	441f      	add	r7, r3
 801b39e:	6063      	str	r3, [r4, #4]
 801b3a0:	9728      	str	r7, [sp, #160]	; 0xa0
 801b3a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b3a4:	3301      	adds	r3, #1
 801b3a6:	2b07      	cmp	r3, #7
 801b3a8:	9327      	str	r3, [sp, #156]	; 0x9c
 801b3aa:	f300 82f0 	bgt.w	801b98e <_vfprintf_r+0xe26>
 801b3ae:	3408      	adds	r4, #8
 801b3b0:	f018 0f04 	tst.w	r8, #4
 801b3b4:	f040 8572 	bne.w	801be9c <_vfprintf_r+0x1334>
 801b3b8:	e9dd 3212 	ldrd	r3, r2, [sp, #72]	; 0x48
 801b3bc:	9914      	ldr	r1, [sp, #80]	; 0x50
 801b3be:	428a      	cmp	r2, r1
 801b3c0:	bfac      	ite	ge
 801b3c2:	189b      	addge	r3, r3, r2
 801b3c4:	185b      	addlt	r3, r3, r1
 801b3c6:	9312      	str	r3, [sp, #72]	; 0x48
 801b3c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b3ca:	b13b      	cbz	r3, 801b3dc <_vfprintf_r+0x874>
 801b3cc:	aa26      	add	r2, sp, #152	; 0x98
 801b3ce:	4651      	mov	r1, sl
 801b3d0:	4658      	mov	r0, fp
 801b3d2:	f000 fe29 	bl	801c028 <__sprint_r>
 801b3d6:	2800      	cmp	r0, #0
 801b3d8:	f040 857e 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b3dc:	2300      	movs	r3, #0
 801b3de:	9327      	str	r3, [sp, #156]	; 0x9c
 801b3e0:	9b08      	ldr	r3, [sp, #32]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	f040 8594 	bne.w	801bf10 <_vfprintf_r+0x13a8>
 801b3e8:	ac29      	add	r4, sp, #164	; 0xa4
 801b3ea:	e0e6      	b.n	801b5ba <_vfprintf_r+0xa52>
 801b3ec:	9008      	str	r0, [sp, #32]
 801b3ee:	e630      	b.n	801b052 <_vfprintf_r+0x4ea>
 801b3f0:	9008      	str	r0, [sp, #32]
 801b3f2:	2306      	movs	r3, #6
 801b3f4:	e61d      	b.n	801b032 <_vfprintf_r+0x4ca>
 801b3f6:	9008      	str	r0, [sp, #32]
 801b3f8:	e62b      	b.n	801b052 <_vfprintf_r+0x4ea>
 801b3fa:	f802 0c01 	strb.w	r0, [r2, #-1]
 801b3fe:	e694      	b.n	801b12a <_vfprintf_r+0x5c2>
 801b400:	f803 0b01 	strb.w	r0, [r3], #1
 801b404:	1aca      	subs	r2, r1, r3
 801b406:	2a00      	cmp	r2, #0
 801b408:	dafa      	bge.n	801b400 <_vfprintf_r+0x898>
 801b40a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b40c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b40e:	3201      	adds	r2, #1
 801b410:	f103 0301 	add.w	r3, r3, #1
 801b414:	bfb8      	it	lt
 801b416:	2300      	movlt	r3, #0
 801b418:	441d      	add	r5, r3
 801b41a:	e696      	b.n	801b14a <_vfprintf_r+0x5e2>
 801b41c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b41e:	462b      	mov	r3, r5
 801b420:	18a9      	adds	r1, r5, r2
 801b422:	2030      	movs	r0, #48	; 0x30
 801b424:	e7ee      	b.n	801b404 <_vfprintf_r+0x89c>
 801b426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b428:	2b46      	cmp	r3, #70	; 0x46
 801b42a:	d005      	beq.n	801b438 <_vfprintf_r+0x8d0>
 801b42c:	2b45      	cmp	r3, #69	; 0x45
 801b42e:	d11d      	bne.n	801b46c <_vfprintf_r+0x904>
 801b430:	9b07      	ldr	r3, [sp, #28]
 801b432:	1c5e      	adds	r6, r3, #1
 801b434:	2302      	movs	r3, #2
 801b436:	e001      	b.n	801b43c <_vfprintf_r+0x8d4>
 801b438:	9e07      	ldr	r6, [sp, #28]
 801b43a:	2303      	movs	r3, #3
 801b43c:	aa24      	add	r2, sp, #144	; 0x90
 801b43e:	9204      	str	r2, [sp, #16]
 801b440:	aa21      	add	r2, sp, #132	; 0x84
 801b442:	9203      	str	r2, [sp, #12]
 801b444:	aa20      	add	r2, sp, #128	; 0x80
 801b446:	e9cd 6201 	strd	r6, r2, [sp, #4]
 801b44a:	9300      	str	r3, [sp, #0]
 801b44c:	463a      	mov	r2, r7
 801b44e:	462b      	mov	r3, r5
 801b450:	4658      	mov	r0, fp
 801b452:	f001 fe29 	bl	801d0a8 <_dtoa_r>
 801b456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b458:	2b47      	cmp	r3, #71	; 0x47
 801b45a:	4681      	mov	r9, r0
 801b45c:	d108      	bne.n	801b470 <_vfprintf_r+0x908>
 801b45e:	f018 0f01 	tst.w	r8, #1
 801b462:	d105      	bne.n	801b470 <_vfprintf_r+0x908>
 801b464:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b466:	eba3 0309 	sub.w	r3, r3, r9
 801b46a:	e670      	b.n	801b14e <_vfprintf_r+0x5e6>
 801b46c:	9e07      	ldr	r6, [sp, #28]
 801b46e:	e7e1      	b.n	801b434 <_vfprintf_r+0x8cc>
 801b470:	eb09 0306 	add.w	r3, r9, r6
 801b474:	9309      	str	r3, [sp, #36]	; 0x24
 801b476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b478:	2b46      	cmp	r3, #70	; 0x46
 801b47a:	d111      	bne.n	801b4a0 <_vfprintf_r+0x938>
 801b47c:	f899 3000 	ldrb.w	r3, [r9]
 801b480:	2b30      	cmp	r3, #48	; 0x30
 801b482:	d109      	bne.n	801b498 <_vfprintf_r+0x930>
 801b484:	2200      	movs	r2, #0
 801b486:	2300      	movs	r3, #0
 801b488:	4638      	mov	r0, r7
 801b48a:	4629      	mov	r1, r5
 801b48c:	f7ed fcf4 	bl	8008e78 <__aeabi_dcmpeq>
 801b490:	b910      	cbnz	r0, 801b498 <_vfprintf_r+0x930>
 801b492:	f1c6 0601 	rsb	r6, r6, #1
 801b496:	9620      	str	r6, [sp, #128]	; 0x80
 801b498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b49a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b49c:	441a      	add	r2, r3
 801b49e:	9209      	str	r2, [sp, #36]	; 0x24
 801b4a0:	2200      	movs	r2, #0
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	4638      	mov	r0, r7
 801b4a6:	4629      	mov	r1, r5
 801b4a8:	f7ed fce6 	bl	8008e78 <__aeabi_dcmpeq>
 801b4ac:	b108      	cbz	r0, 801b4b2 <_vfprintf_r+0x94a>
 801b4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4b0:	9324      	str	r3, [sp, #144]	; 0x90
 801b4b2:	2230      	movs	r2, #48	; 0x30
 801b4b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b4b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b4b8:	4299      	cmp	r1, r3
 801b4ba:	d9d3      	bls.n	801b464 <_vfprintf_r+0x8fc>
 801b4bc:	1c59      	adds	r1, r3, #1
 801b4be:	9124      	str	r1, [sp, #144]	; 0x90
 801b4c0:	701a      	strb	r2, [r3, #0]
 801b4c2:	e7f7      	b.n	801b4b4 <_vfprintf_r+0x94c>
 801b4c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4c6:	2b46      	cmp	r3, #70	; 0x46
 801b4c8:	f47f ae50 	bne.w	801b16c <_vfprintf_r+0x604>
 801b4cc:	9a07      	ldr	r2, [sp, #28]
 801b4ce:	f008 0301 	and.w	r3, r8, #1
 801b4d2:	2d00      	cmp	r5, #0
 801b4d4:	ea43 0302 	orr.w	r3, r3, r2
 801b4d8:	dd29      	ble.n	801b52e <_vfprintf_r+0x9c6>
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d034      	beq.n	801b548 <_vfprintf_r+0x9e0>
 801b4de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b4e0:	18eb      	adds	r3, r5, r3
 801b4e2:	441a      	add	r2, r3
 801b4e4:	9207      	str	r2, [sp, #28]
 801b4e6:	2366      	movs	r3, #102	; 0x66
 801b4e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801b4ea:	e033      	b.n	801b554 <_vfprintf_r+0x9ec>
 801b4ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 801b4f0:	f805 6f01 	strb.w	r6, [r5, #1]!
 801b4f4:	e671      	b.n	801b1da <_vfprintf_r+0x672>
 801b4f6:	b941      	cbnz	r1, 801b50a <_vfprintf_r+0x9a2>
 801b4f8:	2230      	movs	r2, #48	; 0x30
 801b4fa:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 801b4fe:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 801b502:	3330      	adds	r3, #48	; 0x30
 801b504:	f802 3b01 	strb.w	r3, [r2], #1
 801b508:	e673      	b.n	801b1f2 <_vfprintf_r+0x68a>
 801b50a:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 801b50e:	e7f8      	b.n	801b502 <_vfprintf_r+0x99a>
 801b510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b512:	42ab      	cmp	r3, r5
 801b514:	dd10      	ble.n	801b538 <_vfprintf_r+0x9d0>
 801b516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b518:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b51a:	2d00      	cmp	r5, #0
 801b51c:	4413      	add	r3, r2
 801b51e:	9307      	str	r3, [sp, #28]
 801b520:	dc10      	bgt.n	801b544 <_vfprintf_r+0x9dc>
 801b522:	9a07      	ldr	r2, [sp, #28]
 801b524:	f1c5 0301 	rsb	r3, r5, #1
 801b528:	441a      	add	r2, r3
 801b52a:	9207      	str	r2, [sp, #28]
 801b52c:	e00a      	b.n	801b544 <_vfprintf_r+0x9dc>
 801b52e:	b16b      	cbz	r3, 801b54c <_vfprintf_r+0x9e4>
 801b530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b532:	9a07      	ldr	r2, [sp, #28]
 801b534:	3301      	adds	r3, #1
 801b536:	e7d4      	b.n	801b4e2 <_vfprintf_r+0x97a>
 801b538:	f018 0f01 	tst.w	r8, #1
 801b53c:	d01f      	beq.n	801b57e <_vfprintf_r+0xa16>
 801b53e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b540:	18eb      	adds	r3, r5, r3
 801b542:	9307      	str	r3, [sp, #28]
 801b544:	2367      	movs	r3, #103	; 0x67
 801b546:	e7cf      	b.n	801b4e8 <_vfprintf_r+0x980>
 801b548:	9507      	str	r5, [sp, #28]
 801b54a:	e7cc      	b.n	801b4e6 <_vfprintf_r+0x97e>
 801b54c:	2366      	movs	r3, #102	; 0x66
 801b54e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b550:	2301      	movs	r3, #1
 801b552:	9307      	str	r3, [sp, #28]
 801b554:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 801b558:	930c      	str	r3, [sp, #48]	; 0x30
 801b55a:	d021      	beq.n	801b5a0 <_vfprintf_r+0xa38>
 801b55c:	2600      	movs	r6, #0
 801b55e:	2d00      	cmp	r5, #0
 801b560:	960c      	str	r6, [sp, #48]	; 0x30
 801b562:	f77f ae5d 	ble.w	801b220 <_vfprintf_r+0x6b8>
 801b566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b568:	781b      	ldrb	r3, [r3, #0]
 801b56a:	2bff      	cmp	r3, #255	; 0xff
 801b56c:	d109      	bne.n	801b582 <_vfprintf_r+0xa1a>
 801b56e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b570:	9a07      	ldr	r2, [sp, #28]
 801b572:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b574:	4433      	add	r3, r6
 801b576:	fb01 2303 	mla	r3, r1, r3, r2
 801b57a:	9307      	str	r3, [sp, #28]
 801b57c:	e650      	b.n	801b220 <_vfprintf_r+0x6b8>
 801b57e:	9507      	str	r5, [sp, #28]
 801b580:	e7e0      	b.n	801b544 <_vfprintf_r+0x9dc>
 801b582:	42ab      	cmp	r3, r5
 801b584:	daf3      	bge.n	801b56e <_vfprintf_r+0xa06>
 801b586:	1aed      	subs	r5, r5, r3
 801b588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b58a:	785b      	ldrb	r3, [r3, #1]
 801b58c:	b133      	cbz	r3, 801b59c <_vfprintf_r+0xa34>
 801b58e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b590:	3301      	adds	r3, #1
 801b592:	930c      	str	r3, [sp, #48]	; 0x30
 801b594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b596:	3301      	adds	r3, #1
 801b598:	930d      	str	r3, [sp, #52]	; 0x34
 801b59a:	e7e4      	b.n	801b566 <_vfprintf_r+0x9fe>
 801b59c:	3601      	adds	r6, #1
 801b59e:	e7e2      	b.n	801b566 <_vfprintf_r+0x9fe>
 801b5a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b5a2:	e63d      	b.n	801b220 <_vfprintf_r+0x6b8>
 801b5a4:	1d2b      	adds	r3, r5, #4
 801b5a6:	f018 0f20 	tst.w	r8, #32
 801b5aa:	930a      	str	r3, [sp, #40]	; 0x28
 801b5ac:	d00a      	beq.n	801b5c4 <_vfprintf_r+0xa5c>
 801b5ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b5b0:	682b      	ldr	r3, [r5, #0]
 801b5b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b5b4:	17d2      	asrs	r2, r2, #31
 801b5b6:	e9c3 1200 	strd	r1, r2, [r3]
 801b5ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b5bc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 801b5c0:	f7ff bb53 	b.w	801ac6a <_vfprintf_r+0x102>
 801b5c4:	f018 0f10 	tst.w	r8, #16
 801b5c8:	d003      	beq.n	801b5d2 <_vfprintf_r+0xa6a>
 801b5ca:	682b      	ldr	r3, [r5, #0]
 801b5cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b5ce:	601a      	str	r2, [r3, #0]
 801b5d0:	e7f3      	b.n	801b5ba <_vfprintf_r+0xa52>
 801b5d2:	f018 0f40 	tst.w	r8, #64	; 0x40
 801b5d6:	d003      	beq.n	801b5e0 <_vfprintf_r+0xa78>
 801b5d8:	682b      	ldr	r3, [r5, #0]
 801b5da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b5dc:	801a      	strh	r2, [r3, #0]
 801b5de:	e7ec      	b.n	801b5ba <_vfprintf_r+0xa52>
 801b5e0:	f418 7f00 	tst.w	r8, #512	; 0x200
 801b5e4:	d0f1      	beq.n	801b5ca <_vfprintf_r+0xa62>
 801b5e6:	682b      	ldr	r3, [r5, #0]
 801b5e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b5ea:	701a      	strb	r2, [r3, #0]
 801b5ec:	e7e5      	b.n	801b5ba <_vfprintf_r+0xa52>
 801b5ee:	f048 0810 	orr.w	r8, r8, #16
 801b5f2:	f018 0320 	ands.w	r3, r8, #32
 801b5f6:	d020      	beq.n	801b63a <_vfprintf_r+0xad2>
 801b5f8:	3507      	adds	r5, #7
 801b5fa:	f025 0307 	bic.w	r3, r5, #7
 801b5fe:	461a      	mov	r2, r3
 801b600:	685e      	ldr	r6, [r3, #4]
 801b602:	f852 5b08 	ldr.w	r5, [r2], #8
 801b606:	920a      	str	r2, [sp, #40]	; 0x28
 801b608:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801b60c:	2300      	movs	r3, #0
 801b60e:	2200      	movs	r2, #0
 801b610:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 801b614:	9a07      	ldr	r2, [sp, #28]
 801b616:	3201      	adds	r2, #1
 801b618:	f000 848f 	beq.w	801bf3a <_vfprintf_r+0x13d2>
 801b61c:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 801b620:	9208      	str	r2, [sp, #32]
 801b622:	ea55 0206 	orrs.w	r2, r5, r6
 801b626:	f040 848e 	bne.w	801bf46 <_vfprintf_r+0x13de>
 801b62a:	9a07      	ldr	r2, [sp, #28]
 801b62c:	2a00      	cmp	r2, #0
 801b62e:	f000 80f4 	beq.w	801b81a <_vfprintf_r+0xcb2>
 801b632:	2b01      	cmp	r3, #1
 801b634:	f040 848a 	bne.w	801bf4c <_vfprintf_r+0x13e4>
 801b638:	e09e      	b.n	801b778 <_vfprintf_r+0xc10>
 801b63a:	462a      	mov	r2, r5
 801b63c:	f018 0610 	ands.w	r6, r8, #16
 801b640:	f852 5b04 	ldr.w	r5, [r2], #4
 801b644:	920a      	str	r2, [sp, #40]	; 0x28
 801b646:	d001      	beq.n	801b64c <_vfprintf_r+0xae4>
 801b648:	461e      	mov	r6, r3
 801b64a:	e7dd      	b.n	801b608 <_vfprintf_r+0xaa0>
 801b64c:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801b650:	d001      	beq.n	801b656 <_vfprintf_r+0xaee>
 801b652:	b2ad      	uxth	r5, r5
 801b654:	e7d8      	b.n	801b608 <_vfprintf_r+0xaa0>
 801b656:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801b65a:	d0d5      	beq.n	801b608 <_vfprintf_r+0xaa0>
 801b65c:	b2ed      	uxtb	r5, r5
 801b65e:	e7f3      	b.n	801b648 <_vfprintf_r+0xae0>
 801b660:	462b      	mov	r3, r5
 801b662:	2278      	movs	r2, #120	; 0x78
 801b664:	f853 5b04 	ldr.w	r5, [r3], #4
 801b668:	930a      	str	r3, [sp, #40]	; 0x28
 801b66a:	f647 0330 	movw	r3, #30768	; 0x7830
 801b66e:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 801b672:	4ba2      	ldr	r3, [pc, #648]	; (801b8fc <_vfprintf_r+0xd94>)
 801b674:	931a      	str	r3, [sp, #104]	; 0x68
 801b676:	2600      	movs	r6, #0
 801b678:	f048 0802 	orr.w	r8, r8, #2
 801b67c:	2302      	movs	r3, #2
 801b67e:	920b      	str	r2, [sp, #44]	; 0x2c
 801b680:	e7c5      	b.n	801b60e <_vfprintf_r+0xaa6>
 801b682:	462b      	mov	r3, r5
 801b684:	2500      	movs	r5, #0
 801b686:	f853 9b04 	ldr.w	r9, [r3], #4
 801b68a:	930a      	str	r3, [sp, #40]	; 0x28
 801b68c:	9b07      	ldr	r3, [sp, #28]
 801b68e:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 801b692:	1c5e      	adds	r6, r3, #1
 801b694:	d010      	beq.n	801b6b8 <_vfprintf_r+0xb50>
 801b696:	461a      	mov	r2, r3
 801b698:	4629      	mov	r1, r5
 801b69a:	4648      	mov	r0, r9
 801b69c:	f7ec ff70 	bl	8008580 <memchr>
 801b6a0:	9008      	str	r0, [sp, #32]
 801b6a2:	2800      	cmp	r0, #0
 801b6a4:	f000 80d0 	beq.w	801b848 <_vfprintf_r+0xce0>
 801b6a8:	eba0 0309 	sub.w	r3, r0, r9
 801b6ac:	e9cd 3507 	strd	r3, r5, [sp, #28]
 801b6b0:	462f      	mov	r7, r5
 801b6b2:	462e      	mov	r6, r5
 801b6b4:	950c      	str	r5, [sp, #48]	; 0x30
 801b6b6:	e5bb      	b.n	801b230 <_vfprintf_r+0x6c8>
 801b6b8:	4648      	mov	r0, r9
 801b6ba:	f7ec ffb1 	bl	8008620 <strlen>
 801b6be:	e9cd 0507 	strd	r0, r5, [sp, #28]
 801b6c2:	e45e      	b.n	801af82 <_vfprintf_r+0x41a>
 801b6c4:	f048 0810 	orr.w	r8, r8, #16
 801b6c8:	f018 0320 	ands.w	r3, r8, #32
 801b6cc:	d009      	beq.n	801b6e2 <_vfprintf_r+0xb7a>
 801b6ce:	3507      	adds	r5, #7
 801b6d0:	f025 0307 	bic.w	r3, r5, #7
 801b6d4:	461a      	mov	r2, r3
 801b6d6:	685e      	ldr	r6, [r3, #4]
 801b6d8:	f852 5b08 	ldr.w	r5, [r2], #8
 801b6dc:	920a      	str	r2, [sp, #40]	; 0x28
 801b6de:	2301      	movs	r3, #1
 801b6e0:	e795      	b.n	801b60e <_vfprintf_r+0xaa6>
 801b6e2:	462a      	mov	r2, r5
 801b6e4:	f018 0610 	ands.w	r6, r8, #16
 801b6e8:	f852 5b04 	ldr.w	r5, [r2], #4
 801b6ec:	920a      	str	r2, [sp, #40]	; 0x28
 801b6ee:	d001      	beq.n	801b6f4 <_vfprintf_r+0xb8c>
 801b6f0:	461e      	mov	r6, r3
 801b6f2:	e7f4      	b.n	801b6de <_vfprintf_r+0xb76>
 801b6f4:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801b6f8:	d001      	beq.n	801b6fe <_vfprintf_r+0xb96>
 801b6fa:	b2ad      	uxth	r5, r5
 801b6fc:	e7ef      	b.n	801b6de <_vfprintf_r+0xb76>
 801b6fe:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801b702:	d0ec      	beq.n	801b6de <_vfprintf_r+0xb76>
 801b704:	b2ed      	uxtb	r5, r5
 801b706:	e7f3      	b.n	801b6f0 <_vfprintf_r+0xb88>
 801b708:	4b7d      	ldr	r3, [pc, #500]	; (801b900 <_vfprintf_r+0xd98>)
 801b70a:	931a      	str	r3, [sp, #104]	; 0x68
 801b70c:	f018 0320 	ands.w	r3, r8, #32
 801b710:	d01b      	beq.n	801b74a <_vfprintf_r+0xbe2>
 801b712:	3507      	adds	r5, #7
 801b714:	f025 0307 	bic.w	r3, r5, #7
 801b718:	461a      	mov	r2, r3
 801b71a:	685e      	ldr	r6, [r3, #4]
 801b71c:	f852 5b08 	ldr.w	r5, [r2], #8
 801b720:	920a      	str	r2, [sp, #40]	; 0x28
 801b722:	f018 0f01 	tst.w	r8, #1
 801b726:	d00a      	beq.n	801b73e <_vfprintf_r+0xbd6>
 801b728:	ea55 0306 	orrs.w	r3, r5, r6
 801b72c:	d007      	beq.n	801b73e <_vfprintf_r+0xbd6>
 801b72e:	2330      	movs	r3, #48	; 0x30
 801b730:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 801b734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b736:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 801b73a:	f048 0802 	orr.w	r8, r8, #2
 801b73e:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 801b742:	2302      	movs	r3, #2
 801b744:	e763      	b.n	801b60e <_vfprintf_r+0xaa6>
 801b746:	4b6d      	ldr	r3, [pc, #436]	; (801b8fc <_vfprintf_r+0xd94>)
 801b748:	e7df      	b.n	801b70a <_vfprintf_r+0xba2>
 801b74a:	462a      	mov	r2, r5
 801b74c:	f018 0610 	ands.w	r6, r8, #16
 801b750:	f852 5b04 	ldr.w	r5, [r2], #4
 801b754:	920a      	str	r2, [sp, #40]	; 0x28
 801b756:	d001      	beq.n	801b75c <_vfprintf_r+0xbf4>
 801b758:	461e      	mov	r6, r3
 801b75a:	e7e2      	b.n	801b722 <_vfprintf_r+0xbba>
 801b75c:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 801b760:	d001      	beq.n	801b766 <_vfprintf_r+0xbfe>
 801b762:	b2ad      	uxth	r5, r5
 801b764:	e7dd      	b.n	801b722 <_vfprintf_r+0xbba>
 801b766:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 801b76a:	d0da      	beq.n	801b722 <_vfprintf_r+0xbba>
 801b76c:	b2ed      	uxtb	r5, r5
 801b76e:	e7f3      	b.n	801b758 <_vfprintf_r+0xbf0>
 801b770:	2d0a      	cmp	r5, #10
 801b772:	f176 0300 	sbcs.w	r3, r6, #0
 801b776:	d205      	bcs.n	801b784 <_vfprintf_r+0xc1c>
 801b778:	3530      	adds	r5, #48	; 0x30
 801b77a:	f88d 5147 	strb.w	r5, [sp, #327]	; 0x147
 801b77e:	f20d 1947 	addw	r9, sp, #327	; 0x147
 801b782:	e3ff      	b.n	801bf84 <_vfprintf_r+0x141c>
 801b784:	2300      	movs	r3, #0
 801b786:	9309      	str	r3, [sp, #36]	; 0x24
 801b788:	9b08      	ldr	r3, [sp, #32]
 801b78a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b78e:	af52      	add	r7, sp, #328	; 0x148
 801b790:	930c      	str	r3, [sp, #48]	; 0x30
 801b792:	220a      	movs	r2, #10
 801b794:	2300      	movs	r3, #0
 801b796:	4628      	mov	r0, r5
 801b798:	4631      	mov	r1, r6
 801b79a:	f7ed fd2b 	bl	80091f4 <__aeabi_uldivmod>
 801b79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7a0:	9014      	str	r0, [sp, #80]	; 0x50
 801b7a2:	3301      	adds	r3, #1
 801b7a4:	9309      	str	r3, [sp, #36]	; 0x24
 801b7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7a8:	3230      	adds	r2, #48	; 0x30
 801b7aa:	4688      	mov	r8, r1
 801b7ac:	f107 39ff 	add.w	r9, r7, #4294967295
 801b7b0:	f807 2c01 	strb.w	r2, [r7, #-1]
 801b7b4:	b1d3      	cbz	r3, 801b7ec <_vfprintf_r+0xc84>
 801b7b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b7b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b7ba:	781b      	ldrb	r3, [r3, #0]
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	d115      	bne.n	801b7ec <_vfprintf_r+0xc84>
 801b7c0:	2aff      	cmp	r2, #255	; 0xff
 801b7c2:	d013      	beq.n	801b7ec <_vfprintf_r+0xc84>
 801b7c4:	2d0a      	cmp	r5, #10
 801b7c6:	f176 0300 	sbcs.w	r3, r6, #0
 801b7ca:	d30f      	bcc.n	801b7ec <_vfprintf_r+0xc84>
 801b7cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b7ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b7d0:	eba9 0903 	sub.w	r9, r9, r3
 801b7d4:	461a      	mov	r2, r3
 801b7d6:	4648      	mov	r0, r9
 801b7d8:	f001 fafb 	bl	801cdd2 <strncpy>
 801b7dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b7de:	785b      	ldrb	r3, [r3, #1]
 801b7e0:	b11b      	cbz	r3, 801b7ea <_vfprintf_r+0xc82>
 801b7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b7e4:	3301      	adds	r3, #1
 801b7e6:	930d      	str	r3, [sp, #52]	; 0x34
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	9309      	str	r3, [sp, #36]	; 0x24
 801b7ec:	2d0a      	cmp	r5, #10
 801b7ee:	f176 0600 	sbcs.w	r6, r6, #0
 801b7f2:	f0c0 83c7 	bcc.w	801bf84 <_vfprintf_r+0x141c>
 801b7f6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801b7f8:	4646      	mov	r6, r8
 801b7fa:	464f      	mov	r7, r9
 801b7fc:	e7c9      	b.n	801b792 <_vfprintf_r+0xc2a>
 801b7fe:	f005 030f 	and.w	r3, r5, #15
 801b802:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b804:	092d      	lsrs	r5, r5, #4
 801b806:	5cd3      	ldrb	r3, [r2, r3]
 801b808:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801b80c:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 801b810:	0936      	lsrs	r6, r6, #4
 801b812:	ea55 0306 	orrs.w	r3, r5, r6
 801b816:	d1f2      	bne.n	801b7fe <_vfprintf_r+0xc96>
 801b818:	e3b4      	b.n	801bf84 <_vfprintf_r+0x141c>
 801b81a:	b933      	cbnz	r3, 801b82a <_vfprintf_r+0xcc2>
 801b81c:	f018 0f01 	tst.w	r8, #1
 801b820:	d003      	beq.n	801b82a <_vfprintf_r+0xcc2>
 801b822:	2330      	movs	r3, #48	; 0x30
 801b824:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 801b828:	e7a9      	b.n	801b77e <_vfprintf_r+0xc16>
 801b82a:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801b82e:	e3a9      	b.n	801bf84 <_vfprintf_r+0x141c>
 801b830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b832:	2b00      	cmp	r3, #0
 801b834:	f000 8372 	beq.w	801bf1c <_vfprintf_r+0x13b4>
 801b838:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 801b83c:	2300      	movs	r3, #0
 801b83e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 801b842:	950a      	str	r5, [sp, #40]	; 0x28
 801b844:	f7ff bb2f 	b.w	801aea6 <_vfprintf_r+0x33e>
 801b848:	9f08      	ldr	r7, [sp, #32]
 801b84a:	f7ff bb9b 	b.w	801af84 <_vfprintf_r+0x41c>
 801b84e:	2010      	movs	r0, #16
 801b850:	4403      	add	r3, r0
 801b852:	2a07      	cmp	r2, #7
 801b854:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801b858:	6060      	str	r0, [r4, #4]
 801b85a:	dd08      	ble.n	801b86e <_vfprintf_r+0xd06>
 801b85c:	aa26      	add	r2, sp, #152	; 0x98
 801b85e:	4651      	mov	r1, sl
 801b860:	4658      	mov	r0, fp
 801b862:	f000 fbe1 	bl	801c028 <__sprint_r>
 801b866:	2800      	cmp	r0, #0
 801b868:	f040 8336 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b86c:	a929      	add	r1, sp, #164	; 0xa4
 801b86e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b870:	3b10      	subs	r3, #16
 801b872:	9316      	str	r3, [sp, #88]	; 0x58
 801b874:	460c      	mov	r4, r1
 801b876:	e4f7      	b.n	801b268 <_vfprintf_r+0x700>
 801b878:	460c      	mov	r4, r1
 801b87a:	e512      	b.n	801b2a2 <_vfprintf_r+0x73a>
 801b87c:	aa26      	add	r2, sp, #152	; 0x98
 801b87e:	4651      	mov	r1, sl
 801b880:	4658      	mov	r0, fp
 801b882:	f000 fbd1 	bl	801c028 <__sprint_r>
 801b886:	2800      	cmp	r0, #0
 801b888:	f040 8326 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b88c:	ac29      	add	r4, sp, #164	; 0xa4
 801b88e:	e51a      	b.n	801b2c6 <_vfprintf_r+0x75e>
 801b890:	aa26      	add	r2, sp, #152	; 0x98
 801b892:	4651      	mov	r1, sl
 801b894:	4658      	mov	r0, fp
 801b896:	f000 fbc7 	bl	801c028 <__sprint_r>
 801b89a:	2800      	cmp	r0, #0
 801b89c:	f040 831c 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b8a0:	ac29      	add	r4, sp, #164	; 0xa4
 801b8a2:	e520      	b.n	801b2e6 <_vfprintf_r+0x77e>
 801b8a4:	2010      	movs	r0, #16
 801b8a6:	4403      	add	r3, r0
 801b8a8:	2a07      	cmp	r2, #7
 801b8aa:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 801b8ae:	6060      	str	r0, [r4, #4]
 801b8b0:	dd08      	ble.n	801b8c4 <_vfprintf_r+0xd5c>
 801b8b2:	aa26      	add	r2, sp, #152	; 0x98
 801b8b4:	4651      	mov	r1, sl
 801b8b6:	4658      	mov	r0, fp
 801b8b8:	f000 fbb6 	bl	801c028 <__sprint_r>
 801b8bc:	2800      	cmp	r0, #0
 801b8be:	f040 830b 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b8c2:	a929      	add	r1, sp, #164	; 0xa4
 801b8c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b8c6:	3b10      	subs	r3, #16
 801b8c8:	9316      	str	r3, [sp, #88]	; 0x58
 801b8ca:	460c      	mov	r4, r1
 801b8cc:	e514      	b.n	801b2f8 <_vfprintf_r+0x790>
 801b8ce:	460c      	mov	r4, r1
 801b8d0:	e52f      	b.n	801b332 <_vfprintf_r+0x7ca>
 801b8d2:	2010      	movs	r0, #16
 801b8d4:	4402      	add	r2, r0
 801b8d6:	2b07      	cmp	r3, #7
 801b8d8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b8dc:	6060      	str	r0, [r4, #4]
 801b8de:	dd08      	ble.n	801b8f2 <_vfprintf_r+0xd8a>
 801b8e0:	aa26      	add	r2, sp, #152	; 0x98
 801b8e2:	4651      	mov	r1, sl
 801b8e4:	4658      	mov	r0, fp
 801b8e6:	f000 fb9f 	bl	801c028 <__sprint_r>
 801b8ea:	2800      	cmp	r0, #0
 801b8ec:	f040 82f4 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b8f0:	a929      	add	r1, sp, #164	; 0xa4
 801b8f2:	3f10      	subs	r7, #16
 801b8f4:	460c      	mov	r4, r1
 801b8f6:	e520      	b.n	801b33a <_vfprintf_r+0x7d2>
 801b8f8:	460c      	mov	r4, r1
 801b8fa:	e547      	b.n	801b38c <_vfprintf_r+0x824>
 801b8fc:	08020975 	.word	0x08020975
 801b900:	08020986 	.word	0x08020986
 801b904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b906:	2b65      	cmp	r3, #101	; 0x65
 801b908:	f340 822e 	ble.w	801bd68 <_vfprintf_r+0x1200>
 801b90c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b910:	2200      	movs	r2, #0
 801b912:	2300      	movs	r3, #0
 801b914:	f7ed fab0 	bl	8008e78 <__aeabi_dcmpeq>
 801b918:	2800      	cmp	r0, #0
 801b91a:	d068      	beq.n	801b9ee <_vfprintf_r+0xe86>
 801b91c:	4b6d      	ldr	r3, [pc, #436]	; (801bad4 <_vfprintf_r+0xf6c>)
 801b91e:	6023      	str	r3, [r4, #0]
 801b920:	2301      	movs	r3, #1
 801b922:	441f      	add	r7, r3
 801b924:	6063      	str	r3, [r4, #4]
 801b926:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b928:	9728      	str	r7, [sp, #160]	; 0xa0
 801b92a:	3301      	adds	r3, #1
 801b92c:	2b07      	cmp	r3, #7
 801b92e:	9327      	str	r3, [sp, #156]	; 0x9c
 801b930:	dc37      	bgt.n	801b9a2 <_vfprintf_r+0xe3a>
 801b932:	3408      	adds	r4, #8
 801b934:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b938:	4293      	cmp	r3, r2
 801b93a:	db03      	blt.n	801b944 <_vfprintf_r+0xddc>
 801b93c:	f018 0f01 	tst.w	r8, #1
 801b940:	f43f ad36 	beq.w	801b3b0 <_vfprintf_r+0x848>
 801b944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b946:	6023      	str	r3, [r4, #0]
 801b948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b94a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b94c:	6063      	str	r3, [r4, #4]
 801b94e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b950:	4413      	add	r3, r2
 801b952:	9328      	str	r3, [sp, #160]	; 0xa0
 801b954:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b956:	3301      	adds	r3, #1
 801b958:	2b07      	cmp	r3, #7
 801b95a:	9327      	str	r3, [sp, #156]	; 0x9c
 801b95c:	dc2b      	bgt.n	801b9b6 <_vfprintf_r+0xe4e>
 801b95e:	3408      	adds	r4, #8
 801b960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b962:	1e5d      	subs	r5, r3, #1
 801b964:	2d00      	cmp	r5, #0
 801b966:	f77f ad23 	ble.w	801b3b0 <_vfprintf_r+0x848>
 801b96a:	4e5b      	ldr	r6, [pc, #364]	; (801bad8 <_vfprintf_r+0xf70>)
 801b96c:	2710      	movs	r7, #16
 801b96e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801b972:	2d10      	cmp	r5, #16
 801b974:	f103 0301 	add.w	r3, r3, #1
 801b978:	f104 0108 	add.w	r1, r4, #8
 801b97c:	6026      	str	r6, [r4, #0]
 801b97e:	dc24      	bgt.n	801b9ca <_vfprintf_r+0xe62>
 801b980:	6065      	str	r5, [r4, #4]
 801b982:	2b07      	cmp	r3, #7
 801b984:	4415      	add	r5, r2
 801b986:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801b98a:	f340 8284 	ble.w	801be96 <_vfprintf_r+0x132e>
 801b98e:	aa26      	add	r2, sp, #152	; 0x98
 801b990:	4651      	mov	r1, sl
 801b992:	4658      	mov	r0, fp
 801b994:	f000 fb48 	bl	801c028 <__sprint_r>
 801b998:	2800      	cmp	r0, #0
 801b99a:	f040 829d 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b99e:	ac29      	add	r4, sp, #164	; 0xa4
 801b9a0:	e506      	b.n	801b3b0 <_vfprintf_r+0x848>
 801b9a2:	aa26      	add	r2, sp, #152	; 0x98
 801b9a4:	4651      	mov	r1, sl
 801b9a6:	4658      	mov	r0, fp
 801b9a8:	f000 fb3e 	bl	801c028 <__sprint_r>
 801b9ac:	2800      	cmp	r0, #0
 801b9ae:	f040 8293 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b9b2:	ac29      	add	r4, sp, #164	; 0xa4
 801b9b4:	e7be      	b.n	801b934 <_vfprintf_r+0xdcc>
 801b9b6:	aa26      	add	r2, sp, #152	; 0x98
 801b9b8:	4651      	mov	r1, sl
 801b9ba:	4658      	mov	r0, fp
 801b9bc:	f000 fb34 	bl	801c028 <__sprint_r>
 801b9c0:	2800      	cmp	r0, #0
 801b9c2:	f040 8289 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b9c6:	ac29      	add	r4, sp, #164	; 0xa4
 801b9c8:	e7ca      	b.n	801b960 <_vfprintf_r+0xdf8>
 801b9ca:	3210      	adds	r2, #16
 801b9cc:	2b07      	cmp	r3, #7
 801b9ce:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801b9d2:	6067      	str	r7, [r4, #4]
 801b9d4:	dd08      	ble.n	801b9e8 <_vfprintf_r+0xe80>
 801b9d6:	aa26      	add	r2, sp, #152	; 0x98
 801b9d8:	4651      	mov	r1, sl
 801b9da:	4658      	mov	r0, fp
 801b9dc:	f000 fb24 	bl	801c028 <__sprint_r>
 801b9e0:	2800      	cmp	r0, #0
 801b9e2:	f040 8279 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801b9e6:	a929      	add	r1, sp, #164	; 0xa4
 801b9e8:	3d10      	subs	r5, #16
 801b9ea:	460c      	mov	r4, r1
 801b9ec:	e7bf      	b.n	801b96e <_vfprintf_r+0xe06>
 801b9ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	dc73      	bgt.n	801badc <_vfprintf_r+0xf74>
 801b9f4:	4b37      	ldr	r3, [pc, #220]	; (801bad4 <_vfprintf_r+0xf6c>)
 801b9f6:	6023      	str	r3, [r4, #0]
 801b9f8:	2301      	movs	r3, #1
 801b9fa:	441f      	add	r7, r3
 801b9fc:	6063      	str	r3, [r4, #4]
 801b9fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ba00:	9728      	str	r7, [sp, #160]	; 0xa0
 801ba02:	3301      	adds	r3, #1
 801ba04:	2b07      	cmp	r3, #7
 801ba06:	9327      	str	r3, [sp, #156]	; 0x9c
 801ba08:	dc3d      	bgt.n	801ba86 <_vfprintf_r+0xf1e>
 801ba0a:	3408      	adds	r4, #8
 801ba0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ba0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ba10:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ba12:	430b      	orrs	r3, r1
 801ba14:	f008 0101 	and.w	r1, r8, #1
 801ba18:	430b      	orrs	r3, r1
 801ba1a:	f43f acc9 	beq.w	801b3b0 <_vfprintf_r+0x848>
 801ba1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ba20:	6023      	str	r3, [r4, #0]
 801ba22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ba24:	6063      	str	r3, [r4, #4]
 801ba26:	441a      	add	r2, r3
 801ba28:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ba2a:	9228      	str	r2, [sp, #160]	; 0xa0
 801ba2c:	3301      	adds	r3, #1
 801ba2e:	2b07      	cmp	r3, #7
 801ba30:	9327      	str	r3, [sp, #156]	; 0x9c
 801ba32:	dc32      	bgt.n	801ba9a <_vfprintf_r+0xf32>
 801ba34:	3408      	adds	r4, #8
 801ba36:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801ba38:	2d00      	cmp	r5, #0
 801ba3a:	da1b      	bge.n	801ba74 <_vfprintf_r+0xf0c>
 801ba3c:	4e26      	ldr	r6, [pc, #152]	; (801bad8 <_vfprintf_r+0xf70>)
 801ba3e:	426d      	negs	r5, r5
 801ba40:	4623      	mov	r3, r4
 801ba42:	2710      	movs	r7, #16
 801ba44:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 801ba48:	2d10      	cmp	r5, #16
 801ba4a:	f102 0201 	add.w	r2, r2, #1
 801ba4e:	f104 0408 	add.w	r4, r4, #8
 801ba52:	601e      	str	r6, [r3, #0]
 801ba54:	dc2b      	bgt.n	801baae <_vfprintf_r+0xf46>
 801ba56:	605d      	str	r5, [r3, #4]
 801ba58:	2a07      	cmp	r2, #7
 801ba5a:	440d      	add	r5, r1
 801ba5c:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 801ba60:	dd08      	ble.n	801ba74 <_vfprintf_r+0xf0c>
 801ba62:	aa26      	add	r2, sp, #152	; 0x98
 801ba64:	4651      	mov	r1, sl
 801ba66:	4658      	mov	r0, fp
 801ba68:	f000 fade 	bl	801c028 <__sprint_r>
 801ba6c:	2800      	cmp	r0, #0
 801ba6e:	f040 8233 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801ba72:	ac29      	add	r4, sp, #164	; 0xa4
 801ba74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba78:	6063      	str	r3, [r4, #4]
 801ba7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ba7c:	f8c4 9000 	str.w	r9, [r4]
 801ba80:	4413      	add	r3, r2
 801ba82:	9328      	str	r3, [sp, #160]	; 0xa0
 801ba84:	e48d      	b.n	801b3a2 <_vfprintf_r+0x83a>
 801ba86:	aa26      	add	r2, sp, #152	; 0x98
 801ba88:	4651      	mov	r1, sl
 801ba8a:	4658      	mov	r0, fp
 801ba8c:	f000 facc 	bl	801c028 <__sprint_r>
 801ba90:	2800      	cmp	r0, #0
 801ba92:	f040 8221 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801ba96:	ac29      	add	r4, sp, #164	; 0xa4
 801ba98:	e7b8      	b.n	801ba0c <_vfprintf_r+0xea4>
 801ba9a:	aa26      	add	r2, sp, #152	; 0x98
 801ba9c:	4651      	mov	r1, sl
 801ba9e:	4658      	mov	r0, fp
 801baa0:	f000 fac2 	bl	801c028 <__sprint_r>
 801baa4:	2800      	cmp	r0, #0
 801baa6:	f040 8217 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801baaa:	ac29      	add	r4, sp, #164	; 0xa4
 801baac:	e7c3      	b.n	801ba36 <_vfprintf_r+0xece>
 801baae:	3110      	adds	r1, #16
 801bab0:	2a07      	cmp	r2, #7
 801bab2:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 801bab6:	605f      	str	r7, [r3, #4]
 801bab8:	dd08      	ble.n	801bacc <_vfprintf_r+0xf64>
 801baba:	aa26      	add	r2, sp, #152	; 0x98
 801babc:	4651      	mov	r1, sl
 801babe:	4658      	mov	r0, fp
 801bac0:	f000 fab2 	bl	801c028 <__sprint_r>
 801bac4:	2800      	cmp	r0, #0
 801bac6:	f040 8207 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801baca:	ac29      	add	r4, sp, #164	; 0xa4
 801bacc:	3d10      	subs	r5, #16
 801bace:	4623      	mov	r3, r4
 801bad0:	e7b8      	b.n	801ba44 <_vfprintf_r+0xedc>
 801bad2:	bf00      	nop
 801bad4:	08020997 	.word	0x08020997
 801bad8:	080209c9 	.word	0x080209c9
 801badc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bade:	42ab      	cmp	r3, r5
 801bae0:	bfa8      	it	ge
 801bae2:	462b      	movge	r3, r5
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	9307      	str	r3, [sp, #28]
 801bae8:	dd0a      	ble.n	801bb00 <_vfprintf_r+0xf98>
 801baea:	441f      	add	r7, r3
 801baec:	e9c4 9300 	strd	r9, r3, [r4]
 801baf0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801baf2:	9728      	str	r7, [sp, #160]	; 0xa0
 801baf4:	3301      	adds	r3, #1
 801baf6:	2b07      	cmp	r3, #7
 801baf8:	9327      	str	r3, [sp, #156]	; 0x9c
 801bafa:	f300 8084 	bgt.w	801bc06 <_vfprintf_r+0x109e>
 801bafe:	3408      	adds	r4, #8
 801bb00:	9b07      	ldr	r3, [sp, #28]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	bfac      	ite	ge
 801bb06:	1aef      	subge	r7, r5, r3
 801bb08:	462f      	movlt	r7, r5
 801bb0a:	2f00      	cmp	r7, #0
 801bb0c:	dd19      	ble.n	801bb42 <_vfprintf_r+0xfda>
 801bb0e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801bb12:	4894      	ldr	r0, [pc, #592]	; (801bd64 <_vfprintf_r+0x11fc>)
 801bb14:	6020      	str	r0, [r4, #0]
 801bb16:	2f10      	cmp	r7, #16
 801bb18:	f103 0301 	add.w	r3, r3, #1
 801bb1c:	f104 0108 	add.w	r1, r4, #8
 801bb20:	dc7b      	bgt.n	801bc1a <_vfprintf_r+0x10b2>
 801bb22:	6067      	str	r7, [r4, #4]
 801bb24:	2b07      	cmp	r3, #7
 801bb26:	4417      	add	r7, r2
 801bb28:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801bb2c:	f340 8088 	ble.w	801bc40 <_vfprintf_r+0x10d8>
 801bb30:	aa26      	add	r2, sp, #152	; 0x98
 801bb32:	4651      	mov	r1, sl
 801bb34:	4658      	mov	r0, fp
 801bb36:	f000 fa77 	bl	801c028 <__sprint_r>
 801bb3a:	2800      	cmp	r0, #0
 801bb3c:	f040 81cc 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bb40:	ac29      	add	r4, sp, #164	; 0xa4
 801bb42:	f418 6f80 	tst.w	r8, #1024	; 0x400
 801bb46:	444d      	add	r5, r9
 801bb48:	d009      	beq.n	801bb5e <_vfprintf_r+0xff6>
 801bb4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d179      	bne.n	801bc44 <_vfprintf_r+0x10dc>
 801bb50:	2e00      	cmp	r6, #0
 801bb52:	d179      	bne.n	801bc48 <_vfprintf_r+0x10e0>
 801bb54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb56:	444b      	add	r3, r9
 801bb58:	429d      	cmp	r5, r3
 801bb5a:	bf28      	it	cs
 801bb5c:	461d      	movcs	r5, r3
 801bb5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bb60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb62:	4293      	cmp	r3, r2
 801bb64:	db02      	blt.n	801bb6c <_vfprintf_r+0x1004>
 801bb66:	f018 0f01 	tst.w	r8, #1
 801bb6a:	d00e      	beq.n	801bb8a <_vfprintf_r+0x1022>
 801bb6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bb6e:	6023      	str	r3, [r4, #0]
 801bb70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bb74:	6063      	str	r3, [r4, #4]
 801bb76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb78:	4413      	add	r3, r2
 801bb7a:	9328      	str	r3, [sp, #160]	; 0xa0
 801bb7c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bb7e:	3301      	adds	r3, #1
 801bb80:	2b07      	cmp	r3, #7
 801bb82:	9327      	str	r3, [sp, #156]	; 0x9c
 801bb84:	f300 80da 	bgt.w	801bd3c <_vfprintf_r+0x11d4>
 801bb88:	3408      	adds	r4, #8
 801bb8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb8c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801bb8e:	1b9e      	subs	r6, r3, r6
 801bb90:	444b      	add	r3, r9
 801bb92:	1b5b      	subs	r3, r3, r5
 801bb94:	429e      	cmp	r6, r3
 801bb96:	bfa8      	it	ge
 801bb98:	461e      	movge	r6, r3
 801bb9a:	2e00      	cmp	r6, #0
 801bb9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb9e:	dd0a      	ble.n	801bbb6 <_vfprintf_r+0x104e>
 801bba0:	4433      	add	r3, r6
 801bba2:	9328      	str	r3, [sp, #160]	; 0xa0
 801bba4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bba6:	3301      	adds	r3, #1
 801bba8:	2b07      	cmp	r3, #7
 801bbaa:	e9c4 5600 	strd	r5, r6, [r4]
 801bbae:	9327      	str	r3, [sp, #156]	; 0x9c
 801bbb0:	f300 80ce 	bgt.w	801bd50 <_vfprintf_r+0x11e8>
 801bbb4:	3408      	adds	r4, #8
 801bbb6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801bbb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbba:	2e00      	cmp	r6, #0
 801bbbc:	eba3 0505 	sub.w	r5, r3, r5
 801bbc0:	bfa8      	it	ge
 801bbc2:	1bad      	subge	r5, r5, r6
 801bbc4:	2d00      	cmp	r5, #0
 801bbc6:	f77f abf3 	ble.w	801b3b0 <_vfprintf_r+0x848>
 801bbca:	4e66      	ldr	r6, [pc, #408]	; (801bd64 <_vfprintf_r+0x11fc>)
 801bbcc:	2710      	movs	r7, #16
 801bbce:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801bbd2:	2d10      	cmp	r5, #16
 801bbd4:	f103 0301 	add.w	r3, r3, #1
 801bbd8:	f104 0108 	add.w	r1, r4, #8
 801bbdc:	6026      	str	r6, [r4, #0]
 801bbde:	f77f aecf 	ble.w	801b980 <_vfprintf_r+0xe18>
 801bbe2:	3210      	adds	r2, #16
 801bbe4:	2b07      	cmp	r3, #7
 801bbe6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801bbea:	6067      	str	r7, [r4, #4]
 801bbec:	dd08      	ble.n	801bc00 <_vfprintf_r+0x1098>
 801bbee:	aa26      	add	r2, sp, #152	; 0x98
 801bbf0:	4651      	mov	r1, sl
 801bbf2:	4658      	mov	r0, fp
 801bbf4:	f000 fa18 	bl	801c028 <__sprint_r>
 801bbf8:	2800      	cmp	r0, #0
 801bbfa:	f040 816d 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bbfe:	a929      	add	r1, sp, #164	; 0xa4
 801bc00:	3d10      	subs	r5, #16
 801bc02:	460c      	mov	r4, r1
 801bc04:	e7e3      	b.n	801bbce <_vfprintf_r+0x1066>
 801bc06:	aa26      	add	r2, sp, #152	; 0x98
 801bc08:	4651      	mov	r1, sl
 801bc0a:	4658      	mov	r0, fp
 801bc0c:	f000 fa0c 	bl	801c028 <__sprint_r>
 801bc10:	2800      	cmp	r0, #0
 801bc12:	f040 8161 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bc16:	ac29      	add	r4, sp, #164	; 0xa4
 801bc18:	e772      	b.n	801bb00 <_vfprintf_r+0xf98>
 801bc1a:	2010      	movs	r0, #16
 801bc1c:	4402      	add	r2, r0
 801bc1e:	2b07      	cmp	r3, #7
 801bc20:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801bc24:	6060      	str	r0, [r4, #4]
 801bc26:	dd08      	ble.n	801bc3a <_vfprintf_r+0x10d2>
 801bc28:	aa26      	add	r2, sp, #152	; 0x98
 801bc2a:	4651      	mov	r1, sl
 801bc2c:	4658      	mov	r0, fp
 801bc2e:	f000 f9fb 	bl	801c028 <__sprint_r>
 801bc32:	2800      	cmp	r0, #0
 801bc34:	f040 8150 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bc38:	a929      	add	r1, sp, #164	; 0xa4
 801bc3a:	3f10      	subs	r7, #16
 801bc3c:	460c      	mov	r4, r1
 801bc3e:	e766      	b.n	801bb0e <_vfprintf_r+0xfa6>
 801bc40:	460c      	mov	r4, r1
 801bc42:	e77e      	b.n	801bb42 <_vfprintf_r+0xfda>
 801bc44:	2e00      	cmp	r6, #0
 801bc46:	d049      	beq.n	801bcdc <_vfprintf_r+0x1174>
 801bc48:	3e01      	subs	r6, #1
 801bc4a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bc4c:	6023      	str	r3, [r4, #0]
 801bc4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bc50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801bc52:	6063      	str	r3, [r4, #4]
 801bc54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bc56:	4413      	add	r3, r2
 801bc58:	9328      	str	r3, [sp, #160]	; 0xa0
 801bc5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bc5c:	3301      	adds	r3, #1
 801bc5e:	2b07      	cmp	r3, #7
 801bc60:	9327      	str	r3, [sp, #156]	; 0x9c
 801bc62:	dc42      	bgt.n	801bcea <_vfprintf_r+0x1182>
 801bc64:	3408      	adds	r4, #8
 801bc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc68:	444b      	add	r3, r9
 801bc6a:	1b5a      	subs	r2, r3, r5
 801bc6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc6e:	781b      	ldrb	r3, [r3, #0]
 801bc70:	429a      	cmp	r2, r3
 801bc72:	bfa8      	it	ge
 801bc74:	461a      	movge	r2, r3
 801bc76:	2a00      	cmp	r2, #0
 801bc78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bc7a:	9207      	str	r2, [sp, #28]
 801bc7c:	dd09      	ble.n	801bc92 <_vfprintf_r+0x112a>
 801bc7e:	4413      	add	r3, r2
 801bc80:	9328      	str	r3, [sp, #160]	; 0xa0
 801bc82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bc84:	3301      	adds	r3, #1
 801bc86:	2b07      	cmp	r3, #7
 801bc88:	e9c4 5200 	strd	r5, r2, [r4]
 801bc8c:	9327      	str	r3, [sp, #156]	; 0x9c
 801bc8e:	dc36      	bgt.n	801bcfe <_vfprintf_r+0x1196>
 801bc90:	3408      	adds	r4, #8
 801bc92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc94:	781f      	ldrb	r7, [r3, #0]
 801bc96:	9b07      	ldr	r3, [sp, #28]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	bfa8      	it	ge
 801bc9c:	1aff      	subge	r7, r7, r3
 801bc9e:	2f00      	cmp	r7, #0
 801bca0:	dd18      	ble.n	801bcd4 <_vfprintf_r+0x116c>
 801bca2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801bca6:	482f      	ldr	r0, [pc, #188]	; (801bd64 <_vfprintf_r+0x11fc>)
 801bca8:	6020      	str	r0, [r4, #0]
 801bcaa:	2f10      	cmp	r7, #16
 801bcac:	f103 0301 	add.w	r3, r3, #1
 801bcb0:	f104 0108 	add.w	r1, r4, #8
 801bcb4:	dc2d      	bgt.n	801bd12 <_vfprintf_r+0x11aa>
 801bcb6:	6067      	str	r7, [r4, #4]
 801bcb8:	2b07      	cmp	r3, #7
 801bcba:	4417      	add	r7, r2
 801bcbc:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801bcc0:	dd3a      	ble.n	801bd38 <_vfprintf_r+0x11d0>
 801bcc2:	aa26      	add	r2, sp, #152	; 0x98
 801bcc4:	4651      	mov	r1, sl
 801bcc6:	4658      	mov	r0, fp
 801bcc8:	f000 f9ae 	bl	801c028 <__sprint_r>
 801bccc:	2800      	cmp	r0, #0
 801bcce:	f040 8103 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bcd2:	ac29      	add	r4, sp, #164	; 0xa4
 801bcd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bcd6:	781b      	ldrb	r3, [r3, #0]
 801bcd8:	441d      	add	r5, r3
 801bcda:	e736      	b.n	801bb4a <_vfprintf_r+0xfe2>
 801bcdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bcde:	3b01      	subs	r3, #1
 801bce0:	930d      	str	r3, [sp, #52]	; 0x34
 801bce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bce4:	3b01      	subs	r3, #1
 801bce6:	930c      	str	r3, [sp, #48]	; 0x30
 801bce8:	e7af      	b.n	801bc4a <_vfprintf_r+0x10e2>
 801bcea:	aa26      	add	r2, sp, #152	; 0x98
 801bcec:	4651      	mov	r1, sl
 801bcee:	4658      	mov	r0, fp
 801bcf0:	f000 f99a 	bl	801c028 <__sprint_r>
 801bcf4:	2800      	cmp	r0, #0
 801bcf6:	f040 80ef 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bcfa:	ac29      	add	r4, sp, #164	; 0xa4
 801bcfc:	e7b3      	b.n	801bc66 <_vfprintf_r+0x10fe>
 801bcfe:	aa26      	add	r2, sp, #152	; 0x98
 801bd00:	4651      	mov	r1, sl
 801bd02:	4658      	mov	r0, fp
 801bd04:	f000 f990 	bl	801c028 <__sprint_r>
 801bd08:	2800      	cmp	r0, #0
 801bd0a:	f040 80e5 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bd0e:	ac29      	add	r4, sp, #164	; 0xa4
 801bd10:	e7bf      	b.n	801bc92 <_vfprintf_r+0x112a>
 801bd12:	2010      	movs	r0, #16
 801bd14:	4402      	add	r2, r0
 801bd16:	2b07      	cmp	r3, #7
 801bd18:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801bd1c:	6060      	str	r0, [r4, #4]
 801bd1e:	dd08      	ble.n	801bd32 <_vfprintf_r+0x11ca>
 801bd20:	aa26      	add	r2, sp, #152	; 0x98
 801bd22:	4651      	mov	r1, sl
 801bd24:	4658      	mov	r0, fp
 801bd26:	f000 f97f 	bl	801c028 <__sprint_r>
 801bd2a:	2800      	cmp	r0, #0
 801bd2c:	f040 80d4 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bd30:	a929      	add	r1, sp, #164	; 0xa4
 801bd32:	3f10      	subs	r7, #16
 801bd34:	460c      	mov	r4, r1
 801bd36:	e7b4      	b.n	801bca2 <_vfprintf_r+0x113a>
 801bd38:	460c      	mov	r4, r1
 801bd3a:	e7cb      	b.n	801bcd4 <_vfprintf_r+0x116c>
 801bd3c:	aa26      	add	r2, sp, #152	; 0x98
 801bd3e:	4651      	mov	r1, sl
 801bd40:	4658      	mov	r0, fp
 801bd42:	f000 f971 	bl	801c028 <__sprint_r>
 801bd46:	2800      	cmp	r0, #0
 801bd48:	f040 80c6 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bd4c:	ac29      	add	r4, sp, #164	; 0xa4
 801bd4e:	e71c      	b.n	801bb8a <_vfprintf_r+0x1022>
 801bd50:	aa26      	add	r2, sp, #152	; 0x98
 801bd52:	4651      	mov	r1, sl
 801bd54:	4658      	mov	r0, fp
 801bd56:	f000 f967 	bl	801c028 <__sprint_r>
 801bd5a:	2800      	cmp	r0, #0
 801bd5c:	f040 80bc 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bd60:	ac29      	add	r4, sp, #164	; 0xa4
 801bd62:	e728      	b.n	801bbb6 <_vfprintf_r+0x104e>
 801bd64:	080209c9 	.word	0x080209c9
 801bd68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bd6c:	2a01      	cmp	r2, #1
 801bd6e:	f107 0701 	add.w	r7, r7, #1
 801bd72:	f103 0301 	add.w	r3, r3, #1
 801bd76:	f104 0508 	add.w	r5, r4, #8
 801bd7a:	dc02      	bgt.n	801bd82 <_vfprintf_r+0x121a>
 801bd7c:	f018 0f01 	tst.w	r8, #1
 801bd80:	d07e      	beq.n	801be80 <_vfprintf_r+0x1318>
 801bd82:	2201      	movs	r2, #1
 801bd84:	2b07      	cmp	r3, #7
 801bd86:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801bd8a:	f8c4 9000 	str.w	r9, [r4]
 801bd8e:	6062      	str	r2, [r4, #4]
 801bd90:	dd08      	ble.n	801bda4 <_vfprintf_r+0x123c>
 801bd92:	aa26      	add	r2, sp, #152	; 0x98
 801bd94:	4651      	mov	r1, sl
 801bd96:	4658      	mov	r0, fp
 801bd98:	f000 f946 	bl	801c028 <__sprint_r>
 801bd9c:	2800      	cmp	r0, #0
 801bd9e:	f040 809b 	bne.w	801bed8 <_vfprintf_r+0x1370>
 801bda2:	ad29      	add	r5, sp, #164	; 0xa4
 801bda4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bda6:	602b      	str	r3, [r5, #0]
 801bda8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bdaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bdac:	606b      	str	r3, [r5, #4]
 801bdae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bdb0:	4413      	add	r3, r2
 801bdb2:	9328      	str	r3, [sp, #160]	; 0xa0
 801bdb4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bdb6:	3301      	adds	r3, #1
 801bdb8:	2b07      	cmp	r3, #7
 801bdba:	9327      	str	r3, [sp, #156]	; 0x9c
 801bdbc:	dc32      	bgt.n	801be24 <_vfprintf_r+0x12bc>
 801bdbe:	3508      	adds	r5, #8
 801bdc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801bdc6:	1e5c      	subs	r4, r3, #1
 801bdc8:	2200      	movs	r2, #0
 801bdca:	2300      	movs	r3, #0
 801bdcc:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
 801bdd0:	f7ed f852 	bl	8008e78 <__aeabi_dcmpeq>
 801bdd4:	2800      	cmp	r0, #0
 801bdd6:	d12e      	bne.n	801be36 <_vfprintf_r+0x12ce>
 801bdd8:	f109 0301 	add.w	r3, r9, #1
 801bddc:	e9c5 3400 	strd	r3, r4, [r5]
 801bde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bde2:	3701      	adds	r7, #1
 801bde4:	3e01      	subs	r6, #1
 801bde6:	441e      	add	r6, r3
 801bde8:	2f07      	cmp	r7, #7
 801bdea:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
 801bdee:	dd50      	ble.n	801be92 <_vfprintf_r+0x132a>
 801bdf0:	aa26      	add	r2, sp, #152	; 0x98
 801bdf2:	4651      	mov	r1, sl
 801bdf4:	4658      	mov	r0, fp
 801bdf6:	f000 f917 	bl	801c028 <__sprint_r>
 801bdfa:	2800      	cmp	r0, #0
 801bdfc:	d16c      	bne.n	801bed8 <_vfprintf_r+0x1370>
 801bdfe:	ad29      	add	r5, sp, #164	; 0xa4
 801be00:	ab22      	add	r3, sp, #136	; 0x88
 801be02:	602b      	str	r3, [r5, #0]
 801be04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801be06:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801be08:	606b      	str	r3, [r5, #4]
 801be0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801be0c:	4413      	add	r3, r2
 801be0e:	9328      	str	r3, [sp, #160]	; 0xa0
 801be10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801be12:	3301      	adds	r3, #1
 801be14:	2b07      	cmp	r3, #7
 801be16:	9327      	str	r3, [sp, #156]	; 0x9c
 801be18:	f73f adb9 	bgt.w	801b98e <_vfprintf_r+0xe26>
 801be1c:	f105 0408 	add.w	r4, r5, #8
 801be20:	f7ff bac6 	b.w	801b3b0 <_vfprintf_r+0x848>
 801be24:	aa26      	add	r2, sp, #152	; 0x98
 801be26:	4651      	mov	r1, sl
 801be28:	4658      	mov	r0, fp
 801be2a:	f000 f8fd 	bl	801c028 <__sprint_r>
 801be2e:	2800      	cmp	r0, #0
 801be30:	d152      	bne.n	801bed8 <_vfprintf_r+0x1370>
 801be32:	ad29      	add	r5, sp, #164	; 0xa4
 801be34:	e7c4      	b.n	801bdc0 <_vfprintf_r+0x1258>
 801be36:	2c00      	cmp	r4, #0
 801be38:	dde2      	ble.n	801be00 <_vfprintf_r+0x1298>
 801be3a:	4e59      	ldr	r6, [pc, #356]	; (801bfa0 <_vfprintf_r+0x1438>)
 801be3c:	2710      	movs	r7, #16
 801be3e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801be42:	2c10      	cmp	r4, #16
 801be44:	f103 0301 	add.w	r3, r3, #1
 801be48:	f105 0108 	add.w	r1, r5, #8
 801be4c:	602e      	str	r6, [r5, #0]
 801be4e:	dc07      	bgt.n	801be60 <_vfprintf_r+0x12f8>
 801be50:	606c      	str	r4, [r5, #4]
 801be52:	2b07      	cmp	r3, #7
 801be54:	4414      	add	r4, r2
 801be56:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 801be5a:	dcc9      	bgt.n	801bdf0 <_vfprintf_r+0x1288>
 801be5c:	460d      	mov	r5, r1
 801be5e:	e7cf      	b.n	801be00 <_vfprintf_r+0x1298>
 801be60:	3210      	adds	r2, #16
 801be62:	2b07      	cmp	r3, #7
 801be64:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801be68:	606f      	str	r7, [r5, #4]
 801be6a:	dd06      	ble.n	801be7a <_vfprintf_r+0x1312>
 801be6c:	aa26      	add	r2, sp, #152	; 0x98
 801be6e:	4651      	mov	r1, sl
 801be70:	4658      	mov	r0, fp
 801be72:	f000 f8d9 	bl	801c028 <__sprint_r>
 801be76:	bb78      	cbnz	r0, 801bed8 <_vfprintf_r+0x1370>
 801be78:	a929      	add	r1, sp, #164	; 0xa4
 801be7a:	3c10      	subs	r4, #16
 801be7c:	460d      	mov	r5, r1
 801be7e:	e7de      	b.n	801be3e <_vfprintf_r+0x12d6>
 801be80:	2201      	movs	r2, #1
 801be82:	2b07      	cmp	r3, #7
 801be84:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 801be88:	f8c4 9000 	str.w	r9, [r4]
 801be8c:	6062      	str	r2, [r4, #4]
 801be8e:	ddb7      	ble.n	801be00 <_vfprintf_r+0x1298>
 801be90:	e7ae      	b.n	801bdf0 <_vfprintf_r+0x1288>
 801be92:	3508      	adds	r5, #8
 801be94:	e7b4      	b.n	801be00 <_vfprintf_r+0x1298>
 801be96:	460c      	mov	r4, r1
 801be98:	f7ff ba8a 	b.w	801b3b0 <_vfprintf_r+0x848>
 801be9c:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 801bea0:	1a9d      	subs	r5, r3, r2
 801bea2:	2d00      	cmp	r5, #0
 801bea4:	f77f aa88 	ble.w	801b3b8 <_vfprintf_r+0x850>
 801bea8:	4e3e      	ldr	r6, [pc, #248]	; (801bfa4 <_vfprintf_r+0x143c>)
 801beaa:	2710      	movs	r7, #16
 801beac:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 801beb0:	2d10      	cmp	r5, #16
 801beb2:	f103 0301 	add.w	r3, r3, #1
 801beb6:	6026      	str	r6, [r4, #0]
 801beb8:	dc18      	bgt.n	801beec <_vfprintf_r+0x1384>
 801beba:	6065      	str	r5, [r4, #4]
 801bebc:	2b07      	cmp	r3, #7
 801bebe:	4415      	add	r5, r2
 801bec0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 801bec4:	f77f aa78 	ble.w	801b3b8 <_vfprintf_r+0x850>
 801bec8:	aa26      	add	r2, sp, #152	; 0x98
 801beca:	4651      	mov	r1, sl
 801becc:	4658      	mov	r0, fp
 801bece:	f000 f8ab 	bl	801c028 <__sprint_r>
 801bed2:	2800      	cmp	r0, #0
 801bed4:	f43f aa70 	beq.w	801b3b8 <_vfprintf_r+0x850>
 801bed8:	9b08      	ldr	r3, [sp, #32]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	f43f a889 	beq.w	801aff2 <_vfprintf_r+0x48a>
 801bee0:	4619      	mov	r1, r3
 801bee2:	4658      	mov	r0, fp
 801bee4:	f7fc ffc4 	bl	8018e70 <_free_r>
 801bee8:	f7ff b883 	b.w	801aff2 <_vfprintf_r+0x48a>
 801beec:	3210      	adds	r2, #16
 801beee:	2b07      	cmp	r3, #7
 801bef0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 801bef4:	6067      	str	r7, [r4, #4]
 801bef6:	dc02      	bgt.n	801befe <_vfprintf_r+0x1396>
 801bef8:	3408      	adds	r4, #8
 801befa:	3d10      	subs	r5, #16
 801befc:	e7d6      	b.n	801beac <_vfprintf_r+0x1344>
 801befe:	aa26      	add	r2, sp, #152	; 0x98
 801bf00:	4651      	mov	r1, sl
 801bf02:	4658      	mov	r0, fp
 801bf04:	f000 f890 	bl	801c028 <__sprint_r>
 801bf08:	2800      	cmp	r0, #0
 801bf0a:	d1e5      	bne.n	801bed8 <_vfprintf_r+0x1370>
 801bf0c:	ac29      	add	r4, sp, #164	; 0xa4
 801bf0e:	e7f4      	b.n	801befa <_vfprintf_r+0x1392>
 801bf10:	9908      	ldr	r1, [sp, #32]
 801bf12:	4658      	mov	r0, fp
 801bf14:	f7fc ffac 	bl	8018e70 <_free_r>
 801bf18:	f7ff ba66 	b.w	801b3e8 <_vfprintf_r+0x880>
 801bf1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bf1e:	b91b      	cbnz	r3, 801bf28 <_vfprintf_r+0x13c0>
 801bf20:	2300      	movs	r3, #0
 801bf22:	9327      	str	r3, [sp, #156]	; 0x9c
 801bf24:	f7ff b865 	b.w	801aff2 <_vfprintf_r+0x48a>
 801bf28:	aa26      	add	r2, sp, #152	; 0x98
 801bf2a:	4651      	mov	r1, sl
 801bf2c:	4658      	mov	r0, fp
 801bf2e:	f000 f87b 	bl	801c028 <__sprint_r>
 801bf32:	2800      	cmp	r0, #0
 801bf34:	d0f4      	beq.n	801bf20 <_vfprintf_r+0x13b8>
 801bf36:	f7ff b85c 	b.w	801aff2 <_vfprintf_r+0x48a>
 801bf3a:	ea55 0206 	orrs.w	r2, r5, r6
 801bf3e:	f8cd 8020 	str.w	r8, [sp, #32]
 801bf42:	f43f ab76 	beq.w	801b632 <_vfprintf_r+0xaca>
 801bf46:	2b01      	cmp	r3, #1
 801bf48:	f43f ac12 	beq.w	801b770 <_vfprintf_r+0xc08>
 801bf4c:	2b02      	cmp	r3, #2
 801bf4e:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 801bf52:	f43f ac54 	beq.w	801b7fe <_vfprintf_r+0xc96>
 801bf56:	f005 0307 	and.w	r3, r5, #7
 801bf5a:	08ed      	lsrs	r5, r5, #3
 801bf5c:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 801bf60:	08f6      	lsrs	r6, r6, #3
 801bf62:	3330      	adds	r3, #48	; 0x30
 801bf64:	ea55 0106 	orrs.w	r1, r5, r6
 801bf68:	464a      	mov	r2, r9
 801bf6a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801bf6e:	d1f2      	bne.n	801bf56 <_vfprintf_r+0x13ee>
 801bf70:	9908      	ldr	r1, [sp, #32]
 801bf72:	07c8      	lsls	r0, r1, #31
 801bf74:	d506      	bpl.n	801bf84 <_vfprintf_r+0x141c>
 801bf76:	2b30      	cmp	r3, #48	; 0x30
 801bf78:	d004      	beq.n	801bf84 <_vfprintf_r+0x141c>
 801bf7a:	2330      	movs	r3, #48	; 0x30
 801bf7c:	f809 3c01 	strb.w	r3, [r9, #-1]
 801bf80:	f1a2 0902 	sub.w	r9, r2, #2
 801bf84:	ab52      	add	r3, sp, #328	; 0x148
 801bf86:	eba3 0309 	sub.w	r3, r3, r9
 801bf8a:	9f07      	ldr	r7, [sp, #28]
 801bf8c:	9307      	str	r3, [sp, #28]
 801bf8e:	2300      	movs	r3, #0
 801bf90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bf94:	9308      	str	r3, [sp, #32]
 801bf96:	461e      	mov	r6, r3
 801bf98:	930c      	str	r3, [sp, #48]	; 0x30
 801bf9a:	461d      	mov	r5, r3
 801bf9c:	f7ff b948 	b.w	801b230 <_vfprintf_r+0x6c8>
 801bfa0:	080209c9 	.word	0x080209c9
 801bfa4:	080209b9 	.word	0x080209b9

0801bfa8 <__sbprintf>:
 801bfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfaa:	461f      	mov	r7, r3
 801bfac:	898b      	ldrh	r3, [r1, #12]
 801bfae:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 801bfb2:	f023 0302 	bic.w	r3, r3, #2
 801bfb6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bfba:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801bfbc:	9319      	str	r3, [sp, #100]	; 0x64
 801bfbe:	89cb      	ldrh	r3, [r1, #14]
 801bfc0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bfc4:	69cb      	ldr	r3, [r1, #28]
 801bfc6:	9307      	str	r3, [sp, #28]
 801bfc8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801bfca:	9309      	str	r3, [sp, #36]	; 0x24
 801bfcc:	ab1a      	add	r3, sp, #104	; 0x68
 801bfce:	9300      	str	r3, [sp, #0]
 801bfd0:	9304      	str	r3, [sp, #16]
 801bfd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bfd6:	4615      	mov	r5, r2
 801bfd8:	4606      	mov	r6, r0
 801bfda:	9302      	str	r3, [sp, #8]
 801bfdc:	9305      	str	r3, [sp, #20]
 801bfde:	a816      	add	r0, sp, #88	; 0x58
 801bfe0:	2300      	movs	r3, #0
 801bfe2:	460c      	mov	r4, r1
 801bfe4:	9306      	str	r3, [sp, #24]
 801bfe6:	f7fc fecd 	bl	8018d84 <__retarget_lock_init_recursive>
 801bfea:	462a      	mov	r2, r5
 801bfec:	463b      	mov	r3, r7
 801bfee:	4669      	mov	r1, sp
 801bff0:	4630      	mov	r0, r6
 801bff2:	f7fe fdb9 	bl	801ab68 <_vfprintf_r>
 801bff6:	1e05      	subs	r5, r0, #0
 801bff8:	db07      	blt.n	801c00a <__sbprintf+0x62>
 801bffa:	4669      	mov	r1, sp
 801bffc:	4630      	mov	r0, r6
 801bffe:	f000 fdf5 	bl	801cbec <_fflush_r>
 801c002:	2800      	cmp	r0, #0
 801c004:	bf18      	it	ne
 801c006:	f04f 35ff 	movne.w	r5, #4294967295
 801c00a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801c00e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c010:	065b      	lsls	r3, r3, #25
 801c012:	bf42      	ittt	mi
 801c014:	89a3      	ldrhmi	r3, [r4, #12]
 801c016:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801c01a:	81a3      	strhmi	r3, [r4, #12]
 801c01c:	f7fc feb3 	bl	8018d86 <__retarget_lock_close_recursive>
 801c020:	4628      	mov	r0, r5
 801c022:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801c026:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c028 <__sprint_r>:
 801c028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c02c:	6893      	ldr	r3, [r2, #8]
 801c02e:	4680      	mov	r8, r0
 801c030:	460f      	mov	r7, r1
 801c032:	4614      	mov	r4, r2
 801c034:	b343      	cbz	r3, 801c088 <__sprint_r+0x60>
 801c036:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801c038:	049d      	lsls	r5, r3, #18
 801c03a:	d522      	bpl.n	801c082 <__sprint_r+0x5a>
 801c03c:	6815      	ldr	r5, [r2, #0]
 801c03e:	3508      	adds	r5, #8
 801c040:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 801c044:	f04f 0900 	mov.w	r9, #0
 801c048:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 801c04c:	45ca      	cmp	sl, r9
 801c04e:	dc0d      	bgt.n	801c06c <__sprint_r+0x44>
 801c050:	68a0      	ldr	r0, [r4, #8]
 801c052:	f026 0603 	bic.w	r6, r6, #3
 801c056:	1b80      	subs	r0, r0, r6
 801c058:	60a0      	str	r0, [r4, #8]
 801c05a:	3508      	adds	r5, #8
 801c05c:	2800      	cmp	r0, #0
 801c05e:	d1ef      	bne.n	801c040 <__sprint_r+0x18>
 801c060:	2300      	movs	r3, #0
 801c062:	60a3      	str	r3, [r4, #8]
 801c064:	2300      	movs	r3, #0
 801c066:	6063      	str	r3, [r4, #4]
 801c068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c06c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801c070:	463a      	mov	r2, r7
 801c072:	4640      	mov	r0, r8
 801c074:	f000 fe84 	bl	801cd80 <_fputwc_r>
 801c078:	1c43      	adds	r3, r0, #1
 801c07a:	d0f1      	beq.n	801c060 <__sprint_r+0x38>
 801c07c:	f109 0901 	add.w	r9, r9, #1
 801c080:	e7e4      	b.n	801c04c <__sprint_r+0x24>
 801c082:	f7fc fabd 	bl	8018600 <__sfvwrite_r>
 801c086:	e7eb      	b.n	801c060 <__sprint_r+0x38>
 801c088:	4618      	mov	r0, r3
 801c08a:	e7eb      	b.n	801c064 <__sprint_r+0x3c>

0801c08c <_vfiprintf_r>:
 801c08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c090:	b0bd      	sub	sp, #244	; 0xf4
 801c092:	460f      	mov	r7, r1
 801c094:	9202      	str	r2, [sp, #8]
 801c096:	461d      	mov	r5, r3
 801c098:	461c      	mov	r4, r3
 801c09a:	4681      	mov	r9, r0
 801c09c:	b118      	cbz	r0, 801c0a6 <_vfiprintf_r+0x1a>
 801c09e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801c0a0:	b90b      	cbnz	r3, 801c0a6 <_vfiprintf_r+0x1a>
 801c0a2:	f7fc fa83 	bl	80185ac <__sinit>
 801c0a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c0a8:	07d8      	lsls	r0, r3, #31
 801c0aa:	d405      	bmi.n	801c0b8 <_vfiprintf_r+0x2c>
 801c0ac:	89bb      	ldrh	r3, [r7, #12]
 801c0ae:	0599      	lsls	r1, r3, #22
 801c0b0:	d402      	bmi.n	801c0b8 <_vfiprintf_r+0x2c>
 801c0b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801c0b4:	f7fc fe68 	bl	8018d88 <__retarget_lock_acquire_recursive>
 801c0b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801c0bc:	049a      	lsls	r2, r3, #18
 801c0be:	d406      	bmi.n	801c0ce <_vfiprintf_r+0x42>
 801c0c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c0c4:	81bb      	strh	r3, [r7, #12]
 801c0c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c0c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801c0cc:	667b      	str	r3, [r7, #100]	; 0x64
 801c0ce:	89bb      	ldrh	r3, [r7, #12]
 801c0d0:	071e      	lsls	r6, r3, #28
 801c0d2:	d501      	bpl.n	801c0d8 <_vfiprintf_r+0x4c>
 801c0d4:	693b      	ldr	r3, [r7, #16]
 801c0d6:	b9ab      	cbnz	r3, 801c104 <_vfiprintf_r+0x78>
 801c0d8:	4639      	mov	r1, r7
 801c0da:	4648      	mov	r0, r9
 801c0dc:	f7fc fce8 	bl	8018ab0 <__swsetup_r>
 801c0e0:	b180      	cbz	r0, 801c104 <_vfiprintf_r+0x78>
 801c0e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c0e4:	07d8      	lsls	r0, r3, #31
 801c0e6:	d506      	bpl.n	801c0f6 <_vfiprintf_r+0x6a>
 801c0e8:	f04f 33ff 	mov.w	r3, #4294967295
 801c0ec:	9303      	str	r3, [sp, #12]
 801c0ee:	9803      	ldr	r0, [sp, #12]
 801c0f0:	b03d      	add	sp, #244	; 0xf4
 801c0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0f6:	89bb      	ldrh	r3, [r7, #12]
 801c0f8:	0599      	lsls	r1, r3, #22
 801c0fa:	d4f5      	bmi.n	801c0e8 <_vfiprintf_r+0x5c>
 801c0fc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801c0fe:	f7fc fe44 	bl	8018d8a <__retarget_lock_release_recursive>
 801c102:	e7f1      	b.n	801c0e8 <_vfiprintf_r+0x5c>
 801c104:	89bb      	ldrh	r3, [r7, #12]
 801c106:	f003 021a 	and.w	r2, r3, #26
 801c10a:	2a0a      	cmp	r2, #10
 801c10c:	d114      	bne.n	801c138 <_vfiprintf_r+0xac>
 801c10e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801c112:	2a00      	cmp	r2, #0
 801c114:	db10      	blt.n	801c138 <_vfiprintf_r+0xac>
 801c116:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c118:	07d2      	lsls	r2, r2, #31
 801c11a:	d404      	bmi.n	801c126 <_vfiprintf_r+0x9a>
 801c11c:	059e      	lsls	r6, r3, #22
 801c11e:	d402      	bmi.n	801c126 <_vfiprintf_r+0x9a>
 801c120:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801c122:	f7fc fe32 	bl	8018d8a <__retarget_lock_release_recursive>
 801c126:	9a02      	ldr	r2, [sp, #8]
 801c128:	462b      	mov	r3, r5
 801c12a:	4639      	mov	r1, r7
 801c12c:	4648      	mov	r0, r9
 801c12e:	b03d      	add	sp, #244	; 0xf4
 801c130:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c134:	f000 bc38 	b.w	801c9a8 <__sbprintf>
 801c138:	2300      	movs	r3, #0
 801c13a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 801c13e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801c142:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801c146:	ae13      	add	r6, sp, #76	; 0x4c
 801c148:	9610      	str	r6, [sp, #64]	; 0x40
 801c14a:	9303      	str	r3, [sp, #12]
 801c14c:	9b02      	ldr	r3, [sp, #8]
 801c14e:	461d      	mov	r5, r3
 801c150:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c154:	b10a      	cbz	r2, 801c15a <_vfiprintf_r+0xce>
 801c156:	2a25      	cmp	r2, #37	; 0x25
 801c158:	d1f9      	bne.n	801c14e <_vfiprintf_r+0xc2>
 801c15a:	9b02      	ldr	r3, [sp, #8]
 801c15c:	ebb5 0803 	subs.w	r8, r5, r3
 801c160:	d00d      	beq.n	801c17e <_vfiprintf_r+0xf2>
 801c162:	e9c6 3800 	strd	r3, r8, [r6]
 801c166:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c168:	4443      	add	r3, r8
 801c16a:	9312      	str	r3, [sp, #72]	; 0x48
 801c16c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c16e:	3301      	adds	r3, #1
 801c170:	2b07      	cmp	r3, #7
 801c172:	9311      	str	r3, [sp, #68]	; 0x44
 801c174:	dc76      	bgt.n	801c264 <_vfiprintf_r+0x1d8>
 801c176:	3608      	adds	r6, #8
 801c178:	9b03      	ldr	r3, [sp, #12]
 801c17a:	4443      	add	r3, r8
 801c17c:	9303      	str	r3, [sp, #12]
 801c17e:	782b      	ldrb	r3, [r5, #0]
 801c180:	2b00      	cmp	r3, #0
 801c182:	f000 83d2 	beq.w	801c92a <_vfiprintf_r+0x89e>
 801c186:	2300      	movs	r3, #0
 801c188:	f04f 32ff 	mov.w	r2, #4294967295
 801c18c:	3501      	adds	r5, #1
 801c18e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801c192:	9201      	str	r2, [sp, #4]
 801c194:	9304      	str	r3, [sp, #16]
 801c196:	469a      	mov	sl, r3
 801c198:	462a      	mov	r2, r5
 801c19a:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c19e:	9202      	str	r2, [sp, #8]
 801c1a0:	f1a3 0220 	sub.w	r2, r3, #32
 801c1a4:	2a5a      	cmp	r2, #90	; 0x5a
 801c1a6:	f200 831a 	bhi.w	801c7de <_vfiprintf_r+0x752>
 801c1aa:	e8df f012 	tbh	[pc, r2, lsl #1]
 801c1ae:	007d      	.short	0x007d
 801c1b0:	03180318 	.word	0x03180318
 801c1b4:	03180085 	.word	0x03180085
 801c1b8:	03180318 	.word	0x03180318
 801c1bc:	03180065 	.word	0x03180065
 801c1c0:	00880318 	.word	0x00880318
 801c1c4:	03180092 	.word	0x03180092
 801c1c8:	0094008f 	.word	0x0094008f
 801c1cc:	00af0318 	.word	0x00af0318
 801c1d0:	00b200b2 	.word	0x00b200b2
 801c1d4:	00b200b2 	.word	0x00b200b2
 801c1d8:	00b200b2 	.word	0x00b200b2
 801c1dc:	00b200b2 	.word	0x00b200b2
 801c1e0:	031800b2 	.word	0x031800b2
 801c1e4:	03180318 	.word	0x03180318
 801c1e8:	03180318 	.word	0x03180318
 801c1ec:	03180318 	.word	0x03180318
 801c1f0:	03180318 	.word	0x03180318
 801c1f4:	00ea00dc 	.word	0x00ea00dc
 801c1f8:	03180318 	.word	0x03180318
 801c1fc:	03180318 	.word	0x03180318
 801c200:	03180318 	.word	0x03180318
 801c204:	03180318 	.word	0x03180318
 801c208:	03180318 	.word	0x03180318
 801c20c:	0318013a 	.word	0x0318013a
 801c210:	03180318 	.word	0x03180318
 801c214:	0318017f 	.word	0x0318017f
 801c218:	0318025d 	.word	0x0318025d
 801c21c:	027d0318 	.word	0x027d0318
 801c220:	03180318 	.word	0x03180318
 801c224:	03180318 	.word	0x03180318
 801c228:	03180318 	.word	0x03180318
 801c22c:	03180318 	.word	0x03180318
 801c230:	03180318 	.word	0x03180318
 801c234:	00ec00dc 	.word	0x00ec00dc
 801c238:	03180318 	.word	0x03180318
 801c23c:	00c20318 	.word	0x00c20318
 801c240:	00d600ec 	.word	0x00d600ec
 801c244:	00cf0318 	.word	0x00cf0318
 801c248:	01180318 	.word	0x01180318
 801c24c:	0171013c 	.word	0x0171013c
 801c250:	031800d6 	.word	0x031800d6
 801c254:	007b017f 	.word	0x007b017f
 801c258:	0318025f 	.word	0x0318025f
 801c25c:	02990318 	.word	0x02990318
 801c260:	007b0318 	.word	0x007b0318
 801c264:	aa10      	add	r2, sp, #64	; 0x40
 801c266:	4639      	mov	r1, r7
 801c268:	4648      	mov	r0, r9
 801c26a:	f7ff fedd 	bl	801c028 <__sprint_r>
 801c26e:	2800      	cmp	r0, #0
 801c270:	f040 833a 	bne.w	801c8e8 <_vfiprintf_r+0x85c>
 801c274:	ae13      	add	r6, sp, #76	; 0x4c
 801c276:	e77f      	b.n	801c178 <_vfiprintf_r+0xec>
 801c278:	4648      	mov	r0, r9
 801c27a:	f000 fdc3 	bl	801ce04 <_localeconv_r>
 801c27e:	6843      	ldr	r3, [r0, #4]
 801c280:	9309      	str	r3, [sp, #36]	; 0x24
 801c282:	4618      	mov	r0, r3
 801c284:	f7ec f9cc 	bl	8008620 <strlen>
 801c288:	9008      	str	r0, [sp, #32]
 801c28a:	4648      	mov	r0, r9
 801c28c:	f000 fdba 	bl	801ce04 <_localeconv_r>
 801c290:	6883      	ldr	r3, [r0, #8]
 801c292:	9307      	str	r3, [sp, #28]
 801c294:	9b08      	ldr	r3, [sp, #32]
 801c296:	b12b      	cbz	r3, 801c2a4 <_vfiprintf_r+0x218>
 801c298:	9b07      	ldr	r3, [sp, #28]
 801c29a:	b11b      	cbz	r3, 801c2a4 <_vfiprintf_r+0x218>
 801c29c:	781b      	ldrb	r3, [r3, #0]
 801c29e:	b10b      	cbz	r3, 801c2a4 <_vfiprintf_r+0x218>
 801c2a0:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 801c2a4:	9d02      	ldr	r5, [sp, #8]
 801c2a6:	e777      	b.n	801c198 <_vfiprintf_r+0x10c>
 801c2a8:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d1f9      	bne.n	801c2a4 <_vfiprintf_r+0x218>
 801c2b0:	2320      	movs	r3, #32
 801c2b2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801c2b6:	e7f5      	b.n	801c2a4 <_vfiprintf_r+0x218>
 801c2b8:	f04a 0a01 	orr.w	sl, sl, #1
 801c2bc:	e7f2      	b.n	801c2a4 <_vfiprintf_r+0x218>
 801c2be:	f854 3b04 	ldr.w	r3, [r4], #4
 801c2c2:	9304      	str	r3, [sp, #16]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	daed      	bge.n	801c2a4 <_vfiprintf_r+0x218>
 801c2c8:	425b      	negs	r3, r3
 801c2ca:	9304      	str	r3, [sp, #16]
 801c2cc:	f04a 0a04 	orr.w	sl, sl, #4
 801c2d0:	e7e8      	b.n	801c2a4 <_vfiprintf_r+0x218>
 801c2d2:	232b      	movs	r3, #43	; 0x2b
 801c2d4:	e7ed      	b.n	801c2b2 <_vfiprintf_r+0x226>
 801c2d6:	9a02      	ldr	r2, [sp, #8]
 801c2d8:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c2dc:	2b2a      	cmp	r3, #42	; 0x2a
 801c2de:	d112      	bne.n	801c306 <_vfiprintf_r+0x27a>
 801c2e0:	f854 3b04 	ldr.w	r3, [r4], #4
 801c2e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c2e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801c2ec:	e7da      	b.n	801c2a4 <_vfiprintf_r+0x218>
 801c2ee:	9b01      	ldr	r3, [sp, #4]
 801c2f0:	200a      	movs	r0, #10
 801c2f2:	fb00 1303 	mla	r3, r0, r3, r1
 801c2f6:	9301      	str	r3, [sp, #4]
 801c2f8:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c2fc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801c300:	2909      	cmp	r1, #9
 801c302:	d9f4      	bls.n	801c2ee <_vfiprintf_r+0x262>
 801c304:	e74b      	b.n	801c19e <_vfiprintf_r+0x112>
 801c306:	2100      	movs	r1, #0
 801c308:	9101      	str	r1, [sp, #4]
 801c30a:	e7f7      	b.n	801c2fc <_vfiprintf_r+0x270>
 801c30c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 801c310:	e7c8      	b.n	801c2a4 <_vfiprintf_r+0x218>
 801c312:	2100      	movs	r1, #0
 801c314:	9a02      	ldr	r2, [sp, #8]
 801c316:	9104      	str	r1, [sp, #16]
 801c318:	9904      	ldr	r1, [sp, #16]
 801c31a:	3b30      	subs	r3, #48	; 0x30
 801c31c:	200a      	movs	r0, #10
 801c31e:	fb00 3301 	mla	r3, r0, r1, r3
 801c322:	9304      	str	r3, [sp, #16]
 801c324:	f812 3b01 	ldrb.w	r3, [r2], #1
 801c328:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801c32c:	2909      	cmp	r1, #9
 801c32e:	d9f3      	bls.n	801c318 <_vfiprintf_r+0x28c>
 801c330:	e735      	b.n	801c19e <_vfiprintf_r+0x112>
 801c332:	9b02      	ldr	r3, [sp, #8]
 801c334:	781b      	ldrb	r3, [r3, #0]
 801c336:	2b68      	cmp	r3, #104	; 0x68
 801c338:	bf01      	itttt	eq
 801c33a:	9b02      	ldreq	r3, [sp, #8]
 801c33c:	3301      	addeq	r3, #1
 801c33e:	9302      	streq	r3, [sp, #8]
 801c340:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801c344:	bf18      	it	ne
 801c346:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 801c34a:	e7ab      	b.n	801c2a4 <_vfiprintf_r+0x218>
 801c34c:	9b02      	ldr	r3, [sp, #8]
 801c34e:	781b      	ldrb	r3, [r3, #0]
 801c350:	2b6c      	cmp	r3, #108	; 0x6c
 801c352:	d105      	bne.n	801c360 <_vfiprintf_r+0x2d4>
 801c354:	9b02      	ldr	r3, [sp, #8]
 801c356:	3301      	adds	r3, #1
 801c358:	9302      	str	r3, [sp, #8]
 801c35a:	f04a 0a20 	orr.w	sl, sl, #32
 801c35e:	e7a1      	b.n	801c2a4 <_vfiprintf_r+0x218>
 801c360:	f04a 0a10 	orr.w	sl, sl, #16
 801c364:	e79e      	b.n	801c2a4 <_vfiprintf_r+0x218>
 801c366:	46a0      	mov	r8, r4
 801c368:	f858 3b04 	ldr.w	r3, [r8], #4
 801c36c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 801c370:	2300      	movs	r3, #0
 801c372:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801c376:	2201      	movs	r2, #1
 801c378:	9201      	str	r2, [sp, #4]
 801c37a:	461d      	mov	r5, r3
 801c37c:	f10d 0b8c 	add.w	fp, sp, #140	; 0x8c
 801c380:	e0a9      	b.n	801c4d6 <_vfiprintf_r+0x44a>
 801c382:	f04a 0a10 	orr.w	sl, sl, #16
 801c386:	f01a 0f20 	tst.w	sl, #32
 801c38a:	d011      	beq.n	801c3b0 <_vfiprintf_r+0x324>
 801c38c:	3407      	adds	r4, #7
 801c38e:	f024 0307 	bic.w	r3, r4, #7
 801c392:	4698      	mov	r8, r3
 801c394:	685d      	ldr	r5, [r3, #4]
 801c396:	f858 4b08 	ldr.w	r4, [r8], #8
 801c39a:	2d00      	cmp	r5, #0
 801c39c:	da06      	bge.n	801c3ac <_vfiprintf_r+0x320>
 801c39e:	4264      	negs	r4, r4
 801c3a0:	f04f 032d 	mov.w	r3, #45	; 0x2d
 801c3a4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801c3a8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801c3ac:	2301      	movs	r3, #1
 801c3ae:	e04a      	b.n	801c446 <_vfiprintf_r+0x3ba>
 801c3b0:	46a0      	mov	r8, r4
 801c3b2:	f01a 0f10 	tst.w	sl, #16
 801c3b6:	f858 5b04 	ldr.w	r5, [r8], #4
 801c3ba:	d002      	beq.n	801c3c2 <_vfiprintf_r+0x336>
 801c3bc:	462c      	mov	r4, r5
 801c3be:	17ed      	asrs	r5, r5, #31
 801c3c0:	e7eb      	b.n	801c39a <_vfiprintf_r+0x30e>
 801c3c2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801c3c6:	d003      	beq.n	801c3d0 <_vfiprintf_r+0x344>
 801c3c8:	b22c      	sxth	r4, r5
 801c3ca:	f345 35c0 	sbfx	r5, r5, #15, #1
 801c3ce:	e7e4      	b.n	801c39a <_vfiprintf_r+0x30e>
 801c3d0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801c3d4:	d0f2      	beq.n	801c3bc <_vfiprintf_r+0x330>
 801c3d6:	b26c      	sxtb	r4, r5
 801c3d8:	f345 15c0 	sbfx	r5, r5, #7, #1
 801c3dc:	e7dd      	b.n	801c39a <_vfiprintf_r+0x30e>
 801c3de:	f01a 0f20 	tst.w	sl, #32
 801c3e2:	f104 0804 	add.w	r8, r4, #4
 801c3e6:	d007      	beq.n	801c3f8 <_vfiprintf_r+0x36c>
 801c3e8:	9a03      	ldr	r2, [sp, #12]
 801c3ea:	6823      	ldr	r3, [r4, #0]
 801c3ec:	9903      	ldr	r1, [sp, #12]
 801c3ee:	17d2      	asrs	r2, r2, #31
 801c3f0:	e9c3 1200 	strd	r1, r2, [r3]
 801c3f4:	4644      	mov	r4, r8
 801c3f6:	e6a9      	b.n	801c14c <_vfiprintf_r+0xc0>
 801c3f8:	f01a 0f10 	tst.w	sl, #16
 801c3fc:	d003      	beq.n	801c406 <_vfiprintf_r+0x37a>
 801c3fe:	6823      	ldr	r3, [r4, #0]
 801c400:	9a03      	ldr	r2, [sp, #12]
 801c402:	601a      	str	r2, [r3, #0]
 801c404:	e7f6      	b.n	801c3f4 <_vfiprintf_r+0x368>
 801c406:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801c40a:	d003      	beq.n	801c414 <_vfiprintf_r+0x388>
 801c40c:	6823      	ldr	r3, [r4, #0]
 801c40e:	9a03      	ldr	r2, [sp, #12]
 801c410:	801a      	strh	r2, [r3, #0]
 801c412:	e7ef      	b.n	801c3f4 <_vfiprintf_r+0x368>
 801c414:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801c418:	d0f1      	beq.n	801c3fe <_vfiprintf_r+0x372>
 801c41a:	6823      	ldr	r3, [r4, #0]
 801c41c:	9a03      	ldr	r2, [sp, #12]
 801c41e:	701a      	strb	r2, [r3, #0]
 801c420:	e7e8      	b.n	801c3f4 <_vfiprintf_r+0x368>
 801c422:	f04a 0a10 	orr.w	sl, sl, #16
 801c426:	f01a 0320 	ands.w	r3, sl, #32
 801c42a:	d01f      	beq.n	801c46c <_vfiprintf_r+0x3e0>
 801c42c:	3407      	adds	r4, #7
 801c42e:	f024 0307 	bic.w	r3, r4, #7
 801c432:	4698      	mov	r8, r3
 801c434:	685d      	ldr	r5, [r3, #4]
 801c436:	f858 4b08 	ldr.w	r4, [r8], #8
 801c43a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801c43e:	2300      	movs	r3, #0
 801c440:	2200      	movs	r2, #0
 801c442:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 801c446:	9a01      	ldr	r2, [sp, #4]
 801c448:	3201      	adds	r2, #1
 801c44a:	f000 827b 	beq.w	801c944 <_vfiprintf_r+0x8b8>
 801c44e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 801c452:	9205      	str	r2, [sp, #20]
 801c454:	ea54 0205 	orrs.w	r2, r4, r5
 801c458:	f040 827a 	bne.w	801c950 <_vfiprintf_r+0x8c4>
 801c45c:	9a01      	ldr	r2, [sp, #4]
 801c45e:	2a00      	cmp	r2, #0
 801c460:	f000 81b2 	beq.w	801c7c8 <_vfiprintf_r+0x73c>
 801c464:	2b01      	cmp	r3, #1
 801c466:	f040 8276 	bne.w	801c956 <_vfiprintf_r+0x8ca>
 801c46a:	e151      	b.n	801c710 <_vfiprintf_r+0x684>
 801c46c:	46a0      	mov	r8, r4
 801c46e:	f01a 0510 	ands.w	r5, sl, #16
 801c472:	f858 4b04 	ldr.w	r4, [r8], #4
 801c476:	d001      	beq.n	801c47c <_vfiprintf_r+0x3f0>
 801c478:	461d      	mov	r5, r3
 801c47a:	e7de      	b.n	801c43a <_vfiprintf_r+0x3ae>
 801c47c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801c480:	d001      	beq.n	801c486 <_vfiprintf_r+0x3fa>
 801c482:	b2a4      	uxth	r4, r4
 801c484:	e7d9      	b.n	801c43a <_vfiprintf_r+0x3ae>
 801c486:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801c48a:	d0d6      	beq.n	801c43a <_vfiprintf_r+0x3ae>
 801c48c:	b2e4      	uxtb	r4, r4
 801c48e:	e7f3      	b.n	801c478 <_vfiprintf_r+0x3ec>
 801c490:	46a0      	mov	r8, r4
 801c492:	f647 0330 	movw	r3, #30768	; 0x7830
 801c496:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 801c49a:	f858 4b04 	ldr.w	r4, [r8], #4
 801c49e:	4b9f      	ldr	r3, [pc, #636]	; (801c71c <_vfiprintf_r+0x690>)
 801c4a0:	9306      	str	r3, [sp, #24]
 801c4a2:	2500      	movs	r5, #0
 801c4a4:	f04a 0a02 	orr.w	sl, sl, #2
 801c4a8:	2302      	movs	r3, #2
 801c4aa:	e7c9      	b.n	801c440 <_vfiprintf_r+0x3b4>
 801c4ac:	9b01      	ldr	r3, [sp, #4]
 801c4ae:	46a0      	mov	r8, r4
 801c4b0:	2500      	movs	r5, #0
 801c4b2:	1c5c      	adds	r4, r3, #1
 801c4b4:	f858 bb04 	ldr.w	fp, [r8], #4
 801c4b8:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
 801c4bc:	f000 80cf 	beq.w	801c65e <_vfiprintf_r+0x5d2>
 801c4c0:	461a      	mov	r2, r3
 801c4c2:	4629      	mov	r1, r5
 801c4c4:	4658      	mov	r0, fp
 801c4c6:	f7ec f85b 	bl	8008580 <memchr>
 801c4ca:	2800      	cmp	r0, #0
 801c4cc:	f000 8191 	beq.w	801c7f2 <_vfiprintf_r+0x766>
 801c4d0:	eba0 030b 	sub.w	r3, r0, fp
 801c4d4:	9301      	str	r3, [sp, #4]
 801c4d6:	9b01      	ldr	r3, [sp, #4]
 801c4d8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 801c4dc:	42ab      	cmp	r3, r5
 801c4de:	bfb8      	it	lt
 801c4e0:	462b      	movlt	r3, r5
 801c4e2:	9305      	str	r3, [sp, #20]
 801c4e4:	b10a      	cbz	r2, 801c4ea <_vfiprintf_r+0x45e>
 801c4e6:	3301      	adds	r3, #1
 801c4e8:	9305      	str	r3, [sp, #20]
 801c4ea:	f01a 0302 	ands.w	r3, sl, #2
 801c4ee:	930a      	str	r3, [sp, #40]	; 0x28
 801c4f0:	bf1e      	ittt	ne
 801c4f2:	9b05      	ldrne	r3, [sp, #20]
 801c4f4:	3302      	addne	r3, #2
 801c4f6:	9305      	strne	r3, [sp, #20]
 801c4f8:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 801c4fc:	930b      	str	r3, [sp, #44]	; 0x2c
 801c4fe:	d11f      	bne.n	801c540 <_vfiprintf_r+0x4b4>
 801c500:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c504:	1a9c      	subs	r4, r3, r2
 801c506:	2c00      	cmp	r4, #0
 801c508:	dd1a      	ble.n	801c540 <_vfiprintf_r+0x4b4>
 801c50a:	4b85      	ldr	r3, [pc, #532]	; (801c720 <_vfiprintf_r+0x694>)
 801c50c:	6033      	str	r3, [r6, #0]
 801c50e:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c512:	2c10      	cmp	r4, #16
 801c514:	f102 0201 	add.w	r2, r2, #1
 801c518:	f106 0008 	add.w	r0, r6, #8
 801c51c:	f300 816b 	bgt.w	801c7f6 <_vfiprintf_r+0x76a>
 801c520:	6074      	str	r4, [r6, #4]
 801c522:	2a07      	cmp	r2, #7
 801c524:	440c      	add	r4, r1
 801c526:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 801c52a:	f340 8179 	ble.w	801c820 <_vfiprintf_r+0x794>
 801c52e:	aa10      	add	r2, sp, #64	; 0x40
 801c530:	4639      	mov	r1, r7
 801c532:	4648      	mov	r0, r9
 801c534:	f7ff fd78 	bl	801c028 <__sprint_r>
 801c538:	2800      	cmp	r0, #0
 801c53a:	f040 81d5 	bne.w	801c8e8 <_vfiprintf_r+0x85c>
 801c53e:	ae13      	add	r6, sp, #76	; 0x4c
 801c540:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 801c544:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c548:	b160      	cbz	r0, 801c564 <_vfiprintf_r+0x4d8>
 801c54a:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
 801c54e:	3201      	adds	r2, #1
 801c550:	6030      	str	r0, [r6, #0]
 801c552:	2001      	movs	r0, #1
 801c554:	4401      	add	r1, r0
 801c556:	2a07      	cmp	r2, #7
 801c558:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c55c:	6070      	str	r0, [r6, #4]
 801c55e:	f300 8161 	bgt.w	801c824 <_vfiprintf_r+0x798>
 801c562:	3608      	adds	r6, #8
 801c564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c566:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c56a:	b15b      	cbz	r3, 801c584 <_vfiprintf_r+0x4f8>
 801c56c:	a80f      	add	r0, sp, #60	; 0x3c
 801c56e:	3201      	adds	r2, #1
 801c570:	6030      	str	r0, [r6, #0]
 801c572:	2002      	movs	r0, #2
 801c574:	4401      	add	r1, r0
 801c576:	2a07      	cmp	r2, #7
 801c578:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c57c:	6070      	str	r0, [r6, #4]
 801c57e:	f300 815a 	bgt.w	801c836 <_vfiprintf_r+0x7aa>
 801c582:	3608      	adds	r6, #8
 801c584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c586:	2b80      	cmp	r3, #128	; 0x80
 801c588:	d11f      	bne.n	801c5ca <_vfiprintf_r+0x53e>
 801c58a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c58e:	1a9c      	subs	r4, r3, r2
 801c590:	2c00      	cmp	r4, #0
 801c592:	dd1a      	ble.n	801c5ca <_vfiprintf_r+0x53e>
 801c594:	4b63      	ldr	r3, [pc, #396]	; (801c724 <_vfiprintf_r+0x698>)
 801c596:	6033      	str	r3, [r6, #0]
 801c598:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c59c:	2c10      	cmp	r4, #16
 801c59e:	f102 0201 	add.w	r2, r2, #1
 801c5a2:	f106 0008 	add.w	r0, r6, #8
 801c5a6:	f300 814f 	bgt.w	801c848 <_vfiprintf_r+0x7bc>
 801c5aa:	6074      	str	r4, [r6, #4]
 801c5ac:	2a07      	cmp	r2, #7
 801c5ae:	440c      	add	r4, r1
 801c5b0:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 801c5b4:	f340 815d 	ble.w	801c872 <_vfiprintf_r+0x7e6>
 801c5b8:	aa10      	add	r2, sp, #64	; 0x40
 801c5ba:	4639      	mov	r1, r7
 801c5bc:	4648      	mov	r0, r9
 801c5be:	f7ff fd33 	bl	801c028 <__sprint_r>
 801c5c2:	2800      	cmp	r0, #0
 801c5c4:	f040 8190 	bne.w	801c8e8 <_vfiprintf_r+0x85c>
 801c5c8:	ae13      	add	r6, sp, #76	; 0x4c
 801c5ca:	9b01      	ldr	r3, [sp, #4]
 801c5cc:	1aec      	subs	r4, r5, r3
 801c5ce:	2c00      	cmp	r4, #0
 801c5d0:	dd1b      	ble.n	801c60a <_vfiprintf_r+0x57e>
 801c5d2:	4d54      	ldr	r5, [pc, #336]	; (801c724 <_vfiprintf_r+0x698>)
 801c5d4:	2310      	movs	r3, #16
 801c5d6:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c5da:	2c10      	cmp	r4, #16
 801c5dc:	f102 0201 	add.w	r2, r2, #1
 801c5e0:	f106 0008 	add.w	r0, r6, #8
 801c5e4:	6035      	str	r5, [r6, #0]
 801c5e6:	f300 8146 	bgt.w	801c876 <_vfiprintf_r+0x7ea>
 801c5ea:	6074      	str	r4, [r6, #4]
 801c5ec:	2a07      	cmp	r2, #7
 801c5ee:	440c      	add	r4, r1
 801c5f0:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 801c5f4:	f340 8150 	ble.w	801c898 <_vfiprintf_r+0x80c>
 801c5f8:	aa10      	add	r2, sp, #64	; 0x40
 801c5fa:	4639      	mov	r1, r7
 801c5fc:	4648      	mov	r0, r9
 801c5fe:	f7ff fd13 	bl	801c028 <__sprint_r>
 801c602:	2800      	cmp	r0, #0
 801c604:	f040 8170 	bne.w	801c8e8 <_vfiprintf_r+0x85c>
 801c608:	ae13      	add	r6, sp, #76	; 0x4c
 801c60a:	9b01      	ldr	r3, [sp, #4]
 801c60c:	9a01      	ldr	r2, [sp, #4]
 801c60e:	6073      	str	r3, [r6, #4]
 801c610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c612:	f8c6 b000 	str.w	fp, [r6]
 801c616:	4413      	add	r3, r2
 801c618:	9312      	str	r3, [sp, #72]	; 0x48
 801c61a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c61c:	3301      	adds	r3, #1
 801c61e:	2b07      	cmp	r3, #7
 801c620:	9311      	str	r3, [sp, #68]	; 0x44
 801c622:	f300 813b 	bgt.w	801c89c <_vfiprintf_r+0x810>
 801c626:	f106 0308 	add.w	r3, r6, #8
 801c62a:	f01a 0f04 	tst.w	sl, #4
 801c62e:	f040 813d 	bne.w	801c8ac <_vfiprintf_r+0x820>
 801c632:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801c636:	9905      	ldr	r1, [sp, #20]
 801c638:	428a      	cmp	r2, r1
 801c63a:	bfac      	ite	ge
 801c63c:	189b      	addge	r3, r3, r2
 801c63e:	185b      	addlt	r3, r3, r1
 801c640:	9303      	str	r3, [sp, #12]
 801c642:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c644:	b13b      	cbz	r3, 801c656 <_vfiprintf_r+0x5ca>
 801c646:	aa10      	add	r2, sp, #64	; 0x40
 801c648:	4639      	mov	r1, r7
 801c64a:	4648      	mov	r0, r9
 801c64c:	f7ff fcec 	bl	801c028 <__sprint_r>
 801c650:	2800      	cmp	r0, #0
 801c652:	f040 8149 	bne.w	801c8e8 <_vfiprintf_r+0x85c>
 801c656:	2300      	movs	r3, #0
 801c658:	9311      	str	r3, [sp, #68]	; 0x44
 801c65a:	ae13      	add	r6, sp, #76	; 0x4c
 801c65c:	e6ca      	b.n	801c3f4 <_vfiprintf_r+0x368>
 801c65e:	4658      	mov	r0, fp
 801c660:	f7eb ffde 	bl	8008620 <strlen>
 801c664:	9001      	str	r0, [sp, #4]
 801c666:	e736      	b.n	801c4d6 <_vfiprintf_r+0x44a>
 801c668:	f04a 0a10 	orr.w	sl, sl, #16
 801c66c:	f01a 0320 	ands.w	r3, sl, #32
 801c670:	d008      	beq.n	801c684 <_vfiprintf_r+0x5f8>
 801c672:	3407      	adds	r4, #7
 801c674:	f024 0307 	bic.w	r3, r4, #7
 801c678:	4698      	mov	r8, r3
 801c67a:	685d      	ldr	r5, [r3, #4]
 801c67c:	f858 4b08 	ldr.w	r4, [r8], #8
 801c680:	2301      	movs	r3, #1
 801c682:	e6dd      	b.n	801c440 <_vfiprintf_r+0x3b4>
 801c684:	46a0      	mov	r8, r4
 801c686:	f01a 0510 	ands.w	r5, sl, #16
 801c68a:	f858 4b04 	ldr.w	r4, [r8], #4
 801c68e:	d001      	beq.n	801c694 <_vfiprintf_r+0x608>
 801c690:	461d      	mov	r5, r3
 801c692:	e7f5      	b.n	801c680 <_vfiprintf_r+0x5f4>
 801c694:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 801c698:	d001      	beq.n	801c69e <_vfiprintf_r+0x612>
 801c69a:	b2a4      	uxth	r4, r4
 801c69c:	e7f0      	b.n	801c680 <_vfiprintf_r+0x5f4>
 801c69e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801c6a2:	d0ed      	beq.n	801c680 <_vfiprintf_r+0x5f4>
 801c6a4:	b2e4      	uxtb	r4, r4
 801c6a6:	e7f3      	b.n	801c690 <_vfiprintf_r+0x604>
 801c6a8:	4a1f      	ldr	r2, [pc, #124]	; (801c728 <_vfiprintf_r+0x69c>)
 801c6aa:	9206      	str	r2, [sp, #24]
 801c6ac:	f01a 0220 	ands.w	r2, sl, #32
 801c6b0:	d018      	beq.n	801c6e4 <_vfiprintf_r+0x658>
 801c6b2:	3407      	adds	r4, #7
 801c6b4:	f024 0207 	bic.w	r2, r4, #7
 801c6b8:	4690      	mov	r8, r2
 801c6ba:	6855      	ldr	r5, [r2, #4]
 801c6bc:	f858 4b08 	ldr.w	r4, [r8], #8
 801c6c0:	f01a 0f01 	tst.w	sl, #1
 801c6c4:	d009      	beq.n	801c6da <_vfiprintf_r+0x64e>
 801c6c6:	ea54 0205 	orrs.w	r2, r4, r5
 801c6ca:	bf1f      	itttt	ne
 801c6cc:	2230      	movne	r2, #48	; 0x30
 801c6ce:	f88d 203c 	strbne.w	r2, [sp, #60]	; 0x3c
 801c6d2:	f88d 303d 	strbne.w	r3, [sp, #61]	; 0x3d
 801c6d6:	f04a 0a02 	orrne.w	sl, sl, #2
 801c6da:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801c6de:	e6e3      	b.n	801c4a8 <_vfiprintf_r+0x41c>
 801c6e0:	4a0e      	ldr	r2, [pc, #56]	; (801c71c <_vfiprintf_r+0x690>)
 801c6e2:	e7e2      	b.n	801c6aa <_vfiprintf_r+0x61e>
 801c6e4:	46a0      	mov	r8, r4
 801c6e6:	f01a 0510 	ands.w	r5, sl, #16
 801c6ea:	f858 4b04 	ldr.w	r4, [r8], #4
 801c6ee:	d001      	beq.n	801c6f4 <_vfiprintf_r+0x668>
 801c6f0:	4615      	mov	r5, r2
 801c6f2:	e7e5      	b.n	801c6c0 <_vfiprintf_r+0x634>
 801c6f4:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 801c6f8:	d001      	beq.n	801c6fe <_vfiprintf_r+0x672>
 801c6fa:	b2a4      	uxth	r4, r4
 801c6fc:	e7e0      	b.n	801c6c0 <_vfiprintf_r+0x634>
 801c6fe:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 801c702:	d0dd      	beq.n	801c6c0 <_vfiprintf_r+0x634>
 801c704:	b2e4      	uxtb	r4, r4
 801c706:	e7f3      	b.n	801c6f0 <_vfiprintf_r+0x664>
 801c708:	2c0a      	cmp	r4, #10
 801c70a:	f175 0300 	sbcs.w	r3, r5, #0
 801c70e:	d20d      	bcs.n	801c72c <_vfiprintf_r+0x6a0>
 801c710:	3430      	adds	r4, #48	; 0x30
 801c712:	f88d 40ef 	strb.w	r4, [sp, #239]	; 0xef
 801c716:	f10d 0bef 	add.w	fp, sp, #239	; 0xef
 801c71a:	e138      	b.n	801c98e <_vfiprintf_r+0x902>
 801c71c:	08020975 	.word	0x08020975
 801c720:	080209d9 	.word	0x080209d9
 801c724:	080209e9 	.word	0x080209e9
 801c728:	08020986 	.word	0x08020986
 801c72c:	ab3c      	add	r3, sp, #240	; 0xf0
 801c72e:	930a      	str	r3, [sp, #40]	; 0x28
 801c730:	9b05      	ldr	r3, [sp, #20]
 801c732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c736:	f04f 0a00 	mov.w	sl, #0
 801c73a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c73c:	220a      	movs	r2, #10
 801c73e:	2300      	movs	r3, #0
 801c740:	4620      	mov	r0, r4
 801c742:	4629      	mov	r1, r5
 801c744:	f7ec fd56 	bl	80091f4 <__aeabi_uldivmod>
 801c748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c74a:	3230      	adds	r2, #48	; 0x30
 801c74c:	f103 3bff 	add.w	fp, r3, #4294967295
 801c750:	f803 2c01 	strb.w	r2, [r3, #-1]
 801c754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c756:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801c75a:	f10a 0a01 	add.w	sl, sl, #1
 801c75e:	b1cb      	cbz	r3, 801c794 <_vfiprintf_r+0x708>
 801c760:	9b07      	ldr	r3, [sp, #28]
 801c762:	781a      	ldrb	r2, [r3, #0]
 801c764:	4552      	cmp	r2, sl
 801c766:	d115      	bne.n	801c794 <_vfiprintf_r+0x708>
 801c768:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c76c:	d012      	beq.n	801c794 <_vfiprintf_r+0x708>
 801c76e:	2c0a      	cmp	r4, #10
 801c770:	f175 0200 	sbcs.w	r2, r5, #0
 801c774:	d30e      	bcc.n	801c794 <_vfiprintf_r+0x708>
 801c776:	9b08      	ldr	r3, [sp, #32]
 801c778:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c77a:	ebab 0b03 	sub.w	fp, fp, r3
 801c77e:	461a      	mov	r2, r3
 801c780:	4658      	mov	r0, fp
 801c782:	f000 fb26 	bl	801cdd2 <strncpy>
 801c786:	9b07      	ldr	r3, [sp, #28]
 801c788:	785a      	ldrb	r2, [r3, #1]
 801c78a:	b16a      	cbz	r2, 801c7a8 <_vfiprintf_r+0x71c>
 801c78c:	3301      	adds	r3, #1
 801c78e:	9307      	str	r3, [sp, #28]
 801c790:	f04f 0a00 	mov.w	sl, #0
 801c794:	2c0a      	cmp	r4, #10
 801c796:	f175 0500 	sbcs.w	r5, r5, #0
 801c79a:	f0c0 80f8 	bcc.w	801c98e <_vfiprintf_r+0x902>
 801c79e:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 801c7a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801c7a6:	e7c9      	b.n	801c73c <_vfiprintf_r+0x6b0>
 801c7a8:	4692      	mov	sl, r2
 801c7aa:	e7f3      	b.n	801c794 <_vfiprintf_r+0x708>
 801c7ac:	f004 020f 	and.w	r2, r4, #15
 801c7b0:	9b06      	ldr	r3, [sp, #24]
 801c7b2:	0924      	lsrs	r4, r4, #4
 801c7b4:	5c9a      	ldrb	r2, [r3, r2]
 801c7b6:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 801c7ba:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 801c7be:	092d      	lsrs	r5, r5, #4
 801c7c0:	ea54 0205 	orrs.w	r2, r4, r5
 801c7c4:	d1f2      	bne.n	801c7ac <_vfiprintf_r+0x720>
 801c7c6:	e0e2      	b.n	801c98e <_vfiprintf_r+0x902>
 801c7c8:	b933      	cbnz	r3, 801c7d8 <_vfiprintf_r+0x74c>
 801c7ca:	f01a 0f01 	tst.w	sl, #1
 801c7ce:	d003      	beq.n	801c7d8 <_vfiprintf_r+0x74c>
 801c7d0:	2330      	movs	r3, #48	; 0x30
 801c7d2:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 801c7d6:	e79e      	b.n	801c716 <_vfiprintf_r+0x68a>
 801c7d8:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 801c7dc:	e0d7      	b.n	801c98e <_vfiprintf_r+0x902>
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	f000 80a3 	beq.w	801c92a <_vfiprintf_r+0x89e>
 801c7e4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 801c7e8:	2300      	movs	r3, #0
 801c7ea:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 801c7ee:	46a0      	mov	r8, r4
 801c7f0:	e5c1      	b.n	801c376 <_vfiprintf_r+0x2ea>
 801c7f2:	4605      	mov	r5, r0
 801c7f4:	e66f      	b.n	801c4d6 <_vfiprintf_r+0x44a>
 801c7f6:	f04f 0c10 	mov.w	ip, #16
 801c7fa:	4461      	add	r1, ip
 801c7fc:	2a07      	cmp	r2, #7
 801c7fe:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c802:	f8c6 c004 	str.w	ip, [r6, #4]
 801c806:	dd08      	ble.n	801c81a <_vfiprintf_r+0x78e>
 801c808:	aa10      	add	r2, sp, #64	; 0x40
 801c80a:	4639      	mov	r1, r7
 801c80c:	4648      	mov	r0, r9
 801c80e:	f7ff fc0b 	bl	801c028 <__sprint_r>
 801c812:	2800      	cmp	r0, #0
 801c814:	d168      	bne.n	801c8e8 <_vfiprintf_r+0x85c>
 801c816:	4b62      	ldr	r3, [pc, #392]	; (801c9a0 <_vfiprintf_r+0x914>)
 801c818:	a813      	add	r0, sp, #76	; 0x4c
 801c81a:	3c10      	subs	r4, #16
 801c81c:	4606      	mov	r6, r0
 801c81e:	e675      	b.n	801c50c <_vfiprintf_r+0x480>
 801c820:	4606      	mov	r6, r0
 801c822:	e68d      	b.n	801c540 <_vfiprintf_r+0x4b4>
 801c824:	aa10      	add	r2, sp, #64	; 0x40
 801c826:	4639      	mov	r1, r7
 801c828:	4648      	mov	r0, r9
 801c82a:	f7ff fbfd 	bl	801c028 <__sprint_r>
 801c82e:	2800      	cmp	r0, #0
 801c830:	d15a      	bne.n	801c8e8 <_vfiprintf_r+0x85c>
 801c832:	ae13      	add	r6, sp, #76	; 0x4c
 801c834:	e696      	b.n	801c564 <_vfiprintf_r+0x4d8>
 801c836:	aa10      	add	r2, sp, #64	; 0x40
 801c838:	4639      	mov	r1, r7
 801c83a:	4648      	mov	r0, r9
 801c83c:	f7ff fbf4 	bl	801c028 <__sprint_r>
 801c840:	2800      	cmp	r0, #0
 801c842:	d151      	bne.n	801c8e8 <_vfiprintf_r+0x85c>
 801c844:	ae13      	add	r6, sp, #76	; 0x4c
 801c846:	e69d      	b.n	801c584 <_vfiprintf_r+0x4f8>
 801c848:	f04f 0c10 	mov.w	ip, #16
 801c84c:	4461      	add	r1, ip
 801c84e:	2a07      	cmp	r2, #7
 801c850:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c854:	f8c6 c004 	str.w	ip, [r6, #4]
 801c858:	dd08      	ble.n	801c86c <_vfiprintf_r+0x7e0>
 801c85a:	aa10      	add	r2, sp, #64	; 0x40
 801c85c:	4639      	mov	r1, r7
 801c85e:	4648      	mov	r0, r9
 801c860:	f7ff fbe2 	bl	801c028 <__sprint_r>
 801c864:	2800      	cmp	r0, #0
 801c866:	d13f      	bne.n	801c8e8 <_vfiprintf_r+0x85c>
 801c868:	4b4e      	ldr	r3, [pc, #312]	; (801c9a4 <_vfiprintf_r+0x918>)
 801c86a:	a813      	add	r0, sp, #76	; 0x4c
 801c86c:	3c10      	subs	r4, #16
 801c86e:	4606      	mov	r6, r0
 801c870:	e691      	b.n	801c596 <_vfiprintf_r+0x50a>
 801c872:	4606      	mov	r6, r0
 801c874:	e6a9      	b.n	801c5ca <_vfiprintf_r+0x53e>
 801c876:	3110      	adds	r1, #16
 801c878:	2a07      	cmp	r2, #7
 801c87a:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c87e:	6073      	str	r3, [r6, #4]
 801c880:	dd07      	ble.n	801c892 <_vfiprintf_r+0x806>
 801c882:	aa10      	add	r2, sp, #64	; 0x40
 801c884:	4639      	mov	r1, r7
 801c886:	4648      	mov	r0, r9
 801c888:	f7ff fbce 	bl	801c028 <__sprint_r>
 801c88c:	bb60      	cbnz	r0, 801c8e8 <_vfiprintf_r+0x85c>
 801c88e:	a813      	add	r0, sp, #76	; 0x4c
 801c890:	2310      	movs	r3, #16
 801c892:	3c10      	subs	r4, #16
 801c894:	4606      	mov	r6, r0
 801c896:	e69e      	b.n	801c5d6 <_vfiprintf_r+0x54a>
 801c898:	4606      	mov	r6, r0
 801c89a:	e6b6      	b.n	801c60a <_vfiprintf_r+0x57e>
 801c89c:	aa10      	add	r2, sp, #64	; 0x40
 801c89e:	4639      	mov	r1, r7
 801c8a0:	4648      	mov	r0, r9
 801c8a2:	f7ff fbc1 	bl	801c028 <__sprint_r>
 801c8a6:	b9f8      	cbnz	r0, 801c8e8 <_vfiprintf_r+0x85c>
 801c8a8:	ab13      	add	r3, sp, #76	; 0x4c
 801c8aa:	e6be      	b.n	801c62a <_vfiprintf_r+0x59e>
 801c8ac:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801c8b0:	1a54      	subs	r4, r2, r1
 801c8b2:	2c00      	cmp	r4, #0
 801c8b4:	f77f aebd 	ble.w	801c632 <_vfiprintf_r+0x5a6>
 801c8b8:	4d39      	ldr	r5, [pc, #228]	; (801c9a0 <_vfiprintf_r+0x914>)
 801c8ba:	2610      	movs	r6, #16
 801c8bc:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 801c8c0:	2c10      	cmp	r4, #16
 801c8c2:	f102 0201 	add.w	r2, r2, #1
 801c8c6:	601d      	str	r5, [r3, #0]
 801c8c8:	dc1d      	bgt.n	801c906 <_vfiprintf_r+0x87a>
 801c8ca:	605c      	str	r4, [r3, #4]
 801c8cc:	2a07      	cmp	r2, #7
 801c8ce:	440c      	add	r4, r1
 801c8d0:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
 801c8d4:	f77f aead 	ble.w	801c632 <_vfiprintf_r+0x5a6>
 801c8d8:	aa10      	add	r2, sp, #64	; 0x40
 801c8da:	4639      	mov	r1, r7
 801c8dc:	4648      	mov	r0, r9
 801c8de:	f7ff fba3 	bl	801c028 <__sprint_r>
 801c8e2:	2800      	cmp	r0, #0
 801c8e4:	f43f aea5 	beq.w	801c632 <_vfiprintf_r+0x5a6>
 801c8e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c8ea:	07d9      	lsls	r1, r3, #31
 801c8ec:	d405      	bmi.n	801c8fa <_vfiprintf_r+0x86e>
 801c8ee:	89bb      	ldrh	r3, [r7, #12]
 801c8f0:	059a      	lsls	r2, r3, #22
 801c8f2:	d402      	bmi.n	801c8fa <_vfiprintf_r+0x86e>
 801c8f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801c8f6:	f7fc fa48 	bl	8018d8a <__retarget_lock_release_recursive>
 801c8fa:	89bb      	ldrh	r3, [r7, #12]
 801c8fc:	065b      	lsls	r3, r3, #25
 801c8fe:	f57f abf6 	bpl.w	801c0ee <_vfiprintf_r+0x62>
 801c902:	f7ff bbf1 	b.w	801c0e8 <_vfiprintf_r+0x5c>
 801c906:	3110      	adds	r1, #16
 801c908:	2a07      	cmp	r2, #7
 801c90a:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 801c90e:	605e      	str	r6, [r3, #4]
 801c910:	dc02      	bgt.n	801c918 <_vfiprintf_r+0x88c>
 801c912:	3308      	adds	r3, #8
 801c914:	3c10      	subs	r4, #16
 801c916:	e7d1      	b.n	801c8bc <_vfiprintf_r+0x830>
 801c918:	aa10      	add	r2, sp, #64	; 0x40
 801c91a:	4639      	mov	r1, r7
 801c91c:	4648      	mov	r0, r9
 801c91e:	f7ff fb83 	bl	801c028 <__sprint_r>
 801c922:	2800      	cmp	r0, #0
 801c924:	d1e0      	bne.n	801c8e8 <_vfiprintf_r+0x85c>
 801c926:	ab13      	add	r3, sp, #76	; 0x4c
 801c928:	e7f4      	b.n	801c914 <_vfiprintf_r+0x888>
 801c92a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c92c:	b913      	cbnz	r3, 801c934 <_vfiprintf_r+0x8a8>
 801c92e:	2300      	movs	r3, #0
 801c930:	9311      	str	r3, [sp, #68]	; 0x44
 801c932:	e7d9      	b.n	801c8e8 <_vfiprintf_r+0x85c>
 801c934:	aa10      	add	r2, sp, #64	; 0x40
 801c936:	4639      	mov	r1, r7
 801c938:	4648      	mov	r0, r9
 801c93a:	f7ff fb75 	bl	801c028 <__sprint_r>
 801c93e:	2800      	cmp	r0, #0
 801c940:	d0f5      	beq.n	801c92e <_vfiprintf_r+0x8a2>
 801c942:	e7d1      	b.n	801c8e8 <_vfiprintf_r+0x85c>
 801c944:	ea54 0205 	orrs.w	r2, r4, r5
 801c948:	f8cd a014 	str.w	sl, [sp, #20]
 801c94c:	f43f ad8a 	beq.w	801c464 <_vfiprintf_r+0x3d8>
 801c950:	2b01      	cmp	r3, #1
 801c952:	f43f aed9 	beq.w	801c708 <_vfiprintf_r+0x67c>
 801c956:	2b02      	cmp	r3, #2
 801c958:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
 801c95c:	f43f af26 	beq.w	801c7ac <_vfiprintf_r+0x720>
 801c960:	f004 0207 	and.w	r2, r4, #7
 801c964:	08e4      	lsrs	r4, r4, #3
 801c966:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801c96a:	08ed      	lsrs	r5, r5, #3
 801c96c:	3230      	adds	r2, #48	; 0x30
 801c96e:	ea54 0005 	orrs.w	r0, r4, r5
 801c972:	4659      	mov	r1, fp
 801c974:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 801c978:	d1f2      	bne.n	801c960 <_vfiprintf_r+0x8d4>
 801c97a:	9b05      	ldr	r3, [sp, #20]
 801c97c:	07d8      	lsls	r0, r3, #31
 801c97e:	d506      	bpl.n	801c98e <_vfiprintf_r+0x902>
 801c980:	2a30      	cmp	r2, #48	; 0x30
 801c982:	d004      	beq.n	801c98e <_vfiprintf_r+0x902>
 801c984:	2230      	movs	r2, #48	; 0x30
 801c986:	f80b 2c01 	strb.w	r2, [fp, #-1]
 801c98a:	f1a1 0b02 	sub.w	fp, r1, #2
 801c98e:	ab3c      	add	r3, sp, #240	; 0xf0
 801c990:	eba3 030b 	sub.w	r3, r3, fp
 801c994:	9d01      	ldr	r5, [sp, #4]
 801c996:	f8dd a014 	ldr.w	sl, [sp, #20]
 801c99a:	9301      	str	r3, [sp, #4]
 801c99c:	e59b      	b.n	801c4d6 <_vfiprintf_r+0x44a>
 801c99e:	bf00      	nop
 801c9a0:	080209d9 	.word	0x080209d9
 801c9a4:	080209e9 	.word	0x080209e9

0801c9a8 <__sbprintf>:
 801c9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9aa:	461f      	mov	r7, r3
 801c9ac:	898b      	ldrh	r3, [r1, #12]
 801c9ae:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 801c9b2:	f023 0302 	bic.w	r3, r3, #2
 801c9b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c9ba:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801c9bc:	9319      	str	r3, [sp, #100]	; 0x64
 801c9be:	89cb      	ldrh	r3, [r1, #14]
 801c9c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c9c4:	69cb      	ldr	r3, [r1, #28]
 801c9c6:	9307      	str	r3, [sp, #28]
 801c9c8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801c9ca:	9309      	str	r3, [sp, #36]	; 0x24
 801c9cc:	ab1a      	add	r3, sp, #104	; 0x68
 801c9ce:	9300      	str	r3, [sp, #0]
 801c9d0:	9304      	str	r3, [sp, #16]
 801c9d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c9d6:	4615      	mov	r5, r2
 801c9d8:	4606      	mov	r6, r0
 801c9da:	9302      	str	r3, [sp, #8]
 801c9dc:	9305      	str	r3, [sp, #20]
 801c9de:	a816      	add	r0, sp, #88	; 0x58
 801c9e0:	2300      	movs	r3, #0
 801c9e2:	460c      	mov	r4, r1
 801c9e4:	9306      	str	r3, [sp, #24]
 801c9e6:	f7fc f9cd 	bl	8018d84 <__retarget_lock_init_recursive>
 801c9ea:	462a      	mov	r2, r5
 801c9ec:	463b      	mov	r3, r7
 801c9ee:	4669      	mov	r1, sp
 801c9f0:	4630      	mov	r0, r6
 801c9f2:	f7ff fb4b 	bl	801c08c <_vfiprintf_r>
 801c9f6:	1e05      	subs	r5, r0, #0
 801c9f8:	db07      	blt.n	801ca0a <__sbprintf+0x62>
 801c9fa:	4669      	mov	r1, sp
 801c9fc:	4630      	mov	r0, r6
 801c9fe:	f000 f8f5 	bl	801cbec <_fflush_r>
 801ca02:	2800      	cmp	r0, #0
 801ca04:	bf18      	it	ne
 801ca06:	f04f 35ff 	movne.w	r5, #4294967295
 801ca0a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ca0e:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ca10:	065b      	lsls	r3, r3, #25
 801ca12:	bf42      	ittt	mi
 801ca14:	89a3      	ldrhmi	r3, [r4, #12]
 801ca16:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801ca1a:	81a3      	strhmi	r3, [r4, #12]
 801ca1c:	f7fc f9b3 	bl	8018d86 <__retarget_lock_close_recursive>
 801ca20:	4628      	mov	r0, r5
 801ca22:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801ca26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca28 <_fclose_r>:
 801ca28:	b570      	push	{r4, r5, r6, lr}
 801ca2a:	4606      	mov	r6, r0
 801ca2c:	460c      	mov	r4, r1
 801ca2e:	b911      	cbnz	r1, 801ca36 <_fclose_r+0xe>
 801ca30:	2500      	movs	r5, #0
 801ca32:	4628      	mov	r0, r5
 801ca34:	bd70      	pop	{r4, r5, r6, pc}
 801ca36:	b118      	cbz	r0, 801ca40 <_fclose_r+0x18>
 801ca38:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801ca3a:	b90b      	cbnz	r3, 801ca40 <_fclose_r+0x18>
 801ca3c:	f7fb fdb6 	bl	80185ac <__sinit>
 801ca40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ca42:	07d8      	lsls	r0, r3, #31
 801ca44:	d405      	bmi.n	801ca52 <_fclose_r+0x2a>
 801ca46:	89a3      	ldrh	r3, [r4, #12]
 801ca48:	0599      	lsls	r1, r3, #22
 801ca4a:	d402      	bmi.n	801ca52 <_fclose_r+0x2a>
 801ca4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca4e:	f7fc f99b 	bl	8018d88 <__retarget_lock_acquire_recursive>
 801ca52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca56:	b93b      	cbnz	r3, 801ca68 <_fclose_r+0x40>
 801ca58:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801ca5a:	f015 0501 	ands.w	r5, r5, #1
 801ca5e:	d1e7      	bne.n	801ca30 <_fclose_r+0x8>
 801ca60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ca62:	f7fc f992 	bl	8018d8a <__retarget_lock_release_recursive>
 801ca66:	e7e4      	b.n	801ca32 <_fclose_r+0xa>
 801ca68:	4621      	mov	r1, r4
 801ca6a:	4630      	mov	r0, r6
 801ca6c:	f000 f834 	bl	801cad8 <__sflush_r>
 801ca70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ca72:	4605      	mov	r5, r0
 801ca74:	b133      	cbz	r3, 801ca84 <_fclose_r+0x5c>
 801ca76:	69e1      	ldr	r1, [r4, #28]
 801ca78:	4630      	mov	r0, r6
 801ca7a:	4798      	blx	r3
 801ca7c:	2800      	cmp	r0, #0
 801ca7e:	bfb8      	it	lt
 801ca80:	f04f 35ff 	movlt.w	r5, #4294967295
 801ca84:	89a3      	ldrh	r3, [r4, #12]
 801ca86:	061a      	lsls	r2, r3, #24
 801ca88:	d503      	bpl.n	801ca92 <_fclose_r+0x6a>
 801ca8a:	6921      	ldr	r1, [r4, #16]
 801ca8c:	4630      	mov	r0, r6
 801ca8e:	f7fc f9ef 	bl	8018e70 <_free_r>
 801ca92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801ca94:	b141      	cbz	r1, 801caa8 <_fclose_r+0x80>
 801ca96:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801ca9a:	4299      	cmp	r1, r3
 801ca9c:	d002      	beq.n	801caa4 <_fclose_r+0x7c>
 801ca9e:	4630      	mov	r0, r6
 801caa0:	f7fc f9e6 	bl	8018e70 <_free_r>
 801caa4:	2300      	movs	r3, #0
 801caa6:	6323      	str	r3, [r4, #48]	; 0x30
 801caa8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801caaa:	b121      	cbz	r1, 801cab6 <_fclose_r+0x8e>
 801caac:	4630      	mov	r0, r6
 801caae:	f7fc f9df 	bl	8018e70 <_free_r>
 801cab2:	2300      	movs	r3, #0
 801cab4:	6463      	str	r3, [r4, #68]	; 0x44
 801cab6:	f7fb fd6d 	bl	8018594 <__sfp_lock_acquire>
 801caba:	2300      	movs	r3, #0
 801cabc:	81a3      	strh	r3, [r4, #12]
 801cabe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cac0:	07db      	lsls	r3, r3, #31
 801cac2:	d402      	bmi.n	801caca <_fclose_r+0xa2>
 801cac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cac6:	f7fc f960 	bl	8018d8a <__retarget_lock_release_recursive>
 801caca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cacc:	f7fc f95b 	bl	8018d86 <__retarget_lock_close_recursive>
 801cad0:	f7fb fd66 	bl	80185a0 <__sfp_lock_release>
 801cad4:	e7ad      	b.n	801ca32 <_fclose_r+0xa>
	...

0801cad8 <__sflush_r>:
 801cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cada:	898b      	ldrh	r3, [r1, #12]
 801cadc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cae0:	4605      	mov	r5, r0
 801cae2:	0718      	lsls	r0, r3, #28
 801cae4:	460c      	mov	r4, r1
 801cae6:	d45e      	bmi.n	801cba6 <__sflush_r+0xce>
 801cae8:	684b      	ldr	r3, [r1, #4]
 801caea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801caee:	2b00      	cmp	r3, #0
 801caf0:	818a      	strh	r2, [r1, #12]
 801caf2:	dc04      	bgt.n	801cafe <__sflush_r+0x26>
 801caf4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	dc01      	bgt.n	801cafe <__sflush_r+0x26>
 801cafa:	2000      	movs	r0, #0
 801cafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cafe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cb00:	2e00      	cmp	r6, #0
 801cb02:	d0fa      	beq.n	801cafa <__sflush_r+0x22>
 801cb04:	2300      	movs	r3, #0
 801cb06:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cb0a:	682f      	ldr	r7, [r5, #0]
 801cb0c:	69e1      	ldr	r1, [r4, #28]
 801cb0e:	602b      	str	r3, [r5, #0]
 801cb10:	d036      	beq.n	801cb80 <__sflush_r+0xa8>
 801cb12:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801cb14:	89a3      	ldrh	r3, [r4, #12]
 801cb16:	075a      	lsls	r2, r3, #29
 801cb18:	d505      	bpl.n	801cb26 <__sflush_r+0x4e>
 801cb1a:	6863      	ldr	r3, [r4, #4]
 801cb1c:	1ac0      	subs	r0, r0, r3
 801cb1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801cb20:	b10b      	cbz	r3, 801cb26 <__sflush_r+0x4e>
 801cb22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801cb24:	1ac0      	subs	r0, r0, r3
 801cb26:	2300      	movs	r3, #0
 801cb28:	4602      	mov	r2, r0
 801cb2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cb2c:	69e1      	ldr	r1, [r4, #28]
 801cb2e:	4628      	mov	r0, r5
 801cb30:	47b0      	blx	r6
 801cb32:	1c43      	adds	r3, r0, #1
 801cb34:	89a3      	ldrh	r3, [r4, #12]
 801cb36:	d106      	bne.n	801cb46 <__sflush_r+0x6e>
 801cb38:	6829      	ldr	r1, [r5, #0]
 801cb3a:	291d      	cmp	r1, #29
 801cb3c:	d82f      	bhi.n	801cb9e <__sflush_r+0xc6>
 801cb3e:	4a2a      	ldr	r2, [pc, #168]	; (801cbe8 <__sflush_r+0x110>)
 801cb40:	410a      	asrs	r2, r1
 801cb42:	07d6      	lsls	r6, r2, #31
 801cb44:	d42b      	bmi.n	801cb9e <__sflush_r+0xc6>
 801cb46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801cb4a:	b21b      	sxth	r3, r3
 801cb4c:	2200      	movs	r2, #0
 801cb4e:	6062      	str	r2, [r4, #4]
 801cb50:	04d9      	lsls	r1, r3, #19
 801cb52:	6922      	ldr	r2, [r4, #16]
 801cb54:	81a3      	strh	r3, [r4, #12]
 801cb56:	6022      	str	r2, [r4, #0]
 801cb58:	d504      	bpl.n	801cb64 <__sflush_r+0x8c>
 801cb5a:	1c42      	adds	r2, r0, #1
 801cb5c:	d101      	bne.n	801cb62 <__sflush_r+0x8a>
 801cb5e:	682b      	ldr	r3, [r5, #0]
 801cb60:	b903      	cbnz	r3, 801cb64 <__sflush_r+0x8c>
 801cb62:	6520      	str	r0, [r4, #80]	; 0x50
 801cb64:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801cb66:	602f      	str	r7, [r5, #0]
 801cb68:	2900      	cmp	r1, #0
 801cb6a:	d0c6      	beq.n	801cafa <__sflush_r+0x22>
 801cb6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801cb70:	4299      	cmp	r1, r3
 801cb72:	d002      	beq.n	801cb7a <__sflush_r+0xa2>
 801cb74:	4628      	mov	r0, r5
 801cb76:	f7fc f97b 	bl	8018e70 <_free_r>
 801cb7a:	2000      	movs	r0, #0
 801cb7c:	6320      	str	r0, [r4, #48]	; 0x30
 801cb7e:	e7bd      	b.n	801cafc <__sflush_r+0x24>
 801cb80:	2301      	movs	r3, #1
 801cb82:	4628      	mov	r0, r5
 801cb84:	47b0      	blx	r6
 801cb86:	1c41      	adds	r1, r0, #1
 801cb88:	d1c4      	bne.n	801cb14 <__sflush_r+0x3c>
 801cb8a:	682b      	ldr	r3, [r5, #0]
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d0c1      	beq.n	801cb14 <__sflush_r+0x3c>
 801cb90:	2b1d      	cmp	r3, #29
 801cb92:	d001      	beq.n	801cb98 <__sflush_r+0xc0>
 801cb94:	2b16      	cmp	r3, #22
 801cb96:	d101      	bne.n	801cb9c <__sflush_r+0xc4>
 801cb98:	602f      	str	r7, [r5, #0]
 801cb9a:	e7ae      	b.n	801cafa <__sflush_r+0x22>
 801cb9c:	89a3      	ldrh	r3, [r4, #12]
 801cb9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cba2:	81a3      	strh	r3, [r4, #12]
 801cba4:	e7aa      	b.n	801cafc <__sflush_r+0x24>
 801cba6:	690f      	ldr	r7, [r1, #16]
 801cba8:	2f00      	cmp	r7, #0
 801cbaa:	d0a6      	beq.n	801cafa <__sflush_r+0x22>
 801cbac:	079b      	lsls	r3, r3, #30
 801cbae:	680e      	ldr	r6, [r1, #0]
 801cbb0:	bf08      	it	eq
 801cbb2:	694b      	ldreq	r3, [r1, #20]
 801cbb4:	600f      	str	r7, [r1, #0]
 801cbb6:	bf18      	it	ne
 801cbb8:	2300      	movne	r3, #0
 801cbba:	1bf6      	subs	r6, r6, r7
 801cbbc:	608b      	str	r3, [r1, #8]
 801cbbe:	2e00      	cmp	r6, #0
 801cbc0:	dd9b      	ble.n	801cafa <__sflush_r+0x22>
 801cbc2:	69e1      	ldr	r1, [r4, #28]
 801cbc4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 801cbc8:	4633      	mov	r3, r6
 801cbca:	463a      	mov	r2, r7
 801cbcc:	4628      	mov	r0, r5
 801cbce:	47e0      	blx	ip
 801cbd0:	2800      	cmp	r0, #0
 801cbd2:	dc06      	bgt.n	801cbe2 <__sflush_r+0x10a>
 801cbd4:	89a3      	ldrh	r3, [r4, #12]
 801cbd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cbda:	81a3      	strh	r3, [r4, #12]
 801cbdc:	f04f 30ff 	mov.w	r0, #4294967295
 801cbe0:	e78c      	b.n	801cafc <__sflush_r+0x24>
 801cbe2:	4407      	add	r7, r0
 801cbe4:	1a36      	subs	r6, r6, r0
 801cbe6:	e7ea      	b.n	801cbbe <__sflush_r+0xe6>
 801cbe8:	dfbffffe 	.word	0xdfbffffe

0801cbec <_fflush_r>:
 801cbec:	b538      	push	{r3, r4, r5, lr}
 801cbee:	460c      	mov	r4, r1
 801cbf0:	4605      	mov	r5, r0
 801cbf2:	b118      	cbz	r0, 801cbfc <_fflush_r+0x10>
 801cbf4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801cbf6:	b90b      	cbnz	r3, 801cbfc <_fflush_r+0x10>
 801cbf8:	f7fb fcd8 	bl	80185ac <__sinit>
 801cbfc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801cc00:	b1b8      	cbz	r0, 801cc32 <_fflush_r+0x46>
 801cc02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cc04:	07db      	lsls	r3, r3, #31
 801cc06:	d404      	bmi.n	801cc12 <_fflush_r+0x26>
 801cc08:	0581      	lsls	r1, r0, #22
 801cc0a:	d402      	bmi.n	801cc12 <_fflush_r+0x26>
 801cc0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc0e:	f7fc f8bb 	bl	8018d88 <__retarget_lock_acquire_recursive>
 801cc12:	4628      	mov	r0, r5
 801cc14:	4621      	mov	r1, r4
 801cc16:	f7ff ff5f 	bl	801cad8 <__sflush_r>
 801cc1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cc1c:	07da      	lsls	r2, r3, #31
 801cc1e:	4605      	mov	r5, r0
 801cc20:	d405      	bmi.n	801cc2e <_fflush_r+0x42>
 801cc22:	89a3      	ldrh	r3, [r4, #12]
 801cc24:	059b      	lsls	r3, r3, #22
 801cc26:	d402      	bmi.n	801cc2e <_fflush_r+0x42>
 801cc28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc2a:	f7fc f8ae 	bl	8018d8a <__retarget_lock_release_recursive>
 801cc2e:	4628      	mov	r0, r5
 801cc30:	bd38      	pop	{r3, r4, r5, pc}
 801cc32:	4605      	mov	r5, r0
 801cc34:	e7fb      	b.n	801cc2e <_fflush_r+0x42>

0801cc36 <__swhatbuf_r>:
 801cc36:	b570      	push	{r4, r5, r6, lr}
 801cc38:	460c      	mov	r4, r1
 801cc3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc3e:	2900      	cmp	r1, #0
 801cc40:	b096      	sub	sp, #88	; 0x58
 801cc42:	4615      	mov	r5, r2
 801cc44:	461e      	mov	r6, r3
 801cc46:	da07      	bge.n	801cc58 <__swhatbuf_r+0x22>
 801cc48:	89a1      	ldrh	r1, [r4, #12]
 801cc4a:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 801cc4e:	d017      	beq.n	801cc80 <__swhatbuf_r+0x4a>
 801cc50:	2100      	movs	r1, #0
 801cc52:	2340      	movs	r3, #64	; 0x40
 801cc54:	4608      	mov	r0, r1
 801cc56:	e00f      	b.n	801cc78 <__swhatbuf_r+0x42>
 801cc58:	466a      	mov	r2, sp
 801cc5a:	f000 f8d7 	bl	801ce0c <_fstat_r>
 801cc5e:	2800      	cmp	r0, #0
 801cc60:	dbf2      	blt.n	801cc48 <__swhatbuf_r+0x12>
 801cc62:	9901      	ldr	r1, [sp, #4]
 801cc64:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801cc68:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801cc6c:	4259      	negs	r1, r3
 801cc6e:	4159      	adcs	r1, r3
 801cc70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801cc74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc78:	6031      	str	r1, [r6, #0]
 801cc7a:	602b      	str	r3, [r5, #0]
 801cc7c:	b016      	add	sp, #88	; 0x58
 801cc7e:	bd70      	pop	{r4, r5, r6, pc}
 801cc80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc84:	e7e6      	b.n	801cc54 <__swhatbuf_r+0x1e>

0801cc86 <__smakebuf_r>:
 801cc86:	898b      	ldrh	r3, [r1, #12]
 801cc88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cc8a:	079d      	lsls	r5, r3, #30
 801cc8c:	4606      	mov	r6, r0
 801cc8e:	460c      	mov	r4, r1
 801cc90:	d507      	bpl.n	801cca2 <__smakebuf_r+0x1c>
 801cc92:	f104 0343 	add.w	r3, r4, #67	; 0x43
 801cc96:	6023      	str	r3, [r4, #0]
 801cc98:	6123      	str	r3, [r4, #16]
 801cc9a:	2301      	movs	r3, #1
 801cc9c:	6163      	str	r3, [r4, #20]
 801cc9e:	b002      	add	sp, #8
 801cca0:	bd70      	pop	{r4, r5, r6, pc}
 801cca2:	ab01      	add	r3, sp, #4
 801cca4:	466a      	mov	r2, sp
 801cca6:	f7ff ffc6 	bl	801cc36 <__swhatbuf_r>
 801ccaa:	9900      	ldr	r1, [sp, #0]
 801ccac:	4605      	mov	r5, r0
 801ccae:	4630      	mov	r0, r6
 801ccb0:	f7fc f99e 	bl	8018ff0 <_malloc_r>
 801ccb4:	b948      	cbnz	r0, 801ccca <__smakebuf_r+0x44>
 801ccb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ccba:	059a      	lsls	r2, r3, #22
 801ccbc:	d4ef      	bmi.n	801cc9e <__smakebuf_r+0x18>
 801ccbe:	f023 0303 	bic.w	r3, r3, #3
 801ccc2:	f043 0302 	orr.w	r3, r3, #2
 801ccc6:	81a3      	strh	r3, [r4, #12]
 801ccc8:	e7e3      	b.n	801cc92 <__smakebuf_r+0xc>
 801ccca:	89a3      	ldrh	r3, [r4, #12]
 801cccc:	6020      	str	r0, [r4, #0]
 801ccce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ccd2:	81a3      	strh	r3, [r4, #12]
 801ccd4:	9b00      	ldr	r3, [sp, #0]
 801ccd6:	6163      	str	r3, [r4, #20]
 801ccd8:	9b01      	ldr	r3, [sp, #4]
 801ccda:	6120      	str	r0, [r4, #16]
 801ccdc:	b15b      	cbz	r3, 801ccf6 <__smakebuf_r+0x70>
 801ccde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cce2:	4630      	mov	r0, r6
 801cce4:	f000 f8a4 	bl	801ce30 <_isatty_r>
 801cce8:	b128      	cbz	r0, 801ccf6 <__smakebuf_r+0x70>
 801ccea:	89a3      	ldrh	r3, [r4, #12]
 801ccec:	f023 0303 	bic.w	r3, r3, #3
 801ccf0:	f043 0301 	orr.w	r3, r3, #1
 801ccf4:	81a3      	strh	r3, [r4, #12]
 801ccf6:	89a3      	ldrh	r3, [r4, #12]
 801ccf8:	431d      	orrs	r5, r3
 801ccfa:	81a5      	strh	r5, [r4, #12]
 801ccfc:	e7cf      	b.n	801cc9e <__smakebuf_r+0x18>

0801ccfe <__fputwc>:
 801ccfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cd02:	4680      	mov	r8, r0
 801cd04:	460e      	mov	r6, r1
 801cd06:	4615      	mov	r5, r2
 801cd08:	f000 f876 	bl	801cdf8 <__locale_mb_cur_max>
 801cd0c:	2801      	cmp	r0, #1
 801cd0e:	4604      	mov	r4, r0
 801cd10:	d11b      	bne.n	801cd4a <__fputwc+0x4c>
 801cd12:	1e73      	subs	r3, r6, #1
 801cd14:	2bfe      	cmp	r3, #254	; 0xfe
 801cd16:	d818      	bhi.n	801cd4a <__fputwc+0x4c>
 801cd18:	f88d 6004 	strb.w	r6, [sp, #4]
 801cd1c:	2700      	movs	r7, #0
 801cd1e:	f10d 0904 	add.w	r9, sp, #4
 801cd22:	42a7      	cmp	r7, r4
 801cd24:	d020      	beq.n	801cd68 <__fputwc+0x6a>
 801cd26:	68ab      	ldr	r3, [r5, #8]
 801cd28:	f817 1009 	ldrb.w	r1, [r7, r9]
 801cd2c:	3b01      	subs	r3, #1
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	60ab      	str	r3, [r5, #8]
 801cd32:	da04      	bge.n	801cd3e <__fputwc+0x40>
 801cd34:	69aa      	ldr	r2, [r5, #24]
 801cd36:	4293      	cmp	r3, r2
 801cd38:	db1a      	blt.n	801cd70 <__fputwc+0x72>
 801cd3a:	290a      	cmp	r1, #10
 801cd3c:	d018      	beq.n	801cd70 <__fputwc+0x72>
 801cd3e:	682b      	ldr	r3, [r5, #0]
 801cd40:	1c5a      	adds	r2, r3, #1
 801cd42:	602a      	str	r2, [r5, #0]
 801cd44:	7019      	strb	r1, [r3, #0]
 801cd46:	3701      	adds	r7, #1
 801cd48:	e7eb      	b.n	801cd22 <__fputwc+0x24>
 801cd4a:	4632      	mov	r2, r6
 801cd4c:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 801cd50:	a901      	add	r1, sp, #4
 801cd52:	4640      	mov	r0, r8
 801cd54:	f001 faba 	bl	801e2cc <_wcrtomb_r>
 801cd58:	1c42      	adds	r2, r0, #1
 801cd5a:	4604      	mov	r4, r0
 801cd5c:	d1de      	bne.n	801cd1c <__fputwc+0x1e>
 801cd5e:	89ab      	ldrh	r3, [r5, #12]
 801cd60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd64:	81ab      	strh	r3, [r5, #12]
 801cd66:	4606      	mov	r6, r0
 801cd68:	4630      	mov	r0, r6
 801cd6a:	b003      	add	sp, #12
 801cd6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cd70:	462a      	mov	r2, r5
 801cd72:	4640      	mov	r0, r8
 801cd74:	f001 fb3d 	bl	801e3f2 <__swbuf_r>
 801cd78:	1c43      	adds	r3, r0, #1
 801cd7a:	d1e4      	bne.n	801cd46 <__fputwc+0x48>
 801cd7c:	4606      	mov	r6, r0
 801cd7e:	e7f3      	b.n	801cd68 <__fputwc+0x6a>

0801cd80 <_fputwc_r>:
 801cd80:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801cd82:	07db      	lsls	r3, r3, #31
 801cd84:	b570      	push	{r4, r5, r6, lr}
 801cd86:	4605      	mov	r5, r0
 801cd88:	460e      	mov	r6, r1
 801cd8a:	4614      	mov	r4, r2
 801cd8c:	d405      	bmi.n	801cd9a <_fputwc_r+0x1a>
 801cd8e:	8993      	ldrh	r3, [r2, #12]
 801cd90:	0598      	lsls	r0, r3, #22
 801cd92:	d402      	bmi.n	801cd9a <_fputwc_r+0x1a>
 801cd94:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801cd96:	f7fb fff7 	bl	8018d88 <__retarget_lock_acquire_recursive>
 801cd9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd9e:	0499      	lsls	r1, r3, #18
 801cda0:	d406      	bmi.n	801cdb0 <_fputwc_r+0x30>
 801cda2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801cda6:	81a3      	strh	r3, [r4, #12]
 801cda8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cdaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801cdae:	6663      	str	r3, [r4, #100]	; 0x64
 801cdb0:	4622      	mov	r2, r4
 801cdb2:	4628      	mov	r0, r5
 801cdb4:	4631      	mov	r1, r6
 801cdb6:	f7ff ffa2 	bl	801ccfe <__fputwc>
 801cdba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cdbc:	07da      	lsls	r2, r3, #31
 801cdbe:	4605      	mov	r5, r0
 801cdc0:	d405      	bmi.n	801cdce <_fputwc_r+0x4e>
 801cdc2:	89a3      	ldrh	r3, [r4, #12]
 801cdc4:	059b      	lsls	r3, r3, #22
 801cdc6:	d402      	bmi.n	801cdce <_fputwc_r+0x4e>
 801cdc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cdca:	f7fb ffde 	bl	8018d8a <__retarget_lock_release_recursive>
 801cdce:	4628      	mov	r0, r5
 801cdd0:	bd70      	pop	{r4, r5, r6, pc}

0801cdd2 <strncpy>:
 801cdd2:	b510      	push	{r4, lr}
 801cdd4:	3901      	subs	r1, #1
 801cdd6:	4603      	mov	r3, r0
 801cdd8:	b132      	cbz	r2, 801cde8 <strncpy+0x16>
 801cdda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801cdde:	f803 4b01 	strb.w	r4, [r3], #1
 801cde2:	3a01      	subs	r2, #1
 801cde4:	2c00      	cmp	r4, #0
 801cde6:	d1f7      	bne.n	801cdd8 <strncpy+0x6>
 801cde8:	441a      	add	r2, r3
 801cdea:	2100      	movs	r1, #0
 801cdec:	4293      	cmp	r3, r2
 801cdee:	d100      	bne.n	801cdf2 <strncpy+0x20>
 801cdf0:	bd10      	pop	{r4, pc}
 801cdf2:	f803 1b01 	strb.w	r1, [r3], #1
 801cdf6:	e7f9      	b.n	801cdec <strncpy+0x1a>

0801cdf8 <__locale_mb_cur_max>:
 801cdf8:	4b01      	ldr	r3, [pc, #4]	; (801ce00 <__locale_mb_cur_max+0x8>)
 801cdfa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 801cdfe:	4770      	bx	lr
 801ce00:	200005e0 	.word	0x200005e0

0801ce04 <_localeconv_r>:
 801ce04:	4800      	ldr	r0, [pc, #0]	; (801ce08 <_localeconv_r+0x4>)
 801ce06:	4770      	bx	lr
 801ce08:	200006d0 	.word	0x200006d0

0801ce0c <_fstat_r>:
 801ce0c:	b538      	push	{r3, r4, r5, lr}
 801ce0e:	4d07      	ldr	r5, [pc, #28]	; (801ce2c <_fstat_r+0x20>)
 801ce10:	2300      	movs	r3, #0
 801ce12:	4604      	mov	r4, r0
 801ce14:	4608      	mov	r0, r1
 801ce16:	4611      	mov	r1, r2
 801ce18:	602b      	str	r3, [r5, #0]
 801ce1a:	f7ed fd68 	bl	800a8ee <_fstat>
 801ce1e:	1c43      	adds	r3, r0, #1
 801ce20:	d102      	bne.n	801ce28 <_fstat_r+0x1c>
 801ce22:	682b      	ldr	r3, [r5, #0]
 801ce24:	b103      	cbz	r3, 801ce28 <_fstat_r+0x1c>
 801ce26:	6023      	str	r3, [r4, #0]
 801ce28:	bd38      	pop	{r3, r4, r5, pc}
 801ce2a:	bf00      	nop
 801ce2c:	200056e8 	.word	0x200056e8

0801ce30 <_isatty_r>:
 801ce30:	b538      	push	{r3, r4, r5, lr}
 801ce32:	4d06      	ldr	r5, [pc, #24]	; (801ce4c <_isatty_r+0x1c>)
 801ce34:	2300      	movs	r3, #0
 801ce36:	4604      	mov	r4, r0
 801ce38:	4608      	mov	r0, r1
 801ce3a:	602b      	str	r3, [r5, #0]
 801ce3c:	f7ed fd66 	bl	800a90c <_isatty>
 801ce40:	1c43      	adds	r3, r0, #1
 801ce42:	d102      	bne.n	801ce4a <_isatty_r+0x1a>
 801ce44:	682b      	ldr	r3, [r5, #0]
 801ce46:	b103      	cbz	r3, 801ce4a <_isatty_r+0x1a>
 801ce48:	6023      	str	r3, [r4, #0]
 801ce4a:	bd38      	pop	{r3, r4, r5, pc}
 801ce4c:	200056e8 	.word	0x200056e8

0801ce50 <_sbrk_r>:
 801ce50:	b538      	push	{r3, r4, r5, lr}
 801ce52:	4d06      	ldr	r5, [pc, #24]	; (801ce6c <_sbrk_r+0x1c>)
 801ce54:	2300      	movs	r3, #0
 801ce56:	4604      	mov	r4, r0
 801ce58:	4608      	mov	r0, r1
 801ce5a:	602b      	str	r3, [r5, #0]
 801ce5c:	f7ed fd6c 	bl	800a938 <_sbrk>
 801ce60:	1c43      	adds	r3, r0, #1
 801ce62:	d102      	bne.n	801ce6a <_sbrk_r+0x1a>
 801ce64:	682b      	ldr	r3, [r5, #0]
 801ce66:	b103      	cbz	r3, 801ce6a <_sbrk_r+0x1a>
 801ce68:	6023      	str	r3, [r4, #0]
 801ce6a:	bd38      	pop	{r3, r4, r5, pc}
 801ce6c:	200056e8 	.word	0x200056e8

0801ce70 <__libc_fini_array>:
 801ce70:	b538      	push	{r3, r4, r5, lr}
 801ce72:	4d07      	ldr	r5, [pc, #28]	; (801ce90 <__libc_fini_array+0x20>)
 801ce74:	4c07      	ldr	r4, [pc, #28]	; (801ce94 <__libc_fini_array+0x24>)
 801ce76:	1b64      	subs	r4, r4, r5
 801ce78:	10a4      	asrs	r4, r4, #2
 801ce7a:	b91c      	cbnz	r4, 801ce84 <__libc_fini_array+0x14>
 801ce7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce80:	f002 babe 	b.w	801f400 <_fini>
 801ce84:	3c01      	subs	r4, #1
 801ce86:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801ce8a:	4798      	blx	r3
 801ce8c:	e7f5      	b.n	801ce7a <__libc_fini_array+0xa>
 801ce8e:	bf00      	nop
 801ce90:	08020c50 	.word	0x08020c50
 801ce94:	08020c54 	.word	0x08020c54

0801ce98 <sysconf>:
 801ce98:	2808      	cmp	r0, #8
 801ce9a:	b508      	push	{r3, lr}
 801ce9c:	d006      	beq.n	801ceac <sysconf+0x14>
 801ce9e:	f7fb ff47 	bl	8018d30 <__errno>
 801cea2:	2316      	movs	r3, #22
 801cea4:	6003      	str	r3, [r0, #0]
 801cea6:	f04f 30ff 	mov.w	r0, #4294967295
 801ceaa:	bd08      	pop	{r3, pc}
 801ceac:	2080      	movs	r0, #128	; 0x80
 801ceae:	e7fc      	b.n	801ceaa <sysconf+0x12>

0801ceb0 <frexp>:
 801ceb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ceb2:	4617      	mov	r7, r2
 801ceb4:	2200      	movs	r2, #0
 801ceb6:	603a      	str	r2, [r7, #0]
 801ceb8:	4a14      	ldr	r2, [pc, #80]	; (801cf0c <frexp+0x5c>)
 801ceba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801cebe:	4296      	cmp	r6, r2
 801cec0:	4604      	mov	r4, r0
 801cec2:	460d      	mov	r5, r1
 801cec4:	460b      	mov	r3, r1
 801cec6:	dc1e      	bgt.n	801cf06 <frexp+0x56>
 801cec8:	4602      	mov	r2, r0
 801ceca:	4332      	orrs	r2, r6
 801cecc:	d01b      	beq.n	801cf06 <frexp+0x56>
 801cece:	4a10      	ldr	r2, [pc, #64]	; (801cf10 <frexp+0x60>)
 801ced0:	400a      	ands	r2, r1
 801ced2:	b952      	cbnz	r2, 801ceea <frexp+0x3a>
 801ced4:	4b0f      	ldr	r3, [pc, #60]	; (801cf14 <frexp+0x64>)
 801ced6:	2200      	movs	r2, #0
 801ced8:	f7eb fd66 	bl	80089a8 <__aeabi_dmul>
 801cedc:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801cee0:	4604      	mov	r4, r0
 801cee2:	460b      	mov	r3, r1
 801cee4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801cee8:	603a      	str	r2, [r7, #0]
 801ceea:	683a      	ldr	r2, [r7, #0]
 801ceec:	1536      	asrs	r6, r6, #20
 801ceee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cef2:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 801cef6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cefa:	4432      	add	r2, r6
 801cefc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 801cf00:	603a      	str	r2, [r7, #0]
 801cf02:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 801cf06:	4620      	mov	r0, r4
 801cf08:	4629      	mov	r1, r5
 801cf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf0c:	7fefffff 	.word	0x7fefffff
 801cf10:	7ff00000 	.word	0x7ff00000
 801cf14:	43500000 	.word	0x43500000

0801cf18 <__register_exitproc>:
 801cf18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf1c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801cf8c <__register_exitproc+0x74>
 801cf20:	4606      	mov	r6, r0
 801cf22:	f8da 0000 	ldr.w	r0, [sl]
 801cf26:	4698      	mov	r8, r3
 801cf28:	460f      	mov	r7, r1
 801cf2a:	4691      	mov	r9, r2
 801cf2c:	f7fb ff2c 	bl	8018d88 <__retarget_lock_acquire_recursive>
 801cf30:	4b17      	ldr	r3, [pc, #92]	; (801cf90 <__register_exitproc+0x78>)
 801cf32:	681c      	ldr	r4, [r3, #0]
 801cf34:	b90c      	cbnz	r4, 801cf3a <__register_exitproc+0x22>
 801cf36:	4c17      	ldr	r4, [pc, #92]	; (801cf94 <__register_exitproc+0x7c>)
 801cf38:	601c      	str	r4, [r3, #0]
 801cf3a:	6865      	ldr	r5, [r4, #4]
 801cf3c:	f8da 0000 	ldr.w	r0, [sl]
 801cf40:	2d1f      	cmp	r5, #31
 801cf42:	dd05      	ble.n	801cf50 <__register_exitproc+0x38>
 801cf44:	f7fb ff21 	bl	8018d8a <__retarget_lock_release_recursive>
 801cf48:	f04f 30ff 	mov.w	r0, #4294967295
 801cf4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf50:	b19e      	cbz	r6, 801cf7a <__register_exitproc+0x62>
 801cf52:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801cf56:	2201      	movs	r2, #1
 801cf58:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801cf5c:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801cf60:	40aa      	lsls	r2, r5
 801cf62:	4313      	orrs	r3, r2
 801cf64:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801cf68:	2e02      	cmp	r6, #2
 801cf6a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801cf6e:	bf02      	ittt	eq
 801cf70:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801cf74:	4313      	orreq	r3, r2
 801cf76:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801cf7a:	1c6b      	adds	r3, r5, #1
 801cf7c:	3502      	adds	r5, #2
 801cf7e:	6063      	str	r3, [r4, #4]
 801cf80:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801cf84:	f7fb ff01 	bl	8018d8a <__retarget_lock_release_recursive>
 801cf88:	2000      	movs	r0, #0
 801cf8a:	e7df      	b.n	801cf4c <__register_exitproc+0x34>
 801cf8c:	200001cc 	.word	0x200001cc
 801cf90:	200056f0 	.word	0x200056f0
 801cf94:	20005728 	.word	0x20005728

0801cf98 <quorem>:
 801cf98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf9c:	6903      	ldr	r3, [r0, #16]
 801cf9e:	690c      	ldr	r4, [r1, #16]
 801cfa0:	42a3      	cmp	r3, r4
 801cfa2:	4607      	mov	r7, r0
 801cfa4:	db7b      	blt.n	801d09e <quorem+0x106>
 801cfa6:	3c01      	subs	r4, #1
 801cfa8:	f101 0814 	add.w	r8, r1, #20
 801cfac:	f100 0514 	add.w	r5, r0, #20
 801cfb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cfb4:	9301      	str	r3, [sp, #4]
 801cfb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cfba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cfbe:	3301      	adds	r3, #1
 801cfc0:	429a      	cmp	r2, r3
 801cfc2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cfc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cfca:	fbb2 f6f3 	udiv	r6, r2, r3
 801cfce:	d32e      	bcc.n	801d02e <quorem+0x96>
 801cfd0:	f04f 0e00 	mov.w	lr, #0
 801cfd4:	4640      	mov	r0, r8
 801cfd6:	46ac      	mov	ip, r5
 801cfd8:	46f2      	mov	sl, lr
 801cfda:	f850 2b04 	ldr.w	r2, [r0], #4
 801cfde:	b293      	uxth	r3, r2
 801cfe0:	fb06 e303 	mla	r3, r6, r3, lr
 801cfe4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cfe8:	0c1a      	lsrs	r2, r3, #16
 801cfea:	b29b      	uxth	r3, r3
 801cfec:	fb06 220e 	mla	r2, r6, lr, r2
 801cff0:	ebaa 0303 	sub.w	r3, sl, r3
 801cff4:	f8dc a000 	ldr.w	sl, [ip]
 801cff8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cffc:	b292      	uxth	r2, r2
 801cffe:	fa13 f38a 	uxtah	r3, r3, sl
 801d002:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d006:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d00a:	b29b      	uxth	r3, r3
 801d00c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d010:	4581      	cmp	r9, r0
 801d012:	f84c 3b04 	str.w	r3, [ip], #4
 801d016:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d01a:	d2de      	bcs.n	801cfda <quorem+0x42>
 801d01c:	f855 300b 	ldr.w	r3, [r5, fp]
 801d020:	b92b      	cbnz	r3, 801d02e <quorem+0x96>
 801d022:	9b01      	ldr	r3, [sp, #4]
 801d024:	3b04      	subs	r3, #4
 801d026:	429d      	cmp	r5, r3
 801d028:	461a      	mov	r2, r3
 801d02a:	d32c      	bcc.n	801d086 <quorem+0xee>
 801d02c:	613c      	str	r4, [r7, #16]
 801d02e:	4638      	mov	r0, r7
 801d030:	f001 f844 	bl	801e0bc <__mcmp>
 801d034:	2800      	cmp	r0, #0
 801d036:	db22      	blt.n	801d07e <quorem+0xe6>
 801d038:	3601      	adds	r6, #1
 801d03a:	4629      	mov	r1, r5
 801d03c:	2000      	movs	r0, #0
 801d03e:	f858 2b04 	ldr.w	r2, [r8], #4
 801d042:	f8d1 c000 	ldr.w	ip, [r1]
 801d046:	b293      	uxth	r3, r2
 801d048:	1ac3      	subs	r3, r0, r3
 801d04a:	0c12      	lsrs	r2, r2, #16
 801d04c:	fa13 f38c 	uxtah	r3, r3, ip
 801d050:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801d054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d058:	b29b      	uxth	r3, r3
 801d05a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d05e:	45c1      	cmp	r9, r8
 801d060:	f841 3b04 	str.w	r3, [r1], #4
 801d064:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d068:	d2e9      	bcs.n	801d03e <quorem+0xa6>
 801d06a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d06e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d072:	b922      	cbnz	r2, 801d07e <quorem+0xe6>
 801d074:	3b04      	subs	r3, #4
 801d076:	429d      	cmp	r5, r3
 801d078:	461a      	mov	r2, r3
 801d07a:	d30a      	bcc.n	801d092 <quorem+0xfa>
 801d07c:	613c      	str	r4, [r7, #16]
 801d07e:	4630      	mov	r0, r6
 801d080:	b003      	add	sp, #12
 801d082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d086:	6812      	ldr	r2, [r2, #0]
 801d088:	3b04      	subs	r3, #4
 801d08a:	2a00      	cmp	r2, #0
 801d08c:	d1ce      	bne.n	801d02c <quorem+0x94>
 801d08e:	3c01      	subs	r4, #1
 801d090:	e7c9      	b.n	801d026 <quorem+0x8e>
 801d092:	6812      	ldr	r2, [r2, #0]
 801d094:	3b04      	subs	r3, #4
 801d096:	2a00      	cmp	r2, #0
 801d098:	d1f0      	bne.n	801d07c <quorem+0xe4>
 801d09a:	3c01      	subs	r4, #1
 801d09c:	e7eb      	b.n	801d076 <quorem+0xde>
 801d09e:	2000      	movs	r0, #0
 801d0a0:	e7ee      	b.n	801d080 <quorem+0xe8>
 801d0a2:	0000      	movs	r0, r0
 801d0a4:	0000      	movs	r0, r0
	...

0801d0a8 <_dtoa_r>:
 801d0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0ac:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801d0ae:	b097      	sub	sp, #92	; 0x5c
 801d0b0:	4681      	mov	r9, r0
 801d0b2:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801d0b4:	4614      	mov	r4, r2
 801d0b6:	461d      	mov	r5, r3
 801d0b8:	4692      	mov	sl, r2
 801d0ba:	469b      	mov	fp, r3
 801d0bc:	b149      	cbz	r1, 801d0d2 <_dtoa_r+0x2a>
 801d0be:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d0c0:	604a      	str	r2, [r1, #4]
 801d0c2:	2301      	movs	r3, #1
 801d0c4:	4093      	lsls	r3, r2
 801d0c6:	608b      	str	r3, [r1, #8]
 801d0c8:	f000 fdef 	bl	801dcaa <_Bfree>
 801d0cc:	2300      	movs	r3, #0
 801d0ce:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 801d0d2:	1e2b      	subs	r3, r5, #0
 801d0d4:	bfaa      	itet	ge
 801d0d6:	2300      	movge	r3, #0
 801d0d8:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d0dc:	6033      	strge	r3, [r6, #0]
 801d0de:	4ba4      	ldr	r3, [pc, #656]	; (801d370 <_dtoa_r+0x2c8>)
 801d0e0:	f8cd b00c 	str.w	fp, [sp, #12]
 801d0e4:	bfbc      	itt	lt
 801d0e6:	2201      	movlt	r2, #1
 801d0e8:	6032      	strlt	r2, [r6, #0]
 801d0ea:	ea33 030b 	bics.w	r3, r3, fp
 801d0ee:	d119      	bne.n	801d124 <_dtoa_r+0x7c>
 801d0f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d0f2:	f242 730f 	movw	r3, #9999	; 0x270f
 801d0f6:	6013      	str	r3, [r2, #0]
 801d0f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d0fc:	4323      	orrs	r3, r4
 801d0fe:	f000 8587 	beq.w	801dc10 <_dtoa_r+0xb68>
 801d102:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d104:	b90b      	cbnz	r3, 801d10a <_dtoa_r+0x62>
 801d106:	4b9b      	ldr	r3, [pc, #620]	; (801d374 <_dtoa_r+0x2cc>)
 801d108:	e021      	b.n	801d14e <_dtoa_r+0xa6>
 801d10a:	4b9a      	ldr	r3, [pc, #616]	; (801d374 <_dtoa_r+0x2cc>)
 801d10c:	9304      	str	r3, [sp, #16]
 801d10e:	3303      	adds	r3, #3
 801d110:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d112:	6013      	str	r3, [r2, #0]
 801d114:	9804      	ldr	r0, [sp, #16]
 801d116:	b017      	add	sp, #92	; 0x5c
 801d118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d11c:	4b96      	ldr	r3, [pc, #600]	; (801d378 <_dtoa_r+0x2d0>)
 801d11e:	9304      	str	r3, [sp, #16]
 801d120:	3308      	adds	r3, #8
 801d122:	e7f5      	b.n	801d110 <_dtoa_r+0x68>
 801d124:	2200      	movs	r2, #0
 801d126:	2300      	movs	r3, #0
 801d128:	4650      	mov	r0, sl
 801d12a:	4659      	mov	r1, fp
 801d12c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 801d130:	f7eb fea2 	bl	8008e78 <__aeabi_dcmpeq>
 801d134:	4607      	mov	r7, r0
 801d136:	b160      	cbz	r0, 801d152 <_dtoa_r+0xaa>
 801d138:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d13a:	2301      	movs	r3, #1
 801d13c:	6013      	str	r3, [r2, #0]
 801d13e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d140:	2b00      	cmp	r3, #0
 801d142:	f000 8562 	beq.w	801dc0a <_dtoa_r+0xb62>
 801d146:	4b8d      	ldr	r3, [pc, #564]	; (801d37c <_dtoa_r+0x2d4>)
 801d148:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d14a:	6013      	str	r3, [r2, #0]
 801d14c:	3b01      	subs	r3, #1
 801d14e:	9304      	str	r3, [sp, #16]
 801d150:	e7e0      	b.n	801d114 <_dtoa_r+0x6c>
 801d152:	ab14      	add	r3, sp, #80	; 0x50
 801d154:	9301      	str	r3, [sp, #4]
 801d156:	ab15      	add	r3, sp, #84	; 0x54
 801d158:	9300      	str	r3, [sp, #0]
 801d15a:	4648      	mov	r0, r9
 801d15c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801d160:	f001 f850 	bl	801e204 <__d2b>
 801d164:	9b03      	ldr	r3, [sp, #12]
 801d166:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801d16a:	4680      	mov	r8, r0
 801d16c:	2e00      	cmp	r6, #0
 801d16e:	f000 8081 	beq.w	801d274 <_dtoa_r+0x1cc>
 801d172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d174:	9713      	str	r7, [sp, #76]	; 0x4c
 801d176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d17a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d17e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801d182:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d186:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 801d18a:	4619      	mov	r1, r3
 801d18c:	2200      	movs	r2, #0
 801d18e:	4b7c      	ldr	r3, [pc, #496]	; (801d380 <_dtoa_r+0x2d8>)
 801d190:	f7eb fa52 	bl	8008638 <__aeabi_dsub>
 801d194:	a370      	add	r3, pc, #448	; (adr r3, 801d358 <_dtoa_r+0x2b0>)
 801d196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d19a:	f7eb fc05 	bl	80089a8 <__aeabi_dmul>
 801d19e:	a370      	add	r3, pc, #448	; (adr r3, 801d360 <_dtoa_r+0x2b8>)
 801d1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1a4:	f7eb fa4a 	bl	800863c <__adddf3>
 801d1a8:	4604      	mov	r4, r0
 801d1aa:	4630      	mov	r0, r6
 801d1ac:	460d      	mov	r5, r1
 801d1ae:	f7eb fb91 	bl	80088d4 <__aeabi_i2d>
 801d1b2:	a36d      	add	r3, pc, #436	; (adr r3, 801d368 <_dtoa_r+0x2c0>)
 801d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1b8:	f7eb fbf6 	bl	80089a8 <__aeabi_dmul>
 801d1bc:	4602      	mov	r2, r0
 801d1be:	460b      	mov	r3, r1
 801d1c0:	4620      	mov	r0, r4
 801d1c2:	4629      	mov	r1, r5
 801d1c4:	f7eb fa3a 	bl	800863c <__adddf3>
 801d1c8:	4604      	mov	r4, r0
 801d1ca:	460d      	mov	r5, r1
 801d1cc:	f7eb fe9c 	bl	8008f08 <__aeabi_d2iz>
 801d1d0:	2200      	movs	r2, #0
 801d1d2:	9003      	str	r0, [sp, #12]
 801d1d4:	2300      	movs	r3, #0
 801d1d6:	4620      	mov	r0, r4
 801d1d8:	4629      	mov	r1, r5
 801d1da:	f7eb fe57 	bl	8008e8c <__aeabi_dcmplt>
 801d1de:	b150      	cbz	r0, 801d1f6 <_dtoa_r+0x14e>
 801d1e0:	9803      	ldr	r0, [sp, #12]
 801d1e2:	f7eb fb77 	bl	80088d4 <__aeabi_i2d>
 801d1e6:	4622      	mov	r2, r4
 801d1e8:	462b      	mov	r3, r5
 801d1ea:	f7eb fe45 	bl	8008e78 <__aeabi_dcmpeq>
 801d1ee:	b910      	cbnz	r0, 801d1f6 <_dtoa_r+0x14e>
 801d1f0:	9b03      	ldr	r3, [sp, #12]
 801d1f2:	3b01      	subs	r3, #1
 801d1f4:	9303      	str	r3, [sp, #12]
 801d1f6:	9b03      	ldr	r3, [sp, #12]
 801d1f8:	2b16      	cmp	r3, #22
 801d1fa:	d859      	bhi.n	801d2b0 <_dtoa_r+0x208>
 801d1fc:	9a03      	ldr	r2, [sp, #12]
 801d1fe:	4b61      	ldr	r3, [pc, #388]	; (801d384 <_dtoa_r+0x2dc>)
 801d200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d20c:	f7eb fe3e 	bl	8008e8c <__aeabi_dcmplt>
 801d210:	2800      	cmp	r0, #0
 801d212:	d04f      	beq.n	801d2b4 <_dtoa_r+0x20c>
 801d214:	9b03      	ldr	r3, [sp, #12]
 801d216:	3b01      	subs	r3, #1
 801d218:	9303      	str	r3, [sp, #12]
 801d21a:	2300      	movs	r3, #0
 801d21c:	9311      	str	r3, [sp, #68]	; 0x44
 801d21e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d220:	1b9b      	subs	r3, r3, r6
 801d222:	1e5a      	subs	r2, r3, #1
 801d224:	bf45      	ittet	mi
 801d226:	f1c3 0301 	rsbmi	r3, r3, #1
 801d22a:	9306      	strmi	r3, [sp, #24]
 801d22c:	2300      	movpl	r3, #0
 801d22e:	2300      	movmi	r3, #0
 801d230:	bf58      	it	pl
 801d232:	9306      	strpl	r3, [sp, #24]
 801d234:	9209      	str	r2, [sp, #36]	; 0x24
 801d236:	bf48      	it	mi
 801d238:	9309      	strmi	r3, [sp, #36]	; 0x24
 801d23a:	9b03      	ldr	r3, [sp, #12]
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	db3b      	blt.n	801d2b8 <_dtoa_r+0x210>
 801d240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d242:	9a03      	ldr	r2, [sp, #12]
 801d244:	9210      	str	r2, [sp, #64]	; 0x40
 801d246:	4413      	add	r3, r2
 801d248:	9309      	str	r3, [sp, #36]	; 0x24
 801d24a:	2300      	movs	r3, #0
 801d24c:	930a      	str	r3, [sp, #40]	; 0x28
 801d24e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d250:	2b09      	cmp	r3, #9
 801d252:	d869      	bhi.n	801d328 <_dtoa_r+0x280>
 801d254:	2b05      	cmp	r3, #5
 801d256:	bfc4      	itt	gt
 801d258:	3b04      	subgt	r3, #4
 801d25a:	9320      	strgt	r3, [sp, #128]	; 0x80
 801d25c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d25e:	f1a3 0302 	sub.w	r3, r3, #2
 801d262:	bfcc      	ite	gt
 801d264:	2400      	movgt	r4, #0
 801d266:	2401      	movle	r4, #1
 801d268:	2b03      	cmp	r3, #3
 801d26a:	d868      	bhi.n	801d33e <_dtoa_r+0x296>
 801d26c:	e8df f003 	tbb	[pc, r3]
 801d270:	5a383a2d 	.word	0x5a383a2d
 801d274:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 801d278:	441e      	add	r6, r3
 801d27a:	f206 4332 	addw	r3, r6, #1074	; 0x432
 801d27e:	2b20      	cmp	r3, #32
 801d280:	bfc1      	itttt	gt
 801d282:	9a03      	ldrgt	r2, [sp, #12]
 801d284:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d288:	409a      	lslgt	r2, r3
 801d28a:	f206 4312 	addwgt	r3, r6, #1042	; 0x412
 801d28e:	bfcb      	itete	gt
 801d290:	fa24 f303 	lsrgt.w	r3, r4, r3
 801d294:	f1c3 0320 	rsble	r3, r3, #32
 801d298:	ea42 0003 	orrgt.w	r0, r2, r3
 801d29c:	fa04 f003 	lslle.w	r0, r4, r3
 801d2a0:	f7eb fb08 	bl	80088b4 <__aeabi_ui2d>
 801d2a4:	2201      	movs	r2, #1
 801d2a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801d2aa:	3e01      	subs	r6, #1
 801d2ac:	9213      	str	r2, [sp, #76]	; 0x4c
 801d2ae:	e76c      	b.n	801d18a <_dtoa_r+0xe2>
 801d2b0:	2301      	movs	r3, #1
 801d2b2:	e7b3      	b.n	801d21c <_dtoa_r+0x174>
 801d2b4:	9011      	str	r0, [sp, #68]	; 0x44
 801d2b6:	e7b2      	b.n	801d21e <_dtoa_r+0x176>
 801d2b8:	9b06      	ldr	r3, [sp, #24]
 801d2ba:	9a03      	ldr	r2, [sp, #12]
 801d2bc:	1a9b      	subs	r3, r3, r2
 801d2be:	9306      	str	r3, [sp, #24]
 801d2c0:	4253      	negs	r3, r2
 801d2c2:	930a      	str	r3, [sp, #40]	; 0x28
 801d2c4:	2300      	movs	r3, #0
 801d2c6:	9310      	str	r3, [sp, #64]	; 0x40
 801d2c8:	e7c1      	b.n	801d24e <_dtoa_r+0x1a6>
 801d2ca:	2300      	movs	r3, #0
 801d2cc:	930b      	str	r3, [sp, #44]	; 0x2c
 801d2ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	dc37      	bgt.n	801d344 <_dtoa_r+0x29c>
 801d2d4:	2301      	movs	r3, #1
 801d2d6:	9308      	str	r3, [sp, #32]
 801d2d8:	9305      	str	r3, [sp, #20]
 801d2da:	461a      	mov	r2, r3
 801d2dc:	9221      	str	r2, [sp, #132]	; 0x84
 801d2de:	e00c      	b.n	801d2fa <_dtoa_r+0x252>
 801d2e0:	2301      	movs	r3, #1
 801d2e2:	e7f3      	b.n	801d2cc <_dtoa_r+0x224>
 801d2e4:	2300      	movs	r3, #0
 801d2e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d2e8:	930b      	str	r3, [sp, #44]	; 0x2c
 801d2ea:	9b03      	ldr	r3, [sp, #12]
 801d2ec:	4413      	add	r3, r2
 801d2ee:	9308      	str	r3, [sp, #32]
 801d2f0:	3301      	adds	r3, #1
 801d2f2:	2b01      	cmp	r3, #1
 801d2f4:	9305      	str	r3, [sp, #20]
 801d2f6:	bfb8      	it	lt
 801d2f8:	2301      	movlt	r3, #1
 801d2fa:	2100      	movs	r1, #0
 801d2fc:	2204      	movs	r2, #4
 801d2fe:	f102 0014 	add.w	r0, r2, #20
 801d302:	4298      	cmp	r0, r3
 801d304:	d922      	bls.n	801d34c <_dtoa_r+0x2a4>
 801d306:	f8c9 103c 	str.w	r1, [r9, #60]	; 0x3c
 801d30a:	4648      	mov	r0, r9
 801d30c:	f000 fca8 	bl	801dc60 <_Balloc>
 801d310:	9004      	str	r0, [sp, #16]
 801d312:	2800      	cmp	r0, #0
 801d314:	d13c      	bne.n	801d390 <_dtoa_r+0x2e8>
 801d316:	4b1c      	ldr	r3, [pc, #112]	; (801d388 <_dtoa_r+0x2e0>)
 801d318:	4602      	mov	r2, r0
 801d31a:	f240 11af 	movw	r1, #431	; 0x1af
 801d31e:	481b      	ldr	r0, [pc, #108]	; (801d38c <_dtoa_r+0x2e4>)
 801d320:	f001 f8b0 	bl	801e484 <__assert_func>
 801d324:	2301      	movs	r3, #1
 801d326:	e7de      	b.n	801d2e6 <_dtoa_r+0x23e>
 801d328:	2401      	movs	r4, #1
 801d32a:	2300      	movs	r3, #0
 801d32c:	9320      	str	r3, [sp, #128]	; 0x80
 801d32e:	940b      	str	r4, [sp, #44]	; 0x2c
 801d330:	f04f 33ff 	mov.w	r3, #4294967295
 801d334:	9308      	str	r3, [sp, #32]
 801d336:	9305      	str	r3, [sp, #20]
 801d338:	2200      	movs	r2, #0
 801d33a:	2312      	movs	r3, #18
 801d33c:	e7ce      	b.n	801d2dc <_dtoa_r+0x234>
 801d33e:	2301      	movs	r3, #1
 801d340:	930b      	str	r3, [sp, #44]	; 0x2c
 801d342:	e7f5      	b.n	801d330 <_dtoa_r+0x288>
 801d344:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d346:	9308      	str	r3, [sp, #32]
 801d348:	9305      	str	r3, [sp, #20]
 801d34a:	e7d6      	b.n	801d2fa <_dtoa_r+0x252>
 801d34c:	3101      	adds	r1, #1
 801d34e:	0052      	lsls	r2, r2, #1
 801d350:	e7d5      	b.n	801d2fe <_dtoa_r+0x256>
 801d352:	bf00      	nop
 801d354:	f3af 8000 	nop.w
 801d358:	636f4361 	.word	0x636f4361
 801d35c:	3fd287a7 	.word	0x3fd287a7
 801d360:	8b60c8b3 	.word	0x8b60c8b3
 801d364:	3fc68a28 	.word	0x3fc68a28
 801d368:	509f79fb 	.word	0x509f79fb
 801d36c:	3fd34413 	.word	0x3fd34413
 801d370:	7ff00000 	.word	0x7ff00000
 801d374:	08020a0c 	.word	0x08020a0c
 801d378:	08020a03 	.word	0x08020a03
 801d37c:	08020998 	.word	0x08020998
 801d380:	3ff80000 	.word	0x3ff80000
 801d384:	08020b00 	.word	0x08020b00
 801d388:	08020a10 	.word	0x08020a10
 801d38c:	08020a21 	.word	0x08020a21
 801d390:	9b04      	ldr	r3, [sp, #16]
 801d392:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
 801d396:	9b05      	ldr	r3, [sp, #20]
 801d398:	2b0e      	cmp	r3, #14
 801d39a:	f200 80a2 	bhi.w	801d4e2 <_dtoa_r+0x43a>
 801d39e:	2c00      	cmp	r4, #0
 801d3a0:	f000 809f 	beq.w	801d4e2 <_dtoa_r+0x43a>
 801d3a4:	9b03      	ldr	r3, [sp, #12]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	dd35      	ble.n	801d416 <_dtoa_r+0x36e>
 801d3aa:	f003 020f 	and.w	r2, r3, #15
 801d3ae:	4b96      	ldr	r3, [pc, #600]	; (801d608 <_dtoa_r+0x560>)
 801d3b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d3b4:	e9d3 4500 	ldrd	r4, r5, [r3]
 801d3b8:	9b03      	ldr	r3, [sp, #12]
 801d3ba:	05d8      	lsls	r0, r3, #23
 801d3bc:	ea4f 1623 	mov.w	r6, r3, asr #4
 801d3c0:	d517      	bpl.n	801d3f2 <_dtoa_r+0x34a>
 801d3c2:	4b92      	ldr	r3, [pc, #584]	; (801d60c <_dtoa_r+0x564>)
 801d3c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d3c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d3cc:	f7eb fc16 	bl	8008bfc <__aeabi_ddiv>
 801d3d0:	f006 060f 	and.w	r6, r6, #15
 801d3d4:	4682      	mov	sl, r0
 801d3d6:	468b      	mov	fp, r1
 801d3d8:	2703      	movs	r7, #3
 801d3da:	4b8c      	ldr	r3, [pc, #560]	; (801d60c <_dtoa_r+0x564>)
 801d3dc:	930e      	str	r3, [sp, #56]	; 0x38
 801d3de:	b956      	cbnz	r6, 801d3f6 <_dtoa_r+0x34e>
 801d3e0:	4622      	mov	r2, r4
 801d3e2:	462b      	mov	r3, r5
 801d3e4:	4650      	mov	r0, sl
 801d3e6:	4659      	mov	r1, fp
 801d3e8:	f7eb fc08 	bl	8008bfc <__aeabi_ddiv>
 801d3ec:	4682      	mov	sl, r0
 801d3ee:	468b      	mov	fp, r1
 801d3f0:	e02a      	b.n	801d448 <_dtoa_r+0x3a0>
 801d3f2:	2702      	movs	r7, #2
 801d3f4:	e7f1      	b.n	801d3da <_dtoa_r+0x332>
 801d3f6:	07f1      	lsls	r1, r6, #31
 801d3f8:	d509      	bpl.n	801d40e <_dtoa_r+0x366>
 801d3fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3fc:	4620      	mov	r0, r4
 801d3fe:	4629      	mov	r1, r5
 801d400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d404:	f7eb fad0 	bl	80089a8 <__aeabi_dmul>
 801d408:	3701      	adds	r7, #1
 801d40a:	4604      	mov	r4, r0
 801d40c:	460d      	mov	r5, r1
 801d40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d410:	1076      	asrs	r6, r6, #1
 801d412:	3308      	adds	r3, #8
 801d414:	e7e2      	b.n	801d3dc <_dtoa_r+0x334>
 801d416:	f000 809f 	beq.w	801d558 <_dtoa_r+0x4b0>
 801d41a:	9b03      	ldr	r3, [sp, #12]
 801d41c:	4d7b      	ldr	r5, [pc, #492]	; (801d60c <_dtoa_r+0x564>)
 801d41e:	425c      	negs	r4, r3
 801d420:	4b79      	ldr	r3, [pc, #484]	; (801d608 <_dtoa_r+0x560>)
 801d422:	f004 020f 	and.w	r2, r4, #15
 801d426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d42e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801d432:	f7eb fab9 	bl	80089a8 <__aeabi_dmul>
 801d436:	1124      	asrs	r4, r4, #4
 801d438:	4682      	mov	sl, r0
 801d43a:	468b      	mov	fp, r1
 801d43c:	2300      	movs	r3, #0
 801d43e:	2702      	movs	r7, #2
 801d440:	2c00      	cmp	r4, #0
 801d442:	d17e      	bne.n	801d542 <_dtoa_r+0x49a>
 801d444:	2b00      	cmp	r3, #0
 801d446:	d1d1      	bne.n	801d3ec <_dtoa_r+0x344>
 801d448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d44a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 801d44e:	2b00      	cmp	r3, #0
 801d450:	f000 8084 	beq.w	801d55c <_dtoa_r+0x4b4>
 801d454:	4b6e      	ldr	r3, [pc, #440]	; (801d610 <_dtoa_r+0x568>)
 801d456:	2200      	movs	r2, #0
 801d458:	4650      	mov	r0, sl
 801d45a:	4659      	mov	r1, fp
 801d45c:	f7eb fd16 	bl	8008e8c <__aeabi_dcmplt>
 801d460:	2800      	cmp	r0, #0
 801d462:	d07b      	beq.n	801d55c <_dtoa_r+0x4b4>
 801d464:	9b05      	ldr	r3, [sp, #20]
 801d466:	2b00      	cmp	r3, #0
 801d468:	d078      	beq.n	801d55c <_dtoa_r+0x4b4>
 801d46a:	9b08      	ldr	r3, [sp, #32]
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	dd36      	ble.n	801d4de <_dtoa_r+0x436>
 801d470:	9b03      	ldr	r3, [sp, #12]
 801d472:	4650      	mov	r0, sl
 801d474:	4659      	mov	r1, fp
 801d476:	1e5d      	subs	r5, r3, #1
 801d478:	2200      	movs	r2, #0
 801d47a:	4b66      	ldr	r3, [pc, #408]	; (801d614 <_dtoa_r+0x56c>)
 801d47c:	f7eb fa94 	bl	80089a8 <__aeabi_dmul>
 801d480:	9c08      	ldr	r4, [sp, #32]
 801d482:	4682      	mov	sl, r0
 801d484:	468b      	mov	fp, r1
 801d486:	3701      	adds	r7, #1
 801d488:	4638      	mov	r0, r7
 801d48a:	f7eb fa23 	bl	80088d4 <__aeabi_i2d>
 801d48e:	4652      	mov	r2, sl
 801d490:	465b      	mov	r3, fp
 801d492:	f7eb fa89 	bl	80089a8 <__aeabi_dmul>
 801d496:	4b60      	ldr	r3, [pc, #384]	; (801d618 <_dtoa_r+0x570>)
 801d498:	2200      	movs	r2, #0
 801d49a:	f7eb f8cf 	bl	800863c <__adddf3>
 801d49e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801d4a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d4a6:	960f      	str	r6, [sp, #60]	; 0x3c
 801d4a8:	2c00      	cmp	r4, #0
 801d4aa:	d15a      	bne.n	801d562 <_dtoa_r+0x4ba>
 801d4ac:	4b5b      	ldr	r3, [pc, #364]	; (801d61c <_dtoa_r+0x574>)
 801d4ae:	2200      	movs	r2, #0
 801d4b0:	4650      	mov	r0, sl
 801d4b2:	4659      	mov	r1, fp
 801d4b4:	f7eb f8c0 	bl	8008638 <__aeabi_dsub>
 801d4b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d4ba:	4633      	mov	r3, r6
 801d4bc:	4682      	mov	sl, r0
 801d4be:	468b      	mov	fp, r1
 801d4c0:	f7eb fd02 	bl	8008ec8 <__aeabi_dcmpgt>
 801d4c4:	2800      	cmp	r0, #0
 801d4c6:	f040 8295 	bne.w	801d9f4 <_dtoa_r+0x94c>
 801d4ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d4cc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801d4d0:	4650      	mov	r0, sl
 801d4d2:	4659      	mov	r1, fp
 801d4d4:	f7eb fcda 	bl	8008e8c <__aeabi_dcmplt>
 801d4d8:	2800      	cmp	r0, #0
 801d4da:	f040 8289 	bne.w	801d9f0 <_dtoa_r+0x948>
 801d4de:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 801d4e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	f2c0 814e 	blt.w	801d786 <_dtoa_r+0x6de>
 801d4ea:	9a03      	ldr	r2, [sp, #12]
 801d4ec:	2a0e      	cmp	r2, #14
 801d4ee:	f300 814a 	bgt.w	801d786 <_dtoa_r+0x6de>
 801d4f2:	4b45      	ldr	r3, [pc, #276]	; (801d608 <_dtoa_r+0x560>)
 801d4f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d4f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d4fc:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801d500:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d502:	2b00      	cmp	r3, #0
 801d504:	f280 80d7 	bge.w	801d6b6 <_dtoa_r+0x60e>
 801d508:	9b05      	ldr	r3, [sp, #20]
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	f300 80d3 	bgt.w	801d6b6 <_dtoa_r+0x60e>
 801d510:	f040 826d 	bne.w	801d9ee <_dtoa_r+0x946>
 801d514:	4b41      	ldr	r3, [pc, #260]	; (801d61c <_dtoa_r+0x574>)
 801d516:	2200      	movs	r2, #0
 801d518:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d51c:	f7eb fa44 	bl	80089a8 <__aeabi_dmul>
 801d520:	4652      	mov	r2, sl
 801d522:	465b      	mov	r3, fp
 801d524:	f7eb fcc6 	bl	8008eb4 <__aeabi_dcmpge>
 801d528:	9c05      	ldr	r4, [sp, #20]
 801d52a:	4625      	mov	r5, r4
 801d52c:	2800      	cmp	r0, #0
 801d52e:	f040 8246 	bne.w	801d9be <_dtoa_r+0x916>
 801d532:	9e04      	ldr	r6, [sp, #16]
 801d534:	2331      	movs	r3, #49	; 0x31
 801d536:	f806 3b01 	strb.w	r3, [r6], #1
 801d53a:	9b03      	ldr	r3, [sp, #12]
 801d53c:	3301      	adds	r3, #1
 801d53e:	9303      	str	r3, [sp, #12]
 801d540:	e241      	b.n	801d9c6 <_dtoa_r+0x91e>
 801d542:	07e2      	lsls	r2, r4, #31
 801d544:	d505      	bpl.n	801d552 <_dtoa_r+0x4aa>
 801d546:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d54a:	f7eb fa2d 	bl	80089a8 <__aeabi_dmul>
 801d54e:	3701      	adds	r7, #1
 801d550:	2301      	movs	r3, #1
 801d552:	1064      	asrs	r4, r4, #1
 801d554:	3508      	adds	r5, #8
 801d556:	e773      	b.n	801d440 <_dtoa_r+0x398>
 801d558:	2702      	movs	r7, #2
 801d55a:	e775      	b.n	801d448 <_dtoa_r+0x3a0>
 801d55c:	9d03      	ldr	r5, [sp, #12]
 801d55e:	9c05      	ldr	r4, [sp, #20]
 801d560:	e792      	b.n	801d488 <_dtoa_r+0x3e0>
 801d562:	9904      	ldr	r1, [sp, #16]
 801d564:	4b28      	ldr	r3, [pc, #160]	; (801d608 <_dtoa_r+0x560>)
 801d566:	4421      	add	r1, r4
 801d568:	9112      	str	r1, [sp, #72]	; 0x48
 801d56a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d56c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d570:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 801d574:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d578:	2900      	cmp	r1, #0
 801d57a:	d053      	beq.n	801d624 <_dtoa_r+0x57c>
 801d57c:	4928      	ldr	r1, [pc, #160]	; (801d620 <_dtoa_r+0x578>)
 801d57e:	2000      	movs	r0, #0
 801d580:	f7eb fb3c 	bl	8008bfc <__aeabi_ddiv>
 801d584:	4632      	mov	r2, r6
 801d586:	463b      	mov	r3, r7
 801d588:	f7eb f856 	bl	8008638 <__aeabi_dsub>
 801d58c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d590:	9e04      	ldr	r6, [sp, #16]
 801d592:	4659      	mov	r1, fp
 801d594:	4650      	mov	r0, sl
 801d596:	f7eb fcb7 	bl	8008f08 <__aeabi_d2iz>
 801d59a:	4604      	mov	r4, r0
 801d59c:	f7eb f99a 	bl	80088d4 <__aeabi_i2d>
 801d5a0:	4602      	mov	r2, r0
 801d5a2:	460b      	mov	r3, r1
 801d5a4:	4650      	mov	r0, sl
 801d5a6:	4659      	mov	r1, fp
 801d5a8:	f7eb f846 	bl	8008638 <__aeabi_dsub>
 801d5ac:	3430      	adds	r4, #48	; 0x30
 801d5ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d5b2:	f806 4b01 	strb.w	r4, [r6], #1
 801d5b6:	4682      	mov	sl, r0
 801d5b8:	468b      	mov	fp, r1
 801d5ba:	f7eb fc67 	bl	8008e8c <__aeabi_dcmplt>
 801d5be:	2800      	cmp	r0, #0
 801d5c0:	d171      	bne.n	801d6a6 <_dtoa_r+0x5fe>
 801d5c2:	4652      	mov	r2, sl
 801d5c4:	465b      	mov	r3, fp
 801d5c6:	4912      	ldr	r1, [pc, #72]	; (801d610 <_dtoa_r+0x568>)
 801d5c8:	2000      	movs	r0, #0
 801d5ca:	f7eb f835 	bl	8008638 <__aeabi_dsub>
 801d5ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d5d2:	f7eb fc5b 	bl	8008e8c <__aeabi_dcmplt>
 801d5d6:	2800      	cmp	r0, #0
 801d5d8:	f040 80b7 	bne.w	801d74a <_dtoa_r+0x6a2>
 801d5dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d5de:	429e      	cmp	r6, r3
 801d5e0:	f43f af7d 	beq.w	801d4de <_dtoa_r+0x436>
 801d5e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d5e8:	4b0a      	ldr	r3, [pc, #40]	; (801d614 <_dtoa_r+0x56c>)
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	f7eb f9dc 	bl	80089a8 <__aeabi_dmul>
 801d5f0:	4b08      	ldr	r3, [pc, #32]	; (801d614 <_dtoa_r+0x56c>)
 801d5f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d5f6:	2200      	movs	r2, #0
 801d5f8:	4650      	mov	r0, sl
 801d5fa:	4659      	mov	r1, fp
 801d5fc:	f7eb f9d4 	bl	80089a8 <__aeabi_dmul>
 801d600:	4682      	mov	sl, r0
 801d602:	468b      	mov	fp, r1
 801d604:	e7c5      	b.n	801d592 <_dtoa_r+0x4ea>
 801d606:	bf00      	nop
 801d608:	08020b00 	.word	0x08020b00
 801d60c:	08020ad8 	.word	0x08020ad8
 801d610:	3ff00000 	.word	0x3ff00000
 801d614:	40240000 	.word	0x40240000
 801d618:	401c0000 	.word	0x401c0000
 801d61c:	40140000 	.word	0x40140000
 801d620:	3fe00000 	.word	0x3fe00000
 801d624:	4630      	mov	r0, r6
 801d626:	4639      	mov	r1, r7
 801d628:	f7eb f9be 	bl	80089a8 <__aeabi_dmul>
 801d62c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801d630:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801d632:	9e04      	ldr	r6, [sp, #16]
 801d634:	4659      	mov	r1, fp
 801d636:	4650      	mov	r0, sl
 801d638:	f7eb fc66 	bl	8008f08 <__aeabi_d2iz>
 801d63c:	4604      	mov	r4, r0
 801d63e:	f7eb f949 	bl	80088d4 <__aeabi_i2d>
 801d642:	3430      	adds	r4, #48	; 0x30
 801d644:	4602      	mov	r2, r0
 801d646:	460b      	mov	r3, r1
 801d648:	4650      	mov	r0, sl
 801d64a:	4659      	mov	r1, fp
 801d64c:	f7ea fff4 	bl	8008638 <__aeabi_dsub>
 801d650:	f806 4b01 	strb.w	r4, [r6], #1
 801d654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d656:	429e      	cmp	r6, r3
 801d658:	4682      	mov	sl, r0
 801d65a:	468b      	mov	fp, r1
 801d65c:	f04f 0200 	mov.w	r2, #0
 801d660:	d123      	bne.n	801d6aa <_dtoa_r+0x602>
 801d662:	4bb0      	ldr	r3, [pc, #704]	; (801d924 <_dtoa_r+0x87c>)
 801d664:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801d668:	f7ea ffe8 	bl	800863c <__adddf3>
 801d66c:	4602      	mov	r2, r0
 801d66e:	460b      	mov	r3, r1
 801d670:	4650      	mov	r0, sl
 801d672:	4659      	mov	r1, fp
 801d674:	f7eb fc28 	bl	8008ec8 <__aeabi_dcmpgt>
 801d678:	2800      	cmp	r0, #0
 801d67a:	d166      	bne.n	801d74a <_dtoa_r+0x6a2>
 801d67c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801d680:	49a8      	ldr	r1, [pc, #672]	; (801d924 <_dtoa_r+0x87c>)
 801d682:	2000      	movs	r0, #0
 801d684:	f7ea ffd8 	bl	8008638 <__aeabi_dsub>
 801d688:	4602      	mov	r2, r0
 801d68a:	460b      	mov	r3, r1
 801d68c:	4650      	mov	r0, sl
 801d68e:	4659      	mov	r1, fp
 801d690:	f7eb fbfc 	bl	8008e8c <__aeabi_dcmplt>
 801d694:	2800      	cmp	r0, #0
 801d696:	f43f af22 	beq.w	801d4de <_dtoa_r+0x436>
 801d69a:	463e      	mov	r6, r7
 801d69c:	3f01      	subs	r7, #1
 801d69e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d6a2:	2b30      	cmp	r3, #48	; 0x30
 801d6a4:	d0f9      	beq.n	801d69a <_dtoa_r+0x5f2>
 801d6a6:	9503      	str	r5, [sp, #12]
 801d6a8:	e03e      	b.n	801d728 <_dtoa_r+0x680>
 801d6aa:	4b9f      	ldr	r3, [pc, #636]	; (801d928 <_dtoa_r+0x880>)
 801d6ac:	f7eb f97c 	bl	80089a8 <__aeabi_dmul>
 801d6b0:	4682      	mov	sl, r0
 801d6b2:	468b      	mov	fp, r1
 801d6b4:	e7be      	b.n	801d634 <_dtoa_r+0x58c>
 801d6b6:	465d      	mov	r5, fp
 801d6b8:	9e04      	ldr	r6, [sp, #16]
 801d6ba:	f8df b26c 	ldr.w	fp, [pc, #620]	; 801d928 <_dtoa_r+0x880>
 801d6be:	4654      	mov	r4, sl
 801d6c0:	f04f 0a00 	mov.w	sl, #0
 801d6c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d6c8:	4620      	mov	r0, r4
 801d6ca:	4629      	mov	r1, r5
 801d6cc:	f7eb fa96 	bl	8008bfc <__aeabi_ddiv>
 801d6d0:	f7eb fc1a 	bl	8008f08 <__aeabi_d2iz>
 801d6d4:	4607      	mov	r7, r0
 801d6d6:	f7eb f8fd 	bl	80088d4 <__aeabi_i2d>
 801d6da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d6de:	f7eb f963 	bl	80089a8 <__aeabi_dmul>
 801d6e2:	4602      	mov	r2, r0
 801d6e4:	460b      	mov	r3, r1
 801d6e6:	4620      	mov	r0, r4
 801d6e8:	4629      	mov	r1, r5
 801d6ea:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801d6ee:	f7ea ffa3 	bl	8008638 <__aeabi_dsub>
 801d6f2:	f806 4b01 	strb.w	r4, [r6], #1
 801d6f6:	9c04      	ldr	r4, [sp, #16]
 801d6f8:	9d05      	ldr	r5, [sp, #20]
 801d6fa:	1b34      	subs	r4, r6, r4
 801d6fc:	42a5      	cmp	r5, r4
 801d6fe:	4602      	mov	r2, r0
 801d700:	460b      	mov	r3, r1
 801d702:	d133      	bne.n	801d76c <_dtoa_r+0x6c4>
 801d704:	f7ea ff9a 	bl	800863c <__adddf3>
 801d708:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d70c:	4604      	mov	r4, r0
 801d70e:	460d      	mov	r5, r1
 801d710:	f7eb fbda 	bl	8008ec8 <__aeabi_dcmpgt>
 801d714:	b9c0      	cbnz	r0, 801d748 <_dtoa_r+0x6a0>
 801d716:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d71a:	4620      	mov	r0, r4
 801d71c:	4629      	mov	r1, r5
 801d71e:	f7eb fbab 	bl	8008e78 <__aeabi_dcmpeq>
 801d722:	b108      	cbz	r0, 801d728 <_dtoa_r+0x680>
 801d724:	07fb      	lsls	r3, r7, #31
 801d726:	d40f      	bmi.n	801d748 <_dtoa_r+0x6a0>
 801d728:	4641      	mov	r1, r8
 801d72a:	4648      	mov	r0, r9
 801d72c:	f000 fabd 	bl	801dcaa <_Bfree>
 801d730:	2300      	movs	r3, #0
 801d732:	7033      	strb	r3, [r6, #0]
 801d734:	9b03      	ldr	r3, [sp, #12]
 801d736:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d738:	3301      	adds	r3, #1
 801d73a:	6013      	str	r3, [r2, #0]
 801d73c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d73e:	2b00      	cmp	r3, #0
 801d740:	f43f ace8 	beq.w	801d114 <_dtoa_r+0x6c>
 801d744:	601e      	str	r6, [r3, #0]
 801d746:	e4e5      	b.n	801d114 <_dtoa_r+0x6c>
 801d748:	9d03      	ldr	r5, [sp, #12]
 801d74a:	4633      	mov	r3, r6
 801d74c:	461e      	mov	r6, r3
 801d74e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d752:	2a39      	cmp	r2, #57	; 0x39
 801d754:	d106      	bne.n	801d764 <_dtoa_r+0x6bc>
 801d756:	9a04      	ldr	r2, [sp, #16]
 801d758:	429a      	cmp	r2, r3
 801d75a:	d1f7      	bne.n	801d74c <_dtoa_r+0x6a4>
 801d75c:	9904      	ldr	r1, [sp, #16]
 801d75e:	2230      	movs	r2, #48	; 0x30
 801d760:	3501      	adds	r5, #1
 801d762:	700a      	strb	r2, [r1, #0]
 801d764:	781a      	ldrb	r2, [r3, #0]
 801d766:	3201      	adds	r2, #1
 801d768:	701a      	strb	r2, [r3, #0]
 801d76a:	e79c      	b.n	801d6a6 <_dtoa_r+0x5fe>
 801d76c:	4652      	mov	r2, sl
 801d76e:	465b      	mov	r3, fp
 801d770:	f7eb f91a 	bl	80089a8 <__aeabi_dmul>
 801d774:	2200      	movs	r2, #0
 801d776:	2300      	movs	r3, #0
 801d778:	4604      	mov	r4, r0
 801d77a:	460d      	mov	r5, r1
 801d77c:	f7eb fb7c 	bl	8008e78 <__aeabi_dcmpeq>
 801d780:	2800      	cmp	r0, #0
 801d782:	d09f      	beq.n	801d6c4 <_dtoa_r+0x61c>
 801d784:	e7d0      	b.n	801d728 <_dtoa_r+0x680>
 801d786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d788:	2a00      	cmp	r2, #0
 801d78a:	f000 80cf 	beq.w	801d92c <_dtoa_r+0x884>
 801d78e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d790:	2a01      	cmp	r2, #1
 801d792:	f300 80ad 	bgt.w	801d8f0 <_dtoa_r+0x848>
 801d796:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d798:	2a00      	cmp	r2, #0
 801d79a:	f000 80a5 	beq.w	801d8e8 <_dtoa_r+0x840>
 801d79e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d7a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d7a4:	9e06      	ldr	r6, [sp, #24]
 801d7a6:	9a06      	ldr	r2, [sp, #24]
 801d7a8:	441a      	add	r2, r3
 801d7aa:	9206      	str	r2, [sp, #24]
 801d7ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d7ae:	2101      	movs	r1, #1
 801d7b0:	441a      	add	r2, r3
 801d7b2:	4648      	mov	r0, r9
 801d7b4:	9209      	str	r2, [sp, #36]	; 0x24
 801d7b6:	f000 fb15 	bl	801dde4 <__i2b>
 801d7ba:	4605      	mov	r5, r0
 801d7bc:	b166      	cbz	r6, 801d7d8 <_dtoa_r+0x730>
 801d7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	dd09      	ble.n	801d7d8 <_dtoa_r+0x730>
 801d7c4:	42b3      	cmp	r3, r6
 801d7c6:	9a06      	ldr	r2, [sp, #24]
 801d7c8:	bfa8      	it	ge
 801d7ca:	4633      	movge	r3, r6
 801d7cc:	1ad2      	subs	r2, r2, r3
 801d7ce:	9206      	str	r2, [sp, #24]
 801d7d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d7d2:	1af6      	subs	r6, r6, r3
 801d7d4:	1ad3      	subs	r3, r2, r3
 801d7d6:	9309      	str	r3, [sp, #36]	; 0x24
 801d7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7da:	b1f3      	cbz	r3, 801d81a <_dtoa_r+0x772>
 801d7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	f000 80a8 	beq.w	801d934 <_dtoa_r+0x88c>
 801d7e4:	2c00      	cmp	r4, #0
 801d7e6:	dd10      	ble.n	801d80a <_dtoa_r+0x762>
 801d7e8:	4629      	mov	r1, r5
 801d7ea:	4622      	mov	r2, r4
 801d7ec:	4648      	mov	r0, r9
 801d7ee:	f000 fbb9 	bl	801df64 <__pow5mult>
 801d7f2:	4642      	mov	r2, r8
 801d7f4:	4601      	mov	r1, r0
 801d7f6:	4605      	mov	r5, r0
 801d7f8:	4648      	mov	r0, r9
 801d7fa:	f000 fb09 	bl	801de10 <__multiply>
 801d7fe:	4641      	mov	r1, r8
 801d800:	4607      	mov	r7, r0
 801d802:	4648      	mov	r0, r9
 801d804:	f000 fa51 	bl	801dcaa <_Bfree>
 801d808:	46b8      	mov	r8, r7
 801d80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d80c:	1b1a      	subs	r2, r3, r4
 801d80e:	d004      	beq.n	801d81a <_dtoa_r+0x772>
 801d810:	4641      	mov	r1, r8
 801d812:	4648      	mov	r0, r9
 801d814:	f000 fba6 	bl	801df64 <__pow5mult>
 801d818:	4680      	mov	r8, r0
 801d81a:	2101      	movs	r1, #1
 801d81c:	4648      	mov	r0, r9
 801d81e:	f000 fae1 	bl	801dde4 <__i2b>
 801d822:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d824:	2b00      	cmp	r3, #0
 801d826:	4604      	mov	r4, r0
 801d828:	f340 8086 	ble.w	801d938 <_dtoa_r+0x890>
 801d82c:	461a      	mov	r2, r3
 801d82e:	4601      	mov	r1, r0
 801d830:	4648      	mov	r0, r9
 801d832:	f000 fb97 	bl	801df64 <__pow5mult>
 801d836:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d838:	2b01      	cmp	r3, #1
 801d83a:	4604      	mov	r4, r0
 801d83c:	dd7f      	ble.n	801d93e <_dtoa_r+0x896>
 801d83e:	2700      	movs	r7, #0
 801d840:	6923      	ldr	r3, [r4, #16]
 801d842:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d846:	6918      	ldr	r0, [r3, #16]
 801d848:	f000 fa7e 	bl	801dd48 <__hi0bits>
 801d84c:	f1c0 0020 	rsb	r0, r0, #32
 801d850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d852:	4418      	add	r0, r3
 801d854:	f010 001f 	ands.w	r0, r0, #31
 801d858:	f000 8098 	beq.w	801d98c <_dtoa_r+0x8e4>
 801d85c:	f1c0 0320 	rsb	r3, r0, #32
 801d860:	2b04      	cmp	r3, #4
 801d862:	f340 8088 	ble.w	801d976 <_dtoa_r+0x8ce>
 801d866:	9b06      	ldr	r3, [sp, #24]
 801d868:	f1c0 001c 	rsb	r0, r0, #28
 801d86c:	4403      	add	r3, r0
 801d86e:	9306      	str	r3, [sp, #24]
 801d870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d872:	4403      	add	r3, r0
 801d874:	4406      	add	r6, r0
 801d876:	9309      	str	r3, [sp, #36]	; 0x24
 801d878:	9b06      	ldr	r3, [sp, #24]
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	dd05      	ble.n	801d88a <_dtoa_r+0x7e2>
 801d87e:	4641      	mov	r1, r8
 801d880:	461a      	mov	r2, r3
 801d882:	4648      	mov	r0, r9
 801d884:	f000 fbae 	bl	801dfe4 <__lshift>
 801d888:	4680      	mov	r8, r0
 801d88a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d88c:	2b00      	cmp	r3, #0
 801d88e:	dd05      	ble.n	801d89c <_dtoa_r+0x7f4>
 801d890:	4621      	mov	r1, r4
 801d892:	461a      	mov	r2, r3
 801d894:	4648      	mov	r0, r9
 801d896:	f000 fba5 	bl	801dfe4 <__lshift>
 801d89a:	4604      	mov	r4, r0
 801d89c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	d076      	beq.n	801d990 <_dtoa_r+0x8e8>
 801d8a2:	4621      	mov	r1, r4
 801d8a4:	4640      	mov	r0, r8
 801d8a6:	f000 fc09 	bl	801e0bc <__mcmp>
 801d8aa:	2800      	cmp	r0, #0
 801d8ac:	da70      	bge.n	801d990 <_dtoa_r+0x8e8>
 801d8ae:	9b03      	ldr	r3, [sp, #12]
 801d8b0:	3b01      	subs	r3, #1
 801d8b2:	9303      	str	r3, [sp, #12]
 801d8b4:	4641      	mov	r1, r8
 801d8b6:	2300      	movs	r3, #0
 801d8b8:	220a      	movs	r2, #10
 801d8ba:	4648      	mov	r0, r9
 801d8bc:	f000 f9fe 	bl	801dcbc <__multadd>
 801d8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d8c2:	4680      	mov	r8, r0
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	f000 81aa 	beq.w	801dc1e <_dtoa_r+0xb76>
 801d8ca:	2300      	movs	r3, #0
 801d8cc:	4629      	mov	r1, r5
 801d8ce:	220a      	movs	r2, #10
 801d8d0:	4648      	mov	r0, r9
 801d8d2:	f000 f9f3 	bl	801dcbc <__multadd>
 801d8d6:	9b08      	ldr	r3, [sp, #32]
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	4605      	mov	r5, r0
 801d8dc:	f300 8093 	bgt.w	801da06 <_dtoa_r+0x95e>
 801d8e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d8e2:	2b02      	cmp	r3, #2
 801d8e4:	dc5c      	bgt.n	801d9a0 <_dtoa_r+0x8f8>
 801d8e6:	e08e      	b.n	801da06 <_dtoa_r+0x95e>
 801d8e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d8ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d8ee:	e758      	b.n	801d7a2 <_dtoa_r+0x6fa>
 801d8f0:	9b05      	ldr	r3, [sp, #20]
 801d8f2:	1e5c      	subs	r4, r3, #1
 801d8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8f6:	42a3      	cmp	r3, r4
 801d8f8:	bfbf      	itttt	lt
 801d8fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801d8fc:	9a10      	ldrlt	r2, [sp, #64]	; 0x40
 801d8fe:	940a      	strlt	r4, [sp, #40]	; 0x28
 801d900:	1ae3      	sublt	r3, r4, r3
 801d902:	bfb4      	ite	lt
 801d904:	18d2      	addlt	r2, r2, r3
 801d906:	1b1c      	subge	r4, r3, r4
 801d908:	9b05      	ldr	r3, [sp, #20]
 801d90a:	bfbc      	itt	lt
 801d90c:	9210      	strlt	r2, [sp, #64]	; 0x40
 801d90e:	2400      	movlt	r4, #0
 801d910:	2b00      	cmp	r3, #0
 801d912:	bfb7      	itett	lt
 801d914:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 801d918:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 801d91c:	1a9e      	sublt	r6, r3, r2
 801d91e:	2300      	movlt	r3, #0
 801d920:	e741      	b.n	801d7a6 <_dtoa_r+0x6fe>
 801d922:	bf00      	nop
 801d924:	3fe00000 	.word	0x3fe00000
 801d928:	40240000 	.word	0x40240000
 801d92c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d92e:	9e06      	ldr	r6, [sp, #24]
 801d930:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801d932:	e743      	b.n	801d7bc <_dtoa_r+0x714>
 801d934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d936:	e76b      	b.n	801d810 <_dtoa_r+0x768>
 801d938:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d93a:	2b01      	cmp	r3, #1
 801d93c:	dc17      	bgt.n	801d96e <_dtoa_r+0x8c6>
 801d93e:	f1ba 0f00 	cmp.w	sl, #0
 801d942:	d114      	bne.n	801d96e <_dtoa_r+0x8c6>
 801d944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d948:	b99b      	cbnz	r3, 801d972 <_dtoa_r+0x8ca>
 801d94a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801d94e:	0d3f      	lsrs	r7, r7, #20
 801d950:	053f      	lsls	r7, r7, #20
 801d952:	b137      	cbz	r7, 801d962 <_dtoa_r+0x8ba>
 801d954:	9b06      	ldr	r3, [sp, #24]
 801d956:	3301      	adds	r3, #1
 801d958:	9306      	str	r3, [sp, #24]
 801d95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d95c:	3301      	adds	r3, #1
 801d95e:	9309      	str	r3, [sp, #36]	; 0x24
 801d960:	2701      	movs	r7, #1
 801d962:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d964:	2b00      	cmp	r3, #0
 801d966:	f47f af6b 	bne.w	801d840 <_dtoa_r+0x798>
 801d96a:	2001      	movs	r0, #1
 801d96c:	e770      	b.n	801d850 <_dtoa_r+0x7a8>
 801d96e:	2700      	movs	r7, #0
 801d970:	e7f7      	b.n	801d962 <_dtoa_r+0x8ba>
 801d972:	4657      	mov	r7, sl
 801d974:	e7f5      	b.n	801d962 <_dtoa_r+0x8ba>
 801d976:	f43f af7f 	beq.w	801d878 <_dtoa_r+0x7d0>
 801d97a:	9a06      	ldr	r2, [sp, #24]
 801d97c:	331c      	adds	r3, #28
 801d97e:	441a      	add	r2, r3
 801d980:	9206      	str	r2, [sp, #24]
 801d982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d984:	441a      	add	r2, r3
 801d986:	441e      	add	r6, r3
 801d988:	9209      	str	r2, [sp, #36]	; 0x24
 801d98a:	e775      	b.n	801d878 <_dtoa_r+0x7d0>
 801d98c:	4603      	mov	r3, r0
 801d98e:	e7f4      	b.n	801d97a <_dtoa_r+0x8d2>
 801d990:	9b05      	ldr	r3, [sp, #20]
 801d992:	2b00      	cmp	r3, #0
 801d994:	dc31      	bgt.n	801d9fa <_dtoa_r+0x952>
 801d996:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d998:	2b02      	cmp	r3, #2
 801d99a:	dd2e      	ble.n	801d9fa <_dtoa_r+0x952>
 801d99c:	9b05      	ldr	r3, [sp, #20]
 801d99e:	9308      	str	r3, [sp, #32]
 801d9a0:	9b08      	ldr	r3, [sp, #32]
 801d9a2:	b963      	cbnz	r3, 801d9be <_dtoa_r+0x916>
 801d9a4:	4621      	mov	r1, r4
 801d9a6:	2205      	movs	r2, #5
 801d9a8:	4648      	mov	r0, r9
 801d9aa:	f000 f987 	bl	801dcbc <__multadd>
 801d9ae:	4601      	mov	r1, r0
 801d9b0:	4604      	mov	r4, r0
 801d9b2:	4640      	mov	r0, r8
 801d9b4:	f000 fb82 	bl	801e0bc <__mcmp>
 801d9b8:	2800      	cmp	r0, #0
 801d9ba:	f73f adba 	bgt.w	801d532 <_dtoa_r+0x48a>
 801d9be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d9c0:	9e04      	ldr	r6, [sp, #16]
 801d9c2:	43db      	mvns	r3, r3
 801d9c4:	9303      	str	r3, [sp, #12]
 801d9c6:	2700      	movs	r7, #0
 801d9c8:	4621      	mov	r1, r4
 801d9ca:	4648      	mov	r0, r9
 801d9cc:	f000 f96d 	bl	801dcaa <_Bfree>
 801d9d0:	2d00      	cmp	r5, #0
 801d9d2:	f43f aea9 	beq.w	801d728 <_dtoa_r+0x680>
 801d9d6:	b12f      	cbz	r7, 801d9e4 <_dtoa_r+0x93c>
 801d9d8:	42af      	cmp	r7, r5
 801d9da:	d003      	beq.n	801d9e4 <_dtoa_r+0x93c>
 801d9dc:	4639      	mov	r1, r7
 801d9de:	4648      	mov	r0, r9
 801d9e0:	f000 f963 	bl	801dcaa <_Bfree>
 801d9e4:	4629      	mov	r1, r5
 801d9e6:	4648      	mov	r0, r9
 801d9e8:	f000 f95f 	bl	801dcaa <_Bfree>
 801d9ec:	e69c      	b.n	801d728 <_dtoa_r+0x680>
 801d9ee:	2400      	movs	r4, #0
 801d9f0:	4625      	mov	r5, r4
 801d9f2:	e7e4      	b.n	801d9be <_dtoa_r+0x916>
 801d9f4:	9503      	str	r5, [sp, #12]
 801d9f6:	4625      	mov	r5, r4
 801d9f8:	e59b      	b.n	801d532 <_dtoa_r+0x48a>
 801d9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	f000 80c4 	beq.w	801db8a <_dtoa_r+0xae2>
 801da02:	9b05      	ldr	r3, [sp, #20]
 801da04:	9308      	str	r3, [sp, #32]
 801da06:	2e00      	cmp	r6, #0
 801da08:	dd05      	ble.n	801da16 <_dtoa_r+0x96e>
 801da0a:	4629      	mov	r1, r5
 801da0c:	4632      	mov	r2, r6
 801da0e:	4648      	mov	r0, r9
 801da10:	f000 fae8 	bl	801dfe4 <__lshift>
 801da14:	4605      	mov	r5, r0
 801da16:	2f00      	cmp	r7, #0
 801da18:	d058      	beq.n	801dacc <_dtoa_r+0xa24>
 801da1a:	6869      	ldr	r1, [r5, #4]
 801da1c:	4648      	mov	r0, r9
 801da1e:	f000 f91f 	bl	801dc60 <_Balloc>
 801da22:	4606      	mov	r6, r0
 801da24:	b920      	cbnz	r0, 801da30 <_dtoa_r+0x988>
 801da26:	4b82      	ldr	r3, [pc, #520]	; (801dc30 <_dtoa_r+0xb88>)
 801da28:	4602      	mov	r2, r0
 801da2a:	f240 21ef 	movw	r1, #751	; 0x2ef
 801da2e:	e476      	b.n	801d31e <_dtoa_r+0x276>
 801da30:	692a      	ldr	r2, [r5, #16]
 801da32:	3202      	adds	r2, #2
 801da34:	0092      	lsls	r2, r2, #2
 801da36:	f105 010c 	add.w	r1, r5, #12
 801da3a:	300c      	adds	r0, #12
 801da3c:	f7fb f9a6 	bl	8018d8c <memcpy>
 801da40:	2201      	movs	r2, #1
 801da42:	4631      	mov	r1, r6
 801da44:	4648      	mov	r0, r9
 801da46:	f000 facd 	bl	801dfe4 <__lshift>
 801da4a:	9b04      	ldr	r3, [sp, #16]
 801da4c:	9a04      	ldr	r2, [sp, #16]
 801da4e:	3301      	adds	r3, #1
 801da50:	9305      	str	r3, [sp, #20]
 801da52:	9b08      	ldr	r3, [sp, #32]
 801da54:	4413      	add	r3, r2
 801da56:	930a      	str	r3, [sp, #40]	; 0x28
 801da58:	f00a 0301 	and.w	r3, sl, #1
 801da5c:	462f      	mov	r7, r5
 801da5e:	9309      	str	r3, [sp, #36]	; 0x24
 801da60:	4605      	mov	r5, r0
 801da62:	9b05      	ldr	r3, [sp, #20]
 801da64:	4621      	mov	r1, r4
 801da66:	4640      	mov	r0, r8
 801da68:	f103 3bff 	add.w	fp, r3, #4294967295
 801da6c:	f7ff fa94 	bl	801cf98 <quorem>
 801da70:	4639      	mov	r1, r7
 801da72:	9006      	str	r0, [sp, #24]
 801da74:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801da78:	4640      	mov	r0, r8
 801da7a:	f000 fb1f 	bl	801e0bc <__mcmp>
 801da7e:	462a      	mov	r2, r5
 801da80:	9008      	str	r0, [sp, #32]
 801da82:	4621      	mov	r1, r4
 801da84:	4648      	mov	r0, r9
 801da86:	f000 fb35 	bl	801e0f4 <__mdiff>
 801da8a:	68c2      	ldr	r2, [r0, #12]
 801da8c:	4606      	mov	r6, r0
 801da8e:	b9fa      	cbnz	r2, 801dad0 <_dtoa_r+0xa28>
 801da90:	4601      	mov	r1, r0
 801da92:	4640      	mov	r0, r8
 801da94:	f000 fb12 	bl	801e0bc <__mcmp>
 801da98:	4602      	mov	r2, r0
 801da9a:	4631      	mov	r1, r6
 801da9c:	4648      	mov	r0, r9
 801da9e:	920b      	str	r2, [sp, #44]	; 0x2c
 801daa0:	f000 f903 	bl	801dcaa <_Bfree>
 801daa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801daa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801daa8:	9e05      	ldr	r6, [sp, #20]
 801daaa:	ea43 0102 	orr.w	r1, r3, r2
 801daae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dab0:	4319      	orrs	r1, r3
 801dab2:	d10f      	bne.n	801dad4 <_dtoa_r+0xa2c>
 801dab4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801dab8:	d028      	beq.n	801db0c <_dtoa_r+0xa64>
 801daba:	9b08      	ldr	r3, [sp, #32]
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	dd02      	ble.n	801dac6 <_dtoa_r+0xa1e>
 801dac0:	9b06      	ldr	r3, [sp, #24]
 801dac2:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801dac6:	f88b a000 	strb.w	sl, [fp]
 801daca:	e77d      	b.n	801d9c8 <_dtoa_r+0x920>
 801dacc:	4628      	mov	r0, r5
 801dace:	e7bc      	b.n	801da4a <_dtoa_r+0x9a2>
 801dad0:	2201      	movs	r2, #1
 801dad2:	e7e2      	b.n	801da9a <_dtoa_r+0x9f2>
 801dad4:	9b08      	ldr	r3, [sp, #32]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	db04      	blt.n	801dae4 <_dtoa_r+0xa3c>
 801dada:	9920      	ldr	r1, [sp, #128]	; 0x80
 801dadc:	430b      	orrs	r3, r1
 801dade:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dae0:	430b      	orrs	r3, r1
 801dae2:	d120      	bne.n	801db26 <_dtoa_r+0xa7e>
 801dae4:	2a00      	cmp	r2, #0
 801dae6:	ddee      	ble.n	801dac6 <_dtoa_r+0xa1e>
 801dae8:	4641      	mov	r1, r8
 801daea:	2201      	movs	r2, #1
 801daec:	4648      	mov	r0, r9
 801daee:	f000 fa79 	bl	801dfe4 <__lshift>
 801daf2:	4621      	mov	r1, r4
 801daf4:	4680      	mov	r8, r0
 801daf6:	f000 fae1 	bl	801e0bc <__mcmp>
 801dafa:	2800      	cmp	r0, #0
 801dafc:	dc03      	bgt.n	801db06 <_dtoa_r+0xa5e>
 801dafe:	d1e2      	bne.n	801dac6 <_dtoa_r+0xa1e>
 801db00:	f01a 0f01 	tst.w	sl, #1
 801db04:	d0df      	beq.n	801dac6 <_dtoa_r+0xa1e>
 801db06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801db0a:	d1d9      	bne.n	801dac0 <_dtoa_r+0xa18>
 801db0c:	2339      	movs	r3, #57	; 0x39
 801db0e:	f88b 3000 	strb.w	r3, [fp]
 801db12:	4633      	mov	r3, r6
 801db14:	461e      	mov	r6, r3
 801db16:	3b01      	subs	r3, #1
 801db18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801db1c:	2a39      	cmp	r2, #57	; 0x39
 801db1e:	d06b      	beq.n	801dbf8 <_dtoa_r+0xb50>
 801db20:	3201      	adds	r2, #1
 801db22:	701a      	strb	r2, [r3, #0]
 801db24:	e750      	b.n	801d9c8 <_dtoa_r+0x920>
 801db26:	2a00      	cmp	r2, #0
 801db28:	dd07      	ble.n	801db3a <_dtoa_r+0xa92>
 801db2a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801db2e:	d0ed      	beq.n	801db0c <_dtoa_r+0xa64>
 801db30:	f10a 0301 	add.w	r3, sl, #1
 801db34:	f88b 3000 	strb.w	r3, [fp]
 801db38:	e746      	b.n	801d9c8 <_dtoa_r+0x920>
 801db3a:	9b05      	ldr	r3, [sp, #20]
 801db3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801db3e:	f803 ac01 	strb.w	sl, [r3, #-1]
 801db42:	4293      	cmp	r3, r2
 801db44:	d042      	beq.n	801dbcc <_dtoa_r+0xb24>
 801db46:	4641      	mov	r1, r8
 801db48:	2300      	movs	r3, #0
 801db4a:	220a      	movs	r2, #10
 801db4c:	4648      	mov	r0, r9
 801db4e:	f000 f8b5 	bl	801dcbc <__multadd>
 801db52:	42af      	cmp	r7, r5
 801db54:	4680      	mov	r8, r0
 801db56:	f04f 0300 	mov.w	r3, #0
 801db5a:	f04f 020a 	mov.w	r2, #10
 801db5e:	4639      	mov	r1, r7
 801db60:	4648      	mov	r0, r9
 801db62:	d107      	bne.n	801db74 <_dtoa_r+0xacc>
 801db64:	f000 f8aa 	bl	801dcbc <__multadd>
 801db68:	4607      	mov	r7, r0
 801db6a:	4605      	mov	r5, r0
 801db6c:	9b05      	ldr	r3, [sp, #20]
 801db6e:	3301      	adds	r3, #1
 801db70:	9305      	str	r3, [sp, #20]
 801db72:	e776      	b.n	801da62 <_dtoa_r+0x9ba>
 801db74:	f000 f8a2 	bl	801dcbc <__multadd>
 801db78:	4629      	mov	r1, r5
 801db7a:	4607      	mov	r7, r0
 801db7c:	2300      	movs	r3, #0
 801db7e:	220a      	movs	r2, #10
 801db80:	4648      	mov	r0, r9
 801db82:	f000 f89b 	bl	801dcbc <__multadd>
 801db86:	4605      	mov	r5, r0
 801db88:	e7f0      	b.n	801db6c <_dtoa_r+0xac4>
 801db8a:	9b05      	ldr	r3, [sp, #20]
 801db8c:	9308      	str	r3, [sp, #32]
 801db8e:	9e04      	ldr	r6, [sp, #16]
 801db90:	4621      	mov	r1, r4
 801db92:	4640      	mov	r0, r8
 801db94:	f7ff fa00 	bl	801cf98 <quorem>
 801db98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801db9c:	9b04      	ldr	r3, [sp, #16]
 801db9e:	f806 ab01 	strb.w	sl, [r6], #1
 801dba2:	1af2      	subs	r2, r6, r3
 801dba4:	9b08      	ldr	r3, [sp, #32]
 801dba6:	4293      	cmp	r3, r2
 801dba8:	dd07      	ble.n	801dbba <_dtoa_r+0xb12>
 801dbaa:	4641      	mov	r1, r8
 801dbac:	2300      	movs	r3, #0
 801dbae:	220a      	movs	r2, #10
 801dbb0:	4648      	mov	r0, r9
 801dbb2:	f000 f883 	bl	801dcbc <__multadd>
 801dbb6:	4680      	mov	r8, r0
 801dbb8:	e7ea      	b.n	801db90 <_dtoa_r+0xae8>
 801dbba:	9b08      	ldr	r3, [sp, #32]
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	bfc8      	it	gt
 801dbc0:	461e      	movgt	r6, r3
 801dbc2:	9b04      	ldr	r3, [sp, #16]
 801dbc4:	bfd8      	it	le
 801dbc6:	2601      	movle	r6, #1
 801dbc8:	441e      	add	r6, r3
 801dbca:	2700      	movs	r7, #0
 801dbcc:	4641      	mov	r1, r8
 801dbce:	2201      	movs	r2, #1
 801dbd0:	4648      	mov	r0, r9
 801dbd2:	f000 fa07 	bl	801dfe4 <__lshift>
 801dbd6:	4621      	mov	r1, r4
 801dbd8:	4680      	mov	r8, r0
 801dbda:	f000 fa6f 	bl	801e0bc <__mcmp>
 801dbde:	2800      	cmp	r0, #0
 801dbe0:	dc97      	bgt.n	801db12 <_dtoa_r+0xa6a>
 801dbe2:	d102      	bne.n	801dbea <_dtoa_r+0xb42>
 801dbe4:	f01a 0f01 	tst.w	sl, #1
 801dbe8:	d193      	bne.n	801db12 <_dtoa_r+0xa6a>
 801dbea:	4633      	mov	r3, r6
 801dbec:	461e      	mov	r6, r3
 801dbee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dbf2:	2a30      	cmp	r2, #48	; 0x30
 801dbf4:	d0fa      	beq.n	801dbec <_dtoa_r+0xb44>
 801dbf6:	e6e7      	b.n	801d9c8 <_dtoa_r+0x920>
 801dbf8:	9a04      	ldr	r2, [sp, #16]
 801dbfa:	429a      	cmp	r2, r3
 801dbfc:	d18a      	bne.n	801db14 <_dtoa_r+0xa6c>
 801dbfe:	9b03      	ldr	r3, [sp, #12]
 801dc00:	3301      	adds	r3, #1
 801dc02:	9303      	str	r3, [sp, #12]
 801dc04:	2331      	movs	r3, #49	; 0x31
 801dc06:	7013      	strb	r3, [r2, #0]
 801dc08:	e6de      	b.n	801d9c8 <_dtoa_r+0x920>
 801dc0a:	4b0a      	ldr	r3, [pc, #40]	; (801dc34 <_dtoa_r+0xb8c>)
 801dc0c:	f7ff ba9f 	b.w	801d14e <_dtoa_r+0xa6>
 801dc10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	f47f aa82 	bne.w	801d11c <_dtoa_r+0x74>
 801dc18:	4b07      	ldr	r3, [pc, #28]	; (801dc38 <_dtoa_r+0xb90>)
 801dc1a:	f7ff ba98 	b.w	801d14e <_dtoa_r+0xa6>
 801dc1e:	9b08      	ldr	r3, [sp, #32]
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	dcb4      	bgt.n	801db8e <_dtoa_r+0xae6>
 801dc24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dc26:	2b02      	cmp	r3, #2
 801dc28:	f73f aeba 	bgt.w	801d9a0 <_dtoa_r+0x8f8>
 801dc2c:	e7af      	b.n	801db8e <_dtoa_r+0xae6>
 801dc2e:	bf00      	nop
 801dc30:	08020a10 	.word	0x08020a10
 801dc34:	08020997 	.word	0x08020997
 801dc38:	08020a03 	.word	0x08020a03

0801dc3c <__ascii_mbtowc>:
 801dc3c:	b082      	sub	sp, #8
 801dc3e:	b901      	cbnz	r1, 801dc42 <__ascii_mbtowc+0x6>
 801dc40:	a901      	add	r1, sp, #4
 801dc42:	b142      	cbz	r2, 801dc56 <__ascii_mbtowc+0x1a>
 801dc44:	b14b      	cbz	r3, 801dc5a <__ascii_mbtowc+0x1e>
 801dc46:	7813      	ldrb	r3, [r2, #0]
 801dc48:	600b      	str	r3, [r1, #0]
 801dc4a:	7812      	ldrb	r2, [r2, #0]
 801dc4c:	1e10      	subs	r0, r2, #0
 801dc4e:	bf18      	it	ne
 801dc50:	2001      	movne	r0, #1
 801dc52:	b002      	add	sp, #8
 801dc54:	4770      	bx	lr
 801dc56:	4610      	mov	r0, r2
 801dc58:	e7fb      	b.n	801dc52 <__ascii_mbtowc+0x16>
 801dc5a:	f06f 0001 	mvn.w	r0, #1
 801dc5e:	e7f8      	b.n	801dc52 <__ascii_mbtowc+0x16>

0801dc60 <_Balloc>:
 801dc60:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801dc62:	b570      	push	{r4, r5, r6, lr}
 801dc64:	4605      	mov	r5, r0
 801dc66:	460c      	mov	r4, r1
 801dc68:	b17b      	cbz	r3, 801dc8a <_Balloc+0x2a>
 801dc6a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801dc6c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801dc70:	b9a0      	cbnz	r0, 801dc9c <_Balloc+0x3c>
 801dc72:	2101      	movs	r1, #1
 801dc74:	fa01 f604 	lsl.w	r6, r1, r4
 801dc78:	1d72      	adds	r2, r6, #5
 801dc7a:	0092      	lsls	r2, r2, #2
 801dc7c:	4628      	mov	r0, r5
 801dc7e:	f000 fc1f 	bl	801e4c0 <_calloc_r>
 801dc82:	b148      	cbz	r0, 801dc98 <_Balloc+0x38>
 801dc84:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801dc88:	e00b      	b.n	801dca2 <_Balloc+0x42>
 801dc8a:	2221      	movs	r2, #33	; 0x21
 801dc8c:	2104      	movs	r1, #4
 801dc8e:	f000 fc17 	bl	801e4c0 <_calloc_r>
 801dc92:	6468      	str	r0, [r5, #68]	; 0x44
 801dc94:	2800      	cmp	r0, #0
 801dc96:	d1e8      	bne.n	801dc6a <_Balloc+0xa>
 801dc98:	2000      	movs	r0, #0
 801dc9a:	bd70      	pop	{r4, r5, r6, pc}
 801dc9c:	6802      	ldr	r2, [r0, #0]
 801dc9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801dca2:	2300      	movs	r3, #0
 801dca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801dca8:	e7f7      	b.n	801dc9a <_Balloc+0x3a>

0801dcaa <_Bfree>:
 801dcaa:	b131      	cbz	r1, 801dcba <_Bfree+0x10>
 801dcac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801dcae:	684a      	ldr	r2, [r1, #4]
 801dcb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801dcb4:	6008      	str	r0, [r1, #0]
 801dcb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801dcba:	4770      	bx	lr

0801dcbc <__multadd>:
 801dcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcc0:	690d      	ldr	r5, [r1, #16]
 801dcc2:	4607      	mov	r7, r0
 801dcc4:	460c      	mov	r4, r1
 801dcc6:	461e      	mov	r6, r3
 801dcc8:	f101 0c14 	add.w	ip, r1, #20
 801dccc:	2000      	movs	r0, #0
 801dcce:	f8dc 3000 	ldr.w	r3, [ip]
 801dcd2:	b299      	uxth	r1, r3
 801dcd4:	fb02 6101 	mla	r1, r2, r1, r6
 801dcd8:	0c1e      	lsrs	r6, r3, #16
 801dcda:	0c0b      	lsrs	r3, r1, #16
 801dcdc:	fb02 3306 	mla	r3, r2, r6, r3
 801dce0:	b289      	uxth	r1, r1
 801dce2:	3001      	adds	r0, #1
 801dce4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801dce8:	4285      	cmp	r5, r0
 801dcea:	f84c 1b04 	str.w	r1, [ip], #4
 801dcee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dcf2:	dcec      	bgt.n	801dcce <__multadd+0x12>
 801dcf4:	b30e      	cbz	r6, 801dd3a <__multadd+0x7e>
 801dcf6:	68a3      	ldr	r3, [r4, #8]
 801dcf8:	42ab      	cmp	r3, r5
 801dcfa:	dc19      	bgt.n	801dd30 <__multadd+0x74>
 801dcfc:	6861      	ldr	r1, [r4, #4]
 801dcfe:	4638      	mov	r0, r7
 801dd00:	3101      	adds	r1, #1
 801dd02:	f7ff ffad 	bl	801dc60 <_Balloc>
 801dd06:	4680      	mov	r8, r0
 801dd08:	b928      	cbnz	r0, 801dd16 <__multadd+0x5a>
 801dd0a:	4602      	mov	r2, r0
 801dd0c:	4b0c      	ldr	r3, [pc, #48]	; (801dd40 <__multadd+0x84>)
 801dd0e:	480d      	ldr	r0, [pc, #52]	; (801dd44 <__multadd+0x88>)
 801dd10:	21ba      	movs	r1, #186	; 0xba
 801dd12:	f000 fbb7 	bl	801e484 <__assert_func>
 801dd16:	6922      	ldr	r2, [r4, #16]
 801dd18:	3202      	adds	r2, #2
 801dd1a:	f104 010c 	add.w	r1, r4, #12
 801dd1e:	0092      	lsls	r2, r2, #2
 801dd20:	300c      	adds	r0, #12
 801dd22:	f7fb f833 	bl	8018d8c <memcpy>
 801dd26:	4621      	mov	r1, r4
 801dd28:	4638      	mov	r0, r7
 801dd2a:	f7ff ffbe 	bl	801dcaa <_Bfree>
 801dd2e:	4644      	mov	r4, r8
 801dd30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dd34:	3501      	adds	r5, #1
 801dd36:	615e      	str	r6, [r3, #20]
 801dd38:	6125      	str	r5, [r4, #16]
 801dd3a:	4620      	mov	r0, r4
 801dd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd40:	08020a10 	.word	0x08020a10
 801dd44:	08020a79 	.word	0x08020a79

0801dd48 <__hi0bits>:
 801dd48:	0c02      	lsrs	r2, r0, #16
 801dd4a:	0412      	lsls	r2, r2, #16
 801dd4c:	4603      	mov	r3, r0
 801dd4e:	b9ca      	cbnz	r2, 801dd84 <__hi0bits+0x3c>
 801dd50:	0403      	lsls	r3, r0, #16
 801dd52:	2010      	movs	r0, #16
 801dd54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801dd58:	bf04      	itt	eq
 801dd5a:	021b      	lsleq	r3, r3, #8
 801dd5c:	3008      	addeq	r0, #8
 801dd5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801dd62:	bf04      	itt	eq
 801dd64:	011b      	lsleq	r3, r3, #4
 801dd66:	3004      	addeq	r0, #4
 801dd68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801dd6c:	bf04      	itt	eq
 801dd6e:	009b      	lsleq	r3, r3, #2
 801dd70:	3002      	addeq	r0, #2
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	db05      	blt.n	801dd82 <__hi0bits+0x3a>
 801dd76:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801dd7a:	f100 0001 	add.w	r0, r0, #1
 801dd7e:	bf08      	it	eq
 801dd80:	2020      	moveq	r0, #32
 801dd82:	4770      	bx	lr
 801dd84:	2000      	movs	r0, #0
 801dd86:	e7e5      	b.n	801dd54 <__hi0bits+0xc>

0801dd88 <__lo0bits>:
 801dd88:	6803      	ldr	r3, [r0, #0]
 801dd8a:	4602      	mov	r2, r0
 801dd8c:	f013 0007 	ands.w	r0, r3, #7
 801dd90:	d00b      	beq.n	801ddaa <__lo0bits+0x22>
 801dd92:	07d9      	lsls	r1, r3, #31
 801dd94:	d421      	bmi.n	801ddda <__lo0bits+0x52>
 801dd96:	0798      	lsls	r0, r3, #30
 801dd98:	bf49      	itett	mi
 801dd9a:	085b      	lsrmi	r3, r3, #1
 801dd9c:	089b      	lsrpl	r3, r3, #2
 801dd9e:	2001      	movmi	r0, #1
 801dda0:	6013      	strmi	r3, [r2, #0]
 801dda2:	bf5c      	itt	pl
 801dda4:	6013      	strpl	r3, [r2, #0]
 801dda6:	2002      	movpl	r0, #2
 801dda8:	4770      	bx	lr
 801ddaa:	b299      	uxth	r1, r3
 801ddac:	b909      	cbnz	r1, 801ddb2 <__lo0bits+0x2a>
 801ddae:	0c1b      	lsrs	r3, r3, #16
 801ddb0:	2010      	movs	r0, #16
 801ddb2:	b2d9      	uxtb	r1, r3
 801ddb4:	b909      	cbnz	r1, 801ddba <__lo0bits+0x32>
 801ddb6:	3008      	adds	r0, #8
 801ddb8:	0a1b      	lsrs	r3, r3, #8
 801ddba:	0719      	lsls	r1, r3, #28
 801ddbc:	bf04      	itt	eq
 801ddbe:	091b      	lsreq	r3, r3, #4
 801ddc0:	3004      	addeq	r0, #4
 801ddc2:	0799      	lsls	r1, r3, #30
 801ddc4:	bf04      	itt	eq
 801ddc6:	089b      	lsreq	r3, r3, #2
 801ddc8:	3002      	addeq	r0, #2
 801ddca:	07d9      	lsls	r1, r3, #31
 801ddcc:	d403      	bmi.n	801ddd6 <__lo0bits+0x4e>
 801ddce:	085b      	lsrs	r3, r3, #1
 801ddd0:	f100 0001 	add.w	r0, r0, #1
 801ddd4:	d003      	beq.n	801ddde <__lo0bits+0x56>
 801ddd6:	6013      	str	r3, [r2, #0]
 801ddd8:	4770      	bx	lr
 801ddda:	2000      	movs	r0, #0
 801dddc:	4770      	bx	lr
 801ddde:	2020      	movs	r0, #32
 801dde0:	4770      	bx	lr
	...

0801dde4 <__i2b>:
 801dde4:	b510      	push	{r4, lr}
 801dde6:	460c      	mov	r4, r1
 801dde8:	2101      	movs	r1, #1
 801ddea:	f7ff ff39 	bl	801dc60 <_Balloc>
 801ddee:	4602      	mov	r2, r0
 801ddf0:	b928      	cbnz	r0, 801ddfe <__i2b+0x1a>
 801ddf2:	4b05      	ldr	r3, [pc, #20]	; (801de08 <__i2b+0x24>)
 801ddf4:	4805      	ldr	r0, [pc, #20]	; (801de0c <__i2b+0x28>)
 801ddf6:	f240 1145 	movw	r1, #325	; 0x145
 801ddfa:	f000 fb43 	bl	801e484 <__assert_func>
 801ddfe:	2301      	movs	r3, #1
 801de00:	6144      	str	r4, [r0, #20]
 801de02:	6103      	str	r3, [r0, #16]
 801de04:	bd10      	pop	{r4, pc}
 801de06:	bf00      	nop
 801de08:	08020a10 	.word	0x08020a10
 801de0c:	08020a79 	.word	0x08020a79

0801de10 <__multiply>:
 801de10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de14:	4691      	mov	r9, r2
 801de16:	690a      	ldr	r2, [r1, #16]
 801de18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801de1c:	429a      	cmp	r2, r3
 801de1e:	bfb8      	it	lt
 801de20:	460b      	movlt	r3, r1
 801de22:	460c      	mov	r4, r1
 801de24:	bfbc      	itt	lt
 801de26:	464c      	movlt	r4, r9
 801de28:	4699      	movlt	r9, r3
 801de2a:	6927      	ldr	r7, [r4, #16]
 801de2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801de30:	68a3      	ldr	r3, [r4, #8]
 801de32:	6861      	ldr	r1, [r4, #4]
 801de34:	eb07 060a 	add.w	r6, r7, sl
 801de38:	42b3      	cmp	r3, r6
 801de3a:	b085      	sub	sp, #20
 801de3c:	bfb8      	it	lt
 801de3e:	3101      	addlt	r1, #1
 801de40:	f7ff ff0e 	bl	801dc60 <_Balloc>
 801de44:	b930      	cbnz	r0, 801de54 <__multiply+0x44>
 801de46:	4602      	mov	r2, r0
 801de48:	4b44      	ldr	r3, [pc, #272]	; (801df5c <__multiply+0x14c>)
 801de4a:	4845      	ldr	r0, [pc, #276]	; (801df60 <__multiply+0x150>)
 801de4c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801de50:	f000 fb18 	bl	801e484 <__assert_func>
 801de54:	f100 0514 	add.w	r5, r0, #20
 801de58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801de5c:	462b      	mov	r3, r5
 801de5e:	2200      	movs	r2, #0
 801de60:	4543      	cmp	r3, r8
 801de62:	d321      	bcc.n	801dea8 <__multiply+0x98>
 801de64:	f104 0314 	add.w	r3, r4, #20
 801de68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801de6c:	f109 0314 	add.w	r3, r9, #20
 801de70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801de74:	9202      	str	r2, [sp, #8]
 801de76:	1b3a      	subs	r2, r7, r4
 801de78:	3a15      	subs	r2, #21
 801de7a:	f022 0203 	bic.w	r2, r2, #3
 801de7e:	3204      	adds	r2, #4
 801de80:	f104 0115 	add.w	r1, r4, #21
 801de84:	428f      	cmp	r7, r1
 801de86:	bf38      	it	cc
 801de88:	2204      	movcc	r2, #4
 801de8a:	9201      	str	r2, [sp, #4]
 801de8c:	9a02      	ldr	r2, [sp, #8]
 801de8e:	9303      	str	r3, [sp, #12]
 801de90:	429a      	cmp	r2, r3
 801de92:	d80c      	bhi.n	801deae <__multiply+0x9e>
 801de94:	2e00      	cmp	r6, #0
 801de96:	dd03      	ble.n	801dea0 <__multiply+0x90>
 801de98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	d05a      	beq.n	801df56 <__multiply+0x146>
 801dea0:	6106      	str	r6, [r0, #16]
 801dea2:	b005      	add	sp, #20
 801dea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dea8:	f843 2b04 	str.w	r2, [r3], #4
 801deac:	e7d8      	b.n	801de60 <__multiply+0x50>
 801deae:	f8b3 a000 	ldrh.w	sl, [r3]
 801deb2:	f1ba 0f00 	cmp.w	sl, #0
 801deb6:	d023      	beq.n	801df00 <__multiply+0xf0>
 801deb8:	f104 0e14 	add.w	lr, r4, #20
 801debc:	46a9      	mov	r9, r5
 801debe:	f04f 0c00 	mov.w	ip, #0
 801dec2:	f85e 2b04 	ldr.w	r2, [lr], #4
 801dec6:	f8d9 1000 	ldr.w	r1, [r9]
 801deca:	fa1f fb82 	uxth.w	fp, r2
 801dece:	b289      	uxth	r1, r1
 801ded0:	fb0a 110b 	mla	r1, sl, fp, r1
 801ded4:	4461      	add	r1, ip
 801ded6:	f8d9 c000 	ldr.w	ip, [r9]
 801deda:	0c12      	lsrs	r2, r2, #16
 801dedc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801dee0:	fb0a c202 	mla	r2, sl, r2, ip
 801dee4:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801dee8:	b289      	uxth	r1, r1
 801deea:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801deee:	4577      	cmp	r7, lr
 801def0:	f849 1b04 	str.w	r1, [r9], #4
 801def4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801def8:	d8e3      	bhi.n	801dec2 <__multiply+0xb2>
 801defa:	9a01      	ldr	r2, [sp, #4]
 801defc:	f845 c002 	str.w	ip, [r5, r2]
 801df00:	9a03      	ldr	r2, [sp, #12]
 801df02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801df06:	3304      	adds	r3, #4
 801df08:	f1b9 0f00 	cmp.w	r9, #0
 801df0c:	d021      	beq.n	801df52 <__multiply+0x142>
 801df0e:	6829      	ldr	r1, [r5, #0]
 801df10:	f104 0c14 	add.w	ip, r4, #20
 801df14:	46ae      	mov	lr, r5
 801df16:	f04f 0a00 	mov.w	sl, #0
 801df1a:	f8bc b000 	ldrh.w	fp, [ip]
 801df1e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801df22:	fb09 220b 	mla	r2, r9, fp, r2
 801df26:	4452      	add	r2, sl
 801df28:	b289      	uxth	r1, r1
 801df2a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801df2e:	f84e 1b04 	str.w	r1, [lr], #4
 801df32:	f85c 1b04 	ldr.w	r1, [ip], #4
 801df36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801df3a:	f8be 1000 	ldrh.w	r1, [lr]
 801df3e:	fb09 110a 	mla	r1, r9, sl, r1
 801df42:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801df46:	4567      	cmp	r7, ip
 801df48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801df4c:	d8e5      	bhi.n	801df1a <__multiply+0x10a>
 801df4e:	9a01      	ldr	r2, [sp, #4]
 801df50:	50a9      	str	r1, [r5, r2]
 801df52:	3504      	adds	r5, #4
 801df54:	e79a      	b.n	801de8c <__multiply+0x7c>
 801df56:	3e01      	subs	r6, #1
 801df58:	e79c      	b.n	801de94 <__multiply+0x84>
 801df5a:	bf00      	nop
 801df5c:	08020a10 	.word	0x08020a10
 801df60:	08020a79 	.word	0x08020a79

0801df64 <__pow5mult>:
 801df64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df68:	4615      	mov	r5, r2
 801df6a:	f012 0203 	ands.w	r2, r2, #3
 801df6e:	4606      	mov	r6, r0
 801df70:	460f      	mov	r7, r1
 801df72:	d007      	beq.n	801df84 <__pow5mult+0x20>
 801df74:	4c1a      	ldr	r4, [pc, #104]	; (801dfe0 <__pow5mult+0x7c>)
 801df76:	3a01      	subs	r2, #1
 801df78:	2300      	movs	r3, #0
 801df7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801df7e:	f7ff fe9d 	bl	801dcbc <__multadd>
 801df82:	4607      	mov	r7, r0
 801df84:	10ad      	asrs	r5, r5, #2
 801df86:	d027      	beq.n	801dfd8 <__pow5mult+0x74>
 801df88:	6c34      	ldr	r4, [r6, #64]	; 0x40
 801df8a:	b944      	cbnz	r4, 801df9e <__pow5mult+0x3a>
 801df8c:	f240 2171 	movw	r1, #625	; 0x271
 801df90:	4630      	mov	r0, r6
 801df92:	f7ff ff27 	bl	801dde4 <__i2b>
 801df96:	2300      	movs	r3, #0
 801df98:	6430      	str	r0, [r6, #64]	; 0x40
 801df9a:	4604      	mov	r4, r0
 801df9c:	6003      	str	r3, [r0, #0]
 801df9e:	f04f 0900 	mov.w	r9, #0
 801dfa2:	07eb      	lsls	r3, r5, #31
 801dfa4:	d50a      	bpl.n	801dfbc <__pow5mult+0x58>
 801dfa6:	4639      	mov	r1, r7
 801dfa8:	4622      	mov	r2, r4
 801dfaa:	4630      	mov	r0, r6
 801dfac:	f7ff ff30 	bl	801de10 <__multiply>
 801dfb0:	4639      	mov	r1, r7
 801dfb2:	4680      	mov	r8, r0
 801dfb4:	4630      	mov	r0, r6
 801dfb6:	f7ff fe78 	bl	801dcaa <_Bfree>
 801dfba:	4647      	mov	r7, r8
 801dfbc:	106d      	asrs	r5, r5, #1
 801dfbe:	d00b      	beq.n	801dfd8 <__pow5mult+0x74>
 801dfc0:	6820      	ldr	r0, [r4, #0]
 801dfc2:	b938      	cbnz	r0, 801dfd4 <__pow5mult+0x70>
 801dfc4:	4622      	mov	r2, r4
 801dfc6:	4621      	mov	r1, r4
 801dfc8:	4630      	mov	r0, r6
 801dfca:	f7ff ff21 	bl	801de10 <__multiply>
 801dfce:	6020      	str	r0, [r4, #0]
 801dfd0:	f8c0 9000 	str.w	r9, [r0]
 801dfd4:	4604      	mov	r4, r0
 801dfd6:	e7e4      	b.n	801dfa2 <__pow5mult+0x3e>
 801dfd8:	4638      	mov	r0, r7
 801dfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dfde:	bf00      	nop
 801dfe0:	08020bc8 	.word	0x08020bc8

0801dfe4 <__lshift>:
 801dfe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dfe8:	460c      	mov	r4, r1
 801dfea:	6849      	ldr	r1, [r1, #4]
 801dfec:	6923      	ldr	r3, [r4, #16]
 801dfee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801dff2:	68a3      	ldr	r3, [r4, #8]
 801dff4:	4607      	mov	r7, r0
 801dff6:	4691      	mov	r9, r2
 801dff8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dffc:	f108 0601 	add.w	r6, r8, #1
 801e000:	42b3      	cmp	r3, r6
 801e002:	db0b      	blt.n	801e01c <__lshift+0x38>
 801e004:	4638      	mov	r0, r7
 801e006:	f7ff fe2b 	bl	801dc60 <_Balloc>
 801e00a:	4605      	mov	r5, r0
 801e00c:	b948      	cbnz	r0, 801e022 <__lshift+0x3e>
 801e00e:	4602      	mov	r2, r0
 801e010:	4b28      	ldr	r3, [pc, #160]	; (801e0b4 <__lshift+0xd0>)
 801e012:	4829      	ldr	r0, [pc, #164]	; (801e0b8 <__lshift+0xd4>)
 801e014:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801e018:	f000 fa34 	bl	801e484 <__assert_func>
 801e01c:	3101      	adds	r1, #1
 801e01e:	005b      	lsls	r3, r3, #1
 801e020:	e7ee      	b.n	801e000 <__lshift+0x1c>
 801e022:	2300      	movs	r3, #0
 801e024:	f100 0114 	add.w	r1, r0, #20
 801e028:	f100 0210 	add.w	r2, r0, #16
 801e02c:	4618      	mov	r0, r3
 801e02e:	4553      	cmp	r3, sl
 801e030:	db33      	blt.n	801e09a <__lshift+0xb6>
 801e032:	6920      	ldr	r0, [r4, #16]
 801e034:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e038:	f104 0314 	add.w	r3, r4, #20
 801e03c:	f019 091f 	ands.w	r9, r9, #31
 801e040:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e044:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e048:	d02b      	beq.n	801e0a2 <__lshift+0xbe>
 801e04a:	f1c9 0e20 	rsb	lr, r9, #32
 801e04e:	468a      	mov	sl, r1
 801e050:	2200      	movs	r2, #0
 801e052:	6818      	ldr	r0, [r3, #0]
 801e054:	fa00 f009 	lsl.w	r0, r0, r9
 801e058:	4310      	orrs	r0, r2
 801e05a:	f84a 0b04 	str.w	r0, [sl], #4
 801e05e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e062:	459c      	cmp	ip, r3
 801e064:	fa22 f20e 	lsr.w	r2, r2, lr
 801e068:	d8f3      	bhi.n	801e052 <__lshift+0x6e>
 801e06a:	ebac 0304 	sub.w	r3, ip, r4
 801e06e:	3b15      	subs	r3, #21
 801e070:	f023 0303 	bic.w	r3, r3, #3
 801e074:	3304      	adds	r3, #4
 801e076:	f104 0015 	add.w	r0, r4, #21
 801e07a:	4584      	cmp	ip, r0
 801e07c:	bf38      	it	cc
 801e07e:	2304      	movcc	r3, #4
 801e080:	50ca      	str	r2, [r1, r3]
 801e082:	b10a      	cbz	r2, 801e088 <__lshift+0xa4>
 801e084:	f108 0602 	add.w	r6, r8, #2
 801e088:	3e01      	subs	r6, #1
 801e08a:	4638      	mov	r0, r7
 801e08c:	612e      	str	r6, [r5, #16]
 801e08e:	4621      	mov	r1, r4
 801e090:	f7ff fe0b 	bl	801dcaa <_Bfree>
 801e094:	4628      	mov	r0, r5
 801e096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e09a:	f842 0f04 	str.w	r0, [r2, #4]!
 801e09e:	3301      	adds	r3, #1
 801e0a0:	e7c5      	b.n	801e02e <__lshift+0x4a>
 801e0a2:	3904      	subs	r1, #4
 801e0a4:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0a8:	f841 2f04 	str.w	r2, [r1, #4]!
 801e0ac:	459c      	cmp	ip, r3
 801e0ae:	d8f9      	bhi.n	801e0a4 <__lshift+0xc0>
 801e0b0:	e7ea      	b.n	801e088 <__lshift+0xa4>
 801e0b2:	bf00      	nop
 801e0b4:	08020a10 	.word	0x08020a10
 801e0b8:	08020a79 	.word	0x08020a79

0801e0bc <__mcmp>:
 801e0bc:	690a      	ldr	r2, [r1, #16]
 801e0be:	4603      	mov	r3, r0
 801e0c0:	6900      	ldr	r0, [r0, #16]
 801e0c2:	1a80      	subs	r0, r0, r2
 801e0c4:	b530      	push	{r4, r5, lr}
 801e0c6:	d10d      	bne.n	801e0e4 <__mcmp+0x28>
 801e0c8:	3314      	adds	r3, #20
 801e0ca:	3114      	adds	r1, #20
 801e0cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e0d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e0d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e0d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e0dc:	4295      	cmp	r5, r2
 801e0de:	d002      	beq.n	801e0e6 <__mcmp+0x2a>
 801e0e0:	d304      	bcc.n	801e0ec <__mcmp+0x30>
 801e0e2:	2001      	movs	r0, #1
 801e0e4:	bd30      	pop	{r4, r5, pc}
 801e0e6:	42a3      	cmp	r3, r4
 801e0e8:	d3f4      	bcc.n	801e0d4 <__mcmp+0x18>
 801e0ea:	e7fb      	b.n	801e0e4 <__mcmp+0x28>
 801e0ec:	f04f 30ff 	mov.w	r0, #4294967295
 801e0f0:	e7f8      	b.n	801e0e4 <__mcmp+0x28>
	...

0801e0f4 <__mdiff>:
 801e0f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0f8:	460d      	mov	r5, r1
 801e0fa:	4607      	mov	r7, r0
 801e0fc:	4611      	mov	r1, r2
 801e0fe:	4628      	mov	r0, r5
 801e100:	4614      	mov	r4, r2
 801e102:	f7ff ffdb 	bl	801e0bc <__mcmp>
 801e106:	1e06      	subs	r6, r0, #0
 801e108:	d111      	bne.n	801e12e <__mdiff+0x3a>
 801e10a:	4631      	mov	r1, r6
 801e10c:	4638      	mov	r0, r7
 801e10e:	f7ff fda7 	bl	801dc60 <_Balloc>
 801e112:	4602      	mov	r2, r0
 801e114:	b928      	cbnz	r0, 801e122 <__mdiff+0x2e>
 801e116:	4b39      	ldr	r3, [pc, #228]	; (801e1fc <__mdiff+0x108>)
 801e118:	f240 2137 	movw	r1, #567	; 0x237
 801e11c:	4838      	ldr	r0, [pc, #224]	; (801e200 <__mdiff+0x10c>)
 801e11e:	f000 f9b1 	bl	801e484 <__assert_func>
 801e122:	2301      	movs	r3, #1
 801e124:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801e128:	4610      	mov	r0, r2
 801e12a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e12e:	bfa4      	itt	ge
 801e130:	4623      	movge	r3, r4
 801e132:	462c      	movge	r4, r5
 801e134:	4638      	mov	r0, r7
 801e136:	6861      	ldr	r1, [r4, #4]
 801e138:	bfa6      	itte	ge
 801e13a:	461d      	movge	r5, r3
 801e13c:	2600      	movge	r6, #0
 801e13e:	2601      	movlt	r6, #1
 801e140:	f7ff fd8e 	bl	801dc60 <_Balloc>
 801e144:	4602      	mov	r2, r0
 801e146:	b918      	cbnz	r0, 801e150 <__mdiff+0x5c>
 801e148:	4b2c      	ldr	r3, [pc, #176]	; (801e1fc <__mdiff+0x108>)
 801e14a:	f240 2145 	movw	r1, #581	; 0x245
 801e14e:	e7e5      	b.n	801e11c <__mdiff+0x28>
 801e150:	6927      	ldr	r7, [r4, #16]
 801e152:	60c6      	str	r6, [r0, #12]
 801e154:	692e      	ldr	r6, [r5, #16]
 801e156:	f104 0014 	add.w	r0, r4, #20
 801e15a:	f105 0914 	add.w	r9, r5, #20
 801e15e:	f102 0e14 	add.w	lr, r2, #20
 801e162:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 801e166:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e16a:	3410      	adds	r4, #16
 801e16c:	46f2      	mov	sl, lr
 801e16e:	2100      	movs	r1, #0
 801e170:	f859 3b04 	ldr.w	r3, [r9], #4
 801e174:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801e178:	fa11 f88b 	uxtah	r8, r1, fp
 801e17c:	b299      	uxth	r1, r3
 801e17e:	0c1b      	lsrs	r3, r3, #16
 801e180:	eba8 0801 	sub.w	r8, r8, r1
 801e184:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e188:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e18c:	fa1f f888 	uxth.w	r8, r8
 801e190:	1419      	asrs	r1, r3, #16
 801e192:	454e      	cmp	r6, r9
 801e194:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e198:	f84a 3b04 	str.w	r3, [sl], #4
 801e19c:	d8e8      	bhi.n	801e170 <__mdiff+0x7c>
 801e19e:	1b73      	subs	r3, r6, r5
 801e1a0:	3b15      	subs	r3, #21
 801e1a2:	f023 0303 	bic.w	r3, r3, #3
 801e1a6:	3304      	adds	r3, #4
 801e1a8:	3515      	adds	r5, #21
 801e1aa:	42ae      	cmp	r6, r5
 801e1ac:	bf38      	it	cc
 801e1ae:	2304      	movcc	r3, #4
 801e1b0:	4418      	add	r0, r3
 801e1b2:	4473      	add	r3, lr
 801e1b4:	469e      	mov	lr, r3
 801e1b6:	4606      	mov	r6, r0
 801e1b8:	4566      	cmp	r6, ip
 801e1ba:	d30e      	bcc.n	801e1da <__mdiff+0xe6>
 801e1bc:	f10c 0103 	add.w	r1, ip, #3
 801e1c0:	1a09      	subs	r1, r1, r0
 801e1c2:	f021 0103 	bic.w	r1, r1, #3
 801e1c6:	3803      	subs	r0, #3
 801e1c8:	4584      	cmp	ip, r0
 801e1ca:	bf38      	it	cc
 801e1cc:	2100      	movcc	r1, #0
 801e1ce:	440b      	add	r3, r1
 801e1d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e1d4:	b179      	cbz	r1, 801e1f6 <__mdiff+0x102>
 801e1d6:	6117      	str	r7, [r2, #16]
 801e1d8:	e7a6      	b.n	801e128 <__mdiff+0x34>
 801e1da:	f856 8b04 	ldr.w	r8, [r6], #4
 801e1de:	fa11 f488 	uxtah	r4, r1, r8
 801e1e2:	1425      	asrs	r5, r4, #16
 801e1e4:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 801e1e8:	b2a4      	uxth	r4, r4
 801e1ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801e1ee:	f84e 4b04 	str.w	r4, [lr], #4
 801e1f2:	1429      	asrs	r1, r5, #16
 801e1f4:	e7e0      	b.n	801e1b8 <__mdiff+0xc4>
 801e1f6:	3f01      	subs	r7, #1
 801e1f8:	e7ea      	b.n	801e1d0 <__mdiff+0xdc>
 801e1fa:	bf00      	nop
 801e1fc:	08020a10 	.word	0x08020a10
 801e200:	08020a79 	.word	0x08020a79

0801e204 <__d2b>:
 801e204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e206:	2101      	movs	r1, #1
 801e208:	9e08      	ldr	r6, [sp, #32]
 801e20a:	4617      	mov	r7, r2
 801e20c:	461c      	mov	r4, r3
 801e20e:	f7ff fd27 	bl	801dc60 <_Balloc>
 801e212:	4605      	mov	r5, r0
 801e214:	b930      	cbnz	r0, 801e224 <__d2b+0x20>
 801e216:	4602      	mov	r2, r0
 801e218:	4b23      	ldr	r3, [pc, #140]	; (801e2a8 <__d2b+0xa4>)
 801e21a:	4824      	ldr	r0, [pc, #144]	; (801e2ac <__d2b+0xa8>)
 801e21c:	f240 310f 	movw	r1, #783	; 0x30f
 801e220:	f000 f930 	bl	801e484 <__assert_func>
 801e224:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801e228:	f3c4 540a 	ubfx	r4, r4, #20, #11
 801e22c:	bb24      	cbnz	r4, 801e278 <__d2b+0x74>
 801e22e:	2f00      	cmp	r7, #0
 801e230:	9301      	str	r3, [sp, #4]
 801e232:	d026      	beq.n	801e282 <__d2b+0x7e>
 801e234:	4668      	mov	r0, sp
 801e236:	9700      	str	r7, [sp, #0]
 801e238:	f7ff fda6 	bl	801dd88 <__lo0bits>
 801e23c:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e240:	b1e8      	cbz	r0, 801e27e <__d2b+0x7a>
 801e242:	f1c0 0320 	rsb	r3, r0, #32
 801e246:	fa02 f303 	lsl.w	r3, r2, r3
 801e24a:	430b      	orrs	r3, r1
 801e24c:	40c2      	lsrs	r2, r0
 801e24e:	616b      	str	r3, [r5, #20]
 801e250:	9201      	str	r2, [sp, #4]
 801e252:	9b01      	ldr	r3, [sp, #4]
 801e254:	61ab      	str	r3, [r5, #24]
 801e256:	2b00      	cmp	r3, #0
 801e258:	bf14      	ite	ne
 801e25a:	2102      	movne	r1, #2
 801e25c:	2101      	moveq	r1, #1
 801e25e:	6129      	str	r1, [r5, #16]
 801e260:	b1bc      	cbz	r4, 801e292 <__d2b+0x8e>
 801e262:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801e266:	4404      	add	r4, r0
 801e268:	6034      	str	r4, [r6, #0]
 801e26a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e270:	6018      	str	r0, [r3, #0]
 801e272:	4628      	mov	r0, r5
 801e274:	b003      	add	sp, #12
 801e276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e27c:	e7d7      	b.n	801e22e <__d2b+0x2a>
 801e27e:	6169      	str	r1, [r5, #20]
 801e280:	e7e7      	b.n	801e252 <__d2b+0x4e>
 801e282:	a801      	add	r0, sp, #4
 801e284:	f7ff fd80 	bl	801dd88 <__lo0bits>
 801e288:	9b01      	ldr	r3, [sp, #4]
 801e28a:	616b      	str	r3, [r5, #20]
 801e28c:	3020      	adds	r0, #32
 801e28e:	2101      	movs	r1, #1
 801e290:	e7e5      	b.n	801e25e <__d2b+0x5a>
 801e292:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 801e296:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e29a:	6030      	str	r0, [r6, #0]
 801e29c:	6918      	ldr	r0, [r3, #16]
 801e29e:	f7ff fd53 	bl	801dd48 <__hi0bits>
 801e2a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801e2a6:	e7e2      	b.n	801e26e <__d2b+0x6a>
 801e2a8:	08020a10 	.word	0x08020a10
 801e2ac:	08020a79 	.word	0x08020a79

0801e2b0 <__ascii_wctomb>:
 801e2b0:	4603      	mov	r3, r0
 801e2b2:	4608      	mov	r0, r1
 801e2b4:	b141      	cbz	r1, 801e2c8 <__ascii_wctomb+0x18>
 801e2b6:	2aff      	cmp	r2, #255	; 0xff
 801e2b8:	d904      	bls.n	801e2c4 <__ascii_wctomb+0x14>
 801e2ba:	228a      	movs	r2, #138	; 0x8a
 801e2bc:	601a      	str	r2, [r3, #0]
 801e2be:	f04f 30ff 	mov.w	r0, #4294967295
 801e2c2:	4770      	bx	lr
 801e2c4:	700a      	strb	r2, [r1, #0]
 801e2c6:	2001      	movs	r0, #1
 801e2c8:	4770      	bx	lr
	...

0801e2cc <_wcrtomb_r>:
 801e2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2ce:	4c09      	ldr	r4, [pc, #36]	; (801e2f4 <_wcrtomb_r+0x28>)
 801e2d0:	b085      	sub	sp, #20
 801e2d2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 801e2d6:	4605      	mov	r5, r0
 801e2d8:	461e      	mov	r6, r3
 801e2da:	b909      	cbnz	r1, 801e2e0 <_wcrtomb_r+0x14>
 801e2dc:	460a      	mov	r2, r1
 801e2de:	a901      	add	r1, sp, #4
 801e2e0:	47b8      	blx	r7
 801e2e2:	1c43      	adds	r3, r0, #1
 801e2e4:	bf01      	itttt	eq
 801e2e6:	2300      	moveq	r3, #0
 801e2e8:	6033      	streq	r3, [r6, #0]
 801e2ea:	238a      	moveq	r3, #138	; 0x8a
 801e2ec:	602b      	streq	r3, [r5, #0]
 801e2ee:	b005      	add	sp, #20
 801e2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2f2:	bf00      	nop
 801e2f4:	200005e0 	.word	0x200005e0

0801e2f8 <__ssprint_r>:
 801e2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2fc:	6813      	ldr	r3, [r2, #0]
 801e2fe:	9301      	str	r3, [sp, #4]
 801e300:	6893      	ldr	r3, [r2, #8]
 801e302:	4680      	mov	r8, r0
 801e304:	460c      	mov	r4, r1
 801e306:	4617      	mov	r7, r2
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d157      	bne.n	801e3bc <__ssprint_r+0xc4>
 801e30c:	2000      	movs	r0, #0
 801e30e:	2300      	movs	r3, #0
 801e310:	607b      	str	r3, [r7, #4]
 801e312:	b003      	add	sp, #12
 801e314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e318:	9b01      	ldr	r3, [sp, #4]
 801e31a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 801e31e:	3308      	adds	r3, #8
 801e320:	9301      	str	r3, [sp, #4]
 801e322:	68a6      	ldr	r6, [r4, #8]
 801e324:	6820      	ldr	r0, [r4, #0]
 801e326:	f1bb 0f00 	cmp.w	fp, #0
 801e32a:	d0f5      	beq.n	801e318 <__ssprint_r+0x20>
 801e32c:	45b3      	cmp	fp, r6
 801e32e:	d32d      	bcc.n	801e38c <__ssprint_r+0x94>
 801e330:	89a2      	ldrh	r2, [r4, #12]
 801e332:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e336:	d029      	beq.n	801e38c <__ssprint_r+0x94>
 801e338:	6921      	ldr	r1, [r4, #16]
 801e33a:	6965      	ldr	r5, [r4, #20]
 801e33c:	eba0 0901 	sub.w	r9, r0, r1
 801e340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e348:	f109 0001 	add.w	r0, r9, #1
 801e34c:	106d      	asrs	r5, r5, #1
 801e34e:	4458      	add	r0, fp
 801e350:	4285      	cmp	r5, r0
 801e352:	bf38      	it	cc
 801e354:	4605      	movcc	r5, r0
 801e356:	0553      	lsls	r3, r2, #21
 801e358:	d534      	bpl.n	801e3c4 <__ssprint_r+0xcc>
 801e35a:	4629      	mov	r1, r5
 801e35c:	4640      	mov	r0, r8
 801e35e:	f7fa fe47 	bl	8018ff0 <_malloc_r>
 801e362:	4606      	mov	r6, r0
 801e364:	2800      	cmp	r0, #0
 801e366:	d038      	beq.n	801e3da <__ssprint_r+0xe2>
 801e368:	464a      	mov	r2, r9
 801e36a:	6921      	ldr	r1, [r4, #16]
 801e36c:	f7fa fd0e 	bl	8018d8c <memcpy>
 801e370:	89a2      	ldrh	r2, [r4, #12]
 801e372:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801e376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801e37a:	81a2      	strh	r2, [r4, #12]
 801e37c:	6126      	str	r6, [r4, #16]
 801e37e:	6165      	str	r5, [r4, #20]
 801e380:	444e      	add	r6, r9
 801e382:	eba5 0509 	sub.w	r5, r5, r9
 801e386:	6026      	str	r6, [r4, #0]
 801e388:	60a5      	str	r5, [r4, #8]
 801e38a:	465e      	mov	r6, fp
 801e38c:	455e      	cmp	r6, fp
 801e38e:	bf28      	it	cs
 801e390:	465e      	movcs	r6, fp
 801e392:	4632      	mov	r2, r6
 801e394:	4651      	mov	r1, sl
 801e396:	6820      	ldr	r0, [r4, #0]
 801e398:	f7fa fbf2 	bl	8018b80 <memmove>
 801e39c:	68a2      	ldr	r2, [r4, #8]
 801e39e:	1b92      	subs	r2, r2, r6
 801e3a0:	60a2      	str	r2, [r4, #8]
 801e3a2:	6822      	ldr	r2, [r4, #0]
 801e3a4:	4432      	add	r2, r6
 801e3a6:	6022      	str	r2, [r4, #0]
 801e3a8:	68ba      	ldr	r2, [r7, #8]
 801e3aa:	eba2 030b 	sub.w	r3, r2, fp
 801e3ae:	44da      	add	sl, fp
 801e3b0:	60bb      	str	r3, [r7, #8]
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	d0aa      	beq.n	801e30c <__ssprint_r+0x14>
 801e3b6:	f04f 0b00 	mov.w	fp, #0
 801e3ba:	e7b2      	b.n	801e322 <__ssprint_r+0x2a>
 801e3bc:	f04f 0a00 	mov.w	sl, #0
 801e3c0:	46d3      	mov	fp, sl
 801e3c2:	e7ae      	b.n	801e322 <__ssprint_r+0x2a>
 801e3c4:	462a      	mov	r2, r5
 801e3c6:	4640      	mov	r0, r8
 801e3c8:	f7fb f858 	bl	801947c <_realloc_r>
 801e3cc:	4606      	mov	r6, r0
 801e3ce:	2800      	cmp	r0, #0
 801e3d0:	d1d4      	bne.n	801e37c <__ssprint_r+0x84>
 801e3d2:	6921      	ldr	r1, [r4, #16]
 801e3d4:	4640      	mov	r0, r8
 801e3d6:	f7fa fd4b 	bl	8018e70 <_free_r>
 801e3da:	230c      	movs	r3, #12
 801e3dc:	f8c8 3000 	str.w	r3, [r8]
 801e3e0:	89a3      	ldrh	r3, [r4, #12]
 801e3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3e6:	81a3      	strh	r3, [r4, #12]
 801e3e8:	2300      	movs	r3, #0
 801e3ea:	60bb      	str	r3, [r7, #8]
 801e3ec:	f04f 30ff 	mov.w	r0, #4294967295
 801e3f0:	e78d      	b.n	801e30e <__ssprint_r+0x16>

0801e3f2 <__swbuf_r>:
 801e3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3f4:	460e      	mov	r6, r1
 801e3f6:	4614      	mov	r4, r2
 801e3f8:	4605      	mov	r5, r0
 801e3fa:	b118      	cbz	r0, 801e404 <__swbuf_r+0x12>
 801e3fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801e3fe:	b90b      	cbnz	r3, 801e404 <__swbuf_r+0x12>
 801e400:	f7fa f8d4 	bl	80185ac <__sinit>
 801e404:	69a3      	ldr	r3, [r4, #24]
 801e406:	60a3      	str	r3, [r4, #8]
 801e408:	89a3      	ldrh	r3, [r4, #12]
 801e40a:	0719      	lsls	r1, r3, #28
 801e40c:	d529      	bpl.n	801e462 <__swbuf_r+0x70>
 801e40e:	6923      	ldr	r3, [r4, #16]
 801e410:	b33b      	cbz	r3, 801e462 <__swbuf_r+0x70>
 801e412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e416:	b2f6      	uxtb	r6, r6
 801e418:	049a      	lsls	r2, r3, #18
 801e41a:	4637      	mov	r7, r6
 801e41c:	d52a      	bpl.n	801e474 <__swbuf_r+0x82>
 801e41e:	6823      	ldr	r3, [r4, #0]
 801e420:	6922      	ldr	r2, [r4, #16]
 801e422:	1a98      	subs	r0, r3, r2
 801e424:	6963      	ldr	r3, [r4, #20]
 801e426:	4283      	cmp	r3, r0
 801e428:	dc04      	bgt.n	801e434 <__swbuf_r+0x42>
 801e42a:	4621      	mov	r1, r4
 801e42c:	4628      	mov	r0, r5
 801e42e:	f7fe fbdd 	bl	801cbec <_fflush_r>
 801e432:	b9e0      	cbnz	r0, 801e46e <__swbuf_r+0x7c>
 801e434:	68a3      	ldr	r3, [r4, #8]
 801e436:	3b01      	subs	r3, #1
 801e438:	60a3      	str	r3, [r4, #8]
 801e43a:	6823      	ldr	r3, [r4, #0]
 801e43c:	1c5a      	adds	r2, r3, #1
 801e43e:	6022      	str	r2, [r4, #0]
 801e440:	701e      	strb	r6, [r3, #0]
 801e442:	6962      	ldr	r2, [r4, #20]
 801e444:	1c43      	adds	r3, r0, #1
 801e446:	429a      	cmp	r2, r3
 801e448:	d004      	beq.n	801e454 <__swbuf_r+0x62>
 801e44a:	89a3      	ldrh	r3, [r4, #12]
 801e44c:	07db      	lsls	r3, r3, #31
 801e44e:	d506      	bpl.n	801e45e <__swbuf_r+0x6c>
 801e450:	2e0a      	cmp	r6, #10
 801e452:	d104      	bne.n	801e45e <__swbuf_r+0x6c>
 801e454:	4621      	mov	r1, r4
 801e456:	4628      	mov	r0, r5
 801e458:	f7fe fbc8 	bl	801cbec <_fflush_r>
 801e45c:	b938      	cbnz	r0, 801e46e <__swbuf_r+0x7c>
 801e45e:	4638      	mov	r0, r7
 801e460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e462:	4621      	mov	r1, r4
 801e464:	4628      	mov	r0, r5
 801e466:	f7fa fb23 	bl	8018ab0 <__swsetup_r>
 801e46a:	2800      	cmp	r0, #0
 801e46c:	d0d1      	beq.n	801e412 <__swbuf_r+0x20>
 801e46e:	f04f 37ff 	mov.w	r7, #4294967295
 801e472:	e7f4      	b.n	801e45e <__swbuf_r+0x6c>
 801e474:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801e478:	81a3      	strh	r3, [r4, #12]
 801e47a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e47c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801e480:	6663      	str	r3, [r4, #100]	; 0x64
 801e482:	e7cc      	b.n	801e41e <__swbuf_r+0x2c>

0801e484 <__assert_func>:
 801e484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e486:	4614      	mov	r4, r2
 801e488:	461a      	mov	r2, r3
 801e48a:	4b09      	ldr	r3, [pc, #36]	; (801e4b0 <__assert_func+0x2c>)
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	4605      	mov	r5, r0
 801e490:	68d8      	ldr	r0, [r3, #12]
 801e492:	b14c      	cbz	r4, 801e4a8 <__assert_func+0x24>
 801e494:	4b07      	ldr	r3, [pc, #28]	; (801e4b4 <__assert_func+0x30>)
 801e496:	9100      	str	r1, [sp, #0]
 801e498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e49c:	4906      	ldr	r1, [pc, #24]	; (801e4b8 <__assert_func+0x34>)
 801e49e:	462b      	mov	r3, r5
 801e4a0:	f000 f844 	bl	801e52c <fiprintf>
 801e4a4:	f000 f854 	bl	801e550 <abort>
 801e4a8:	4b04      	ldr	r3, [pc, #16]	; (801e4bc <__assert_func+0x38>)
 801e4aa:	461c      	mov	r4, r3
 801e4ac:	e7f3      	b.n	801e496 <__assert_func+0x12>
 801e4ae:	bf00      	nop
 801e4b0:	200001c8 	.word	0x200001c8
 801e4b4:	08020bd4 	.word	0x08020bd4
 801e4b8:	08020be1 	.word	0x08020be1
 801e4bc:	08020c0f 	.word	0x08020c0f

0801e4c0 <_calloc_r>:
 801e4c0:	b538      	push	{r3, r4, r5, lr}
 801e4c2:	fba1 1502 	umull	r1, r5, r1, r2
 801e4c6:	b92d      	cbnz	r5, 801e4d4 <_calloc_r+0x14>
 801e4c8:	f7fa fd92 	bl	8018ff0 <_malloc_r>
 801e4cc:	4604      	mov	r4, r0
 801e4ce:	b938      	cbnz	r0, 801e4e0 <_calloc_r+0x20>
 801e4d0:	4620      	mov	r0, r4
 801e4d2:	bd38      	pop	{r3, r4, r5, pc}
 801e4d4:	f7fa fc2c 	bl	8018d30 <__errno>
 801e4d8:	230c      	movs	r3, #12
 801e4da:	6003      	str	r3, [r0, #0]
 801e4dc:	2400      	movs	r4, #0
 801e4de:	e7f7      	b.n	801e4d0 <_calloc_r+0x10>
 801e4e0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801e4e4:	f022 0203 	bic.w	r2, r2, #3
 801e4e8:	3a04      	subs	r2, #4
 801e4ea:	2a24      	cmp	r2, #36	; 0x24
 801e4ec:	d819      	bhi.n	801e522 <_calloc_r+0x62>
 801e4ee:	2a13      	cmp	r2, #19
 801e4f0:	d915      	bls.n	801e51e <_calloc_r+0x5e>
 801e4f2:	2a1b      	cmp	r2, #27
 801e4f4:	e9c0 5500 	strd	r5, r5, [r0]
 801e4f8:	d806      	bhi.n	801e508 <_calloc_r+0x48>
 801e4fa:	f100 0308 	add.w	r3, r0, #8
 801e4fe:	2200      	movs	r2, #0
 801e500:	e9c3 2200 	strd	r2, r2, [r3]
 801e504:	609a      	str	r2, [r3, #8]
 801e506:	e7e3      	b.n	801e4d0 <_calloc_r+0x10>
 801e508:	2a24      	cmp	r2, #36	; 0x24
 801e50a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801e50e:	bf11      	iteee	ne
 801e510:	f100 0310 	addne.w	r3, r0, #16
 801e514:	6105      	streq	r5, [r0, #16]
 801e516:	f100 0318 	addeq.w	r3, r0, #24
 801e51a:	6145      	streq	r5, [r0, #20]
 801e51c:	e7ef      	b.n	801e4fe <_calloc_r+0x3e>
 801e51e:	4603      	mov	r3, r0
 801e520:	e7ed      	b.n	801e4fe <_calloc_r+0x3e>
 801e522:	4629      	mov	r1, r5
 801e524:	f7fa fb46 	bl	8018bb4 <memset>
 801e528:	e7d2      	b.n	801e4d0 <_calloc_r+0x10>
	...

0801e52c <fiprintf>:
 801e52c:	b40e      	push	{r1, r2, r3}
 801e52e:	b503      	push	{r0, r1, lr}
 801e530:	4601      	mov	r1, r0
 801e532:	ab03      	add	r3, sp, #12
 801e534:	4805      	ldr	r0, [pc, #20]	; (801e54c <fiprintf+0x20>)
 801e536:	f853 2b04 	ldr.w	r2, [r3], #4
 801e53a:	6800      	ldr	r0, [r0, #0]
 801e53c:	9301      	str	r3, [sp, #4]
 801e53e:	f7fd fda5 	bl	801c08c <_vfiprintf_r>
 801e542:	b002      	add	sp, #8
 801e544:	f85d eb04 	ldr.w	lr, [sp], #4
 801e548:	b003      	add	sp, #12
 801e54a:	4770      	bx	lr
 801e54c:	200001c8 	.word	0x200001c8

0801e550 <abort>:
 801e550:	b508      	push	{r3, lr}
 801e552:	2006      	movs	r0, #6
 801e554:	f000 f82c 	bl	801e5b0 <raise>
 801e558:	2001      	movs	r0, #1
 801e55a:	f7ec f97a 	bl	800a852 <_exit>

0801e55e <_raise_r>:
 801e55e:	291f      	cmp	r1, #31
 801e560:	b538      	push	{r3, r4, r5, lr}
 801e562:	4604      	mov	r4, r0
 801e564:	460d      	mov	r5, r1
 801e566:	d904      	bls.n	801e572 <_raise_r+0x14>
 801e568:	2316      	movs	r3, #22
 801e56a:	6003      	str	r3, [r0, #0]
 801e56c:	f04f 30ff 	mov.w	r0, #4294967295
 801e570:	bd38      	pop	{r3, r4, r5, pc}
 801e572:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 801e576:	b112      	cbz	r2, 801e57e <_raise_r+0x20>
 801e578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e57c:	b94b      	cbnz	r3, 801e592 <_raise_r+0x34>
 801e57e:	4620      	mov	r0, r4
 801e580:	f000 f830 	bl	801e5e4 <_getpid_r>
 801e584:	462a      	mov	r2, r5
 801e586:	4601      	mov	r1, r0
 801e588:	4620      	mov	r0, r4
 801e58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e58e:	f000 b817 	b.w	801e5c0 <_kill_r>
 801e592:	2b01      	cmp	r3, #1
 801e594:	d00a      	beq.n	801e5ac <_raise_r+0x4e>
 801e596:	1c59      	adds	r1, r3, #1
 801e598:	d103      	bne.n	801e5a2 <_raise_r+0x44>
 801e59a:	2316      	movs	r3, #22
 801e59c:	6003      	str	r3, [r0, #0]
 801e59e:	2001      	movs	r0, #1
 801e5a0:	e7e6      	b.n	801e570 <_raise_r+0x12>
 801e5a2:	2400      	movs	r4, #0
 801e5a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e5a8:	4628      	mov	r0, r5
 801e5aa:	4798      	blx	r3
 801e5ac:	2000      	movs	r0, #0
 801e5ae:	e7df      	b.n	801e570 <_raise_r+0x12>

0801e5b0 <raise>:
 801e5b0:	4b02      	ldr	r3, [pc, #8]	; (801e5bc <raise+0xc>)
 801e5b2:	4601      	mov	r1, r0
 801e5b4:	6818      	ldr	r0, [r3, #0]
 801e5b6:	f7ff bfd2 	b.w	801e55e <_raise_r>
 801e5ba:	bf00      	nop
 801e5bc:	200001c8 	.word	0x200001c8

0801e5c0 <_kill_r>:
 801e5c0:	b538      	push	{r3, r4, r5, lr}
 801e5c2:	4d07      	ldr	r5, [pc, #28]	; (801e5e0 <_kill_r+0x20>)
 801e5c4:	2300      	movs	r3, #0
 801e5c6:	4604      	mov	r4, r0
 801e5c8:	4608      	mov	r0, r1
 801e5ca:	4611      	mov	r1, r2
 801e5cc:	602b      	str	r3, [r5, #0]
 801e5ce:	f7ec f930 	bl	800a832 <_kill>
 801e5d2:	1c43      	adds	r3, r0, #1
 801e5d4:	d102      	bne.n	801e5dc <_kill_r+0x1c>
 801e5d6:	682b      	ldr	r3, [r5, #0]
 801e5d8:	b103      	cbz	r3, 801e5dc <_kill_r+0x1c>
 801e5da:	6023      	str	r3, [r4, #0]
 801e5dc:	bd38      	pop	{r3, r4, r5, pc}
 801e5de:	bf00      	nop
 801e5e0:	200056e8 	.word	0x200056e8

0801e5e4 <_getpid_r>:
 801e5e4:	f7ec b91e 	b.w	800a824 <_getpid>

0801e5e8 <pow>:
 801e5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e5ec:	4614      	mov	r4, r2
 801e5ee:	461d      	mov	r5, r3
 801e5f0:	4680      	mov	r8, r0
 801e5f2:	4689      	mov	r9, r1
 801e5f4:	f000 f868 	bl	801e6c8 <__ieee754_pow>
 801e5f8:	4622      	mov	r2, r4
 801e5fa:	4606      	mov	r6, r0
 801e5fc:	460f      	mov	r7, r1
 801e5fe:	462b      	mov	r3, r5
 801e600:	4620      	mov	r0, r4
 801e602:	4629      	mov	r1, r5
 801e604:	f7ea fc6a 	bl	8008edc <__aeabi_dcmpun>
 801e608:	bbc8      	cbnz	r0, 801e67e <pow+0x96>
 801e60a:	2200      	movs	r2, #0
 801e60c:	2300      	movs	r3, #0
 801e60e:	4640      	mov	r0, r8
 801e610:	4649      	mov	r1, r9
 801e612:	f7ea fc31 	bl	8008e78 <__aeabi_dcmpeq>
 801e616:	b1b8      	cbz	r0, 801e648 <pow+0x60>
 801e618:	2200      	movs	r2, #0
 801e61a:	2300      	movs	r3, #0
 801e61c:	4620      	mov	r0, r4
 801e61e:	4629      	mov	r1, r5
 801e620:	f7ea fc2a 	bl	8008e78 <__aeabi_dcmpeq>
 801e624:	2800      	cmp	r0, #0
 801e626:	d141      	bne.n	801e6ac <pow+0xc4>
 801e628:	4620      	mov	r0, r4
 801e62a:	4629      	mov	r1, r5
 801e62c:	f000 f844 	bl	801e6b8 <finite>
 801e630:	b328      	cbz	r0, 801e67e <pow+0x96>
 801e632:	2200      	movs	r2, #0
 801e634:	2300      	movs	r3, #0
 801e636:	4620      	mov	r0, r4
 801e638:	4629      	mov	r1, r5
 801e63a:	f7ea fc27 	bl	8008e8c <__aeabi_dcmplt>
 801e63e:	b1f0      	cbz	r0, 801e67e <pow+0x96>
 801e640:	f7fa fb76 	bl	8018d30 <__errno>
 801e644:	2322      	movs	r3, #34	; 0x22
 801e646:	e019      	b.n	801e67c <pow+0x94>
 801e648:	4630      	mov	r0, r6
 801e64a:	4639      	mov	r1, r7
 801e64c:	f000 f834 	bl	801e6b8 <finite>
 801e650:	b9c8      	cbnz	r0, 801e686 <pow+0x9e>
 801e652:	4640      	mov	r0, r8
 801e654:	4649      	mov	r1, r9
 801e656:	f000 f82f 	bl	801e6b8 <finite>
 801e65a:	b1a0      	cbz	r0, 801e686 <pow+0x9e>
 801e65c:	4620      	mov	r0, r4
 801e65e:	4629      	mov	r1, r5
 801e660:	f000 f82a 	bl	801e6b8 <finite>
 801e664:	b178      	cbz	r0, 801e686 <pow+0x9e>
 801e666:	4632      	mov	r2, r6
 801e668:	463b      	mov	r3, r7
 801e66a:	4630      	mov	r0, r6
 801e66c:	4639      	mov	r1, r7
 801e66e:	f7ea fc35 	bl	8008edc <__aeabi_dcmpun>
 801e672:	2800      	cmp	r0, #0
 801e674:	d0e4      	beq.n	801e640 <pow+0x58>
 801e676:	f7fa fb5b 	bl	8018d30 <__errno>
 801e67a:	2321      	movs	r3, #33	; 0x21
 801e67c:	6003      	str	r3, [r0, #0]
 801e67e:	4630      	mov	r0, r6
 801e680:	4639      	mov	r1, r7
 801e682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e686:	2200      	movs	r2, #0
 801e688:	2300      	movs	r3, #0
 801e68a:	4630      	mov	r0, r6
 801e68c:	4639      	mov	r1, r7
 801e68e:	f7ea fbf3 	bl	8008e78 <__aeabi_dcmpeq>
 801e692:	2800      	cmp	r0, #0
 801e694:	d0f3      	beq.n	801e67e <pow+0x96>
 801e696:	4640      	mov	r0, r8
 801e698:	4649      	mov	r1, r9
 801e69a:	f000 f80d 	bl	801e6b8 <finite>
 801e69e:	2800      	cmp	r0, #0
 801e6a0:	d0ed      	beq.n	801e67e <pow+0x96>
 801e6a2:	4620      	mov	r0, r4
 801e6a4:	4629      	mov	r1, r5
 801e6a6:	f000 f807 	bl	801e6b8 <finite>
 801e6aa:	e7c8      	b.n	801e63e <pow+0x56>
 801e6ac:	4f01      	ldr	r7, [pc, #4]	; (801e6b4 <pow+0xcc>)
 801e6ae:	2600      	movs	r6, #0
 801e6b0:	e7e5      	b.n	801e67e <pow+0x96>
 801e6b2:	bf00      	nop
 801e6b4:	3ff00000 	.word	0x3ff00000

0801e6b8 <finite>:
 801e6b8:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 801e6bc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801e6c0:	0fc0      	lsrs	r0, r0, #31
 801e6c2:	4770      	bx	lr
 801e6c4:	0000      	movs	r0, r0
	...

0801e6c8 <__ieee754_pow>:
 801e6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6cc:	b093      	sub	sp, #76	; 0x4c
 801e6ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e6d2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 801e6d6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801e6da:	4689      	mov	r9, r1
 801e6dc:	ea56 0102 	orrs.w	r1, r6, r2
 801e6e0:	4680      	mov	r8, r0
 801e6e2:	d111      	bne.n	801e708 <__ieee754_pow+0x40>
 801e6e4:	1803      	adds	r3, r0, r0
 801e6e6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 801e6ea:	4152      	adcs	r2, r2
 801e6ec:	4299      	cmp	r1, r3
 801e6ee:	4b82      	ldr	r3, [pc, #520]	; (801e8f8 <__ieee754_pow+0x230>)
 801e6f0:	4193      	sbcs	r3, r2
 801e6f2:	f080 84b5 	bcs.w	801f060 <__ieee754_pow+0x998>
 801e6f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e6fa:	4640      	mov	r0, r8
 801e6fc:	4649      	mov	r1, r9
 801e6fe:	f7e9 ff9d 	bl	800863c <__adddf3>
 801e702:	4683      	mov	fp, r0
 801e704:	468c      	mov	ip, r1
 801e706:	e06f      	b.n	801e7e8 <__ieee754_pow+0x120>
 801e708:	4b7c      	ldr	r3, [pc, #496]	; (801e8fc <__ieee754_pow+0x234>)
 801e70a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 801e70e:	429c      	cmp	r4, r3
 801e710:	464d      	mov	r5, r9
 801e712:	4682      	mov	sl, r0
 801e714:	dc06      	bgt.n	801e724 <__ieee754_pow+0x5c>
 801e716:	d101      	bne.n	801e71c <__ieee754_pow+0x54>
 801e718:	2800      	cmp	r0, #0
 801e71a:	d1ec      	bne.n	801e6f6 <__ieee754_pow+0x2e>
 801e71c:	429e      	cmp	r6, r3
 801e71e:	dc01      	bgt.n	801e724 <__ieee754_pow+0x5c>
 801e720:	d10f      	bne.n	801e742 <__ieee754_pow+0x7a>
 801e722:	b172      	cbz	r2, 801e742 <__ieee754_pow+0x7a>
 801e724:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801e728:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801e72c:	ea55 050a 	orrs.w	r5, r5, sl
 801e730:	d1e1      	bne.n	801e6f6 <__ieee754_pow+0x2e>
 801e732:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801e736:	18db      	adds	r3, r3, r3
 801e738:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801e73c:	4152      	adcs	r2, r2
 801e73e:	429d      	cmp	r5, r3
 801e740:	e7d5      	b.n	801e6ee <__ieee754_pow+0x26>
 801e742:	2d00      	cmp	r5, #0
 801e744:	da39      	bge.n	801e7ba <__ieee754_pow+0xf2>
 801e746:	4b6e      	ldr	r3, [pc, #440]	; (801e900 <__ieee754_pow+0x238>)
 801e748:	429e      	cmp	r6, r3
 801e74a:	dc52      	bgt.n	801e7f2 <__ieee754_pow+0x12a>
 801e74c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e750:	429e      	cmp	r6, r3
 801e752:	f340 8498 	ble.w	801f086 <__ieee754_pow+0x9be>
 801e756:	1533      	asrs	r3, r6, #20
 801e758:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e75c:	2b14      	cmp	r3, #20
 801e75e:	dd0f      	ble.n	801e780 <__ieee754_pow+0xb8>
 801e760:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e764:	fa22 f103 	lsr.w	r1, r2, r3
 801e768:	fa01 f303 	lsl.w	r3, r1, r3
 801e76c:	4293      	cmp	r3, r2
 801e76e:	f040 848a 	bne.w	801f086 <__ieee754_pow+0x9be>
 801e772:	f001 0101 	and.w	r1, r1, #1
 801e776:	f1c1 0302 	rsb	r3, r1, #2
 801e77a:	9300      	str	r3, [sp, #0]
 801e77c:	b182      	cbz	r2, 801e7a0 <__ieee754_pow+0xd8>
 801e77e:	e05d      	b.n	801e83c <__ieee754_pow+0x174>
 801e780:	2a00      	cmp	r2, #0
 801e782:	d159      	bne.n	801e838 <__ieee754_pow+0x170>
 801e784:	f1c3 0314 	rsb	r3, r3, #20
 801e788:	fa46 f103 	asr.w	r1, r6, r3
 801e78c:	fa01 f303 	lsl.w	r3, r1, r3
 801e790:	42b3      	cmp	r3, r6
 801e792:	f040 8475 	bne.w	801f080 <__ieee754_pow+0x9b8>
 801e796:	f001 0101 	and.w	r1, r1, #1
 801e79a:	f1c1 0302 	rsb	r3, r1, #2
 801e79e:	9300      	str	r3, [sp, #0]
 801e7a0:	4b58      	ldr	r3, [pc, #352]	; (801e904 <__ieee754_pow+0x23c>)
 801e7a2:	429e      	cmp	r6, r3
 801e7a4:	d132      	bne.n	801e80c <__ieee754_pow+0x144>
 801e7a6:	2f00      	cmp	r7, #0
 801e7a8:	f280 8466 	bge.w	801f078 <__ieee754_pow+0x9b0>
 801e7ac:	4955      	ldr	r1, [pc, #340]	; (801e904 <__ieee754_pow+0x23c>)
 801e7ae:	4642      	mov	r2, r8
 801e7b0:	464b      	mov	r3, r9
 801e7b2:	2000      	movs	r0, #0
 801e7b4:	f7ea fa22 	bl	8008bfc <__aeabi_ddiv>
 801e7b8:	e7a3      	b.n	801e702 <__ieee754_pow+0x3a>
 801e7ba:	2300      	movs	r3, #0
 801e7bc:	9300      	str	r3, [sp, #0]
 801e7be:	2a00      	cmp	r2, #0
 801e7c0:	d13c      	bne.n	801e83c <__ieee754_pow+0x174>
 801e7c2:	4b4e      	ldr	r3, [pc, #312]	; (801e8fc <__ieee754_pow+0x234>)
 801e7c4:	429e      	cmp	r6, r3
 801e7c6:	d1eb      	bne.n	801e7a0 <__ieee754_pow+0xd8>
 801e7c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e7cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e7d0:	ea53 030a 	orrs.w	r3, r3, sl
 801e7d4:	f000 8444 	beq.w	801f060 <__ieee754_pow+0x998>
 801e7d8:	4b4b      	ldr	r3, [pc, #300]	; (801e908 <__ieee754_pow+0x240>)
 801e7da:	429c      	cmp	r4, r3
 801e7dc:	dd0b      	ble.n	801e7f6 <__ieee754_pow+0x12e>
 801e7de:	2f00      	cmp	r7, #0
 801e7e0:	f2c0 8444 	blt.w	801f06c <__ieee754_pow+0x9a4>
 801e7e4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 801e7e8:	4658      	mov	r0, fp
 801e7ea:	4661      	mov	r1, ip
 801e7ec:	b013      	add	sp, #76	; 0x4c
 801e7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7f2:	2302      	movs	r3, #2
 801e7f4:	e7e2      	b.n	801e7bc <__ieee754_pow+0xf4>
 801e7f6:	2f00      	cmp	r7, #0
 801e7f8:	f04f 0b00 	mov.w	fp, #0
 801e7fc:	f04f 0c00 	mov.w	ip, #0
 801e800:	daf2      	bge.n	801e7e8 <__ieee754_pow+0x120>
 801e802:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801e806:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 801e80a:	e7ed      	b.n	801e7e8 <__ieee754_pow+0x120>
 801e80c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801e810:	d106      	bne.n	801e820 <__ieee754_pow+0x158>
 801e812:	4642      	mov	r2, r8
 801e814:	464b      	mov	r3, r9
 801e816:	4640      	mov	r0, r8
 801e818:	4649      	mov	r1, r9
 801e81a:	f7ea f8c5 	bl	80089a8 <__aeabi_dmul>
 801e81e:	e770      	b.n	801e702 <__ieee754_pow+0x3a>
 801e820:	4b3a      	ldr	r3, [pc, #232]	; (801e90c <__ieee754_pow+0x244>)
 801e822:	429f      	cmp	r7, r3
 801e824:	d10a      	bne.n	801e83c <__ieee754_pow+0x174>
 801e826:	2d00      	cmp	r5, #0
 801e828:	db08      	blt.n	801e83c <__ieee754_pow+0x174>
 801e82a:	4640      	mov	r0, r8
 801e82c:	4649      	mov	r1, r9
 801e82e:	b013      	add	sp, #76	; 0x4c
 801e830:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e834:	f000 bd06 	b.w	801f244 <__ieee754_sqrt>
 801e838:	2300      	movs	r3, #0
 801e83a:	9300      	str	r3, [sp, #0]
 801e83c:	4640      	mov	r0, r8
 801e83e:	4649      	mov	r1, r9
 801e840:	f000 fc54 	bl	801f0ec <fabs>
 801e844:	4683      	mov	fp, r0
 801e846:	468c      	mov	ip, r1
 801e848:	f1ba 0f00 	cmp.w	sl, #0
 801e84c:	d128      	bne.n	801e8a0 <__ieee754_pow+0x1d8>
 801e84e:	b124      	cbz	r4, 801e85a <__ieee754_pow+0x192>
 801e850:	4b2c      	ldr	r3, [pc, #176]	; (801e904 <__ieee754_pow+0x23c>)
 801e852:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801e856:	429a      	cmp	r2, r3
 801e858:	d122      	bne.n	801e8a0 <__ieee754_pow+0x1d8>
 801e85a:	2f00      	cmp	r7, #0
 801e85c:	da07      	bge.n	801e86e <__ieee754_pow+0x1a6>
 801e85e:	465a      	mov	r2, fp
 801e860:	4663      	mov	r3, ip
 801e862:	4928      	ldr	r1, [pc, #160]	; (801e904 <__ieee754_pow+0x23c>)
 801e864:	2000      	movs	r0, #0
 801e866:	f7ea f9c9 	bl	8008bfc <__aeabi_ddiv>
 801e86a:	4683      	mov	fp, r0
 801e86c:	468c      	mov	ip, r1
 801e86e:	2d00      	cmp	r5, #0
 801e870:	daba      	bge.n	801e7e8 <__ieee754_pow+0x120>
 801e872:	9b00      	ldr	r3, [sp, #0]
 801e874:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e878:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e87c:	431c      	orrs	r4, r3
 801e87e:	d108      	bne.n	801e892 <__ieee754_pow+0x1ca>
 801e880:	465a      	mov	r2, fp
 801e882:	4663      	mov	r3, ip
 801e884:	4658      	mov	r0, fp
 801e886:	4661      	mov	r1, ip
 801e888:	f7e9 fed6 	bl	8008638 <__aeabi_dsub>
 801e88c:	4602      	mov	r2, r0
 801e88e:	460b      	mov	r3, r1
 801e890:	e790      	b.n	801e7b4 <__ieee754_pow+0xec>
 801e892:	9b00      	ldr	r3, [sp, #0]
 801e894:	2b01      	cmp	r3, #1
 801e896:	d1a7      	bne.n	801e7e8 <__ieee754_pow+0x120>
 801e898:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 801e89c:	469c      	mov	ip, r3
 801e89e:	e7a3      	b.n	801e7e8 <__ieee754_pow+0x120>
 801e8a0:	0feb      	lsrs	r3, r5, #31
 801e8a2:	3b01      	subs	r3, #1
 801e8a4:	930c      	str	r3, [sp, #48]	; 0x30
 801e8a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e8a8:	9b00      	ldr	r3, [sp, #0]
 801e8aa:	4313      	orrs	r3, r2
 801e8ac:	d104      	bne.n	801e8b8 <__ieee754_pow+0x1f0>
 801e8ae:	4642      	mov	r2, r8
 801e8b0:	464b      	mov	r3, r9
 801e8b2:	4640      	mov	r0, r8
 801e8b4:	4649      	mov	r1, r9
 801e8b6:	e7e7      	b.n	801e888 <__ieee754_pow+0x1c0>
 801e8b8:	4b15      	ldr	r3, [pc, #84]	; (801e910 <__ieee754_pow+0x248>)
 801e8ba:	429e      	cmp	r6, r3
 801e8bc:	f340 80f2 	ble.w	801eaa4 <__ieee754_pow+0x3dc>
 801e8c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e8c4:	429e      	cmp	r6, r3
 801e8c6:	4b10      	ldr	r3, [pc, #64]	; (801e908 <__ieee754_pow+0x240>)
 801e8c8:	dd09      	ble.n	801e8de <__ieee754_pow+0x216>
 801e8ca:	429c      	cmp	r4, r3
 801e8cc:	dc0c      	bgt.n	801e8e8 <__ieee754_pow+0x220>
 801e8ce:	2f00      	cmp	r7, #0
 801e8d0:	da0c      	bge.n	801e8ec <__ieee754_pow+0x224>
 801e8d2:	2000      	movs	r0, #0
 801e8d4:	b013      	add	sp, #76	; 0x4c
 801e8d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8da:	f000 bcae 	b.w	801f23a <__math_oflow>
 801e8de:	429c      	cmp	r4, r3
 801e8e0:	dbf5      	blt.n	801e8ce <__ieee754_pow+0x206>
 801e8e2:	4b08      	ldr	r3, [pc, #32]	; (801e904 <__ieee754_pow+0x23c>)
 801e8e4:	429c      	cmp	r4, r3
 801e8e6:	dd15      	ble.n	801e914 <__ieee754_pow+0x24c>
 801e8e8:	2f00      	cmp	r7, #0
 801e8ea:	dcf2      	bgt.n	801e8d2 <__ieee754_pow+0x20a>
 801e8ec:	2000      	movs	r0, #0
 801e8ee:	b013      	add	sp, #76	; 0x4c
 801e8f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8f4:	f000 bc9c 	b.w	801f230 <__math_uflow>
 801e8f8:	fff00000 	.word	0xfff00000
 801e8fc:	7ff00000 	.word	0x7ff00000
 801e900:	433fffff 	.word	0x433fffff
 801e904:	3ff00000 	.word	0x3ff00000
 801e908:	3fefffff 	.word	0x3fefffff
 801e90c:	3fe00000 	.word	0x3fe00000
 801e910:	41e00000 	.word	0x41e00000
 801e914:	4661      	mov	r1, ip
 801e916:	4b5e      	ldr	r3, [pc, #376]	; (801ea90 <__ieee754_pow+0x3c8>)
 801e918:	2200      	movs	r2, #0
 801e91a:	4658      	mov	r0, fp
 801e91c:	f7e9 fe8c 	bl	8008638 <__aeabi_dsub>
 801e920:	a353      	add	r3, pc, #332	; (adr r3, 801ea70 <__ieee754_pow+0x3a8>)
 801e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e926:	4604      	mov	r4, r0
 801e928:	460d      	mov	r5, r1
 801e92a:	f7ea f83d 	bl	80089a8 <__aeabi_dmul>
 801e92e:	a352      	add	r3, pc, #328	; (adr r3, 801ea78 <__ieee754_pow+0x3b0>)
 801e930:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e934:	4606      	mov	r6, r0
 801e936:	460f      	mov	r7, r1
 801e938:	4620      	mov	r0, r4
 801e93a:	4629      	mov	r1, r5
 801e93c:	f7ea f834 	bl	80089a8 <__aeabi_dmul>
 801e940:	4b54      	ldr	r3, [pc, #336]	; (801ea94 <__ieee754_pow+0x3cc>)
 801e942:	4682      	mov	sl, r0
 801e944:	468b      	mov	fp, r1
 801e946:	2200      	movs	r2, #0
 801e948:	4620      	mov	r0, r4
 801e94a:	4629      	mov	r1, r5
 801e94c:	f7ea f82c 	bl	80089a8 <__aeabi_dmul>
 801e950:	4602      	mov	r2, r0
 801e952:	460b      	mov	r3, r1
 801e954:	a14a      	add	r1, pc, #296	; (adr r1, 801ea80 <__ieee754_pow+0x3b8>)
 801e956:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e95a:	f7e9 fe6d 	bl	8008638 <__aeabi_dsub>
 801e95e:	4622      	mov	r2, r4
 801e960:	462b      	mov	r3, r5
 801e962:	f7ea f821 	bl	80089a8 <__aeabi_dmul>
 801e966:	4602      	mov	r2, r0
 801e968:	460b      	mov	r3, r1
 801e96a:	2000      	movs	r0, #0
 801e96c:	494a      	ldr	r1, [pc, #296]	; (801ea98 <__ieee754_pow+0x3d0>)
 801e96e:	f7e9 fe63 	bl	8008638 <__aeabi_dsub>
 801e972:	4622      	mov	r2, r4
 801e974:	462b      	mov	r3, r5
 801e976:	4680      	mov	r8, r0
 801e978:	4689      	mov	r9, r1
 801e97a:	4620      	mov	r0, r4
 801e97c:	4629      	mov	r1, r5
 801e97e:	f7ea f813 	bl	80089a8 <__aeabi_dmul>
 801e982:	4602      	mov	r2, r0
 801e984:	460b      	mov	r3, r1
 801e986:	4640      	mov	r0, r8
 801e988:	4649      	mov	r1, r9
 801e98a:	f7ea f80d 	bl	80089a8 <__aeabi_dmul>
 801e98e:	a33e      	add	r3, pc, #248	; (adr r3, 801ea88 <__ieee754_pow+0x3c0>)
 801e990:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e994:	f7ea f808 	bl	80089a8 <__aeabi_dmul>
 801e998:	4602      	mov	r2, r0
 801e99a:	460b      	mov	r3, r1
 801e99c:	4650      	mov	r0, sl
 801e99e:	4659      	mov	r1, fp
 801e9a0:	f7e9 fe4a 	bl	8008638 <__aeabi_dsub>
 801e9a4:	4602      	mov	r2, r0
 801e9a6:	460b      	mov	r3, r1
 801e9a8:	4604      	mov	r4, r0
 801e9aa:	460d      	mov	r5, r1
 801e9ac:	4630      	mov	r0, r6
 801e9ae:	4639      	mov	r1, r7
 801e9b0:	f7e9 fe44 	bl	800863c <__adddf3>
 801e9b4:	2000      	movs	r0, #0
 801e9b6:	4632      	mov	r2, r6
 801e9b8:	463b      	mov	r3, r7
 801e9ba:	4682      	mov	sl, r0
 801e9bc:	468b      	mov	fp, r1
 801e9be:	f7e9 fe3b 	bl	8008638 <__aeabi_dsub>
 801e9c2:	4602      	mov	r2, r0
 801e9c4:	460b      	mov	r3, r1
 801e9c6:	4620      	mov	r0, r4
 801e9c8:	4629      	mov	r1, r5
 801e9ca:	f7e9 fe35 	bl	8008638 <__aeabi_dsub>
 801e9ce:	9b00      	ldr	r3, [sp, #0]
 801e9d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e9d2:	3b01      	subs	r3, #1
 801e9d4:	4313      	orrs	r3, r2
 801e9d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e9da:	bf0c      	ite	eq
 801e9dc:	4b2f      	ldreq	r3, [pc, #188]	; (801ea9c <__ieee754_pow+0x3d4>)
 801e9de:	4b2c      	ldrne	r3, [pc, #176]	; (801ea90 <__ieee754_pow+0x3c8>)
 801e9e0:	2600      	movs	r6, #0
 801e9e2:	2200      	movs	r2, #0
 801e9e4:	e9cd 2300 	strd	r2, r3, [sp]
 801e9e8:	4604      	mov	r4, r0
 801e9ea:	460d      	mov	r5, r1
 801e9ec:	4632      	mov	r2, r6
 801e9ee:	463b      	mov	r3, r7
 801e9f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e9f4:	f7e9 fe20 	bl	8008638 <__aeabi_dsub>
 801e9f8:	4652      	mov	r2, sl
 801e9fa:	465b      	mov	r3, fp
 801e9fc:	f7e9 ffd4 	bl	80089a8 <__aeabi_dmul>
 801ea00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ea04:	4680      	mov	r8, r0
 801ea06:	4689      	mov	r9, r1
 801ea08:	4620      	mov	r0, r4
 801ea0a:	4629      	mov	r1, r5
 801ea0c:	f7e9 ffcc 	bl	80089a8 <__aeabi_dmul>
 801ea10:	4602      	mov	r2, r0
 801ea12:	460b      	mov	r3, r1
 801ea14:	4640      	mov	r0, r8
 801ea16:	4649      	mov	r1, r9
 801ea18:	f7e9 fe10 	bl	800863c <__adddf3>
 801ea1c:	4632      	mov	r2, r6
 801ea1e:	463b      	mov	r3, r7
 801ea20:	4680      	mov	r8, r0
 801ea22:	4689      	mov	r9, r1
 801ea24:	4650      	mov	r0, sl
 801ea26:	4659      	mov	r1, fp
 801ea28:	f7e9 ffbe 	bl	80089a8 <__aeabi_dmul>
 801ea2c:	460b      	mov	r3, r1
 801ea2e:	4604      	mov	r4, r0
 801ea30:	460d      	mov	r5, r1
 801ea32:	4602      	mov	r2, r0
 801ea34:	4649      	mov	r1, r9
 801ea36:	4640      	mov	r0, r8
 801ea38:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801ea3c:	f7e9 fdfe 	bl	800863c <__adddf3>
 801ea40:	4b17      	ldr	r3, [pc, #92]	; (801eaa0 <__ieee754_pow+0x3d8>)
 801ea42:	4299      	cmp	r1, r3
 801ea44:	4682      	mov	sl, r0
 801ea46:	460f      	mov	r7, r1
 801ea48:	460e      	mov	r6, r1
 801ea4a:	f340 82e4 	ble.w	801f016 <__ieee754_pow+0x94e>
 801ea4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ea52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ea56:	4303      	orrs	r3, r0
 801ea58:	f000 81e0 	beq.w	801ee1c <__ieee754_pow+0x754>
 801ea5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ea60:	2200      	movs	r2, #0
 801ea62:	2300      	movs	r3, #0
 801ea64:	f7ea fa12 	bl	8008e8c <__aeabi_dcmplt>
 801ea68:	3800      	subs	r0, #0
 801ea6a:	bf18      	it	ne
 801ea6c:	2001      	movne	r0, #1
 801ea6e:	e731      	b.n	801e8d4 <__ieee754_pow+0x20c>
 801ea70:	60000000 	.word	0x60000000
 801ea74:	3ff71547 	.word	0x3ff71547
 801ea78:	f85ddf44 	.word	0xf85ddf44
 801ea7c:	3e54ae0b 	.word	0x3e54ae0b
 801ea80:	55555555 	.word	0x55555555
 801ea84:	3fd55555 	.word	0x3fd55555
 801ea88:	652b82fe 	.word	0x652b82fe
 801ea8c:	3ff71547 	.word	0x3ff71547
 801ea90:	3ff00000 	.word	0x3ff00000
 801ea94:	3fd00000 	.word	0x3fd00000
 801ea98:	3fe00000 	.word	0x3fe00000
 801ea9c:	bff00000 	.word	0xbff00000
 801eaa0:	408fffff 	.word	0x408fffff
 801eaa4:	4bd4      	ldr	r3, [pc, #848]	; (801edf8 <__ieee754_pow+0x730>)
 801eaa6:	402b      	ands	r3, r5
 801eaa8:	2200      	movs	r2, #0
 801eaaa:	b943      	cbnz	r3, 801eabe <__ieee754_pow+0x3f6>
 801eaac:	4658      	mov	r0, fp
 801eaae:	4bd3      	ldr	r3, [pc, #844]	; (801edfc <__ieee754_pow+0x734>)
 801eab0:	4661      	mov	r1, ip
 801eab2:	f7e9 ff79 	bl	80089a8 <__aeabi_dmul>
 801eab6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801eaba:	4683      	mov	fp, r0
 801eabc:	460c      	mov	r4, r1
 801eabe:	1523      	asrs	r3, r4, #20
 801eac0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801eac4:	4413      	add	r3, r2
 801eac6:	930b      	str	r3, [sp, #44]	; 0x2c
 801eac8:	4bcd      	ldr	r3, [pc, #820]	; (801ee00 <__ieee754_pow+0x738>)
 801eaca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801eace:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ead2:	429c      	cmp	r4, r3
 801ead4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ead8:	dd08      	ble.n	801eaec <__ieee754_pow+0x424>
 801eada:	4bca      	ldr	r3, [pc, #808]	; (801ee04 <__ieee754_pow+0x73c>)
 801eadc:	429c      	cmp	r4, r3
 801eade:	f340 8164 	ble.w	801edaa <__ieee754_pow+0x6e2>
 801eae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eae4:	3301      	adds	r3, #1
 801eae6:	930b      	str	r3, [sp, #44]	; 0x2c
 801eae8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801eaec:	2600      	movs	r6, #0
 801eaee:	00f3      	lsls	r3, r6, #3
 801eaf0:	930d      	str	r3, [sp, #52]	; 0x34
 801eaf2:	4bc5      	ldr	r3, [pc, #788]	; (801ee08 <__ieee754_pow+0x740>)
 801eaf4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801eaf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 801eafc:	4658      	mov	r0, fp
 801eafe:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801eb02:	461a      	mov	r2, r3
 801eb04:	4629      	mov	r1, r5
 801eb06:	4623      	mov	r3, r4
 801eb08:	f7e9 fd96 	bl	8008638 <__aeabi_dsub>
 801eb0c:	46da      	mov	sl, fp
 801eb0e:	4652      	mov	r2, sl
 801eb10:	462b      	mov	r3, r5
 801eb12:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801eb16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801eb1a:	f7e9 fd8f 	bl	800863c <__adddf3>
 801eb1e:	4602      	mov	r2, r0
 801eb20:	460b      	mov	r3, r1
 801eb22:	2000      	movs	r0, #0
 801eb24:	49b9      	ldr	r1, [pc, #740]	; (801ee0c <__ieee754_pow+0x744>)
 801eb26:	f7ea f869 	bl	8008bfc <__aeabi_ddiv>
 801eb2a:	4602      	mov	r2, r0
 801eb2c:	460b      	mov	r3, r1
 801eb2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801eb32:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801eb36:	f7e9 ff37 	bl	80089a8 <__aeabi_dmul>
 801eb3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801eb3e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801eb42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801eb46:	2300      	movs	r3, #0
 801eb48:	9304      	str	r3, [sp, #16]
 801eb4a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801eb4e:	46ab      	mov	fp, r5
 801eb50:	106d      	asrs	r5, r5, #1
 801eb52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801eb56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801eb5a:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 801eb5e:	2200      	movs	r2, #0
 801eb60:	4640      	mov	r0, r8
 801eb62:	4649      	mov	r1, r9
 801eb64:	4614      	mov	r4, r2
 801eb66:	461d      	mov	r5, r3
 801eb68:	f7e9 ff1e 	bl	80089a8 <__aeabi_dmul>
 801eb6c:	4602      	mov	r2, r0
 801eb6e:	460b      	mov	r3, r1
 801eb70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801eb74:	f7e9 fd60 	bl	8008638 <__aeabi_dsub>
 801eb78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801eb7c:	4606      	mov	r6, r0
 801eb7e:	460f      	mov	r7, r1
 801eb80:	4620      	mov	r0, r4
 801eb82:	4629      	mov	r1, r5
 801eb84:	f7e9 fd58 	bl	8008638 <__aeabi_dsub>
 801eb88:	4602      	mov	r2, r0
 801eb8a:	460b      	mov	r3, r1
 801eb8c:	4650      	mov	r0, sl
 801eb8e:	4659      	mov	r1, fp
 801eb90:	f7e9 fd52 	bl	8008638 <__aeabi_dsub>
 801eb94:	4642      	mov	r2, r8
 801eb96:	464b      	mov	r3, r9
 801eb98:	f7e9 ff06 	bl	80089a8 <__aeabi_dmul>
 801eb9c:	4602      	mov	r2, r0
 801eb9e:	460b      	mov	r3, r1
 801eba0:	4630      	mov	r0, r6
 801eba2:	4639      	mov	r1, r7
 801eba4:	f7e9 fd48 	bl	8008638 <__aeabi_dsub>
 801eba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ebac:	f7e9 fefc 	bl	80089a8 <__aeabi_dmul>
 801ebb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ebb4:	4682      	mov	sl, r0
 801ebb6:	468b      	mov	fp, r1
 801ebb8:	4610      	mov	r0, r2
 801ebba:	4619      	mov	r1, r3
 801ebbc:	f7e9 fef4 	bl	80089a8 <__aeabi_dmul>
 801ebc0:	a37b      	add	r3, pc, #492	; (adr r3, 801edb0 <__ieee754_pow+0x6e8>)
 801ebc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebc6:	4604      	mov	r4, r0
 801ebc8:	460d      	mov	r5, r1
 801ebca:	f7e9 feed 	bl	80089a8 <__aeabi_dmul>
 801ebce:	a37a      	add	r3, pc, #488	; (adr r3, 801edb8 <__ieee754_pow+0x6f0>)
 801ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebd4:	f7e9 fd32 	bl	800863c <__adddf3>
 801ebd8:	4622      	mov	r2, r4
 801ebda:	462b      	mov	r3, r5
 801ebdc:	f7e9 fee4 	bl	80089a8 <__aeabi_dmul>
 801ebe0:	a377      	add	r3, pc, #476	; (adr r3, 801edc0 <__ieee754_pow+0x6f8>)
 801ebe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebe6:	f7e9 fd29 	bl	800863c <__adddf3>
 801ebea:	4622      	mov	r2, r4
 801ebec:	462b      	mov	r3, r5
 801ebee:	f7e9 fedb 	bl	80089a8 <__aeabi_dmul>
 801ebf2:	a375      	add	r3, pc, #468	; (adr r3, 801edc8 <__ieee754_pow+0x700>)
 801ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebf8:	f7e9 fd20 	bl	800863c <__adddf3>
 801ebfc:	4622      	mov	r2, r4
 801ebfe:	462b      	mov	r3, r5
 801ec00:	f7e9 fed2 	bl	80089a8 <__aeabi_dmul>
 801ec04:	a372      	add	r3, pc, #456	; (adr r3, 801edd0 <__ieee754_pow+0x708>)
 801ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec0a:	f7e9 fd17 	bl	800863c <__adddf3>
 801ec0e:	4622      	mov	r2, r4
 801ec10:	462b      	mov	r3, r5
 801ec12:	f7e9 fec9 	bl	80089a8 <__aeabi_dmul>
 801ec16:	a370      	add	r3, pc, #448	; (adr r3, 801edd8 <__ieee754_pow+0x710>)
 801ec18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec1c:	f7e9 fd0e 	bl	800863c <__adddf3>
 801ec20:	4622      	mov	r2, r4
 801ec22:	4606      	mov	r6, r0
 801ec24:	460f      	mov	r7, r1
 801ec26:	462b      	mov	r3, r5
 801ec28:	4620      	mov	r0, r4
 801ec2a:	4629      	mov	r1, r5
 801ec2c:	f7e9 febc 	bl	80089a8 <__aeabi_dmul>
 801ec30:	4602      	mov	r2, r0
 801ec32:	460b      	mov	r3, r1
 801ec34:	4630      	mov	r0, r6
 801ec36:	4639      	mov	r1, r7
 801ec38:	f7e9 feb6 	bl	80089a8 <__aeabi_dmul>
 801ec3c:	4642      	mov	r2, r8
 801ec3e:	4604      	mov	r4, r0
 801ec40:	460d      	mov	r5, r1
 801ec42:	464b      	mov	r3, r9
 801ec44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ec48:	f7e9 fcf8 	bl	800863c <__adddf3>
 801ec4c:	4652      	mov	r2, sl
 801ec4e:	465b      	mov	r3, fp
 801ec50:	f7e9 feaa 	bl	80089a8 <__aeabi_dmul>
 801ec54:	4622      	mov	r2, r4
 801ec56:	462b      	mov	r3, r5
 801ec58:	f7e9 fcf0 	bl	800863c <__adddf3>
 801ec5c:	4642      	mov	r2, r8
 801ec5e:	4606      	mov	r6, r0
 801ec60:	460f      	mov	r7, r1
 801ec62:	464b      	mov	r3, r9
 801ec64:	4640      	mov	r0, r8
 801ec66:	4649      	mov	r1, r9
 801ec68:	f7e9 fe9e 	bl	80089a8 <__aeabi_dmul>
 801ec6c:	4602      	mov	r2, r0
 801ec6e:	460b      	mov	r3, r1
 801ec70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ec74:	4b66      	ldr	r3, [pc, #408]	; (801ee10 <__ieee754_pow+0x748>)
 801ec76:	2200      	movs	r2, #0
 801ec78:	f7e9 fce0 	bl	800863c <__adddf3>
 801ec7c:	4632      	mov	r2, r6
 801ec7e:	463b      	mov	r3, r7
 801ec80:	f7e9 fcdc 	bl	800863c <__adddf3>
 801ec84:	2400      	movs	r4, #0
 801ec86:	460d      	mov	r5, r1
 801ec88:	4622      	mov	r2, r4
 801ec8a:	460b      	mov	r3, r1
 801ec8c:	4640      	mov	r0, r8
 801ec8e:	4649      	mov	r1, r9
 801ec90:	f7e9 fe8a 	bl	80089a8 <__aeabi_dmul>
 801ec94:	4b5e      	ldr	r3, [pc, #376]	; (801ee10 <__ieee754_pow+0x748>)
 801ec96:	4680      	mov	r8, r0
 801ec98:	4689      	mov	r9, r1
 801ec9a:	2200      	movs	r2, #0
 801ec9c:	4620      	mov	r0, r4
 801ec9e:	4629      	mov	r1, r5
 801eca0:	f7e9 fcca 	bl	8008638 <__aeabi_dsub>
 801eca4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801eca8:	f7e9 fcc6 	bl	8008638 <__aeabi_dsub>
 801ecac:	4602      	mov	r2, r0
 801ecae:	460b      	mov	r3, r1
 801ecb0:	4630      	mov	r0, r6
 801ecb2:	4639      	mov	r1, r7
 801ecb4:	f7e9 fcc0 	bl	8008638 <__aeabi_dsub>
 801ecb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ecbc:	f7e9 fe74 	bl	80089a8 <__aeabi_dmul>
 801ecc0:	4622      	mov	r2, r4
 801ecc2:	4606      	mov	r6, r0
 801ecc4:	460f      	mov	r7, r1
 801ecc6:	462b      	mov	r3, r5
 801ecc8:	4650      	mov	r0, sl
 801ecca:	4659      	mov	r1, fp
 801eccc:	f7e9 fe6c 	bl	80089a8 <__aeabi_dmul>
 801ecd0:	4602      	mov	r2, r0
 801ecd2:	460b      	mov	r3, r1
 801ecd4:	4630      	mov	r0, r6
 801ecd6:	4639      	mov	r1, r7
 801ecd8:	f7e9 fcb0 	bl	800863c <__adddf3>
 801ecdc:	4606      	mov	r6, r0
 801ecde:	460f      	mov	r7, r1
 801ece0:	4602      	mov	r2, r0
 801ece2:	460b      	mov	r3, r1
 801ece4:	4640      	mov	r0, r8
 801ece6:	4649      	mov	r1, r9
 801ece8:	f7e9 fca8 	bl	800863c <__adddf3>
 801ecec:	2400      	movs	r4, #0
 801ecee:	a33c      	add	r3, pc, #240	; (adr r3, 801ede0 <__ieee754_pow+0x718>)
 801ecf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecf4:	4620      	mov	r0, r4
 801ecf6:	460d      	mov	r5, r1
 801ecf8:	f7e9 fe56 	bl	80089a8 <__aeabi_dmul>
 801ecfc:	4642      	mov	r2, r8
 801ecfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ed02:	464b      	mov	r3, r9
 801ed04:	4620      	mov	r0, r4
 801ed06:	4629      	mov	r1, r5
 801ed08:	f7e9 fc96 	bl	8008638 <__aeabi_dsub>
 801ed0c:	4602      	mov	r2, r0
 801ed0e:	460b      	mov	r3, r1
 801ed10:	4630      	mov	r0, r6
 801ed12:	4639      	mov	r1, r7
 801ed14:	f7e9 fc90 	bl	8008638 <__aeabi_dsub>
 801ed18:	a333      	add	r3, pc, #204	; (adr r3, 801ede8 <__ieee754_pow+0x720>)
 801ed1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed1e:	f7e9 fe43 	bl	80089a8 <__aeabi_dmul>
 801ed22:	a333      	add	r3, pc, #204	; (adr r3, 801edf0 <__ieee754_pow+0x728>)
 801ed24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed28:	4606      	mov	r6, r0
 801ed2a:	460f      	mov	r7, r1
 801ed2c:	4620      	mov	r0, r4
 801ed2e:	4629      	mov	r1, r5
 801ed30:	f7e9 fe3a 	bl	80089a8 <__aeabi_dmul>
 801ed34:	4602      	mov	r2, r0
 801ed36:	460b      	mov	r3, r1
 801ed38:	4630      	mov	r0, r6
 801ed3a:	4639      	mov	r1, r7
 801ed3c:	f7e9 fc7e 	bl	800863c <__adddf3>
 801ed40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ed42:	4b34      	ldr	r3, [pc, #208]	; (801ee14 <__ieee754_pow+0x74c>)
 801ed44:	4413      	add	r3, r2
 801ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed4a:	f7e9 fc77 	bl	800863c <__adddf3>
 801ed4e:	4680      	mov	r8, r0
 801ed50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ed52:	4689      	mov	r9, r1
 801ed54:	f7e9 fdbe 	bl	80088d4 <__aeabi_i2d>
 801ed58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ed5a:	4b2f      	ldr	r3, [pc, #188]	; (801ee18 <__ieee754_pow+0x750>)
 801ed5c:	4413      	add	r3, r2
 801ed5e:	e9d3 6700 	ldrd	r6, r7, [r3]
 801ed62:	4604      	mov	r4, r0
 801ed64:	460d      	mov	r5, r1
 801ed66:	4642      	mov	r2, r8
 801ed68:	464b      	mov	r3, r9
 801ed6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ed6e:	f7e9 fc65 	bl	800863c <__adddf3>
 801ed72:	4632      	mov	r2, r6
 801ed74:	463b      	mov	r3, r7
 801ed76:	f7e9 fc61 	bl	800863c <__adddf3>
 801ed7a:	4622      	mov	r2, r4
 801ed7c:	462b      	mov	r3, r5
 801ed7e:	f7e9 fc5d 	bl	800863c <__adddf3>
 801ed82:	2000      	movs	r0, #0
 801ed84:	4622      	mov	r2, r4
 801ed86:	462b      	mov	r3, r5
 801ed88:	4682      	mov	sl, r0
 801ed8a:	468b      	mov	fp, r1
 801ed8c:	f7e9 fc54 	bl	8008638 <__aeabi_dsub>
 801ed90:	4632      	mov	r2, r6
 801ed92:	463b      	mov	r3, r7
 801ed94:	f7e9 fc50 	bl	8008638 <__aeabi_dsub>
 801ed98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ed9c:	f7e9 fc4c 	bl	8008638 <__aeabi_dsub>
 801eda0:	4602      	mov	r2, r0
 801eda2:	460b      	mov	r3, r1
 801eda4:	4640      	mov	r0, r8
 801eda6:	4649      	mov	r1, r9
 801eda8:	e60f      	b.n	801e9ca <__ieee754_pow+0x302>
 801edaa:	2601      	movs	r6, #1
 801edac:	e69f      	b.n	801eaee <__ieee754_pow+0x426>
 801edae:	bf00      	nop
 801edb0:	4a454eef 	.word	0x4a454eef
 801edb4:	3fca7e28 	.word	0x3fca7e28
 801edb8:	93c9db65 	.word	0x93c9db65
 801edbc:	3fcd864a 	.word	0x3fcd864a
 801edc0:	a91d4101 	.word	0xa91d4101
 801edc4:	3fd17460 	.word	0x3fd17460
 801edc8:	518f264d 	.word	0x518f264d
 801edcc:	3fd55555 	.word	0x3fd55555
 801edd0:	db6fabff 	.word	0xdb6fabff
 801edd4:	3fdb6db6 	.word	0x3fdb6db6
 801edd8:	33333303 	.word	0x33333303
 801eddc:	3fe33333 	.word	0x3fe33333
 801ede0:	e0000000 	.word	0xe0000000
 801ede4:	3feec709 	.word	0x3feec709
 801ede8:	dc3a03fd 	.word	0xdc3a03fd
 801edec:	3feec709 	.word	0x3feec709
 801edf0:	145b01f5 	.word	0x145b01f5
 801edf4:	be3e2fe0 	.word	0xbe3e2fe0
 801edf8:	7ff00000 	.word	0x7ff00000
 801edfc:	43400000 	.word	0x43400000
 801ee00:	0003988e 	.word	0x0003988e
 801ee04:	000bb679 	.word	0x000bb679
 801ee08:	08020c10 	.word	0x08020c10
 801ee0c:	3ff00000 	.word	0x3ff00000
 801ee10:	40080000 	.word	0x40080000
 801ee14:	08020c30 	.word	0x08020c30
 801ee18:	08020c20 	.word	0x08020c20
 801ee1c:	a39c      	add	r3, pc, #624	; (adr r3, 801f090 <__ieee754_pow+0x9c8>)
 801ee1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee22:	4640      	mov	r0, r8
 801ee24:	4649      	mov	r1, r9
 801ee26:	f7e9 fc09 	bl	800863c <__adddf3>
 801ee2a:	4622      	mov	r2, r4
 801ee2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ee30:	462b      	mov	r3, r5
 801ee32:	4650      	mov	r0, sl
 801ee34:	4639      	mov	r1, r7
 801ee36:	f7e9 fbff 	bl	8008638 <__aeabi_dsub>
 801ee3a:	4602      	mov	r2, r0
 801ee3c:	460b      	mov	r3, r1
 801ee3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ee42:	f7ea f841 	bl	8008ec8 <__aeabi_dcmpgt>
 801ee46:	2800      	cmp	r0, #0
 801ee48:	f47f ae08 	bne.w	801ea5c <__ieee754_pow+0x394>
 801ee4c:	4aa2      	ldr	r2, [pc, #648]	; (801f0d8 <__ieee754_pow+0xa10>)
 801ee4e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 801ee52:	4293      	cmp	r3, r2
 801ee54:	f340 80ff 	ble.w	801f056 <__ieee754_pow+0x98e>
 801ee58:	151b      	asrs	r3, r3, #20
 801ee5a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ee5e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ee62:	fa4a fa03 	asr.w	sl, sl, r3
 801ee66:	44b2      	add	sl, r6
 801ee68:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801ee6c:	489b      	ldr	r0, [pc, #620]	; (801f0dc <__ieee754_pow+0xa14>)
 801ee6e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801ee72:	4108      	asrs	r0, r1
 801ee74:	ea00 030a 	and.w	r3, r0, sl
 801ee78:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801ee7c:	f1c1 0114 	rsb	r1, r1, #20
 801ee80:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ee84:	fa4a fa01 	asr.w	sl, sl, r1
 801ee88:	2e00      	cmp	r6, #0
 801ee8a:	f04f 0200 	mov.w	r2, #0
 801ee8e:	4620      	mov	r0, r4
 801ee90:	4629      	mov	r1, r5
 801ee92:	bfb8      	it	lt
 801ee94:	f1ca 0a00 	rsblt	sl, sl, #0
 801ee98:	f7e9 fbce 	bl	8008638 <__aeabi_dsub>
 801ee9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eea0:	4642      	mov	r2, r8
 801eea2:	464b      	mov	r3, r9
 801eea4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eea8:	f7e9 fbc8 	bl	800863c <__adddf3>
 801eeac:	2400      	movs	r4, #0
 801eeae:	a37a      	add	r3, pc, #488	; (adr r3, 801f098 <__ieee754_pow+0x9d0>)
 801eeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeb4:	4620      	mov	r0, r4
 801eeb6:	460d      	mov	r5, r1
 801eeb8:	f7e9 fd76 	bl	80089a8 <__aeabi_dmul>
 801eebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801eec0:	4606      	mov	r6, r0
 801eec2:	460f      	mov	r7, r1
 801eec4:	4620      	mov	r0, r4
 801eec6:	4629      	mov	r1, r5
 801eec8:	f7e9 fbb6 	bl	8008638 <__aeabi_dsub>
 801eecc:	4602      	mov	r2, r0
 801eece:	460b      	mov	r3, r1
 801eed0:	4640      	mov	r0, r8
 801eed2:	4649      	mov	r1, r9
 801eed4:	f7e9 fbb0 	bl	8008638 <__aeabi_dsub>
 801eed8:	a371      	add	r3, pc, #452	; (adr r3, 801f0a0 <__ieee754_pow+0x9d8>)
 801eeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eede:	f7e9 fd63 	bl	80089a8 <__aeabi_dmul>
 801eee2:	a371      	add	r3, pc, #452	; (adr r3, 801f0a8 <__ieee754_pow+0x9e0>)
 801eee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eee8:	4680      	mov	r8, r0
 801eeea:	4689      	mov	r9, r1
 801eeec:	4620      	mov	r0, r4
 801eeee:	4629      	mov	r1, r5
 801eef0:	f7e9 fd5a 	bl	80089a8 <__aeabi_dmul>
 801eef4:	4602      	mov	r2, r0
 801eef6:	460b      	mov	r3, r1
 801eef8:	4640      	mov	r0, r8
 801eefa:	4649      	mov	r1, r9
 801eefc:	f7e9 fb9e 	bl	800863c <__adddf3>
 801ef00:	4604      	mov	r4, r0
 801ef02:	460d      	mov	r5, r1
 801ef04:	4602      	mov	r2, r0
 801ef06:	460b      	mov	r3, r1
 801ef08:	4630      	mov	r0, r6
 801ef0a:	4639      	mov	r1, r7
 801ef0c:	f7e9 fb96 	bl	800863c <__adddf3>
 801ef10:	4632      	mov	r2, r6
 801ef12:	463b      	mov	r3, r7
 801ef14:	4680      	mov	r8, r0
 801ef16:	4689      	mov	r9, r1
 801ef18:	f7e9 fb8e 	bl	8008638 <__aeabi_dsub>
 801ef1c:	4602      	mov	r2, r0
 801ef1e:	460b      	mov	r3, r1
 801ef20:	4620      	mov	r0, r4
 801ef22:	4629      	mov	r1, r5
 801ef24:	f7e9 fb88 	bl	8008638 <__aeabi_dsub>
 801ef28:	4642      	mov	r2, r8
 801ef2a:	4606      	mov	r6, r0
 801ef2c:	460f      	mov	r7, r1
 801ef2e:	464b      	mov	r3, r9
 801ef30:	4640      	mov	r0, r8
 801ef32:	4649      	mov	r1, r9
 801ef34:	f7e9 fd38 	bl	80089a8 <__aeabi_dmul>
 801ef38:	a35d      	add	r3, pc, #372	; (adr r3, 801f0b0 <__ieee754_pow+0x9e8>)
 801ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef3e:	4604      	mov	r4, r0
 801ef40:	460d      	mov	r5, r1
 801ef42:	f7e9 fd31 	bl	80089a8 <__aeabi_dmul>
 801ef46:	a35c      	add	r3, pc, #368	; (adr r3, 801f0b8 <__ieee754_pow+0x9f0>)
 801ef48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef4c:	f7e9 fb74 	bl	8008638 <__aeabi_dsub>
 801ef50:	4622      	mov	r2, r4
 801ef52:	462b      	mov	r3, r5
 801ef54:	f7e9 fd28 	bl	80089a8 <__aeabi_dmul>
 801ef58:	a359      	add	r3, pc, #356	; (adr r3, 801f0c0 <__ieee754_pow+0x9f8>)
 801ef5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef5e:	f7e9 fb6d 	bl	800863c <__adddf3>
 801ef62:	4622      	mov	r2, r4
 801ef64:	462b      	mov	r3, r5
 801ef66:	f7e9 fd1f 	bl	80089a8 <__aeabi_dmul>
 801ef6a:	a357      	add	r3, pc, #348	; (adr r3, 801f0c8 <__ieee754_pow+0xa00>)
 801ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef70:	f7e9 fb62 	bl	8008638 <__aeabi_dsub>
 801ef74:	4622      	mov	r2, r4
 801ef76:	462b      	mov	r3, r5
 801ef78:	f7e9 fd16 	bl	80089a8 <__aeabi_dmul>
 801ef7c:	a354      	add	r3, pc, #336	; (adr r3, 801f0d0 <__ieee754_pow+0xa08>)
 801ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef82:	f7e9 fb5b 	bl	800863c <__adddf3>
 801ef86:	4622      	mov	r2, r4
 801ef88:	462b      	mov	r3, r5
 801ef8a:	f7e9 fd0d 	bl	80089a8 <__aeabi_dmul>
 801ef8e:	4602      	mov	r2, r0
 801ef90:	460b      	mov	r3, r1
 801ef92:	4640      	mov	r0, r8
 801ef94:	4649      	mov	r1, r9
 801ef96:	f7e9 fb4f 	bl	8008638 <__aeabi_dsub>
 801ef9a:	4604      	mov	r4, r0
 801ef9c:	460d      	mov	r5, r1
 801ef9e:	4602      	mov	r2, r0
 801efa0:	460b      	mov	r3, r1
 801efa2:	4640      	mov	r0, r8
 801efa4:	4649      	mov	r1, r9
 801efa6:	f7e9 fcff 	bl	80089a8 <__aeabi_dmul>
 801efaa:	2200      	movs	r2, #0
 801efac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801efb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801efb4:	4620      	mov	r0, r4
 801efb6:	4629      	mov	r1, r5
 801efb8:	f7e9 fb3e 	bl	8008638 <__aeabi_dsub>
 801efbc:	4602      	mov	r2, r0
 801efbe:	460b      	mov	r3, r1
 801efc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efc4:	f7e9 fe1a 	bl	8008bfc <__aeabi_ddiv>
 801efc8:	4632      	mov	r2, r6
 801efca:	4604      	mov	r4, r0
 801efcc:	460d      	mov	r5, r1
 801efce:	463b      	mov	r3, r7
 801efd0:	4640      	mov	r0, r8
 801efd2:	4649      	mov	r1, r9
 801efd4:	f7e9 fce8 	bl	80089a8 <__aeabi_dmul>
 801efd8:	4632      	mov	r2, r6
 801efda:	463b      	mov	r3, r7
 801efdc:	f7e9 fb2e 	bl	800863c <__adddf3>
 801efe0:	4602      	mov	r2, r0
 801efe2:	460b      	mov	r3, r1
 801efe4:	4620      	mov	r0, r4
 801efe6:	4629      	mov	r1, r5
 801efe8:	f7e9 fb26 	bl	8008638 <__aeabi_dsub>
 801efec:	4642      	mov	r2, r8
 801efee:	464b      	mov	r3, r9
 801eff0:	f7e9 fb22 	bl	8008638 <__aeabi_dsub>
 801eff4:	4602      	mov	r2, r0
 801eff6:	460b      	mov	r3, r1
 801eff8:	2000      	movs	r0, #0
 801effa:	4939      	ldr	r1, [pc, #228]	; (801f0e0 <__ieee754_pow+0xa18>)
 801effc:	f7e9 fb1c 	bl	8008638 <__aeabi_dsub>
 801f000:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801f004:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801f008:	da28      	bge.n	801f05c <__ieee754_pow+0x994>
 801f00a:	4652      	mov	r2, sl
 801f00c:	f000 f874 	bl	801f0f8 <scalbn>
 801f010:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f014:	e401      	b.n	801e81a <__ieee754_pow+0x152>
 801f016:	4b33      	ldr	r3, [pc, #204]	; (801f0e4 <__ieee754_pow+0xa1c>)
 801f018:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801f01c:	429f      	cmp	r7, r3
 801f01e:	f77f af15 	ble.w	801ee4c <__ieee754_pow+0x784>
 801f022:	4b31      	ldr	r3, [pc, #196]	; (801f0e8 <__ieee754_pow+0xa20>)
 801f024:	440b      	add	r3, r1
 801f026:	4303      	orrs	r3, r0
 801f028:	d009      	beq.n	801f03e <__ieee754_pow+0x976>
 801f02a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f02e:	2200      	movs	r2, #0
 801f030:	2300      	movs	r3, #0
 801f032:	f7e9 ff2b 	bl	8008e8c <__aeabi_dcmplt>
 801f036:	3800      	subs	r0, #0
 801f038:	bf18      	it	ne
 801f03a:	2001      	movne	r0, #1
 801f03c:	e457      	b.n	801e8ee <__ieee754_pow+0x226>
 801f03e:	4622      	mov	r2, r4
 801f040:	462b      	mov	r3, r5
 801f042:	f7e9 faf9 	bl	8008638 <__aeabi_dsub>
 801f046:	4642      	mov	r2, r8
 801f048:	464b      	mov	r3, r9
 801f04a:	f7e9 ff33 	bl	8008eb4 <__aeabi_dcmpge>
 801f04e:	2800      	cmp	r0, #0
 801f050:	f43f aefc 	beq.w	801ee4c <__ieee754_pow+0x784>
 801f054:	e7e9      	b.n	801f02a <__ieee754_pow+0x962>
 801f056:	f04f 0a00 	mov.w	sl, #0
 801f05a:	e721      	b.n	801eea0 <__ieee754_pow+0x7d8>
 801f05c:	4621      	mov	r1, r4
 801f05e:	e7d7      	b.n	801f010 <__ieee754_pow+0x948>
 801f060:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f0e0 <__ieee754_pow+0xa18>
 801f064:	f04f 0b00 	mov.w	fp, #0
 801f068:	f7ff bbbe 	b.w	801e7e8 <__ieee754_pow+0x120>
 801f06c:	f04f 0b00 	mov.w	fp, #0
 801f070:	f04f 0c00 	mov.w	ip, #0
 801f074:	f7ff bbb8 	b.w	801e7e8 <__ieee754_pow+0x120>
 801f078:	4640      	mov	r0, r8
 801f07a:	4649      	mov	r1, r9
 801f07c:	f7ff bb41 	b.w	801e702 <__ieee754_pow+0x3a>
 801f080:	9200      	str	r2, [sp, #0]
 801f082:	f7ff bb8d 	b.w	801e7a0 <__ieee754_pow+0xd8>
 801f086:	2300      	movs	r3, #0
 801f088:	f7ff bb77 	b.w	801e77a <__ieee754_pow+0xb2>
 801f08c:	f3af 8000 	nop.w
 801f090:	652b82fe 	.word	0x652b82fe
 801f094:	3c971547 	.word	0x3c971547
 801f098:	00000000 	.word	0x00000000
 801f09c:	3fe62e43 	.word	0x3fe62e43
 801f0a0:	fefa39ef 	.word	0xfefa39ef
 801f0a4:	3fe62e42 	.word	0x3fe62e42
 801f0a8:	0ca86c39 	.word	0x0ca86c39
 801f0ac:	be205c61 	.word	0xbe205c61
 801f0b0:	72bea4d0 	.word	0x72bea4d0
 801f0b4:	3e663769 	.word	0x3e663769
 801f0b8:	c5d26bf1 	.word	0xc5d26bf1
 801f0bc:	3ebbbd41 	.word	0x3ebbbd41
 801f0c0:	af25de2c 	.word	0xaf25de2c
 801f0c4:	3f11566a 	.word	0x3f11566a
 801f0c8:	16bebd93 	.word	0x16bebd93
 801f0cc:	3f66c16c 	.word	0x3f66c16c
 801f0d0:	5555553e 	.word	0x5555553e
 801f0d4:	3fc55555 	.word	0x3fc55555
 801f0d8:	3fe00000 	.word	0x3fe00000
 801f0dc:	fff00000 	.word	0xfff00000
 801f0e0:	3ff00000 	.word	0x3ff00000
 801f0e4:	4090cbff 	.word	0x4090cbff
 801f0e8:	3f6f3400 	.word	0x3f6f3400

0801f0ec <fabs>:
 801f0ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f0f0:	4619      	mov	r1, r3
 801f0f2:	4770      	bx	lr
 801f0f4:	0000      	movs	r0, r0
	...

0801f0f8 <scalbn>:
 801f0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0fa:	4616      	mov	r6, r2
 801f0fc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f100:	4604      	mov	r4, r0
 801f102:	460d      	mov	r5, r1
 801f104:	460b      	mov	r3, r1
 801f106:	b992      	cbnz	r2, 801f12e <scalbn+0x36>
 801f108:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f10c:	4303      	orrs	r3, r0
 801f10e:	d03c      	beq.n	801f18a <scalbn+0x92>
 801f110:	4b31      	ldr	r3, [pc, #196]	; (801f1d8 <scalbn+0xe0>)
 801f112:	2200      	movs	r2, #0
 801f114:	f7e9 fc48 	bl	80089a8 <__aeabi_dmul>
 801f118:	4b30      	ldr	r3, [pc, #192]	; (801f1dc <scalbn+0xe4>)
 801f11a:	429e      	cmp	r6, r3
 801f11c:	4604      	mov	r4, r0
 801f11e:	460d      	mov	r5, r1
 801f120:	da0f      	bge.n	801f142 <scalbn+0x4a>
 801f122:	a329      	add	r3, pc, #164	; (adr r3, 801f1c8 <scalbn+0xd0>)
 801f124:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f128:	f7e9 fc3e 	bl	80089a8 <__aeabi_dmul>
 801f12c:	e006      	b.n	801f13c <scalbn+0x44>
 801f12e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 801f132:	42ba      	cmp	r2, r7
 801f134:	d109      	bne.n	801f14a <scalbn+0x52>
 801f136:	4602      	mov	r2, r0
 801f138:	f7e9 fa80 	bl	800863c <__adddf3>
 801f13c:	4604      	mov	r4, r0
 801f13e:	460d      	mov	r5, r1
 801f140:	e023      	b.n	801f18a <scalbn+0x92>
 801f142:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f146:	460b      	mov	r3, r1
 801f148:	3a36      	subs	r2, #54	; 0x36
 801f14a:	f24c 3150 	movw	r1, #50000	; 0xc350
 801f14e:	428e      	cmp	r6, r1
 801f150:	dd0e      	ble.n	801f170 <scalbn+0x78>
 801f152:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 801f156:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 801f15a:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 801f15e:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 801f162:	a31b      	add	r3, pc, #108	; (adr r3, 801f1d0 <scalbn+0xd8>)
 801f164:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f168:	481d      	ldr	r0, [pc, #116]	; (801f1e0 <scalbn+0xe8>)
 801f16a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 801f16e:	e7db      	b.n	801f128 <scalbn+0x30>
 801f170:	4432      	add	r2, r6
 801f172:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f176:	428a      	cmp	r2, r1
 801f178:	dceb      	bgt.n	801f152 <scalbn+0x5a>
 801f17a:	2a00      	cmp	r2, #0
 801f17c:	dd08      	ble.n	801f190 <scalbn+0x98>
 801f17e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f182:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f186:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f18a:	4620      	mov	r0, r4
 801f18c:	4629      	mov	r1, r5
 801f18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f190:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f194:	da0c      	bge.n	801f1b0 <scalbn+0xb8>
 801f196:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 801f19a:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 801f19e:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 801f1a2:	a309      	add	r3, pc, #36	; (adr r3, 801f1c8 <scalbn+0xd0>)
 801f1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1a8:	480e      	ldr	r0, [pc, #56]	; (801f1e4 <scalbn+0xec>)
 801f1aa:	f041 011f 	orr.w	r1, r1, #31
 801f1ae:	e7bb      	b.n	801f128 <scalbn+0x30>
 801f1b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f1b4:	3236      	adds	r2, #54	; 0x36
 801f1b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f1ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f1be:	4620      	mov	r0, r4
 801f1c0:	4b09      	ldr	r3, [pc, #36]	; (801f1e8 <scalbn+0xf0>)
 801f1c2:	4629      	mov	r1, r5
 801f1c4:	2200      	movs	r2, #0
 801f1c6:	e7af      	b.n	801f128 <scalbn+0x30>
 801f1c8:	c2f8f359 	.word	0xc2f8f359
 801f1cc:	01a56e1f 	.word	0x01a56e1f
 801f1d0:	8800759c 	.word	0x8800759c
 801f1d4:	7e37e43c 	.word	0x7e37e43c
 801f1d8:	43500000 	.word	0x43500000
 801f1dc:	ffff3cb0 	.word	0xffff3cb0
 801f1e0:	8800759c 	.word	0x8800759c
 801f1e4:	c2f8f359 	.word	0xc2f8f359
 801f1e8:	3c900000 	.word	0x3c900000

0801f1ec <with_errno>:
 801f1ec:	b570      	push	{r4, r5, r6, lr}
 801f1ee:	4604      	mov	r4, r0
 801f1f0:	460d      	mov	r5, r1
 801f1f2:	4616      	mov	r6, r2
 801f1f4:	f7f9 fd9c 	bl	8018d30 <__errno>
 801f1f8:	4629      	mov	r1, r5
 801f1fa:	6006      	str	r6, [r0, #0]
 801f1fc:	4620      	mov	r0, r4
 801f1fe:	bd70      	pop	{r4, r5, r6, pc}

0801f200 <xflow>:
 801f200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f202:	4615      	mov	r5, r2
 801f204:	461c      	mov	r4, r3
 801f206:	b180      	cbz	r0, 801f22a <xflow+0x2a>
 801f208:	4610      	mov	r0, r2
 801f20a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801f20e:	e9cd 0100 	strd	r0, r1, [sp]
 801f212:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f216:	4628      	mov	r0, r5
 801f218:	4621      	mov	r1, r4
 801f21a:	f7e9 fbc5 	bl	80089a8 <__aeabi_dmul>
 801f21e:	2222      	movs	r2, #34	; 0x22
 801f220:	b003      	add	sp, #12
 801f222:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f226:	f7ff bfe1 	b.w	801f1ec <with_errno>
 801f22a:	4610      	mov	r0, r2
 801f22c:	4619      	mov	r1, r3
 801f22e:	e7ee      	b.n	801f20e <xflow+0xe>

0801f230 <__math_uflow>:
 801f230:	2200      	movs	r2, #0
 801f232:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f236:	f7ff bfe3 	b.w	801f200 <xflow>

0801f23a <__math_oflow>:
 801f23a:	2200      	movs	r2, #0
 801f23c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801f240:	f7ff bfde 	b.w	801f200 <xflow>

0801f244 <__ieee754_sqrt>:
 801f244:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 801f3e8 <__ieee754_sqrt+0x1a4>
 801f248:	ea3c 0c01 	bics.w	ip, ip, r1
 801f24c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f250:	460a      	mov	r2, r1
 801f252:	460b      	mov	r3, r1
 801f254:	4606      	mov	r6, r0
 801f256:	460d      	mov	r5, r1
 801f258:	4604      	mov	r4, r0
 801f25a:	d10e      	bne.n	801f27a <__ieee754_sqrt+0x36>
 801f25c:	4602      	mov	r2, r0
 801f25e:	f7e9 fba3 	bl	80089a8 <__aeabi_dmul>
 801f262:	4602      	mov	r2, r0
 801f264:	460b      	mov	r3, r1
 801f266:	4630      	mov	r0, r6
 801f268:	4629      	mov	r1, r5
 801f26a:	f7e9 f9e7 	bl	800863c <__adddf3>
 801f26e:	4606      	mov	r6, r0
 801f270:	460d      	mov	r5, r1
 801f272:	4630      	mov	r0, r6
 801f274:	4629      	mov	r1, r5
 801f276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f27a:	2900      	cmp	r1, #0
 801f27c:	dc0d      	bgt.n	801f29a <__ieee754_sqrt+0x56>
 801f27e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801f282:	ea5c 0c00 	orrs.w	ip, ip, r0
 801f286:	d0f4      	beq.n	801f272 <__ieee754_sqrt+0x2e>
 801f288:	b139      	cbz	r1, 801f29a <__ieee754_sqrt+0x56>
 801f28a:	4602      	mov	r2, r0
 801f28c:	f7e9 f9d4 	bl	8008638 <__aeabi_dsub>
 801f290:	4602      	mov	r2, r0
 801f292:	460b      	mov	r3, r1
 801f294:	f7e9 fcb2 	bl	8008bfc <__aeabi_ddiv>
 801f298:	e7e9      	b.n	801f26e <__ieee754_sqrt+0x2a>
 801f29a:	1512      	asrs	r2, r2, #20
 801f29c:	f000 8089 	beq.w	801f3b2 <__ieee754_sqrt+0x16e>
 801f2a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f2a4:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801f2a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f2ac:	07d2      	lsls	r2, r2, #31
 801f2ae:	bf5c      	itt	pl
 801f2b0:	005b      	lslpl	r3, r3, #1
 801f2b2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 801f2b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f2ba:	bf58      	it	pl
 801f2bc:	0064      	lslpl	r4, r4, #1
 801f2be:	2500      	movs	r5, #0
 801f2c0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801f2c4:	0062      	lsls	r2, r4, #1
 801f2c6:	1076      	asrs	r6, r6, #1
 801f2c8:	2016      	movs	r0, #22
 801f2ca:	4629      	mov	r1, r5
 801f2cc:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 801f2d0:	190f      	adds	r7, r1, r4
 801f2d2:	429f      	cmp	r7, r3
 801f2d4:	bfde      	ittt	le
 801f2d6:	1bdb      	suble	r3, r3, r7
 801f2d8:	1939      	addle	r1, r7, r4
 801f2da:	192d      	addle	r5, r5, r4
 801f2dc:	005b      	lsls	r3, r3, #1
 801f2de:	3801      	subs	r0, #1
 801f2e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801f2e4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801f2e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f2ec:	d1f0      	bne.n	801f2d0 <__ieee754_sqrt+0x8c>
 801f2ee:	4604      	mov	r4, r0
 801f2f0:	2720      	movs	r7, #32
 801f2f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801f2f6:	428b      	cmp	r3, r1
 801f2f8:	eb0c 0e00 	add.w	lr, ip, r0
 801f2fc:	dc02      	bgt.n	801f304 <__ieee754_sqrt+0xc0>
 801f2fe:	d113      	bne.n	801f328 <__ieee754_sqrt+0xe4>
 801f300:	4596      	cmp	lr, r2
 801f302:	d811      	bhi.n	801f328 <__ieee754_sqrt+0xe4>
 801f304:	f1be 0f00 	cmp.w	lr, #0
 801f308:	eb0e 000c 	add.w	r0, lr, ip
 801f30c:	da56      	bge.n	801f3bc <__ieee754_sqrt+0x178>
 801f30e:	2800      	cmp	r0, #0
 801f310:	db54      	blt.n	801f3bc <__ieee754_sqrt+0x178>
 801f312:	f101 0801 	add.w	r8, r1, #1
 801f316:	1a5b      	subs	r3, r3, r1
 801f318:	4596      	cmp	lr, r2
 801f31a:	bf88      	it	hi
 801f31c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801f320:	eba2 020e 	sub.w	r2, r2, lr
 801f324:	4464      	add	r4, ip
 801f326:	4641      	mov	r1, r8
 801f328:	005b      	lsls	r3, r3, #1
 801f32a:	3f01      	subs	r7, #1
 801f32c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801f330:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801f334:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f338:	d1dd      	bne.n	801f2f6 <__ieee754_sqrt+0xb2>
 801f33a:	4313      	orrs	r3, r2
 801f33c:	d01b      	beq.n	801f376 <__ieee754_sqrt+0x132>
 801f33e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801f3ec <__ieee754_sqrt+0x1a8>
 801f342:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801f3f0 <__ieee754_sqrt+0x1ac>
 801f346:	e9da 0100 	ldrd	r0, r1, [sl]
 801f34a:	e9db 2300 	ldrd	r2, r3, [fp]
 801f34e:	f7e9 f973 	bl	8008638 <__aeabi_dsub>
 801f352:	e9da 8900 	ldrd	r8, r9, [sl]
 801f356:	4602      	mov	r2, r0
 801f358:	460b      	mov	r3, r1
 801f35a:	4640      	mov	r0, r8
 801f35c:	4649      	mov	r1, r9
 801f35e:	f7e9 fd9f 	bl	8008ea0 <__aeabi_dcmple>
 801f362:	b140      	cbz	r0, 801f376 <__ieee754_sqrt+0x132>
 801f364:	f1b4 3fff 	cmp.w	r4, #4294967295
 801f368:	e9da 0100 	ldrd	r0, r1, [sl]
 801f36c:	e9db 2300 	ldrd	r2, r3, [fp]
 801f370:	d126      	bne.n	801f3c0 <__ieee754_sqrt+0x17c>
 801f372:	3501      	adds	r5, #1
 801f374:	463c      	mov	r4, r7
 801f376:	106b      	asrs	r3, r5, #1
 801f378:	0864      	lsrs	r4, r4, #1
 801f37a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801f37e:	07ea      	lsls	r2, r5, #31
 801f380:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801f384:	bf48      	it	mi
 801f386:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 801f38a:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 801f38e:	4620      	mov	r0, r4
 801f390:	e76d      	b.n	801f26e <__ieee754_sqrt+0x2a>
 801f392:	0ae3      	lsrs	r3, r4, #11
 801f394:	3915      	subs	r1, #21
 801f396:	0564      	lsls	r4, r4, #21
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d0fa      	beq.n	801f392 <__ieee754_sqrt+0x14e>
 801f39c:	02d8      	lsls	r0, r3, #11
 801f39e:	d50a      	bpl.n	801f3b6 <__ieee754_sqrt+0x172>
 801f3a0:	f1c2 0020 	rsb	r0, r2, #32
 801f3a4:	fa24 f000 	lsr.w	r0, r4, r0
 801f3a8:	1e55      	subs	r5, r2, #1
 801f3aa:	4094      	lsls	r4, r2
 801f3ac:	4303      	orrs	r3, r0
 801f3ae:	1b4a      	subs	r2, r1, r5
 801f3b0:	e776      	b.n	801f2a0 <__ieee754_sqrt+0x5c>
 801f3b2:	4611      	mov	r1, r2
 801f3b4:	e7f0      	b.n	801f398 <__ieee754_sqrt+0x154>
 801f3b6:	005b      	lsls	r3, r3, #1
 801f3b8:	3201      	adds	r2, #1
 801f3ba:	e7ef      	b.n	801f39c <__ieee754_sqrt+0x158>
 801f3bc:	4688      	mov	r8, r1
 801f3be:	e7aa      	b.n	801f316 <__ieee754_sqrt+0xd2>
 801f3c0:	f7e9 f93c 	bl	800863c <__adddf3>
 801f3c4:	e9da 8900 	ldrd	r8, r9, [sl]
 801f3c8:	4602      	mov	r2, r0
 801f3ca:	460b      	mov	r3, r1
 801f3cc:	4640      	mov	r0, r8
 801f3ce:	4649      	mov	r1, r9
 801f3d0:	f7e9 fd5c 	bl	8008e8c <__aeabi_dcmplt>
 801f3d4:	b120      	cbz	r0, 801f3e0 <__ieee754_sqrt+0x19c>
 801f3d6:	1ca1      	adds	r1, r4, #2
 801f3d8:	bf08      	it	eq
 801f3da:	3501      	addeq	r5, #1
 801f3dc:	3402      	adds	r4, #2
 801f3de:	e7ca      	b.n	801f376 <__ieee754_sqrt+0x132>
 801f3e0:	3401      	adds	r4, #1
 801f3e2:	f024 0401 	bic.w	r4, r4, #1
 801f3e6:	e7c6      	b.n	801f376 <__ieee754_sqrt+0x132>
 801f3e8:	7ff00000 	.word	0x7ff00000
 801f3ec:	20000750 	.word	0x20000750
 801f3f0:	20000758 	.word	0x20000758

0801f3f4 <_init>:
 801f3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3f6:	bf00      	nop
 801f3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f3fa:	bc08      	pop	{r3}
 801f3fc:	469e      	mov	lr, r3
 801f3fe:	4770      	bx	lr

0801f400 <_fini>:
 801f400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f402:	bf00      	nop
 801f404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f406:	bc08      	pop	{r3}
 801f408:	469e      	mov	lr, r3
 801f40a:	4770      	bx	lr
